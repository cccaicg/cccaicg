{"docstring": "/**\n * Parse the command line arguments.  Get the initial width and height of\n * the window if specified (-width [value] -height [value]), and the\n * applet parameters (name value pairs).\n *\n * @param args              the command line arguments.  Contains possibly\n *                          height and width, and any applet parameters\n * @param startidx          index in the args array at which to transitionStart parsing\n */\n", "func_signal": "public void parseArgs( String args[], int startidx )", "code": "{\n        for ( int idx = startidx; idx < ( args.length - startidx ); idx+=2 ) {\n            try {\n                if ( args[idx].equals( \"-width\" ) ) {\n                    initial_width = Integer.parseInt( args[idx+1] );\n                }\n                else if ( args[idx].equals( \"-height\" ) ) {\n                    initial_height = Integer.parseInt( args[idx+1] );\n                }\n                else {\n                    params.put( args[idx], args[idx+1] );\n                }\n            }\n            catch ( NumberFormatException nfe ) {\n                System.err.println(\"Warning: command line argument \"+args[idx]+\n                                   \" is not a valid number.\" );\n            }\n        }\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/*\n * PRIVATE initialization function.\n *\n * @param applet            the applet embedded in this AppletContext\n * @param default_width     the default width of the window\n * @param default_height    the default width of the window\n * @param args              the command line arguments.  Contains possibly\n *                          height and width, and any applet parameters\n * @param startidx          index in the args array at which to transitionStart parsing\n */\n", "func_signal": "private void init( Applet applet, int default_width, int default_height,\n                       String args[], int startidx )", "code": "{\n\n        //URL.setURLStreamHandlerFactory( this );\n\n        applets.addElement( applet );\n        applet.setStub(this);\n\n        initial_width = default_width;\n        initial_height = default_height;\n\n        parseArgs( args, startidx );\n\n        status = new TextField();\n        status.setEditable( false );\n\n        add( \"Center\", applet );\n        add( \"South\", status );\n\n        appletResize( initial_width, initial_height );\n\n        show();\n        applet.init();\n        applet.start();\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Description of the Method\n * \n * @param e Description of Parameter\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tString command = e.getActionCommand();\n\tLog.log(Log.LEVEL_INFO, MODULE, \"Command selected \" + command);\n\n\tif (command.equals(\"Cancel\")) {\n\t\tsetVisible(false);\n\t} else if (command.equals(\"OK\")) {\n\t\tnewParent = (Album) jAlbum.getSelectedItem();\n\t\t//if (newParent == rootAlbum) {\n\t\t//\tnewParent = null;\n\t\t//}\n\n\t\tsetVisible(false);\n\t}\n}", "path": "com\\gallery\\GalleryRemote\\MoveAlbumDialog.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Called when the applet wants to be resized.  This causes the\n * Frame (window) to be resized to accomodate the new Applet size.\n *\n * @param width     the new width of the applet\n * @param height    the new height of the applet\n */\n", "func_signal": "public void appletResize( int width, int height )", "code": "{\n\n        Insets insets = insets();\n\n        resize( ( width + insets.left + insets.right ),\n                ( height + status.preferredSize().height +\n                  insets.top + insets.bottom ) );\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n     * Shows a new document. This may be ignored by\n     * the applet context (and in our case, it is, but we'll show the\n     * user, in the status area, that the document was requested and\n     * WOULD be loaded if in a browser).\n *\n * @param url   URL to load\n */\n", "func_signal": "public void showDocument( URL url )", "code": "{\n        status.setText( \"AppletContext request to show URL \" +\n                        url.toString() );\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n     * Show a new document in a target window or frame. This may be ignored by\n     * the applet context.  (Again, it is ignored, but we'll show the\n     * request information to the user in the status area.)\n     *\n     * This method accepts the target strings:\n     *   _self\t\tshow in current frame\n     *   _parent\tshow in parent frame\n     *   _top\t\tshow in top-most frame\n     *   _blank\t\tshow in new unnamed top-level window\n     *   <other>\tshow in new top-level window named <other>\n *\n * @param url       URL to load\n * @param target    the target string\n */\n", "func_signal": "public void showDocument( URL url, String target )", "code": "{\n        status.setText( \"AppletContext request to show URL \" +\n                        url.toString() +\n                        \" in target: \" + target );\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Constructor for the main class, from the command line arguments.\n *\n * @param args  the command line arguments.  Contains the name of the applet\n *              class, possibly height and width, and any applet parameters.\n */\n", "func_signal": "public DummyAppletContext( String args[] )", "code": "{\n\n        super ( args[0] );\n\n        try {\n            Applet applet = (Applet)Class.forName( args[0] ).newInstance();\n\n            init( applet, 640, 480, args, 1 );\n        }\n        catch ( Exception e ) {\n            e.printStackTrace();\n            System.exit( 1 );\n        }\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Event handler to catch the Frame (window) close action,\n * and exit the program.\n *\n * @param evt   The event that occurred\n * @return      false if the event was not handled by this object.\n */\n", "func_signal": "public boolean handleEvent( Event evt )", "code": "{\n\n        if ( evt.id == Event.WINDOW_DESTROY ) {\n            System.exit(0);\n        }\n\n        return super.handleEvent(evt);\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * This method will take the input and escape characters that have\n * an HTML entity representation.\n * It uses a quick string -> array mapping to avoid creating thousands of\n * temporary objects.\n * \n * @param nonHTMLsrc String containing the text to make HTML-safe\n * @return String containing new copy of string with ENTITIES escaped\n */\n", "func_signal": "public static final String escape(String nonHTMLsrc)", "code": "{\n\tStringBuffer res = new StringBuffer();\n\tint l = nonHTMLsrc.length();\n\tint idx;\n\tchar c;\n\tfor (int i = 0; i < l; i++) {\n\t\tc = nonHTMLsrc.charAt(i);\n\n\t\tif (c > 255) {\n\t\t\tres.append(\"&#\").append((int) c).append(\";\");\n\t\t} else {\n\t\t\tidx = entityMap.indexOf(c);\n\t\t\tif (idx == -1) {\n\t\t\t\tres.append(c);\n\t\t\t} else {\n\t\t\t\tres.append(quickEntities[idx]);\n\t\t\t}\n\t\t}\n\t}\n\treturn res.toString();\n}", "path": "com\\gallery\\GalleryRemote\\util\\HTMLEscaper.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/*\n * open the local file\n */\n", "func_signal": "public void connect() throws IOException", "code": "{\n    if ( ! connected ) {\n        String filename = url.getFile();\n        if ( filename.charAt(1) == '|' ) {\n            StringBuffer buf = new StringBuffer( filename );\n            buf.setCharAt( 1, ':' );\n            filename = buf.toString();\n        }\n        else if ( filename.charAt(2) == '|' ) {\n            StringBuffer buf = new StringBuffer( filename );\n            buf.setCharAt( 2, ':' );\n            filename = buf.toString();\n        }\n        instream = new FileInputStream( filename );\n    }\n}", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * A little bit of unit testing\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tString text =\n\t\t\t\"This is a test of the html escaper & let's hope it really, \" +\n\t\t\t\"really <B><I>works</I></B>! Is there an \\u00f7 with an umlaut in the house?\" +\n\t\t\t\"This code is \\u00a9copyleft. I like to be paid in \\u00fa\\u00fa\\u00fas\";\n\n\tSystem.out.println(\"NOTE: Due to differences in ASCII fonts, the text \" +\n\t\t\t\"sent to the escaper may not display properly. Hopefully you will be \" +\n\t\t\t\"able to tell what it should have looked like from the escaped output.\");\n\tSystem.out.println(\"in: \" + text);\n\n\tSystem.out.println(\"out: \" + escape(text));\n\n\tSystem.out.println(\"rev: \" + unescape(escape(text) + \" & toto\"));\n}", "path": "com\\gallery\\GalleryRemote\\util\\HTMLEscaper.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Constructor for the NewAlbumDialog object\n * \n * @param owner        Description of Parameter\n * @param gallery      Description of Parameter\n * @param defaultAlbum Description of Parameter\n */\n", "func_signal": "public MoveAlbumDialog(Frame owner, Gallery gallery, Album album)", "code": "{\n\tsuper(owner, true);\n\n\tthis.gallery = gallery;\n\tthis.album = album;\n\n\tjbInit();\n\n\tpack();\n\tDialogUtil.center(this, owner);\n\n\tsetVisible(true);\n}", "path": "com\\gallery\\GalleryRemote\\MoveAlbumDialog.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Move selected Pictures up\n */\n", "func_signal": "public static void movePicturesUp()", "code": "{\n\tJList jPicturesList = core.getPicturesList();\n\tint[] indices = jPicturesList.getSelectedIndices();\n\tint[] reselect = new int[indices.length];\n\n\tArrays.sort(indices);\n\n\tfor (int i = 0; i < indices.length; i++) {\n\t\tif (indices[i] > 0) {\n\t\t\tAlbum currentAlbum = core.getCurrentAlbum();\n\n\t\t\tPicture buf = currentAlbum.getPicture(indices[i]);\n\t\t\tcurrentAlbum.setPicture(indices[i], currentAlbum.getPicture(indices[i] - 1));\n\t\t\tcurrentAlbum.setPicture(indices[i] - 1, buf);\n\t\t\t//jPicturesList.setSelectedIndex( indices[i] - 1 );\n\t\t\treselect[i] = indices[i] - 1;\n\t\t} else {\n\t\t\treselect[i] = indices[i];\n\t\t}\n\t}\n\n\tjPicturesList.setSelectedIndices(reselect);\n\tjPicturesList.ensureIndexIsVisible(jPicturesList.getSelectedIndex());\n}", "path": "com\\gallery\\GalleryRemote\\CoreUtils.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/*\n * return the open stream to the local file (open if necessary).\n */\n", "func_signal": "public InputStream getInputStream() throws IOException", "code": "{\n    if ( ! connected ) {\n        connect();\n    }\n    if ( instream == null ) {\n        throw new IOException();\n    }\n    return instream;\n}", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Main processing method for the Log object\n */\n", "func_signal": "public void run()", "code": "{\n\tSystem.out.println(\"Logger thread running\");\n\n\tBufferedWriter writer = null;\n\trunning = true;\n\ttry {\n\t\tSystem.out.println(\"Creating log file in \" + System.getProperty(\"java.io.tmpdir\"));\n\t\twriter = new BufferedWriter(new FileWriter(new File(System.getProperty(\"java.io.tmpdir\"), \"GalleryRemoteLog.txt\")));\n\t\twhile (running) {\n\t\t\tThread.sleep(sleepInterval);\n\t\t\twhile (!logLines.isEmpty()) {\n\t\t\t\tString s = logLines.remove(0);\n\t\t\t\twriter.write(s);\n\t\t\t\twriter.newLine();\n\n\t\t\t\tif (toSysOut) {\n\t\t\t\t\tSystem.out.println(s);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.flush();\n\t\t}\n\t} catch (IOException e) {\n\t\tSystem.err.println(\"Can't write to log file. Disabling log...\");\n\t\tmaxLevel = -1;\n\t} catch (InterruptedException e) {\n\t\tSystem.err.println(\"Logger thread killed\");\n\t} finally {\n\t\trunning = false;\n\t\ttry {\n\t\t\tif (writer != null) {\n\t\t\t\twriter.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tSystem.out.println(\"Logger thread shutting down\");\n}", "path": "com\\gallery\\GalleryRemote\\Log.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Constructor for the main class, given an existing applet object and a default\n * frame (window) width and height.\n *\n * @param applet            the applet embedded in this AppletContext\n * @param default_width     the default width of the window\n * @param default_height    the default width of the window\n * @param args              the command line arguments.  Contains possibly\n *                          height and width, and any applet parameters\n */\n", "func_signal": "public DummyAppletContext( Applet applet, int default_width, int default_height,\n                               String args[] )", "code": "{\n\n        super ( applet.getClass().getName() );\n\n        init( applet, default_width, default_height, args, 0 );\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Move selected Pictures down\n */\n", "func_signal": "public static void movePicturesDown()", "code": "{\n\tJList jPicturesList = core.getPicturesList();\n\tint[] indices = jPicturesList.getSelectedIndices();\n\tint[] reselect = new int[indices.length];\n\n\tArrays.sort(indices);\n\n\tfor (int i = indices.length - 1; i >= 0; i--) {\n\t\tAlbum currentAlbum = core.getCurrentAlbum();\n\n\t\tif (indices[i] < currentAlbum.sizePictures() - 1) {\n\t\t\tPicture buf = currentAlbum.getPicture(indices[i]);\n\t\t\tcurrentAlbum.setPicture(indices[i], currentAlbum.getPicture(indices[i] + 1));\n\t\t\tcurrentAlbum.setPicture(indices[i] + 1, buf);\n\t\t\t//jPicturesList.setSelectedIndex( sel + 1 );\n\t\t\treselect[i] = indices[i] + 1;\n\t\t} else {\n\t\t\treselect[i] = indices[i];\n\t\t}\n\t}\n\n\tjPicturesList.setSelectedIndices(reselect);\n\tjPicturesList.ensureIndexIsVisible(jPicturesList.getSelectedIndex());\n}", "path": "com\\gallery\\GalleryRemote\\CoreUtils.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "// Accept all directories and all gif, jpg files.\n", "func_signal": "public boolean accept(File f)", "code": "{\n\tif (f.isDirectory()) {\n\t\treturn true;\n\t}\n\n\tString extension = getExtension(f);\n\n\treturn (extension != null && validExtensions.contains(extension));\n}", "path": "com\\gallery\\GalleryRemote\\GalleryFileFilter.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/**\n * Gets the document URL.\n *\n\t * @return      a \"file:\" URL for the current directory\n */\n", "func_signal": "public URL getDocumentBase()", "code": "{\n    URL url = null;\n    try {\n        File dummy = new File( \"dummy.html\" );\n        String path = dummy.getAbsolutePath();\n        if ( ! File.separator.equals( \"/\" ) ) {\n            StringBuffer buffer = new StringBuffer();\n            if ( path.charAt(0) != File.separator.charAt(0) ) {\n                buffer.append( \"/\" );\n            }\n            StringTokenizer st = new StringTokenizer( path, File.separator );\n            while ( st.hasMoreTokens() ) {\n                buffer.append( st.nextToken() + \"/\" );\n            }\n            if ( File.separator.equals( \"\\\\\" ) &&\n                 ( buffer.charAt(2) == ':' ) ) {\n                buffer.setCharAt( 2, '|' );\n            }\n            else {\n            }\n            path = buffer.toString();\n            path = path.substring( 0, path.length()-1 );\n        }\n        url = new URL( \"file\", \"\", -1, path );\n    }\n    catch ( MalformedURLException mue ) {\n        mue.printStackTrace();\n    }\n    return url;\n}", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/*\n     * PRIVATE utility function.  Ignores the protocol, and returns a\n     * filename for a file on the local filesystem (which may or may\n     * not exist, of course).\n *\n * @param url   URL to be converted to a filename on the local\n *              filesystem.\n * @return      the filename\n */\n", "func_signal": "private String filenameFromURL( URL url )", "code": "{\n        String filename = url.getFile();\n        if ( filename.charAt(1) == '|' ) {\n            StringBuffer buf = new StringBuffer( filename );\n            buf.setCharAt( 1, ':' );\n            filename = buf.toString();\n        }\n        else if ( filename.charAt(2) == '|' ) {\n            StringBuffer buf = new StringBuffer( filename );\n            buf.setCharAt( 2, ':' );\n            filename = buf.toString();\n        }\n        return filename;\n    }", "path": "com\\gallery\\GalleryRemote\\DummyAppletContext.java", "repo_name": "gallery/gallery-remote", "stars": 10, "license": "gpl-2.0", "language": "java", "size": 5580}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitFilledNewArrayIns(int, java.lang.String, int[])\n */\n", "func_signal": "@Override\npublic void visitFilledNewArrayIns(int opcode, String type, int[] regs)", "code": "{\n    info(opcode, \"TEMP=new %s[%d]\", Type.getType(type).getElementType().getClassName(), regs.length);\n    for (int i = 0; i < regs.length; i++) {\n        info(opcode, \"TEMP[%d]=v%d\", i, regs[i]);\n    }\n    super.visitFilledNewArrayIns(opcode, type, regs);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitFillArrayInsn(int, int, int, int, java.lang.Object[])\n */\n", "func_signal": "@Override\npublic void visitFillArrayInsn(int opcode, int reg, int elemWidth, int initLength, Object[] values)", "code": "{\n\n    StringBuilder sb = new StringBuilder();\n    for (Object value : values) {\n        sb.append(',').append(value);\n    }\n    if (sb.length() > 0) {\n        sb.deleteCharAt(0);\n    }\n\n    info(opcode, \"v%d[0..%d]=[%s]\", reg, initLength - 1, sb.toString());\n\n    super.visitFillArrayInsn(opcode, reg, elemWidth, initLength, values);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitInInsn(int, int, int, int)\n */\n", "func_signal": "@Override\npublic void visitInInsn(int opcode, int saveToReg, int opReg, int opValueOrReg)", "code": "{\n    switch (opcode) {\n    case OP_AND_INT:\n    case OP_AND_LONG:\n        info(opcode, \"v%d = v%d & v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_OR_INT:\n    case OP_OR_LONG:\n        info(opcode, \"v%d = v%d | v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_XOR_INT:\n    case OP_XOR_LONG:\n        info(opcode, \"v%d = v%d ^ v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_CMP_LONG:\n        info(opcode, \"v%d = v%d - v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_MUL_INT:\n    case OP_MUL_LONG:\n    case OP_MUL_FLOAT:\n    case OP_MUL_DOUBLE:\n        info(opcode, \"v%d = v%d * v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_DIV_INT:\n    case OP_DIV_LONG:\n    case OP_DIV_FLOAT:\n    case OP_DIV_DOUBLE:\n        info(opcode, \"v%d = v%d / v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_ADD_INT:\n    case OP_ADD_LONG:\n    case OP_ADD_FLOAT:\n    case OP_ADD_DOUBLE:\n        info(opcode, \"v%d = v%d + v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_SUB_INT:\n    case OP_SUB_DOUBLE:\n    case OP_SUB_FLOAT:\n    case OP_SUB_LONG:\n        info(opcode, \"v%d = v%d - v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_REM_LONG:\n    case OP_REM_INT:\n    case OP_REM_FLOAT:\n    case OP_REM_DOUBLE:\n        info(opcode, \"v%d = v%d %% v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_CMPL_DOUBLE:\n    case OP_CMPL_FLOAT:\n        info(opcode, \"v%d = v%d - v%d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_CMPG_DOUBLE:\n    case OP_CMPG_FLOAT:\n        info(opcode, \"v%d = v%d - v%d\", saveToReg, opValueOrReg, opReg);\n        break;\n    case OP_MUL_INT_LIT16:\n        info(opcode, \"v%d = v%d * %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_DIV_INT_LIT16:\n        info(opcode, \"v%d = v%d / %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_REM_INT_LIT16:\n        info(opcode, \"v%d = v%d %% %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_ADD_INT_LIT16:\n        info(opcode, \"v%d = v%d + %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_AND_INT_LIT16:\n        info(opcode, \"v%d = v%d & %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_OR_INT_LIT16:\n        info(opcode, \"v%d = v%d | %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_XOR_INT_LIT16:\n        info(opcode, \"v%d = v%d ^ %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_AND_INT_LIT8:\n        info(opcode, \"v%d = v%d & %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_ADD_INT_LIT8:\n        info(opcode, \"v%d = v%d + %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_REM_INT_LIT8:\n        info(opcode, \"v%d = v%d %% %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_DIV_INT_LIT8:\n        info(opcode, \"v%d = v%d / %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_MUL_INT_LIT8:\n        info(opcode, \"v%d = v%d * %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_SHR_INT_LIT8:\n        info(opcode, \"v%d = v%d >> %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_SHL_INT_LIT8:\n        info(opcode, \"v%d = v%d << %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_USHR_INT_LIT8:\n        info(opcode, \"v%d = v%d >>> %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_OR_INT_LIT8:\n        info(opcode, \"v%d = v%d | %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    case OP_XOR_INT_LIT8:\n        info(opcode, \"v%d = v%d ^ %d\", saveToReg, opReg, opValueOrReg);\n        break;\n    }\n    super.visitInInsn(opcode, saveToReg, opReg, opValueOrReg);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * @param type\n * @param visitable\n */\n", "func_signal": "public Ann(String type, boolean visitable)", "code": "{\n    super();\n    this.type = type;\n    this.visible = visitable;\n}", "path": "ad-inspector\\src\\pxb\\android\\dex2jar\\v3\\Ann.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitLookupSwitchInsn(int, int, int, int[], int[])\n */\n", "func_signal": "@Override\npublic void visitLookupSwitchInsn(int opcode, int reg, Label label, int[] cases, Label[] label2)", "code": "{\n    info(opcode, \"switch(v%d)\", reg);\n    for (int i = 0; i < cases.length; i++) {\n        info(-1, \"case %d: goto L%s\", cases[i], labels(label2[i]));\n    }\n    info(-1, \"default: goto L%s\", labels(label));\n    super.visitLookupSwitchInsn(opcode, reg, label, cases, label2);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * Returns style information - array of int triplets,\n * where in each triplet:\n * \t* first int is index of tag name ('b','i', etc.)\n * \t* second int is tag start index in string\n * \t* third int is tag end index in string\n */\n", "func_signal": "private int[] getStyle(int index)", "code": "{\n\tif (m_styleOffsets==null || m_styles==null ||\n\t\tindex>=m_styleOffsets.length)\n\t{\n\t\treturn null;\n\t}\n\tint offset=m_styleOffsets[index]/4;\n\tint style[];\n\t{\n\t\tint count=0;\n\t\tfor (int i=offset;i<m_styles.length;++i) {\n\t\t\tif (m_styles[i]==-1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount+=1;\n\t\t}\n\t\tif (count==0 || (count%3)!=0) {\n\t\t\treturn null;\n\t\t}\n\t\tstyle=new int[count];\n\t}\n\tfor (int i=offset,j=0;i<m_styles.length;) {\n\t\tif (m_styles[i]==-1) {\n\t\t\tbreak;\n\t\t}\n\t\tstyle[j++]=m_styles[i++];\n\t}\n\treturn style;\n}", "path": "axml-parser\\src\\android\\content\\res\\StringBlock.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitLabel(int)\n */\n", "func_signal": "@Override\npublic void visitLabel(Label label)", "code": "{\n    boolean find = false;\n    for (TryCatch tc : trys) {\n        if (label.equals(tc.end)) {\n            info(-1, \" } // TC_%d\", trys.indexOf(tc));\n            find = true;\n            break;\n        }\n\n    }", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * Finds index of the string.\n * Returns -1 if the string was not found.\n */\n", "func_signal": "public int find(String string)", "code": "{\n\tif (string==null) {\n\t\treturn -1;\n\t}\n\tfor (int i=0;i!=m_stringOffsets.length;++i) {\n\t\tint offset=m_stringOffsets[i];\n\t\tint length=getShort(m_strings,offset);\n\t\tif (length!=string.length()) {\n\t\t\tcontinue;\n\t\t}\n\t\tint j=0;\n\t\tfor (;j!=length;++j) {\n\t\t\toffset+=2;\n\t\t\tif (string.charAt(j)!=getShort(m_strings,offset)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j==length) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "path": "axml-parser\\src\\android\\content\\res\\StringBlock.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitInInsn(int, int, int)\n */\n", "func_signal": "@Override\npublic void visitInInsn(int opcode, int saveToReg, int opReg)", "code": "{\n    switch (opcode) {\n    case OP_AND_INT_2ADDR:\n    case OP_AND_LONG_2ADDR:\n        info(opcode, \"v%d &= v%d\", saveToReg, opReg);\n        break;\n    case OP_OR_INT_2ADDR:\n    case OP_OR_LONG_2ADDR:\n        info(opcode, \"v%d |= v%d\", saveToReg, opReg);\n        break;\n    case OP_XOR_INT_2ADDR:\n    case OP_XOR_LONG_2ADDR:\n        info(opcode, \"v%d ^= v%d\", saveToReg, opReg);\n        break;\n    case OP_MUL_LONG_2ADDR:\n    case OP_MUL_INT_2ADDR:\n    case OP_MUL_FLOAT_2ADDR:\n    case OP_MUL_DOUBLE_2ADDR:\n        info(opcode, \"v%d *= v%d\", saveToReg, opReg);\n        break;\n    case OP_SUB_INT_2ADDR:\n    case OP_SUB_LONG_2ADDR:\n    case OP_SUB_FLOAT_2ADDR:\n    case OP_SUB_DOUBLE_2ADDR:\n        info(opcode, \"v%d -= v%d\", saveToReg, opReg);\n        break;\n    case OP_REM_INT_2ADDR:\n    case OP_REM_LONG_2ADDR:\n        info(opcode, \"v%d %%= v%d\", saveToReg, opReg);\n        break;\n    case OP_DIV_INT_2ADDR:\n    case OP_DIV_LONG_2ADDR:\n    case OP_DIV_FLOAT_2ADDR:\n    case OP_DIV_DOUBLE_2ADDR:\n        info(opcode, \"v%d /= v%d\", saveToReg, opReg);\n        break;\n    case OP_ADD_INT_2ADDR:\n    case OP_ADD_LONG_2ADDR:\n    case OP_ADD_FLOAT_2ADDR:\n    case OP_ADD_DOUBLE_2ADDR:\n        info(opcode, \"v%d += v%d\", saveToReg, opReg);\n        break;\n    case OP_NEG_INT:\n    case OP_NEG_DOUBLE:\n    case OP_NEG_FLOAT:\n    case OP_NEG_LONG:\n        info(opcode, \"v%d = ~v%d\", saveToReg, opReg);\n        break;\n    case OP_MOVE_OBJECT:\n    case OP_MOVE:\n    case OP_MOVE_WIDE:\n    case OP_MOVE_OBJECT_FROM16:\n    case OP_MOVE_FROM16:\n    case OP_MOVE_WIDE_FROM16:\n        info(opcode, \"v%d = v%d\", saveToReg, opReg);\n        break;\n    case OP_INT_TO_BYTE:\n        info(opcode, \"v%d = (byte)v%d\", saveToReg, opReg);\n        break;\n    case OP_INT_TO_CHAR:\n        info(opcode, \"v%d = (char)v%d\", saveToReg, opReg);\n        break;\n    case OP_INT_TO_DOUBLE:\n    case OP_INT_TO_FLOAT:\n    case OP_INT_TO_LONG:\n        info(opcode, \"v%d = v%d\", saveToReg, opReg);\n        break;\n    case OP_INT_TO_SHORT:\n        info(opcode, \"v%d = (short)v%d\", saveToReg, opReg);\n        break;\n    case OP_LONG_TO_DOUBLE:\n    case OP_LONG_TO_FLOAT:\n        info(opcode, \"v%d = v%d\", saveToReg, opReg);\n        break;\n    case OP_LONG_TO_INT:\n        info(opcode, \"v%d = (int)v%d\", saveToReg, opReg);\n        break;\n    case OP_DOUBLE_TO_FLOAT:\n        info(opcode, \"v%d = (float)v%d\", saveToReg, opReg);\n        break;\n    case OP_DOUBLE_TO_INT:\n        info(opcode, \"v%d = (int)v%d\", saveToReg, opReg);\n        break;\n    case OP_DOUBLE_TO_LONG:\n        info(opcode, \"v%d = (long)v%d\", saveToReg, opReg);\n        break;\n    case OP_FLOAT_TO_INT:\n        info(opcode, \"v%d = (int)v%d\", saveToReg, opReg);\n        break;\n    case OP_FLOAT_TO_DOUBLE:\n        info(opcode, \"v%d = v%d\", saveToReg, opReg);\n        break;\n    case OP_FLOAT_TO_LONG:\n        info(opcode, \"v%d = (long)v%d\", saveToReg, opReg);\n        break;\n\n    case OP_ARRAY_LENGTH:\n        info(opcode, \"v%d = v%d.length\", saveToReg, opReg);\n        break;\n    }\n    super.visitInInsn(opcode, saveToReg, opReg);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * Reads whole (including chunk type) string block from stream.\n * Stream must be at the chunk type.\n */\n", "func_signal": "public static StringBlock read(IntReader reader) throws IOException", "code": "{\n\tChunkUtil.readCheckType(reader,CHUNK_TYPE);\n\tint chunkSize=reader.readInt();\n\tint stringCount=reader.readInt();\n\tint styleOffsetCount=reader.readInt();\n\t/*?*/reader.readInt();\n\tint stringsOffset=reader.readInt();\n\tint stylesOffset=reader.readInt();\n\t\n\tStringBlock block=new StringBlock();\n\tblock.m_stringOffsets=reader.readIntArray(stringCount);\n\tif (styleOffsetCount!=0) {\n\t\tblock.m_styleOffsets=reader.readIntArray(styleOffsetCount);\n\t}\n\t{\n\t\tint size=((stylesOffset==0)?chunkSize:stylesOffset)-stringsOffset;\n\t\tif ((size%4)!=0) {\n\t\t\tthrow new IOException(\"String data size is not multiple of 4 (\"+size+\").\");\n\t\t}\n\t\tblock.m_strings=reader.readIntArray(size/4);\n\t}\n\tif (stylesOffset!=0) {\n\t\tint size=(chunkSize-stylesOffset);\n\t\tif ((size%4)!=0) {\n\t\t\tthrow new IOException(\"Style data size is not multiple of 4 (\"+size+\").\");\n\t\t}\n\t\tblock.m_styles=reader.readIntArray(size/4);\n\t}\n\n\treturn block;\t\n}", "path": "axml-parser\\src\\android\\content\\res\\StringBlock.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitTryCatch(int, int, int, java.lang.String)\n */\n", "func_signal": "@Override\npublic void visitTryCatch(Label start, Label end, Label handler, String type)", "code": "{\n    TryCatch tc = new TryCatch(start, end, handler, type);\n    trys.add(tc);\n    int id = trys.indexOf(tc);\n    if (type == null) {\n        out.printf(\"TR_%d L%s ~ L%s > L%s all\\n\", id, labels(start), labels(end), labels(handler));\n    } else {\n        out.printf(\"TR_%d L%s ~ L%s > L%s %s\\n\", id, labels(start), labels(end), labels(handler), type);\n    }\n    super.visitTryCatch(start, end, handler, type);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * Returns number of strings in block. \n */\n", "func_signal": "public int getCount()", "code": "{\n\treturn m_stringOffsets!=null?\n\t\tm_stringOffsets.length:\n\t\t0;\n}", "path": "axml-parser\\src\\android\\content\\res\\StringBlock.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * <p>\n * Creates an InputStream from a file, and fills it with the complete file.\n * Thus, available() on the returned InputStream will return the full number\n * of bytes the file contains\n * </p>\n * \n * @param fkey\n *            The filename\n * @return The filled InputStream\n * @exception IOException\n *                , if the Streams couldn't be created.\n **/\n", "func_signal": "private static InputStream fullStream(InputStream fkey) throws IOException", "code": "{\n\tDataInputStream dis = new DataInputStream(fkey);\n\tbyte[] bytes = new byte[dis.available()];\n\tdis.readFully(bytes);\n\tByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n\treturn bais;\n}", "path": "apk-misc\\src\\org\\fxp\\android\\apk\\ImportKey.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitTableSwitchInsn(int, int, int, int, int, int[])\n */\n", "func_signal": "@Override\npublic void visitTableSwitchInsn(int opcode, int reg, int first_case, int last_case, Label label, Label[] labels)", "code": "{\n    info(opcode, \"switch(v%d)\", reg);\n    for (int i = 0; i < labels.length; i++) {\n        info(opcode, \"case %d: goto L%s\", first_case + i, labels(labels[i]));\n    }\n    info(opcode, \"default: goto L%s\", labels(label));\n\n    super.visitTableSwitchInsn(opcode, reg, first_case, last_case, label, labels);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitTypeInsn(int, java.lang.String, int, int)\n */\n", "func_signal": "@Override\npublic void visitTypeInsn(int opcode, String type, int toReg, int fromReg)", "code": "{\n    switch (opcode) {\n    case OP_INSTANCE_OF:\n        info(opcode, \"v%d=v%d instanceof %s\", toReg, fromReg, Type.getType(type).getClassName());\n        break;\n    }\n    super.visitTypeInsn(opcode, type, toReg, fromReg);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitArrayInsn(int, java.lang.String, int, int)\n */\n", "func_signal": "@Override\npublic void visitArrayInsn(int opcode, String type, int saveToReg, int demReg)", "code": "{\n    String type_show = Type.getType(type).getElementType().getClassName();\n    info(opcode, \"v%d=new %s[v%d]\", saveToReg, type_show, demReg);\n    super.visitArrayInsn(opcode, type, saveToReg, demReg);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitInsn(int)\n */\n", "func_signal": "@Override\npublic void visitInsn(int opcode)", "code": "{\n    switch (opcode) {\n    case OP_RETURN_VOID:\n        info(opcode, \"return\");\n        break;\n    }\n    super.visitInsn(opcode);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * @param dcv\n */\n", "func_signal": "public DumpDexCodeAdapter(DexCodeVisitor dcv, Method m, PrintWriter out)", "code": "{\n    super(dcv);\n    this.m = m;\n    this.out = out;\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see pxb.android.dex2jar.visitors.DexCodeAdapter#visitArrayInsn(int, int, int, int)\n */\n", "func_signal": "@Override\npublic void visitArrayInsn(int opcode, int value, int array, int index)", "code": "{\n    switch (opcode) {\n    case OP_APUT:\n    case OP_APUT_BOOLEAN:\n    case OP_APUT_BYTE:\n    case OP_APUT_CHAR:\n    case OP_APUT_OBJECT:\n    case OP_APUT_SHORT:\n    case OP_APUT_WIDE:\n        info(opcode, \"v%d[v%d]=v%d\", array, index, value);\n        break;\n    case OP_AGET:\n    case OP_AGET_BOOLEAN:\n    case OP_AGET_BYTE:\n    case OP_AGET_CHAR:\n    case OP_AGET_OBJECT:\n    case OP_AGET_SHORT:\n    case OP_AGET_WIDE:\n        info(opcode, \"v%d=v%d[v%d]\", value, array, index);\n        break;\n    }\n    super.visitArrayInsn(opcode, value, array, index);\n}", "path": "apk-misc\\src\\pxb\\android\\dex2jar\\dump\\DumpDexCodeAdapter.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * Returns raw string (without any styling information) at specified index.\n */\n", "func_signal": "public String getString(int index)", "code": "{\n\tif (index<0 ||\n\t\tm_stringOffsets==null ||\n\t\tindex>=m_stringOffsets.length)\n\t{\n\t\treturn null;\n\t}\n\tint offset=m_stringOffsets[index];\n\tint length=getShort(m_strings,offset);\n\tStringBuilder result=new StringBuilder(length);\n\tfor (;length!=0;length-=1) {\n\t\toffset+=2;\n\t\tresult.append((char)getShort(m_strings,offset));\n\t}\n\treturn result.toString();\n}", "path": "axml-parser\\src\\android\\content\\res\\StringBlock.java", "repo_name": "fxp/apk-parser", "stars": 10, "license": "None", "language": "java", "size": 82716}
{"docstring": "/**\n * Spin up a lot of threads and have them all create variants 3/2007 there\n * have been several reports in multi-threaded servers that show init()\n * failing\n * \n */\n", "func_signal": "public void testManyThreadedInit()", "code": "{\n\tVariantInitTestThread threads[] = new VariantInitTestThread[75];\n\n\tSystem.out.println(\"Starting thread test (\" + threads.length\n\t\t\t+ \" threads each creating 10000 objects).\"\n\t\t\t+ \" This may take 30 seconds or more.\");\n\tfor (int i = 0; i < threads.length; i++) {\n\t\tthreads[i] = new VariantInitTestThread(\"thread-\" + i, 10000);\n\t}\n\tfor (int i = 0; i < threads.length; i++) {\n\t\tthreads[i].start();\n\t}\n\tint numComplete = 0;\n\twhile (numComplete < threads.length) {\n\t\t// give the works time to work\n\t\ttry {\n\t\t\tThread.sleep(333);\n\t\t} catch (InterruptedException ie) {\n\t\t\t// do nothing\n\t\t}\n\t\tnumComplete = 0;\n\t\tfor (int i = 0; i < threads.length; i++) {\n\t\t\tif (threads[i].isComplete) {\n\t\t\t\tnumComplete++;\n\t\t\t}\n\t\t}\n\t\t// System.out.print(\"[\"+numComplete+\"/\"+threads.length+\"]\");\n\t}\n\tSystem.out.println(\"Finished thread test\");\n}", "path": "unittest\\org\\racob\\com\\VariantTest.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * Detects whether this is a 32-bit JVM.\n * \n * @return {@code true} if this is a 32-bit JVM.\n */\n", "func_signal": "protected static boolean shouldLoad32Bit()", "code": "{\n\t// This guesses whether we are running 32 or 64 bit Java.\n\t// This works for Sun and IBM JVMs version 5.0 or later.\n\t// May need to be adjusted for non-Sun JVMs.\n\n\tString bits = System.getProperty(\"sun.arch.data.model\", \"?\");\n\tif (bits.equals(\"32\"))\n\t\treturn true;\n\telse if (bits.equals(\"64\"))\n\t\treturn false;\n\n\t// this works for jRocket\n\tString arch = System.getProperty(\"java.vm.name\", \"?\");\n\tif (arch.toLowerCase().indexOf(\"64-bit\") >= 0)\n\t\treturn false;\n\n\treturn true;\n}", "path": "src\\org\\racob\\com\\LibraryLoader.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * make sure variant with no backing store works.\n * \n */\n", "func_signal": "public void testUninitializedVariant()", "code": "{\n\tVariant v;\n\t// Variants created without parameters are auto set to VariantEmpty\n\tv = new Variant();\n\ttry {\n\t\tif (v.getvt() == Variant.VariantEmpty) {\n\t\t\t// successful\n\t\t\t// System.out.println(\"Variant initialized without parameters\n\t\t\t// correctly set to empty\");\n\t\t} else {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"getvt() on uninitialized variant shoud have returned VariantEmpty, instead returned \"\n\t\t\t\t\t\t\t+ v.getvt());\n\t\t}\n\t} catch (IllegalStateException ise) {\n\t\tthrow new RuntimeException(\n\t\t\t\t\"getvt() on uninitialized variant shoud have succeeded, but instead threw exception\");\n\t}\n\ttry {\n\t\tv.toString();\n\t} catch (IllegalStateException ise) {\n\t\tfail(\"toString() should never throw a runtime exception\");\n\t\tthrow new RuntimeException(\n\t\t\t\t\"toString() should not blow up even with uninitialized Variant\");\n\t}\n\n}", "path": "unittest\\org\\racob\\com\\VariantTest.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * Developer note: This method MUST be synchronized with the DLL names\n * created as part of the build process in build.xml\n * <p>\n * The DLL name is \"racob\\<PLATFORM\\>.release\"\n * \n * @return the preferred name of the DLL adjusted for this platform and\n *         version without the \".dll\" extension\n */\n", "func_signal": "public static String getPreferredDLLName()", "code": "{\n\tif (shouldLoad32Bit()) {\n\t\treturn \"racob\" + \"-\" + DLL_NAME_MODIFIER_32_BIT;\n\t} else {\n\t\treturn \"racob\" + \"-\" + DLL_NAME_MODIFIER_64_BIT;\n\t}\n}", "path": "src\\org\\racob\\com\\LibraryLoader.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * A String representation of the variant if possible.  It will return\n * \"null\" if VariantEmpty, VariantError, or VariantNull.\n *\n * @return a reasonable string representation\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    int vt = getvt();\n\n    if (vt == VariantEmpty || vt == VariantError || vt == VariantNull) return \"null\";\n    if (vt == VariantString) return getString();\n\n    try {\n        Object foo = toJavaObject();\n        // rely on java objects to do the right thing\n        if (foo == null) return \"{Java null}\";\n\n        return foo.toString();\n    } catch (RuntimeException e) {\n        // some types do not generate a good description yet\n        return \"Description not available for type: \" + getvt();\n    }\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * Cover for native method so we can cover it.\n * <p>\n * This cannot convert an object to a byRef. It can convert from byref to\n * not byref\n *\n * @param in type to convert this variant too\n * @return Variant returns this same object so folks can change when\n *         replacing calls toXXX() with changeType().getXXX()\n */\n", "func_signal": "public Variant changeType(short in)", "code": "{\n    this.type = in;\n    // FIXME:  This needs some round tripping to make sure it is valid\n    return this;\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @param newThreadName\n *            the name for the thread\n * @param iStartCount\n *            number of threads to start with\n */\n", "func_signal": "public VariantInitTestThread(String newThreadName, int iStartCount)", "code": "{\n\tsuper(newThreadName);\n\tinitialRunSize = iStartCount;\n\n}", "path": "unittest\\org\\racob\\com\\VariantTest.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @return returns the value as a float if the type is of type float\n * @throws IllegalStateException if variant is not of the requested type\n */\n", "func_signal": "public float getFloat()", "code": "{\n    if (!isA(VariantFloat)) illegal(\"getFloat\", \"VariantFloat\");\n    return ((Float) value).floatValue();\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * verify decimal works right\n */\n", "func_signal": "public void testDecimalConversion()", "code": "{\n\tfor (int i = 10; i >= -10; i--) {\n\t\tVariant v = new Variant(new BigDecimal(i));\n\t\t// first see if we can get it back as decimal\n\t\tassertEquals(\"conversion back to decimal failed \" + i,\n\t\t\t\tnew BigDecimal(i), v.getDecimal());\n\t\tv.changeType(Variant.VariantFloat);\n\t\t// now see if a float conversion would work\n\t\tassertEquals(\"conversion to float failed \" + i, new Float(i), v\n\t\t\t\t.getFloat());\n\t\t// now convert it back to decimal for reassignment\n\t\tv.changeType(Variant.VariantDecimal);\n\t\tassertTrue(\"Failed conversion of type back to Decimal \" + i, v\n\t\t\t\t.getvt() == Variant.VariantDecimal);\n\t}\n\n}", "path": "unittest\\org\\racob\\com\\VariantTest.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * return the int value held in this variant if it is an int or a short.\n * Throws for other types.\n *\n * @return int contents of the windows memory\n * @throws IllegalStateException\n *             if variant is not of the requested type\n */\n", "func_signal": "public int getInt()", "code": "{\n    if (isA(VariantUnsignedInt)) return ((Integer) value).intValue();\n    if (isA(VariantInt)) return ((Integer) value).intValue();\n    if (isA(VariantShort)) return ((Short) value).shortValue();\n    illegal(\"getInt\", \"VariantInt\");\n    return -1; // not reached\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @return string contents of the variant.\n * @throws IllegalStateException if this variant is not of type String\n */\n", "func_signal": "public String getString()", "code": "{\n    if (!isA(VariantString)) illegal(\"getString\", \"VariantString\");\n    return (String) value;\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * see what happens when we conver to by ref\n * \n */\n", "func_signal": "public void testSomeChangeVT()", "code": "{\n\tVariant v;\n\t// the code shows e shouldn't need to use a returned Variant but the\n\t// test says we do\n\tVariant vConverted;\n\tv = new Variant(53.3);\n\tshort originalVT = v.getvt();\n\tshort modifier;\n\n\tmodifier = Variant.VariantShort;\n\tvConverted = v.changeType(modifier);\n\tif (vConverted.getvt() != modifier) {\n\t\tfail(\"Failed to change Variant \" + originalVT + \" using mask \"\n\t\t\t\t+ modifier + \" resulted in \" + vConverted.getvt());\n\t}\n\n\tmodifier = Variant.VariantString;\n\tvConverted = v.changeType(modifier);\n\tif (vConverted.getvt() != modifier) {\n\t\tfail(\"Failed to change Variant \" + originalVT + \" using mask \"\n\t\t\t\t+ modifier + \" resulted in \" + vConverted.getvt());\n\t}\n\n\t// can't convert to byref!\n\tmodifier = Variant.VariantByref | Variant.VariantShort;\n\tvConverted = v.changeType(modifier);\n\tif (vConverted.getvt() == modifier) {\n\t\tfail(\"Should not have been able to change Variant \" + originalVT\n\t\t\t\t+ \" using mask \" + modifier + \" resulted in \"\n\t\t\t\t+ vConverted.getvt());\n\t}\n}", "path": "unittest\\org\\racob\\com\\VariantTest.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @return returns the value as a boolean, throws an exception if its not.\n * @throws IllegalStateException if variant is not of the requested type\n */\n", "func_signal": "public boolean getBoolean()", "code": "{\n    if (!isA(VariantBoolean)) illegal(\"getBoolean\", \"VariantBoolean\");\n    return ((Boolean) value).booleanValue();\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * This verifies that toJavaObject() works for all of the main data types\n * when they exist as a byRef version.\n * <p>\n * It compares the toJavaObject() for a byref against the toJavaObject() for\n * the regular.\n * \n */\n", "func_signal": "public void testByRefToJavaObject()", "code": "{\n\tVariant v = null;\n\tVariant vByRef = null;\n\n\tv = new Variant(new Float(53.3), false);\n\tvByRef = new Variant(new Float(53.3), true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\tv = new Variant(new Double(53.3), false);\n\tvByRef = new Variant(new Double(53.3), true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\n\tv = new Variant(new Boolean(true), false);\n\tvByRef = new Variant(new Boolean(true), true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\n\tv = new Variant(new Integer(53), false);\n\tvByRef = new Variant(new Integer(53), true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\n\tv = new Variant(new Short((short) 53), false);\n\tvByRef = new Variant(new Short((short) 53), true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\n\tv = new Variant(\"53.33\", false);\n\tvByRef = new Variant(\"53.33\", true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\n\t// Ugh, you have to pick a magic number whose scale is less than 28\n\t// 53.53 had a scale of 64 and 53.52 had a scale of 47\n\tBigDecimal testDecimal = new BigDecimal(53.50);\n\tv = new Variant(testDecimal, false);\n\tvByRef = new Variant(testDecimal, true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\n\tDate now = new Date();\n\tv = new Variant(now, false);\n\tvByRef = new Variant(now, true);\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n}", "path": "unittest\\org\\racob\\com\\VariantTest.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @return the date\n * @throws IllegalStateException if variant is not of the requested type\n */\n", "func_signal": "public Date getDate()", "code": "{\n    if (!isA(VariantDate)) illegal(\"getDate\", \"VariantDate\");\n    return (Date) value;\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @return this object as a dispatch\n * @throws IllegalStateException if wrong variant type\n */\n", "func_signal": "public Dispatch getDispatch()", "code": "{\n    if (!isA(VariantDispatch)) illegal(\"getDispatch\", \"VariantDispatch\");\n    return (Dispatch) value;\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * do some testing around currencies\n */\n", "func_signal": "public void testCurrencyHandling()", "code": "{\n\tVariant v = null;\n\tVariant vByRef = null;\n\n\t// need to do currency also\n\t// currency is an integer scaled up by 10,000 to give 4 digits to the\n\t// right of the decimal\n\tint currencyScale = 10000;\n\tlong twentyThousand = 20000 * currencyScale;\n\tCurrency twentyThousandAsCurrency = new Currency(twentyThousand);\n\tv = new Variant(twentyThousandAsCurrency, false);\n\tvByRef = new Variant(twentyThousandAsCurrency, true);\n\tif (!(v.toJavaObject() instanceof Currency)) {\n\t\tfail(\"v.toJavaObject was not Long for currency but was: \"\n\t\t\t\t+ v.toJavaObject());\n\t}\n\tif (!v.toJavaObject().equals(vByRef.toJavaObject())) {\n\t\tfail(v.toString() + \" could not make type \" + v.getvt() + \" and \"\n\t\t\t\t+ vByRef.getvt() + \" java objects come out the same\");\n\t}\n\tlong twentyThousandDotSeven = twentyThousand + 700;\n\tCurrency twentyThousandDotSevenAsCurrency = new Currency(\n\t\t\ttwentyThousandDotSeven);\n\t// use the primitive constructor\n\tv = new Variant(twentyThousandDotSevenAsCurrency);\n\tassertEquals(\"failed test with \" + twentyThousandDotSeven,\n\t\t\ttwentyThousandDotSeven, v.getCurrency().longValue());\n\n}", "path": "unittest\\org\\racob\\com\\VariantTest.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @return the error value \n * @throws IllegalStateException if variant is not of the requested type\n */\n", "func_signal": "public int getError()", "code": "{\n    if (!isA(VariantError)) illegal(\"getError\", \"VariantError\");\n    return ((Integer) value).intValue();\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * @return the short value\n * @throws IllegalStateException if variant is not of the requested type\n */\n", "func_signal": "public short getShort()", "code": "{\n    if (!isA(VariantShort) && !isA(VariantUnsignedShort)) illegal(\"getShort\", \"VariantShort\");\n    return ((Short) value).shortValue();\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * 64 bit Longs only available on x64. 64 bit long support added 1.14\n *\n * @return returns the value as a long\n * @throws IllegalStateException if variant is not of the requested type\n */\n", "func_signal": "public long getLong()", "code": "{\n    if (!isA(VariantLongInt) && !(isA(VariantUnsignedLong))) illegal(\"getLong\", \"VariantLongInt\");\n    return ((Long) value).longValue();\n}", "path": "src\\org\\racob\\com\\Variant.java", "repo_name": "enebo/racob", "stars": 8, "license": "lgpl-2.1", "language": "java", "size": 1666}
{"docstring": "/**\n * send_error sends an error string to the plugin \n * @param theerror this error string to send\n */\n", "func_signal": "protected void send_error(String theerror)", "code": "{\n   try {\n      send_error_msg(theerror, MSG_ERROR);\n   } catch ( Exception ex) {\n      logex(ex);\n   }\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * similar to post, but does not check subscription status, and takes command as a arg\n * This function should ONLY be called for message id >= MSG_CONTROL_FIRST\n * because these messages do not contain an updateid\n * @param command the command to send\n * @param data the data associated with the command\n */\n", "func_signal": "protected void send_data(int command, byte[] data)", "code": "{\n   try {\n      if (command >= MSG_CONTROL_FIRST) {\n         dos.writeInt(8 + data.length);\n         dos.writeInt(command);\n         dos.write(data);\n         dos.flush();\n         logln(\"send_data- cmd: \" + command + \" datasize: \" + data.length, LINFO3);\n         stats[0][command]++;\n      }\n      else {\n         logln(\"post should be used for command \" + command + \", not send_data.  Data not sent.\", LERROR);\n      }\n   } catch (Exception ex) {\n      logex(ex);\n   }\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * run this is the main thread for the Client class, it continually loops, receiving commands\n * and performing appropriate actions for each command\n */\n", "func_signal": "public void run()", "code": "{\n   try {\n      main_loop:\n      while (true) {\n         CollabreateOutputStream os = new CollabreateOutputStream();\n         int len = dis.readInt();\n         int command = dis.readInt();\n         logln(\"received data len: \" + len + \", cmd: \" + command, LDEBUG);\n         if (command < MAX_COMMAND && command > 0) {\n            stats[1][command]++;\n         }\n         len -= 8;\n         if (command < MSG_CONTROL_FIRST) {\n            byte[] data = new byte[len];\n            dis.readFully(data);\n            os.writeInt(len + 16);\n            os.writeInt(command);\n            os.writeLong(0);  //this is where the updateid will get inserted\n            os.write(data);\n            //only accept commands if the client is authenticated\n            if (authenticated && (publish > 0)) {\n               //only post if this client chose to publish, \n               //(though they really shouldn't have sent any data if they are not publishing)\n               if (checkPermissions(command, publish)) { \n                  logln(\"posting command \" + command + \" (allowed to  publish) \", LDEBUG);\n                  cm.post(this, command, os.toByteArray());\n               }\n               else {\n                  logln(\"not allowed to perform command: \" + command, LINFO);\n                      // if (errorAlreadySentMask\n                      // send_error(\"you are not allowed to byte patch\");\n                      // errorAlreadySentMask |= MASK_BYTE_PATCHED;\n                      // logln(\"sent errors is \" + errorAlreadySentMask);\n               }\n            }\n            else {\n               logln(\"Client \" + hash + \":\" + conn.getInetAddress().getHostAddress()\n                                  + \":\" + conn.getPort() + \" skipping post command.\", LINFO);\n            }\n         }\n         else { //server only command\n            switch (command) {\n               case MSG_PROJECT_NEW_REQUEST: {\n                  logln(\"in NEW PROJECT REQUEST\", LDEBUG);\n                  byte[] md5 = new byte[MD5_SIZE];\n                  try {\n                     dis.readFully(md5);\n                     hash = Utils.toHexString(md5);\n                     String desc = dis.readUTF();\n                     long pub = dis.readLong() & 0x7FFFFFFF;\n                     long sub = dis.readLong() & 0x7FFFFFFF;\n                     if (!authenticated) {\n                        //nice try!!\n                        break;\n                     }\n                     logln(\"desired new project pub \" + pub + \", and sub \" + sub);\n                     int lpid = cm.addProject(this, hash, desc, pub, sub);\n                     if (lpid >= 0) {\n                        logln(\"NEW PROJECT REQUEST success\", LINFO);\n                        os.writeInt(JOIN_REPLY_SUCCESS);\n                        os.write(Utils.toByteArray(gpid));\n                     }\n                     else {\n                        logln(\"NEW PROJECT REQUEST fail\", LINFO);\n                        os.writeInt(JOIN_REPLY_FAIL);\n                     }\n                     send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                  } catch (Exception ex) {\n                     logln(\"Malformed NEW PROJECT REQUEST - failed to read md5\", LERROR);\n                     send_error(\"Malformed NEW_PROJECT_REQUEST\");\n                     break;\n                  }\n                  break;\n               }\n               case MSG_PROJECT_JOIN_REQUEST: {\n                  int lpid = dis.readInt();\n                  long tpub = dis.readLong() & 0x7FFFFFFF;\n                  long tsub = dis.readLong() & 0x7FFFFFFF; \n                  if (!authenticated) {\n                     //nice try!!\n                     break;\n                  }\n                  rpublish = tpub;\n                  rsubscribe = tsub;\n                  logln(\"attempting to join project \" + lpid, LINFO);\n                  if (cm.joinProject(this, lpid) >= 0 ) {\n                     os.writeInt(JOIN_REPLY_SUCCESS);\n                     byte gp[] = new byte[GPID_SIZE];\n                     gp = Utils.toByteArray(gpid); \n                     os.write(gp);\n                     logln(\"...success\" + lpid, LINFO);\n                  }\n                  else {\n                     os.writeInt(JOIN_REPLY_FAIL);\n                     logln(\"...failed\" + lpid, LINFO);\n                  }\n                  send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                  break;               \n               }\n               case MSG_PROJECT_REJOIN_REQUEST: {\n                  logln(\"in PROJECT_REJOIN_REQUEST\", LDEBUG);\n                  byte gp[] = new byte[GPID_SIZE];\n                  int rejoingbasic = 0;\n                  try {\n                     dis.readFully(gp);\n                     String gpid = Utils.toHexString(gp);\n                     if ( Utils.isNumeric(gpid) ) {\n                        if ( Integer.parseInt(gpid) == 0 ) { \n                           //basic mode pid was stored in netnode\n                           send_error(\"This instance of IDA connected in basic mode, cannot reconnect.\");\n                           break;\n                        }\n                     }\n                     int lpid = cm.gpid2lpid(gpid);\n                     long tpub = dis.readLong() & 0x7FFFFFFF;\n                     long tsub = dis.readLong() & 0x7FFFFFFF; \n                     if (!authenticated) {\n                        logln(\"unauthorized project rejoin request\", LERROR);\n                        send_error(\"Authenication required for this operation\");\n                        break;\n                     }\n                     rpublish = tpub;\n                     rsubscribe = tsub; \n                     logln(\"plugin requested rpub: \" + rpublish + \" rsub: \" + rsubscribe);\n                     if (cm.joinProject(this, lpid) >= 0 ) {\n                        os.writeInt(JOIN_REPLY_SUCCESS);\n                        os.write(gp);\n                        send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                     }\n                     else {\n                        os.writeInt(JOIN_REPLY_FAIL);\n                        send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                        send_error(\"Tried to join a project that doesn't exist on this server:\" + gpid);\n                        send_fatal(\"This idb is associated with a project not found on this server.\\n Maybe you connected to the wrong collabREate server,\\n or maybe the project has been deleted...\");\n                        break main_loop;\n                     }\n                  } catch (Exception e) {\n                     logln(\"Malformed REJOIN REQUEST - failed to read gpid\", LERROR);\n                     send_error(\"Malformed PROJECT_REJOIN\");\n                  }\n                  break;               \n               }\n               case MSG_PROJECT_SNAPSHOT_REQUEST: {\n                  logln(\"in SNAPSHOT REQ\", LDEBUG);\n                  String desc = dis.readUTF();\n                  long lastupdateid = dis.readLong();\n                  if (!authenticated) {\n                     logln(\"unauthorized project snapshot request\", LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     os.writeInt(PROJECT_SNAPSHOT_FAIL);\n                     send_data(MSG_PROJECT_SNAPSHOT_REPLY, os.toByteArray());\n                     break;\n                  }\n                  if (lastupdateid <= 0 ) {\n                     logln(\"attempt to add snapshot with 0 or less updates applied\", LINFO);\n                     send_error(\"snapshots with 0 or less updates are not allowed - start a new project instead\");\n                     os.writeInt(PROJECT_SNAPSHOT_FAIL);\n                     send_data(MSG_PROJECT_SNAPSHOT_REPLY, os.toByteArray());\n                     break;\n                  }\n                  if (cm.snapProject(this, lastupdateid, desc) >= 0) { \n                     os.writeInt(PROJECT_SNAPSHOT_SUCCESS);\n                  }\n                  else {\n                     os.writeInt(PROJECT_SNAPSHOT_FAIL);\n                  }\n                  send_data(MSG_PROJECT_SNAPSHOT_REPLY, os.toByteArray());\n                  break;\n               }\n               case MSG_PROJECT_FORK_REQUEST: {\n                  long lastupdateid = dis.readLong();\n                  String desc = dis.readUTF();\n                  logln(\"in FORK REQUEST\", LDEBUG);\n                  if (!authenticated) {\n                     logln(\"unauthorized project fork request\", LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     os.writeInt(JOIN_REPLY_FAIL);\n                     send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                     break;\n                  }\n\n                  //if the user set these at the time of the fork\n                  //they would be read here.  Instead we allow the owner to\n                  //manage permissions at any time via the modal dialog box\n                  //long pub = dis.readLong() & 0x7FFFFFFF;\n                  //long sub = dis.readLong() & 0x7FFFFFFF;\n                  //if (cm.forkProject(this, lastupdateid, desc, pub, sub) >= 0) { \n                  if (cm.forkProject(this, lastupdateid, desc) >= 0) { \n                     //on successfull fork, join the 'new' project automatically\n                     os.writeInt(JOIN_REPLY_SUCCESS);\n                     os.write(Utils.toByteArray(gpid));\n                  }\n                  else {\n                     os.writeInt(JOIN_REPLY_FAIL);\n                  }\n                  send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                  break;\n               }\n               case MSG_PROJECT_SNAPFORK_REQUEST: {\n                  logln(\"in SNAPFORK REQUEST\", LDEBUG);\n                  int lpid = dis.readInt();\n                  String desc = dis.readUTF();\n                  long pub = dis.readLong() & 0x7FFFFFFF;\n                  long sub = dis.readLong() & 0x7FFFFFFF;\n                  if (!authenticated) {\n                     logln(\"unauthorized project snapfork request\", LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     os.writeInt(JOIN_REPLY_FAIL);\n                     send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                     break;\n                  }\n                  logln(\"got \" + lpid + \": \" + desc, LDEBUG);\n                  if (cm.snapforkProject(this, lpid, desc, pub, sub) >= 0) { \n                     //on successfull fork from snapshop, join the 'new' project automatically\n                     os.writeInt(JOIN_REPLY_SUCCESS);\n                     os.write(Utils.toByteArray(gpid));\n                  }\n                  else {\n                     os.writeInt(JOIN_REPLY_FAIL);\n                  }\n                  send_data(MSG_PROJECT_JOIN_REPLY, os.toByteArray());\n                  break;\n               }\n               case MSG_PROJECT_LEAVE: {\n                  logln(\"in PROJECT LEAVE\", LDEBUG);\n                  if (!authenticated) {\n                     logln(\"unauthorized project leave request\", LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     break;\n                  }\n                  cm.remove(this);\n                  break;\n               }\n               case MSG_PROJECT_JOIN_REPLY:                 \n                  break;\n               case MSG_AUTH_REQUEST:\n                  logln(\"in AUTH REQUEST\", LDEBUG);\n                  int pluginversion = dis.readInt();\n                  if (pluginversion != PROTOCOL_VERSION) {\n                     send_error(\"Version mismatch. plugin: \" + pluginversion + \" server: \" + PROTOCOL_VERSION);\n                     logln(\"Version mismatch. plugin: \" + pluginversion + \" server: \" + PROTOCOL_VERSION, LERROR);\n                     break main_loop;\n                  }\n                  if (!authenticated) {\n                     byte resp[] = new byte[MD5_SIZE];\n                     username = dis.readUTF();\n                     logln(\"got user\" + username, LDEBUG);\n                     try {\n                        dis.readFully(resp);\n                     } catch (Exception ex) {\n                        logln(\"Malformed AUTH REQUEST - failed to read hmac response\", LERROR);\n                        send_error(\"Malformed AUTH_REQUEST\");\n                        break main_loop;  //disconnect\n                     }\n\n                     uid = cm.authenticate(this, username, challenge, resp);\n                     if (uid != INVALID_USER) {\n                        authenticated = true;\n                        //logln(\"uid set to \"+ uid);\n                        os.writeInt(AUTH_REPLY_SUCCESS);\n                     }\n                     else {\n                        os.writeInt(AUTH_REPLY_FAIL);\n                        authTries--;\n                     }\n                     send_data(MSG_AUTH_REPLY, os.toByteArray());\n                     if (authTries == 0) {\n                        logln(\"too many auth attempts for \" + this.getUser(), LERROR);\n                        break main_loop;\n                     }\n                  }\n                  else {\n                     logln(\"recv AUTH REQUEST when already authenticated\", LERROR);\n                     send_error(\"Attempt to Authenticate, when already authenticated\");\n                  }                     \n                  break;\n               case MSG_PROJECT_LIST:\n                  if (len != MD5_SIZE) { //len + cmd alread accounted for\n                     send_error(\"Malformed Project getlist request\");\n                  }\n                  else {\n                     byte[] md5 = new byte[MD5_SIZE];\n                     try {\n                        dis.readFully(md5);\n                     } catch (Exception ex) {\n                        logln(\"Malformed MSG_PROJECT_LIST - failed to read file md5\", LERROR);\n                        send_error(\"Malformed MSG_PROJECT_LIST\");\n                        break main_loop;  //disconnect\n                     }\n                     if (!authenticated) {\n                        //nice try!!\n                        break;\n                     }\n                     hash = Utils.toHexString(md5);\n                     logln(\"project hash: \" + hash, LINFO4);                     \n                     Vector<ProjectInfo> plist = cm.getProjectList(hash);\n                     int nump = plist.size();\n                     os.writeInt(nump);   //send number of elements to come\n                     logln(\" Found  \" + nump + \" projects\", LINFO3);\n                     //create list of projects\n                     for (ProjectInfo pi : plist) {\n                        log(\" \" + pi.lpid + \" \"+ pi.desc, LINFO4);\n                        os.writeInt(pi.lpid);\n                        os.writeLong(pi.snapupdateid);\n                        if (pi.parent > 0) {\n                           if (pi.snapupdateid > 0) {\n                              os.writeUTF(\"[-] \" + pi.desc + \" (SNAP of '\" + pi.pdesc + \"'@\"+ pi.snapupdateid + \" updates])\"); \n                              log(\"[-] \" + pi.desc + \" (snapshot of (\" + pi.parent + \")'\" + pi.pdesc+\"' [\"+ pi.snapupdateid + \" updates]) \", LDEBUG); \n                           }\n                           else {\n                              os.writeUTF(\"[\" + pi.connected + \"] \" + pi.desc + \" (FORK of '\" + pi.pdesc + \"')\"); \n                              log(\"[\" + pi.connected + \"] \" + pi.desc + \" (forked from (\" + pi.parent + \") '\" + pi.pdesc +\"')\", LDEBUG); \n                           }\n                        }\n                        else {\n                           os.writeUTF(\"[\" + pi.connected + \"] \" + pi.desc);\n                        }\n                        //since the user permissions may already limit the eventual effective permissions\n                        //only show the user the maximum attainable by this particular user (mask)\n                        //upublish = usubscribe = FULL_PERMISSIONS;  //quick BASIC mode test\n                        os.writeLong(pi.pub & upublish);\n                        os.writeLong(pi.sub & usubscribe);\n                        logln(\"\", LDEBUG);\n                        logln(\"pP \" + pi.pub + \" pS \" + pi.sub, LINFO4);\n                        logln(\"uP \" + upublish + \" uS \" + usubscribe, LINFO4);\n                     }\n                     //also append list of permissions supported by this server\n                     os.writeInt(permStrings.length);\n                     for ( int i = 0; i < permStrings.length; i++) {\n                        os.writeUTF(permStrings[i]);\n                     }\n\n                     send_data(MSG_PROJECT_LIST, os.toByteArray());\n                  }\n                  break;\n               case MSG_SEND_UPDATES: {\n                  long lastupdate = dis.readLong();\n                  if (!authenticated) {\n                     //nice try!!\n                     break;\n                  }\n                  logln(\"Received SEND_UPDATES request for \" + lastupdate + \" to current\", LINFO1);\n                  cm.sendLatestUpdates(this, lastupdate);\n                     \n                  break;\n               }\n               case MSG_SET_REQ_PERMS: {\n                  logln(\"Received SET_REQ_PERMS request\", LINFO1);\n                  long tpub = dis.readLong() & 0x7FFFFFFF;\n                  long tsub = dis.readLong() & 0x7FFFFFFF;\n                  if (!authenticated) {\n                     logln(\"unauthorized get req perms request\",LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     break;\n                  }\n\n                  rpublish = tpub;\n                  rsubscribe = tsub;\n                  ProjectInfo pi = cm.getProjectInfo(pid);\n                  logln(\"effective publish  : \" + \n                        Long.toHexString(pi.pub) + \" & \" + \n                        Long.toHexString(rpublish) + \" & \" + \n                        Long.toHexString(upublish) + \" = \" + \n                        Long.toHexString(pi.pub & upublish & rpublish),LINFO1);\n                  logln(\"effective subscribe: \" + \n                        Long.toHexString(pi.sub) + \" & \" + \n                        Long.toHexString(rsubscribe) + \" & \" + \n                        Long.toHexString(usubscribe) + \" = \" + \n                        Long.toHexString(pi.sub & usubscribe & rsubscribe),LINFO1);\n\n                  if ( uid != pi.owner ) {\n                     setPub(pi.pub & upublish & rpublish);\n                     setSub(pi.sub & usubscribe & rsubscribe);\n                  }\n                  else {\n                     logln(\"not honoring SET_REQ_PERMS for owner\", LINFO1);\n                     send_error(\"You are the owner.  FULL permissions granted.\");\n                  }\n\n                  break;\n               }\n               case MSG_GET_REQ_PERMS: {\n                  logln(\"Received GET_REQ_PERMS request\", LINFO1);\n                  if (!authenticated) {\n                     logln(\"unauthorized get req perms request\",LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     break;\n                  }\n                  //send the two requested permissions\n                  os.writeLong(rpublish);\n                  os.writeLong(rsubscribe); \n                  //send the max possible values for requested permissions (mask)\n                  ProjectInfo pi = cm.getProjectInfo(pid);\n                  os.writeLong(pi.pub & upublish);\n                  os.writeLong(pi.sub & usubscribe);\n                  //also append list of permissions supported by this server\n                  os.writeInt(permStrings.length);\n                  for (int i = 0; i < permStrings.length; i++) {\n                     os.writeUTF(permStrings[i]);\n                  }\n                  send_data(MSG_GET_REQ_PERMS_REPLY, os.toByteArray());\n                  break;\n               }\n               case MSG_GET_PROJ_PERMS: {\n                  logln(\"Received GET_PROJ_PERMS request\", LINFO1);\n                  if (!authenticated) {\n                     logln(\"unauthorized get project perms request\",LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     break;\n                  }\n                  ProjectInfo pi = cm.getProjectInfo(pid);\n                  if (uid == pi.owner) {\n                     //send the two project permissions\n                     os.writeLong(pi.pub);\n                     os.writeLong(pi.sub); \n                     //sing this is the owner managing possible values for requested permissions (mask) is full\n                     os.writeLong(FULL_PERMISSIONS);\n                     os.writeLong(FULL_PERMISSIONS);\n                     //also appent list of permissions supported by this server\n                     os.writeInt(permStrings.length);\n                     for (int i = 0; i < permStrings.length; i++) {\n                        os.writeUTF(permStrings[i]);\n                     }\n                     send_data(MSG_GET_PROJ_PERMS_REPLY, os.toByteArray());\n                  }\n                  else {\n                     send_error(\"You are not the owner!\");\n                  }\n                  break;\n               }\n               case MSG_SET_PROJ_PERMS: {\n                  logln(\"Received GET_PROJ_PERMS request\", LINFO1);\n                  long pub = dis.readLong() & 0x7FFFFFFF;\n                  long sub = dis.readLong() & 0x7FFFFFFF;\n                  if (!authenticated) {\n                     logln(\"unauthorized get project perms request\",LERROR);\n                     send_error(\"Authenication required for this operation\");\n                     break;\n                  }\n                  ProjectInfo pi = cm.getProjectInfo(pid);\n                  if (uid == pi.owner) {\n                     cm.updateProjectPerms(this, pub, sub);\n                  }\n                  else {\n                     send_error(\"You are not the owner!\");\n                  }\n                  break;\n               }\n               default:\n                  logln(\"Unknown MSG command \" + command + \" ignoring.\", LINFO1);\n                  break;\n            }\n         }\n      }\n   } catch (EOFException eeof) {\n      //logln(\"EOF error :\" + eeof.getMessage());\n   } catch (Exception ex) {\n      logln(\"printing stack trace:\\n\", LERROR);\n      logex(ex);\n   }\n   terminate();\n}\n\n/**\n * dumpStats displace the receive / transmit stats for each command  \n */\nprotected String dumpStats() {\n   StringBuffer sb = new StringBuffer();\n   sb.append(\"Stats for \" + hash + \":\" + conn.getInetAddress().getHostAddress() + \":\" + conn.getPort() + \"\\n\");\n   sb.append(\"command     rx     tx\\n\");\n   for (int i = 0; i < 256; i++) {\n      if (stats[0][i] != 0 || stats[1][i] != 0) {\n         String c = \"     \" + i;\n         c = c.substring(c.length() - 5);\n         String in = \"       \" + stats[0][i];\n         in = in.substring(in.length() - 7);\n         String out = \"       \" + stats[1][i];\n         out = out.substring(out.length() - 7);\n         sb.append(c + \" \" + in + \" \" + out + \"\\n\");\n      }\n   }\n   return sb.toString();\n}\n\n/**\n * checkPermissions checks to see if the current client has permissions to perform an operation\n * @param command the command to check permissions on\n * @param permType the permission types to check (publish/subscribe)\n */\n/* These are grouped into 'collabREate' permissions, just so there are less permissions to manage\n * for example all the segment operations (add, del, start/end change, etc) are grouped into \n * 'segment' permissions. \n */ \nprivate boolean checkPermissions(int command, long permType) { \n   boolean isallowed = false;\n   logln(\"checking for permission \" + command, LDEBUG);\n   switch(command) {\n      case COMMAND_UNDEFINE: {\n         isallowed = ((permType & MASK_UNDEFINE) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_MAKE_CODE: {\n         isallowed = ((permType & MASK_MAKE_CODE) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_MAKE_DATA: {\n         isallowed = ((permType & MASK_MAKE_DATA) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_SEGM_ADDED:\n      case COMMAND_SEGM_DELETED:\n      case COMMAND_SEGM_START_CHANGED:\n      case COMMAND_SEGM_END_CHANGED:\n      case COMMAND_SEGM_MOVED:\n      case COMMAND_MOVE_SEGM: {\n         isallowed = ((permType & MASK_SEGMENTS) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_SET_STACK_VAR_NAME:  //what category?\n      case COMMAND_RENAMED: {\n         isallowed = ((permType & MASK_RENAME) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_FUNC_TAIL_APPENDED:\n      case COMMAND_FUNC_TAIL_REMOVED:\n      case COMMAND_TAIL_OWNER_CHANGED:\n      case COMMAND_FUNC_NORET_CHANGED:\n      case COMMAND_ADD_FUNC:\n      case COMMAND_DEL_FUNC:\n      case COMMAND_SET_FUNC_START:\n      case COMMAND_SET_FUNC_END: {\n         isallowed = ((permType & MASK_FUNCTIONS) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_BYTE_PATCHED: {\n         isallowed = ((permType & MASK_BYTE_PATCH) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_AREA_CMT_CHANGED:\n      case COMMAND_CMT_CHANGED: {\n         isallowed = ((permType & MASK_COMMENTS) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_TI_CHANGED: //?  //what category?\n      case COMMAND_OP_TI_CHANGED: //? //what category?\n      case COMMAND_OP_TYPE_CHANGED: {\n         isallowed = ((permType & MASK_OPTYPES) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_ENUM_CREATED:\n      case COMMAND_ENUM_DELETED:\n      case COMMAND_ENUM_BF_CHANGED:\n      case COMMAND_ENUM_RENAMED:\n      case COMMAND_ENUM_CMT_CHANGED:\n      case COMMAND_ENUM_CONST_CREATED:\n      case COMMAND_ENUM_CONST_DELETED: {\n         isallowed = ((permType & MASK_ENUMS) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_STRUC_CREATED:\n      case COMMAND_STRUC_DELETED:\n      case COMMAND_STRUC_RENAMED:\n      case COMMAND_STRUC_EXPANDED:\n      case COMMAND_STRUC_CMT_CHANGED:\n      case COMMAND_CREATE_STRUC_MEMBER_DATA:\n      case COMMAND_CREATE_STRUC_MEMBER_STRUCT:\n      case COMMAND_CREATE_STRUC_MEMBER_REF:\n      case COMMAND_CREATE_STRUC_MEMBER_STROFF:\n      case COMMAND_CREATE_STRUC_MEMBER_STR:\n      case COMMAND_CREATE_STRUC_MEMBER_ENUM: \n      case COMMAND_STRUC_MEMBER_DELETED:\n      case COMMAND_SET_STRUCT_MEMBER_NAME:\n      case COMMAND_STRUC_MEMBER_CHANGED_DATA:\n      case COMMAND_STRUC_MEMBER_CHANGED_STRUCT:\n      case COMMAND_STRUC_MEMBER_CHANGED_STR:\n      case COMMAND_STRUC_MEMBER_CHANGED_OFFSET:\n      case COMMAND_STRUC_MEMBER_CHANGED_ENUM: \n      case COMMAND_CREATE_STRUC_MEMBER_OFFSET: {\n         isallowed = ((permType & MASK_STRUCTS) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_VALIDATE_FLIRT_FUNC: {\n         isallowed = ((permType & MASK_FLIRT) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_THUNK_CREATED: { \n         isallowed = ((permType & MASK_THUNK) > 0) ?  true : false; \n         break; \n      }\n      case COMMAND_ADD_CREF:\n      case COMMAND_ADD_DREF:\n      case COMMAND_DEL_CREF:\n      case COMMAND_DEL_DREF: {\n         isallowed = ((permType & MASK_XREF) > 0) ?  true : false; \n         break; \n      }\n      default:\n         logln(\"unmatched command \" + command + \" found in publish switch\", LERROR);\n   } //end command switch\n   \n   return isallowed;\n}\n\n/**\n * getPort inspector to get the TCP port number of the connection\n * @return the TCP port\n */\nprotected int getPort() {\n   return conn.getPort();\n}\n\n/**\n * getAddr inspector to get the IP address of the connection\n * @return the IP address\n */\nprotected String getAddr() {\n   return conn.getInetAddress().getHostAddress();\n}\n\n/**\n * setReqPub mutator to set the publish status of the session requested perms stored in the client\n * @param p the users req publish status\n */\nprotected void setReqPub(long p) {\n   rpublish = p;\n}\n\n/**\n * setReqSub mutator to set the subscription status of the session requested perms stored in the client\n * @param s the users req subscribe status\n */\nprotected void setReqSub(long s) {\n   rsubscribe = s;\n}\n/**\n * getReqPub inspector to get the publish status of the session requested perms stored in the client\n * @return the users req publish status\n */\nprotected long getReqPub() {\n   return rpublish;\n}\n\n/**\n * getReqSub inspector to get the subscription status of the session requested perms stored in the client\n * @return the users req subscribe status\n */\nprotected long getReqSub() {\n   return rsubscribe;\n}\n/**\n * setUserPub mutator to set the publish status of the user stored in the client\n * @param p the users publish status\n */\nprotected void setUserPub(long p) {\n   upublish = p;\n}\n\n/**\n * setUserSub mutator to set the subscription status of the user stored in the client\n * @param s the users subscribe status\n */\nprotected void setUserSub(long s) {\n   usubscribe = s;\n}\n/**\n * getUserPub inspector to get the publish status of the user stored in the client\n * @return the users publish status\n */\nprotected long getUserPub() {\n   return upublish;\n}\n\n/**\n * getUserSub inspector to get the subscription status of the user stored in the client\n * @return the users subscribe status\n */\nprotected long getUserSub() {\n   return usubscribe;\n}\n\n/**\n * setPub mutator to set the effective publish status of the client\n * @param p the publish status\n */\nprotected void setPub(long p) {\n   publish = p;\n}\n\n/**\n * setSub mutator to set the effective subscription status of the client\n * @param s the subscribe status\n */\nprotected void setSub(long s) {\n   subscribe = s;\n}\n/**\n * getPub inspector to get the effective publish status of the client\n * @return the publish status\n */\nprotected long getPub() {\n   return publish;\n}\n\n/**\n * getSub inspector to get the effective subscription status of the client\n * @return the subscribe status\n */\nprotected long getSub() {\n   return subscribe;\n}\n\n/**\n * getUser inspector to get the Username assocaited with the client\n * @return the username\n */\nprotected String getUser() {\n   return username;\n}\n\n//protected void sendProjectJoinReply(int lpid) {\n//   return;\n//}\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * run kicks off a thread that perpetually waits for a single connection, if the connection is dropped\n * it waits again, once connected, the ManagerHelper processes commands similar to the server.\n */\n", "func_signal": "public void run()", "code": "{\n   try {\n      logln(\"ManagerHelper running...\", LINFO);\n      //just accept a single connection, loop back if the connection drops\n      while (true) {\n         try {\n            Socket s = ss.accept();\n            dis = new DataInputStream(new BufferedInputStream(s.getInputStream()));\n            dos = new DataOutputStream(s.getOutputStream());\n            logln(\"New Management connection: \" + s.getInetAddress().getHostAddress() + \":\" + s.getPort(), LINFO);\n            while (true) {\n               CollabreateOutputStream os = new CollabreateOutputStream();\n               int len = dis.readInt();\n               int cmd = dis.readInt();\n\n               switch(cmd) {\n                  case MNG_GET_CONNECTIONS: {\n                     logln(\"sending connections\", LINFO3);\n                     String c = cm.listConnections();\n                     os.writeUTF(c);\n                     send_data(MNG_CONNECTIONS, os.toByteArray());\n                     break;\n                  }\n                  case MNG_GET_STATS: {\n                     logln(\"sending stats\", LINFO3);\n                     String c = cm.dumpStats();\n                     os.writeUTF(c);\n                     send_data(MNG_STATS, os.toByteArray());\n                     break;\n                  }\n                  case MNG_SHUTDOWN: {\n                     logln(\"client requested server shutdown\", LINFO);\n                     cm.Shutdown();\n                     break;\n                  }\n                  case MNG_PROJECT_MIGRATE: {\n                     logln(\"client requested a project migrate\", LINFO);\n                     //Client c = new Client(cm,new Socket());\n                     byte[] md5_bytes = new byte[MD5_SIZE];\n                     byte[] gpid_bytes = new byte[GPID_SIZE];\n                     int status = MNG_MIGRATE_REPLY_FAIL;\n                     try {\n                        int uid = dis.readInt();\n                        dis.readFully(gpid_bytes);\n                        String gpid = Utils.toHexString(gpid_bytes);\n                        dis.readFully(md5_bytes);\n                        String hash = Utils.toHexString(md5_bytes);\n                        String desc = dis.readUTF();\n                        long pub = dis.readLong() & 0x7FFFFFFF;\n                        long sub = dis.readLong() & 0x7FFFFFFF;\n\n                        int newpid = cm.migrateProject(uid,gpid,hash,desc,pub,sub);\n                        if (newpid > 0) {\n                           logln(\"Added new project \" + newpid + \" via project migration from another server\");\n                           status = MNG_MIGRATE_REPLY_SUCCESS;\n                           pidForUpdates = newpid;  //store globally for any updates that may come in\n                        }\n                        else {\n                           logln(\"migrate project failed for gpid \" + gpid + \" hash \" + hash);\n                           status = MNG_MIGRATE_REPLY_FAIL;\n                        }\n                        os.writeInt(status);\n                        send_data(MNG_PROJECT_MIGRATE_REPLY, os.toByteArray());\n                     } catch (Exception ex) {\n                        logln(\"Malformed PROJECT MIGRATE\", LERROR);\n                        break;\n                     }\n                     break;\n                  }\n                  case MNG_MIGRATE_UPDATE: {\n                     logln(\"in MNG_MIGRATE_UPDATE\", LERROR);\n                     int uid = dis.readInt();\n                     logln(\"... got uid\" + uid, LERROR);\n                     int pid = dis.readInt();\n                     logln(\"... got pid\" + pid, LERROR);\n                     int ucmd = dis.readInt();\n                     logln(\"... got cmd\" + ucmd, LERROR);\n                     int datalen = dis.readInt();\n                     logln(\"... got datalen\" + datalen, LERROR);\n                     byte[] data = new byte[datalen];\n                     dis.readFully(data);\n                     logln(\"... got data\", LERROR);\n                     cm.migrateUpdate(uid, pidForUpdates, ucmd, data);\n                     break;\n                  }\n                  default: {\n                     logln(\"unkown command\", LERROR);\n//The ServerManager has no means of processing this message as it is very much\n//a synchronous protocol: Send Command -> Process Reply.  If we don't recognize\n//their command we can easily drop it, but they are not likely to be looking\n//for our reply\n//                        os.writeUTF(\"bad command received:\" + cmd);\n//                        send_data(MNG_CONNECTIONS, os.toByteArray());\n                  }\n               }\n            }\n         } catch (EOFException e) {\n            logln(\"Manager connection dropped \", LINFO);\n            continue;\n         }\n      }\n   } catch (Exception ex) {\n      logln(\"ManagerHelper terminating: \" + ex.getMessage(), LINFO);\n      ex.printStackTrace();\n   }\n}", "path": "codebreak\\server\\ManagerHelper.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * logs an exception to the configured log file (in the ConnectionManager)\n * @param ex the execption to log\n * @param v apply a verbosity level to the ex\n */\n", "func_signal": "protected void logex(Exception ex, int v)", "code": "{\n   logln(\"Exception, trace follows:\", v);\n   cm.logex(ex, v);\n}", "path": "codebreak\\server\\ManagerHelper.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * post is the function that actually posts updates to clients (if subscribing)\n * @param data the bytearray containing the update to send\n */\n", "func_signal": "public void post(byte[] data) throws Exception", "code": "{\n   if (checkPermissions(parseCommand(data), subscribe)) { \n      //only post if client is subscribing and is allowed to recieve that particular command\n      dos.write(data);\n      dos.flush();\n      //logln(\"post- datasize: \" + data.length);\n      stats[0][data[7] & 0xff]++;\n   }\n   else {\n      logln(\"Client \" + hash + \":\" + conn.getInetAddress().getHostAddress()\n                         + \":\" + conn.getPort() + \" failed to post data. \"\n                         + \" (probably subscribe permission: \"\n                         + parseCommand(data) + \")\", LINFO3);\n   }\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * sendForkFollow sends a FORKFOLLOW message to the client, this occurs when another\n * user on the project decided to fork, the plugin is expected to give the user the \n * option of joining the new project or not \n * @param fuser the user that initiated the fork\n * @param gpid the global pid of the new project\n * @param lastupdateid the updateid that the project forked at\n * @param desc a description of the newly forked project\n */\n", "func_signal": "protected void sendForkFollow(String fuser, String gpid, long lastupdateid, String desc)", "code": "{\n   try {\n      CollabreateOutputStream cos = new CollabreateOutputStream();\n      logln(\"Sending forkfollow for \" + gpid + \" initiated by \" + fuser + \" at updateid \" + lastupdateid, LINFO2);\n      cos.writeUTF(fuser);\n      cos.write(Utils.toByteArray(gpid));\n      cos.writeLong(lastupdateid);\n      cos.writeUTF(desc);\n      send_data(MSG_PROJECT_FORK_FOLLOW, cos.toByteArray());\n   } catch ( Exception ex) {\n      logex(ex);\n   }\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * send_data constructs the packet and sends it to the ServerManager\n * @param command the server command to send\n * @param data the data relevant to be sent with command\n */\n", "func_signal": "protected void send_data(int command, byte[] data)", "code": "{\n   try {\n      if (command >= MNG_CONTROL_FIRST) {\n         dos.writeInt(8 + data.length);\n         dos.writeInt(command);\n         dos.write(data);\n         dos.flush();\n         logln(\"send_data- cmd: \" + command + \" datasize: \" + data.length, LDEBUG);\n      }\n      else {\n         logln(\"post should be used for command \" + command + \", not send_data.  Data not sent.\", LERROR);\n      }\n   } catch (Exception ex) {\n   }\n}", "path": "codebreak\\server\\ManagerHelper.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * runInsertLong is a database insert helper function, it runs an insert and returns\n * a Long value based on the result of the query - Statements must return a value to\n * be used with this function\n * @param s a prepared statement that provides a return value\n * @return long return of the insert query\n */\n", "func_signal": "protected static long runInsertLong(PreparedStatement s)", "code": "{\n   long rval = -1;\n   try {\n\t ResultSet rs = s.executeQuery();\n\t if (rs.next()) {\n\t    rval = rs.getLong(1);\n\t    System.out.println(\"SQL Insert rval:  \" + rval);\n\t }\n\t rs.close();\n   } catch (SQLException e) {\n\t System.err.println(\"SQL Exception encountered\");\n\t System.err.println(e);\n   } catch (Exception exc) {\n\t System.err.println(\"Database Insert error: \" + exc.getMessage());\n\t exc.printStackTrace();\n   }\n   return rval;\n}", "path": "codebreak\\server\\dbUtils.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * getPid mutator to set the pid (local project id, unigue to this server instance only) value\n * @param p the project pid\n */\n", "func_signal": "protected void setPid(int p)", "code": "{\n   logln(\"set client pid to \" + p, LINFO1);\n   pid = p;\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * very similary to the other constructor, execpt config paramters are attempted\n * to be read from a properties object p\n * @param connm the connectionManager associated with this ManagerHelper\n * @param p a propertied object (config file)\n */\n", "func_signal": "public ManagerHelper(ConnectionManagerBase connm,Properties p) throws Exception", "code": "{\n   cm = connm;\n   pidForUpdates = 0;\n   props = p;\n   initCommon();\n}", "path": "codebreak\\server\\ManagerHelper.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * terminate closes the client's connection, removes this client from the connection manager \n */\n", "func_signal": "protected void terminate()", "code": "{\n   try {\n      logln(\"Client \" + hash + \":\" + conn.getInetAddress().getHostAddress()\n                         + \":\" + conn.getPort() + \" terminating\", LINFO);\n      conn.close();\n   } catch (Exception ex) {\n      logex(ex);\n   }\n   cm.remove(this);\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * instantiates a new ManagerHelper with default parameters, the ManagerHelper\n * facilitates getting server state information to the ServerManager\n * @param connm the connectionManager associated with this ManagerHelper\n */\n", "func_signal": "public ManagerHelper(ConnectionManagerBase connm) throws Exception", "code": "{\n   cm = connm;\n   pidForUpdates = 0;\n   initCommon();\n}", "path": "codebreak\\server\\ManagerHelper.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * makeFormItem makes a http form item\n * @param name the name of the form item\n * @param type the type of the form item (text, button, radio, checkbox, password)\n * @param size the size to display (only on text/pass)\n * @param maxl the maxlen (only on text/pass)\n * @param value the value for the item\n * @param check non-zero if checked (only on checkbox / radio)\n * @param reado non-zero if the item is readonly\n * @return a string with the formatted form item\n */\n", "func_signal": "protected static String makeFormItem(String name, String type, int size, int maxl, String value, int check, int reado)", "code": "{\n   String rval = \"\";\n   int canBchecked = 0;\n   int canBreadonly = 0;\n   if(type.equalsIgnoreCase(\"text\")){\n      rval = String.format(\"<input name=\\\"%s\\\" type=\\\"%s\\\" size=\\\"%s\\\" maxlength=\\\"%s\\\" value=\\\"%s\\\"\",name,type,size,maxl,value);\n      canBreadonly = 1;\n   }\n   else if(type.equalsIgnoreCase(\"password\")){\n      rval = String.format(\"<input name=\\\"%s\\\" type=\\\"%s\\\" size=\\\"%s\\\" maxlength=\\\"%s\\\" value=\\\"%s\\\"\",name,type,size,maxl,value);\n      canBreadonly = 1;\n   }\n   else if(type.equalsIgnoreCase(\"button\")){\n      rval = String.format(\"<input name=\\\"%s\\\" type=\\\"%s\\\" value=\\\"%s\\\"\",name,type,value);\n   }\n   else if(type.equalsIgnoreCase(\"radio\")){\n      rval = String.format(\"<input name=\\\"%s\\\" type=\\\"%s\\\" value=\\\"%s\\\"\",name,type,value);\n      canBchecked = 1;\n   }\n   else if(type.equalsIgnoreCase(\"checkbox\")){\n      rval = String.format(\"<input name=\\\"%s\\\" type=\\\"%s\\\" value=\\\"%s\\\"\",name,type,value);\n      canBreadonly = 1;\n      canBchecked = 1;\n   }\n   else if(type.equalsIgnoreCase(\"submit\")){\n      rval = String.format(\"<input name=\\\"%s\\\" type=\\\"%s\\\" value=\\\"%s\\\"\",name,type,value);\n   }\n   else if(type.equalsIgnoreCase(\"hidden\")){\n      rval = String.format(\"<input name=\\\"%s\\\" type=\\\"%s\\\" value=\\\"%s\\\"\",name,type,value);\n   }\n   if(check != 0 && canBchecked != 0) {\n      rval = rval + \" checked\";\n   }\n   if(reado != 0 && canBreadonly != 0) {\n      rval = rval + \" readonly\";\n   }\n   rval = rval + \">\";\n   return rval;\n}", "path": "codebreak\\server\\htmlUtils.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * logs a message to the configured log file (in the ConnectionManager)\n * @param msg the string to log\n * @param v apply a verbosity level to the msg\n */\n", "func_signal": "protected void log(String msg, int v)", "code": "{\n   String clientIP = null;\n   String user = \"\";\n   cm.log(\"[MNG]\" +  msg, v);\n}", "path": "codebreak\\server\\ManagerHelper.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * closes the socket\n */\n", "func_signal": "protected void terminate()", "code": "{\n   try {\n      ss.close();\n   } catch (Exception ex) {\n   }\n}", "path": "codebreak\\server\\ManagerHelper.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * runInsertInt is a database insert helper function, it runs an insert and returns\n * a Int value based on the result of the query - Statements must return a value to\n * be used with this function\n * @param s a prepared statement that provides a return value\n * @return integer return of the insert query\n */\n", "func_signal": "protected static int runInsertInt(PreparedStatement s)", "code": "{\n   int rval = -1;\n   try {\n\t ResultSet rs = s.executeQuery();\n\t if (rs.next()) {\n\t    rval = rs.getInt(1);\n\t    //System.out.println(\"SQL Insert rval:  \" + rval);\n\t }\n\t rs.close();\n   } catch (SQLException e) {\n\t System.err.println(\"SQL Exception encountered\");\n\t System.err.println(e);\n   } catch (Exception exc) {\n\t System.err.println(\"Database Insert error: \" + exc.getMessage());\n\t //            exc.printStackTrace();\n   }\n   return rval;\n}", "path": "codebreak\\server\\dbUtils.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * logs a message to the configured log file (in the ConnectionManager)\n * @param msg the string to log\n * @param v apply a verbosity level to the msg\n */\n", "func_signal": "protected void log(String msg, int v)", "code": "{\n   String clientIP = null;\n   String user = \"\";\n   try {\n      clientIP = conn.getInetAddress().getHostAddress() + \":\" + conn.getPort();\n   } catch (Exception ex) {\n   }\n   if (username != null) {\n      user = \" (\" + username + \":\" + uid + \")\";\n   }\n   cm.log(\"[\" + clientIP + user + \"] \" + msg, v);\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * send_fatal sends an error string to the plugin, this is idential to send_error except\n * for the message type, the intent is that the semantics on the plugin side are different \n * @param theerror this error string to send\n */\n", "func_signal": "protected void send_fatal(String theerror)", "code": "{\n   try {\n      send_error_msg(theerror, MSG_FATAL);\n   } catch ( Exception ex) {\n      logex(ex);\n   }\n}", "path": "codebreak\\server\\Client.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * getJDBCConnection sets up and returns a JDBC connection\n * @return a JDBC connection\n */\n", "func_signal": "protected static Connection getJDBCConnection(ServerManager sm)", "code": "{\n   Connection con = null;\n   Properties props = sm.getProps();\n   String driver = props.getProperty(\"JDBC_DRIVER\", \"org.postgresql.Driver\");\n   try {\n\t Class.forName(driver);\n\t if (driver.indexOf(\"mysql\") != -1) {\n\t    sm.setuseMysql(true);\n\t }\n   } catch(java.lang.ClassNotFoundException e) {\n\t System.err.println(\"ClassNotFoundException: \" + e.getMessage());\n\t System.err.println(\"you need the jdbc jar for \" + driver + \" in your classpath!\\n\");\n\t System.err.println(\"Current classpath is: \");\n\t System.err.println(System.getProperty(\"java.class.path\"));\n\t e.printStackTrace();\n\t return null;\n   }\n\n   try {\n\t String userid = props.getProperty(\"DB_USER\", \"collabreate\");\n\t String password = props.getProperty(\"DB_PASS\");\n\t if (password == null) {\n\t    //need to prompt for the password\n\t }\n\t String url = props.getProperty(\"JDBC_URL\");\n\t if (url == null) {\n\t    String dbname = props.getProperty(\"DB_NAME\", \"collabreate\");\n\t    String host = props.getProperty(\"DB_HOST\", \"127.0.0.1\");\n\t    String ssl = props.getProperty(\"USE_SSL\", \"no\");\n\t    String dbtype = props.getProperty(\"JDBC_NAME\", \"postgresql\");\n\t    url = \"jdbc:\" + dbtype + \"://\" + host + \"/\" + dbname;\n\t    if (ssl.equalsIgnoreCase(\"yes\")) {\n\t       url += \"?ssl\";\n\t    }\n\t }\n\t con = DriverManager.getConnection(url, userid, password);\n   } catch(SQLException ex) {\n\t System.err.println(\"SQLException: \" + ex.getMessage());\n\t System.err.println(\"check permissions in your database configuration file\\n\");\n\t return null;\n   }\n   try {\n\t DatabaseMetaData meta = con.getMetaData();\n\t System.out.println(\"Connected to \" + meta.getURL());\n\t System.out.print(\"DB Driver : \" + meta.getDriverName());\n\t System.out.println(\" v: \" + meta.getDriverVersion());\n\t System.out.println(\"Database: \" + meta.getDatabaseProductName() + \" \"\n\t\t\t   + meta.getDatabaseMajorVersion() + \".\" + meta.getDatabaseMinorVersion());\n\t System.out.println(\"JDBC v: \" + meta.getJDBCMajorVersion() + \".\" + meta.getJDBCMinorVersion());\n   } catch(Exception ex1) {\n\t System.err.println(\"Couldn't get driver metadata: \" + ex1.getMessage());\n\t //Is this a fatal error, do you want to close con here?\n   }\n   return con;\n}", "path": "codebreak\\server\\dbUtils.java", "repo_name": "XVilka/htools", "stars": 9, "license": "None", "language": "java", "size": 864}
{"docstring": "/**\n * Synchronous Position update, used by the worker thread (actually by the posted request)\n * \n * @param username\n * @param pwHash \n * @param trackId (??)\n * @param message Message to be displayed on the live tracker icon\n * @param locations Locations in sequence to send\n * @return Parsed message from the server, indicating the success of the request\n * @throws CWException\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic ServerMessage UpdateCurrentPosition(String username, String pwHash,\n\t\tInteger trackId, String message, LocationIdentifier...locations) throws CWException", "code": "{\n\tVector<PropertyInfo> properties = new Vector<PropertyInfo>();\n\tproperties.add(CreatePrimitivePropertyInfo(\"username\", username));\n\tproperties.add(CreatePrimitivePropertyInfo(\"password\", pwHash));\n\tproperties.add(CreatePrimitivePropertyInfo(\"trackId\", trackId));\n\tproperties.add(CreatePrimitivePropertyInfo(\"message\", message));\n\t\n\tMarshalAlt altitudes = new MarshalAlt();\n\tMarshalLon longitudes = new MarshalLon();\n\tMarshalLat latitudes = new MarshalLat();\n\tMarshalHeadings headings = new MarshalHeadings();\n\tMarshalTimestamp dateTimes = new MarshalTimestamp();\n\t\n\tfor(LocationIdentifier loc : locations)\n\t{\n\t\tlongitudes.add(loc.getLocation().getLongitude());\n\t\tlatitudes.add(loc.getLocation().getLatitude());\n\t\taltitudes.add(loc.getLocation().getAltitude());\n\t\theadings.add(0.0);\n\t\tdateTimes.add(loc.getDateTime());\n\t}\n\t\n\t//properties.add(CreatePrimitivePropertyInfo(\"lat\", latitudes.get(0)));\n\tproperties.add(CreateArrayPropertyInfo(\"lat\", \"double\", latitudes));\n\tproperties.add(CreateArrayPropertyInfo(\"lon\", \"double\", longitudes));\n\tproperties.add(CreateArrayPropertyInfo(\"alt\", \"double\", altitudes));\n\tproperties.add(CreateArrayPropertyInfo(\"heading\", \"double\", headings));\n\tproperties.add(CreateArrayPropertyInfo(\"timestamp\", \"dateTime\", dateTimes));\n\t\n\tString serverMessage = PerformSOAPCall(\"LogPositions\", \n\t\t\tproperties.toArray(new PropertyInfo[0]),\n\t\t\tnew IEnvelopeSetupCallback() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void Setup(SoapSerializationEnvelope env) {\n\t\t\t\t\tnew MarshalLat().register(env);\n\t\t\t\t\tnew MarshalLon().register(env);\n\t\t\t\t\tnew MarshalAlt().register(env);\n\t\t\t\t\tnew MarshalHeadings().register(env);\n\t\t\t\t\tnew MarshalTimestamp().register(env);\t\n\t\t\t\t}\n\t\t\t}\n\t\t).toString();\n\t\n\treturn new ServerMessage(serverMessage);\n\t\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Checks if the specified file is a valid track file\n * @param filename\n * @return\n */\n", "func_signal": "public static final boolean IsTrackFile(String filename)", "code": "{\n\tif(filename.startsWith(\"gpxtrack_\") &&\n\t   filename.endsWith(\".xml\"))\n\t\treturn true;\n\t\n\treturn false;\n}", "path": "AndroidTracker\\src\\org\\cw\\dataitems\\TrackFile.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "//\tprivate void ButtonCancel_Clicked()\n//\t{\n//\t\tif(IsActionPossible())\n//\t\t{\n//\t\t\tsetResult(ActivityConstants.RES_NOTHINGTODO);\n//\t\t\tfinish();\n//\t\t}\n//\t}\n", "func_signal": "private void ButtonUpload_Clicked()", "code": "{\n\t\ttry\n\t\t{\n\t\t\tif(_list.getCheckedItemPosition() == ListView.INVALID_POSITION)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t_listAdapter.setViewType(_list.getCheckedItemPosition(), ViewTypeEnum.Working);\n\t\t\t\n\t\t\tTrackFile myTrackFile = (TrackFile)_list.getItemAtPosition(_list.getCheckedItemPosition());\n\t\t\t\n\t\t\tif(_pendingUploads.contains(myTrackFile))\n\t\t\t\treturn;\n\t\t\t\n\t\t\tPendingUploadInfo newUploadInfo = new PendingUploadInfo(myTrackFile, _listAdapter, this);\n\t\t\t_pendingUploads.add(newUploadInfo);\n\t\t\tEnvironment.Instance().ConnectionInstance().PostGPXUploadRequest(\n\t\t\t\t\tEnvironment.Instance().Settings().getUsername(),\n\t\t\t\t\tEnvironment.Instance().Settings().getPassword(),\n\t\t\t\t\tmyTrackFile.toString(),\n\t\t\t\t\tmyTrackFile.getGPXData(),\n\t\t\t\t\tnewUploadInfo);\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tEnvironment.Instance().AlertBuilderInstance().ShowInfoBox(\n\t\t\t\te.getMessage(),\n\t\t\t\t\"Error\", \n\t\t\t\t\"Close\");\n\t\t}\n\t}", "path": "AndroidTracker\\src\\org\\cw\\TrackListActivity.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/** Currently the file is directly saved as gpx file, \n *  so we only need to read the file data\n * @return\n * @throws IOException \n */\n", "func_signal": "public String getGPXData() throws IOException", "code": "{\n\tInputStreamReader rdr = new InputStreamReader(openInputTrackFile());\n\t\n\tStringBuffer strBuffer = new StringBuffer();\n\t\n\tchar[] buffer = new char[4096];\n\tint read = -1;\n\tdo\n\t{\n\t\tread = rdr.read(buffer, 0, buffer.length);\n\t\t\n\t\tif(read > 0)\n\t\t\tstrBuffer.append(buffer, 0, read);\n\t\t\n\t}while(read > -1);\n\t\n\treturn strBuffer.toString();\n}", "path": "AndroidTracker\\src\\org\\cw\\dataitems\\TrackFile.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Verifies the credentials\n * \n * @param username\n * @param password\n * @return\n * @throws NoSuchAlgorithmException \n * @throws XmlPullParserException \n * @throws IOException \n */\n", "func_signal": "public boolean VerifyCredentials(UserCredentials credentials)\n\tthrows CWException", "code": "{\n\tBoolean verified;\n\ttry {\n\t\tverified = SoapPrimitiveToBoolean((SoapPrimitive) PerformSOAPCall(\"VerifyCredentials\", \n\t\t\t\tnew PropertyInfo[]{\n\t\t\t\t\tCreatePrimitivePropertyInfo(\"username\", credentials.getUsername()),\n\t\t\t\t\tCreatePrimitivePropertyInfo(\"passwordhash\", HashUtils.HashPassword(credentials.getPassword())),\n\t\t\t\t\tCreatePrimitivePropertyInfo(\"control\", \"CWRocks2008\")\n\t\t\t\t}, null\n\t\t\t\t/*new IEnvelopeSetupCallback(){\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void Setup(SoapSerializationEnvelope env) {\n\t\t\t\t\t\tnew MarshalBoolean(_namespace, \"VerifyCredentialsResponse\", 1).register(env);\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}*/));\n\t\treturn verified;\n\t} \n\tcatch (Exception e) \n\t{\n\t\te.printStackTrace();\n\t\tthrow new CWException(e.getMessage());\n\t}\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Generates a default primitive Property info\n * \n * @param name\n * @param value\n * @return\n */\n", "func_signal": "private PropertyInfo CreatePrimitivePropertyInfo(String name, Object value)", "code": "{\n\tPropertyInfo propInfo = new PropertyInfo();\n\tpropInfo.setName(name);\n\tpropInfo.setValue(value);\n\treturn propInfo;\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Checks if any action on the activity other than upload posting is possible.\n * If any upload is posted, the activity cannot be closed\n * @return\n */\n", "func_signal": "private boolean IsActionPossible()", "code": "{\n\tif(_pendingUploads.size() > 0)\n\t\t_alerts.ShowInfoBox(\"Please wait till all uploads are ready....\", \"Please wait\", \"Close\");\n\t\n\treturn !(_pendingUploads.size() > 0);\n}", "path": "AndroidTracker\\src\\org\\cw\\TrackListActivity.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Posts an asynchronous UploadGpx request.\n * \n * This posted request is not handled the same way a CurrentPosition(CP) request is handled.  \n * CP-Requests are collected and once every few seconds or even minutes they are transmitted at once.\n * The UI does not get immediate information about the status of the request.\n * This is not the way a GPX Request should be processed. The request should be handled immediatly \n * (also if other queued requests are waiting), the user should get an immediate status response and \n * should be notified on completion. So this more handled like a synchronous request, but without\n * blocking the calling thread. This kind of request is called \"priority request\", they are handled \n * by a second request queue which is prioritized by the worker thread\n */\n", "func_signal": "public void PostGPXUploadRequest(String username, String password, String trackName, String gpxData, IUiCallback uiCallback)\n\tthrows CWException", "code": "{\n\ttry \n\t{\n\t\tRequest gpxRequest = new UploadGPXRequest(\n\t\t\t\tusername, \n\t\t\t\tHashUtils.HashPassword(password),\n\t\t\t\ttrackName,\n\t\t\t\tgpxData,\n\t\t\t\tuiCallback\n\t\t\t\t);\n\t\t\n\t\tEnqueuePriorityRequest(gpxRequest);\n\t} \n\tcatch (Exception e) \n\t{\n\t\te.printStackTrace();\n\t\tthrow new CWException(e.toString());\n\t}\n\t\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Deletes the file from disk\n */\n", "func_signal": "public void DeleteMe()", "code": "{\n\t_ctx.deleteFile(_trackfilename);\n\t_ctx.deleteFile(getStatFilename());\n}", "path": "AndroidTracker\\src\\org\\cw\\dataitems\\TrackFile.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Checks if the Track file already exists on disk\n * @return\n */\n", "func_signal": "public boolean Exists()", "code": "{\n\ttry {\n\t\t_ctx.openFileInput(_trackfilename);\n\t} catch (FileNotFoundException e) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "AndroidTracker\\src\\org\\cw\\dataitems\\TrackFile.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/** Starts the time after resetting to the initial duration */\n", "func_signal": "public void Start(long predefinedDuration)", "code": "{\n\t_startDurationMs = predefinedDuration;\n\tStart();\n}", "path": "AndroidTracker\\src\\org\\cw\\dataitems\\TrackTime.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Posts an asynchronous LogPosition Request\n * @param username\n * @param password\n * @param location\n * @throws CWException \n */\n", "func_signal": "public void PostCurrentPositionRequest(\n\tString username,\n\tString password,\n\tLocationIdentifier location) \n\tthrows CWException", "code": "{\n\tLogPositionRequest request;\n\ttry \n\t{\n\t\trequest = new LogPositionRequest(\n\t\t\t\tusername, \n\t\t\t\tHashUtils.HashPassword(password), \n\t\t\t\t0, \n\t\t\t\t\"AndroidTracker\",\n\t\t\t\tlocation);\n\t\n\t\tEnqueueRequest(request);\n\t} \n\tcatch (Exception e) \n\t{\n\t\te.printStackTrace();\n\t\tthrow new CWException(e.toString());\n\t}\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Performs a SOAP Call to the Crossingways webservice, for the specified\n * method with the specified arguments\n * \n * @param <T> Returntype of the SOAP Call, if unsure use Object\n * @param methodName\n * @param propertyInfos\n * @throws CWException \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate <T> T PerformSOAPCall(String methodName, PropertyInfo[] propertyInfos, IEnvelopeSetupCallback envSetup) throws CWException", "code": "{\n\tsynchronized(_transport)\n\t{\n\t\tSoapObject rpc = new SoapObject(\"http://www.crossingways.com/\", methodName);\n\t\t\n\t\tfor(PropertyInfo p : propertyInfos)\n\t\t\trpc.addProperty(p);\n\t\t\n\t\tSoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);\n\t\tnew MarshalBoolean(null, \"boolean\").register(envelope);\t\t\n\t\tnew MarshalDouble().register(envelope);\n\t\tnew MarshalDate().register(envelope);\n\t\t\n\t\tenvelope.dotNet = true;\n\t\tenvelope.setOutputSoapObject(rpc);\n\t\t\n\t\tif(envSetup != null)\n\t\t\tenvSetup.Setup(envelope);\n\t\t\n\t\ttry \n\t\t{\n\t\t\t_transport.debug = true;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t_transport.call(_namespace + methodName, envelope);\n\t\t\t\n\t\t\treturn (T)envelope.getResponse();\n\t\t} \n\t\tcatch (Exception e) \n\t\t{\n\t\t\te.printStackTrace();\n\t\t\tthrow new CWException(e.getMessage());\n\t\t}\t\t\n\t}\n\t\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Generates the Property Info for an array type\n * @param <T>\n * @param tagName\n * @param elementName\n * @param elements\n * @return\n */\n", "func_signal": "private <T> PropertyInfo CreateArrayPropertyInfo(String tagName, String elementName, Vector<T> elements)", "code": "{\n\tPropertyInfo elementProp = new PropertyInfo();\n\telementProp.setName(elementName);\n\telementProp.setValue(-1.0);\n\t\n\tPropertyInfo propInfo = new PropertyInfo();\n\tpropInfo.setName(tagName);\n\tpropInfo.setValue(elements);\n\tpropInfo.setElementType(elementProp);\n\treturn propInfo;\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/** Relists the files from disk and adds them to the list */\n", "func_signal": "private void RebuildTrackList()", "code": "{\n\tVector<TrackFile> files = new Vector<TrackFile>();\n\t\n\tfor(String file : fileList())\n\t{\n\t\tif(TrackFile.IsTrackFile(file))\n\t\t{\n\t\t\tTrackFile myFile = new TrackFile(this, file);\n\t\t\tfiles.add(myFile);\n\t\t}\n\t}\n\t\n\t_listAdapter = new TrackListDataAdapter(this, files);\n\t_list.setAdapter(_listAdapter);\n\t\n}", "path": "AndroidTracker\\src\\org\\cw\\TrackListActivity.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/** Wakes up the timer from a paused state */\n", "func_signal": "public void Start()", "code": "{\n\t_startingTime = System.currentTimeMillis();\n\t_isStarted = true;\n}", "path": "AndroidTracker\\src\\org\\cw\\dataitems\\TrackTime.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/** After warning, deletes the selected Track  from disk */\n", "func_signal": "private void ButtonDelete_Clicked()", "code": "{\n\tif(_list.getCheckedItemPosition() == ListView.INVALID_POSITION)\n\t\treturn;\n\n\tif(IsActionPossible() == false)\n\t\treturn;\n\t\n\tfinal TrackFile selectedTrackFile = (TrackFile)_list.getItemAtPosition(_list.getCheckedItemPosition());\n\t\t\t\n\tAlertDialog.Builder alert = new AlertDialog.Builder(this);\n\talert.setTitle(\"Removal\");\n\talert.setMessage(\"Really remove \"\n\t\t\t+ selectedTrackFile.toString()\n\t\t\t+ \" permanently?\");\n\talert.setPositiveButton(\"Yes, remove\",\n\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) \n\t\t\t\t{\n\t\t\t\t\tselectedTrackFile.DeleteMe();\n\t\t\t\t\tRebuildTrackList();\n\t\t\t\t}\n\t\t\t});\n\talert.setNegativeButton(\"No\", null);\n\talert.show();\n}", "path": "AndroidTracker\\src\\org\\cw\\TrackListActivity.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Synchronous upload a gpx file, used by the worker thread (actually by the posted request)\n * @param username\n * @param pwHash\n * @param trackName\n * @param gpxData\n * @return\n * @throws CWException \n */\n", "func_signal": "public ServerMessage UploadGpx(UploadGPXRequest request) throws CWException", "code": "{\n\tif(request.getCallback() != null)\n\t\tthis.publishProgress(new CallbackInfo(request.getCallback(), RequestProgressInfo.CreateStartingInfo(), request));\n\n\ttry\n\t{\n\t\tVector<PropertyInfo> properties = new Vector<PropertyInfo>();\n\t\tproperties.add(CreatePrimitivePropertyInfo(\"username\", request.getUsername()));\n\t\tproperties.add(CreatePrimitivePropertyInfo(\"password\", request.getPwHash()));\n\t\tproperties.add(CreatePrimitivePropertyInfo(\"trackname\", request.getTrackname()));\n\t\tproperties.add(CreatePrimitivePropertyInfo(\"gpx\", request.getGPXData()));\n\t\t\n\t\tString serverMessage = PerformSOAPCall(\"UploadGPX\", \n\t\t\t\tproperties.toArray(new PropertyInfo[0]),\n\t\t\t\tnull).toString();\n\t\t\n\t\tServerMessage msg = new ServerMessage(serverMessage);\n\t\t\n\t\tif(request.getCallback() != null)\n\t\t\tthis.publishProgress(new CallbackInfo(request.getCallback(), RequestProgressInfo.CreateCompletionInfo(), request));\n\t\t\n\t\treturn msg;\n\t}\n\tcatch(CWException e)\n\t{\n\t\tif(request.getCallback() != null)\n\t\t{\n\t\t\t//Post the execution callback and wait till it's executed by the ui thread\n\t\t\tCallbackInfo ci = new CallbackInfo(request.getCallback(), RequestProgressInfo.CreateErrorInfo(e.toString()), request);\t\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tci.AcquireExecutionLock();\n\t\t\t\tthis.publishProgress(ci);\n\t\t\t\tci.WaitForExecution();\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tci.ReleaseExecutionLock();\n\t\t\t}\n\t\t\t\n\t\t\tthrow new CWWithCallbackInfoException(e.getMessage(), ci);\n\t\t\t\n\t\t}\n\t\t\n\t\tthrow e;\n\t}\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Tries to merge as many requests from the queue as possible\n * \n * There are 2 reasons for the merge process to stop\n * 1.) The queue is empty\n * 2.) The next request is not compatible with the base request\n * @param baseRequest\n */\n", "func_signal": "private void MergeRequest(Request baseRequest)", "code": "{\n\tRequest requestToMerge = null;\n\t\n\twhile((requestToMerge = _requestQueue.peek()) != null)\n\t{\n\t\tif(baseRequest.TryMerge(requestToMerge))\n\t\t\t_requestQueue.remove();\n\t}\n}", "path": "AndroidTracker\\src\\org\\cw\\connection\\CrossingWaysConnection.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/** Load the selected track back to resume */\n", "func_signal": "private void ButtonLoad_Clicked()", "code": "{\n\tif(_list.getCheckedItemPosition() == ListView.INVALID_POSITION)\n\t\treturn;\n\t\n\tif(IsActionPossible() == false)\n\t\treturn;\n\t\t\n\tTrackFile fileToLoad = (TrackFile)_list.getItemAtPosition(_list.getCheckedItemPosition());\n\t\n\tTrackInformation trackInformation = TrackInformation.CreateFromTrackFile(fileToLoad);\n\t\n\tif(trackInformation == null)\n\t{\n\t\tEnvironment.Instance().AlertBuilderInstance().ShowInfoBox(\n\t\t\t\t\"Unknown error loading track information file...\", \n\t\t\t\t\"Error\", \n\t\t\t\t\"OK\");\n\t}\n\telse\n\t{\n\t\tEnvironment.Instance().registerTrack(trackInformation);\n\t\tEnvironment.Instance().getTrackRecorder().setEnabled(true);\n\t\tEnvironment.Instance().setLastRecordingState(RecordingUiEnum.Recording);\n\t\ttrackInformation.getTrackTime().Start();\n\t\tnew AlertBuilder(this).ShowInfoBox(\"Track loaded sucessful\", \"\", \"Close\");\n\t}\n}", "path": "AndroidTracker\\src\\org\\cw\\TrackListActivity.java", "repo_name": "deveck/AndroidTracker", "stars": 8, "license": "None", "language": "java", "size": 1660}
{"docstring": "/**\n * Makes a given filename safe by replacing special characters like colons (\":\")\n * with dashes (\"-\").\n *\n * @param path The path of the directory in question.\n * @return The the directory name with special characters replaced by hyphens.\n */\n", "func_signal": "private static String fileSystemSafeDir(String path)", "code": "{\n    if (path == null || path.trim().length() == 0) {\n        return \"\";\n    }\n\n    for (String s : FILE_SYSTEM_UNSAFE_DIR) {\n        path = path.replace(s, \"-\");\n    }\n    return path;\n}", "path": "subsonic-android\\src\\net\\sourceforge\\subsonic\\androidapp\\util\\FileUtil.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Parses meta data for the given music file.\n *\n * @param file The music file to parse.\n * @return Meta data for the file.\n */\n", "func_signal": "public MusicFile.MetaData getMetaData(MusicFile file)", "code": "{\n\n    MusicFile.MetaData metaData = getRawMetaData(file);\n    String artist = metaData.getArtist();\n    String album = metaData.getAlbum();\n    String title = metaData.getTitle();\n\n    if (artist == null) {\n        artist = guessArtist(file);\n    }\n    if (album == null) {\n        album = guessAlbum(file);\n    }\n    if (title == null) {\n        title = guessTitle(file);\n    }\n\n    title = removeTrackNumberFromTitle(title, metaData.getTrackNumber());\n    metaData.setArtist(artist);\n    metaData.setAlbum(album);\n    metaData.setTitle(title);\n\n    return metaData;\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\service\\metadata\\MetaDataParser.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Guesses the album for the given music file.\n */\n", "func_signal": "public String guessAlbum(MusicFile file)", "code": "{\n    try {\n        MusicFile parent = file.getParent();\n        return parent.isRoot() ? \"\" : parent.getName();\n    } catch (IOException x) {\n        LOG.warn(\"Error in guessAlbum()\", x);\n        return null;\n    }\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\service\\metadata\\MetaDataParser.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Work-around for a bug occuring when playing WAV.\n */\n", "func_signal": "@Override\nprotected void initAudioInputStream(InputStream inputStream) throws UnsupportedAudioFileException, IOException", "code": "{\n    m_audioFileFormat = AudioSystem.getAudioFileFormat(inputStream);\n    m_audioInputStream = AudioSystem.getAudioInputStream(inputStream);\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\service\\JukeboxService.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Guesses the artist for the given music file.\n */\n", "func_signal": "public String guessArtist(MusicFile file)", "code": "{\n    try {\n        MusicFile parent = file.getParent();\n        if (parent.isRoot()) {\n            return \"\";\n        }\n        MusicFile grandParent = parent.getParent();\n        return grandParent.isRoot() ? \"\" : grandParent.getName();\n    } catch (IOException x) {\n        LOG.warn(\"Error in guessArtist()\", x);\n        return null;\n    }\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\service\\metadata\\MetaDataParser.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Called when the activity is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    if (getIntent().hasExtra(Constants.INTENT_EXTRA_NAME_EXIT)) {\n        exit();\n    }\n    setContentView(R.layout.main);\n\n    loadSettings();\n\n    View buttons = LayoutInflater.from(this).inflate(R.layout.main_buttons, null);\n\n    final View serverButton = buttons.findViewById(R.id.main_select_server);\n    final TextView serverTextView = (TextView) serverButton.findViewById(R.id.main_select_server_2);\n\n    final View albumsTitle = buttons.findViewById(R.id.main_albums);\n    final View albumsNewestButton = buttons.findViewById(R.id.main_albums_newest);\n    final View albumsRandomButton = buttons.findViewById(R.id.main_albums_random);\n    final View albumsHighestButton = buttons.findViewById(R.id.main_albums_highest);\n    final View albumsRecentButton = buttons.findViewById(R.id.main_albums_recent);\n    final View albumsFrequentButton = buttons.findViewById(R.id.main_albums_frequent);\n\n    final View dummyView = findViewById(R.id.main_dummy);\n\n    int instance = Util.getActiveServer(this);\n    String name = Util.getServerName(this, instance);\n    serverTextView.setText(name);\n\n    ListView list = (ListView) findViewById(R.id.main_list);\n\n    MergeAdapter adapter = new MergeAdapter();\n    adapter.addViews(Arrays.asList(serverButton), true);\n    if (!Util.isOffline(this)) {\n        adapter.addView(albumsTitle, false);\n        adapter.addViews(Arrays.asList(albumsNewestButton, albumsRandomButton, albumsHighestButton, albumsRecentButton, albumsFrequentButton), true);\n    }\n    list.setAdapter(adapter);\n    registerForContextMenu(dummyView);\n\n    list.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n        @Override\n        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            if (view == serverButton) {\n                dummyView.showContextMenu();\n            } else if (view == albumsNewestButton) {\n                showAlbumList(\"newest\");\n            } else if (view == albumsRandomButton) {\n                showAlbumList(\"random\");\n            } else if (view == albumsHighestButton) {\n                showAlbumList(\"highest\");\n            } else if (view == albumsRecentButton) {\n                showAlbumList(\"recent\");\n            } else if (view == albumsFrequentButton) {\n                showAlbumList(\"frequent\");\n            }\n        }\n    });\n\n    // Title: Subsonic\n    setTitle(R.string.common_appname);\n\n    // Button 1: shuffle\n    ImageButton actionShuffleButton = (ImageButton)findViewById(R.id.action_button_1);\n    actionShuffleButton.setImageResource(R.drawable.action_shuffle);\n    actionShuffleButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            Intent intent = new Intent(MainActivity.this, DownloadActivity.class);\n            intent.putExtra(Constants.INTENT_EXTRA_NAME_SHUFFLE, true);\n            Util.startActivityWithoutTransition(MainActivity.this, intent);\n        }\n    });\n\n    // Button 2: search\n    ImageButton actionSearchButton = (ImageButton)findViewById(R.id.action_button_2);\n    actionSearchButton.setImageResource(R.drawable.action_search);\n    actionSearchButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n        \tIntent intent = new Intent(MainActivity.this, SearchActivity.class);\n        \tintent.putExtra(Constants.INTENT_EXTRA_REQUEST_SEARCH, true);\n            Util.startActivityWithoutTransition(MainActivity.this, intent);\n        }\n    });\n\n    // Remember the current theme.\n    theme = Util.getTheme(this);\n\n    showInfoDialog();\n}", "path": "subsonic-android\\src\\net\\sourceforge\\subsonic\\androidapp\\activity\\MainActivity.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n* Makes a given filename safe by replacing special characters like slashes (\"/\" and \"\\\")\n* with dashes (\"-\").\n*\n* @param filename The filename in question.\n* @return The filename with special characters replaced by hyphens.\n*/\n", "func_signal": "private static String fileSystemSafe(String filename)", "code": "{\n    if (filename == null || filename.trim().length() == 0) {\n        return \"unnamed\";\n    }\n\n    for (String s : FILE_SYSTEM_UNSAFE) {\n        filename = filename.replace(s, \"-\");\n    }\n    return filename;\n}", "path": "subsonic-android\\src\\net\\sourceforge\\subsonic\\androidapp\\util\\FileUtil.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Sets the number of bytes transferred.\n *\n * @param bytesTransfered The number of bytes transferred.\n */\n", "func_signal": "public synchronized void setBytesTransfered(long bytesTransfered)", "code": "{\n    this.bytesTransfered = bytesTransfered;\n    createSample(bytesTransfered, false);\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\domain\\TransferStatus.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Returns a long description of the player, e.g., <code>Player 3 [admin]</code>\n *\n * @return A long description of the player.\n */\n", "func_signal": "public String getDescription()", "code": "{\n    StringBuilder builder = new StringBuilder();\n    if (name != null) {\n        builder.append(name);\n    } else {\n        builder.append(\"Player \").append(id);\n    }\n\n    builder.append(\" [\").append(username).append(']');\n    return builder.toString();\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\domain\\Player.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Returns a short description of the player, e.g., <code>Player 3</code>\n *\n * @return A short description of the player.\n */\n", "func_signal": "public String getShortDescription()", "code": "{\n    if (StringUtils.isNotBlank(name)) {\n        return name;\n    }\n    return \"Player \" + id;\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\domain\\Player.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Stop playing audio on the local device.\n */\n", "func_signal": "public synchronized void stop()", "code": "{\n    if (jukeboxPlayer != null) {\n        jukeboxPlayer.stop();\n        jukeboxPlayer = null;\n    }\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\service\\JukeboxService.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Sets whether this transfer is active, i.e., if the connection is still established.\n *\n * @param active Whether this transfer is active.\n */\n", "func_signal": "public void setActive(boolean active)", "code": "{\n    this.active = active;\n\n    if (active) {\n        setBytesSkipped(0L);\n        setBytesTotal(0L);\n        setBytesTransfered(0L);\n    } else {\n        createSample(getBytesTransfered(), true);\n    }\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\domain\\TransferStatus.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Returns the number of milliseconds since the transfer status was last updated.\n *\n * @return Number of milliseconds, or <code>0</code> if never updated.\n */\n", "func_signal": "public synchronized long getMillisSinceLastUpdate()", "code": "{\n    if (history.isEmpty()) {\n        return 0L;\n    }\n    return System.currentTimeMillis() - history.getLast().timestamp;\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\domain\\TransferStatus.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Called when the activity is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.select_artist);\n\n    artistList = (ListView) findViewById(R.id.select_artist_list);\n    artistList.setOnItemClickListener(this);\n\n    folderButton = LayoutInflater.from(this).inflate(R.layout.select_artist_header, artistList, false);\n    folderName = (TextView) folderButton.findViewById(R.id.select_artist_folder_2);\n\n    if (!Util.isOffline(this)) {\n        artistList.addHeaderView(folderButton);\n    }\n\n    registerForContextMenu(artistList);\n\n    setTitle(Util.isOffline(this) ? R.string.music_library_label_offline : R.string.music_library_label);\n\n    // Button 1: shuffle\n    ImageButton shuffleButton = (ImageButton) findViewById(R.id.action_button_1);\n    shuffleButton.setImageResource(R.drawable.action_shuffle);\n    shuffleButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            Intent intent = new Intent(SelectArtistActivity.this, DownloadActivity.class);\n            intent.putExtra(Constants.INTENT_EXTRA_NAME_SHUFFLE, true);\n            Util.startActivityWithoutTransition(SelectArtistActivity.this, intent);\n        }\n    });\n\n    // Button 2: refresh\n    ImageButton refreshButton = (ImageButton) findViewById(R.id.action_button_2);\n    refreshButton.setImageResource(R.drawable.action_refresh);\n    refreshButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            refresh();\n        }\n    });\n\n    musicFolders = null;\n    load();\n}", "path": "subsonic-android\\src\\net\\sourceforge\\subsonic\\androidapp\\activity\\SelectArtistActivity.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Returns the base name (the substring before the last dot) of the given file. The dot\n * is not included in the returned basename.\n *\n * @param name The filename in question.\n * @return The base name, or an empty string if no basename is found.\n */\n", "func_signal": "public static String getBaseName(String name)", "code": "{\n    int index = name.lastIndexOf('.');\n    return index == -1 ? name : name.substring(0, index);\n}", "path": "subsonic-android\\src\\net\\sourceforge\\subsonic\\androidapp\\util\\FileUtil.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Similar to {@link File#listFiles()}, but returns a sorted set.\n * Never returns {@code null}, instead a warning is logged, and an empty set is returned.\n */\n", "func_signal": "public static SortedSet<File> listFiles(File dir)", "code": "{\n    File[] files = dir.listFiles();\n    if (files == null) {\n        Log.w(TAG, \"Failed to list children for \" + dir.getPath());\n        return new TreeSet<File>();\n    }\n\n    return new TreeSet<File>(Arrays.asList(files));\n}", "path": "subsonic-android\\src\\net\\sourceforge\\subsonic\\androidapp\\util\\FileUtil.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Creates a new sample.\n *\n * @param bytesTransfered The total number of bytes transferred.\n * @param timestamp       A point in time, in milliseconds.\n */\n", "func_signal": "public Sample(long bytesTransfered, long timestamp)", "code": "{\n    this.bytesTransfered = bytesTransfered;\n    this.timestamp = timestamp;\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\domain\\TransferStatus.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Start playing the playlist of the given player on the local audio device.\n *\n * @param player The player in question.\n */\n", "func_signal": "public synchronized void play(Player player)", "code": "{\n    User user = securityService.getUserByName(player.getUsername());\n    if (!user.isJukeboxRole()) {\n        LOG.warn(user.getUsername() + \" is not authorized for jukebox playback.\");\n        return;\n    }\n\n    stop();\n    if (player.getPlaylist().getStatus() == Playlist.Status.PLAYING) {\n        LOG.info(\"Starting jukebox player on behalf of \" + player.getUsername());\n        jukeboxPlayer = new JuxeboxPlayer(player);\n        jukeboxPlayer.play();\n    }\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\service\\JukeboxService.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Removes any prefixed track number from the given title string.\n *\n * @param title       The title with or without a prefixed track number, e.g., \"02 - Back In Black\".\n * @param trackNumber If specified, this is the \"true\" track number.\n * @return The title with the track number removed, e.g., \"Back In Black\".\n */\n", "func_signal": "protected String removeTrackNumberFromTitle(String title, Integer trackNumber)", "code": "{\n    title = title.trim();\n\n    // Don't remove numbers if true track number is given, and title does not start with it.\n    if (trackNumber != null && !title.matches(\"0?\" + trackNumber + \".*\")) {\n        return title;\n    }\n\n    String result = title.replaceFirst(\"^\\\\d{2}[\\\\.\\\\- ]+\", \"\");\n    return result.length() == 0 ? title : result;\n}", "path": "subsonic-main\\src\\main\\java\\net\\sourceforge\\subsonic\\service\\metadata\\MetaDataParser.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "/**\n * Returns the extension (the substring after the last dot) of the given file. The dot\n * is not included in the returned extension.\n *\n * @param name The filename in question.\n * @return The extension, or an empty string if no extension is found.\n */\n", "func_signal": "public static String getExtension(String name)", "code": "{\n    int index = name.lastIndexOf('.');\n    return index == -1 ? \"\" : name.substring(index + 1).toLowerCase();\n}", "path": "subsonic-android\\src\\net\\sourceforge\\subsonic\\androidapp\\util\\FileUtil.java", "repo_name": "coolya/subsonic", "stars": 8, "license": "None", "language": "java", "size": 135095}
{"docstring": "// Check the table we last mutated\n", "func_signal": "private void checkTotalSum() throws IOException, CommitUnsuccessfulException", "code": "{\n    TransactionState transactionState = transactionManager.beginTransaction();\n    int totalSum = 0;\n    for (int i = 0; i < NUM_ST_ROWS; i++) {\n        totalSum += Bytes.toInt(table.get(transactionState, new Get(makeSTRow(i)).addColumn(FAMILY, QUAL_A))\n                .getValue(FAMILY, QUAL_A));\n    }\n\n    transactionManager.tryCommit(transactionState);\n    if (TOTAL_SUM != totalSum) {\n        super.consistencyFailure();\n    }\n}", "path": "src\\test\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\StressTestTransactions.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "// Read from ROW1,COL_A and put it in ROW2_COLA and ROW3_COLA\n", "func_signal": "private TransactionState makeTransaction1() throws IOException", "code": "{\n    TransactionState transactionState = transactionManager.beginTransaction();\n\n    Result row1_A = table.get(transactionState, new Get(ROW1).addColumn(COL_A));\n\n    table.put(transactionState, new Put(ROW2).add(FAMILY, QUAL_A, row1_A.getValue(FAMILY, QUAL_A)));\n    table.put(transactionState, new Put(ROW3).add(FAMILY, QUAL_A, row1_A.getValue(FAMILY, QUAL_A)));\n\n    return transactionState;\n}", "path": "src\\test\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\TestTransactions.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * Open up an indexed scanner. Results will come back in the indexed order, but will contain RowResults from the\n * original table.\n * \n * @param indexId the id of the index to use\n * @param indexStartRow (created from the IndexKeyGenerator)\n * @param indexStopRow (created from the IndexKeyGenerator)\n * @param indexColumns in the index table\n * @param indexFilter filter to run on the index'ed table. This can only use columns that have been added to the\n *            index.\n * @param baseColumns from the original table\n * @return scanner\n * @throws IOException\n * @throws IndexNotFoundException\n */\n", "func_signal": "public ResultScanner getIndexedScanner(final String indexId, final byte[] indexStartRow, final byte[] indexStopRow,\n        final byte[][] indexColumns, final Filter indexFilter, final byte[][] baseColumns) throws IOException,\n        IndexNotFoundException", "code": "{\n    IndexSpecification indexSpec = this.indexedTableDescriptor.getIndex(indexId);\n    if (indexSpec == null) {\n        throw new IndexNotFoundException(\"Index \" + indexId + \" not defined in table \"\n                + super.getTableDescriptor().getNameAsString());\n    }\n    verifyIndexColumns(indexColumns, indexSpec);\n    // TODO, verify/remove index columns from baseColumns\n\n    HTable indexTable = indexIdToTable.get(indexId);\n\n    byte[][] allIndexColumns;\n    if (indexColumns != null) {\n        allIndexColumns = new byte[indexColumns.length + 1][];\n        System.arraycopy(indexColumns, 0, allIndexColumns, 0, indexColumns.length);\n        allIndexColumns[indexColumns.length] = INDEX_BASE_ROW_COLUMN;\n    } else {\n        byte[][] allColumns = indexSpec.getAllColumns();\n        allIndexColumns = new byte[allColumns.length + 1][];\n        System.arraycopy(allColumns, 0, allIndexColumns, 0, allColumns.length);\n        allIndexColumns[allColumns.length] = INDEX_BASE_ROW_COLUMN;\n    }\n\n    Scan indexScan = new Scan();\n    indexScan.setFilter(indexFilter);\n    indexScan.addColumns(allIndexColumns);\n    if (indexStartRow != null) {\n        indexScan.setStartRow(indexStartRow);\n    }\n    if (indexStopRow != null) {\n        indexScan.setStopRow(indexStopRow);\n    }\n    ResultScanner indexScanner = indexTable.getScanner(indexScan);\n\n    return new ScannerWrapper(indexScanner, baseColumns);\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\tableindexed\\IndexedTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * @param conf\n * @throws IOException\n */\n", "func_signal": "public TransactionalRegionServer(final Configuration conf) throws IOException", "code": "{\n    super(conf);\n    cleanOldTransactionsThread = new CleanOldTransactionsChore(this, super.stopRequested);\n    transactionLeases = new Leases(conf.getInt(LEASE_TIME, DEFAULT_LEASE_TIME), LEASE_CHECK_FREQUENCY);\n    LOG.error(\"leases time:\" + conf.getInt(LEASE_TIME, DEFAULT_LEASE_TIME));\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\regionserver\\transactional\\TransactionalRegionServer.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * Method for getting data from a row\n * \n * @param get the Get to fetch\n * @return the result\n * @throws IOException\n * @since 0.20.0\n */\n", "func_signal": "public Result get(final TransactionState transactionState, final Get get) throws IOException", "code": "{\n    return super.getConnection().getRegionServerWithRetries(\n        new TransactionalServerCallable<Result>(super.getConnection(), super.getTableName(), get.getRow(),\n                transactionState) {\n\n            public Result call() throws IOException {\n                recordServer();\n                return getTransactionServer().get(transactionState.getTransactionId(),\n                    location.getRegionInfo().getRegionName(), get);\n            }\n        });\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\TransactionalTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * Creates a new indexed table\n * \n * @param desc table descriptor for table\n * @throws IOException\n */\n", "func_signal": "public void createIndexedTable(final IndexedTableDescriptor desc) throws IOException", "code": "{\n    super.createTable(desc.getBaseTableDescriptor());\n    this.createIndexTables(desc);\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\tableindexed\\IndexedTableAdmin.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * @param delete\n * @throws IOException\n * @since 0.20.0\n */\n", "func_signal": "public void delete(final TransactionState transactionState, final Delete delete) throws IOException", "code": "{\n    super.getConnection().getRegionServerWithRetries(\n        new TransactionalServerCallable<Object>(super.getConnection(), super.getTableName(), delete.getRow(),\n                transactionState) {\n\n            public Object call() throws IOException {\n                recordServer();\n                getTransactionServer().delete(transactionState.getTransactionId(),\n                    location.getRegionInfo().getRegionName(), delete);\n                return null;\n            }\n        });\n\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\TransactionalTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * @param connection\n * @param tableName\n * @param row\n * @param transactionState\n */\n", "func_signal": "public TransactionalServerCallable(final HConnection connection, final byte[] tableName, final byte[] row,\n        final TransactionState transactionState)", "code": "{\n    super(connection, tableName, row);\n    this.transactionState = transactionState;\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\TransactionalTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public Result next() throws IOException", "code": "{\n    Result[] result = next(1);\n    if (result == null || result.length < 1) return null;\n    return result[0];\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\tableindexed\\IndexedTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * Commit a Put to the table.\n * <p>\n * If autoFlush is false, the update is buffered.\n * \n * @param put\n * @throws IOException\n * @since 0.20.0\n */\n", "func_signal": "public synchronized void put(final TransactionState transactionState, final Put put) throws IOException", "code": "{\n    // super.validatePut(put);\n    super.getConnection().getRegionServerWithRetries(\n        new TransactionalServerCallable<Object>(super.getConnection(), super.getTableName(), put.getRow(),\n                transactionState) {\n\n            public Object call() throws IOException {\n                recordServer();\n                getTransactionServer().put(transactionState.getTransactionId(),\n                    location.getRegionInfo().getRegionName(), put);\n                return null;\n            }\n        });\n\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\TransactionalTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public Result[] next(final int nbRows) throws IOException", "code": "{\n    Result[] indexResult = indexScanner.next(nbRows);\n    if (indexResult == null) {\n        return null;\n    }\n    Result[] result = new Result[indexResult.length];\n    for (int i = 0; i < indexResult.length; i++) {\n        Result row = indexResult[i];\n\n        byte[] baseRow = row.getValue(INDEX_COL_FAMILY, INDEX_BASE_ROW);\n        if (baseRow == null) {\n            throw new IllegalStateException(\"Missing base row for indexed row: [\" + Bytes.toString(row.getRow())\n                    + \"]\");\n        }\n        LOG.debug(\"next index row [\" + Bytes.toString(row.getRow()) + \"] -> base row [\"\n                + Bytes.toString(baseRow) + \"]\");\n        Result baseResult = null;\n        if (columns != null && columns.length > 0) {\n            LOG.debug(\"Going to base table for remaining columns\");\n            Get baseGet = new Get(baseRow);\n            baseGet.addColumns(columns);\n            baseResult = IndexedTable.this.get(baseGet);\n        }\n\n        List<KeyValue> results = new ArrayList<KeyValue>();\n        for (KeyValue indexKV : row.list()) {\n            if (indexKV.matchingFamily(INDEX_COL_FAMILY)) {\n                continue;\n            }\n            results.add(new KeyValue(baseRow, indexKV.getFamily(), indexKV.getQualifier(), indexKV\n                    .getTimestamp(), KeyValue.Type.Put, indexKV.getValue()));\n        }\n\n        if (baseResult != null) {\n            List<KeyValue> list = baseResult.list();\n            if (list != null) {\n                results.addAll(list);\n            }\n        }\n\n        result[i] = new Result(results);\n    }\n    return result;\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\tableindexed\\IndexedTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * Abort (hard) the region server serving TABLE_NAME.\n */\n", "func_signal": "private void abortRegionServer()", "code": "{\n    List<JVMClusterUtil.RegionServerThread> regionThreads = TEST_UTIL.getHBaseCluster().getRegionServerThreads();\n\n    int server = -1;\n    for (int i = 0; i < regionThreads.size(); i++) {\n        HRegionServer s = regionThreads.get(i).getRegionServer();\n        Collection<HRegion> regions = s.getOnlineRegions();\n        LOG.info(\"server: \" + regionThreads.get(i).getName());\n        for (HRegion r : regions) {\n            LOG.info(\"region: \" + r.getRegionInfo().getRegionNameAsString());\n            if (Bytes.equals(r.getTableDesc().getName(), Bytes.toBytes(TABLE_NAME))) {\n                server = i;\n            }\n        }\n    }\n    if (server == -1) {\n        LOG.fatal(\"could not find region server serving table region\");\n        Assert.fail();\n    }\n\n    this.TEST_UTIL.getHBaseCluster().abortRegionServer(server);\n\n    LOG.info(this.TEST_UTIL.getHBaseCluster().waitOnRegionServer(server) + \" has been aborted\");\n}", "path": "src\\test\\java\\org\\apache\\hadoop\\hbase\\regionserver\\transactional\\TestTHLogRecovery.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "// Copied from HTable.ClientScanner.iterator()\n", "func_signal": "public Iterator<Result> iterator()", "code": "{\n    return new Iterator<Result>() {\n\n        // The next RowResult, possibly pre-read\n        Result next = null;\n\n        // return true if there is another item pending, false if there isn't.\n        // this method is where the actual advancing takes place, but you need\n        // to call next() to consume it. hasNext() will only advance if there\n        // isn't a pending next().\n        public boolean hasNext() {\n            if (next == null) {\n                try {\n                    next = ScannerWrapper.this.next();\n                    return next != null;\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return true;\n        }\n\n        // get the pending next item and advance the iterator. returns null if\n        // there is no next item.\n        public Result next() {\n            // since hasNext() does the real advancing, we call this to determine\n            // if there is a next before proceeding.\n            if (!hasNext()) {\n                return null;\n            }\n\n            // if we get to here, then hasNext() has given us an item to return.\n            // we want to return the item and then null out the next pointer, so\n            // we use a temporary variable.\n            Result temp = next;\n            next = null;\n            return temp;\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\tableindexed\\IndexedTable.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "// Move 2 out of ROW1 and 1 into ROW2 and 1 into ROW3\n", "func_signal": "private TransactionState makeTransaction(final boolean flushMidWay) throws IOException", "code": "{\n    TransactionState transactionState = transactionManager.beginTransaction();\n\n    // Reads\n    int row1 = Bytes.toInt(table.get(transactionState, new Get(ROW1).addColumn(FAMILY, QUAL_A)).getValue(FAMILY,\n        QUAL_A));\n    int row2 = Bytes.toInt(table.get(transactionState, new Get(ROW2).addColumn(FAMILY, QUAL_A)).getValue(FAMILY,\n        QUAL_A));\n    int row3 = Bytes.toInt(table.get(transactionState, new Get(ROW3).addColumn(FAMILY, QUAL_A)).getValue(FAMILY,\n        QUAL_A));\n\n    row1 -= 2;\n    row2 += 1;\n    row3 += 1;\n\n    if (flushMidWay) {\n        flushRegionServer();\n    }\n\n    // Writes\n    Put write = new Put(ROW1);\n    write.add(FAMILY, QUAL_A, Bytes.toBytes(row1));\n    table.put(transactionState, write);\n\n    write = new Put(ROW2);\n    write.add(FAMILY, QUAL_A, Bytes.toBytes(row2));\n    table.put(transactionState, write);\n\n    write = new Put(ROW3);\n    write.add(FAMILY, QUAL_A, Bytes.toBytes(row3));\n    table.put(transactionState, write);\n\n    return transactionState;\n}", "path": "src\\test\\java\\org\\apache\\hadoop\\hbase\\regionserver\\transactional\\TestTHLogRecovery.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/*\n * Run verification in a thread so I can concurrently run a thread-dumper while we're waiting (because in this test\n * sometimes the meta scanner looks to be be stuck). @param tableName Name of table to find. @param row Row we\n * expect to find. @return Verification thread. Caller needs to calls start on it.\n */\n", "func_signal": "private Thread startVerificationThread(final int numRuns)", "code": "{\n    Runnable runnable = new Runnable() {\n\n        public void run() {\n            try {\n                // Now try to open a scanner on the meta table. Should stall until\n                // meta server comes back up.\n                HTable t = new HTable(TEST_UTIL.getConfiguration(), TABLE_NAME);\n                Scan s = new Scan();\n                s.addColumn(FAMILY, QUAL_A);\n                ResultScanner scanner = t.getScanner(s);\n                scanner.close();\n\n            } catch (IOException e) {\n                LOG.fatal(\"could not re-open meta table because\", e);\n                Assert.fail();\n            }\n\n            try {\n                verify(numRuns);\n                LOG.info(\"Success!\");\n            } catch (Exception e) {\n                e.printStackTrace();\n                Assert.fail();\n            }\n        }\n    };\n    return new Thread(runnable);\n}", "path": "src\\test\\java\\org\\apache\\hadoop\\hbase\\regionserver\\transactional\\TestTHLogRecovery.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * @throws java.lang.Exception\n */\n", "func_signal": "@BeforeClass\npublic static void setUpBeforeClass() throws Exception", "code": "{\n    TEST_UTIL.getConfiguration().set(HConstants.REGION_SERVER_CLASS, TransactionalRegionInterface.class.getName());\n    TEST_UTIL.getConfiguration().set(HConstants.REGION_SERVER_IMPL, TransactionalRegionServer.class.getName());\n\n    TEST_UTIL.startMiniCluster(3);\n    setupTables();\n}", "path": "src\\test\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\TestTransactions.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/** Add an index to a table. */\n", "func_signal": "public void addIndex(final byte[] baseTableName, final IndexSpecification indexSpec) throws IOException", "code": "{\n    LOG.warn(\"Adding index to existing table [\" + Bytes.toString(baseTableName) + \"], this may take a long time\");\n    // TODO, make table read-only\n    LOG.warn(\"Not putting table in readonly, if its being written to, the index may get out of sync\");\n    HTableDescriptor indexTableDesc = createIndexTableDesc(baseTableName, indexSpec);\n    super.createTable(indexTableDesc);\n    super.disableTable(baseTableName);\n    IndexedTableDescriptor indexDesc = new IndexedTableDescriptor(super.getTableDescriptor(baseTableName));\n    indexDesc.addIndex(indexSpec);\n    super.modifyTable(baseTableName, indexDesc.getBaseTableDescriptor());\n    super.enableTable(baseTableName);\n    reIndexTable(baseTableName, indexSpec);\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\tableindexed\\IndexedTableAdmin.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "// Read ROW1,COL_A, increment its (integer) value, write back\n", "func_signal": "private TransactionState makeTransaction2() throws IOException", "code": "{\n    TransactionState transactionState = transactionManager.beginTransaction();\n\n    Result row1_A = table.get(transactionState, new Get(ROW1).addColumn(COL_A));\n\n    int value = Bytes.toInt(row1_A.getValue(FAMILY, QUAL_A));\n\n    table.put(transactionState, new Put(ROW1).add(FAMILY, QUAL_A, Bytes.toBytes(value + 1)));\n\n    return transactionState;\n}", "path": "src\\test\\java\\org\\apache\\hadoop\\hbase\\client\\transactional\\TestTransactions.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * Remove an index for a table.\n * \n * @throws IOException\n */\n", "func_signal": "public void removeIndex(final byte[] baseTableName, final String indexId) throws IOException", "code": "{\n    super.disableTable(baseTableName);\n    HTableDescriptor desc = super.getTableDescriptor(baseTableName);\n    IndexedTableDescriptor indexDesc = new IndexedTableDescriptor(desc);\n    IndexSpecification spec = indexDesc.getIndex(indexId);\n    indexDesc.removeIndex(indexId);\n    this.disableTable(spec.getIndexedTableName(baseTableName));\n    this.deleteTable(spec.getIndexedTableName(baseTableName));\n    super.modifyTable(baseTableName, desc);\n    super.enableTable(baseTableName);\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\client\\tableindexed\\IndexedTableAdmin.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * We want to delay the close region for a bit if we have commit pending transactions.\n */\n", "func_signal": "@Override\nprotected void closeRegion(final HRegionInfo hri, final boolean reportWhenCompleted) throws IOException", "code": "{\n    getTransactionalRegion(hri.getRegionName()).prepareToClose();\n    super.closeRegion(hri, reportWhenCompleted);\n}", "path": "src\\main\\java\\org\\apache\\hadoop\\hbase\\regionserver\\transactional\\TransactionalRegionServer.java", "repo_name": "clintam/hbase-transactional-tableindexed", "stars": 14, "license": "None", "language": "java", "size": 310}
{"docstring": "/**\n * pagesize (optional)\n * <p/>\n * The number of collection results to display during pagination. Should be between 1 and 100 inclusive.\n *\n * @param pageSize The size of the page to return.\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withPageSize(Integer pageSize)", "code": "{\n  stackAppRequest.addQueryPart(\"pagesize\", pageSize);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * fromdate (optional)\n * <p/>\n * Unix timestamp of the minimum creation date on a returned item.\n *\n * @param fromDate The starting date.\n * @return The current configuration.\n */\n", "func_signal": "public ReputationForUserRequestConfiguration withFromDate(Long fromDate)", "code": "{\n  stackAppRequest.addQueryPart(\"fromdate\", fromDate);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\ReputationForUserRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * nottagged (optional)\n * <p/>\n * List of tags delimited by semi-colons that must not be on a question\n *\n * @param notTagged The nottagged filter to apply.\n * @return The current configuration.\n */\n", "func_signal": "public SearchQuestionsRequestConfiguration withNotTagged(String notTagged)", "code": "{\n  stackAppRequest.addQueryPart(\"nottagged\", notTagged);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\SearchQuestionsRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * max (optional)\n * <p/>\n * Maximum of the range to include in the current sort.\n *\n * @param max The maximum value of the sort range.\n * @return The current configuration.\n */\n", "func_signal": "public SearchQuestionsRequestConfiguration withMax(String max)", "code": "{\n  stackAppRequest.addQueryPart(\"max\", max);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\SearchQuestionsRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * tagged (optional)\n * <p/>\n * List of tags delimited by semi-colons of which at least one must be on a question\n *\n * @param tagged The tagged filter to apply.\n * @return The current configuration.\n */\n", "func_signal": "public SearchQuestionsRequestConfiguration withTagged(String tagged)", "code": "{\n  stackAppRequest.addQueryPart(\"tagged\", tagged);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\SearchQuestionsRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * order (optional)\n * <p/>\n * How the current sort should be ordered, either \"asc\" or \"desc\". Default is \"desc\".\n * one of desc (default), or asc\n *\n * @param order The order of the sort if used\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withOrder(String order)", "code": "{\n  stackAppRequest.addQueryPart(\"order\", order);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * intitle (optional)\n * <p/>\n * String that must appear in returned users' names\n *\n * @param inTitle The intitle filter to apply.\n * @return The current configuration.\n */\n", "func_signal": "public SearchQuestionsRequestConfiguration withInTitle(String inTitle)", "code": "{\n  stackAppRequest.addQueryPart(\"intitle\", inTitle);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\SearchQuestionsRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * fromdate (optional)\n * <p/>\n * Unix timestamp of the minimum creation date on a returned item.\n *\n * @param fromDate The starting date.\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withFromDate(Long fromDate)", "code": "{\n  stackAppRequest.addQueryPart(\"fromdate\", fromDate);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * pagesize (optional)\n * <p/>\n * The number of collection results to display during pagination. Should be between 1 and 100 inclusive.\n *\n * @param pageSize The size of the page to return.\n * @return The current configuration.\n */\n", "func_signal": "public SearchQuestionsRequestConfiguration withPageSize(Integer pageSize)", "code": "{\n  stackAppRequest.addQueryPart(\"pagesize\", pageSize);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\SearchQuestionsRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * max (optional)\n * <p/>\n * Maximum of the range to include in the response according to the current sort.\n *\n * @param max The max range of the sort.\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withMax(Integer max)", "code": "{\n  stackAppRequest.addQueryPart(\"max\", max);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * comments (optional)\n * <p/>\n * When \"true\", any comments on a post will be included in the response. Default is \"false\".\n *\n * @param comments Return the comments or not.\n * @return The current configuration.\n */\n", "func_signal": "public AnswersForUserRequestConfiguration withComments(Boolean comments)", "code": "{\n  stackAppRequest.addQueryPart(\"comments\", comments);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\AnswersForUserRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * min (optional)\n * <p/>\n * Minimum of the range to include in the response according to the current sort.\n *\n * @param min The starting range of the sort\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withMin(Integer min)", "code": "{\n  stackAppRequest.addQueryPart(\"min\", min);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * page (optional)\n * <p/>\n * The pagination offset for the current collection. Affected by the specified pagesize.\n *\n * @param page The current page\n * @return The current configuration.\n */\n", "func_signal": "public ReputationForUserRequestConfiguration withPage(Integer page)", "code": "{\n  stackAppRequest.addQueryPart(\"page\", page);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\ReputationForUserRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * order (optional)\n * <p/>\n * How the current sort should be ordered.\n *\n * @param order The order of the sort.\n * @return The current configuration.\n */\n", "func_signal": "public SearchQuestionsRequestConfiguration withOrder(String order)", "code": "{\n  stackAppRequest.addQueryPart(\"order\", order);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\SearchQuestionsRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * body (optional)\n * <p/>\n * When \"true\", a post's body will be included in the response. Default is \"false\".\n *\n * @param body Return the body or not.\n * @return The current configuration.\n */\n", "func_signal": "public AnswersForUserRequestConfiguration withBody(Boolean body)", "code": "{\n  stackAppRequest.addQueryPart(\"body\", body);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\AnswersForUserRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * sort (optional)\n * <p/>\n * How a collection should be sorted. Various values include \"active\", \"creation\", \"views\", \"votes\".\n * one of activity (default), views, creation, or votes\n *\n * @param sort The way the answers should be sorted\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withSort(String sort)", "code": "{\n  stackAppRequest.addQueryPart(\"sort\", sort);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * todate (optional)\n * <p/>\n * Unix timestamp of the maximum creation date on a returned item.\n *\n * @param toDate The ending date.\n * @return The current configuration.\n */\n", "func_signal": "public ReputationForUserRequestConfiguration withToDate(Long toDate)", "code": "{\n  stackAppRequest.addQueryPart(\"todate\", toDate);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\ReputationForUserRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * todate (optional)\n * <p/>\n * Unix timestamp of the maximum creation date on a returned item.\n *\n * @param toDate The ending date.\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withToDate(Long toDate)", "code": "{\n  stackAppRequest.addQueryPart(\"todate\", toDate);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * page (optional)\n * <p/>\n * The pagination offset for the current collection. Affected by the specified pagesize.\n *\n * @param page The current page\n * @return The current configuration.\n */\n", "func_signal": "public CommentRequestConfiguration withPage(Integer page)", "code": "{\n  stackAppRequest.addQueryPart(\"page\", page);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\CommentRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * sort (optional)\n * <p/>\n * How a collection should be sorted.\n * one of reputation (default), creation, or name\n *\n * @param sort One of reputation, creation, or name\n * @return The current configuration.\n */\n", "func_signal": "public SearchQuestionsRequestConfiguration withSort(String sort)", "code": "{\n  stackAppRequest.addQueryPart(\"sort\", sort);\n  return this;\n}", "path": "src\\net\\ioncannon\\stackapps\\api\\request\\SearchQuestionsRequestConfiguration.java", "repo_name": "carsonmcdonald/Stack-Apps-Java-Library", "stars": 11, "license": "None", "language": "java", "size": 1254}
{"docstring": "/**\n * Draws a framed oval whose center is at (center_x, center_y) in field\n * coordinates.\n *\n * @param drawing_on the graphics context on which the method draws\n * @param in_color the color of the outline of the oval\n * @param stroke the width of the line drawing the oval, in pixels\n * @param center_x the x coordinate of the center of the oval in\n * field coordinates\n * @param center_y the y coordinate of the center of the oval in\n * field coordiantes\n * @param x_radius 1/2 the \"width\" of the oval\n * @param y_radius 1/2 the \"height\" of the oval\n */\n", "func_signal": "public void drawOval(Graphics2D drawing_on, Color in_color,\n                     double stroke,\n                     double center_x, double center_y,\n                     double x_radius, double y_radius)", "code": "{\n    drawing_on.setColor(in_color);\n    drawing_on.setStroke(new BasicStroke((float)stroke));\n    drawing_on.drawOval(fixXCoord(center_x - x_radius),\n                        fixYCoord(center_y + y_radius),\n                        fixWidth(2. * x_radius),\n                        fixHeight(2. * y_radius));\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Creates a BufferedImage representation of the field through the use\n * of helper drawing methods.\n * @return the image representation of the field\n */\n", "func_signal": "public BufferedImage getFieldImage()", "code": "{\n    BufferedImage field = new BufferedImage((int) FIELD_WIDTH,\n                                            (int) FIELD_HEIGHT,\n                                            BufferedImage.TYPE_INT_ARGB);\n    Graphics2D g2 = field.createGraphics();\n    drawField(g2);\n    drawFieldLines(g2);\n    drawGoals(g2);\n    return field;\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws a line between (x_1, y_1) and (x_2, y_2) in field coordinates.\n *\n * @param drawing_on the graphics context on which this method draws\n * @param in_color the color of the line\n * @param strok A strok object of the type to be painted on the field\n * @param x_1 the x coordinate of one endpoint of the line, in field\n *        coordinates\n * @param y_1 the corresponding y coordinate of x_1, in field coordinates\n * @param x_2 the x coordinate of the second endpoint of the line, in\n *        field coordinates\n * @param y_2 the corresponding y coordinate of x_2, in field coordinates\n */\n", "func_signal": "public void drawLine(Graphics2D drawing_on, Color in_color,\n                     BasicStroke stroke,\n                     double x_1, double y_1,\n                     double x_2, double y_2)", "code": "{\n    drawing_on.setColor(in_color);\n    drawing_on.setStroke(stroke);\n    drawing_on.drawLine(fixXCoord(x_2), fixYCoord(y_2),\n                        fixXCoord(x_1), fixYCoord(y_1));\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Helper method which delegates the drawing of the two goals to two\n * other methods, drawTopGoal and drawBottomGoal\n * @param g2 the graphics context on which to draw\n */\n", "func_signal": "protected void drawGoals(Graphics2D g2)", "code": "{\n    drawLeftGoal(g2);\n    drawRightGoal(g2);\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws a number at (left_x, bottom_y) in field coordinates.\n *\n * @param drawing_on the graphics context on which to draw the number\n * @param in_color the color in which the number will be drawn\n * @param left_x the x coord (field coordinates) where number will be\n *        drawn\n * @param bottom_y the y coord (field coordinates) where number will be\n *        drawn\n * @param number the number to draw\n */\n", "func_signal": "public void drawNumber(Graphics2D drawing_on, Color in_color,\n                       double left_x, double bottom_y, int number)", "code": "{\n    drawing_on.setColor(in_color);\n    drawing_on.drawString(\"\"+number, fixXCoord(left_x),\n                          fixYCoord(bottom_y));\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws a line between (x_1, y_1) and (x_2, y_2) in field coordinates.\n *\n * @param drawing_on the graphics context on which this method draws\n * @param in_color the color of the line\n * @param x_1 the x coordinate of one endpoint of the line, in field\n *        coordinates\n * @param y_1 the corresponding y coordinate of x_1, in field coordinates\n * @param x_2 the x coordinate of the second endpoint of the line, in\n *        field coordinates\n * @param y_2 the corresponding y coordinate of x_2, in field coordinates\n */\n", "func_signal": "public void drawLine(Graphics2D drawing_on, Color in_color,\n                     double stroke,\n                     double x_1, double y_1,\n                     double x_2, double y_2)", "code": "{\n    drawing_on.setColor(in_color);\n    drawing_on.setStroke(new BasicStroke((float)stroke));\n    drawing_on.drawLine(fixXCoord(x_2), fixYCoord(y_2),\n                        fixXCoord(x_1), fixYCoord(y_1));\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n* Draws the bottom goal on the given graphics context.\n* @param g2 the graphics context on which to draw\n*/\n", "func_signal": "protected void drawRightGoal(Graphics2D g2)", "code": "{\n   // Draw the net\n   drawNet(g2, NET_COLOR, NET_DRAW_WIDTH,\n           LANDMARK_RIGHT_GOAL_TOP_POST_X,\n           LANDMARK_RIGHT_GOAL_TOP_POST_Y,\n           LANDMARK_RIGHT_GOAL_BOTTOM_POST_X + GOAL_SIDE_LENGTH,\n           LANDMARK_RIGHT_GOAL_BOTTOM_POST_Y);\n\n   // draw top side of goal\n   drawLine(g2, GOAL_SIDE_COLOR, DEFAULT_THICKNESS,\n            LANDMARK_RIGHT_GOAL_TOP_POST_X,\n            LANDMARK_RIGHT_GOAL_TOP_POST_Y,\n            LANDMARK_RIGHT_GOAL_TOP_POST_X + GOAL_SIDE_LENGTH,\n            LANDMARK_RIGHT_GOAL_TOP_POST_Y);\n   // draw bottom side of goal\n   drawLine(g2, GOAL_SIDE_COLOR, DEFAULT_THICKNESS,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_X,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_Y,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_X + GOAL_SIDE_LENGTH,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_Y);\n\n   // draw left goal top post\n   fillOval(g2, RIGHT_GOAL_COLOR, DEFAULT_THICKNESS,\n            LANDMARK_RIGHT_GOAL_TOP_POST_X,\n            LANDMARK_RIGHT_GOAL_TOP_POST_Y,\n            GOAL_POST_RADIUS, GOAL_POST_RADIUS);\n   // draw right goal bottom post\n   fillOval(g2, RIGHT_GOAL_COLOR, DEFAULT_THICKNESS,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_X,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_Y,\n            GOAL_POST_RADIUS, GOAL_POST_RADIUS);\n\n   // draw crossbar\n   drawLine(g2, RIGHT_GOAL_COLOR, GOAL_CROSSBAR_THICKNESS,\n            LANDMARK_RIGHT_GOAL_TOP_POST_X,\n            LANDMARK_RIGHT_GOAL_TOP_POST_Y,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_X,\n            LANDMARK_RIGHT_GOAL_BOTTOM_POST_Y);\n    }", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n *  Called evertime we change frames in the data set.\n *  Currently attempts to run cpp vision on the new frame each time\n */\n", "func_signal": "public void notifyFrame(Frame d)", "code": "{\n    currentFrame = d;\n    processFrame();\n}", "path": "TOOL\\Vision\\VisionModule.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "// Overridden getYCbCr() method, to convert values\n", "func_signal": "public int[] getYCbCr(int x, int y)", "code": "{\n    int[] yCbCr = new int[COLOR_DEPTH];\n    YCbCr_CS.fromRGB(pixels[y][x], yCbCr);\n    return yCbCr;\n}", "path": "TOOL\\Image\\RGBImage.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws a rectangle whose lower left corner is located at field\n * coordinates (left_x, bottom_y).  Transforms the coordinates into image\n * coordinates before rendering.\n * @param drawing_on the graphics context on which this method draws and\n * subsequently changes\n * @param in_color the Color to draw the rectangle frame\n * @param stroke the width of the line to draw, in pixels\n * @param left_x the x coordinate of bottom left of the rectangle - in\n * FIELD coordinates\n * @param bottom_y the y coord of the bottom left of the rectangle -\n * in FIELD coordinates\n * @param width the width of the rectangle, in cm (pixels)\n * @param height the height of the rectangle, in cm (pixels)\n */\n", "func_signal": "public void drawRect(Graphics2D drawing_on, Color in_color,\n                     double stroke, double left_x,\n                     double bottom_y, double width,\n                     double height)", "code": "{\n    drawing_on.setColor(in_color);\n    drawing_on.setStroke(new BasicStroke((float)stroke));\n    drawing_on.drawRect(fixXCoord(left_x), fixYCoord(bottom_y + height),\n                        fixWidth(width), fixHeight(height));\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Change the current mode of drawing to drawMode.\n */\n", "func_signal": "public void setMode(DrawingMode drawMode)", "code": "{\n    this.drawMode = drawMode;\n    drawing = false;\n    curShape = drawMode.getShape();\n}", "path": "TOOL\\Image\\DefaultDrawingPanel.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws the field lines on top of the green of the field.\n * @param g2 the graphics context on which to draw\n */\n", "func_signal": "protected void drawFieldLines(Graphics2D g2)", "code": "{\n    // Sidelines\n    drawRect(g2, LINES_COLOR, LINE_THICKNESS,\n             LEFT_SIDELINE_X, GREEN_PAD_Y,\n             FIELD_WHITE_WIDTH, FIELD_WHITE_HEIGHT);\n\n    // Midline\n    drawLine(g2, LINES_COLOR, LINE_THICKNESS,\n             MIDFIELD_X,TOP_SIDELINE_Y, MIDFIELD_X, BOTTOM_SIDELINE_Y);\n\n    // Center circle\n    drawOval(g2, LINES_COLOR, LINE_THICKNESS, MIDFIELD_X,\n             MIDFIELD_Y, CENTER_CIRCLE_RADIUS, CENTER_CIRCLE_RADIUS);\n\n    // Left goal box\n    drawRect(g2, LINES_COLOR, LINE_THICKNESS,\n             LEFT_SIDELINE_X, GOALBOX_BOTTOM_Y,\n             GOALBOX_DEPTH, GOALBOX_WIDTH);\n\n    // Right goal box\n    drawRect(g2, LINES_COLOR, LINE_THICKNESS,\n             RIGHT_SIDELINE_X - GOALBOX_DEPTH, GOALBOX_BOTTOM_Y,\n             GOALBOX_DEPTH, GOALBOX_WIDTH);\n\n    // Left side cross\n    drawLine(g2, LINES_COLOR, LINE_THICKNESS,\n             LEFT_SIDELINE_X + 180.0f - 5.0f,\n             CENTER_FIELD_Y,\n             LEFT_SIDELINE_X + 180.0f + 5.0f,\n             CENTER_FIELD_Y);\n    drawLine(g2, LINES_COLOR, LINE_THICKNESS,\n             LEFT_SIDELINE_X + 180.0f,\n             CENTER_FIELD_Y + 5.0f,\n             LEFT_SIDELINE_X + 180.0f,\n             CENTER_FIELD_Y - 5.0f);\n    // Right side cross\n    drawLine(g2, LINES_COLOR, LINE_THICKNESS,\n             RIGHT_SIDELINE_X - 180.0f - 5.0f,\n             CENTER_FIELD_Y,\n             RIGHT_SIDELINE_X - 180.0f + 5.0f,\n             CENTER_FIELD_Y);\n    drawLine(g2, LINES_COLOR, LINE_THICKNESS,\n             RIGHT_SIDELINE_X - 180.0f,\n             CENTER_FIELD_Y + 5.0f,\n             RIGHT_SIDELINE_X - 180.0f,\n             CENTER_FIELD_Y - 5.0f);\n\n    // Center field cross\n    drawLine(g2, LINES_COLOR, LINE_THICKNESS,\n             CENTER_FIELD_X - 5.0f,\n             CENTER_FIELD_Y,\n             CENTER_FIELD_X + 5.0f,\n             CENTER_FIELD_Y);\n\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws the top goal on the given graphics context.\n * @param g2 the graphics context on which to draw\n */\n", "func_signal": "protected void drawLeftGoal(Graphics2D g2)", "code": "{\n    drawNet(g2, NET_COLOR, NET_DRAW_WIDTH,\n            LANDMARK_LEFT_GOAL_TOP_POST_X - GOAL_SIDE_LENGTH,\n            LANDMARK_LEFT_GOAL_TOP_POST_Y,\n            LANDMARK_LEFT_GOAL_BOTTOM_POST_X,\n            LANDMARK_LEFT_GOAL_BOTTOM_POST_Y);\n\n    // draw top side of goal\n    drawLine(g2, GOAL_SIDE_COLOR, DEFAULT_THICKNESS,\n             LANDMARK_LEFT_GOAL_TOP_POST_X,\n             LANDMARK_LEFT_GOAL_TOP_POST_Y,\n             LANDMARK_LEFT_GOAL_TOP_POST_X - GOAL_SIDE_LENGTH,\n             LANDMARK_LEFT_GOAL_TOP_POST_Y);\n    // draw bottom side of goal\n    drawLine(g2, GOAL_SIDE_COLOR, DEFAULT_THICKNESS,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_X,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_Y,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_X - GOAL_SIDE_LENGTH,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_Y);\n    // draw left goal top post\n    fillOval(g2, LEFT_GOAL_COLOR, DEFAULT_THICKNESS,\n             LANDMARK_LEFT_GOAL_TOP_POST_X,\n             LANDMARK_LEFT_GOAL_TOP_POST_Y,\n             GOAL_POST_RADIUS, GOAL_POST_RADIUS);\n    // draw left goal bottom post\n    fillOval(g2, LEFT_GOAL_COLOR, DEFAULT_THICKNESS,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_X,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_Y,\n             GOAL_POST_RADIUS, GOAL_POST_RADIUS);\n\n    // draw crossbar\n    drawLine(g2, LEFT_GOAL_COLOR, GOAL_CROSSBAR_THICKNESS,\n             LANDMARK_LEFT_GOAL_TOP_POST_X,\n             LANDMARK_LEFT_GOAL_TOP_POST_Y,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_X,\n             LANDMARK_LEFT_GOAL_BOTTOM_POST_Y);\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "//\n// ActionListener contract\n//\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n    String cmd = e.getActionCommand();\n    Object src = e.getSource();\n\n    if (src == disconnect)\n        robot.disconnect();\n\n    else if (cmd.startsWith(CHECKBOX_CMD))\n        for (DataType t : DataType.values())\n            if (src == checkBoxes.get(t.ordinal()))\n                robot.getRequestDetails().flip(t);\n}", "path": "TOOL\\GUI\\RobotOptionPanel.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Main constructor\n *\n * @param name - Name of the treenNode\n */\n", "func_signal": "public PBTreeNode(String name)", "code": "{\n\tid = name;\n\teditable = true;\n}", "path": "TOOL\\PlayBookEditor\\PBTreeNode.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws the green part of the field.\n * @param g2 the graphics context on which to draw\n */\n", "func_signal": "protected void drawField(Graphics2D g2)", "code": "{\n    g2.setColor(FIELD_COLOR);\n    g2.fillRect(0,0, (int) FIELD_WIDTH, (int) FIELD_HEIGHT);\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws a filled rectangle whose lower left corner is at field coordinates\n * (left_x, bottom_y).\n * @see drawRect(Graphics2D, Color, double, double, double, double, double)\n * drawRect\n */\n", "func_signal": "public void fillRect(Graphics2D drawing_on, Color in_color,\n                     double stroke, double left_x,\n                     double bottom_y, double width,\n                     double height)", "code": "{\n    drawing_on.setColor(in_color);\n    drawing_on.setStroke(new BasicStroke((float)stroke));\n    drawing_on.fillRect(fixXCoord(left_x),\n                        fixYCoord(bottom_y + height),\n                        fixWidth(width),\n                        fixHeight(height));\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "// Color Format: RGB\n// Byte order: Interleaved, RGB...RGB\n//\n", "func_signal": "public void readByteArray(byte[] rawImage)", "code": "{\n    int i = 0;\n    for (int r = 0; r < getHeight(); r++) {\n        for (int c = 0; c < getWidth(); c++) {\n            pixels[r][c][0] = rawImage[i++];\n            pixels[r][c][1] = rawImage[i++];\n            pixels[r][c][2] = rawImage[i++];\n        }\n    }\n}", "path": "TOOL\\Image\\RGBImage.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Draws a filled oval whose center is at (center_x, center_y) in field\n * coordiantes.\n * @param drawing_on the graphics context on which the method draws\n * @param in_color the color of the outline of the oval\n * @param stroke the width of the line drawing the oval, in pixels\n * @param center_x the x coordinate of the center of the oval in\n * field coordinates\n * @param center_y the y coordinate of the center of the oval in\n * field coordiantes\n * @param x_radius 1/2 the \"width\" of the oval\n * @param y_radius 1/2 the \"height\" of the oval\n */\n", "func_signal": "public void fillOval(Graphics2D drawing_on, Color in_color,\n                     double stroke,\n                     double center_x, double center_y,\n                     double x_radius, double y_radius)", "code": "{\n    drawing_on.setColor(in_color);\n    drawing_on.setStroke(new BasicStroke((float)stroke));\n    drawing_on.fillOval(fixXCoord(center_x - x_radius),\n                        fixYCoord(center_y + y_radius),\n                        fixWidth(2. * x_radius),\n                        fixHeight(2. * y_radius));\n}", "path": "TOOL\\Data\\Field.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Method to load in the next Role to edit.\n *\n * @param toEdit The role to now be edited\n */\n", "func_signal": "protected void loadEditable(Role toEdit)", "code": "{\n\tif ( !toEdit.isEditable() ){\n\t    JOptionPane.showMessageDialog(null, \"Role \" +toEdit.toString()+\n\t\t\t\t\t  \"is not editable!\", \"Error\", \n\t\t\t\t\t  JOptionPane.ERROR_MESSAGE);\n\t    return;\n\t}\n\n\tediting = toEdit;\n\teditor.setEditingText(toEdit.toString());\n\n\t// Clear the field of whatever is on it\n\t// Draw the zones defined for this Role\n\tEnumeration<SubRole> toDraw = editing.getChildren().elements();\n\tSubRole f;\n\twhile(toDraw.hasMoreElements()) {\n\t    f = toDraw.nextElement();\n\t    //editor.drawZone(editing.getAssociatedZone(f));\n\t}\n}", "path": "TOOL\\PlayBookEditor\\PBRoleModePanel.java", "repo_name": "northern-bites/tool", "stars": 14, "license": "None", "language": "java", "size": 1283}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONObject which is produced from a Map.\n * @param value A Map value.\n * @return      this.\n */\n", "func_signal": "public JSONArray put(Map value)", "code": "{\n    put(new JSONObject(value));\n    return this;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Get the double value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n */\n", "func_signal": "public double getDouble(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    try {\n        return o instanceof Number ?\n            ((Number)o).doubleValue() :\n            Double.valueOf((String)o).doubleValue();\n    } catch (Exception e) {\n        throw new JSONException(\"JSONArray[\" + index +\n            \"] is not a number.\");\n    }\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Produce a JSONObject by combining a JSONArray of names with the values\n * of this JSONArray.\n * @param names A JSONArray containing a list of key strings. These will be\n * paired with the values.\n * @return A JSONObject, or null if there are no names or if this JSONArray\n * has no values.\n * @throws JSONException If any of the names are null.\n */\n", "func_signal": "public JSONObject toJSONObject(JSONArray names) throws JSONException", "code": "{\n    if (names == null || names.length() == 0 || length() == 0) {\n        return null;\n    }\n    JSONObject jo = new JSONObject();\n    for (int i = 0; i < names.length(); i += 1) {\n        jo.put(names.getString(i), this.opt(i));\n    }\n    return jo;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Get the optional boolean value associated with an index.\n * It returns the defaultValue if there is no value at that index or if\n * it is not a Boolean or the String \"true\" or \"false\" (case insensitive).\n *\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     A boolean default.\n * @return      The truth.\n */\n", "func_signal": "public boolean optBoolean(int index, boolean defaultValue)", "code": "{\n    try {\n        return getBoolean(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Put or replace a boolean value in the JSONArray. If the index is greater\n * than the length of the JSONArray, then null elements will be added as\n * necessary to pad it out.\n * @param index The subscript.\n * @param value A boolean value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, boolean value) throws JSONException", "code": "{\n    put(index, value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Get the optional JSONArray associated with an index.\n * @param index subscript\n * @return      A JSONArray value, or null if the index has no value,\n * or if the value is not a JSONArray.\n */\n", "func_signal": "public JSONArray optJSONArray(int index)", "code": "{\n    Object o = opt(index);\n    return o instanceof JSONArray ? (JSONArray)o : null;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Append an object value. This increases the array's length by one.\n * @param value An object value.  The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n */\n", "func_signal": "public JSONArray put(Object value)", "code": "{\n    this.myArrayList.add(value);\n    return this;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Construct a JSONArray from a Collection.\n * @param collection     A Collection.\n */\n", "func_signal": "public JSONArray(Collection collection)", "code": "{\n    this.myArrayList = (collection == null) ?\n        new ArrayList() :\n        new ArrayList(collection);\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Get the optional string associated with an index.\n * The defaultValue is returned if the key is not found.\n *\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      A String value.\n */\n", "func_signal": "public String optString(int index, String defaultValue)", "code": "{\n    Object o = opt(index);\n    return o != null ? o.toString() : defaultValue;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Construct a JSONArray from a collection of beans.\n * The collection should have Java Beans.\n * \n * @throws JSONException If not an array.\n */\n", "func_signal": "public JSONArray(Collection collection, boolean includeSuperClass)", "code": "{\n\t\tthis.myArrayList = new ArrayList();\n\t\tif (collection != null) {\n\t\t\tIterator iter = collection.iterator();;\n\t\t\twhile (iter.hasNext()) {\n\t\t\t    Object o = iter.next();\n\t\t\t    if (o instanceof Map) {\n\t\t\t    \tthis.myArrayList.add(new JSONObject((Map)o, includeSuperClass));\n\t\t\t    } else if (!JSONObject.isStandardProperty(o.getClass())) {\n\t\t\t    \tthis.myArrayList.add(new JSONObject(o, includeSuperClass));\n\t\t\t    } else {\n                this.myArrayList.add(o);  \n\t\t\t\t}\n\t\t\t}\n\t\t}\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param index The subscript.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, Collection value) throws JSONException", "code": "{\n    put(index, new JSONArray(value));\n    return this;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Construct a JSONArray from an array with a bean.\n * The array should have Java Beans.\n * \n * @throws JSONException If not an array.\n */\n", "func_signal": "public JSONArray(Object array,boolean includeSuperClass) throws JSONException", "code": "{\n    this();\n    if (array.getClass().isArray()) {\n        int length = Array.getLength(array);\n        for (int i = 0; i < length; i += 1) {\n            Object o = Array.get(array, i);\n            if (JSONObject.isStandardProperty(o.getClass())) {\n                this.myArrayList.add(o);  \n            } else {\n                this.myArrayList.add(new JSONObject(o,includeSuperClass));  \n            }\n        }\n    } else {\n        throw new JSONException(\"JSONArray initial value should be a string or collection or array.\");\n    }\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Construct a JSONArray from a JSONTokener.\n * @param x A JSONTokener\n * @throws JSONException If there is a syntax error.\n */\n", "func_signal": "public JSONArray(JSONTokener x) throws JSONException", "code": "{\n    this();\n    char c = x.nextClean();\n    char q;\n    if (c == '[') {\n        q = ']';\n    } else if (c == '(') {\n        q = ')';\n    } else {\n        throw x.syntaxError(\"A JSONArray text must start with '['\");\n    }\n    if (x.nextClean() == ']') {\n        return;\n    }\n    x.back();\n    for (;;) {\n        if (x.nextClean() == ',') {\n            x.back();\n            this.myArrayList.add(null);\n        } else {\n            x.back();\n            this.myArrayList.add(x.nextValue());\n        }\n        c = x.nextClean();\n        switch (c) {\n        case ';':\n        case ',':\n            if (x.nextClean() == ']') {\n                return;\n            }\n            x.back();\n            break;\n        case ']':\n        case ')':\n            if (q != c) {\n                throw x.syntaxError(\"Expected a '\" + new Character(q) + \"'\");\n            }\n            return;\n        default:\n            throw x.syntaxError(\"Expected a ',' or ']'\");\n        }\n    }\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Append a double value. This increases the array's length by one.\n *\n * @param value A double value.\n * @throws JSONException if the value is not finite.\n * @return this.\n */\n", "func_signal": "public JSONArray put(double value) throws JSONException", "code": "{\n    Double d = new Double(value);\n    JSONObject.testValidity(d);\n    put(d);\n    return this;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Remove an index and close the hole.\n * @param index The index of the element to be removed.\n * @return The value that was associated with the index,\n * or null if there was no value.\n */\n", "func_signal": "public Object remove(int index)", "code": "{\n\tObject o = opt(index);\n    this.myArrayList.remove(index);\n    return o;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Get the long value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n */\n", "func_signal": "public long getLong(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    return o instanceof Number ?\n            ((Number)o).longValue() : (long)getDouble(index);\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Get the object value associated with an index.\n * @param index\n *  The index must be between 0 and length() - 1.\n * @return An object value.\n * @throws JSONException If there is no value for the index.\n */\n", "func_signal": "public Object get(int index) throws JSONException", "code": "{\n    Object o = opt(index);\n    if (o == null) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    return o;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Get the optional JSONObject associated with an index.\n * Null is returned if the key is not found, or null if the index has\n * no value, or if the value is not a JSONObject.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      A JSONObject value.\n */\n", "func_signal": "public JSONObject optJSONObject(int index)", "code": "{\n    Object o = opt(index);\n    return o instanceof JSONObject ? (JSONObject)o : null;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Append a boolean value. This increases the array's length by one.\n *\n * @param value A boolean value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(boolean value)", "code": "{\n    put(value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "/**\n * Put or replace a long value. If the index is greater than the length of\n *  the JSONArray, then null elements will be added as necessary to pad\n *  it out.\n * @param index The subscript.\n * @param value A long value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, long value) throws JSONException", "code": "{\n    put(index, new Long(value));\n    return this;\n}", "path": "rest-client-gae\\src\\org\\json\\JSONArray.java", "repo_name": "caelum/rest-client", "stars": 15, "license": "mit", "language": "java", "size": 26314}
{"docstring": "// RECEIVE DATA FROM MOTE BUS\n", "func_signal": "public void onReceiveData(int SensorID, int[] data, long[] timeStamps)", "code": "{\n\t//if(Log.DEBUG) Log.d(TAG, \"onReceiveData(): got a buffer from \" + SensorID+\" \"+data.length+\" \"+timestamp);\n\tif(SensorID == Constants.SENSOR_RIP)\n\t{\n\t\tif(Log.DEBUG) Log.d(TAG, \"onReceiveData(): got a buffer from \" + SensorID+\" \"+data[0]+\" \"+data[1]+\" \"+data[2]+\" \"+data[3]+\" \"+data[4]);\n\t\t//long[] timeStamps = new long[data.length];\n\t\t//Arrays.fill(timeStamps, 0, data.length, timestamp);\n\t\taddValue(data, timeStamps);\t\n\t}\n}", "path": "src\\org\\fieldstream\\service\\sensor\\virtual\\RipQualityVirtualSensor.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/* BEGIN INITIALIZATION METHODS */\n", "func_signal": "private void initInterviewState()", "code": "{\n\t// init interview state\n\tcurrQuestion = 0;\n\tstate = AT_START;\n\tpromptTimes = PROMPT_REPEAT;\n\t\n\tinterviewIsCancelled = false;\n\t\n\t// init interview data\n//\t\tcontent = new InterviewContent();\n\tentry = new InterviewData(content.getNumberQuestions(false), content.getNumberDelayQuestions());\n\t\n//\t\tlastSelected = new LinkedList<Integer>();\n//\t\tlastRow = new LinkedList<Long>();\n\t\n//\t\t// init the keyguard lock manager\n\tKeyguardManager mgr = (KeyguardManager)this.getSystemService(KEYGUARD_SERVICE);\n\tkeyguard = mgr.newKeyguardLock(\"EMA_Interview\");\n\t\n\tPowerManager pm = (PowerManager)this.getSystemService(POWER_SERVICE);\n\t//wakelock = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP, \"AbstractInterview\");\n\twakelock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP, \"AbstractInterview\");\t\n}", "path": "src\\org\\fieldstream\\gui\\ema\\AbstractInterview.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/* This is called immediately after onCreate() when the app is started\n\t * or after the app comes back from a pause.\n\t */\n", "func_signal": "@Override\n\tprotected void onResume()", "code": "{\n\t\t//handler.post(updateView);\n\n\t\tandroid.provider.Settings.System.putInt(getContentResolver(), android.provider.Settings.System.END_BUTTON_BEHAVIOR, END_DISABLED);\n\t\tkeyguard.disableKeyguard();\n\t\twakelock.acquire();\n\t\tLog.i(\"Interview\", \"onResume\");\n\t\tsuper.onResume();\n\t\t\n\t}", "path": "src\\org\\fieldstream\\gui\\ema\\AbstractInterview.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * \n * @param SensorID\n */\n", "func_signal": "public AccelerometerSensor(int SensorID)", "code": "{\n\tsuper(SensorID);\n\t\n\t\n\tinitalize(ACCELSCHEDULER,ACCELWINDOWSIZE,ACCELWINDOWSIZE);\n\taccelClass = Accelerometer.getInstance();\n\tswitch (SensorID) {\n\tcase Constants.SENSOR_ACCELPHONEMAG:\n\t\taccelClass.magnitude = this;\n\t\tbreak;\n\tcase Constants.SENSOR_ACCELPHONEX:\n\t\taccelClass.accelX = this;\n\t\tbreak;\n\tcase Constants.SENSOR_ACCELPHONEY:\n\t\taccelClass.accelY = this;\n\t\tbreak;\n\tcase Constants.SENSOR_ACCELPHONEZ:\n\t\taccelClass.accelZ = this;\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t} \n}", "path": "src\\org\\fieldstream\\service\\sensors\\phone\\AccelerometerSensor.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * Create a label maker\n * or maximum compatibility with various OpenGL ES implementations,\n * the strike width and height must be powers of two,\n * We want the strike width to be at least as wide as the widest window.\n *\n * @param fullColor true if we want a full color backing store (4444),\n * otherwise we generate a grey L8 backing store.\n * @param strikeWidth width of strike\n * @param strikeHeight height of strike\n */\n", "func_signal": "public LabelMaker(boolean fullColor, int strikeWidth, int strikeHeight)", "code": "{\n    mFullColor = fullColor;\n    mStrikeWidth = strikeWidth;\n    mStrikeHeight = strikeHeight;\n    mTexelWidth = (float) (1.0 / mStrikeWidth);\n    mTexelHeight = (float) (1.0 / mStrikeHeight);\n    mClearPaint = new Paint();\n    mClearPaint.setARGB(0, 0, 0, 0);\n    mClearPaint.setStyle(Style.FILL);\n    mState = STATE_NEW;\n    \n    setupTexturedQuad();\n}", "path": "src\\org\\fieldstream\\oscilloscope\\LabelMaker.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * Call before adding labels. Clears out any existing labels.\n *\n * @param gl\n */\n", "func_signal": "public void beginAdding(GL10 gl)", "code": "{\n    checkState(STATE_INITIALIZED, STATE_ADDING);\n    mLabels.clear();\n    mU = 0;\n    mV = 0;\n    mLineHeight = 0;\n    Bitmap.Config config = mFullColor ?\n            Bitmap.Config.ARGB_4444 : Bitmap.Config.ALPHA_8;\n    mBitmap = Bitmap.createBitmap(mStrikeWidth, mStrikeHeight, config);\n    mCanvas = new Canvas(mBitmap);\n    mBitmap.eraseColor(0);\n}", "path": "src\\org\\fieldstream\\oscilloscope\\LabelMaker.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "//\tpublic void onReceiveData(int SensorID, int[] data) {\n//\t\tif(SensorID == Constants.SENSOR_VIRTUAL_REALPEAKVALLEY)\n//\t\t{\n//\t\t\tlong[] timeStamps = new long[data.length];\n//\t\t\taddValue(data, timeStamps);\t\t\n//\t\t}\n//\t\t\n//\t}\n//\tpublic void receiveBuffer(int sensorID, int[] data, long[] timestamps,\n//\t\t\tint startNewData, int endNewData) {\n//\t\tif (sensorID==Constants.SENSOR_VIRTUAL_EXHALATION) {\n//\t\t\tString ripData=\"\";\n//\t\t\tfor(int i=0;i<data.length;i++)\n//\t\t\t{\n//\t\t\t\tripData+=data[i]+\",\";\n//\t\t\t}\n//\t\t\tString checktimestamp=\"\";\n//\t\t\tfor(int i=0;i<timestamps.length;i++)\n//\t\t\t{\n//\t\t\t\tchecktimestamp+=timestamps[i]+\",\";\n//\t\t\t}\n//\t\t\tLog.d(\"ExhalationFirstDiff\", \"raw RIP data= \"+ripData);\n//\t\t\tLog.d(\"ExhalationFirstDiff\",\"raw RIP data timestamp= \"+checktimestamp);\n//\t\t\taddValue(data, timestamps);\t\t\n//\t\t}\n//\t}\n", "func_signal": "public void onReceiveData(int SensorID, int[] data, long[] timeStamps)", "code": "{\n\tLog.d(\"FirstDiffExhal_onReceiveData\",\"SensorID = \" + SensorID);\n\tif(SensorID == Constants.SENSOR_RIP)\n\t{\n\t\t//long[] timeStamps = new long[data.length];\n\t\t//Arrays.fill(timeStamps, 0, data.length, timestamp);\n\t\taddValue(data, timeStamps);\t\n\t\t\n\t\tif (Log.DEBUG) {\n\t\t\t//Log.d(\"RealPeakValleyVirtualSensor\", \"raw value = \" + data[0]);\n\t\t\t//comment out-mahbub\n\t\t\t//Log.d(\"RealPeakValleyVirtualSensor\", \"length of data array = \" + data[0]);\n\t\t\tString ripData=\"\";\n\t\t\tfor(int i=0;i<data.length;i++)\n\t\t\t{\n\t\t\t\tripData+=data[i]+\",\";\n\t\t\t}\n\t\t\tString checktimestamp=\"\";\n\t\t\tfor(int i=0;i<timeStamps.length;i++)\n\t\t\t{\n\t\t\t\tchecktimestamp+=timestamps[i]+\",\";\n\t\t\t}\n\t\t\tLog.d(\"ExhalationFirstDiff\", \"raw RIP data= \"+ripData);\n\t\t\tLog.d(\"ExhalationFirstDiff\",\"raw RIP data timestamp= \"+checktimestamp);\n\t\t}\n\t}\n}", "path": "src\\org\\fieldstream\\service\\sensor\\virtual\\ExhalationFirstDiffVirtualSensor.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "// updates the time we display in the TextView\n", "func_signal": "private void updateDisplay()", "code": "{\t\n\tDateFormat timeFormatter = DateFormat.getTimeInstance(DateFormat.SHORT);\n\t\n    quietStartTimeButton.setText(timeFormatter.format(quietStartTime.getTime()));\n    quietEndTimeButton.setText(timeFormatter.format(quietEndTime.getTime()));\n    sleepingStartTimeButton.setText(timeFormatter.format(sleepingStartTime.getTime()));\n    sleepingEndTimeButton.setText(timeFormatter.format(sleepingEndTime.getTime()));\n    \n    quietStartDateButton.setText(getDateText(quietStartTime));\n    quietEndDateButton.setText(getDateText(quietEndTime));\t    \n    sleepingStartDateButton.setText(getDateText(sleepingStartTime));\n    sleepingEndDateButton.setText(getDateText(sleepingEndTime));\t    \n}", "path": "src\\org\\fieldstream\\DeadPeriodSetup.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * Call when the surface has been destroyed\n */\n", "func_signal": "public void shutdown(GL10 gl)", "code": "{\n    if ( gl != null) {\n        if (mState > STATE_NEW) {\n            int[] textures = new int[1];\n            textures[0] = mTextureID;\n            gl.glDeleteTextures(1, textures, 0);\n            mState = STATE_NEW;\n        }\n    }\n}", "path": "src\\org\\fieldstream\\oscilloscope\\LabelMaker.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/* Handles item selections */\n", "func_signal": "public boolean onOptionsItemSelected(MenuItem item)", "code": "{\n    switch (item.getItemId()) {\n    case BREAK_DELAY:\n    \tpromptTimes = 0;\n    \tentry.setDelayStop(System.currentTimeMillis());\n        handler.removeCallbacks(startInterview);\n        handler.post(startInterview);\n        \n\n\t\tentry.setDelayStop(System.currentTimeMillis());\n\t\tLog.i(\"launchStartDialog\", \"set delay stop time\");\n\n\t\tif (delayMenu != null) {\n\t\t\tdelayMenu.clear();\n\t\t\tdelayMenu.close();\n\t\t\tdelayMenu = null;\n\t\t}\n        \n        return true;\n    case CANCEL:\n//\t    \tdelayMenu = null;\n        return true;\n    }\n    return false;\n}", "path": "src\\org\\fieldstream\\gui\\ema\\AbstractInterview.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "// this callback indicates that a user action has caused focus to be lost\n", "func_signal": "protected void onUserLeaveHint()", "code": "{\n\tLog.i(\"AbstractInterview\", \"onUserLeaveHint()\");\n\n\thomeKeyPressed = true;\n\tsuper.onUserLeaveHint();\n}", "path": "src\\org\\fieldstream\\gui\\ema\\AbstractInterview.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "// override the keydown event listener to capture keypresses\n// disables all keys except HOME, END and POWER. END is handled by\n// changing the system settings for end button behavior, home and \n// power need to be researched...\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\n        // disable the back button while in the interview\n    \tif (!debugMode)\n    \t\treturn true;\n    }\n    if (keyCode == KeyEvent.KEYCODE_CALL) {\n    \t// disable the call button\n    \treturn true;\n    }\n    if (keyCode == KeyEvent.KEYCODE_CAMERA) {\n    \t// disable camera\n    \treturn true;\n    }\n    if (keyCode == KeyEvent.KEYCODE_POWER) {\n    \t// don't know if this can be disabled here\n    \treturn true;\n    }\n    if (keyCode == KeyEvent.KEYCODE_SEARCH) {\n    \t// disable search\n    \treturn true;\n    }\n    return super.onKeyDown(keyCode, event);\n}", "path": "src\\org\\fieldstream\\gui\\ema\\AbstractInterview.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * Call to initialize the class.\n * Call whenever the surface has been created.\n *\n * @param gl\n */\n", "func_signal": "public void initialize(GL10 gl)", "code": "{\n    mState = STATE_INITIALIZED;\n    int[] textures = new int[1];\n    gl.glGenTextures(1, textures, 0);\n    mTextureID = textures[0];\n    gl.glBindTexture(GL10.GL_TEXTURE_2D, mTextureID);\n\n    // Use Nearest for performance.\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER,\n            GL10.GL_NEAREST);\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER,\n            GL10.GL_NEAREST);\n\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S,\n            GL10.GL_CLAMP_TO_EDGE);\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T,\n            GL10.GL_CLAMP_TO_EDGE);\n\n    gl.glTexEnvf(GL10.GL_TEXTURE_ENV, GL10.GL_TEXTURE_ENV_MODE,\n            GL10.GL_REPLACE);\n                \n}", "path": "src\\org\\fieldstream\\oscilloscope\\LabelMaker.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "//\tpublic void setMissed() {\n//\t\tmissed = true;\n//\t\tabandoned = false;\n//\t\tcompleted = false;\n//\t}\n//\t\n//\tpublic void setAbandoned() {\n//\t\tmissed = false;\n//\t\tabandoned = true;\n//\t\tcompleted = false;\n//\t}\n//\t\n//\tpublic void setCompleted() {\n//\t\tmissed = false;\n//\t\tabandoned = false;\n//\t\tcompleted = true;\n//\t}\n", "func_signal": "public void setResponse(int index, Serializable value, long time)", "code": "{\n\t\tLog.d(\"InterviewData\", \"index = \" + index);\n//\t\tif (index < selectedResponse.length) {\n\t\t\tselectedResponse[index] = value;\n\t\t\tresponseTime[index] = time;\n//\t\t}\n\t}", "path": "src\\org\\fieldstream\\gui\\ema\\InterviewData.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/* Creates the menu items */\n", "func_signal": "public boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    if (state == DELAYED) {\n\t\tmenu.add(0, BREAK_DELAY, 0, \"Break Delay\");\n\t    menu.add(0, CANCEL, 0, \"Cancel\");\n\t    delayMenu = menu;\n    }\n    return true;\n}", "path": "src\\org\\fieldstream\\gui\\ema\\AbstractInterview.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * @param data\n * @param timestamp\n * @return real peaks and valleys as an integer array\n * @author Mahbub\n */\n", "func_signal": "public int[]calculate(int[] data, long[] timestamp)", "code": "{\n\tRPVCalculationNew rpv=new RPVCalculationNew();\n\tint realPeakValley[]=rpv.calculate(data, timestamp);\n//\t\tString rpvs=\"\";\n//\t\tfor(int i=0;i<realPeakValley.length;i++)\n//\t\t\trpvs+=realPeakValley[i]+\",\";\n//\t\t\n//\t\tLog.d(\"FirstDiffExhalVS\",\"RPV= \"+rpvs);\n\t\n\tExhalationCalculation exhal=new ExhalationCalculation();\n\tint exhalations[]=exhal.calculate(realPeakValley, timestamp);\n\tint exhalFirstDiff[]=getFirstDiff(exhalations);\n\treturn exhalFirstDiff;\n}", "path": "src\\org\\fieldstream\\service\\sensor\\virtual\\FirstDifferenceExhalationNew.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/* This is called when the app goes into the background. */\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n\tLog.i(\"Interview\", \"onPause\");\n\t//layout.requestFocus();\n\t// restore the end button behavior\n\tandroid.provider.Settings.System.putInt(getContentResolver(), android.provider.Settings.System.END_BUTTON_BEHAVIOR, END_LOCKS_PHONE);\n\t// reenable the keyguard\n\tkeyguard.reenableKeyguard();\n\tif (wakelock.isHeld()) {\n\t\twakelock.release();\n\t}\n\t\n\t// make sure the interview is finished and not being interrupted\n\tif (state != DONE && state != TIMED_OUT && homeKeyPressed) {\n\t\t// the interview has been interrupted by some other task\n\t\tif (Log.DEBUG) Log.d(\"onPause\", \"MSG: interview interrupted!\");\n\t\t\n\t\tif (schedulerService != null) {\n\t\t\ttry {\n\t\t\t\tschedulerService.interviewInterrupted(savedState);\n\t\t\t\tif (startDialog != null) {\n\t\t\t\t\tif (startDialog.isShowing()) {\n\t\t\t\t\t\tstartDialog.cancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (wakelock != null) {\n\t\t\t\t\tif (wakelock.isHeld())\n\t\t\t\t\t\twakelock.release();\n\t\t\t\t}\n\t\t\t\tfinish();\n\t\t\t} catch (RemoteException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\thomeKeyPressed = false;\n\t}\n\t\n\tsuper.onPause();\n}", "path": "src\\org\\fieldstream\\gui\\ema\\AbstractInterview.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * Begin drawing labels. Sets the OpenGL state for rapid drawing.\n *\n * @param gl\n * @param viewWidth\n * @param viewHeight\n */\n", "func_signal": "public void beginDrawing(GL10 gl, float viewWidth, float viewHeight)", "code": "{\n    checkState(STATE_INITIALIZED, STATE_DRAWING);\n    gl.glBindTexture(GL10.GL_TEXTURE_2D, mTextureID);\n    gl.glShadeModel(GL10.GL_FLAT);\n    gl.glEnable(GL10.GL_BLEND);\n    gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);\n    gl.glColor4x(0x10000, 0x10000, 0x10000, 0x10000);\n    gl.glMatrixMode(GL10.GL_PROJECTION);\n    gl.glPushMatrix();\n    gl.glLoadIdentity();\n    gl.glOrthof(0.0f, viewWidth, 0.0f, viewHeight, 0.0f, 1.0f);\n    gl.glMatrixMode(GL10.GL_MODELVIEW);\n    gl.glPushMatrix();\n    gl.glLoadIdentity();\n    // Magic offsets to promote consistent rasterization.\n    //gl.glTranslatef(0.375f, 0.375f, 0.0f);\n}", "path": "src\\org\\fieldstream\\oscilloscope\\LabelMaker.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * Call to end adding labels. Must be called before drawing starts.\n *\n * @param gl\n */\n", "func_signal": "public void endAdding(GL10 gl)", "code": "{\n    checkState(STATE_ADDING, STATE_INITIALIZED);\n    gl.glBindTexture(GL10.GL_TEXTURE_2D, mTextureID);\n    GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, mBitmap, 0);\n    // Reclaim storage used by bitmap and canvas.\n    mBitmap.recycle();\n    mBitmap = null;\n    mCanvas = null;\n}", "path": "src\\org\\fieldstream\\oscilloscope\\LabelMaker.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "/**\n * Overrides {@link SensorEventListener} to retrieve sensor Readings.\n * @param event \n */\n", "func_signal": "public void onSensorChanged(SensorEvent event)", "code": "{\n\t// TODO what about the multiplier\n\t\n\t// I don't think we can use event.timestamp.\n\t// It seems event.timestamp is the # of nanoseconds since the device was booted, \n\t// rather than # of nanoseconds since the epoch.\n\t// long timestamp = event.timestamp / 1000000;   // convert to milliseconds\n\t\n\tlong timestamp = System.currentTimeMillis();  // assume this is close to the real timestamp\n\t\n\tif (compassX!= null) {\n\t\tcompassX.addValue((int)(event.values[SensorManager.DATA_X]*MULTIPLIER), timestamp);\t\n\t}\n\tif (compassY!= null) {\n\t\tcompassY.addValue((int)(event.values[SensorManager.DATA_Y]*MULTIPLIER), timestamp);\t\n\t}\n\tif (compassZ!= null) {\n\t\tcompassZ.addValue((int)(event.values[SensorManager.DATA_Z]*MULTIPLIER), timestamp);\t\n\t}\n\tif (magnitude!= null) {\n\t\tmagnitude.addValue((int)Math.floor(\n\t\t\t\tMath.sqrt(event.values[SensorManager.DATA_X]*event.values[SensorManager.DATA_X]+\n\t\t\t\t\t\tevent.values[SensorManager.DATA_Y]*event.values[SensorManager.DATA_Y]+\n\t\t\t\t\t\tevent.values[SensorManager.DATA_Z]*event.values[SensorManager.DATA_Z])\n\t\t\t\t\t\t*MULTIPLIER), timestamp);\t\n\t}\n}", "path": "src\\org\\fieldstream\\service\\sensors\\phone\\Compass.java", "repo_name": "FieldStream/FieldStream", "stars": 8, "license": "None", "language": "java", "size": 6291}
{"docstring": "//Rescan the sdcard after copy the file\n", "func_signal": "private void rescanSdcard() throws Exception", "code": "{     \n  Intent scanIntent = new Intent(Intent.ACTION_MEDIA_MOUNTED, Uri.parse(\"file://\"\n       + Environment.getExternalStorageDirectory()));    \n  Log.v(TAG,\"start the intent\");\n  IntentFilter intentFilter = new IntentFilter(Intent.ACTION_MEDIA_SCANNER_STARTED);\n  intentFilter.addDataScheme(\"file\");     \n  getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED, Uri.parse(\"file://\"\n      + Environment.getExternalStorageDirectory())));    \n    Thread.sleep(MusicPlayerNames.WAIT_VERY_LONG_TIME);\n}", "path": "tests\\src\\com\\android\\music\\functional\\TestSongs.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Calls LaunchApp and finish.\n */\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n    super.onStart();\n    LaunchApp();\n    finish(Activity.RESULT_OK, mResults);\n}", "path": "tests\\src\\com\\android\\music\\MusicPlayerLaunchPerformance.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Add 10 new playlists with unsorted title order\n */\n", "func_signal": "public void addNewPlaylist() throws Exception", "code": "{\n  Instrumentation inst = getInstrumentation();      \n  for (int i=0; i< MusicPlayerNames.NO_OF_PLAYLIST; i++){\n    inst.invokeContextMenuAction(getActivity(), MusicUtils.Defs.NEW_PLAYLIST, 0);\n    Thread.sleep(MusicPlayerNames.WAIT_SHORT_TIME);\n    //Remove the default playlist name\n    for (int j=0; j< MusicPlayerNames.DEFAULT_PLAYLIST_LENGTH; j++)\n      inst.sendKeyDownUpSync(KeyEvent.KEYCODE_DEL);\n    inst.sendStringSync(MusicPlayerNames.unsortedPlaylistTitle[i]);\n    inst.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_DOWN);\n    inst.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_CENTER);\n    Thread.sleep(MusicPlayerNames.WAIT_LONG_TIME);\n    inst.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_DOWN);\n    Thread.sleep(MusicPlayerNames.WAIT_LONG_TIME);\n  }\n}", "path": "tests\\src\\com\\android\\music\\functional\\TestSongs.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Test case 3: Delete a song\n * Test case precondition: Copy a song and rescan the sdcard\n * Verification: The song is deleted from the sdcard and mediastore\n */\n", "func_signal": "@LargeTest\npublic void testDeleteSong() throws Exception", "code": "{\n  Instrumentation inst = getInstrumentation();      \n  Cursor mCursor;\n  \n  //Copy a song from the golden directory\n  Log.v(TAG, \"Copy a temp file to the sdcard\");\n  File goldenfile = new File(MusicPlayerNames.GOLDENSONG);\n  File toBeDeleteSong = new File(MusicPlayerNames.DELETESONG);\n  copy(goldenfile, toBeDeleteSong);\n  rescanSdcard();\n   \n  //Delete the file from music player\n  Thread.sleep(MusicPlayerNames.WAIT_LONG_TIME);\n  inst.sendStringSync(MusicPlayerNames.TOBEDELETESONGNAME);\n  Thread.sleep(MusicPlayerNames.WAIT_LONG_TIME);\n  inst.invokeContextMenuAction(getActivity(), MusicUtils.Defs.DELETE_ITEM, 0);\n  inst.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_DOWN);\n  inst.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_CENTER);\n  Thread.sleep(MusicPlayerNames.WAIT_LONG_TIME);\n  \n  //Clear the search string\n  for (int j=0; j< MusicPlayerNames.TOBEDELETESONGNAME.length(); j++)\n      inst.sendKeyDownUpSync(KeyEvent.KEYCODE_DEL);\n  \n  //Verfiy the item is removed from sdcard\n  File checkDeletedFile = new File(MusicPlayerNames.DELETESONG);\n  assertFalse(TAG, checkDeletedFile.exists());\n  \n  ContentResolver resolver = getActivity().getContentResolver();\n  if (resolver == null) {\n    System.out.println(\"resolver = null\");\n  } else {\n    String whereclause = MediaStore.Audio.Media.DISPLAY_NAME + \" = '\" + \n    MusicPlayerNames.TOBEDELETESONGNAME + \"'\";\n    mCursor = resolver.query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\n       null, whereclause, null, null);\n    boolean isEmptyCursor = mCursor.moveToFirst();\n    assertFalse(TAG,isEmptyCursor);\n  }     \n}", "path": "tests\\src\\com\\android\\music\\functional\\TestSongs.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Fills out the given submenu with items for \"new playlist\" and\n * any existing playlists. When the user selects an item, the\n * application will receive PLAYLIST_SELECTED with the Uri of\n * the selected playlist, NEW_PLAYLIST if a new playlist\n * should be created, and QUEUE if the \"current playlist\" was\n * selected.\n * @param context The context to use for creating the menu items\n * @param sub The submenu to add the items to.\n */\n", "func_signal": "public static void makePlaylistMenu(Context context, SubMenu sub)", "code": "{\n    String[] cols = new String[] {\n            MediaStore.Audio.Playlists._ID,\n            MediaStore.Audio.Playlists.NAME\n    };\n    ContentResolver resolver = context.getContentResolver();\n    if (resolver == null) {\n        System.out.println(\"resolver = null\");\n    } else {\n        String whereclause = MediaStore.Audio.Playlists.NAME + \" != ''\";\n        Cursor cur = resolver.query(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,\n            cols, whereclause, null,\n            MediaStore.Audio.Playlists.NAME);\n        sub.clear();\n        sub.add(1, Defs.QUEUE, 0, R.string.queue);\n        sub.add(1, Defs.NEW_PLAYLIST, 0, R.string.new_playlist);\n        if (cur != null && cur.getCount() > 0) {\n            //sub.addSeparator(1, 0);\n            cur.moveToFirst();\n            while (! cur.isAfterLast()) {\n                Intent intent = new Intent();\n                intent.putExtra(\"playlist\", cur.getInt(0));\n//                    if (cur.getInt(0) == mLastPlaylistSelected) {\n//                        sub.add(0, MusicBaseActivity.PLAYLIST_SELECTED, cur.getString(1)).setIntent(intent);\n//                    } else {\n                    sub.add(1, Defs.PLAYLIST_SELECTED, 0, cur.getString(1)).setIntent(intent);\n//                    }\n                cur.moveToNext();\n            }\n        }\n        if (cur != null) {\n            cur.close();\n        }\n    }\n}", "path": "src\\com\\android\\music\\MusicUtils.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Called when the activity is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle icicle)", "code": "{\n    super.onCreate(icicle);\n    setVolumeControlStream(AudioManager.STREAM_MUSIC);\n    String shuf = getIntent().getStringExtra(\"autoshuffle\");\n    if (\"true\".equals(shuf)) {\n        mAutoShuffle = true;\n    }\n    MusicUtils.bindToService(this, new ServiceConnection() {\n        public void onServiceConnected(ComponentName classname, IBinder obj) {\n            updateMenu();\n        }\n\n        public void onServiceDisconnected(ComponentName classname) {\n            updateMenu();\n        }\n    \n    });\n    setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);\n    init();\n}", "path": "src\\com\\android\\music\\MusicBrowserActivity.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Test case 2: Set a song as ringtone\n * Test case precondition: The testing device should wipe data before \n * run the test case.\n * Verification: The count of audio.media.is_ringtone equal to 1. \n */\n", "func_signal": "@LargeTest\npublic void testSetRingtone() throws Exception", "code": "{\n  Cursor mCursor;\n  Instrumentation inst = getInstrumentation();      \n  inst.invokeContextMenuAction(getActivity(), MusicUtils.Defs.USE_AS_RINGTONE, 0);\n  //This only check if there only 1 ringtone set in music player\n  ContentResolver resolver = getActivity().getContentResolver();\n  if (resolver == null) {\n    System.out.println(\"resolver = null\");\n  } else {\n    String whereclause = MediaStore.Audio.Media.IS_RINGTONE + \" = 1\";\n    mCursor = resolver.query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\n       null, whereclause, null, null);\n    //Check the new playlist\n    mCursor.moveToFirst();\n    int isRingtoneSet = mCursor.getCount();\n    assertEquals(TAG, MusicPlayerNames.EXPECTED_NO_RINGTONE, isRingtoneSet);\n  }\n}", "path": "tests\\src\\com\\android\\music\\functional\\TestSongs.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/*\n * Returns true if a file is currently opened for playback (regardless\n * of whether it's playing or paused).\n */\n", "func_signal": "public static boolean isMusicLoaded()", "code": "{\n    if (MusicUtils.sService != null) {\n        try {\n            return sService.getPath() != null;\n        } catch (RemoteException ex) {\n        }\n    }\n    return false;\n}", "path": "src\\com\\android\\music\\MusicUtils.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Link up various button actions using {@link PendingIntents}.\n * \n * @param playerActive True if player is active in background, which means\n *            widget click will launch {@link MediaPlaybackActivity},\n *            otherwise we launch {@link MusicBrowserActivity}.\n */\n", "func_signal": "private void linkButtons(Context context, RemoteViews views, boolean playerActive)", "code": "{\n    // Connect up various buttons and touch events\n    Intent intent;\n    PendingIntent pendingIntent;\n    \n    final ComponentName serviceName = new ComponentName(context, MediaPlaybackService.class);\n    \n    if (playerActive) {\n        intent = new Intent(context, MediaPlaybackActivity.class);\n        pendingIntent = PendingIntent.getActivity(context,\n                0 /* no requestCode */, intent, 0 /* no flags */);\n        views.setOnClickPendingIntent(R.id.album_appwidget, pendingIntent);\n    } else {\n        intent = new Intent(context, MusicBrowserActivity.class);\n        pendingIntent = PendingIntent.getActivity(context,\n                0 /* no requestCode */, intent, 0 /* no flags */);\n        views.setOnClickPendingIntent(R.id.album_appwidget, pendingIntent);\n    }\n    \n    intent = new Intent(MediaPlaybackService.TOGGLEPAUSE_ACTION);\n    intent.setComponent(serviceName);\n    pendingIntent = PendingIntent.getService(context,\n            0 /* no requestCode */, intent, 0 /* no flags */);\n    views.setOnClickPendingIntent(R.id.control_play, pendingIntent);\n    \n    intent = new Intent(MediaPlaybackService.NEXT_ACTION);\n    intent.setComponent(serviceName);\n    pendingIntent = PendingIntent.getService(context,\n            0 /* no requestCode */, intent, 0 /* no flags */);\n    views.setOnClickPendingIntent(R.id.control_next, pendingIntent);\n}", "path": "src\\com\\android\\music\\MediaAppWidgetProvider.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * This is now only used for the query screen\n */\n", "func_signal": "public static String makeAlbumsSongsLabel(Context context, int numalbums, int numsongs, boolean isUnknown)", "code": "{\n    // There are several formats for the albums/songs information:\n    // \"1 Song\"   - used if there is only 1 song\n    // \"N Songs\" - used for the \"unknown artist\" item\n    // \"1 Album\"/\"N Songs\" \n    // \"N Album\"/\"M Songs\"\n    // Depending on locale, these may need to be further subdivided\n    \n    StringBuilder songs_albums = new StringBuilder();\n\n    if (numsongs == 1) {\n        songs_albums.append(context.getString(R.string.onesong));\n    } else {\n        Resources r = context.getResources();\n        if (! isUnknown) {\n            String f = r.getQuantityText(R.plurals.Nalbums, numalbums).toString();\n            sFormatBuilder.setLength(0);\n            sFormatter.format(f, Integer.valueOf(numalbums));\n            songs_albums.append(sFormatBuilder);\n            songs_albums.append(context.getString(R.string.albumsongseparator));\n        }\n        String f = r.getQuantityText(R.plurals.Nsongs, numsongs).toString();\n        sFormatBuilder.setLength(0);\n        sFormatter.format(f, Integer.valueOf(numsongs));\n        songs_albums.append(sFormatBuilder);\n    }\n    return songs_albums.toString();\n}", "path": "src\\com\\android\\music\\MusicUtils.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Check against {@link AppWidgetManager} if there are any instances of this widget.\n */\n", "func_signal": "private boolean hasInstances(Context context)", "code": "{\n    AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);\n    int[] appWidgetIds = appWidgetManager.getAppWidgetIds(THIS_APPWIDGET);\n    return (appWidgetIds.length > 0);\n}", "path": "src\\com\\android\\music\\MediaAppWidgetProvider.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/*\n * Restore size and visibility for all listitems\n */\n", "func_signal": "private void unExpandViews(boolean deletion)", "code": "{\n    for (int i = 0;; i++) {\n        View v = getChildAt(i);\n        if (v == null) {\n            if (deletion) {\n                // HACK force update of mItemCount\n                int position = getFirstVisiblePosition();\n                int y = getChildAt(0).getTop();\n                setAdapter(getAdapter());\n                setSelectionFromTop(position, y);\n                // end hack\n            }\n            layoutChildren(); // force children to be recreated where needed\n            v = getChildAt(i);\n            if (v == null) {\n                break;\n            }\n        }\n        ViewGroup.LayoutParams params = v.getLayoutParams();\n        params.height = 64;\n        v.setLayoutParams(params);\n        v.setVisibility(View.VISIBLE);\n    }\n}", "path": "src\\com\\android\\music\\TouchInterceptor.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/*\n * pointToPosition() doesn't consider invisible views, but we\n * need to, so implement a slightly different version.\n */\n", "func_signal": "private int myPointToPosition(int x, int y)", "code": "{\n    Rect frame = mTempRect;\n    final int count = getChildCount();\n    for (int i = count - 1; i >= 0; i--) {\n        final View child = getChildAt(i);\n        child.getHitRect(frame);\n        if (frame.contains(x, y)) {\n            return getFirstVisiblePosition() + i;\n        }\n    }\n    return INVALID_POSITION;\n}", "path": "src\\com\\android\\music\\TouchInterceptor.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/** Get album art for specified album. You should not pass in the album id\n * for the \"unknown\" album here (use -1 instead)\n */\n", "func_signal": "public static Bitmap getArtwork(Context context, int album_id, boolean allowDefault)", "code": "{\n\n    if (album_id < 0) {\n        // This is something that is not in the database, so get the album art directly\n        // from the file.\n        Bitmap bm = getArtworkFromFile(context, null, -1);\n        if (bm != null) {\n            return bm;\n        }\n        if (allowDefault) {\n            return getDefaultArtwork(context);\n        } else {\n            return null;\n        }\n    }\n\n    ContentResolver res = context.getContentResolver();\n    Uri uri = ContentUris.withAppendedId(sArtworkUri, album_id);\n    if (uri != null) {\n        InputStream in = null;\n        try {\n            in = res.openInputStream(uri);\n            return BitmapFactory.decodeStream(in, null, sBitmapOptions);\n        } catch (FileNotFoundException ex) {\n            // The album art thumbnail does not actually exist. Maybe the user deleted it, or\n            // maybe it never existed to begin with.\n            Bitmap bm = getArtworkFromFile(context, null, album_id);\n            if (bm != null) {\n                if (bm.getConfig() == null) {\n                    bm = bm.copy(Bitmap.Config.RGB_565, false);\n                    if (bm == null) {\n                        if (allowDefault) {\n                            return getDefaultArtwork(context);\n                        } else {\n                            return null;\n                        }\n                    }\n                }\n                // Put the newly found artwork in the database.\n                // Note that this shouldn't be done for the \"unknown\" album,\n                // but if this method is called correctly, that won't happen.\n                \n                // first write it somewhere\n                String file = Environment.getExternalStorageDirectory()\n                    + \"/albumthumbs/\" + String.valueOf(System.currentTimeMillis());\n                if (ensureFileExists(file)) {\n                    try {\n                        OutputStream outstream = new FileOutputStream(file);\n                        boolean success = bm.compress(Bitmap.CompressFormat.JPEG, 75, outstream);\n                        outstream.close();\n                        if (success) {\n                            ContentValues values = new ContentValues();\n                            values.put(\"album_id\", album_id);\n                            values.put(\"_data\", file);\n                            Uri newuri = res.insert(sArtworkUri, values);\n                            if (newuri == null) {\n                                // Failed to insert in to the database. The most likely\n                                // cause of this is that the item already existed in the\n                                // database, and the most likely cause of that is that\n                                // the album was scanned before, but the user deleted the\n                                // album art from the sd card.\n                                // We can ignore that case here, since the media provider\n                                // will regenerate the album art for those entries when\n                                // it detects this.\n                                success = false;\n                            }\n                        }\n                        if (!success) {\n                            File f = new File(file);\n                            f.delete();\n                        }\n                    } catch (FileNotFoundException e) {\n                        Log.e(TAG, \"error creating file\", e);\n                    } catch (IOException e) {\n                        Log.e(TAG, \"error creating file\", e);\n                    }\n                }\n            } else if (allowDefault) {\n                bm = getDefaultArtwork(context);\n            } else {\n                bm = null;\n            }\n            return bm;\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n            }\n        }\n    }\n    \n    return null;\n}", "path": "src\\com\\android\\music\\MusicUtils.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "// copied from MediaProvider\n", "func_signal": "private static boolean ensureFileExists(String path)", "code": "{\n    File file = new File(path);\n    if (file.exists()) {\n        return true;\n    } else {\n        // we will not attempt to create the first directory in the path\n        // (for example, do not create /sdcard if the SD card is not mounted)\n        int secondSlash = path.indexOf('/', 1);\n        if (secondSlash < 1) return false;\n        String directoryPath = path.substring(0, secondSlash);\n        File directory = new File(directoryPath);\n        if (!directory.exists())\n            return false;\n        file.getParentFile().mkdirs();\n        try {\n            return file.createNewFile();\n        } catch(IOException ioe) {\n            Log.d(TAG, \"File creation failed for \" + path);\n        }\n        return false;\n    }\n}", "path": "src\\com\\android\\music\\MusicUtils.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Test case 1: tests the new playlist added with sorted order.\n * Verification: The new playlist title should be sorted in alphabetical order\n */\n", "func_signal": "@LargeTest\npublic void testAddPlaylist() throws Exception", "code": "{\n  Cursor mCursor;\n  addNewPlaylist();\n  \n  //Verify the new playlist is created, check the playlist table\n  String[] cols = new String[] {\n      MediaStore.Audio.Playlists.NAME\n  };\n  ContentResolver resolver = getActivity().getContentResolver();\n  if (resolver == null) {\n    System.out.println(\"resolver = null\");\n  } else {\n    String whereclause = MediaStore.Audio.Playlists.NAME + \" != ''\";\n    mCursor = resolver.query(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,\n      cols, whereclause, null,\n      MediaStore.Audio.Playlists.NAME);\n    //Check the new playlist\n    mCursor.moveToFirst();\n    \n    for (int j=0;j<10;j++){\n      assertEquals(\"New sorted Playlist title:\", MusicPlayerNames.expectedPlaylistTitle[j], mCursor.getString(0)); \n      mCursor.moveToNext();\n    }\n  }\n}", "path": "tests\\src\\com\\android\\music\\functional\\TestSongs.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "// Get album art for specified album. This method will not try to\n// fall back to getting artwork directly from the file, nor will\n// it attempt to repair the database.\n", "func_signal": "private static Bitmap getArtworkQuick(Context context, int album_id, int w, int h)", "code": "{\n    // NOTE: There is in fact a 1 pixel border on the right side in the ImageView\n    // used to display this drawable. Take it into account now, so we don't have to\n    // scale later.\n    w -= 1;\n    ContentResolver res = context.getContentResolver();\n    Uri uri = ContentUris.withAppendedId(sArtworkUri, album_id);\n    if (uri != null) {\n        ParcelFileDescriptor fd = null;\n        try {\n            fd = res.openFileDescriptor(uri, \"r\");\n            int sampleSize = 1;\n            \n            // Compute the closest power-of-two scale factor \n            // and pass that to sBitmapOptionsCache.inSampleSize, which will\n            // result in faster decoding and better quality\n            sBitmapOptionsCache.inJustDecodeBounds = true;\n            BitmapFactory.decodeFileDescriptor(\n                    fd.getFileDescriptor(), null, sBitmapOptionsCache);\n            int nextWidth = sBitmapOptionsCache.outWidth >> 1;\n            int nextHeight = sBitmapOptionsCache.outHeight >> 1;\n            while (nextWidth>w && nextHeight>h) {\n                sampleSize <<= 1;\n                nextWidth >>= 1;\n                nextHeight >>= 1;\n            }\n\n            sBitmapOptionsCache.inSampleSize = sampleSize;\n            sBitmapOptionsCache.inJustDecodeBounds = false;\n            Bitmap b = BitmapFactory.decodeFileDescriptor(\n                    fd.getFileDescriptor(), null, sBitmapOptionsCache);\n\n            if (b != null) {\n                // finally rescale to exactly the size we need\n                if (sBitmapOptionsCache.outWidth != w || sBitmapOptionsCache.outHeight != h) {\n                    Bitmap tmp = Bitmap.createScaledBitmap(b, w, h, true);\n                    // Bitmap.createScaledBitmap() can return the same bitmap\n                    if (tmp != b) b.recycle();\n                    b = tmp;\n                }\n            }\n            \n            return b;\n        } catch (FileNotFoundException e) {\n        } finally {\n            try {\n                if (fd != null)\n                    fd.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n    return null;\n}", "path": "src\\com\\android\\music\\MusicUtils.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/**\n * Initialize given widgets to default state, where we launch Music on default click\n * and hide actions if service not running.\n */\n", "func_signal": "private void defaultAppWidget(Context context, int[] appWidgetIds)", "code": "{\n    final Resources res = context.getResources();\n    final RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.album_appwidget);\n    \n    views.setViewVisibility(R.id.title, View.GONE);\n    views.setTextViewText(R.id.artist, res.getText(R.string.emptyplaylist));\n\n    linkButtons(context, views, false /* not playing */);\n    pushUpdate(context, appWidgetIds, views);\n}", "path": "src\\com\\android\\music\\MediaAppWidgetProvider.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/* Adjust visibility and size to make it appear as though\n * an item is being dragged around and other items are making\n * room for it:\n * If dropping the item would result in it still being in the\n * same place, then make the dragged listitem's size normal,\n * but make the item invisible.\n * Otherwise, if the dragged listitem is still on screen, make\n * it as small as possible and expand the item below the insert\n * point.\n * If the dragged item is not on screen, only expand the item\n * below the current insertpoint.\n */\n", "func_signal": "private void doExpansion()", "code": "{\n    int childnum = mDragPos - getFirstVisiblePosition();\n    if (mDragPos > mFirstDragPos) {\n        childnum++;\n    }\n\n    View first = getChildAt(mFirstDragPos - getFirstVisiblePosition());\n\n    for (int i = 0;; i++) {\n        View vv = getChildAt(i);\n        if (vv == null) {\n            break;\n        }\n        int height = 64;\n        int visibility = View.VISIBLE;\n        if (vv.equals(first)) {\n            // processing the item that is being dragged\n            if (mDragPos == mFirstDragPos) {\n                // hovering over the original location\n                visibility = View.INVISIBLE;\n            } else {\n                // not hovering over it\n                height = 1;\n            }\n        } else if (i == childnum) {\n            if (mDragPos < getCount() - 1) {\n                height = 128;\n            }\n        }\n        ViewGroup.LayoutParams params = vv.getLayoutParams();\n        params.height = height;\n        vv.setLayoutParams(params);\n        vv.setVisibility(visibility);\n    }\n}", "path": "src\\com\\android\\music\\TouchInterceptor.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle icicle)", "code": "{\n    super.onCreate(icicle);\n\n    final Intent intent = getIntent();\n    final String action = intent.getAction();\n    if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {\n        mCreateShortcut = true;\n    }\n\n    requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);\n    setVolumeControlStream(AudioManager.STREAM_MUSIC);\n    MusicUtils.bindToService(this, new ServiceConnection() {\n        public void onServiceConnected(ComponentName classname, IBinder obj) {\n            if (Intent.ACTION_VIEW.equals(action)) {\n                long id = Long.parseLong(intent.getExtras().getString(\"playlist\"));\n                if (id == RECENTLY_ADDED_PLAYLIST) {\n                    playRecentlyAdded();\n                } else if (id == PODCASTS_PLAYLIST) {\n                    playPodcasts();\n                } else if (id == ALL_SONGS_PLAYLIST) {\n                    int [] list = MusicUtils.getAllSongs(PlaylistBrowserActivity.this);\n                    if (list != null) {\n                        MusicUtils.playAll(PlaylistBrowserActivity.this, list, 0);\n                    }\n                } else {\n                    MusicUtils.playPlaylist(PlaylistBrowserActivity.this, id);\n                }\n                finish();\n            }\n        }\n\n        public void onServiceDisconnected(ComponentName classname) {\n        }\n    \n    });\n    IntentFilter f = new IntentFilter();\n    f.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);\n    f.addAction(Intent.ACTION_MEDIA_SCANNER_FINISHED);\n    f.addAction(Intent.ACTION_MEDIA_UNMOUNTED);\n    f.addDataScheme(\"file\");\n    registerReceiver(mScanListener, f);\n\n    setContentView(R.layout.media_picker_activity);\n    ListView lv = getListView();\n    lv.setOnCreateContextMenuListener(this);\n    lv.setTextFilterEnabled(true);\n\n    mAdapter = (PlaylistListAdapter) getLastNonConfigurationInstance();\n    if (mAdapter == null) {\n        //Log.i(\"@@@\", \"starting query\");\n        mAdapter = new PlaylistListAdapter(\n                getApplication(),\n                this,\n                R.layout.track_list_item,\n                mPlaylistCursor,\n                new String[] { MediaStore.Audio.Playlists.NAME},\n                new int[] { android.R.id.text1 });\n        setListAdapter(mAdapter);\n        setTitle(R.string.working_playlists);\n        getPlaylistCursor(mAdapter.getQueryHandler(), null);\n    } else {\n        mAdapter.setActivity(this);\n        setListAdapter(mAdapter);\n        mPlaylistCursor = mAdapter.getCursor();\n        // If mPlaylistCursor is null, this can be because it doesn't have\n        // a cursor yet (because the initial query that sets its cursor\n        // is still in progress), or because the query failed.\n        // In order to not flash the error dialog at the user for the\n        // first case, simply retry the query when the cursor is null.\n        // Worst case, we end up doing the same query twice.\n        if (mPlaylistCursor != null) {\n            init(mPlaylistCursor);\n        } else {\n            setTitle(R.string.working_playlists);\n            getPlaylistCursor(mAdapter.getQueryHandler(), null);\n        }\n    }\n}", "path": "src\\com\\android\\music\\PlaylistBrowserActivity.java", "repo_name": "KreN11/android_packages_apps_Music", "stars": 11, "license": "other", "language": "java", "size": 1399}
{"docstring": "/*************************************************\n*\n*\n*\n**************************************************/\n", "func_signal": "public int findQueBallIndex( Vector<Circle> circles )", "code": "{\n\tCircle c;\n\tint index = -1;\n\tfor ( int i = 0 ; i < circles.size(); i++ ) {\n\t\tc = (Circle)circles.elementAt(i);\n\t\tif ( c.name.equals(\"Que Ball\") ) index = i;\n\t}\n\tif ( index == -1 ) {\n\t\tSystem.out.println(\"There's NO QUE BALL!!!!\");\n\t\tSystem.exit(0);\n\t}\n\treturn index;\n}", "path": "src\\Billiards\\Table.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/****************************************************************\n * calculates the new position of each disk\n *\n * works by adding ddx to dx and ddy to dy. then applys friction,\n * checks bounds, calcs collisions, fixes overlapping, etc etc\n *\n * returns boolean indicating still movement on board.\n ****************************************************************/\n", "func_signal": "public void calcPositions()", "code": "{\n    //try {\n\t\t\t//System.out.println(\"Calc Positions\");\n        int a, b;\n        Circle i, j;\n\n        for  ( a = 0 ; a < circles.size() ; a++ ) {\n            i = (Circle)circles.elementAt( a );\n            //System.out.println(\"Looking at the \" + i.name);\n\n            // check if circle is moving\n            if (i.dy != 0 || i.dx != 0) {\n                i.y += i.dy;\n                i.x += i.dx;\n\n                if ( friction ) doFriction(i);\n            }\n\n\t\t\t\t//check for the ball falling in a pocket\n\t\t\t\tif ( checkPockets(i) ) {\n\t\t\t\t\t//System.out.println(\"A = \" + a);\n\t\t\t\t\t//System.out.println(\"queBallIndex = \" + table.queBallIndex );\n\t\t\t\t\ti.dx = 0;\n\t\t\t\t\ti.dy = 0;\n\t\t\t\t\tcircles.remove(a);\n\t\t\t\t\tif ( a == table.queBallIndex ) {\n\t\t\t\t\t\ttable.scratched = true;\n\t\t\t\t\t\tSystem.out.println(\"You scratched the Que Ball!!\");\n\t\t\t\t\t\ttable.queBallIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t//Remove ball\n\t\t\t\t\t\tif ( !table.scratched ) {\n\t\t\t\t\t\t\ttable.queBallIndex = table.findQueBallIndex( circles );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSystem.out.println(\"The \" + i.name + \" fell in a hole!\");\n\t\t\t\t\t\ttable.addToFallen(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// check bounces\n\t\t\t\t\tcheckBounds(i);\n\n\t\t\t\t\t// check if circle has collided with any other circle after it\n\t\t\t\t\t// It's like this so circles dont collide twice\n\t\t\t\t\tfor ( b = a+1; b < circles.size() ; b++ ) {\n\t\t\t\t\t\tj = (Circle)circles.elementAt( b );\n\t\t\t\t\t\t//See if they collided\n\t\t\t\t\t\tif (calcCollision(i, j)) {\n\t\t\t\t\t\t\t// fix possible overlapping\n\t\t\t\t\t\t\tif ( overlap ) fixOverlap(i, j);\n\t\t\t\t\t\t\t// Calculate new friction for both circles\n\t\t\t\t\t\t\tcalcFriction(i);\n\t\t\t\t\t\t\tcalcFriction(j);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n        }\n\n        checkReady();\n\n    //}\n    //catch (Exception ex) {\n    //    System.out.println(\"ERROR!!!  - \" + ex.getMessage());\n    //}\n}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/**************************************************************\n*\n*\n*\n***************************************************************/\n", "func_signal": "private boolean checkPockets( Circle c )", "code": "{\n\n\tif ( table.movingQ ) return false;\n\t\n\tfor ( Pocket p : table.pockets ) {\n\t\tdouble pocketRadius = p.size/2;\n\t\tdouble circleRadius = c.size/2;\n\n\t\tdouble px = p.x+pocketRadius;\n\t\tdouble py = p.y+pocketRadius;\n\n\t\tdouble cx = c.x+circleRadius;\n\t\tdouble cy = c.y+circleRadius;\n\n\t\tdouble dx = cx-px;\n\t\tdouble dy = cy-py;\n\t\tdouble distance = Math.sqrt((dx*dx) + (dy*dy));\n\t\tif ( distance < p.size/2 ) {\n\t\t\tSoundEffect.SINK.play();\n\t\t\tcheckReady();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*******************************************************\n * constructor. sets up the panel stuff, adds\n * mouse listenners, starts game engine, etc\n *\n * @param shuffle\n ******************************************************/\n", "func_signal": "public Table(Bouncer bouncer)", "code": "{\n    //Always call super\n    super();\n\n    //Makes the moving display smoother\n    setDoubleBuffered(true);\n\n    //Default bg colour\n    setBackground(new Color (51, 102, 51));\n    setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));\n\n    //Add mouse listeners\n    addMouseListener(this);\n    addMouseMotionListener(this);\n\n    //Reference to bouncer\n    this.bouncer = bouncer;\n\n\t\t//Initialize the circles.\n    circles = new Vector<Circle>();\n    \n    // Initialize engine\n    engine = new Engine( this );\n\n    populateCircles();\n    engine.setCircles( circles );\n\n    populatePockets();\n\n    //Start the Engine\n    Thread e = new Thread( engine );\n\t\te.setPriority(Thread.NORM_PRIORITY);\n    e.start();\n\n    // start thread\n    Thread t = new Thread(this);\n    t.setPriority(Thread.NORM_PRIORITY);\n    t.start();\n\n    // ready!\n    ready = true;\n}", "path": "src\\Billiards\\Table.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * default constructor.\n * builds the window\n */\n", "func_signal": "public Bouncer()", "code": "{\n    // always call super\n    super();\n\n    // makes window look more natural\n    try {\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (Exception ex) {\n        System.out.println(ex.getMessage());\n    }\n\n    // set jframe basics\n    setTitle(\"Billiard Table\");\n\n\n    setDefaultCloseOperation(EXIT_ON_CLOSE);\n    setLayout(new BorderLayout());\n\n    setSize( WINDOW_X, WINDOW_Y );\n\n    setResizable( true );\n    setLocationByPlatform(true);\n\n    // labels\n    status = new JLabel(\"By: Paul George\", JLabel.CENTER);\n    add(status, BorderLayout.SOUTH);\n\n    // table\n    table = new Table(this);\n    add(table, BorderLayout.CENTER);\n    \n    // menus\n    buildMenus();\n\n    // let's see it!\n    setVisible(true);\n    requestFocus();\n}", "path": "src\\Billiards\\Bouncer.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "// Play or Re-play the sound effect from the beginning, by rewinding.\n", "func_signal": "public void play()", "code": "{\n   if (volume != Volume.MUTE) {\n      if (clip.isRunning())\n         clip.stop();   // Stop the player if it is still running\n      clip.setFramePosition(0); // rewind to the beginning\n      clip.start();     // Start playing\n   }\n}", "path": "src\\Billiards\\SoundEffect.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*************************************************\n*\n*\n*\n**************************************************/\n", "func_signal": "public void readdQueueBall()", "code": "{\n\tboolean foundQueueBall = false;\n\tfor ( Circle c : circles ) {\n\t\tif ( c.name.equals(\"Queue Ball\") ) foundQueueBall = true;\n\t}\n\n\tif ( !foundQueueBall ) {\n\t\tdouble cx =  800+engine.TABLE_OFFSET_X;\n\t\tdouble cy = SIZEY/2+engine.TABLE_OFFSET_Y;\n\n\t\tSystem.out.println(\"Adding que ball at (x,y): \" + cx + \",\" + cy);\n\n\t\tCircle c = new Circle(0, \"Que Ball\", Color.WHITE, cx, cy, 0, 0, 30);\n\t\tcircles.add( c );\n\t\tqueBallIndex = findQueBallIndex( circles );\n\t}\n\telse {\n\t\tSystem.out.println(\"Queue Ball is already on the table!!\");\n\t}\n}", "path": "src\\Billiards\\Table.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*************************************************************************\n * fixes disks that have over lapped after a collision\n *\n * works by saying the vector representing the real displacement is a\n * similar triangle to the vector representing what the displacement\n * should be if the circles are 30 (well 30.1) units apart. then find the\n * difference between these x and y components and divide it in half\n * add half to one circle, and subtract half from the other circle, so they\n * both move half way to create a distance between them of 30 (30.1) units\n *\n * i made it 30.1 so after the circles are seperated, it dosent count as\n * another collision due to round off error in the double floating point\n *\n * @param i first Circle\n * @param j sec Circle\n **************************************************************************/\n", "func_signal": "public static void fixOverlap(Circle i, Circle j)", "code": "{\n    double x, y, k;\n\n    // the real displacement from i to j\n    y = (j.y - i.y);\n    x = (j.x - i.x);\n\n    // the ratio between what it should be and what it really is\n    k = 30.1 / Math.sqrt(x * x + y * y);\n\n    // difference between x and y component of the two vectors\n    y *= (k - 1) / 2.;\n    x *= (k - 1) / 2;\n\n    // set new coordinates of disks\n    j.y += y;\n    j.x += x;\n    i.y -= y;\n    i.x -= x;\n}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*********************************************************************\n * calculates the components of the friction on a disk\n *\n * friction is propertional to normal force, which is propertional\n * to acceleration.\n *\n * k is the ratio between velocity and acceleration. this is used\n * because friction always opposes motion so the acceleration is a\n * similar triangle to the velocity. the friction has to be calculated\n * this way otherwise it would change the direction of the sliding disks\n *\n *\n * @param c the Circle\n **********************************************************************/\n", "func_signal": "public void calcFriction( Circle c)", "code": "{\n\tdouble k = (c.dx * c.dx + c.dy * c.dy);\n\n\t//System.out.println(\"Arena Friction is: \" + Arena.CoF);\n\tk = Math.sqrt(k) * Table.CoF;\n\n\t//System.out.println(\"k is : \" + k );\n\t// dividng by zero is bad\n\tif (k == 0) return;\n\n\t// set ddx and ddy\n\tc.ddy = -c.dy / k;\n\tc.ddx = -c.dx / k;\n    }", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/***********************************************************\n\t * calculates positions every 6 ms\n\t *\n\t * works by looping endlessly and timming how long it took\n\t * to calc positions and subtract that time from 6 ms and\n\t * waits that long before looping again. it has to be done\n\t * this way or else calculation times would effect velocity\n\t **********************************************************/\n", "func_signal": "public void run()", "code": "{\n\t\tlong time;\n\n\t\twhile (true) {\n\t\t\ttime = System.currentTimeMillis();\n\t\t\tcalcPositions();\n\t\t\ttime = System.currentTimeMillis() - time;\n\n\t\t\t// sleep for 6 seconds in total. subtract calculations time\n\t\t\ttime = 6 - time;\n\n\t\t\t// so sleep is never passed a negitive time\n\t\t\tif (time < 0)\n\t\t\t\ttime = 0;\n\n\t\t\ttry {\n\t\t\t\tThread.sleep(time, 1);\n\t\t\t} catch (InterruptedException ex) {\n\t\t\t\tSystem.out.println(ex.getMessage());\n\t\t\t}\n\t\t}\n\t}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/**************************************************************\n * applys the force of friction on the sliding disk\n *\n * when dx and ddx have the same sign, it means they have changed to the\n * same direction. friction always opposes motion so when this happens,\n * it means the disk has been stopped due to friction.\n *\n * @param c the Circle\n *************************************************************/\n", "func_signal": "private void doFriction( Circle c )", "code": "{\n    c.dy += c.ddy;\n    c.dx += c.ddx;\n    // if dx and ddx now have the same sign then stop\n    if (c.dx > 0 == c.ddx > 0) {\n        c.dx = 0;\n        checkReady();\n    }\n    if (c.dy > 0 == c.ddy > 0) {\n        c.dy = 0;\n        checkReady();\n    }\n}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*************************************************\n*\n*\n*\n**************************************************/\n", "func_signal": "public void populatePockets()", "code": "{\n\tpockets = new Vector<Pocket>();\n\tPocket p;\n\n\tp = new Pocket(\"Top Left\",     Pocket.STANDARD_COLOR, 86, 86, 48);\n\tpockets.add( p );\n\n\tp = new Pocket(\"Top Mid\",      Pocket.STANDARD_COLOR, 508, 76, 48);\n\tpockets.add( p );\n\n\tp = new Pocket(\"Top Right\",    Pocket.STANDARD_COLOR, 930, 86, 48);\n\tpockets.add( p );\n\n\tp = new Pocket(\"Bottom Left\",  Pocket.STANDARD_COLOR, 86, 496, 48);\n\tpockets.add( p );\n\n\tp = new Pocket(\"Bottom Mid\",   Pocket.STANDARD_COLOR, 508, 506, 48);\n\tpockets.add( p );\n\n\tp = new Pocket(\"Bottom Right\", Pocket.STANDARD_COLOR, 930, 496, 48);\n\tpockets.add( p );\n\n}", "path": "src\\Billiards\\Table.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*************************************************\n*\n*\n*\n**************************************************/\n", "func_signal": "public void newGame()", "code": "{\n\t//init circles.\n        populateCircles();\n        engine.setCircles( circles );\n        movingQ = true;\n\n    }", "path": "src\\Billiards\\Table.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*****************************************************\n*\n*\n*\n******************************************************/\n", "func_signal": "private void checkReady()", "code": "{\n\tfor (Circle c : circles)\n\t\tif (c.dx != 0 || c.dy != 0)\n\t\t\treturn;\n\n\tif ( !table.ready ) System.out.println(\"We are now ready!!\");\n\ttable.ready = true;\n\tif ( table.scratched ) {\n\t\ttable.bouncer.setStatus( \"You scratched!!  You can move the Queue Ball.\" );\n\t\ttable.readdQueueBall();\n\t\ttable.movingQ = true;\n\t\ttable.scratched = false;\n\t}\n}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/**************************************************************\n*\n*\n*\n***************************************************************/\n", "func_signal": "private void checkBounds( Circle c)", "code": "{\n\tdouble xRight = Table.SIZEX + TABLE_OFFSET_X - 30;\n\tdouble yBottom = Table.SIZEY + TABLE_OFFSET_Y - 30;\n\n\tif (  c.x > xRight ) {\n\t\tc.dx  = -Math.abs( c.dx );\n\t\tc.ddx = Math.abs( c.ddx );\n\t}\n\telse if ( c.x < TABLE_OFFSET_X ) {\n\t\tc.dx  = Math.abs( c.dx );\n\t\tc.ddx = -Math.abs( c.ddx );\n\t}\n\n\tif ( c.y < TABLE_OFFSET_Y ) {\n\t\tc.dy  = Math.abs( c.dy );\n\t\tc.ddy = -Math.abs( c.ddy );\n\t}\n\telse if ( c.y > yBottom ) {\n\t\tc.dy  = -Math.abs( c.dy );\n\t\tc.ddy = Math.abs( c.ddy );\n\t}\n}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/***************************************************************\n * method to add menu items to a menu. it got annoying coding\n * this manually for each item so i wrote this function to do\n * it all in one go. just pass it the menu and a string of the\n * items seperated by commas. use a dash \"-\" for a seperator,\n * pound \"#\" for check box, and star \"*\" for checked check box.\n *\n * @param menu menu to add items too\n * @param items the items\n ***************************************************************/\n", "func_signal": "private void addMenuItems(JMenu menu, String items)", "code": "{\n    JMenuItem menuitem;\n\n    // loop through items adding them to menu\n    for (String s : items.split(\", \")) {\n        if (s.equals(\"-\"))\n            menu.addSeparator();\n        else {\n            if (s.substring(0, 1).equals(\"*\")) // menu types\n                menuitem = new JCheckBoxMenuItem(s.substring(1), true);\n            else if (s.substring(0, 1).equals(\"#\"))\n                menuitem = new JCheckBoxMenuItem(s.substring(1));\n            else\n                menuitem = new JMenuItem(s);\n\n            menuitem.addActionListener(this);\n            menu.add(menuitem);\n        }\n    }\n}", "path": "src\\Billiards\\Bouncer.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/***************************************\n*\n*\n*\n***************************************/\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n        String s = e.getActionCommand();\n\n        if (s.equals(\"Exit Game\"))\n            System.exit(0);\n\n        else if (s.equals(\"New Game\")) {\n        \tSystem.out.println(\"New Game.\");\n        \ttable.newGame();\n        }\n\n        else if (s.equals(\"Friction\"))\n            table.engine.toggleFriction();\n\n        else if (s.equals(\"Aim Help\"))\n            table.engine.toggleAimHelp();\n\n        else if (s.equals(\"Anti-Overlap\"))\n            table.engine.toggleOverLap();\n\n        else if (s.equals(\"About\")) // about dialog\n            JOptionPane.showMessageDialog(this,\n                    \"Billiard Table, By: Paul George\\n\" +\n                    \"Created just for fun\\n\" +\n                    \"\\n\" +\n                    \"Monday, January 31th, 2011\",\n                    \"About Billiard Table\", JOptionPane.DEFAULT_OPTION);\n\n        else\n            System.out.println(s);\n    }", "path": "src\\Billiards\\Bouncer.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/*************************************************\n*\n*\n*\n**************************************************/\n", "func_signal": "public void populateCircles()", "code": "{\n\tcircles = new Vector<Circle>();\n    \tfallen = new Vector<Circle>();\n\n\tCircle c;\n\n\tdouble midy = SIZEY/2 + Engine.TABLE_OFFSET_Y-15;\n\tdouble firstRow = 150 + Engine.TABLE_OFFSET_X;\n\n\t// name, Color color, double x, double y, int speed, double direction, int size) {\n\n\tc = new Circle(0, \"Que Ball\", Color.WHITE, (SIZEX*.75)+Engine.TABLE_OFFSET_X, midy, 0, 0, 30);\n\tcircles.add( c );\n\n\t//First Row (going down)\n\tc = new Circle(1, \"One Ball\", new Color(255, 255, 102),firstRow, midy-62, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(2, \"Two Ball\", new Color( 51, 51, 255), firstRow, midy-31, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(3, \"Three Ball\", new Color(204, 0, 51), firstRow, midy, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(4, \"Four Ball\", new Color(255, 0, 153), firstRow, midy+31, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(5, \"Five Ball\", new Color(255, 102, 0), firstRow, midy+62, 0, 0, 30);\n\tcircles.add( c );\n\n\t//Second Row\n\tc = new Circle(6, \"Six Ball\", new Color(51, 255, 0),  firstRow+31, midy-47, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(7, \"Seven Ball\", new Color(102, 0, 0), firstRow+31, midy-16, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(8, \"Eight Ball\", Color.BLACK,          firstRow+31, midy+16, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(9, \"Nine Ball\", new Color(204, 204, 0),firstRow+31, midy+47, 0, 0, 30);\n\tcircles.add( c );\n\n\n\t//Third Row\n\tc = new Circle(10, \"Ten Ball\", new Color(153, 0, 255), firstRow+62, midy-31, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(11, \"Eleven Ball\", new Color(153, 0, 0), firstRow+62, midy, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(12, \"Twelve Ball\", new Color(255, 0, 153), firstRow+62, midy+31, 0, 0, 30);\n\tcircles.add( c );\n\t//Forth Row\n\tc = new Circle(13, \"Thirteen Ball\", new Color(153, 255, 153), firstRow+93, midy-16, 0, 0, 30);\n\tcircles.add( c );\n\tc = new Circle(14, \"Fourteen Ball\", new Color(0, 0, 153), firstRow+93, midy+16, 0, 0, 30);\n\tcircles.add( c );\n\n\t//Fifth Row\n\tc = new Circle(15, \"Fifteen Ball\", new Color(0, 0, 255), firstRow+124, midy, 0, 0, 30);\n\tcircles.add( c );\n\n\n\tqueBallIndex = findQueBallIndex( circles );\n\n\tfor ( int x = 0 ; x < circles.size(); x++ ) {\n\t\tengine.calcFriction( c);\n\t}\n\n}\n\n\n    /*******************************************************\n     * private method to paint all circles\n     *\n     * this will throw an exception if a disk is removed by the\n     * other thread durring the exact time this is looping\n     *\n     * @param g paint\n     ******************************************************/\n    private void paintCircles(Graphics g) {\n        try {\n            for (Circle c : circles)\n                paintCircle(g, c);\n        }\n        catch (Exception ex) {\n            System.out.println(ex.getMessage());\n            paintCircles(g); // retry so the disks never not get painted\n        }\n    }\n\n\n    /******************************************************\n     * private method to paint a circle on the screen\n     *\n     *\n     * @param g paint\n     * @param d circle\n     ******************************************************/\n    private void paintCircle( Graphics g, Circle c ) {\n        if (c == null) return;\n        int fontSize = 10;\n        int dx = (int)c.x+8;\n        int dy = (int)c.y+8;\n        \n        if ( c.ballNumber > 0 && c.ballNumber < 9 ) {\n            g.setColor( c.color );\n            g.fillOval((int)c.x - 1, (int)c.y - 1, 30, 30 );\n\n            g.setColor( Color.WHITE );\n            g.fillOval(dx, dy, 12, 12 );\n\n            char[] num = { Character.forDigit(c.ballNumber, 10) }; \n            Font font = new Font(\"Courier New\", Font.PLAIN, fontSize);\n            g.setFont(font);\n            g.setColor( Color.BLACK );\n            g.drawChars(num, 0, num.length, (int)StrictMath.round(c.x+12), (int)StrictMath.round(c.y+17) );\n        }\n        else if ( c.ballNumber > 9 ) {\n            g.setColor( Color.WHITE );\n            g.fillOval((int)c.x - 1, (int)c.y - 1, 30, 30 );\n            \n            g.setColor( c.color );\n            int x = (int)c.x + 11;\n            int y = (int)c.y;\n            \n            g.drawLine(x+11, y+1, x+11, y+27);\n            g.drawLine(x+10, y+1, x+10, y+27);\n            g.drawLine(x+9,  y,   x+9, y+28);\n            g.drawLine(x+8,  y,   x+8, y+28);\n            \n            g.fillRect(x, y, 8, 29);\n            \n            g.drawLine(x-1, y,   x-1, y+28);\n            g.drawLine(x-2, y,   x-2, y+28);\n            g.drawLine(x-3, y+1, x-3, y+27);\n            g.drawLine(x-4, y+1, x-4, y+27);\n\n            g.setColor( Color.WHITE );\n            g.fillOval(dx, dy, 12, 12 );\n\n            int bi = c.ballNumber-10;\n            char[] num = { '1', Character.forDigit(bi, 10) }; \n            Font font = new Font(\"Courier New\", Font.PLAIN, fontSize);\n            g.setFont(font);\n            g.setColor( Color.BLACK );\n            g.drawChars(num, 0, num.length, (int)StrictMath.round(c.x+8), (int)StrictMath.round(c.y+17) );\n        }\n        else if ( c.ballNumber == 9 ) {\n            g.setColor( Color.WHITE );\n            g.fillOval((int)c.x - 1, (int)c.y - 1, 30, 30 );\n            \n            g.setColor( c.color );\n            int x = (int)c.x + 11;\n            int y = (int)c.y;\n            \n            g.drawLine(x+11, y+1, x+11, y+27);\n            g.drawLine(x+10, y+1, x+10, y+27);\n            g.drawLine(x+9,  y,   x+9, y+28);\n            g.drawLine(x+8,  y,   x+8, y+28);\n            \n            g.fillRect(x, y, 8, 29);\n            \n            g.drawLine(x-1, y,   x-1, y+28);\n            g.drawLine(x-2, y,   x-2, y+28);\n            g.drawLine(x-3, y+1, x-3, y+27);\n            g.drawLine(x-4, y+1, x-4, y+27);\n\n            g.setColor( Color.WHITE );\n            g.fillOval(dx, dy, 12, 12 );\n\n            char[] num = { Character.forDigit(c.ballNumber, 10) }; \n            Font font = new Font(\"Courier New\", Font.PLAIN, fontSize);\n            g.setFont(font);\n            g.setColor( Color.BLACK );\n            g.drawChars(num, 0, num.length, (int)StrictMath.round(c.x+12), (int)StrictMath.round(c.y+17) );\n        }\n        else if ( c.ballNumber == 0 ) {\n            g.setColor( Color.WHITE );\n            g.fillOval((int)c.x - 1, (int)c.y - 1, 30, 30 );\n        }\n    }\n\n\n/*******************************************************\n*\n*\n*\n*\n********************************************************/\nprivate void paintPockets( Graphics g) {\n\tif ( pockets == null ) populatePockets();\n\ttry {\n\t\tfor (Pocket p : pockets)\n\t\t\tpaintPocket(g, p);\n\t\t}\n\tcatch (Exception ex) {\n\t\tSystem.out.println(ex.getMessage());\n\t\tpaintPockets(g); // retry so the disks never not get painted\n        }\n}\n\n\n/*******************************************************\n*\n*\n*\n*\n********************************************************/\nprivate void paintPocket( Graphics g, Pocket p) {\n\tif ( p == null ) return;\n\tg.setColor( p.color );\n\tg.fillOval(  p.x, p.y, p.size, p.size );\n}\n\n\n/*******************************************************\n*\n*\n*\n*\n********************************************************/\nprivate void paintTray( Graphics g) {\n\tGraphics2D g2 = (Graphics2D)g;\n\tString trayTitle = \"The Fallen Balls\";\n\tchar[] titleChars = trayTitle.toCharArray();\n\t//String[] fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n\t\n\tFont font = new Font(\"Comic Sans MS\", Font.BOLD, 20 );\n\tg2.setFont(font);\n\tg2.drawChars(titleChars, 0, titleChars.length , 450, 590);\n\tg2.setColor( Color.GRAY );\n\tg2.fill3DRect(299, 598, 450, 33, true);\n\tg2.setColor( Color.BLACK );\n\tg2.draw3DRect(298, 597, 451, 34, true);\n\n\tpaintFallen( g );\n}\n\n\n/*******************************************************\n*\n*\n*\n*\n********************************************************/\npublic void paintFallen( Graphics g ) {\n\ttry {\n\t\tfor (Circle f : fallen)\n\t\t\tpaintCircle(g, f);\n\t}\n\tcatch (Exception ex) {\n\t\tSystem.out.println(\"ERROR IN paintFallen!: \" + ex.getMessage());\n\t}\n}\n\n\t\n/*******************************************************\n*\n*\n*\n*\n********************************************************/\npublic void addToFallen( Circle c ) {\n\tSystem.out.println(\"Adding fallen ball: \" + c.name );\n\tfallen.add( c );\n\tint fallenCount = fallen.size();\n\tc.x = 270+(fallenCount*31);\n\tc.y = 600;\n}\n\n\n/*******************************************************\n*\n*\n*\n*\n********************************************************/\n    private void paintQueueLine( Graphics g) {\n\tg.setColor( Color.WHITE );\n\tif ( queueLine == null ) return;\n\tg.drawLine( ((Integer)queueLine.get(\"x1\")).intValue(),\n\t\t\t\t((Integer)queueLine.get(\"y1\")).intValue(),\n\t\t\t\t((Integer)queueLine.get(\"x2\")).intValue(),\n\t\t\t\t((Integer)queueLine.get(\"y2\")).intValue());\n}\n\n\n\n/*******************************************************\n*\n*\n*\n*\n********************************************************/\nprivate void paintTable( Graphics g ) {\n\tg.setColor(Color.black);\n\t//System.out.println(\"Painting table outline: \");\n\tg.drawRect(\tengine.TABLE_OFFSET_X-30, engine.TABLE_OFFSET_Y-30, SIZEX+60, SIZEY+60);\n\tg.drawRect(\tengine.TABLE_OFFSET_X, engine.TABLE_OFFSET_Y, SIZEX, SIZEY);\n\t\n\tint x25  = (int)StrictMath.round((SIZEX/4)   + engine.TABLE_OFFSET_X);\n\tint x75  = (int)StrictMath.round((SIZEX/4*3) + engine.TABLE_OFFSET_X);\n\tint midy = (int)StrictMath.round((SIZEY/2)   + engine.TABLE_OFFSET_Y);\n\tg.fillOval( x25-5, midy-5, 10, 10);\n\tg.fillOval( x75-5, midy-5, 10, 10);\n\tg.setColor( Color.white );\n\tg.fillOval( x25-2, midy-2, 4, 4);\n\tg.fillOval( x75-2, midy-2, 4, 4);\n\n\tpaintPockets( g );\n\tpaintTray( g );\n}\n\n\n\n    /******************************************************\n     * public standard paint method\n     *\n     *\n     * @param g paint\n     * @param d circle\n     ******************************************************/\n    @Override\n    public void paint(Graphics g) {\n        // paint real panel stuff\n        super.paint(g);\n\n        //Make the table\n        paintTable( g );\n\n        // paint the disks\n        paintCircles(g);\n        if ( aimingQueueBall ) paintQueueLine( g );\n    }\n\n\n\n\n\n    /*********************************************\n    *\n    *\n    *\n    *\n    *********************************************/\n    public void mouseClicked(MouseEvent e) {\n\n    }\n\n\n    /*********************************************\n    *\n    *\n    *\n    *\n    *********************************************/\n    public void mousePressed(MouseEvent e) {\n\tif ( !ready ) {\n\t\treturn;\n\t}\n\n\tSystem.out.println(\"I clicked at \" + e.getPoint());\n\n\t//for some reason I need to subtract 10 pixels from each to get relative coords.\n\tint x = e.getPoint().x - 15;\n\tint y = e.getPoint().y - 15;\n\n\t//See if that point in inside a circle\n\tCircle k;\n\tfor ( int j = 0 ; j < circles.size(); j++ ) {\n\t\tk = (Circle)circles.elementAt(j);\n\t\tint kx = (int)StrictMath.round(k.x);\n\t\tint ky = (int)StrictMath.round(k.y);\n\t\tint xDif = Math.abs( kx - x );\n\t\tint yDif = Math.abs( ky - y );\n\t\tint radius = (int)StrictMath.round(k.size/2);\n\n\n\t\tif ( xDif <= radius  && yDif <= radius ) {\n\t\t\t//System.out.println(\"I clicked inside: \" + k.name + \"!!!\");\n\t\t\tif ( j == queBallIndex && !movingQ ) aimingQueueBall = true;\n\t\t\ttargetCircle = j;\n\t\t\tk.beingDragged = true;\n\t\t}\n\t}\n    }\n\n\n    /*********************************************\n    *\n    *\n    *\n    *\n    *********************************************/\n    public void mouseDragged(MouseEvent e) {\n\tif ( !ready ) {\n\t\treturn;\n\t}\n\n\tCircle queBall = (Circle)circles.elementAt( queBallIndex );\n\n\tint mx = e.getX();\n\tint my = e.getY();\n\tif ( aimingQueueBall ) {\n\t\tqueueLine = new HashMap<String, Integer>();\n\t\tqueueLine.put(\"x1\", (int)StrictMath.round(mx));\n\t\tqueueLine.put(\"y1\", (int)StrictMath.round(my));\n\n\t\tif ( engine.aimHelp ) {\n\t\t\tint bx = (int)StrictMath.round(queBall.x)+15;\n\t\t\tint by = (int)StrictMath.round(queBall.y)+15;\n\t\t\tdouble dx = bx - mx;\n\t\t\tdouble dy = by - my;\n\t\t\tdouble i = 1000 / ( Math.sqrt( dx*dx + dy*dy ) );\n\t\t\tdouble ex = ( dx*i) + mx;\n\t\t\tdouble ey = ( dy*i) + my;\n\n\t\t\tqueueLine.put(\"x2\", (int)StrictMath.round(ex));\n\t\t\tqueueLine.put(\"y2\", (int)StrictMath.round(ey));\n\t\t}\n\t\telse {\n\t\t\tqueueLine.put(\"x2\", (int)StrictMath.round(queBall.x)+15);\n\t\t\tqueueLine.put(\"y2\", (int)StrictMath.round(queBall.y)+15);\n\t\t}\n\t}\n\telse if ( movingQ ) {\n\t\tqueBall.x = mx;\n\t\tqueBall.y = my;\n\t}\n    }\n\n\n    /*********************************************\n    *\n    *\n    *\n    *\n    *********************************************/\n    public void mouseReleased(MouseEvent e) {\n\tif ( !ready ) {\n\t\treturn;\n\t}\n\n\tCircle queBall = (Circle)circles.elementAt( queBallIndex );\n\n\tSystem.out.println(\"Released the mouse at: (\" + e.getX() + \",\" + e.getY() + \")!! aiming? \" + aimingQueueBall);\n\tqueueLine = null;\n\n\tif ( aimingQueueBall ) {\n\t\tdouble x1 = e.getX();\n\t\tdouble y1 = e.getY();\n\t\tdouble x2 = queBall.x+15;\n\t\tdouble y2 = queBall.y+15;\n\n\n\t\t//Calculate the Queball velocity based on the disance and angle\n\t\t//of the mouse at release from the center of the que ball.\n\t\t// The speed has to be a number between 0 and 10.\n\n\t\tdouble dx = (x2 - x1)/50;\n\t\tdouble dy = (y2 - y1)/50;\n\t\tSystem.out.println(\"X Distance=\" + dx);\n\t\tSystem.out.println(\"Y Distance=\" + dy);\n\t\t\n\t\tdouble k = 1; //( Math.abs(dx) > Math.abs(dy) ) ? 5/Math.abs(dx) : 5/Math.abs(dy);\n\t\tdx = dx * k;\n\t\tdy = dy * k;\n\n\t\tready = false;\n\n\t\tqueBall.dx = dx;\n\t\tqueBall.dy = dy;\n\n\t\tSystem.out.println(\"Queue ball speed is: \" + queBall.dx + \", \" + queBall.dy);\n\t\t//movement = ( queBall.dx == 0 && queBall.dy == 0 ) ? false : true;\n\n\t\tengine.calcFriction( queBall );\n\n\t\t//System.out.println( q.toString() );\n\t\taimingQueueBall = false;\n\t\tSoundEffect.QUE.play();\n\t}\n\telse if ( movingQ ) {\n\t\tmovingQ = false;\n\t\t//queBall.x = e.getX()-15;\n\t\t//queBall.y = e.getY()-15;\n\n\t\tCircle j;\n\t\tfor ( int a = 0 ; a < circles.size(); a++ ) {\n\t\t\tj = (Circle)circles.elementAt( a );\n\n\t\t\tif ( a != queBallIndex ) {\n\t\t\t\t// fix possible overlapping\n\t\t\t\tdouble dx = queBall.x - j.x;\n\t\t\t\tdouble dy = queBall.y - j.y;\n\t\t\t\tdouble d2 = (dx*dx) + (dy*dy);\n\t\t\t\tdouble circleSize2 = (j.size/2 + j.size/2) * (j.size/2 + j.size/2);\n\n\t\t\t\tif ( d2 < circleSize2 && engine.overlap )\n\t\t\t\t\tengine.fixOverlap(queBall, j);\n\t\t\t}\n\t\t}\n\t}\n    }\n\n\n/***************************************************************\n*\n*\n*\n***************************************************************/\n    public void mouseEntered(MouseEvent e) {}\n/***************************************************************\n*\n*\n*\n***************************************************************/\n    public void mouseExited(MouseEvent e) {}\n\n\n/***************************************************************\n*\n*\n*\n***************************************************************/\n    public void mouseMoved(MouseEvent e) {\n\tbouncer.setStatus( \"Pointer is at: (\" + e.getX() + \",\" + e.getY() + \")\" );\n\tif ( movingQ ) {\n\t\tCircle queBall = (Circle)circles.elementAt( queBallIndex );\n\t\tint mx = e.getX();\n\t\tint my = e.getY();\n\n\t\tdouble newX = queBall.x;\n\t\tdouble newY = queBall.y;\n\t\t\n\t\tdouble xRight = SIZEX + engine.TABLE_OFFSET_X - 15;\n\t\tdouble xLeft  = (SIZEX*0.75) + engine.TABLE_OFFSET_X;\n\t\t\n\t\tdouble yBottom = SIZEY + engine.TABLE_OFFSET_Y-15;\n\t\tdouble yTop    = engine.TABLE_OFFSET_Y+15;\n\n\t\tif ( mx > xRight ) newX = xRight;\n\t\telse if ( mx < xLeft  ) newX = xLeft;\n\t\telse newX = mx;\n\t\t\t\n\t\tif ( my > yBottom ) newY = yBottom; \n\t\telse if ( my < yTop ) newY = yTop;\n\t\telse newY = my;\n\t\t\n\t\tqueBall.x = newX-15;\n\t\tqueBall.y = newY-15;\n\t}\n}\n\n/*********************************************\n*\n*\n*\n*\n**********************************************/\npublic void run() {\n        // repaint every 9 ms (~100 fps)\n        while (true) {\n            repaint();\n            try {\n                Thread.sleep( 9, 1 );\n            }\n            catch (InterruptedException ex) {\n                System.out.println(ex.getMessage());\n            }\n        }\n    }\n}", "path": "src\\Billiards\\Table.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/****************************************\n* private method to build the menus\n***************************************/\n", "func_signal": "private void buildMenus()", "code": "{\n    JMenuBar menubar = new JMenuBar();\n\n    // menus\n    JMenu file = new JMenu(\"File\"),\n          opts = new JMenu(\"Options\"),\n          help = new JMenu(\"Help\");\n\n    menubar.add(file);\n    menubar.add(opts);\n    menubar.add(help);\n\n    // file menu\n    addMenuItems(file, \"New Game, -, Exit Game\");\n\n    // options menu\n    addMenuItems(opts, \"*Friction, *Aim Help, -, *Anti-Overlap, -\");\n\n    // help menu\n    addMenuItems(help, \"About\");\n\n    // lets see it!\n    setJMenuBar(menubar);\n}", "path": "src\\Billiards\\Bouncer.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/********************************************************************************\n * calculates the velocitys of 2 disks after they collide\n *\n * if they do not collide it will just retrun false\n *\n * works by saying the vector of the velocitiy of disk j due to i after the\n * collision is a similar triangle to the vector of the displacement from\n * disk i to j and the vector of disk i due to i is perpendicular to j\n *\n * the same consept is applied again to the disks but due to j. then the\n * final velocities of disks i and j are these velocities added together\n *\n * i like math :D\n *\n * @param i first circle\n * @param j second circle\n * @return true if they collide\n *******************************************************************************/\n", "func_signal": "public static boolean calcCollision(Circle i, Circle j )", "code": "{\n   \t\tdouble dx = i.x - j.x;\n   \t\tdouble dy = i.y - j.y; \n\n   \t\tdouble d2 =  dx * dx + dy * dy;\n   \t\t//double d2 = i.center.distanceSq(j.center);\n   \t\t\n   \t\tif ( d2 < 900 )  {\n   \t\t\tdouble kii, kji, kij, kjj;\n   \t\t\tkji = (dx * i.dx + dy * i.dy) / d2; // k of j due to i\n   \t\t\tkii = (dx * i.dy - dy * i.dx) / d2; // k of i due to i\n   \t\t\tkij = (dx * j.dx + dy * j.dy) / d2; // k of i due to j\n   \t\t\tkjj = (dx * j.dy - dy * j.dx) / d2; // k of j due to j\n\n   \t\t\t// set velocity of i\n   \t\t\ti.dy = kij * dy + kii * dx;\n   \t\t\ti.dx = kij * dx - kii * dy;\n\n   \t\t\t// set velocity of j\n   \t\t\tj.dy = kji * dy + kjj * dx;\n   \t\t\tj.dx = kji * dx - kjj * dy;\n\n\t\t\tSoundEffect.HIT.play();\n   \t\t\treturn true;\n   \t\t}\n   \t\treturn false;\n   \t}", "path": "src\\Billiards\\Engine.java", "repo_name": "Asgeorge712/Billiards", "stars": 8, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * finger[i] = n\n * \n * @param i\n *            The index to set\n * @param n\n *            The node to set\n */\n", "func_signal": "public void setFinger(int i, TNode n)", "code": "{\n    if (i < 0 || i >= fingers.size())\n        // Invalid range\n        throw new IndexOutOfBoundsException();\n\n    if (i == 0) {\n        setSuccessor(n);\n        return;\n    }\n\n    fingers.set(i, n);\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\business\\Node.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Adds an event to the test\n * \n * @param milliseconds\n *            the elapsed time in milliseconds, from the time {@link #run} is called, after\n *            which this event will be triggered.\n * @return a {@link DonutEvent} which is used to add functionality to the event by calls to\n *         {@link DonutEvent#join}, {@link DonutEvent#leave}, {@link DonutEvent#test}, etc'.\n */\n", "func_signal": "public DonutEvent addEvent(int milliseconds)", "code": "{\n    DonutEvent donutEvent = new DonutEvent(milliseconds, this);\n    getEventList().add(donutEvent);\n    return donutEvent;\n}", "path": "test\\integration\\edu\\washington\\cs\\cse490h\\donut\\util\\DonutTestRunner.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Formats a TNode into a prettier String. We cannot change the toString of TNode because it's\n * implementation is generated each time with a thrift call. Therefore, this method subverts\n * their efforts.\n * \n * @param n\n *            The node to print\n * @return Returns a String in the format of hostname:port. If n == null, then returns \"NULL\".\n */\n", "func_signal": "public static String TNodeToString(TNode n)", "code": "{\n    if (n == null)\n        return \"NULL\";\n    else\n        return n.getName() + \":\" + n.getPort();\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\business\\Node.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Generates a {@link KeyId} from the given String by SHA1 hashing it and concatenating into 64\n * bits.\n * \n * @param key\n *            a {@link String} to use for generating the {@link KeyId}\n * @return a {@link KeyId} which is a hash of the {@code key}\n */\n", "func_signal": "public static KeyId generateKeyId(String key)", "code": "{\n    try {\n        KeyId keyId = new KeyId(0);\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA\");\n        byte[] hash = md.digest(key.getBytes());\n        int keySpaceBytes = Constants.KEY_SPACE / 4;\n        for (int i = 0; i < Math.min(hash.length, keySpaceBytes); ++i) {\n            keyId.setId(keyId.getId() | (((long) hash[i] & 0xff) << (i * 4)));\n        }\n        return keyId;\n    } catch (NoSuchAlgorithmException e) {\n        // Will never happen because SHA algorithm exists\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\util\\KeyIdUtil.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Create a new Chord ring\n * \n * @param tNode\n *            The Thrift Node object that describes the physical topology of the node.\n */\n", "func_signal": "public Node(TNode tNode)", "code": "{\n    this.tNode = tNode;\n    this.predecessor = null;\n    initFingers();\n    initSuccessorList();\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\business\\Node.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Stops the worker threads.\n */\n", "func_signal": "public void kill()", "code": "{\n    stabilize.kill();\n    checkPredecessor.kill();\n    fixFingers.kill();\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\server\\DonutClient.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Join {@link Node} with index {@code nodeNum} to the Donut ring referencing the {@Node}\n * with index {@code knownNode} as the known {@link Node} in the ring.\n * \n * @param nodeNum\n */\n", "func_signal": "public void join(int nodeNum, int knownNode)", "code": "{\n    TNode node = testRunner.node(knownNode).getTNode();\n    setClosure(new DonutJoinClosure(testRunner.client(nodeNum), node));\n}", "path": "test\\integration\\edu\\washington\\cs\\cse490h\\donut\\util\\DonutEvent.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Leave {@link Node} with index {@code nodeNum} from the Donut ring.\n * \n * @param nodeNum\n */\n", "func_signal": "public void leave(int nodeNum)", "code": "{\n    setClosure(new DonutLeaveClosure(testRunner.client(nodeNum), testRunner.getClientFactory(),\n            testRunner.node(nodeNum).getTNode()));\n}", "path": "test\\integration\\edu\\washington\\cs\\cse490h\\donut\\util\\DonutEvent.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Formats a list of TNodes. Note: This implementation is based off Java 6 AbstractCollection\n * toString.\n * \n * @param l\n *            List of TNodes\n * @return Produced String\n */\n", "func_signal": "public static String TNodeListToString(List<TNode> l)", "code": "{\n    Iterator<TNode> i = l.iterator();\n    if (!i.hasNext())\n        // Empty list\n        return \"[]\";\n\n    StringBuilder result = new StringBuilder();\n\n    result.append(\"[\");\n\n    while (true) {\n        TNode e = i.next();\n        result.append(TNodeToString(e));\n        if (!i.hasNext())\n            return result.append(']').toString();\n\n        result.append(\", \");\n    }\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\business\\Node.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Called periodically. Checks whether the predecessor has failed.\n */\n", "func_signal": "public void checkPredecessor()", "code": "{\n    if (this.node.getPredecessor() != null && !ping(this.node.getPredecessor())) {\n        // A predecessor is defined but could not be reached. Nullify the current predecessor\n        LOGGER.warning(\"Lost Predecessor [\" + Node.TNodeToString(node.getTNode())\n                + \"]: Predecessor - \" + Node.TNodeToString(node.getPredecessor()));\n\n        this.node.setPredecessor(null);\n    }\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\server\\DonutClient.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * @param donutClient\n * @param knownNode\n *            {@link TNode} on which to join.\n */\n", "func_signal": "public DonutJoinClosure(DonutClient donutClient, TNode knownNode)", "code": "{\n    this.donutClient = donutClient;\n    this.knownNode = knownNode;\n}", "path": "test\\integration\\edu\\washington\\cs\\cse490h\\donut\\util\\DonutJoinClosure.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Runs the test.\n */\n", "func_signal": "public void run() throws Exception", "code": "{\n    long start = System.currentTimeMillis();\n    while (!eventList.isEmpty()) {\n        if (eventList.peek().getMilliseconds() <= (System.currentTimeMillis() - start)) {\n            eventList.poll().run();\n        }\n    }\n    for (DonutClient client : clientList) {\n        client.kill();\n    }\n}", "path": "test\\integration\\edu\\washington\\cs\\cse490h\\donut\\util\\DonutTestRunner.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Initializes the successor list.\n */\n", "func_signal": "private void initSuccessorList()", "code": "{\n    this.successorList = new ArrayList<TNode>(Constants.SUCCESSOR_LIST_SIZE);\n\n    // Adds the initial successor\n    for (int i = 0; i < Constants.SUCCESSOR_LIST_SIZE; i++)\n        this.successorList.add(tNode);\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\business\\Node.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Starts the worker threads.\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    super.run();\n\n    stabilize.start();\n    checkPredecessor.start();\n    fixFingers.start();\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\server\\DonutClient.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Initializes the finger table. The successor and all fingers will become this, creating a\n * complete chord ring.\n */\n", "func_signal": "private void initFingers()", "code": "{\n    this.fingers = new ArrayList<TNode>(Constants.KEY_SPACE);\n    for (int i = 0; i < Constants.KEY_SPACE; i++)\n        this.fingers.add(tNode);\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\business\\Node.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Creates a new RunAtInterval thread. Place the code to be repeated every interval milliseconds\n * in the runClosure() body. Call kill when you want to kill the thread\n * \n * @param interval\n *            The interval between each time runClosure is called\n */\n", "func_signal": "public AbstractRunAtInterval(int interval)", "code": "{\n    if (interval <= 0)\n        throw new IllegalArgumentException(\"interval must be > 0\");\n    this.interval = interval;\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\server\\AbstractRunAtInterval.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Called periodically. Refreshes the finger table entries. nextFingerToUpdate stores the index\n * of the next finger to fix.\n */\n", "func_signal": "public void fixFingers()", "code": "{\n    fixFinger(nextFingerToUpdate);\n\n    nextFingerToUpdate = (nextFingerToUpdate + 1) % node.getFingers().size();\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\server\\DonutClient.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * @param ids\n *            the ids of {@link Node}s that will be available to the Donut\n */\n", "func_signal": "public DonutTestRunner(long... ids)", "code": "{\n    nodeList = new ArrayList<Node>();\n    serviceList = new ArrayList<DonutInMemoryHashTableService>();\n    eventList = new PriorityQueue<DonutEvent>();\n    clientList = new ArrayList<DonutClient>();\n    clientFactory = new LocalLocatorClientFactory();\n    for (int i = 0; i < ids.length; ++i) {\n        createAndAddNode(\"node\" + i, ids[i]);\n    }\n}", "path": "test\\integration\\edu\\washington\\cs\\cse490h\\donut\\util\\DonutTestRunner.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Scans this Node's finger table for the closest preceding node to the given key.\n * \n * @param entryId\n * @return the {@link Node} from the finger table that is the closest and preceding the entryId\n */\n", "func_signal": "public TNode closestPrecedingNode(KeyId entryId) throws IllegalArgumentException", "code": "{\n    for (int i = fingers.size() - 1; i >= 0; --i) {\n        KeyId currentFinger = getFinger(i).getNodeId();\n        // (id, finger, us)\n        // (finger, us, id)\n        if (!currentFinger.equals(getNodeId())\n                && KeyIdUtil.isAfterXButBeforeEqualY(entryId, currentFinger, getNodeId())) {\n            return getFinger(i);\n        }\n    }\n    return getTNode();\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\business\\Node.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "/**\n * Called periodically. Verify's immediate successor, and tell's successor about us.\n */\n", "func_signal": "public void stabilize()", "code": "{\n    TNode x = null;\n    TNode successor = node.getSuccessor();\n    Iface successorClient;\n\n    try {\n        successorClient = clientFactory.get(successor);\n    } catch (RetryFailedException e) {\n        LOGGER.info(\"Lost successor [\" + Node.TNodeToString(node.getTNode()) + \"]: Successor- \"\n                + Node.TNodeToString(successor));\n\n        clientFactory.release(successor);\n        node.removeSuccessor();\n        return;\n    }\n\n    try {\n        x = successorClient.getPredecessor();\n    } catch (NodeNotFoundException e) {\n        // Successor's predecessor is null\n    } catch (TException e) {\n        LOGGER.info(\"Lost successor [\" + Node.TNodeToString(node.getTNode())\n                + \"]: Successor - \" + Node.TNodeToString(node.getSuccessor()));\n\n        node.removeSuccessor();\n        clientFactory.release(successor);\n        return;\n    }\n\n    if (x != null\n            && KeyIdUtil.isAfterXButBeforeEqualY(x.getNodeId(), node.getNodeId(), successor\n                    .getNodeId())) {\n        clientFactory.release(successor);\n        successor = x;\n\n        try {\n            successorClient = clientFactory.get(successor);\n        } catch (RetryFailedException e) {\n            LOGGER.info(\"Lost successor [\" + Node.TNodeToString(node.getTNode())\n                    + \"]: Successor - \" + Node.TNodeToString(node.getSuccessor()));\n\n            clientFactory.release(successor);\n            return;\n        }\n    }\n\n    try {\n        List<TNode> successorList = successorClient.notify(node.getTNode());\n\n        // Set successor *MUST* be called after notify for replication\n        // to be guaranteed\n        node.updateSuccessorList(successorList);\n        node.setSuccessor(successor);\n    } catch (TException e) {\n        LOGGER.info(\"Lost successor [\" + Node.TNodeToString(node.getTNode())\n                + \"]: Successor - \" + Node.TNodeToString(node.getSuccessor()));\n        return;\n    } finally {\n        clientFactory.release(successor);\n    }\n}", "path": "src\\edu\\washington\\cs\\cse490h\\donut\\server\\DonutClient.java", "repo_name": "alevy/donut", "stars": 10, "license": "None", "language": "java", "size": 3805}
{"docstring": "// $ANTLR start \"LCLOSE\"\n", "func_signal": "public final void mLCLOSE() throws RecognitionException", "code": "{\n    try {\n        int _type = LCLOSE;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:184:9: ( '</' )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:184:12: '</'\n        {\n        match(\"</\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"T__28\"\n", "func_signal": "public final void mT__28() throws RecognitionException", "code": "{\n    try {\n        int _type = T__28;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:12:7: ( '<>' )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:12:9: '<>'\n        {\n        match(\"<>\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * \n * @param args the ARGUMENTS AST node\n * @return a list of ASExpression\n */\n", "func_signal": "public static List<IASExpression> astToExpressionList(LinkedListTree args)", "code": "{\n\tASTIterator i = new ASTIterator(args);\n\tList<IASExpression> result = new ArrayList<IASExpression>(args.getChildCount());\n\twhile (i.hasNext())\n\t{\n\t\tresult.add(ExpressionBuilder.build(i.next()));\n\t}\n\treturn Collections.unmodifiableList(result);\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\impl\\ArgumentUtils.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"XML_NAME\"\n", "func_signal": "public final void mXML_NAME() throws RecognitionException", "code": "{\n    try {\n        int _type = XML_NAME;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:208:2: ( XML_NAME_START ( XML_NAME_PART )* )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:208:4: XML_NAME_START ( XML_NAME_PART )*\n        {\n        mXML_NAME_START(); \n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:208:19: ( XML_NAME_PART )*\n        loop3:\n        do {\n            int alt3=2;\n            int LA3_0 = input.LA(1);\n\n            if ( ((LA3_0>='-' && LA3_0<='.')||(LA3_0>='0' && LA3_0<=':')||(LA3_0>='A' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='a' && LA3_0<='z')) ) {\n                alt3=1;\n            }\n\n\n            switch (alt3) {\n        \tcase 1 :\n        \t    // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:208:19: XML_NAME_PART\n        \t    {\n        \t    mXML_NAME_PART(); \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop3;\n            }\n        } while (true);\n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"XML_ATTRIBUTE_VALUE\"\n", "func_signal": "public final void mXML_ATTRIBUTE_VALUE() throws RecognitionException", "code": "{\n    try {\n        int _type = XML_ATTRIBUTE_VALUE;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:212:2: ( '\\\\'' ( options {greedy=false; } : . )* '\\\\'' | '\\\"' ( options {greedy=false; } : . )* '\\\"' )\n        int alt6=2;\n        int LA6_0 = input.LA(1);\n\n        if ( (LA6_0=='\\'') ) {\n            alt6=1;\n        }\n        else if ( (LA6_0=='\\\"') ) {\n            alt6=2;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 6, 0, input);\n\n            throw nvae;\n        }\n        switch (alt6) {\n            case 1 :\n                // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:212:4: '\\\\'' ( options {greedy=false; } : . )* '\\\\''\n                {\n                match('\\''); \n                // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:212:9: ( options {greedy=false; } : . )*\n                loop4:\n                do {\n                    int alt4=2;\n                    int LA4_0 = input.LA(1);\n\n                    if ( (LA4_0=='\\'') ) {\n                        alt4=2;\n                    }\n                    else if ( ((LA4_0>='\\u0000' && LA4_0<='&')||(LA4_0>='(' && LA4_0<='\\uFFFF')) ) {\n                        alt4=1;\n                    }\n\n\n                    switch (alt4) {\n                \tcase 1 :\n                \t    // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:212:37: .\n                \t    {\n                \t    matchAny(); \n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop4;\n                    }\n                } while (true);\n\n                match('\\''); \n\n                }\n                break;\n            case 2 :\n                // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:213:4: '\\\"' ( options {greedy=false; } : . )* '\\\"'\n                {\n                match('\\\"'); \n                // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:213:8: ( options {greedy=false; } : . )*\n                loop5:\n                do {\n                    int alt5=2;\n                    int LA5_0 = input.LA(1);\n\n                    if ( (LA5_0=='\\\"') ) {\n                        alt5=2;\n                    }\n                    else if ( ((LA5_0>='\\u0000' && LA5_0<='!')||(LA5_0>='#' && LA5_0<='\\uFFFF')) ) {\n                        alt5=1;\n                    }\n\n\n                    switch (alt5) {\n                \tcase 1 :\n                \t    // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:213:36: .\n                \t    {\n                \t    matchAny(); \n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop5;\n                    }\n                } while (true);\n\n                match('\\\"'); \n\n                }\n                break;\n\n        }\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * Stringifies the given IDENTIFIER node.\n */\n", "func_signal": "public static String identText(LinkedListTree ast)", "code": "{\n\tif (ast.getType() != AS3Parser.IDENT)\n\t{\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"expected IDENT, but token was a \" + tokenNameFromAST(ast));\n\t}\n\treturn ast.getText();\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\impl\\ASTUtils.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"XML_NAME_PART\"\n", "func_signal": "public final void mXML_NAME_PART() throws RecognitionException", "code": "{\n    try {\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:225:24: ( UNICODE_LETTER | UNICODE_DIGIT | '.' | '-' | '_' | ':' )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:\n        {\n        if ( (input.LA(1)>='-' && input.LA(1)<='.')||(input.LA(1)>='0' && input.LA(1)<=':')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n            input.consume();\n\n        }\n        else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;}\n\n\n        }\n\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * \n * @param argumentNode the ARGUMENTS AST node\n * @param args list of ASExpression objects to be used as the new\n *        argument list\n */\n", "func_signal": "public static void overwriteArgsWithExpressionList(\tLinkedListTree argumentNode,\n\t\t\t\t\t\t\t\t\t\t\t\t\tList<IASExpression> args)", "code": "{\n\t// get rid of any old arguments,\n\tASTUtils.deleteAllChildren(argumentNode);\n\tif (args == null)\n\t\treturn;\n\t// add the new arguments,\n\tfor (Iterator<IASExpression> i = args.iterator(); i.hasNext();)\n\t{\n\t\tASTExpression arg = (ASTExpression) i.next();\n\t\targumentNode.addChildWithTokens(arg.getAST());\n\t\tif (i.hasNext())\n\t\t{\n\t\t\targumentNode.appendToken(TokenBuilder.newComma());\n\t\t\targumentNode.appendToken(TokenBuilder.newSpace());\n\t\t}\n\t}\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\impl\\ArgumentUtils.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR end \"XML_TEXT\"\n", "func_signal": "public void mTokens() throws RecognitionException", "code": "{\n    // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:8: ( T__28 | T__29 | T__30 | XML_LCHEVRON | XML_RCHEVRON | LCLOSE | RCLOSE | WS | EOL | XML_NAME | XML_ATTRIBUTE_VALUE | XML_PI | XML_COMMENT | XML_CDATA | XML_TEXT )\n    int alt10=15;\n    alt10 = dfa10.predict(input);\n    switch (alt10) {\n        case 1 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:10: T__28\n            {\n            mT__28(); \n\n            }\n            break;\n        case 2 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:16: T__29\n            {\n            mT__29(); \n\n            }\n            break;\n        case 3 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:22: T__30\n            {\n            mT__30(); \n\n            }\n            break;\n        case 4 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:28: XML_LCHEVRON\n            {\n            mXML_LCHEVRON(); \n\n            }\n            break;\n        case 5 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:41: XML_RCHEVRON\n            {\n            mXML_RCHEVRON(); \n\n            }\n            break;\n        case 6 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:54: LCLOSE\n            {\n            mLCLOSE(); \n\n            }\n            break;\n        case 7 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:61: RCLOSE\n            {\n            mRCLOSE(); \n\n            }\n            break;\n        case 8 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:68: WS\n            {\n            mWS(); \n\n            }\n            break;\n        case 9 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:71: EOL\n            {\n            mEOL(); \n\n            }\n            break;\n        case 10 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:75: XML_NAME\n            {\n            mXML_NAME(); \n\n            }\n            break;\n        case 11 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:84: XML_ATTRIBUTE_VALUE\n            {\n            mXML_ATTRIBUTE_VALUE(); \n\n            }\n            break;\n        case 12 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:104: XML_PI\n            {\n            mXML_PI(); \n\n            }\n            break;\n        case 13 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:111: XML_COMMENT\n            {\n            mXML_COMMENT(); \n\n            }\n            break;\n        case 14 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:123: XML_CDATA\n            {\n            mXML_CDATA(); \n\n            }\n            break;\n        case 15 :\n            // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:1:133: XML_TEXT\n            {\n            mXML_TEXT(); \n\n            }\n            break;\n\n    }\n\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * Sets the token's <code>next</code> to this tokens <code>next</code>.\n * \n * @param token The token to add after this token in the stream.\n */\n", "func_signal": "public void appendToken(LinkedListToken token)", "code": "{\n\tif (token.getPrev() != null)\n\t{\n\t\tthrow new IllegalArgumentException(\"appendToken(\" + token\n\t\t\t\t+ \") : prev was not null\");\n\t}\n\tif (token.getNext() != null)\n\t{\n\t\tthrow new IllegalArgumentException(\"appendToken(\" + token\n\t\t\t\t+ \") : next was not null\");\n\t}\n\ttoken.next = next;\n\ttoken.prev = this;\n\tif (next != null)\n\t{\n\t\tnext.prev = token;\n\t}\n\tnext = token;\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\LinkedListToken.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * Escape the given String and place within double quotes so that it\n * will be a valid ActionScript string literal.\n */\n", "func_signal": "public static String str(String str)", "code": "{\n\tStringBuffer result = new StringBuffer(\"\\\"\");\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tchar c = str.charAt(i);\n\t\tswitch (c)\n\t\t{\n\t\tcase '\\n':\n\t\t\tresult.append(\"\\\\n\");\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tresult.append(\"\\\\t\");\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\tresult.append(\"\\\\r\");\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tresult.append(\"\\\\\\\"\");\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tresult.append(\"\\\\\\\\\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult.append(c);\n\t\t}\n\t}\n\tresult.append('\"');\n\treturn result.toString();\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\impl\\ASTUtils.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * Creates a properly-configured parser object for the E4X grammar.\n */\n", "func_signal": "public static RegexSimpleParser parserOn(Reader in) throws IOException", "code": "{\n\tANTLRReaderStream cs = new ANTLRReaderStream(in);\n\tRegexSimpleLexer lexer = new RegexSimpleLexer(cs);\n\tLinkedListTokenSource source = new LinkedListTokenSource(lexer);\n\tLinkedListTokenStream stream = new LinkedListTokenStream(source);\n\tRegexSimpleParser parser = new RegexSimpleParser(stream);\n\tparser.setTreeAdaptor(TREE_ADAPTOR);\n\tparser.setInput(lexer, cs);\n\treturn parser;\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\regexsimple\\RegexSimpleHelper.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"XML_COMMENT\"\n", "func_signal": "public final void mXML_COMMENT() throws RecognitionException", "code": "{\n    try {\n        int _type = XML_COMMENT;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:219:14: ( '<!--' ( options {greedy=false; } : . )* '-->' )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:219:16: '<!--' ( options {greedy=false; } : . )* '-->'\n        {\n        match(\"<!--\"); \n\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:219:23: ( options {greedy=false; } : . )*\n        loop8:\n        do {\n            int alt8=2;\n            int LA8_0 = input.LA(1);\n\n            if ( (LA8_0=='-') ) {\n                int LA8_1 = input.LA(2);\n\n                if ( (LA8_1=='-') ) {\n                    int LA8_3 = input.LA(3);\n\n                    if ( (LA8_3=='>') ) {\n                        alt8=2;\n                    }\n                    else if ( ((LA8_3>='\\u0000' && LA8_3<='=')||(LA8_3>='?' && LA8_3<='\\uFFFF')) ) {\n                        alt8=1;\n                    }\n\n\n                }\n                else if ( ((LA8_1>='\\u0000' && LA8_1<=',')||(LA8_1>='.' && LA8_1<='\\uFFFF')) ) {\n                    alt8=1;\n                }\n\n\n            }\n            else if ( ((LA8_0>='\\u0000' && LA8_0<=',')||(LA8_0>='.' && LA8_0<='\\uFFFF')) ) {\n                alt8=1;\n            }\n\n\n            switch (alt8) {\n        \tcase 1 :\n        \t    // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:219:51: .\n        \t    {\n        \t    matchAny(); \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop8;\n            }\n        } while (true);\n\n        match(\"-->\"); \n\n        _channel=HIDDEN;\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"UNICODE_LETTER\"\n", "func_signal": "public final void mUNICODE_LETTER() throws RecognitionException", "code": "{\n    try {\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:228:25: ( 'a' .. 'z' | 'A' .. 'Z' )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:\n        {\n        if ( (input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n            input.consume();\n\n        }\n        else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;}\n\n\n        }\n\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * Deletes any whitespace tokens following (but not including) the given\n * token up to a comma token, and then deletes the comma token too.\n * \n * Used when removing elements from comma-separated lists.\n */\n", "func_signal": "public static void removeTrailingWhitespaceAndComma(\n\t\tLinkedListToken stopToken)", "code": "{\n\tfor (LinkedListToken tok = stopToken.getNext(); tok != null; tok = tok.getNext())\n\t{\n\t\tif (tok.getChannel() == AS3Parser.HIDDEN)\n\t\t{\n\t\t\t// TODO: this might be incorrect (but never called?) see code in removePreceeding...\n\t\t\ttok.deleteToken();\n\t\t}\n\t\telse if (tok.getType() == AS3Parser.COMMA)\n\t\t{\n\t\t\ttok.deleteToken();\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ASBlocksSyntaxError(\"Unexpected token: \" + tok);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\impl\\ASTUtils.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"T__29\"\n", "func_signal": "public final void mT__29() throws RecognitionException", "code": "{\n    try {\n        int _type = T__29;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:13:7: ( '</>' )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:13:9: '</>'\n        {\n        match(\"</>\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * @private\n */\n", "func_signal": "private static String visitNodes(LinkedListTree ast, String result,\n\t\tint level, boolean location)", "code": "{\n\tif (location)\n\t{\n\t\tresult += \"<\" + tokenName(ast.getType()) + \" line=\\\"\"\n\t\t\t\t+ ast.getLine() + \"\\\">\";\n\n\t\t//\t\t\tresult += \"<\" + tokenName(ast.type) + \" line=\\\"\" + \n\t\t//\t\t\t\tast.line + \"\\\" column=\\\"\" + ast.charPositionInLine + \"\\\">\";\n\t}\n\telse\n\t{\n\t\tresult += \"<\" + tokenName(ast.getType()) + \">\";\n\t}\n\n\tint numChildren = ast.getChildCount();\n\tif (numChildren > 0)\n\t{\n\t\tfor (int i = 0; i < numChildren; i++)\n\t\t{\n\t\t\tresult = visitNodes((LinkedListTree) ast.getChild(i), result, level + 1, location);\n\t\t}\n\t}\n\telse if (ast.getText() != null)\n\t{\n\t\tresult += escapeEntities(ast.getText());\n\t}\n\n\tresult += \"</\" + tokenName(ast.getType()) + \">\";\n\n\treturn result;\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XHelper.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"WS\"\n", "func_signal": "public final void mWS() throws RecognitionException", "code": "{\n    try {\n        int _type = WS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:190:4: ( ( ' ' | '\\\\t' | '\\\\f' )+ )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:190:6: ( ' ' | '\\\\t' | '\\\\f' )+\n        {\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:190:6: ( ' ' | '\\\\t' | '\\\\f' )+\n        int cnt1=0;\n        loop1:\n        do {\n            int alt1=2;\n            int LA1_0 = input.LA(1);\n\n            if ( (LA1_0=='\\t'||LA1_0=='\\f'||LA1_0==' ') ) {\n                alt1=1;\n            }\n\n\n            switch (alt1) {\n        \tcase 1 :\n        \t    // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:\n        \t    {\n        \t    if ( input.LA(1)=='\\t'||input.LA(1)=='\\f'||input.LA(1)==' ' ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        recover(mse);\n        \t        throw mse;}\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt1 >= 1 ) break loop1;\n                    EarlyExitException eee =\n                        new EarlyExitException(1, input);\n                    throw eee;\n            }\n            cnt1++;\n        } while (true);\n\n        _channel=HIDDEN;\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"T__30\"\n", "func_signal": "public final void mT__30() throws RecognitionException", "code": "{\n    try {\n        int _type = T__30;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:14:7: ( '=' )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:14:9: '='\n        {\n        match('='); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "// $ANTLR start \"EOL\"\n", "func_signal": "public final void mEOL() throws RecognitionException", "code": "{\n    try {\n        int _type = EOL;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:199:2: ( ( '\\\\r' '\\\\n' | '\\\\r' | '\\\\n' ) )\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:199:4: ( '\\\\r' '\\\\n' | '\\\\r' | '\\\\n' )\n        {\n        // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:199:4: ( '\\\\r' '\\\\n' | '\\\\r' | '\\\\n' )\n        int alt2=3;\n        int LA2_0 = input.LA(1);\n\n        if ( (LA2_0=='\\r') ) {\n            int LA2_1 = input.LA(2);\n\n            if ( (LA2_1=='\\n') ) {\n                alt2=1;\n            }\n            else {\n                alt2=2;}\n        }\n        else if ( (LA2_0=='\\n') ) {\n            alt2=3;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 2, 0, input);\n\n            throw nvae;\n        }\n        switch (alt2) {\n            case 1 :\n                // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:200:4: '\\\\r' '\\\\n'\n                {\n                match('\\r'); \n                match('\\n'); \n\n                }\n                break;\n            case 2 :\n                // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:201:5: '\\\\r'\n                {\n                match('\\r'); \n\n                }\n                break;\n            case 3 :\n                // C:\\\\projects\\\\jasblocks\\\\as3-commons-jasblocks\\\\src\\\\main\\\\java\\\\org\\\\as3commons\\\\asblocks\\\\parser\\\\antlr\\\\e4x\\\\E4X.g:202:5: '\\\\n'\n                {\n                match('\\n'); \n\n                }\n                break;\n\n        }\n\n        _channel=HIDDEN;\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\org\\as3commons\\asblocks\\parser\\antlr\\e4x\\E4XLexer.java", "repo_name": "teotigraphix/as3-commons-jasblocks", "stars": 9, "license": "None", "language": "java", "size": 2425}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param s1\n * @param s2\n */\n", "func_signal": "public static void assertEquals(String message, String[] s1, String[] s2)", "code": "{\n    String comparisonDumpIfNotEqual = verifyEqualsAndReturnComparisonDumpIfNot(\n            message, s1, s2);\n    if (comparisonDumpIfNotEqual != null)\n        throw new AssertionError(comparisonDumpIfNotEqual);\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param obj1\n * @param obj2\n */\n", "func_signal": "public static void assertNotEquals(String message, Object obj1, Object obj2)", "code": "{\n    if (obj1.equals(obj2)) {\n        message = formattedMessage(message);\n        fail(message + \"did not expect values to be equal (\"\n                + obj1.toString() + \")\");\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param b\n */\n", "func_signal": "public void verifyFalse(String message, boolean b)", "code": "{\n    try {\n        assertFalse(message, b);\n    }\n    catch (Error e) {\n        this.verificationErrors.append(throwableToString(e));\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param s1\n * @param s2\n */\n", "func_signal": "public void verifyNotEquals(String message, boolean s1, boolean s2)", "code": "{\n    try {\n        assertNotEquals(message, new Boolean(s1), new Boolean(s2));\n    }\n    catch (AssertionFailedError e) {\n        this.verificationErrors.append(throwableToString(e));\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Test to see if the dojo is has been loaded and is ready in the document.\n * \n * @return\n */\n", "func_signal": "public boolean isDojoLoaded(boolean b)", "code": "{\n    System.out.println(b + \" \" + selenium.getEval(\"window.dijit\"));\n    return !\"null\".equals(selenium.getEval(\"window.dijit\"));\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @return\n */\n", "func_signal": "private static String formattedMessage(String message)", "code": "{\n    if (null == message)\n        message = \"\";\n    if (message.equals(\"\"))\n        return message;\n    return message + \" , \";\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Waits for page load, and dojo to be ready, and if dojo is not ready, it\n * clicks the button with <code>elementId</code> again\n * \n * @param elementId\n * @return\n */\n", "func_signal": "private boolean waitForPageLoadAndDojoReady(String elementId)", "code": "{\n    selenium.waitForPageToLoad(PAGE_LOAD_TIMEOUT);\n    try {\n        Thread.sleep(PAGE_READY_TIMEOUT);\n        if (isDojoLoaded(false)) {\n            return false;\n        }\n    }\n    catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    selenium.click(elementId);\n    return true;\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param sa\n * @param c\n * @return\n */\n", "func_signal": "public static String joinStrArray(String[] sa, char c)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (int j = 0; j < sa.length; ++j) {\n        sb.append(sa[j]);\n        if (j < sa.length - 1) {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param s1\n * @param s2\n */\n", "func_signal": "public void verifyNotEquals(String message, Object s1, Object s2)", "code": "{\n    try {\n        assertNotEquals(message, s1, s2);\n    }\n    catch (AssertionFailedError e) {\n        this.verificationErrors.append(throwableToString(e));\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param s1\n * @param s2\n */\n", "func_signal": "public static void assertEquals(String message, Object s1, Object s2)", "code": "{\n    if ((s1 instanceof String) && (s2 instanceof String)) {\n        assertEquals(message, (String) s1, (String) s2);\n    }\n    else if ((s1 instanceof String) && (s2 instanceof String[])) {\n        assertEquals(message, (String) s1, (String[]) (String[]) s2);\n    }\n    else if ((s1 instanceof String) && (s2 instanceof Number)) {\n        assertEquals(message, (String) s1, ((Number) s2).toString());\n    }\n    else {\n        if ((!(s1 instanceof String[])) || (!(s2 instanceof String[])))\n            return;\n        String[] sa1 = (String[]) (String[]) s1;\n        String[] sa2 = (String[]) (String[]) s2;\n        if (sa1.length != sa2.length) {\n            message = formattedMessage(message);\n            throw new Error(message + \"Expected \" + sa1 + \" but saw \" + sa2);\n        }\n        for (int j = 0; j < sa1.length; ++j)\n            assertEquals(message, sa1[j], sa2[j]);\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param s1\n * @param s2\n */\n", "func_signal": "public void verifyEquals(String message, String[] s1, String[] s2)", "code": "{\n    String comparisonDumpIfNotEqual = verifyEqualsAndReturnComparisonDumpIfNot(\n            message, s1, s2);\n    if (comparisonDumpIfNotEqual != null)\n        this.verificationErrors.append(comparisonDumpIfNotEqual);\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Wait for DEFAULT_WAIT_PERIOD seconds for an element to present\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param element\n *            - element id like \"form:input\"\n * @param seconds\n *            - maximum number of seconds to wait for the condition to be\n *            true\n */\n", "func_signal": "public void waitForExistence(String message, String element, int seconds)", "code": "{\n    for (int second = 0;; second++) {\n        if (second >= seconds) {\n            try {\n                message = formattedMessage(message);\n                fail(message + \"Timeout: the element: \" + element\n                        + \" could not be found\");\n            }\n            catch (Error e) {\n                this.verificationErrors.append(throwableToString(e));\n                break;\n            }\n        }\n        try {\n            if (selenium.isElementPresent(element))\n                break;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            Thread.sleep(1000);\n        }\n        catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param s1\n * @param s2\n */\n", "func_signal": "public void verifyEquals(String message, Object s1, Object s2)", "code": "{\n    try {\n        assertEquals(message, s1, s2);\n    }\n    catch (Error e) {\n        this.verificationErrors.append(throwableToString(e));\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Clicks on the button with id <code>elementId</code>, and waits for page\n * to load and dojo to be ready\n * \n * @param elementId\n *            - id of the button.\n */\n", "func_signal": "public void clickAndwaitForPageLoad(String elementId)", "code": "{\n    selenium.click(elementId);\n    int i = 0;\n    while (i < 5 && waitForPageLoadAndDojoReady(elementId))\n        i++;\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param b\n */\n", "func_signal": "public void verifyTrue(String message, boolean b)", "code": "{\n    try {\n        assertTrue(message, b);\n    }\n    catch (Error e) {\n        this.verificationErrors.append(throwableToString(e));\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Wait for DEFAULT_WAIT_PERIOD seconds for some element to change its value\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param newValue\n *            - the value which the element expects to change\n * @param element\n *            - element id like \"form:input\"\n * @param seconds\n *            - maximum number of seconds to wait for the condition to be\n *            true\n */\n", "func_signal": "public void waitForValueToChange(String message, String newValue,\n        String element, int seconds)", "code": "{\n    for (int second = 0;; second++) {\n        if (second >= seconds) {\n            try {\n                message = formattedMessage(message);\n                fail(message + \"Timeout: the element: \" + element\n                        + \" could not change its text to \" + newValue);\n            }\n            catch (Error e) {\n                this.verificationErrors.append(throwableToString(e));\n                break;\n            }\n        }\n        try {\n            if (newValue.equals(widgetInteraction\n                    .getDisplayedValue(element)))\n                break;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            Thread.sleep(1000);\n        }\n        catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Refreshes the page at max 5 times and waits for dojo to be ready.\n */\n", "func_signal": "public void waitForDojoReady()", "code": "{\n    int i = 0;\n    while (i < 5 && !isDojoLoaded(true)) {\n        selenium.refresh();\n        i++;\n        try {\n            Thread.sleep(PAGE_READY_TIMEOUT);\n        }\n        catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param s1\n * @param s2\n */\n", "func_signal": "public static void assertEquals(String message, String s1, String s2)", "code": "{\n    message = formattedMessage(message);\n    assertTrue(message + \"Expected \\\"\" + s1 + \"\\\" but saw \\\"\" + s2\n            + \"\\\" instead\", seleniumEquals(s1, s2));\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Wait for DEFAULT_WAIT_PERIOD seconds for some element to change its text\n * \n * @param message\n *            - message hint in case of assertion failure\n * @param newValue\n *            - the value which the element expects to change\n * @param element\n *            - element id like \"form:input\"\n * @param seconds\n *            - maximum number of seconds to wait for the condition to be\n *            true\n */\n", "func_signal": "public void waitForTextToChange(String message, String newValue,\n        String element, int seconds)", "code": "{\n    for (int second = 0;; second++) {\n        if (second >= seconds) {\n            try {\n                message = formattedMessage(message);\n                fail(message + \"Timeout: the element: \" + element\n                        + \" could not change its text to \" + newValue);\n            }\n            catch (Error e) {\n                this.verificationErrors.append(throwableToString(e));\n                break;\n            }\n        }\n        try {\n            if (newValue.equals(selenium.getText(element)))\n                break;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            Thread.sleep(1000);\n        }\n        catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "dojoserverfaces-library-test-selenium\\src\\main\\java\\org\\dojoserverfaces\\tests\\selenium\\SeleniumTestCase.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Creates a TaglibResourceGenerator object.\n * \n * @param processingEnv\n *            a ProcessingEnvironment object containing the processing\n *            environment to use.\n * @param roundEnv\n *            a RoundEnvironment object containing the round environment to\n *            use.\n * @param outputLocation\n *            a String containing the location where the generated source\n *            should be saved.\n * @throws Throwable\n *             if an error occurs while creating this source generator.\n */\n", "func_signal": "public TaglibResourceGenerator(ProcessingEnvironment processingEnv,\n        RoundEnvironment roundEnv, String outputLocation) throws Throwable", "code": "{\n    super(processingEnv, roundEnv, outputLocation);\n    addContextProperty(\n            \"namespace\",\n            System.getProperty(AnnotationProcessor.PROPERTY_NAMESPACE));\n}", "path": "dojoserverfaces-annotation-processor\\src\\main\\java\\org\\dojoserverfaces\\build\\process\\generator\\lib\\TaglibResourceGenerator.java", "repo_name": "kennas/DojoServerFaces", "stars": 13, "license": "other", "language": "java", "size": 2557}
{"docstring": "/**\n * Gets the value of the author property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the author property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAuthor().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link String }\n * \n * \n */\n", "func_signal": "public List<String> getAuthor()", "code": "{\n    if (author == null) {\n        author = new ArrayList<String>();\n    }\n    return this.author;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entitymodel.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the entityOrViewEntityOrExtendEntity property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the entityOrViewEntityOrExtendEntity property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getEntityOrViewEntityOrExtendEntity().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Entity }\n * {@link ExtendEntity }\n * {@link ViewEntity }\n * \n * \n */\n", "func_signal": "public List<Object> getEntityOrViewEntityOrExtendEntity()", "code": "{\n    if (entityOrViewEntityOrExtendEntity == null) {\n        entityOrViewEntityOrExtendEntity = new ArrayList<Object>();\n    }\n    return this.entityOrViewEntityOrExtendEntity;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entitymodel.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the groupBy property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public Boolean getGroupBy()", "code": "{\n    if (groupBy == null) {\n        return Boolean.FALSE;\n    } else {\n        return groupBy;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\AliasAll.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the copyright property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the copyright property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getCopyright().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link String }\n * \n * \n */\n", "func_signal": "public List<String> getCopyright()", "code": "{\n    if (copyright == null) {\n        copyright = new ArrayList<String>();\n    }\n    return this.copyright;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entitymodel.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the conditionExprOrConditionList property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the conditionExprOrConditionList property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getConditionExprOrConditionList().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link ConditionList }\n * {@link ConditionExpr }\n * \n * \n */\n", "func_signal": "public List<Object> getConditionExprOrConditionList()", "code": "{\n    if (conditionExprOrConditionList == null) {\n        conditionExprOrConditionList = new ArrayList<Object>();\n    }\n    return this.conditionExprOrConditionList;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\HavingConditionList.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the enableLock property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public Boolean getEnableLock()", "code": "{\n    if (enableLock == null) {\n        return Boolean.FALSE;\n    } else {\n        return enableLock;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the keyMap property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the keyMap property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getKeyMap().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link KeyMap }\n * \n * \n */\n", "func_signal": "public List<KeyMap> getKeyMap()", "code": "{\n    if (keyMap == null) {\n        keyMap = new ArrayList<KeyMap>();\n    }\n    return this.keyMap;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Relation.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the relation property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the relation property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getRelation().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Relation }\n * \n * \n */\n", "func_signal": "public List<Relation> getRelation()", "code": "{\n    if (relation == null) {\n        relation = new ArrayList<Relation>();\n    }\n    return this.relation;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\ExtendEntity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the neverCheck property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public Boolean getNeverCheck()", "code": "{\n    if (neverCheck == null) {\n        return Boolean.FALSE;\n    } else {\n        return neverCheck;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the unique property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public Boolean getUnique()", "code": "{\n    if (unique == null) {\n        return Boolean.FALSE;\n    } else {\n        return unique;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Index.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the field property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the field property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getField().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Field }\n * \n * \n */\n", "func_signal": "public List<Field> getField()", "code": "{\n    if (field == null) {\n        field = new ArrayList<Field>();\n    }\n    return this.field;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the noAutoStamp property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public Boolean getNoAutoStamp()", "code": "{\n    if (noAutoStamp == null) {\n        return Boolean.FALSE;\n    } else {\n        return noAutoStamp;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the primKey property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the primKey property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getPrimKey().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link PrimKey }\n * \n * \n */\n", "func_signal": "public List<PrimKey> getPrimKey()", "code": "{\n    if (primKey == null) {\n        primKey = new ArrayList<PrimKey>();\n    }\n    return this.primKey;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the ignoreCase property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public Boolean getIgnoreCase()", "code": "{\n    if (ignoreCase == null) {\n        return Boolean.FALSE;\n    } else {\n        return ignoreCase;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\ConditionExpr.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the relation property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the relation property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getRelation().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Relation }\n * \n * \n */\n", "func_signal": "public List<Relation> getRelation()", "code": "{\n    if (relation == null) {\n        relation = new ArrayList<Relation>();\n    }\n    return this.relation;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the combine property.\n * \n * @return\n *     possible object is\n *     {@link String }\n *     \n */\n", "func_signal": "public String getCombine()", "code": "{\n    if (combine == null) {\n        return \"and\";\n    } else {\n        return combine;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\ConditionList.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the index property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the index property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getIndex().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Index }\n * \n * \n */\n", "func_signal": "public List<Index> getIndex()", "code": "{\n    if (index == null) {\n        index = new ArrayList<Index>();\n    }\n    return this.index;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the operator property.\n * \n * @return\n *     possible object is\n *     {@link String }\n *     \n */\n", "func_signal": "public String getOperator()", "code": "{\n    if (operator == null) {\n        return \"equals\";\n    } else {\n        return operator;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\ConditionExpr.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the exclude property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the exclude property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getExclude().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Exclude }\n * \n * \n */\n", "func_signal": "public List<Exclude> getExclude()", "code": "{\n    if (exclude == null) {\n        exclude = new ArrayList<Exclude>();\n    }\n    return this.exclude;\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\AliasAll.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "/**\n * Gets the value of the autoClearCache property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public Boolean getAutoClearCache()", "code": "{\n    if (autoClearCache == null) {\n        return Boolean.TRUE;\n    } else {\n        return autoClearCache;\n    }\n}", "path": "src\\play\\modules\\ofbiz\\generated\\model\\Entity.java", "repo_name": "spinscale/play-ofbiz", "stars": 11, "license": "None", "language": "java", "size": 9190}
{"docstring": "//---------------------------------------------------------------------------------------- backup\n/**\n * Backups RealInventory to a copy of the inventory\n */\n", "func_signal": "public ArrayList<ItemStack[]> backup()", "code": "{\n\titemStackBackup = new ArrayList<ItemStack[]>();\n\tfor (int i = 0; i < inventories.length; i++) {\n\t\titemStackBackup.add(inventories[i].getContents().clone());\n\t}\n\treturn itemStackBackup;\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//-------------------------------------------------------------------------------------- moveFrom\n", "func_signal": "public boolean moveFrom(RealInventory source, int typeId, int amount, short durability)", "code": "{\n\tArrayList<ItemStack[]> itemStackBackup = source.backup();\n\tif (source.remove(typeId, amount, durability)) {\n\t\tif (add(typeId, amount, durability)) {\n\t\t\treturn true;\n\t\t}\n\t\tsource.restore(itemStackBackup);\n\t}\n\treturn false;\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//---------------------------------------------------------------------------------------- update\n/**\n * Update chests states (if this is a chest inventory)\n * Called after each modification into the inventory\n */\n", "func_signal": "private void update()", "code": "{\n\tif (chests[0] != null) {\n\t\tchests[0].update();\n\t}\n\tif (chests[1] != null) {\n\t\tchests[1].update();\n\t}\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//------------------------------------------------------------------------------ getTypeIdVariant\n", "func_signal": "public String getTypeIdVariant()", "code": "{\n\tif ((getDamage() > 0) && !typeIdHasDamage(getTypeId())) {\n\t\treturn getTypeId() + \":\" + getDurability();\n\t} else {\n\t\treturn \"\" + getTypeId();\n\t}\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealItemStack.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//-------------------------------------------------------------------- loadFromRealChestInventory\n/**\n * Clear current inventory (if set) and link RealInventory to a chest's inventory\n * (including the neighbor chest inventory if big chest)\n */\n", "func_signal": "private void loadFromRealChestInventory(RealChest chest)", "code": "{\n\tclear();\n\tchests[0] = chest.getMainChest();\n\tchests[1] = chest.getNeighborChest();\n\tinventories = new Inventory[(chests[1] == null) ? 1 : 2];\n\tinventories[0] = chests[0].getInventory();\n\tif (chests[1] != null) {\n\t\tinventories[1] = chests[1].getInventory();\n\t}\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//-------------------------------------------------------------------------------------- contains\n/**\n * Return true if the inventory contains at least amount of the given material\n * (amount is the sum of multiple slots if needed)\n */\n", "func_signal": "public boolean contains(int typeId, int amount)", "code": "{\n\tfor (int i = 0; i < inventories.length; i++) {\n\t\tHashMap<Integer, ? extends ItemStack> items = inventories[i].all(typeId);\n\t\tIterator<? extends ItemStack> iterator = items.values().iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tamount -= iterator.next().getAmount();\n\t\t\tif (amount <= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//-------------------------------------------------------------------------------------- toString\n/**\n * This translate the inventories content into string\n * Use it for debugging\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tString string = \"##### RealInventory object :\\n\";\n\tfor (int i = 0; i < inventories.length; i++) {\n\t\tstring += \"- INVENTORY i\\n\";\n\t\tItemStack[] itemStackList = inventories[i].getContents();\n\t\tfor (int j = 0; j < itemStackList.length; j++) {\n\t\t\tItemStack itemStack = itemStackList[j];\n\t\t\tstring += \"- \" + j\n\t\t\t+ \": typeId=\" + itemStack.getTypeId()\n\t\t\t+ \", amount=\" + itemStack.getAmount()\n\t\t\t+ \", durability=\" + itemStack.getDurability()\n\t\t\t+ \"\\n\";\n\t\t}\n\t}\n\tstring += \"##### RealInventory object end\";\n\treturn string;\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//--------------------------------------------------------------------------------- RealItemStack\n", "func_signal": "public RealItemStack(int typeId, int amount, short durability)", "code": "{\n\tsetTypeId(typeId);\n\tsetAmount(amount);\n\tsetDurability(durability);\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealItemStack.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//------------------------------------------------------------------- typeIdDurabilityDamageValue\n/**\n * Return the damage value of a typeId:damage (for items that have damage values only)\n */\n", "func_signal": "public static int typeIdDurabilityDamageValue(String typeIdDurability)", "code": "{\n\tif (!typeIdDurability.contains(\":\")) {\n\t\treturn 0;\n\t} else {\n\t\tif (!typeIdHasDamage(Integer.parseInt(typeIdDurability.split(\":\")[0]))) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn Integer.parseInt(typeIdDurability.split(\":\")[1]);\n\t\t}\n\t}\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealItemStack.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//------------------------------------------------------------------------------- typeIdMaxDamage\n", "func_signal": "public static int typeIdMaxDamage(int typeId)", "code": "{\n\tswitch (typeId) {\n\t\tcase 270: return 60;\n\t\tcase 273: return 132;\n\t\t// TODO : each \"damageable\" item may have it's one maxDamage value. Get it !\n\t\tdefault:  return 100;\n\t}\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealItemStack.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//--------------------------------------------------------------------------- getTypeIdDurability\n", "func_signal": "public String getTypeIdDurability()", "code": "{\n\tif (\n\t\t(getDamage() > 0)\n\t\t|| ((getDurability() > 0) && !RealItemStack.typeIdHasDamage(getTypeId()))\n\t) {\n\t\treturn getTypeId() + \":\" + getDurability();\n\t} else {\n\t\treturn \"\" + getTypeId();\n\t}\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealItemStack.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//------------------------------------------------------------------------------------- loadValue\n", "func_signal": "@Override\nprotected boolean loadValue(String key, String value)", "code": "{\n\tif (super.loadValue(key, value)) {\n\t\treturn true;\n\t}\n\tif (key.equals(\"amountRatio\")) {\n\t\ttry {\n\t\t\tamountRatio = Double.parseDouble(value);\n\t\t} catch (Exception e) {\n\t\t\tamountRatio = 5000.0;\n\t\t}\n\t\treturn true;\n\t}\n\tif (key.equals(\"buySellRatio\")) {\n\t\ttry {\n\t\t\tbuySellRatio = Double.parseDouble(value);\n\t\t} catch (Exception e) {\n\t\t\tbuySellRatio = .95;\n\t\t}\n\t\treturn true;\n\t}\n\tif (key.equals(\"dailyPricesCalculation\")) {\n\t\tdailyPricesCalculation = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"economyPlugin\")) {\n\t\teconomyPlugin = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"maxDailyRatio\")) {\n\t\ttry {\n\t\t\tmaxDailyRatio = Double.parseDouble(value);\n\t\t} catch (Exception e) {\n\t\t\tmaxDailyRatio = 1.95;\n\t\t}\n\t\treturn true;\n\t}\n\tif (key.equals(\"maxItemPrice\")) {\n\t\ttry {\n\t\t\tmaxItemPrice = Double.parseDouble(value);\n\t\t} catch (Exception e) {\n\t\t\tmaxItemPrice = 99999.0;\n\t\t}\n\t\treturn true;\n\t}\n\tif (key.equals(\"minDailyRatio\")) {\n\t\ttry {\n\t\t\tminDailyRatio = Double.parseDouble(value);\n\t\t} catch (Exception e) {\n\t\t\tminDailyRatio = .05;\n\t\t}\n\t\treturn true;\n\t}\n\tif (key.equals(\"minItemPrice\")) {\n\t\ttry {\n\t\t\tminItemPrice = Double.parseDouble(value);\n\t\t} catch (Exception e) {\n\t\t\tminItemPrice = .1;\n\t\t}\n\t\treturn true;\n\t}\n\tif (key.equals(\"permissionsPlugin\")) {\n\t\tpermissionsPlugin = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"shopDamagedItems\")) {\n\t\tshopDamagedItems = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"shopInfiniteBuy\")) {\n\t\tshopInfiniteBuy = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"shopInfiniteSell\")) {\n\t\tshopInfiniteSell = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"shopMarketItemsOnly\")) {\n\t\tshopMarketItemsOnly = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"shopOpOnly\")) {\n\t\tshopOpOnly = value;\n\t\treturn true;\n\t}\n\tif (key.equals(\"workForceRatio\")) {\n\t\ttry {\n\t\t\tworkForceRatio = Double.parseDouble(value);\n\t\t} catch (Exception e) {\n\t\t\tworkForceRatio = 1.1;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\fr\\crafter\\tickleman\\RealShop\\RealShopConfig.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//---------------------------------------------------------------------------------------- remove\n/**\n * Remove an amount of item from the inventory\n * Return false if the inventory does not contain the given amount (then nothing is removed)\n */\n", "func_signal": "public boolean remove(int typeId, int amount, Short durability)", "code": "{\n\t// backup inventories\n\tbackup();\n\tint backupAmount = amount;\n\t// scan inventories\n\tfor (int i = 0; i < inventories.length; i++) {\n\t\tInventory inventory = inventories[i];\n\t\tItemStack[] itemStackList = inventory.getContents();\n\t\tfor (int j = 0; j < itemStackList.length; j++) {\n\t\t\tItemStack itemStack = itemStackList[j];\n\t\t\tif (\n\t\t\t\t(itemStack != null)\n\t\t\t\t&& (itemStack.getTypeId() == typeId)\n\t\t\t\t&& ((durability == null) || (durability.equals(itemStack.getDurability())))\n\t\t\t) {\n\t\t\t\tint itemAmount = itemStack.getAmount();\n\t\t\t\tif (amount < itemAmount) {\n\t\t\t\t\t// remove all remaining quantity from slot\n\t\t\t\t\titemStack.setAmount(itemAmount - amount);\n\t\t\t\t\tupdate();\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t// empty slot\n\t\t\t\t\tinventory.clear(j);\n\t\t\t\t\tupdate();\n\t\t\t\t\tamount -= itemAmount;\n\t\t\t\t\tif (amount == 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// if all quantity has not been moved, then rollback\n\trestore();\n\terrorLog.add(new RealItemStack(typeId, backupAmount, durability));\n\treturn false;\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "// ------------------------------------------------------------------------------ OnPluginDisable\n", "func_signal": "@Override\npublic void onPluginDisable(PluginDisableEvent event)", "code": "{\n\tif (\n\t\t(event.getPlugin().getDescription().getName() == \"Spout\")\n\t\t|| (event.getPlugin().getDescription().getName() == \"RealShop\")\n\t) {\n\t\tplugin.inventoryListener = null;\n\t}\n}", "path": "src\\fr\\crafter\\tickleman\\RealShop\\RealShopPluginListener.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//------------------------------------------------------------------------------------------- add\n/**\n * Add an amount of item into the inventory\n * Return false if not enough space in inventory\n */\n", "func_signal": "public boolean add(int typeId, int amount, short durability)", "code": "{\n\tbackup();\n\tfor (int i = 0; i < inventories.length; i++) {\n\t\tHashMap<Integer, ItemStack> remaining = inventories[i].addItem(\n\t\t\tnew ItemStack(typeId, amount, durability)\n\t\t);\n\t\tupdate();\n\t\tif (remaining.isEmpty()) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tamount = remaining.get(0).getAmount();\n\t\t}\n\t}\n\trestore();\n\treturn false;\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//---------------------------------------------------------------------------- storeRealItemStack\n/**\n * Store ItemStack items descriptions into inventory\n * - positive quantities additions, negative quantities removal\n * - if reverse is set to true, negative quantities addition, positive quantities removal\n * - if any add / remove error, then cancel the whole operation and return false\n * - return true if everything is OK\n */\n", "func_signal": "public boolean storeRealItemStack(RealItemStack itemStack, boolean reverse)", "code": "{\n\tboolean ok = true;\n\tint amount = (reverse ? -itemStack.getAmount() : itemStack.getAmount());\n\tif (amount < 0) {\n\t\tok = remove(itemStack.getTypeId(), -amount, itemStack.getDurability());\n\t} else {\n\t\tok = add(itemStack.getTypeId(), amount, itemStack.getDurability());\n\t}\n\treturn ok;\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//-------------------------------------------------------------------------------------- moveFrom\n", "func_signal": "public boolean moveFrom(RealInventory source, ItemStack itemStack)", "code": "{\n\treturn moveFrom(\n\t\tsource, itemStack.getTypeId(), itemStack.getAmount(), itemStack.getDurability()\n\t);\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//------------------------------------------------------------------------------ onInventoryClose\n", "func_signal": "@Override\n  public void onInventoryClose(InventoryCloseEvent event)", "code": "{\n\tif ((event.getPlayer() != null) && (plugin.playersInChestCounter > 0)) {\n\t\tplugin.exitChest(event.getPlayer(), true);\n\t}\n  }", "path": "src\\fr\\crafter\\tickleman\\RealShop\\RealShopInventoryListener.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//------------------------------------------------------------------------------------------ save\n/*\n * Save values. Override original to add my own configuration values.\n */\n", "func_signal": "@Override\nprotected void saveValues(BufferedWriter writer)", "code": "{\n\tsuper.saveValues(writer);\n\tsaveValue(writer, \"amountRatio\");\n\tsaveValue(writer, \"buySellRatio\");\n\tsaveValue(writer, \"dailyPricesCalculation\");\n\tsaveValue(writer, \"economyPlugin\");\n\tsaveValue(writer, \"maxDailyRatio\");\n\tsaveValue(writer, \"maxItemPrice\");\n\tsaveValue(writer, \"minDailyRatio\");\n\tsaveValue(writer, \"minItemPrice\");\n\tsaveValue(writer, \"permissionsPlugin\");\n\tsaveValue(writer, \"shopDamagedItems\");\n\tsaveValue(writer, \"shopInfiniteBuy\");\n\tsaveValue(writer, \"shopInfiniteSell\");\n\tsaveValue(writer, \"shopMarketItemsOnly\");\n\tsaveValue(writer, \"shopOpOnly\");\n\tsaveValue(writer, \"workForceRatio\");\n}", "path": "src\\fr\\crafter\\tickleman\\RealShop\\RealShopConfig.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "//----------------------------------------------------------------------------------------- clear\n/**\n * Clear inventory, resetting its collection of arrays of ItemStack objects\n */\n", "func_signal": "private void clear()", "code": "{\n\tchests = new Chest[2];\n\tinventories = new Inventory[0];\n}", "path": "src\\fr\\crafter\\tickleman\\RealPlugin\\RealInventory.java", "repo_name": "tickleman/RealShop", "stars": 11, "license": "None", "language": "java", "size": 322}
{"docstring": "/**\n * Handles clicks on the list items\n */\n", "func_signal": "@Override\nprotected void onListItemClick(ListView list, View view, int position, long id)", "code": "{\n    boolean isChecked = list.isItemChecked(position);\n    mChecked.set(position, isChecked);\n    if (position == 0) {\n        mSyncAllGroups = isChecked;\n        adjustChecks();\n    }\n}", "path": "src\\com\\android\\contacts\\ContactsGroupSyncSelector.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Create a new send-to-voicemail entry with the given data.\n */\n", "func_signal": "public static final EditEntry newSendToVoicemailEntry(EditContactActivity activity,\n        String data, Uri uri)", "code": "{\n    EditEntry entry = new EditEntry(activity);\n\n    entry.label = activity.getString(R.string.actionIncomingCall);\n    entry.data = data;\n    entry.uri = uri;\n    entry.column = People.SEND_TO_VOICEMAIL;\n    entry.kind = KIND_CONTACT;\n    entry.isStaticLabel = true;\n    entry.syncDataWithView = false;\n    entry.lines = -1;\n    return entry;\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Try guessing the next-best type of {@link EditEntry} to insert into the\n * given list. We walk down the precedence list until we find a type that\n * doesn't exist yet, or default to the lowest ranking type.\n */\n", "func_signal": "private int guessNextType(ArrayList<EditEntry> entries, int[] precedenceList)", "code": "{\n    // Keep track of the types we've seen already\n    SparseBooleanArray existAlready = new SparseBooleanArray(entries.size());\n\n    for (int i = entries.size() - 1; i >= 0; i--) {\n        EditEntry entry = entries.get(i);\n\n        if (!entry.isDeleted) {\n            existAlready.put(entry.type, true);\n        }\n    }\n\n    // Pick the first item we haven't seen\n    for (int type : precedenceList) {\n        if (!existAlready.get(type, false)) {\n            return type;\n        }\n    }\n\n    // Otherwise default to last item\n    return precedenceList[precedenceList.length - 1];\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * @param resolver\n * @param outputStream close() must not be called outside.\n * @param vcardType\n */\n", "func_signal": "public VCardExporterImpl(ContentResolver resolver, OutputStream outputStream, int vcardType)", "code": "{\n    mContentResolver = resolver;\n    mOutputStream = outputStream;\n\n    mVCardType = vcardType;\n    if (vcardType == VCARD_TYPE_DOCOMO) {\n        mCharsetString = CharsetUtils.charsetForVendor(SHIFT_JIS, \"docomo\").name();\n        mVCardAttributeCharset = \"CHARSET=\" + SHIFT_JIS;\n    } else {\n        mCharsetString = \"UTF-8\";\n        mVCardAttributeCharset = \"CHARSET=UTF-8\";\n    }\n}", "path": "src\\com\\android\\contacts\\VCardExporter.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Return half-width version of that character if possible. Return null if not possible\n * @param ch input character\n * @return CharSequence object if the mapping for ch exists. Return null otherwise.\n */\n", "func_signal": "public static CharSequence tryGetHalfWidthText(char ch)", "code": "{\n    if (sHalfWidthMap.containsKey(ch)) {\n        return sHalfWidthMap.get(ch);\n    } else {\n        return null;\n    }\n}", "path": "src\\com\\android\\contacts\\VCardExporter.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Handle clicks from the dialpad chooser.\n */\n", "func_signal": "public void onItemClick(AdapterView parent, View v, int position, long id)", "code": "{\n    DialpadChooserAdapter.ChoiceItem item =\n            (DialpadChooserAdapter.ChoiceItem) parent.getItemAtPosition(position);\n    int itemId = item.id;\n    switch (itemId) {\n        case DialpadChooserAdapter.DIALPAD_CHOICE_USE_DTMF_DIALPAD:\n            // Log.i(TAG, \"DIALPAD_CHOICE_USE_DTMF_DIALPAD\");\n            // Fire off an intent to go back to the in-call UI\n            // with the dialpad visible.\n            returnToInCallScreen(true);\n            break;\n\n        case DialpadChooserAdapter.DIALPAD_CHOICE_RETURN_TO_CALL:\n            // Log.i(TAG, \"DIALPAD_CHOICE_RETURN_TO_CALL\");\n            // Fire off an intent to go back to the in-call UI\n            // (with the dialpad hidden).\n            returnToInCallScreen(false);\n            break;\n\n        case DialpadChooserAdapter.DIALPAD_CHOICE_ADD_NEW_CALL:\n            // Log.i(TAG, \"DIALPAD_CHOICE_ADD_NEW_CALL\");\n            // Ok, guess the user really did want to be here (in the\n            // regular Dialer) after all.  Bring back the normal Dialer UI.\n            showDialpadChooser(false);\n            break;\n\n        default:\n            Log.w(TAG, \"onItemClick: unexpected itemId: \" + itemId);\n            break;\n    }\n}", "path": "src\\com\\android\\contacts\\TwelveKeyDialer.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Dumps the entry into a HashMap suitable for passing to the database.\n * \n * @param values the HashMap to fill in.\n * @return true if the value should be saved, false otherwise\n */\n", "func_signal": "public boolean toValues(ContentValues values)", "code": "{\n    boolean success = false;\n    String labelString = null;\n\n    // Save the type and label\n    if (view != null) {\n        // Read the possibly updated label from the text field\n        labelString = ((TextView) view.findViewById(R.id.label)).getText().toString();\n    }\n    switch (kind) {\n    case Contacts.KIND_PHONE:\n        if (type != Phones.TYPE_CUSTOM) {\n            labelString = null;\n        }\n        values.put(Phones.LABEL, labelString);\n        values.put(Phones.TYPE, type);\n        break;\n\n    case Contacts.KIND_EMAIL:\n        if (type != ContactMethods.TYPE_CUSTOM) {\n            labelString = null;\n        }\n        values.put(ContactMethods.LABEL, labelString);\n        values.put(ContactMethods.KIND, kind);\n        values.put(ContactMethods.TYPE, type);\n        break;\n\n    case Contacts.KIND_IM:\n        values.put(ContactMethods.KIND, kind);\n        values.put(ContactMethods.TYPE, ContactMethods.TYPE_OTHER);\n        values.putNull(ContactMethods.LABEL);\n        if (type != -1) {\n            values.put(ContactMethods.AUX_DATA,\n                    ContactMethods.encodePredefinedImProtocol(type));\n        } else {\n            values.put(ContactMethods.AUX_DATA,\n                    ContactMethods.encodeCustomImProtocol(\n                    label.toString()));\n        }\n        break;\n\n    case Contacts.KIND_POSTAL:\n        if (type != ContactMethods.TYPE_CUSTOM) {\n            labelString = null;\n        }\n        values.put(ContactMethods.LABEL, labelString);\n        values.put(ContactMethods.KIND, kind);\n        values.put(ContactMethods.TYPE, type);\n        break;\n\n    case Contacts.KIND_ORGANIZATION:\n        if (type != ContactMethods.TYPE_CUSTOM) {\n            labelString = null;\n        }\n        values.put(ContactMethods.LABEL, labelString);\n        values.put(ContactMethods.TYPE, type);\n        // Save the title\n        if (view != null) {\n            // Read the possibly updated data from the text field\n            data2 = ((TextView) view.findViewById(R.id.data2)).getText().toString();\n        }\n        if (!TextUtils.isGraphic(data2)) {\n            values.putNull(Organizations.TITLE);\n        } else {\n            values.put(Organizations.TITLE, data2.toString());\n            success = true;\n        }\n        break;\n\n    default:\n        Log.w(TAG, \"unknown kind \" + kind);\n        values.put(ContactMethods.LABEL, labelString);\n        values.put(ContactMethods.KIND, kind);\n        values.put(ContactMethods.TYPE, type);\n        break;\n    }\n\n    // Only set the ISPRIMARY flag if part of the incoming data.  This is because the\n    // ContentProvider will try finding a new primary when setting to false, meaning\n    // it's possible to lose primary altogether as we walk down the list.  If this editor\n    // implements editing of primaries in the future, this will need to be revisited.\n    if (isPrimary) {\n        values.put(ContactMethods.ISPRIMARY, 1);\n    }\n\n    // Save the data\n    if (view != null && syncDataWithView) {\n        // Read the possibly updated data from the text field\n        data = ((TextView) view.findViewById(R.id.data)).getText().toString();\n    }\n    if (!TextUtils.isGraphic(data)) {\n        values.putNull(column);\n        return success;\n    } else {\n        values.put(column, data.toString());\n        return true;\n    }\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Create a new IM address entry with the given data.\n *\n * @param label label for the item, from the db not the display label\n * @param protocol the type used\n * @param data the starting data for the entry, may be null\n * @param uri the uri for the entry if it already exists, may be null\n * @param id the id for the entry if it already exists, 0 it it doesn't\n * @return the new EditEntry\n */\n", "func_signal": "public static final EditEntry newImEntry(EditContactActivity activity,\n        String label, int protocol, String data, Uri uri, long id)", "code": "{\n    EditEntry entry = new EditEntry(activity, label, protocol, data, uri,\n            id);\n\n    entry.hint = activity.getString(R.string.ghostData_im);\n    entry.column = ContactMethods.DATA;\n    entry.contentDirectory = People.ContactMethods.CONTENT_DIRECTORY;\n    entry.kind = Contacts.KIND_IM;\n    entry.contentType = EditorInfo.TYPE_CLASS_TEXT\n            | EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;\n    return entry;\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Takes the entered data and saves it to a new contact.\n */\n", "func_signal": "private void create()", "code": "{\n    ContentValues values = new ContentValues();\n    String data;\n    int numValues = 0;\n    contactCreated = false;\n\n    // Create the contact itself\n    final String name = mNameView.getText().toString();\n\n    if (name != null && TextUtils.isGraphic(name)) {\n        numValues++;\n    }\n    values.put(People.NAME, name);\n    values.put(People.PHONETIC_NAME, mPhoneticNameView.getText().toString());\n\n    // Add the contact to the My Contacts group\n    Uri contactUri = People.createPersonInMyContactsGroup(mResolver, values);\n\n    // Add the contact to the group that is being displayed in the contact list\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(\n            this);\n    int displayType = prefs.getInt(ContactsListActivity.PREF_DISPLAY_TYPE,\n            ContactsListActivity.DISPLAY_TYPE_UNKNOWN);\n\n    if (displayType == ContactsListActivity.DISPLAY_TYPE_USER_GROUP) {\n        String displayGroup = prefs.getString(\n                ContactsListActivity.PREF_DISPLAY_INFO, null);\n\n        if (!TextUtils.isEmpty(displayGroup)) {\n            People.addToGroup(mResolver, ContentUris.parseId(contactUri),\n                    displayGroup);\n        }\n    } else {\n        // Check to see if we're not syncing everything and if so if My Contacts is synced.\n        // If it isn't then the created contact can end up not in any groups that are\n        // currently synced and end up getting removed from the phone, which is really bad.\n        boolean syncingEverything = !\"0\".equals(\n                Contacts.Settings.getSetting(mResolver, null,\n                Contacts.Settings.SYNC_EVERYTHING));\n\n        if (!syncingEverything) {\n            boolean syncingMyContacts = false;\n            Cursor c = mResolver.query(Groups.CONTENT_URI,\n                    new String[] { Groups.SHOULD_SYNC },\n                    Groups.SYSTEM_ID + \"=?\",\n                    new String[] { Groups.GROUP_MY_CONTACTS }, null);\n\n            if (c != null) {\n                try {\n                    if (c.moveToFirst()) {\n                        syncingMyContacts = !\"0\".equals(c.getString(0));\n                    }\n                } finally {\n                    c.close();\n                }\n            }\n\n            if (!syncingMyContacts) {\n                // Not syncing My Contacts, so find a group that is being synced and stick\n                // the contact in there. We sort the list so at least all contacts\n                // will appear in the same group.\n                c = mResolver.query(Groups.CONTENT_URI,\n                        new String[] { Groups._ID },\n                        Groups.SHOULD_SYNC + \"!=0\", null,\n                        Groups.DEFAULT_SORT_ORDER);\n                if (c != null) {\n                    try {\n                        if (c.moveToFirst()) {\n                            People.addToGroup(mResolver,\n                                    ContentUris.parseId(contactUri),\n                                    c.getLong(0));\n                        }\n                    } finally {\n                        c.close();\n                    }\n                }\n            }\n        }\n    }\n\n    // Handle the photo\n    if (mPhoto != null) {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n\n        mPhoto.compress(Bitmap.CompressFormat.JPEG, 75, stream);\n        Contacts.People.setPhotoData(getContentResolver(), contactUri,\n                stream.toByteArray());\n    }\n\n    // Create the contact methods\n    int entryCount = ContactEntryAdapter.countEntries(mSections, false);\n\n    for (int i = 0; i < entryCount; i++) {\n        EditEntry entry = ContactEntryAdapter.getEntry(mSections, i, false);\n\n        if (entry.kind != EditEntry.KIND_CONTACT) {\n            values.clear();\n            if (entry.toValues(values)) {\n                // Only create the entry if there is data\n                entry.uri = mResolver.insert(\n                        Uri.withAppendedPath(contactUri,\n                        entry.contentDirectory),\n                        values);\n                entry.id = ContentUris.parseId(entry.uri);\n                if (!People.CUSTOM_RINGTONE.equals(entry.column)\n                        && !People.SEND_TO_VOICEMAIL.equals(entry.column)) {\n                    numValues++;\n                }\n            }\n        } else {\n            // Update the contact with any straggling data, like notes\n            data = entry.getData();\n            values.clear();\n            if (data != null && TextUtils.isGraphic(data)) {\n                values.put(entry.column, data);\n                mResolver.update(contactUri, values, null, null);\n                if (!People.CUSTOM_RINGTONE.equals(entry.column)\n                        && !People.SEND_TO_VOICEMAIL.equals(entry.column)) {\n                    numValues++;\n                }\n            }\n        }\n    }\n\n    if (numValues == 0) {\n        mResolver.delete(contactUri, null, null);\n        setResult(RESULT_CANCELED);\n    } else {\n        mUri = contactUri;\n        Intent resultIntent = new Intent().setData(mUri).putExtra(\n                Intent.EXTRA_SHORTCUT_NAME, name);\n\n        setResult(RESULT_OK, resultIntent);\n        \n        contactCreated = true;\n        \n        Toast.makeText(this, R.string.contactCreatedToast, Toast.LENGTH_SHORT).show();\n    }\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Brings up the \"dialpad chooser\" UI in place of the usual Dialer\n * elements (the textfield/button and the dialpad underneath).\n *\n * We show this UI if the user brings up the Dialer while a call is\n * already in progress, since there's a good chance we got here\n * accidentally (and the user really wanted the in-call dialpad instead).\n * So in this situation we display an intermediate UI that lets the user\n * explicitly choose between the in-call dialpad (\"Use touch tone\n * keypad\") and the regular Dialer (\"Add call\").  (Or, the option \"Return\n * to call in progress\" just goes back to the in-call UI with no dialpad\n * at all.)\n *\n * @param enabled If true, show the \"dialpad chooser\" instead\n *                of the regular Dialer UI\n */\n", "func_signal": "private void showDialpadChooser(boolean enabled)", "code": "{\n    if (enabled) {\n        // Log.i(TAG, \"Showing dialpad chooser!\");\n        mDigits.setVisibility(View.GONE);\n        if (mDialpad != null) mDialpad.setVisibility(View.GONE);\n        mDialpadChooser.setVisibility(View.VISIBLE);\n\n        // Instantiate the DialpadChooserAdapter and hook it up to the\n        // ListView.  We do this only once.\n        if (mDialpadChooserAdapter == null) {\n            mDialpadChooserAdapter = new DialpadChooserAdapter(this);\n            mDialpadChooser.setAdapter(mDialpadChooserAdapter);\n        }\n    } else {\n        // Log.i(TAG, \"Displaying normal Dialer UI.\");\n        mDigits.setVisibility(View.VISIBLE);\n        if (mDialpad != null) mDialpad.setVisibility(View.VISIBLE);\n        mDialpadChooser.setVisibility(View.GONE);\n    }\n}", "path": "src\\com\\android\\contacts\\TwelveKeyDialer.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Builds the views for a specific section.\n * \n * @param layout the container\n * @param section the section to build the views for\n */\n", "func_signal": "private void buildViewsForSection(final LinearLayout layout, ArrayList<EditEntry> section,\n        int separatorResource, int sectionType)", "code": "{\n\n    View divider = mInflater.inflate(R.layout.edit_divider, layout, false);\n\n    layout.addView(divider);\n\n    // Count up undeleted children\n    int activeChildren = 0;\n\n    for (int i = section.size() - 1; i >= 0; i--) {\n        EditEntry entry = section.get(i);\n\n        if (!entry.isDeleted) {\n            activeChildren++;\n        }\n    }\n\n    // Build the correct group header based on undeleted children\n    ViewGroup header;\n\n    if (activeChildren == 0) {\n        header = (ViewGroup) mInflater.inflate(R.layout.edit_separator_alone,\n                layout, false);\n    } else {\n        header = (ViewGroup) mInflater.inflate(R.layout.edit_separator,\n                layout, false);\n    }\n\n    // Because we're emulating a ListView, we need to handle focus changes\n    // with some additional logic.\n    header.setOnFocusChangeListener(this);\n\n    TextView text = (TextView) header.findViewById(R.id.text);\n\n    text.setText(getText(separatorResource));\n\n    // Force TextView to always default color if we have children.  This makes sure\n    // we don't change color when parent is pressed.\n    if (activeChildren > 0) {\n        ColorStateList stateList = text.getTextColors();\n\n        text.setTextColor(stateList.getDefaultColor());\n    }\n\n    View addView = header.findViewById(R.id.separator);\n\n    addView.setTag(Integer.valueOf(sectionType));\n    addView.setOnClickListener(this);\n\n    // Build views for the current section\n    for (EditEntry entry : section) {\n        entry.activity = this; // this could be null from when the state is restored\n        if (!entry.isDeleted) {\n            View view = buildViewForEntry(entry);\n\n            header.addView(view);\n        }\n    }\n\n    layout.addView(header);\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * @param parentContext must not be null\n * @param parentHandler must not be null\n */\n", "func_signal": "public VCardExporter(Context parentContext, Handler parentHandler)", "code": "{\n    mParentContext = parentContext;\n    mParentHandler = parentHandler;\n    mTargetDirectory = getString(R.string.config_export_dir);\n    mFileNamePrefix = getString(R.string.config_export_file_prefix);\n    mFileNameSuffix = getString(R.string.config_export_file_suffix);\n    mFileNameExtension = getString(R.string.config_export_file_extension);\n    mVCardType = getString(R.string.config_export_vcard_type);\n\n    mExtensionsToConsider = new HashSet<String>();\n    mExtensionsToConsider.add(mFileNameExtension);\n\n    final String additionalExtensions =\n        getString(R.string.config_export_extensions_to_consider);\n    if (!TextUtils.isEmpty(additionalExtensions)) {\n        for (String extension : additionalExtensions.split(\",\")) {\n            String trimed = extension.trim();\n            if (trimed.length() > 0) {\n                mExtensionsToConsider.add(trimed);\n            }\n        }\n    }\n\n    Resources resources = parentContext.getResources();\n    mFileIndexMinimum = resources.getInteger(R.integer.config_export_file_min_index);\n    mFileIndexMaximum = resources.getInteger(R.integer.config_export_file_max_index);\n}", "path": "src\\com\\android\\contacts\\VCardExporter.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "//Wysie_Soh: add to contacts button / voicemail depending on what is set\n", "func_signal": "private void initVoicemailButton()", "code": "{\n\tmVoicemailButton = (ImageButton)mVoicemailDialAndDeleteRow.findViewById(R.id.voicemailButton);\n\tmVoicemailButton.setOnClickListener(this);\n\t\n\tif (prefs.getString(\"vm_button\", \"0\").equals(\"0\")) {\n\t\tmVoicemailButton.setImageResource(R.drawable.ic_add_contacts);    \t\t\n\t}\n\telse if (prefs.getString(\"vm_button\", \"0\").equals(\"1\")) { //Wysie_Soh: startsWith changed to equals\n\t        mVoicemailButton.setImageResource(R.drawable.ic_dial_action_sms);\n\t}\n\telse if (prefs.getString(\"vm_button\", \"0\").equals(\"2\")) {\n\t\tmVoicemailButton.setImageResource(R.drawable.ic_dial_action_voice_mail);\n\t\t\n\t        if (hasVoicemail()) {\n\t        \tmVoicemailButton.setEnabled(true);\n\t        } else {\n\t        \tmVoicemailButton.setEnabled(false);\n\t        \tmVoicemailButton.setOnClickListener(null);\n\t        }\n\t}\n}", "path": "src\\com\\android\\contacts\\TwelveKeyDialer.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Create a new company entry with the given data.\n */\n", "func_signal": "public static final EditEntry newOrganizationEntry(EditContactActivity activity,\n        String label, int type, String company, String title, Uri uri, long id)", "code": "{\n    EditEntry entry = new EditEntry(activity, label, type, company, uri,\n            id);\n\n    entry.hint = activity.getString(R.string.ghostData_company);\n    entry.hint2 = activity.getString(R.string.ghostData_title);\n    entry.data2 = title;\n    entry.column = Organizations.COMPANY;\n    entry.contentDirectory = Organizations.CONTENT_DIRECTORY;\n    entry.kind = Contacts.KIND_ORGANIZATION;\n    entry.contentType = EditorInfo.TYPE_CLASS_TEXT\n            | EditorInfo.TYPE_TEXT_FLAG_CAP_WORDS;\n    return entry;\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Handles clicks on the OK and cancel buttons\n */\n", "func_signal": "public void onClick(View view)", "code": "{\n    switch (view.getId()) {\n        case R.id.cancel: {\n            finish();\n            break;\n        }\n        \n        case R.id.ok: {\n            // The list isn't setup yet, so just return without doing anything.\n            if (mChecked == null) {\n                finish();\n                return;\n            }\n\n            final ContentResolver resolver = getContentResolver();\n            if (mSyncAllGroups) {\n                // For now we only support a single account and the UI doesn't know what\n                // the account name is, so we're using a global setting for SYNC_EVERYTHING.\n                // Some day when we add multiple accounts to the UI this should use the per\n                // account setting.\n                Settings.setSetting(resolver, null, Settings.SYNC_EVERYTHING, \"1\");\n            } else {\n                ContentValues values = new ContentValues();\n                int count = mChecked.size();\n                for (int i = 1; i < count; i++) {\n                    values.clear();\n                    values.put(Groups.SHOULD_SYNC, mChecked.get(i));\n                    resolver.update(\n                            ContentUris.withAppendedId(Groups.CONTENT_URI, mGroupIds.get(i)),\n                            values, null, null);\n                }\n                // For now we only support a single account and the UI doesn't know what\n                // the account name is, so we're using a global setting for SYNC_EVERYTHING.\n                // Some day when we add multiple accounts to the UI this should use the per\n                // account setting.\n                Settings.setSetting(resolver, null, Settings.SYNC_EVERYTHING, \"0\");\n            }\n            finish();\n            break;\n        }\n    }\n}", "path": "src\\com\\android\\contacts\\ContactsGroupSyncSelector.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Returns to the in-call UI (where there's presumably a call in\n * progress) in response to the user selecting \"use touch tone keypad\"\n * or \"return to call\" from the dialpad chooser.\n */\n", "func_signal": "private void returnToInCallScreen(boolean showDialpad)", "code": "{\n    try {\n        ITelephony phone = ITelephony.Stub.asInterface(ServiceManager.checkService(\"phone\"));\n        if (phone != null) phone.showCallScreenWithDialpad(showDialpad);\n    } catch (RemoteException e) {\n        Log.w(TAG, \"phone.showCallScreenWithDialpad() failed\", e);\n    }\n\n    // Finally, finish() ourselves so that we don't stay on the\n    // activity stack.\n    // Note that we do this whether or not the showCallScreenWithDialpad()\n    // call above had any effect or not!  (That call is a no-op if the\n    // phone is idle, which can happen if the current call ends while\n    // the dialpad chooser is up.  In this case we can't show the\n    // InCallScreen, and there's no point staying here in the Dialer,\n    // so we just take the user back where he came from...)\n    finish();\n}", "path": "src\\com\\android\\contacts\\TwelveKeyDialer.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Create a new ringtone entry with the given data.\n */\n", "func_signal": "public static final EditEntry newRingtoneEntry(EditContactActivity activity,\n        String data, Uri uri)", "code": "{\n    EditEntry entry = new EditEntry(activity);\n\n    entry.label = activity.getString(R.string.label_ringtone);\n    entry.data = data;\n    entry.uri = uri;\n    entry.column = People.CUSTOM_RINGTONE;\n    entry.kind = KIND_CONTACT;\n    entry.isStaticLabel = true;\n    entry.syncDataWithView = false;\n    entry.lines = -1;\n    return entry;\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "//Wysie_Soh: Load person's current membership into currentMembership ArrayList    \n", "func_signal": "private void loadCurrentMembership()", "code": "{\n    if (!(mState == STATE_INSERT)) {\n        long personId = ContentUris.parseId(mUri);\n        \n        Cursor groupCursor = mResolver.query(GroupMembership.CONTENT_URI, GROUP_MEMBERSHIP_PROJECTION,\n                            GroupMembership.PERSON_ID + \"='\" + personId + \"'\", null, null);\n        Cursor cur = null;\n        \n        if (groupCursor != null) {\n            while (groupCursor.moveToNext()) {\n                cur = mResolver.query(Groups.CONTENT_URI, GROUPS_PROJECTION, Contacts.Groups._ID + \"='\" \n                        + groupCursor.getString(groupCursor.getColumnIndex(GroupMembership.GROUP_ID))\n                        + \"'\", null, null);                          \n                \n                if (cur != null) {\n                    if (cur.moveToFirst()) {\n                        currentMembership.add(cur.getString(cur.getColumnIndex(Groups.NAME)));\n                    }\n                        cur.close();\n                    }\n            }\n            groupCursor.close();\n        }\n    }        \n    selectedGroups = (ArrayList) currentMembership.clone();      \n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "//Wysie_Soh: Take photo instead of choosing from gallery\n", "func_signal": "private void doTakePhotoAction()", "code": "{\n    // http://2009.hfoss.org/Tutorial:Camera_and_Gallery_Demo\n    // http://stackoverflow.com/questions/1050297/how-to-get-the-url-of-the-captured-image\n    // http://www.damonkohler.com/2009/02/android-recipes.html\n    // http://www.firstclown.us/tag/android/\n    // The one I used to get everything working: http://groups.google.com/group/android-developers/msg/2ab62c12ee99ba30 \n    \n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    \n    //Wysie_Soh: Create path for temp file\n    mImageCaptureUri = Uri.fromFile(new File(Environment.getExternalStorageDirectory(),\n                        \"tmp_contact_\" + String.valueOf(System.currentTimeMillis()) + \".jpg\"));\n    \n    intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, mImageCaptureUri);\n\n    try {\n        intent.putExtra(\"return-data\", true);\n        startActivityForResult(intent, PICK_FROM_CAMERA);\n    } catch (ActivityNotFoundException e) {\n        //Do nothing for now\n    }\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * Returns the data for the entry\n * @return the data for the entry\n */\n", "func_signal": "public String getData()", "code": "{\n    if (view != null && syncDataWithView) {\n        CharSequence text = ((TextView) view.findViewById(R.id.data)).getText();\n\n        if (text != null) {\n            return text.toString();\n        }\n    }\n\n    if (data != null) {\n        return data.toString();\n    }\n\n    return null;\n}", "path": "src\\com\\android\\contacts\\EditContactActivity.java", "repo_name": "nobunobuta/android_packages_apps_Contacts", "stars": 10, "license": "other", "language": "java", "size": 1055}
{"docstring": "/**\n * If a key is being grabbed, this method should be called with\n * the appropriate key event. It executes the grab action with\n * the typed character as the parameter.\n */\n", "func_signal": "protected void handleGrabAction(KeyEvent evt)", "code": "{\n        // Clear it *before* it is executed so that executeAction()\n        // resets the repeat count\n        ActionListener _grabAction = grabAction;\n        grabAction = null;\n        executeAction(_grabAction,evt.getSource(),\n                String.valueOf(evt.getKeyChar()));\n}", "path": "app\\src\\processing\\app\\syntax\\InputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Handle a key pressed event. This will look up the binding for\n * the key stroke and execute it.\n */\n", "func_signal": "public void keyPressed(KeyEvent evt)", "code": "{\n  int keyCode = evt.getKeyCode();\n  int modifiers = evt.getModifiers();\n\n  // moved this earlier so it doesn't get random meta clicks\n  if (keyCode == KeyEvent.VK_CONTROL ||\n      keyCode == KeyEvent.VK_SHIFT ||\n      keyCode == KeyEvent.VK_ALT ||\n      keyCode == KeyEvent.VK_META) {\n    return;\n  }\n\n  // don't get command-s or other menu key equivs on mac\n  // unless it's something that's specifically bound (cmd-left or right)\n  //if ((modifiers & KeyEvent.META_MASK) != 0) return;\n  if ((modifiers & KeyEvent.META_MASK) != 0) {\n    KeyStroke keyStroke = KeyStroke.getKeyStroke(keyCode, modifiers);\n    if (currentBindings.get(keyStroke) == null) {\n      return;\n    }\n  }\n\n        /*\n        char keyChar = evt.getKeyChar();\n        System.out.println(\"code=\" + keyCode + \" char=\" + keyChar +\n                           \" charint=\" + ((int)keyChar));\n        System.out.println(\"other codes \" + KeyEvent.VK_ALT + \" \" +\n                           KeyEvent.VK_META);\n        */\n\n        if((modifiers & ~KeyEvent.SHIFT_MASK) != 0\n                || evt.isActionKey()\n                || keyCode == KeyEvent.VK_BACK_SPACE\n                || keyCode == KeyEvent.VK_DELETE\n                || keyCode == KeyEvent.VK_ENTER\n                || keyCode == KeyEvent.VK_TAB\n                || keyCode == KeyEvent.VK_ESCAPE)\n        {\n                if(grabAction != null)\n                {\n                        handleGrabAction(evt);\n                        return;\n                }\n\n                KeyStroke keyStroke = KeyStroke.getKeyStroke(keyCode,\n                        modifiers);\n                Object o = currentBindings.get(keyStroke);\n                if(o == null)\n                {\n                        // Don't beep if the user presses some\n                        // key we don't know about unless a\n                        // prefix is active. Otherwise it will\n                        // beep when caps lock is pressed, etc.\n                        if(currentBindings != bindings)\n                        {\n                                Toolkit.getDefaultToolkit().beep();\n                                // F10 should be passed on, but C+e F10\n                                // shouldn't\n                                repeatCount = 0;\n                                repeat = false;\n                                evt.consume();\n                        }\n                        currentBindings = bindings;\n                        return;\n                }\n                else if(o instanceof ActionListener)\n                {\n                        currentBindings = bindings;\n\n                        executeAction(((ActionListener)o),\n                                evt.getSource(),null);\n\n                        evt.consume();\n                        return;\n                }\n                else if(o instanceof Hashtable)\n                {\n                        currentBindings = (Hashtable)o;\n                        evt.consume();\n                        return;\n                }\n        }\n}", "path": "app\\src\\processing\\app\\syntax\\DefaultInputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Called when a user fixed text from input method or delete all \n * composition text. This method resets CompositionTextPainter.\n * \n * @param text Text from InputMethodEvent.\n * @param commited_count Numbers of committed characters in text. \n */\n", "func_signal": "public void endCompositionText(AttributedCharacterIterator text, int committed_count)", "code": "{\n  isInputProcess = false;\n  /*\n   * If there are no committed characters, remove it all from textarea.\n   * This case will happen if a user delete all composing characters by backspace or delete key. \n   * If it does, these previous characters are needed to be deleted.\n   */\n  if(committed_count == 0){\n    removeNotCommittedText(text);\n  }\n  CompositionTextPainter compositionPainter = textArea.getPainter().getCompositionTextpainter();\n  compositionPainter.invalidateComposedTextLayout(initialCaretPosition + committed_count);\n  prevComposeString = \"\";\n  isInputProcess = false;\n}", "path": "app\\src\\processing\\app\\syntax\\im\\CompositionTextManager.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Create text manager class with a textarea.\n * @param textArea texarea component for PDE.\n */\n", "func_signal": "public CompositionTextManager(JEditTextArea textArea)", "code": "{\n  this.textArea = textArea;\n  prevComposeString = \"\";\n  isInputProcess = false;\n  prevCommittedCount = 0;\n}", "path": "app\\src\\processing\\app\\syntax\\im\\CompositionTextManager.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Sets up the default key bindings.\n */\n", "func_signal": "public void addDefaultKeyBindings()", "code": "{\n        addKeyBinding(\"BACK_SPACE\",BACKSPACE);\n        addKeyBinding(\"C+BACK_SPACE\",BACKSPACE_WORD);\n        addKeyBinding(\"DELETE\",DELETE);\n        addKeyBinding(\"C+DELETE\",DELETE_WORD);\n\n        addKeyBinding(\"ENTER\",INSERT_BREAK);\n        addKeyBinding(\"TAB\",INSERT_TAB);\n\n        addKeyBinding(\"INSERT\",OVERWRITE);\n        addKeyBinding(\"C+\\\\\",TOGGLE_RECT);\n\n        addKeyBinding(\"HOME\",HOME);\n        addKeyBinding(\"END\",END);\n        addKeyBinding(\"S+HOME\",SELECT_HOME);\n        addKeyBinding(\"S+END\",SELECT_END);\n        addKeyBinding(\"C+HOME\",DOCUMENT_HOME);\n        addKeyBinding(\"C+END\",DOCUMENT_END);\n        addKeyBinding(\"CS+HOME\",SELECT_DOC_HOME);\n        addKeyBinding(\"CS+END\",SELECT_DOC_END);\n\n        addKeyBinding(\"PAGE_UP\",PREV_PAGE);\n        addKeyBinding(\"PAGE_DOWN\",NEXT_PAGE);\n        addKeyBinding(\"S+PAGE_UP\",SELECT_PREV_PAGE);\n        addKeyBinding(\"S+PAGE_DOWN\",SELECT_NEXT_PAGE);\n\n        addKeyBinding(\"LEFT\",PREV_CHAR);\n        addKeyBinding(\"S+LEFT\",SELECT_PREV_CHAR);\n        addKeyBinding(\"C+LEFT\",PREV_WORD);\n        addKeyBinding(\"CS+LEFT\",SELECT_PREV_WORD);\n        addKeyBinding(\"RIGHT\",NEXT_CHAR);\n        addKeyBinding(\"S+RIGHT\",SELECT_NEXT_CHAR);\n        addKeyBinding(\"C+RIGHT\",NEXT_WORD);\n        addKeyBinding(\"CS+RIGHT\",SELECT_NEXT_WORD);\n        addKeyBinding(\"UP\",PREV_LINE);\n        addKeyBinding(\"S+UP\",SELECT_PREV_LINE);\n        addKeyBinding(\"DOWN\",NEXT_LINE);\n        addKeyBinding(\"S+DOWN\",SELECT_NEXT_LINE);\n\n        addKeyBinding(\"C+ENTER\",REPEAT);\n}", "path": "app\\src\\processing\\app\\syntax\\DefaultInputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Converts a string to a keystroke. The string should be of the\n * form <i>modifiers</i>+<i>shortcut</i> where <i>modifiers</i>\n * is any combination of A for Alt, C for Control, S for Shift\n * or M for Meta, and <i>shortcut</i> is either a single character,\n * or a keycode name from the <code>KeyEvent</code> class, without\n * the <code>VK_</code> prefix.\n * @param keyStroke A string description of the key stroke\n */\n", "func_signal": "public static KeyStroke parseKeyStroke(String keyStroke)", "code": "{\n        if(keyStroke == null)\n                return null;\n        int modifiers = 0;\n        int index = keyStroke.indexOf('+');\n        if(index != -1)\n        {\n                for(int i = 0; i < index; i++)\n                {\n                        switch(Character.toUpperCase(keyStroke\n                                .charAt(i)))\n                        {\n                        case 'A':\n                                modifiers |= InputEvent.ALT_MASK;\n                                break;\n                        case 'C':\n                                modifiers |= InputEvent.CTRL_MASK;\n                                break;\n                        case 'M':\n                                modifiers |= InputEvent.META_MASK;\n                                break;\n                        case 'S':\n                                modifiers |= InputEvent.SHIFT_MASK;\n                                break;\n                        }\n                }\n        }\n        String key = keyStroke.substring(index + 1);\n        if(key.length() == 1)\n        {\n                char ch = Character.toUpperCase(key.charAt(0));\n                if(modifiers == 0)\n                        return KeyStroke.getKeyStroke(ch);\n                else\n                        return KeyStroke.getKeyStroke(ch,modifiers);\n        }\n        else if(key.length() == 0)\n        {\n                System.err.println(\"Invalid key stroke: \" + keyStroke);\n                return null;\n        }\n        else\n        {\n                int ch;\n\n                try\n                {\n                        ch = KeyEvent.class.getField(\"VK_\".concat(key))\n                                .getInt(null);\n                }\n                catch(Exception e)\n                {\n                        System.err.println(\"Invalid key stroke: \"\n                                + keyStroke);\n                        return null;\n                }\n\n                return KeyStroke.getKeyStroke(ch,modifiers);\n        }\n}", "path": "app\\src\\processing\\app\\syntax\\DefaultInputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Returns the name of the specified text area action.\n * @param listener The action\n */\n", "func_signal": "public static String getActionName(ActionListener listener)", "code": "{\n        Enumeration en = getActions();\n        while(en.hasMoreElements())\n        {\n                String name = (String)en.nextElement();\n                ActionListener _listener = getAction(name);\n                if(_listener == listener) {\n                        return name;\n                }\n        }\n        return null;\n}", "path": "app\\src\\processing\\app\\syntax\\InputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Adds a key binding to this input handler. The key binding is\n * a list of white space separated key strokes of the form\n * <i>[modifiers+]key</i> where modifier is C for Control, A for Alt,\n * or S for Shift, and key is either a character (a-z) or a field\n * name in the KeyEvent class prefixed with VK_ (e.g., BACK_SPACE)\n * @param keyBinding The key binding\n * @param action The action\n */\n", "func_signal": "public void addKeyBinding(String keyBinding, ActionListener action)", "code": "{\n        Hashtable current = bindings;\n\n        StringTokenizer st = new StringTokenizer(keyBinding);\n        while(st.hasMoreTokens())\n        {\n                KeyStroke keyStroke = parseKeyStroke(st.nextToken());\n                if(keyStroke == null)\n                        return;\n\n                if(st.hasMoreTokens())\n                {\n                        Object o = current.get(keyStroke);\n                        if(o instanceof Hashtable)\n                                current = (Hashtable)o;\n                        else\n                        {\n                                o = new Hashtable();\n                                current.put(keyStroke,o);\n                                current = (Hashtable)o;\n                        }\n                }\n                else\n                        current.put(keyStroke,action);\n        }\n}", "path": "app\\src\\processing\\app\\syntax\\DefaultInputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "// implemented handler methods.  These are basically hooks into existing \n// functionality from the main app, as if it came over from another platform.\n", "func_signal": "public void handleAbout(ApplicationEvent ae)", "code": "{\n  if (base != null) {\n    ae.setHandled(true);\n    base.handleAbout();\n  } else {\n    throw new IllegalStateException(\"handleAbout: Base instance detached from listener\");\n  }\n}", "path": "app\\src\\processing\\app\\macosx\\ThinkDifferent.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Called when a user processing input characters and\n * select candidates from input method.\n * \n * @param text Text from InputMethodEvent.\n * @param commited_count Numbers of committed characters in text. \n */\n", "func_signal": "public void processCompositionText(AttributedCharacterIterator text, int committed_count)", "code": "{\n  int layoutCaretPosition = initialCaretPosition + committed_count;\n  CompositionTextPainter compositionPainter = textArea.getPainter().getCompositionTextpainter();\n  compositionPainter.setComposedTextLayout(getTextLayout(text, committed_count), layoutCaretPosition);\n  int textLength = text.getEndIndex() - text.getBeginIndex() - committed_count;\n  StringBuffer unCommitedStringBuf = new StringBuffer(textLength);\n  char c;\n  for (c = text.setIndex(committed_count); c != AttributedCharacterIterator.DONE\n      && textLength > 0; c = text.next(), --textLength) {\n    unCommitedStringBuf.append(c);\n  }\n  String unCommittedString = unCommitedStringBuf.toString();\n  try {\n    if(canRemovePreviousInput(committed_count)){\n      textArea.getDocument().remove(layoutCaretPosition, prevComposeString.length());\n    }\n    textArea.getDocument().insertString(layoutCaretPosition, unCommittedString, null);\n    if(committed_count > 0){\n      initialCaretPosition = initialCaretPosition + committed_count;\n    }\n    prevComposeString = unCommittedString;\n    prevCommittedCount = committed_count;\n  } catch (BadLocationException e) {\n    e.printStackTrace();\n  }\n}", "path": "app\\src\\processing\\app\\syntax\\im\\CompositionTextManager.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Returns the text area that fired the specified event.\n * @param evt The event\n */\n", "func_signal": "public static JEditTextArea getTextArea(EventObject evt)", "code": "{\n        if(evt != null)\n        {\n                Object o = evt.getSource();\n                if(o instanceof Component)\n                {\n                        // find the parent text area\n                        Component c = (Component)o;\n                        for(;;)\n                        {\n                                if(c instanceof JEditTextArea)\n                                        return (JEditTextArea)c;\n                                else if(c == null)\n                                        break;\n                                if(c instanceof JPopupMenu)\n                                        c = ((JPopupMenu)c)\n                                                .getInvoker();\n                                else\n                                        c = c.getParent();\n                        }\n                }\n        }\n\n        // this shouldn't happen\n        System.err.println(\"BUG: getTextArea() returning null\");\n        System.err.println(\"Report this to Slava Pestov <sp@gjt.org>\");\n        return null;\n}", "path": "app\\src\\processing\\app\\syntax\\InputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "// use keyTyped to catch when the feller is actually\n// added to the text field. with keyTyped, as opposed to\n// keyPressed, the keyCode will be zero, even if it's\n// enter or backspace or whatever, so the keychar should\n// be used instead. grr.\n", "func_signal": "public void keyTyped(KeyEvent event)", "code": "{\n  //System.out.println(\"got event \" + event);\n  int c = event.getKeyChar();\n\n  if (c == KeyEvent.VK_ENTER) {  // accept the input\n    String answer = editField.getText();\n    editor.getSketch().nameCode(answer);\n    unedit();\n    event.consume();\n\n    // easier to test the affirmative case than the negative\n  } else if ((c == KeyEvent.VK_BACK_SPACE) ||\n             (c == KeyEvent.VK_DELETE) ||\n             (c == KeyEvent.VK_RIGHT) ||\n             (c == KeyEvent.VK_LEFT) ||\n             (c == KeyEvent.VK_UP) ||\n             (c == KeyEvent.VK_DOWN) ||\n             (c == KeyEvent.VK_HOME) ||\n             (c == KeyEvent.VK_END) ||\n             (c == KeyEvent.VK_SHIFT)) {\n    // these events are ignored\n\n    /*\n  } else if (c == KeyEvent.VK_ESCAPE) {\n    unedit();\n    editor.toolbar.clear();\n    event.consume();\n    */\n\n  } else if (c == KeyEvent.VK_SPACE) {\n    String t = editField.getText();\n    int start = editField.getSelectionStart();\n    int end = editField.getSelectionEnd();\n    editField.setText(t.substring(0, start) + \"_\" +\n                      t.substring(end));\n    editField.setCaretPosition(start+1);\n    event.consume();\n\n  } else if ((c == '_') || (c == '.') ||  // allow .pde and .java\n             ((c >= 'A') && (c <= 'Z')) ||\n             ((c >= 'a') && (c <= 'z'))) {\n    // these are ok, allow them through\n    \n  } else if ((c >= '0') && (c <= '9')) {\n    // getCaretPosition == 0 means that it's the first char\n    // and the field is empty.\n    // getSelectionStart means that it *will be* the first\n    // char, because the selection is about to be replaced\n    // with whatever is typed.\n    if ((editField.getCaretPosition() == 0) ||\n        (editField.getSelectionStart() == 0)) {\n      // number not allowed as first digit\n      //System.out.println(\"bad number bad\");\n      event.consume();\n    }\n  } else {\n    event.consume();\n    //System.out.println(\"code is \" + code + \"  char = \" + c);\n  }\n  //System.out.println(\"code is \" + code + \"  char = \" + c);\n}", "path": "app\\src\\processing\\app\\EditorStatus.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Set up for copy.\n * @param name  Name of the thread\n * @param in    Stream to copy from\n * @param out   Stream to copy to\n */\n", "func_signal": "public StreamRedirectThread(String name, InputStream in, OutputStream out)", "code": "{\n  super(name);\n  this.in = new InputStreamReader(in);\n  this.out = new OutputStreamWriter(out);\n  setPriority(Thread.MAX_PRIORITY-1);\n}", "path": "app\\src\\processing\\app\\StreamRedirectThread.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Executes the specified action, repeating and recording it as\n * necessary.\n * @param listener The action listener\n * @param source The event source\n * @param actionCommand The action command\n */\n", "func_signal": "public void executeAction(ActionListener listener, Object source,\n        String actionCommand)", "code": "{\n        // create event\n        ActionEvent evt = new ActionEvent(source,\n                ActionEvent.ACTION_PERFORMED,\n                actionCommand);\n\n        // don't do anything if the action is a wrapper\n        // (like EditAction.Wrapper)\n        if(listener instanceof Wrapper)\n        {\n                listener.actionPerformed(evt);\n                return;\n        }\n\n        // remember old values, in case action changes them\n        boolean _repeat = repeat;\n        int _repeatCount = getRepeatCount();\n\n        // execute the action\n        if(listener instanceof InputHandler.NonRepeatable)\n                listener.actionPerformed(evt);\n        else\n        {\n                for(int i = 0; i < Math.max(1,repeatCount); i++)\n                        listener.actionPerformed(evt);\n        }\n\n        // do recording. Notice that we do no recording whatsoever\n        // for actions that grab keys\n        if(grabAction == null)\n        {\n                if(recorder != null)\n                {\n                        if(!(listener instanceof InputHandler.NonRecordable))\n                        {\n                                if(_repeatCount != 1)\n                                        recorder.actionPerformed(REPEAT,String.valueOf(_repeatCount));\n\n                                recorder.actionPerformed(listener,actionCommand);\n                        }\n                }\n\n                // If repeat was true originally, clear it\n                // Otherwise it might have been set by the action, etc\n                if(_repeat)\n                {\n                        repeat = false;\n                        repeatCount = 0;\n                }\n        }\n}", "path": "app\\src\\processing\\app\\syntax\\InputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/*\npublic void update() {\n  Graphics g = this.getGraphics();\n  try {\n    setBackground(bgcolor[mode]);\n  } catch (NullPointerException e) { } // if not ready yet\n  if (g != null) paint(g);\n}\n\npublic void update(Graphics g) {\n  paint(g);\n}\n*/\n", "func_signal": "public void paintComponent(Graphics screen)", "code": "{\n  //if (screen == null) return;\n  if (okButton == null) setup();\n\n  //System.out.println(\"status.paintComponent\");\n\n  Dimension size = getSize();\n  if ((size.width != sizeW) || (size.height != sizeH)) {\n    // component has been resized\n\n    if ((size.width > imageW) || (size.height > imageH)) {\n      // nix the image and recreate, it's too small\n      offscreen = null;\n\n    } else {\n      // who cares, just resize\n      sizeW = size.width;\n      sizeH = size.height;\n      setButtonBounds();\n    }\n  }\n\n  if (offscreen == null) {\n    sizeW = size.width;\n    sizeH = size.height;\n    setButtonBounds();\n    imageW = sizeW;\n    imageH = sizeH;\n    offscreen = createImage(imageW, imageH);\n  }\n\n  Graphics g = offscreen.getGraphics();\n  if (font == null) {\n    font = Theme.getFont(\"status.font\");\n    //new Font(\"SansSerif\", Font.PLAIN, 12));\n    g.setFont(font);\n    metrics = g.getFontMetrics();\n    ascent = metrics.getAscent();\n  }\n\n  //setBackground(bgcolor[mode]);  // does nothing\n\n  g.setColor(bgcolor[mode]);\n  g.fillRect(0, 0, imageW, imageH);\n\n  g.setColor(fgcolor[mode]);\n  g.setFont(font); // needs to be set each time on osx\n  g.drawString(message, Preferences.GUI_SMALL, (sizeH + ascent) / 2);\n\n  screen.drawImage(offscreen, 0, 0, null);\n}", "path": "app\\src\\processing\\app\\EditorStatus.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Called when a user begins input from input method.\n * This method initializes text manager.\n * \n * @param text Text from InputMethodEvent.\n * @param commited_count Numbers of committed characters in text. \n */\n", "func_signal": "public void beginCompositionText(AttributedCharacterIterator text, int committed_count)", "code": "{\n  isInputProcess = true;\n  prevComposeString = \"\";\n  initialCaretPosition = textArea.getCaretPosition();\n  processCompositionText(text, committed_count);\n}", "path": "app\\src\\processing\\app\\syntax\\im\\CompositionTextManager.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/*\npublic void prompt(String message) {\n  mode = PROMPT;\n  this.message = message;\n\n  response = 0;\n  yesButton.setVisible(true);\n  noButton.setVisible(true);\n  cancelButton.setVisible(true);\n  yesButton.requestFocus();\n\n  repaint();\n}\n\n\n// prompt has been handled, re-hide the buttons\npublic void unprompt() {\n  yesButton.setVisible(false);\n  noButton.setVisible(false);\n  cancelButton.setVisible(false);\n  empty();\n}\n*/\n", "func_signal": "public void edit(String message, String dflt)", "code": "{\n  mode = EDIT;\n  this.message = message;\n\n  response = 0;\n  okButton.setVisible(true);\n  cancelButton.setVisible(true);\n  editField.setVisible(true);\n  editField.setText(dflt);\n  editField.selectAll();\n  editField.requestFocus();\n\n  repaint();\n}", "path": "app\\src\\processing\\app\\EditorStatus.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Handle a key typed event. This inserts the key into the text area.\n */\n", "func_signal": "public void keyTyped(KeyEvent evt)", "code": "{\n        int modifiers = evt.getModifiers();\n        char c = evt.getKeyChar();\n\n        // this is the apple/cmd key on macosx.. so menu commands\n        // were being passed through as legit keys.. added this line\n        // in an attempt to prevent.\n        if ((modifiers & KeyEvent.META_MASK) != 0) return;\n\n        if (c != KeyEvent.CHAR_UNDEFINED) // &&\n          //                (modifiers & KeyEvent.ALT_MASK) == 0)\n        {\n          if(c >= 0x20 && c != 0x7f)\n                {\n                        KeyStroke keyStroke = KeyStroke.getKeyStroke(\n                                Character.toUpperCase(c));\n                        Object o = currentBindings.get(keyStroke);\n\n                        if(o instanceof Hashtable)\n                        {\n                                currentBindings = (Hashtable)o;\n                                return;\n                        }\n                        else if(o instanceof ActionListener)\n                        {\n                                currentBindings = bindings;\n                                executeAction((ActionListener)o,\n                                        evt.getSource(),\n                                        String.valueOf(c));\n                                return;\n                        }\n\n                        currentBindings = bindings;\n\n                        if(grabAction != null)\n                        {\n                                handleGrabAction(evt);\n                                return;\n                        }\n\n                        // 0-9 adds another 'digit' to the repeat number\n                        if(repeat && Character.isDigit(c))\n                        {\n                                repeatCount *= 10;\n                                repeatCount += (c - '0');\n                                return;\n                        }\n\n                        executeAction(INSERT_CHAR,evt.getSource(),\n                                String.valueOf(evt.getKeyChar()));\n\n                        repeatCount = 0;\n                        repeat = false;\n                }\n        }\n}", "path": "app\\src\\processing\\app\\syntax\\DefaultInputHandler.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Copy.\n */\n", "func_signal": "public void run()", "code": "{\n  try {\n    char[] cbuf = new char[BUFFER_SIZE];\n    int count;\n    //System.out.println(\"opening streamredirectthread\");\n    while ((count = in.read(cbuf, 0, BUFFER_SIZE)) >= 0) {\n      out.write(cbuf, 0, count);\n      // had to add the flush() here.. maybe shouldn't be using writer? [fry]\n      out.flush();\n    }\n    //System.out.println(\"exiting streamredirectthread\");\n    out.flush();\n  } catch(IOException exc) {\n    System.err.println(\"Child I/O Transfer - \" + exc);\n  }\n}", "path": "app\\src\\processing\\app\\StreamRedirectThread.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "// Grab ESC with keyPressed, because it's not making it to keyTyped\n", "func_signal": "public void keyPressed(KeyEvent event)", "code": "{\n  if (event.getKeyChar() == KeyEvent.VK_ESCAPE) {\n    unedit();\n    //editor.toolbar.clear();\n    event.consume();\n  }\n}", "path": "app\\src\\processing\\app\\EditorStatus.java", "repo_name": "agness/kaleido", "stars": 11, "license": "None", "language": "java", "size": 6470}
{"docstring": "/**\n * Check the execution with most recent start time is returned\n */\n", "func_signal": "@Transactional\n@Test\npublic void testGetLastExecution()", "code": "{\n    JobExecution exec1 = new JobExecution(jobInstance);\n    exec1.setCreateTime(new Date(0));\n\n    JobExecution exec2 = new JobExecution(jobInstance);\n    exec2.setCreateTime(new Date(1));\n\n    dao.saveJobExecution(exec1);\n    dao.saveJobExecution(exec2);\n\n    JobExecution last = dao.getLastJobExecution(jobInstance);\n    assertEquals(exec2, last);\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Execute a fresh {@link JobInstance} using {@link JobOperator} - closer to\n * a remote invocation scenario.\n *\n * @throws Exception when shit happens\n */\n", "func_signal": "@Test\npublic void testLaunchByJobOperator() throws Exception", "code": "{\n\n    // assumes the job has a JobIncrementer set\n    long jobExecutionId = jobOperator.startNextInstance(jobLauncherTestUtils.getJob().getName());\n\n    // no need to wait for job completion in this case, the job is launched\n    // synchronously\n\n    String result = jobOperator.getSummary(jobExecutionId);\n    assertTrue(result.contains(\"status=\" + BatchStatus.COMPLETED));\n\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\example\\ExampleJobConfigurationTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Check the execution is returned\n */\n", "func_signal": "@Transactional\n@Test\npublic void testGetMissingLastExecution()", "code": "{\n    JobExecution value = dao.getLastJobExecution(jobInstance);\n    assertNull(value);\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * @param string\n */\n", "func_signal": "public StepSupport(String string)", "code": "{\n    super();\n    this.name = string;\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\step\\StepSupport.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/*\n  * Create and retrieve a job instance.\n  */\n", "func_signal": "@Transactional\n@Test\npublic void testGetMissingById() throws Exception", "code": "{\n\n    JobInstance retrievedInstance = dao.getJobInstance(1111111L);\n    assertNull(retrievedInstance);\n\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobInstanceDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/*\n  * Create and retrieve a job instance.\n  */\n", "func_signal": "@Transactional\n@Test\npublic void testGetJobNames() throws Exception", "code": "{\n\n    testCreateAndRetrieve();\n    List<String> jobNames = dao.getJobNames();\n    assertFalse(jobNames.isEmpty());\n    assertTrue(jobNames.contains(fooJob));\n\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobInstanceDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Update and retrieve job execution - check attributes have changed as\n * expected.\n */\n", "func_signal": "@Transactional\n@Test\npublic void testUpdateExecution()", "code": "{\n    execution.setStatus(BatchStatus.STARTED);\n    dao.saveJobExecution(execution);\n\n    execution.setLastUpdated(new Date(0));\n    execution.setStatus(BatchStatus.COMPLETED);\n    dao.updateJobExecution(execution);\n\n    JobExecution updated = dao.findJobExecutions(jobInstance).get(0);\n    assertEquals(execution, updated);\n    assertEquals(BatchStatus.COMPLETED, updated.getStatus());\n    assertExecutionsAreEqual(execution, updated);\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Save and find a job execution.\n */\n", "func_signal": "@Transactional\n@Test\npublic void testSaveAndFind()", "code": "{\n\n    execution.setStartTime(new Date(System.currentTimeMillis()));\n    execution.setLastUpdated(new Date(System.currentTimeMillis()));\n    execution.setExitStatus(ExitStatus.UNKNOWN);\n    execution.setEndTime(new Date(System.currentTimeMillis()));\n    dao.saveJobExecution(execution);\n\n    List<JobExecution> executions = dao.findJobExecutions(jobInstance);\n    assertEquals(1, executions.size());\n    assertEquals(execution, executions.get(0));\n    assertExecutionsAreEqual(execution, executions.get(0));\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/*\n  * Check to make sure the executions are equal. Normally, comparing the id's\n  * is sufficient. However, for testing purposes, especially of a DAO, we\n  * need to make sure all the fields are being stored/retrieved correctly.\n  */\n", "func_signal": "private void assertExecutionsAreEqual(JobExecution lhs, JobExecution rhs)", "code": "{\n\n    assertEquals(lhs.getId(), rhs.getId());\n    assertEquals(lhs.getStartTime(), rhs.getStartTime());\n    assertEquals(lhs.getStatus(), rhs.getStatus());\n    assertEquals(lhs.getEndTime(), rhs.getEndTime());\n    assertEquals(lhs.getCreateTime(), rhs.getCreateTime());\n    assertEquals(lhs.getLastUpdated(), rhs.getLastUpdated());\n    assertEquals(lhs.getVersion(), rhs.getVersion());\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/* Invoke callbacks on the object, as though it was configured in the\n  * factory\n  * @param o object to configure\n  * @return object after callbacks have been called on it\n  */\n", "func_signal": "private Object getConfigured(Object o)", "code": "{\n    if (this.autowireCapableBeanFactory == null) {\n        throw new UnsupportedOperationException(\n                \"Cannot configure object - not running in an AutowireCapableBeanFactory\");\n    }\n\n    autowireCapableBeanFactory.initializeBean(o, null);\n\n    // TODO could replace with ApplicationContextAwareProcessor call if that class were public\n    if (this.applicationContext != null) {\n        if (o instanceof ResourceLoaderAware) {\n            ((ResourceLoaderAware) o).setResourceLoader(this.applicationContext);\n        }\n        if (o instanceof ApplicationEventPublisherAware) {\n            ((ApplicationEventPublisherAware) o).setApplicationEventPublisher(this.applicationContext);\n        }\n        if (o instanceof MessageSourceAware) {\n            ((MessageSourceAware) o).setMessageSource(this.applicationContext);\n        }\n        if (o instanceof ApplicationContextAware) {\n            ((ApplicationContextAware) o).setApplicationContext(this.applicationContext);\n        }\n    }\n\n    return o;\n}", "path": "src\\main\\java\\org\\springframework\\javaconfig\\util\\ConfigurationSupport.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Created by IntelliJ IDEA.\n *\n * @author Baruch S.\n * @since Apr 18, 2010\n */\n", "func_signal": "@java.lang.annotation.Documented\n@java.lang.annotation.Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Database", "code": "{\n    Purpose value();\n\n    public enum Purpose {\n        BATCH, APPLICATION\n    }\n\n}", "path": "src\\main\\java\\org\\springframework\\batch\\mongo\\config\\Database.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Update and retrieve updated StepExecution - make sure the update is\n * reflected as expected and version number has been incremented\n */\n", "func_signal": "@Transactional\n@Test\npublic void testUpdateExecution()", "code": "{\n    stepExecution.setStatus(BatchStatus.STARTED);\n    dao.saveStepExecution(stepExecution);\n    Integer versionAfterSave = stepExecution.getVersion();\n\n    stepExecution.setStatus(BatchStatus.ABANDONED);\n    stepExecution.setLastUpdated(new Date(System.currentTimeMillis()));\n    dao.updateStepExecution(stepExecution);\n    assertEquals(versionAfterSave + 1, stepExecution.getVersion().intValue());\n\n    StepExecution retrieved = dao.getStepExecution(jobExecution, stepExecution.getId());\n    assertEquals(stepExecution, retrieved);\n    assertEquals(stepExecution.getLastUpdated(), retrieved.getLastUpdated());\n    assertEquals(BatchStatus.ABANDONED, retrieved.getStatus());\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractStepExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/*\n  * Create and retrieve a job instance.\n  */\n", "func_signal": "@Transactional\n@Test\npublic void testCreateAndGetById() throws Exception", "code": "{\n\n    JobInstance fooInstance = dao.createJobInstance(fooJob, fooParams);\n    assertNotNull(fooInstance.getId());\n    assertEquals(fooJob, fooInstance.getJobName());\n    assertEquals(fooParams, fooInstance.getJobParameters());\n\n    JobInstance retrievedInstance = dao.getJobInstance(fooInstance.getId());\n    JobParameters retrievedParams = retrievedInstance.getJobParameters();\n    assertEquals(fooInstance, retrievedInstance);\n    assertEquals(fooJob, retrievedInstance.getJobName());\n    assertEquals(fooParams, retrievedParams);\n\n    assertEquals(Long.MAX_VALUE, retrievedParams.getLong(\"longKey\"));\n    assertEquals(Double.MAX_VALUE, retrievedParams.getDouble(\"doubleKey\"), 0.001);\n    assertEquals(\"stringValue\", retrievedParams.getString(\"stringKey\"));\n    assertEquals(new Date(DATE), retrievedParams.getDate(\"dateKey\"));\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobInstanceDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Successful synchronization from STARTED to STOPPING status.\n */\n", "func_signal": "@Transactional\n@Test\npublic void testSynchronizeStatusUpgrade()", "code": "{\n\n    JobExecution exec1 = new JobExecution(jobInstance);\n    exec1.setStatus(BatchStatus.STOPPING);\n    dao.saveJobExecution(exec1);\n\n    JobExecution exec2 = new JobExecution(jobInstance);\n    Assert.state(exec1.getId() != null);\n    exec2.setId(exec1.getId());\n\n    exec2.setStatus(BatchStatus.STARTED);\n    exec2.setVersion(7);\n    Assert.state(!exec1.getVersion().equals(exec2.getVersion()));\n    Assert.state(exec1.getStatus() != exec2.getStatus());\n\n    dao.synchronizeStatus(exec2);\n\n    assertEquals(exec1.getVersion(), exec2.getVersion());\n    assertEquals(exec1.getStatus(), exec2.getStatus());\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Check the execution is returned\n */\n", "func_signal": "@Transactional\n@Test\npublic void testNoRunningExecutions()", "code": "{\n    Set<JobExecution> values = dao.findRunningJobExecutions(\"no-such-job\");\n    assertEquals(0, values.size());\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Reads next record from input\n */\n", "func_signal": "public String read() throws Exception", "code": "{\n    if (index < input.length) {\n        return input[index++];\n    } else {\n        return null;\n    }\n\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\example\\ExampleItemReader.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Executions should be returned in the reverse order they were saved.\n */\n", "func_signal": "@Transactional\n@Test\npublic void testFindExecutionsOrdering()", "code": "{\n\n    List<JobExecution> execs = new ArrayList<JobExecution>();\n\n    for (int i = 0; i < 10; i++) {\n        JobExecution exec = new JobExecution(jobInstance);\n        exec.setCreateTime(new Date(i));\n        execs.add(exec);\n        dao.saveJobExecution(exec);\n    }\n\n    List<JobExecution> retrieved = dao.findJobExecutions(jobInstance);\n    Collections.reverse(retrieved);\n\n    for (int i = 0; i < 10; i++) {\n        assertExecutionsAreEqual(execs.get(i), retrieved.get(i));\n    }\n\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Check the execution is returned\n */\n", "func_signal": "@Transactional\n@Test\npublic void testFindRunningExecutions()", "code": "{\n\n    JobExecution exec = new JobExecution(jobInstance);\n    exec.setCreateTime(new Date(0));\n    exec.setEndTime(new Date(1L));\n    exec.setLastUpdated(new Date(5L));\n    dao.saveJobExecution(exec);\n\n    exec = new JobExecution(jobInstance);\n    exec.setLastUpdated(new Date(5L));\n    exec.createStepExecution(\"step\");\n    dao.saveJobExecution(exec);\n\n    StepExecutionDao stepExecutionDao = getStepExecutionDao();\n    if (stepExecutionDao != null) {\n        for (StepExecution stepExecution : exec.getStepExecutions()) {\n            stepExecutionDao.saveStepExecution(stepExecution);\n        }\n    }\n\n    Set<JobExecution> values = dao.findRunningJobExecutions(exec.getJobInstance().getJobName());\n\n    assertEquals(1, values.size());\n    JobExecution value = values.iterator().next();\n    assertEquals(exec, value);\n    assertEquals(5L, value.getLastUpdated().getTime());\n\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Save and find a job execution.\n */\n", "func_signal": "@Transactional\n@Test\npublic void testFindNonExistentExecutions()", "code": "{\n    List<JobExecution> executions = dao.findJobExecutions(jobInstance);\n    assertEquals(0, executions.size());\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Check the execution is returned\n */\n", "func_signal": "@Transactional\n@Test\npublic void testGetMissingExecution()", "code": "{\n    JobExecution value = dao.getJobExecution(54321L);\n    assertNull(value);\n}", "path": "src\\test\\java\\org\\springframework\\batch\\mongo\\dao\\AbstractJobExecutionDaoTests.java", "repo_name": "jbaruch/springbatch-over-mongodb", "stars": 14, "license": "None", "language": "java", "size": 175}
{"docstring": "/**\n * Shows the alert and put it into the reference container pendingAlerts\n * with its id for further reference.\n */\n", "func_signal": "public void run()", "code": "{\n    Log.debug(TAG, \"Showing progress dialog: \" + dialogId);\n    AlertDialog ad = builder.show();\n    pendingAlerts.put(dialogId, ad);\n}", "path": "src\\com\\funambol\\android\\activities\\AndroidDisplayManager.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Prepare a status code in response to the server's sync hdr command\n * @param cmdId the command id\n * @param msgIdRef the message id ref\n * @param deviceId the target ref\n * @param serverUrl the source ref\n * @return the SyncML status\n */\n", "func_signal": "public String formatSyncHdrStatus(SyncMLStatus status)", "code": "{\n\n    StringBuffer fStatus = new StringBuffer();\n\n    fStatus.append(\"<Status>\\n\")\n           .append(\"<CmdID>\").append(status.getCmdId()).append(\"</CmdID>\\n\")\n           .append(\"<MsgRef>\").append(status.getMsgRef()).append(\"</MsgRef>\\n\")\n           .append(\"<CmdRef>\").append(status.getCmdRef()).append(\"</CmdRef>\\n\")\n           .append(\"<Cmd>\").append(status.getCmd()).append(\"</Cmd>\\n\")\n           .append(\"<TargetRef>\").append(status.getTgtRef()).append(\"</TargetRef>\\n\")\n           .append(\"<SourceRef>\").append(status.getSrcRef()).append(\"</SourceRef>\\n\")\n           .append(\"<Data>\").append(status.getStatus()).append(\"</Data>\\n\")\n           .append(\"</Status>\\n\");\n\n    return fStatus.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Use the screen's related activity to put the give screen in foreground.\n * The implementation relies on the Intent mechanism which is peculiar to\n * Android OS: screens are shown calling the startActivity() methods and\n * passing the related intent as parameter.\n * @param context\n * @param screenId the Screen related id\n * @throws Exception if the activity related to the screen encounters\n * any problem\n */\n", "func_signal": "public void showScreen(Context context, int screenId, Bundle extras) throws Exception", "code": "{\n    Intent intent = null;\n    switch (screenId) {\n        case Controller.CONFIGURATION_SCREEN_ID: {\n            intent = new Intent(context, AndroidSettingsScreen.class);\n            break;\n        }\n        case Controller.LOGIN_SCREEN_ID: {\n            intent = new Intent(context, AndroidLoginScreen.class);\n            break;\n        }\n        case Controller.SIGNUP_SCREEN_ID: {\n            intent = new Intent(context, AndroidSignupScreen.class);\n            break;\n        }\n        case Controller.ABOUT_SCREEN_ID: {\n            intent = new Intent(context, AndroidAboutScreen.class);\n            break;\n        }\n        case Controller.ADVANCED_SETTINGS_SCREEN_ID: {\n            intent = new Intent(context, AndroidSettingsScreen.class);\n            break;\n        }\n        case Controller.HOME_SCREEN_ID: {\n            intent = new Intent(context, AndroidHomeScreen.class);\n            break;\n        }\n        default:\n            Log.error(TAG, \"Cannot show unknown screen: \" + screenId);\n    }\n    if (intent != null) {\n        if(extras != null) {\n            intent.putExtras(extras);\n        }\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    }\n}", "path": "src\\com\\funambol\\android\\activities\\AndroidDisplayManager.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Contructs the alerts for the given source.\n * @param src SyncSource\n * @param syncMode\n * @return the SyncML Alert commands\n */\n", "func_signal": "public String formatAlerts(String cmdId, int syncMode, long nextAnchor,\n                           long lastAnchor, int sourceSyncMode,\n                           String sourceName,\n                           String sourceUri,\n                           SyncFilter filter,\n                           int maxDataSize)", "code": "{\n\n    StringBuffer sb = new StringBuffer();\n\n    // XXX CHECK IT OUT XXX\n    // the Last overwrite the Next?????????????????\n    String timestamp = \"<Next>\" + nextAnchor + \"</Next>\\n\";\n\n    if (lastAnchor != 0l) {\n        timestamp = \"<Last>\" + lastAnchor + \"</Last>\\n\" + timestamp;\n    }\n\n    sb.append(\"<Alert>\\n\");\n    sb.append(\"<CmdID>\" + cmdId + \"</CmdID>\\n\");\n    sb.append(\"<Data>\");\n\n    // First, use the syncMode passed as argument,\n    // if not valid, use the default for the source\n    // as last chance, check the anchor.\n    if (syncMode != 0) {\n        sb.append(syncMode);\n    } else if (sourceSyncMode != 0) {\n        sb.append(SyncML.ALERT_CODE_SLOW);\n    } else if (lastAnchor != 0) {\n        sb.append(SyncML.ALERT_CODE_FAST);\n    } else {\n        sb.append(sourceSyncMode);\n    }\n\n    sb.append(\"</Data>\\n\");\n    sb.append(\"<Item>\\n\");\n    sb.append(\"<Target><LocURI>\");\n    sb.append(sourceUri);\n    sb.append(\"</LocURI>\\n\");\n    // Apply source filter with a default limit to maxMsgSize.\n    // TODO: change it to maxObjSize when the Large Object will be\n    // implemented.\n    if (filter != null) {\n        sb.append(filter.toSyncML(maxDataSize));\n    }\n    sb.append(\"</Target>\\n\");\n    sb.append(\"<Source><LocURI>\");\n    sb.append(sourceName);\n    sb.append(\"</LocURI></Source>\\n\");\n    sb.append(\"<Meta>\\n\");\n    sb.append(\"<Anchor xmlns=\\\"syncml:metinf\\\">\\n\");\n    sb.append(timestamp);\n    sb.append(\"</Anchor>\\n\");\n    sb.append(\"</Meta>\\n\");\n    sb.append(\"</Item>\\n\");\n    sb.append(\"</Alert>\");\n    sb.append(\"\\n\");\n\n    return sb.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * This method formats an Item tag for delete commands\n * @param key is the item key\n * @return the SyncML item\n */\n", "func_signal": "public String formatItemDelete(String key)", "code": "{\n\n    StringBuffer ret = new StringBuffer();\n    \n    ret.append(\"<Item>\\n\")\n       .append(\"<Source><LocURI>\")\n       .append(key)\n       .append(\"</LocURI></Source>\\n\")\n       .append(\"</Item>\\n\");\n\n    return ret.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Prepare a SyncML Message header.\n *\n * @param sessionid the session id to use.\n * @param msgid the message id to use.\n * @param src the source uri\n * @param username the username to be used as loc name in the source tag\n * @param tgt the target uri\n * @param tags other SyncML tags to insert in the header.\n *             (e.g. &lt;Cred&gt; or &lt;Meta&gt;).\n */\n", "func_signal": "public String formatSyncHeader(String sessionid,\n                               String msgid,\n                               String src,\n                               String username,\n                               String tgt,\n                               String tags)", "code": "{\n\n    StringBuffer ret = new StringBuffer();\n\n    ret.append(\"<SyncHdr>\\n\").append(\"<VerDTD>1.2</VerDTD>\\n\")\n       .append(\"<VerProto>SyncML/1.2</VerProto>\\n\").append(\"<SessionID>\")\n       .append(sessionid).append(\"</SessionID>\\n\").append(\"<MsgID>\")\n       .append(msgid).append(\"</MsgID>\\n\")\n       .append(\"<Target>\")\n       .append(\"<LocURI><![CDATA[\").append(tgt).append(\"]]></LocURI>\")\n       .append(\"</Target>\\n\")\n       .append(\"<Source>\")\n       .append(\"<LocURI>\").append(src).append(\"</LocURI>\")\n       .append(\"<LocName>\").append(username).append(\"</LocName>\")\n       .append(\"</Source>\\n\");\n\n    if (tags != null) {\n        ret.append(tags);\n    }\n    ret.append(\"</SyncHdr>\\n\");\n    return ret.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Format the sync tag preamble. This preamble is essentially the\n * information about source and target sync source\n * @param nextCmdId is the next command id\n * @param sourceName is the local source uri\n * @param sourceUri  is the remote source uri\n * @return the SyncML preamble\n */\n", "func_signal": "public String formatSyncTagPreamble(String nextCmdId,\n                                    String sourceName,\n                                    String sourceUri)", "code": "{\n\n    StringBuffer syncTag = new StringBuffer();\n\n    syncTag.append(\"<CmdID>\").append(nextCmdId)\n           .append(\"</CmdID>\\n\")\n           .append(\"<Target><LocURI>\")\n           .append(sourceUri)\n           .append(\"</LocURI></Target>\\n\")\n           .append(\"<Source><LocURI>\")\n           .append(sourceName)\n           .append(\"</LocURI></Source>\\n\");\n\n    return syncTag.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Constructor\n * @param activity the Activity object that owns the toast\n * @param message the String formatted message to be shown\n * @param time the total duration of the toast in milliseconds\n */\n", "func_signal": "public NotifyRunnable(Activity activity, String message, int time)", "code": "{\n    this.message = message;\n    this.time = time;\n    this.activity = activity;\n}", "path": "src\\com\\funambol\\android\\activities\\AndroidDisplayManager.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Format an item type. This is the type used in modification commands.\n * @param type the item's type\n * @return the SyncML representation of the item's type\n */\n", "func_signal": "public String formatItemType(String type)", "code": "{\n    StringBuffer ret = new StringBuffer();\n    ret.append(\"<Type xmlns=\\\"syncml:metinf\\\">\")\n        .append(type)\n        .append(\"</Type>\");\n    return ret.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Create a native dialog referencing it from the ones contained into the\n * native dialog reference container \"holdingDialogs\". Call this method \n * when the onCreateDialog is invocked on the activity that must manage\n * this native dialog.\n * @param id the id of the alert dialog to be created/retrieved\n * @return Dialog the AlertDialog instance corresponding to the given id \n */\n", "func_signal": "public Dialog createDialog(int id)", "code": "{\n    Log.debug(TAG, \"Creating  dialog \" + id);\n    Object dialog = holdingDialogs.get(id);\n    if (dialog instanceof AlertDialog.Builder) {\n        AlertDialog.Builder result = (AlertDialog.Builder) dialog;\n        return result.create();\n    } else if (dialog instanceof Dialog) {\n        Dialog result = (Dialog) dialog;\n        return result;\n    } else {\n        Log.debug(TAG, \"Unknown dialog id: \" + id);\n        return null;\n    }\n}", "path": "src\\com\\funambol\\android\\activities\\AndroidDisplayManager.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Format an item luid.\n * @return the SyncML luid of an item\n */\n", "func_signal": "public String formatItemLuid(String luid)", "code": "{\n    StringBuffer ret = new StringBuffer();\n    ret.append(\"<Source><LocURI>\" + luid + \"</LocURI></Source>\\n\");\n    return ret.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Format a \"more data\" element\n * @return the SyncML \"more data\" element\n */\n", "func_signal": "public String formatMoreData()", "code": "{\n    StringBuffer ret = new StringBuffer();\n    ret.append(\"<\").append(SyncML.TAG_MORE_DATA).append(\"/>\\n\");\n    return ret.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Hide a screen calling the Activity finish method\n * @param screen the Screen to be hidden\n * @throws Exception if the activity related to the encounters\n * any problem\n */\n", "func_signal": "public void hideScreen(Screen screen) throws Exception", "code": "{\n    Activity activity = (Activity) screen.getUiScreen();\n    activity.finish();\n}", "path": "src\\com\\funambol\\android\\activities\\AndroidDisplayManager.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Format credentials into a &lt;Cred&gt; tag\n * @param token the authentication token\n * @param md5 true if the credentials are md5\n * @return the XML credential tag\n */\n", "func_signal": "public String formatCredentials(String token, boolean md5)", "code": "{\n    // Add <Cred> and <Meta> to the syncHdr\n    StringBuffer cred = new StringBuffer(\"<Cred>\\n\");\n    cred.append(\"<Meta>\");\n    if (md5) {\n        cred.append(\"<Type xmlns=\\\"syncml:metinf\\\">\").append(SyncML.AUTH_TYPE_MD5).append(\"</Type>\\n\");\n    } else {\n        cred.append(\"<Type xmlns=\\\"syncml:metinf\\\">\").append(SyncML.AUTH_TYPE_BASIC).append(\"</Type>\\n\");\n        cred.append(\"<Format xmlns=\\\"syncml:metinf\\\">b64</Format>\\n\");\n    }\n    cred.append(\"</Meta>\\n\")\n        .append(\"<Data>\").append(token).append(\"</Data>\")\n        .append(\"</Cred>\\n\");\n    return cred.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Create a custom alert dialog based on the given DialogOptions. This kind \n * of dialog has fixed dialog id that depends on the one set by the caller\n * (Usually an instance of DialogController class). The created dialog is\n * built with a custom title and content and must be managed outside the\n * standard activity dialog management onCreatedialog, but using the\n * acitvity Bundle passed into the native activity methods onCreate() and\n * onSaveInstanceState(). The Funambol Android Client implementation use a\n * DialogController instance and the activity related to the give screen to\n * realize this kind of management\n * @param screen the native alert dialog owner Screen\n * @param message the decription of this dialog options\n * @param options the options array to be displayed to the user\n * @param defaultValue the default selection option int formatted\n * @param dialogId the fixed dialog id set by the caller\n */\n", "func_signal": "public void promptSelection(Screen screen, String message, DialogOption[] options, int defaultValue, int dialogId)", "code": "{\n    Activity a = (Activity) screen.getUiScreen();\n    AlertDialog.Builder builder = new AlertDialog.Builder(a);\n    LinearLayout titleLayout = buildAlertTitle(a, message, 20);\n\n    builder.setCustomTitle(titleLayout);\n\n    LinearLayout builderView = buildAlertContent(options, a, dialogId);\n\n    builder.setView(builderView);\n\n    builder.setCancelable(true);\n\n    builder.setOnCancelListener(new SelectionCancelListener(dialogId));\n\n    a.runOnUiThread(new PromptSelection(builder, dialogId));\n\n}", "path": "src\\com\\funambol\\android\\activities\\AndroidDisplayManager.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Constructs the <Put> section of a SyncML initialization message used to\n * carry the device capabilities with the <DevInf> element\n *\n * @param devInf\n *            A reference to the current device configuration (<code>DeviceConfig</code>)\n * @return a String to be added to the initialization SyncML message\n */\n", "func_signal": "public String formatPutDeviceInfo(String cmdId, DeviceConfig devInf, SyncSource source)", "code": "{\n    StringBuffer sb = new StringBuffer();\n\n    //TODO: retrieve most values from the passed DeviceConfig object\n    sb.append(\"<Put>\\n\")\n      .append(\"<CmdID>\").append(cmdId).append(\"</CmdID>\\n\")\n      .append(\"<Meta>\\n\")\n      .append(\"<Type xmlns='syncml:metinf'>application/vnd.syncml-devinf+xml</Type>\\n\")\n      .append(\"</Meta>\\n\").append(\"<Item>\\n\")\n      .append(\"<Source><LocURI>./devinf12</LocURI></Source>\\n\")\n      .append(\"<Data>\\n\").append(createDevInf(devInf, source)) //closing all tags\n      .append(\"</Data>\\n\").append(\"</Item>\\n\").append(\"</Put>\\n\");\n\n    return sb.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "// <!ELEMENT PropParam (ParamName, DataType?, ValEnum*, DisplayName?)>\n", "func_signal": "private void formatPropParam(StringBuffer sb, PropParam param)", "code": "{\n   sb.append(startTag(SyncML.TAG_PROPPARAM));\n   sb.append(tag(SyncML.TAG_PARAMNAME, param.getParamName()));\n   appendIfNotEmpty(sb, SyncML.TAG_DATATYPE, param.getDataType());\n   for (int i = 0; i < param.getValEnums().size(); i++) {\n       String v = (String)param.getValEnums().elementAt(i);\n       sb.append(tag(SyncML.TAG_VALENUM, v));\n   } \n   appendIfNotEmpty(sb, SyncML.TAG_DISPLAYNAME, param.getDisplayName());\n   sb.append(endTag(SyncML.TAG_PROPPARAM));\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Format a request to the server for its device capabilities\n * @param cmdId is the command id\n * @return the SyncML representation of the device capabilities request\n */\n", "func_signal": "public String formatGetDeviceInfo(String cmdId)", "code": "{\n    StringBuffer req = new StringBuffer();\n    req.append(\"<Get>\\n\")\n       .append(\"<CmdID>\").append(cmdId).append(\"</CmdID>\\n\")\n       .append(\"<Meta><Type xmlns='syncml:metinf'>application/vnd.syncml-devinf+xml</Type></Meta>\\n\")\n       .append(\"<Item>\")\n       .append(\"<Target><LocURI>\").append(SyncML.DEVINF12).append(\"</LocURI></Target>\")\n       .append(\"</Item>\\n\")\n       .append(\"</Get>\\n\");\n    return req.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Create a native alert dialog with the 2 options \"Yes\" and \"No\".\n * This kind of alert are managed by the activity owner when the call to\n * onCreateDialog is done.\n * @param screen the native alert dialog owner Screen\n * @param question the question to be displayed\n * @param yesAction the runnable that defines the yes option\n * @param noAction the runnable that defines the no option\n * @param timeToWait to be defined\n */\n", "func_signal": "public void askYesNoQuestion(Screen screen, String question,\n        Runnable yesAction,\n        Runnable noAction, long timeToWait)", "code": "{\n\n    int dialogId = getNextDialogId();\n    Activity activity = (Activity) screen.getUiScreen();\n\n    AlertDialog.Builder alert = new AlertDialog.Builder(activity);\n    alert.setMessage(question);\n    alert.setCancelable(false);\n    OnButtonListener yesListener = new OnButtonListener(yesAction);\n    OnButtonListener noListener = new OnButtonListener(noAction);\n    alert.setPositiveButton(android.R.string.ok, yesListener);\n    alert.setNegativeButton(android.R.string.cancel, noListener);\n\n    holdingDialogs.put(dialogId, alert);\n\n    activity.showDialog(dialogId);\n}", "path": "src\\com\\funambol\\android\\activities\\AndroidDisplayManager.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Format an item size.\n * @param size is the item's size\n * @return the SyncML representation of the item's size\n */\n", "func_signal": "public String formatItemSize(long size)", "code": "{\n    StringBuffer ret = new StringBuffer();\n    ret.append(\"<Size>\").append(size).append(\"</Size>\");\n    return ret.toString();\n}", "path": "externals\\jme-sdk\\syncml\\src\\com\\funambol\\syncml\\spds\\SyncMLFormatter.java", "repo_name": "accesstest3/AndroidFunambol", "stars": 8, "license": "agpl-3.0", "language": "java", "size": 7567}
{"docstring": "/**\n * Constructor for required fields\n */\n", "func_signal": "public BaseMenuGroup (\n\tjava.lang.Integer id,\n\tjava.lang.String name)", "code": "{\n\n\tthis.setId(id);\n\tthis.setName(name);\n\tinitialize();\n}", "path": "src\\com\\floreantpos\\model\\base\\BaseMenuGroup.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Constructor for primary key\n */\n", "func_signal": "public BaseRestaurantTable (java.lang.Integer id)", "code": "{\n\tthis.setId(id);\n\tinitialize();\n}", "path": "src\\com\\floreantpos\\model\\base\\BaseRestaurantTable.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Set the unique identifier of this class\n * @param id the new ID\n */\n", "func_signal": "public void setId (java.lang.Integer id)", "code": "{\n\tthis.id = id;\n\tthis.hashCode = Integer.MIN_VALUE;\n}", "path": "src\\com\\floreantpos\\model\\base\\BasePayoutRecepient.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Return a singleton of the DAO\n */\n", "func_signal": "public static CashDrawerResetHistoryDAO getInstance ()", "code": "{\n\tif (null == instance) instance = new CashDrawerResetHistoryDAO();\n\treturn instance;\n}", "path": "src\\com\\floreantpos\\model\\dao\\BaseCashDrawerResetHistoryDAO.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n    lblTitle = new javax.swing.JLabel();\n    jSeparator1 = new javax.swing.JSeparator();\n\n    lblTitle.setFont(getTitleFont());\n    lblTitle.setForeground(getTitleColor());\n    lblTitle.setText(com.floreantpos.POSConstants.TITLE);\n\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(lblTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)\n            .addContainerGap())\n        .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .add(lblTitle)\n            .add(15, 15, 15)\n            .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))\n    );\n}", "path": "src\\com\\floreantpos\\ui\\TitlePanel.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n    numberSelectionView = new com.floreantpos.ui.views.NumberSelectionView();\n    jLabel1 = new javax.swing.JLabel();\n    cbReason = new javax.swing.JComboBox();\n    jLabel2 = new javax.swing.JLabel();\n    cbRecepient = new javax.swing.JComboBox();\n    jLabel3 = new javax.swing.JLabel();\n    btnAddNote = new com.floreantpos.swing.PosButton();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    tfNote = new javax.swing.JTextArea();\n\n    numberSelectionView.setTitle(com.floreantpos.POSConstants.AMOUNT_PAID_OUT);\n\n    jLabel1.setFont(new java.awt.Font(\"Tahoma\", 1, 12));\n    jLabel1.setText(com.floreantpos.POSConstants.PAY_OUT_REASON);\n\n    cbReason.setFont(new java.awt.Font(\"Tahoma\", 1, 18));\n\n    jLabel2.setFont(new java.awt.Font(\"Tahoma\", 1, 12));\n    jLabel2.setText(com.floreantpos.POSConstants.SELECT_PAY_OUT_RECEPIENT);\n\n    cbRecepient.setFont(new java.awt.Font(\"Tahoma\", 1, 18));\n\n    jLabel3.setFont(new java.awt.Font(\"Tahoma\", 1, 12));\n    jLabel3.setText(com.floreantpos.POSConstants.NOTES);\n\n    btnAddNote.setText(\"...\");\n    btnAddNote.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnAddNoteActionPerformed(evt);\n        }\n    });\n\n    tfNote.setColumns(20);\n    tfNote.setEditable(false);\n    tfNote.setLineWrap(true);\n    tfNote.setRows(5);\n    tfNote.setWrapStyleWord(true);\n    jScrollPane1.setViewportView(tfNote);\n\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(numberSelectionView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .add(7, 7, 7)\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(org.jdesktop.layout.GroupLayout.TRAILING, cbRecepient, 0, 425, Short.MAX_VALUE)\n                .add(cbReason, 0, 425, Short.MAX_VALUE)\n                .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)\n                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()\n                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n                    .add(btnAddNote, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))\n                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(numberSelectionView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 347, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(layout.createSequentialGroup()\n                    .add(jLabel1)\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n                    .add(cbReason, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                    .add(33, 33, 33)\n                    .add(jLabel2)\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n                    .add(cbRecepient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                    .add(35, 35, 35)\n                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)\n                        .add(layout.createSequentialGroup()\n                            .add(jLabel3)\n                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))\n                        .add(btnAddNote, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))\n            .addContainerGap())\n    );\n\n    layout.linkSize(new java.awt.Component[] {cbReason, cbRecepient}, org.jdesktop.layout.GroupLayout.VERTICAL);\n\n}", "path": "src\\com\\floreantpos\\ui\\views\\PayOutView.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "protected void paintComponent(Graphics g)", "code": "{\n    \tsuper.paintComponent(g);\n    \t\n    \tGraphics2D g2 = (Graphics2D) g;\n    \tint x = 0, y = 0;\n    \tfloat width = getWidth();\n    \tfloat height = getHeight();\n    \t\n    \tColor color1 = Color.WHITE;\n    \tColor color2 = getBackground();\n    \tg2.setPaint(new GradientPaint(x,y,color1, width, height,color2));\n    \tg2.fillRect(x, y, (int) width, (int) height);\n    }", "path": "src\\com\\floreantpos\\ui\\TitlePanel.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void btnAddNoteActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnAddNoteActionPerformed\n    \tNotesDialog dialog = new NotesDialog(Application.getPosWindow(), true);\n    \tdialog.setTitle(com.floreantpos.POSConstants.ENTER_PAYOUT_NOTE);\n    \tdialog.pack();\n    \tdialog.open();\n    \t\n    \tif(!dialog.isCanceled()) {\n    \t\ttfNote.setText(dialog.getNote());\n    \t}\n    }", "path": "src\\com\\floreantpos\\ui\\views\\PayOutView.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void btnSettleActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnSettleActionPerformed\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tString gratuity = tfGratuityAmount.getText();\n\t\t\t\tif (gratuity == null || gratuity.trim().equals(\"\")) {\n\t\t\t\t\tgratuityAmount = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgratuityAmount = Double.parseDouble(gratuity);\n\t\t\t\t}\n\t\t\t} catch (NumberFormatException x) {\n\t\t\t\tPOSMessageDialog.showError(\"Gratuity amount is not valid\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdouble tenderedAmount = 0;\n\t\t\ttry {\n\t\t\t\ttenderedAmount = Double.parseDouble(tfCardAmount.getText());\n\t\t\t} catch (NumberFormatException x) {\n\t\t\t\tPOSMessageDialog.showError(\"Amount is not valid\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttenderedAmount = tenderedAmount - gratuityAmount;\n\t\t\tif (tenderedAmount < 0) {\n\t\t\t\tPOSMessageDialog.showError(\"Insufficient amount\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString authorizationCode = tfAuthorizationCode.getText();\n\t\t\tif (getCardType() == CARD_TYPE_CREDIT) {\n\t\t\t\t\n\t\t\t\tsettleTickets(tenderedAmount, gratuityAmount, new CreditCardTransaction(), getWhichCard(), authorizationCode);\n\t\t\t}\n\t\t\tif (getCardType() == CARD_TYPE_DEBIT) {\n\t\t\t\tsettleTickets(tenderedAmount, gratuityAmount, new DebitCardTransaction(), getWhichCard(), authorizationCode);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tPOSMessageDialog.showError(\"An unexpected error has occured, you may need to restart the application\", e);\n\t\t}\n\t}", "path": "src\\com\\floreantpos\\ui\\views\\CardPaymentView.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Set the unique identifier of this class\n * @param id the new ID\n */\n", "func_signal": "public void setId (java.lang.Integer id)", "code": "{\n\tthis.id = id;\n\tthis.hashCode = Integer.MIN_VALUE;\n}", "path": "src\\com\\floreantpos\\model\\base\\BaseMenuGroup.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/*[CONSTRUCTOR MARKER END]*/\n", "func_signal": "@Override\n\tpublic String toString()", "code": "{\n\t\tif(getModifierGroup() != null) {\n\t\t\treturn getModifierGroup().getName();\n\t\t}\n\t\treturn \"\";\n\t}", "path": "src\\com\\floreantpos\\model\\MenuItemModifierGroup.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Return a singleton of the DAO\n */\n", "func_signal": "public static TerminalDAO getInstance ()", "code": "{\n\tif (null == instance) instance = new TerminalDAO();\n\treturn instance;\n}", "path": "src\\com\\floreantpos\\model\\dao\\BaseTerminalDAO.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Return a singleton of the DAO\n */\n", "func_signal": "public static MenuItemDAO getInstance ()", "code": "{\n\tif (null == instance) instance = new MenuItemDAO();\n\treturn instance;\n}", "path": "src\\com\\floreantpos\\model\\dao\\BaseMenuItemDAO.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\tjava.awt.GridBagConstraints gridBagConstraints;\n\n\tbuttonGroup1 = new javax.swing.ButtonGroup();\n\ttransparentPanel3 = new com.floreantpos.swing.TransparentPanel();\n\ttransparentPanel5 = new com.floreantpos.swing.TransparentPanel();\n\tbtnChangePMethod = new com.floreantpos.swing.PosButton();\n\tbtnCancel = new com.floreantpos.swing.PosButton();\n\tbtnSettle = new com.floreantpos.swing.PosButton();\n\ttransparentPanel8 = new com.floreantpos.swing.TransparentPanel();\n\ttransparentPanel9 = new com.floreantpos.swing.TransparentPanel();\n\tposButton1 = new com.floreantpos.swing.PosButton();\n\tposButton2 = new com.floreantpos.swing.PosButton();\n\tposButton3 = new com.floreantpos.swing.PosButton();\n\tposButton4 = new com.floreantpos.swing.PosButton();\n\tposButton5 = new com.floreantpos.swing.PosButton();\n\tposButton6 = new com.floreantpos.swing.PosButton();\n\tposButton9 = new com.floreantpos.swing.PosButton();\n\tposButton8 = new com.floreantpos.swing.PosButton();\n\tposButton7 = new com.floreantpos.swing.PosButton();\n\tposButton10 = new com.floreantpos.swing.PosButton();\n\tposButton11 = new com.floreantpos.swing.PosButton();\n\tposButton12 = new com.floreantpos.swing.PosButton();\n\ttransparentPanel10 = new com.floreantpos.swing.TransparentPanel();\n\tbtnMasterCard = new com.floreantpos.swing.POSToggleButton();\n\tbtnVisa = new com.floreantpos.swing.POSToggleButton();\n\tbtnEmEx = new com.floreantpos.swing.POSToggleButton();\n\tbtnDiscover = new com.floreantpos.swing.POSToggleButton();\n\ttransparentPanel7 = new com.floreantpos.swing.TransparentPanel();\n\ttransparentPanel1 = new com.floreantpos.swing.TransparentPanel();\n\tjLabel1 = new javax.swing.JLabel();\n\ttfGratuityAmount = new javax.swing.JTextField();\n\tlblCSymbol1 = new javax.swing.JLabel();\n\ttransparentPanel4 = new com.floreantpos.swing.TransparentPanel();\n\tjLabel3 = new javax.swing.JLabel();\n\ttfAuthorizationCode = new javax.swing.JTextField();\n\tjLabel4 = new javax.swing.JLabel();\n\ttransparentPanel2 = new com.floreantpos.swing.TransparentPanel();\n\tjLabel2 = new javax.swing.JLabel();\n\ttfCardAmount = new javax.swing.JTextField();\n\tlblCSymbol2 = new javax.swing.JLabel();\n\n\tsetLayout(new java.awt.BorderLayout(0, 5));\n\n\tsetBorder(javax.swing.BorderFactory.createTitledBorder(null, com.floreantpos.POSConstants.TITLE, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));\n\ttransparentPanel3.setLayout(new java.awt.BorderLayout());\n\n\tadd(transparentPanel3, java.awt.BorderLayout.WEST);\n\n\ttransparentPanel5.setLayout(new java.awt.GridLayout(1, 0, 5, 5));\n\n\ttransparentPanel5.setPreferredSize(new java.awt.Dimension(100, 60));\n\tbtnChangePMethod.setText(\"<html><body><p align='center'>CHANGE PAYMENT METHOD</p></body></html>\");\n\tbtnChangePMethod.setFocusable(false);\n\tbtnChangePMethod.addActionListener(new java.awt.event.ActionListener() {\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\tbtnChangePMethodActionPerformed(evt);\n\t\t}\n\t});\n\n\ttransparentPanel5.add(btnChangePMethod);\n\n\tbtnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/cancel_32.png\")));\n\tbtnCancel.setText(com.floreantpos.POSConstants.CANCEL);\n\tbtnCancel.setFocusable(false);\n\tbtnCancel.addActionListener(new java.awt.event.ActionListener() {\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\tbtnCancelActionPerformed(evt);\n\t\t}\n\t});\n\n\ttransparentPanel5.add(btnCancel);\n\n\tbtnSettle.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/settle_ticket_32.png\")));\n\tbtnSettle.setText(com.floreantpos.POSConstants.SETTLE);\n\tbtnSettle.setFocusable(false);\n\tbtnSettle.addActionListener(new java.awt.event.ActionListener() {\n\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\tbtnSettleActionPerformed(evt);\n\t\t}\n\t});\n\n\ttransparentPanel5.add(btnSettle);\n\n\tadd(transparentPanel5, java.awt.BorderLayout.SOUTH);\n\n\ttransparentPanel8.setLayout(new java.awt.GridBagLayout());\n\n\ttransparentPanel9.setLayout(new java.awt.GridLayout(0, 3, 5, 5));\n\n\tposButton1.setAction(calAction);\n\tposButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/7_32.png\")));\n\tposButton1.setActionCommand(\"7\");\n\tposButton1.setFocusable(false);\n\ttransparentPanel9.add(posButton1);\n\n\tposButton2.setAction(calAction);\n\tposButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/8_32.png\")));\n\tposButton2.setActionCommand(\"8\");\n\tposButton2.setFocusable(false);\n\ttransparentPanel9.add(posButton2);\n\n\tposButton3.setAction(calAction);\n\tposButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/9_32.png\")));\n\tposButton3.setActionCommand(\"9\");\n\tposButton3.setFocusable(false);\n\ttransparentPanel9.add(posButton3);\n\n\tposButton4.setAction(calAction);\n\tposButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/4_32.png\")));\n\tposButton4.setActionCommand(\"4\");\n\tposButton4.setFocusable(false);\n\ttransparentPanel9.add(posButton4);\n\n\tposButton5.setAction(calAction);\n\tposButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/5_32.png\")));\n\tposButton5.setActionCommand(\"5\");\n\tposButton5.setFocusable(false);\n\ttransparentPanel9.add(posButton5);\n\n\tposButton6.setAction(calAction);\n\tposButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/6_32.png\")));\n\tposButton6.setActionCommand(\"6\");\n\tposButton6.setFocusable(false);\n\ttransparentPanel9.add(posButton6);\n\n\tposButton9.setAction(calAction);\n\tposButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/1_32.png\")));\n\tposButton9.setActionCommand(\"1\");\n\tposButton9.setFocusable(false);\n\ttransparentPanel9.add(posButton9);\n\n\tposButton8.setAction(calAction);\n\tposButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/2_32.png\")));\n\tposButton8.setActionCommand(\"2\");\n\tposButton8.setFocusable(false);\n\ttransparentPanel9.add(posButton8);\n\n\tposButton7.setAction(calAction);\n\tposButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/3_32.png\")));\n\tposButton7.setActionCommand(\"3\");\n\tposButton7.setFocusable(false);\n\ttransparentPanel9.add(posButton7);\n\n\tposButton10.setAction(calAction);\n\tposButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/dot_32.png\")));\n\tposButton10.setActionCommand(\".\");\n\tposButton10.setFocusable(false);\n\ttransparentPanel9.add(posButton10);\n\n\tposButton11.setAction(calAction);\n\tposButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/0_32.png\")));\n\tposButton11.setActionCommand(\"0\");\n\tposButton11.setFocusable(false);\n\ttransparentPanel9.add(posButton11);\n\n\tposButton12.setAction(calAction);\n\tposButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/clear_32.png\")));\n\tposButton12.setText(com.floreantpos.POSConstants.CLEAR);\n\tposButton12.setFocusable(false);\n\ttransparentPanel9.add(posButton12);\n\n\tgridBagConstraints = new java.awt.GridBagConstraints();\n\tgridBagConstraints.gridx = 1;\n\tgridBagConstraints.gridy = 1;\n\tgridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n\tgridBagConstraints.weightx = 1.0;\n\tgridBagConstraints.weighty = 1.0;\n\tgridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);\n\ttransparentPanel8.add(transparentPanel9, gridBagConstraints);\n\n\ttransparentPanel10.setLayout(new java.awt.GridLayout(0, 1, 5, 5));\n\n\tbuttonGroup1.add(btnMasterCard);\n\tbtnMasterCard.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/master_card.PNG\")));\n\tbtnMasterCard.setSelected(true);\n\tbtnMasterCard.setActionCommand(\"MASTER_CARD\");\n\tbtnMasterCard.setPreferredSize(new java.awt.Dimension(90, 0));\n\ttransparentPanel10.add(btnMasterCard);\n\n\tbuttonGroup1.add(btnVisa);\n\tbtnVisa.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/visa_card.PNG\")));\n\tbtnVisa.setActionCommand(\"VISA_CARD\");\n\tbtnVisa.setPreferredSize(new java.awt.Dimension(90, 0));\n\ttransparentPanel10.add(btnVisa);\n\n\tbuttonGroup1.add(btnEmEx);\n\tbtnEmEx.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/am_ex_card.PNG\")));\n\tbtnEmEx.setActionCommand(\"EMEX_CARD\");\n\tbtnEmEx.setPreferredSize(new java.awt.Dimension(90, 0));\n\ttransparentPanel10.add(btnEmEx);\n\n\tbuttonGroup1.add(btnDiscover);\n\tbtnDiscover.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/discover_card.PNG\")));\n\tbtnDiscover.setActionCommand(\"DISCOVER_CARD\");\n\tbtnDiscover.setPreferredSize(new java.awt.Dimension(90, 0));\n\ttransparentPanel10.add(btnDiscover);\n\n\tgridBagConstraints = new java.awt.GridBagConstraints();\n\tgridBagConstraints.gridx = 0;\n\tgridBagConstraints.gridy = 1;\n\tgridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n\tgridBagConstraints.weighty = 1.0;\n\tgridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);\n\ttransparentPanel8.add(transparentPanel10, gridBagConstraints);\n\n\ttransparentPanel7.setLayout(new java.awt.GridLayout(0, 1, 5, 5));\n\n\ttransparentPanel1.setLayout(new java.awt.BorderLayout(5, 5));\n\n\ttransparentPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(\"\"));\n\tjLabel1.setText(\"Gratuity Amount\");\n\ttransparentPanel1.add(jLabel1, java.awt.BorderLayout.NORTH);\n\n\ttfGratuityAmount.setFont(new java.awt.Font(\"Tahoma\", 1, 12));\n\ttfGratuityAmount.setText(\"0\");\n\ttransparentPanel1.add(tfGratuityAmount, java.awt.BorderLayout.CENTER);\n\n\tlblCSymbol1.setText(Application.getCurrencySymbol());\n\ttransparentPanel1.add(lblCSymbol1, java.awt.BorderLayout.WEST);\n\n\ttransparentPanel7.add(transparentPanel1);\n\n\ttransparentPanel4.setLayout(new java.awt.BorderLayout(5, 5));\n\n\ttransparentPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(\"\"));\n\tjLabel3.setText(\"Authorization Code\");\n\ttransparentPanel4.add(jLabel3, java.awt.BorderLayout.NORTH);\n\n\ttfAuthorizationCode.setFont(new java.awt.Font(\"Tahoma\", 1, 12));\n\ttfAuthorizationCode.setText(\"0\");\n\ttransparentPanel4.add(tfAuthorizationCode, java.awt.BorderLayout.CENTER);\n\n\tjLabel4.setText(\"  \");\n\ttransparentPanel4.add(jLabel4, java.awt.BorderLayout.WEST);\n\n\ttransparentPanel7.add(transparentPanel4);\n\n\ttransparentPanel2.setLayout(new java.awt.BorderLayout(5, 5));\n\n\ttransparentPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(\"\"));\n\tjLabel2.setText(\"Amount Charged to Card\");\n\ttransparentPanel2.add(jLabel2, java.awt.BorderLayout.NORTH);\n\n\ttfCardAmount.setFont(new java.awt.Font(\"Tahoma\", 1, 12));\n\ttfCardAmount.setText(\"0\");\n\ttransparentPanel2.add(tfCardAmount, java.awt.BorderLayout.CENTER);\n\n\tlblCSymbol2.setText(Application.getCurrencySymbol());\n\ttransparentPanel2.add(lblCSymbol2, java.awt.BorderLayout.WEST);\n\n\ttransparentPanel7.add(transparentPanel2);\n\n\tgridBagConstraints = new java.awt.GridBagConstraints();\n\tgridBagConstraints.gridx = 1;\n\tgridBagConstraints.gridy = 0;\n\tgridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n\tgridBagConstraints.weightx = 1.0;\n\tgridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);\n\ttransparentPanel8.add(transparentPanel7, gridBagConstraints);\n\n\tadd(transparentPanel8, java.awt.BorderLayout.CENTER);\n\n}", "path": "src\\com\\floreantpos\\ui\\views\\CardPaymentView.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Set the unique identifier of this class\n * @param id the new ID\n */\n", "func_signal": "public void setId (java.lang.Integer id)", "code": "{\n\tthis.id = id;\n\tthis.hashCode = Integer.MIN_VALUE;\n}", "path": "src\\com\\floreantpos\\model\\base\\BaseRestaurantTable.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Constructor for primary key\n */\n", "func_signal": "public BaseMenuGroup (java.lang.Integer id)", "code": "{\n\tthis.setId(id);\n\tinitialize();\n}", "path": "src\\com\\floreantpos\\model\\base\\BaseMenuGroup.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "private Font getTitleFont()", "code": "{\n    Font f = lblTitle.getFont();\n    f = f.deriveFont(Font.BOLD, 14);\n    return f;\n}", "path": "src\\com\\floreantpos\\ui\\TitlePanel.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/** Creates new form CardView */\n", "func_signal": "public CardPaymentView()", "code": "{\n\tinitComponents();\n\n\tDoubleDocument gratuityDocument = new DoubleDocument();\n\tgratuityDocument.addDocumentListener(new DocumentListener() {\n\t\tvoid updatePayAmount() {\n\t\t\tdouble cardAmount = 0;\n\t\t\tdouble gratuity = 0;\n\n\t\t\ttry {\n\t\t\t\tgratuity = Double.parseDouble(tfGratuityAmount.getText());\n\t\t\t} catch (Exception x) {\n\t\t\t}\n\t\t\tcardAmount = getDueAmount();\n\t\t\ttfCardAmount.setText(Application.formatNumber(cardAmount + gratuity));\n\t\t}\n\n\t\tpublic void insertUpdate(DocumentEvent e) {\n\t\t\tupdatePayAmount();\n\t\t}\n\n\t\tpublic void removeUpdate(DocumentEvent e) {\n\t\t\tupdatePayAmount();\n\t\t}\n\n\t\tpublic void changedUpdate(DocumentEvent e) {\n\t\t\tupdatePayAmount();\n\t\t}\n\n\t});\n\ttfGratuityAmount.setDocument(gratuityDocument);\n\ttfCardAmount.setDocument(new DoubleDocument());\n}", "path": "src\\com\\floreantpos\\ui\\views\\CardPaymentView.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "//GEN-LAST:event_btnChangePMethodActionPerformed\n", "func_signal": "private JTextField getFocusedTextField()", "code": "{\n\t\tif (tfGratuityAmount.hasFocus()) {\n\t\t\treturn tfGratuityAmount;\n\t\t}\n\t\tif (tfAuthorizationCode.hasFocus()) {\n\t\t\treturn tfAuthorizationCode;\n\t\t}\n\t\tif (tfCardAmount.hasFocus()) {\n\t\t\treturn tfCardAmount;\n\t\t}\n\t\ttfGratuityAmount.requestFocus();\n\t\treturn tfGratuityAmount;\n\t}", "path": "src\\com\\floreantpos\\ui\\views\\CardPaymentView.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Constructor for primary key\n */\n", "func_signal": "public BasePayoutRecepient (java.lang.Integer id)", "code": "{\n\tthis.setId(id);\n\tinitialize();\n}", "path": "src\\com\\floreantpos\\model\\base\\BasePayoutRecepient.java", "repo_name": "peterhu8869/FloreantPos", "stars": 13, "license": "other", "language": "java", "size": 47848}
{"docstring": "/**\n * Sets the terminal angular velocity\n * \n * @param terminalAngularVelocity terminal angular velocity\n */\n", "func_signal": "public void setTerminalAngularVelocity(float terminalAngularVelocity)", "code": "{\n\tthis.terminalAngularVelocity = terminalAngularVelocity;\n\tuseTerminalAngularVelocity = true;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Sets the terminal speed in the X direction\n * \n * @param terminalSpeedX terminal speed in X\n */\n", "func_signal": "public void setTerminalSpeedX(float terminalSpeedX)", "code": "{\n\tthis.terminalSpeedX = terminalSpeedX;\n\tuseTerminalSpeedX =true;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Creates a Layer inside a Scene\n * \n * @param parentScene parent Scene for the Layer\n * @param maximumDrawableObjects the size of array for Drawables in this Layer\n */\n", "func_signal": "public Layer(Scene parentScene, int maximumDrawableObjects)", "code": "{\n\tthis.parentScene = parentScene;\n\tthis.maximumDrawableObjects = maximumDrawableObjects;\n\tgameObjects = new FixedSizeArray<Drawable>(maximumDrawableObjects);\n\tgameObjectsSorted = new FixedSizeArray<Drawable>(maximumDrawableObjects);\n}", "path": "src\\com\\stickycoding\\rokon\\Layer.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Sets the terminal speed in both basic directions\n * \n * @param terminalSpeedX terminal speed in X\n * @param terminalSpeedY terminal speed in Y\n */\n", "func_signal": "public void setTerminalSpeed(float terminalSpeedX, float terminalSpeedY)", "code": "{\n\tthis.terminalSpeedX = terminalSpeedX;\n\tthis.terminalSpeedY = terminalSpeedY;\n\tuseTerminalSpeedX = true;\n\tuseTerminalSpeedY = true;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Called when the DynamicObject is removed from a Layer\n */\n", "func_signal": "public void onRemove()", "code": "{\n\tsuper.onRemove();\n\trotateToCallback = null;\n\tmoveToCallback = null;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Returns a specific vertex of this Sprite, as it is drawn. Taking into account scaling and rotations.\n * \n * @param index vertex position\n * \n * @return float array, contains two elements, 0=X 1=Y \n */\n", "func_signal": "public float[] getVertex(int index)", "code": "{\n\tif(rotation != 0) {\n\t\tfloat x = getX() + (getWidth() * polygon.vertex[index].getX());\n\t\tfloat y = getY() + (getHeight() * polygon.vertex[index].getY());\n\t\tfloat pivotX = getX() + (getWidth() * 0.5f);\n\t\tfloat pivotY = getY() + (getHeight() * 0.5f);\n\t\tfloat[] f = MathHelper.rotate(rotation, x, y, pivotX, pivotY);\n\t\treturn f;\n\t} else {\n\t\treturn new float[] { getX() + (getWidth() * polygon.vertex[index].getX()), getY() + (getHeight() * polygon.vertex[index].getY()) };\n\t}\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Removes a Modifier from a Sprite (if it exists)\n * \n * @param modifier valid Modifier object\n */\n", "func_signal": "public void removeModifier(Modifier modifier)", "code": "{\n\tfor(int i = 0; i < MAX_MODIFIERS; i++) {\n\t\tif(this.modifier[i] == modifier) {\n\t\t\tthis.modifier[i] = null;\n\t\t\tmodifierCount--;\n\t\t\treturn;\n\t\t}\n\t}\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Sets the speed of the DynamicObject on both X and Y axis\n * \n * @param x positive or negative floating point\n * @param y positive or negative floating point\n */\n", "func_signal": "public void setSpeed(float x, float y)", "code": "{\n\tspeedX = x;\n\tspeedY = y;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Accelerates along a given angle to a terminal velocity\n * \n * @param acceleration magnitude of acceleration\n * @param angle relative to north, in radians\n * @param terminalVelocity maximum velocity to reach\n */\n", "func_signal": "public void accelerate(float acceleration, float angle, float terminalVelocity)", "code": "{\n\taccelerate(acceleration, angle);\n\tthis.terminalVelocity = terminalVelocity;\n\tuseTerminalVelocity = true;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Moves the DynamicObject to a given spot, in a given time using\n * All previous motion is cancelled. It may be possible to apply your own velocity\n * and acceleration changes while moveTo is running, though it should be avoided.\n * \n * @param x final X coordinate\n * @param y final Y coordinate\n * @param time the time \n * @param type the movement type, from Movement constants\n */\n", "func_signal": "public void moveTo(float x, float y, long time, int type)", "code": "{\n\tif(isMoveTo) {\n\t\tif(parentScene.useInvoke) {\n\t\t\tattemptInvoke(\"onMoveToCancel\");\n\t\t}\n\t}\n\n\taccelerationX = 0;\n\taccelerationY = 0;\n\tacceleration = 0;\n\tspeedX = 0;\n\tspeedY = 0;\n\tvelocity = 0;\n\tvelocityXFactor = 0;\n\tvelocityYFactor = 0;\n\tvelocityAngle = 0;\n\tterminalSpeedX = 0;\n\tterminalSpeedY = 0;\n\tterminalVelocity = 0;\t\t\n\t\n\tmoveToStartX = this.getX();\n\tmoveToStartY = this.getY();\n\tmoveToFinalX = x;\n\tmoveToFinalY = y;\n\tisMoveTo = true;\n\tmoveToType = type;\n\tmoveToStartTime = Time.loopTicks;\n\tmoveToTime = time;\n\t\n\tmoveToCallback = null;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Adds a Modifier to this Sprite\n * \n * @param modifier valid Modifier object\n * \n * @return TRUE if there was room to add the Modifier, FALSE if it failed\n */\n", "func_signal": "public boolean addModifier(Modifier modifier)", "code": "{\n\tfor(int i = 0; i < MAX_MODIFIERS; i++) {\n\t\tif(this.modifier[i] == null) {\n\t\t\tthis.modifier[i] = modifier;\n\t\t\tmodifier.onCreate(this);\n\t\t\tmodifierCount++;\n\t\t\treturn true;\n\t\t}\n\t}\n\tDebug.warning(\"Tried addModifier, Sprite is full [\" + MAX_MODIFIERS + \"]\");\n\treturn false;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Clears all the DrawableObjects off this Layer\n */\n", "func_signal": "public void clear()", "code": "{\n\tfor(int i = 0; i < gameObjects.getCount(); i++) {\n\t\twhile(gameObjects.get(i) != null) {\n\t\t\tgameObjects.remove(i);\n\t\t}\n\t}\n\tgameObjects.clear();\n}", "path": "src\\com\\stickycoding\\rokon\\Layer.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Clears all the Modifiers from the Sprite\n */\n", "func_signal": "public void clearModifiers()", "code": "{\n\tfor(int i = 0; i < MAX_MODIFIERS; i++) {\n\t\tmodifier[i] = null;\n\t}\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Adds a DrawableObject to this Layer\n * \n * @param drawableObject a valid DrawableObject\n */\n", "func_signal": "public void add(GameObject drawableObject)", "code": "{\n\tif(drawableObject == null) {\n\t\tDebug.warning(\"Layer.add\", \"Tried adding an invalid DrawableObject\");\n\t\treturn;\n\t}\n\tif(gameObjects.getCount() == gameObjects.getCapacity()) {\n\t\tDebug.warning(\"Layer.add\", \"Tried adding to a Layer which is full, maximum=\" + maximumDrawableObjects);\n\t\treturn;\n\t}\n\tgameObjects.add(drawableObject);\n\tdrawableObject.onAdd(this);\n}", "path": "src\\com\\stickycoding\\rokon\\Layer.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Accelerates along the Y direction to a maximum speed\n *\n * @param accelerationY positive or negative floating point\n * @param terminalSpeedY the maximum speed to achieve in Y direction\n */\n", "func_signal": "public void accelerateY(float accelerationY, float terminalSpeedY)", "code": "{\n\tthis.accelerationY = accelerationY;\n\tthis.terminalSpeedY = terminalSpeedY;\n\tuseTerminalSpeedY = true;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Accelerates along a given angle\n * \n * @param acceleration magnitude of acceleration\n * @param angle relative to north, in degrees\n */\n", "func_signal": "public void accelerate(float acceleration, float angle)", "code": "{\n\tthis.acceleration = acceleration;\n\tthis.velocityAngle = angle;\n\tthis.velocityXFactor = (float)Math.sin(angle * MathHelper.DEG_TO_RAD);\n\tthis.velocityYFactor = (float)Math.cos(angle * MathHelper.DEG_TO_RAD);\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Rotates to a given angle over a period of time\n * \n * @param angle the final angle, in radians\n * @param direction automatic, clockwise or anticlockwise - defined by ROTATE_TO_ constants\n * @param time in milliseconds\n * @param type movement type, through Movement constants\n * @param callback Callback object for invoking\n */\n", "func_signal": "public void rotateTo(float angle, int direction, int time, int type, Callback callback)", "code": "{\n\trotateTo(angle, direction, time, type);\n\trotateToCallback = callback;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Sets the terminal velocity\n * \n * @param terminalVelocity terminal velocity\n */\n", "func_signal": "public void setTerminalVelocity(float terminalVelocity)", "code": "{\n\tthis.terminalVelocity = terminalVelocity;\n\tuseTerminalVelocity = true;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Removes the limit on speed in both X and Y directions\n */\n", "func_signal": "public void stopUsingTerminalSpeed()", "code": "{\n\tuseTerminalSpeedX = false;\n\tuseTerminalSpeedY = false;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/**\n * Sets the terminal speed in the Y direction\n * \n * @param terminalSpeedY terminal speed in Y\n */\n", "func_signal": "public void setTerminalSpeedY(float terminalSpeedY)", "code": "{\n\tthis.terminalSpeedY = terminalSpeedY;\n\tuseTerminalSpeedY = true;\n}", "path": "src\\com\\stickycoding\\rokon\\Sprite.java", "repo_name": "fsdwen/rokon", "stars": 13, "license": "bsd-3-clause", "language": "java", "size": 6648}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String getType(Uri uri)", "code": "{\n    final int match = sUriMatcher.match(uri);\n    switch (match) {\n        case BLOCKS:\n            return Blocks.CONTENT_TYPE;\n        case BLOCKS_BETWEEN:\n            return Blocks.CONTENT_TYPE;\n        case BLOCKS_ID:\n            return Blocks.CONTENT_ITEM_TYPE;\n        case BLOCKS_ID_SESSIONS:\n            return Sessions.CONTENT_TYPE;\n        case TRACKS:\n            return Tracks.CONTENT_TYPE;\n        case TRACKS_ID:\n            return Tracks.CONTENT_ITEM_TYPE;\n        case TRACKS_ID_SESSIONS:\n            return Sessions.CONTENT_TYPE;\n        case TRACKS_ID_VENDORS:\n            return Vendors.CONTENT_TYPE;\n        case ROOMS:\n            return Rooms.CONTENT_TYPE;\n        case ROOMS_ID:\n            return Rooms.CONTENT_ITEM_TYPE;\n        case ROOMS_ID_SESSIONS:\n            return Sessions.CONTENT_TYPE;\n        case SESSIONS:\n            return Sessions.CONTENT_TYPE;\n        case SESSIONS_STARRED:\n            return Sessions.CONTENT_TYPE;\n        case SESSIONS_SEARCH:\n            return Sessions.CONTENT_TYPE;\n        case SESSIONS_AT:\n            return Sessions.CONTENT_TYPE;\n        case SESSIONS_ID:\n            return Sessions.CONTENT_ITEM_TYPE;\n        case SESSIONS_ID_SPEAKERS:\n            return Speakers.CONTENT_TYPE;\n        case SESSIONS_ID_TRACKS:\n            return Tracks.CONTENT_TYPE;\n        case SESSIONS_ID_NOTES:\n            return Notes.CONTENT_TYPE;\n        case SPEAKERS:\n            return Speakers.CONTENT_TYPE;\n        case SPEAKERS_ID:\n            return Speakers.CONTENT_ITEM_TYPE;\n        case SPEAKERS_ID_SESSIONS:\n            return Sessions.CONTENT_TYPE;\n        case VENDORS:\n            return Vendors.CONTENT_TYPE;\n        case VENDORS_STARRED:\n            return Vendors.CONTENT_TYPE;\n        case VENDORS_SEARCH:\n            return Vendors.CONTENT_TYPE;\n        case VENDORS_ID:\n            return Vendors.CONTENT_ITEM_TYPE;\n        case NOTES:\n            return Notes.CONTENT_TYPE;\n        case NOTES_EXPORT:\n            return MIME_XML;\n        case NOTES_ID:\n            return Notes.CONTENT_ITEM_TYPE;\n        default:\n            throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\provider\\ScheduleProvider.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Build and add \"summary\" tab. */\n", "func_signal": "private void setupSummaryTab()", "code": "{\n    final TabHost host = getTabHost();\n\n    // Summary content comes from existing layout\n    host.addTab(host.newTabSpec(TAG_SUMMARY)\n            .setIndicator(buildIndicator(R.string.session_summary))\n            .setContent(R.id.tab_session_summary));\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Handle {@link SessionsQuery} {@link Cursor}. */\n", "func_signal": "private void onSessionQueryComplete(Cursor cursor)", "code": "{\n    try {\n        mSessionCursor = true;\n        if (!cursor.moveToFirst()) return;\n\n        // Format time block this session occupies\n        final long blockStart = cursor.getLong(SessionsQuery.BLOCK_START);\n        final long blockEnd = cursor.getLong(SessionsQuery.BLOCK_END);\n        final String roomName = cursor.getString(SessionsQuery.ROOM_NAME);\n        final String subtitle = UIUtils.formatSessionSubtitle(blockStart,\n                blockEnd, roomName, this);\n\n        mTitleString = cursor.getString(SessionsQuery.TITLE);\n        mTitle.setText(mTitleString);\n        mSubtitle.setText(subtitle);\n\n        mHashtag = cursor.getString(SessionsQuery.HASHTAG);\n        if (TextUtils.isEmpty(mHashtag)) mHashtag = \"\";\n\n        mRoomId = cursor.getString(SessionsQuery.ROOM_ID);\n\n        // Unregister around setting checked state to avoid triggering\n        // listener since change isn't user generated.\n        mStarred.setOnCheckedChangeListener(null);\n        mStarred.setChecked(cursor.getInt(SessionsQuery.STARRED) != 0);\n        mStarred.setOnCheckedChangeListener(this);\n\n        final String sessionAbstract = cursor.getString(SessionsQuery.ABSTRACT);\n        if (!TextUtils.isEmpty(sessionAbstract)) {\n            UIUtils.setTextMaybeHtml(mAbstract, sessionAbstract);\n            mAbstract.setVisibility(View.VISIBLE);\n            mHasSummaryContent = true;\n        } else {\n            mAbstract.setVisibility(View.GONE);\n        }\n\n        final View requirementsBlock = findViewById(R.id.session_requirements_block);\n        final String sessionRequirements = cursor.getString(SessionsQuery.REQUIREMENTS);\n        if (!TextUtils.isEmpty(sessionRequirements)) {\n            UIUtils.setTextMaybeHtml(mRequirements, sessionRequirements);\n            requirementsBlock.setVisibility(View.VISIBLE);\n            mHasSummaryContent = true;\n        } else {\n            requirementsBlock.setVisibility(View.GONE);\n        }\n\n        setupModeratorTab(cursor);\n\n        // Show empty message when all data is loaded, and nothing to show\n        if (mSpeakersCursor && !mHasSummaryContent) {\n            findViewById(android.R.id.empty).setVisibility(View.VISIBLE);\n        }\n    } finally {\n        cursor.close();\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Build and add \"moderator\" tab. */\n", "func_signal": "private void setupModeratorTab(Cursor sessionsCursor)", "code": "{\n    final TabHost host = getTabHost();\n\n    // Insert Moderator when available\n    final View moderatorBlock = findViewById(R.id.moderator_block);\n    final String moderatorLink = sessionsCursor.getString(SessionsQuery.MODERATOR_LINK);\n    final boolean validModerator = !TextUtils.isEmpty(moderatorLink);\n    if (validModerator) {\n        mModeratorUri = Uri.parse(moderatorLink);\n\n        // Set link, but handle clicks manually\n        final TextView textView = (TextView) findViewById(R.id.moderator_link);\n        textView.setText(mModeratorUri.toString());\n        textView.setMovementMethod(null);\n        textView.setClickable(true);\n        textView.setFocusable(true);\n\n        // Start background fetch of moderator status\n        startModeratorStatusFetch(moderatorLink);\n\n        moderatorBlock.setVisibility(View.VISIBLE);\n    } else {\n        moderatorBlock.setVisibility(View.GONE);\n    }\n\n    // Insert Wave when available\n    final View waveBlock = findViewById(R.id.wave_block);\n    final String waveLink = sessionsCursor.getString(SessionsQuery.WAVE_LINK);\n    final boolean validWave = !TextUtils.isEmpty(waveLink);\n    if (validWave) {\n        // Rewrite incoming Wave URL to punch through user-agent check\n        mWaveUri = Uri.parse(waveLink).buildUpon()\n                .appendQueryParameter(\"nouacheck\", \"1\").build();\n\n        // Set link, but handle clicks manually\n        final TextView textView = (TextView) findViewById(R.id.wave_link);\n        textView.setText(mWaveUri.toString());\n        textView.setMovementMethod(null);\n        textView.setClickable(true);\n        textView.setFocusable(true);\n\n        waveBlock.setVisibility(View.VISIBLE);\n    } else {\n        waveBlock.setVisibility(View.GONE);\n    }\n\n    if (validModerator || validWave) {\n        // Moderator content comes from existing layout\n        host.addTab(host.newTabSpec(TAG_MODERATOR)\n                .setIndicator(buildIndicator(R.string.session_interact))\n                .setContent(R.id.tab_session_moderator));\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/**\n * Remove any {@link BlockView} instances, leaving only\n * {@link TimeRulerView} remaining.\n */\n", "func_signal": "public void removeAllBlocks()", "code": "{\n    ensureChildren();\n    removeAllViews();\n    addView(mRulerView);\n    addView(mNowView);\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\widget\\BlocksLayout.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)", "code": "{\n    if (LOGV) Log.v(TAG, \"update(uri=\" + uri + \", values=\" + values.toString() + \")\");\n    final SQLiteDatabase db = mOpenHelper.getWritableDatabase();\n    final SelectionBuilder builder = buildSimpleSelection(uri);\n    return builder.where(selection, selectionArgs).update(db, values);\n}", "path": "src\\com\\underhilllabs\\dccsched\\provider\\ScheduleProvider.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void onQueryComplete(int token, Object cookie, Cursor cursor)", "code": "{\n    if (token == SessionsQuery._TOKEN) {\n        onSessionQueryComplete(cursor);\n    } else if (token == TracksQuery._TOKEN) {\n        onTrackQueryComplete(cursor);\n    } else if (token == SpeakersQuery._TOKEN) {\n        onSpeakersQueryComplete(cursor);\n    } else {\n        cursor.close();\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic Uri insert(Uri uri, ContentValues values)", "code": "{\n    if (LOGV) Log.v(TAG, \"insert(uri=\" + uri + \", values=\" + values.toString() + \")\");\n\tLog.v(TAG, \"insert(uri=\" + uri + \", values=\" + values.toString() + \")\");\n    final SQLiteDatabase db = mOpenHelper.getWritableDatabase();\n    final int match = sUriMatcher.match(uri);\n    switch (match) {\n        case BLOCKS: {\n            db.insertOrThrow(Tables.BLOCKS, null, values);\n            return Blocks.buildBlockUri(values.getAsString(Blocks.BLOCK_ID));\n        }\n        case TRACKS: {\n            db.insertOrThrow(Tables.TRACKS, null, values);\n            return Tracks.buildTrackUri(values.getAsString(Tracks.TRACK_ID));\n        }\n        case ROOMS: {\n            db.insertOrThrow(Tables.ROOMS, null, values);\n            return Rooms.buildRoomUri(values.getAsString(Rooms.ROOM_ID));\n        }\n        case SESSIONS: {\n            db.insertOrThrow(Tables.SESSIONS, null, values);\n            return Sessions.buildSessionUri(values.getAsString(Sessions.SESSION_ID));\n        }\n        case SESSIONS_ID_SPEAKERS: {\n            db.insertOrThrow(Tables.SESSIONS_SPEAKERS, null, values);\n            return Speakers.buildSpeakerUri(values.getAsString(SessionsSpeakers.SPEAKER_ID));\n        }\n        case SESSIONS_ID_TRACKS: {\n            db.insertOrThrow(Tables.SESSIONS_TRACKS, null, values);\n            return Tracks.buildTrackUri(values.getAsString(SessionsTracks.TRACK_ID));\n        }\n        case SESSIONS_ID_NOTES: {\n            final String sessionId = Sessions.getSessionId(uri);\n            values.put(Notes.SESSION_ID, sessionId);\n            final long noteId = db.insertOrThrow(Tables.NOTES, null, values);\n            return ContentUris.withAppendedId(Notes.CONTENT_URI, noteId);\n        }\n        case SPEAKERS: {\n            db.insertOrThrow(Tables.SPEAKERS, null, values);\n            return Speakers.buildSpeakerUri(values.getAsString(Speakers.SPEAKER_ID));\n        }\n        case VENDORS: {\n            db.insertOrThrow(Tables.VENDORS, null, values);\n            return Vendors.buildVendorUri(values.getAsString(Vendors.VENDOR_ID));\n        }\n        case NOTES: {\n            final long noteId = db.insertOrThrow(Tables.NOTES, null, values);\n            return ContentUris.withAppendedId(Notes.CONTENT_URI, noteId);\n        }\n        case SEARCH_SUGGEST: {\n            db.insertOrThrow(Tables.SEARCH_SUGGEST, null, values);\n            return SearchSuggest.CONTENT_URI;\n        }\n        default: {\n            throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n        }\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\provider\\ScheduleProvider.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Handle \"map\" title-bar action. */\n", "func_signal": "public void onMapClick(View v)", "code": "{\n    final Intent intent = new Intent(this, MapActivity.class);\n    if (mRoomId != null && mRoomId.startsWith(\"officehours\")) {\n        intent.putExtra(MapActivity.EXTRA_ROOM, MapActivity.OFFICE_HOURS_ROOM_ID);\n    } else {\n        intent.putExtra(MapActivity.EXTRA_ROOM, mRoomId);\n    }\n    startActivity(intent);\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/**\n * Build a {@link View} to be used as a tab indicator, setting the requested\n * string resource as its label.\n */\n", "func_signal": "private View buildIndicator(int textRes)", "code": "{\n    final TextView indicator = (TextView) getLayoutInflater().inflate(R.layout.tab_indicator,\n            getTabWidget(), false);\n    indicator.setText(textRes);\n    return indicator;\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SearchActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/**\n * Build a simple {@link SelectionBuilder} to match the requested\n * {@link Uri}. This is usually enough to support {@link #insert},\n * {@link #update}, and {@link #delete} operations.\n */\n", "func_signal": "private SelectionBuilder buildSimpleSelection(Uri uri)", "code": "{\n    final SelectionBuilder builder = new SelectionBuilder();\n    final int match = sUriMatcher.match(uri);\n    switch (match) {\n        case BLOCKS: {\n            return builder.table(Tables.BLOCKS);\n        }\n        case BLOCKS_ID: {\n            final String blockId = Blocks.getBlockId(uri);\n            return builder.table(Tables.BLOCKS)\n                    .where(Blocks.BLOCK_ID + \"=?\", blockId);\n        }\n        case TRACKS: {\n            return builder.table(Tables.TRACKS);\n        }\n        case TRACKS_ID: {\n            final String trackId = Tracks.getTrackId(uri);\n            return builder.table(Tables.TRACKS)\n                    .where(Tracks.TRACK_ID + \"=?\", trackId);\n        }\n        case ROOMS: {\n            return builder.table(Tables.ROOMS);\n        }\n        case ROOMS_ID: {\n            final String roomId = Rooms.getRoomId(uri);\n            return builder.table(Tables.ROOMS)\n                    .where(Rooms.ROOM_ID + \"=?\", roomId);\n        }\n        case SESSIONS: {\n            return builder.table(Tables.SESSIONS);\n        }\n        case SESSIONS_ID: {\n            final String sessionId = Sessions.getSessionId(uri);\n            return builder.table(Tables.SESSIONS)\n                    .where(Sessions.SESSION_ID + \"=?\", sessionId);\n        }\n        case SESSIONS_ID_SPEAKERS: {\n            final String sessionId = Sessions.getSessionId(uri);\n            return builder.table(Tables.SESSIONS_SPEAKERS)\n                    .where(Sessions.SESSION_ID + \"=?\", sessionId);\n        }\n        case SESSIONS_ID_TRACKS: {\n            final String sessionId = Sessions.getSessionId(uri);\n            return builder.table(Tables.SESSIONS_TRACKS)\n                    .where(Sessions.SESSION_ID + \"=?\", sessionId);\n        }\n        case SPEAKERS: {\n            return builder.table(Tables.SPEAKERS);\n        }\n        case SPEAKERS_ID: {\n            final String speakerId = Speakers.getSpeakerId(uri);\n            return builder.table(Tables.SPEAKERS)\n                    .where(Speakers.SPEAKER_ID + \"=?\", speakerId);\n        }\n        case VENDORS: {\n            return builder.table(Tables.VENDORS);\n        }\n        case VENDORS_ID: {\n            final String vendorId = Vendors.getVendorId(uri);\n            return builder.table(Tables.VENDORS)\n                    .where(Vendors.VENDOR_ID + \"=?\", vendorId);\n        }\n        case NOTES: {\n            return builder.table(Tables.NOTES);\n        }\n        case NOTES_ID: {\n            final String noteId = uri.getPathSegments().get(1);\n            return builder.table(Tables.NOTES)\n                    .where(Notes._ID + \"=?\", noteId);\n        }\n        case SEARCH_SUGGEST: {\n            return builder.table(Tables.SEARCH_SUGGEST);\n        }\n        default: {\n            throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n        }\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\provider\\ScheduleProvider.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Build and add \"vendors\" tab. */\n", "func_signal": "private void setupVendorsTab()", "code": "{\n    final TabHost host = getTabHost();\n\n    final Uri vendorsUri = Vendors.buildSearchUri(mQuery);\n    final Intent intent = new Intent(Intent.ACTION_VIEW, vendorsUri);\n    intent.addCategory(Intent.CATEGORY_TAB);\n\n    // Vendors content comes from reused activity\n    host.addTab(host.newTabSpec(TAG_VENDORS)\n            .setIndicator(buildIndicator(R.string.search_vendors))\n            .setContent(intent));\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SearchActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/**\n * Derive {@link Tracks#CONTENT_ITEM_TYPE} {@link Uri} based on incoming\n * {@link Intent}, using {@link #EXTRA_TRACK} when set.\n */\n", "func_signal": "private Uri resolveTrackUri(Intent intent)", "code": "{\n    final Uri trackUri = intent.getParcelableExtra(EXTRA_TRACK);\n    if (trackUri != null) {\n        return trackUri;\n    } else {\n        return Sessions.buildTracksDirUri(mSessionId);\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,\n        String sortOrder)", "code": "{\n    if (LOGV) Log.v(TAG, \"query(uri=\" + uri + \", proj=\" + Arrays.toString(projection) + \")\");\n    final SQLiteDatabase db = mOpenHelper.getReadableDatabase();\n\n    final int match = sUriMatcher.match(uri);\n    switch (match) {\n        default: {\n            // Most cases are handled with simple SelectionBuilder\n            final SelectionBuilder builder = buildExpandedSelection(uri, match);\n            return builder.where(selection, selectionArgs).query(db, projection, sortOrder);\n        }\n        case NOTES_EXPORT: {\n            // Provide query values for file attachments\n            final String[] columns = { OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE };\n            final MatrixCursor cursor = new MatrixCursor(columns, 1);\n            cursor.addRow(new String[] { \"notes.xml\", null });\n            return cursor;\n        }\n        case SEARCH_SUGGEST: {\n            final SelectionBuilder builder = new SelectionBuilder();\n\n            // Adjust incoming query to become SQL text match\n            selectionArgs[0] = selectionArgs[0] + \"%\";\n            builder.table(Tables.SEARCH_SUGGEST);\n            builder.where(selection, selectionArgs);\n            builder.map(SearchManager.SUGGEST_COLUMN_QUERY,\n                    SearchManager.SUGGEST_COLUMN_TEXT_1);\n\n            projection = new String[] { BaseColumns._ID, SearchManager.SUGGEST_COLUMN_TEXT_1,\n                    SearchManager.SUGGEST_COLUMN_QUERY };\n\n            final String limit = uri.getQueryParameter(SearchManager.SUGGEST_PARAMETER_LIMIT);\n            return builder.query(db, projection, null, null, SearchSuggest.DEFAULT_SORT, limit);\n        }\n    }\n}", "path": "src\\com\\underhilllabs\\dccsched\\provider\\ScheduleProvider.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Handle toggling of starred checkbox. */\n", "func_signal": "public void onCheckedChanged(CompoundButton buttonView, boolean isChecked)", "code": "{\n    final ContentValues values = new ContentValues();\n    values.put(Vendors.STARRED, isChecked ? 1 : 0);\n    mHandler.startUpdate(mSessionUri, values);\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Build and add \"notes\" tab. */\n", "func_signal": "private void setupNotesTab()", "code": "{\n    final TabHost host = getTabHost();\n\n    final Uri notesUri = Sessions.buildNotesDirUri(mSessionId);\n    final Intent intent = new Intent(Intent.ACTION_VIEW, notesUri);\n    intent.addCategory(Intent.CATEGORY_TAB);\n    intent.putExtra(NotesActivity.EXTRA_SHOW_INSERT, true);\n\n    // Notes content comes from reused activity\n    host.addTab(host.newTabSpec(TAG_NOTES)\n            .setIndicator(buildIndicator(R.string.session_notes))\n            .setContent(intent));\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/**\n * Build and return a {@link UriMatcher} that catches all {@link Uri}\n * variations supported by this {@link ContentProvider}.\n */\n", "func_signal": "private static UriMatcher buildUriMatcher()", "code": "{\n    final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);\n    final String authority = ScheduleContract.CONTENT_AUTHORITY;\n\n    matcher.addURI(authority, \"blocks\", BLOCKS);\n    matcher.addURI(authority, \"blocks/between/*/*\", BLOCKS_BETWEEN);\n    matcher.addURI(authority, \"blocks/*\", BLOCKS_ID);\n    matcher.addURI(authority, \"blocks/*/sessions\", BLOCKS_ID_SESSIONS);\n\n    matcher.addURI(authority, \"tracks\", TRACKS);\n    matcher.addURI(authority, \"tracks/*\", TRACKS_ID);\n    matcher.addURI(authority, \"tracks/*/sessions\", TRACKS_ID_SESSIONS);\n    matcher.addURI(authority, \"tracks/*/vendors\", TRACKS_ID_VENDORS);\n\n    matcher.addURI(authority, \"rooms\", ROOMS);\n    matcher.addURI(authority, \"rooms/*\", ROOMS_ID);\n    matcher.addURI(authority, \"rooms/*/sessions\", ROOMS_ID_SESSIONS);\n\n    matcher.addURI(authority, \"sessions\", SESSIONS);\n    matcher.addURI(authority, \"sessions/starred\", SESSIONS_STARRED);\n    matcher.addURI(authority, \"sessions/search/*\", SESSIONS_SEARCH);\n    matcher.addURI(authority, \"sessions/at/*\", SESSIONS_AT);\n    matcher.addURI(authority, \"sessions/*\", SESSIONS_ID);\n    matcher.addURI(authority, \"sessions/*/speakers\", SESSIONS_ID_SPEAKERS);\n    matcher.addURI(authority, \"sessions/*/tracks\", SESSIONS_ID_TRACKS);\n    matcher.addURI(authority, \"sessions/*/notes\", SESSIONS_ID_NOTES);\n\n    matcher.addURI(authority, \"speakers\", SPEAKERS);\n    matcher.addURI(authority, \"speakers/*\", SPEAKERS_ID);\n    matcher.addURI(authority, \"speakers/*/sessions\", SPEAKERS_ID_SESSIONS);\n\n    matcher.addURI(authority, \"vendors\", VENDORS);\n    matcher.addURI(authority, \"vendors/starred\", VENDORS_STARRED);\n    matcher.addURI(authority, \"vendors/search/*\", VENDORS_SEARCH);\n    matcher.addURI(authority, \"vendors/*\", VENDORS_ID);\n\n    matcher.addURI(authority, \"notes\", NOTES);\n    matcher.addURI(authority, \"notes/export\", NOTES_EXPORT);\n    matcher.addURI(authority, \"notes/*\", NOTES_ID);\n\n    matcher.addURI(authority, \"search_suggest_query\", SEARCH_SUGGEST);\n\n    return matcher;\n}", "path": "src\\com\\underhilllabs\\dccsched\\provider\\ScheduleProvider.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/**\n * Build a {@link View} to be used as a tab indicator, setting the requested\n * string resource as its label.\n */\n", "func_signal": "private View buildIndicator(int textRes)", "code": "{\n    final TextView indicator = (TextView) getLayoutInflater().inflate(R.layout.tab_indicator,\n            getTabWidget(), false);\n    indicator.setText(textRes);\n    return indicator;\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** Handle \"share\" title-bar action. */\n", "func_signal": "public void onShareClick(View v)", "code": "{\n    // TODO: consider bringing in shortlink to session\n    final String shareString = getString(R.string.share_template, mTitleString, mHashtag);\n\n    final Intent intent = new Intent(Intent.ACTION_SEND);\n    intent.setType(\"text/plain\");\n    intent.putExtra(Intent.EXTRA_TEXT, shareString);\n\n    startActivity(Intent.createChooser(intent, getText(R.string.title_share)));\n}", "path": "src\\com\\underhilllabs\\dccsched\\ui\\SessionDetailActivity.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic int delete(Uri uri, String selection, String[] selectionArgs)", "code": "{\n    if (LOGV) Log.v(TAG, \"delete(uri=\" + uri + \")\");\n    final SQLiteDatabase db = mOpenHelper.getWritableDatabase();\n    final SelectionBuilder builder = buildSimpleSelection(uri);\n    return builder.where(selection, selectionArgs).delete(db);\n}", "path": "src\\com\\underhilllabs\\dccsched\\provider\\ScheduleProvider.java", "repo_name": "underhilllabs/dccsched", "stars": 8, "license": "apache-2.0", "language": "java", "size": 854}
{"docstring": "/**\n * Hides the top-level UI elements of the call card:  The \"main\n * call card\" element representing the current active or ringing call,\n * and also the info areas for \"ongoing\" or \"on hold\" calls in some\n * states.\n *\n * This is intended to be used in special states where the normal\n * in-call UI is totally replaced by some other UI, like OTA mode on a\n * CDMA device.\n *\n * To bring back the regular CallCard UI, just re-run the normal\n * updateState() call sequence.\n */\n", "func_signal": "public void hideCallCardElements()", "code": "{\n    mPrimaryCallInfo.setVisibility(View.GONE);\n    mSecondaryCallInfo.setVisibility(View.GONE);\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Sets the left and right margins of the specified ViewGroup (whose\n * LayoutParams object which must inherit from\n * ViewGroup.MarginLayoutParams.)\n *\n * TODO: Is there already a convenience method like this somewhere?\n */\n", "func_signal": "private void setSideMargins(ViewGroup vg, int margin)", "code": "{\n    ViewGroup.MarginLayoutParams lp =\n            (ViewGroup.MarginLayoutParams) vg.getLayoutParams();\n    // Equivalent to setting android:layout_marginLeft/Right in XML\n    lp.leftMargin = margin;\n    lp.rightMargin = margin;\n    vg.setLayoutParams(lp);\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Implemented for CallerInfoAsyncQuery.OnQueryCompleteListener interface.\n * refreshes the CallCard data when it called.\n */\n", "func_signal": "public void onQueryComplete(int token, Object cookie, CallerInfo ci)", "code": "{\n    if (DBG) log(\"onQueryComplete: token \" + token + \", cookie \" + cookie + \", ci \" + ci);\n\n    if (cookie instanceof Call) {\n        // grab the call object and update the display for an individual call,\n        // as well as the successive call to update image via call state.\n        // If the object is a textview instead, we update it as we need to.\n        if (DBG) log(\"callerinfo query complete, updating ui from displayMainCallStatus()\");\n        Call call = (Call) cookie;\n        Connection conn = null;\n        int phoneType = call.getPhone().getPhoneType();\n        if (phoneType == Phone.PHONE_TYPE_CDMA) {\n            conn = call.getLatestConnection();\n        } else if ((phoneType == Phone.PHONE_TYPE_GSM)\n              || (phoneType == Phone.PHONE_TYPE_SIP)) {\n            conn = call.getEarliestConnection();\n        } else {\n            throw new IllegalStateException(\"Unexpected phone type: \" + phoneType);\n        }\n        PhoneUtils.CallerInfoToken cit =\n               PhoneUtils.startGetCallerInfo(getContext(), conn, this, null);\n\n        int presentation = Connection.PRESENTATION_ALLOWED;\n        if (conn != null) presentation = conn.getNumberPresentation();\n        if (DBG) log(\"- onQueryComplete: presentation=\" + presentation\n                + \", contactExists=\" + ci.contactExists);\n\n        // Depending on whether there was a contact match or not, we want to pass in different\n        // CallerInfo (for CNAP). Therefore if ci.contactExists then use the ci passed in.\n        // Otherwise, regenerate the CIT from the Connection and use the CallerInfo from there.\n        if (ci.contactExists) {\n            updateDisplayForPerson(ci, Connection.PRESENTATION_ALLOWED, false, call);\n        } else {\n            updateDisplayForPerson(cit.currentInfo, presentation, false, call);\n        }\n        updatePhotoForCallState(call);\n\n    } else if (cookie instanceof TextView){\n        if (DBG) log(\"callerinfo query complete, updating ui from ongoing or onhold\");\n        ((TextView) cookie).setText(PhoneUtils.getCompactNameFromCallerInfo(ci, mContext));\n    }\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * This method is called twice in practice. The first time both\n * with and height are constraint by AT_MOST. The second time, the\n * width is still AT_MOST and the height is EXACTLY. Either way\n * the full width/height should be in mWidth and mHeight and we\n * use 'resolveSize' to do the right thing.\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    final int width = resolveSize(mWidth, widthMeasureSpec);\n    final int height = resolveSize(mHeight, heightMeasureSpec);\n    setMeasuredDimension(width, height);\n}", "path": "src\\com\\android\\phone\\ButtonGridLayout.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Returns the special card title used in emergency callback mode (ECM),\n * which shows your own phone number.\n */\n", "func_signal": "private String getECMCardTitle(Context context, Phone phone)", "code": "{\n    String rawNumber = phone.getLine1Number();  // may be null or empty\n    String formattedNumber;\n    if (!TextUtils.isEmpty(rawNumber)) {\n        formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);\n    } else {\n        formattedNumber = context.getString(R.string.unknown);\n    }\n    String titleFormat = context.getString(R.string.card_title_my_phone_number);\n    return String.format(titleFormat, formattedNumber);\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Set the background of all the children. Typically a selector to\n * change the background based on some combination of the button's\n * attributes (e.g pressed, enabled...)\n * @param resid Is a resource id to be used for each button's background.\n */\n", "func_signal": "public void setChildrenBackgroundResource(int resid)", "code": "{\n    final View[] buttons = mButtons;\n    for (int i = 0; i < NUM_CHILDREN; i++) {\n        buttons[i].setBackgroundResource(resid);\n    }\n}", "path": "src\\com\\android\\phone\\ButtonGridLayout.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "// Accessibility event support.\n// Since none of the CallCard elements are focusable, we need to manually\n// fill in the AccessibilityEvent here (so that the name / number / etc will\n// get pronounced by a screen reader, for example.)\n", "func_signal": "@Override\npublic boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "code": "{\n    dispatchPopulateAccessibilityEvent(event, mUpperTitle);\n    dispatchPopulateAccessibilityEvent(event, mPhoto);\n    dispatchPopulateAccessibilityEvent(event, mManageConferencePhotoButton);\n    dispatchPopulateAccessibilityEvent(event, mName);\n    dispatchPopulateAccessibilityEvent(event, mPhoneNumber);\n    dispatchPopulateAccessibilityEvent(event, mLabel);\n    dispatchPopulateAccessibilityEvent(event, mSocialStatus);\n    dispatchPopulateAccessibilityEvent(event, mSecondaryCallName);\n    dispatchPopulateAccessibilityEvent(event, mSecondaryCallStatus);\n    dispatchPopulateAccessibilityEvent(event, mSecondaryCallPhoto);\n    return true;\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates the name / photo / number / label fields on the CallCard\n * based on the specified CallerInfo.\n *\n * If the current call is a conference call, use\n * updateDisplayForConference() instead.\n */\n", "func_signal": "private void updateDisplayForPerson(CallerInfo info,\n                                    int presentation,\n                                    boolean isTemporary,\n                                    Call call)", "code": "{\n    if (DBG) log(\"updateDisplayForPerson(\" + info + \")\\npresentation:\" +\n                 presentation + \" isTemporary:\" + isTemporary);\n\n    // inform the state machine that we are displaying a photo.\n    mPhotoTracker.setPhotoRequest(info);\n    mPhotoTracker.setPhotoState(ContactsAsyncHelper.ImageTracker.DISPLAY_IMAGE);\n\n    // The actual strings we're going to display onscreen:\n    String displayName;\n    String displayNumber = null;\n    String label = null;\n    Uri personUri = null;\n    String socialStatusText = null;\n    Drawable socialStatusBadge = null;\n\n    boolean updateName = false;\n\n    if (info != null) {\n        // It appears that there is a small change in behaviour with the\n        // PhoneUtils' startGetCallerInfo whereby if we query with an\n        // empty number, we will get a valid CallerInfo object, but with\n        // fields that are all null, and the isTemporary boolean input\n        // parameter as true.\n\n        // In the past, we would see a NULL callerinfo object, but this\n        // ends up causing null pointer exceptions elsewhere down the\n        // line in other cases, so we need to make this fix instead. It\n        // appears that this was the ONLY call to PhoneUtils\n        // .getCallerInfo() that relied on a NULL CallerInfo to indicate\n        // an unknown contact.\n\n        // Currently, info.phoneNumber may actually be a SIP address, and\n        // if so, it might sometimes include the \"sip:\" prefix.  That\n        // prefix isn't really useful to the user, though, so strip it off\n        // if present.  (For any other URI scheme, though, leave the\n        // prefix alone.)\n        // TODO: It would be cleaner for CallerInfo to explicitly support\n        // SIP addresses instead of overloading the \"phoneNumber\" field.\n        // Then we could remove this hack, and instead ask the CallerInfo\n        // for a \"user visible\" form of the SIP address.\n        String number = info.phoneNumber;\n        if ((number != null) && number.startsWith(\"sip:\")) {\n            number = number.substring(4);\n        }\n\n        if (TextUtils.isEmpty(info.name)) {\n            // No valid \"name\" in the CallerInfo, so fall back to\n            // something else.\n            // (Typically, we promote the phone number up to the \"name\"\n            // slot onscreen, and leave the \"number\" slot empty.)\n            if (TextUtils.isEmpty(number)) {\n                displayName =  getPresentationString(presentation);\n            } else if (presentation != Connection.PRESENTATION_ALLOWED) {\n                // This case should never happen since the network should never send a phone #\n                // AND a restricted presentation. However we leave it here in case of weird\n                // network behavior\n                displayName = getPresentationString(presentation);\n            } else if (!TextUtils.isEmpty(info.cnapName)) {\n                displayName = info.cnapName;\n                info.name = info.cnapName;\n                displayNumber = number;\n            } else {\n                displayName = number;\n            }\n        } else {\n            // We do have a valid \"name\" in the CallerInfo.  Display that\n            // in the \"name\" slot, and the phone number in the \"number\" slot.\n            if (presentation != Connection.PRESENTATION_ALLOWED) {\n                // This case should never happen since the network should never send a name\n                // AND a restricted presentation. However we leave it here in case of weird\n                // network behavior\n                displayName = getPresentationString(presentation);\n            } else {\n                displayName = info.name;\n                displayNumber = number;\n                label = info.phoneLabel;\n                // add by cytown for show organization\n                updateName = true;\n            }\n        }\n        personUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, info.person_id);\n        if (DBG) log(\"- got personUri: '\" + personUri\n                     + \"', based on info.person_id: \" + info.person_id);\n    } else {\n        displayName =  getPresentationString(presentation);\n    }\n\n    if (call.isGeneric()) {\n        mName.setText(R.string.card_title_in_call);\n        mOrganization.setVisibility(View.GONE);\n    } else {\n        mName.setText(displayName);\n        if (DBG) log(\"show ======= \" + updateName + \":\" + mSettings.mShowOrgan);\n        if (updateName && mSettings.mShowOrgan) {\n            updateOrganization(info.person_id);\n        } else {\n            mOrganization.setVisibility(View.GONE);\n        }\n    }\n    mName.setVisibility(View.VISIBLE);\n\n    // Update mPhoto\n    // if the temporary flag is set, we know we'll be getting another call after\n    // the CallerInfo has been correctly updated.  So, we can skip the image\n    // loading until then.\n\n    // If the photoResource is filled in for the CallerInfo, (like with the\n    // Emergency Number case), then we can just set the photo image without\n    // requesting for an image load. Please refer to CallerInfoAsyncQuery.java\n    // for cases where CallerInfo.photoResource may be set.  We can also avoid\n    // the image load step if the image data is cached.\n    if (isTemporary && (info == null || !info.isCachedPhotoCurrent)) {\n        mPhoto.setVisibility(View.INVISIBLE);\n    } else if (info != null && info.photoResource != 0){\n        showImage(mPhoto, info.photoResource);\n    } else if (!showCachedImage(mPhoto, info)) {\n        // Load the image with a callback to update the image state.\n        // Use the default unknown picture while the query is running.\n        ContactsAsyncHelper.updateImageViewWithContactPhotoAsync(\n            info, 0, this, call, getContext(), mPhoto, personUri, R.drawable.picture_unknown);\n    }\n    // And no matter what, on all devices, we never see the \"manage\n    // conference\" button in this state.\n    mManageConferencePhotoButton.setVisibility(View.INVISIBLE);\n\n    if (displayNumber != null && !call.isGeneric()) {\n        mPhoneNumber.setText(displayNumber);\n        mPhoneNumber.setTextColor(mTextColorDefaultSecondary);\n        mPhoneNumber.setVisibility(View.VISIBLE);\n    } else {\n        mPhoneNumber.setVisibility(View.GONE);\n    }\n\n    if (label != null && !call.isGeneric()) {\n        mLabel.setText(label);\n        mLabel.setVisibility(View.VISIBLE);\n    } else {\n        mLabel.setVisibility(View.GONE);\n    }\n\n    // Other text fields:\n    updateCallTypeLabel(call);\n    updateSocialStatus(socialStatusText, socialStatusBadge, call);  // Currently unused\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "// View.OnClickListener implementation\n", "func_signal": "public void onClick(View view)", "code": "{\n    int id = view.getId();\n    if (DBG) log(\"onClick(View \" + view + \", id \" + id + \")...\");\n\n    switch (id) {\n        case R.id.manageConferencePhotoButton:\n            // A click on anything here gets forwarded\n            // straight to the InCallScreen.\n            mInCallScreen.handleOnscreenButtonClick(id);\n            break;\n\n        default:\n            Log.w(LOG_TAG, \"onClick: unexpected click: View \" + view + \", id \" + id);\n            break;\n    }\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates the UI for the state where the phone is not in use.\n * This is analogous to updateForegroundCall() and updateRingingCall(),\n * but for the (uncommon) case where the phone is\n * totally idle.  (See comments in updateState() above.)\n *\n * This puts the callcard into a sane but \"blank\" state.\n */\n", "func_signal": "private void updateNoCall(CallManager cm)", "code": "{\n    if (DBG) log(\"updateNoCall()...\");\n\n    displayMainCallStatus(cm, null);\n    displayOnHoldCallStatus(cm, null);\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Cache the buttons in a member array for faster access.  Compute\n * the measurements for the width/height of buttons.  The inflate\n * sequence is called right after the constructor and before the\n * measure/layout phase.\n */\n", "func_signal": "@Override\nprotected void onFinishInflate ()", "code": "{\n    super.onFinishInflate();\n    final View[] buttons = mButtons;\n    for (int i = 0; i < NUM_CHILDREN; i++) {\n        buttons[i] = getChildAt(i);\n        // Measure the button to get initialized.\n        buttons[i].measure(MeasureSpec.UNSPECIFIED , MeasureSpec.UNSPECIFIED);\n    }\n\n    // Cache the measurements.\n    final View child = buttons[0];\n    mButtonWidth = child.getMeasuredWidth();\n    mButtonHeight = child.getMeasuredHeight();\n    mWidthInc = mButtonWidth + mPaddingLeft + mPaddingRight;\n    mHeightInc = mButtonHeight + mPaddingTop + mPaddingBottom;\n    mWidth = COLUMNS * mWidthInc;\n    mHeight = ROWS * mHeightInc;\n}", "path": "src\\com\\android\\phone\\ButtonGridLayout.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Implemented for ContactsAsyncHelper.OnImageLoadCompleteListener interface.\n * make sure that the call state is reflected after the image is loaded.\n */\n", "func_signal": "public void onImageLoadComplete(int token, Object cookie, ImageView iView,\n        boolean imagePresent)", "code": "{\n    if (cookie != null) {\n        updatePhotoForCallState((Call) cookie);\n    }\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates the \"on hold\" box in the \"other call\" info area\n * (ie. the stuff in the secondaryCallInfo block)\n * based on the specified Call.\n * Or, clear out the \"on hold\" box if the specified call\n * is null or idle.\n */\n", "func_signal": "private void displayOnHoldCallStatus(CallManager cm, Call call)", "code": "{\n    if (DBG) log(\"displayOnHoldCallStatus(call =\" + call + \")...\");\n\n    if ((call == null) || (PhoneApp.getInstance().isOtaCallInActiveState())) {\n        mSecondaryCallInfo.setVisibility(View.GONE);\n        return;\n    }\n\n    boolean showSecondaryCallInfo = false;\n    Call.State state = call.getState();\n    switch (state) {\n        case HOLDING:\n            // Ok, there actually is a background call on hold.\n            // Display the \"on hold\" box.\n\n            // Note this case occurs only on GSM devices.  (On CDMA,\n            // the \"call on hold\" is actually the 2nd connection of\n            // that ACTIVE call; see the ACTIVE case below.)\n\n            if (PhoneUtils.isConferenceCall(call)) {\n                if (DBG) log(\"==> conference call.\");\n                mSecondaryCallName.setText(getContext().getString(R.string.confCall));\n                showImage(mSecondaryCallPhoto, R.drawable.picture_conference);\n            } else {\n                // perform query and update the name temporarily\n                // make sure we hand the textview we want updated to the\n                // callback function.\n                if (DBG) log(\"==> NOT a conf call; call startGetCallerInfo...\");\n                PhoneUtils.CallerInfoToken infoToken = PhoneUtils.startGetCallerInfo(\n                        getContext(), call, this, mSecondaryCallName);\n                mSecondaryCallName.setText(\n                        PhoneUtils.getCompactNameFromCallerInfo(infoToken.currentInfo,\n                                                                getContext()));\n\n                // Also pull the photo out of the current CallerInfo.\n                // (Note we assume we already have a valid photo at\n                // this point, since *presumably* the caller-id query\n                // was already run at some point *before* this call\n                // got put on hold.  If there's no cached photo, just\n                // fall back to the default \"unknown\" image.)\n                if (infoToken.isFinal) {\n                    showCachedImage(mSecondaryCallPhoto, infoToken.currentInfo);\n                } else {\n                    showImage(mSecondaryCallPhoto, R.drawable.picture_unknown);\n                }\n            }\n\n            showSecondaryCallInfo = true;\n\n            break;\n\n        case ACTIVE:\n            // CDMA: This is because in CDMA when the user originates the second call,\n            // although the Foreground call state is still ACTIVE in reality the network\n            // put the first call on hold.\n            if (mApplication.phone.getPhoneType() == Phone.PHONE_TYPE_CDMA) {\n                List<Connection> connections = call.getConnections();\n                if (connections.size() > 2) {\n                    // This means that current Mobile Originated call is the not the first 3-Way\n                    // call the user is making, which in turn tells the PhoneApp that we no\n                    // longer know which previous caller/party had dropped out before the user\n                    // made this call.\n                    mSecondaryCallName.setText(\n                            getContext().getString(R.string.card_title_in_call));\n                    showImage(mSecondaryCallPhoto, R.drawable.picture_unknown);\n                } else {\n                    // This means that the current Mobile Originated call IS the first 3-Way\n                    // and hence we display the first callers/party's info here.\n                    Connection conn = call.getEarliestConnection();\n                    PhoneUtils.CallerInfoToken infoToken = PhoneUtils.startGetCallerInfo(\n                            getContext(), conn, this, mSecondaryCallName);\n\n                    // Get the compactName to be displayed, but then check that against\n                    // the number presentation value for the call. If it's not an allowed\n                    // presentation, then display the appropriate presentation string instead.\n                    CallerInfo info = infoToken.currentInfo;\n\n                    String name = PhoneUtils.getCompactNameFromCallerInfo(info, getContext());\n                    boolean forceGenericPhoto = false;\n                    if (info != null && info.numberPresentation !=\n                            Connection.PRESENTATION_ALLOWED) {\n                        name = getPresentationString(info.numberPresentation);\n                        forceGenericPhoto = true;\n                    }\n                    mSecondaryCallName.setText(name);\n\n                    // Also pull the photo out of the current CallerInfo.\n                    // (Note we assume we already have a valid photo at\n                    // this point, since *presumably* the caller-id query\n                    // was already run at some point *before* this call\n                    // got put on hold.  If there's no cached photo, just\n                    // fall back to the default \"unknown\" image.)\n                    if (!forceGenericPhoto && infoToken.isFinal) {\n                        showCachedImage(mSecondaryCallPhoto, info);\n                    } else {\n                        showImage(mSecondaryCallPhoto, R.drawable.picture_unknown);\n                    }\n                }\n                showSecondaryCallInfo = true;\n\n            } else {\n                // We shouldn't ever get here at all for non-CDMA devices.\n                Log.w(LOG_TAG, \"displayOnHoldCallStatus: ACTIVE state on non-CDMA device\");\n                showSecondaryCallInfo = false;\n            }\n            break;\n\n        default:\n            // There's actually no call on hold.  (Presumably this call's\n            // state is IDLE, since any other state is meaningless for the\n            // background call.)\n            showSecondaryCallInfo = false;\n            break;\n    }\n\n    if (showSecondaryCallInfo) {\n        // Ok, we have something useful to display in the \"secondary\n        // call\" info area.\n        mSecondaryCallInfo.setVisibility(View.VISIBLE);\n\n        // Watch out: there are some cases where we need to display the\n        // secondary call photo but *not* the two lines of text above it.\n        // Specifically, that's any state where the CallCard \"upper title\" is\n        // in use, since the title (e.g. \"Dialing\" or \"Call ended\") might\n        // collide with the secondaryCallStatus and secondaryCallName widgets.\n        //\n        // We detect this case by simply seeing whether or not there's any text\n        // in mUpperTitle.  (This is much simpler than detecting all possible\n        // telephony states where the \"upper title\" is used!  But note it does\n        // rely on the fact that updateCardTitleWidgets() gets called *earlier*\n        // than this method, in the CallCard.updateState() sequence...)\n        boolean okToShowLabels = TextUtils.isEmpty(mUpperTitle.getText());\n        mSecondaryCallName.setVisibility(okToShowLabels ? View.VISIBLE : View.INVISIBLE);\n        mSecondaryCallStatus.setVisibility(okToShowLabels ? View.VISIBLE : View.INVISIBLE);\n    } else {\n        // Hide the entire \"secondary call\" info area.\n        mSecondaryCallInfo.setVisibility(View.GONE);\n    }\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates the CallCard \"photo\" IFF the specified Call is in a state\n * that needs a special photo (like \"busy\" or \"dialing\".)\n *\n * If the current call does not require a special image in the \"photo\"\n * slot onscreen, don't do anything, since presumably the photo image\n * has already been set (to the photo of the person we're talking, or\n * the generic \"picture_unknown\" image, or the \"conference call\"\n * image.)\n */\n", "func_signal": "private void updatePhotoForCallState(Call call)", "code": "{\n    if (DBG) log(\"updatePhotoForCallState(\" + call + \")...\");\n    int photoImageResource = 0;\n\n    // Check for the (relatively few) telephony states that need a\n    // special image in the \"photo\" slot.\n    Call.State state = call.getState();\n    switch (state) {\n        case DISCONNECTED:\n            // Display the special \"busy\" photo for BUSY or CONGESTION.\n            // Otherwise (presumably the normal \"call ended\" state)\n            // leave the photo alone.\n            Connection c = call.getEarliestConnection();\n            // if the connection is null, we assume the default case,\n            // otherwise update the image resource normally.\n            if (c != null) {\n                Connection.DisconnectCause cause = c.getDisconnectCause();\n                if ((cause == Connection.DisconnectCause.BUSY)\n                    || (cause == Connection.DisconnectCause.CONGESTION)) {\n                    photoImageResource = R.drawable.picture_busy;\n                }\n            } else if (DBG) {\n                log(\"updatePhotoForCallState: connection is null, ignoring.\");\n            }\n\n            // TODO: add special images for any other DisconnectCauses?\n            break;\n\n        case ALERTING:\n        case DIALING:\n        default:\n            // Leave the photo alone in all other states.\n            // If this call is an individual call, and the image is currently\n            // displaying a state, (rather than a photo), we'll need to update\n            // the image.\n            // This is for the case where we've been displaying the state and\n            // now we need to restore the photo.  This can happen because we\n            // only query the CallerInfo once, and limit the number of times\n            // the image is loaded. (So a state image may overwrite the photo\n            // and we would otherwise have no way of displaying the photo when\n            // the state goes away.)\n\n            // if the photoResource field is filled-in in the Connection's\n            // caller info, then we can just use that instead of requesting\n            // for a photo load.\n\n            // look for the photoResource if it is available.\n            CallerInfo ci = null;\n            {\n                Connection conn = null;\n                int phoneType = call.getPhone().getPhoneType();\n                if (phoneType == Phone.PHONE_TYPE_CDMA) {\n                    conn = call.getLatestConnection();\n                } else if ((phoneType == Phone.PHONE_TYPE_GSM)\n                        || (phoneType == Phone.PHONE_TYPE_SIP)) {\n                    conn = call.getEarliestConnection();\n                } else {\n                    throw new IllegalStateException(\"Unexpected phone type: \" + phoneType);\n                }\n\n                if (conn != null) {\n                    Object o = conn.getUserData();\n                    if (o instanceof CallerInfo) {\n                        ci = (CallerInfo) o;\n                    } else if (o instanceof PhoneUtils.CallerInfoToken) {\n                        ci = ((PhoneUtils.CallerInfoToken) o).currentInfo;\n                    }\n                }\n            }\n\n            if (ci != null) {\n                photoImageResource = ci.photoResource;\n            }\n\n            // If no photoResource found, check to see if this is a conference call. If\n            // it is not a conference call:\n            //   1. Try to show the cached image\n            //   2. If the image is not cached, check to see if a load request has been\n            //      made already.\n            //   3. If the load request has not been made [DISPLAY_DEFAULT], start the\n            //      request and note that it has started by updating photo state with\n            //      [DISPLAY_IMAGE].\n            // Load requests started in (3) use a placeholder image of -1 to hide the\n            // image by default.  Please refer to CallerInfoAsyncQuery.java for cases\n            // where CallerInfo.photoResource may be set.\n            if (photoImageResource == 0) {\n                if (!PhoneUtils.isConferenceCall(call)) {\n                    if (!showCachedImage(mPhoto, ci) && (mPhotoTracker.getPhotoState() ==\n                            ContactsAsyncHelper.ImageTracker.DISPLAY_DEFAULT)) {\n                        ContactsAsyncHelper.updateImageViewWithContactPhotoAsync(ci,\n                                getContext(), mPhoto, mPhotoTracker.getPhotoUri(), -1);\n                        mPhotoTracker.setPhotoState(\n                                ContactsAsyncHelper.ImageTracker.DISPLAY_IMAGE);\n                    }\n                }\n            } else {\n                showImage(mPhoto, photoImageResource);\n                mPhotoTracker.setPhotoState(ContactsAsyncHelper.ImageTracker.DISPLAY_IMAGE);\n                return;\n            }\n            break;\n    }\n\n    if (photoImageResource != 0) {\n        if (DBG) log(\"- overrriding photo image: \" + photoImageResource);\n        showImage(mPhoto, photoImageResource);\n        // Track the image state.\n        mPhotoTracker.setPhotoState(ContactsAsyncHelper.ImageTracker.DISPLAY_DEFAULT);\n    }\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates mElapsedTime based on the specified number of seconds.\n * A timeElapsed value of zero means to not show an elapsed time at all.\n */\n", "func_signal": "private void updateElapsedTimeWidget(long timeElapsed)", "code": "{\n    // if (DBG) log(\"updateElapsedTimeWidget: \" + timeElapsed);\n    if (timeElapsed == 0) {\n        mElapsedTime.setText(\"\");\n    } else {\n        mElapsedTime.setText(DateUtils.formatElapsedTime(timeElapsed));\n    }\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates the main block of caller info on the CallCard\n * (ie. the stuff in the primaryCallInfo block) based on the specified Call.\n */\n", "func_signal": "private void displayMainCallStatus(CallManager cm, Call call)", "code": "{\n    if (DBG) log(\"displayMainCallStatus(call \" + call + \")...\");\n\n    if (call == null) {\n        // There's no call to display, presumably because the phone is idle.\n        mPrimaryCallInfo.setVisibility(View.GONE);\n        return;\n    }\n    mPrimaryCallInfo.setVisibility(View.VISIBLE);\n\n    Call.State state = call.getState();\n    if (DBG) log(\"  - call.state: \" + call.getState());\n\n    switch (state) {\n        case ACTIVE:\n        case DISCONNECTING:\n            // update timer field\n            if (DBG) log(\"displayMainCallStatus: start periodicUpdateTimer\");\n            mCallTime.setActiveCallMode(call);\n            mCallTime.reset();\n            mCallTime.periodicUpdateTimer();\n\n            break;\n\n        case HOLDING:\n            // update timer field\n            mCallTime.cancelTimer();\n\n            break;\n\n        case DISCONNECTED:\n            // Stop getting timer ticks from this call\n            mCallTime.cancelTimer();\n\n            break;\n\n        case DIALING:\n        case ALERTING:\n            // Stop getting timer ticks from a previous call\n            mCallTime.cancelTimer();\n\n            break;\n\n        case INCOMING:\n        case WAITING:\n            // Stop getting timer ticks from a previous call\n            mCallTime.cancelTimer();\n\n            break;\n\n        case IDLE:\n            // The \"main CallCard\" should never be trying to display\n            // an idle call!  In updateState(), if the phone is idle,\n            // we call updateNoCall(), which means that we shouldn't\n            // have passed a call into this method at all.\n            Log.w(LOG_TAG, \"displayMainCallStatus: IDLE call in the main call card!\");\n\n            // (It is possible, though, that we had a valid call which\n            // became idle *after* the check in updateState() but\n            // before we get here...  So continue the best we can,\n            // with whatever (stale) info we can get from the\n            // passed-in Call object.)\n\n            break;\n\n        default:\n            Log.w(LOG_TAG, \"displayMainCallStatus: unexpected call state: \" + state);\n            break;\n    }\n\n    updateCardTitleWidgets(call.getPhone(), call);\n\n    if (PhoneUtils.isConferenceCall(call)) {\n        // Update onscreen info for a conference call.\n        updateDisplayForConference(call);\n    } else {\n        // Update onscreen info for a regular call (which presumably\n        // has only one connection.)\n        Connection conn = null;\n        int phoneType = call.getPhone().getPhoneType();\n        if (phoneType == Phone.PHONE_TYPE_CDMA) {\n            conn = call.getLatestConnection();\n        } else if ((phoneType == Phone.PHONE_TYPE_GSM)\n              || (phoneType == Phone.PHONE_TYPE_SIP)) {\n            conn = call.getEarliestConnection();\n        } else {\n            throw new IllegalStateException(\"Unexpected phone type: \" + phoneType);\n        }\n\n        if (conn == null) {\n            if (DBG) log(\"displayMainCallStatus: connection is null, using default values.\");\n            // if the connection is null, we run through the behaviour\n            // we had in the past, which breaks down into trivial steps\n            // with the current implementation of getCallerInfo and\n            // updateDisplayForPerson.\n            CallerInfo info = PhoneUtils.getCallerInfo(getContext(), null /* conn */);\n            updateDisplayForPerson(info, Connection.PRESENTATION_ALLOWED, false, call);\n        } else {\n            if (DBG) log(\"  - CONN: \" + conn + \", state = \" + conn.getState());\n            int presentation = conn.getNumberPresentation();\n\n            // make sure that we only make a new query when the current\n            // callerinfo differs from what we've been requested to display.\n            boolean runQuery = true;\n            Object o = conn.getUserData();\n            if (o instanceof PhoneUtils.CallerInfoToken) {\n                runQuery = mPhotoTracker.isDifferentImageRequest(\n                        ((PhoneUtils.CallerInfoToken) o).currentInfo);\n            } else {\n                runQuery = mPhotoTracker.isDifferentImageRequest(conn);\n            }\n\n            // Adding a check to see if the update was caused due to a Phone number update\n            // or CNAP update. If so then we need to start a new query\n            if (phoneType == Phone.PHONE_TYPE_CDMA) {\n                Object obj = conn.getUserData();\n                String updatedNumber = conn.getAddress();\n                String updatedCnapName = conn.getCnapName();\n                CallerInfo info = null;\n                if (obj instanceof PhoneUtils.CallerInfoToken) {\n                    info = ((PhoneUtils.CallerInfoToken) o).currentInfo;\n                } else if (o instanceof CallerInfo) {\n                    info = (CallerInfo) o;\n                }\n\n                if (info != null) {\n                    if (updatedNumber != null && !updatedNumber.equals(info.phoneNumber)) {\n                        if (DBG) log(\"- displayMainCallStatus: updatedNumber = \"\n                                + updatedNumber);\n                        runQuery = true;\n                    }\n                    if (updatedCnapName != null && !updatedCnapName.equals(info.cnapName)) {\n                        if (DBG) log(\"- displayMainCallStatus: updatedCnapName = \"\n                                + updatedCnapName);\n                        runQuery = true;\n                    }\n                }\n            }\n\n            if (runQuery) {\n                if (DBG) log(\"- displayMainCallStatus: starting CallerInfo query...\");\n                PhoneUtils.CallerInfoToken info =\n                        PhoneUtils.startGetCallerInfo(getContext(), conn, this, call);\n                updateDisplayForPerson(info.currentInfo, presentation, !info.isFinal, call);\n            } else {\n                // No need to fire off a new query.  We do still need\n                // to update the display, though (since we might have\n                // previously been in the \"conference call\" state.)\n                if (DBG) log(\"- displayMainCallStatus: using data we already have...\");\n                if (o instanceof CallerInfo) {\n                    CallerInfo ci = (CallerInfo) o;\n                    // Update CNAP information if Phone state change occurred\n                    ci.cnapName = conn.getCnapName();\n                    ci.numberPresentation = conn.getNumberPresentation();\n                    ci.namePresentation = conn.getCnapNamePresentation();\n                    if (DBG) log(\"- displayMainCallStatus: CNAP data from Connection: \"\n                            + \"CNAP name=\" + ci.cnapName\n                            + \", Number/Name Presentation=\" + ci.numberPresentation);\n                    if (DBG) log(\"   ==> Got CallerInfo; updating display: ci = \" + ci);\n                    updateDisplayForPerson(ci, presentation, false, call);\n                } else if (o instanceof PhoneUtils.CallerInfoToken){\n                    CallerInfo ci = ((PhoneUtils.CallerInfoToken) o).currentInfo;\n                    if (DBG) log(\"- displayMainCallStatus: CNAP data from Connection: \"\n                            + \"CNAP name=\" + ci.cnapName\n                            + \", Number/Name Presentation=\" + ci.numberPresentation);\n                    if (DBG) log(\"   ==> Got CallerInfoToken; updating display: ci = \" + ci);\n                    updateDisplayForPerson(ci, presentation, true, call);\n                } else {\n                    Log.w(LOG_TAG, \"displayMainCallStatus: runQuery was false, \"\n                          + \"but we didn't have a cached CallerInfo object!  o = \" + o);\n                    // TODO: any easy way to recover here (given that\n                    // the CallCard is probably displaying stale info\n                    // right now?)  Maybe force the CallCard into the\n                    // \"Unknown\" state?\n                }\n            }\n        }\n    }\n\n    // In some states we override the \"photo\" ImageView to be an\n    // indication of the current state, rather than displaying the\n    // regular photo as set above.\n    updatePhotoForCallState(call);\n\n    // One special feature of the \"number\" text field: For incoming\n    // calls, while the user is dragging the RotarySelector widget, we\n    // use mPhoneNumber to display a hint like \"Rotate to answer\".\n    if (mRotarySelectorHintTextResId != 0) {\n        // Display the hint!\n        mPhoneNumber.setText(mRotarySelectorHintTextResId);\n        mPhoneNumber.setTextColor(getResources().getColor(mRotarySelectorHintColorResId));\n        mPhoneNumber.setVisibility(View.VISIBLE);\n        mLabel.setVisibility(View.GONE);\n    }\n    // If we don't have a hint to display, just don't touch\n    // mPhoneNumber and mLabel. (Their text / color / visibility have\n    // already been set correctly, by either updateDisplayForPerson()\n    // or updateDisplayForConference().)\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates the \"card title\" (and also elapsed time widget) based on\n * the current state of the call.\n */\n// TODO: it's confusing for updateCardTitleWidgets() and\n// getTitleForCallCard() to be separate methods, since they both\n// just list out the exact same \"phone state\" cases.\n// Let's merge the getTitleForCallCard() logic into here.\n", "func_signal": "private void updateCardTitleWidgets(Phone phone, Call call)", "code": "{\n    if (DBG) log(\"updateCardTitleWidgets(call \" + call + \")...\");\n    Call.State state = call.getState();\n    Context context = getContext();\n\n    // TODO: Still need clearer spec on exactly how title *and* status get\n    // set in all states.  (Then, given that info, refactor the code\n    // here to be more clear about exactly which widgets on the card\n    // need to be set.)\n\n    String cardTitle;\n    int phoneType = phone.getPhoneType();\n    if (phoneType == Phone.PHONE_TYPE_CDMA) {\n        if (!PhoneApp.getInstance().notifier.getIsCdmaRedialCall()) {\n            cardTitle = getTitleForCallCard(call);  // Normal \"foreground\" call card\n        } else {\n            cardTitle = context.getString(R.string.card_title_redialing);\n        }\n    } else if ((phoneType == Phone.PHONE_TYPE_GSM)\n            || (phoneType == Phone.PHONE_TYPE_SIP)) {\n        cardTitle = getTitleForCallCard(call);\n    } else {\n        throw new IllegalStateException(\"Unexpected phone type: \" + phoneType);\n    }\n    if (DBG) log(\"updateCardTitleWidgets: \" + cardTitle);\n\n    // Update the title and elapsed time widgets based on the current call state.\n    switch (state) {\n        case ACTIVE:\n        case DISCONNECTING:\n            final boolean bluetoothActive = mApplication.showBluetoothIndication();\n            int ongoingCallIcon = bluetoothActive ? R.drawable.ic_incall_ongoing_bluetooth\n                    : R.drawable.ic_incall_ongoing;\n            int connectedTextColor = bluetoothActive\n                    ? mTextColorConnectedBluetooth : mTextColorConnected;\n\n            if (phoneType == Phone.PHONE_TYPE_CDMA) {\n                // In normal operation we don't use an \"upper title\" at all,\n                // except for a couple of special cases:\n                if (mApplication.cdmaPhoneCallState.IsThreeWayCallOrigStateDialing()) {\n                    // Display \"Dialing\" while dialing a 3Way call, even\n                    // though the foreground call state is still ACTIVE.\n                    setUpperTitle(cardTitle, mTextColorDefaultPrimary, state);\n                } else if (PhoneUtils.isPhoneInEcm(phone)) {\n                    // In emergency callback mode (ECM), use a special title\n                    // that shows your own phone number.\n                    cardTitle = getECMCardTitle(context, phone);\n                    setUpperTitle(cardTitle, mTextColorDefaultPrimary, state);\n                } else {\n                    // Normal \"ongoing call\" state; don't use any \"title\" at all.\n                    clearUpperTitle();\n                }\n            } else if ((phoneType == Phone.PHONE_TYPE_GSM)\n                    || (phoneType == Phone.PHONE_TYPE_SIP)) {\n                // While in the DISCONNECTING state we display a\n                // \"Hanging up\" message in order to make the UI feel more\n                // responsive.  (In GSM it's normal to see a delay of a\n                // couple of seconds while negotiating the disconnect with\n                // the network, so the \"Hanging up\" state at least lets\n                // the user know that we're doing something.)\n                // TODO: consider displaying the \"Hanging up\" state for\n                // CDMA also if the latency there ever gets high enough.\n                if (state == Call.State.DISCONNECTING) {\n                    // Display the brief \"Hanging up\" indication.\n                    setUpperTitle(cardTitle, mTextColorDefaultPrimary, state);\n                } else {  // state == Call.State.ACTIVE\n                    // Normal \"ongoing call\" state; don't use any \"title\" at all.\n                    clearUpperTitle();\n                }\n            }\n\n            // Use the elapsed time widget to show the current call duration.\n            mElapsedTime.setVisibility(View.VISIBLE);\n            mElapsedTime.setTextColor(connectedTextColor);\n            long duration = CallTime.getCallDuration(call);  // msec\n            updateElapsedTimeWidget(duration / 1000);\n            // Also see onTickForCallTimeElapsed(), which updates this\n            // widget once per second while the call is active.\n            break;\n\n        case DISCONNECTED:\n            // Display \"Call ended\" (or possibly some error indication;\n            // see getCallFailedString()) in the upper title, in red.\n\n            // TODO: display a \"call ended\" icon somewhere, like the old\n            // R.drawable.ic_incall_end?\n\n            setUpperTitle(cardTitle, mTextColorEnded, state);\n\n            // In the \"Call ended\" state, leave the mElapsedTime widget\n            // visible, but don't touch it (so  we continue to see the elapsed time of\n            // the call that just ended.)\n            mElapsedTime.setVisibility(View.VISIBLE);\n            mElapsedTime.setTextColor(mTextColorEnded);\n            break;\n\n        case HOLDING:\n            // For a single call on hold, display the title \"On hold\" in\n            // orange.\n            // (But since the upper title overlaps the label of the\n            // Hold/Unhold button, we actually use the elapsedTime widget\n            // to display the title in this case.)\n\n            // TODO: display an \"On hold\" icon somewhere, like the old\n            // R.drawable.ic_incall_onhold?\n\n            clearUpperTitle();\n            mElapsedTime.setText(cardTitle);\n\n            // While on hold, the elapsed time widget displays an\n            // \"on hold\" indication rather than an amount of time.\n            mElapsedTime.setVisibility(View.VISIBLE);\n            mElapsedTime.setTextColor(mTextColorOnHold);\n            break;\n\n        default:\n            // All other states (DIALING, INCOMING, etc.) use the \"upper title\":\n            setUpperTitle(cardTitle, mTextColorDefaultPrimary, state);\n\n            // ...and we don't show the elapsed time.\n            mElapsedTime.setVisibility(View.INVISIBLE);\n            break;\n    }\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/**\n * Updates the UI for the state where an incoming call is ringing (or\n * call waiting), regardless of whether the phone's already offhook.\n */\n", "func_signal": "private void updateRingingCall(CallManager cm)", "code": "{\n    if (DBG) log(\"updateRingingCall()...\");\n\n    Call ringingCall = cm.getFirstActiveRingingCall();\n\n    // Display caller-id info and photo from the incoming call:\n    displayMainCallStatus(cm, ringingCall);\n\n    // And even in the Call Waiting case, *don't* show any info about\n    // the current ongoing call and/or the current call on hold.\n    // (Since the caller-id info for the incoming call totally trumps\n    // any info about the current call(s) in progress.)\n    displayOnHoldCallStatus(cm, null);\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/** Helper function to display the resource in the imageview AND ensure its visibility.*/\n", "func_signal": "private static final void showImage(ImageView view, int resource)", "code": "{\n    view.setImageResource(resource);\n    view.setVisibility(View.VISIBLE);\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "/** Helper function to display the drawable in the imageview AND ensure its visibility.*/\n", "func_signal": "private static final void showImage(ImageView view, Drawable drawable)", "code": "{\n    view.setImageDrawable(drawable);\n    view.setVisibility(View.VISIBLE);\n}", "path": "src\\com\\android\\phone\\CallCard.java", "repo_name": "cytown/Phone_gingerbread", "stars": 9, "license": "other", "language": "java", "size": 10250}
{"docstring": "// **********************************************************************\n// uploadToFMS: uploads details, handled via a background thread\n// Also checks the age and accuracy of the GPS data first\n// **********************************************************************\n", "func_signal": "private void uploadToFMS()", "code": "{\n    if (taskReportUpload != null && taskReportUpload.getStatus() == AsyncTask.Status.RUNNING) {\n        taskReportUpload.cancel(true);\n    }\n    taskReportUpload = new ReportUpload();\n    taskReportUpload.execute(null);\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\n\t// set up the page\n\tsetContentView(R.layout.details);\n\tnameET = (EditText) findViewById(R.id.name_text);\n\temailET = (EditText) findViewById(R.id.email_text);\n\tsubjectET = (EditText) findViewById(R.id.subject_text);\n\tsubmitButton = this.findViewById(R.id.submit_button);\n\n\t// set the button listeners\n\tsetListeners();\n\n\t// fill in name/email, if already defined\n\t// NB - from settings, rather than from bundle...\n\tSharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);\n\tname = settings.getString(\"myName\", \"\");\n\temail = settings.getString(\"myEmail\", \"\");\n\tnameET.setText(name);\n\temailET.setText(email);\n\n\textras = getIntent().getExtras();\n\tif (extras != null) {\n\t\t// Details extras\n\t\tsubject = extras.getString(\"subject\");\n\t\thavePicture = extras.getBoolean(\"photo\", havePicture);\n//\t\t\tLog.d(LOG_TAG, \"extras havePicture\" + havePicture);\n\t}\n\tif (subject != null) {\n\t\tsubjectET.setText(subject);\n\t}\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Details.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// **********************************************************************\n// onCreateDialog: Dialog warnings\n// **********************************************************************\n", "func_signal": "@Override\nprotected Dialog onCreateDialog(int id)", "code": "{\n\tswitch (id) {\n\tcase SUBJECT_WARNING:\n\t\treturn new AlertDialog.Builder(Details.this).setTitle(R.string.subject)\n\t\t\t\t.setPositiveButton(R.string.common_ok,\n\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\tint whichButton) {\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).setMessage(R.string.subject_warning).create();\n\tcase NAME_WARNING:\n\t\treturn new AlertDialog.Builder(Details.this)\n\t\t\t\t.setTitle(R.string.name)\n\t\t\t\t.setPositiveButton(R.string.common_ok,\n\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\tint whichButton) {\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t.setMessage(R.string.name_warning)\n\t\t\t\t.create();\n\n\tcase EMAIL_WARNING:\n\t\treturn new AlertDialog.Builder(Details.this)\n\t\t\t\t.setTitle(R.string.email)\n\t\t\t\t.setPositiveButton(R.string.common_ok,\n\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\tint whichButton) {\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t.setMessage(R.string.email_warning)\n\t\t\t\t.create();\n\n\t}\n\treturn null;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Details.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "/**\n * @param context\n * @param latitude\n * @param longitude\n * @return\n * @throws IOException\n * @todo fixme Webservice should implement HTTP GET resource for requesting categories ..\n */\n", "func_signal": "public static HttpResponse getCategories(Context context, double latitude, double longitude) throws IOException", "code": "{\n    Log.d(LOG_TAG, String.format(\"lat %s long %s\", latitude, longitude));\n    HttpParams params = new BasicHttpParams();\n    HttpConnectionParams.setConnectionTimeout(params, TIMEOUT_CONNECTION);\n\n    HttpClient httpClient = new DefaultHttpClient(params);\n\n    HttpPost httpPost = new HttpPost(context.getString(R.string.postURL));\n    httpPost.addHeader(\"User-Agent\", getUserAgent(context));\n\n    final String hack = \"hackForFetchingCategories\";\n    MultipartEntity reqEntity = new MultipartEntity();\n    Charset utf8 = Charset.forName(\"UTF-8\");\n    reqEntity.addPart(FORM_SERVICE, new StringBody(\"FiksGataMi4Android\", utf8));\n    reqEntity.addPart(FORM_CATEGORIES, new StringBody(\"1\", utf8));\n    reqEntity.addPart(FORM_SUBJECT, new StringBody(hack, utf8));\n    reqEntity.addPart(FORM_NAME, new StringBody(hack, utf8));\n    reqEntity.addPart(FORM_EMAIL, new StringBody(\"noreply@example.com\", utf8));\n    reqEntity.addPart(FORM_LATITUDE, new StringBody(String.valueOf(latitude), utf8));\n    reqEntity.addPart(FORM_LONGITUDE, new StringBody(String.valueOf(longitude), utf8));\n\n    httpPost.setEntity(reqEntity);\n    HttpResponse httpResponse = httpClient.execute(httpPost);\n\n    httpClient.getConnectionManager().shutdown();\n    return httpResponse;\n\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\utils\\HttpUtil.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "/**\n * getCategories from response string\n *\n * @param response\n * @return\n * @throws IOException\n */\n", "func_signal": "public static List<String> getCategoriesFromResponse(String response) throws IOException", "code": "{\n    String responsePrefixToRemove = \"CATEGORY: \";\n    List<String> result = new ArrayList<String>();\n\n    String[] rawResponseSplit = response.split(\"\\n\");\n    if (rawResponseSplit.length >= 2) { // makes sure there's entries in the response\n        for (int i = 1; i < rawResponseSplit.length; i++) { // skip first entry which is the SUCCESS boolean.\n            result.add(rawResponseSplit[i].replaceFirst(responsePrefixToRemove, \"\"));\n        }\n    }\n    return result;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\utils\\HttpUtil.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// disable the Back key in case things get submitted twice\n", "func_signal": "public boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n\tif (keyCode == KeyEvent.KEYCODE_BACK) {\n\t\tIntent i = new Intent(Success.this, Home.class);\n\t\tstartActivity(i);\n\t\tfinish(); // finish so we don't go back here\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Success.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// Called when the activity is first created\n", "func_signal": "@Override\npublic void onCreate(Bundle icicle)", "code": "{\n    super.onCreate(icicle);\n    setContentView(R.layout.home);\n    // Log.d(LOG_TAG, \"onCreate, havePicture = \" + havePicture);\n    settings = getSharedPreferences(PREFS_NAME, 0);\n    testProviders();\n\n    btnDetails = (Button) findViewById(R.id.details_button);\n    btnPicture = (Button) findViewById(R.id.camera_button);\n    btnReport = (Button) findViewById(R.id.report_button);\n    btnReport.setVisibility(View.GONE);\n    textProgress = (TextView) findViewById(R.id.progress_text);\n    textProgress.setVisibility(View.GONE);\n    progressLoading = findViewById(R.id.loading);\n\n    if (icicle != null) {\n        havePicture = icicle.getBoolean(\"photo\");\n        Log.d(LOG_TAG, \"icicle not null, havePicture = \" + havePicture);\n    } else {\n        Log.d(LOG_TAG, \"icicle null\");\n    }\n    extras = getIntent().getExtras();\n    checkBundle();\n    setListeners();\n\n    // Show update message - but not to new users\n    int vc = 0;\n    try {\n        vc = getPackageManager().getPackageInfo(getPackageName(), 0).versionCode;\n        versionName = getPackageManager().getPackageInfo(getPackageName(),\n                0).versionName;\n    } catch (NameNotFoundException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    // TODO - add this code next time!\n    boolean hasSeenUpdateVersion = settings.getBoolean(\n            \"hasSeenUpdateVersion\" + vc, false);\n    boolean hasSeenOldVersion = settings.getBoolean(\"hasSeenUpdateVersion\"\n            + (vc - 1), false);\n    if (!hasSeenUpdateVersion && hasSeenOldVersion) {\n        showDialog(UPON_UPDATE);\n        SharedPreferences.Editor editor = settings.edit();\n        editor.putBoolean(\"hasSeenUpdateVersion\" + vc, true);\n        editor.commit();\n    }\n\n    // TODO: Telephonymanager will probably not work on i.e tablets w/o gsm, check this\n    // Check country: show warning if not in Great Britain\n    TelephonyManager mTelephonyMgr = (TelephonyManager) this\n    .getSystemService(TELEPHONY_SERVICE);\n    String country = mTelephonyMgr.getNetworkCountryIso();\n    //Log.d(LOG_TAG, \"country = \" + country);\n    if (!(country.matches(\"no\"))) {\n        showDialog(COUNTRY_ERROR);\n    }\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// ****************************************************\n// setListeners - set the button listeners\n// ****************************************************\n", "func_signal": "private void setListeners()", "code": "{\n    btnDetails.setOnClickListener(new OnClickListener() {\n        public void onClick(View v) {\n            Intent i = new Intent(Home.this, Details.class);\n            extras.putString(\"name\", name);\n            extras.putString(\"email\", email);\n            extras.putString(\"subject\", subject);\n            extras.putBoolean(\"photo\", havePicture);\n\n            i.putExtras(extras);\n            startActivity(i);\n        }\n    });\n    btnPicture.setOnClickListener(new OnClickListener() {\n        public void onClick(View v) {\n            File photo = new File(\n                    Environment.getExternalStorageDirectory(),\n                    FiksGataMi.PHOTO_FILENAME);\n            if (photo.exists()) {\n                photo.delete();\n            }\n            Intent imageCaptureIntent = new Intent(\n                    MediaStore.ACTION_IMAGE_CAPTURE);\n            imageCaptureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri\n                    .fromFile(photo));\n            startActivityForResult(imageCaptureIntent, REQUEST_UPLOAD_PICTURE);\n        }\n    });\n    btnReport.setOnClickListener(new OnClickListener() {\n        public void onClick(View v) {\n            locationDetermined = true;\n            uploadToFMS();\n        }\n    });\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// TODO - add Bundles for these?\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n\tsuper.onCreateOptionsMenu(menu);\n\tMenuItem homeItem = menu.add(Menu.NONE, MENU_HOME, Menu.NONE, R.string.menu_home);\n\tMenuItem aboutItem = menu.add(Menu.NONE, MENU_HELP, Menu.NONE, R.string.menu_help);\n\taboutItem.setIcon(android.R.drawable.ic_menu_info_details);\n\thomeItem.setIcon(android.R.drawable.ic_menu_edit);\n\treturn true;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\About.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.success);\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Success.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// **********************************************************************\n// onCreateDialog: Dialog warnings\n// **********************************************************************\n", "func_signal": "@Override\nprotected Dialog onCreateDialog(int id)", "code": "{\n    switch (id) {\n        case COUNTRY_ERROR:\n            return new AlertDialog.Builder(Home.this)\n            .setTitle(R.string.dialog_country_error_title)\n            .setPositiveButton(R.string.common_ok,\n                    new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog,\n                        int whichButton) {\n                }\n            })\n            .setMessage(R.string.dialog_country_error)\n            .create();\n        case UPLOAD_ERROR:\n            return new AlertDialog.Builder(Home.this)\n            .setTitle(R.string.dialog_upload_error_title)\n            .setPositiveButton(R.string.common_ok,\n                    new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog,\n                        int whichButton) {\n                }\n            })\n            .setMessage(String.format(getString(R.string.dialog_upload_error), exception_string, serverResponse)).create();\n        case UPLOAD_ERROR_SERVER:\n            return new AlertDialog.Builder(Home.this)\n            .setTitle(R.string.dialog_upload_server_error_title)\n            .setPositiveButton(R.string.common_ok,\n                    new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog,\n                        int whichButton) {\n                }\n            })\n            .setMessage(String.format(getString(R.string.dialog_upload_server_error, serverResponse))).create();\n\n        case LOCATION_NOT_FOUND:\n            return new AlertDialog.Builder(Home.this)\n            .setTitle(R.string.dialog_gps_no_location_title)\n            .setPositiveButton(R.string.common_ok,\n                    new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog,\n                        int whichButton) {\n                }\n            })\n            .setMessage(R.string.dialog_gps_no_location)\n            .create();\n        case PHOTO_NOT_FOUND:\n            return new AlertDialog.Builder(Home.this).setTitle(R.string.dialog_picture_not_found_title)\n            .setPositiveButton(R.string.common_ok,\n                    new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog,\n                        int whichButton) {\n                }\n            }).setMessage(R.string.dialog_picture_not_found).create();\n        case UPON_UPDATE:\n            if (versionName == null) {\n                versionName = \"\";\n            }\n            return new AlertDialog.Builder(Home.this).setTitle(R.string.app_update__whats_new_title)\n            .setPositiveButton(R.string.common_ok,\n                    new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog,\n                        int whichButton) {\n                }\n            }).setMessage(String.format(getString(R.string.app_update__whats_new_details, versionName))).create();\n    }\n    return null;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "//@Override\n", "func_signal": "public void onBackPressed()", "code": "{\n    // TODO: This dosen't work - we are still sendt back to the last activity\n    // This will be called either automatically for you on 2.0\n    // or later, or by the code above on earlier versions of the\n    // platform.\n    finish(); // Close application on back-press\n    return;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// ****************************************************\n// checkBundle - check the extras that have been passed\n// is the user able to upload things yet, or not?\n// ****************************************************\n", "func_signal": "private void checkBundle()", "code": "{\n    // Log.d(LOG_TAG, \"checkBundle\");\n    // Get the status icons...\n    Resources res = getResources();\n    Drawable checked = res.getDrawable(R.drawable.done);\n    if (extras != null) {\n        // Log.d(LOG_TAG, \"Checking extras\");\n        // Details extras\n        name = extras.getString(\"name\");\n        email = extras.getString(\"email\");\n        subject = extras.getString(\"subject\");\n        if (!havePicture) {\n            havePicture = extras.getBoolean(\"photo\");\n        }\n        // Do we have the details?\n        if ((name != null) && (email != null) && (subject != null)) {\n            haveDetails = true;\n            // Log.d(LOG_TAG, \"Have all details\");\n            checked.setBounds(0, 0, checked.getIntrinsicWidth(), checked\n                    .getIntrinsicHeight());\n            // envelope.setBounds(0, 0, envelope.getIntrinsicWidth(),\n            // envelope\n            // .getIntrinsicHeight());\n            btnDetails.setText(String.format(getString(R.string.subject_details_added), subject));\n            btnDetails.setCompoundDrawables(null, null, checked, null);\n        } else {\n            // Log.d(LOG_TAG, \"Don't have details\");\n        }\n    } else {\n        extras = new Bundle();\n        // Log.d(LOG_TAG, \"no Bundle at all\");\n    }\n    // Log.d(LOG_TAG, \"havePicture = \" + havePicture);\n\n    // Do we have the photo?\n    if (havePicture) {\n\n        checked.setBounds(0, 0, checked.getIntrinsicWidth(), checked\n                .getIntrinsicHeight());\n        // camera.setBounds(0, 0, camera.getIntrinsicWidth(), camera\n        // .getIntrinsicHeight());\n        btnPicture.setCompoundDrawables(null, null, checked, null);\n        btnPicture.setText(R.string.picture_taken);\n    }\n    if (havePicture && haveDetails) {\n        textProgress.setVisibility(View.VISIBLE);\n        progressLoading.setVisibility(View.VISIBLE);\n    }\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// Save user's name and email, if already defined\n", "func_signal": "@Override\nprotected void onStop()", "code": "{\n\tsuper.onStop();\n\n\tname = nameET.getText().toString();\n\temail = emailET.getText().toString();\n\n\t// Save user preferences\n\tSharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);\n\tSharedPreferences.Editor editor = settings.edit();\n\teditor.putString(\"myName\", name);\n\teditor.putString(\"myEmail\", email);\n\n\t// Don't forget to commit your edits!!!\n\teditor.commit();\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Details.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// **********************************************************************\n// isValidEmailAddress: Check the email address is OK\n// **********************************************************************\n", "func_signal": "public static boolean isValidEmailAddress(String emailAddress)", "code": "{\n\t// TODO: Do we REALLY want to verify the email on the phone ?\n\tString emailRegEx;\n\tPattern pattern;\n\t// Regex for a valid email address\n\temailRegEx = \"^[A-Za-z0-9._%+\\\\-]+@[A-Za-z0-9.\\\\-]+\\\\.[A-Za-z]{2,4}$\";\n\t// Compare the regex with the email address\n\tpattern = Pattern.compile(emailRegEx);\n\tMatcher matcher = pattern.matcher(emailAddress);\n\tif (!matcher.find()) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Details.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// read the photo file into a byte array...\n", "func_signal": "public static byte[] getBytesFromFile(File file) throws IOException", "code": "{\n    InputStream is = new FileInputStream(file);\n\n    // Get the size of the file\n    long length = file.length();\n\n    // You cannot create an array using a long type.\n    // It needs to be an int type.\n    // Before converting to an int type, check\n    // to ensure that file is not larger than Integer.MAX_VALUE.\n    if (length > Integer.MAX_VALUE) {\n        // File is too large\n    }\n\n    // Create the byte array to hold the data\n    byte[] bytes = new byte[(int) length];\n\n    // Read in the bytes\n    int offset = 0;\n    int numRead = 0;\n    while (offset < bytes.length\n            && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {\n        offset += numRead;\n    }\n\n    // Ensure all the bytes have been read in\n    if (offset < bytes.length) {\n        throw new IOException(\"Could not completely read file \"\n                + file.getName());\n    }\n\n    // Close the input stream and return bytes\n    is.close();\n    return bytes;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// **********************************************************************\n// textFieldsAreValid: Make sure that fields aren't blank\n// **********************************************************************\n", "func_signal": "public static boolean textFieldsAreValid(String field)", "code": "{\n\tif (field == null || field.length() == 0 || field.trim().length() == 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Details.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// ****************************************************\n// Options menu functions\n// ****************************************************\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n\tsuper.onCreateOptionsMenu(menu);\n\tMenuItem helpItem = menu.add(Menu.NONE, MENU_HOME, Menu.NONE, R.string.menu_home);\n\thelpItem.setIcon(android.R.drawable.ic_menu_edit);\n\treturn true;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Success.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// TODO - add Bundles for these?\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n\tsuper.onCreateOptionsMenu(menu);\n\tMenuItem homeItem = menu.add(Menu.NONE, MENU_HOME, Menu.NONE, R.string.menu_home);\n\tMenuItem aboutItem = menu.add(Menu.NONE, MENU_ABOUT, Menu.NONE, R.string.menu_about);\n\thomeItem.setIcon(android.R.drawable.ic_menu_edit);\n\taboutItem.setIcon(android.R.drawable.ic_menu_info_details);\n\n\treturn true;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Help.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "// TODO - add Bundles for these?\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    super.onCreateOptionsMenu(menu);\n    MenuItem helpItem = menu.add(Menu.NONE, MENU_HELP, Menu.NONE, R.string.menu_help);\n    MenuItem aboutItem = menu.add(Menu.NONE, MENU_ABOUT, Menu.NONE, R.string.menu_about);\n    aboutItem.setIcon(android.R.drawable.ic_menu_info_details);\n    helpItem.setIcon(android.R.drawable.ic_menu_help);\n    return true;\n}", "path": "Fix My Street\\src\\no\\fiksgatami\\activities\\Home.java", "repo_name": "orjanv/fiksgatami", "stars": 8, "license": "None", "language": "java", "size": 1947}
{"docstring": "/**\n * On options item selected\n * \n * @param item\n */\n", "func_signal": "@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item)", "code": "{\n\t\tswitch (item.getItemId()) {\n\t\t\tcase R.id.refresh:\n\t\t\t\tadapter.refresh();\n\t\t\t\tbreak;\n\t\t\tcase R.id.filter:\n\t\t\t\tIntent intent = new Intent(MessagesActivity.this, FilterActivity.class);\n\t\t\t\tintent.putExtra(\"filter\", adapter.getFilter());\n\t\t\t\tstartActivityForResult(intent, SET_FILTER);\n\t\t\t\tbreak;\n\t\t}\n\t\treturn true;\n\t}", "path": "src\\com\\jimdo\\graylog\\view\\MessagesActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * On click close the activity\n */\n", "func_signal": "public void onClick(View v)", "code": "{\n\tandroid.util.Log.d(\"foo\", \"Close\");\n\tfinish();\n}", "path": "src\\com\\jimdo\\graylog\\view\\InspectActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Get Request Instance\n * \n * @return\n */\n", "func_signal": "public static Request getInstance()", "code": "{\n\tif (instance == null) {\n\t\tinstance = createInstance();\n\t}\n\t\n\treturn instance;\n}", "path": "src\\com\\jimdo\\graylog\\net\\Request.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * OnClickListener..\n */\n", "func_signal": "public void onClick(View v)", "code": "{\n\tLog.d(TAG, \"Login...\");\n\t\n\tString url = baseUrl.getText().toString(); \n\t\n\tUrlBuilder builder = UrlBuilder.getInstance();\n\tbuilder.setBaseUrl(url);\n\t\n\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getBaseContext());\n\tString httpUser = prefs.getString(\"httpUser\", \"\");\n\tString httpPassword = prefs.getString(\"httpPassword\", \"\");\n\t\n\tif (httpUser != \"\" && httpPassword != \"\") {\n\t\tRequest.createInstance().setHttpAuth(httpUser, httpPassword);\n\t}\n\t\n\tif (URLUtil.isValidUrl(url)) {\n\t\tdialog = ProgressDialog.show(this, \"Login..\", \"Trying to connect to server...\", true, false);\n\t\tnew Thread(this).start();\n\t} else {\n\t\tToast.makeText(this, \"Invalid Url '\" + url + \"'\", Toast.LENGTH_SHORT).show();\n\t}\n}", "path": "src\\com\\jimdo\\graylog\\view\\LoginActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Deserialize a single log message object\n * \n * @param object json node to deserialize\n * @return\n */\n", "func_signal": "private static LogMessage deserializeMessage(JSONObject object)", "code": "{\n\ttry {\n\t\tLogMessage message = new LogMessage();\n\t\t\n\t\tobject = object.getJSONObject(\"logentry\");\n\t\t\n\t\tmessage.setId(object.getInt(\"ID\"));\n\t\tmessage.setHost(object.getString(\"FromHost\"));\n\t\tmessage.setPriority(object.getInt(\"Priority\"));\n\t\tmessage.setRecievedAt(object.getString(\"ReceivedAt\"));\n\t\tmessage.setText(object.getString(\"Message\"));\n\t\t\n\t\treturn message;\n\t}\n\tcatch(Exception e) {\n\t\tLog.d(TAG, \"Exception: \" + e.getMessage());\n\t\treturn null;\n\t}\n}", "path": "src\\com\\jimdo\\graylog\\model\\ResponseDeserializer.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Execute a request\n * \n * @param url\n * @return Content of the response\n */\n", "func_signal": "public String execute(String url)", "code": "{\n\tLog.d(TAG, \"Request to \" + url);\n\t\n\ttry {\n\t\tHttpGet getRequest = new HttpGet(url);\n\t\tHttpResponse response = (HttpResponse) httpClient.execute(getRequest);\n\n\t\tHttpEntity entity = response.getEntity();\n\t\t\n\t\tif (entity != null) {\n\t\t\tInputStream stream = entity.getContent();\n\t\t\tHeader contentEncoding = response.getFirstHeader(\"Content-Encoding\");\n\t\t\tif (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase(\"gzip\")) {\n\t\t\t\tstream = new GZIPInputStream(stream);\n\t\t\t}\n\t\t\t\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n\t\t\t\n\t\t\tStringBuffer sb = new StringBuffer();\n\t\t\t\n\t\t\tString line = null;\n\t\t\t\n\t\t\twhile (null != (line = reader.readLine())) {\n\t\t\t\tsb.append(line + \"\\n\");\n\t\t\t}\n\t\t\t\n\t\t\t//Log.d(TAG, \"Response: \" + sb);\n\t\t\t\n\t\t\treturn sb.toString().trim();\n\t\t}\n\t} catch(Exception e) {\n\t\tLog.d(TAG, \"Exception: \" + e.getMessage());\n\t}\n\t\n\treturn null;\n}", "path": "src\\com\\jimdo\\graylog\\net\\Request.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Deserialize categories from JSON\n * \n * @param json Serialized categories (JSON)\n * \n * @return List of deserialized categories\n */\n", "func_signal": "public static ArrayList<Category> deserializeCategories(String json)", "code": "{\n\ttry {\n\t\tArrayList<Category> categories = new ArrayList<Category>();\n\t\tJSONArray array = new JSONArray(json);\n\n\t\tfor (int i = 0; i < array.length(); i++) {\n\t\t\tJSONObject object = array.getJSONObject(i).getJSONObject(\"category\");\n\t\t\tCategory category = new Category();\n\t\t\t\n\t\t\tcategory.setId(object.getInt(\"id\"));\n\t\t\tcategory.setHost(object.getString(\"filter_host\"));\n\t\t\tcategory.setTitle(object.getString(\"title\"));\n\t\t\tcategory.setMessage(object.getString(\"filter_message\"));\n\t\t\t\n\t\t\tcategories.add(category);\n\t\t}\n\t\t\n\t\treturn categories;\n\t} catch(Exception e) {\n\t\tLog.d(TAG, \"Exception: \" + e.getMessage());\n\t\treturn null;\n\t}\n}", "path": "src\\com\\jimdo\\graylog\\model\\ResponseDeserializer.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Options Menu\n * \n * @param menu \n */\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    MenuInflater inflater = getMenuInflater();\n    inflater.inflate(R.menu.login, menu);\n    return true;\n}", "path": "src\\com\\jimdo\\graylog\\view\\LoginActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Options Menu\n * \n * @param menu \n */\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    MenuInflater inflater = getMenuInflater();\n    inflater.inflate(R.menu.messages, menu);\n\n    return true;\n}", "path": "src\\com\\jimdo\\graylog\\view\\MessagesActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Apply filter to Url\n */\n", "func_signal": "private String applyFilter(Filter filter, String url)", "code": "{\n\tif (filter != null) {\n\t\tif (!\"\".equals(filter.getHost())) {\n\t\t\turl += \"&filter[host]=\" + filter.getHost();\n\t\t}\n\t\t\n\t\tif (!\"\".equals(filter.getMessage())) {\n\t\t\turl += \"&filter[message]=\" + filter.getMessage();\n\t\t}\n\t}\n\t\n\treturn url;\n}", "path": "src\\com\\jimdo\\graylog\\net\\UrlBuilder.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Get priority as human readable text\n * \n * @param priority\n * @return The priority as String\n */\n", "func_signal": "public static String getReadable(int priority)", "code": "{\n\tswitch (priority)\n\t{\n\t\tcase EMERGENCY:\n\t\t\treturn \"Emergency\";\n\t\tcase ALERT:\n\t\t\treturn \"Alert\";\n\t\tcase CRITICAL:\n\t\t\treturn \"Critical\";\n\t\tcase ERROR:\n\t\t\treturn \"Error\";\n\t\tcase WARNING:\n\t\t\treturn \"Warning\";\n\t\tcase NOTICE:\n\t\t\treturn \"Notice\";\n\t\tcase INFO:\n\t\t\treturn \"Info\";\n\t\tcase DEBUG:\n\t\t\treturn \"Debug\";\n\t\tdefault:\n\t\t\treturn \"Unknown\";\n\t}\n}", "path": "src\\com\\jimdo\\graylog\\model\\Priority.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Set Credentials for HTTPAuth\n */\n", "func_signal": "public void setHttpAuth(String username, String password)", "code": "{\n\tUsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n\t\n\tBasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n        credentialsProvider.setCredentials(AuthScope.ANY, credentials);\n        \n        httpClient.setCredentialsProvider(credentialsProvider); \n}", "path": "src\\com\\jimdo\\graylog\\net\\Request.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Get UrlBuilder Instance\n */\n", "func_signal": "public static UrlBuilder getInstance()", "code": "{\n\tif (instance == null) {\n\t\tinstance = new UrlBuilder();\n\t}\n\t\n\treturn instance;\n}", "path": "src\\com\\jimdo\\graylog\\net\\UrlBuilder.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Deserializes log message from JSON\n * \n * @param json Serialized log messages (JSON)\n * \n * @return List of deserialized log messages\n */\n", "func_signal": "public static ArrayList<LogMessage> deserializeLogMessages(String json)", "code": "{\n\ttry {\n\t\tArrayList<LogMessage> messages = new ArrayList<LogMessage>();\n\t\tJSONArray array = new JSONArray(json);\n\n\t\tfor (int i = 0; i < array.length(); i++) {\n\t\t\tJSONObject object  = array.getJSONObject(i);\n\t\t\tmessages.add(deserializeMessage(object));\n\t\t}\n\t\t\n\t\treturn messages;\n\t} catch(Exception e) {\n\t\tLog.d(TAG, \"Exception: \" + e.getMessage());\n\t\treturn null;\n\t}\n}", "path": "src\\com\\jimdo\\graylog\\model\\ResponseDeserializer.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Thread for login\n */\n", "func_signal": "public void run()", "code": "{\n\tUrlBuilder builder = UrlBuilder.getInstance();\n\tString response = Request.getInstance().execute(builder.getPingUrl());\n\t\n\tif (response != null && response.equals(\"GrayLog/Pong\")) {\n\t\t// Login successful\n\t\thandler.sendEmptyMessage(1);\n\t} else {\n\t\t// Login failed\n\t\thandler.sendEmptyMessage(0);\n\t}\n\t\n\tdialog.dismiss();\n}", "path": "src\\com\\jimdo\\graylog\\view\\LoginActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * On options item selected\n * \n * @param item\n */\n", "func_signal": "@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item)", "code": "{\n\t\tswitch (item.getItemId()) {\n\t\t\tcase R.id.settings:\n\t\t\t\tstartActivity(new Intent(LoginActivity.this, SettingsActivity.class));\n\t\t\t\tbreak;\n\t\t\tcase R.id.about:\n\t\t\t\tstartActivity(new Intent(LoginActivity.this, AboutActivity.class));\n\t\t\t\tbreak;\n\t\t\tcase R.id.exit:\n\t\t\t\tthis.finish();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn true;\n\t}", "path": "src\\com\\jimdo\\graylog\\view\\LoginActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Deserialize dashboard from JSON\n * \n * @param json Serialized dashboard (JSON)\n * \n * @return deserialized Dashboard\n */\n", "func_signal": "public static Dashboard deserializeDashboard(String json)", "code": "{\n\ttry {\n\t\tJSONObject object = new JSONObject(json);\n\t\t\n\t\tDashboard dashboard = new Dashboard();\n\t\tdashboard.setTimeSpan(object.getInt(\"timespan\"));\n\t\tdashboard.setLastMessage(deserializeMessage(object.getJSONObject(\"last_message\")));\n\t\tdashboard.setMessages(object.getInt(\"messages\"));\n\t\tdashboard.setStatus(object.getString(\"status\"));\n\n\t\treturn dashboard;\n\t} catch(Exception e) {\n\t\tLog.d(TAG, \"Exception: \" + e.getMessage());\n\t\treturn null;\n\t}\n}", "path": "src\\com\\jimdo\\graylog\\model\\ResponseDeserializer.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * On filter set\n */\n", "func_signal": "public void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n\tif (requestCode == SET_FILTER) {\n\t\tif (resultCode == RESULT_OK) {\n\t\t\tadapter.setFilter((Filter) data.getExtras().get(\"filter\"));\n\t\t\tadapter.refresh();\n\t\t}\n\t}\n}", "path": "src\\com\\jimdo\\graylog\\view\\MessagesActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Set Base URL to Graylog\n * \n * @param baseUrl The URL to Graylog\n */\n", "func_signal": "public void setBaseUrl(String baseUrl)", "code": "{\n\tif (baseUrl.length() > 0 && baseUrl.charAt(baseUrl.length() - 1) !=  '/') {\n\t\tbaseUrl = baseUrl + '/'; \n\t}\n\t\n\tthis.baseUrl = baseUrl;\n}", "path": "src\\com\\jimdo\\graylog\\net\\UrlBuilder.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Will be called by the login marvinthread on failure\n */\n", "func_signal": "public void loginFailed()", "code": "{\n\tString baseUrl  = this.baseUrl.getText().toString();\n\tToast.makeText(this, \"Can't connect to server '\" + baseUrl + \"'\", Toast.LENGTH_SHORT).show();\n}", "path": "src\\com\\jimdo\\graylog\\view\\LoginActivity.java", "repo_name": "pocmo/Graylog-Android", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 536}
{"docstring": "/**\n * Returns the content panel of the window. The first call creates the panel\n * and the contained components.\n * \n * @return Content panel of window.\n */\n", "func_signal": "private JPanel createContentPane()", "code": "{\n    if (contentPane == null) {\n        contentPane = new JPanel();\n        contentPane.setLayout(new BorderLayout());\n        contentPane.add(getMapView(), BorderLayout.CENTER);\n        contentPane.add(getSidePanel(), BorderLayout.EAST);\n    }\n    return contentPane;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MainFrame.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/*\n * (non-Javadoc)\n * @see net.sourcewalker.fakegps.data.IRoute#unpause()\n */\n", "func_signal": "@Override\npublic final void unpause()", "code": "{\n    state = RouteState.RUNNING;\n    model.notifyRouteStateChange();\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\data\\SimpleRoute.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Create a new instance of this class working with the provided map and\n * model.\n * \n * @param mapKit\n *            Map to use.\n * @param dataModel\n *            Model to modify.\n */\n", "func_signal": "public MapMouseListener(final JXMapKit mapKit, final IDataModel dataModel)", "code": "{\n    map = mapKit;\n    model = dataModel;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MapMouseListener.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Returns true, if the end of a segment is reached.\n * \n * @param end\n *            Endpoint of segment.\n * @return True, if end of segment is reached.\n */\n", "func_signal": "private boolean legEndReached(final GpsWaypoint end)", "code": "{\n    if (distance(currentPosition, end.getPosition()) < (2 * speed)) {\n        return true;\n    }\n    return false;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\data\\SimpleRoute.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Returns the side panel. The first call creates the panel.\n * \n * @return Side panel\n */\n", "func_signal": "private JPanel getSidePanel()", "code": "{\n    if (sidePanel == null) {\n        sidePanel = new SidePanel(getWaypointModel());\n    }\n    return sidePanel;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MainFrame.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Creates a new instance of the panel using the provided data model.\n * \n * @param dataModel\n *            Data model to use.\n */\n", "func_signal": "public SidePanel(final IDataModel dataModel)", "code": "{\n    model = dataModel;\n\n    BoxLayout layout = new BoxLayout(this, BoxLayout.Y_AXIS);\n    setLayout(layout);\n    add(getWaypointPanel());\n    add(getRoutePanel());\n    add(getDevicePanel());\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\SidePanel.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.lang.Thread#run()\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    if (waypointList.size() > 1) {\n        fireRouteStarted();\n        for (int legStart = 0;\n             legStart < waypointList.size() - 1;\n             legStart++) {\n            GpsWaypoint start = waypointList.get(legStart);\n            GpsWaypoint end = waypointList.get(legStart + 1);\n            currentPosition = new GeoPosition(start.getLatitude(),\n                    start.getLongitude());\n            while (state != RouteState.STOPPED && !legEndReached(end)) {\n                fireNewLocation(currentPosition);\n                GeoPosition speedVector = getSpeedVector(start, end);\n                currentPosition = new GeoPosition(currentPosition\n                        .getLatitude()\n                        + speedVector.getLatitude(), currentPosition\n                        .getLongitude()\n                        + speedVector.getLongitude());\n                try {\n                    do {\n                        Thread.sleep(TICK_WAIT);\n                    } while (state == RouteState.PAUSED);\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n    fireRouteEnded();\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\data\\SimpleRoute.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Creates the resource map from the properties file.\n */\n", "func_signal": "private void createResourceMap()", "code": "{\n    resourceMap = Application.getInstance().getContext().getResourceMap(\n            MainFrame.class);\n    resourceMap.injectComponents(this);\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MainFrame.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Calculates the distance between two points.\n * \n * @param a\n *            One point.\n * @param b\n *            Another point.\n * @return Distance between the two points.\n */\n", "func_signal": "private double distance(final GeoPosition a, final GeoPosition b)", "code": "{\n    double latDiff = b.getLatitude() - a.getLatitude();\n    double lonDiff = b.getLongitude() - a.getLongitude();\n    return Math.sqrt(Math.pow(latDiff, 2) + Math.pow(lonDiff, 2));\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\data\\SimpleRoute.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Calculates the speed vector pointing from the start to the endpoint.\n * \n * @param start\n *            Startpoint of segment.\n * @param end\n *            Endpoint of segment.\n * @return Speed vector pointing from start to end.\n */\n", "func_signal": "private GeoPosition getSpeedVector(final GpsWaypoint start,\n        final GpsWaypoint end)", "code": "{\n    double latDiff = end.getLatitude() - start.getLatitude();\n    double lonDiff = end.getLongitude() - start.getLongitude();\n    double length = Math.sqrt(Math.pow(latDiff, 2)\n            + Math.pow(lonDiff, 2));\n    return new GeoPosition(latDiff / length * speed, lonDiff / length\n            * speed);\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\data\\SimpleRoute.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Returns the application data model. The first call to the function\n * creates the model.\n * \n * @return Application data model.\n */\n", "func_signal": "private IDataModel getWaypointModel()", "code": "{\n    if (waypointModel == null) {\n        waypointModel = new WaypointModel();\n        waypointModel.addChangeListener(new ModelListener());\n        waypointModel.addToolListener(new ToolListener());\n    }\n    return waypointModel;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MainFrame.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Returns the panel used for interaction with the device emulator. The\n * panel is created in the first method call.\n * \n * @return Device panel.\n */\n", "func_signal": "private DevicePanel getDevicePanel()", "code": "{\n    if (devicePanel == null) {\n        devicePanel = new DevicePanel(model);\n    }\n    return devicePanel;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\SidePanel.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Create a new application main window.\n */\n", "func_signal": "public MainFrame()", "code": "{\n    super();\n\n    setName(\"mainFrame\");\n    setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n    setMinimumSize(new Dimension(MIN_WIDTH, MIN_HEIGHT));\n\n    setContentPane(createContentPane());\n\n    createResourceMap();\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MainFrame.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/*\n * (non-Javadoc)\n * @see net.sourcewalker.fakegps.data.IRoute#pause()\n */\n", "func_signal": "@Override\npublic final void pause()", "code": "{\n    state = RouteState.PAUSED;\n    model.notifyRouteStateChange();\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\data\\SimpleRoute.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/*\n * (non-Javadoc)\n * @see net.sourcewalker.fakegps.data.MapToolListener#toolChanged(net.\n * sourcewalker.fakegps.data.MapTool)\n */\n", "func_signal": "@Override\npublic void toolChanged(final MapTool currentTool)", "code": "{\n    switch (currentTool) {\n    case ADDPOINT:\n        getMapView().getMainMap().setCursor(\n                Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\n        break;\n    case NULL:\n        getMapView().getMainMap().setCursor(Cursor.getDefaultCursor());\n        break;\n    default:\n        break;\n    }\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MainFrame.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)\n */\n", "func_signal": "@Override\npublic final void mouseClicked(final MouseEvent e)", "code": "{\n    Point2D clickPoint = new Point(e.getX(), e.getY());\n    switch (model.getCurrentTool()) {\n    case ADDPOINT:\n        GeoPosition geoPoint = map.getMainMap().convertPointToGeoPosition(\n                clickPoint);\n        GpsWaypoint newWp = new GpsWaypoint(geoPoint);\n        model.addWaypoint(newWp);\n        model.setCurrentTool(MapTool.ADDPOINT);\n        break;\n    case REMOVEPOINT:\n        for (GpsWaypoint wp : model.getWaypoints()) {\n            Point2D wpScreen = map.getMainMap().convertGeoPositionToPoint(\n                    wp.getPosition());\n            if (clickPoint.distance(wpScreen) < REMOVE_DISTANCE) {\n                model.removeWaypoint(wp);\n                break;\n            }\n        }\n        break;\n    default:\n        break;\n    }\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MapMouseListener.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Returns the map view control. The first call creates the control.\n * \n * @return Map view control.\n */\n", "func_signal": "private JXMapKit getMapView()", "code": "{\n    if (mapKit == null) {\n        mapKit = new JXMapKit();\n        mapKit.setName(\"mapKit\");\n\n        mapKit.setDefaultProvider(JXMapKit.DefaultProviders.OpenStreetMaps);\n        mapKit.setAddressLocationShown(false);\n        mapKit.getMainMap().setOverlayPainter(\n                new RoutePainter(getWaypointModel()));\n        mapKit.getMainMap().addMouseListener(\n                new MapMouseListener(mapKit, waypointModel));\n    }\n    return mapKit;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\MainFrame.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Create a new route controller for the list of waypoints.\n * \n * @param dataModel\n *            Model to use for events.\n * @param waypoints\n *            Waypoints to use for route.\n */\n", "func_signal": "public SimpleRoute(final IDataModel dataModel,\n        final List<GpsWaypoint> waypoints)", "code": "{\n    model = dataModel;\n    waypointList = new ArrayList<GpsWaypoint>(waypoints);\n    speed = dataModel.getRouteSpeed();\n    state = RouteState.RUNNING;\n    worker = new RouteThread();\n    worker.start();\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\data\\SimpleRoute.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Returns the panel used for modifying the waypoints.\n * \n * @return Waypoint panel.\n */\n", "func_signal": "private WaypointPanel getWaypointPanel()", "code": "{\n    if (waypointPanel == null) {\n        waypointPanel = new WaypointPanel(model);\n    }\n    return waypointPanel;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\SidePanel.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Returns the panel used for interaction with the route controller. The\n * panel is created in the first method call.\n * \n * @return Route panel.\n */\n", "func_signal": "private RoutePanel getRoutePanel()", "code": "{\n    if (routePanel == null) {\n        routePanel = new RoutePanel(model);\n    }\n    return routePanel;\n}", "path": "src\\main\\java\\net\\sourcewalker\\fakegps\\gui\\SidePanel.java", "repo_name": "xperimental/fakegps", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 163}
{"docstring": "/**\n * Bind to the service\n */\n", "func_signal": "private void doBindService()", "code": "{\n    if (bound == false) {\n        log.info(\"Binding to Fluid Nexus Network Service\");\n        Intent i = new Intent(this, NetworkService.class);\n        startService(i);\n        bindService(i, networkServiceConnection, Context.BIND_AUTO_CREATE);\n        bound = true;\n    }\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle icicle)", "code": "{\n    super.onCreate(icicle);\n\n    // Load the libs necessary for sqlcipher\n    SQLiteDatabase.loadLibs(this);\n\n    /*\n    if (messagesProviderHelper == null) {\n        messagesProviderHelper = new MessagesProviderHelper(this);\n    }\n    */\n\n    setContentView(R.layout.message_list);\n    registerForContextMenu(getListView());\n\n\n    // setup bluetooth adapter\n    bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\n\n    // if it's not available, let user know\n    if (bluetoothAdapter == null) {\n        Toast.makeText(this, \"Bluetooth is not available; sending and receiving messages will not be possible\", Toast.LENGTH_LONG).show();\n    }\n\n    // Create our attachments dir            \n    // TODO\n    // Make this configurable to SD card\n    File dataDir = Environment.getExternalStorageDirectory();\n    attachmentsDir = new File(dataDir.getAbsolutePath() + \"/FluidNexusAttachments\");\n    attachmentsDir.mkdirs();\n\n    setupPreferences();\n\n\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method to create our really blacklist dialog\n */\n", "func_signal": "private AlertDialog reallyUnblacklistDialog()", "code": "{\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setMessage(R.string.really_unblacklist_dialog)\n        .setCancelable(false)\n        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n                ContentValues values = new ContentValues();\n                values.put(MessagesProviderHelper.KEY_BLACKLIST, 0);\n                messagesProviderHelper.updateItemByID(currentRowID, values);\n\n                currentRowID = -1;\n                fillListView(VIEW_MODE);\n                toast = Toast.makeText(getApplicationContext(), R.string.toast_message_unblacklisted, Toast.LENGTH_SHORT);\n                toast.show();\n            }\n        })\n        .setNegativeButton(\"No\", null);\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Show the ask for passphrase dialog box\n */\n", "func_signal": "private AlertDialog passphraseDialog()", "code": "{\n    LayoutInflater factory = LayoutInflater.from(this);\n    final View textEntryView = factory.inflate(R.layout.ask_for_passphrase, null);\n    AlertDialog.Builder builder = new AlertDialog.Builder(this)\n        .setTitle(getString(R.string.app_name))\n        .setView(textEntryView)\n        .setPositiveButton(\"ok\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int whichButton) {\n                EditText et = ((EditText) textEntryView.findViewById(R.id.ask_for_passphrase_edit));\n                passphrase = et.getText().toString();\n                unlockDatabase(passphrase);\n\n                et.setText(\"\");\n                System.gc();\n            }\n        })\n        .setNegativeButton(\"cancel\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int whichButton) {\n\n            }\n        });\n\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method to create our lack of nexus key or secret dialog\n */\n", "func_signal": "private AlertDialog noKeyDialog()", "code": "{\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setMessage(R.string.no_key_dialog)\n        .setCancelable(false)\n        .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n            }\n        });\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method to create our really blacklist dialog\n */\n", "func_signal": "private AlertDialog reallyBlacklistDialog()", "code": "{\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setMessage(R.string.really_blacklist_dialog)\n        .setCancelable(false)\n        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n                ContentValues values = new ContentValues();\n                values.put(MessagesProviderHelper.KEY_BLACKLIST, 1);\n                messagesProviderHelper.updateItemByID(currentRowID, values);\n\n                currentRowID = -1;\n                fillListView(VIEW_MODE);\n                toast = Toast.makeText(getApplicationContext(), R.string.toast_message_blacklisted, Toast.LENGTH_SHORT);\n                toast.show();\n            }\n        })\n        .setNegativeButton(\"No\", null);\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method to create our lack of nexus key or secret dialog\n */\n", "func_signal": "private AlertDialog disclaimerDialog()", "code": "{\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setMessage(R.string.disclaimer_dialog)\n        .setCancelable(false)\n        .setPositiveButton(R.string.understand_answer, new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n            }\n        });\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Save the state of our edited message in the database\n */\n", "func_signal": "private int saveState()", "code": "{\n    String title = titleEditText.getText().toString();\n    String message = messageEditText.getText().toString();\n\n    ContentValues values = new ContentValues();\n    values.put(MessagesProviderHelper.KEY_TITLE, title);\n    values.put(MessagesProviderHelper.KEY_CONTENT, message);\n    values.put(MessagesProviderHelper.KEY_MESSAGE_HASH, MessagesProviderHelper.makeSHA256(title + message));\n    values.put(MessagesProviderHelper.KEY_PUBLIC, publicMessage);\n    values.put(MessagesProviderHelper.KEY_PRIORITY, priorityType);\n\n    if (attachmentPath != null) {\n        if (attachmentPath.equals(\"\")) {\n            values.put(MessagesProviderHelper.KEY_ATTACHMENT_PATH, \"\");\n            values.put(MessagesProviderHelper.KEY_ATTACHMENT_ORIGINAL_FILENAME, \"\");\n\n        } else {\n            File file = new File(attachmentPath);\n            values.put(MessagesProviderHelper.KEY_ATTACHMENT_PATH, attachmentPath);\n            values.put(MessagesProviderHelper.KEY_ATTACHMENT_ORIGINAL_FILENAME, file.getName());\n            values.put(MessagesProviderHelper.KEY_TYPE, attachmentType);\n        }\n    }\n\n    return messagesProviderHelper.updateItemByID(id, values);\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\EditMessage.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Rekey the database with the new passphrase\n */\n", "func_signal": "private void rekeyDatabase(String passphrase)", "code": "{\n    try {\n        messagesProviderHelper.rekey(passphrase);\n    } catch (Exception e) {\n        Toast.makeText(this, R.string.toast_unable_to_rekey, Toast.LENGTH_LONG);\n        log.error(\"Error rekeying database: \" + e.getMessage());\n    }\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method to create our really delete dialog\n */\n", "func_signal": "private AlertDialog reallyDeleteDialog()", "code": "{\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setMessage(\"Are you sure you want to delete this message?\")\n        .setCancelable(false)\n        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n                Cursor localCursor = messagesProviderHelper.returnItemByID(currentRowID);\n                startManagingCursor(localCursor);\n                String attachmentPath = localCursor.getString(localCursor.getColumnIndex(MessagesProviderHelper.KEY_ATTACHMENT_PATH));\n                boolean mine = localCursor.getInt(localCursor.getColumnIndex(MessagesProviderHelper.KEY_MINE)) > 0;\n                \n                if ((!(attachmentPath.equals(\"\"))) && (!mine)) {\n                    File f = new File(attachmentPath);\n                    f.delete();\n                }\n\n                messagesProviderHelper.deleteById(currentRowID);\n\n                try {\n                    // Send message to service to note that a new message has been created\n                    Message msg = Message.obtain(null, MSG_MESSAGE_DELETED);\n                    networkService.send(msg);\n                } catch (RemoteException e) {\n                    // Here, the service has crashed even before we were able to connect\n                }\n\n                currentRowID = -1;\n                fillListView(VIEW_MODE);\n                toast = Toast.makeText(getApplicationContext(), R.string.toast_message_deleted, Toast.LENGTH_SHORT);\n                toast.show();\n            }\n        })\n        .setNegativeButton(\"No\", null);\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Unlock the database with the provided passphrase \n */\n", "func_signal": "private void unlockDatabase(String passphrase)", "code": "{\n    if (messagesProviderHelper == null) {\n        messagesProviderHelper = MessagesProviderHelper.getInstance(this);\n    }\n\n    try {\n        messagesProviderHelper.open(passphrase);\n        fillListView(VIEW_MODE);\n\n        // Bind to the network service\n        doBindService();\n    } catch (Exception e) {\n        Toast.makeText(this, R.string.toast_unable_to_unlock, Toast.LENGTH_LONG).show();\n        log.error(\"Error opening database: \" + e);\n        passphraseDialog().show();\n    }\n\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/*\n * Context menu code from:\n * http://stackoverflow.com/questions/6205808/how-to-handle-long-tap-on-listview-item\n */\n", "func_signal": "@Override\npublic void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)", "code": "{\n    super.onCreateContextMenu(menu, v, menuInfo);\n    AdapterContextMenuInfo info = (AdapterContextMenuInfo) menuInfo;\n    currentRowID = info.id;\n    \n    Cursor localCursor = messagesProviderHelper.returnItemByID(currentRowID);\n    startManagingCursor(localCursor);\n    menu.setHeaderTitle(localCursor.getString(localCursor.getColumnIndexOrThrow(MessagesProviderHelper.KEY_TITLE)));\n    int mine = localCursor.getInt(localCursor.getColumnIndexOrThrow(MessagesProviderHelper.KEY_MINE));\n\n    if (VIEW_MODE == VIEW_BLACKLIST) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.message_list_context_unblacklist, menu);\n    } else {\n        if (mine == 0) {\n            MenuInflater inflater = getMenuInflater();\n            inflater.inflate(R.menu.message_list_context_noedit, menu);\n        } else {\n            MenuInflater inflater = getMenuInflater();\n            inflater.inflate(R.menu.message_list_context, menu);\n        }\n    }\n\n    //localCursor.close();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Unbind to the service\n */\n", "func_signal": "private void doUnbindService()", "code": "{\n    if ((networkService != null) && (bound == true)) {\n        try {\n            Message msg = Message.obtain(null, NetworkService.MSG_UNREGISTER_CLIENT);\n            msg.replyTo = messenger;\n            networkService.send(msg);\n\n            msg = Message.obtain(null, STOP_SERVICE);\n            msg.replyTo = messenger;\n            networkService.send(msg);\n\n        } catch (RemoteException e) {\n            // nothing special to do if the service has already stopped for some reason\n        }\n\n        unbindService(networkServiceConnection);\n        bound = false;\n        log.info(\"Unbound to the Fluid Nexus Service\");\n    }\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Get an actual path from a content URI\n */\n", "func_signal": "private String getRealPathFromURI(Uri contentUri, int type)", "code": "{\n    String[] proj = new String[1];\n    String id;\n    if (type == SELECT_AUDIO) {\n        proj[0] = MediaStore.Audio.Media.DATA;\n        id = MediaStore.Audio.Media.DATA;\n    } else if (type == SELECT_IMAGE) {\n        proj[0] = MediaStore.Images.Media.DATA;\n        id = MediaStore.Images.Media.DATA;\n    } else if (type == SELECT_VIDEO) {\n        proj[0] = MediaStore.Video.Media.DATA;\n        id = MediaStore.Video.Media.DATA;\n    } else {\n        proj[0] = MediaStore.Images.Media.DATA;\n        id = MediaStore.Images.Media.DATA;\n    }\n\n    Cursor cursor = managedQuery(contentUri, proj, null, null, null);\n    int column_index = cursor.getColumnIndexOrThrow(id);\n    cursor.moveToFirst();\n    String result = cursor.getString(column_index);\n    cursor.close();\n    return result;\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\EditMessage.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Show the change passphrase dialog box\n */\n", "func_signal": "private AlertDialog changePassphraseDialog()", "code": "{\n    LayoutInflater factory = LayoutInflater.from(this);\n    final View textEntryView = factory.inflate(R.layout.change_passphrase, null);\n    AlertDialog.Builder builder = new AlertDialog.Builder(this)\n        .setTitle(getString(R.string.app_name))\n        .setView(textEntryView)\n        .setPositiveButton(\"ok\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int whichButton) {\n                EditText et = ((EditText) textEntryView.findViewById(R.id.ask_for_passphrase_edit));\n                passphrase = et.getText().toString();\n\n                rekeyDatabase(passphrase);\n\n                et.setText(\"\");\n                System.gc();\n            }\n        })\n        .setNegativeButton(\"cancel\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int whichButton) {\n\n            }\n        });\n\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method of creating dialogs for this activity\n * @param id ID of the dialog to create\n */\n", "func_signal": "protected Dialog onCreateDialog(int id)", "code": "{\n    Dialog dialog;\n\n    switch (id) {\n        case DIALOG_SAVE:\n            dialog = saveDialog();\n            break;\n        default:\n            dialog = null;\n    }\n\n    return dialog;\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\EditMessage.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Check if the text has changed\n * @return true if it has, false otherwise\n */\n", "func_signal": "private boolean checkIfTextChanged()", "code": "{\n    String title = titleEditText.getText().toString();\n    String message = messageEditText.getText().toString();\n    boolean checked = checkbox.isChecked();\n\n    if (!(title.equals(originalTitle))) {\n        return true;\n    }\n\n    if (!(message.equals(originalMessage))) {\n        return true;\n    }\n\n    if (attachmentPath != originalAttachmentPath) {\n        return true;\n    }\n\n    if (checked != originalPublic) {\n        return true;\n    }\n\n    return false;\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\EditMessage.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method of creating dialogs for this activity\n * @param id ID of the dialog to create\n */\n", "func_signal": "protected Dialog onCreateDialog(int id)", "code": "{\n    Dialog dialog;\n\n    switch (id) {\n        case DIALOG_REALLY_DELETE:\n            dialog = reallyDeleteDialog();\n            break;\n        case DIALOG_REALLY_BLACKLIST:\n            dialog = reallyBlacklistDialog();\n            break;\n        case DIALOG_REALLY_UNBLACKLIST:\n            dialog = reallyUnblacklistDialog();\n            break;\n        case DIALOG_NO_KEY:\n            dialog = noKeyDialog();\n            break;\n        case DIALOG_DISCLAIMER:\n            dialog = disclaimerDialog();\n            break;\n        case DIALOG_PASSPHRASE:\n            dialog = passphraseDialog();\n            break;\n        case DIALOG_CHANGE_PASSPHRASE:\n            dialog = changePassphraseDialog();\n            break;\n        default:\n            dialog = null;\n    }\n\n    return dialog;\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Method to create our save dialog\n */\n", "func_signal": "private AlertDialog saveDialog()", "code": "{\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setMessage(R.string.really_save_dialog)\n        .setCancelable(false)\n        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n                int result = saveState();\n                if ((result != 0)) {\n                    setResult(RESULT_OK);\n                    finish();\n                } else {\n                    LayoutInflater inflater = getLayoutInflater();\n                    View toastRoot = inflater.inflate(R.layout.toast_same_warning, null);\n                    Toast t = new Toast(getApplicationContext());\n                    t.setView(toastRoot);\n                    t.setDuration(Toast.LENGTH_LONG);\n                    t.setGravity(Gravity.CENTER, 0, 0);\n                    t.show();\n                }\n            }\n        })\n        .setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int id) {\n                setResult(RESULT_OK);\n                finish();\n            }    \n        });\n    return builder.create();\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\EditMessage.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Open up a new activity to edit the message\n */\n", "func_signal": "private void editMessage()", "code": "{\n\n    Intent i = new Intent(this, EditMessage.class);\n    i.putExtra(MessagesProviderHelper.KEY_ID, currentRowID);\n    startActivityForResult(i, ACTIVITY_EDIT_MESSAGE);\n\n}", "path": "src\\net\\fluidnexus\\FluidNexusAndroid\\MainActivity.java", "repo_name": "zeitkunst/FluidNexusAndroid", "stars": 10, "license": "gpl-3.0", "language": "java", "size": 8981}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public getVersion_result(getVersion_result other)", "code": "{\n  if (other.isSetSuccess()) {\n    this.success = other.success;\n  }\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public getStatusDetails_result(getStatusDetails_result other)", "code": "{\n  if (other.isSetSuccess()) {\n    this.success = other.success;\n  }\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case SUCCESS:\n    return isSetSuccess();\n  }\n  throw new IllegalStateException();\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  }\n  throw new IllegalStateException();\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 0: // SUCCESS\n      return SUCCESS;\n    default:\n      return null;\n  }\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Test that full init, create client, shutdown lifecycle works correctly\n */\n", "func_signal": "@Test\npublic void testLifecycle() throws IOException, InterruptedException, KeeperException", "code": "{\n  FlumeConfiguration cfg = FlumeConfiguration.get();\n  File tmp = FileUtil.mktempdir();\n  cfg.set(FlumeConfiguration.MASTER_ZK_SERVERS, \"localhost:2181:3181:4181\");\n  cfg.set(FlumeConfiguration.MASTER_ZK_LOGDIR, tmp.getAbsolutePath());\n  ZooKeeperService svc = new ZooKeeperService();\n  svc.init(cfg);\n  \n  Assert.assertTrue(\"ZooKeeperService did not initialise\", svc.isInitialised());\n  \n  ZKClient client = svc.createClient();\n  client.init();\n  Assert.assertTrue(\"Expected at least one child of root for ZK service\",\n      client.getChildren(\"/\", false).size() > 0);   \n  \n  client.close();    \n  svc.shutdown();    \n  Assert.assertFalse(\"ZooKeeperService did not shut down\", svc.isInitialised());\n  \n  FileUtil.rmr(tmp);\n}", "path": "src\\javatest\\com\\cloudera\\flume\\master\\TestZooKeeperService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 0: // SUCCESS\n      return SUCCESS;\n    default:\n      return null;\n  }\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    default:\n      return null;\n  }\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/** \n * Simple test to ensure that a RetryHarness actually does retry / fail\n * when the Retryable fails.\n */\n", "func_signal": "@Test\npublic void testRetryHarness() throws InterruptedException, Exception", "code": "{\n  Retryable retry = new Retryable() {\n    int totaltries = 0;\n    public boolean doTry() {\n      totaltries++;\n      if (totaltries < 3) {\n        return false;\n      }\n      totaltries = 0;\n      return true;\n    }\n  };\n  \n  RetryHarness harness = new RetryHarness(retry, new FixedRetryPolicy(3));\n  Assert.assertTrue(harness.attempt());\n  harness = new RetryHarness(retry, new FixedRetryPolicy(1));\n  Assert.assertFalse(harness.attempt());\n}", "path": "src\\javatest\\com\\cloudera\\util\\TestRetryHarness.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case SUCCESS:\n    return isSetSuccess();\n  }\n  throw new IllegalStateException();\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case SUCCESS:\n    return isSetSuccess();\n  }\n  throw new IllegalStateException();\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Test the two variants of RetryHarness, one where exceptions are rethrown \n * after failure, one where they are always masked.  \n */\n", "func_signal": "@Test\npublic void testException()", "code": "{\n  Exception e = null;\n  Retryable retry = new Retryable() {\n    public boolean doTry() throws Exception {\n      harness.doAbort();\n      throw new Exception();\n    }\n  };\n  \n  RetryHarness harness = new RetryHarness(retry, new FixedRetryPolicy(3), true);\n  try { \n    harness.attempt(); \n  } catch (Exception e1) {\n    e = e1;\n  }\n  Assert.assertNotNull(\"Expected exception not thrown!\",e);\n  e = null;\n  harness = new RetryHarness(retry, new FixedRetryPolicy(3), false);    \n  try { \n    harness.attempt(); \n  } catch (Exception e1) {\n    e = e1;\n  }\n  Assert.assertNull(\"Unexpected exception thrown!\",e);\n}", "path": "src\\javatest\\com\\cloudera\\util\\TestRetryHarness.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    default:\n      return null;\n  }\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 0: // SUCCESS\n      return SUCCESS;\n    default:\n      return null;\n  }\n}", "path": "src\\gen-java\\com\\cloudera\\flume\\handlers\\scribe\\FacebookService.java", "repo_name": "anuragphadke/Flume-Hive", "stars": 15, "license": "apache-2.0", "language": "java", "size": 21002}
{"docstring": "/**\n * Extracts the package name from an apk file.\n *\n * @param apkFile apk file to extract package name from.\n * @return the package name from inside the apk file.\n */\n", "func_signal": "protected String extractPackageNameFromApk(File apkFile) throws MojoExecutionException", "code": "{\n    CommandExecutor executor = CommandExecutor.Factory.createDefaultCommmandExecutor();\n    executor.setLogger(this.getLog());\n    List<String> commands = new ArrayList<String>();\n    commands.add(\"dump\");\n    commands.add(\"xmltree\");\n    commands.add(apkFile.getAbsolutePath());\n    commands.add(\"AndroidManifest.xml\");\n    getLog().info(getAndroidSdk().getPathForTool(\"aapt\") + \" \" + commands.toString());\n    try {\n        executor.executeCommand(getAndroidSdk().getPathForTool(\"aapt\"), commands, true);\n        final String xmlTree = executor.getStandardOut();\n        return extractPackageNameFromAndroidManifestXmlTree(xmlTree);\n    } catch (ExecutionException e) {\n        throw new MojoExecutionException(\"Error while trying to figure out package name from inside apk file \" + apkFile);\n    } finally {\n        getLog().error(executor.getStandardError());\n    }\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Deploys an apk file to a connected emulator or usb device.\n *\n * @param apkFile the file to deploy\n * @throws MojoExecutionException If there is a problem deploying the apk file.\n */\n", "func_signal": "protected void deployApk(File apkFile) throws MojoExecutionException", "code": "{\n    CommandExecutor executor = CommandExecutor.Factory.createDefaultCommmandExecutor();\n    executor.setLogger(this.getLog());\n    List<String> commands = new ArrayList<String>();\n\n    addDeviceParameter(commands);\n\n    commands.add(\"install\");\n    commands.add(\"-r\");\n    commands.add(apkFile.getAbsolutePath());\n    getLog().info(getAndroidSdk().getPathForTool(\"adb\") + \" \" + commands.toString());\n    try {\n        executor.executeCommand(getAndroidSdk().getPathForTool(\"adb\"), commands, false);\n        final String standardOut = executor.getStandardOut();\n        if (standardOut != null && standardOut.contains(\"Failure\")) {\n            throw new MojoExecutionException(\"Error deploying \" + apkFile + \" to device. You might want to add command line parameter -Dandroid.undeployBeforeDeploy=true or add plugin configuration tag <undeployBeforeDeploy>true</undeployBeforeDeploy>\\n\" + standardOut);\n        }\n    } catch (ExecutionException e) {\n        getLog().error(executor.getStandardOut());\n        getLog().error(executor.getStandardError());\n        throw new MojoExecutionException(\"Error deploying \" + apkFile + \" to device.\", e);\n    }\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Returns a default instance of the command executor\n *\n * @return a default instance of the command executor\n */\n", "func_signal": "public static CommandExecutor createDefaultCommmandExecutor()", "code": "{\n    return new CommandExecutor() {\n        /**\n         * Instance of a plugin logger.\n         */\n        private Log logger;\n\n        /**\n         * Standard Out\n         */\n        private StreamConsumer stdOut;\n\n        /**\n         * Standard Error\n         */\n        private ErrorStreamConsumer stdErr;\n\n        /**\n         * Process result\n         */\n        private int result;\n\n        public void setLogger(Log logger) {\n            this.logger = logger;\n        }\n\n        long pid;\n\n        private Commandline commandline;\n\n        public void executeCommand(String executable, List<String> commands)\n                throws ExecutionException {\n            executeCommand(executable, commands, null, true);\n        }\n\n        public void executeCommand(String executable, List<String> commands, boolean failsOnErrorOutput)\n                throws ExecutionException {\n            executeCommand(executable, commands, null, failsOnErrorOutput);\n        }\n\n        public void executeCommand(String executable, List<String> commands, File workingDirectory,\n                                   boolean failsOnErrorOutput)\n                throws ExecutionException {\n            if (commands == null) {\n                commands = new ArrayList<String>();\n            }\n            stdOut = new StreamConsumerImpl();\n            stdErr = new ErrorStreamConsumer();\n\n            commandline = new Commandline();\n            commandline.setExecutable(executable);\n            commandline.addArguments(commands.toArray(new String[commands.size()]));\n            if (workingDirectory != null && workingDirectory.exists()) {\n                commandline.setWorkingDirectory(workingDirectory.getAbsolutePath());\n            }\n            try {\n                result = CommandLineUtils.executeCommandLine(commandline, stdOut, stdErr);\n                if (logger != null) {\n                    logger.debug(\"ANDROID-040-000: Executed command: Commandline = \" + commandline +\n                            \", Result = \" + result);\n                } else {\n                    System.out.println(\"ANDROID-040-000: Executed command: Commandline = \" + commandline +\n                            \", Result = \" + result);\n                }\n                if ((failsOnErrorOutput && stdErr.hasError()) || result != 0) {\n                    throw new ExecutionException(\"ANDROID-040-001: Could not execute: Command = \" +\n                            commandline.toString() + \", Result = \" + result);\n                }\n            } catch (CommandLineException e) {\n                throw new ExecutionException(\n                        \"ANDROID-040-002: Could not execute: Command = \" + commandline.toString() + \", Error message = \" + e.getMessage());\n            }\n            setPid(commandline.getPid());\n        }\n\n        public int getResult() {\n            return result;\n        }\n\n        public String getStandardOut() {\n            return stdOut.toString();\n        }\n\n        public String getStandardError() {\n            return stdErr.toString();\n        }\n\n\n        public void setPid(long pid) {\n            this.pid = pid;\n        }\n\n        public long getPid() {\n            return pid;\n        }\n\n        /**\n         * Provides behavior for determining whether the command utility wrote anything to the Standard Error Stream.\n         * NOTE: I am using this to decide whether to fail the NMaven build. If the compiler implementation chooses\n         * to write warnings to the error stream, then the build will fail on warnings!!!\n         */\n        class ErrorStreamConsumer\n                implements StreamConsumer {\n\n            /**\n             * Is true if there was anything consumed from the stream, otherwise false\n             */\n            private boolean error;\n\n            /**\n             * Buffer to store the stream\n             */\n            private StringBuffer sbe = new StringBuffer();\n\n            public ErrorStreamConsumer() {\n                if (logger == null) {\n                    System.out.println(\"ANDROID-040-003: Error Log not set: Will not output error logs\");\n                }\n                error = false;\n            }\n\n            public void consumeLine(String line) {\n                sbe.append(line);\n                if (logger != null) {\n                    logger.info(line);\n                }\n                error = true;\n            }\n\n            /**\n             * Returns false if the command utility wrote to the Standard Error Stream, otherwise returns true.\n             *\n             * @return false if the command utility wrote to the Standard Error Stream, otherwise returns true.\n             */\n            public boolean hasError() {\n                return error;\n            }\n\n            /**\n             * Returns the error stream\n             *\n             * @return error stream\n             */\n            public String toString() {\n                return sbe.toString();\n            }\n        }\n\n        /**\n         * StreamConsumer instance that buffers the entire output\n         */\n        class StreamConsumerImpl\n                implements StreamConsumer {\n\n            private DefaultConsumer consumer;\n\n            private StringBuffer sb = new StringBuffer();\n\n            public StreamConsumerImpl() {\n                consumer = new DefaultConsumer();\n            }\n\n            public void consumeLine(String line) {\n                sb.append(line);\n                if (logger != null) {\n                    consumer.consumeLine(line);\n                }\n            }\n\n            /**\n             * Returns the stream\n             *\n             * @return the stream\n             */\n            public String toString() {\n                return sb.toString();\n            }\n        }\n    };\n\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\CommandExecutor.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * This is a weak algorithm, if performance is a concern we should address\n * it.\n * \n * @param location\n * @param max\n * @return Key-Value collection of station to relative metered distances\n */\n", "func_signal": "public Map<Station, Double> findClosestStations(Location location, int max)", "code": "{\n\tif (location == null)\n\t\tlocation = lastKnownLocation;\n\tif (location == null || stations == null || stations.isEmpty())\n\t\treturn new HashMap<Station, Double>(2) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t{\n\t\t\t\tput(getStations().get(0), 100.0);\n\t\t\t\tput(getStations().get(1), 200.0);\n\t\t\t}\n\t\t};\n\tTreeMap<Double, Station> closest = new TreeMap<Double, Station>();\n\tfor (Station s : stations) {\n\t\tdouble dist = Distance.greatCircle(location.getLatitude(), location\n\t\t\t\t.getLongitude(), s.getLatitude(), s.getLongitude());\n\t\tif (closest.size() < max) {\n\t\t\tclosest.put(dist, s);\n\t\t} else {\n\t\t\tfor (Double oldDist : closest.keySet()) {\n\t\t\t\tif (dist < oldDist) {\n\t\t\t\t\tclosest.remove(oldDist);\n\t\t\t\t\tclosest.put(dist, s);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tMap<Station, Double> inverted = new HashMap<Station, Double>(closest\n\t\t\t.size());\n\tfor (Map.Entry<Double, Station> e : closest.entrySet()) {\n\t\tinverted.put(e.getValue(), e.getKey());\n\t}\n\treturn inverted;\n}", "path": "scheduler\\src\\com\\njtransit\\SchedulerApplication.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Attempts to resolve an {@link Artifact} to a {@link File}.\n *\n * @param artifact to resolve\n * @return a {@link File} to the resolved artifact, never <code>null</code>.\n * @throws MojoExecutionException if the artifact could not be resolved.\n */\n", "func_signal": "protected File resolveArtifactToFile(Artifact artifact) throws MojoExecutionException", "code": "{\n    final ArtifactsResolver artifactsResolver = new DefaultArtifactsResolver(this.artifactResolver, this.localRepository, this.remoteRepositories, true);\n    final HashSet<Artifact> artifacts = new HashSet<Artifact>();\n    artifacts.add(artifact);\n    File jar = null;\n    final Set<Artifact> resolvedArtifacts = artifactsResolver.resolve(artifacts, getLog());\n    for (Artifact resolvedArtifact : resolvedArtifacts) {\n        jar = resolvedArtifact.getFile();\n    }\n    if (jar == null) {\n        throw new MojoExecutionException(\"Could not resolve artifact \" + artifact.getId() + \". Please install it with \\\"mvn install:install-file ...\\\" or deploy it to a repository with \\\"mvn deploy:deploy-file ...\\\"\");\n    }\n\n    return jar;\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * \n * @param lat1\n * @param lon1\n * @param lat2\n * @param lon2\n * @return distance between points in meters\n */\n", "func_signal": "public static double greatCircle(double lat1, double lon1, double lat2, double lon2)", "code": "{\n\tdouble dLat = Math.toRadians(lat2-lat1);\n\tdouble dLon = Math.toRadians(lon2-lon1);\n\tdouble a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(dLon/2) * Math.sin(dLon/2);\n\tdouble c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\treturn R * c;\n}", "path": "scheduler\\src\\com\\njtransit\\utils\\Distance.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Reads the next line from the buffer and converts to a string array.\n * \n * @return a string array with each comma-separated element as a separate\n *         entry.\n * \n * @throws IOException\n *             if bad things happen during the read\n */\n", "func_signal": "public String[] readNext() throws IOException", "code": "{\n\t\n\tString[] result = null;\n\tdo {\n\t\tString nextLine = getNextLine();\n\t\tif (!hasNext) {\n\t\t\treturn result; // should throw if still pending?\n\t\t}\n\t\tString[] r = parser.parseLineMulti(nextLine);\n\t\tif (r.length > 0) {\n\t\t\tif (result == null) {\n\t\t\t\tresult = r;\n\t\t\t} else {\n\t\t\t\tString[] t = new String[result.length+r.length];\n\t\t\t\tSystem.arraycopy(result, 0, t, 0, result.length);\n\t\t\t\tSystem.arraycopy(r, 0, t, result.length, r.length);\n\t\t\t\tresult = t;\n\t\t\t}\n\t\t}\n\t} while (parser.isPending());\n\treturn result;\n}", "path": "schedule-maker-maven-plugin\\src\\main\\java\\au\\com\\bytecode\\opencsv\\CSVReader.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * \n * @param location\n *            can be null, if so defaults to lastKnownLocation\n * @return\n */\n", "func_signal": "public Map<Station, Double> findClosestStation(Location location)", "code": "{\n\tMap<Station, Double> s = findClosestStations(location, 1);\n\tif (s == null || s.isEmpty()) {\n\t\treturn Collections.<Station, Double> emptyMap();\n\t}\n\treturn s;\n}", "path": "scheduler\\src\\com\\njtransit\\SchedulerApplication.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Constructs CSVReader with supplied separator and quote char.\n * \n * @param reader\n *            the reader to an underlying CSV source.\n * @param separator\n *            the delimiter to use for separating entries\n * @param quotechar\n *            the character to use for quoted elements\n * @param escape\n *            the character to use for escaping a separator or quote\n * @param line\n *            the line number to skip for start reading\n * @param strictQuotes\n *            sets if characters outside the quotes are ignored\n * @param ignoreLeadingWhiteSpace\n *            it true, parser should ignore white space before a quote in a field\n */\n", "func_signal": "public CSVReader(Reader reader, char separator, char quotechar, char escape, int line, boolean strictQuotes, boolean ignoreLeadingWhiteSpace)", "code": "{\n    this.br = new BufferedReader(reader);\n    this.parser = new CSVParser(separator, quotechar, escape, strictQuotes, ignoreLeadingWhiteSpace);\n    this.skipLines = line;\n}", "path": "schedule-maker-maven-plugin\\src\\main\\java\\au\\com\\bytecode\\opencsv\\CSVReader.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Attempts to find the instrumentation test runner from inside the AndroidManifest.xml file.\n *\n * @param androidManifestFile the AndroidManifest.xml file to inspect.\n * @return the instrumentation test runner declared in AndroidManifest.xml, or {@code null} if it is not declared.\n * @throws MojoExecutionException\n */\n", "func_signal": "protected String extractInstrumentationRunnerFromAndroidManifest(File androidManifestFile) throws MojoExecutionException", "code": "{\n    final URL xmlURL;\n    try {\n        xmlURL = androidManifestFile.toURI().toURL();\n    } catch (MalformedURLException e) {\n        throw new MojoExecutionException(\"Error while trying to figure out instrumentation runner from inside AndroidManifest.xml file \" + androidManifestFile, e);\n    }\n    final DocumentContainer documentContainer = new DocumentContainer(xmlURL);\n    final Object instrumentationRunner;\n    try {\n        instrumentationRunner = JXPathContext.newContext(documentContainer).getValue(\"manifest//instrumentation/@android:name\", String.class);\n    } catch (JXPathNotFoundException e) {\n        return null;\n    }\n    return (String) instrumentationRunner;\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Extracts the package name from an XmlTree dump of AndroidManifest.xml by the <code>aapt</code> tool.\n *\n * @param aaptDumpXmlTree output from <code>aapt dump xmltree &lt;apkFile&gt; AndroidManifest.xml\n * @return the package name from inside the apkFile.\n */\n", "func_signal": "protected String extractPackageNameFromAndroidManifestXmlTree(String aaptDumpXmlTree)", "code": "{\n    final Scanner scanner = new Scanner(aaptDumpXmlTree);\n    // Finds the root element named \"manifest\".\n    scanner.findWithinHorizon(\"^E: manifest\", 0);\n    // Finds the manifest element's attribute named \"package\".\n    scanner.findWithinHorizon(\"  A: package=\\\"\", 0);\n    // Extracts the package value including the trailing double quote.\n    String packageName = scanner.next(\".*?\\\"\");\n    // Removes the double quote.\n    packageName = packageName.substring(0, packageName.length() - 1);\n    return packageName;\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * @return a {@code Set} of dependencies which may be extracted and otherwise included in other artifacts. Never\n *         {@code null}. This excludes artifacts of the {@code EXCLUDED_DEPENDENCY_SCOPES} scopes.\n */\n", "func_signal": "protected Set<Artifact> getRelevantCompileArtifacts()", "code": "{\n    final List<Artifact> allArtifacts = (List<Artifact>) project.getCompileArtifacts();\n    final Set<Artifact> results = filterOutIrrelevantArtifacts(allArtifacts);\n    return results;\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Finds files.\n *\n * @param baseDirectory Directory to find files in.\n * @param includes      Ant-style include statements, for example <code>\"** /*.aidl\"</code> (but without the space in the middle)\n * @return <code>String[]</code> of the files' paths and names, relative to <code>baseDirectory</code>. Empty <code>String[]</code> if <code>baseDirectory</code> does not exist.\n */\n", "func_signal": "protected String[] findFilesInDirectory(File baseDirectory, String... includes)", "code": "{\n    if (baseDirectory.exists()) {\n        DirectoryScanner directoryScanner = new DirectoryScanner();\n        directoryScanner.setBasedir(baseDirectory);\n\n        directoryScanner.setIncludes(includes);\n        directoryScanner.addDefaultExcludes();\n\n        directoryScanner.scan();\n        String[] files = directoryScanner.getIncludedFiles();\n        return files;\n    } else {\n        return new String[0];\n    }\n\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/** Return at most 2 trips for a station. North | South bound */\n", "func_signal": "public ArrayList<Trip> getTrips(Integer stationId)", "code": "{\n\tlong before = System.currentTimeMillis();\n\tif (stationId == null) {\n\t\treturn new ArrayList<Trip>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t{\n\t\t\t\tadd(new Trip(1, 1, \"343 River Line Camden\", 0, \"175B43003\",\n\t\t\t\t\t\t1));\n\t\t\t\tadd(new Trip(1, 1, \"343 River Line Trenton\", 1,\n\t\t\t\t\t\t\"175B43001\", 1));\n\t\t\t}\n\t\t};\n\t}\n\tdb.beginTransaction();\n\tCursor cursor = db\n\t\t\t.rawQuery(\n\t\t\t\t\t\"select trips.id, trips.service_id, trips.route_id, trips.headsign, trips.direction, trips.block_id from stop_times join trips where ? = stop_times.stop_id AND stop_times.trip_id=trips.id group by trips.direction\",\n\t\t\t\t\tnew String[] { stationId.toString() });\n\tint count = cursor.getCount();\n\tArrayList<Trip> trips = new ArrayList<Trip>(Math.max(0, count));\n\tcursor.moveToFirst();\n\tfor (int i = 0; i < cursor.getCount(); i++) {\n\t\ttrips\n\t\t\t\t.add(new Trip(cursor.getInt(0), cursor.getInt(1), cursor\n\t\t\t\t\t\t.getString(3), cursor.getInt(4), cursor\n\t\t\t\t\t\t.getString(5), null));\n\t\tcursor.moveToNext();\n\t}\n\tcursor.close();\n\tdb.endTransaction();\n\n\tLog.d(\"DatabaseAdapter\", String.format(\"getTrips (%s ms)\", (System\n\t\t\t.currentTimeMillis() - before)));\n\n\treturn trips;\n}", "path": "scheduler\\src\\com\\njtransit\\DatabaseAdapter.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * @return a {@code Set} of direct project dependencies. Never {@code null}. This excludes artifacts of the {@code\n *         EXCLUDED_DEPENDENCY_SCOPES} scopes.\n */\n", "func_signal": "protected Set<Artifact> getRelevantDependencyArtifacts()", "code": "{\n    final Set<Artifact> allArtifacts = (Set<Artifact>) project.getDependencyArtifacts();\n    final Set<Artifact> results = filterOutIrrelevantArtifacts(allArtifacts);\n    return results;\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n     * Reads the entire file into a List with each element being a String[] of\n     * tokens.\n     * \n     * @return a List of String[], with each String[] representing a line of the\n     *         file.\n     * \n     * @throws IOException\n     *             if bad things happen during the read\n     */\n", "func_signal": "public List<String[]> readAll() throws IOException", "code": "{\n\n        List<String[]> allElements = new ArrayList<String[]>();\n        while (hasNext) {\n            String[] nextLineAsTokens = readNext();\n            if (nextLineAsTokens != null)\n                allElements.add(nextLineAsTokens);\n        }\n        return allElements;\n\n    }", "path": "schedule-maker-maven-plugin\\src\\main\\java\\au\\com\\bytecode\\opencsv\\CSVReader.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Undeploys an apk, specified by package name, from a connected emulator or usb device.\n *\n * @param packageName the package name to undeploy.\n * @param deleteDataAndCacheDirectoriesOnDevice\n *                    <code>true</code> to delete the application's data and cache\n *                    directories on the device, <code>false</code> to keep them.\n * @return <code>true</code> if successfully undeployed, <code>false</code> otherwise.\n */\n", "func_signal": "protected boolean undeployApk(String packageName, boolean deleteDataAndCacheDirectoriesOnDevice) throws MojoExecutionException", "code": "{\n    CommandExecutor executor = CommandExecutor.Factory.createDefaultCommmandExecutor();\n    executor.setLogger(this.getLog());\n    List<String> commands = new ArrayList<String>();\n    addDeviceParameter(commands);\n    commands.add(\"uninstall\");\n    if (!deleteDataAndCacheDirectoriesOnDevice) {\n        commands.add(\"-k\");  // ('-k' means keep the data and cache directories)\n    }\n    commands.add(packageName);\n    getLog().info(getAndroidSdk().getAdbPath() + \" \" + commands.toString());\n    try {\n        executor.executeCommand(getAndroidSdk().getAdbPath(), commands, false);\n        getLog().debug(executor.getStandardOut());\n        getLog().debug(executor.getStandardError());\n        return true;\n    } catch (ExecutionException e) {\n        getLog().error(executor.getStandardOut());\n        getLog().error(executor.getStandardError());\n        return false;\n    }\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Undeploys an apk from a connected emulator or usb device. Also deletes the application's data and cache\n * directories on the device.\n *\n * @param apkFile the file to undeploy\n * @param deleteDataAndCacheDirectoriesOnDevice\n *                <code>true</code> to delete the application's data and cache\n *                directories on the device, <code>false</code> to keep them.\n * @return <code>true</code> if successfully undeployed, <code>false</code> otherwise.\n */\n", "func_signal": "protected boolean undeployApk(File apkFile, boolean deleteDataAndCacheDirectoriesOnDevice) throws MojoExecutionException", "code": "{\n    final String packageName;\n    packageName = extractPackageNameFromApk(apkFile);\n    return undeployApk(packageName, deleteDataAndCacheDirectoriesOnDevice);\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Checks if a specific device should be used, and adds any relevant parameter(s) to the parameters list.\n *\n * @param commands the parameters to be used with the {@code adb} command\n */\n", "func_signal": "protected void addDeviceParameter(List<String> commands)", "code": "{\n    if (StringUtils.isNotBlank(device)) {\n        if (\"usb\".equals(device)) {\n            commands.add(\"-d\");\n        } else if (\"emulator\".equals(device)) {\n            commands.add(\"-e\");\n        } else {\n            commands.add(\"-s\");\n            commands.add(device);\n        }\n    }\n}", "path": "maven-android-plugin\\src\\main\\java\\com\\jayway\\maven\\plugins\\android\\AbstractAndroidMojo.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/**\n * Reads the next line from the file.\n * \n * @return the next line from the file without trailing newline\n * @throws IOException\n *             if bad things happen during the read\n */\n", "func_signal": "private String getNextLine() throws IOException", "code": "{\n\tif (!this.linesSkiped) {\n        for (int i = 0; i < skipLines; i++) {\n            br.readLine();\n        }\n        this.linesSkiped = true;\n    }\n    String nextLine = br.readLine();\n    if (nextLine == null) {\n        hasNext = false;\n    }\n    return hasNext ? nextLine : null;\n}", "path": "schedule-maker-maven-plugin\\src\\main\\java\\au\\com\\bytecode\\opencsv\\CSVReader.java", "repo_name": "snooplsm/njtransit", "stars": 9, "license": "other", "language": "java", "size": 90360}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.BitcoinNetwork#sendMessage(net.bitdroid.network.messages.Event)\n */\n", "func_signal": "public void sendMessage(Message event) throws IOException", "code": "{\n\tBitcoinReactorPeerInfo peerInfo = (BitcoinReactorPeerInfo) event.getOrigin();\n\tsynchronized (pendingChanges) {\n\t\t// Indicate we want the interest ops set changed\n\t\tpendingChanges.add(new ChangeRequest(peerInfo.getSocketChannel(), ChangeRequest.CHANGEOPS, SelectionKey.OP_WRITE));\n\n\t\t// And queue the data we want written\n\t\tQueue<Event> queue = peerInfo.getPendingMessages();\n\t\tsynchronized (queue) {\n\t\t\tqueue.add(event);\n\t\t}\n\t}\n\n\t// Finally, wake up our selecting thread so it can make the required changes\n\tthis.selector.wakeup();\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "//\t/**\n//\t * A map of buffers for messages that are in flight, not yet completely read.\n//\t */\n//\tprotected Map<SocketChannel, IncompleteMessage> incompleteBuffer = new HashMap<SocketChannel, IncompleteMessage>();\n", "func_signal": "public BitcoinReactorNetwork(int port) throws IOException", "code": "{\n\tthis.port = port;\n\tthis.init();\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.BitcoinNetwork#broadcast(net.bitdroid.network.messages.Message)\n */\n", "func_signal": "@Override\npublic void broadcast(Message message, Object exclude)", "code": "{\n\tfor(BitcoinReactorPeerInfo peer : peers.values()){\n\t\tif(peer == exclude)\n\t\t\tcontinue;\n\t\ttry {\n\t\t\tthis.sendMessage(peer, message);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * Enqueue a new task to be run by the reactor.\n * @param task\n */\n", "func_signal": "public void queueTask(DeferredTask task)", "code": "{\n\ttaskQueue.add(task);\n\t// If we scheduled a new next task we have to artificially wake up the\n\t// selector\n\tif(taskQueue.peek() == null ||\n\t\t\ttask.getDelay(TimeUnit.MILLISECONDS) < taskQueue.peek().getDelay(TimeUnit.MILLISECONDS))\n\t\tthis.selector.wakeup();\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * Calculate the 4 byte checksum of the message content.\n *\n * @param content to be hashed\n * @return 4 byte array with the checksum\n * @throws RuntimeException if we cannot continue (due to missing hash functions)\n */\n", "func_signal": "public final byte[] calculateChecksum(byte[] b) throws RuntimeException", "code": "{\n\tbyte[] res = new byte[4];\n\tif(hasher == null){\n\t\ttry {\n\t\t\thasher = MessageDigest.getInstance(\"SHA-256\");\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(\"Cannot continue without a SHA-256 implementation.\", e);\n\t\t}\n\t}\n\thasher.reset();\n\tbyte[] o = hasher.digest(b);\n\thasher.reset();\n\to = hasher.digest(o);\n\tfor(int i=0; i<4; i++)\n\t\tres[i] = o[i];\n\treturn res;\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.Message#read(net.bitdroid.network.wire.LittleEndianInputStream)\n */\n", "func_signal": "@Override\npublic void read(LittleEndianInputStream in) throws IOException", "code": "{\n\tversion = in.readUnsignedInt();\n\tif(version != 1)\n\t\tthrow new IOException(\"Block version not supported.\");\n\tin.read(previousHash);\n\tStringUtils.reverse(previousHash);\n\tin.read(merkleRoot);\n\tStringUtils.reverse(merkleRoot);\n\ttimestamp = in.readUnsignedInt();\n\ttarget = in.readUnsignedInt();\n\tin.read(nonce);\n\tStringUtils.reverse(nonce);\n\tlong transactionCount = in.readVariableSize();\n\tfor(int i=0; i<transactionCount; i++){\n\t\tTransaction t = new Transaction();\n\t\tt.read(in);\n\t\ttransactions.add(t);\n\t}\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\BlockMessage.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.Event#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder sb = new StringBuilder(\"Transaction[hash=\");\n\ttry {\n\t\tsb.append(StringUtils.getHexString(this.getHash()));\n\t} catch (Exception e) {\n\t}\n\tsb.append(\"]\");\n\treturn sb.toString();\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\Transaction.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.Message#toWire(net.bitdroid.network.wire.LittleEndianOutputStream)\n */\n", "func_signal": "@Override\npublic void toWire(LittleEndianOutputStream leos) throws IOException", "code": "{\n\t// Re reverse those byte arrays:\n\tbyte _previousHash[] = previousHash.clone();\n\tStringUtils.reverse(_previousHash);\n\tbyte _nonce[] = nonce.clone();\n\tStringUtils.reverse(_nonce);\n\tbyte _merkleRoot[] = merkleRoot.clone();\n\tStringUtils.reverse(_merkleRoot);\n\tleos.writeUnsignedInt(version);\n\tleos.write(_previousHash);\n\tleos.write(_merkleRoot);\n\tleos.writeUnsignedInt(timestamp);\n\tleos.writeUnsignedInt(target);\n\tleos.write(_nonce);\n\tleos.writeVariableSize(transactions.size());\n\tfor(Transaction t : transactions)\n\t\tt.toWire(leos);\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\BlockMessage.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * Process requested changes to the sockets and register new interests to\n * the selector keys.\n *\n * @throws ClosedChannelException\n */\n", "func_signal": "private void processChanges() throws ClosedChannelException", "code": "{\n\t// Process any pending changes\n\tsynchronized (this.pendingChanges) {\n\t\tIterator<ChangeRequest> changes = this.pendingChanges.iterator();\n\t\twhile (changes.hasNext()) {\n\t\t\tChangeRequest change = (ChangeRequest) changes.next();\n\t\t\tswitch (change.type) {\n\t\t\tcase ChangeRequest.CHANGEOPS:\n\t\t\t\tSelectionKey key = change.socket.keyFor(selector);\n\t\t\t\tif(key.isValid())\n\t\t\t\t\tkey.interestOps(change.ops);\n\t\t\t\telse\n\t\t\t\t\tkey.cancel();\n\t\t\tcase ChangeRequest.REGISTER:\n\t\t\t\ttry{\n\t\t\t\t\tchange.socket.register(selector, change.ops);\n\t\t\t\t}catch(ClosedChannelException cce){\n\t\t\t\t\tlog.error(\"Channel already closed, cleaning up\", cce);\n\t\t\t\t\ttry{\n\t\t\t\t\t\tchange.socket.keyFor(this.selector).cancel();\n\t\t\t\t\t}catch(CancelledKeyException cke){\n\t\t\t\t\t\tlog.info(\"Key already cancelled. This can be ignored. Cleanup will continue.\", cke);\n\t\t\t\t\t}\n\t\t\t\t\tpeers.remove(change.socket);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.pendingChanges.clear();\n\t}\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n *\n */\n", "func_signal": "public void run()", "code": "{\n\taddListener(new BitcoinClientDriver(this));\n\twhile (true) {\n\t\ttry {\n\t\t\tprocessChanges();\n\t\t\tlong next = executeTasks();\n\t\t\t// Wait for an event one of the registered channels\n\t\t\tselector.select(next);\n\n\t\t\t// Iterate over the set of keys for which events are available\n\t\t\tIterator<SelectionKey> selectedKeys = this.selector.selectedKeys().iterator();\n\t\t\twhile (selectedKeys.hasNext()) {\n\t\t\t\tSelectionKey key = (SelectionKey) selectedKeys.next();\n\t\t\t\tselectedKeys.remove();\n\t\t\t\tBitcoinReactorPeerInfo peerInfo = peers.get(key.channel());\n\t\t\t\tif (!key.isValid())\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Check what event is available and deal with it\n\t\t\t\tif (key.isConnectable()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSocketChannel channel =(SocketChannel) key.channel();\n\t\t\t\t\t\tchannel.finishConnect();\n\t\t\t\t\t\tpeerInfo = new BitcoinReactorPeerInfo(channel);\n\t\t\t\t\t\tpeers.put(channel, peerInfo);\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tpublishReceivedEvent(new Event(null, EventType.FAILED_CONNECTION_TYPE, null));\n\t\t\t\t\t\t// Cancel the channel's registration with our selector\n\t\t\t\t\t\tkey.cancel();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//key.interestOps(SelectionKey.OP_READ); // By default register interest in reading, this will be overwritten by the below listeners\n\t\t\t\t\tEvent e = new Event();\n\t\t\t\t\te.setOrigin(peerInfo);\n\t\t\t\t\te.setType(EventType.OUTGOING_CONNECTION_TYPE);\n\t\t\t\t\tpublishReceivedEvent(e);\n\t\t\t\t} else if (key.isAcceptable()) {\n\t\t\t\t\taccept(key);\n\t\t\t\t} else if (key.isReadable()) {\n\t\t\t\t\ttry{\n\t\t\t\t\t\tEvent m = readMessage(key);\n\t\t\t\t\t\tif(m != null)\n\t\t\t\t\t\t\tpublishReceivedEvent(m);\n\t\t\t\t\t}catch(IOException ioe){\n\t\t\t\t\t\tdisconnect(peerInfo);\n\t\t\t\t\t}\n\t\t\t\t} else if (key.isWritable()) {\n\t\t\t\t\ttry{\n\t\t\t\t\t\twrite(key);\n\t\t\t\t\t}catch(IOException ioe){\n\t\t\t\t\t\tdisconnect(peerInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlog.error(\"Error while selecting or applying channel changes\", e);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * This method creates an instance of the message type according to the\n * given <em>command</em>. The <em>command</em> is the String in the\n * protocol identifying the type of the message.\n *\n * @param command protocol level identity of the message type.\n * @return an instance of Message according to the type in the protocol.\n */\n", "func_signal": "protected final Message createMessage(String command)", "code": "{\n\tMessage message;\n\tif(\"version\".equalsIgnoreCase(command)){\n\t\tmessage = new VersionMessage();\n\n\t}else if(\"verack\".equalsIgnoreCase(command)){\n\t\tmessage = new VerackMessage();\n\n\t}else if(\"inv\".equalsIgnoreCase(command)){\n\t\tmessage = new InventoryMessage();\n\n\t}else if(\"addr\".equalsIgnoreCase(command)){\n\t\tmessage = new AddrMessage();\n\n\t}else if(\"tx\".equalsIgnoreCase(command)){\n\t\tmessage = new Transaction();\n\n\t}else if(\"getdata\".equalsIgnoreCase(command)){\n\t\tmessage = new GetDataMessage();\n\n\t}else if(\"getaddr\".equalsIgnoreCase(command)){\n\t\tmessage = new GetAddrMessage();\n\n\t}else if(\"block\".equalsIgnoreCase(command)){\n\t\tmessage = new BlockMessage();\n\n\t}else{\n\t\tmessage = new UnknownMessage();\n\t\t((UnknownMessage)message).setCommand(command);\n\t}\n\n\treturn message;\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder sb = new StringBuilder(address.getHostAddress());\n\tsb.append(\":\").append(port).append(\"[Services=\").append(services).append(\"]\");\n\treturn sb.toString();\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\PeerAddress.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.Event#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder sb = new StringBuilder(\"Block[hash=\");\n\ttry {\n\t\tsb.append(StringUtils.getHexString(this.getHash()));\n\t} catch (Exception e) {\n\t}\n\tsb.append(\"]\");\n\treturn sb.toString();\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\BlockMessage.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * Publish events to all registered listeners.\n *\n * @param e\n */\n", "func_signal": "protected final void publishSentEvent(Event e)", "code": "{\n\tlog.debug(\"Publishing sent message {}\", e);\n\tfor(BitcoinEventListener listener : eventListeners)\n\t\ttry{\n\t\t\tlistener.messageSent(e);\n\t\t}catch(Exception ex){\n\t\t\tlog.error(\"Possible error in a listener publishing outgoing event.\", ex);\n\t\t}\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * Execute tasks that are due now. It returns the time the selector is\n * allowed to sleep until the next task is due.\n *\n * @return milliseconds until the next scheduled task.\n */\n", "func_signal": "protected long executeTasks()", "code": "{\n\t// So now we execute scheduled tasks\n\twhile(taskQueue.peek() != null &&\n\t\t\ttaskQueue.peek().getDelay(TimeUnit.MILLISECONDS) <= 0){\n\t\tDeferredTask task = taskQueue.poll();\n\t\ttry{\n\t\t\ttask.execute();\n\t\t}catch(Throwable t){\n\t\t\tlog.error(\"Error while executing deferred task\", t);\n\t\t}\n\t\tif(task instanceof RepeatingDeferredTask){\n\t\t\t((RepeatingDeferredTask) task).reschedule();\n\t\t\tthis.queueTask(task);\n\t\t}\n\t}\n\tif(taskQueue.peek() == null)\n\t\treturn 0;\n\telse\n\t\treturn taskQueue.peek().getDelay(TimeUnit.MILLISECONDS);\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * Cleanly disconnect a socketChannel and clean out all the state maintained\n * along with it.\n *\n * @param socketChannel\n */\n", "func_signal": "protected void disconnect(PeerInfo peerInfo)", "code": "{\n\tBitcoinReactorPeerInfo peer = (BitcoinReactorPeerInfo)peerInfo;\n\ttry {\n\t\tpeer.getSocketChannel().close();\n\t\tpeer.getSocketChannel().keyFor(this.selector).cancel();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\tpeers.remove(peer.getSocketChannel());\n\tEvent e = new Event();\n\te.setOrigin(peer);\n\te.setType(EventType.DISCONNECTED_TYPE);\n\tpublishReceivedEvent(e);\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\BitcoinReactorNetwork.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.Message#read(net.bitdroid.network.wire.LittleEndianInputStream)\n */\n", "func_signal": "@Override\npublic void read(LittleEndianInputStream in) throws IOException", "code": "{\n\tcontent = new byte[getPayloadSize()];\n\tin.read(content);\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\UnknownMessage.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.Message#toWire(net.bitdroid.network.wire.LittleEndianOutputStream)\n */\n", "func_signal": "@Override\npublic void toWire(LittleEndianOutputStream leos) throws IOException", "code": "{\n\tleos.writeInt(version);\n\n\t// Write inputs\n\tleos.writeVariableSize(inputs.size());\n\tfor(TxInput txIn : inputs){\n\t\tleos.write(txIn.getPrevious().getHash());\n\t\tleos.writeInt(txIn.getPrevious().getIndex());\n\t\tleos.writeVariableSize(txIn.getSignature().length);\n\t\tleos.write(txIn.getSignature());\n\t\tleos.writeUnsignedInt(txIn.getSequence());\n\t}\n\n\tleos.writeVariableSize(outputs.size());\n\tfor(TxOutput o : outputs){\n\t\tleos.writeUnsignedLong(o.getValue());\n\t\tleos.writeVariableSize(o.getScript().length);\n\t\tleos.write(o.getScript());\n\t}\n\tleos.writeInt(locktime);\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\Transaction.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/* (non-Javadoc)\n * @see net.bitdroid.network.messages.InventoryMessage#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder sb = new StringBuilder(\"GetDataMessage[count=\");\n\tsb.append(getItems().size()).append(\",\");\n\tfor(InventoryItem i : getItems())\n\t\tsb.append(i.toString()).append(\" \");\n\tsb.append(\"]\");\n\treturn sb.toString();\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\GetDataMessage.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "/**\n * @return\n * @throws NoSuchAlgorithmException \n */\n", "func_signal": "public byte[] getHash() throws NoSuchAlgorithmException", "code": "{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tLittleEndianOutputStream leos = new LittleEndianOutputStream(baos);\n\ttry {\n\t\tthis.toWire(leos);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\tMessageDigest hasher = MessageDigest.getInstance(\"SHA-256\");\n\tbyte h[] = hasher.digest(baos.toByteArray());\n\thasher.reset();\n\th = hasher.digest(h);\n\tStringUtils.reverse(h);\n\treturn h;\n}", "path": "src\\main\\java\\net\\bitdroid\\network\\messages\\Transaction.java", "repo_name": "cdecker/BitDroid-Network", "stars": 11, "license": "apache-2.0", "language": "java", "size": 342}
{"docstring": "// document id contains the set encoded in it\n", "func_signal": "public FetchedDocument getDocument(String documentId)", "code": "{\n    File dataFile = getDataFile(documentId);\n    if( !dataFile.exists() ) {\n        throw new RuntimeException(\"Document with id: '\" + documentId + \"' doesn't exist.\");\n    }\n    FetchedDocument doc = new FetchedDocument();\n    doc.setDocumentId(documentId);        \n\n    byte[] data = readData(dataFile);\n    doc.setDocumentContent(data);\n\n    File propsFile = getPropertiesFile(documentId);\n    if( !propsFile.exists() ) {\n        throw new RuntimeException(\"Properties for document with id: '\" + documentId + \"' don't exist.\");            \n    }\n    readMetaData(propsFile, doc);\n    \n    return doc;\n}", "path": "src\\iweb2\\ch2\\webcrawler\\db\\FetchedDocsDB.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Plots average item rating for MovieLens dataset.\n */\n", "func_signal": "public static void plotAverageItemRating()", "code": "{\n    Dataset ds = getMovieLensData();\n    Collection<Item> items = ds.getItems();\n    double[] x = new double[items.size()];\n    double[] y = new double[items.size()];\n    int i = 0;\n    for(Item item : items) {\n        x[i] = item.getId();\n        y[i] = item.getAverageRating();\n        i++;\n    }\n    \n    XyGui gui = new XyGui(ds.getName(), x, y);\n    gui.plot();\n}", "path": "src\\iweb2\\ch3\\shell\\RatingGrapher.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/*\n * Creates: 2 -> 3 -> 1 network. \n */\n", "func_signal": "public void create()", "code": "{\n    \n    \n    // 1. Define Layers, Nodes and Node Biases\n    Layer inputLayer = createInputLayer(\n            0, // layer id \n            2  // number of nodes \n            );\n\n    Layer hiddenLayer = createHiddenLayer(\n            1, // layer id \n            3, // number of nodes\n            new double[] {1, 1.5, 1} // node biases\n            );\n    \n    Layer outputLayer = createOutputLayer(\n            2, // layer id \n            1, // number of nodes \n            new double[] {1.5} // node biases\n            );        \n    \n    \n    setInputLayer(inputLayer);\n    setOutputLayer(outputLayer);\n    addHiddenLayer(hiddenLayer);\n\n    // 2. Define links and weights between nodes\n    // Id format: <layerId:nodeIdwithinLayer>\n    setLink(\"0:0\", \"1:0\", 0.25);\n    setLink(\"0:0\", \"1:1\", -0.5);\n    setLink(\"0:0\", \"1:2\", 0.25);\n    \n    setLink(\"0:1\", \"1:0\", 0.25);\n    setLink(\"0:1\", \"1:1\", -0.5);\n    setLink(\"0:1\", \"1:2\", 0.25);\n            \n    setLink(\"1:0\", \"2:0\", -0.5);\n    setLink(\"1:1\", \"2:0\", 0.5);\n    setLink(\"1:2\", \"2:0\", -0.5);\n    \n    System.out.println(\"NN created\");\n    \n}", "path": "src\\iweb2\\ch5\\classification\\nn\\XORNetwork.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Plots average user rating for MovieLens dataset.\n */\n", "func_signal": "public static void plotAverageUserRating()", "code": "{\n    Dataset ds = getMovieLensData();\n    Collection<User> users = ds.getUsers();\n    double[] x = new double[users.size()];\n    double[] y = new double[users.size()];\n    int i = 0;\n    for(User user : users) {\n        x[i] = user.getId();\n        y[i] = user.getAverageRating();\n        i++;\n    }\n    \n    XyGui gui = new XyGui(ds.getName(), x, y);\n    gui.plot();\n}", "path": "src\\iweb2\\ch3\\shell\\RatingGrapher.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/*\n * Creates directories for a new group if they don't exist yet.\n */\n", "func_signal": "private void createGroup(String groupId)", "code": "{\n    File groupFile = groupFiles.get(groupId);\n    if( groupFile == null ) {\n        groupFile = new File(rootDirFile, String.valueOf(groupId));\n        groupFile.mkdir();\n        groupFiles.put(groupFile.getName(), groupFile);\n    }\n}", "path": "src\\iweb2\\ch2\\webcrawler\\db\\FetchedDocsDB.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Save data into csv file.\n * \n * @param filename\n */\n", "func_signal": "public static void saveData(String filename)", "code": "{\n    String[] data = new String[CSV_ITEM_HEADERS.length];\n    \n    CsvListWriter csvWriter = null;\n    try {\n      csvWriter = new CsvListWriter(\n              new BufferedWriter(new FileWriter(filename)), \n              CsvPreference.EXCEL_PREFERENCE);\n      \n      csvWriter.writeHeader(CSV_ITEM_HEADERS);\n\n      for(DiggStoryItem item : allStories) {\n          try {\n              data[0] = String.valueOf(item.getId());\n              data[1] = item.getUsername();\n              data[2] = item.getTitle();\n              data[3] = item.getCategory();\n              data[4] = item.getTopic();\n              data[5] = item.getDescription();\n              data[6] = item.getLink();\n              DiggUser user = findUserByUsername(item.getUsername());\n              data[7] = String.valueOf(user.getId()); \n              csvWriter.write(data);\n          }\n          catch(Exception e) {\n              throw new RuntimeException(\"Error while writing item \" + item.getName() + \": \", e);\n          }\n      }\n    } \n    catch(IOException e) {\n        throw new RuntimeException(\"Error while writing digg items into csv file.\", e);\n    }\n    finally {\n      try {\n          if( csvWriter != null ) {\n              csvWriter.close();\n          }\n      }\n      catch(IOException e) {\n          e.printStackTrace();\n      }\n    }\n    \n    System.out.println(\"Saved data into file: \" + filename);\n    System.out.println(\"saved \" + allUsers.size() + \" users.\");\n    System.out.println(\"saved \" + allStories.size() + \" stories (items).\");\n    \n}", "path": "src\\iweb2\\ch3\\collaborative\\data\\DiggData.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/* (non-Javadoc)\n\t * @see iweb2.ch5.classification.nn.NeuralNetwork#printWeights()\n\t */\n", "func_signal": "public void printWeights()", "code": "{\n    for(Layer layer : hiddenLayers) {\n        System.out.println(\n                String.valueOf(layer.getId()) + \n                \":\"); \n        layer.printWeights();\n    }\n    System.out.println(\n            String.valueOf(outputLayer.getId()) + \n            \":\"); \n    outputLayer.printWeights();\n}", "path": "src\\iweb2\\ch5\\classification\\nn\\BaseNN.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/* (non-Javadoc)\n\t * @see iweb2.ch5.classification.nn.NeuralNetwork#addHiddenLayer(iweb2.ch5.classification.nn.intf.Layer)\n\t */\n", "func_signal": "public void addHiddenLayer(Layer hiddenLayer)", "code": "{\n    hiddenLayers.add(hiddenLayer);\n    for(Node node : hiddenLayer.getNodes()) {\n        addNode(node);\n    }\n}", "path": "src\\iweb2\\ch5\\classification\\nn\\BaseNN.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/* (non-Javadoc)\n\t * @see iweb2.ch5.classification.nn.NeuralNetwork#createOutputLayer(int, int, double[])\n\t */\n", "func_signal": "public Layer createOutputLayer(int layerId, int nNodes, double[] bias)", "code": "{\n    if( bias.length != nNodes ) {\n        throw new RuntimeException(\"Each node should have bias defined.\");\n    }\n    \n    BaseLayer baseLayer = new BaseLayer(layerId);\n    for(int i = 0; i < nNodes; i++) {\n        Node node = createOutputNode(layerId + \":\" + i);\n        node.setBias(bias[i]);\n        baseLayer.addNode(node);\n    }\n    return baseLayer;\n}", "path": "src\\iweb2\\ch5\\classification\\nn\\BaseNN.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/* (non-Javadoc)\n\t * @see iweb2.ch5.classification.nn.NeuralNetwork#setInputLayer(iweb2.ch5.classification.nn.intf.Layer)\n\t */\n", "func_signal": "public void setInputLayer(Layer inputLayer)", "code": "{\n    this.inputLayer = inputLayer;\n    for(Node node : this.inputLayer.getNodes()) {\n        addNode(node);\n    }\n}", "path": "src\\iweb2\\ch5\\classification\\nn\\BaseNN.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Builds data set with all the users where each user rates 80% of all \n * the songs. User ratings created randomly with bias: \n * <ul>\n * <li>Users whose name starts from A to D will have ratings between 3 and 5.</li>\n * <li>Users whose name starts from E to Z will have ratings between 1 and 3.</li>\n * </ul>\n */\n", "func_signal": "public static BaseDataset createDataset()", "code": "{\n    BaseDataset ds = new BaseDataset();\n\n    double percentOfAllSongs = 0.80;\n\n    /* Create items first */\n    MusicItem[] allItems = loadAllMusicItems(); \n    \n    for(int i = 0, n = USERS.length; i < n; i++) {\n        int userId = i;\n        String userName = USERS[i];\n        int lowRating = 1;\n        int highRating = 5;\n        \n        if( userName.toLowerCase().charAt(0) <= 'd') {\n            // range of ratings for users whose name starts from A to D\n            lowRating = 4;\n            highRating = 5;\n        }\n        else {\n            // range of ratings for users whose name starts from E to Z \n            lowRating = 1;\n            highRating = 3;\n        }\n        MusicItem[] items = pickRandomSongs(allItems, percentOfAllSongs);\n\n        RatingBuilder ratingBuider = new RatingBuilder();         \n        List<Rating> ratings = ratingBuider.createBiasedRatings(\n                userId, items, lowRating, highRating);\n\n        MusicUser mu = new MusicUser(userId, userName, ratings);\n        \n        ds.add(mu);\n    }\n    return ds;\n}", "path": "src\\iweb2\\ch3\\collaborative\\data\\MusicData.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Load data from csv file.\n * \n * @param filename\n */\n", "func_signal": "public static BaseDataset loadData(String filename)", "code": "{\n\n    allStories = new ArrayList<DiggStoryItem>();\n    allUsers = new ArrayList<DiggUser>();\n    \n    CsvListReader csvReader = null;\n    try {\n        csvReader = new CsvListReader(\n                new BufferedReader(new FileReader(filename)), \n                CsvPreference.EXCEL_PREFERENCE);\n        \n        csvReader.getCSVHeader(true);\n\n        List<String> line = null;\n        while((line = csvReader.read()) != null) {\n            try {\n                int id = Integer.valueOf(line.get(0));\n                String username = line.get(1);\n                String title = line.get(2);\n                String category = line.get(3);\n                String topic = line.get(4);\n                String description = line.get(5);\n                String link = line.get(6);\n                int userid = Integer.valueOf(line.get(7));\n\n                DiggUser user = findUserByUsername(username);\n                if( user == null ) {\n                    user = new DiggUser(userid, username);\n                    allUsers.add(user);\n                }\n                \n                DiggStoryItem item = new DiggStoryItem(id, title, description);\n                item.setUsername(username);\n                item.setCategory(category);\n                item.setTopic(topic);\n                item.setLink(link);\n                allStories.add(item);\n                \n                // adding item content to the user\n                user.addUserContent(item.getItemContent());\n            }\n            catch(Exception e) {\n                throw new RuntimeException(\"Error while reading item: \", e);\n            }\n        }\n      } \n      catch(IOException e) {\n          throw new RuntimeException(\"Error while reading digg items from csv file.\", e);\n      }\n      finally {\n        try {\n            if( csvReader != null ) {\n                csvReader.close();\n            }\n        }\n        catch(IOException e) {\n            e.printStackTrace();\n        }\n      }\n\n      System.out.println(\"From file: \" + filename);\n      System.out.println(\"Loaded \" + allUsers.size() + \" users.\");\n      System.out.println(\"Loaded \" + allStories.size() + \" stories (items).\");\n      \n      return DiggData.createDataset();\n}", "path": "src\\iweb2\\ch3\\collaborative\\data\\DiggData.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Returns a random selection of songs.\n *\n * @param songs list of songs to pick from\n * @param percentOfAllSongs determines size of returned selection.\n * \n * @return array of songs.\n */\n", "func_signal": "private static MusicItem[] pickRandomSongs(MusicItem[] songs, double percentOfAllSongs)", "code": "{\n    \n    if( percentOfAllSongs < 0.0 || percentOfAllSongs > 1.0 ) {\n        throw new IllegalArgumentException(\n                \"Value for 'percentOfAllSongs' argument should be between 0 and 1.\");\n    }\n    Random rand = new Random();\n    int sampleSize = (int)Math.round(percentOfAllSongs * songs.length);\n    Map<Integer, MusicItem> pickedItems = new HashMap<Integer, MusicItem>();\n    while( pickedItems.size() < sampleSize ) {\n        int songId = rand.nextInt(songs.length);\n        MusicItem song = songs[songId];\n        if( !pickedItems.containsKey(song.getId())) {\n            pickedItems.put(song.getId(), song);\n        }\n    }\n    \n    return pickedItems.values().toArray(new MusicItem[pickedItems.size()]);\n}", "path": "src\\iweb2\\ch3\\collaborative\\data\\MusicData.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/* (non-Javadoc)\n\t * @see iweb2.ch5.classification.nn.NeuralNetwork#createHiddenLayer(int, int, double[])\n\t */\n", "func_signal": "public Layer createHiddenLayer(int layerId, int nNodes, double[] bias)", "code": "{\n    if( bias.length != nNodes ) {\n        throw new RuntimeException(\"Each node should have bias defined.\");\n    }\n    BaseLayer baseLayer = new BaseLayer(layerId);\n    for(int i = 0; i < nNodes; i++) {\n        Node node = createHiddenNode(layerId + \":\" + i);\n        node.setBias(bias[i]);\n        baseLayer.addNode(node);\n    }\n    return baseLayer;\n}", "path": "src\\iweb2\\ch5\\classification\\nn\\BaseNN.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/** \n * This methods facilitates the loading of training attributes \n */\n", "func_signal": "public void useDefaultAttributes()", "code": "{\n\ttrainOnAttribute(TransactionInstance.ATTR_NAME_N_TXN_AMT);\n\ttrainOnAttribute(TransactionInstance.ATTR_NAME_N_LOCATION);\n\ttrainOnAttribute(TransactionInstance.ATTR_NAME_N_DESCRIPTION);        \n}", "path": "src\\iweb2\\ch5\\usecase\\fraud\\NNFraudClassifier.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Removes attribute definition with specified name from the list.\n * \n * @param attrName attribute name to remove.\n * @param attributes list to remove from.\n */\n", "func_signal": "public static void removeAttributeDef(String attrName, \n        List<AttributeDefinition> attributes)", "code": "{\n\n    if( attrName != null ) {\n        for(int i = 0, n = attributes.size(); i < n; i++ ) {\n            AttributeDefinition a = attributes.get(i);\n            if( attrName.equalsIgnoreCase(a.getName()) ) {\n                attributes.remove(i);\n                break;\n            }\n        }\n    }\n}", "path": "src\\iweb2\\ch5\\classification\\dtree\\AttributeDefinition.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "// trains NN with one training sample at a time\n/* (non-Javadoc)\n\t * @see iweb2.ch5.classification.nn.NeuralNetwork#train(double[], double[])\n\t */\n", "func_signal": "public void train(double[] tX, double[] tY)", "code": "{\n\n\tdouble lastError = 0.0;\n    int i = 0;\n    while( true ) {\n        i++;\n        // Evaluate sample\n        double[] y = classify(tX);\n        \n        double err = error(tY, y);\n\n        if( Double.isInfinite(err) || Double.isNaN(err) ) {\n            // Couldn't even evaluate the error. Stop.\n            throw new RuntimeException( \n                \"Training failed. Couldn't evaluate the error: \" + err + \n                \". Try some other NN configuration, parameters.\");\n        }\n        \n        double convergence = Math.abs(err - lastError);\n        \n        if(err <= ERROR_THRESHOLD ) {\n            // Good enough. No need to adjust weights for this sample.\n            lastError = err;\n\t\t\t\tif (verbose) {\n\t                System.out.print(\"Error Threshold: \" + ERROR_THRESHOLD);\n\t                System.out.print(\" |  Error Achieved: \" + err);\n\t                System.out.print(\" |  Number of Iterations: \" + i);\n\t            \tSystem.out.println(\" |  Absolute convergence: \" + convergence);\n            }\n            break;\n        }\n        \n        if( convergence <= CONVERGENCE_THRESHOLD ) { // If we made almost no progress stop.\n            // No change. Stop.\n        \tif (verbose) {\n\t            System.out.print(\"Error Threshold: \" + ERROR_THRESHOLD);\n\t            System.out.print(\" |  Error Achieved: \" + err);\n\t            System.out.print(\" |  Number of Iterations: \" + i);\n\t            System.out.println(\" |  Absolute convergence: \" + convergence);\n        \t}\n            break;\n        }\n\n        lastError = err;\n        \n        // Set expected values so that we can determine the error\n        outputLayer.setExpectedOutputValues(tY);\n        \n\n        /*\n         * Calculate weight adjustments in the whole network\n         */\n       \n        outputLayer.calculateWeightAdjustments();\n        \n        for(Layer hLayer : hiddenLayers) { \n            // layer order doesn't matter because we will update weights later\n            hLayer.calculateWeightAdjustments(); // WeightIncrements\n        }\n\n        /*\n         * Update Weights\n         */\n        \n        outputLayer.updateWeights();\n        \n        for(Layer hLayer : hiddenLayers) { \n            // layer order doesn't matter.\n            hLayer.updateWeights();\n        }\n    }\n    //System.out.println(\"i = \" + i + \", err = \" + lastError);\n}", "path": "src\\iweb2\\ch5\\classification\\nn\\BaseNN.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/*\n * Loading data from Digg.\n * \n * @param filename file that will be used to save the data.\n */\n", "func_signal": "public static BaseDataset loadDataFromDigg(String filename)", "code": "{\n\n    allUsers.clear();\n    allStories.clear();\n    \n    Set<String> allKnownUsers = new HashSet<String>();\n    Set<Integer> allKnownStories = new HashSet<Integer>();        \n    \n    DiggService news = new DiggService();\n    news.setItemCountPerCategory(5);\n    // Top stories across a set of categories (Technology, Sports, ...)\n    List<DiggStoryItem> topStories= news.getAllStories();\n    \n    \n    // used to assign unique id to each user\n    int nextUserId = 1;\n    \n    // iterate through top stories and collect a set of users\n    for(DiggStoryItem item : topStories) {\n        String username = item.getUsername();\n        if( !allKnownUsers.contains(username) ) {\n            allKnownUsers.add(username);\n            int userId = nextUserId++;\n            DiggUser diggUser = new DiggUser(userId, username);\n            allUsers.add(diggUser);\n        }\n    }\n    \n    // for every user retrieve up to 5 stories\n    int maxStories = 5;\n    for(DiggUser user : allUsers) {\n        List<DiggStoryItem> userItems = news.getUserStories(\n                user.getName(), maxStories);\n        \n        for(DiggStoryItem i : userItems) {\n            if( !allKnownStories.contains(i.getId()) ) {\n                allStories.add(i);\n                allKnownStories.add(i.getId());\n            }\n            else {\n                System.out.println(\"Duplicate story: id=\" + i.getId() + \n                        \", name=\" + i.getName());\n            }\n            // adding item content to the user\n            user.addUserContent(i.getItemContent());\n        }\n    }\n    System.out.println(\"From Digg:\");\n    System.out.println(\"Loaded \" + allUsers.size() + \" users.\");\n    System.out.println(\"Loaded \" + allStories.size() + \" stories (items).\");\n    \n    DiggData.saveData(filename);\n    return DiggData.createDataset();\n}", "path": "src\\iweb2\\ch3\\collaborative\\data\\DiggData.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/* (non-Javadoc)\n\t * @see iweb2.ch5.classification.nn.NeuralNetwork#createInputLayer(int, int)\n\t */\n", "func_signal": "public Layer createInputLayer(int layerId, int nNodes)", "code": "{\n    \n    BaseLayer baseLayer = new BaseLayer(layerId);\n    for(int i = 0; i < nNodes; i++) {\n        Node node = createInputNode(layerId + \":\" + i);\n        Link inlink = new BaseLink();\n        inlink.setFromNode(node);\n        inlink.setWeight(1.0);\n        node.addInlink(inlink);\n        baseLayer.addNode(node);\n    }\n    \n    return baseLayer;\n}", "path": "src\\iweb2\\ch5\\classification\\nn\\BaseNN.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * Returns array of new MusicItem instances for every songs listed in \n * <code>MUSIC_SAMPLES</code> array.\n */\n", "func_signal": "private static MusicItem[] loadAllMusicItems()", "code": "{\n    MusicItem[] allItems = new MusicItem[MusicData.MUSIC_SAMPLES.length];\n    for(int i = 0, n = allItems.length; i < n; i++) {\n        int id = i;\n        String name = MusicData.MUSIC_SAMPLES[i];\n        MusicItem item = new MusicItem(id, name);\n        allItems[i] = item;\n    }\n    return allItems;\n}", "path": "src\\iweb2\\ch3\\collaborative\\data\\MusicData.java", "repo_name": "rgravina/yooreeka", "stars": 13, "license": "None", "language": "java", "size": 19069}
{"docstring": "/**\n * shutdown\n *\n * cleanly closes everything and exit.\n */\n", "func_signal": "public void shutdown(int status)", "code": "{\n  LOG.info(\"HadoopThriftServer shutting down.\");\n  try {\n    fs.close();\n  } catch (IOException e) {\n    LOG.warn(\"Unable to close file system\");\n  }\n  Runtime.getRuntime().exit(status);\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Move a file/directory\n */\n", "func_signal": "public boolean rename(Pathname path, Pathname dest) \n                      throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"rename: \" + path +\n                                 \" destination: \" + dest);\n    boolean ret = fs.rename(new Path(path.pathname), \n                            new Path(dest.pathname));\n    HadoopThriftHandler.LOG.debug(\"rename: \" + path);\n    return ret;\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Returns status about the specified pathname\n */\n", "func_signal": "public org.apache.hadoop.thriftfs.api.FileStatus stat(\n                        Pathname path) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"stat: \" + path);\n    org.apache.hadoop.fs.FileStatus stat = fs.getFileStatus(\n                                       new Path(path.pathname));\n    HadoopThriftHandler.LOG.debug(\"stat done: \" + path);\n    return new org.apache.hadoop.thriftfs.api.FileStatus(\n      stat.getPath().toString(),\n      stat.getLen(),\n      stat.isDir(),\n      stat.getReplication(),\n      stat.getBlockSize(),\n      stat.getModificationTime(),\n      stat.getPermission().toString(),\n      stat.getOwner(),\n      stat.getGroup());\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n  * Create a file and open it for writing, delete file if it exists\n  */\n", "func_signal": "public ThriftHandle createFile(Pathname path, \n                               short mode,\n                               boolean  overwrite,\n                               int bufferSize,\n                               short replication,\n                               long blockSize) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"create: \" + path +\n                                 \" permission: \" + mode +\n                                 \" overwrite: \" + overwrite +\n                                 \" bufferSize: \" + bufferSize +\n                                 \" replication: \" + replication +\n                                 \" blockSize: \" + blockSize);\n    FSDataOutputStream out = fs.create(new Path(path.pathname), \n                                       new FsPermission(mode),\n                                       overwrite,\n                                       bufferSize,\n                                       replication,\n                                       blockSize,\n                                       null); // progress\n    long id = insert(out);\n    ThriftHandle obj = new ThriftHandle(id);\n    HadoopThriftHandler.LOG.debug(\"created: \" + path + \" id: \" + id);\n    return obj;\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Delete a file/directory\n */\n", "func_signal": "public boolean rm(Pathname path, boolean recursive) \n                      throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"rm: \" + path +\n                                 \" recursive: \" + recursive);\n    boolean ret = fs.delete(new Path(path.pathname), recursive);\n    HadoopThriftHandler.LOG.debug(\"rm: \" + path);\n    return ret;\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Does this pathname exist?\n */\n", "func_signal": "public boolean exists(Pathname path) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"exists: \" + path);\n    boolean ret = fs.exists(new Path(path.pathname));\n    HadoopThriftHandler.LOG.debug(\"exists done: \" + path);\n    return ret;\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Sets the replication factor of a file\n */\n", "func_signal": "public void setReplication(Pathname path, short repl) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"setrepl: \" + path +\n                                 \" replication factor: \" + repl);\n    fs.setReplication(new Path(path.pathname), repl);\n    HadoopThriftHandler.LOG.debug(\"setrepl done: \" + path);\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Opens an existing file to append to it.\n */\n", "func_signal": "public ThriftHandle append(Pathname path) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"append: \" + path);\n    FSDataOutputStream out = fs.append(new Path(path.pathname));\n    long id = insert(out);\n    ThriftHandle obj = new ThriftHandle(id);\n    HadoopThriftHandler.LOG.debug(\"appended: \" + path + \" id: \" + id);\n    return obj;\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Sets the owner & group of a pathname\n */\n", "func_signal": "public void chown(Pathname path, String owner, String group) \n                                                   throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"chown: \" + path +\n                                 \" owner: \" + owner +\n                                 \" group: \" + group);\n    fs.setOwner(new Path(path.pathname), owner, group);\n    HadoopThriftHandler.LOG.debug(\"chown done: \" + path);\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/** Set inactivity timeout period. The period is specified in seconds.\n  * if there are no RPC calls to the HadoopThrift server for this much\n  * time, then the server kills itself.\n  */\n", "func_signal": "public synchronized void setInactivityTimeoutPeriod(long periodInSeconds)", "code": "{\n  inactivityPeriod = periodInSeconds * 1000; // in milli seconds\n  if (inactivityRecheckInterval > inactivityPeriod ) {\n    inactivityRecheckInterval = inactivityPeriod;\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * read from a file\n */\n", "func_signal": "public String read(ThriftHandle tout, long offset,\n                   int length) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"read: \" + tout.id +\n                                 \" offset: \" + offset +\n                                 \" length: \" + length);\n    FSDataInputStream in = (FSDataInputStream)lookup(tout.id);\n    if (in.getPos() != offset) {\n      in.seek(offset);\n    }\n    byte[] tmp = new byte[length];\n    int numbytes = in.read(offset, tmp, 0, length);\n    HadoopThriftHandler.LOG.debug(\"read done: \" + tout.id);\n    return new String(tmp, 0, numbytes, \"UTF-8\");\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * HadoopThriftServer\n *\n * Constructor for the HadoopThriftServer glue with Thrift Class.\n *\n * @param name - the name of this handler\n */\n", "func_signal": "public HadoopThriftHandler(String name)", "code": "{\n  conf = new Configuration();\n  now = now();\n  try {\n    inactivityThread = new Daemon(new InactivityMonitor());\n    fs = FileSystem.get(conf);\n  } catch (IOException e) {\n    LOG.warn(\"Unable to open hadoop file system...\");\n    Runtime.getRuntime().exit(-1);\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Create a directory\n */\n", "func_signal": "public boolean mkdirs(Pathname path) throws ThriftIOException", "code": "{\n try {\n   now = now();\n   HadoopThriftHandler.LOG.debug(\"mkdirs: \" + path);\n   boolean ret = fs.mkdirs(new Path(path.pathname));\n   HadoopThriftHandler.LOG.debug(\"mkdirs: \" + path);\n   return ret;\n } catch (IOException e) {\n   throw new ThriftIOException(e.getMessage());\n }\n    }", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Constrcts a server object\n */\n", "func_signal": "public HadoopThriftServer(String [] args)", "code": "{\n\n  if (args.length > 0) {\n    serverPort = new Integer(args[0]);\n  }\n  try {\n    ServerSocket ssock = createServerSocket(serverPort);\n    TServerTransport serverTransport = new TServerSocket(ssock);\n    Iface handler = new HadoopThriftHandler(\"hdfs-thrift-dhruba\");\n    ThriftHadoopFileSystem.Processor processor = new ThriftHadoopFileSystem.Processor(handler);\n    TThreadPoolServer.Options options = new TThreadPoolServer.Options();\n    options.minWorkerThreads = 10;\n    server = new TThreadPoolServer(processor, serverTransport,\n                                           new TTransportFactory(),\n                                           new TTransportFactory(),\n                                           new TBinaryProtocol.Factory(),\n                                           new TBinaryProtocol.Factory(), \n                                           options);\n    System.out.println(\"Starting the hadoop thrift server on port [\" + serverPort + \"]...\");\n    HadoopThriftHandler.LOG.info(\"Starting the hadoop thrift server on port [\" +serverPort + \"]...\");\n    System.out.flush();\n\n  } catch (Exception x) {\n    x.printStackTrace();\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * If the specified pathname is a directory, then return the\n * list of pathnames in this directory\n */\n", "func_signal": "public List<org.apache.hadoop.thriftfs.api.FileStatus> listStatus(\n                        Pathname path) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"listStatus: \" + path);\n\n    org.apache.hadoop.fs.FileStatus[] stat = fs.listStatus(\n                                       new Path(path.pathname));\n    HadoopThriftHandler.LOG.debug(\"listStatus done: \" + path);\n    org.apache.hadoop.thriftfs.api.FileStatus tmp;\n    List<org.apache.hadoop.thriftfs.api.FileStatus> value = \n      new LinkedList<org.apache.hadoop.thriftfs.api.FileStatus>();\n\n    for (int i = 0; i < stat.length; i++) {\n      tmp = new org.apache.hadoop.thriftfs.api.FileStatus(\n                  stat[i].getPath().toString(),\n                  stat[i].getLen(),\n                  stat[i].isDir(),\n                  stat[i].getReplication(),\n                  stat[i].getBlockSize(),\n                  stat[i].getModificationTime(),\n                  stat[i].getPermission().toString(),\n                  stat[i].getOwner(),\n                  stat[i].getGroup());\n      value.add(tmp);\n    }\n    return value;\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n  * printStackTrace\n  *\n  * Helper function to print an exception stack trace to the log and not stderr\n  *\n  * @param e the exception\n  *\n  */\n", "func_signal": "static private void printStackTrace(Exception e)", "code": "{\n  for(StackTraceElement s: e.getStackTrace()) {\n    LOG.error(s);\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "// Bind to port. If the specified port is 0, then bind to random port.\n", "func_signal": "private ServerSocket createServerSocket(int port) throws IOException", "code": "{\n  try {\n    ServerSocket sock = new ServerSocket();\n    // Prevent 2MSL delay problem on server restarts\n    sock.setReuseAddress(true);\n    // Bind to listening port\n    if (port == 0) {\n      sock.bind(null);\n      serverPort = sock.getLocalPort();\n    } else {\n      sock.bind(new InetSocketAddress(port));\n    }\n    return sock;\n  } catch (IOException ioe) {\n    throw new IOException(\"Could not create ServerSocket on port \" + port + \".\" +\n                          ioe);\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n  * Create a file and open it for writing\n  */\n", "func_signal": "public ThriftHandle create(Pathname path) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"create: \" + path);\n    FSDataOutputStream out = fs.create(new Path(path.pathname));\n    long id = insert(out);\n    ThriftHandle obj = new ThriftHandle(id);\n    HadoopThriftHandler.LOG.debug(\"created: \" + path + \" id: \" + id);\n    return obj;\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Sets the permission of a pathname\n */\n", "func_signal": "public void chmod(Pathname path, short mode) throws ThriftIOException", "code": "{\n  try {\n    now = now();\n    HadoopThriftHandler.LOG.debug(\"chmod: \" + path + \n                                 \" mode \" + mode);\n    fs.setPermission(new Path(path.pathname), new FsPermission(mode));\n    HadoopThriftHandler.LOG.debug(\"chmod done: \" + path);\n  } catch (IOException e) {\n    throw new ThriftIOException(e.getMessage());\n  }\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Insert a thrift object into a hadoop object. Return its id.\n */\n", "func_signal": "private synchronized long insert(Object o)", "code": "{\n  nextId++;\n  hadoopHash.put(nextId, o);\n  return nextId;\n}", "path": "hadoop-0.20.2+737\\src\\contrib\\thriftfs\\src\\java\\org\\apache\\hadoop\\thriftfs\\HadoopThriftServer.java", "repo_name": "mesos/cdh-mesos", "stars": 13, "license": "None", "language": "java", "size": 59116}
{"docstring": "/**\n * Sets a custom initial capacity (defaults to 16). Resizing this or any\n * other kind of hash table is a relatively slow operation, so, when\n * possible, it is a good idea to provide estimates of expected table\n * sizes.\n * \n * @throws IllegalArgumentException\n *         if initialCapacity < 0\n */\n", "func_signal": "public Builder initialCapacity(int initialCapacity)", "code": "{\n    if (this.initialCapacity != UNSET_INITIAL_CAPACITY) {\n        throw new IllegalStateException(\"initial capacity was already set to \"\n                + this.initialCapacity);\n    }\n    if (initialCapacity < 0) {\n        throw new IllegalArgumentException();\n    }\n    this.initialCapacity = initialCapacity;\n    return this;\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Removes the key (and its corresponding value) from this map. This\n * method does nothing if the key is not in the map.\n * \n * @param key\n *        the key that needs to be removed\n * @return the previous value associated with {@code key}, or {@code\n *         null} if there was no mapping for {@code key}\n * @throws NullPointerException\n *         if the specified key is null\n */\n", "func_signal": "@Override\npublic V remove(Object key)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key\");\n    }\n    int hash = hash(key);\n    return segmentFor(hash).remove(key, hash);\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Construct a new Gingerbread Last Location Finder.\n *\n * @param context\n *            Context\n */\n", "func_signal": "public GingerbreadLastLocationFinder(Context context)", "code": "{\n\tsuper(context);\n\t// Coarse accuracy is specified here to get the fastest possible result.\n\t// The calling Activity will likely (or have already) request ongoing\n\t// updates using the Fine location provider.\n\tcriteria = new Criteria();\n\tcriteria.setAccuracy(Criteria.ACCURACY_LOW);\n\n\t// Construct the Pending Intent that will be broadcast by the oneshot\n\t// location update.\n\tIntent updateIntent = new Intent(SINGLE_LOCATION_UPDATE_ACTION);\n\tsingleUpatePI = PendingIntent.getBroadcast(context, 0, updateIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\location\\finder\\GingerbreadLastLocationFinder.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Start listening for location updates. It is recommend to call this from\n * onResume\n */\n", "func_signal": "private void enableLocationUpdates()", "code": "{\n\tAsyncTask<Void, Void, Void> findLastLocationTask = new AsyncTask<Void, Void, Void>() {\n\t\t@Override\n\t\tprotected Void doInBackground(Void... params) {\n\t\t\t// Find the last known location, specifying a required accuracy\n\t\t\t// of within the min distance between updates\n\t\t\t// and a required latency of the minimum time required between\n\t\t\t// updates.\n\t\t\tLocation lastKnownLocation = lastLocationFinder.getLastBestLocation(MAX_DISTANCE, System.currentTimeMillis()\n\t\t\t\t\t- MAX_TIME);\n\t\t\t// send location to view and model\n\t\t\tPresenter.getInst().sendViewMessage(P_UPDATE_LOCATION, lastKnownLocation);\n\t\t\tPresenter.getInst().sendModelMessage(P_UPDATE_LOCATION, lastKnownLocation);\n\t\t\treturn null;\n\t\t}\n\t};\n\tfindLastLocationTask.execute();\n\n\t// Normal updates while activity is visible.\n\tlocationUpdateRequester.requestLocationUpdates(MAX_TIME, MAX_DISTANCE, criteria, locationListenerPendingIntent);\n\n\t// Passive location updates from 3rd party apps when the Activity isn't\n\t// visible.\n\tlocationUpdateRequester.requestPassiveLocationUpdates(PASSIVE_MAX_TIME, PASSIVE_MAX_DISTANCE,\n\t\t\tlocationListenerPassivePendingIntent);\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\location\\GeoLocationClient.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * {@inheritDoc}\n * \n * @throws NullPointerException\n *         if any of the arguments are null\n */\n", "func_signal": "public boolean replace(K key, V oldValue, V newValue)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key\");\n    }\n    if (oldValue == null) {\n        throw new NullPointerException(\"oldValue\");\n    }\n    if (newValue == null) {\n        throw new NullPointerException(\"newValue\");\n    }\n    int hash = hash(key);\n    return segmentFor(hash).replace(key, hash, oldValue, newValue);\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Returns a {@link java.util.Set} view of the mappings contained in\n * this map. The set is backed by the map, so changes to the map are\n * reflected in the set, and vice-versa. The set supports element\n * removal, which removes the corresponding mapping from the map, via\n * the {@code Iterator.remove}, {@code Set.remove}, {@code removeAll},\n * {@code retainAll}, and {@code clear} operations. It does not support\n * the {@code add} or {@code addAll} operations.\n * <p>\n * The view's {@code iterator} is a \"weakly consistent\" iterator that\n * will never throw {@link java.util.ConcurrentModificationException},\n * and guarantees to traverse elements as they existed upon construction\n * of the iterator, and may (but is not guaranteed to) reflect any\n * modifications subsequent to construction.\n */\n", "func_signal": "@Override\npublic Set<Entry<K, V>> entrySet()", "code": "{\n    Set<Entry<K, V>> es = entrySet;\n    return (es != null) ? es : (entrySet = new EntrySet());\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Applies a supplemental hash function to a given hash code, which defends\n * against poor quality hash functions. This is critical when the concurrent\n * hash map uses power-of-two length hash tables, that otherwise encounter\n * collisions for hash codes that do not differ in lower or upper bits.\n * \n * @param h\n *        hash code\n */\n", "func_signal": "private static int rehash(int h)", "code": "{\n    // Spread bits to regularize both segment and index locations,\n    // using variant of single-word Wang/Jenkins hash.\n    h += (h << 15) ^ 0xffffcd7d;\n    h ^= (h >>> 10);\n    h += (h << 3);\n    h ^= (h >>> 6);\n    h += (h << 2) + (h << 14);\n    return h ^ (h >>> 16);\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Remove View-component from <code>mViewHandler</code>.\n *\n * @param viewComponentallback\n *            - View-component, which realized {@link Callback}.\n */\n", "func_signal": "public final void unsubscribe(Callback viewComponentallback)", "code": "{\n\tList<Handler> newList = new ArrayList<Handler>(mViewHandlers);\n\tnewList.remove(mHandlerMap.get(viewComponentallback));\n\tmHandlerMap.remove(viewComponentallback);\n\tmViewHandlers = newList;\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\core\\Presenter.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Maps the specified key to the specified value in this table. Neither\n * the key nor the value can be null.\n * <p>\n * The value can be retrieved by calling the {@code get} method with a\n * key that is equal to the original key.\n * \n * @param key\n *        key with which the specified value is to be associated\n * @param value\n *        value to be associated with the specified key\n * @return the previous value associated with {@code key}, or {@code\n *         null} if there was no mapping for {@code key}\n * @throws NullPointerException\n *         if the specified key or value is null\n */\n", "func_signal": "@Override\npublic V put(K key, V value)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key\");\n    }\n    if (value == null) {\n        throw new NullPointerException(\"value\");\n    }\n    int hash = hash(key);\n    return segmentFor(hash).put(key, hash, value, false);\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Stop listening for location updates. It is recommend to call this from\n * onPause\n */\n", "func_signal": "private void disableLocationUpdates()", "code": "{\n\tlocationManager.removeUpdates(locationListenerPendingIntent);\n\tlastLocationFinder.cancel();\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\location\\GeoLocationClient.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Send message with {@link Message#arg1}=0, {@link Message#arg2}=0 to\n * Model-components. Model-components receive message consequentially or\n * parallel.\n *\n * @param what\n *            - protocol, from {@link AsyncMvpPresenterProtocol} or class\n *            extended it.\n * @param arg1\n *            - {@link Message#arg1}\n * @param arg2\n *            - {@link Message#arg2}\n * @param obj\n *            - {@link Message#obj}\n * @param bundle\n *            - container with primitive types for additional info\n */\n", "func_signal": "public final void sendModelMessage(int what, int arg1, int arg2, Object obj, Bundle bundle)", "code": "{\n\tfor (Handler handler : mModelHandlers) {\n\t\tsendMessageToTarget(handler, what, arg1, arg2, obj, bundle);\n\t}\n\tMessage.obtain(mThisHandler, what, arg1, arg2, obj).sendToTarget();\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\core\\Presenter.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void requestPassiveLocationUpdates(long minTime, long minDistance, PendingIntent pendingIntent)", "code": "{\n\t// Pre-Froyo there was no Passive Location Provider, so instead we will\n\t// set an inexact repeating, non-waking alarm\n\t// that will trigger once the minimum time between passive updates has\n\t// expired. This is potentially more expensive\n\t// than simple passive alarms, however the Receiver will ensure we've\n\t// transitioned beyond the minimum time and\n\t// distance before initiating a background nearby loction update.\n\talarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME, System.currentTimeMillis() + MAX_TIME, MAX_TIME,\n\t\t\tpendingIntent);\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\location\\updaterequester\\EclairLocationUpdateRequester.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Returns the most accurate and timely previously detected location. Where\n * the last result is beyond the specified maximum distance or latency a\n * one-off location update is returned via the {@link LocationListener}\n * specified in {@link setChangedLocationListener}.\n *\n * @param minDistance\n *            Minimum distance before we require a location update.\n * @param minTime\n *            Minimum time required between location updates.\n * @return The most accurate and / or timely previously detected location.\n */\n", "func_signal": "@Override\npublic Location getLastBestLocation(int minDistance, long minTime)", "code": "{\n\tLocation bestResult = null;\n\tfloat bestAccuracy = Float.MAX_VALUE;\n\tlong bestTime = Long.MAX_VALUE;\n\n\tbestResult = getBestLocationResult(bestAccuracy, bestTime, minTime);\n\n\t// If the best result is beyond the allowed time limit, or the accuracy\n\t// of the\n\t// best result is wider than the acceptable maximum distance, request a\n\t// single update.\n\t// This check simply implements the same conditions we set when\n\t// requesting regular\n\t// location updates every [minTime] and [minDistance].\n\t// Prior to Gingerbread \"one-shot\" updates weren't available, so we need\n\t// to implement\n\t// this manually.\n\tif (locationListener != null && (bestTime > minTime || bestAccuracy > minDistance)) {\n\t\tString provider = locationManager.getBestProvider(criteria, true);\n\t\tif (provider != null) {\n\t\t\tlocationManager.requestLocationUpdates(provider, 0, 0, singeUpdateListener, context.getMainLooper());\n\t\t}\n\t}\n\n\treturn bestResult;\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\location\\finder\\LegacyLastLocationFinder.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Returns a {@link java.util.Collection} view of the values contained\n * in this map. The collection is backed by the map, so changes to the\n * map are reflected in the collection, and vice-versa. The collection\n * supports element removal, which removes the corresponding mapping\n * from this map, via the {@code Iterator.remove}, {@code\n * Collection.remove}, {@code removeAll}, {@code retainAll}, and {@code\n * clear} operations. It does not support the {@code add} or {@code\n * addAll} operations.\n * <p>\n * The view's {@code iterator} is a \"weakly consistent\" iterator that\n * will never throw {@link java.util.ConcurrentModificationException},\n * and guarantees to traverse elements as they existed upon construction\n * of the iterator, and may (but is not guaranteed to) reflect any\n * modifications subsequent to construction.\n */\n", "func_signal": "@Override\npublic Collection<V> values()", "code": "{\n    Collection<V> vs = values;\n    return (vs != null) ? vs : (values = new Values());\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Returns the number of key-value mappings in this map. If the map\n * contains more than {@code Integer.MAX_VALUE} elements, returns\n * {@code Integer.MAX_VALUE}.\n * \n * @return the number of key-value mappings in this map\n */\n", "func_signal": "@Override\npublic int size()", "code": "{\n    final Segment[] segments = this.segments;\n    long sum = 0;\n    long check = 0;\n    int[] mc = new int[segments.length];\n    // Try a few times to get accurate count. On failure due to\n    // continuous async changes in table, resort to locking.\n    for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) {\n        check = 0;\n        sum = 0;\n        int mcsum = 0;\n        for (int i = 0; i < segments.length; ++i) {\n            sum += segments[i].count;\n            mcsum += mc[i] = segments[i].modCount;\n        }\n        if (mcsum != 0) {\n            for (int i = 0; i < segments.length; ++i) {\n                check += segments[i].count;\n                if (mc[i] != segments[i].modCount) {\n                    check = -1; // force retry\n                    break;\n                }\n            }\n        }\n        if (check == sum) {\n            break;\n        }\n    }\n    if (check != sum) { // Resort to locking all segments\n        sum = 0;\n        for (Segment segment : segments) {\n            segment.lock();\n        }\n        for (Segment segment : segments) {\n            sum += segment.count;\n        }\n        for (Segment segment : segments) {\n            segment.unlock();\n        }\n    }\n    if (sum > Integer.MAX_VALUE) {\n        return Integer.MAX_VALUE;\n    } else {\n        return (int) sum;\n    }\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Add View-component in <code>mViewHandler</code> for receiving messages\n *\n * @param viewComponentCallback\n *            - View-component, which realized {@link Callback}.\n */\n", "func_signal": "public final void subscribe(Callback viewComponentCallback)", "code": "{\n\tHandler handler = new Handler(viewComponentCallback);\n\tmHandlerMap.put(viewComponentCallback, handler);\n\tmViewHandlers.add(handler);\n}", "path": "Async-MVP\\src\\com\\hippoapp\\asyncmvp\\core\\Presenter.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Creates a new concurrent hash map backed by the given strategy.\n * \n * @param strategy\n *        used to implement and manipulate the entries\n * @param <K>\n *        the type of keys to be stored in the returned map\n * @param <V>\n *        the type of values to be stored in the returned map\n * @param <E>\n *        the type of internal entry to be stored in the returned map\n * @throws NullPointerException\n *         if strategy is null\n */\n", "func_signal": "public <K, V, E> ConcurrentMap<K, V> buildMap(Strategy<K, V, E> strategy)", "code": "{\n    if (strategy == null) {\n        throw new NullPointerException(\"strategy\");\n    }\n    return new Impl<K, V, E>(strategy, this);\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Tests if the specified object is a key in this table.\n * \n * @param key\n *        possible key\n * @return {@code true} if and only if the specified object is a key in\n *         this table, as determined by the {@code equals} method;\n *         {@code false} otherwise.\n * @throws NullPointerException\n *         if the specified key is null\n */\n", "func_signal": "@Override\npublic boolean containsKey(Object key)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key\");\n    }\n    int hash = hash(key);\n    return segmentFor(hash).containsKey(key, hash);\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Guides the allowed concurrency among update operations. Used as a\n * hint for internal sizing. The table is internally partitioned to try\n * to permit the indicated number of concurrent updates without\n * contention. Because placement in hash tables is essentially random,\n * the actual concurrency will vary. Ideally, you should choose a value\n * to accommodate as many threads as will ever concurrently modify the\n * table. Using a significantly higher value than you need can waste\n * space and time, and a significantly lower value can lead to thread\n * contention. But overestimates and underestimates within an order of\n * magnitude do not usually have much noticeable impact. A value of one\n * is appropriate when it is known that only one thread will modify and\n * all others will only read. Defaults to {@literal 16}.\n * \n * @throws IllegalArgumentException\n *         if concurrencyLevel < 0\n */\n", "func_signal": "public Builder concurrencyLevel(int concurrencyLevel)", "code": "{\n    if (this.concurrencyLevel != UNSET_CONCURRENCY_LEVEL) {\n        throw new IllegalStateException(\"concurrency level was already set to \"\n                + this.concurrencyLevel);\n    }\n    if (concurrencyLevel <= 0) {\n        throw new IllegalArgumentException();\n    }\n    this.concurrencyLevel = concurrencyLevel;\n    return this;\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Returns the value to which the specified key is mapped, or {@code\n * null} if this map contains no mapping for the key.\n * <p>\n * More formally, if this map contains a mapping from a key {@code k} to\n * a value {@code v} such that {@code key.equals(k)}, then this method\n * returns {@code v}; otherwise it returns {@code null}. (There can be\n * at most one such mapping.)\n * \n * @throws NullPointerException\n *         if the specified key is null\n */\n", "func_signal": "@Override\npublic V get(Object key)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key\");\n    }\n    int hash = hash(key);\n    return segmentFor(hash).get(key, hash);\n}", "path": "Async-MVP\\src\\com\\google\\common\\collect\\CustomConcurrentHashMap.java", "repo_name": "jaroinformaticus/AsyncMvp", "stars": 9, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Set the bandwidth of the session.\n * \n * See sessionBandwidth(void) for details. \n * \n * @param bandwidth the new value requested, in bytes per second\n * @return the actual value set\n \t */\n", "func_signal": "public int sessionBandwidth(int bandwidth)", "code": "{\n\tif(bandwidth < 1) {\n\t\tthis.bandwidth = 8000;\n\t} else {\n\t\tthis.bandwidth = bandwidth;\n\t}\n\treturn this.bandwidth;\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * \n * @param group\n *            group information for the one to add + (contacts to add inside\n *            the group)\n * @return the response from the server (HTTPstatus + message)\n * @throws JSONException\n * @throws IOException\n * @throws ClientProtocolException\n */\n", "func_signal": "public Status addNewGroup(Group group) throws ClientProtocolException,\n\t\tIOException, JSONException", "code": "{\n\t// group insertion\n\tHashMap<String, Object> hM = new HashMap<String, Object>();\n\thM.put(\"groupName\", group.getGroupName());\n\thM.put(\"status\", group.getGroupStatus());\n\n\tResponse r = this.post(\"insertGroup\", hM);\n\t// 201 = HTTP status code for user inserted\n\tif (r.getStatus() == 201) {\n\t\t// store the id of the brand new group for utilize it in inserting\n\t\t// the user\n\t\tgroup.setId(Integer.parseInt(r.getResult().getString(\"id\")));\n\t\treturn new Status(true, \"Profile added successfully\");\n\t} else {\n\t\treturn new Status(false, \"\" + r.getResult());\n\t}\n}", "path": "src\\org\\nebula\\client\\rest\\RESTGroupManager.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Returns an instance of a <b>unicast</b> RTP session. \n * Following this you should adjust any settings and then register your application.\n * \n * The sockets should have external ip addresses, else your CNAME automatically\n * generated CNAMe will be bad.\n * \n * @param\trtpSocket UDP socket to receive RTP communication on\n * @param\trtcpSocket UDP socket to receive RTCP communication on, null if none.\n */\n", "func_signal": "public RTPSession(DatagramSocket rtpSocket, DatagramSocket rtcpSocket)", "code": "{\n\t\t mcSession = false;\n\t\t rtpSock = rtpSocket;\n\t\t this.generateCNAME();\n\t\t this.generateSsrc();\n\t\t this.rtcpSession = new RTCPSession(this,rtcpSocket);\n\t\t \n\t\t // The sockets are not always imediately available?\n\t\t try { Thread.sleep(1); } catch (InterruptedException e) { System.out.println(\"RTPSession sleep failed\"); }\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Adds a Reference Picture Selection Indication to the feedback queue\n * \n * @param ssrcMediaSource\n * @param bitPadding number of padded bits at end of bitString\n * @param payloadType RTP payload type for codec\n * @param bitString RPSI information as natively defined by the video codec\n * @return 0 if packet was queued, -1 if no feedback support, 1 if redundant\n */\n", "func_signal": "public int fbRefPictureSelIndic(long ssrcMediaSource, int bitPadding, int payloadType, byte[] bitString)", "code": "{\n\tint ret = 0;\n\t\n\tif(this.rtcpAVPFIntf == null)\n\t\treturn -1;\n\t\n\tRtcpPktPSFB pkt = new RtcpPktPSFB(this.ssrc, ssrcMediaSource);\n\tpkt.makeRefPictureSelIndic(bitPadding, payloadType, bitString);\n\tret = this.rtcpSession.addToFbQueue(ssrcMediaSource, pkt);\n\tif(ret == 0)\n\t\tthis.rtcpSession.wakeSenderThread(ssrcMediaSource);\n\treturn ret; \n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * @param contactUsername\n *            user supposed to be added as contact\n * @param contactNickName\n *            nick of the user supposed to be added as contact\n * @return status of the performed operation\n */\n", "func_signal": "public Status addContact(String contactUsername, String contactNickName)\n\t\tthrows ClientProtocolException, IOException, JSONException", "code": "{\n\tHashMap<String, Object> hMGroupUser = new HashMap<String, Object>();\n\thMGroupUser.put(\"username\", contactUsername);\n\thMGroupUser.put(\"nickname\", contactNickName);\n\tResponse r = this.post(\"addContact\", hMGroupUser);\n\t// 201 = HTTP status for insertion performed correctly\n\tif (r.getStatus() == 201) {\n\t\treturn new Status(true, \"Profile added successfully\");\n\t} else {\n\t\treturn new Status(false, r.getResult().getString(\"result\"));\n\t}\n}", "path": "src\\org\\nebula\\client\\rest\\RESTGroupManager.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Insert the Profiles that belongs to group object into it in the DB\n * \n * @param group\n * @return\n */\n", "func_signal": "public Status insertUsersIntoGroup(Group group)\n\t\tthrows ClientProtocolException, IOException, JSONException", "code": "{\n\t// for every user, perform the insert operation\n\tResponse r = null;\n\tList<Profile> user = group.getContacts();\n\tfor (int i = 0; i < user.size(); i++) {\n\t\tHashMap<String, Object> hMGroupUser = new HashMap<String, Object>();\n\t\thMGroupUser.put(\"userID\", user.get(i).getId());\n\t\thMGroupUser.put(\"groupID\", group.getId());\n\t\tr = this.post(\"insertUserIntoGroup\", hMGroupUser);\n\t}\n\t// 201 = HTTP status for insertion performed correctly\n\tif (r.getStatus() == 201) {\n\t\treturn new Status(true, \"Profile added successfully\");\n\t} else {\n\t\treturn new Status(false, r.getResult().getString(\"result\"));\n\t}\n}", "path": "src\\org\\nebula\\client\\rest\\RESTGroupManager.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * @return status of the performed operation\n */\n", "func_signal": "public Status retrieveGroup(Group g) throws JSONException,\n\t\tClientProtocolException, IOException", "code": "{\n\tHashMap<String, String> hM = new HashMap<String, String>();\n\thM.put(\"id\", \"\" + g.getId());\n\tResponse r = this.get(\"retrieveGroup\", hM);\n\tg.setGroupName(\"\" + r.getResult().get(\"groupName\"));\n\tg.setGroupStatus(\"\" + r.getResult().get(\"status\"));\n\t// HTTP valid return status\n\tif ((r.getStatus() >= 200) && (r.getStatus() < 300)) {\n\t\treturn new Status(true, \"Group retrieved successfully\");\n\t} else {\n\t\treturn new Status(false, r.getResult().getString(\"result\"));\n\t}\n}", "path": "src\\org\\nebula\\client\\rest\\RESTGroupManager.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Set the RTCP bandwidth, see rtcpBandwidth(void) for details. \n * \n * This function must be\n * \n * @param bandwidth the new value requested, in bytes per second or -1 to disable\n * @return the actual value set\n \t */\n", "func_signal": "public int rtcpBandwidth(int bandwidth)", "code": "{\n\tif(bandwidth < -1) {\n\t\tthis.rtcpBandwidth = -1;\n\t} else {\n\t\tthis.rtcpBandwidth = bandwidth;\n\t}\n\treturn this.rtcpBandwidth;\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Change the RTCP socket of the session. \n * Peers must be notified through SIP or other signalling protocol.\n * Only valid if this is a unicast session to begin with.\n * \n * @param newSock the new unicast socket for RTP communication.\n */\n", "func_signal": "public int updateRTCPSock(DatagramSocket newSock)", "code": "{\n\tif(!mcSession) {\n\t\tthis.rtcpSession.rtcpSock = newSock;\n\t\treturn 0;\n\t} else {\n\t\tSystem.out.println(\"Can't switch from multicast to unicast.\");\n\t\treturn -1;\n\t}\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/** \n * Generates a random sequence number\n */\n", "func_signal": "private void generateSeqNum()", "code": "{\n\tif(this.random == null)\n\t\tcreateRandom();\n\t\n\tseqNum = this.random.nextInt();\n\tif(seqNum < 0)\n\t\tseqNum = -seqNum;\n\twhile(seqNum > 65535) {\n\t\tseqNum = seqNum / 10;\n\t}\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Send data to all participants registered as receivers, using the current timeStamp and\n * payload type. The RTP timestamp will be the same for all the packets.\n * \n * @param buffers A buffer of bytes, should not bed padded and less than 1500 bytes on most networks.\n * @param csrcArray an array with the SSRCs of contributing sources\n * @param markers An array indicating what packets should be marked. Rarely anything but the first one\n * @param rtpTimestamp The RTP timestamp to be applied to all packets\n * @param seqNumbers An array with the sequence number associated with each byte[]\n * @return\tnull if there was a problem sending the packets, 2-dim array with {RTP Timestamp, Sequence number}\n */\n", "func_signal": "public long[][] sendData(byte[][] buffers, long[] csrcArray, boolean[] markers, long rtpTimestamp, long[] seqNumbers)", "code": "{\n\t\t if(RTPSession.rtpDebugLevel > 5) {\n\t\t\t System.out.println(\"-> RTPSession.sendData(byte[])\");\n\t\t }\n\n\t\t // Same RTP timestamp for all\n\t\t if(rtpTimestamp < 0)\n\t\t\t rtpTimestamp = System.currentTimeMillis();\n\t\t \n\t\t // Return values\n\t\t long[][] ret = new long[buffers.length][2];\n\n\t\t for(int i=0; i<buffers.length; i++) {\n\t\t\t byte[] buf = buffers[i];\n\t\t\t \n\t\t\t boolean marker = false;\n\t\t\t if(markers != null)\n\t\t\t\t  marker = markers[i];\n\t\t\t \n\t\t\t if(buf.length > 1500) {\n\t\t\t\t System.out.println(\"RTPSession.sendData() called with buffer exceeding 1500 bytes (\"+buf.length+\")\");\n\t\t\t }\n\n\t\t\t // Get the return values\n\t\t\t ret[i][0] = rtpTimestamp;\n\t\t\t if(seqNumbers == null) {\n\t\t\t\t ret[i][1] = getNextSeqNum();\n\t\t\t } else {\n\t\t\t\t ret[i][1] = seqNumbers[i];\n\t\t\t }\n\t\t\t // Create a new RTP Packet\n\t\t\t RtpPkt pkt = new RtpPkt(rtpTimestamp,this.ssrc,(int) ret[i][1],this.payloadType,buf);\n\n\t\t\t if(csrcArray != null)\n\t\t\t\t pkt.setCsrcs(csrcArray);\n\n\t\t\t pkt.setMarked(marker);\n\n\t\t\t // Creates a raw packet\n\t\t\t byte[] pktBytes = pkt.encode();\n\t\t\t \n\t\t\t //System.out.println(Integer.toString(StaticProcs.bytesToUIntInt(pktBytes, 2)));\n\n\t\t\t // Pre-flight check, are resolving an SSRC conflict?\n\t\t\t if(this.conflict) {\n\t\t\t\t System.out.println(\"RTPSession.sendData() called while trying to resolve conflict.\");\n\t\t\t\t return null;\n\t\t\t }\n\n\n\t\t\t if(this.mcSession) {\n\t\t\t\t DatagramPacket packet = null;\n\n\n\t\t\t\t try {\n\t\t\t\t\t packet = new DatagramPacket(pktBytes,pktBytes.length,this.mcGroup,this.rtpMCSock.getPort());\n\t\t\t\t } catch (Exception e) {\n\t\t\t\t\t System.out.println(\"RTPSession.sendData() packet creation failed.\");\n\t\t\t\t\t e.printStackTrace();\n\t\t\t\t\t return null;\n\t\t\t\t }\n\n\t\t\t\t try {\n\t\t\t\t\t rtpMCSock.send(packet);\n\t\t\t\t\t //Debug\n\t\t\t\t\t if(this.debugAppIntf != null) {\n\t\t\t\t\t\t this.debugAppIntf.packetSent(1, (InetSocketAddress) packet.getSocketAddress(), \n\t\t\t\t\t\t\t\t new String(\"Sent multicast RTP packet of size \" + packet.getLength() + \n\t\t\t\t\t\t\t\t\t\t \" to \" + packet.getSocketAddress().toString() + \" via \" \n\t\t\t\t\t\t\t\t\t\t + rtpMCSock.getLocalSocketAddress().toString()));\n\t\t\t\t\t }\n\t\t\t\t } catch (Exception e) {\n\t\t\t\t\t System.out.println(\"RTPSession.sendData() multicast failed.\");\n\t\t\t\t\t e.printStackTrace();\n\t\t\t\t\t return null;\n\t\t\t\t }\t\t\n\n\t\t\t } else {\n\t\t\t\t // Loop over recipients\n\t\t\t\t Iterator<Participant> iter = partDb.getUnicastReceivers();\n\t\t\t\t while(iter.hasNext()) {\t\t\t\n\t\t\t\t\t InetSocketAddress receiver = iter.next().rtpAddress;\n\t\t\t\t\t DatagramPacket packet = null;\n\n\t\t\t\t\t if(RTPSession.rtpDebugLevel > 15) {\n\t\t\t\t\t\t System.out.println(\"   Sending to \" + receiver.toString());\n\t\t\t\t\t }\n\n\t\t\t\t\t try {\n\t\t\t\t\t\t packet = new DatagramPacket(pktBytes,pktBytes.length,receiver);\n\t\t\t\t\t } catch (Exception e) {\n\t\t\t\t\t\t System.out.println(\"RTPSession.sendData() packet creation failed.\");\n\t\t\t\t\t\t e.printStackTrace();\n\t\t\t\t\t\t return null;\n\t\t\t\t\t }\n\n\t\t\t\t\t //Actually send the packet\n\t\t\t\t\t try {\n\t\t\t\t\t\t rtpSock.send(packet);\n\t\t\t\t\t\t //Debug\n\t\t\t\t\t\t if(this.debugAppIntf != null) {\n\t\t\t\t\t\t\t this.debugAppIntf.packetSent(0, (InetSocketAddress) packet.getSocketAddress(), \n\t\t\t\t\t\t\t\t\t new String(\"Sent unicast RTP packet of size \" + packet.getLength() + \n\t\t\t\t\t\t\t\t\t\t\t \" to \" + packet.getSocketAddress().toString() + \" via \" \n\t\t\t\t\t\t\t\t\t\t\t + rtpSock.getLocalSocketAddress().toString()));\n\t\t\t\t\t\t }\n\t\t\t\t\t } catch (Exception e) {\n\t\t\t\t\t\t System.out.println(\"RTPSession.sendData() unicast failed.\");\n\t\t\t\t\t\t e.printStackTrace();\n\t\t\t\t\t\t return null;\n\t\t\t\t\t }\n\t\t\t\t }\n\t\t\t }\n\n\t\t\t //Update our stats\n\t\t\t this.sentPktCount++;\n\t\t\t this.sentOctetCount++;\n\n\t\t\t if(RTPSession.rtpDebugLevel > 5) {\n\t\t\t\t System.out.println(\"<- RTPSession.sendData(byte[]) \" + pkt.getSeqNumber());\n\t\t\t }  \n\t\t }\n\n\t\t return ret;\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Adds a Picture Loss Indication to the feedback queue\n * \n * @param ssrcMediaSource\n * @return 0 if packet was queued, -1 if no feedback support, 1 if redundant\n */\n", "func_signal": "public int fbPictureLossIndication(long ssrcMediaSource)", "code": "{\n\tint ret = 0;\n\t\n\tif(this.rtcpAVPFIntf == null)\n\t\treturn -1;\n\t\n\tRtcpPktPSFB pkt = new RtcpPktPSFB(this.ssrc, ssrcMediaSource);\n\tpkt.makePictureLossIndication();\n\tret = this.rtcpSession.addToFbQueue(ssrcMediaSource, pkt);\n\tif(ret == 0)\n\t\tthis.rtcpSession.wakeSenderThread(ssrcMediaSource);\n\treturn ret; \n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Add a participant object to the participant database.\n * \n * If packets have already been received from this user, we will try to update the automatically inserted participant with the information provided here.\n *\n * @param p A participant.\n */\n", "func_signal": "public int addParticipant(Participant p)", "code": "{\n\t\t//For now we make all participants added this way persistent\n\t\tp.unexpected = false;\n\t\treturn this.partDb.addParticipant(0, p);\n\t}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Resolve an SSRC conflict.\n * \n * Also increments the SSRC conflict counter, after 5 conflicts\n * it is assumed there is a loop somewhere and the session will\n * terminate. \n *\n */\n", "func_signal": "protected void resolveSsrcConflict()", "code": "{\n\tSystem.out.println(\"!!!!!!! Beginning SSRC conflict resolution !!!!!!!!!\");\n\tthis.conflictCount++;\n\t\n\tif(this.conflictCount < 5) {\n\t\t//Don't send any more regular packets out until we have this sorted out.\n\t\tthis.conflict = true;\n\t\n\t\t//Send byes\n\t\trtcpSession.sendByes();\n\t\n\t\t//Calculate the next delay\n\t\trtcpSession.calculateDelay();\n\t\t\n\t\t//Generate a new Ssrc for ourselves\n\t\tgenerateSsrc();\n\t\t\n\t\t//Get the SDES packets out faster\n\t\trtcpSession.initial = true;\n\t\t\n\t\tthis.conflict = false;\n\t\tSystem.out.println(\"SSRC conflict resolution complete\");\n\t\t\n\t} else {\n\t\tSystem.out.println(\"Too many conflicts. There is probably a loop in the network.\");\n\t\tthis.endSession();\n\t}\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/** \n * Initializes a random variable\n *\n */\n", "func_signal": "private void createRandom()", "code": "{\n\tthis.random = new Random(System.currentTimeMillis() + Thread.currentThread().getId() \n\t\t\t- Thread.currentThread().hashCode() + this.cname.hashCode());\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Adds a Slice Loss Indication to the feedback queue\n * \n * @param ssrcMediaSource\n * @param sliFirst macroblock (MB) address of the first lost macroblock\n * @param sliNumber number of lost macroblocks\n * @param sliPictureId six least significant bits of the codec-specific identif\n * @return 0 if packet was queued, -1 if no feedback support, 1 if redundant\n */\n", "func_signal": "public int fbSlicLossIndication(long ssrcMediaSource, int[] sliFirst, int[] sliNumber, int[] sliPictureId)", "code": "{\n\tint ret = 0;\n\tif(this.rtcpAVPFIntf == null)\n\t\treturn -1;\n\t\n\tRtcpPktPSFB pkt = new RtcpPktPSFB(this.ssrc, ssrcMediaSource);\n\tpkt.makeSliceLossIndication(sliFirst, sliNumber, sliPictureId);\n\t\n\tret = this.rtcpSession.addToFbQueue(ssrcMediaSource, pkt);\n\tif(ret == 0)\n\t\tthis.rtcpSession.wakeSenderThread(ssrcMediaSource);\n\treturn ret; \n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Unregisters the RTCP AVPF interface, thereby going from\n * RFC 4585 mode to RFC 3550\n * \n * You still have to adjust packetBufferBehavior() and\n * frameReconstruction.\n * \t\n */\n", "func_signal": "public void unregisterAVPFIntf()", "code": "{\n\tthis.fbEarlyThreshold = -1;\n\tthis.fbRegularThreshold = -1;\t\n\tthis.rtcpAVPFIntf = null;\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Registers an application (RTPAppIntf) with the RTP session.\n * The session will call receiveData() on the supplied instance whenever data has been received.\n * \n * Following this you should set the payload type and add participants to the session.\n * \n * @param\trtpApp an object that implements the RTPAppIntf-interface\n * @param\trtcpApp an object that implements the RTCPAppIntf-interface (optional)\n * @return\t-1 if this RTPSession-instance already has an application registered.\n */\n", "func_signal": "public int RTPSessionRegister(RTPAppIntf rtpApp, RTCPAppIntf rtcpApp, DebugAppIntf debugApp)", "code": "{\n\t\tif(registered) {\n\t\t\tSystem.out.println(\"RTPSessionRegister(): Can\\'t register another application!\");\n\t\t\treturn -1;\n\t\t} else {\n\t\t\tregistered = true;\n\t\t\tgenerateSeqNum();\n\t\t\tif(RTPSession.rtpDebugLevel > 0) {\n\t\t\t\tSystem.out.println(\"-> RTPSessionRegister\");\n\t\t\t}  \n\t\t\tthis.appIntf = rtpApp;\n\t\t\tthis.rtcpAppIntf = rtcpApp;\n\t\t\tthis.debugAppIntf = debugApp;\n\t\t\t\n\t\t\trecvThrd = new RTPReceiverThread(this);\n\t\t\tappCallerThrd = new AppCallerThread(this, rtpApp);\n\t\t\trecvThrd.start();\n\t\t \tappCallerThrd.start();\n\t\t \t//rtcpSession.start(); prajwol:no rtcp support yet\n\t\t \treturn 0;\n\t\t}\n\t}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Change the RTP multicast socket of the session. \n * Peers must be notified through SIP or other signalling protocol.\n * Only valid if this is a multicast session to begin with.\n * \n * @param newSock the new multicast socket for RTP communication.\n */\n", "func_signal": "public int updateRTPSock(MulticastSocket newSock)", "code": "{\n\tif(mcSession) {\n\t\t this.rtpMCSock = newSock;\n\t\t return 0;\n\t} else {\n\t\tSystem.out.println(\"Can't switch from unicast to multicast.\");\n\t\treturn -1;\n\t}\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * Change the RTP socket of the session. \n * Peers must be notified through SIP or other signalling protocol.\n * Only valid if this is a unicast session to begin with.\n * \n * @param newSock integer for new port number, check it is free first.\n */\n", "func_signal": "public int updateRTPSock(DatagramSocket newSock)", "code": "{\n\tif(!mcSession) {\n\t\t rtpSock = newSock;\n\t\t return 0;\n\t} else {\n\t\tSystem.out.println(\"Can't switch from multicast to unicast.\");\n\t\treturn -1;\n\t}\n}", "path": "src_others\\jlibrtp\\RTPSession.java", "repo_name": "8Yards/Nebula_Android", "stars": 10, "license": "lgpl-2.1", "language": "java", "size": 10220}
{"docstring": "/**\n * A theme may specify a preview image to represent a theme.\n *\n * @param orientation the screen orientation for which a preview image is\n * desired.  Orientation values come from {@link android.content.res.Configuration}\n * @return the preview image uri, or null if this theme doesn't specify one.\n */\n", "func_signal": "public Uri getPreviewUri(int orientation)", "code": "{\n    Uri uri = parseUriNullSafe(mCursor.getString(mColumnPreviewUri));\n    if (null != uri) {\n        uri = uri.buildUpon().appendQueryParameter(Themes.KEY_ORIENTATION,\n                String.valueOf(orientation)).build();\n    }\n    return uri;\n}", "path": "src\\com\\tmobile\\themes\\provider\\ThemeItem.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Creates an {@link AbstractDAOItem} for the specified {@link Cursor}.\n * @param c a valid {@link Cursor} for the {@link AbstractDAOItem} type.\n */\n", "func_signal": "public AbstractDAOItem(Cursor c)", "code": "{\n    if (c == null) {\n        throw new IllegalArgumentException(\"Cursor cannot be null\");\n    }\n    mCursor = c;\n}", "path": "src\\com\\tmobile\\themes\\provider\\AbstractDAOItem.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Deletes non system themes with the specified package.\n * @param context the context of the caller.\n * @param packageName the package for the themes to be deleted.\n */\n", "func_signal": "public static void deleteThemesByPackage(Context context, String packageName)", "code": "{\n    context.getContentResolver().delete(\n            ThemeColumns.CONTENT_PLURAL_URI, ThemeColumns.THEME_PACKAGE + \" = ?\",\n            new String[] { packageName });\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Gets an {@link AbstractDAOItem} with it's cursor positioned at the given postion.\n * @param position the position to get.\n * @return the item or null if the position is invalid.\n */\n", "func_signal": "public T getDAOItem(int position)", "code": "{\n    if (position >= 0 && getCount() >= 0) {\n        mDAOItem.setPosition(position);\n        return mDAOItem;\n    }\n    return null;\n}", "path": "src\\com\\tmobile\\themes\\widget\\AbstractDAOItemAdapter.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Gets a {@link Cursor} for the currently applied theme.\n * @param context the context of the caller.\n * @return a {@link Cursor} for the currently applied theme.\n */\n", "func_signal": "public static Cursor getAppliedTheme(Context context)", "code": "{\n    return context.getContentResolver().query(ThemeColumns.CONTENT_PLURAL_URI,\n            null, ThemeColumns.IS_APPLIED + \"=1\", null, null);\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Deletes a non system theme with the specified package and id.\n * @param context the context of the caller.\n * @param packageName\n * @param themeId\n */\n", "func_signal": "public static void deleteTheme(Context context, String packageName,\n        String themeId)", "code": "{\n    context.getContentResolver().delete(\n            ThemeColumns.CONTENT_PLURAL_URI, ThemeColumns.THEME_PACKAGE + \" = ? AND \" +\n                ThemeColumns.THEME_ID + \" = ?\",\n            new String[] { packageName, themeId });\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Enable or disable automatic support for marking a particular item. Users\n * of this feature should also extend {@link #onMarkChanged(int)}.\n *\n * @param enabled If true, automatic marking support will be enabled;\n *            otherwise it will be disabled. This feature is off by default.\n * @param existingUri The item to mark if non-null; otherwise, the currently\n *            applied item will be taken from\n *            {@link #getCurrentlyAppliedItem}.\n */\n", "func_signal": "public void setUseAutomaticMarking(boolean enabled, Uri existingUri)", "code": "{\n    mMarking = enabled;\n    mExistingUri = existingUri;\n\n    if (enabled) {\n        /*\n         * Mark, but do not call notifyDataSetChanged as this will trigger\n         * an unnecessary extra call to markCurrentOrExistingItem.\n         */\n        markCurrentOrExistingItem(existingUri, false);\n    } else {\n        mMarkedPosition = -1;\n    }\n}", "path": "src\\com\\tmobile\\themes\\widget\\AbstractDAOItemAdapter.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Gets the position of the item in the Adapter.\n * @param context the context of the caller.\n * @param uri the Uri to find.\n * @return the position of the item in the Adapter or -1 of not in Adapter.\n */\n", "func_signal": "public int findItem(Context context, Uri uri)", "code": "{\n    if (uri == null) return -1;\n    int n = getCount();\n    while (n-- > 0) {\n        T item = getDAOItem(n);\n        if (uri.equals(item.getUri(context)) == true) {\n            return n;\n        }\n    }\n    return -1;\n}", "path": "src\\com\\tmobile\\themes\\widget\\AbstractDAOItemAdapter.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public ThemeItem(Cursor c)", "code": "{\n    super(c);\n    mColumnId = c.getColumnIndex(ThemeColumns._ID);\n    mColumnThemeId = c.getColumnIndex(ThemeColumns.THEME_ID);\n    mColumnThemePackage = c.getColumnIndex(ThemeColumns.THEME_PACKAGE);\n    mColumnName = c.getColumnIndex(ThemeColumns.NAME);\n    mColumnStyleName = c.getColumnIndex(ThemeColumns.STYLE_NAME);\n    mColumnAuthor = c.getColumnIndex(ThemeColumns.AUTHOR);\n    mColumnIsDRM = c.getColumnIndex(ThemeColumns.IS_DRM);\n    mColumnWallpaperName = c.getColumnIndex(ThemeColumns.WALLPAPER_NAME);\n    mColumnWallpaperUri = c.getColumnIndex(ThemeColumns.WALLPAPER_URI);\n    mColumnLockWallpaperUri = c.getColumnIndex(ThemeColumns.LOCK_WALLPAPER_URI);\n    mColumnRingtoneName = c.getColumnIndex(ThemeColumns.RINGTONE_NAME);\n    mColumnRingtoneUri = c.getColumnIndex(ThemeColumns.RINGTONE_URI);\n    mColumnNotifRingtoneName = c.getColumnIndex(ThemeColumns.NOTIFICATION_RINGTONE_NAME);\n    mColumnNotifRingtoneUri = c.getColumnIndex(ThemeColumns.NOTIFICATION_RINGTONE_URI);\n    mColumnThumbnailUri = c.getColumnIndex(ThemeColumns.THUMBNAIL_URI);\n    mColumnIsSystem = c.getColumnIndex(ThemeColumns.IS_SYSTEM);\n    mColumnIsApplied = c.getColumnIndex(ThemeColumns.IS_APPLIED);\n    mColumnPreviewUri = c.getColumnIndex(ThemeColumns.PREVIEW_URI);\n    mColumnHasHostDensity = c.getColumnIndex(ThemeColumns.HAS_HOST_DENSITY);\n    mColumnHasThemePackageScope = c.getColumnIndex(ThemeColumns.HAS_THEME_PACKAGE_SCOPE);\n}", "path": "src\\com\\tmobile\\themes\\provider\\ThemeItem.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * @return the previously marked position or -1 if no mark has been set.\n *\n * @throws IllegalStateException if called with automatic marking disabled.\n */\n", "func_signal": "public int getMarkedPosition()", "code": "{\n    if (!mMarking) {\n        throw new IllegalStateException(\"getMarkedPosition() called without automatic marking support.\");\n    }\n    return mMarkedPosition;\n}", "path": "src\\com\\tmobile\\themes\\widget\\AbstractDAOItemAdapter.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Gets a {@link Cursor} for all themes in the provider using the specified projection.\n * @param context the context of the caller.\n * @param projection the Projection for the {@link Cursor}.\n * @return a {@link Cursor} for all themes in the provider using the specified projection or null if provider is empty.\n */\n", "func_signal": "public static Cursor listThemes(Context context, String[] projection)", "code": "{\n    return context.getContentResolver().query(ThemeColumns.CONTENT_PLURAL_URI,\n            projection, null, null, null);\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Utility function to work out which theme item should be shown as checked.\n *\n * <p>This method is implemented with way too much allocation.</p>\n *\n * @param existingUri Requested existing URI if provided via Intent extras.\n */\n", "func_signal": "public int findExistingOrCurrentItem(Context context, Uri existingUri)", "code": "{\n    Uri needle = getExistingOrCurrentUri(context, existingUri);\n    if (needle != null) {\n        return findItem(context, needle);\n    } else {\n        return -1;\n    }\n}", "path": "src\\com\\tmobile\\themes\\widget\\AbstractDAOItemAdapter.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Marks a theme as being the applied theme.\n * @param context the context of the caller.\n * @param packageName the package of the theme to apply.\n * @param themeId the id of the theme to apply.\n */\n", "func_signal": "public static void markAppliedTheme(Context context, String packageName, String themeId)", "code": "{\n    ContentValues values = new ContentValues();\n    values.put(ThemeColumns.IS_APPLIED, 0);\n    context.getContentResolver().update(ThemeColumns.CONTENT_PLURAL_URI, values, null, null);\n    values.put(ThemeColumns.IS_APPLIED, 1);\n    context.getContentResolver().update(ThemeColumns.CONTENT_PLURAL_URI, values,\n            ThemeColumns.THEME_PACKAGE + \" = ? AND \" +\n                ThemeColumns.THEME_ID + \" = ?\",\n            new String[] { packageName, themeId });\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Creates an {@link AbstractDAOItem} for the specified {@link Cursor}\n * positioned to the first entry.\n *\n * @param c a valid {@link Cursor} for the {@link AbstractDAOItem} type.\n * @return an {@link AbstractDAOItem} positioned to the first entry in\n *         the {@link Cursor}. If there are no entries, null is\n *         returned.\n */\n", "func_signal": "public T newInstance(Cursor c)", "code": "{\n    if (c != null) {\n        if (c.moveToFirst() == true) {\n            return init(c);\n        } else {\n            c.close();\n        }\n    }\n    return null;\n}", "path": "src\\com\\tmobile\\themes\\provider\\AbstractDAOItem.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Changes to the style of the given style {@link Uri}.\n * @param context the context of the caller.\n * @param styleUri the {@link Uri} of the style to apply.\n */\n", "func_signal": "public static void changeStyle(Context context, Uri styleUri)", "code": "{\n    changeTheme(context, new Intent(ThemeManager.ACTION_CHANGE_THEME).setDataAndType(styleUri,\n            ThemeColumns.STYLE_CONTENT_ITEM_TYPE));\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Compares the internal T-Mobile theme object to this ThemeItem.\n * For internal use.\n * @param theme the CustomTheme object to compare\n * @return\n */\n", "func_signal": "public boolean equals(CustomTheme theme)", "code": "{\n    if (theme == null) {\n        return false;\n    }\n    if (getPackageName().equals(theme.getThemePackageName()) == false) {\n        return false;\n    }\n    return theme.getThemeId().equals(getThemeId());\n}", "path": "src\\com\\tmobile\\themes\\provider\\ThemeItem.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Mark the applied item's position.\n *\n * @param existingUri uri to select, or null to use the currently applied\n *            item.\n * @param notifyChange if true, {@link #notifyDataSetChanged} will be called\n *            on mark change.\n *\n * @see #getMarkedPosition\n */\n", "func_signal": "private int markCurrentOrExistingItem(Uri existingUri, boolean notifyChange)", "code": "{\n    int position = findExistingOrCurrentItem(getContext(), existingUri);\n    if (mMarkedPosition != position) {\n        int oldPosition = mMarkedPosition;\n        mMarkedPosition = position;\n        onMarkChanged(oldPosition);\n        if (notifyChange) {\n            notifyDataSetChanged();\n        }\n    }\n    return position;\n}", "path": "src\\com\\tmobile\\themes\\widget\\AbstractDAOItemAdapter.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Creates an {@link AbstractDAOItem} for the specified {@link Uri} with\n * the {@link Cursor} positioned to the first entry.\n *\n * @param context the {@link Context} of the caller.\n * @param uri the {@link Uri} of the item(s).\n * @return an {@link AbstractDAOItem} positioned to the first entry in\n *         the {@link Cursor}. If there are no entries, null is\n *         returned.\n */\n", "func_signal": "public T newInstance(Context context, Uri uri)", "code": "{\n    if (uri != null) {\n        Cursor c = context.getContentResolver().query(uri, null, null, null, null);\n        return newInstance(c);\n    }\n    return null;\n}", "path": "src\\com\\tmobile\\themes\\provider\\AbstractDAOItem.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Gets a {@link Cursor} for themes in the provider filter by the specified package name.\n * @param context the context of the caller.\n * @param packageName the package for which to filter.\n * @return a {@link Cursor} for themes in the provider filter by the specified package name or null if provider is empty.\n */\n", "func_signal": "public static Cursor listThemesByPackage(Context context, String packageName)", "code": "{\n    return context.getContentResolver().query(ThemeColumns.CONTENT_PLURAL_URI,\n            null, ThemeColumns.THEME_PACKAGE + \" = ?\",\n            new String[] { packageName }, null);\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * Creates a theme {@link Uri} for the given theme package and id.\n * @param context the context of the caller.\n * @param packageName the package of the theme.\n * @param themeId the id of the theme.\n * @return\n */\n", "func_signal": "public static Uri getThemeUri(Context context, String packageName, String themeId)", "code": "{\n    if (TextUtils.isEmpty(packageName) && TextUtils.isEmpty(themeId)) {\n        return ThemeColumns.CONTENT_URI.buildUpon()\n                .appendEncodedPath(\"system\").build();\n    } else {\n        return ThemeColumns.CONTENT_URI.buildUpon()\n                .appendPath(packageName)\n                .appendPath(themeId).build();\n    }\n}", "path": "src\\com\\tmobile\\themes\\provider\\Themes.java", "repo_name": "tmobile/themes-platform-vendor-tmobile-libs-com.tmobile.themes", "stars": 11, "license": "None", "language": "java", "size": 291}
{"docstring": "/**\n * @return file name inside archive, null if this object is not a file inside archive\n */\n", "func_signal": "public String getArchiveItemName()", "code": "{\n\tif ( isArchive && !isDirectory && pathname!=null )\n\t\treturn pathname;\n\treturn null;\n}", "path": "src\\org\\coolreader\\crengine\\FileInfo.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "// create child item\n", "func_signal": "public TOCItem addChild()", "code": "{\n\tif ( mChildren==null )\n\t\tmChildren = new ArrayList<TOCItem>();\n\tTOCItem item = new TOCItem();\n\titem.mParent = this;\n\titem.mIndex = mChildren.size();\n\tmChildren.add(item);\n\treturn item;\n}", "path": "src\\org\\coolreader\\crengine\\TOCItem.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * Read JNI view settings, update and save if changed \n */\n", "func_signal": "private void syncViewSettings( final Properties currSettings, final boolean save )", "code": "{\n\tpost( new Task() {\n\t\tProperties props;\n\t\tpublic void work() {\n\t\t\tBackgroundThread.ensureBackground();\n\t\t\tjava.util.Properties internalProps = getSettingsInternal(); \n\t\t\tprops = new Properties(internalProps);\n\t\t\tprops.remove(PROP_EMBEDDED_STYLES);\n\t\t}\n\t\tpublic void done() {\n\t\t\tProperties changedSettings = props.diff(currSettings);\n\t        for ( Map.Entry<Object, Object> entry : changedSettings.entrySet() ) {\n        \t\tcurrSettings.setProperty((String)entry.getKey(), (String)entry.getValue());\n\t        }\n        \tmSettings = currSettings;\n        \tif ( save )\n        \t\tsaveSettings(currSettings);\n\t\t}\n\t});\n}", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "// for dx=0..1 find such alpha (0..pi/2) that alpha - sin(alpha) = dx  \n", "func_signal": "private static double shiftfn( double dx )", "code": "{\n\tdouble a = 0;\n\tdouble b = Math.PI/2;\n\tdouble c = 0;\n\tfor ( int i=0; i<15; i++ ) {\n\t\tc = (a + b) / 2;\n\t\tdouble cq = c - Math.sin(c);\n\t\tif ( cq < dx )\n\t\t\ta = c;\n\t\telse\n\t\t\tb = c;\n\t}\n\treturn c;\n}", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n     * Change settings.\n * @param newSettings are new settings\n * @param oldSettings are old settings, null to use mSettings\n * @param save is true to save settings to file, false to skip saving\n */\n", "func_signal": "public void setSettings(Properties newSettings, Properties oldSettings, final boolean save)", "code": "{\n\tlog.v(\"setSettings() \" + newSettings.toString());\n\tBackgroundThread.ensureGUI();\n\tif ( oldSettings==null )\n\t\toldSettings = mSettings;\n\tfinal Properties currSettings = new Properties(oldSettings);\n\tsetAppSettings( newSettings, currSettings );\n\tProperties changedSettings = newSettings.diff(currSettings);\n\tcurrSettings.setAll(changedSettings);\n    \tmBackThread.executeBackground(new Runnable() {\n    \t\tpublic void run() {\n    \t\t\tapplySettings(currSettings, save);\n    \t\t}\n    \t});\n//        }", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * Same as cmp, but not-null comes first\n * @param str1\n * @param str2\n * @return\n */\n", "func_signal": "private static int cmpNotNullFirst( String str1, String str2 )", "code": "{\n\tif ( str1==null && str2==null )\n\t\treturn 0;\n\tif ( str1==null )\n\t\treturn 1;\n\tif ( str2==null )\n\t\treturn -1;\n\treturn cmp(str1, str2);\n}", "path": "src\\org\\coolreader\\crengine\\FileInfo.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/// doesn't copy parent and children\n", "func_signal": "public FileInfo(FileInfo v)", "code": "{\n\ttitle = v.title;\n\tauthors = v.authors;\n\tseries = v.series;\n\tseriesNumber = v.seriesNumber;\n\tpath = v.path;\n\tfilename = v.filename;\n\tpathname = v.pathname;\n\tarcname = v.arcname;\n\tformat = v.format;\n\tsize = v.size;\n\tarcsize = v.arcsize;\n\tisArchive = v.isArchive;\n\tisDirectory = v.isDirectory;\n\tcreateTime = v.createTime;\n\tlastAccessTime = v.lastAccessTime;\n}", "path": "src\\org\\coolreader\\crengine\\FileInfo.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * Compares two strings - with numbers sorted by value.\n * @param str1\n * @param str2\n * @return\n */\n", "func_signal": "private static int cmp( String str1, String str2 )", "code": "{\n\tif ( str1==null && str2==null )\n\t\treturn 0;\n\tif ( str1==null )\n\t\treturn -1;\n\tif ( str2==null )\n\t\treturn 1;\n\t\n\tint p1 = 0;\n\tint p2 = 0;\n\tfor ( ;; ) {\n\t\tif ( p1>=str1.length() ) {\n\t\t\tif ( p2>=str2.length() )\n\t\t\t\treturn 0;\n\t\t\treturn 1;\n\t\t}\n\t\tif ( p2>=str2.length() )\n\t\t\treturn -1;\n\t\tchar ch1 = str1.charAt(p1);\n\t\tchar ch2 = str2.charAt(p2);\n\t\tif ( ch1>='0' && ch1<='9' && ch2>='0' && ch2<='9' ) {\n\t\t\tint n1 = 0;\n\t\t\tint n2 = 0;\n\t\t\twhile ( ch1>='0' && ch1<='9' ) {\n\t\t\t\tp1++;\n\t\t\t\tn1 = n1 * 10 + (ch1-'0');\n\t\t\t\tif ( p1>=str1.length() )\n\t\t\t\t\tbreak;\n\t\t\t\tch1 = str1.charAt(p1);\n\t\t\t}\n\t\t\twhile ( ch2>='0' && ch2<='9' ) {\n\t\t\t\tp2++;\n\t\t\t\tn2 = n2 * 10 + (ch2-'0');\n\t\t\t\tif ( p2>=str2.length() )\n\t\t\t\t\tbreak;\n\t\t\t\tch2 = str2.charAt(p2);\n\t\t\t}\n\t\t\tint c = cmp(n1, n2);\n\t\t\tif ( c!=0 )\n\t\t\t\treturn c;\n\t\t} else {\n\t\t\tif ( ch1<ch2 )\n\t\t\t\treturn -1;\n\t\t\tif ( ch1>ch2 )\n\t\t\t\treturn 1;\n\t\t\tp1++;\n\t\t\tp2++;\n\t\t}\n\t}\n}", "path": "src\\org\\coolreader\\crengine\\FileInfo.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "// SurfaceView callbacks\n", "func_signal": "@Override\npublic void surfaceChanged(SurfaceHolder holder, int format, int width,\n\t\tint height)", "code": "{\n\tlog.i(\"surfaceChanged(\" + width + \", \" + height + \")\");\n\tdrawPage();\n}", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "// no dimming\n", "func_signal": "public void setDimmingAlpha( int alpha )", "code": "{\n   \tif ( alpha>255 )\n   \t\talpha = 255;\n   \tif ( alpha<32 )\n   \t\talpha = 32;\n   \tif ( dimmingAlpha!=alpha ) {\n   \t\tdimmingAlpha = alpha;\n   \t\tmEngine.execute(new Task() {\n\t\t\t\t@Override\n\t\t\t\tpublic void work() throws Exception {\n\t\t    \t\tdraw();\n\t\t\t\t}\n   \t\t\t\n   \t\t});\n   \t}\n   }", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "// 1, 2 for page mode, 0 for scroll mode\n", "func_signal": "@Override\n\tpublic String toString()", "code": "{\n\t\treturn \"PositionProperties [pageMode=\" + pageMode + \", pageNumber=\"\n\t\t\t\t+ pageNumber + \", pageCount=\" + pageCount + \", x=\" + x + \", y=\"\n\t\t\t\t+ y + \", pageHeight=\" + pageHeight + \", pageWidth=\" + pageWidth\n\t\t\t\t+ \", fullHeight=\" + fullHeight + \"]\";\n\t}", "path": "src\\org\\coolreader\\crengine\\PositionProperties.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * Get absolute path to file.\n * For plain files, returns /abs_path_to_file/filename.ext\n * For archives, returns /abs_path_to_archive/arc_file_name.zip@/filename_inside_archive.ext\n * @return full path + filename\n */\n", "func_signal": "public String getPathName()", "code": "{\n\tif ( arcname!=null )\n\t\treturn arcname + ARC_SEPARATOR + pathname;\n\treturn pathname;\n}", "path": "src\\org\\coolreader\\crengine\\FileInfo.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "//    private void savePosition()\n//    {\n//\t\tBackgroundThread.ensureBackground();\n//    \tif ( !mOpened )\n//    \t\treturn;\n//    \tBookmark bmk = getCurrentPageBookmarkInternal();\n//    \tif ( bmk!=null )\n//    \t\tlog.d(\"saving position, bmk=\" + bmk.getStartPos());\n//    \telse\n//    \t\tlog.d(\"saving position: no current page bookmark obtained\");\n//    \tif ( bmk!=null && mBookInfo!=null ) {\n//        \tbmk.setTimeStamp(System.currentTimeMillis());\n//    \t\tbmk.setType(Bookmark.TYPE_LAST_POSITION);\n//    \t\tmBookInfo.setLastPosition(bmk);\n//    \t\tmActivity.getHistory().updateRecentDir();\n//    \t\tmActivity.getHistory().saveToDB();\n//    \t\tsaveSettings();\n//    \t}\n//    }\n", "func_signal": "public Bookmark saveCurrentPositionBookmarkSync( boolean saveToDB )", "code": "{\n        Bookmark bmk = mBackThread.callBackground(new Callable<Bookmark>() {\n            @Override\n            public Bookmark call() throws Exception {\n                if ( !mOpened )\n                    return null;\n                return getCurrentPageBookmarkInternal();\n            }\n        });\n        if ( bmk!=null ) {\n            bmk.setTimeStamp(System.currentTimeMillis());\n            bmk.setType(Bookmark.TYPE_LAST_POSITION);\n            if ( mBookInfo!=null )\n                mBookInfo.setLastPosition(bmk);\n            if ( saveToDB ) {\n                mActivity.getHistory().updateRecentDir();\n                mActivity.getHistory().saveToDB();\n                mActivity.getDB().flush();\n            }\n        }\n        return bmk;\n    }", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * @return true if item (file, directory, or archive) exists\n */\n", "func_signal": "public boolean exists()", "code": "{\n\tif ( isArchive ) {\n\t\tif ( arcname==null )\n\t\t\treturn false;\n\t\tFile f = new File(arcname);\n\t\treturn f.exists();\n\t}\n\tFile f = new File(pathname);\n\treturn f.exists();\n}", "path": "src\\org\\coolreader\\crengine\\FileInfo.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * Split archive + file path name by ARC_SEPARATOR\n * @param pathName is pathname like /arc_file_path@/filepath_inside_arc or /file_path \n * @return item[0] is pathname, item[1] is archive name (null if no archive)\n */\n", "func_signal": "public static String[] splitArcName( String pathName )", "code": "{\n\tString[] res = new String[2];\n\tint arcSeparatorPos = pathName.indexOf(ARC_SEPARATOR);\n\tif ( arcSeparatorPos>=0 ) {\n\t\t// from archive\n\t\tres[1] = pathName.substring(0, arcSeparatorPos);\n\t\tres[0] = pathName.substring(arcSeparatorPos + ARC_SEPARATOR.length());\n\t} else {\n\t\tres[0] = pathName;\n\t}\n\treturn res;\n}", "path": "src\\org\\coolreader\\crengine\\FileInfo.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * Prepare and cache page image.\n * Cache is represented by two slots: mCurrentPageInfo and mNextPageInfo.  \n * If page already exists in cache, returns it (if current page requested, \n *  ensures that it became stored as mCurrentPageInfo; if another page requested, \n *  no mCurrentPageInfo/mNextPageInfo reordering made).\n * @param offset is kind of page: 0==current, -1=previous, 1=next page\n * @return page image and properties, null if requested page is unavailable (e.g. requested next/prev page is out of document range)\n */\n", "func_signal": "private BitmapInfo preparePageImage( int offset )", "code": "{\n\tBackgroundThread.ensureBackground();\n\tlog.v(\"preparePageImage( \"+offset+\")\");\n\tif ( invalidImages ) {\n\t\tif ( mCurrentPageInfo!=null )\n\t\t\tmCurrentPageInfo.recycle();\n\t\tmCurrentPageInfo = null;\n\t\tif ( mNextPageInfo!=null )\n\t\t\tmNextPageInfo.recycle();\n\t\tmNextPageInfo = null;\n\t\tinvalidImages = false;\n\t}\n\n\tif ( internalDX==0 || internalDY==0 ) {\n\t\tinternalDX=200;\n\t\tinternalDY=300;\n        resizeInternal(internalDX, internalDY);\n\t}\n\t\n\tPositionProperties currpos = getPositionPropsInternal(null);\n\t\n\tboolean isPageView = currpos.pageMode!=0;\n\t\n\tBitmapInfo currposBitmap = null;\n\tif ( mCurrentPageInfo!=null && mCurrentPageInfo.position.equals(currpos) )\n\t\tcurrposBitmap = mCurrentPageInfo;\n\telse if ( mNextPageInfo!=null && mNextPageInfo.position.equals(currpos) )\n\t\tcurrposBitmap = mNextPageInfo;\n\tif ( offset==0 ) {\n\t\t// Current page requested\n\t\tif ( currposBitmap!=null ) {\n\t\t\tif ( mNextPageInfo==currposBitmap ) {\n\t\t\t\t// reorder pages\n\t\t\t\tBitmapInfo tmp = mNextPageInfo;\n\t\t\t\tmNextPageInfo = mCurrentPageInfo;\n\t\t\t\tmCurrentPageInfo = tmp;\n\t\t\t}\n\t\t\t// found ready page image\n\t\t\treturn mCurrentPageInfo;\n\t\t}\n\t\tif ( mCurrentPageInfo!=null ) {\n\t\t\tmCurrentPageInfo.recycle();\n\t\t\tmCurrentPageInfo = null;\n\t\t}\n\t\tBitmapInfo bi = new BitmapInfo();\n        bi.position = currpos;\n\t\tbi.bitmap = factory.get(internalDX, internalDY);\n        setBatteryStateInternal(mBatteryState);\n        getPageImageInternal(bi.bitmap);\n        mCurrentPageInfo = bi;\n        //log.v(\"Prepared new current page image \" + mCurrentPageInfo);\n        return mCurrentPageInfo;\n\t}\n\tif ( isPageView ) {\n\t\t// PAGES: one of next or prev pages requested, offset is specified as param \n\t\tint cmd1 = offset > 0 ? ReaderCommand.DCMD_PAGEDOWN.nativeId : ReaderCommand.DCMD_PAGEUP.nativeId;\n\t\tint cmd2 = offset > 0 ? ReaderCommand.DCMD_PAGEUP.nativeId : ReaderCommand.DCMD_PAGEDOWN.nativeId;\n\t\tif ( offset<0 )\n\t\t\toffset = -offset;\n\t\tif ( doCommandInternal(cmd1, offset) ) {\n\t\t\t// can move to next page\n\t\t\tPositionProperties nextpos = getPositionPropsInternal(null);\n\t\t\tBitmapInfo nextposBitmap = null;\n\t\t\tif ( mCurrentPageInfo!=null && mCurrentPageInfo.position.equals(nextpos) )\n\t\t\t\tnextposBitmap = mCurrentPageInfo;\n\t\t\telse if ( mNextPageInfo!=null && mNextPageInfo.position.equals(nextpos) )\n\t\t\t\tnextposBitmap = mNextPageInfo;\n\t\t\tif ( nextposBitmap==null ) {\n\t\t\t\t// existing image not found in cache, overriding mNextPageInfo\n\t\t\t\tif ( mNextPageInfo!=null )\n\t\t\t\t\tmNextPageInfo.recycle();\n\t\t\t\tmNextPageInfo = null;\n\t\t\t\tBitmapInfo bi = new BitmapInfo();\n\t\t        bi.position = nextpos;\n\t\t\t\tbi.bitmap = factory.get(internalDX, internalDY);\n\t\t        setBatteryStateInternal(mBatteryState);\n\t\t        getPageImageInternal(bi.bitmap);\n\t\t        mNextPageInfo = bi;\n\t\t        nextposBitmap = bi;\n\t\t        //log.v(\"Prepared new current page image \" + mNextPageInfo);\n\t\t\t}\n\t\t\t// return back to previous page\n\t\t\tdoCommandInternal(cmd2, offset);\n\t\t\treturn nextposBitmap;\n\t\t} else {\n\t\t\t// cannot move to page: out of document range\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t// SCROLL next or prev page requested, with pixel offset specified\n\t\tint y = currpos.y + offset;\n\t\tif ( doCommandInternal(ReaderCommand.DCMD_GO_POS.nativeId, y) ) {\n\t\t\tPositionProperties nextpos = getPositionPropsInternal(null);\n\t\t\tBitmapInfo nextposBitmap = null;\n\t\t\tif ( mCurrentPageInfo!=null && mCurrentPageInfo.position.equals(nextpos) )\n\t\t\t\tnextposBitmap = mCurrentPageInfo;\n\t\t\telse if ( mNextPageInfo!=null && mNextPageInfo.position.equals(nextpos) )\n\t\t\t\tnextposBitmap = mNextPageInfo;\n\t\t\tif ( nextposBitmap==null ) {\n\t\t\t\t// existing image not found in cache, overriding mNextPageInfo\n\t\t\t\tif ( mNextPageInfo!=null )\n\t\t\t\t\tmNextPageInfo.recycle();\n\t\t\t\tmNextPageInfo = null;\n\t\t\t\tBitmapInfo bi = new BitmapInfo();\n\t\t        bi.position = nextpos;\n\t\t\t\tbi.bitmap = factory.get(internalDX, internalDY);\n\t\t        setBatteryStateInternal(mBatteryState);\n\t\t        getPageImageInternal(bi.bitmap);\n\t\t        mNextPageInfo = bi;\n\t\t        nextposBitmap = bi;\n\t\t\t}\n\t\t\t// return back to prev position\n\t\t\tdoCommandInternal(ReaderCommand.DCMD_GO_POS.nativeId, currpos.y);\n\t\t\treturn nextposBitmap;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n}", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "//private File historyFile;\n", "func_signal": "private void updateLoadedBookInfo()", "code": "{\n\tBackgroundThread.ensureBackground();\n\t// get title, authors, etc.\n\tupdateBookInfoInternal( mBookInfo );\n}", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * When current book is opened, switch to previous book.\n * @param errorHandler\n * @return\n */\n", "func_signal": "public boolean loadPreviousDocument( final Runnable errorHandler )", "code": "{\n\tBackgroundThread.ensureGUI();\n\tBookInfo bi = mActivity.getHistory().getPreviousBook();\n\tif (bi!=null && bi.getFileInfo()!=null) {\n\t\tsave();\n\t\tclose();\n\t\tlog.i(\"loadPreviousDocument() is called, prevBookName = \" + bi.getFileInfo().getPathName());\n\t\treturn loadDocument( bi.getFileInfo().getPathName(), errorHandler );\n\t}\n\terrorHandler.run();\n\treturn false;\n}", "path": "src\\org\\coolreader\\crengine\\ReaderView.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "//byte[] fakeLongArrayForDebug;\n", "func_signal": "public OptionsDialog( CoolReader activity, ReaderView readerView, String[] fontFaces )", "code": "{\n\tsuper(activity, R.string.dlg_button_ok, R.string.dlg_button_cancel, false);\n\t\n\tmActivity = activity;\n\tmReaderView = readerView;\n\tmFontFaces = fontFaces;\n\tmProperties = readerView.getSettings();\n\n\t//fakeLongArrayForDebug = new byte[2000000]; // 2M\n\t//CoolReader.dumpHeapAllocation();\n}", "path": "src\\org\\coolreader\\crengine\\OptionsDialog.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\n    public void onCreate(Bundle savedInstanceState)", "code": "{\n\tlog.i(\"CoolReader.onCreate() entered\");\n\tsuper.onCreate(savedInstanceState);\n\n    \tisFirstStart = true;\n\t\n\tsetVolumeControlStream(AudioManager.STREAM_MUSIC);\n\t\n\ttry {\n\t\tPackageInfo pi = getPackageManager().getPackageInfo(getPackageName(), 0);\n\t\tmVersion = pi.versionName;\n\t} catch ( NameNotFoundException e ) {\n\t\t// ignore\n\t}\n\tlog.i(\"CoolReader version : \" + getVersion());\n\t\n\tDisplay d = getWindowManager().getDefaultDisplay();\n\tDisplayMetrics m = new DisplayMetrics(); \n\td.getMetrics(m);\n\ttry {\n\t\tField fld = d.getClass().getField(\"densityDpi\");\n\t\tif ( fld!=null ) {\n\t\t\tObject v = fld.get(m);\n\t\t\tif ( v!=null && v instanceof Integer ) {\n\t\t\t\tdensityDpi = ((Integer)v).intValue();\n\t\t\t\tlog.i(\"Screen density detected: \" + densityDpi + \"DPI\");\n\t\t\t}\n\t\t}\n\t} catch ( Exception e ) {\n\t\tlog.e(\"Cannot find field densityDpi, using default value\");\n\t}\n\t\n\tintentReceiver = new BroadcastReceiver() {\n\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tint level = intent.getIntExtra(\"level\", 0);\n\t\t\tif ( mReaderView!=null )\n\t\t\t\tmReaderView.setBatteryState(level);\n\t\t\telse\n\t\t\t\tinitialBatteryState = level;\n\t\t}\n\t\t\n\t};\n\tregisterReceiver(intentReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n\n\n\tlog.i(\"CoolReader.window=\" + getWindow());\n\tWindowManager.LayoutParams lp = new WindowManager.LayoutParams();\n\tlp.alpha = 1.0f;\n\tlp.dimAmount = 0.0f;\n\tlp.format = PixelFormat.RGB_565;\n\tlp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;\n\tlp.horizontalMargin = 0;\n\tlp.verticalMargin = 0;\n\tlp.windowAnimations = 0;\n\tlp.layoutAnimationParameters = null;\n\tlp.memoryType = WindowManager.LayoutParams.MEMORY_TYPE_NORMAL;\n\tgetWindow().setAttributes(lp);\n\t\n\t// testing background thread\n    \tmBackgroundThread = BackgroundThread.instance();\n\tmFrame = new FrameLayout(this);\n\tlog.i(\"initializing scanner\");\n\tmEngine = new Engine(this, mBackgroundThread);\n\tmBackgroundThread.setGUI(mFrame);\n\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\n\t// load settings\n\tProperties props = loadSettings();\n\t\n\tsetFullscreen( props.getBool(ReaderView.PROP_APP_FULLSCREEN, (DeviceInfo.EINK_SCREEN?true:false)));\n\tint orientation = props.getInt(ReaderView.PROP_APP_SCREEN_ORIENTATION, (DeviceInfo.EINK_SCREEN?0:4));\n\tif ( orientation!=1 && orientation!=4 )\n\t\torientation = 0;\n\tsetScreenOrientation(orientation);\n\tint backlight = props.getInt(ReaderView.PROP_APP_SCREEN_BACKLIGHT, -1);\n\tif ( backlight<-1 || backlight>100 )\n\t\tbacklight = -1;\n\tsetScreenBacklightLevel(backlight);\n\t\n        mEngine.showProgress( 0, R.string.progress_starting_cool_reader );\n\n        // wait until all background tasks are executed\n        mBackgroundThread.syncWithBackground();\n        \n\tmEngine.setHyphenationDictionary(HyphDict.byCode(props.getProperty(ReaderView.PROP_HYPHENATION_DICT, Engine.HyphDict.RUSSIAN.toString())));\n\t\n\t//this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, \n        //       WindowManager.LayoutParams.FLAG_FULLSCREEN );\n//\t\tstartupView = new View(this) {\n//\t\t};\n//\t\tstartupView.setBackgroundColor(Color.BLACK);\n\tsetWakeLockEnabled(props.getBool(ReaderView.PROP_APP_SCREEN_BACKLIGHT_LOCK, false));\n\n\t// open DB\n\tfinal String SQLITE_DB_NAME = \"cr3db.sqlite\";\n\tFile dbdir = getDir(\"db\", Context.MODE_PRIVATE);\n\tdbdir.mkdirs();\n\tFile dbfile = new File(dbdir, SQLITE_DB_NAME);\n\tFile externalDir = Engine.getExternalSettingsDir();\n\tif ( externalDir!=null ) {\n\t\tdbfile = Engine.checkOrMoveFile(externalDir, dbdir, SQLITE_DB_NAME);\n\t}\n\tmDB = new CRDB(dbfile);\n\n       \tmScanner = new Scanner(this, mDB, mEngine);\n       \tmScanner.initRoots(mEngine.getMountedRootsMap());\n\t\n       \tmHistory = new History(this, mDB);\n\tmHistory.setCoverPagesEnabled(props.getBool(ReaderView.PROP_APP_SHOW_COVERPAGES, true));\n\n//\t\tif ( DeviceInfo.FORCE_LIGHT_THEME ) {\n//\t\t\tsetTheme(android.R.style.Theme_Light);\n//\t\t\tgetWindow().setBackgroundDrawableResource(drawable.editbox_background);\n//\t\t}\n\tif ( DeviceInfo.FORCE_LIGHT_THEME ) {\n\t\tmFrame.setBackgroundColor( Color.WHITE );\n\t\tsetTheme(R.style.Dialog_Fullscreen_Day);\n\t}\n\t\n\tmReaderView = new ReaderView(this, mEngine, mBackgroundThread, props);\n\n\tmScanner.setDirScanEnabled(props.getBool(ReaderView.PROP_APP_BOOK_PROPERTY_SCAN_ENABLED, true));\n\t\n\tmBrowser = new FileBrowser(this, mEngine, mScanner, mHistory);\n\n\t\n\tmFrame.addView(mReaderView);\n\tmFrame.addView(mBrowser);\n//\t\tmFrame.addView(startupView);\n\tsetContentView( mFrame );\n        log.i(\"initializing browser\");\n        mBrowser.init();\n\tshowView(mBrowser, false);\n        log.i(\"initializing reader\");\n        mBrowser.setSortOrder( props.getProperty(ReaderView.PROP_APP_BOOK_SORT_ORDER));\n\tmBrowser.setSimpleViewMode(props.getBool(ReaderView.PROP_APP_FILE_BROWSER_SIMPLE_MODE, false));\n        mBrowser.showDirectory(mScanner.getRoot(), null);\n        \n        fileToLoadOnStart = null;\n\tIntent intent = getIntent();\n\tif ( intent!=null && Intent.ACTION_VIEW.equals(intent.getAction()) ) {\n\t\tUri uri = intent.getData();\n\t\tif ( uri!=null ) {\n\t\t\tfileToLoadOnStart = extractFileName(uri);\n\t\t}\n\t\tintent.setData(null);\n\t}\n\tif ( initialBatteryState>=0 )\n\t\tmReaderView.setBatteryState(initialBatteryState);\n        \n        log.i(\"CoolReader.onCreate() exiting\");\n    }", "path": "src\\org\\coolreader\\CoolReader.java", "repo_name": "Trantect/CoolReader", "stars": 10, "license": "None", "language": "java", "size": 957}
{"docstring": "/**\n * Constructs a polynomial with the given coefficients.\n * \n * @param coef\n *            polynomial coefficients.\n */\n", "func_signal": "public Polynomial(final String[] coef)", "code": "{\n\tcoefficients = new double[coef.length];\n\tfor (int i = 0, n = coef.length; i < n; i++) {\n\t\ttry {\n\t\t\tcoefficients[i] = Double.parseDouble(coef[i]);\n\t\t} catch (NumberFormatException ex) {\n\t\t\tcoefficients[i] = 0;\n\t\t}\n\t}\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "// end spline_value\n", "func_signal": "public double integrate()", "code": "{\n\t\tdouble suma, sumb, sumc, sumd;\n\t\tdouble dx, t;\n\t\tif (n <= 3) {\n\t\t\tSystem.out.println(\"not enough data to integrate\");\n\t\t\treturn 0.0;\n\t\t}\n\t\tif (!uniform) {\n\t\t\tif (debug)\n\t\t\t\tSystem.out.println(\"non uniform spacing integration\");\n\t\t\tt = 0.0;\n\t\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\t\tdx = x[i + 1] - x[i];\n\t\t\t\tt = t\n\t\t\t\t\t\t+ (f[i] + (b[i] / 2.0 + (c[i] / 3.0 + dx * d[i] / 4.0)\n\t\t\t\t\t\t\t\t* dx)\n\t\t\t\t\t\t\t\t* dx) * dx;\n\t\t\t}\n\t\t\treturn t;\n\t\t}\n\t\t// compute uniform integral of spline fit\n\t\tsuma = 0.0;\n\t\tsumb = 0.0;\n\t\tsumc = 0.0;\n\t\tsumd = 0.0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsuma = suma + d[i];\n\t\t\tsumb = sumb + c[i];\n\t\t\tsumc = sumc + b[i];\n\t\t\tsumd = sumd + f[i];\n\t\t}\n\t\tdx = x[1] - x[0]; // assumes equally spaced points\n\t\tt = (sumd + (sumc / 2.0 + (sumb / 3.0 + dx * suma / 4.0) * dx) * dx)\n\t\t\t\t* dx;\n\t\tif (debug)\n\t\t\tSystem.out.println(\"suma=\" + suma + \", sumb=\" + sumb + \",\\n sumc=\"\n\t\t\t\t\t+ sumc + \", sumd=\" + sumd);\n\t\treturn t;\n\t}", "path": "src\\org\\lifeform\\market\\interpolation\\Spline.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Rearrage the coefficients.\n * \n * @param data\n *            double[]\n * @param sign\n *            int\n */\n", "func_signal": "private void shuffle(final double data[], final int sign)", "code": "{\n\tint nh = n / 2;\n\tint nq = n / 4;\n\tif (n == 6)\n\t\tnq = 2;\n\tdouble c1 = 0.5, c2 = -0.5 * sign;\n\tdouble theta = sign * Math.PI / nh;\n\tdouble wtemp = Math.sin(0.5 * theta);\n\tdouble wpr = -2.0 * wtemp * wtemp;\n\tdouble wpi = -Math.sin(theta);\n\tdouble wr = 1.0 + wpr;\n\tdouble wi = wpi;\n\tfor (int i = 1; i < nq; i++) {\n\t\tint i1 = 2 * i;\n\t\tint i3 = n - i1;\n\t\tdouble h1r = c1 * (data[i1] + data[i3]);\n\t\tdouble h1i = c1 * (data[i1 + 1] - data[i3 + 1]);\n\t\tdouble h2r = -c2 * (data[i1 + 1] + data[i3 + 1]);\n\t\tdouble h2i = c2 * (data[i1] - data[i3]);\n\t\tdata[i1] = h1r + wr * h2r - wi * h2i;\n\t\tdata[i1 + 1] = h1i + wr * h2i + wi * h2r;\n\t\tdata[i3] = h1r - wr * h2r + wi * h2i;\n\t\tdata[i3 + 1] = -h1i + wr * h2i + wi * h2r;\n\t\twtemp = wr;\n\t\twr += wtemp * wpr - wi * wpi;\n\t\twi += wtemp * wpi + wi * wpr;\n\t}\n\tdouble d0 = data[0];\n\tif (sign == 1) {\n\t\tdata[0] = d0 + data[1];\n\t\tdata[1] = d0 - data[1];\n\t} else {\n\t\tdata[0] = c1 * (d0 + data[1]);\n\t\tdata[1] = c1 * (d0 - data[1]);\n\t}\n\tif (n % 4 == 0) {\n\t\tdata[nh + 1] *= -1;\n\t}\n}", "path": "src\\org\\lifeform\\math\\FFTReal.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Deflates the polynomial by removing the root.\n * \n * @param r\n *            double a root of the polynomial (no check made).\n * @return Polynomial the receiver divided by polynomial (x - r).\n */\n", "func_signal": "public Polynomial deflate(final double r)", "code": "{\n\tint n = degree();\n\tdouble remainder = coefficients[n];\n\tdouble[] coef = new double[n];\n\tfor (int k = n - 1; k >= 0; k--) {\n\t\tcoef[k] = remainder;\n\t\tremainder = remainder * r + coefficients[k];\n\t}\n\treturn new Polynomial(coef);\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Multiplies this polynomial by another polynomial.\n * \n * @param p\n *            Polynomial\n * @return Polynomial\n */\n", "func_signal": "public Polynomial multiply(final Polynomial p)", "code": "{\n\tint n = p.degree() + degree();\n\tdouble[] coef = new double[n + 1];\n\tfor (int i = 0; i <= n; i++) {\n\t\tcoef[i] = 0;\n\t\tfor (int k = 0; k <= i; k++) {\n\t\t\tcoef[i] += p.coefficient(k) * coefficient(i - k);\n\t\t}\n\t}\n\treturn new Polynomial(coef);\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Computes the (nomalized) inverse FFT of data, leaving it in place.\n * \n * The given array is returned after it has been transformed.\n * \n * @param data\n *            double[] the data to be transformed\n * @return double[] the data after the FFT\n */\n", "func_signal": "public double[] inverse(final double data[])", "code": "{\n\tbacktransform(data);\n\t/* normalize inverse fft with 2/n */\n\tdouble norm = 2.0 / ((double) n);\n\tfor (int i = 0; i < n; i++) {\n\t\tdata[i] *= norm;\n\t}\n\treturn data;\n}", "path": "src\\org\\lifeform\\math\\FFTReal.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Gets an array containing the frequencies in natural order. Data are\n * separated by delta.\n * \n * @param delta\n * @return the array of frequencies\n */\n", "func_signal": "public double[] getNaturalFreq(final double delta)", "code": "{\n\tint n = this.n / 2;\n\tdouble[] freq = new double[n];\n\tdouble f = 0, df = 0.5 / n / delta;\n\tfor (int i = 0; i < n; i++) {\n\t\tfreq[i] = f;\n\t\tf += df;\n\t}\n\treturn freq;\n}", "path": "src\\org\\lifeform\\math\\FFTReal.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "// end Spline\n", "func_signal": "public double spline_value(final double t)", "code": "{\n\t\t// Evaluate the spline s at t using coefficients from Spline constructor\n\t\t//\n\t\t// Input parameters\n\t\t// class variables\n\t\t// t = point where spline is to be evaluated.\n\t\t// Output:\n\t\t// s = value of spline at t.\n\t\t// Local variables:\n\t\tdouble dt, s;\n\t\tint interval; // index such that t>=x[interval] and t<x[interval+1]\n\n\t\tif (n <= 1) {\n\t\t\tSystem.out.println(\"not enough points to compute value\");\n\t\t\treturn 0.0; // should throw exception\n\t\t}\n\t\t// Search for correct interval for t.\n\t\tinterval = last_interval; // heuristic\n\t\tif (t < x[0]) {\n\t\t\tSystem.out.println(\"requested point below Spline region\");\n\t\t\treturn 0.0; // should throw exception\n\t\t}\n\t\tif (t > x[n - 1]) {\n\t\t\tSystem.out.println(\"requested point above Spline region\");\n\t\t\treturn 0.0; // should throw exception\n\t\t}\n\t\tif (t > x[n - 2])\n\t\t\tinterval = n - 2;\n\t\telse if (t >= x[last_interval])\n\t\t\tfor (int j = last_interval; j < n && t >= x[j]; j++)\n\t\t\t\tinterval = j;\n\t\telse\n\t\t\tfor (int j = last_interval; t < x[j]; j--)\n\t\t\t\tinterval = j - 1;\n\t\tlast_interval = interval; // class variable for next call\n\t\tif (debug)\n\t\t\tSystem.out.println(\"interval=\" + interval + \", x[interval]=\"\n\t\t\t\t\t+ x[interval] + \", t=\" + t);\n\t\t// Evaluate cubic polynomial on [x[interval] , x[interval+1]].\n\t\tdt = t - x[interval];\n\t\ts = f[interval] + dt\n\t\t\t\t* (b[interval] + dt * (c[interval] + dt * d[interval]));\n\t\treturn s;\n\t}", "path": "src\\org\\lifeform\\market\\interpolation\\Spline.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Integrates this polynomial having the specified value for x = 0.\n * \n * @param value\n *            double value of the integral at x=0\n * @return Polynomial the integral.\n */\n", "func_signal": "public Polynomial integral(final double value)", "code": "{\n\tint n = coefficients.length + 1;\n\tdouble coef[] = new double[n];\n\tcoef[0] = value;\n\tfor (int i = 1; i < n; i++) {\n\t\tcoef[i] = coefficients[i - 1] / i;\n\t}\n\treturn new Polynomial(coef);\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * \n * @param r\n *            double number added to the polynomial.\n * @return Polynomial\n */\n", "func_signal": "public Polynomial add(final double r)", "code": "{\n\tint n = coefficients.length;\n\tdouble coef[] = new double[n];\n\tcoef[0] = coefficients[0] + r;\n\tfor (int i = 1; i < n; i++) {\n\t\tcoef[i] = coefficients[i];\n\t}\n\treturn new Polynomial(coef);\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Computes the (unnomalized) inverse FFT of data, leaving it in place.\n * \n * The given array is returned after it has been transformed.\n * \n * @param data\n *            double[] the data to be transformed\n * @return double[] the data after the FFT\n */\n", "func_signal": "public double[] backtransform(final double data[])", "code": "{\n\tif (data.length != n) {\n\t\tsetN(data.length);\n\t}\n\tshuffle(data, -1);\n\tfft.backtransform(data);\n\treturn data;\n}", "path": "src\\org\\lifeform\\math\\FFTReal.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Converts this polynomial to a String.\n */\n", "func_signal": "public String toString()", "code": "{\n\tif (coefficients == null || coefficients.length < 1) {\n\t\treturn \"Polynomial coefficients are undefined.\";\n\t}\n\tStringBuffer sb = new StringBuffer();\n\tboolean firstNonZeroCoefficientPrinted = false;\n\tfor (int n = 0, m = coefficients.length; n < m; n++) {\n\t\tif (coefficients[n] != 0) {\n\t\t\tif (firstNonZeroCoefficientPrinted) {\n\t\t\t\tsb.append(coefficients[n] > 0 ? \" + \" : \" \");\n\t\t\t} else {\n\t\t\t\tfirstNonZeroCoefficientPrinted = true;\n\t\t\t}\n\t\t\tif (n == 0 || coefficients[n] != 1) {\n\t\t\t\tsb.append(Double.toString(coefficients[n]));\n\t\t\t}\n\t\t\tif (n > 0) {\n\t\t\t\tsb.append(\" x^\" + n);\n\t\t\t}\n\t\t}\n\t}\n\tString str = sb.toString();\n\tif (str.equals(\"\")) {\n\t\treturn \"0\";\n\t} else {\n\t\treturn str;\n\t}\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Gets the derivative of this polynomial.\n * \n * @return Polynomial the derivative.\n */\n", "func_signal": "public Polynomial derivative()", "code": "{\n\tint n = degree();\n\tif (n == 0) {\n\t\tdouble coef[] = { 0 };\n\t\treturn new Polynomial(coef);\n\t}\n\tdouble coef[] = new double[n];\n\tfor (int i = 1; i <= n; i++) {\n\t\tcoef[i - 1] = coefficients[i] * i;\n\t}\n\treturn new Polynomial(coef);\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Historical Volatility is the average variance form the mean\n * \n * @param rates\n *            daily rates we observe\n * \n * @return standard deviation of input.\n */\n", "func_signal": "public static double historicalVolatility(final double[] rates)", "code": "{\n\tdouble average = average(rates);\n\tdouble count = rates.length;\n\tdouble result = 0.0d;\n\tfor (double d : rates) {\n\t\tresult += Math.pow(d - average, 2);\n\t}\n\treturn Math.sqrt(result / (count - 1));\n}", "path": "src\\org\\lifeform\\market\\vol\\Calc.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Evaluates the polynomial for the specified variable value.\n * \n * @param x\n *            double value at which the polynomial is evaluated\n * @return double polynomial value.\n */\n", "func_signal": "public double evaluate(final double x)", "code": "{\n\tint n = coefficients.length;\n\tdouble answer = coefficients[--n];\n\twhile (n > 0) {\n\t\tanswer = answer * x + coefficients[--n];\n\t}\n\treturn answer;\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Gets the roots of this polynomial.\n * \n * @param desiredPrecision\n *            double\n * @return double[]\n */\n", "func_signal": "public double[] roots(final double desiredPrecision)", "code": "{\n\tdouble start = 0;\n\tif (degree() < 1) {\n\t\treturn new double[0];\n\t}\n\tPolynomial dp = derivative();\n\tint counter = 0;\n\twhile (counter < 100 && Math.abs(dp.evaluate(start)) < desiredPrecision) {\n\t\tstart = Math.random();\n\t\tcounter++;\n\t}\n\tPolynomial p = this;\n\tArrayList<Double> list = new ArrayList<Double>(degree());\n\twhile (true) {\n\t\tdouble r = Root.newton(p, dp, start, desiredPrecision);\n\t\tif (Double.isNaN(r)) {\n\t\t\tbreak;\n\t\t}\n\t\tlist.add(new Double(r));\n\t\tp = p.deflate(r);\n\t\tif (p.degree() == 0) {\n\t\t\tbreak;\n\t\t}\n\t\tdp = p.derivative();\n\t\tstart = 0;\n\t\tcounter = 0;\n\t\twhile (counter < 100\n\t\t\t\t&& Math.abs(dp.evaluate(start)) < desiredPrecision) {\n\t\t\tstart = Math.random();\n\t\t\tcounter++;\n\t\t}\n\t}\n\tdouble[] roots = new double[list.size()];\n\tfor (int i = 0, n = list.size(); i < n; i++) {\n\t\troots[i] = ((Double) list.get(i)).doubleValue();\n\t}\n\treturn roots;\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Evaluates a polynomial using the given coefficients.\n * \n * @param x\n * @param coeff\n *            the polynomial coefficients.\n */\n", "func_signal": "public static double evalPolynomial(final double x, final double[] coeff)", "code": "{\n\tint n = coeff.length - 1;\n\tdouble y = coeff[n];\n\tfor (int i = n - 1; i >= 0; i--) {\n\t\ty = coeff[i] + (y * x);\n\t}\n\treturn y;\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Multipiels this polynomial by a constant.\n * \n * @param r\n *            double\n * @return Polynomial\n */\n", "func_signal": "public Polynomial multiply(final double r)", "code": "{\n\tint n = coefficients.length;\n\tdouble coef[] = new double[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tcoef[i] = coefficients[i] * r;\n\t}\n\treturn new Polynomial(coef);\n}", "path": "src\\org\\lifeform\\math\\Polynomial.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Constructs a ParsedFunction from the given string and independent\n * variable.\n * \n * @param _fStr\n *            the function\n * @param var\n *            the independent variable\n */\n", "func_signal": "public ParsedMultiVarFunction(final String _fStr, final String[] var) throws Exception", "code": "{\n\tfStr = _fStr;\n\tSuryonoParser parser = null;\n\tparser = new SuryonoParser(fStr, var);\n\tfunction = parser;\n}", "path": "src\\org\\lifeform\\math\\ParsedMultiVarFunction.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/**\n * Sets the number of data points.\n * \n * @param n\n *            int\n */\n", "func_signal": "public void setN(final int n)", "code": "{\n\tif (n % 2 != 0) {\n\t\tthrow new IllegalArgumentException(n + \" is not even\");\n\t}\n\tthis.n = n;\n\tfft.setN(n / 2);\n}", "path": "src\\org\\lifeform\\math\\FFTReal.java", "repo_name": "kamleshahre/trademaker", "stars": 8, "license": "None", "language": "java", "size": 68263}
{"docstring": "/** Create the 3d object */\n", "func_signal": "protected void create3D(EnvironmentDescription wd,Color3f color)", "code": "{\n    // create the line using a primitive\n    super.create3D();\n    Material mat = new Material();\n    appearance.setMaterial(mat);\n\n    int flags = Primitive.GEOMETRY_NOT_SHARED | Primitive.ENABLE_GEOMETRY_PICKING | Primitive.GENERATE_NORMALS;\n    flags |= Primitive.ENABLE_APPEARANCE_MODIFY;\n    // com.sun.j3d.utils.geometry.Box box =new com.sun.j3d.utils.geometry.Box(.08f,.001f,len,flags,appearance,0);\n    // bug in j3d api doc . must give half values.\n    com.sun.j3d.utils.geometry.Box box =new com.sun.j3d.utils.geometry.Box(.08f/2,.005f/2,len/2,flags,appearance,0);\n     // Enable  sensor  detection \n    box.setPickable(true);\n\n    //  define empty bounds for collision  detection\n\t    BoundingBox bounds = new BoundingBox();\n\t    setBounds(bounds);\n\n\t    setColor(color);\n\t    addChild(box);\n\n}", "path": "src\\simbad\\sim\\Line.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild belt of sonar sensor to the agent.\n * @param agent\n * @param nbSonars the number of sonars.\n * @return the sensor object\n */\n", "func_signal": "static public RangeSensorBelt addSonarBeltSensor(Agent agent,int nbSonars)", "code": "{\n    double agentHeight = agent.getHeight();\n    double agentRadius = agent.getRadius();\n    RangeSensorBelt sonarBelt = new RangeSensorBelt((float) agentRadius,\n            0f, 1.5f, nbSonars, RangeSensorBelt.TYPE_SONAR,0);\n    sonarBelt.setUpdatePerSecond(3);\n    sonarBelt.setName(\"sonars\");\n    Vector3d pos = new Vector3d(0, agentHeight / 2, 0.0);\n    agent.addSensorDevice(sonarBelt, pos, 0);\n    return sonarBelt;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild belt of bumpers sensor to the agent. Specify the number of sensors.\n * @param agent\n * @param nbSensors\n * @return the sensor object\n */\n", "func_signal": "static public RangeSensorBelt addBumperBeltSensor(Agent agent,int  nbSensors)", "code": "{\n   // double agentHeight = agent.getHeight();\n    double agentRadius = agent.getRadius();\n    RangeSensorBelt bumperBelt = new RangeSensorBelt((float) agentRadius-0.1f,\n            0f, 0.2f, nbSensors, RangeSensorBelt.TYPE_BUMPER,0);\n    bumperBelt.setUpdatePerSecond(6);\n    bumperBelt.setName(\"bumpers\");\n    Vector3d pos = new Vector3d(0, 0, 0.0);\n    agent.addSensorDevice(bumperBelt, pos, 0);\n    return bumperBelt;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/** Called by the simulator loop */\n", "func_signal": "protected void update(double elapsedSeconds)", "code": "{\n    if (updateOnEachFrame) {\n        update();\n    } else {\n        elapsedSinceUpdate += elapsedSeconds;\n        double delta = 1.0 / updatePerSecond;\n        if ((elapsedSinceUpdate > delta) || (firstUpdate)) {\n            update();\n            elapsedSinceUpdate -= delta;\n            firstUpdate = false;\n        }\n    }\n}", "path": "src\\simbad\\sim\\Device.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild belt of bumpers sensor to the agent.\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public RangeSensorBelt addBumperBeltSensor(Agent agent)", "code": "{\n   // double agentHeight = agent.getHeight();\n    double agentRadius = agent.getRadius();\n    RangeSensorBelt bumperBelt = new RangeSensorBelt((float) agentRadius-0.1f,\n            0f, 0.2f, 9, RangeSensorBelt.TYPE_BUMPER,0);\n    bumperBelt.setUpdatePerSecond(6);\n    bumperBelt.setName(\"bumpers\");\n    Vector3d pos = new Vector3d(0, 0, 0.0);\n    agent.addSensorDevice(bumperBelt, pos, 0);\n    return bumperBelt;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild light sensor  to the agent.\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public LightSensor addLightSensor(Agent agent)", "code": "{\n    double agentHeight = agent.getHeight();\n    LightSensor sensor = new LightSensor();\n    sensor.setUpdatePerSecond(3);\n    sensor.setName(\"Light Sensor\");\n    Vector3d pos = new Vector3d(0.0, (agentHeight / 2), 0);\n    agent.addSensorDevice(sensor, pos, -Math.PI / 2);\n    return sensor;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/** Sets the kinematic model to be DifferentialDrive (instead of DefaultKinematic)\n * @param agent\n */\n", "func_signal": "static public DifferentialKinematic setDifferentialDriveKinematicModel(Agent agent)", "code": "{\n   agent.setKinematicModel(new DifferentialKinematic(agent.getRadius()));\n   return (DifferentialKinematic)agent.getKinematicModel();\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Construct an AppleAgent.\n * @param pos\n * @param name\n */\n", "func_signal": "public CherryAgent(Vector3d pos, String name, float radius)", "code": "{\n    super(pos, name);\n    // to avoid collision indication\n    setCanBeTraversed(true);\n\n    this.radius = radius;\n    this.height = 2 * radius;\n    this.color = new Color3f(0.8f, 0, 0);\n  \n\n}", "path": "src\\simbad\\sim\\CherryAgent.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/** Create 3D geometry. */\n", "func_signal": "protected void create3D()", "code": "{\n    Appearance appear = new Appearance();\n    \n    material.setCapability(Material.ALLOW_COMPONENT_WRITE);\n    material.setDiffuseColor(color);\n    material.setSpecularColor(black);\n    appear.setMaterial(material);\n    int flags = Primitive.GEOMETRY_NOT_SHARED\n            | Primitive.ENABLE_GEOMETRY_PICKING\n            | Primitive.GENERATE_NORMALS;\n\n    body = new Sphere(radius, flags, appear);\n\n    // we must be able to change the pick flag of the agent\n    body.setCapability(Node.ALLOW_PICKABLE_READ);\n    body.setCapability(Node.ALLOW_PICKABLE_WRITE);\n    body.setPickable(true);\n    body.setCollidable(true);\n    addChild(body);\n\n    // Add bounds for interactions\n    Bounds bounds = new BoundingSphere(new Point3d(0, 0, 0), radius);\n    setBounds(bounds);\n\n}", "path": "src\\simbad\\sim\\CherryAgent.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild light sensor on the right of the agent .\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public LightSensor addLightSensorRight(Agent agent)", "code": "{\n    Vector3d front = new Vector3d(agent.getRadius()+0.5, 0, 0);\n    Transform3D t3d = new Transform3D();\n    t3d.rotY(-Math.PI / 4);\n    Vector3d right = new Vector3d(front);\n    t3d.transform(right);\n    return RobotFactory.addLightSensor(agent, right, (float) -Math.PI / 4,\n            \"left\");\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/** Constructs a line object.\n * \n * @param pos position of the start of the object. \n * @param len length of the object.\n * @param wd\tEnvironmentDescription for global parameters.\n * @param color  color of the object.\n */\n", "func_signal": "public Line(Vector3d pos, float len, EnvironmentDescription wd, Color3f color)", "code": "{\n\tsuper();\n\tthis.len = len;\n    // put it on the floor\n    pos.z += len/2;\n\tsetCanBeTraversed(true);\n    create3D(wd,color);\n    translateTo(pos);\n}", "path": "src\\simbad\\sim\\Line.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/* should not be called too often */\n", "func_signal": "protected void paintComponent( Graphics g)", "code": "{\n   super.paintComponent(g);\n   copyVisionImage(bim);\n   g.drawImage(bim, 0, 0, null);\n    \t       \n        }", "path": "src\\simbad\\sim\\Eye.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/** for allocating a working copy of the vision image */\n", "func_signal": "final public BufferedImage createCompatibleImage()", "code": "{\n    return  new BufferedImage(imageWidth, imageHeight,\n            BufferedImage.TYPE_INT_RGB);\n}", "path": "src\\simbad\\sim\\Eye.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild key  input  to the agent.\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public KeyInputSensor addKeyInputSensor(Agent agent)", "code": "{\n    KeyInputSensor sensor = new KeyInputSensor();\n  \n    sensor.setUpdatePerSecond(3);\n    sensor.setName(\"key input\");\n    // position has no meaning in the case of that sensor.\n    Vector3d pos = new Vector3d(0, 0.0, 0.0);\n    agent.addSensorDevice(sensor, pos, 0);\n    return sensor;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild lamp actuator on the top  of the agent .\n * @param agent\n * @return the actuator object\n */\n", "func_signal": "static public LampActuator addLamp(Agent agent)", "code": "{\n    LampActuator la = new LampActuator(0.15f);\n    la.setName(\"lamp\");\n    la.setUpdatePerSecond(5f);\n    agent.addActuatorDevice(la, new Vector3d(0,agent.getHeight(),0),0);\n   \n    return la;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Request to fill a SensorMatrix with last capture.\n * @param matrix  - to be filled\n */\n", "func_signal": "final public synchronized void copyVisionImage(SensorMatrix matrix)", "code": "{\n    visionImage.getRGB(0,0,imageWidth,imageHeight,tempRGBABuffer,0,imageWidth);\n    float array[] = matrix.getArray();\n        for (int i = 0; i < array.length; i++) {\n            int pix = tempRGBABuffer[i];\n            int r = (pix >> 16) & 0xff;\n            int g = (pix >> 8) & 0xff;\n            int b = (pix) & 0xff;\n            array[i] = (float) (r + g + b) / (3.0f * 255.0f);\n        }\n   \n}", "path": "src\\simbad\\sim\\Eye.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild light sensor on the left of the agent .\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public LightSensor addLightSensorLeft(Agent agent)", "code": "{\n    Vector3d front = new Vector3d(agent.getRadius()+0.5, 0, 0);\n    Transform3D t3d = new Transform3D();\n    t3d.rotY(Math.PI / 4);\n    Vector3d left = new Vector3d(front);\n    t3d.transform(left);\n    return RobotFactory.addLightSensor(agent, left, (float) Math.PI / 4,\n            \"left\");\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild belt of sonar sensor to the agent.\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public RangeSensorBelt addSonarBeltSensor(Agent agent)", "code": "{\n    double agentHeight = agent.getHeight();\n    double agentRadius = agent.getRadius();\n    RangeSensorBelt sonarBelt = new RangeSensorBelt((float) agentRadius,\n            0f, 1.5f, 9, RangeSensorBelt.TYPE_SONAR,0);\n    sonarBelt.setUpdatePerSecond(3);\n    sonarBelt.setName(\"sonars\");\n    Vector3d pos = new Vector3d(0, agentHeight / 2, 0.0);\n    agent.addSensorDevice(sonarBelt, pos, 0);\n    return sonarBelt;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild light sensor  to the agent at a given position.\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public LightSensor addLightSensor(Agent agent, Vector3d pos,\n        float angle, String label)", "code": "{\n    LightSensor sensor = new LightSensor();\n    sensor.setUpdatePerSecond(3);\n    sensor.setName(\"Light Sensor \" + label);\n    agent.addSensorDevice(sensor, pos, angle);\n    return sensor;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Adds a prebuild camera sensor to the agent. Image resolution is 100x100 pixels.\n * Camera is situated on the top of the agent.\n * @param agent\n * @return the sensor object\n */\n", "func_signal": "static public CameraSensor addCameraSensor(Agent agent)", "code": "{\n    double agentHeight = agent.getHeight();\n    float cameraBodyRadius = 0.1f;\n    CameraSensor camera = new CameraSensor(cameraBodyRadius, 100, 100);\n    camera.setUpdatePerSecond(3);\n    camera.setName(\"Camera\");\n    Vector3d pos = new Vector3d(0.0, (agentHeight / 2)\n            + (cameraBodyRadius * 3) / 4, 0);\n    agent.addSensorDevice(camera, pos, 0);\n    return camera;\n}", "path": "src\\simbad\\sim\\RobotFactory.java", "repo_name": "jimmikaelkael/simbad", "stars": 13, "license": "other", "language": "java", "size": 234}
{"docstring": "/**\n * Get the distance to another coordinate.\n * <p>Only X, Y and Z values are used in this calculation.\n * @param to\n * @return\n */\n", "func_signal": "public double distance(NumericCoordinate to)", "code": "{\n\tdouble dx = getValue(Axis.X, 0.0) - to.getValue(Axis.X, 0.0);\n\tdouble dy = getValue(Axis.Y, 0.0) - to.getValue(Axis.Y, 0.0);\n\tdouble dz = getValue(Axis.Z, 0.0) - to.getValue(Axis.Z, 0.0);\n\treturn Math.sqrt(dx*dx + dy*dy + dz*dz);\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\NumericCoordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Adjust paths. Align every character so their leftmost point is at X0.\n */\n", "func_signal": "private void postprocess()", "code": "{\n\tIterator<List<Point>> i = characters.iterator();\n\t// skip first (space)\n\ti.next();\n\twhile(i.hasNext()) {\n\t\tList<Point> points = i.next();\n\t\tint minx=Integer.MAX_VALUE;\n\t\tboolean first=true;\n\t\tfor(Point p : points) {\n\t\t\tif(first) { first=false; continue; }\n\t\t\tif(p.x!=null && p.x<minx)\n\t\t\t\tminx = p.x;\n\t\t}\n\t\tfirst=true;\n\t\tfor(Point p : points) {\n\t\t\tif(first) { first=false; continue; }\n\t\t\tif(p.x!=null)\n\t\t\t\tp.x -= minx;\n\t\t}\n\t}\n}", "path": "src\\org\\luolamies\\jgcgen\\text\\HersheyFont.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/** Generate the toolpath for a single X or Y line, depending on the angle. */\n", "func_signal": "private void doLine(List<Seg> segments, Surface img, double i, double level, boolean pos)", "code": "{\n\t// Get the available line segments\n\tArrayList<Double> points = sliceLine(img, i, level, pos);\n\t\n\t// Check if we have anything to do\n\tif(points.isEmpty())\n\t\treturn;\n\t\n\tif(angle==0)\n\t\ti = -i;\n\t\n\tfor(int j=0;j<points.size();j+=2) {\n\t\tsegments.add(new Seg(i, points.get(j), points.get(j+1)));\n\t}\n}", "path": "src\\org\\luolamies\\jgcgen\\shapes\\surface\\RoughStrategy.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Parameters: <code>rough <var>passdepth</var> <var>angle</var> <var>direction</var></code>,\n * where direction can be one of POS, NEG or ALT.\n * @param image\n * @param params\n */\n", "func_signal": "public RoughStrategy(Image image, String params)", "code": "{\n\tthis.image = image;\n\tString[] param = params.split(\" \");\n\tif(param.length!=3)\n\t\tthrow new IllegalArgumentException(\"RoughStrategy takes 0 or 3 parameters!\");\n\n\tpassdepth = Double.parseDouble(param[0]);\n\tif(passdepth<0)\n\t\tthrow new IllegalArgumentException(\"Pass depth must be positive!\");\n\n\tangle = Integer.parseInt(param[1]);\n\tif(angle!=0 && angle!=90)\n\t\tthrow new IllegalArgumentException(\"Only angles 0 and 90 are supported!\");\n\t\n\ttry {\n\t\tdir = Dir.valueOf(param[2].toUpperCase());\n\t} catch(IllegalArgumentException e) {\n\t\tthrow new IllegalArgumentException(\"Direction \\\"\" + param[1] + \"\\\" not supported!\");\n\t}\t\t\n}", "path": "src\\org\\luolamies\\jgcgen\\shapes\\surface\\RoughStrategy.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Set the depth of the helix. The final depth will be origin Z - depth\n * @param depth\n * @return\n */\n", "func_signal": "public Helix depth(double depth)", "code": "{\n\tif(depth<=0)\n\t\tthrow new IllegalArgumentException(\"Depth should be greater than zero!\");\n\tthis.depth = depth;\n\treturn this;\n}", "path": "src\\org\\luolamies\\jgcgen\\shapes\\outline\\Helix.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Set the top-center coordinates for the helix.\n * If Z coordinate is omitted, 0 is used for the top.\n * @param origin\n * @return\n */\n", "func_signal": "public Helix origin(String origin)", "code": "{\n\tCoordinate c = Coordinate.parse(origin);\n\tif(!(c instanceof NumericCoordinate))\n\t\tthrow new IllegalArgumentException(\"Helix supports only numeric coordinates!\");\n\tthis.origin = (NumericCoordinate)c;\n\tif(!this.origin.isDefined(Axis.Z))\n\t\tthis.origin.set(Axis.Z, 0.0);\n\treturn this;\n}", "path": "src\\org\\luolamies\\jgcgen\\shapes\\outline\\Helix.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Set the depth of a single pass\n * @param depth\n * @return\n */\n", "func_signal": "public Helix pass(double depth)", "code": "{\n\tthis.passdepth = depth;\n\treturn this;\n}", "path": "src\\org\\luolamies\\jgcgen\\shapes\\outline\\Helix.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Import the named file. File type is determined from the extension. \n * @param filename\n * @throws IOException \n * @throws SAXException \n */\n", "func_signal": "public static Importer file(String filename) throws SAXException, IOException", "code": "{\n\tint ext = filename.lastIndexOf('.');\n\tif(ext<0)\n\t\tthrow new IllegalArgumentException(\"Can't determine file type! Use file(\\\"name\\\", \\\"type\\\")\");\n\treturn file(filename, filename.substring(ext+1).toLowerCase());\n}", "path": "src\\org\\luolamies\\jgcgen\\importer\\Importer.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Import the named file. File type is determined from the extension. \n * @param filename\n * @throws IOException \n * @throws SAXException \n */\n", "func_signal": "public static Importer file(String filename, String type) throws SAXException, IOException", "code": "{\n\tif(\"svg\".equals(type)) {\n\t\treturn new SvgImporter(filename);\n\t} else\n\t\tthrow new IllegalArgumentException(\"Unsupported type \\\"\" + type + '\"');\n}", "path": "src\\org\\luolamies\\jgcgen\\importer\\Importer.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * A constructor with defaults for x,y and z axises.\n * @param x\n * @param y\n * @param z\n */\n", "func_signal": "public NumericCoordinate(Double x, Double y, Double z)", "code": "{\n\tthis();\n\tif(x!=null)\n\t\taxes.put(Axis.X, x);\n\tif(y!=null)\n\t\taxes.put(Axis.Y, y);\n\tif(z!=null)\n\t\taxes.put(Axis.Z, z);\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\NumericCoordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Is the given string a number?\n * @param str\n * @return true if string is a valid number\n */\n", "func_signal": "static public boolean isNumber(String str)", "code": "{\n\ttry {\n\t\tDouble.parseDouble(str);\n\t} catch(NumberFormatException e) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\org\\luolamies\\jgcgen\\math\\MathTools.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Return a copy of this coordinate set converted\n * to symbolic coordinates.\n * @return this set as symbolic coordinates\n */\n", "func_signal": "public SymbolicCoordinate toSymbolic()", "code": "{\n\tEnumMap<Axis, String> axes = new EnumMap<Axis, String>(Axis.class);\n\tfor(Axis a : this.axes.keySet())\n\t\taxes.put(a, get(a));\n\treturn new SymbolicCoordinate(axes);\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\NumericCoordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Get the numeruc value for the axis\n * @param axis\n * @param def default value if axis is not defined\n * @return value or default\n */\n", "func_signal": "public final Double getValue(Axis axis, double def)", "code": "{\n\tDouble d = axes.get(axis);\n\treturn d!=null ? d : def;\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\NumericCoordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Construct a commonly used 3 axis coordinate set.\n * <p>If only numeric values are used, a NumericCoordinate\n * will be constructed\n * @param x\n * @param y\n * @param z\n * @return\n */\n", "func_signal": "static public Coordinate xyz(String x, String y, String z)", "code": "{\n\tif(\n\t\tisnumeric.matcher(x).matches() &&\n\t\tisnumeric.matcher(y).matches() &&\n\t\tisnumeric.matcher(z).matches()\n\t\t)\n\t\treturn new NumericCoordinate(x, y, z);\n\telse\n\t\treturn new SymbolicCoordinate(x, y, z);\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\Coordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Extract coordinates from a g-code fragment.\n * Coordinates can be in forms like:\n * <ul>\n * <li>A0.0\n * <li>A[0.0]\n * <li>A#1\n * <li>A#&lt;_var&gt;\n * <li>A[#1+1.0]\n * <li>A[sin[#0]+#3]\n * <li>A-[-1]\n * </ul>\n * @param gcode\n */\n", "func_signal": "static public Coordinate parse(String gcode)", "code": "{\n\tif(gcode.length()==0)\n\t\treturn new NumericCoordinate();\n\t\n\tEnumMap<Axis, String> coords = new EnumMap<Axis, String>(Axis.class);\n\tAxis axis = null;\n\tStringBuilder cb = new StringBuilder();\n\t\n\t/* states:\n\t * 0 - expect variable or number or block start ([)\n\t * 1 - expect variable (numeric or named)\n\t * 2 - expect end of numeric constant\n\t * 3 - expect end of named variable (>)\n\t */\n\tStack<Integer> states = new Stack<Integer>();\n\t\n\tint i=-1;\n\twhile(++i<gcode.length()) {\n\t\tchar chr = gcode.charAt(i);\n\t\tif(Character.isWhitespace(chr))\n\t\t\tcontinue;\n\t\t\n\t\tif(states.isEmpty()) {\n\t\t\tif(axis!=null) {\n\t\t\t\tchar last = cb.charAt(cb.length()-1); \n\t\t\t\tif(last!=']' && last!='>')\n\t\t\t\t\tcb.delete(cb.length()-1, cb.length());\n\t\t\t\tcoords.put(axis, cb.toString());\n\t\t\t\tcb.delete(0, cb.length());\n\t\t\t}\n\t\t\t// Expect axis\n\t\t\tAxis a = Axis.get(chr);\n\t\t\tif(a!=null)\n\t\t\t\taxis = a;\n\t\t\telse\n\t\t\t\tthrow new IllegalArgumentException(gcode + \" (\" + chr + \"): Expected axis\");\n\t\t\tstates.push(0);\n\t\t} else {\n\t\t\tcb.append(chr);\n\t\t\tint state = states.peek();\n\t\t\tswitch(state) {\n\t\t\tcase 0:\n\t\t\t\tstates.pop();\n\t\t\t\t// axis value start\n\t\t\t\tif(chr=='[')\n\t\t\t\t\tstates.push(4);\n\t\t\t\telse if(chr=='#')\n\t\t\t\t\tstates.push(1);\n\t\t\t\telse if(Character.isDigit(chr) || chr=='-')\n\t\t\t\t\tstates.push(2);\n\t\t\t\telse\n\t\t\t\t\tthrow new IllegalArgumentException(chr + \": Expected number, variable or parenthesis\");\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t// Expect variable start\n\t\t\t\tstates.pop();\n\t\t\t\tif(chr=='<')\n\t\t\t\t\tstates.push(3);\n\t\t\t\telse if(Character.isDigit(chr))\n\t\t\t\t\tstates.push(2);\n\t\t\t\telse\n\t\t\t\t\tthrow new IllegalArgumentException(\"Expected numeric constant or named variable\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t// Expect end of numeric constant\n\t\t\t\tif(!(chr=='-' || chr=='.' || Character.isDigit(chr))) {\n\t\t\t\t\tstates.pop();\n\t\t\t\t\t// - sign can come before [ too\n\t\t\t\t\tif(chr=='[' && gcode.charAt(i-1)=='-')\n\t\t\t\t\t\tstates.push(4);\n\t\t\t\t\telse\n\t\t\t\t\t\t--i;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t// Expect end of named variable\n\t\t\t\tif(chr=='>') {\n\t\t\t\t\tstates.pop();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t// Expect end of parenthetical block (])\n\t\t\t\tif(chr=='[')\n\t\t\t\t\tstates.push(4);\n\t\t\t\telse if(chr==']') {\n\t\t\t\t\tstates.pop();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault: throw new RuntimeException(\"BUG: Unhandled state \" + state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Add the last axis\n\tcoords.put(axis, cb.toString());\n\n\tboolean allnumeric = true;\n\tfor(String s : coords.values()) {\n\t\tif(!isnumeric.matcher(s).matches()) {\n\t\t\tallnumeric = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(allnumeric) {\n\t\tNumericCoordinate c = new NumericCoordinate();\n\t\tfor(Map.Entry<Axis, String> a : coords.entrySet())\n\t\t\tc.set(a.getKey(), Double.valueOf(a.getValue()));\n\t\treturn c;\n\t} else\n\t\treturn new SymbolicCoordinate(coords);\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\Coordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * A constructor with defaults for x, y and z axes.\n * <p>The numbers must be either null or a valid double.\n * @param x\n * @param y\n * @param z\n */\n", "func_signal": "public NumericCoordinate(String x, String y, String z)", "code": "{\n\tthis();\n\tif(x!=null)\n\t\taxes.put(Axis.X, Double.valueOf(x));\n\tif(y!=null)\n\t\taxes.put(Axis.X, Double.valueOf(y));\n\tif(z!=null)\n\t\taxes.put(Axis.X, Double.valueOf(z));\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\NumericCoordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Set the radius of the helix\n * @param radius\n * @return\n */\n", "func_signal": "public Helix radius(double radius)", "code": "{\n\tif(radius<=0)\n\t\tthrow new IllegalArgumentException(\"Radius should be greater than zero!\");\n\tthis.radius = radius;\n\treturn this;\n}", "path": "src\\org\\luolamies\\jgcgen\\shapes\\outline\\Helix.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/** Cut a single line into segments */\n", "func_signal": "private ArrayList<Double> sliceLine(Surface img, double i, double level, boolean pos)", "code": "{\n\tArrayList<Double> points = new ArrayList<Double>();\n\t\n\tboolean bb = true;\n\tdouble max = (angle==0 ? image.getWidth() : image.getHeight());\n\t\n\tfor(double j=0;j<max;j+=img.getResolution()) {\n\t\tboolean b;\n\t\tif(angle==0)\n\t\t\tb = img.getDepthAt(j, i, image.getTool()) > level;\n\t\telse\n\t\t\tb = img.getDepthAt(i, -j, image.getTool()) > level;\n\t\t\n\t\tif(b!=bb) {\t\t\t\t\n\t\t\tpoints.add(j - (b ? img.getResolution() : 0));\n\t\t\tbb = b;\n\t\t}\n\t}\n\tif(points.size()%2==1)\n\t\tpoints.add(max);\n\tif((angle==0 && !pos) || (angle==90 && pos))\n\t\tCollections.reverse(points);\n\treturn points;\n}", "path": "src\\org\\luolamies\\jgcgen\\shapes\\surface\\RoughStrategy.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Get a copy of this coordinate with the axes multiplied by the\n * scale values.\n * <p>The scale value can be a number, or an expression (e.g. 2.0 or #1),\n * in which case each axis is multiplied by that value.\n * <p>Multiple axes can also be defined. E.g. \"x2.0 y1.5\" or \"x#1 y[#2-1.0]\",\n * in which case only the defined axes will be scaled.\n * @param scale\n * @return\n */\n", "func_signal": "public final Coordinate scale(String scale)", "code": "{\n\t// First, identify what sort of scale we are dealing with\n\tscale = scale.trim();\n\tint i=0;\n\twhile(scale.charAt(i)=='-') ++i;\n\t// Starts with a digit: This is a numeric scale to all axes\n\tif(Character.isDigit(scale.charAt(i)))\n\t\treturn scaleNumeric(Double.parseDouble(scale));\n\t\n\t// A variable reference or an expression. This is a symbolic\n\t// scale to all axes\n\tif(scale.charAt(i)=='#' || scale.charAt(i)=='[')\n\t\treturn scaleSymbolic(scale);\n\t\n\t// Otherwise this must be a coordinate scale\n\tCoordinate coord = Coordinate.parse(scale);\n\t\n\treturn scaleCoordinate(coord);\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\Coordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Convert this coordinate set to G-code.\n * E.g. If X and Y coordinates are set, this might produce\n * <kbd>X10.20 Y4.01</kbd>\n * @return coordinates\n */\n", "func_signal": "public String toGcode()", "code": "{\n\tStringBuilder sb = new StringBuilder();\n\tboolean first=true;\n\tfor(Axis a : Axis.values()) {\n\t\tString val = get(a);\n\t\tif(val!=null) {\n\t\t\tif(!first)\n\t\t\t\tsb.append(' ');\n\t\t\telse\n\t\t\t\tfirst = false;\n\t\t\tsb.append(a.toString());\n\t\t\tsb.append(val);\n\t\t}\n\t}\n\treturn sb.toString();\n}", "path": "src\\org\\luolamies\\jgcgen\\path\\Coordinate.java", "repo_name": "callaa/JGCGen", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 452}
{"docstring": "/**\n * Gets the epilogue.\n *\n * @return the epilogue.\n */\n", "func_signal": "public String getEpilogue()", "code": "{\n    if (!epilogueComputed) {\n        epilogueStrCache = epilogue != null ? ContentUtil.decode(epilogue) : null;\n        epilogueComputed = true;\n    }\n    return epilogueStrCache;\n}", "path": "src\\org\\apache\\james\\mime4j\\message\\MultipartImpl.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Constructs a LockableFileWriter with a file encoding.\n *\n * @param file  the file to write to, not null\n * @param encoding  the encoding to use, null means platform default\n * @param append  true if content should be appended, false to overwrite\n * @param lockDir  the directory in which the lock file should be held\n * @throws NullPointerException if the file is null\n * @throws IOException in case of an I/O error\n */\n", "func_signal": "public LockableFileWriter(File file, String encoding, boolean append,\n        String lockDir) throws IOException", "code": "{\n    super();\n    // init file to create/append\n    file = file.getAbsoluteFile();\n    if (file.getParentFile() != null) {\n        FileUtils.forceMkdir(file.getParentFile());\n    }\n    if (file.isDirectory()) {\n        throw new IOException(\"File specified is a directory\");\n    }\n    \n    // init lock file\n    if (lockDir == null) {\n        lockDir = System.getProperty(\"java.io.tmpdir\");\n    }\n    File lockDirFile = new File(lockDir);\n    FileUtils.forceMkdir(lockDirFile);\n    testLockDir(lockDirFile);\n    lockFile = new File(lockDirFile, file.getName() + LCK);\n    \n    // check if locked\n    createLock();\n    \n    // init wrapped writer\n    out = initWriter(file, encoding, append);\n}", "path": "src\\org\\apache\\commons\\io\\output\\LockableFileWriter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Initialise the wrapped file writer.\n * Ensure that a cleanup occurs if the writer creation fails.\n *\n * @param file  the file to be accessed\n * @param encoding  the encoding to use\n * @param append  true to append\n * @return The initialised writer\n * @throws IOException if an error occurs\n */\n", "func_signal": "private Writer initWriter(File file, String encoding, boolean append) throws IOException", "code": "{\n    boolean fileExistedAlready = file.exists();\n    OutputStream stream = null;\n    Writer writer = null;\n    try {\n        if (encoding == null) {\n            writer = new FileWriter(file.getAbsolutePath(), append);\n        } else {\n            stream = new FileOutputStream(file.getAbsolutePath(), append);\n            writer = new OutputStreamWriter(stream, encoding);\n        }\n    } catch (IOException ex) {\n        IOUtils.closeQuietly(writer);\n        IOUtils.closeQuietly(stream);\n        lockFile.delete();\n        if (fileExistedAlready == false) {\n            file.delete();\n        }\n        throw ex;\n    } catch (RuntimeException ex) {\n        IOUtils.closeQuietly(writer);\n        IOUtils.closeQuietly(stream);\n        lockFile.delete();\n        if (fileExistedAlready == false) {\n            file.delete();\n        }\n        throw ex;\n    }\n    return writer;\n}", "path": "src\\org\\apache\\commons\\io\\output\\LockableFileWriter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "//-----------------------------------------------------------------------\n/**\n * Checks to see if the filename matches.\n * \n * @param file  the File to check\n * @return true if the filename matches\n */\n", "func_signal": "public boolean accept(File file)", "code": "{\n    String name = file.getName();\n    for (int i = 0; i < this.names.length; i++) {\n        if (caseSensitivity.checkEquals(name, names[i])) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "src\\org\\apache\\commons\\io\\filefilter\\NameFileFilter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "//-----------------------------------------------------------------------\n/**\n * Closes the file writer.\n *\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "public void close() throws IOException", "code": "{\n    try {\n        out.close();\n    } finally {\n        lockFile.delete();\n    }\n}", "path": "src\\org\\apache\\commons\\io\\output\\LockableFileWriter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Checks to see if the filename matches.\n * \n * @param file  the File directory\n * @param name  the filename\n * @return true if the filename matches\n */\n", "func_signal": "public boolean accept(File file, String name)", "code": "{\n    for (int i = 0; i < names.length; i++) {\n        if (caseSensitivity.checkEquals(name, names[i])) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "src\\org\\apache\\commons\\io\\filefilter\\NameFileFilter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Sets the preamble.\n *\n * @param preamble\n *            the preamble.\n */\n", "func_signal": "public void setPreamble(String preamble)", "code": "{\n    this.preamble = preamble != null ? ContentUtil.encode(preamble) : null;\n    this.preambleStrCache = preamble;\n    this.preambleComputed = true;\n}", "path": "src\\org\\apache\\james\\mime4j\\message\\MultipartImpl.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Construct a new name file filter specifying case-sensitivity.\n *\n * @param name  the name to allow, must not be null\n * @param caseSensitivity  how to handle case sensitivity, null means case-sensitive\n * @throws IllegalArgumentException if the name is null\n */\n", "func_signal": "public NameFileFilter(String name, IOCase caseSensitivity)", "code": "{\n    if (name == null) {\n        throw new IllegalArgumentException(\"The wildcard must not be null\");\n    }\n    this.names = new String[] {name};\n    this.caseSensitivity = (caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity);\n}", "path": "src\\org\\apache\\commons\\io\\filefilter\\NameFileFilter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Creates a new <code>Multipart</code> from the specified\n * <code>Multipart</code>. The <code>Multipart</code> instance is\n * initialized with copies of preamble, epilogue, sub type and the list of\n * body parts of the specified <code>Multipart</code>. The parent entity\n * of the new multipart is <code>null</code>.\n *\n * @param other\n *            multipart to copy.\n * @throws UnsupportedOperationException\n *             if <code>other</code> contains a {@link SingleBody} that\n *             does not support the {@link SingleBody#copy() copy()}\n *             operation.\n * @throws IllegalArgumentException\n *             if <code>other</code> contains a <code>Body</code> that\n *             is neither a {@link Message}, {@link Multipart} or\n *             {@link SingleBody}.\n */\n", "func_signal": "public MultipartImpl(Multipart other)", "code": "{\n\tsuper(other.getSubType());\n\n\tfor (Entity otherBodyPart : other.getBodyParts()) {\n\t\tEntity bodyPartCopy = new BodyPart(otherBodyPart);\n        addBodyPart(bodyPartCopy);\n    }\n\n\tif (other instanceof MultipartImpl) {\n\t        preamble = ((MultipartImpl) other).preamble;\n\t        epilogue = ((MultipartImpl) other).epilogue;\n        preambleStrCache = ((MultipartImpl) other).preambleStrCache;\n        epilogueStrCache = ((MultipartImpl) other).epilogueStrCache;\n        preambleComputed = ((MultipartImpl) other).preambleComputed;\n        epilogueComputed = ((MultipartImpl) other).epilogueComputed;\n\t} else {\n\t\tsetPreamble(other.getPreamble());\n\t\tsetEpilogue(other.getEpilogue());\n\t}\n}", "path": "src\\org\\apache\\james\\mime4j\\message\\MultipartImpl.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Provide a String representaion of this file filter.\n *\n * @return a String representaion\n */\n", "func_signal": "public String toString()", "code": "{\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(super.toString());\n    buffer.append(\"(\");\n    if (names != null) {\n        for (int i = 0; i < names.length; i++) {\n            if (i > 0) {\n                buffer.append(\",\");\n            }\n            buffer.append(names[i]);\n        }\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n}", "path": "src\\org\\apache\\commons\\io\\filefilter\\NameFileFilter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * <p>\n * Resets the input buffer position to just before the last byte read, and\n * returns a result indicating to skip the last byte.\n * </p>\n * \n * @param in The input buffer\n * @return CoderResult.malformedForLength(1);\n */\n", "func_signal": "private CoderResult malformed(ByteBuffer in)", "code": "{\n    in.position(in.position() - 1);\n    return CoderResult.malformedForLength(1);\n}", "path": "src\\com\\beetstra\\jutf7\\UTF7StyleCharsetDecoder.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * <p>\n * Decodes a byte in <i>base 64 mode</i>. Will directly write a character to\n * the output buffer if completed.\n * </p>\n * \n * @param in The input buffer\n * @param out The output buffer\n * @param lastRead Last byte read from the input buffer\n * @return CoderResult.malformed if a non-base 64 character was encountered\n *         in strict mode, null otherwise\n */\n", "func_signal": "private CoderResult handleBase64(ByteBuffer in, CharBuffer out, byte lastRead)", "code": "{\n    CoderResult result = null;\n    int sextet = base64.getSextet(lastRead);\n    if (sextet >= 0) {\n        bitsRead += 6;\n        if (bitsRead < 16) {\n            tempChar += sextet << (16 - bitsRead);\n        } else {\n            bitsRead -= 16;\n            tempChar += sextet >> (bitsRead);\n            out.put((char)tempChar);\n            tempChar = (sextet << (16 - bitsRead)) & 0xFFFF;\n        }\n    } else {\n        if (strict)\n            return malformed(in);\n        out.put((char)lastRead);\n        if (base64bitsWaiting())\n            result = malformed(in);\n        setUnshifted();\n    }\n    return result;\n}", "path": "src\\com\\beetstra\\jutf7\\UTF7StyleCharsetDecoder.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Creates a new empty <code>Multipart</code> instance.\n */\n", "func_signal": "public MultipartImpl(String subType)", "code": "{\n    super(subType);\n    preamble = null;\n    preambleStrCache = null;\n    preambleComputed = true;\n    epilogue = null;\n    epilogueStrCache = null;\n    epilogueComputed = true;\n}", "path": "src\\org\\apache\\james\\mime4j\\message\\MultipartImpl.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Constructs a new name file filter for a list of names specifying case-sensitivity.\n * \n * @param names  the names to allow, must not be null\n * @param caseSensitivity  how to handle case sensitivity, null means case-sensitive\n * @throws IllegalArgumentException if the name list is null\n * @throws ClassCastException if the list does not contain Strings\n */\n", "func_signal": "public NameFileFilter(List names, IOCase caseSensitivity)", "code": "{\n    if (names == null) {\n        throw new IllegalArgumentException(\"The list of names must not be null\");\n    }\n    this.names = (String[]) names.toArray(new String[names.size()]);\n    this.caseSensitivity = (caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity);\n}", "path": "src\\org\\apache\\commons\\io\\filefilter\\NameFileFilter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Constructs a new name file filter for an array of names specifying case-sensitivity.\n * <p>\n * The array is not cloned, so could be changed after constructing the\n * instance. This would be inadvisable however.\n * \n * @param names  the names to allow, must not be null\n * @param caseSensitivity  how to handle case sensitivity, null means case-sensitive\n * @throws IllegalArgumentException if the names array is null\n */\n", "func_signal": "public NameFileFilter(String[] names, IOCase caseSensitivity)", "code": "{\n    if (names == null) {\n        throw new IllegalArgumentException(\"The array of names must not be null\");\n    }\n    this.names = names;\n    this.caseSensitivity = (caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity);\n}", "path": "src\\org\\apache\\commons\\io\\filefilter\\NameFileFilter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.nio.charset.CharsetDecoder#implFlush(java.nio.CharBuffer)\n */\n", "func_signal": "protected CoderResult implFlush(CharBuffer out)", "code": "{\n    if ((base64mode && strict) || base64bitsWaiting())\n        return CoderResult.malformedForLength(1);\n    return CoderResult.UNDERFLOW;\n}", "path": "src\\com\\beetstra\\jutf7\\UTF7StyleCharsetDecoder.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * Sets the epilogue.\n *\n * @param epilogue\n *            the epilogue.\n */\n", "func_signal": "public void setEpilogue(String epilogue)", "code": "{\n    this.epilogue = epilogue != null ? ContentUtil.encode(epilogue) : null;\n    this.epilogueStrCache = epilogue;\n    this.epilogueComputed = true;\n}", "path": "src\\org\\apache\\james\\mime4j\\message\\MultipartImpl.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "//-----------------------------------------------------------------------\n/**\n * Tests that we can write to the lock directory.\n *\n * @param lockDir  the File representing the lock directory\n * @throws IOException if we cannot write to the lock directory\n * @throws IOException if we cannot find the lock file\n */\n", "func_signal": "private void testLockDir(File lockDir) throws IOException", "code": "{\n    if (!lockDir.exists()) {\n        throw new IOException(\n                \"Could not find lockDir: \" + lockDir.getAbsolutePath());\n    }\n    if (!lockDir.canWrite()) {\n        throw new IOException(\n                \"Could not write to lockDir: \" + lockDir.getAbsolutePath());\n    }\n}", "path": "src\\org\\apache\\commons\\io\\output\\LockableFileWriter.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.nio.charset.CharsetDecoder#implReset()\n */\n", "func_signal": "protected void implReset()", "code": "{\n    setUnshifted();\n    justUnshifted = false;\n}", "path": "src\\com\\beetstra\\jutf7\\UTF7StyleCharsetDecoder.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/*\n * (non-Javadoc)\n * @see java.nio.charset.CharsetDecoder#decodeLoop(java.nio.ByteBuffer,\n * java.nio.CharBuffer)\n */\n", "func_signal": "protected CoderResult decodeLoop(ByteBuffer in, CharBuffer out)", "code": "{\n    while (in.hasRemaining()) {\n        byte b = in.get();\n        if (base64mode) {\n            if (b == unshift) {\n                if (base64bitsWaiting())\n                    return malformed(in);\n                if (justShifted) {\n                    if (!out.hasRemaining())\n                        return overflow(in);\n                    out.put((char)shift);\n                } else\n                    justUnshifted = true;\n                setUnshifted();\n            } else {\n                if (!out.hasRemaining())\n                    return overflow(in);\n                CoderResult result = handleBase64(in, out, b);\n                if (result != null)\n                    return result;\n            }\n            justShifted = false;\n        } else {\n            if (b == shift) {\n                base64mode = true;\n                if (justUnshifted && strict)\n                    return malformed(in);\n                justShifted = true;\n                continue;\n            }\n            if (!out.hasRemaining())\n                return overflow(in);\n            out.put((char)b);\n            justUnshifted = false;\n        }\n    }\n    return CoderResult.UNDERFLOW;\n}", "path": "src\\com\\beetstra\\jutf7\\UTF7StyleCharsetDecoder.java", "repo_name": "jca02266/k9mail", "stars": 10, "license": "other", "language": "java", "size": 13872}
{"docstring": "/**\n * @return Returns a new hibernate element for the given entity.\n */\n", "func_signal": "private Element createEntity(PAnnotatedEClass entity,\n\t\tInheritanceType inhStrategy, PAnnotatedEClass superEntity,\n\t\tDiscriminatorValue dValue, Table table)", "code": "{\n\t// determine what type of hibernate tag should be used\n\tfinal InheritanceType inheritanceStrategy = inhStrategy != null ? inhStrategy\n\t\t\t: InheritanceType.SINGLE_TABLE;\n\tfinal EClass eclass = entity.getModelEClass();\n\tfinal String hbClassName;\n\tif (superEntity == null) {\n\t\thbClassName = \"class\";\n\t} else {\n\t\thbClassName = EntityMapper.hbInheritanceName(inheritanceStrategy);\n\t}\n\n\tlog.debug(\"Creating entity tag \" + hbClassName);\n\n\tfinal Element target;\n\n\tfinal String entityName = getHbmContext().getEntityName(eclass);\n\tfinal String isAbstractStr = eclass.isAbstract() ? \"true\" : \"false\";\n\tfinal boolean doProxy = ((HbAnnotatedEClass) entity).getHbProxy() != null\n\t\t\t&& ((HbAnnotatedEClass) entity).getHbProxy().isLazy();\n\tif (entity.isOnlyMapAsEntity()) {\n\t\ttarget = getHbmContext().getCurrent().addElement(hbClassName)\n\t\t\t\t.addAttribute(\"entity-name\", entityName).addAttribute(\n\t\t\t\t\t\t\"abstract\", isAbstractStr).addAttribute(\"lazy\",\n\t\t\t\t\t\t\"false\");\n\n\t\t// note for composite ids the name must be set always!\n\t\t// entity.getAnnotatedEClass().getInstanceClass() != null) { //\n\t\t// ||\n\t\t// entity.getAnnotatedEClass().getInstanceClass() != null ||\n\t\tif (hasCompositeID(entity)) { // only for this specific case\n\t\t\t// it is\n\t\t\t// required to have the impl.name\n\t\t\ttarget.addAttribute(\"name\", hbmContext\n\t\t\t\t\t.getInstanceClassName(entity.getModelEClass()));\n\t\t}\n\t} else if (getHbmContext().forceUseOfInstance(entity)) {\n\n\t\tfinal Element importElement = new Element(\"import\");\n\n\t\timportElement.addAttribute(\"class\",\n\t\t\t\thbmContext.getInstanceClassName(entity.getModelEClass()))\n\t\t\t\t.addAttribute(\"rename\", entityName);\n\t\tgetHbmContext().getCurrent().add(getImportIndex(), importElement);\n\n\t\ttarget = getHbmContext().getCurrent().addElement(hbClassName)\n\t\t\t\t.addAttribute(\n\t\t\t\t\t\t\"name\",\n\t\t\t\t\t\thbmContext.getInstanceClassName(entity\n\t\t\t\t\t\t\t\t.getModelEClass())).addAttribute(\n\t\t\t\t\t\t\"abstract\", isAbstractStr).addAttribute(\"lazy\",\n\t\t\t\t\t\tdoProxy ? \"true\" : \"false\");\n\t} else {\n\t\ttarget = getHbmContext().getCurrent().addElement(hbClassName)\n\t\t\t\t.addAttribute(\n\t\t\t\t\t\t\"name\",\n\t\t\t\t\t\thbmContext.getInstanceClassName(entity\n\t\t\t\t\t\t\t\t.getModelEClass())).addAttribute(\n\t\t\t\t\t\t\"entity-name\", entityName).addAttribute(\"abstract\",\n\t\t\t\t\t\tisAbstractStr).addAttribute(\"lazy\",\n\t\t\t\t\t\tdoProxy ? \"true\" : \"false\");\n\t}\n\n\tfinal HbAnnotatedEClass hbEntity = (HbAnnotatedEClass) entity;\n\t// TODO: the immutable on the eclass should be removed as it is now\n\t// covered through the HbEntity\n\tif (superEntity == null && hbEntity.getImmutable() != null) {\n\t\ttarget.addAttribute(\"mutable\", \"false\");\n\t}\n\n\tif (hbEntity.getBatchSize() != null) {\n\t\ttarget.addAttribute(\"batch-size\", \"\"\n\t\t\t\t+ hbEntity.getBatchSize().getSize());\n\t}\n\n\tif (hbEntity.getHbEntity() != null) {\n\t\tfinal HbEntity hbEntityAnnon = hbEntity.getHbEntity();\n\t\tif (superEntity == null) {\n\t\t\tif (!hbEntityAnnon.isMutable()\n\t\t\t\t\t&& target.getAttributeValue(\"mutable\") == null) {\n\t\t\t\ttarget.addAttribute(\"mutable\", \"false\");\n\t\t\t}\n\t\t\tif (hbEntityAnnon.getPolymorphism() != null) {\n\t\t\t\ttarget.addAttribute(\"polymorphism\", hbEntityAnnon\n\t\t\t\t\t\t.getPolymorphism().getName().toLowerCase());\n\t\t\t}\n\t\t\tif (hbEntityAnnon.getOptimisticLock() != null) {\n\t\t\t\ttarget.addAttribute(\"optimistic-lock\", hbEntityAnnon\n\t\t\t\t\t\t.getOptimisticLock().getName().toLowerCase());\n\t\t\t}\n\t\t}\n\t\tif (hbEntityAnnon.isDynamicInsert()) {\n\t\t\ttarget.addAttribute(\"dynamic-insert\", \"true\");\n\t\t}\n\t\tif (hbEntityAnnon.isDynamicUpdate()) {\n\t\t\ttarget.addAttribute(\"dynamic-update\", \"true\");\n\t\t}\n\t\tif (hbEntityAnnon.isSelectBeforeUpdate()) {\n\t\t\ttarget.addAttribute(\"select-before-update\", \"true\");\n\t\t}\n\t\tif (hbEntityAnnon.getPersister() != null) {\n\t\t\ttarget.addAttribute(\"persister\", hbEntityAnnon.getPersister());\n\t\t}\n\n\t}\n\n\tif (superEntity != null) {\n\t\tfinal String extendsEntity;\n\t\tif (superEntity.isOnlyMapAsEntity()\n\t\t\t\t|| !getHbmContext().forceUseOfInstance(superEntity)) {\n\t\t\textendsEntity = getHbmContext().getEntityName(\n\t\t\t\t\tsuperEntity.getModelEClass());\n\t\t} else {\n\t\t\textendsEntity = getHbmContext().getInstanceClassName(\n\t\t\t\t\tsuperEntity.getModelEClass());\n\t\t}\n\t\ttarget.addAttribute(\"extends\", extendsEntity);\n\t\tlog.debug(\"Extends \" + extendsEntity);\n\t}\n\n\tif (dValue != null) {\n\t\ttarget.addAttribute(\"discriminator-value\", dValue.getValue());\n\t\tlog.debug(\"DValue \" + dValue.getValue());\n\t}\n\n\tif (table != null\n\t\t\t&& hbClassName\n\t\t\t\t\t.compareTo(INHERITANCE_STRATEGY_NAMES[InheritanceType.SINGLE_TABLE\n\t\t\t\t\t\t\t.getValue()]) == 0) {\n\t\tlog\n\t\t\t\t.warn(\"EClass/Entity (\"\n\t\t\t\t\t\t+ entityName\n\t\t\t\t\t\t+ \") is mapped as subclass in a single table with its superclass but it also has a table annotation. This table annotation is ignored.\");\n\t} else if (table != null) {\n\t\tif (table.getName() != null) {\n\t\t\ttarget.addAttribute(\"table\", getHbmContext().trunc(\n\t\t\t\t\ttable.getName(), false));\n\t\t\tlog.debug(\"Table \" + table.getName());\n\t\t}\n\t\tif (table.getSchema() != null) {\n\t\t\ttarget.addAttribute(\"schema\", getHbmContext().trunc(\n\t\t\t\t\ttable.getSchema(), false));\n\t\t\tlog.debug(\"Schema \" + table.getSchema());\n\t\t}\n\t\tif (table.getCatalog() != null) {\n\t\t\ttarget.addAttribute(\"catalog\", getHbmContext().trunc(\n\t\t\t\t\ttable.getCatalog(), false));\n\t\t\tlog.debug(\"Catalog \" + table.getCatalog());\n\t\t}\n\t}\n\n\tif (((HbAnnotatedEClass) entity).getHbWhere() != null) {\n\t\ttarget.addAttribute(\"where\", ((HbAnnotatedEClass) entity)\n\t\t\t\t.getHbWhere().getClause());\n\t}\n\n\tif (((HbAnnotatedEClass) entity).getHbProxy() != null\n\t\t\t&& ((HbAnnotatedEClass) entity).getHbProxy().getProxyClass() != null) {\n\t\tfinal String proxyInterfaceName = ((HbAnnotatedEClass) entity)\n\t\t\t\t.getHbProxy().getProxyClass();\n\t\ttarget.addAttribute(\"proxy\", proxyInterfaceName);\n\t}\n\n\treturn target;\n}\n\n/** Return index were to place the import */\nprotected int getImportIndex() {\n\tfinal List<?> children = getHbmContext().getCurrent().getChildren();\n\tint defaultResult = 0;\n\tfor (int i = 0; i < children.size(); i++) {\n\t\tfinal Element e = (Element) children.get(i);\n\t\tfinal String name = e.getName();\n\t\tif (name.compareTo(\"class\") == 0 || name.compareTo(\"subclass\") == 0\n\t\t\t\t|| name.compareTo(\"joined-subclass\") == 0\n\t\t\t\t|| name.compareTo(\"union-subclass\") == 0) {\n\t\t\treturn i;\n\t\t}\n\t\tif (name.compareTo(\"typedef\") == 0 || name.compareTo(\"meta\") == 0) {\n\t\t\tdefaultResult = i + 1;\n\t\t}\n\t}\n\treturn defaultResult;\n}\n\n/** Returns true if this entity or one of its superclasses has an idclass */\nprivate boolean hasCompositeID(PAnnotatedEClass aClass) {\n\tif (aClass.getIdClass() != null) {\n\t\treturn true;\n\t}\n\tif (aClass.getPaSuperEntity() != null) {\n\t\treturn hasCompositeID(aClass.getPaSuperEntity());\n\t}\n\tfor (PAnnotatedEClass superAClass : aClass.getPaMappedSupers()) {\n\t\tif (hasCompositeID(superAClass)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t{\n\t\tList<PAnnotatedEStructuralFeature> features = aClass\n\t\t\t\t.getPaEStructuralFeatures();\n\t\tfor (PAnnotatedEStructuralFeature feature : features) {\n\t\t\tif (feature instanceof PAnnotatedEReference\n\t\t\t\t\t&& ((PAnnotatedEReference) feature).getEmbeddedId() != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Maps the given entity in its hbm context.\n */\npublic void processEntity(PAnnotatedEClass entity) {\n\tif (log.isDebugEnabled()) {\n\t\tlog.debug(\"Mapping Entity \" + entity);\n\t}\n\n\tfinal HbAnnotatedEClass hbEntity = (HbAnnotatedEClass) entity;\n\tElement entityElement = createEntity(entity, entity\n\t\t\t.getInheritanceStrategy(), entity.getPaSuperEntity(), entity\n\t\t\t.getDiscriminatorValue(), entity.getTable());\n\tfinal MappingContext mc = getHbmContext();\n\n\tmc.setCurrent(entityElement);\n\tmc.setCurrentTable(entity.getTable());\n\t// MT: moved to processFeatures method because this should be done after\n\t// the id\n\t// element has been placed\n\n\tif (entity.getPaSuperEntity() == null\n\t\t\t&& entity.getPrimaryKeyJoinColumns() != null\n\t\t\t&& entity.getPrimaryKeyJoinColumns().size() > 0) {\n\t\tlog\n\t\t\t\t.warn(\"This entity (\"\n\t\t\t\t\t\t+ entity.getEntity().getName()\n\t\t\t\t\t\t+ \" is the root in the class hierarchy and \"\n\t\t\t\t\t\t+ \"has a pk joincolum annotation, this is not correct, ignoring pk joincolumn annotation\");\n\t} else if (InheritanceType.SINGLE_TABLE.equals(entity\n\t\t\t.getInheritanceStrategy())\n\t\t\t&& entity.getPrimaryKeyJoinColumns() != null\n\t\t\t&& entity.getPrimaryKeyJoinColumns().size() > 0) {\n\t\tlog\n\t\t\t\t.warn(\"Single table inheritance strategy (entity \"\n\t\t\t\t\t\t+ entity.getEntity().getName()\n\t\t\t\t\t\t+ \", primary key join column annotation is ignored for subclass\");\n\t} else if (entity.getPrimaryKeyJoinColumns() != null\n\t\t\t&& entity.getPrimaryKeyJoinColumns().size() > 0) {\n\t\taddPrimaryKeyJoinColumn(entity.getPrimaryKeyJoinColumns(), entity);\n\t} else if (entity.getPaSuperEntity() != null\n\t\t\t&& InheritanceType.JOINED.equals(entity\n\t\t\t\t\t.getInheritanceStrategy())) {\n\t\tfinal ArrayList<PrimaryKeyJoinColumn> list = new ArrayList<PrimaryKeyJoinColumn>();\n\t\tfinal PrimaryKeyJoinColumn pkjc = PannotationFactory.eINSTANCE\n\t\t\t\t.createPrimaryKeyJoinColumn();\n\t\tfinal String entityName = mc.getEntityName(entity.getModelEClass());\n\t\tmc.trunc(entityName + \"id\"); // TODO improve name\n\t\t// creation here\n\t\tlist.add(pkjc);\n\t\taddPrimaryKeyJoinColumn(list, entity);\n\t}\n\n\ttry {\n\t\tfinal List<PAnnotatedEStructuralFeature> inheritedFeatures = mc\n\t\t\t\t.getInheritedFeatures(entity);\n\n\t\tmc\n\t\t\t\t.setForceOptional(entity.getPaSuperEntity() != null\n\t\t\t\t\t\t&& (entity.getInheritanceStrategy() == null || InheritanceType.SINGLE_TABLE\n\t\t\t\t\t\t\t\t.equals(entity.getInheritanceStrategy())));\n\n\t\tmc.pushOverrideOnStack();\n\t\tmc.addAttributeOverrides(entity.getAttributeOverrides());\n\t\tmc.addAssociationOverrides(entity.getAssociationOverrides());\n\n\t\tif (inheritedFeatures.size() > 0) {\n\t\t\tlog.debug(\"There are \" + inheritedFeatures.size()\n\t\t\t\t\t+ \" inherited features \");\n\t\t}\n\n\t\ttry {\n\t\t\tprocessFeatures(inheritedFeatures);\n\n\t\t\tfinal EList<SecondaryTable> secondaryTables = entity\n\t\t\t\t\t.getSecondaryTables();\n\t\t\tif (secondaryTables == null || secondaryTables.isEmpty()) {\n\t\t\t\t// Process features normally.\n\t\t\t\tprocessFeatures(entity.getPaEStructuralFeatures());\n\t\t\t} else {\n\t\t\t\t// Special processing needed for secondary tables.\n\t\t\t\tprocessSecondaryTables(secondaryTables, entity);\n\t\t\t}\n\t\t} finally {\n\t\t\tmc.popOverrideStack();\n\t\t}\n\t} finally {\n\t\tmc.setForceOptional(false);\n\t\tmc.setCurrentTable(null);\n\t\tElement idElement = entityElement.element(\"id\");\n\t\tif (idElement == null) {\n\t\t\tidElement = entityElement.element(\"composite-id\");\n\t\t}\n\n\t\t// create a synthetic id for roots\n\t\tif (idElement == null && entity.getPaSuperEntity() == null\n\t\t\t\t&& entity.getPaMappedSupers().size() == 0) {\n\t\t\tidElement = IdMapper.addSyntheticId(hbmContext, entityElement);\n\t\t} else if (mc.mustAddSyntheticID(entity)) {\n\t\t\tidElement = IdMapper.addSyntheticId(hbmContext, entityElement);\n\t\t} else {\n\t\t\taddAccessor(idElement, hbmContext.getIdPropertyHandlerName());\n\t\t}\n\n\t\tif (idElement != null) {\n\t\t\tint index = entityElement.indexOf(idElement) + 1;\n\n\t\t\tif (((HbAnnotatedEClass) entity).getDiscriminatorFormula() != null) {\n\t\t\t\tentityElement.add(index++, createDiscriminatorElement(\n\t\t\t\t\t\thbEntity.getDiscriminatorFormula(), entity\n\t\t\t\t\t\t\t\t.getDiscriminatorColumn(), hbEntity\n\t\t\t\t\t\t\t\t.getForceDiscriminator() != null));\n\t\t\t} else if (entity.getDiscriminatorColumn() != null) {\n\t\t\t\t// add discriminator element immediately after id element\n\t\t\t\tentityElement.add(index++, createDiscriminatorElement(\n\t\t\t\t\t\tentity.getDiscriminatorColumn(), hbEntity\n\t\t\t\t\t\t\t\t.getForceDiscriminator() != null));\n\t\t\t}\n\n\t\t\t// create and/or move version element (if present) immediately\n\t\t\t// after discriminator\n\t\t\tElement versionElement = entityElement.element(\"version\");\n\t\t\tif (versionElement == null) {\n\t\t\t\tversionElement = addVersionProperty(hbEntity);\n\t\t\t}\n\n\t\t\tif (null != versionElement) { // In case this is not versioned\n\t\t\t\tentityElement.remove(versionElement);\n\t\t\t\tentityElement.add(index, versionElement);\n\t\t\t}\n\t\t}\n\n\t\tmapFilter(entityElement, ((HbAnnotatedEClass) entity).getFilter());\n\n\t\tmc.setCurrent(entityElement.getParent());\n\n\t\t// now process the featuremap entries if any\n\t\tprocessFeatureMapFeatures();\n\t\tint index = 1 + entityElement.getChildren().indexOf(idElement);\n\t\t// check if there is a discriminator, if so put it behind that one\n\t\tif (entityElement.element(\"discriminator\") != null) {\n\t\t\tfinal Element elem = entityElement.element(\"discriminator\");\n\t\t\tindex = 1 + entityElement.getChildren().indexOf(elem);\n\t\t}\n\n\t\thandleNaturalId(entityElement, index);\n\t}\n\n\t// initially the comment is placed at the back, move it to the front\n\tfinal Element comment = addCommentElement(entity.getModelEClass(),\n\t\t\tentityElement);\n\tif (comment != null) {\n\t\tentityElement.remove(comment);\n\t\tentityElement.add(0, comment);\n\t}\n\n\t// place the tuplizer at the front\n\tmc.addTuplizerElement(entityElement, entity);\n\n\tif ((entity.getPaSuperEntity() == null || entity.getPaSuperEntity()\n\t\t\t.getMappedSuperclass() != null)\n\t\t\t&& ((HbAnnotatedEClass) entity).getHbCache() != null) {\n\t\t// then add the cache at the front\n\t\taddCacheElement(entityElement, ((HbAnnotatedEClass) entity)\n\t\t\t\t.getHbCache());\n\t}\n\n\t// and add the metas at the front\n\tfinal Element meta1 = new Element(\"meta\");\n\tmeta1.addAttribute(\"attribute\", HbMapperConstants.ECLASS_NAME_META)\n\t\t\t.addText(entity.getModelEClass().getName());\n\tfinal Element meta2 = new Element(\"meta\");\n\tmeta2.addAttribute(\"attribute\", HbMapperConstants.EPACKAGE_META)\n\t\t\t.addText(entity.getModelEClass().getEPackage().getNsURI());\n\n\tentityElement.add(0, meta1);\n\tentityElement.add(1, meta2);\n\n\t// and move the joins to the back\n\tfinal List<Element> toMove = new ArrayList<Element>();\n\tfor (Element elem : entityElement.getChildren()) {\n\t\tif (elem.getName().equals(\"join\")) {\n\t\t\ttoMove.add(elem);\n\t\t}\n\t}\n\tentityElement.getChildren().removeAll(toMove);\n\tentityElement.getChildren().addAll(toMove);\n\n}\n\n// reorganize the elements which have a natural-id inside a natural-id tag\nprotected void handleNaturalId(Element parentElement, int index) {\n\tlog.debug(\"Checking for natural-ids\");\n\tfinal List<Element> naturalIdElements = new ArrayList<Element>();\n\tboolean mutable = false;\n\tfor (Element element : parentElement.getChildren()) {\n\t\tString value;\n\t\tif ((value = element\n\t\t\t\t.getAttributeValue(HbMapperConstants.NATURAL_ID_ATTR)) != null) {\n\t\t\tif (naturalIdElements.isEmpty()) {\n\t\t\t\tlog.debug(\"Found natural-id, mutable: \" + mutable);\n\t\t\t\tmutable = Boolean.parseBoolean(value);\n\t\t\t}\n\t\t\tnaturalIdElements.add(element);\n\t\t\telement.removeAttribute(HbMapperConstants.NATURAL_ID_ATTR);\n\t\t}\n\t}\n\tif (!naturalIdElements.isEmpty()) {\n\t\tlog\n\t\t\t\t.debug(\"Found \"\n\t\t\t\t\t\t+ naturalIdElements.size()\n\t\t\t\t\t\t+ \" naturalid properies, putting them inside a natural-id tag\");\n\t\tparentElement.getChildren().removeAll(naturalIdElements);\n\t\tfinal Element naturalId = parentElement.addElement(\"natural-id\");\n\t\t// remove it again to place it at the correct position a little\n\t\t// lower\n\t\tparentElement.remove(naturalId);\n\t\tnaturalId.addAttribute(\"mutable\", Boolean.toString(mutable));\n\t\tparentElement.add(index, naturalId);\n\t\tnaturalId.getChildren().addAll(naturalIdElements);\n\t\tfor (Element element : naturalIdElements) {\n\t\t\telement.setParent(naturalId);\n\t\t}\n\t}\n}\n\n/** Process the featuremap entries */\nprivate void processFeatureMapFeatures() {\n\t// this is a while and for loop, in the for loop the features of a\n\t// feature map\n\t// are processed, these features can again be a featuremap which are\n\t// added\n\t// to the featuremapmappers in the context, therefore this process walks\n\t// on\n\tList<FeatureMapMapping> featureMapMappers = getHbmContext()\n\t\t\t.getClearFeatureMapMappers();\n\twhile (featureMapMappers.size() > 0) {\n\n\t\tfor (FeatureMapMapping fmm : featureMapMappers) {\n\t\t\tfmm.process();\n\t\t}\n\n\t\t// read again because the fmm.process can result in new feature map\n\t\t// mappings\n\t\tfeatureMapMappers = getHbmContext().getClearFeatureMapMappers();\n\t}\n}\n\n/**\n * Process the features of the mapped superclass so that they are added to\n * the current mapping\n */\nprotected void processMappedSuper(PAnnotatedEClass paMappedSuper) {\n\tprocessFeatures(paMappedSuper.getPaEStructuralFeatures());\n}\n\n/** process the features of the annotated eclass */\nprotected void processFeatures(List<PAnnotatedEStructuralFeature> features) {\n\tfor (PAnnotatedEStructuralFeature annotatedEStructuralFeature : features) {\n\t\tprocessFeature(annotatedEStructuralFeature);\n\t}\n}\n\n/** Process secondary tables. */\nprotected void processSecondaryTables(List<SecondaryTable> secondaryTables,\n\t\tPAnnotatedEClass entity) {\n\t// Group features by primary and secondary tables.\n\t// For the primary table we use null as the surrogate key. (HashMap\n\t// allows null keys.)\n\tfinal Set<String> tableNames = new HashSet<String>();\n\ttableNames.add(PRIMARY_TABLE_KEY);\n\tfor (SecondaryTable secondaryTable : secondaryTables) {\n\t\ttableNames.add(secondaryTable.getName());\n\t}\n\tfinal Map<String, List<PAnnotatedEStructuralFeature>> featuresByTable = new HashMap<String, List<PAnnotatedEStructuralFeature>>();\n\tfor (PAnnotatedEStructuralFeature feature : entity\n\t\t\t.getPaEStructuralFeatures()) {\n\t\t// find the table for the feature\n\t\tfinal String tableName = getHbmContext().getSecondaryTableName(\n\t\t\t\tfeature);\n\t\t// if there put it in the correct list\n\t\tif (!tableNames.contains(tableName)) {\n\t\t\tfinal String message = \"Feature \\\"\"\n\t\t\t\t\t+ feature.getModelElement().getName()\n\t\t\t\t\t+ \"\\\" was mapped to undeclared secondary table \\\"\"\n\t\t\t\t\t+ tableName + \"\\\".\";\n\t\t\tlog.error(message);\n\t\t\tthrow new MappingException(message);\n\t\t}\n\t\tList<PAnnotatedEStructuralFeature> featuresInTable = featuresByTable\n\t\t\t\t.get(tableName);\n\t\tif (featuresInTable == null) {\n\t\t\tfeaturesInTable = new ArrayList<PAnnotatedEStructuralFeature>();\n\t\t\tfeaturesByTable.put(tableName, featuresInTable);\n\t\t}\n\t\tfeaturesInTable.add(feature);\n\t}\n\n\t// Process features in primary table.\n\t{\n\t\tfinal List<PAnnotatedEStructuralFeature> featuresInTable = featuresByTable\n\t\t\t\t.get(PRIMARY_TABLE_KEY);\n\t\t// can happen if there are only secondarytable features and no\n\t\t// primary table\n\t\t// features see bugzilla 235949\n\t\tif (featuresInTable != null) {\n\t\t\tfor (PAnnotatedEStructuralFeature feature : featuresInTable) {\n\t\t\t\tprocessFeature(feature);\n\t\t\t}\n\t\t}\n\t}\n\t// Process features in secondary tables.\n\tfor (SecondaryTable secondaryTable : secondaryTables) {\n\t\tif (!featuresByTable.containsKey(secondaryTable.getName())) {\n\t\t\t// The table was listed in the SecondaryTable annotation, but no\n\t\t\t// features were actually mapped to this\n\t\t\t// table.\n\t\t\tlog.warn(\"No features mapped to secondary table \"\n\t\t\t\t\t+ secondaryTable.getName());\n\t\t\tcontinue;\n\t\t}\n\t\tfinal List<PAnnotatedEStructuralFeature> featuresInTable = featuresByTable\n\t\t\t\t.get(secondaryTable.getName());\n\n\t\t// Create <join> element\n\t\t// See\n\t\t// http://www.hibernate.org/hib_docs/v3/reference/en/html/mapping.html#mapping-declaration\n\t\t// -join\n\t\tfinal Element joinElement = getHbmContext().getCurrent()\n\t\t\t\t.addElement(\"join\");\n\t\tjoinElement.addAttribute(\"table\", getHbmContext().trunc(\n\t\t\t\tsecondaryTable.getName().toUpperCase(), false));\n\t\tlog.debug(\"Mapping features to secondary table \\\"\"\n\t\t\t\t+ secondaryTable.getName() + \"\\\"\");\n\t\tif (secondaryTable.getCatalog() != null) {\n\t\t\tjoinElement\n\t\t\t\t\t.addAttribute(\"catalog\", secondaryTable.getCatalog());\n\t\t}\n\t\tif (secondaryTable.getSchema() != null) {\n\t\t\tjoinElement.addAttribute(\"schema\", secondaryTable.getSchema());\n\t\t}\n\t\tentity.getModelEClass().getEIDAttribute();\n\t\tfinal List<PrimaryKeyJoinColumn> pkJoinColumns = secondaryTable\n\t\t\t\t.getPkJoinColumns();\n\t\tfinal Element keyElement = joinElement.addElement(\"key\");\n\t\tfor (PrimaryKeyJoinColumn pkJoinColumn : pkJoinColumns) {\n\t\t\tkeyElement.addElement(\"column\").addAttribute(\"name\",\n\t\t\t\t\tgetHbmContext().trunc(pkJoinColumn.getName()));\n\t\t}\n\t\thandleOndelete(keyElement, ((HbAnnotatedEClass) entity)\n\t\t\t\t.getHbOnDelete());\n\n\t\t// Process features in this secondary table.\n\t\ttry {\n\t\t\tgetHbmContext().setCurrent(joinElement);\n\t\t\tgetHbmContext().setCurrentSecondaryTable(secondaryTable);\n\t\t\tfor (PAnnotatedEStructuralFeature feature : featuresInTable) {\n\t\t\t\tprocessFeature(feature);\n\t\t\t}\n\t\t} finally {\n\t\t\tgetHbmContext().setCurrentSecondaryTable(null);\n\t\t\tgetHbmContext().setCurrent(joinElement.getParent());\n\t\t}\n\t}\n}\n\n/** Process one feature */\nprotected void processFeature(PAnnotatedEStructuralFeature paFeature) {\n\thbmContext.getFeatureMapper().process(paFeature);\n}\n\n/**\n * Adds a key element to the current entity mapping, is for example used to\n * join to the super class table.\n */\nprivate void addPrimaryKeyJoinColumn(List<PrimaryKeyJoinColumn> pkJCs,\n\t\tPAnnotatedEClass entity) {\n\tlog.debug(\"Adding primary key join column\");\n\n\tfinal Element jcElement = getHbmContext().getCurrent()\n\t\t\t.addElement(\"key\");\n\thandleOndelete(jcElement, ((HbAnnotatedEClass) entity).getHbOnDelete());\n\n\tfor (PrimaryKeyJoinColumn pkJC : pkJCs) {\n\t\tfinal Element columnElement = jcElement.addElement(\"column\");\n\n\t\tif (pkJC.getColumnDefinition() != null) {\n\t\t\tlog\n\t\t\t\t\t.error(\"Unsupported column definition in primary key join column \"\n\t\t\t\t\t\t\t+ pkJC);\n\t\t\tthrow new MappingException(\n\t\t\t\t\t\"Unsupported column definition in primary key join column\",\n\t\t\t\t\tpkJC);\n\t\t}\n\n\t\tif (pkJC.getName() != null) {\n\t\t\tcolumnElement.addAttribute(\"name\", getHbmContext().trunc(\n\t\t\t\t\tpkJC.getName()));\n\t\t}\n\t\tif (pkJC.getReferencedColumnName() != null) {\n\t\t\tcolumnElement.addAttribute(\"property-ref\", pkJC\n\t\t\t\t\t.getReferencedColumnName());\n\t\t}\n\t}\n}\n\n/**\n * Creates a discriminator element and returns it, so the caller should add\n * it to the parent element\n */\nprivate Element createDiscriminatorElement(DiscriminatorColumn dColumn,\n\t\tboolean force) {\n\tElement dcElement = DocumentHelper.createElement(\"discriminator\");\n\tif (dColumn.getName() != null) {\n\t\tdcElement.addAttribute(\"column\", getHbmContext().trunc(\n\t\t\t\tdColumn.getName()));\n\t}\n\tdcElement.addAttribute(\"type\", hbDiscriminatorType(dColumn\n\t\t\t.getDiscriminatorType()));\n\n\tif (force) {\n\t\tdcElement.addAttribute(\"force\", \"true\");\n\t}\n\n\tif (dColumn.isSetLength() && log.isDebugEnabled()) {\n\t\tlog.debug(\"Ignoring length for discriminator column \" + dColumn);\n\t}\n\n\tif (dColumn.getColumnDefinition() != null) {\n\t\tlog.error(\"Unsupported column definition in discriminator column \"\n\t\t\t\t+ dColumn);\n\t\tthrow new MappingException(\n\t\t\t\t\"Unsupported column definition in discriminator column\",\n\t\t\t\tdColumn);\n\t}\n\treturn dcElement;\n}\n\n// note dc can be null\nprivate Element createDiscriminatorElement(DiscriminatorFormula formula,\n\t\tDiscriminatorColumn dc, boolean force) {\n\tElement dcElement = DocumentHelper.createElement(\"discriminator\");\n\tdcElement.addAttribute(\"formula\", formula.getValue());\n\n\tif (force) {\n\t\tdcElement.addAttribute(\"force\", \"true\");\n\t}\n\n\tif (dc != null && dc.getDiscriminatorType() != null) {\n\t\tdcElement.addAttribute(\"type\", hbDiscriminatorType(dc\n\t\t\t\t.getDiscriminatorType()));\n\t}\n\treturn dcElement;\n}\n\n/**\n * Add a synthetic version if the entity does not define one\n */\nprivate Element addVersionProperty(HbAnnotatedEClass aClass) {\n\tassert (getHbmContext().getCurrent().element(\"version\") == null);\n\n\tif (!getHbmContext().alwaysVersion()) {\n\t\treturn null;\n\t}\n\tfinal boolean skipVersionOnImmutable = !getHbmContext()\n\t\t\t.getPersistenceOptions()\n\t\t\t.isDiscriminatorVersionOnImmutableEClass();\n\tif (aClass.getImmutable() != null && skipVersionOnImmutable) {\n\t\treturn null;\n\t}\n\n\t// note specific accessor is required because version accessor is not\n\t// retrieved through\n\t// emf tuplizer\n\tfinal Element versionElement = getHbmContext().getCurrent().addElement(\n\t\t\t\"version\").addAttribute(\"name\",\n\t\t\tgetHbmContext().getVersionColumnName()).addAttribute(\"column\",\n\t\t\tgetHbmContext().getVersionColumnName());\n\tfinal Element meta = new Element(\"meta\");\n\tmeta.addAttribute(\"attribute\", HbMapperConstants.VERSION_META).addText(\n\t\t\t\"true\");\n\tversionElement.add(0, meta);\n\n\tversionElement.addAttribute(\"access\", getHbmContext()\n\t\t\t.getSyntheticVersionPropertyHandlerName());\n\n\treturn versionElement;\n}\n}", "path": "org.eclipse.emf.teneo.hibernate.mapper\\src\\org\\eclipse\\emf\\teneo\\hibernate\\mapper\\EntityMapper.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n * Returns the '<em><b>Hb Cascade Type</b></em>' literal with the specified name.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public static HbCascadeType getByName(String name)", "code": "{\n\tfor (int i = 0; i < VALUES_ARRAY.length; ++i) {\n\t\tHbCascadeType result = VALUES_ARRAY[i];\n\t\tif (result.getName().equals(name)) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n}", "path": "org.eclipse.emf.teneo.hibernate.mapper\\src\\org\\eclipse\\emf\\teneo\\hibernate\\hbannotation\\HbCascadeType.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "public void setMinutesLength(int newMinutesLength)", "code": "{\n\t\tint oldMinutesLength = minutesLength;\n\t\tminutesLength = newMinutesLength;\n\t\tif (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, EXTLibraryPackage.AUDIO_VISUAL_ITEM__MINUTES_LENGTH, oldMinutesLength, minutesLength));\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "@Override\npublic Object eGet(int featureID, boolean resolve, boolean coreType)", "code": "{\n\t\tswitch (featureID) {\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__TITLE:\n\t\t\t\treturn getTitle();\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__MINUTES_LENGTH:\n\t\t\t\treturn getMinutesLength();\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__DAMAGED:\n\t\t\t\treturn isDamaged();\n\t\t}\n\t\treturn super.eGet(featureID, resolve, coreType);\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "public void setTitle(String newTitle)", "code": "{\n\t\tString oldTitle = title;\n\t\ttitle = newTitle;\n\t\tif (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, EXTLibraryPackage.AUDIO_VISUAL_ITEM__TITLE, oldTitle, title));\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * Returns the '<em><b>Book Category</b></em>' literal with the specified literal value.\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "public static BookCategory get(String literal)", "code": "{\n\t\tfor (int i = 0; i < VALUES_ARRAY.length; ++i) {\n\t\t\tBookCategory result = VALUES_ARRAY[i];\n\t\t\tif (result.toString().equals(literal)) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\BookCategory.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "@Override\npublic void eSet(int featureID, Object newValue)", "code": "{\n\t\tswitch (featureID) {\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__TITLE:\n\t\t\t\tsetTitle((String)newValue);\n\t\t\t\treturn;\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__MINUTES_LENGTH:\n\t\t\t\tsetMinutesLength((Integer)newValue);\n\t\t\t\treturn;\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__DAMAGED:\n\t\t\t\tsetDamaged((Boolean)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n * @return Return the name used by hibernate for the given dicriminator type\n */\n", "func_signal": "private static String hbDiscriminatorType(DiscriminatorType dType)", "code": "{\n\treturn EntityMapper.DISCRIMINATOR_TYPE_NAMES[dType == null ? DiscriminatorType.STRING\n\t\t\t.getValue()\n\t\t\t: dType.getValue()];\n}", "path": "org.eclipse.emf.teneo.hibernate.mapper\\src\\org\\eclipse\\emf\\teneo\\hibernate\\mapper\\EntityMapper.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * Returns the '<em><b>Book Category</b></em>' literal with the specified integer value.\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "public static BookCategory get(int value)", "code": "{\n\t\tswitch (value) {\n\t\t\tcase MYSTERY: return MYSTERY_LITERAL;\n\t\t\tcase SCIENCE_FICTION: return SCIENCE_FICTION_LITERAL;\n\t\t\tcase BIOGRAPHY: return BIOGRAPHY_LITERAL;\n\t\t}\n\t\treturn null;\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\BookCategory.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n * Returns the '<em><b>Hb Cascade Type</b></em>' literal with the specified literal value.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public static HbCascadeType get(String literal)", "code": "{\n\tfor (int i = 0; i < VALUES_ARRAY.length; ++i) {\n\t\tHbCascadeType result = VALUES_ARRAY[i];\n\t\tif (result.toString().equals(literal)) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n}", "path": "org.eclipse.emf.teneo.hibernate.mapper\\src\\org\\eclipse\\emf\\teneo\\hibernate\\hbannotation\\HbCascadeType.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n * Only this class can construct instances.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "private HbCascadeType(int value, String name, String literal)", "code": "{\n\tthis.value = value;\n\tthis.name = name;\n\tthis.literal = literal;\n}", "path": "org.eclipse.emf.teneo.hibernate.mapper\\src\\org\\eclipse\\emf\\teneo\\hibernate\\hbannotation\\HbCascadeType.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * Only this class can construct instances.\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "private BookCategory(int value, String name, String literal)", "code": "{\n\t\tthis.value = value;\n\t\tthis.name = name;\n\t\tthis.literal = literal;\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\BookCategory.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\t\tif (eIsProxy()) return super.toString();\n\n\t\tStringBuffer result = new StringBuffer(super.toString());\n\t\tresult.append(\" (title: \"); //$NON-NLS-1$\n\t\tresult.append(title);\n\t\tresult.append(\", minutesLength: \"); //$NON-NLS-1$\n\t\tresult.append(minutesLength);\n\t\tresult.append(\", damaged: \"); //$NON-NLS-1$\n\t\tresult.append((eFlags & DAMAGED_EFLAG) != 0);\n\t\tresult.append(')');\n\t\treturn result.toString();\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "@Override\npublic boolean eIsSet(int featureID)", "code": "{\n\t\tswitch (featureID) {\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__TITLE:\n\t\t\t\treturn TITLE_EDEFAULT == null ? title != null : !TITLE_EDEFAULT.equals(title);\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__MINUTES_LENGTH:\n\t\t\t\treturn minutesLength != MINUTES_LENGTH_EDEFAULT;\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__DAMAGED:\n\t\t\t\treturn ((eFlags & DAMAGED_EFLAG) != 0) != DAMAGED_EDEFAULT;\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "public void setDamaged(boolean newDamaged)", "code": "{\n\t\tboolean oldDamaged = (eFlags & DAMAGED_EFLAG) != 0;\n\t\tif (newDamaged) eFlags |= DAMAGED_EFLAG; else eFlags &= ~DAMAGED_EFLAG;\n\t\tif (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, EXTLibraryPackage.AUDIO_VISUAL_ITEM__DAMAGED, oldDamaged, newDamaged));\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n * @param masterProperty\n * @param detailProperty\n */\n", "func_signal": "public ValuePropertyDetailSet(IValueProperty masterProperty,\n\t\tISetProperty detailProperty)", "code": "{\n\tthis.masterProperty = masterProperty;\n\tthis.detailProperty = detailProperty;\n}", "path": "org.eclipse.core.databinding\\src\\org\\eclipse\\core\\internal\\databinding\\property\\ValuePropertyDetailSet.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * Returns the '<em><b>Book Category</b></em>' literal with the specified name.\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "public static BookCategory getByName(String name)", "code": "{\n\t\tfor (int i = 0; i < VALUES_ARRAY.length; ++i) {\n\t\t\tBookCategory result = VALUES_ARRAY[i];\n\t\t\tif (result.getName().equals(name)) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\BookCategory.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n\t * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n\t * @generated\n\t */\n", "func_signal": "@Override\npublic void eUnset(int featureID)", "code": "{\n\t\tswitch (featureID) {\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__TITLE:\n\t\t\t\tsetTitle(TITLE_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__MINUTES_LENGTH:\n\t\t\t\tsetMinutesLength(MINUTES_LENGTH_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase EXTLibraryPackage.AUDIO_VISUAL_ITEM__DAMAGED:\n\t\t\t\tsetDamaged(DAMAGED_EDEFAULT);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}", "path": "org.eclipse.emf.examples.library2\\src\\org\\eclipse\\emf\\examples\\extlibrary\\impl\\AudioVisualItemImpl.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n * Returns the '<em><b>Hb Cascade Type</b></em>' literal with the specified integer value.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public static HbCascadeType get(int value)", "code": "{\n\tswitch (value) {\n\t\tcase ALL_VALUE: return ALL;\n\t\tcase PERSIST_VALUE: return PERSIST;\n\t\tcase MERGE_VALUE: return MERGE;\n\t\tcase REMOVE_VALUE: return REMOVE;\n\t\tcase REFRESH_VALUE: return REFRESH;\n\t\tcase DELETE_VALUE: return DELETE;\n\t\tcase SAVE_UPDATE_VALUE: return SAVE_UPDATE;\n\t\tcase REPLICATE_VALUE: return REPLICATE;\n\t\tcase DELETE_ORPHAN_VALUE: return DELETE_ORPHAN;\n\t\tcase LOCK_VALUE: return LOCK;\n\t\tcase EVICT_VALUE: return EVICT;\n\t}\n\treturn null;\n}", "path": "org.eclipse.emf.teneo.hibernate.mapper\\src\\org\\eclipse\\emf\\teneo\\hibernate\\hbannotation\\HbCascadeType.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/**\n * @return Return the name used by hibernate to denote the given inheritance\n *         type. If the argument is null, the default inheritance type\n *         (SINGLE_TABLE) is used instead.\n */\n", "func_signal": "private static String hbInheritanceName(InheritanceType inheritanceType)", "code": "{\n\treturn EntityMapper.INHERITANCE_STRATEGY_NAMES[inheritanceType != null ? inheritanceType\n\t\t\t.getValue()\n\t\t\t: InheritanceType.SINGLE_TABLE.getValue()];\n}", "path": "org.eclipse.emf.teneo.hibernate.mapper\\src\\org\\eclipse\\emf\\teneo\\hibernate\\mapper\\EntityMapper.java", "repo_name": "tomsontom/emf-databinding-example", "stars": 11, "license": "None", "language": "java", "size": 18836}
{"docstring": "/***\n * Overridable method for handling any messages not caught by the Activities\n * own post() method. The code pattern allows more generic messages to be\n * handled here (show battery warning dialog, etc).\n *\n * @param type Message type.\n * @param bundle Optional Bundle of extra information.\n */\n", "func_signal": "public void post(final Type type, final Bundle bundle)", "code": "{\n    switch (type) {\n    case SHOW_DIALOG:\n        mDialogBundle = bundle;\n        showDialog(Type.DIALOG_STATUS.ordinal());\n        break;\n\n    default:\n        // Do nothing.\n        break;\n    }\n}", "path": "src\\com\\zedray\\framework\\ui\\BaseActivity.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Reacts to any incoming message by passing it to the WorkerThread,\n * creating a new one if necessary.\n *\n * @param message\n *            Message from UI.\n */\n", "func_signal": "private void processMessage(final Message message)", "code": "{\n    synchronized (mWorkerThreadLock) {\n        if (mWorkerThread == null || mWorkerThread.isStopping()) {\n            mWorkerThread = new WorkerThread(mCache, mUiQueue, this);\n            mWorkerThread.add(message);\n            mWorkerThread.start();\n        } else {\n            mWorkerThread.add(message);\n        }\n    }\n}", "path": "src\\com\\zedray\\framework\\service\\MyService.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Set a value in the preferences file.\n *\n * @param context Android context.\n * @param key Preferences file parameter key.\n * @param value Preference value.\n */\n", "func_signal": "private static void setValue(final Context context,\n        final String key, final String value)", "code": "{\n    SharedPreferences.Editor editor =\n        context.getSharedPreferences(PREFS_FILE, 0).edit();\n    editor.putString(key, value);\n    if (!editor.commit()) {\n        throw new NullPointerException(\n                \"MainApplication.setValue() Failed to set key[\" + key\n                        + \"] with value[\" + value + \"]\");\n    }\n}", "path": "src\\com\\zedray\\framework\\application\\Cache.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * [Optional] Sets the UI buttons to point to the next Activity.\n *\n * @param buttonId Resource ID of the given Button\n * @param targetClass Activity to start on Button click.\n * @param context Application Context.\n */\n", "func_signal": "private void setButton(final int buttonId, final Class<?> targetClass,\n        final Context context)", "code": "{\n    Button button = (Button) findViewById(buttonId);\n    button.setOnClickListener(new OnClickListener() {\n        @Override\n        public void onClick(final View view) {\n            startActivity(new Intent(context, targetClass));\n        }\n    });\n    button.setText(targetClass.getSimpleName());\n}", "path": "src\\com\\zedray\\framework\\ui\\AllTasks.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Update all UI elements - called onCreate() and onResume().\n */\n", "func_signal": "private void updateAll()", "code": "{\n    updateTextViewX();\n    updateTextViewY();\n    updateTextViewQueue();\n}", "path": "src\\com\\zedray\\framework\\ui\\AllTasks.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Update all UI elements - called onCreate() and onResume().\n */\n", "func_signal": "private void updateAll()", "code": "{\n    updateTextView();\n    updateTextViewQueue();\n}", "path": "src\\com\\zedray\\framework\\ui\\LongTasks.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Override the post method to receive incoming messages from the Service.\n *\n * @param type Message type.\n * @param bundle Optional Bundle of extra information, NULL otherwise.\n */\n", "func_signal": "@Override\npublic final void post(final Type type, final Bundle bundle)", "code": "{\n    switch (type) {\n        case UPDATE_SHORT_TASK:\n            updateTextViewX();\n            break;\n\n        case UPDATE_LONG_TASK:\n            updateTextViewY();\n            break;\n\n        case UPDATE_QUEUE:\n            updateTextViewQueue();\n            break;\n\n        default:\n            /** Let the BaseActivity handle other message types. */\n            super.post(type, bundle);\n            break;\n    }\n}", "path": "src\\com\\zedray\\framework\\ui\\AllTasks.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Get a value from the preferences file.\n *\n * @param context Android context.\n * @param key Preferences file parameter key.\n * @param defaultValue Preference value.\n * @return Value as a String.\n */\n", "func_signal": "private static int getValue(final Context context, final String key,\n        final int defaultValue)", "code": "{\n    return context.getSharedPreferences(PREFS_FILE, 0).getInt(key,\n            defaultValue);\n}", "path": "src\\com\\zedray\\framework\\application\\Cache.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Get a value from the preferences file.\n *\n * @param context Android context.\n * @param key Preferences file parameter key.\n * @param defaultValue Preference value.\n * @return Value as a String.\n */\n", "func_signal": "private static String getValue(final Context context, final String key,\n        final String defaultValue)", "code": "{\n    return context.getSharedPreferences(PREFS_FILE, 0).getString(key,\n            defaultValue);\n}", "path": "src\\com\\zedray\\framework\\application\\Cache.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Create the BaseActivity and cache Application objects: ServiceQueue,\n * UiQueue and Cache.\n *\n * @param savedInstanceState Unused state object.\n */\n", "func_signal": "@Override\nprotected void onCreate(final Bundle savedInstanceState)", "code": "{\n    MyApplication application = (MyApplication) getApplication();\n    mServiceQueue = application.getServiceQueue();\n    mUiQueue = application.getUiQueue();\n    mCache = application.getCache();\n    super.onCreate(savedInstanceState);\n}", "path": "src\\com\\zedray\\framework\\ui\\BaseActivity.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Called by the BaseActivity to stop receiving messages.\n *\n * @param handler Handler of the unsubscribing Activity.\n */\n", "func_signal": "public final void unsubscribe(final Handler handler)", "code": "{\n    if (handler == null) {\n        throw new NullPointerException(\"ServiceQueue.unsubscribe() \"\n                + \"Handler cannot be NULL.\");\n    }\n    if (handler != mHandler) {\n        Log.w(MyApplication.LOG_TAG, \"ServiceQueue.unsubscribe() \"\n                + \"Activity is trying to unsubscribe with a different \"\n                + \"handler\");\n    } else {\n        mHandler = null;\n    }\n}", "path": "src\\com\\zedray\\framework\\application\\UiQueue.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Process an incoming message by getting the Type and optional bundle and\n * passing it to the overridable post() method.\n *\n * @param message Message to process.\n */\n", "func_signal": "private void processMessage(final Message message)", "code": "{\n    if (message.obj != null && message.obj.getClass() == Bundle.class) {\n        post(Type.getType(message.what), (Bundle) message.obj);\n    } else {\n        post(Type.getType(message.what), null);\n    }\n}", "path": "src\\com\\zedray\\framework\\ui\\BaseActivity.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Overridable method for handling any onCreateDialog() types not caught by\n * the Activities own onCreateDialog() method. The code pattern allows more\n * generic dialogs to be handled here (show battery warning dialog, etc).\n *\n * @param id\n *            Dialog Identifier.\n * @return Newly create Dialog.\n */\n", "func_signal": "@Override\nprotected final Dialog onCreateDialog(final int id)", "code": "{\n    switch (Type.getType(id)) {\n    case DIALOG_STATUS:\n        String text = \"Cached dialog bundle is NULL\";\n        if (mDialogBundle != null) {\n            text = mDialogBundle.getString(\"TEXT\");\n            mDialogBundle = null;\n        }\n\n        return new AlertDialog.Builder(this).setMessage(text).create();\n\n    default:\n        throw new InvalidParameterException(\"BaseActivity.\"\n                + \"onCreateDialog() Unknown dialog type[\"\n                + Type.getType(id) + \"]\");\n    }\n}", "path": "src\\com\\zedray\\framework\\ui\\BaseActivity.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * [Optional] Create the menu items.\n *\n * @param menu Add new menu items on to this object.\n * @return TRUE for the menu to be displayed.\n */\n", "func_signal": "public final boolean onCreateOptionsMenu(final Menu menu)", "code": "{\n    menu.add(0, MENU_KILL_PROCESS, 0, \"Kill Process\");\n    return true;\n}", "path": "src\\com\\zedray\\framework\\ui\\AllTasks.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Subscribe the Activity to the UiQueue.\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n    mUiQueue.subscribe(mHandler);\n    super.onResume();\n}", "path": "src\\com\\zedray\\framework\\ui\\BaseActivity.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Called by the BaseActivity to start receiving messages. Any queued\n * messages will be sent immediately.\n *\n * @param handler Handler of the subscribing Activity.\n */\n", "func_signal": "public final void subscribe(final Handler handler)", "code": "{\n    if (handler == null) {\n        throw new NullPointerException(\"ServiceQueue.subscribe() \"\n                + \"Handler cannot be NULL\");\n    }\n\n    mHandler = handler;\n    if (queue != null) {\n        synchronized (mQueueLock) {\n            Log.w(\"\", \"UiQueue.subscribe() calling sendMessage()\");                \n            mHandler.sendMessage(queue);\n            queue = null;\n        }\n    }\n}", "path": "src\\com\\zedray\\framework\\application\\UiQueue.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Get the Type from a given Integer value.\n *\n * @param input Integer.ordinal value of the UiEvent\n * @return Relevant Type or UNKNOWN if the Integer is not known.\n */\n", "func_signal": "public static Type getType(final int input)", "code": "{\n    if (input < 0 || input > UNKNOWN.ordinal()) {\n        return UNKNOWN;\n    } else {\n        return Type.values()[input];\n    }\n}", "path": "src\\com\\zedray\\framework\\utils\\Type.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/**\n * [Optional] Handle the selection of a menu item.\n *\n * @param item MenuItem that was selected.\n * @return TRUE to consume the selection event.\n */\n", "func_signal": "public final boolean onOptionsItemSelected(final MenuItem item)", "code": "{\n    switch (item.getItemId()) {\n    case MENU_KILL_PROCESS:\n        Process.killProcess(Process.myPid());\n        return true;\n    default:\n        // Do nothing.\n        break;\n    }\n    return false;\n}", "path": "src\\com\\zedray\\framework\\ui\\AllTasks.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Called by the service to post a message to the UI. Messages will be sent\n * immediately if an Activity is currently subscribed. Otherwise they will\n * be either (a) suppressed if they are flagged as update, (b) ignored if\n * they are of a lower priority than an existing pending message, or (c)\n * queued. Queued messages can be overridden by incoming messages with\n * higher priority.\n *\n * @param type Message type.\n * @param bundle Optional Bundle, or NULL otherwise.\n * @param update Set this to TRUE for messages that only update the UI so\n *            they can be suppressed while no activities are on screen. This\n *            is useful as it is assumed that activities will update\n *            themselves inside of their onResume() method.\n */\n", "func_signal": "public final void postToUi(final Type type, final Bundle bundle,\n        final boolean update)", "code": "{\n    if (type == null) {\n        throw new InvalidParameterException(\"ServiceQueue.postToUi() \"\n                + \"Type cannot be NULL\");\n    }\n\n    Message message = Message.obtain();\n    message.what = type.ordinal();\n    message.obj = bundle;\n\n    if (mHandler != null) {\n        /** Send now. **/\n        mHandler.sendMessage(message);\n\n    } else if (update) {\n        /** Suppress update. **/\n        Log.w(MyApplication.LOG_TAG, \"UiQueue.postToUi() Suppressing \"\n                + \"message[\" + message.what + \"], as update requests \"\n                + \"should not be queued\");\n\n    } else {\n        /** Send later. **/\n        synchronized (mQueueLock) {\n            /**\n             * [Optional] Only store the message with the highest priority.\n             */\n            if (queue == null || message.what < queue.what) {\n                queue = message;\n            } else {\n                Log.w(MyApplication.LOG_TAG, \"UiQueue.postToUi() \"\n                        + \"Ignoring message[\" + message.what + \"], as \"\n                        + \"highter priority message[\" + message.what\n                        + \"] is already pending\");\n            }\n        }\n    }\n}", "path": "src\\com\\zedray\\framework\\application\\UiQueue.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/***\n * Set a value in the preferences file.\n *\n * @param context Android context.\n * @param key Preferences file parameter key.\n * @param value Preference value.\n */\n", "func_signal": "private static void setValue(final Context context, final String key,\n        final int value)", "code": "{\n    SharedPreferences.Editor editor = context.getSharedPreferences(\n            PREFS_FILE, 0).edit();\n    editor.putInt(key, value);\n    if (!editor.commit()) {\n        throw new NullPointerException(\n                \"MainApplication.setValue() Failed to set key[\" + key\n                        + \"] with value[\" + value + \"]\");\n    }\n}", "path": "src\\com\\zedray\\framework\\application\\Cache.java", "repo_name": "zedray/Android-Framework-Prototype", "stars": 15, "license": "None", "language": "java", "size": 401}
{"docstring": "/**\n * Draw the string <code>text</code> to the printer's\n * device context at the specified position.\n */\n", "func_signal": "protected void textOut(String str, float x, float y,\n                       float[] positions)", "code": "{\n    /* Don't leave handling of control chars to GDI.\n     * If control chars are removed,  'positions' isn't valid.\n     * This means the caller needs to be aware of this and remove\n     * control chars up front if supplying positions. Since the\n     * caller is tightly integrated here, that's acceptable.\n     */\n    String text = removeControlChars(str);\n    assert (positions == null) || (text.length() == str.length());\n    if (text.length() == 0) {\n        return;\n    }\n    textOut(getPrintDC(), text, text.length(), false, x, y, positions);\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Get the advance of this text that GDI returns for the\n * font currently selected into the GDI device context for\n * this job. Note that the removed control characters are\n * interpreted as zero-width by JDK and we remove them for\n * rendering so also remove them for measurement so that\n * this measurement can be properly compared with JDK measurement.\n */\n", "func_signal": "protected int getGDIAdvance(String text)", "code": "{\n    /* Don't leave handling of control chars to GDI. */\n    text = removeControlChars(text);\n    if (text.length() == 0) {\n        return 0;\n    }\n    return getGDIAdvance(getPrintDC(), text);\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * The entry point of the test.\n * @param args the array of command line arguments.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    TestNoPackagesFile tester = new TestNoPackagesFile();\n    run(tester, ARGS, NO_TEST, NO_TEST);\n    if ((new java.io.File(BUG_ID + FS + \"packages.html\")).exists()) {\n        throw new Error(\"Test Fails: packages file should not be \" +\n            \"generated anymore.\");\n    } else {\n        System.out.println(\"Test passes:  packages.html not found.\");\n    }\n}", "path": "langtools\\test\\com\\sun\\javadoc\\testNoPackagesFile\\TestNoPackagesFile.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Examine the metrics captured by the\n * <code>PeekGraphics</code> instance and\n * if capable of directly converting this\n * print job to the printer's control language\n * or the native OS's graphics primitives, then\n * return a <code>PathGraphics</code> to perform\n * that conversion. If there is not an object\n * capable of the conversion then return\n * <code>null</code>. Returning <code>null</code>\n * causes the print job to be rasterized.\n */\n", "func_signal": "protected Graphics2D createPathGraphics(PeekGraphics peekGraphics,\n                                        PrinterJob printerJob,\n                                        Printable painter,\n                                        PageFormat pageFormat,\n                                        int pageIndex)", "code": "{\n\n    WPathGraphics pathGraphics;\n    PeekMetrics metrics = peekGraphics.getMetrics();\n\n    /* If the application has drawn anything that\n     * out PathGraphics class can not handle then\n     * return a null PathGraphics. If the property\n     * to force the raster pipeline has been set then\n     * we also want to avoid the path (pdl) pipeline\n     * and return null.\n     */\n   if (forcePDL == false && (forceRaster == true\n                              || metrics.hasNonSolidColors()\n                              || metrics.hasCompositing()\n                              )) {\n        pathGraphics = null;\n    } else {\n        BufferedImage bufferedImage = new BufferedImage(8, 8,\n                                        BufferedImage.TYPE_INT_RGB);\n        Graphics2D bufferedGraphics = bufferedImage.createGraphics();\n\n        boolean canRedraw = peekGraphics.getAWTDrawingOnly() == false;\n        pathGraphics =  new WPathGraphics(bufferedGraphics, printerJob,\n                                          painter, pageFormat, pageIndex,\n                                          canRedraw);\n    }\n\n    return pathGraphics;\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/* Printer Resolution. See also getXRes() and getYRes() */\n", "func_signal": "private final void setResolutionDPI(int xres, int yres)", "code": "{\n    if (attributes != null) {\n        PrinterResolution res =\n            new PrinterResolution(xres, yres, PrinterResolution.DPI);\n        attributes.add(res);\n    }\n    mAttXRes = xres;\n    mAttYRes = yres;\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n* Draw the 24 bit BGR image buffer represented by\n* <code>image</code> to the GDI device context\n* <code>printDC</code>. The image is drawn at\n* <code>(destX, destY)</code> in device coordinates.\n* The image is scaled into a square of size\n* specified by <code>destWidth</code> and\n* <code>destHeight</code>. The portion of the\n* source image copied into that square is specified\n* by <code>srcX</code>, <code>srcY</code>,\n* <code>srcWidth</code>, and srcHeight.\n*/\n", "func_signal": "protected void drawImage3ByteBGR(byte[] image,\n                                float destX, float destY,\n                                float destWidth, float destHeight,\n                                float srcX, float srcY,\n                                float srcWidth, float srcHeight)", "code": "{\n\n\n   drawDIBImage(getPrintDC(), image,\n                destX, destY,\n                destWidth, destHeight,\n                srcX, srcY,\n                srcWidth, srcHeight,\n                24, null);\n\n    }", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/* MediaTray / dmTray */\n", "func_signal": "private void setMediaTrayAttrib(Attribute attr)", "code": "{\n    if (attr == MediaTray.BOTTOM) {\n        mAttMediaTray = 2;    // DMBIN_LOWER\n    } else if (attr == MediaTray.ENVELOPE) {\n        mAttMediaTray = 5;    // DMBIN_ENVELOPE\n    } else if (attr == MediaTray.LARGE_CAPACITY) {\n        mAttMediaTray = 11;      // DMBIN_LARGECAPACITY\n    } else if (attr == MediaTray.MAIN) {\n        mAttMediaTray =1;               // DMBIN_UPPER\n    } else if (attr == MediaTray.MANUAL) {\n        mAttMediaTray = 4;              // DMBIN_MANUAL\n    } else if (attr == MediaTray.MIDDLE) {\n        mAttMediaTray = 3;              // DMBIN_MIDDLE\n    } else if (attr == MediaTray.SIDE) {\n        // no equivalent predefined value\n        mAttMediaTray = 7;              // DMBIN_AUTO\n    } else if (attr == MediaTray.TOP) {\n        mAttMediaTray =1;               // DMBIN_UPPER\n    } else {\n        if (attr instanceof Win32MediaTray) {\n            mAttMediaTray = ((Win32MediaTray)attr).winID;\n        } else {\n            mAttMediaTray = 1;  // default\n        }\n    }\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/* Constructors */\n", "func_signal": "public WPrinterJob()", "code": "{\n    Disposer.addRecord(disposerReferent,\n                       handleRecord = new HandleRecord());\n    initAttributeMembers();\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/* Orientation */\n", "func_signal": "private final int getOrientAttrib()", "code": "{\n    int orient = PageFormat.PORTRAIT;\n    OrientationRequested orientReq = (attributes == null) ? null :\n        (OrientationRequested)attributes.get(OrientationRequested.class);\n    if (orientReq != null) {\n        if (orientReq == OrientationRequested.REVERSE_LANDSCAPE) {\n            orient = PageFormat.REVERSE_LANDSCAPE;\n        } else if (orientReq == OrientationRequested.LANDSCAPE) {\n            orient = PageFormat.LANDSCAPE;\n        }\n    }\n\n    return orient;\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Display a dialog to the user allowing the modification of a\n * PageFormat instance.\n * The <code>page</code> argument is used to initialize controls\n * in the page setup dialog.\n * If the user cancels the dialog, then the method returns the\n * original <code>page</code> object unmodified.\n * If the user okays the dialog then the method returns a new\n * PageFormat object with the indicated changes.\n * In either case the original <code>page</code> object will\n * not be modified.\n * @param     page    the default PageFormat presented to the user\n *                    for modification\n * @return    the original <code>page</code> object if the dialog\n *            is cancelled, or a new PageFormat object containing\n *            the format indicated by the user if the dialog is\n *            acknowledged\n * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n * returns true.\n * @see java.awt.GraphicsEnvironment#isHeadless\n * @since     JDK1.2\n */\n", "func_signal": "public PageFormat pageDialog(PageFormat page) throws HeadlessException", "code": "{\n    if (GraphicsEnvironment.isHeadless()) {\n        throw new HeadlessException();\n    }\n\n    if (getPrintService() instanceof StreamPrintService) {\n        return super.pageDialog(page);\n    }\n\n    PageFormat pageClone = (PageFormat) page.clone();\n    boolean result = false;\n\n    /*\n     * Fix for 4507585: show the native modal dialog the same way printDialog() does so\n     * that it won't block event dispatching when called on EventDispatchThread.\n     */\n    WPageDialog dialog = new WPageDialog((Frame)null, this,\n                                 pageClone, null);\n    dialog.setRetVal(false);\n    dialog.setVisible(true);\n    result = dialog.getRetVal();\n    dialog.dispose();\n\n    // myService => current PrintService\n    if (result && (myService != null)) {\n        // It's possible that current printer is changed through\n        // the \"Printer...\" button so we query again from native.\n        String printerName = getNativePrintService();\n        if (!myService.getName().equals(printerName)) {\n            // native printer is different !\n            // we update the current PrintService\n            try {\n                setPrintService(Win32PrintServiceLookup.\n                                getWin32PrintLUS().\n                                getPrintServiceByName(printerName));\n            } catch (PrinterException e) {\n            }\n        }\n        // Update attributes, this will preserve the page settings.\n        //  - same code as in RasterPrinterJob.java\n        updatePageAttributes(myService, pageClone);\n\n        return pageClone;\n    } else {\n        return page;\n    }\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "// Field \"boolean visited\" is not implemented here since\n// it is used only a during debug info creation.\n", "func_signal": "public ObjectValue(int id)", "code": "{\n  this.id = id;\n  klass   = null;\n  fieldsValue = new ArrayList();\n}", "path": "hotspot\\agent\\src\\share\\classes\\sun\\jvm\\hotspot\\code\\ObjectValue.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/*\n * Create a Window's solid brush for the color specified\n * by <code>(red, green, blue)</code>. Once the brush\n * is created, select it in the current printing device\n * context and free the old brush.\n */\n", "func_signal": "protected void selectSolidBrush(Color color)", "code": "{\n\n    /* We only need to select a brush if the color has changed.\n    */\n    if (color.equals(mLastColor) == false) {\n        mLastColor = color;\n        float[] rgb = color.getRGBColorComponents(null);\n\n        selectSolidBrush(getPrintDC(),\n                         (int) (rgb[0] * MAX_WCOLOR),\n                         (int) (rgb[1] * MAX_WCOLOR),\n                         (int) (rgb[2] * MAX_WCOLOR));\n    }\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Set a GDI font capable of drawing the java Font\n * passed in.\n */\n", "func_signal": "protected boolean setFont(String family, float size, int style,\n                          int rotation, float awScale)", "code": "{\n\n    boolean didSetFont = true;\n\n    if (!family.equals(mLastFontFamily) ||\n        size     != mLastFontSize       ||\n        style    != mLastFontStyle      ||\n        rotation != mLastRotation       ||\n        awScale  != mLastAwScale) {\n\n        didSetFont = setFont(getPrintDC(),\n                             family,\n                             size,\n                             (style & Font.BOLD) != 0,\n                             (style & Font.ITALIC) != 0,\n                             rotation, awScale);\n        if (didSetFont) {\n            mLastFontFamily   = family;\n            mLastFontSize     = size;\n            mLastFontStyle    = style;\n            mLastRotation     = rotation;\n            mLastAwScale      = awScale;\n        }\n    }\n    return didSetFont;\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Returns how many times each page in the book\n * should be consecutively printed by PrinterJob.\n * If the underlying Window's driver will\n * generate the copies, rather than having RasterPrinterJob\n * iterate over the number of copies, this method always returns\n * 1.\n */\n", "func_signal": "protected int getNoncollatedCopies()", "code": "{\n    if (driverDoesMultipleCopies || super.isCollated()) {\n        return 1;\n    } else {\n        return getCopies();\n    }\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "//returns 1-based index for \"From\" page\n", "func_signal": "private final int getFromPageAttrib()", "code": "{\n    if (attributes != null) {\n        PageRanges pageRangesAttr =\n            (PageRanges)attributes.get(PageRanges.class);\n        if (pageRangesAttr != null) {\n            int[][] range = pageRangesAttr.getMembers();\n            return range[0][0];\n        }\n    }\n    return getMinPageAttrib();\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Constructs a new AttachPermission object.\n *\n * @param name Permission name. Must be either \"attachVirtualMachine\",\n *             or \"createAttachProvider\".\n *\n * @throws NullPointerException if name is <code>null</code>.\n * @throws IllegalArgumentException if the name is invalid.\n */\n", "func_signal": "public AttachPermission(String name)", "code": "{\n    super(name);\n    if (!name.equals(\"attachVirtualMachine\") && !name.equals(\"createAttachProvider\")) {\n        throw new IllegalArgumentException(\"name: \" + name);\n    }\n}", "path": "jdk\\src\\share\\classes\\com\\sun\\tools\\attach\\AttachPermission.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Set the number of copies to be printed.\n */\n", "func_signal": "public void setCopies(int copies)", "code": "{\n    super.setCopies(copies);\n    mAttCopies = copies;\n    setNativeCopies(copies);\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Forget any device state we may have cached.\n */\n", "func_signal": "private void invalidateCachedState()", "code": "{\n    mLastColor = null;\n    mLastTextColor = null;\n    mLastFontFamily = null;\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/* REMIND: if the callers of this method are operating in an\n * environment in which not all fonts are registered, the returned\n * font may be a algorithmically styled one, where in fact if loadfonts\n * were executed, a styled font may be located. Our present \"solution\"\n * to this is to register all fonts in a directory and assume that this\n * registered all the styles of a font, since they would all be in the\n * same location.\n */\n", "func_signal": "public Font2D getFont(int style)", "code": "{\n\n    switch (style) {\n\n    case Font.PLAIN:\n        return plain;\n\n    case Font.BOLD:\n        if (bold != null) {\n            return bold;\n        } else if (plain != null && plain.canDoStyle(style)) {\n                return plain;\n        } else {\n            return null;\n        }\n\n    case Font.ITALIC:\n        if (italic != null) {\n            return italic;\n        } else if (plain != null && plain.canDoStyle(style)) {\n                return plain;\n        } else {\n            return null;\n        }\n\n    case Font.BOLD|Font.ITALIC:\n        if (bolditalic != null) {\n            return bolditalic;\n        } else if (italic != null && italic.canDoStyle(style)) {\n                return italic;\n        } else if (bold != null && bold.canDoStyle(style)) {\n                return italic;\n        } else if (plain != null && plain.canDoStyle(style)) {\n                return plain;\n        } else {\n            return null;\n        }\n    default:\n        return null;\n    }\n}", "path": "jdk\\src\\share\\classes\\sun\\font\\FontFamily.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Set the GDI color for text drawing.\n */\n", "func_signal": "protected void setTextColor(Color color)", "code": "{\n\n    /* We only need to select a brush if the color has changed.\n    */\n    if (color.equals(mLastTextColor) == false) {\n        mLastTextColor = color;\n        float[] rgb = color.getRGBColorComponents(null);\n\n        setTextColor(getPrintDC(),\n                     (int) (rgb[0] * MAX_WCOLOR),\n                     (int) (rgb[1] * MAX_WCOLOR),\n                     (int) (rgb[2] * MAX_WCOLOR));\n    }\n}", "path": "jdk\\src\\windows\\classes\\sun\\awt\\windows\\WPrinterJob.java", "repo_name": "shchiu/openjdk", "stars": 9, "license": "gpl-2.0", "language": "java", "size": 54293}
{"docstring": "/**\n * Default Constructor\n */\n", "func_signal": "public HttpRequest()", "code": "{\n\tsuper();\n\tthis.header = new Hashtable<String, String>();\n}", "path": "src\\Pachube\\httpClient\\HttpRequest.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Updates a Trigger on pachube\n * @param id id of the triggerto update\n * @param t Trigger object of the new trigger\n * @return\n */\n", "func_signal": "public HttpResponse updateTrigger(int id,Trigger t)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/triggers/\"+id);\n\thr.setMethod(HttpMethod.PUT);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\thr.setBody(t.toString());\n\treturn client.send(hr);\n\t\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Constructor\n * @param url\n * @param method\n * @param header\n * @param body\n */\n", "func_signal": "public HttpRequest(URL url, HttpMethod method,\n\t\tHashtable<String, String> header, String body)", "code": "{\n\tsuper();\n\tthis.method = method;\n\tthis.header = header;\n\tBody = body;\n\tthis.url = url;\n}", "path": "src\\Pachube\\httpClient\\HttpRequest.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Creates a new feed from the feed provide. The feed provide should have no\n * ID, and after this method is called is usless, to make chanegs to the new\n * feed methods should be invoked on the return object.\n * \n * @param f\n *            Feed to create, This Feed Should have no ID field and atleast\n *            should have its title field filled in. This feed is not 'live'\n *            any attempt to change this object will be ignored.\n * @return Representation of the feed from pachube, this is a 'live' Feed\n *         and method can invoked which will change the state of the online\n *         feed.\n * @throws PachubeException\n *             If something goes wrong.\n */\n", "func_signal": "public Feed createFeed(Feed f) throws PachubeException", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds\");\n\thr.setMethod(HttpMethod.POST);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\thr.setBody(f.toXML());\n\tHttpResponse g = client.send(hr);\n\n\tif (g.getHeaderItem(\"Status\").equals(\"HTTP/1.1 201 Created\")) {\n\n\t\tString[] a = g.getHeaderItem(\"Location\").split(\"/\");\n\t\tFeed n = this.getFeed(Integer.parseInt(a[a.length - 1]));\n\t\tf = n;\n\t\treturn n;\n\t} else {\n\t\tthrow new PachubeException(g.getHeaderItem(\"Status\"));\n\t}\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Constructor\n * \n * @param APIKEY\n */\n", "func_signal": "public Pachube(String APIKEY)", "code": "{\n\tsuper();\n\tthis.API_KEY = APIKEY;\n\tthis.client = new HttpClient(\"www.pachube.com\");\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * This Method is not intended to be used by Users, instead get the Feed\n * object using getFeed() and update the Feed from there, All changes will\n * be made to the online Feed.\n * \n * @param feed\n * @param s\n * @return\n * @throws PachubeException\n */\n", "func_signal": "public boolean updateFeed(int feed, String s) throws PachubeException", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds/\"\n\t\t\t+ feed + \".xml\");\n\thr.setMethod(HttpMethod.PUT);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\thr.setBody(s);\n\tHttpResponse g = client.send(hr);\n\n\tif (g.getHeaderItem(\"Status\").equals(\"HTTP/1.1 200 OK\")) {\n\t\treturn true;\n\t} else {\n\t\tthrow new PachubeException(g.getHeaderItem(\"Status\"));\n\t}\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Constructor\n * @param a The URL that this Request is intended for\n */\n", "func_signal": "public HttpRequest(String a)", "code": "{\n\tsuper();\n\ttry {\n\t\tthis.url = new URL(a);\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t}\n\tthis.header = new Hashtable<String, String>();\n}", "path": "src\\Pachube\\httpClient\\HttpRequest.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * This Method is not intended to be used by Users, instead get the Feed\n * object using getFeed() and create Datastreams from there, All changes\n * will be made to the online Feed.\n * \n * @param feed\n * @param s\n * @return\n * @throws PachubeException\n */\n", "func_signal": "public boolean createDatastream(int feed, String s) throws PachubeException", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds/\"\n\t\t\t+ feed + \"/datastreams/\");\n\thr.setMethod(HttpMethod.POST);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\thr.setBody(s);\n\tHttpResponse g = client.send(hr);\n\n\tif (g.getHeaderItem(\"Status\").equals(\"HTTP/1.1 201 Created\")) {\n\t\treturn true;\n\t} else {\n\t\tthrow new PachubeException(g.getHeaderItem(\"Status\"));\n\t}\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * This Method is not intended to be used by Users, instead get the Feed\n * object using getFeed() and delete Datastreams from there, All changes\n * will be made to the online Feed.\n * \n * @param feed\n * @param datastream\n * @return\n */\n", "func_signal": "public HttpResponse deleteDatastream(int feed, int datastream)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds/\"\n\t\t\t+ feed + \"/datastreams/\" + datastream);\n\thr.setMethod(HttpMethod.DELETE);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\treturn client.send(hr);\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Delete a Feed specified by the feed id. If any Feed object exists that is\n * a representation of the item to be deleted, they will no longer work and\n * will throw errors if method are invoked on them.\n * \n * @param feed\n *            If of the feed to delete\n * @return HttpResponse\n */\n", "func_signal": "public HttpResponse deleteFeed(int feed)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds/\"\n\t\t\t+ feed);\n\thr.setMethod(HttpMethod.DELETE);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\treturn client.send(hr);\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Deletes a Trigger from pachube\n * @param id id of the trigger to delete\n * @return\n */\n", "func_signal": "public HttpResponse deleteTrigger(int id)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/triggers/\"+id);\n\thr.setMethod(HttpMethod.DELETE);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\treturn client.send(hr);\n\t\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Gets a Trigger from pachube specified by the parameter\n * \n * @param id id of the Trigger to get\n */\n", "func_signal": "public Trigger getTrigger(int id) throws PachubeException", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/triggers/\"+id+\".xml\");\n\thr.setMethod(HttpMethod.GET);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\tHttpResponse h = client.send(hr);\n\t\n\treturn PachubeFactory.toTrigger(h.getBody())[0];\n\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * This Method is not intended to be used by Users, instead get the Feed\n * object using getFeed() and update Datastreams from there, All changes\n * will be made to the online Feed.\n * \n * @param feed\n * @param datastream\n * @param s\n * @return\n */\n", "func_signal": "public HttpResponse updateDatastream(int feed, int datastream, String s)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds/\"\n\t\t\t+ feed + \"/datastreams/\" + datastream);\n\thr.setMethod(HttpMethod.PUT);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\thr.setBody(s);\n\tSystem.out.println(hr.getHttpCommand());\n\treturn client.send(hr);\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Gets a Feed by Feed ID\n * \n * @param feed\n *            Id of the Pachube feed to retrieve\n * @return Feed which corresponds to the id provided as the parameter\n * @throws PachubeException\n *             If something goes wrong.\n */\n", "func_signal": "public Feed getFeed(int feed) throws PachubeException", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds/\"\n\t\t\t+ feed + \".xml\");\n\thr.setMethod(HttpMethod.GET);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\tHttpResponse g = client.send(hr);\n\n\tif (g.getHeaderItem(\"Status\").equals(\"HTTP/1.1 200 OK\")) {\n\t\treturn PachubeFactory.toFeed(this, g.getBody());\n\t} else {\n\t\tthrow new PachubeException(g.getHeaderItem(\"Status\"));\n\t}\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * This Method is not intended to be used by Users, instead get the Feed\n * object using getFeed() and get Datastreams from there.\n * \n * @param feed\n * @param datastream\n * @return\n */\n", "func_signal": "public HttpResponse getDatastream(int feed, int datastream)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/feeds/\"\n\t\t\t+ feed + \"/datastreams/\" + datastream + \".xml\");\n\thr.setMethod(HttpMethod.GET);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\treturn client.send(hr);\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Generate the HTTP Command from the object\n * @return Http Command\n */\n", "func_signal": "public String getHttpCommand()", "code": "{\n\tString ret = \"\";\n\tif (this.method.equals(HttpMethod.GET)) {\n\t\tret = \"GET \" + this.url.getPath() + \" HTTP/1.1 \\r\\n\" + \"Host: \"\n\t\t\t\t+ this.url.getHost() + \"\\r\\n\";\n\n\t\tEnumeration<String> e = this.header.keys();\n\t\tString field;\n\t\twhile (e.hasMoreElements()) {\n\t\t\tfield = e.nextElement();\n\t\t\tret = ret + field + \": \" + this.header.get(field) + \" \\r\\n\";\n\n\t\t\tret = ret + \"\\r\\n\" + this.Body;\n\t\t}\n\n\t} else if (this.method.equals(HttpMethod.POST)) {\n\n\t\tret = \"POST \" + this.url.getPath() + \" HTTP/1.1 \\r\\n\" + \"Host: \"\n\t\t\t\t+ this.url.getHost() + \"\\r\\n\";\n\t\tEnumeration<String> e = this.header.keys();\n\t\tString field;\n\t\twhile (e.hasMoreElements()) {\n\t\t\tfield = e.nextElement();\n\t\t\tret = ret + field + \": \" + this.header.get(field) + \" \\r\\n\";\n\n\t\t\t\n\t\t}\n\n\t\tret = ret + \"Content-Length: \" + this.Body.length() + \"\\r\\n\\r\\n\"\n\t\t\t\t+ this.Body;\n\n\t} else if (this.method.equals(HttpMethod.PUT)) {\n\n\t\tret = \"POST \" + this.url.getPath() + \"?_method=put HTTP/1.1 \\r\\n\"\n\t\t\t\t+ \"Host: \" + this.url.getHost() + \"\\r\\n\";\n\n\t\tEnumeration<String> e = this.header.keys();\n\t\tString field;\n\t\twhile (e.hasMoreElements()) {\n\t\t\tfield = e.nextElement();\n\t\t\tret = ret + field + \": \" + this.header.get(field) + \" \\r\\n\";\n\n\t\t}\n\t\tret = ret + \"Content-Length: \" + this.Body.length() + \"\\r\\n\\r\\n\"\n\t\t\t\t+ this.Body;\n\n\t} else if (this.method.equals(HttpMethod.DELETE)) {\n\n\t\tret = \"DELETE \" + this.url.getPath() + \"?_method=put HTTP/1.1 \\r\\n\"\n\t\t\t\t+ \"Host: \" + this.url.getHost() + \"\\r\\n\";\n\t\tEnumeration<String> e = this.header.keys();\n\t\tString field;\n\t\twhile (e.hasMoreElements()) {\n\t\t\tfield = e.nextElement();\n\t\t\tret = ret + field + \": \" + this.header.get(field) + \" \\r\\n\";\n\t\t}\n\n\t\tret = ret + \"Content-Length: \" + this.Body.length() + \"\\r\\n\\r\\n\"\n\t\t\t\t+ this.Body;\n\t}\n\n\treturn ret;\n}", "path": "src\\Pachube\\httpClient\\HttpRequest.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * This Method is not intended to be used by Users, instead get the Feed\n * object using getFeed() and access Datastream archive from there.\n * \n * @param feed\n * @param datastream\n * @return\n */\n", "func_signal": "public String[] getDatastreamArchive(int feed, int datastream)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/feeds/\" + feed\n\t\t\t+ \"/datastreams/\" + datastream + \"/archive.csv\");\n\thr.setMethod(HttpMethod.GET);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\tString str = client.send(hr).getBody();\n\treturn str.split(\"\\n\");\n\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * This Method is not intended to be used by Users, instead get the Feed\n * object using getFeed() and access Datastream history from there.\n * \n * @param feed\n * @param datastream\n * @return\n */\n", "func_signal": "public Double[] getDatastreamHistory(int feed, int datastream)", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/feeds/\" + feed\n\t\t\t+ \"/datastreams/\" + datastream + \"/history.csv\");\n\thr.setMethod(HttpMethod.GET);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\tString str = client.send(hr).getBody();\n\tString[] arr = str.split(\",\");\n\tDouble[] arr1 = new Double[arr.length];\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tarr1[i] = Double.parseDouble(arr[1]);\n\t}\n\n\treturn arr1;\n\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Creates a Trigger on pachube from the object provided.\n * \n * @param t\n * @return\n * @throws PachubeException\n */\n", "func_signal": "public String createTrigger(Trigger t) throws PachubeException", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/triggers\");\n\thr.setMethod(HttpMethod.POST);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\thr.setBody(t.toString());\n\tHttpResponse h = client.send(hr);\n\tif (h.getHeaderItem(\"Status\").equals(\"HTTP/1.1 201 Created\")) {\n\t\treturn h.getHeaderItem(\"Location\");\n\t} else {\n\t\tthrow new PachubeException(h.getHeaderItem(\"Status\"));\n\t}\n\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Gets all the Triggers owned by the authenticating user\n * \n * @param id id of the Trigger to get\n */\n", "func_signal": "public Trigger[] getTriggers() throws PachubeException", "code": "{\n\tHttpRequest hr = new HttpRequest(\"http://www.pachube.com/api/triggers/\");\n\thr.setMethod(HttpMethod.GET);\n\thr.addHeaderItem(\"X-PachubeApiKey\", this.API_KEY);\n\tHttpResponse h = client.send(hr);\n\t\n\treturn PachubeFactory.toTrigger(h.getBody());\n\n}", "path": "src\\Pachube\\Pachube.java", "repo_name": "neufuture/OpenRTMS", "stars": 15, "license": "None", "language": "java", "size": 2663}
{"docstring": "/**\n * Prints out the bitmap as a text string\n * \n * @return the text string representing the bitmap\n */\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer buf = new StringBuffer(map.length + \" \"\n\t\t\t+ (map.length > 0 ? map[0].length + \" \" : \"0 \"));\n\tfor (int r = 0; r < map.length; r++) {\n\t\tfor (int c = 0; c < map[r].length; c++)\n\t\t\tbuf.append(new String(map[r][c] ? \"1 \" : \"0 \"));\n\t}\n\treturn buf.toString().trim();\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Adapts weights in the network given the specification of which values\n * that should appear at the output (target) when the input has been\n * presented. The procedure is known as error back propagation. This\n * implementation is \"online\" rather than \"batched\", that is, the change is\n * not based on the gradient of the global error, merely the local --\n * pattern-specific -- error.\n * \n * @param input - The input values.\n * @param desiredOutput - The desired output values.\n * @param learningRate - The learning rate, always between 0 and 1,\n * \t\t\t\ttypically a small value, e.g. 0.1\n * @return double An error value (the root-mean-squared-error).\n */\n", "func_signal": "public double train(double[] input, double[] desiredOutput)", "code": "{\n\n\t// present the input and calculate the outputs\n\tfeedForward(input);\n\n\t// allocate space for errors of individual nodes\n\tdouble[] errorOutput = new double[nodesOutput.length];\n\tdouble[] errorHidden = new double[nodesHidden.length];\n\n\t// calculate output layer errors and record root mean squared error\n\tdouble rmse = 0;\n\tfor (int j = 0; j < nodesOutput.length; j++) {\n\t\tdouble diff = desiredOutput[j] - nodesOutput[j];\n\t\terrorOutput[j] = diff * outputFunctionDerivative(nodesOutput[j]);\n\t\trmse += diff * diff;\n\t}\n\t\n\trmse = Math.sqrt(rmse / nodesOutput.length);\n\n\t// calculate hidden layer errors\n\tfor (int i = 0; i < nodesHidden.length; i++) {\n\t\tdouble sum = 0;\n\t\tfor (int j = 0; j < nodesOutput.length; j++)\n\t\t\tsum += hiddenWeight[i][j] * errorOutput[j];\n\t\t\n\t\terrorHidden[i] = outputFunctionDerivative(nodesHidden[i]) * sum;\n\t}\n\n\t// adjust hidden layer weights and apply momentum\n\tfor (int i = 0; i < nodesHidden.length; i++) {\n\t\tfor (int j = 0; j < nodesOutput.length; j++) {\n\t\t\tdouble weight = errorOutput[j] * nodesHidden[i] * learningRate;\n\t\t\thiddenWeight[i][j] += weight +\n\t\t\t\t\tMOMENTUM_FACTOR * hiddenWeightChange[i][j];\n\t\t\thiddenWeightChange[i][j] = weight;\n\t\t}\n\t}\n\t\n\t// apply output layer bias\n\tfor (int i = 0; i < nodesOutput.length; i++)\n\t\toutputBias[i] += errorOutput[i] * outputBias[i] * learningRate;\n\t\n\t// adjust input layer weights\n\tfor (int i = 0; i < input.length; i++) {\n\t\tfor (int j = 0; j < nodesHidden.length; j++) {\n\t\t\tdouble weight = errorHidden[j] * input[i] * learningRate;\n\t\t\tif (Config.ENABLE_MOMENTUM) {\t\t\t\t\n\t\t\t\tinputWeight[i][j] += weight +\n\t\t\t\t\t\tMOMENTUM_FACTOR * inputWeightChange[i][j];\n\t\t\t\tinputWeightChange[i][j] = weight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tinputWeight[i][j] += weight;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// apply hidden layer bias\n\tfor (int i = 0; i < nodesHidden.length; i++)\n\t\thiddenBias[i] += errorHidden[i] * hiddenBias[i] * learningRate;\n\n\treturn rmse;\n}", "path": "src\\machl\\MNN.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Get the bit in the specified position in the binary map\n * \n * @param row\n *            the row\n * @param col\n *            the column\n * @return the value\n */\n", "func_signal": "public boolean get(int row, int col)", "code": "{\n\tif (row >= 0 && row < map.length)\n\t\tif (col >= 0 && col < map[row].length)\n\t\t\treturn map[row][col];\n\treturn false;\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/** Construct the frame */\n", "func_signal": "public GenBitmapFrame()", "code": "{\n\tenableEvents(AWTEvent.WINDOW_EVENT_MASK);\n\ttry {\n\t\tjbInit();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\bitmap\\GenBitmapFrame.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Reset the bitmap\n */\n", "func_signal": "public void blank()", "code": "{\n\tfor (int r = 0; r < map.length; r++)\n\t\tfor (int c = 0; c < map[r].length; c++)\n\t\t\tmap[r][c] = false;\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Constructs a neural network structure and initialises weights to small\n * random values.\n * \n * @param nInput - Number of input nodes\n * @param nOutput - Number of output nodes\n * @param seed - Seed for the random number generator used for initial weights.\n */\n", "func_signal": "public MNN(int input, int output, int hidden, double eta)", "code": "{\n\n\tnodesHidden = new double[hidden]; // hidden layer nodes\n\tnodesOutput = new double[output]; // output layer nodes\n\n\tinputWeight = new double[input][hidden]; // input layer weight\n\thiddenWeight = new double[hidden][output]; // hidden layer weight\n\t\n\tsaveInputWeight = new double[input][hidden];  // save input layer weight\n\tsaveHiddenWeight = new double[hidden][output]; // save hidden layer weight\n\t\t\t\n\tinputWeightChange = new double[input][hidden]; // input layer weight momentum\n\thiddenWeightChange = new double[hidden][output]; // hidden layer weight momentum\n\n\thiddenBias = new double[hidden];\n\toutputBias = new double[output];\n\n\t// the main seed\n\tRandom rand = new Random(System.currentTimeMillis());\n\t\n\t// initialise weight for input nodes, and bias for hidden nodes\n\tfor (int j = 0; j < hidden; j++) {\n\t\tfor (int i = 0; i < input; i++)\n\t\t\tinputWeight[i][j] = rand.nextGaussian() * .1;\n\t\t// TODO: experiment with +1/-1\n\t\thiddenBias[j] = rand.nextGaussian() * .1;\n\t}\n\n\t// initialise weight for hidden nodes, and bias for output nodes\n\tfor (int j = 0; j < output; j++) {\n\t\tfor (int i = 0; i < hidden; i++)\n\t\t\thiddenWeight[i][j] = rand.nextGaussian() * .1;\n\t\toutputBias[j] = rand.nextGaussian() * .1;\n\t}\n\t\n\tthis.learningRate = eta;\n}", "path": "src\\machl\\MNN.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * <p>\n * Create a binary map from a string consisting of a row and column number,\n * and then the bits/values of the map ('0' or '1').\n * </p>\n * Format:\n * <p>\n * nRows nCols value_row_1_col_1 value_row_1_col_2 ...\n * value_row_nRows_col_nCols\n * </p>\n * \n * @param spec\n *            the string specification\n */\n", "func_signal": "public Bitmap(String spec)", "code": "{\n\tStringTokenizer tok = new StringTokenizer(spec, \"\\t ,\");\n\tint ntok = tok.countTokens();\n\tif (ntok < 2)\n\t\tthrow new RuntimeException(\n\t\t\t\t\"Bitmap is not correctly specified. Incorrect row and column number: \"\n\t\t\t\t\t\t+ spec);\n\t\n\tboolean[][] tempMap;\n\ttry {\n\t\tint nRows = Integer.parseInt(tok.nextToken());\n\t\tint nCols = Integer.parseInt(tok.nextToken());\n\t\tif (ntok - 2 < nRows * nCols)\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Bitmap is not correctly specified. Insufficient number of bits: \"\n\t\t\t\t\t\t\t+ spec);\n\t\tmap = new boolean[nRows][nCols];\n\t\ttempMap = new boolean[nRows][nCols];\n\n\t\tfor (int r = 0; r < map.length; r++)\n\t\t\tfor (int c = 0; c < map[r].length; c++)\n\t\t\t\ttempMap[r][c] = (Integer.parseInt(tok.nextToken()) == 1 ? true\n\t\t\t\t\t\t: false);\n\t} catch (NumberFormatException ex) {\n\t\tthrow new RuntimeException(\n\t\t\t\t\"Bitmap is not correctly specified. Bits not correctly formatted: \"\n\t\t\t\t\t\t+ spec);\n\t}\n\n\tif (Config.BITMAP_CENTERING) {\n\t\t// apply centering algorithm\n\t\tint top = 31, left = 31, right = 0, bottom = 0;\n\t\tint adjustX, adjustY;\n\n\t\tfor (int i = 0; i < 32; i++) {\n\t\t\tfor (int j = 0; j < 32; j++) {\n\t\t\t\tif (tempMap[i][j]) {\n\t\t\t\t\tif (i < top)\n\t\t\t\t\t\ttop = i;\n\t\t\t\t\telse if (i > bottom)\n\t\t\t\t\t\tbottom = i;\n\n\t\t\t\t\tif (j < left)\n\t\t\t\t\t\tleft = j;\n\t\t\t\t\telse if (j > right)\n\t\t\t\t\t\tright = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tadjustX = 15 - (left + right) / 2;\n\t\tadjustY = 15 - (top + bottom) / 2;\n\t\t//System.out.println(top + \"--\" + bottom + \"--\" + left + \"--\" + right);\n\t\t//System.out.println(adjustX + \"--\" + adjustY);\n\n\t\tfor (int r = top; r <= bottom; r++) {\n\t\t\tfor (int c = left; c <= right; c++) {\n\t\t\t\tif (tempMap[r][c])\n\t\t\t\t\tmap[r + adjustY][c + adjustX] = true;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t\tmap = tempMap;\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Computes the output values of the output nodes in the network given input\n * values.\n * \n * @param input - The input values.\n * @return double[] The vector of computed output values\n */\n", "func_signal": "public double[] feedForward(double[] input)", "code": "{\n\n\t// compute neuron values for hidden layer\n\tfor (int j = 0; j < nodesHidden.length; j++) {\n\t\tdouble sum = 0; // reset summed activation value\n\t\tfor (int i = 0; i < input.length; i++)\n\t\t\tsum += input[i] * inputWeight[i][j];\n\n\t\tnodesHidden[j] = outputFunction(sum + hiddenBias[j]);\n\t}\n\t\n\t// compute values for output layer\n\tfor (int j = 0; j < nodesOutput.length; j++) {\n\t\tdouble sum = 0;\n\t\tfor (int i = 0; i < nodesHidden.length; i++)\n\t\t\tsum += nodesHidden[i] * hiddenWeight[i][j];\n\t\t\n\t\tnodesOutput[j] = outputFunction(sum + outputBias[j]);\n\t}\n\n\treturn nodesOutput;\n}", "path": "src\\machl\\MNN.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Trains the neural network classifier on randomly picked samples from\n * specified training data.\n * \n * @param bitmaps\n *            the bitmaps which are used as training inputs including\n *            targets\n * @param nPresentations\n *            the number of samples to present\n * @param eta\n *            the learning rate\n */\n", "func_signal": "public void train(ClassifiedBitmap[] bitmaps, int nPresentations, double eta)", "code": "{\n\tfor (int p = 0; p < nPresentations; p++) {\n\t\tint sample = rand.nextInt(bitmaps.length);\n\t\tnn1.train(((Bitmap) bitmaps[sample]).toDoubleArray(),\n\t\t\t\ttargets[bitmaps[sample].getTarget()], eta);\n\t}\n}", "path": "src\\bitmap\\NNClassifier.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/** Component initialization */\n", "func_signal": "private void jbInit() throws Exception", "code": "{\n\trand = new Random(System.currentTimeMillis());\n\t// setIconImage(Toolkit.getDefaultToolkit().createImage(DigitsFrame.class.getResource(\"[Your\n\t// Icon]\")));\n\tcontentPane = (JPanel) this.getContentPane();\n\tcontentPane.setLayout(borderLayout1);\n\tthis.setSize(new Dimension(380, 400));\n\tthis.setTitle(\"Bitmap generation\");\n\tclearButton.setText(\"Clear\");\n\tclearButton.addActionListener(new java.awt.event.ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tclearButton_actionPerformed(e);\n\t\t}\n\t});\n\tinteractPanel.setLayout(flowLayout1);\n\tdrawPanel.setBackground(Color.white);\n\tdrawPanel.addMouseListener(new java.awt.event.MouseAdapter() {\n\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t\tdrawPanel_mouseClicked(e);\n\t\t}\n\t});\n\tdrawPanel\n\t\t\t.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {\n\t\t\t\tpublic void mouseDragged(MouseEvent e) {\n\t\t\t\t\tdrawPanel_mouseDragged(e);\n\t\t\t\t}\n\t\t\t});\n\tclassTextField.setBackground(Color.lightGray);\n\tclassTextField.setEnabled(true);\n\tclassTextField.setFont(new java.awt.Font(\"Dialog\", 1, 16));\n\tclassTextField.setBorder(null);\n\tclassTextField.setPreferredSize(new Dimension(40, 17));\n\tclassTextField.setDisabledTextColor(Color.lightGray);\n\tclassTextField.setEditable(false);\n\tclassTextField.setHorizontalAlignment(SwingConstants.CENTER);\n\tclassTextField.setText(\"?\");\n\tinteractPanel.setBackground(Color.lightGray);\n\tthicknessSlider.setPaintLabels(true);\n\tthicknessSlider.setMinimum(1);\n\tthicknessSlider.setValue(4);\n\tthicknessSlider.setPaintTicks(true);\n\tthicknessSlider.setMaximum(10);\n\tthicknessSlider.setSnapToTicks(true);\n\tthicknessSlider.setPreferredSize(new Dimension(100, 32));\n\tthicknessSlider.setToolTipText(\"Brush thickness\");\n\tthicknessSlider.setBackground(Color.lightGray);\n\tthicknessLabel.setHorizontalAlignment(SwingConstants.RIGHT);\n\tthicknessLabel.setText(\"Thickness\");\n\tjButton1.setText(\"Save letter\");\n\tjButton1.addActionListener(new java.awt.event.ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tjButton1_actionPerformed(e);\n\t\t}\n\t});\n\tcontentPane.add(interactPanel, BorderLayout.SOUTH);\n\tinteractPanel.add(thicknessLabel, null);\n\tinteractPanel.add(thicknessSlider, null);\n\tinteractPanel.add(clearButton, null);\n\tcontentPane.add(drawPanel, BorderLayout.CENTER);\n\tcontentPane.add(jPanelInstruct, BorderLayout.NORTH);\n\tjPanelInstruct.add(classTextField, null);\n\tjPanelInstruct.add(jButton1, null);\n\tletter = rand.nextInt(LetterClassifier.getClassCount());\n\tclassTextField.setText(lc.getLabel(letter));\n}", "path": "src\\bitmap\\GenBitmapFrame.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Determine the number of columns that are used by the bitmap\n * \n * @return the number of columns\n */\n", "func_signal": "public int getCols()", "code": "{\n\tif (map.length <= 0)\n\t\treturn 0;\n\telse\n\t\treturn map[0].length;\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Convert the map to a one-dimensional array of booleans\n * \n * @return the boolean array representing the bitmap\n */\n", "func_signal": "public boolean[] toBooleanArray()", "code": "{\n\tif (map.length <= 0)\n\t\treturn null;\n\tboolean[] arr = new boolean[map.length * map[0].length];\n\tfor (int r = 0; r < map.length; r++)\n\t\tfor (int c = 0; c < map[r].length; c++)\n\t\t\tarr[r * map[0].length + c] = map[r][c];\n\treturn arr;\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Classifies the bitmap\n * \n * @param map\n *            the bitmap to classify\n * @return the probabilities of all the classes (should add up to 1).\n */\n", "func_signal": "public double[] test(Bitmap map)", "code": "{\n\tdouble[] out = nn1.feedforward(map.toDoubleArray());\n\treturn out;\n}", "path": "src\\bitmap\\NNClassifier.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Convert the map to a one-dimensional array of doubles\n * \n * @return the double array representing the bitmap\n */\n", "func_signal": "public double[] toDoubleArray()", "code": "{\n\tboolean[] barr = toBooleanArray();\n\tdouble[] darr = new double[barr.length];\n\tfor (int i = 0; i < barr.length; i++)\n\t\tdarr[i] = (barr[i] ? 1.0 : 0.0);\n\treturn darr;\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Backup weight values\n */\n", "func_signal": "public void saveWeight()", "code": "{\n\tsaveHiddenWeight = Arrays.copyOf(inputWeight, inputWeight.length);\n\tsaveHiddenWeight = Arrays.copyOf(hiddenWeight, hiddenWeight.length);\n}", "path": "src\\machl\\MNN.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Construct a neural network classifier for bitmaps of specified size.\n * \n * @param nRows\n *            number of rows in the bitmap\n * @param nCols\n *            number of columns in the bitmap\n */\n", "func_signal": "public NNClassifier(int nRows, int nCols)", "code": "{\n\trand = new Random(System.currentTimeMillis());\n\tnn1 = new NN1(nRows * nCols, getClassCount(), rand.nextInt());\n\ttargets = new double[getClassCount()][getClassCount()];\n\tfor (int c = 0; c < getClassCount(); c++)\n\t\ttargets[c][c] = 1;\n}", "path": "src\\bitmap\\NNClassifier.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Restore weight values\n */\n", "func_signal": "public void restoreWeight()", "code": "{\n\tinputWeight = Arrays.copyOf(saveInputWeight, saveInputWeight.length);\n\thiddenWeight = Arrays.copyOf(saveHiddenWeight, saveHiddenWeight.length);\t\n}", "path": "src\\machl\\MNN.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/** Help | About action performed */\n/** Overridden so we can exit when window is closed */\n", "func_signal": "protected void processWindowEvent(WindowEvent e)", "code": "{\n\tsuper.processWindowEvent(e);\n\tif (e.getID() == WindowEvent.WINDOW_CLOSING) {\n\t\tSystem.exit(0);\n\t}\n}", "path": "src\\bitmap\\GenBitmapFrame.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\t\n\tif (args.length != 2) {\n\t\tSystem.err.println(\"Usage: CompetitionClassify <classifier-file> \" +\n\t\t\t\t\"<test-file>\");\n\t\tSystem.exit(1);\n\t}\n\t\n\t// create a new classifier and load bitmaps for file\n\tMNNClassifier mc = (MNNClassifier)Classifier.load(args[0]);\n\tClassifiedBitmap[] bitmaps = LetterClassifier.loadLetters(args[1]);\n\t\n\tfor (ClassifiedBitmap bitmap : bitmaps) {\n\t\t// get the guessed character and print it\n\t\tint estimate = mc.index(bitmap);\n\t\tSystem.out.println(estimate);\n\t}\n\t\n\tnew EvalClassifier(mc, bitmaps).run();\n}", "path": "src\\CompetitionClassify.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Set the bit in the specified position in the binary map to a specified\n * value\n * \n * @param row\n *            the row\n * @param col\n *            the column\n * @param value\n *            the value\n */\n", "func_signal": "public void set(int row, int col, boolean value)", "code": "{\n\tif (row >= 0 && row < map.length)\n\t\tif (col >= 0 && col < map[row].length)\n\t\t\tmap[row][col] = value;\n}", "path": "src\\bitmap\\Bitmap.java", "repo_name": "zanglang/handwriting", "stars": 8, "license": "None", "language": "java", "size": 475}
{"docstring": "/**\n * Assigns the given {@link AuthScheme authentication scheme}.\n * \n * @param authScheme the {@link AuthScheme authentication scheme}\n */\n", "func_signal": "public void setAuthScheme(final AuthScheme authScheme)", "code": "{\n    if (authScheme == null) {\n        invalidate();\n        return;\n    }\n    if (this.preemptive && !(this.authScheme.getClass().isInstance(authScheme))) {\n        this.preemptive = false;\n        this.authAttempted = false;\n    }\n    this.authScheme = authScheme;\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\auth\\AuthState.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Read up to <tt>\"\\n\"</tt> from an (unchunked) input stream.\n * If the stream ends before the line terminator is found,\n * the last part of the string will still be returned.\n * If no input data available, <code>null</code> is returned\n *\n * @param inputStream the stream to read from\n *\n * @throws IOException if an I/O problem occurs\n * @return a line from the stream\n * \n * @deprecated use #readLine(InputStream, String)\n */\n", "func_signal": "public static String readLine(InputStream inputStream) throws IOException", "code": "{\n    LOG.trace(\"enter HttpParser.readLine(InputStream)\");\n    return readLine(inputStream, \"US-ASCII\");\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\HttpParser.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Return the native Logger instance we are using.\n */\n", "func_signal": "public Logger getLogger()", "code": "{\n    if (logger == null) {\n        logger = Logger.getLogger(name);\n    }\n    return (logger);\n}", "path": "java\\src\\org\\apache\\commons\\logging\\impl\\Jdk14Logger.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Print this HttpException and its stack trace to the specified print stream.\n * \n * @param s the <tt>PrintStream</tt> to which the exception and its stack trace\n * should be written\n * \n * @since 3.0\n */\n", "func_signal": "public void printStackTrace(PrintStream s)", "code": "{\n    try {\n        // JDK 1.4 has a nice printStackTrace method that prints the cause's stack\n        // trace too and prunes out duplicate stack frames.  Call it if possible,\n        // which is determined by checking whether JDK 1.4's getStackTrace method is present \n        Class[] paramsClasses = new Class[] {  };\n        this.getClass().getMethod(\"getStackTrace\", paramsClasses);\n        super.printStackTrace(s);\n    } catch (Exception ex) {\n        // If that didn't work, print it out ourselves\n        // First print this exception's stack trace.\n        super.printStackTrace(s);\n        if (cause != null) {\n            // Print out the exception that caused this one.\n            // This will recurse if the cause is another HttpException.\n            s.print(\"Caused by: \");\n            cause.printStackTrace(s);\n        }\n    }\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\HttpException.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Begin appending a new object. All keys and values until the balancing\n * <code>endObject</code> will be appended to this object. The\n * <code>endObject</code> method must be called to mark the object's end.\n * @return this\n * @throws JSONException If the nesting is too deep, or if the object is\n * started in the wrong place (for example as a key or after the end of the\n * outermost array or object).\n */\n", "func_signal": "public JSONWriter object() throws JSONException", "code": "{\n    if (this.mode == 'i') {\n        this.mode = 'o';\n    }\n    if (this.mode == 'o' || this.mode == 'a') {\n        this.append(\"{\");\n        this.push('k');\n        this.comma = false;\n        return this;\n    }\n    throw new JSONException(\"Misplaced object.\");\n\n}\n\n\n/**\n * Pop an array or object scope.\n * @param c The scope to close.\n * @throws JSONException If nesting is wrong.\n */\nprivate void pop(char c) throws JSONException {\n    if (this.top <= 0 || this.stack[this.top - 1] != c) {\n        throw new JSONException(\"Nesting error.\");\n    }\n    this.top -= 1;\n    this.mode = this.top == 0 ? 'd' : this.stack[this.top - 1];\n}\n\n/**\n * Push an array or object scope.\n * @param c The scope to open.\n * @throws JSONException If nesting is too deep.\n */\nprivate void push(char c) throws JSONException {\n    if (this.top >= maxdepth) {\n        throw new JSONException(\"Nesting too deep.\");\n    }\n    this.stack[this.top] = c;\n    this.mode = c;\n    this.top += 1;\n}\n\n\n/**\n * Append either the value <code>true</code> or the value\n * <code>false</code>.\n * @param b A boolean.\n * @return this\n * @throws JSONException\n */\npublic JSONWriter value(boolean b) throws JSONException {\n    return this.append(b ? \"true\" : \"false\");\n}\n\n/**\n * Append a double value.\n * @param d A double.\n * @return this\n * @throws JSONException If the number is not finite.\n */\npublic JSONWriter value(double d) throws JSONException {\n    return this.value(new Double(d));\n}\n\n/**\n * Append a long value.\n * @param l A long.\n * @return this\n * @throws JSONException\n */\npublic JSONWriter value(long l) throws JSONException {\n    return this.append(Long.toString(l));\n}\n\n\n/**\n * Append an object value.\n * @param o The object to append. It can be null, or a Boolean, Number,\n *   String, JSONObject, or JSONArray, or an object with a toJSONString()\n *   method.\n * @return this\n * @throws JSONException If the value is out of sequence.\n */\npublic JSONWriter value(Object o) throws JSONException {\n    return this.append(JSONObject.valueToString(o));\n}\n}", "path": "java\\src\\org\\json\\JSONWriter.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Read up to <tt>\"\\n\"</tt> from an (unchunked) input stream.\n * If the stream ends before the line terminator is found,\n * the last part of the string will still be returned.\n * If no input data available, <code>null</code> is returned.\n *\n * @param inputStream the stream to read from\n * @param charset charset of HTTP protocol elements\n *\n * @throws IOException if an I/O problem occurs\n * @return a line from the stream\n * \n * @since 3.0\n */\n", "func_signal": "public static String readLine(InputStream inputStream, String charset) throws IOException", "code": "{\n    LOG.trace(\"enter HttpParser.readLine(InputStream, String)\");\n    byte[] rawdata = readRawLine(inputStream);\n    if (rawdata == null) {\n        return null;\n    }\n    // strip CR and LF from the end\n    int len = rawdata.length;\n    int offset = 0;\n    if (len > 0) {\n        if (rawdata[len - 1] == '\\n') {\n            offset++;\n            if (len > 1) {\n                if (rawdata[len - 2] == '\\r') {\n                    offset++;\n                }\n            }\n        }\n    }\n    final String result =\n        EncodingUtil.getString(rawdata, 0, len - offset, charset);\n    if (Wire.HEADER_WIRE.enabled()) {\n        String logoutput = result;\n        if (offset == 2)\n            logoutput = result + \"\\r\\n\";\n        else if (offset == 1)\n            logoutput = result + \"\\n\";\n        Wire.HEADER_WIRE.input(logoutput);\n    }\n    return result;\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\HttpParser.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Begin appending a new array. All values until the balancing\n * <code>endArray</code> will be appended to this array. The\n * <code>endArray</code> method must be called to mark the array's end.\n * @return this\n * @throws JSONException If the nesting is too deep, or if the object is\n * started in the wrong place (for example as a key or after the end of the\n * outermost array or object).\n */\n", "func_signal": "public JSONWriter array() throws JSONException", "code": "{\n    if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {\n        this.push('a');\n        this.append(\"[\");\n        this.comma = false;\n        return this;\n    }\n    throw new JSONException(\"Misplaced array.\");\n}", "path": "java\\src\\org\\json\\JSONWriter.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Print this HttpException and its stack trace to the specified print writer.\n * \n * @param s the <tt>PrintWriter</tt> to which the exception and its stack trace\n * should be written\n * \n * @since 3.0\n */\n", "func_signal": "public void printStackTrace(PrintWriter s)", "code": "{\n    try {\n        // JDK 1.4 has a nice printStackTrace method that prints the cause's stack\n        // trace too and prunes out duplicate stack frames.  Call it if possible,\n        // which is determined by checking whether JDK 1.4's getStackTrace method is present \n        Class[] paramsClasses = new Class[] {  };\n        this.getClass().getMethod(\"getStackTrace\", paramsClasses);\n        super.printStackTrace(s);\n    } catch (Exception ex) {\n        // If that didn't work, print it out ourselves\n        // First print this exception's stack trace.\n        super.printStackTrace(s);\n        if (cause != null) {\n            // Print out the exception that caused this one.\n            // This will recurse if the cause is another HttpException.\n            s.print(\"Caused by: \");\n            cause.printStackTrace(s);\n        }\n    }\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\HttpException.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Return byte array from an (unchunked) input stream.\n * Stop reading when <tt>\"\\n\"</tt> terminator encountered \n * If the stream ends before the line terminator is found,\n * the last part of the string will still be returned. \n * If no input data available, <code>null</code> is returned.\n *\n * @param inputStream the stream to read from\n *\n * @throws IOException if an I/O problem occurs\n * @return a byte array from the stream\n */\n", "func_signal": "public static byte[] readRawLine(InputStream inputStream) throws IOException", "code": "{\n    LOG.trace(\"enter HttpParser.readRawLine()\");\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n    int ch;\n    while ((ch = inputStream.read()) >= 0) {\n        buf.write(ch);\n        if (ch == '\\n') { // be tolerant (RFC-2616 Section 19.3)\n            break;\n        }\n    }\n    if (buf.size() == 0) {\n        return null;\n    }\n    return buf.toByteArray();\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\HttpParser.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Append a value.\n * @param s A string value.\n * @return this\n * @throws JSONException If the value is out of sequence.\n */\n", "func_signal": "private JSONWriter append(String s) throws JSONException", "code": "{\n    if (s == null) {\n        throw new JSONException(\"Null pointer\");\n    }\n    if (this.mode == 'o' || this.mode == 'a') {\n        try {\n            if (this.comma && this.mode == 'a') {\n                this.writer.write(',');\n            }\n            this.writer.write(s);\n        } catch (IOException e) {\n            throw new JSONException(e);\n        }\n        if (this.mode == 'o') {\n            this.mode = 'k';\n        }\n        this.comma = true;\n        return this;\n    }\n    throw new JSONException(\"Value out of sequence.\");\n}", "path": "java\\src\\org\\json\\JSONWriter.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Parses headers from the given stream.  Headers with the same name are not\n * combined.\n * \n * @param is the stream to read headers from\n * \n * @return an array of headers in the order in which they were parsed\n * \n * @throws IOException if an IO error occurs while reading from the stream\n * @throws HttpException if there is an error parsing a header value\n * \n * @deprecated use #parseHeaders(InputStream, String)\n */\n", "func_signal": "public static Header[] parseHeaders(InputStream is) throws IOException, HttpException", "code": "{\n    LOG.trace(\"enter HeaderParser.parseHeaders(InputStream, String)\");\n    return parseHeaders(is, \"US-ASCII\");\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\HttpParser.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Make a fresh JSONWriter. It can be used to build one JSON text.\n */\n", "func_signal": "public JSONWriter(Writer w)", "code": "{\n    this.comma = false;\n    this.mode = 'i';\n    this.stack = new char[maxdepth];\n    this.top = 0;\n    this.writer = w;\n}", "path": "java\\src\\org\\json\\JSONWriter.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * End something.\n * @param m Mode\n * @param c Closing character\n * @return this\n * @throws JSONException If unbalanced.\n */\n", "func_signal": "private JSONWriter end(char m, char c) throws JSONException", "code": "{\n    if (this.mode != m) {\n        throw new JSONException(m == 'o' ? \"Misplaced endObject.\" :\n            \"Misplaced endArray.\");\n    }\n    this.pop(m);\n    try {\n        this.writer.write(c);\n    } catch (IOException e) {\n        throw new JSONException(e);\n    }\n    this.comma = true;\n    return this;\n}", "path": "java\\src\\org\\json\\JSONWriter.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Preemptively assigns Basic authentication scheme.\n */\n", "func_signal": "public void setPreemptive()", "code": "{\n    if (!this.preemptive) {\n        if (this.authScheme != null) {\n            throw new IllegalStateException(\"Authentication state already initialized\");\n        }\n        this.authScheme = AuthPolicy.getAuthScheme(PREEMPTIVE_AUTH_SCHEME);\n        this.preemptive = true;\n    }\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\auth\\AuthState.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Append a key. The key will be associated with the next value. In an\n * object, every value must be preceded by a key.\n * @param s A key string.\n * @return this\n * @throws JSONException If the key is out of place. For example, keys\n *  do not belong in arrays or if the key is null.\n */\n", "func_signal": "public JSONWriter key(String s) throws JSONException", "code": "{\n    if (s == null) {\n        throw new JSONException(\"Null key.\");\n    }\n    if (this.mode == 'k') {\n        try {\n            if (this.comma) {\n                this.writer.write(',');\n            }\n            this.writer.write(JSONObject.quote(s));\n            this.writer.write(':');\n            this.comma = false;\n            this.mode = 'o';\n            return this;\n        } catch (IOException e) {\n            throw new JSONException(e);\n        }\n    }\n    throw new JSONException(\"Misplaced key.\");\n}", "path": "java\\src\\org\\json\\JSONWriter.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Creates a new HttpException with the specified detail message and cause.\n * \n * @param message the exception detail message\n * @param cause the <tt>Throwable</tt> that caused this exception, or <tt>null</tt>\n * if the cause is unavailable, unknown, or not a <tt>Throwable</tt>\n * \n * @since 3.0\n */\n", "func_signal": "public HttpException(String message, Throwable cause)", "code": "{\n    super(message);\n    this.cause = cause;\n    \n    // If we're running on JDK 1.4 or later, tell Throwable what the cause was\n    try {\n        Class[] paramsClasses = new Class[] { Throwable.class };\n        Method initCause = Throwable.class.getMethod(\"initCause\", paramsClasses);\n        initCause.invoke(this, new Object[] { cause });\n    } catch (Exception e) {\n        // The setCause method must not be available\n    }\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\HttpException.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "// --------------------------------------------------------- Public Methods\n", "func_signal": "private void log( Level level, String msg, Throwable ex )", "code": "{\n\n    Logger logger = getLogger();\n    if (logger.isLoggable(level)) {\n        // Hack (?) to get the stack trace.\n        Throwable dummyException=new Throwable();\n        StackTraceElement locations[]=dummyException.getStackTrace();\n        // Caller will be the third element\n        String cname=\"unknown\";\n        String method=\"unknown\";\n        if( locations!=null && locations.length >2 ) {\n            StackTraceElement caller=locations[2];\n            cname=caller.getClassName();\n            method=caller.getMethodName();\n        }\n        if( ex==null ) {\n            logger.logp( level, cname, method, msg );\n        } else {\n            logger.logp( level, cname, method, msg, ex );\n        }\n    }\n\n}", "path": "java\\src\\org\\apache\\commons\\logging\\impl\\Jdk14Logger.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Construct a named instance of this Logger.\n *\n * @param name Name of the logger to be constructed\n */\n", "func_signal": "public Jdk14Logger(String name)", "code": "{\n\n    this.name = name;\n    logger = getLogger();\n\n}", "path": "java\\src\\org\\apache\\commons\\logging\\impl\\Jdk14Logger.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Returns the authentication realm.\n * \n * @return the name of the authentication realm\n */\n", "func_signal": "public String getRealm()", "code": "{\n    if (this.authScheme != null) {\n        return this.authScheme.getRealm();\n    } else {\n        return null;\n    }\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\auth\\AuthState.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/**\n * Invalidates the authentication state by resetting its parameters.\n */\n", "func_signal": "public void invalidate()", "code": "{\n    this.authScheme = null;\n    this.authRequested = false;\n    this.authAttempted = false;\n    this.preemptive = false;\n}", "path": "java\\src\\org\\apache\\commons\\httpclient\\auth\\AuthState.java", "repo_name": "mtodd/halcyon-clients", "stars": 11, "license": "None", "language": "java", "size": 826}
{"docstring": "/* (non-Javadoc)\n * @see com.vodafone.android.navigation.activity.AbstractActivity#onResume()\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tif(type == PlacesActivity.TYPE_SAVED_PLACES){\n\t\tgetApp().getSavedPlaces().removeListDataListener(this);\n\t}\n\tsuper.onResume();\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\ManagePlacesActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/**\n * Returns the string for short distance. E.g. \"yards\", \"feet\".\n * \n * @return the string for short distance.\n */\n", "func_signal": "public String getShortDistance()", "code": "{\n    switch (getUnitSystem()) {\n    case UNITS_MILES_FEET:\n        // STR_FEET\n    \treturn context.getString(R.string.qtn_andr_feet_txt);\n    \n    case UNITS_MILES_YARDS:\n        // STR_YARDS\n    \treturn context.getString(R.string.qtn_andr_yards_txt);\n        \n    default: // UNITS_METRIC and default\n        // STR_METERS_ABBREVIATION\n    \treturn context.getString(R.string.qtn_andr_metre_txt);\n    }\n}", "path": "src\\com\\vodafone\\android\\navigation\\util\\AndroidUnitsFormatter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/**\n * Returns the string for long distance. E.g. \"miles\".\n * \n * @return the string for long distance.\n */\n", "func_signal": "public String getLongDistance()", "code": "{\n    if (getUnitSystem() == UNITS_MILES_FEET\n        || getUnitSystem() == UNITS_MILES_YARDS) {\n        // STR_MILES\n    \treturn context.getString(R.string.qtn_andr_miles_txt);\n    } else {\n        // use metric as default for unknowns.\n        // KILOMETERS\n    \treturn context.getString(R.string.qtn_andr_km_txt);\n    }\n}", "path": "src\\com\\vodafone\\android\\navigation\\util\\AndroidUnitsFormatter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n\t * @see android.app.Activity#onKeyDown(int, android.view.KeyEvent)\n\t */\n", "func_signal": "@Override\n\tpublic boolean onKeyUp(int keyCode, KeyEvent event)", "code": "{\n\t\tif(keyCode == KeyEvent.KEYCODE_VOLUME_DOWN\n\t\t\t\t|| keyCode == KeyEvent.KEYCODE_VOLUME_UP){\n\t\t\tadjustMuteIcon();\n\t\t}\n\t\treturn super.onKeyUp(keyCode, event);\n\t}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\AbstractRouteActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see com.vodafone.android.navigation.activity.AbstractActivity#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.edit_place_dialog);\n\t\n\tIntent intent =  this.getIntent();\n\tname = intent.getStringExtra(NAME_KEY);\n\tdescription = intent.getStringExtra(DESCRIPTION_KEY);\n\ttype = intent.getIntExtra(TYPE_KEY, 0);\n\tif(type == TYPE_SAVE_PLACE){\n\t\timageName = intent.getStringExtra(IMAGENAME_KEY);\n\t\tsrvString = intent.getStringExtra(SRVSTRING_KEY);\n\t\tlat = intent.getIntExtra(LAT_KEY, 0);\n\t\tlon = intent.getIntExtra(LON_KEY, 0);\n\t} else if(type == TYPE_EDIT_PLACE){\n\t\tsetTitle(R.string.qtn_andr_edit_place_det_txt);\n\t\tsrvString = intent.getStringExtra(SRVSTRING_KEY);\n\t\tpreviusDestinationId = intent.getLongExtra(RECENT_PLACE_ID_KEY, -1);\n\t}\n\t\n\tnameField = (EditText) findViewById(R.id.name_field);\n\tnameField.setText(name);\n\tnameField.addTextChangedListener(this);\n\t\n        UserMapObject userPin = this.getApp().getUserPin();\n        if(userPin != null) {\n            userPin.setOnTitleUpdateListener(new UserMapObject.OnTitleUpdateListener() {\n                public void onUpdateTitle(String title) {\n                    nameField.setText(title);\n                    nameField.invalidate();\n                }\n            });\n        }\n\t\n\tdescriptionField = (EditText) findViewById(R.id.description_field);\n\tdescriptionField.setHint(R.string.qtn_andr_map_pos_txt);\n\tif(type == TYPE_EDIT_PLACE){\n\t\tdescriptionField.setText(description);\n\t} \n\tsaveButton = (Button) findViewById(R.id.save_button);\n\tcancelButton = (Button) findViewById(R.id.cancel_button);\n\tsetSaveButtonState();\n\t\n\tsaveButton.setOnClickListener(new OnClickListener(){\n\t\tpublic void onClick(View v) {\n\t\t\tif(type == TYPE_SAVE_PLACE){\n\t\t\t\tEditPlaceActivity.this.getApp().\n\t\t\t\taddSavedPlace(nameField.getText().toString(), descriptionField.getText().toString(), imageName ,new Position(lat,lon), null );\n\t\t\t\tToast.makeText(EditPlaceActivity.this, R.string.qtn_andr_placemark_is_saved_txt, Toast.LENGTH_SHORT).show();\n\t\t\t} else if(type == TYPE_EDIT_PLACE){\n\t\t\t\tif(srvString != null){\n\t\t\t\t\tEditPlaceActivity.this.getApp().updateSavedPlace(getApp().getFavoriteToBeUpdated(), nameField.getText().toString(), descriptionField.getText().toString());\n\t\t\t\t}\n//\t\t\t\t\tif(previusDestinationId != -1){\n//\t\t\t\t\t\tEditPlaceActivity.this.getApp().updatePreviousDestination(, nameField.getText().toString(), descriptionField.getText().toString());\n//\t\t\t\t\t}\n\t\t\t\tToast.makeText(EditPlaceActivity.this, R.string.qtn_andr_place_is_edited_txt, Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t\tEditPlaceActivity.this.finish();\n\t\t}\n\t});\n\t\n\tcancelButton.setOnClickListener(new OnClickListener(){\n\t\tpublic void onClick(View v) {\n\t\t\tEditPlaceActivity.this.finish();\n\t\t}\n\t});\n\t\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\EditPlaceActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/**\n * Returns the abbreviation for long distance. E.g. \"mi\", \"km\".\n * \n * @return the abbreviation for long distance.\n */\n", "func_signal": "public String getLongDistanceAbbr()", "code": "{\n    if (getUnitSystem() == UNITS_MILES_FEET\n        || getUnitSystem() == UNITS_MILES_YARDS) {\n        // STR_MILES_ABBREVIATION\n    \treturn context.getString(R.string.qtn_andr_miles_abbrev_txt);\n    } else {\n        // use metric as default for unknowns.\n        // KILOMETERS\n    \treturn context.getString(R.string.qtn_andr_km_txt);\n    }\n}", "path": "src\\com\\vodafone\\android\\navigation\\util\\AndroidUnitsFormatter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\n    public void onCreate(Bundle savedInstanceState)", "code": "{\n        super.onCreate(savedInstanceState);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.route_activity);\n        \n        this.mapView = (WayfinderMapView)findViewById(R.id.map);\n        this.textTotalTime = (TextView) this.findViewById(R.id.text_time);\n        this.textTotalDist = (TextView) this.findViewById(R.id.text_distance);\n        this.textTurnDist = (TextView) this.findViewById(R.id.text_dist_to_next_turn);\n        this.textNextStreet = (TextView) this.findViewById(R.id.text_next_street_name);\n        this.textCurrStreet = (TextView) this.findViewById(R.id.text_current_street);\n        this.imgGuide = (ImageView) this.findViewById(R.id.img_guide);\n        this.layoutSpeed = (FrameLayout) this.findViewById(R.id.layout_speed);\n        this.textSpeed = (TextView) this.findViewById(R.id.text_speed);\n        this.textPictogram = (TextView) this.findViewById(R.id.text_pictogram);\n        this.textPictogramShadow = (TextView) this.findViewById(R.id.text_pictogram_shadow);\n        this.muteImage = (ImageView) findViewById(R.id.route_mute_icon);\n        \n        \n        this.onTrackCounter = ONTRACK_COUNTER;\n        if(!SPEED_SIGN_ENABLED) {\n            this.layoutSpeed.setVisibility(View.GONE);\n        }\n    }", "path": "src\\com\\vodafone\\android\\navigation\\activity\\RouteActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see android.app.Activity#onCreateDialog(int)\n */\n", "func_signal": "@Override\nprotected Dialog onCreateDialog(int id)", "code": "{\n\tswitch (id) {\n\t\tcase DIALOG_WIFI_WARNING: {\n\t\t\tAlertDialog dialog = new AlertDialog(this);\n\t\t\tdialog.setTitle(R.string.qtn_andr_note_txt);\n\t\t\tdialog.setMessage(R.string.qtn_andr_turn_off_wifi_txt);\n\t\t\tdialog.setNeutralButton(R.string.qtn_andr_settings_tk, new OnClickListener() {\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\tIntent i = new Intent(\n\t\t\t\t\t\t\tSettings.ACTION_WIRELESS_SETTINGS);\n\t\t\t\t\ti.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\t\t\tstartActivity(i);\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t}\n\t\t\t});\n\t\t\tdialog.setPositiveButton(R.string.qtn_andr_close_tk, new OnClickListener() {\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t    Intent intent = new Intent(WarningActivity.this, SplashActivity.class);\n\t\t\t        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\t\t    intent.putExtra(SplashActivity.KEY_EXIT, true);\n\t\t\t\t    WarningActivity.this.startActivity(intent);\n\t\t\t\t    finish();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t\n\t\t\tdialog.setOnDismissListener(new OnDismissListener() {\n\t\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\t\t// Works for bringing up the gps-settings\n\t\t\t\t\ttry {\n\t\t\t\t\t\t\n\t\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\t\tLog.e(\"AbstractActivity\", \"onDismiss() \" + t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tdialog.setIcon(android.R.drawable.ic_dialog_alert);\n\t\t\treturn dialog;\n\t\t}\n\t\t\t\n\t\tdefault: {\n\t\t\treturn super.onCreateDialog(id);\n\t\t}\n\t}\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\WarningActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/**\n * Create a new instance.\n * \n * @param unitSystem - the unit system to use.\n * @see UnitsFormatterSettings#UnitsFormatterConfig(int)\n */\n", "func_signal": "public AndroidUnitsFormatterSettings(int unitSystem, Context context)", "code": "{\n    super(unitSystem);\n    this.context = context;\n}", "path": "src\\com\\vodafone\\android\\navigation\\util\\AndroidUnitsFormatter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see com.vodafone.android.navigation.activity.AbstractRouteActivity#onResume()\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tsuper.onResume();\n\tRoute route = this.getRoute();\n\tif(route != null){\n\t\tWaypoint point = route.getFirstTurnWpt();\n\t\tint time = point.getTimeSecondsToEnd(); //seconds\n        int dist = point.getDistanceMetersToEnd(); //meters\n        UnitsFormatter formatter = getApp().getUnitsFormatter();\n        String timeStr = formatter.formatTimeWithUnitStrings(time, false);\n        FormattingResult result = formatter.formatDistance(dist);\n        String distStr = result.getRoundedValue() + \" \" + result.getUnitAbbr();\n        textTime.setText(timeStr); \n        textTime.invalidate();\n        \n        textDist.setText(distStr);\n        textDist.invalidate();\n\t}\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\RouteOverviewActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see com.vodafone.android.navigation.activity.AbstractRouteActivity#onResume()\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tsuper.onResume();\n\tRoute route = this.getRoute();\n\tif(route != null){\n\t\tWaypoint point = (this.oldWpt != null ? this.oldWpt : route.getFirstTurnWpt());\n\t\tint time = point.getTimeSecondsToEnd(); //seconds\n        int dist = point.getDistanceMetersToEnd(); //meters\n        UnitsFormatter formatter = getApp().getUnitsFormatter();\n        String timeStr = formatter.formatTimeWithUnitStrings(time, false);\n        FormattingResult result = formatter.formatDistance(dist);\n        String distStr = result.getRoundedValue() + \" \" + result.getUnitAbbr();\n        textTotalTime.setText(timeStr); \n        textTotalTime.invalidate();\n        \n        textTotalDist.setText(distStr);\n        textTotalDist.invalidate();\n        \n        Waypoint nextPoint = point.getNext();\n        if(nextPoint != null){\n\t        int distToNextTurn = nextPoint.getDistanceMetersFromPrev(); //meters\n\t        result = formatter.formatDistance(distToNextTurn);\n\t        String distTurnStr = result.getRoundedValue() + \" \" + result.getUnitAbbr();\n\t        textTurnDist.setText(distTurnStr);\n\t        textTurnDist.invalidate();\n        }\n        \n        \n        textNextStreet.setText(point.getRoadNameAfter());\n        textCurrStreet.setText(\"\");\n        this.pictogram = ResourceUtil.getDrawable(this, \"p\" + point.getTurn().getId());\n        imgGuide.setImageBitmap(pictogram);\n        \n        if(point.getExitCount() > 0 && point.getTurn() == Turn.EXIT_ROUNDABOUT && (info != null && !info.isSpeedCameraActive())) {\n            String exitCount = String.valueOf(point.getExitCount());\n                textPictogram.setText(exitCount);\n            textPictogramShadow.setText(exitCount);\n        }\n        else{\n            textPictogram.setText(\"\");\n            textPictogramShadow.setText(\"\");\n        }\n\t}\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\RouteActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see com.vodafone.android.navigation.activity.AbstractActivity#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.simple_items_list_activity);\n\tlistView = (ListView) findViewById(R.id.listview);\n\tNavigatorApplication app = getApp();\n        Intent intent = this.getIntent();\n        this.type = intent.getIntExtra(PlacesActivity.KEY_TYPE, PlacesActivity.TYPE_SAVED_PLACES);\n        uiItems = new ArrayList<PlacesManagerItem>();\n        if(type == PlacesActivity.TYPE_SAVED_PLACES){\n        \tplaces = app.getSavedPlaces();\t\n        \tupdateUIArrays(places);\n        \tthis.setTitle(R.string.qtn_andr_mng_my_places_txt);\n        }else{\n        \trecentDestinations = app.getPreviousDestinations();\n        \tthis.setTitle(R.string.qtn_andr_mng_my_rec_dest_txt);\n        \tupdateUIArrays(recentDestinations);\n        }\n        managePlacesAdapter = new ManagePlacesAdapter(this, uiItems);\n        managePlacesAdapter.notifyDataSetChanged();\n//        managePlacesAdapter.sort(new Comparator<PlacesManagerItem>(){\n//        \tpublic int compare(PlacesManagerItem l1, PlacesManagerItem l2) {\n//        \t\treturn l1.getItemName().toLowerCase().compareTo(l2.getItemName().toLowerCase());\n//        \t}\n//        });\n        \n        listView.setAdapter(managePlacesAdapter);\n        listView.setOnItemClickListener(new OnItemClickListener(){\n\n\t\tpublic void onItemClick(AdapterView<?> parent, View view,\n\t\t\t\tint position, long id) {\n\t\t\tCheckBox box = (CheckBox) view.findViewById(R.id.check_box);\n\t\t\tbox.toggle();\n\t\t\tmanagePlacesAdapter.getItem(position).setChecked(\n\t\t\t\t\tbox.isChecked());\n\t\t}\n        });\n       \n        \t\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\ManagePlacesActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onKeyDown(int, android.view.KeyEvent)\n */\n", "func_signal": "@Override\npublic boolean onKeyUp(int keyCode, KeyEvent event)", "code": "{\n\tif(keyCode == KeyEvent.KEYCODE_VOLUME_DOWN\n\t\t\t|| keyCode == KeyEvent.KEYCODE_VOLUME_UP){\n\t\tadjustMuteIcon();\n\t}\n\treturn super.onKeyUp(keyCode, event);\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\AbstractMapActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see android.app.Activity#onCreateDialog(int)\n */\n", "func_signal": "@Override\nprotected Dialog onCreateDialog(int id)", "code": "{\n\tif(id == DIALOG_SELECT_PHONE_NUMBER_ID){\n\t\tView choosePhoneView = View.inflate(this, R.layout.choose_phone_number_dialog, null);\n\t\tAlertDialog dialog = new AlertDialog(this);\n\t\tdialog.setContentView(choosePhoneView);\n        return dialog;\n\t}\n\treturn super.onCreateDialog(id);\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\PlaceDetailsActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/**\n * Returns the abbreviation for short distance. E.g. \"yds\", \"ft\", \"m\".\n * \n * @return the abbreviation for short distance.\n */\n", "func_signal": "public String getShortDistanceAbbr()", "code": "{\n    switch (getUnitSystem()) {\n    case UNITS_MILES_FEET:\n        // STR_FEET_ABBREVIATION\n        return context.getString(R.string.qtn_andr_feet_abbrev_txt);\n    \n    case UNITS_MILES_YARDS:\n        // yards_abbr\n        return context.getString(R.string.qtn_andr_yards_abbrev_txt);\n        \n    default: // UNITS_METRIC and default\n        // STR_METERS_ABBREVIATION\n    \treturn context.getString(R.string.qtn_andr_metre_txt);\n    }\n}", "path": "src\\com\\vodafone\\android\\navigation\\util\\AndroidUnitsFormatter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see android.widget.ArrayAdapter#getView(int, android.view.View, android.view.ViewGroup)\n */\n", "func_signal": "@Override\npublic View getView(int position, View convertView, ViewGroup parent)", "code": "{\n    View row = convertView;\n        ViewWrapper vw;\n    if(row == null) {\n    \t\tLayoutInflater inflater = context.getLayoutInflater();\n    \t\trow = inflater.inflate(R.layout.country_list_item, null);\n    \t\tvw = new ViewWrapper(row);\n    \t\trow.setTag(vw);\n    }\n    else {\n        vw = (ViewWrapper) row.getTag();\n    }\n\tTextView separator = vw.getSeperator();\n\tTextView countryName = vw.getCountry();\n\tString itemValue = getItem(position).replace(\"\\t\", \"\");\n\tif(itemValue.length() > 1){\n\t\tcountryName.setText(itemValue);\n\t\tseparator.setVisibility(View.GONE);\n\t\tcountryName.setVisibility(View.VISIBLE);\n\t} else {\n\t\tseparator.setText(itemValue);\n\t\tseparator.setVisibility(View.VISIBLE);\n\t\tcountryName.setVisibility(View.GONE);\n\t}\n\treturn row;\n}", "path": "src\\com\\vodafone\\android\\navigation\\adapter\\CountriesAdapter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see com.vodafone.android.navigation.activity.AbstractActivity#onPause()\n */\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n\tif(type == PlacesActivity.TYPE_SAVED_PLACES){\n\t\tgetApp().getSavedPlaces().addListDataListener(this);\n\t}\n\tsuper.onPause();\n}", "path": "src\\com\\vodafone\\android\\navigation\\activity\\ManagePlacesActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "// Called when there is a database version mismatch meaning that\n// the version of the database on disk needs to be upgraded to\n// the current version.\n", "func_signal": "@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)", "code": "{\n\tdb.execSQL(\"DROP TABLE IF EXISTS \" + PREDICTIVE_WRITING_TABLE);\n\tonCreate(db);\n}", "path": "src\\com\\vodafone\\android\\navigation\\persistence\\PredictiveWritingDatabaseAdapter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/* (non-Javadoc)\n * @see android.widget.BaseAdapter#isEnabled(int)\n */\n", "func_signal": "@Override\npublic boolean isEnabled(int position)", "code": "{\n\tString itemValue = getItem(position).replace(\"\\t\", \"\");\n\treturn (itemValue.length() > 1);\n}", "path": "src\\com\\vodafone\\android\\navigation\\adapter\\CountriesAdapter.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\n    public void onCreate(Bundle savedInstanceState)", "code": "{\n        super.onCreate(savedInstanceState);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.route_overview_activity);\n        \n        Intent intent = this.getIntent();\n        this.automaticRouting = intent.getBooleanExtra(KEY_AUTOMATIC_ROUTING, true);\n        \n        this.mapView = (WayfinderMapView) this.findViewById(R.id.map);\n        this.textTime = (TextView) this.findViewById(R.id.text_time);\n        this.textDist = (TextView) this.findViewById(R.id.text_distance);\n        \n        this.layoutTimeDist = (LinearLayout) this.findViewById(R.id.include_route_time_dist);\n        if(getApp().isSIMCardAbsent()){\n        \tthis.displayNoSIMWarning();\n        } else {\n            this.displaySafetyWarning();\n        }\n        muteImage = (ImageView) findViewById(R.id.route_mute_icon);\n    }", "path": "src\\com\\vodafone\\android\\navigation\\activity\\RouteOverviewActivity.java", "repo_name": "wayfinder/Wayfinder-Android-Navigator", "stars": 11, "license": "None", "language": "java", "size": 4177}
{"docstring": "/**\n * Prints out out state for debugging.\n */\n", "func_signal": "public void dumpState()", "code": "{\n    Log.d(TAG, \"BEGIN launcher2 dump state for launcher \" + this);\n    Log.d(TAG, \"mSavedState=\" + mSavedState);\n    Log.d(TAG, \"mIsNewIntent=\" + mIsNewIntent);\n    Log.d(TAG, \"mWorkspaceLoading=\" + mWorkspaceLoading);\n    Log.d(TAG, \"mRestoring=\" + mRestoring);\n    Log.d(TAG, \"mWaitingForResult=\" + mWaitingForResult);\n    Log.d(TAG, \"mSavedInstanceState=\" + mSavedInstanceState);\n    Log.d(TAG, \"mDesktopItems.size=\" + mDesktopItems.size());\n    Log.d(TAG, \"mFolders.size=\" + mFolders.size());\n    mModel.dumpState();\n    mAllAppsGrid.dumpState();\n    Log.d(TAG, \"END launcher2 dump state\");\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Add the views for a widget to the workspace.\n *\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void bindAppWidget(LauncherAppWidgetInfo item)", "code": "{\n    final Workspace workspace = mWorkspace;\n\n    final int appWidgetId = item.appWidgetId;\n    final AppWidgetProviderInfo appWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n    item.hostView = mAppWidgetHost.createView(this, appWidgetId, appWidgetInfo);\n\n    item.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n    item.hostView.setTag(item);\n\n    workspace.addInScreen(item.hostView, item.screen, item.cellX,\n            item.cellY, item.spanX, item.spanY, false);\n\n    workspace.requestLayout();\n\n    mDesktopItems.add(item);\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void bindFolders(HashMap<Long, FolderInfo> folders)", "code": "{\n    mFolders.clear();\n    mFolders.putAll(folders);\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Handle the action clicked in the \"Add to home\" dialog.\n */\n", "func_signal": "public void onClick(DialogInterface dialog, int which)", "code": "{\n    Resources res = getResources();\n    cleanup();\n\n    switch (which) {\n        case AddAdapter.ITEM_SHORTCUT: {\n            // Insert extra item to handle picking application\n            pickShortcut(REQUEST_PICK_SHORTCUT, R.string.title_select_shortcut);\n            break;\n        }\n\n        case AddAdapter.ITEM_APPWIDGET: {\n            int appWidgetId = Launcher.this.mAppWidgetHost.allocateAppWidgetId();\n\n            Intent pickIntent = new Intent(AppWidgetManager.ACTION_APPWIDGET_PICK);\n            pickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);\n            // add the search widget\n            ArrayList<AppWidgetProviderInfo> customInfo =\n                    new ArrayList<AppWidgetProviderInfo>();\n            AppWidgetProviderInfo info = new AppWidgetProviderInfo();\n            info.provider = new ComponentName(getPackageName(), \"XXX.YYY\");\n            info.label = getString(R.string.group_search);\n            info.icon = R.drawable.ic_search_widget;\n            customInfo.add(info);\n            pickIntent.putParcelableArrayListExtra(\n                    AppWidgetManager.EXTRA_CUSTOM_INFO, customInfo);\n            ArrayList<Bundle> customExtras = new ArrayList<Bundle>();\n            Bundle b = new Bundle();\n            b.putString(EXTRA_CUSTOM_WIDGET, SEARCH_WIDGET);\n            customExtras.add(b);\n            pickIntent.putParcelableArrayListExtra(\n                    AppWidgetManager.EXTRA_CUSTOM_EXTRAS, customExtras);\n            // start the pick activity\n            startActivityForResult(pickIntent, REQUEST_PICK_APPWIDGET);\n            break;\n        }\n\n        case AddAdapter.ITEM_LIVE_FOLDER: {\n            // Insert extra item to handle inserting folder\n            Bundle bundle = new Bundle();\n\n            ArrayList<String> shortcutNames = new ArrayList<String>();\n            shortcutNames.add(res.getString(R.string.group_folder));\n            bundle.putStringArrayList(Intent.EXTRA_SHORTCUT_NAME, shortcutNames);\n\n            ArrayList<ShortcutIconResource> shortcutIcons =\n                    new ArrayList<ShortcutIconResource>();\n            shortcutIcons.add(ShortcutIconResource.fromContext(Launcher.this,\n                    R.drawable.ic_launcher_folder));\n            bundle.putParcelableArrayList(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, shortcutIcons);\n\n            Intent pickIntent = new Intent(Intent.ACTION_PICK_ACTIVITY);\n            pickIntent.putExtra(Intent.EXTRA_INTENT,\n                    new Intent(LiveFolders.ACTION_CREATE_LIVE_FOLDER));\n            pickIntent.putExtra(Intent.EXTRA_TITLE,\n                    getText(R.string.title_select_live_folder));\n            pickIntent.putExtras(bundle);\n\n            startActivityForResult(pickIntent, REQUEST_PICK_LIVE_FOLDER);\n            break;\n        }\n\n        case AddAdapter.ITEM_WALLPAPER: {\n            startWallpaper();\n            break;\n        }\n    }\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Bind the items start-end from the list.\n *\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void bindItems(ArrayList<ItemInfo> shortcuts, int start, int end)", "code": "{\n\n    final Workspace workspace = mWorkspace;\n\n    for (int i=start; i<end; i++) {\n        final ItemInfo item = shortcuts.get(i);\n        mDesktopItems.add(item);\n        switch (item.itemType) {\n            case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:\n            case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:\n                final View shortcut = createShortcut((ApplicationInfo) item);\n                workspace.addInScreen(shortcut, item.screen, item.cellX, item.cellY, 1, 1,\n                        false);\n                break;\n            case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:\n                final FolderIcon newFolder = FolderIcon.fromXml(R.layout.folder_icon, this,\n                        (ViewGroup) workspace.getChildAt(workspace.getCurrentScreen()),\n                        (UserFolderInfo) item);\n                workspace.addInScreen(newFolder, item.screen, item.cellX, item.cellY, 1, 1,\n                        false);\n                break;\n            case LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER:\n                final FolderIcon newLiveFolder = LiveFolderIcon.fromXml(\n                        R.layout.live_folder_icon, this,\n                        (ViewGroup) workspace.getChildAt(workspace.getCurrentScreen()),\n                        (LiveFolderInfo) item);\n                workspace.addInScreen(newLiveFolder, item.screen, item.cellX, item.cellY, 1, 1,\n                        false);\n                break;\n            case LauncherSettings.Favorites.ITEM_TYPE_WIDGET_SEARCH:\n                final int screen = workspace.getCurrentScreen();\n                final View view = mInflater.inflate(R.layout.widget_search,\n                        (ViewGroup) workspace.getChildAt(screen), false);\n\n                Search search = (Search) view.findViewById(R.id.widget_search);\n                search.setLauncher(this);\n\n                final Widget widget = (Widget) item;\n                view.setTag(widget);\n\n                workspace.addWidget(view, widget, false);\n                break;\n        }\n    }\n\n    workspace.requestLayout();\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Go through the and disconnect any of the callbacks in the drawables and the views or we\n * leak the previous Home screen on orientation change.\n */\n", "func_signal": "private void unbindDesktopItems()", "code": "{\n    for (ItemInfo item: mDesktopItems) {\n        item.unbind();\n    }\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Refreshes the shortcuts shown on the workspace.\n *\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void startBinding()", "code": "{\n    final Workspace workspace = mWorkspace;\n    int count = workspace.getChildCount();\n    for (int i = 0; i < count; i++) {\n        // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().\n        ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();\n    }\n\n    if (DEBUG_USER_INTERFACE) {\n        android.widget.Button finishButton = new android.widget.Button(this);\n        finishButton.setText(\"Finish\");\n        workspace.addInScreen(finishButton, 1, 0, 0, 1, 1);\n\n        finishButton.setOnClickListener(new android.widget.Button.OnClickListener() {\n            public void onClick(View v) {\n                finish();\n            }\n        });\n    }\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Launches the intent referred by the clicked shortcut.\n *\n * @param v The view representing the clicked shortcut.\n */\n", "func_signal": "public void onClick(View v)", "code": "{\n    Object tag = v.getTag();\n    if (tag instanceof ApplicationInfo) {\n        // Open shortcut\n        final Intent intent = ((ApplicationInfo) tag).intent;\n        int[] pos = new int[2];\n        v.getLocationOnScreen(pos);\n        intent.setSourceBounds(\n                new Rect(pos[0], pos[1], pos[0]+v.getWidth(), pos[1]+v.getHeight()));\n        startActivitySafely(intent);\n    } else if (tag instanceof FolderInfo) {\n        handleFolderClick((FolderInfo) tag);\n    } else if (v == mHandleView) {\n        if (isAllAppsVisible()) {\n            closeAllApps(true);\n        } else {\n            showAllApps(true);\n        }\n    }\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * A package was uninstalled.\n *\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void bindPackageRemoved(String packageName, ArrayList<ApplicationInfo> apps)", "code": "{\n    removeDialog(DIALOG_CREATE_SHORTCUT);\n    mWorkspace.removeShortcutsForPackage(packageName);\n    mAllAppsGrid.removeApps(apps);\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Add a widget to the workspace.\n *\n * @param data The intent describing the appWidgetId.\n * @param cellInfo The position on screen where to create the widget.\n */\n", "func_signal": "private void completeAddAppWidget(Intent data, CellLayout.CellInfo cellInfo)", "code": "{\n    Bundle extras = data.getExtras();\n    int appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);\n\n    if (LOGD) Log.d(TAG, \"dumping extras content=\" + extras.toString());\n\n    AppWidgetProviderInfo appWidgetInfo = mAppWidgetManager.getAppWidgetInfo(appWidgetId);\n\n    // Calculate the grid spans needed to fit this widget\n    CellLayout layout = (CellLayout) mWorkspace.getChildAt(cellInfo.screen);\n    int[] spans = layout.rectToCell(appWidgetInfo.minWidth, appWidgetInfo.minHeight);\n\n    // Try finding open space on Launcher screen\n    final int[] xy = mCellCoordinates;\n    if (!findSlot(cellInfo, xy, spans[0], spans[1])) {\n        if (appWidgetId != -1) mAppWidgetHost.deleteAppWidgetId(appWidgetId);\n        return;\n    }\n\n    // Build Launcher-specific widget info and save to database\n    LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId);\n    launcherInfo.spanX = spans[0];\n    launcherInfo.spanY = spans[1];\n\n    LauncherModel.addItemToDatabase(this, launcherInfo,\n            LauncherSettings.Favorites.CONTAINER_DESKTOP,\n            mWorkspace.getCurrentScreen(), xy[0], xy[1], false);\n\n    if (!mRestoring) {\n        mDesktopItems.add(launcherInfo);\n\n        // Perform actual inflation because we're live\n        launcherInfo.hostView = mAppWidgetHost.createView(this, appWidgetId, appWidgetInfo);\n\n        launcherInfo.hostView.setAppWidget(appWidgetId, appWidgetInfo);\n        launcherInfo.hostView.setTag(launcherInfo);\n\n        mWorkspace.addInCurrentScreen(launcherInfo.hostView, xy[0], xy[1],\n                launcherInfo.spanX, launcherInfo.spanY, isWorkspaceLocked());\n    }\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Registers various content observers. The current implementation registers\n * only a favorites observer to keep track of the favorites applications.\n */\n", "func_signal": "private void registerContentObservers()", "code": "{\n    ContentResolver resolver = getContentResolver();\n    resolver.registerContentObserver(LauncherProvider.CONTENT_APPWIDGET_RESET_URI,\n            true, mWidgetObserver);\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Restores the previous state, if it exists.\n *\n * @param savedState The previous state.\n */\n", "func_signal": "private void restoreState(Bundle savedState)", "code": "{\n    if (savedState == null) {\n        return;\n    }\n\n    final boolean allApps = savedState.getBoolean(RUNTIME_STATE_ALL_APPS_FOLDER, false);\n    if (allApps) {\n        showAllApps(false);\n    }\n\n    final int currentScreen = savedState.getInt(RUNTIME_STATE_CURRENT_SCREEN, -1);\n    if (currentScreen > -1) {\n        mWorkspace.setCurrentScreen(currentScreen);\n    }\n\n    final int addScreen = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SCREEN, -1);\n    if (addScreen > -1) {\n        mAddItemCellInfo = new CellLayout.CellInfo();\n        final CellLayout.CellInfo addItemCellInfo = mAddItemCellInfo;\n        addItemCellInfo.valid = true;\n        addItemCellInfo.screen = addScreen;\n        addItemCellInfo.cellX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_CELL_X);\n        addItemCellInfo.cellY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_CELL_Y);\n        addItemCellInfo.spanX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_X);\n        addItemCellInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);\n        addItemCellInfo.findVacantCellsFromOccupied(\n                savedState.getBooleanArray(RUNTIME_STATE_PENDING_ADD_OCCUPIED_CELLS),\n                savedState.getInt(RUNTIME_STATE_PENDING_ADD_COUNT_X),\n                savedState.getInt(RUNTIME_STATE_PENDING_ADD_COUNT_Y));\n        mRestoring = true;\n    }\n\n    boolean renameFolder = savedState.getBoolean(RUNTIME_STATE_PENDING_FOLDER_RENAME, false);\n    if (renameFolder) {\n        long id = savedState.getLong(RUNTIME_STATE_PENDING_FOLDER_RENAME_ID);\n        mFolderInfo = mModel.getFolderById(this, mFolders, id);\n        mRestoring = true;\n    }\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * A package was updated.\n *\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void bindPackageUpdated(String packageName, ArrayList<ApplicationInfo> apps)", "code": "{\n    removeDialog(DIALOG_CREATE_SHORTCUT);\n    mWorkspace.updateShortcutsForPackage(packageName);\n    mAllAppsGrid.updateApps(packageName, apps);\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * A package was installed.\n *\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void bindPackageAdded(ArrayList<ApplicationInfo> apps)", "code": "{\n    removeDialog(DIALOG_CREATE_SHORTCUT);\n    mAllAppsGrid.addApps(apps);\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Opens the user fodler described by the specified tag. The opening of the folder\n * is animated relative to the specified View. If the View is null, no animation\n * is played.\n *\n * @param folderInfo The FolderInfo describing the folder to open.\n */\n", "func_signal": "private void openFolder(FolderInfo folderInfo)", "code": "{\n    Folder openFolder;\n\n    if (folderInfo instanceof UserFolderInfo) {\n        openFolder = UserFolder.fromXml(this);\n    } else if (folderInfo instanceof LiveFolderInfo) {\n        openFolder = com.android.launcher2.LiveFolder.fromXml(this, folderInfo);\n    } else {\n        return;\n    }\n\n    openFolder.setDragController(mDragController);\n    openFolder.setLauncher(this);\n\n    openFolder.bind(folderInfo);\n    folderInfo.opened = true;\n\n    mWorkspace.addInScreen(openFolder, folderInfo.screen, 0, 0, 4, 4);\n    openFolder.onOpen();\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Used to inflate the Workspace from XML.\n *\n * @param context The application's context.\n * @param attrs The attribtues set containing the Workspace's customization values.\n */\n", "func_signal": "public Folder(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n    setAlwaysDrawnWithCacheEnabled(false);\n}", "path": "src\\com\\android\\launcher2\\Folder.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Add a shortcut to the workspace.\n *\n * @param data The intent describing the shortcut.\n * @param cellInfo The position on screen where to create the shortcut.\n */\n", "func_signal": "private void completeAddShortcut(Intent data, CellLayout.CellInfo cellInfo)", "code": "{\n    cellInfo.screen = mWorkspace.getCurrentScreen();\n    if (!findSingleSlot(cellInfo)) return;\n\n    final ApplicationInfo info = addShortcut(this, data, cellInfo, false);\n\n    if (!mRestoring) {\n        final View view = createShortcut(info);\n        mWorkspace.addInCurrentScreen(view, cellInfo.cellX, cellInfo.cellY, 1, 1,\n                isWorkspaceLocked());\n    }\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Callback saying that there aren't any more items to bind.\n *\n * Implementation of the method from LauncherModel.Callbacks.\n */\n", "func_signal": "public void finishBindingItems()", "code": "{\n    if (mSavedState != null) {\n        if (!mWorkspace.hasFocus()) {\n            mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();\n        }\n\n        final long[] userFolders = mSavedState.getLongArray(RUNTIME_STATE_USER_FOLDERS);\n        if (userFolders != null) {\n            for (long folderId : userFolders) {\n                final FolderInfo info = mFolders.get(folderId);\n                if (info != null) {\n                    openFolder(info);\n                }\n            }\n            final Folder openFolder = mWorkspace.getOpenFolder();\n            if (openFolder != null) {\n                openFolder.requestFocus();\n            }\n        }\n\n        mSavedState = null;\n    }\n\n    if (mSavedInstanceState != null) {\n        super.onRestoreInstanceState(mSavedInstanceState);\n        mSavedInstanceState = null;\n    }\n\n    mWorkspaceLoading = false;\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Indicates that we want global search for this activity by setting the globalSearch\n * argument for {@link #startSearch} to true.\n */\n", "func_signal": "@Override\npublic boolean onSearchRequested()", "code": "{\n    startSearch(null, false, null, true);\n    return true;\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Finds all the views we need and configure them properly.\n */\n", "func_signal": "private void setupViews()", "code": "{\n    DragController dragController = mDragController;\n\n    DragLayer dragLayer = (DragLayer) findViewById(R.id.drag_layer);\n    dragLayer.setDragController(dragController);\n\n    mAllAppsGrid = (AllAppsView)dragLayer.findViewById(R.id.all_apps_view);\n    mAllAppsGrid.setLauncher(this);\n    mAllAppsGrid.setDragController(dragController);\n    mAllAppsGrid.setWillNotDraw(false); // We don't want a hole punched in our window.\n    // Manage focusability manually since this thing is always visible\n    mAllAppsGrid.setFocusable(false); \n\n    mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);\n    final Workspace workspace = mWorkspace;\n\n    DeleteZone deleteZone = (DeleteZone) dragLayer.findViewById(R.id.delete_zone);\n    mDeleteZone = deleteZone;\n\n    mHandleView = (HandleView) findViewById(R.id.all_apps_button);\n    mHandleView.setLauncher(this);\n    mHandleView.setOnClickListener(this);\n\n    mPreviousView = (ImageView) dragLayer.findViewById(R.id.previous_screen);\n    mNextView = (ImageView) dragLayer.findViewById(R.id.next_screen);\n\n    Drawable previous = mPreviousView.getDrawable();\n    Drawable next = mNextView.getDrawable();\n    mWorkspace.setIndicators(previous, next);\n\n    mPreviousView.setHapticFeedbackEnabled(false);\n    mPreviousView.setOnLongClickListener(this);\n    mNextView.setHapticFeedbackEnabled(false);\n    mNextView.setOnLongClickListener(this);\n\n    workspace.setOnLongClickListener(this);\n    workspace.setDragController(dragController);\n    workspace.setLauncher(this);\n\n    deleteZone.setLauncher(this);\n    deleteZone.setDragController(dragController);\n    deleteZone.setHandle(mHandleView);\n\n    dragController.setDragScoller(workspace);\n    dragController.setDragListener(deleteZone);\n    dragController.setScrollView(dragLayer);\n\n    // The order here is bottom to top.\n    dragController.addDropTarget(workspace);\n    dragController.addDropTarget(deleteZone);\n}", "path": "src\\com\\android\\launcher2\\Launcher.java", "repo_name": "ChainsDD/android_packages_apps_Launcher2", "stars": 9, "license": "other", "language": "java", "size": 26745}
{"docstring": "/**\n * Start a chat with multiple Skype users.\n * Without using the Skype client dialogs.\n * @param skypeIds The users to start a chat with.\n * @return The new chat object.\n * @throws SkypeException when connection has gone bad or ERROR reply.\n */\n", "func_signal": "public Chat chat(String[] skypeIds) throws SkypeException", "code": "{\n    Utils.checkNotNull(\"skypeIds\", skypeIds);\n    return chat(Utils.convertToCommaSeparatedString(skypeIds));\n}", "path": "src\\com\\Skype\\Skype.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Assures the attached status.\n * @throws ConnectorException if this connector is not attached or trying to connect failed.\n */\n", "func_signal": "private void assureAttached() throws ConnectorException", "code": "{\n    Status attachedStatus = getStatus();\n    if (attachedStatus != Status.ATTACHED) {\n        attachedStatus = connect();\n        if (attachedStatus != Status.ATTACHED) {\n            throw new NotAttachedException(attachedStatus);\n        }\n    }\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Fires a message event.\n * @param listenerList the event listener list\n * @param message the message that triggered the event\n * @param isReceived the message is a received type or not\n */\n", "func_signal": "private void fireMessageEvent(final ConnectorListener[] listeners, final String message, final boolean isReceived)", "code": "{\n    ConnectorMessageEvent event = new ConnectorMessageEvent(this, message);\n    for (int i = listeners.length - 1; 0 <= i; i--) {\n        if (isReceived) {\n            listeners[i].messageReceived(event);\n        } else {\n            listeners[i].messageSent(event);\n        }\n    }\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * @param string\n * @return\n */\n", "func_signal": "public ChatMessage getChatMessage(final String anId)", "code": "{\n\tsynchronized (idToChatMessages) {\n\t\tChatMessage chatMessage = idToChatMessages.get(anId);\n\t\tif(chatMessage == null) {\n\t\t\tchatMessage = new ChatMessage(connector, anId);\n\t\t\tidToChatMessages.put(anId, chatMessage);\n\t\t}\n\t\treturn chatMessage;\n\t}\n}", "path": "src\\com\\Skype\\Skype.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Executes the specified command and waits for the response without timeout.\n * @param command the command to execute\n * @param responseHeader the response header to get the accurate response\n * @return the response after execution\n * @throws NullPointerException if the specified command or responseHeader is null\n * @throws ConnectorException if executing the command failed\n */\n", "func_signal": "public final String executeWithoutTimeout(final String command, final String responseHeader) throws ConnectorException", "code": "{\n    ConnectorUtils.checkNotNull(\"command\", command);\n    ConnectorUtils.checkNotNull(\"responseHeader\", responseHeader);\n    return execute(command, new String[] { responseHeader, \"ERROR \" }, true, true);\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Sends a status change event to the all listeners.\n * @param newStatus the new status\n */\n", "func_signal": "private void fireStatusChanged(final Status newStatus)", "code": "{\n\tSystem.out.println(\"Set status to \" + newStatus.toString() + \" for skype instance: \" + getSkype());\n    _syncSender.execute(new Runnable() {\n        public void run() {\n            // use listener array instead of list because of reverse iteration\n            fireStatusChanged(toConnectorListenerArray(_syncListeners), newStatus);\n        }\n    });\n    _asyncSender.execute(new Runnable() {\n        public void run() {\n            // use listener array instead of list because of reverse iteration\n            fireStatusChanged(toConnectorListenerArray(_asyncListeners), newStatus);\n        }\n    });\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * @param id\n * @return\n */\n", "func_signal": "public Chat getChat(final String anId)", "code": "{\n\tsynchronized (idToChats) {\n\t\tChat chat = idToChats.get(anId);\n\t\tif(chat == null) {\n\t\t\tchat = new Chat(connector, anId);\n\t\t\tidToChats.put(anId, chat);\n\t\t}\n\t\treturn chat;\n\t\t}\n\t}", "path": "src\\com\\Skype\\Skype.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Gets the specified property value.\n * @param name the property name\n * @return the property value\n * @throws NullPointerException if the specified name is null\n * @see #setStringProperty(String, String)\n */\n", "func_signal": "public final String getStringProperty(final String name)", "code": "{\n    ConnectorUtils.checkNotNull(\"name\", name);\n    return properties.get(name);\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Removes the specified listener from this connector.\n * @param listener the listener to be removed\n * @throws NullPointerException if the specified listener is null\n * @see #addConnectorListener(ConnectorListener)\n */\n", "func_signal": "public final void removeConnectorListener(final ConnectorListener listener)", "code": "{\n    ConnectorUtils.checkNotNull(\"listener\", listener);\n    _syncListeners.remove(listener);\n    _asyncListeners.remove(listener);\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Adds the specified listener to this connector.\n * @param listener the listener to be added\n * @param checkAttached if true checks if this connector is attached\n * @param isSynchronous if true the listener will be handled synchronously\n * @throws NullPointerException if the specified listener is null\n * @throws ConnectorException if trying to connect failed\n * @see #removeConnectorListener(ConnectorListener)\n */\n", "func_signal": "public final void addConnectorListener(final ConnectorListener listener, final boolean checkAttached, final boolean isSynchronous) throws ConnectorException", "code": "{\n    ConnectorUtils.checkNotNull(\"listener\", listener);\n    if(isSynchronous) {\n        _syncListeners.add(listener);\n    } else {\n        _asyncListeners.add(listener);\n    }\n    if (checkAttached) {\n        assureAttached();\n    }\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Check if Skype client is running.\n * WARNING, does not work for all platforms.\n * @return true if Skype client is running.\n * @throws SkypeException when connection has gone bad or ERROR reply.\n */\n", "func_signal": "public boolean isRunning() throws SkypeException", "code": "{\n    try {\n        return connector.isRunning();\n    } catch (ConnectorException e) {\n        Utils.convertToSkypeException(e);\n        return false;\n    }\n}", "path": "src\\com\\Skype\\Skype.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Sets the status of this connector.\n * After setting, an status changed event will be sent to the all listeners.\n * @param newValue the new status\n * @throws NullPointerException if the specified status is null\n * @see #getStatus()\n */\n", "func_signal": "protected final void setStatus(final Status newStatus)", "code": "{\n    ConnectorUtils.checkNotNull(\"status\", newStatus);\n    _status = newStatus;\n    fireStatusChanged(newStatus);\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Disconnects from the Skype client and clean up the resources.\n * @throws ConnectorException if cleaning up the resources failed\n */\n", "func_signal": "public final void dispose() throws ConnectorException", "code": "{\n    synchronized (_isInitializedMutex) {\n        if (!_isInitialized) {\n            return;\n        }\n        disposed = true;\n        disposeImpl();\n        setStatus(Status.NOT_RUNNING);\n        _commandExecutor.shutdown();\n\n        _syncSender.shutdown();\n        _asyncSender.shutdown();\n\n        _syncListeners.clear();\n        _asyncListeners.clear();\n\n        _isInitialized = false;\n    }\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Executes the specified command and gets the response.\n * @param command the command to execute\n * @param responseHeaders the response headers to get the accurate response\n * @return the response after execution\n * @throws NullPointerException if the specified command or responseHeader is null\n * @throws ConnectorException if executing the command failed\n */\n", "func_signal": "public final String execute(final String command, final String[] responseHeaders) throws ConnectorException", "code": "{\n    ConnectorUtils.checkNotNull(\"command\", command);\n    ConnectorUtils.checkNotNull(\"responseHeaders\", responseHeaders);\n    return execute(command, responseHeaders, true);\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Initializes this connector.\n * @throws ConnectorException if the initialization failed.\n */\n", "func_signal": "protected final void initialize() throws ConnectorException", "code": "{\n    synchronized (_isInitializedMutex) {\n        if (!_isInitialized) {\n            _asyncSender = Executors.newCachedThreadPool(new ThreadFactory() {\n                private final AtomicInteger threadNumber = new AtomicInteger();\n\n                public Thread newThread(Runnable r) {\n                    Thread thread = new Thread(r, \"AsyncSkypeMessageSender-\" + threadNumber.getAndIncrement());\n                    thread.setDaemon(true);\n                    return thread;\n                }\n            });\n            _syncSender = Executors.newSingleThreadExecutor(new ThreadFactory() {\n                public Thread newThread(Runnable r) {\n                    Thread thread = new Thread(r, \"SyncSkypeMessageSender\");\n                    thread.setDaemon(true);\n                    return thread;\n                }\n            });\n            _commandExecutor = Executors.newCachedThreadPool(new ThreadFactory() {\n                private final AtomicInteger threadNumber = new AtomicInteger();\n\n                public Thread newThread(Runnable r) {\n                    Thread thread = new Thread(r, \"CommandExecutor-\" + threadNumber.getAndIncrement());\n                    thread.setDaemon(true);\n                    return thread;\n                }\n            });\n\n            initializeImpl();\n\n            _isInitialized = true;\n        }\n    }\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Fires a message event.\n * @param message the message that triggered the event\n * @param isReceived the message is a received type or not\n */\n", "func_signal": "private void fireMessageEvent(final String message, final boolean isReceived)", "code": "{\n\tif(disposed) {\n\t\treturn;\n\t}\n    ConnectorUtils.checkNotNull(\"message\", message);\n    _syncSender.execute(new Runnable() {\n        public void run() {\n            fireMessageEvent(toConnectorListenerArray(_syncListeners), message, isReceived);\n        }\n    });\n    _asyncSender.execute(new Runnable() {\n        public void run() {\n            fireMessageEvent(toConnectorListenerArray(_asyncListeners), message, isReceived);\n        }\n    });\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Sets the specified property.\n * If the specified value is null, the property is removed.\n * @param name the property name\n * @param value the property value\n * @throws NullPointerException if the specified name is null\n * @see #getStringProperty(String)\n */\n", "func_signal": "public final void setStringProperty(final String name, final String value)", "code": "{\n    ConnectorUtils.checkNotNull(\"name\", name);\n    if (value != null) {\n        properties.put(name, value);\n    } else {\n        properties.remove(name);\n    }\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Remove this GROUP.\n * @throws SkypeException when the connection has gone bad.\n */\n", "func_signal": "public void dispose() throws SkypeException", "code": "{\n    try {\n        String response = connector.execute(\"DELETE GROUP \" + getId(), \"DELETED GROUP \");\n        Utils.checkError(response);\n    } catch (ConnectorException e) {\n        Utils.convertToSkypeException(e);\n    }\n}", "path": "src\\com\\Skype\\Group.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Sends a status change event to the specified listeners.\n * @param listeners the event listeners\n * @param newStatus the new status\n */\n", "func_signal": "private void fireStatusChanged(final ConnectorListener[] listeners, final Status newStatus)", "code": "{\n\tif(isDisposed()) {\n\t\treturn;\n\t}\n    final ConnectorStatusEvent event = new ConnectorStatusEvent(this, newStatus);\n    for (int i = listeners.length - 1; 0 <= i; i--) {\n        listeners[i].statusChanged(event);\n    }\n}", "path": "src\\com\\Skype\\connector\\Connector.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * Gets the all chats by the type.\n *\n * @return The all chats by the type\n *\n * @throws SkypeException If there is a problem with the connection or state at the Skype client.\n */\n", "func_signal": "private Chat[] getAllChats(String type) throws SkypeException", "code": "{\n    try {\n        String command = \"SEARCH \" + type;\n        String responseHeader = \"CHATS \";\n        String response = connector.execute(command, responseHeader);\n        String data = response.substring(responseHeader.length());\n        String[] ids = Utils.convertToArray(data);\n        Chat[] chats = new Chat[ids.length];\n        for (int i = 0; i < ids.length; ++i) {\n            chats[i] = getChat(ids[i]);\n        }\n        return chats;\n    } catch (ConnectorException ex) {\n        Utils.convertToSkypeException(ex);\n        return null;\n    }\n}", "path": "src\\com\\Skype\\Skype.java", "repo_name": "lemmy/skype4java", "stars": 11, "license": "None", "language": "java", "size": 35972}
{"docstring": "/**\n * @return Histogram length.\n */\n", "func_signal": "public int getHistogramLength()", "code": "{\n\treturn mHistogramData == null ? 0\n\t\t\t: mHistogramData.length;\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\data\\LISAImageGray16Bit.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Compute an\n * \n * @param bitsAllocated\n * @param valueLength\n * @throws IOException\n * @throws EOFException\n * @throws DICOMException\n */\n", "func_signal": "private void computeOWImage(long valueLength)\n\t\tthrows IOException, EOFException, DICOMException", "code": "{\n\t\n\t// Check the value length\n\tif (valueLength == 0xffffffffL)\n\t\tthrow new DICOMException(\"Cannot parse PixelData \" +\n\t\t\t\t\"because the length is undefined\");\n\t\n\t// Get the bits allocated\n\tint bitsAllocated = mBody.getBitsAllocated();\n\t\n\t// Cf. PS 3.5-2009 Pg. 66-67\n\tif (bitsAllocated == 8) {\n\t\n\t\tcomputeOW8BitImage(valueLength);\n\t\t\n\t} else if (bitsAllocated == 16) {\n\t\t\n\t\tcomputeOW16BitImage(valueLength);\n\t\t\n\t} else if (bitsAllocated == 32) {\n\t\t\n\t\t/* for (int i = 0; i < mPixelData.length; i++) {\n\t\t\tmPixelData[i] = (int) readUnsignedLong();\n\t\t}\n\t\n\t\tmByteOffset += valueLength; */\n\t\n\t\t// TODO We can sample the gray level on 16 bit but\n\t\t// is it compatible with the DICOM standard ?\n\t\n\t\tthrow new DICOMException(\"This image cannot be parsed \"\n\t\t\t\t+ \"because the bits allocated value (\"\n\t\t\t\t+ bitsAllocated\n\t\t\t\t+ \") is not supported yet.\");\n\t\t\n\t} else if (bitsAllocated == 64) {\n\t\t\n\t\t/* for (int i = 0; i < mPixelData.length; i++) {\n\t\t\tmPixelData[i] = (int) readUnsignedLong64();\n\t\t}\n\t\t\n\t\tmByteOffset += valueLength; */\n\t\t\n\t\t// TODO We can sample the gray level on 16 bit but\n\t\t// is it compatible with the DICOM standard ?\n\t\t\n\t\tthrow new DICOMException(\"This image cannot be parsed \"\n\t\t\t\t+ \"because the bits allocated value (\"\n\t\t\t\t+ bitsAllocated\n\t\t\t\t+ \") is not supported yet.\");\n\t\t\n\t} else {\n\t\t\n\t\tthrow new DICOMException(\"This image cannot be parsed \"\n\t\t\t\t+ \"because the bits allocated value (\"\n\t\t\t\t+ bitsAllocated\n\t\t\t\t+ \") is not supported yet.\");\n\t\t\n\t}\n\t\n\t// Add the value length to the byte offset\n\tmByteOffset += valueLength;\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\dicom\\file\\DICOMImageReader.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Write the image orientation float array.\n * \n * @param image\n * @throws IOException\n */\n", "func_signal": "protected final void writeImageOrientation(LISAImageGray16Bit image) throws IOException", "code": "{\n\t\n\tfloat[] imageOrientation = image.getImageOrientation();\n\t\n\t// Check if the array is null or not null\n\timageOrientation = (imageOrientation == null) ? new float[6] : imageOrientation;\n\t\n\twriteFloatArray(imageOrientation);\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\file\\LISAImageGray16BitWriter.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Parse the image DICOM file.\n * \n * @throws IOException\n * @throws EOFException\n * @throws DICOMException \n */\n", "func_signal": "public final DICOMImage parse() throws IOException, EOFException, DICOMException", "code": "{\n\t\n\t\n\t// Variables declaration\n\tDICOMMetaInformation metaInformation;\n\tboolean isExplicit;\n\tshort compressionStatus = DICOMImage.UNKNOWN_STATUS;\n\t\n\t// Parse meta information\n\tif (hasMetaInformation()) {\n\t\t\n\t\tmetaInformation = parseMetaInformation();\n\t\t\n\t\tString transferSyntaxUID = metaInformation.getTransferSyntaxUID();\n\t\t\n\t\tif (transferSyntaxUID.equals(\"1.2.840.10008.1.2\")) {\n\t\t\t\n\t\t\tisExplicit = false;\n\t\t\tsetByteOrder(LITTLE_ENDIAN);\n\t\t\tcompressionStatus = DICOMImage.UNCOMPRESSED;\n\t\t\t\n\t\t} else if (transferSyntaxUID.equals(\"1.2.840.10008.1.2.1\")) {\n\t\t\t\n\t\t\tisExplicit = true;\n\t\t\tsetByteOrder(LITTLE_ENDIAN);\n\t\t\tcompressionStatus = DICOMImage.UNCOMPRESSED;\n\t\t\t\n\t\t}  else if (transferSyntaxUID.equals(\"1.2.840.10008.1.2.2\")) {\n\t\t\t\n\t\t\tisExplicit = true;\n\t\t\tsetByteOrder(BIG_ENDIAN);\n\t\t\tcompressionStatus = DICOMImage.UNCOMPRESSED;\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tisExplicit = true;\n\t\t\tsetByteOrder(LITTLE_ENDIAN);\n\t\t\tcompressionStatus = DICOMImage.COMPRESSED;\n\t\t\t\n\t\t\t// Compressed image are not supported yet\n\t\t\t// => throw a exception\n\t\t\tthrow new DICOMException(\"The image is compressed.\"\n\t\t\t\t\t+ \" This is not supported yet.\");\n\t\t\t\n\t\t}\n\t\t\n\t} else {\n\t\t\n\t\tmetaInformation = null;\n\t\t\n\t\tisExplicit = false;\n\t\tsetByteOrder(LITTLE_ENDIAN);\n\t\t\n\t}\n\t\n\t// Parse the body\n\tDICOMImageReaderFunctions dicomReaderFunctions =\n\t\tnew DICOMImageReaderFunctions(isExplicit, compressionStatus);\n\t\n\tparse(null, 0xffffffffL, isExplicit, dicomReaderFunctions, true);\n\t\n\tDICOMImage dicomImage = new DICOMImage(metaInformation,\n\t\t\tdicomReaderFunctions.getBody(),\n\t\t\tdicomReaderFunctions.getImage(),\n\t\t\tcompressionStatus);\n\t\n\treturn dicomImage;\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\dicom\\file\\DICOMImageReader.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * @param imageOrientation The image orientation array.\n */\n", "func_signal": "public void setImageOrientation(float[] imageOrientation)", "code": "{\n\t\n\tif (imageOrientation == null)\n\t\treturn;\n\t\n\tif (imageOrientation.length == 6)\n\t\tmImageOrientation = imageOrientation;\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\data\\LISAImageGray16Bit.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * @return True if the external storage is writable.\n * False otherwise.\n */\n", "func_signal": "public static boolean checkWritable()", "code": "{\n\t\n\t// Retrieving the external storage state\n\tString state = Environment.getExternalStorageState();\n\t\n\t// Check if writable\n\tif (Environment.MEDIA_MOUNTED.equals(state)) {\n\t\treturn true;\n\t}\n\t\n\treturn false;\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\android\\commons\\ExternalStorage.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * @return DICOM element value as an integer.\n * @throws NumberFormatException If the value is not an\n * integer, it throws a NumberFormatException.\n */\n", "func_signal": "public int getValueInt() throws NumberFormatException", "code": "{\n\t\n\tint toReturn = 0;\n\t\n\tif (mValue instanceof String) {\n\t\t\n\t\ttoReturn = Integer.parseInt((String) mValue);\n\t\t\n\t} else if (mValue instanceof Short) {\n\t\t\n\t\ttoReturn = (int) (Short) mValue;\n\t\t\n\t} else if (mValue instanceof Integer) {\n\t\t\n\t\ttoReturn = (Integer) mValue;\n\t\t\n\t} else if (mValue instanceof Long) {\n\t\t\n\t\ttoReturn = ((Long) mValue).intValue();\n\t\t\n\t} else {\n\t\t\n\t\ttoReturn = Integer.parseInt(getValueString());\n\t\t\n\t}\n\t\n\treturn toReturn;\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\dicom\\DICOMElement.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * @return True if the external storage is available.\n * False otherwise.\n */\n", "func_signal": "public static boolean checkAvailable()", "code": "{\n\t\n\t// Retrieving the external storage state\n\tString state = Environment.getExternalStorageState();\n\t\n\t// Check if available\n\tif (Environment.MEDIA_MOUNTED.equals(state)\n\t\t\t|| Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\android\\commons\\ExternalStorage.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Write a LISA 16-Bit grayscale image.\n * @param image A LISA 16-bit grayscale image.\n * @throws IOException\n */\n", "func_signal": "public void write(LISAImageGray16Bit image) throws IOException", "code": "{\n\t\n\tif (image == null)\n\t\tthrow new NullPointerException(\"Image is null\");\n\t\n\ttry {\n\t\t\n\t\t// PREFIX\n\t\t// Write the prefix\n\t\twrite(PREFIX.getBytes());\n\t\t\n\t\t// IMAGE SIZE\n\t\t// Write width\n\t\twriteInt16(image.getWidth());\n\t\t\n\t\t// Write height\n\t\twriteInt16(image.getHeight());\n\t\t\n\t\t// GRAY LEVELS AND WINDOW\n\t\t// Write the gray levels\n\t\twriteLong32(image.getGrayLevel());\n\t\t\n\t\t// Write window width\n\t\twriteInt16(image.getWindowWidth());\n\t\t\n\t\t// Write window center\n\t\twriteInt16(image.getWindowCenter());\n\t\t\n\t\t// Write the image orientation\n\t\twriteImageOrientation(image);\n\t\t\n\t\t// Write image length\n\t\twriteLong32(image.getDataLength());\n\t\t\n\t\t// Write the image data\n\t\twriteInt16Array(image.getData());\n\t\t\n\t} catch (IOException e) {\n\t\tthrow new IOException(\"Cannot open write LISA image.\\n\"\n\t\t\t\t+ e.getMessage());\n\t}\n\t\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\file\\LISAImageGray16BitWriter.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "// This function is override to fit the image in the\n// ImageView at initialization. Because when this method\n// is called, the size of the ImageView is set.\n// The override of the onDraw method lead to a slower\n// display of the image. It is for that we override\n// this method.\n/* (non-Javadoc)\n * @see android.widget.ImageView#drawableStateChanged()\n */\n", "func_signal": "@Override\nprotected void drawableStateChanged()", "code": "{\n\t\n\tif (mIsInit == false) {\n\t\t\n\t\tmIsInit = true;\n\t\t\n\t\tif (mImage != null)\n\t\t\tfitIn();\n\t\t\n\t}\n\n\tsuper.drawableStateChanged();\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\android\\dicomviewer\\view\\DICOMImageView.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "// ---------------------------------------------------------------\n// + CONSTRUCTOR\n// ---------------------------------------------------------------\n", "func_signal": "public DICOMFile(DICOMMetaInformation metaInformation, DICOMBody body)", "code": "{\n\t\n\tmMetaInformation = metaInformation;\n\tmBody = body;\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\dicom\\data\\DICOMFile.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "// ---------------------------------------------------------------\n// + <implement> FUNCTIONS\n// ---------------------------------------------------------------\n", "func_signal": "public boolean onTouch(View v, MotionEvent event)", "code": "{\n\t\n\tif (mImage == null\n\t\t\t|| mDICOMViewerData == null)\n\t\treturn false;\n\t\n\t// Get the tool mode\n\tshort toolMode = mDICOMViewerData.getToolMode();\n\t\n\t// Handle touch event\n\tswitch(event.getAction() & MotionEvent.ACTION_MASK) {\n\t\n\tcase MotionEvent.ACTION_DOWN:\n\t\t\n\t\t// Double tap\n\t\tif ((System.currentTimeMillis() - mTouchTime) < 450) {\n\t\t\t\n\t\t\t// The touch mode is set to none\n\t\t\tmTouchMode = TouchMode.NONE;\n\t\t\tmTouchTime = 0;\n\t\t\t\n\t\t\t// If toolMode is DIMENSION, fit the image\n\t\t\t// in the screen.\n\t\t\tif (toolMode == ToolMode.DIMENSION) {\n\t\t\t\t\n\t\t\t\tif (mDICOMViewerData.getScaleMode() == ScaleMode.FITIN)\n\t\t\t\t\tfitIn();\n\t\t\t\telse\n\t\t\t\t\trealSize();\n\t\t\t\t\n\t\t\t} else if (toolMode == ToolMode.GRAYSCALE) {\n\t\t\t\t\n\t\t\t\tmDICOMViewerData.setWindowWidth(mImage.getWindowWidth());\n\t\t\t\tmDICOMViewerData.setWindowCenter(mImage.getWindowCenter());\n\t\t\t\tdraw();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t\n\t\t// Single tap\n\t\t} else if (mTouchMode == TouchMode.NONE) {\n\t\t\t\n\t\t\t// Set the touch time\n\t\t\tmTouchTime = System.currentTimeMillis();\n\t\t\t\n\t\t\t// Set the touch mode to ONE_FINGER\n\t\t\tmTouchMode = TouchMode.ONE_FINGER;\n\t\t\t\n\t\t\t// Set the mSavedMatrix\n\t\t\tmSavedMatrix.set(mMatrix);\n\t\t\t\n\t\t\t// Set the mTouchStartPoint value\n\t\t\tmTouchStartPoint.set(event.getX(), event.getY());\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tmTouchTime = 0;\n\t\t\t\n\t\t}\n\t\t\n\t\tbreak;\n\t\t\n\tcase MotionEvent.ACTION_POINTER_DOWN:\n\t\t\n\t\t// Check if there is two pointers\n\t\tif (event.getPointerCount() == 2) {\n\t\t\t\n\t\t\t// Set mTouchMode to TouchMode.TWO_FINGERS\n\t\t\tmTouchMode = TouchMode.TWO_FINGERS;\n\t\t\t\n\t\t\t// Reset mTouchTime\n\t\t\tmTouchTime = 0;\n\t\t\t\n\t\t\t// DIMENSION MODE\n\t\t\tif (toolMode == ToolMode.DIMENSION) {\n\t\t\t\t\n\t\t\t\t// Compute the olf dist between the two pointer.\n\t\t\t\tmTouchOldDist = Geometry.euclidianDistance(event.getX(0), event.getY(0),\n\t\t\t\t\t\tevent.getX(1), event.getY(1));\n\t\t\t\t\n\t\t\t\t// Compute the old scale factor as the mScaleFactor\n\t\t\t\t// at the begining of the touch event.\n\t\t\t\tmTouchOldScaleFactor = mScaleFactor;\n\t\t\t\t\n\t\t\t\t// Compute the midPoint\n\t\t\t\tif ((mImage.getWidth() * mScaleFactor) <= getMeasuredWidth()\n\t\t\t\t\t\t|| (mImage.getHeight() * mScaleFactor) <= getMeasuredHeight()) {\n\t\t\t\t\t\n\t\t\t\t\tmTouchMidPoint = new PointF(getMeasuredWidth() / 2f,\n\t\t\t\t\t\t\tgetMeasuredHeight() / 2f);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tmTouchMidPoint = Geometry.midPoint(event.getX(0), event.getY(0),\n\t\t\t\t\t\t\tevent.getX(1), event.getY(1));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else if (event.getPointerCount() == 3) {\n\t\t\t\n\t\t\t// Set the touch mode to three fingers\n\t\t\tmTouchMode = TouchMode.THREE_FINGERS;\n\t\t\t\n\t\t\t// Reset the mTouchTime\n\t\t\tmTouchTime = 0;\n\t\t\t\n\t\t\t// The start point is the average of the three fingers\n\t\t\t// just for the x coordinate\n\t\t\tmTouchStartPoint.set(\n\t\t\t\t\t(event.getX(0) + event.getX(1) + event.getX(2)) / 3f,\n\t\t\t\t\t0f);\n\t\t\t\n\t\t}\n\t\t\n\t\tbreak;\n\t\t\n\tcase MotionEvent.ACTION_MOVE:\n\t\t// If this is a ONE_FINGER touch mode\n\t\tif (mTouchMode == TouchMode.ONE_FINGER) {\n\t\t\t\n\t\t\t// Switch on toolMode\n\t\t\tswitch(toolMode) {\n\t\t\t\n\t\t\tcase ToolMode.DIMENSION:\n\t\t\t\t// Set the matrix\n\t\t\t\tmMatrix.set(mSavedMatrix);\n\t\t\t\t\n\t\t\t\t// Variable declaration\n\t\t\t\tfloat dx = 0;\n\t\t\t\tfloat dy = 0;\n\t\t\t\t\n\t\t\t\t// Compute the translation\n\t\t\t\tdx = event.getX() - mTouchStartPoint.x;\n\t\t\t\tdy = event.getY() - mTouchStartPoint.y;\n\t\t\t\t\n\t\t\t\t// TODO center the image if width or height > this size\n\t\t\t\t\n\t\t\t\t// Set the translation\n\t\t\t\tmMatrix.postTranslate(dx, dy);\n\t\t\t\t\n\t\t\t\t// Set the transformation matrix\n\t\t\t\tsetImageMatrix(mMatrix);\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase ToolMode.GRAYSCALE:\n\t\t\t\t\n\t\t\t\t// Compute the grayscale window center\n\t\t\t\tint center = (getMeasuredHeight() - 10 - (int) event.getY())\n\t\t\t\t\t* /*grayscaleWindow.getGrayLevel()*/mImage.getDataMax()\n\t\t\t\t\t/ (getMeasuredHeight());\n\t\t\t\t\n\t\t\t\t// Compute the grayscale window width\n\t\t\t\tint width = (int) event.getX() * /*grayscaleWindow.getGrayLevel()*/mImage.getDataMax()\n\t\t\t\t\t/ (getMeasuredWidth());\n\t\t\t\t\n\t\t\t\t// Set the grayscale window attributes\n\t\t\t\tmDICOMViewerData.setWindowWidth(width);\n\t\t\t\tmDICOMViewerData.setWindowCenter(center);\n\t\t\t\t\n\t\t\t\t// Compute the RGB image\n\t\t\t\tdraw();\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\t};\n\t\t\t\n\t\t} else if (mTouchMode == TouchMode.TWO_FINGERS\n\t\t\t\t&& toolMode == ToolMode.DIMENSION) {\n\t\t\t\n\t\t\t// Compute the distance between the two finger\n\t\t\tfloat newDist = Geometry.euclidianDistance(event.getX(0), event.getY(0),\n\t\t\t\t\tevent.getX(1), event.getY(1));\n\t\t\t\n\t\t\t// TODO necessary ?\n\t\t\t//if (newDist > 3f) {\n\t\t\tif (newDist != mTouchOldDist) {\n\t\t\t\t\n\t\t\t\t// Set the matrix\n\t\t\t\tmMatrix.set(mSavedMatrix);\n\t\t\t\t\n\t\t\t\t// Scale factor\n\t\t\t\tfloat scaleFactor = newDist / mTouchOldDist;\n\t\t\t\t\n\t\t\t\t// Compute the global scale factor\n\t\t\t\tmScaleFactor = mTouchOldScaleFactor * scaleFactor;\n\t\t\t\t\n\t\t\t\t// Set the scale center at the mid point of the event\n\t\t\t\tmMatrix.postScale(scaleFactor, scaleFactor, mTouchMidPoint.x, mTouchMidPoint.y);\n\t\t\t\t\n\t\t\t\t// Set the transformation matrix\n\t\t\t\tsetImageMatrix(mMatrix);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else if (mTouchMode == TouchMode.THREE_FINGERS) {\n\t\t\t\n\t\t\t// Get the current event average (3 fingers) x coordinate\n\t\t\tfloat eventAverageX = event.getX(0) + event.getX(1) + event.getX(2) / 3f;\n\t\t\t\n\t\t\t// If the distance is greater than 40% of the ImageView width, change\n\t\t\t// image.\n\t\t\tif (Geometry.euclidianDistance(eventAverageX, 0, mTouchStartPoint.x, 0)\n\t\t\t\t\t>= (0.4f * (float) getMeasuredWidth())) {\n\t\t\t\t\n\t\t\t\t// Get the direction of the touch event\n\t\t\t\tfloat directionX = eventAverageX - mTouchStartPoint.x;\n\t\t\t\t\n\t\t\t\t// Show next or previous image\n\t\t\t\tif (directionX < 0)\n\t\t\t\t\t((DICOMViewer) mContext).nextImage(null);\n\t\t\t\telse\n\t\t\t\t\t((DICOMViewer) mContext).previousImage(null);\n\t\t\t\t\t\n\t\t\t\t// Set the touchmode to none\n\t\t\t\tmTouchMode = TouchMode.NONE;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true; // Draw\n\t\t\n\tcase MotionEvent.ACTION_UP:\n\tcase MotionEvent.ACTION_POINTER_UP:\n\t\t\n\t\t// Set that this is the end of the touch event\n\t\tmTouchMode = TouchMode.NONE;\n\t\t\n\t\t// Check the dimension\n\t\tif (toolMode == ToolMode.DIMENSION) {\n\t\t\t\n\t\t\t// Compute mImageView width and height and the image\n\t\t\t// or the image size if is in ScaleMode real size\n\t\t\t// scaled width and height\n\t\t\tfloat imageWidth, imageHeight;\n\t\t\t\t\n\t\t\t// Check the scale mode to see if the image size is\n\t\t\t// smaller than the required size\n\t\t\tif (mDICOMViewerData.getScaleMode() == ScaleMode.FITIN) {\n\t\t\t\t\n\t\t\t\timageWidth = getMeasuredWidth();\n\t\t\t\timageHeight = getMeasuredHeight();\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\timageWidth = mImage.getWidth();\n\t\t\t\timageHeight = mImage.getHeight();\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfloat scaledImageWidth = (float) mImage.getWidth() * mScaleFactor;\n\t\t\tfloat scaledImageHeight = (float) mImage.getHeight() * mScaleFactor;\n\t\t\t\n\t\t\t// If the image fit int the window => fit in the window\n\t\t\tif (scaledImageWidth <= imageWidth\n\t\t\t\t\t&& scaledImageHeight <= imageHeight) {\n\t\t\t\t\n\t\t\t\tif (mDICOMViewerData.getScaleMode() == ScaleMode.FITIN)\n\t\t\t\t\tfitIn();\n\t\t\t\telse\n\t\t\t\t\trealSize();\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t// The ImageView size is needed\n\t\t\t\timageWidth = getMeasuredWidth();\n\t\t\t\timageHeight = getMeasuredHeight();\n\t\t\t\t\n\t\t\t\t// Get the matrix for the transformation\n\t\t\t\tmMatrix.set(getImageMatrix());\n\t\t\t\t\n\t\t\t\t// Set the source and destination rect points that correpond\n\t\t\t\t// to the upper left corner and the bottom right corner\n\t\t\t\tfloat[] srcRectPoints = { 0f, 0f, mImage.getWidth(), mImage.getHeight()};\n\t\t\t\tfloat[] dstRectPoints = new float[4];\n\t\t\t\t\n\t\t\t\t// Apply the image matrix transformation on these points\n\t\t\t\tmMatrix.mapPoints(dstRectPoints, srcRectPoints);\n\t\t\t\t\n\t\t\t\t// Init transalation variables\n\t\t\t\tfloat dx = 0f;\n\t\t\t\tfloat dy = 0f;\n\t\t\t\t\n\t\t\t\t// If the scaled image width is greater than the mImageView width\n\t\t\t\tif (scaledImageWidth > imageWidth) {\n\t\t\t\t\t\n\t\t\t\t\t// If there is black at the left of the screen\n\t\t\t\t\tif (dstRectPoints[0] > 0f) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdx = (-1f) * dstRectPoints[0];\n\t\t\t\t\t\n\t\t\t\t\t// Else if there is black at the right of the screen\n\t\t\t\t\t} else if (dstRectPoints[2] < imageWidth) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdx = imageWidth - dstRectPoints[2];\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\t// Compute the left border and the right border\n\t\t\t\t\t// to center the image\n\t\t\t\t\tfloat lx = (imageWidth - scaledImageWidth) / 2f;\n\t\t\t\t\tfloat rx = (imageWidth + scaledImageWidth) / 2f;\n\t\t\t\t\t\n\t\t\t\t\t// If the image is more left than the left border\n\t\t\t\t\tif (dstRectPoints[0] < lx) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdx = (-1f) * dstRectPoints[0] + lx;\n\t\t\t\t\t\n\t\t\t\t\t// Else if the image is more right than the right border\n\t\t\t\t\t} else if (dstRectPoints[2] > rx) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdx = rx - dstRectPoints[2];\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If the scaled image height is greater than the mImageView height\n\t\t\t\tif (scaledImageHeight > imageHeight) {\n\t\t\t\t\t\n\t\t\t\t\t// If there is black at the top of the screen\n\t\t\t\t\tif (dstRectPoints[1] > 0f) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdy = (-1f) * dstRectPoints[1];\n\t\t\t\t\t\t\n\t\t\t\t\t// Else if there is black at the bottom of the screen\n\t\t\t\t\t} else if (dstRectPoints[3] < imageHeight) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdy = imageHeight - dstRectPoints[3];\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\t// Compute the top border and the bottom border\n\t\t\t\t\t// to center the image\n\t\t\t\t\tfloat ty = (imageHeight - scaledImageHeight) / 2f;\n\t\t\t\t\tfloat by = (imageHeight + scaledImageHeight) / 2f;\n\t\t\t\t\t\n\t\t\t\t\t// If the image is upper the top border\n\t\t\t\t\tif (dstRectPoints[1] < 0f) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdy = (-1f) * dstRectPoints[1] + ty;\n\t\t\t\t\t\t\n\t\t\t\t\t// Else if the image is under the bottom border\n\t\t\t\t\t} else if (dstRectPoints[3] > imageHeight) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tdy = by - dstRectPoints[3];\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If there is translation to compute\n\t\t\t\tif (dx != 0f || dy != 0f) {\n\t\t\t\t\t\n\t\t\t\t\t// Add the translation\n\t\t\t\t\tmMatrix.postTranslate(dx, dy);\n\t\t\t\t\t\n\t\t\t\t\t// Set the image matrix\n\t\t\t\t\tsetImageMatrix(mMatrix);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tbreak;\n\t\n\t};\n\t\n\treturn true; // Do not draw\n}\n\n\n// ---------------------------------------------------------------\n// + FUNCTIONS\n// ---------------------------------------------------------------\n\n/**\n * Draw the image. \n */\npublic void draw() {\n\t\n\t// Declaration output pixels vector\n\tint[] outputPixels = new int[mImage.getDataLength()];\n\t\n\t// Get the gray scale window width\n\tint windowWidth = mDICOMViewerData.getWindowWidth();\n\t\n\t// Compute the window offset x the number of gray levels (256)\n\tint windowOffset = ((2 * mDICOMViewerData.getWindowCenter() - windowWidth)) / 2;\n\t\n\tswitch(mDICOMViewerData.getCLUTMode()) {\n\t\n\tcase CLUTMode.NORMAL:\n\t\tcomputeGrayscaleRGBImage(windowWidth, windowOffset, outputPixels);\n\t\tbreak;\n\t\t\n\tcase CLUTMode.INVERSE:\n\t\tcomputeInverseGrayscaleRGBImage(windowWidth, windowOffset, outputPixels);\n\t\tbreak;\n\t\t\n\tcase CLUTMode.RAINBOW:\n\t\tcomputeRainbowRGBImage(windowWidth, windowOffset, outputPixels);\n\t\tbreak;\n\t\t\n\t};\n\t\n\t// Create the bitmap\n\tBitmap imageBitmap = Bitmap.createBitmap(outputPixels, mImage.getWidth(),\n\t\t\tmImage.getHeight(), Bitmap.Config.ARGB_8888);\n\t\n\t// Check if image is to be rotated 90 degrees\n\tif (mIsRotate) {\n\t\tMatrix m = new Matrix();\n\t\tm.postRotate(90);\n\t\timageBitmap = Bitmap.createBitmap(imageBitmap,\n\t\t\t\t0,\t0, mImage.getWidth(), mImage.getHeight(), \n\t\t\t\tm, true);\n\t}\n\t\n\t\n\t// Set the image\n\tsetImageBitmap(imageBitmap);\n\t\n}\n\n/**\n * Should this image be rotated?\n * @param rotate\n */\npublic void toggleRotate() {\n\tmIsRotate = !mIsRotate;\n\tdraw();\n}\n\n/**\n * Reset size and position of the image regarding\n * mScaleMode variable.\n */\npublic void resetSize() {\n\t\n\tswitch(mDICOMViewerData.getScaleMode()) {\n\t\n\tcase ScaleMode.FITIN:\n\t\tfitIn();\n\t\tbreak;\n\t\n\tcase ScaleMode.REALSIZE:\n\t\trealSize();\n\t\tbreak;\n\t\t\n\t};\n\t\n}\n\n/**\n * Fit the image in the screen\n */\npublic void fitIn() {\n\t\n\t// Get the image width and height\n\tint imageWidth = mImage.getWidth();\n\tint imageHeight = mImage.getHeight();\n\t\n\t// Variable declaration\n\tfloat dx = 0f;\n\tfloat dy = 0f;\n\n\t// Get the image matrix\n\tmMatrix.set(getImageMatrix());\n\n\t// If the width of the ImageView is smaller than the\n\t// height, the image width is set to the ImageView width.\n\tif (getMeasuredWidth() <= getMeasuredHeight()) {\n\n\t\tfloat measuredWidth = getMeasuredWidth();\n\n\t\tmScaleFactor = measuredWidth / imageWidth;\n\n\t\t// Translate to center the image.\n\t\tdy = ((float) getMeasuredHeight() - imageHeight\n\t\t\t\t* mScaleFactor) / 2f;\n\t\t\n\t// Else the image height is set to the ImageView height.\n\t} else {\n\n\t\tfloat measuredHeight = getMeasuredHeight();\n\n\t\tmScaleFactor = measuredHeight / imageHeight;\n\n\t\t// Translate to center the image.\n\t\tdx = ((float) getMeasuredWidth() - imageWidth * mScaleFactor) / 2f;\n\n\t}\n\n\t// Set the transformation\n\tmMatrix.setScale(mScaleFactor, mScaleFactor, 0f, 0f);\n\tmMatrix.postTranslate(dx, dy);\n\n\t// Set the Image Matrix\n\tsetImageMatrix(mMatrix);\n\t\n}\n\n/**\n * Display the real size of the image.\n */\npublic void realSize() {\n\t\n\t// Get the image width and height\n\tint imageWidth = mImage.getWidth();\n\tint imageHeight = mImage.getHeight();\n\t\n\t// Compute the translation\n\tfloat dx = ((float) getMeasuredWidth() - imageWidth) / 2f;\n\t\n\tfloat dy = ((float) getMeasuredHeight() - imageHeight) / 2f;\n\t\n\tmScaleFactor = 1f;\n\n\tmMatrix.set(getImageMatrix());\n\n\t// Set the transformation\n\tmMatrix.setScale(mScaleFactor, mScaleFactor, 0f, 0f);\n\tmMatrix.postTranslate(dx, dy);\n\n\t// Set the Image Matrix\n\tsetImageMatrix(mMatrix);\n\t\n}\n\n/**\n * Center the image in X and/or Y regarding\n * the dimension of the scaled image and the dimension\n * of the ImageView.\n */\npublic void center() {\n\t\n\t// Scaled image sizes.\n\tfloat scaledImageWidth = (float) mImage.getWidth() * mScaleFactor;\n\tfloat scaledImageHeight = (float) mImage.getHeight() * mScaleFactor;\n\t\n\tif (scaledImageWidth <= getMeasuredWidth()\n\t\t\t&& scaledImageHeight <= getMeasuredHeight()) {\n\t\t\n\t\t// Compute the translation\n\t\tfloat dx = ((float) getMeasuredWidth() - scaledImageWidth) / 2f;\n\t\tfloat dy = ((float) getMeasuredHeight() - scaledImageHeight) / 2f;\n\t\t\n\t\tmMatrix.set(getImageMatrix());\n\t\t\n\t\tmMatrix.setScale(mScaleFactor, mScaleFactor, 0f, 0f);\n\t\tmMatrix.postTranslate(dx, dy);\n\t\t\n\t\t\n\t\t// Set the Image Matrix\n\t\tsetImageMatrix(mMatrix);\n\t\t\n\t}\n\t\n}\n\n/**\n * Set the LISA 16-Bit grayscale image.\n * \n * @param image\n */\npublic void setImage(LISAImageGray16Bit image) {\n\tmImage = image;\t\n}\n\n/**\n * Get the LISA 16-Bit grayscale image.\n * \n * @param image\n */\npublic LISAImageGray16Bit getImage() {\n\treturn mImage;\n}\n\n/**\n * Get the image scaled width.\n * \n * @return Image scaled width.\n */\npublic float getScaledImageWidth() {\n\treturn mImage.getWidth() * mScaleFactor;\n}\n\n/**\n * Get the image scaled height.\n * \n * @return Image scaled height.\n */\npublic float getScaledImageHeight() {\n\treturn mImage.getHeight() * mScaleFactor;\n}\n\n/**\n * @return Transformation matrix.\n */\npublic Matrix getMatrix() {\n\treturn mMatrix;\n}\n\n/**\n * Get the scale factor.\n * \n * @return Scale factor.\n */\npublic float getScaleFactor() {\n\treturn mScaleFactor;\n}\n\n/**\n * Set the scale factor and apply\n * it on the image.\n */\npublic void setScaleFactor(float scaleFactor) {\n\tmScaleFactor = scaleFactor;\n}\n\n/**\n * Set the DICOMViewer data.\n * @param data\n */\npublic void setDICOMViewerData(DICOMViewerData data) {\n\tmDICOMViewerData = data;\n}\n\n\n// ---------------------------------------------------------------\n// - FUNCTIONS\n// ---------------------------------------------------------------\n\n/**\n * Init this object.\n */\nprivate void init() {\n\t\n\t// Set the transformation attribute\n\tsuper.setScaleType(ImageView.ScaleType.MATRIX);\n\tmMatrix = new Matrix();\n\tmScaleFactor = 1f;\n\t\n\t// TOUCH\n\tmTouchMode = TouchMode.NONE;\n\tmSavedMatrix = new Matrix();\n\tmTouchTime = 0;\n\tmTouchStartPoint = new PointF();\n\tmTouchMidPoint = new PointF();\n\tmTouchOldDist = 1f;\n\t\n\t// Set the onTouchListener as this object\n\tsetOnTouchListener(this);\n}\n\n/**\n * Compute the RGB image using a grayscale LUT.\n * \n * @param windowWidth\n * @param windowOffset\n * @param outputPixels\n */\nprivate void computeGrayscaleRGBImage(int windowWidth, int windowOffset,\n\t\tint[] outputPixels) {\n\t\n\t// The gray level of the current pixel\n\tint pixelGrayLevel = 0;\n\t\n\tint[] mImageData = mImage.getData();\n\t\n\t// Compute the outputPixels vector (matrix)\n\tfor (int i = 0; i < mImageData.length; i++) {\t\t\n\t\t\tpixelGrayLevel = (256 * (mImageData[i] - windowOffset)\n\t\t\t\t/ windowWidth);\n\t\t\t\n\t\t\tpixelGrayLevel = (pixelGrayLevel > 255) ? 255 :\n\t\t\t\t((pixelGrayLevel < 0) ? 0 : pixelGrayLevel);\n\t\t\t\n\t\t\toutputPixels[i] = (0xFF << 24) | // alpha\n\t\t\t\t(pixelGrayLevel << 16) | // red\n\t\t\t\t(pixelGrayLevel << 8) | // green\n\t\t\t\tpixelGrayLevel; // blue\n\t}\n\t\n}\n\n/**\n * Compute the RGB image using an inverse grayscale LUT.\n * \n * @param windowWidth\n * @param windowOffset\n * @param outputPixels\n */\nprivate void computeInverseGrayscaleRGBImage(int windowWidth, int windowOffset,\n\t\tint[] outputPixels) {\n\t\n\t// The gray level of the current pixel\n\tint pixelGrayLevel = 0;\n\t\n\tint[] mImageData = mImage.getData();\n\t\n\t// Compute the outputPixels vector (matrix)\n\tfor (int i = 0; i < mImageData.length; i++) {\t\t\n\t\t\tpixelGrayLevel = 255 - (256 * (mImageData[i] - windowOffset)\n\t\t\t\t/ windowWidth);\n\t\t\t\n\t\t\tpixelGrayLevel = (pixelGrayLevel > 255) ? 255 :\n\t\t\t\t((pixelGrayLevel < 0) ? 0 : pixelGrayLevel);\n\t\t\t\n\t\t\toutputPixels[i] = (0xFF << 24) | // alpha\n\t\t\t\t(pixelGrayLevel << 16) | // red\n\t\t\t\t(pixelGrayLevel << 8) | // green\n\t\t\t\tpixelGrayLevel; // blue\n\t}\n\t\n}\n\n/**\n * Compute the RGB image using a rainbow CLUT.\n * \n * @param windowWidth\n * @param windowOffset\n * @param outputPixels\n */\nprivate void computeRainbowRGBImage(int windowWidth, int windowMin, int[] outputPixels) {\t\n\t\n\tfloat[] pixelHSV = new float[3];\n\t\n\tpixelHSV[0] = 0f;\n\tpixelHSV[1] = 240f;\n\tpixelHSV[2] = 1f;\n\t\n\tfloat mult = 0;\n\t\n\tint[] mImageData = mImage.getData();\n\t\n\t// Compute the outputPixels vector (matrix)\n\tfor (int i = 0; i < mImageData.length; i++) {\n\t\t\n\t\tmult = (mImageData[i] - windowMin) / (float) windowWidth;\n\t\t\n\t\tmult = (mult > 1f) ? 1f :\n\t\t\t((mult < 0f) ? 0f : mult);\n\t\t\n\t\tpixelHSV[0] = 300f - 360f * mult;\n\t\tpixelHSV[0] = (pixelHSV[0] > 300f) ? 300f :\n\t\t\t(pixelHSV[0] < -60f) ? 360-60f : pixelHSV[0];\n\t\t\t\n\t\t\n\t\tpixelHSV[2] = 4f * mult;\n\t\t\n\t\toutputPixels[i] = Color.HSVToColor(0xFF, pixelHSV);\n\t\t\n\t}\n\t\n}\n\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\android\\dicomviewer\\view\\DICOMImageView.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Write a long on 4 bytes.\n * \n * If the value correspond to the image length the maximum value\n * must be set as Integer.MAX_VALUE due to java array limitation:\n * the maximum length is the maximum integer value.\n * \n * @param value Long value.\n * @throws IOException\n */\n", "func_signal": "protected final void writeLong32(long value) throws IOException", "code": "{\n\t\n\tbyte[] long32Bytes = new byte[4];\n\t\n\tlong32Bytes[0] = (byte) ((value >> 24) & 0xff);\n\tlong32Bytes[1] = (byte) ((value >> 16) & 0xff);\n\tlong32Bytes[2] = (byte) ((value >> 8) & 0xff);\n\tlong32Bytes[3] = (byte) ((value) & 0xff);\n\t\n\tsuper.write(long32Bytes);\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\file\\LISAImageGray16BitWriter.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Write an array of float values.\n * \n * @param floatArray\n * @throws IOException\n */\n", "func_signal": "protected final void writeFloatArray(float[] floatArray) throws IOException", "code": "{\n\t\n\tfor (int i = 0; i < floatArray.length; i++) {\n\t\t\n\t\tint binaryValue = Float.floatToRawIntBits(floatArray[i]);\n\t\t\n\t\twriteLong32(binaryValue);\n\t\t\n\t}\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\file\\LISAImageGray16BitWriter.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * @param mWindowWidth the mWindowWidth to set\n */\n", "func_signal": "public void setWindowWidth(int mWindowWidth)", "code": "{\n\t\n\t// The minimum window width is 1\n\t// cf. DICOM documentation\n\tif (mWindowWidth <= 0)\n\t\tthis.mWindowWidth = 1;\n\telse\n\t\tthis.mWindowWidth = mWindowWidth;\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\android\\dicomviewer\\data\\DICOMViewerData.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "// This function is override to center the image\n// when the size of the screen change\n/* (non-Javadoc)\n * @see android.view.View#onSizeChanged(int, int, int, int)\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n\n\t// If the image is not null, center it\n\tif (mImage != null)\n\t\tcenter();\n\t\n\tsuper.onSizeChanged(w, h, oldw, oldh);\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\android\\dicomviewer\\view\\DICOMImageView.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * @return DICOM element value as a String or null\n * if there is an error.\n */\n", "func_signal": "public String getValueString()", "code": "{\n\t\n\t// If there is no value return null\n\tif (mValue == null)\n\t\treturn \"NULL\";\n\t\n\t// If no tag return a null object\n\tif (mDICOMTag == null)\n\t\treturn null;\n\t// TODO throw a DICOM Exception\n\t\n\t// Get the value representation\n\tDICOMValueRepresentation VR = mDICOMTag.getValueRepresentation();\n\t\n\tif (mDICOMTag.getTag() == 0x7fe00010) {\n\t\tif (VR.equals(\"OW\"))\n\t\t\treturn \"Pixel DICOM OW\";\n\t\telse if (VR.equals(\"OB\"))\n\t\t\treturn \"Pixel DICOM OB\";\n\t}\n\t\n\tif (VR.equals(\"US\") || VR.equals(\"SS\")) {\n\t\tif (mLength > 2)\n\t\t\treturn \"Array of numerical values coded in 2 bits\";\n\t} else if (VR.equals(\"UL\") || VR.equals(\"FL\") || VR.equals(\"SL\")) {\n\t\tif (mLength > 4)\n\t\t\treturn \"Array of numerical values coded in 4 bits\";\n\t} else if (VR.equals(\"FD\")) {\n\t\tif (mLength > 8)\n\t\t\treturn \"Array of numerical values coded in 8 bits\";\n\t}\n\t\n\t// Get the value class from the VR\n\t@SuppressWarnings(\"rawtypes\")\n\tClass valueClass = VR.getReturnType();\n\t\n\t// If type match return the string representing the value\n\tif (valueClass.equals(mValue.getClass())) {\n\t\tString toReturn = \"\" + valueClass.cast(mValue);\n\t\treturn toReturn;\n\t} else {\n\t\treturn null;\n\t}\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\dicom\\DICOMElement.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "// ---------------------------------------------------------------\n// + CONSTRUCTORS\n// ---------------------------------------------------------------\n", "func_signal": "public DICOMImageView(Context context)", "code": "{\n\tsuper(context);\n\n\tmContext = context;\n\tinit();\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\android\\dicomviewer\\view\\DICOMImageView.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Write an integer on 2 bytes.\n * @param value Integer value.\n * @throws IOException\n */\n", "func_signal": "protected final void writeInt16(int value) throws IOException", "code": "{\n\t\n\tbyte[] int16Bytes = new byte[2];\n\t\n\tint16Bytes[0] = (byte) ((value >> 8) & 0xff);\n\tint16Bytes[1] = (byte) ((value) & 0xff);\n\t\n\tsuper.write(int16Bytes);\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\file\\LISAImageGray16BitWriter.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "/**\n * Write an array of integer.\n * \n * Each integer value is coded in 2 bytes.\n * \n * @param intArray Array of integer values.\n * @throws IOException\n */\n", "func_signal": "protected final void writeInt16Array(int[] intArray) throws IOException", "code": "{\n\t\n\tbyte[] intArrayBytes = new byte[intArray.length * 2];\n\t\n\tfor (int i = 0; i < intArray.length; i ++) {\n\t\t\n\t\tintArrayBytes[(2 * i) + 0] =\n\t\t\t(byte) ((intArray[i] >> 8) & 0xff);\n\t\t\n\t\tintArrayBytes[(2 * i) + 1] =\n\t\t\t(byte) ((intArray[i]) & 0xff);\n\t\t\n\t}\n\t\n\tsuper.write(intArrayBytes);\n\t\n}", "path": "src\\be\\ac\\ulb\\lisa\\idot\\image\\file\\LISAImageGray16BitWriter.java", "repo_name": "nelsonjchen/droid-dicom-viewer", "stars": 11, "license": "other", "language": "java", "size": 4624}
{"docstring": "// $ANTLR start \"T__30\"\n", "func_signal": "public final void mT__30() throws RecognitionException", "code": "{\n    try {\n        int _type = T__30;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:26:7: ( '/*' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:26:9: '/*'\n        {\n        match(\"/*\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"TYPE_LIST\"\n", "func_signal": "public final void mTYPE_LIST() throws RecognitionException", "code": "{\n    try {\n        int _type = TYPE_LIST;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:14:11: ( 'list' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:14:13: 'list'\n        {\n        match(\"list\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"STRING\"\n", "func_signal": "public final void mSTRING() throws RecognitionException", "code": "{\n    try {\n        int _type = STRING;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:139:5: ( '\\\\'' ( ESC_SEQ | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\'' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:139:8: '\\\\'' ( ESC_SEQ | ~ ( '\\\\\\\\' | '\\\\'' ) )* '\\\\''\n        {\n        match('\\''); \n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:139:13: ( ESC_SEQ | ~ ( '\\\\\\\\' | '\\\\'' ) )*\n        loop11:\n        do {\n            int alt11=3;\n            int LA11_0 = input.LA(1);\n\n            if ( (LA11_0=='\\\\') ) {\n                alt11=1;\n            }\n            else if ( ((LA11_0>='\\u0000' && LA11_0<='&')||(LA11_0>='(' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='\\uFFFF')) ) {\n                alt11=2;\n            }\n\n\n            switch (alt11) {\n        \tcase 1 :\n        \t    // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:139:15: ESC_SEQ\n        \t    {\n        \t    mESC_SEQ(); \n\n        \t    }\n        \t    break;\n        \tcase 2 :\n        \t    // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:139:25: ~ ( '\\\\\\\\' | '\\\\'' )\n        \t    {\n        \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFF') ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        recover(mse);\n        \t        throw mse;}\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop11;\n            }\n        } while (true);\n\n        match('\\''); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"T__31\"\n", "func_signal": "public final void mT__31() throws RecognitionException", "code": "{\n    try {\n        int _type = T__31;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:27:7: ( '*/' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:27:9: '*/'\n        {\n        match(\"*/\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"T__37\"\n", "func_signal": "public final void mT__37() throws RecognitionException", "code": "{\n    try {\n        int _type = T__37;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:33:7: ( 'data;' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:33:9: 'data;'\n        {\n        match(\"data;\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "/**\n * BSONifies the given Throwable.\n * \n * @param throwable The throwable object to BSONify <i>(may be null)</i>.\n * @return The BSONified equivalent of the Throwable object <i>(may be null)</i>.\n */\n", "func_signal": "private DBObject bsonifyThrowable(final Throwable throwable)", "code": "{\n    DBObject result = null;\n   \n    if (throwable != null)\n    {\n        result = new BasicDBObject();\n        \n        nullSafePut(result, \"message\",    throwable.getMessage());\n        nullSafePut(result, \"stackTrace\", bsonifyStackTrace(throwable.getStackTrace()));\n    }\n    \n    return(result);\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\logging\\MongoDbAppender.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "/**\n * @see org.apache.log4j.AppenderSkeleton#append(org.apache.log4j.spi.LoggingEvent)\n */\n", "func_signal": "@Override\nprotected void append(final LoggingEvent loggingEvent)", "code": "{\n    DBObject bson = bsonifyLoggingEvent(loggingEvent);\n    \n    if (bson != null)\n    {\n        collection.insert(bson);\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\logging\\MongoDbAppender.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"T__41\"\n", "func_signal": "public final void mT__41() throws RecognitionException", "code": "{\n    try {\n        int _type = T__41;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:37:7: ( 'set<' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:37:9: 'set<'\n        {\n        match(\"set<\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"PROPERTY\"\n", "func_signal": "public final void mPROPERTY() throws RecognitionException", "code": "{\n    try {\n        int _type = PROPERTY;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:17:10: ( 'property' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:17:12: 'property'\n        {\n        match(\"property\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"TYPE_PRIMITIVE\"\n", "func_signal": "public final void mTYPE_PRIMITIVE() throws RecognitionException", "code": "{\n    try {\n        int _type = TYPE_PRIMITIVE;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:16:16: ( 'primitive' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:16:18: 'primitive'\n        {\n        match(\"primitive\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "/**\n * @param port The port to set <i>(must be > 0)</i>.\n */\n", "func_signal": "private void setPort(final int port)", "code": "{\n    // PRECONDITIONS\n    assert port > 0 : \"port must be > 0\";\n    \n    // Body\n    this.port = port;\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\logging\\MongoDbAppender.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"T__35\"\n", "func_signal": "public final void mT__35() throws RecognitionException", "code": "{\n    try {\n        int _type = T__35;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:31:7: ( ')]' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:31:9: ')]'\n        {\n        match(\")]\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "/**\n * Adds the given value to the given key, except if it's null (in which case this method does nothing).\n * \n * @param bson  The BSON object to add the key/value to <i>(must not be null)</i>.\n * @param key   The key of the object <i>(must not be null)</i>.\n * @param value The value of the object <i>(may be null)</i>.\n */\n", "func_signal": "private void nullSafePut(DBObject bson, final String key, final Object value)", "code": "{\n    if (value != null)\n    {\n        if (value instanceof String)\n        {\n            String stringValue = (String)value;\n            \n            if (stringValue.trim().length() > 0)\n            {\n                bson.put(key, stringValue);\n            }\n        }\n        else\n        {\n            bson.put(key, value);\n        }\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\logging\\MongoDbAppender.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"T__28\"\n", "func_signal": "public final void mT__28() throws RecognitionException", "code": "{\n    try {\n        int _type = T__28;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:24:7: ( '{}' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:24:9: '{}'\n        {\n        match(\"{}\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"ENUM\"\n", "func_signal": "public final void mENUM() throws RecognitionException", "code": "{\n    try {\n        int _type = ENUM;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:21:6: ( 'enum' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:21:8: 'enum'\n        {\n        match(\"enum\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"T__34\"\n", "func_signal": "public final void mT__34() throws RecognitionException", "code": "{\n    try {\n        int _type = T__34;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:30:7: ( '(' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:30:9: '('\n        {\n        match('('); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "/**\n * Adds the LocationInfo object to an existing BSON object. \n * \n * @param bson         The BSON object to add the location info to <i>(must not be null)</i>.\n * @param locationInfo The LocationInfo object to add to the BSON object <i>(may be null)</i>.\n */\n", "func_signal": "private void addLocationInformation(DBObject bson, final LocationInfo locationInfo)", "code": "{\n    if (locationInfo != null)\n    {\n        nullSafePut(bson, \"fileName\",   locationInfo.getFileName());\n        nullSafePut(bson, \"method\",     locationInfo.getMethodName());\n        nullSafePut(bson, \"lineNumber\", locationInfo.getLineNumber());\n        nullSafePut(bson, \"class\",      bsonifyClassName(locationInfo.getClassName()));\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\logging\\MongoDbAppender.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"OCTAL_ESC\"\n", "func_signal": "public final void mOCTAL_ESC() throws RecognitionException", "code": "{\n    try {\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:5: ( '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\\\\\' ( '0' .. '7' ) )\n        int alt15=3;\n        switch ( input.LA(1) ) {\n        case '\\\\':\n            {\n            switch ( input.LA(2) ) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n                {\n                switch ( input.LA(3) ) {\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                    {\n                    switch ( input.LA(4) ) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                        {\n                        alt15=1;\n                        }\n                        break;\n                    default:\n                        alt15=2;}\n\n                    }\n                    break;\n                default:\n                    alt15=3;}\n\n                }\n                break;\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n                {\n                switch ( input.LA(3) ) {\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                    {\n                    alt15=2;\n                    }\n                    break;\n                default:\n                    alt15=3;}\n\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 15, 1, input);\n\n                throw nvae;\n            }\n\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 15, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt15) {\n            case 1 :\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:9: '\\\\\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )\n                {\n                match('\\\\'); \n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:14: ( '0' .. '3' )\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:15: '0' .. '3'\n                {\n                matchRange('0','3'); \n\n                }\n\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:25: ( '0' .. '7' )\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:26: '0' .. '7'\n                {\n                matchRange('0','7'); \n\n                }\n\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:36: ( '0' .. '7' )\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:157:37: '0' .. '7'\n                {\n                matchRange('0','7'); \n\n                }\n\n\n                }\n                break;\n            case 2 :\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:158:9: '\\\\\\\\' ( '0' .. '7' ) ( '0' .. '7' )\n                {\n                match('\\\\'); \n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:158:14: ( '0' .. '7' )\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:158:15: '0' .. '7'\n                {\n                matchRange('0','7'); \n\n                }\n\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:158:25: ( '0' .. '7' )\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:158:26: '0' .. '7'\n                {\n                matchRange('0','7'); \n\n                }\n\n\n                }\n                break;\n            case 3 :\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:159:9: '\\\\\\\\' ( '0' .. '7' )\n                {\n                match('\\\\'); \n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:159:14: ( '0' .. '7' )\n                // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:159:15: '0' .. '7'\n                {\n                matchRange('0','7'); \n\n                }\n\n\n                }\n                break;\n\n        }\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"WS\"\n", "func_signal": "public final void mWS() throws RecognitionException", "code": "{\n    try {\n        int _type = WS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:118:5: ( ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' ) )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:118:9: ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' )\n        {\n        if ( (input.LA(1)>='\\t' && input.LA(1)<='\\n')||input.LA(1)=='\\r'||input.LA(1)==' ' ) {\n            input.consume();\n\n        }\n        else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;}\n\n        _channel=HIDDEN;\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "// $ANTLR start \"T__40\"\n", "func_signal": "public final void mT__40() throws RecognitionException", "code": "{\n    try {\n        int _type = T__40;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:36:7: ( '>' )\n        // com/lowereast/guiceymongo/data/generator/parser/GuiceyData.g:36:9: '>'\n        {\n        match('>'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "src\\main\\java\\com\\lowereast\\guiceymongo\\data\\generator\\parser\\GuiceyDataLexer.java", "repo_name": "mattinsler/com.lowereast.guiceymongo", "stars": 14, "license": "apache-2.0", "language": "java", "size": 5584}
{"docstring": "/*\n * Test for void alDeleteBuffers(int, IntBuffer)\n */\n//    @Test\n", "func_signal": "public void testAlDeleteBuffersintIntBuffer()", "code": "{\n    System.out.println(\"begin testAlDeleteBuffersintintArray\");\n    // try basic case\n    int[] buffers = new int[7];\n    al.alGenBuffers(7, buffers, 0);\n    for (int i = 0; i < 7; i++) {\n        assertFalse(buffers[i] == 0);\n        assertTrue(al.alIsBuffer(buffers[i]));\n    }\n    al.alDeleteBuffers(7, buffers, 0);\n    for (int i = 0; i < 7; i++) {\n        assertFalse(al.alIsBuffer(buffers[i]));\n    }\n\n    Exception ex = null;\n    // try exceptions\n    try {\n        al.alDeleteBuffers(7, (int[]) null, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n\n    ex = null;\n    try {\n        buffers = new int[5];\n        al.alGenBuffers(5, buffers, 0);\n        al.alDeleteBuffers(7, buffers, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n\n    try {\n        buffers = new int[7];\n        al.alDeleteBuffers(7, buffers, 0);\n        assertTrue(al.alGetError() != 0);\n    } catch (Exception e) {\n        fail(\"deleting an unfilled buffer list should generate an ALError but not an exception\");\n    }\n\n    System.out.println(\"end testAlDeleteBuffersintintArray\");\n}", "path": "test\\src\\com\\jogamp\\openal\\ALTest.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Generate an array of Sound3D buffers.\n *\n * @param numBuffers The number of Sound3D buffers to generate.\n *\n * @return an array of (initially enpty) Sound3D buffers.\n */\n", "func_signal": "public static Buffer[] generateBuffers(int numBuffers)", "code": "{\n  Buffer[] result = new Buffer[numBuffers];\n  int[] arr = new int[numBuffers];\n  al.alGenBuffers(numBuffers, arr, 0);\n\n  for (int i = 0; i < numBuffers; i++) {\n    result[i] = new Buffer(al, arr[i]);\n  }\n\n  return result;\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/*\n * Test for void alDeleteBuffers(int, int[])\n */\n//    @Test\n", "func_signal": "public void testAlDeleteBuffersintintArray()", "code": "{\n    System.out.println(\"begin testAlDeleteBuffersintIntBuffer\");\n    // try basic case\n    int[] buffers = new int[7];\n    al.alGenBuffers(7, buffers, 0);\n    for (int i = 0; i < 7; i++) {\n        assertFalse(buffers[i] == 0);\n        assertTrue(al.alIsBuffer(buffers[i]));\n    }\n    al.alDeleteBuffers(7, buffers, 0);\n    for (int i = 0; i < 7; i++) {\n        assertFalse(al.alIsBuffer(buffers[i]));\n    }\n\n    Exception ex = null;\n    // try exceptions\n    try {\n        al.alDeleteBuffers(7, (int[]) null, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n    ex = null;\n    try {\n        buffers = new int[5];\n        al.alGenBuffers(5, buffers, 0);\n        al.alDeleteBuffers(7, buffers, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n\n    ex = null;\n    try {\n        buffers = new int[5];\n        al.alDeleteBuffers(7, buffers, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n\n    try {\n        buffers = new int[7];\n        al.alDeleteBuffers(7, buffers, 0);\n        assertTrue(al.alGetError() != 0);\n    } catch (Exception e) {\n        fail(\"deleting an unfilled buffer list should generate an ALError but not an exception\");\n    }\n\n    System.out.println(\"end testAlDeleteBuffersintintArray\");\n}", "path": "test\\src\\com\\jogamp\\openal\\ALTest.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Loads a Sound3D buffer with the specified audio file.\n *\n * @param stream contains the stream associated with the audio file.\n *\n * @return a new Sound3D buffer containing the audio data from the\n * passed stream.\n *\n * @throws IOException If the stream cannot be read or some other IO error\n * occurs. \n * @throws UnsupportedAudioFileException If the format of the audio data is\n * not supported\n */\n", "func_signal": "public static Buffer loadBuffer(InputStream stream)\n  throws IOException, UnsupportedAudioFileException", "code": "{\n  Buffer result;\n  Buffer[] tmp = generateBuffers(1);\n  result = tmp[0];\n \n  if (!(stream instanceof BufferedInputStream)) {\n    stream = new BufferedInputStream(stream);\n  }\n  WAVData wd = WAVLoader.loadFromStream(stream);\n \n  result.configure(wd.data, wd.format, wd.freq);\n \n  return result;\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Iniitalize the Sound3D environment. This must be called before\n * other methods in the class can be used.\n */\n", "func_signal": "public static void init() throws ALException", "code": "{\n  al = ALFactory.getAL();\n  alc = ALFactory.getALC();\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Get the default ALC object. This object is used to access most of the \n * OpenAL context functionality.\n *\n * @return the ALC object\n */\n", "func_signal": "public static ALC getALC() throws ALException", "code": "{\n  initialize();\n  if (alc == null) {\n    alc = new ALCImpl();\n  }\n  return alc;\n}", "path": "src\\java\\com\\jogamp\\openal\\ALFactory.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "//*\n", "func_signal": "@Test public void testAlGenBuffersintIntBuffer()", "code": "{\n    System.out.println(\"begin testAlGenBuffersintintBuffer\");\n    // try basic case\n    try {\n    IntBuffer buffers = BufferUtils.newIntBuffer(7);\n    al.alGenBuffers(7,buffers);\n    for(int i = 0; i < 7; i++) {\n    assertFalse(buffers.get(i) == 0);\n    assertTrue(al.alIsBuffer(buffers.get(i)));\n    }\n    } catch (Exception e) {\n    fail(e.getMessage());\n    }\n\n    Exception ex = null;\n    // buffers == null\n    try {\n    IntBuffer buffers = null;\n    al.alGenBuffers(7,buffers);\n\n\n    } catch(IllegalArgumentException e) {\n    ex = e;\n    }\n    assertNotNull(ex);\n\n    ex = null;\n    // buffer too small\n    try {\n    IntBuffer buffers = BufferUtils.newIntBuffer(5);\n    al.alGenBuffers(7,buffers);\n    } catch(IllegalArgumentException e) {\n    ex = e;\n    }\n    assertNotNull(ex);\n\n    ex = null;\n    // buffer not direct\n    try {\n    IntBuffer buffers = IntBuffer.allocate(7);\n    al.alGenBuffers(7,buffers);\n    } catch(IllegalArgumentException e) {\n    ex = e;\n    }\n    assertNotNull(ex);\n    System.out.println(\"end testAlGenBuffersintintBuffer\");\n    }", "path": "test\\src\\com\\jogamp\\openal\\ALTest.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/*\n * Test for void alGenBuffers(int, int[])\n */\n", "func_signal": "@Test\npublic void testAlGenBuffersintintArray()", "code": "{\n\n    System.out.println(\"begin testAlGenBuffersintintArray\");\n    // try basic case\n    int[] buffers = new int[7];\n    al.alGenBuffers(7, buffers, 0);\n    for (int i = 0; i < 7; i++) {\n        assertFalse(buffers[i] == 0);\n        assertTrue(al.alIsBuffer(buffers[i]));\n    }\n\n    Exception ex = null;\n    // try exceptions\n    try {\n        buffers = null;\n        al.alGenBuffers(7, buffers, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n\n    ex = null;\n    try {\n        buffers = new int[5];\n        al.alGenBuffers(7, buffers, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n\n    System.out.println(\"end testAlGenBuffersintintArray\");\n\n}", "path": "test\\src\\com\\jogamp\\openal\\ALTest.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Loads a Sound3D Source with the specified audio stream. This is\n * functionally equivalent to generateSource(loadBuffer(stream));\n *\n * @param stream contains the stream associated with the audio file.\n *\n * @return a new Sound3D Source containing the audio data from the\n * passed stream.\n *\n * @throws IOException If the file cannot be found or some other IO error\n * occurs. \n * @throws UnsupportedAudioFileException If the format of the audio data is\n * not supported\n */\n", "func_signal": "public static Source loadSource(InputStream stream)\n  throws IOException, UnsupportedAudioFileException", "code": "{\n  Buffer buffer = loadBuffer(stream);\n\n  return generateSource(buffer);\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Loads a Sound3D buffer with the specified audio file.\n *\n * @param filename the name of the file to load.\n *\n * @return a new Sound3D buffer containing the audio data from the\n * specified file.\n *\n * @throws IOException If the file cannot be found or some other IO error\n * occurs. \n * @throws UnsupportedAudioFileException If the format of the audio data is\n * not supported\n */\n", "func_signal": "public static Buffer loadBuffer(String filename)\n  throws IOException, UnsupportedAudioFileException", "code": "{\n  Buffer result;\n  Buffer[] tmp = generateBuffers(1);\n  result = tmp[0];\n\n  WAVData wd = WAVLoader.loadFromFile(filename);\n  result.configure(wd.data, wd.format, wd.freq);\n\n  return result;\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Creates a new Sound3D Context for a specified device.\n *\n * @param device The device the Context is being created for.\n *\n * @return The new Sound3D context.\n */\n", "func_signal": "public static Context createContext(Device device)", "code": "{\n  Context result = null;\n  ALCcontext realContext = alc.alcCreateContext(device.realDevice, null);\n  result = new Context(alc, realContext, device);\n  return result;\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Loads a Sound3D Source with the specified audio file. This is\n * functionally equivalent to generateSource(loadBuffer(fileName));\n *\n * @param filename the name of the file to load.\n *\n * @return a new Sound3D Source containing the audio data from the\n * specified file.\n *\n * @throws IOException If the file cannot be found or some other IO error\n * occurs. \n * @throws UnsupportedAudioFileException If the format of the audio data is\n * not supported\n */\n", "func_signal": "public static Source loadSource(String filename)\n  throws IOException, UnsupportedAudioFileException", "code": "{\n  Buffer buffer = loadBuffer(filename);\n\n  return generateSource(buffer);\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Get the default AL object. This object is used to access most of the\n * OpenAL functionality.\n *\n * @return the AL object\n */\n", "func_signal": "public static AL getAL() throws ALException", "code": "{\n  initialize();\n  if (al == null) {\n    al = new ALImpl();\n  }\n  return al;\n}", "path": "src\\java\\com\\jogamp\\openal\\ALFactory.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/*\n * Test for void alGetBufferi(int, int, IntBuffer)\n */\n", "func_signal": "@Test\npublic void testAlGetBufferiintintIntBuffer() throws UnsupportedAudioFileException, IOException", "code": "{\n    int[] buffers = new int[1];\n    al.alGenBuffers(1, buffers, 0);\n    WAVData wd = loadTestWAV();\n    al.alBufferData(buffers[0], wd.format, wd.data, wd.size, wd.freq);\n\n    int[] size = new int[1];\n    int[] freq = new int[1];\n    al.alGetBufferi(buffers[0], AL.AL_SIZE, size, 0);\n    al.alGetBufferi(buffers[0], AL.AL_FREQUENCY, freq, 0);\n//        assertEquals(wd.size, size[0]);\n    assertEquals(wd.freq, freq[0]);\n\n    Exception ex = null;\n    try {\n        buffers = new int[1];\n        al.alGenBuffers(1, buffers, 0);\n        wd = loadTestWAV();\n        al.alBufferData(buffers[0], wd.format, wd.data, wd.size, wd.freq);\n        size = null;\n        al.alGetBufferi(buffers[0], AL.AL_SIZE, size, 0);\n\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n\n    assertNotNull(ex);\n    ex = null;\n    try {\n        buffers = new int[1];\n        al.alGenBuffers(1, buffers, 0);\n        wd = loadTestWAV();\n        al.alBufferData(buffers[0], wd.format, wd.data, wd.size, wd.freq);\n        size = new int[1];\n        al.alGetBufferi(buffers[0], AL.AL_SIZE, size, 0);\n\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n\n//         assertNotNull(ex);\n}", "path": "test\\src\\com\\jogamp\\openal\\ALTest.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Get the listener object associated with this Sound3D environment.\n *\n * @return The listener object.\n */\n", "func_signal": "public static Listener getListener()", "code": "{\n  if (listener == null) {\n    listener = new Listener(al);\n  }\n\n  return listener;\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Makes the specified context the current context.\n *\n * @param context the context to make current.\n */\n", "func_signal": "public static void makeContextCurrent(Context context)", "code": "{\n  ALCcontext realContext = null;\n\n  if (context != null) {\n    realContext = context.realContext;\n  }\n\n  alc.alcMakeContextCurrent(realContext);\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/** Initializes the OpenAL Utility Toolkit, creates an OpenAL\n    context and makes it current on the current thread. The ALut may\n    only be initialized on one thread at any given time. */\n", "func_signal": "public static synchronized void alutInit() throws ALException", "code": "{\n  if (context != null) {\n    throw new ALException(\"Already initialized on thread \" + initializingThread.getName());\n  }\n  if (alc == null) {\n    alc = ALFactory.getALC();\n  }\n  String deviceName = null;\n  ALCdevice d = alc.alcOpenDevice(deviceName);\n  if (d == null) {\n    throw new ALException(\"Error opening default OpenAL device\");\n  }\n  ALCcontext c = alc.alcCreateContext(d, null);\n  if (c == null) {\n    alc.alcCloseDevice(d);\n    throw new ALException(\"Error creating OpenAL context\");\n  }\n  alc.alcMakeContextCurrent(c);\n  if (alc.alcGetError(d) != 0) {\n    alc.alcDestroyContext(c);\n    alc.alcCloseDevice(d);\n    throw new ALException(\"Error making OpenAL context current\");\n  }\n  // Fully initialized; finish setup\n  device = d;\n  context = c;\n  initializingThread = Thread.currentThread();\n}", "path": "src\\java\\com\\jogamp\\openal\\util\\ALut.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/*\n * Test for void alGetBufferi(int, int, int[])\n */\n", "func_signal": "@Test\npublic void testAlGetBufferiintintintArray() throws UnsupportedAudioFileException, IOException", "code": "{\n    System.out.println(\"begin testAlGetBufferiintintintArray\");\n    int[] buffers = new int[1];\n    al.alGenBuffers(1, buffers, 0);\n    WAVData wd = loadTestWAV();\n    al.alBufferData(buffers[0], wd.format, wd.data, wd.size, wd.freq);\n    int[] size = new int[1];\n    int[] freq = new int[1];\n    al.alGetBufferi(buffers[0], AL.AL_SIZE, size, 0);\n    al.alGetBufferi(buffers[0], AL.AL_FREQUENCY, freq, 0);\n//        assertEquals(wd.size, size[0]);\n    assertEquals(wd.freq, freq[0]);\n\n    Exception ex = null;\n    try {\n        buffers = new int[1];\n        al.alGenBuffers(1, buffers, 0);\n        wd = loadTestWAV();\n        al.alBufferData(buffers[0], wd.format, wd.data, wd.size, wd.freq);\n        size = null;\n        al.alGetBufferi(buffers[0], AL.AL_SIZE, size, 0);\n\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n\n    assertNotNull(ex);\n\n    System.out.println(\"end testAlGetBufferiintintintArray\");\n}", "path": "test\\src\\com\\jogamp\\openal\\ALTest.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Opens the specifified audio device. \n *\n * @param deviceName The specified device name, On windows this will be \n * DirectSound3D. We will be automating device discovery in upcoming versions\n * of this class.\n *\n * @return The device described by the specifed name.\n */\n", "func_signal": "public static Device openDevice(String deviceName)", "code": "{\n  Device result = null;\n  ALCdevice realDevice = alc.alcOpenDevice(deviceName);\n  result = new Device(alc, realDevice);\n\n  return result;\n}", "path": "src\\java\\com\\jogamp\\openal\\sound3d\\AudioSystem3D.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/*\n * Test for void alBufferData(int, int, Buffer, int, int)\n */\n", "func_signal": "@Test\npublic void testAlBufferDataintintByteBufferintint() throws IOException, UnsupportedAudioFileException", "code": "{\n    System.out.println(\"begin testAlBufferDataintintByteBufferintint\");\n    int[] buffers = new int[1];\n    al.alGenBuffers(1, buffers, 0);\n    WAVData wd = loadTestWAV();\n\n    al.alBufferData(buffers[0], wd.format, wd.data, wd.size, wd.freq);\n    int[] tmp = new int[1];\n    al.alGetBufferi(buffers[0], AL.AL_SIZE, tmp, 0);\n    assertFalse(tmp[0] == 0);\n\n    Exception ex = null;\n    try {\n        buffers = new int[1];\n        al.alGenBuffers(1, buffers, 0);\n\n        al.alBufferData(buffers[0], AL.AL_FORMAT_STEREO16, null, 0, 0);\n    } catch (IllegalArgumentException e) {\n        ex = e;\n    }\n    assertNotNull(ex);\n\n    System.out.println(\"end testAlBufferDataintintByteBufferintint\");\n}", "path": "test\\src\\com\\jogamp\\openal\\ALTest.java", "repo_name": "mbien/joal", "stars": 8, "license": "other", "language": "java", "size": 1636}
{"docstring": "/**\n * Get the name of the article.\n * \n * The article name is an identifying name used when making API calls.\n * \n * @return\n */\n", "func_signal": "public String getName()", "code": "{\n\tString name;\n\t\n\ttry\n\t{\n\t\tname = this.article.getString(\"name\");\n\t}\n\tcatch (Exception e)\n\t{\n\t\tname = null;\n\t}\n\t\n\treturn name;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Adds an event listener.\n * \n * Adds a listener for a particular event to that events listener table.\n * \n * @param event\n * @param listener\n */\n", "func_signal": "public void addListener(String event, Listener listener)", "code": "{\n\tif (this.containsKey(event)) \n\t{\n\t\t((ListenerTable) this.get(event)).addListener(listener);\n\t}\n\telse\n\t{\n\t\tListenerTable observerTable = new ListenerTable();\n\t\tobserverTable.addListener(listener);\n\t\tthis.put(event, observerTable);\n\t}\n}", "path": "src\\com\\humblesoftware\\reddit\\Event.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the ID of the article.\n * \n * An article ID is the ID submitted in the permalink URL.\n * \n * @return\n */\n", "func_signal": "public String getID()", "code": "{\n\tString id;\n\t\n\ttry\n\t{\n\t\tid = this.article.getString(\"id\");\n\t}\n\tcatch (Exception e)\n\t{\n\t\tid = null;\n\t}\n\t\n\treturn id;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Dispatches a new HTTPRequestThread to get Subreddit JSON\n */\n", "func_signal": "public void loadJSON()", "code": "{\n\tHTTPRequestThread requestThread = new HTTPRequestThread(this.getSubredditURL());\n\tEvent.observe(requestThread, \"LOADED\", this.requestListener);\n\trequestThread.start();\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the URL of the articles thumbnail, if any.\n * \n * @return\n */\n", "func_signal": "public String getThumbnail()", "code": "{\n\tString thumbnail = \"\";\n\t\n\ttry\n\t{\n\t\tthumbnail = this.article.getString(\"thumbnail\");\n\t}\n\tcatch (Exception e)\n\t{\n\t\tthumbnail = null;\n\t}\n\t\n\treturn thumbnail;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Listener that gets the HTTPResponse and collects modhash and cookie from it\n */\n", "func_signal": "public void loadContent(final String jsonString)", "code": "{\n    JSONObject myData = null;\n\t\n    // Try to build a JSONObject from the text\n    try \n    {\n    \tmyData = new JSONObject(jsonString);\n    }\n    catch (Exception e)\n    {\n        System.out.println(\"EXCEPTION\");\n        e.printStackTrace();\n    }\n\n    if (myData == null)\n    {\n    \treturn;\n    }\n    \n    // Process the JSONObject\n    try\n    {\n        // The data node of the JSON object\n        myData = myData.getJSONObject(\"json\");\n        \n        JSONArray myErrors = myData.getJSONArray(\"errors\");\n        \n        myData = myData.getJSONObject(\"data\");\n        \n        this.modhash = myData.getString(\"modhash\");\n        this.redditSession = myData.getString(\"cookie\");\n        this.loginSuccess = true;\n    }\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthis.loginSuccess = false;\n\t\t}\n\t\t\n\t\tEvent.trigger(this, \"LOADED\");\n\t}", "path": "src\\com\\humblesoftware\\reddit\\json\\LoginRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Removes observer listener observing event of object. \n * \n * @param object\n * @param event\n * @param listener\n */\n", "func_signal": "public static synchronized void stopObserving(Object object, String event, Listener listener)", "code": "{\n\tif (Event.objectTable.containsKey(object))\n\t{\n\t\tEventTable eventTable = (EventTable) Event.objectTable.get(object);\n\t\tif (eventTable.containsKey(event))\n\t\t{\n\t\t\t((ListenerTable) eventTable.get(event)).remove(listener);\n\t\t}\n\t}\n}", "path": "src\\com\\humblesoftware\\reddit\\Event.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the URL of the article as a string.\n * \n * @return\n */\n", "func_signal": "public String getURL()", "code": "{\n    String url = \"\";\n    \n    try \n    {\n        url = this.article.getString(\"url\");\n    }\n    catch (Exception e)\n    {\n        System.out.println(\"EXCEPTION\");\n        e.printStackTrace();\n    }\n    \n    return url;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Removes all observers observing event of object.\n * \n * @param object\n * @param event\n */\n", "func_signal": "public static synchronized void stopObserving(Object object, String event)", "code": "{\n\tif (Event.objectTable.containsKey(object))\n\t{\n\t\t((EventTable) Event.objectTable.get(object)).remove(event);\n\t}\n}", "path": "src\\com\\humblesoftware\\reddit\\Event.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Constructor\n * \n * @param username\n * @param password\n */\n", "func_signal": "public LoginRedditJSON(String username, String password)", "code": "{\n\tthis.username = username;\n\tthis.password = password;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\LoginRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the number of up votes of the article.\n * \n * @return\n */\n", "func_signal": "public int getUps()", "code": "{\n    int ups = 0;\n    \n    try\n    {\n        ups = this.article.getInt(\"ups\");\n    }\n    catch (Exception e)\n    {\n        System.out.println(\"EXCEPTION\");\n        e.printStackTrace();\n    }\n    \n    return ups;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the domain of the article.\n * \n * @return\n */\n", "func_signal": "public String getDomain()", "code": "{\n\tString domain;\n\t\n\ttry\n\t{\n\t\tdomain = this.article.getString(\"domain\");\n\t}\n\tcatch (Exception e)\n\t{\n\t\tdomain = null;\n\t}\n\t\n\treturn domain;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * This constructor sets up the display.\n */\n", "func_signal": "public LoginScreen()", "code": "{\n    super();\n    \n    this.unameEditField.setLabel(\"Username: \");\n    this.unameEditField.setMargin(24,0,0,8);\n    \n    this.pwEditField.setLabel(\"Password: \");\n    this.pwEditField.setMargin(12,0,0,8);\n    \n    // Login button with listener\n    ButtonField loginButton = new ButtonField(\n    \t\"Login to Reddit\", \n    \tButtonField.FIELD_HCENTER|ButtonField.CONSUME_CLICK\n    );\n    loginButton.setMargin(16,0,0,0);\n    loginButton.setChangeListener( new FieldChangeListener()\n\t{\n\t\t/**\n\t \t* Called the login button is pressed\n\t \t*/\n\t\tpublic void fieldChanged(Field field, int context)\n\t\t{\n\t\t\t\tmakeSessionLogin();\n\t\t}\n\t});\n\n    this.add(unameEditField);\n    this.add(pwEditField);\n    this.add(loginButton);\n    \n    Event.observe(RedditSession.getInstance(), \"LOGIN\", this.loginListener);\n}", "path": "src\\com\\humblesoftware\\reddit\\screens\\LoginScreen.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Function to load JSON content from a JSON string.\n * \n * @param jsonString\n */\n", "func_signal": "public void loadContent(String jsonString)", "code": "{\n    JSONObject myData = null;\n    \n    // Try to build a JSONObject from the text\n    try \n    {\n    \tmyData = new JSONObject(jsonString);\n    }\n    catch (Exception e)\n    {\n        System.out.println(\"EXCEPTION\");\n        e.printStackTrace();\n    }\n    \n    if (myData != null)\n    {\n    \t// Process the JSONObject extracting the articles.\n        try\n        {\n            // The data node of the JSON object\n            myData = myData.getJSONObject(\"data\");\n            \n            // Get the array of articles\n            this.subredditArticles = myData.getJSONArray(\"children\");\n            \n            // If there are articles in the subreddit, get the first article.\n            if (this.getNumArticles() > 0) \n            {\n                this.setArticle(0);\n            } else {\n                this.article = null;\n            }\n            \n            this.requestSuccess = true;\n        }\n        catch (Exception e)\n        {\n        \tthis.requestSuccess = false;\n        }\n    }\n    \n    Event.trigger(this, \"LOADED\");\n\t}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the number of comments.\n * \n * @return\n */\n", "func_signal": "public int getNumComments()", "code": "{\n    int numComments = 0;\n    \n    try \n    {\n        numComments = this.article.getInt(\"num_comments\");\n    }\n    catch (Exception e)\n    {\n        System.out.println(\"EXCEPTION\");\n        e.printStackTrace();\n    }\n    \n    return numComments;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the score of the article.\n * \n * @return\n */\n", "func_signal": "public int getScore()", "code": "{\n    int score = 0;\n    \n    try \n    {\n        score = this.article.getInt(\"score\");\n    }\n    catch (Exception e)\n    {\n        System.out.println(\"EXCEPTION\");\n        e.printStackTrace();\n    }\n    \n    return score;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "//Stop the animation thread when the screen the field is on is\n//popped off of the display stack.\n", "func_signal": "protected void onUndisplay()", "code": "{\n    _animatorThread.stop();\n    super.onUndisplay();\n}", "path": "src\\com\\humblesoftware\\blackberry\\AnimatedGIFField.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Get the rating of the article as a percentage.\n * \n * This calculates the percentage of voters who liked the article.\n * \n * @return\n */\n", "func_signal": "public int getRating()", "code": "{\n    int ups = this.getUps();\n    int downs = this.getDowns();\n    \n    int rating = 0;\n    \n    rating = (int) java.lang.Math.floor(\n            100*(double)ups/(double)(downs+ups));\n    \n    return rating;\n}", "path": "src\\com\\humblesoftware\\reddit\\json\\ArticleRedditJSON.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Trigger an event in an object.\n * \n * Runs all listeners of an event in an object.\n * \n * @param object  Observed object.\n * @param event  Observed event.\n */\n", "func_signal": "public static synchronized void trigger(Object object, String event)", "code": "{\n\t// Get the objects event table\n\tEventTable eventTable = (EventTable) Event.objectTable.get(object);\n\tif (eventTable != null) {\n\t\t// Get the events listener table\n\t\tListenerTable listenerTable = (ListenerTable) eventTable.get(event);\n\t\tif (listenerTable != null) {\n\t\t\t// Execute all listener callbacks.\n\t\t\tEnumeration set = listenerTable.elements();\n\t\t\tListener listener;\n\t\t\twhile (set.hasMoreElements()) {\n\t\t\t\tlistener = (Listener) set.nextElement();\n\t\t\t\tlistener.callback(object);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\com\\humblesoftware\\reddit\\Event.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "//\t\n//\t/**\n//\t * Singleton event getter.\n//\t * \n//\t * This is used in creating new EventTables.  Not sure if it is needed\n//\t * @todo There is an error in observe(): Event.getInstance().new fixes\n//\t * @return\n//\t */\n", "func_signal": "protected static Event getInstance()", "code": "{\n\t\tif (singleton == null) \n\t\t{\n\t\t\tsingleton = new Event();\n\t\t}\n\t\t\n\t\treturn singleton;\n\t}", "path": "src\\com\\humblesoftware\\reddit\\Event.java", "repo_name": "HumbleSoftware/HelloReddit", "stars": 11, "license": "mit", "language": "java", "size": 143}
{"docstring": "/**\n * Sets up logging such that errors are logged to the console, and info level\n * logging is sent to a file in target directory.\n */\n", "func_signal": "public static void setupLogging() throws IOException", "code": "{\n    final String LAYOUT = \"[%t] %-5p %c - %m%n\";\n\n    Logger logger = Logger.getRootLogger();\n    logger.removeAllAppenders();\n    logger.setLevel(Level.INFO);\n\n    //\n    // Log to a file\n    //\n    FileAppender appender = new FileAppender();\n    appender.setLayout(new PatternLayout(LAYOUT));\n\n    // Maven sets a property basedir, but if the testcases are run outside Maven (e.g. by an IDE),\n    // then fall back to the working directory\n    String targetDir = System.getProperty(\"basedir\");\n    if (targetDir == null)\n        targetDir = System.getProperty(\"user.dir\");\n    String logFileName = targetDir + \"/target/log.txt\";\n\n    System.out.println(\"Log output will go to \" + logFileName);\n\n    appender.setFile(logFileName, false, false, 0);\n\n    appender.activateOptions();\n    logger.addAppender(appender);\n\n    //\n    // Add a console appender to show ERROR level errors on the console\n    //\n    ConsoleAppender consoleAppender = new ConsoleAppender();\n    consoleAppender.setLayout(new PatternLayout(LAYOUT));\n\n    LevelRangeFilter errorFilter = new LevelRangeFilter();\n    errorFilter.setAcceptOnMatch(true);\n    errorFilter.setLevelMin(Level.ERROR);\n    errorFilter.setLevelMax(Level.ERROR);\n    consoleAppender.addFilter(errorFilter);\n    consoleAppender.activateOptions();\n\n    logger.addAppender(consoleAppender);\n}", "path": "src\\testfw\\src\\main\\java\\org\\lilycms\\testfw\\TestHelper.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Creates a new index.\n *\n * <p>This first creates the HBase table for this index, then adds the index\n * definition to the indexmeta table.\n */\n", "func_signal": "public synchronized void createIndex(IndexDefinition indexDef) throws IOException", "code": "{\n  if (indexDef.getFields().size() == 0) {\n    throw new IllegalArgumentException(\"An IndexDefinition should contain at least one field.\");\n  }\n\n  byte[] jsonData = serialize(indexDef);\n\n  try {\n    IndexManager.createIndexDataTable(hbaseConf, this.dataTableName);\n  } catch (TableExistsException x) {\n    // do nothing\n  }\n  \n  Put put = new Put(Bytes.toBytes(indexDef.getFullName()));\n  put.add(Bytes.toBytes(\"meta\"), Bytes.toBytes(\"conf\"), jsonData);\n  metaTable.put(put);\n}", "path": "src\\hbaseindex\\src\\main\\java\\org\\lilycms\\hbaseindex\\IndexManager.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Returns the {@link Location} of an element (SAX flavor).\n *\n * @param attrs the element's attributes that hold the location information\n * @param description a description for the location (can be null)\n * @return a {@link Location} object\n */\n", "func_signal": "public static Location getLocation(Attributes attrs, String description)", "code": "{\n    String src = attrs.getValue(URI, SRC_ATTR);\n    if (src == null) {\n        return Location.UNKNOWN;\n    }\n\n    return new LocationImpl(description, src, getLine(attrs), getColumn(attrs));\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Add to the location stack all locations of an exception chain. This allows to have all possible\n * location information in the stacktrace, as some exceptions like SAXParseException don't output\n * their location in printStackTrace().\n * <p>\n * Traversal of the call chain stops at the first <code>Locatable</code> exception which is supposed\n * to handle the loction of its causes by itself.\n * <p>\n * This method is static as a convenience for {@link LocatedRuntimeException other implementations}\n * of locatable exceptions.\n *\n * @param self the current locatable exception\n * @param cause a cause of <code>self</code>\n */\n", "func_signal": "public static void addCauseLocations(MultiLocatable self, Throwable cause)", "code": "{\n    if (cause == null || cause instanceof Locatable) {\n        // Locatable handles its location itself\n        return;\n    }\n\n    // Add parent location first\n    addCauseLocations(self, cause.getCause());\n    // then ourselve's\n    Location loc = LocationUtils.getLocation(cause);\n    if (LocationUtils.isKnown(loc)) {\n        // Get the exception's short name\n        String name = cause.getClass().getName();\n        int pos = name.lastIndexOf('.');\n        if (pos != -1) {\n            name = name.substring(pos+1);\n        }\n        loc = new LocationImpl(\"[\" + name + \"]\", loc.getURI(), loc.getLineNumber(), loc.getColumnNumber());\n        self.addLocation(loc);\n    }\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocatedException.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Returns the line number of an element (DOM flavor)\n *\n * @param elem the element that holds the location information\n * @return the element's line number or <code>-1</code> if <code>elem</code>\n *         has no location information.\n */\n", "func_signal": "public static int getLine(Element elem)", "code": "{\n    Attr attr = elem.getAttributeNodeNS(URI, LINE_ATTR);\n    return attr != null ? Integer.parseInt(attr.getValue()) : -1;\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Constructor.\n *\n * <p>The supplied metaTableName should be an existing table. You can use the utility\n * method {@link #createIndexMetaTable} to create this table.\n *\n * @param metaTableName name of the HBase table in which to manage the configuration of the indexes\n */\n", "func_signal": "public IndexManager(Configuration hbaseConf, String metaTableName, String dataTableName) throws IOException", "code": "{\n  this.hbaseConf = hbaseConf;\n  hbaseAdmin = new HBaseAdmin(hbaseConf);\n  this.metaTableName = metaTableName;\n  this.dataTableName = dataTableName;\n  metaTable = new HTable(hbaseConf, this.metaTableName);\n  dataTable = new HTable(hbaseConf, this.dataTableName);\n  indexes = new TreeMap<String, Map<String, IndexDefinition>>(); \n}", "path": "src\\hbaseindex\\src\\main\\java\\org\\lilycms\\hbaseindex\\IndexManager.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Deletes an index.\n *\n * <p>This removes the index definition from the index meta table, disables the\n * index table and deletes it. If this would fail in between any of these operations,\n * it is up to the administrator to perform the remaining work.\n *\n * @throws IndexNotFoundException if the index does not exist.\n */\n", "func_signal": "public synchronized void deleteIndex(String table, String name) throws IOException, IndexNotFoundException", "code": "{\n  Get get = new Get(Bytes.toBytes(IndexDefinition.buildIndexName(table, name)));\n  Result result = metaTable.get(get);\n\n  if (result.isEmpty())\n    throw new IndexNotFoundException(table, name);\n\n  // TODO what if this fails in between operations? Log this...\n\n  Delete del = new Delete(Bytes.toBytes(IndexDefinition.buildIndexName(table, name)));\n  metaTable.delete(del);\n\n  //TODO: background mr to delete the indexed rows\n}", "path": "src\\hbaseindex\\src\\main\\java\\org\\lilycms\\hbaseindex\\IndexManager.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Returns the URI of an element (SAX flavor)\n *\n * @param attrs the element's attributes that hold the location information\n * @return the element's URI or \"<code>[unknown location]</code>\" if <code>attrs</code>\n *         has no location information.\n */\n", "func_signal": "public static String getURI(Attributes attrs)", "code": "{\n    String src = attrs.getValue(URI, SRC_ATTR);\n    return src != null ? src : LocationUtils.UNKNOWN_STRING;\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Extracts the identifier from an index row key.\n *\n * @param bytes byte array containing an encoded row key at its end (and arbitrary bytes before that).\n *              Note that this method modifies the bytes in case inverted is true!\n * @param inverted indicates if the bits in the row key are inverted (can be the case for descending ordering)\n */\n", "func_signal": "public static byte[] decode(byte[] bytes, boolean inverted)", "code": "{\n    if (inverted) {\n        for (int i = 0; i < Bytes.SIZEOF_INT; i++) {\n            int pos = bytes.length - i - 1;\n            bytes[pos] = bytes[pos] ^= 0xFF;\n        }\n    }\n\n    int keyLength = Bytes.toInt(bytes, bytes.length - Bytes.SIZEOF_INT);\n    byte[] result = new byte[keyLength];\n    System.arraycopy(bytes, bytes.length - keyLength - Bytes.SIZEOF_INT, result, 0, keyLength);\n    \n    if (inverted) {\n        for (int j = 0; j < result.length; j++) {\n            result[j] ^= 0xFF;\n        }\n    }\n\n    return result;\n}", "path": "src\\hbaseindex\\src\\main\\java\\org\\lilycms\\hbaseindex\\IdentifierEncoding.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Add location attributes to a set of SAX attributes.\n *\n * @param locator the <code>Locator</code> (can be null)\n * @param attrs the <code>Attributes</code> where locator information should be added\n */\n", "func_signal": "public static Attributes addLocationAttributes(Locator locator, Attributes attrs)", "code": "{\n    if (locator == null || attrs.getIndex(URI, SRC_ATTR) != -1) {\n        // No location information known, or already has it\n        return attrs;\n    }\n\n    // Get an AttributeImpl so that we can add new attributes.\n    AttributesImpl newAttrs = attrs instanceof AttributesImpl ?\n        (AttributesImpl)attrs : new AttributesImpl(attrs);\n\n    newAttrs.addAttribute(URI, SRC_ATTR, Q_SRC_ATTR, \"CDATA\", locator.getSystemId());\n    newAttrs.addAttribute(URI, LINE_ATTR, Q_LINE_ATTR, \"CDATA\", Integer.toString(locator.getLineNumber()));\n    newAttrs.addAttribute(URI, COL_ATTR, Q_COL_ATTR, \"CDATA\", Integer.toString(locator.getColumnNumber()));\n\n    return newAttrs;\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Returns the column number of an element (DOM flavor)\n *\n * @param elem the element that holds the location information\n * @return the element's column number or <code>-1</code> if <code>elem</code>\n *         has no location information.\n */\n", "func_signal": "public static int getColumn(Element elem)", "code": "{\n    Attr attr = elem.getAttributeNodeNS(URI, COL_ATTR);\n    return attr != null ? Integer.parseInt(attr.getValue()) : -1;\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Standard way of building the message of a {@link LocatableException}, as a Java-like\n * stack trace of locations.\n *\n * @param message the exception's message, given by <code>super.getMessage()</code> (can be null)\n * @param locations the location list (can be null)\n *\n * @return the message, or <code>null</code> no message and locations were given.\n */\n", "func_signal": "public static String getMessage(String message, List locations)", "code": "{\n    if (locations == null || locations.isEmpty()) {\n        return message;\n    }\n\n    // Produce a Java-like stacktrace with locations\n    StringBuffer buf = message == null ? new StringBuffer() : new StringBuffer(message);\n    for (int i = 0; i < locations.size(); i++) {\n        buf.append(\"\\n\\tat \").append(LocationUtils.toString((Location)locations.get(i)));\n    }\n    return buf.toString();\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocatedException.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Returns the column number of an element (SAX flavor)\n *\n * @param attrs the element's attributes that hold the location information\n * @return the element's column number or <code>-1</code> if <code>attrs</code>\n *         has no location information.\n */\n", "func_signal": "public static int getColumn(Attributes attrs)", "code": "{\n    String col = attrs.getValue(URI, COL_ATTR);\n    return col != null ? Integer.parseInt(col) : -1;\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Retrieves an Index.\n *\n * @throws IndexNotFoundException if the index does not exist\n */\n", "func_signal": "public Index getIndex(String table, String name) throws IOException, IndexNotFoundException", "code": "{\n  Get get = new Get(Bytes.toBytes(IndexDefinition.buildIndexName(table, name)));\n  Result result = metaTable.get(get);\n\n  if (result.isEmpty())\n    throw new IndexNotFoundException(table, name);\n\n  byte[] jsonData = result.getValue(Bytes.toBytes(\"meta\"), Bytes.toBytes(\"conf\"));\n  IndexDefinition indexDef = deserialize(table, name, jsonData);\n\n  HTable htable = new HTable(hbaseConf, dataTableName);\n  Index index = new Index(htable, indexDef);\n  return index;\n}", "path": "src\\hbaseindex\\src\\main\\java\\org\\lilycms\\hbaseindex\\IndexManager.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Returns the {@link Location} of an element (DOM flavor).\n *\n * @param elem the element that holds the location information\n * @param description a description for the location (if <code>null</code>, the element's name is used)\n * @return a {@link Location} object\n */\n", "func_signal": "public static Location getLocation(Element elem, String description)", "code": "{\n    Attr srcAttr = elem.getAttributeNodeNS(URI, SRC_ATTR);\n    if (srcAttr == null) {\n        return Location.UNKNOWN;\n    }\n\n    return new LocationImpl(description == null ? \"<\" + elem.getNodeName() + \">\" : description,\n                            srcAttr.getValue(), getLine(elem), getColumn(elem));\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Code to print out a complete bit representation of a byte,\n * including leading zeros.\n *\n * <p>Copied from\n * http://manniwood.wordpress.com/2009/10/21/javas-long-tobinarystringlong-l-come-on-guys/\n */\n", "func_signal": "private String toBinaryString(byte val)", "code": "{\n    StringBuilder sb = new StringBuilder(8);\n    for (int i = 7; i >= 0; i--) {\n        sb.append((testBit(val, i) == 0) ? '0' : '1');\n    }\n    return sb.toString();\n}", "path": "src\\hbaseindex\\src\\test\\java\\org\\lilycms\\hbaseindex\\test\\ByteComparisonTest.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Utility method for creating the indexmeta table.\n */\n", "func_signal": "public static void createIndexMetaTable(Configuration hbaseConf, String metaTableName) throws IOException", "code": "{\n  HBaseAdmin hbaseAdmin = new HBaseAdmin(hbaseConf);\n  HTableDescriptor table = new HTableDescriptor(metaTableName);\n  HColumnDescriptor family = new HColumnDescriptor(\"meta\");\n  table.addFamily(family);\n  hbaseAdmin.createTable(table);\n}", "path": "src\\hbaseindex\\src\\main\\java\\org\\lilycms\\hbaseindex\\IndexManager.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Test searching on a subset of the fields.\n */\n", "func_signal": "@Test\npublic void testPartialQuery() throws Exception", "code": "{\n    final String INDEX_NAME = \"partialQuery\";\n    IndexManager indexManager = new IndexManager(TEST_UTIL.getConfiguration());\n\n    IndexDefinition indexDef = new IndexDefinition(INDEX_NAME, INDEX_NAME);\n    indexDef.addStringField(\"field1\");\n    indexDef.addIntegerField(\"field2\");\n    indexDef.addStringField(\"field3\");\n\n    indexManager.createIndex(indexDef);\n\n    Index index = indexManager.getIndex(INDEX_NAME, INDEX_NAME);\n\n    for (int i = 0; i < 3; i++) {\n        IndexEntry entry = new IndexEntry();\n        entry.addField(\"field1\", \"value A \" + i);\n        entry.addField(\"field2\", 10 + i);\n        entry.addField(\"field3\", \"value B \" + i);\n        index.addEntry(entry, Bytes.toBytes(\"key\" + i));\n    }\n\n    // Search only on the leftmost field\n    {\n        Query query = new Query();\n        query.addEqualsCondition(\"field1\", \"value A 0\");\n        QueryResult result = index.performQuery(query);\n        assertResultIds(result, \"key0\");\n    }\n\n    // Search only on the two leftmost fields\n    {\n        Query query = new Query();\n        query.addEqualsCondition(\"field1\", \"value A 0\");\n        query.addEqualsCondition(\"field2\", 10);\n        QueryResult result = index.performQuery(query);\n        assertResultIds(result, \"key0\");\n    }\n\n    // Search only on the two leftmost fields, with range query on the second\n    {\n        Query query = new Query();\n        query.addEqualsCondition(\"field1\", \"value A 0\");\n        query.setRangeCondition(\"field2\", 9, 11);\n        QueryResult result = index.performQuery(query);\n        assertResultIds(result, \"key0\");\n    }\n\n    // Try searching on just the second field, should give error\n    {\n        Query query = new Query();\n        query.addEqualsCondition(\"field2\", 10);\n        try {\n            index.performQuery(query);\n            fail(\"Exception expected\");\n        } catch (MalformedQueryException e) {\n            //System.out.println(e.getMessage());\n        }\n    }\n\n    // Try searching on just the second field, should give error\n    {\n        Query query = new Query();\n        query.setRangeCondition(\"field2\", 9, 11);\n        try {\n            index.performQuery(query);\n            fail(\"Exception expected\");\n        } catch (MalformedQueryException e) {\n            //System.out.println(e.getMessage());\n        }\n    }\n\n    // Try not using all fields from left to right, should give error\n    {\n        Query query = new Query();\n        query.addEqualsCondition(\"field1\", \"value A 0\");\n        // skip field 2\n        query.addEqualsCondition(\"field3\", \"value B 0\");\n        try {\n            index.performQuery(query);\n            fail(\"Exception expected\");\n        } catch (MalformedQueryException e) {\n            //System.out.println(e.getMessage());\n        }\n    }\n\n    // Try not using all fields from left to right, should give error\n    {\n        Query query = new Query();\n        query.addEqualsCondition(\"field1\", \"value A 0\");\n        // skip field 2\n        query.setRangeCondition(\"field3\", \"a\", \"b\");\n        try {\n            index.performQuery(query);\n            fail(\"Exception expected\");\n        } catch (MalformedQueryException e) {\n            //System.out.println(e.getMessage());\n        }\n    }\n}", "path": "src\\hbaseindex\\src\\test\\java\\org\\lilycms\\hbaseindex\\test\\IndexTest.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Converts characters above ASCII to their ASCII equivalents.  For example,\n * accents are removed from accented characters.\n */\n", "func_signal": "public static String foldToASCII(String string)", "code": "{\n  char[] input = string.toCharArray();\n  int length = string.length();\n  int outputPos;\n\n  // Worst-case length required:\n  final int maxSizeNeeded = 4 * length;\n  char[] output = new char[maxSizeNeeded];\n\n  outputPos = 0;\n\n  for (int pos = 0 ; pos < length ; ++pos) {\n    final char c = input[pos];\n\n    // Quick test: if it's not in range then just keep current character\n    if (c < '\\u0080') {\n      output[outputPos++] = c;\n    } else {\n      switch (c) {\n        case '\\u00C0': // \u00c0  [LATIN CAPITAL LETTER A WITH GRAVE]\n        case '\\u00C1': // \u00c1  [LATIN CAPITAL LETTER A WITH ACUTE]\n        case '\\u00C2': // \u00c2  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX]\n        case '\\u00C3': // \u00c3  [LATIN CAPITAL LETTER A WITH TILDE]\n        case '\\u00C4': // \u00c4  [LATIN CAPITAL LETTER A WITH DIAERESIS]\n        case '\\u00C5': // \u00c5  [LATIN CAPITAL LETTER A WITH RING ABOVE]\n        case '\\u0100': // \u0100  [LATIN CAPITAL LETTER A WITH MACRON]\n        case '\\u0102': // \u0102  [LATIN CAPITAL LETTER A WITH BREVE]\n        case '\\u0104': // \u0104  [LATIN CAPITAL LETTER A WITH OGONEK]\n        case '\\u018F': // \u018f  http://en.wikipedia.org/wiki/Schwa  [LATIN CAPITAL LETTER SCHWA]\n        case '\\u01CD': // \u01cd  [LATIN CAPITAL LETTER A WITH CARON]\n        case '\\u01DE': // \u01de  [LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON]\n        case '\\u01E0': // \u01e0  [LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON]\n        case '\\u01FA': // \u01fa  [LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE]\n        case '\\u0200': // \u0200  [LATIN CAPITAL LETTER A WITH DOUBLE GRAVE]\n        case '\\u0202': // \u0202  [LATIN CAPITAL LETTER A WITH INVERTED BREVE]\n        case '\\u0226': // \u0226  [LATIN CAPITAL LETTER A WITH DOT ABOVE]\n        case '\\u023A': // \u023a  [LATIN CAPITAL LETTER A WITH STROKE]\n        case '\\u1D00': // \u1d00  [LATIN LETTER SMALL CAPITAL A]\n        case '\\u1E00': // \u1e00  [LATIN CAPITAL LETTER A WITH RING BELOW]\n        case '\\u1EA0': // \u1ea0  [LATIN CAPITAL LETTER A WITH DOT BELOW]\n        case '\\u1EA2': // \u1ea2  [LATIN CAPITAL LETTER A WITH HOOK ABOVE]\n        case '\\u1EA4': // \u1ea4  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE]\n        case '\\u1EA6': // \u1ea6  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE]\n        case '\\u1EA8': // \u1ea8  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE]\n        case '\\u1EAA': // \u1eaa  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE]\n        case '\\u1EAC': // \u1eac  [LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW]\n        case '\\u1EAE': // \u1eae  [LATIN CAPITAL LETTER A WITH BREVE AND ACUTE]\n        case '\\u1EB0': // \u1eb0  [LATIN CAPITAL LETTER A WITH BREVE AND GRAVE]\n        case '\\u1EB2': // \u1eb2  [LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE]\n        case '\\u1EB4': // \u1eb4  [LATIN CAPITAL LETTER A WITH BREVE AND TILDE]\n        case '\\u1EB6': // \u1eb6  [LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW]\n        case '\\u24B6': // \u24b6  [CIRCLED LATIN CAPITAL LETTER A]\n        case '\\uFF21': // \uff21  [FULLWIDTH LATIN CAPITAL LETTER A]\n          output[outputPos++] = 'A';\n          break;\n        case '\\u00E0': // \u00e0  [LATIN SMALL LETTER A WITH GRAVE]\n        case '\\u00E1': // \u00e1  [LATIN SMALL LETTER A WITH ACUTE]\n        case '\\u00E2': // \u00e2  [LATIN SMALL LETTER A WITH CIRCUMFLEX]\n        case '\\u00E3': // \u00e3  [LATIN SMALL LETTER A WITH TILDE]\n        case '\\u00E4': // \u00e4  [LATIN SMALL LETTER A WITH DIAERESIS]\n        case '\\u00E5': // \u00e5  [LATIN SMALL LETTER A WITH RING ABOVE]\n        case '\\u0101': // \u0101  [LATIN SMALL LETTER A WITH MACRON]\n        case '\\u0103': // \u0103  [LATIN SMALL LETTER A WITH BREVE]\n        case '\\u0105': // \u0105  [LATIN SMALL LETTER A WITH OGONEK]\n        case '\\u01CE': // \u01ce  [LATIN SMALL LETTER A WITH CARON]\n        case '\\u01DF': // \u01df  [LATIN SMALL LETTER A WITH DIAERESIS AND MACRON]\n        case '\\u01E1': // \u01e1  [LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON]\n        case '\\u01FB': // \u01fb  [LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE]\n        case '\\u0201': // \u0201  [LATIN SMALL LETTER A WITH DOUBLE GRAVE]\n        case '\\u0203': // \u0203  [LATIN SMALL LETTER A WITH INVERTED BREVE]\n        case '\\u0227': // \u0227  [LATIN SMALL LETTER A WITH DOT ABOVE]\n        case '\\u0250': // \u0250  [LATIN SMALL LETTER TURNED A]\n        case '\\u0259': // \u0259  [LATIN SMALL LETTER SCHWA]\n        case '\\u025A': // \u025a  [LATIN SMALL LETTER SCHWA WITH HOOK]\n        case '\\u1D8F': // \u1d8f  [LATIN SMALL LETTER A WITH RETROFLEX HOOK]\n        case '\\u1D95': // \u1d95  [LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK]\n        case '\\u1E01': // \u1ea1  [LATIN SMALL LETTER A WITH RING BELOW]\n        case '\\u1E9A': // \u1ea3  [LATIN SMALL LETTER A WITH RIGHT HALF RING]\n        case '\\u1EA1': // \u1ea1  [LATIN SMALL LETTER A WITH DOT BELOW]\n        case '\\u1EA3': // \u1ea3  [LATIN SMALL LETTER A WITH HOOK ABOVE]\n        case '\\u1EA5': // \u1ea5  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE]\n        case '\\u1EA7': // \u1ea7  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE]\n        case '\\u1EA9': // \u1ea9  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE]\n        case '\\u1EAB': // \u1eab  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE]\n        case '\\u1EAD': // \u1ead  [LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW]\n        case '\\u1EAF': // \u1eaf  [LATIN SMALL LETTER A WITH BREVE AND ACUTE]\n        case '\\u1EB1': // \u1eb1  [LATIN SMALL LETTER A WITH BREVE AND GRAVE]\n        case '\\u1EB3': // \u1eb3  [LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE]\n        case '\\u1EB5': // \u1eb5  [LATIN SMALL LETTER A WITH BREVE AND TILDE]\n        case '\\u1EB7': // \u1eb7  [LATIN SMALL LETTER A WITH BREVE AND DOT BELOW]\n        case '\\u2090': // \u2090  [LATIN SUBSCRIPT SMALL LETTER A]\n        case '\\u2094': // \u2094  [LATIN SUBSCRIPT SMALL LETTER SCHWA]\n        case '\\u24D0': // \u24d0  [CIRCLED LATIN SMALL LETTER A]\n        case '\\u2C65': // \u2c65  [LATIN SMALL LETTER A WITH STROKE]\n        case '\\u2C6F': // \u2c6f  [LATIN CAPITAL LETTER TURNED A]\n        case '\\uFF41': // \uff41  [FULLWIDTH LATIN SMALL LETTER A]\n          output[outputPos++] = 'a';\n          break;\n        case '\\uA732': // \ua732  [LATIN CAPITAL LETTER AA]\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'A';\n          break;\n        case '\\u00C6': // \u00c6  [LATIN CAPITAL LETTER AE]\n        case '\\u01E2': // \u01e2  [LATIN CAPITAL LETTER AE WITH MACRON]\n        case '\\u01FC': // \u01fc  [LATIN CAPITAL LETTER AE WITH ACUTE]\n        case '\\u1D01': // \u1d01  [LATIN LETTER SMALL CAPITAL AE]\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'E';\n          break;\n        case '\\uA734': // \ua734  [LATIN CAPITAL LETTER AO]\n          output[outputPos++] = 'A';                    \n          output[outputPos++] = 'O';\n          break;\n        case '\\uA736': // \ua736  [LATIN CAPITAL LETTER AU]\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'U';\n          break;\n        case '\\uA738': // \ua738  [LATIN CAPITAL LETTER AV]\n        case '\\uA73A': // \ua73a  [LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR]\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'V';\n          break;\n        case '\\uA73C': // \ua73c  [LATIN CAPITAL LETTER AY]\n          output[outputPos++] = 'A';\n          output[outputPos++] = 'Y';\n          break;\n        case '\\u249C': // \u249c  [PARENTHESIZED LATIN SMALL LETTER A]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'a';\n          output[outputPos++] = ')';\n          break;\n        case '\\uA733': // \ua733  [LATIN SMALL LETTER AA]\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'a';\n          break;\n        case '\\u00E6': // \u00e6  [LATIN SMALL LETTER AE]\n        case '\\u01E3': // \u01e3  [LATIN SMALL LETTER AE WITH MACRON]\n        case '\\u01FD': // \u01fd  [LATIN SMALL LETTER AE WITH ACUTE]\n        case '\\u1D02': // \u1d02  [LATIN SMALL LETTER TURNED AE]\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'e';\n          break;\n        case '\\uA735': // \ua735  [LATIN SMALL LETTER AO]\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'o';\n          break;\n        case '\\uA737': // \ua737  [LATIN SMALL LETTER AU]\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'u';\n          break;\n        case '\\uA739': // \ua739  [LATIN SMALL LETTER AV]\n        case '\\uA73B': // \ua73b  [LATIN SMALL LETTER AV WITH HORIZONTAL BAR]\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'v';\n          break;\n        case '\\uA73D': // \ua73d  [LATIN SMALL LETTER AY]\n          output[outputPos++] = 'a';\n          output[outputPos++] = 'y';\n          break;\n        case '\\u0181': // \u0181  [LATIN CAPITAL LETTER B WITH HOOK]\n        case '\\u0182': // \u0182  [LATIN CAPITAL LETTER B WITH TOPBAR]\n        case '\\u0243': // \u0243  [LATIN CAPITAL LETTER B WITH STROKE]\n        case '\\u0299': // \u0299  [LATIN LETTER SMALL CAPITAL B]\n        case '\\u1D03': // \u1d03  [LATIN LETTER SMALL CAPITAL BARRED B]\n        case '\\u1E02': // \u1e02  [LATIN CAPITAL LETTER B WITH DOT ABOVE]\n        case '\\u1E04': // \u1e04  [LATIN CAPITAL LETTER B WITH DOT BELOW]\n        case '\\u1E06': // \u1e06  [LATIN CAPITAL LETTER B WITH LINE BELOW]\n        case '\\u24B7': // \u24b7  [CIRCLED LATIN CAPITAL LETTER B]\n        case '\\uFF22': // \uff22  [FULLWIDTH LATIN CAPITAL LETTER B]\n          output[outputPos++] = 'B';\n          break;\n        case '\\u0180': // \u0180  [LATIN SMALL LETTER B WITH STROKE]\n        case '\\u0183': // \u0183  [LATIN SMALL LETTER B WITH TOPBAR]\n        case '\\u0253': // \u0253  [LATIN SMALL LETTER B WITH HOOK]\n        case '\\u1D6C': // \u1d6c  [LATIN SMALL LETTER B WITH MIDDLE TILDE]\n        case '\\u1D80': // \u1d80  [LATIN SMALL LETTER B WITH PALATAL HOOK]\n        case '\\u1E03': // \u1e03  [LATIN SMALL LETTER B WITH DOT ABOVE]\n        case '\\u1E05': // \u1e05  [LATIN SMALL LETTER B WITH DOT BELOW]\n        case '\\u1E07': // \u1e07  [LATIN SMALL LETTER B WITH LINE BELOW]\n        case '\\u24D1': // \u24d1  [CIRCLED LATIN SMALL LETTER B]\n        case '\\uFF42': // \uff42  [FULLWIDTH LATIN SMALL LETTER B]\n          output[outputPos++] = 'b';\n          break;\n        case '\\u249D': // \u249d  [PARENTHESIZED LATIN SMALL LETTER B]\n          output[outputPos++] = '(';                    \n          output[outputPos++] = 'b';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00C7': // \u00c7  [LATIN CAPITAL LETTER C WITH CEDILLA]\n        case '\\u0106': // \u0106  [LATIN CAPITAL LETTER C WITH ACUTE]\n        case '\\u0108': // \u0108  [LATIN CAPITAL LETTER C WITH CIRCUMFLEX]\n        case '\\u010A': // \u010a  [LATIN CAPITAL LETTER C WITH DOT ABOVE]\n        case '\\u010C': // \u010c  [LATIN CAPITAL LETTER C WITH CARON]\n        case '\\u0187': // \u0187  [LATIN CAPITAL LETTER C WITH HOOK]\n        case '\\u023B': // \u023b  [LATIN CAPITAL LETTER C WITH STROKE]\n        case '\\u0297': // \u0297  [LATIN LETTER STRETCHED C]\n        case '\\u1D04': // \u1d04  [LATIN LETTER SMALL CAPITAL C]\n        case '\\u1E08': // \u1e08  [LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE]\n        case '\\u24B8': // \u24b8  [CIRCLED LATIN CAPITAL LETTER C]\n        case '\\uFF23': // \uff23  [FULLWIDTH LATIN CAPITAL LETTER C]\n          output[outputPos++] = 'C';\n          break;\n        case '\\u00E7': // \u00e7  [LATIN SMALL LETTER C WITH CEDILLA]\n        case '\\u0107': // \u0107  [LATIN SMALL LETTER C WITH ACUTE]\n        case '\\u0109': // \u0109  [LATIN SMALL LETTER C WITH CIRCUMFLEX]\n        case '\\u010B': // \u010b  [LATIN SMALL LETTER C WITH DOT ABOVE]\n        case '\\u010D': // \u010d  [LATIN SMALL LETTER C WITH CARON]\n        case '\\u0188': // \u0188  [LATIN SMALL LETTER C WITH HOOK]\n        case '\\u023C': // \u023c  [LATIN SMALL LETTER C WITH STROKE]\n        case '\\u0255': // \u0255  [LATIN SMALL LETTER C WITH CURL]\n        case '\\u1E09': // \u1e09  [LATIN SMALL LETTER C WITH CEDILLA AND ACUTE]\n        case '\\u2184': // \u2184  [LATIN SMALL LETTER REVERSED C]\n        case '\\u24D2': // \u24d2  [CIRCLED LATIN SMALL LETTER C]\n        case '\\uA73E': // \ua73e  [LATIN CAPITAL LETTER REVERSED C WITH DOT]\n        case '\\uA73F': // \ua73f  [LATIN SMALL LETTER REVERSED C WITH DOT]\n        case '\\uFF43': // \uff43  [FULLWIDTH LATIN SMALL LETTER C]\n          output[outputPos++] = 'c';\n          break;\n        case '\\u249E': // \u249e  [PARENTHESIZED LATIN SMALL LETTER C]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'c';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00D0': // \u00d0  [LATIN CAPITAL LETTER ETH]\n        case '\\u010E': // \u010e  [LATIN CAPITAL LETTER D WITH CARON]\n        case '\\u0110': // \u0110  [LATIN CAPITAL LETTER D WITH STROKE]\n        case '\\u0189': // \u0189  [LATIN CAPITAL LETTER AFRICAN D]\n        case '\\u018A': // \u018a  [LATIN CAPITAL LETTER D WITH HOOK]\n        case '\\u018B': // \u018b  [LATIN CAPITAL LETTER D WITH TOPBAR]\n        case '\\u1D05': // \u1d05  [LATIN LETTER SMALL CAPITAL D]\n        case '\\u1D06': // \u1d06  [LATIN LETTER SMALL CAPITAL ETH]\n        case '\\u1E0A': // \u1e0a  [LATIN CAPITAL LETTER D WITH DOT ABOVE]\n        case '\\u1E0C': // \u1e0c  [LATIN CAPITAL LETTER D WITH DOT BELOW]\n        case '\\u1E0E': // \u1e0e  [LATIN CAPITAL LETTER D WITH LINE BELOW]\n        case '\\u1E10': // \u1e10  [LATIN CAPITAL LETTER D WITH CEDILLA]\n        case '\\u1E12': // \u1e12  [LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW]\n        case '\\u24B9': // \u24b9  [CIRCLED LATIN CAPITAL LETTER D]\n        case '\\uA779': // \ua779  [LATIN CAPITAL LETTER INSULAR D]\n        case '\\uFF24': // \uff24  [FULLWIDTH LATIN CAPITAL LETTER D]\n          output[outputPos++] = 'D';\n          break;\n        case '\\u00F0': // \u00f0  [LATIN SMALL LETTER ETH]\n        case '\\u010F': // \u010f  [LATIN SMALL LETTER D WITH CARON]\n        case '\\u0111': // \u0111  [LATIN SMALL LETTER D WITH STROKE]\n        case '\\u018C': // \u018c  [LATIN SMALL LETTER D WITH TOPBAR]\n        case '\\u0221': // \u0221  [LATIN SMALL LETTER D WITH CURL]\n        case '\\u0256': // \u0256  [LATIN SMALL LETTER D WITH TAIL]\n        case '\\u0257': // \u0257  [LATIN SMALL LETTER D WITH HOOK]\n        case '\\u1D6D': // \u1d6d  [LATIN SMALL LETTER D WITH MIDDLE TILDE]\n        case '\\u1D81': // \u1d81  [LATIN SMALL LETTER D WITH PALATAL HOOK]\n        case '\\u1D91': // \u1d91  [LATIN SMALL LETTER D WITH HOOK AND TAIL]\n        case '\\u1E0B': // \u1e0b  [LATIN SMALL LETTER D WITH DOT ABOVE]\n        case '\\u1E0D': // \u1e0d  [LATIN SMALL LETTER D WITH DOT BELOW]\n        case '\\u1E0F': // \u1e0f  [LATIN SMALL LETTER D WITH LINE BELOW]\n        case '\\u1E11': // \u1e11  [LATIN SMALL LETTER D WITH CEDILLA]\n        case '\\u1E13': // \u1e13  [LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW]\n        case '\\u24D3': // \u24d3  [CIRCLED LATIN SMALL LETTER D]\n        case '\\uA77A': // \ua77a  [LATIN SMALL LETTER INSULAR D]\n        case '\\uFF44': // \uff44  [FULLWIDTH LATIN SMALL LETTER D]\n          output[outputPos++] = 'd';\n          break;\n        case '\\u01C4': // \u01c4  [LATIN CAPITAL LETTER DZ WITH CARON]\n        case '\\u01F1': // \u01f1  [LATIN CAPITAL LETTER DZ]\n          output[outputPos++] = 'D';\n          output[outputPos++] = 'Z';\n          break;\n        case '\\u01C5': // \u01c5  [LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON]\n        case '\\u01F2': // \u01f2  [LATIN CAPITAL LETTER D WITH SMALL LETTER Z]\n          output[outputPos++] = 'D';\n          output[outputPos++] = 'z';\n          break;\n        case '\\u249F': // \u249f  [PARENTHESIZED LATIN SMALL LETTER D]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'd';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0238': // \u0238  [LATIN SMALL LETTER DB DIGRAPH]\n          output[outputPos++] = 'd';\n          output[outputPos++] = 'b';\n          break;\n        case '\\u01C6': // \u01c6  [LATIN SMALL LETTER DZ WITH CARON]\n        case '\\u01F3': // \u01f3  [LATIN SMALL LETTER DZ]\n        case '\\u02A3': // \u02a3  [LATIN SMALL LETTER DZ DIGRAPH]\n        case '\\u02A5': // \u02a5  [LATIN SMALL LETTER DZ DIGRAPH WITH CURL]\n          output[outputPos++] = 'd';\n          output[outputPos++] = 'z';\n          break;\n        case '\\u00C8': // \u00c8  [LATIN CAPITAL LETTER E WITH GRAVE]\n        case '\\u00C9': // \u00c9  [LATIN CAPITAL LETTER E WITH ACUTE]\n        case '\\u00CA': // \u00ca  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX]\n        case '\\u00CB': // \u00cb  [LATIN CAPITAL LETTER E WITH DIAERESIS]\n        case '\\u0112': // \u0112  [LATIN CAPITAL LETTER E WITH MACRON]\n        case '\\u0114': // \u0114  [LATIN CAPITAL LETTER E WITH BREVE]\n        case '\\u0116': // \u0116  [LATIN CAPITAL LETTER E WITH DOT ABOVE]\n        case '\\u0118': // \u0118  [LATIN CAPITAL LETTER E WITH OGONEK]\n        case '\\u011A': // \u011a  [LATIN CAPITAL LETTER E WITH CARON]\n        case '\\u018E': // \u018e  [LATIN CAPITAL LETTER REVERSED E]\n        case '\\u0190': // \u0190  [LATIN CAPITAL LETTER OPEN E]\n        case '\\u0204': // \u0204  [LATIN CAPITAL LETTER E WITH DOUBLE GRAVE]\n        case '\\u0206': // \u0206  [LATIN CAPITAL LETTER E WITH INVERTED BREVE]\n        case '\\u0228': // \u0228  [LATIN CAPITAL LETTER E WITH CEDILLA]\n        case '\\u0246': // \u0246  [LATIN CAPITAL LETTER E WITH STROKE]\n        case '\\u1D07': // \u1d07  [LATIN LETTER SMALL CAPITAL E]\n        case '\\u1E14': // \u1e14  [LATIN CAPITAL LETTER E WITH MACRON AND GRAVE]\n        case '\\u1E16': // \u1e16  [LATIN CAPITAL LETTER E WITH MACRON AND ACUTE]\n        case '\\u1E18': // \u1e18  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW]\n        case '\\u1E1A': // \u1e1a  [LATIN CAPITAL LETTER E WITH TILDE BELOW]\n        case '\\u1E1C': // \u1e1c  [LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE]\n        case '\\u1EB8': // \u1eb8  [LATIN CAPITAL LETTER E WITH DOT BELOW]\n        case '\\u1EBA': // \u1eba  [LATIN CAPITAL LETTER E WITH HOOK ABOVE]\n        case '\\u1EBC': // \u1ebc  [LATIN CAPITAL LETTER E WITH TILDE]\n        case '\\u1EBE': // \u1ebe  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE]\n        case '\\u1EC0': // \u1ec0  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE]\n        case '\\u1EC2': // \u1ec2  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE]\n        case '\\u1EC4': // \u1ec4  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE]\n        case '\\u1EC6': // \u1ec6  [LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW]\n        case '\\u24BA': // \u24ba  [CIRCLED LATIN CAPITAL LETTER E]\n        case '\\u2C7B': // \u2c7b  [LATIN LETTER SMALL CAPITAL TURNED E]\n        case '\\uFF25': // \uff25  [FULLWIDTH LATIN CAPITAL LETTER E]\n          output[outputPos++] = 'E';\n          break;\n        case '\\u00E8': // \u00e8  [LATIN SMALL LETTER E WITH GRAVE]\n        case '\\u00E9': // \u00e9  [LATIN SMALL LETTER E WITH ACUTE]\n        case '\\u00EA': // \u00ea  [LATIN SMALL LETTER E WITH CIRCUMFLEX]\n        case '\\u00EB': // \u00eb  [LATIN SMALL LETTER E WITH DIAERESIS]\n        case '\\u0113': // \u0113  [LATIN SMALL LETTER E WITH MACRON]\n        case '\\u0115': // \u0115  [LATIN SMALL LETTER E WITH BREVE]\n        case '\\u0117': // \u0117  [LATIN SMALL LETTER E WITH DOT ABOVE]\n        case '\\u0119': // \u0119  [LATIN SMALL LETTER E WITH OGONEK]\n        case '\\u011B': // \u011b  [LATIN SMALL LETTER E WITH CARON]\n        case '\\u01DD': // \u01dd  [LATIN SMALL LETTER TURNED E]\n        case '\\u0205': // \u0205  [LATIN SMALL LETTER E WITH DOUBLE GRAVE]\n        case '\\u0207': // \u0207  [LATIN SMALL LETTER E WITH INVERTED BREVE]\n        case '\\u0229': // \u0229  [LATIN SMALL LETTER E WITH CEDILLA]\n        case '\\u0247': // \u0247  [LATIN SMALL LETTER E WITH STROKE]\n        case '\\u0258': // \u0258  [LATIN SMALL LETTER REVERSED E]\n        case '\\u025B': // \u025b  [LATIN SMALL LETTER OPEN E]\n        case '\\u025C': // \u025c  [LATIN SMALL LETTER REVERSED OPEN E]\n        case '\\u025D': // \u025d  [LATIN SMALL LETTER REVERSED OPEN E WITH HOOK]\n        case '\\u025E': // \u025e  [LATIN SMALL LETTER CLOSED REVERSED OPEN E]\n        case '\\u029A': // \u029a  [LATIN SMALL LETTER CLOSED OPEN E]\n        case '\\u1D08': // \u1d08  [LATIN SMALL LETTER TURNED OPEN E]\n        case '\\u1D92': // \u1d92  [LATIN SMALL LETTER E WITH RETROFLEX HOOK]\n        case '\\u1D93': // \u1d93  [LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK]\n        case '\\u1D94': // \u1d94  [LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK]\n        case '\\u1E15': // \u1e15  [LATIN SMALL LETTER E WITH MACRON AND GRAVE]\n        case '\\u1E17': // \u1e17  [LATIN SMALL LETTER E WITH MACRON AND ACUTE]\n        case '\\u1E19': // \u1e19  [LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW]\n        case '\\u1E1B': // \u1e1b  [LATIN SMALL LETTER E WITH TILDE BELOW]\n        case '\\u1E1D': // \u1e1d  [LATIN SMALL LETTER E WITH CEDILLA AND BREVE]\n        case '\\u1EB9': // \u1eb9  [LATIN SMALL LETTER E WITH DOT BELOW]\n        case '\\u1EBB': // \u1ebb  [LATIN SMALL LETTER E WITH HOOK ABOVE]\n        case '\\u1EBD': // \u1ebd  [LATIN SMALL LETTER E WITH TILDE]\n        case '\\u1EBF': // \u1ebf  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE]\n        case '\\u1EC1': // \u1ec1  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE]\n        case '\\u1EC3': // \u1ec3  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE]\n        case '\\u1EC5': // \u1ec5  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE]\n        case '\\u1EC7': // \u1ec7  [LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW]\n        case '\\u2091': // \u2091  [LATIN SUBSCRIPT SMALL LETTER E]\n        case '\\u24D4': // \u24d4  [CIRCLED LATIN SMALL LETTER E]\n        case '\\u2C78': // \u2c78  [LATIN SMALL LETTER E WITH NOTCH]\n        case '\\uFF45': // \uff45  [FULLWIDTH LATIN SMALL LETTER E]\n          output[outputPos++] = 'e';\n          break;\n        case '\\u24A0': // \u24a0  [PARENTHESIZED LATIN SMALL LETTER E]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'e';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0191': // \u0191  [LATIN CAPITAL LETTER F WITH HOOK]\n        case '\\u1E1E': // \u1e1e  [LATIN CAPITAL LETTER F WITH DOT ABOVE]\n        case '\\u24BB': // \u24bb  [CIRCLED LATIN CAPITAL LETTER F]\n        case '\\uA730': // \ua730  [LATIN LETTER SMALL CAPITAL F]\n        case '\\uA77B': // \ua77b  [LATIN CAPITAL LETTER INSULAR F]\n        case '\\uA7FB': // \ua7fb  [LATIN EPIGRAPHIC LETTER REVERSED F]\n        case '\\uFF26': // \uff26  [FULLWIDTH LATIN CAPITAL LETTER F]\n          output[outputPos++] = 'F';\n          break;\n        case '\\u0192': // \u0192  [LATIN SMALL LETTER F WITH HOOK]\n        case '\\u1D6E': // \u1d6e  [LATIN SMALL LETTER F WITH MIDDLE TILDE]\n        case '\\u1D82': // \u1d82  [LATIN SMALL LETTER F WITH PALATAL HOOK]\n        case '\\u1E1F': // \u1e1f  [LATIN SMALL LETTER F WITH DOT ABOVE]\n        case '\\u1E9B': // \u1e9b  [LATIN SMALL LETTER LONG S WITH DOT ABOVE]\n        case '\\u24D5': // \u24d5  [CIRCLED LATIN SMALL LETTER F]\n        case '\\uA77C': // \ua77c  [LATIN SMALL LETTER INSULAR F]\n        case '\\uFF46': // \uff46  [FULLWIDTH LATIN SMALL LETTER F]\n          output[outputPos++] = 'f';\n          break;\n        case '\\u24A1': // \u24a1  [PARENTHESIZED LATIN SMALL LETTER F]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'f';\n          output[outputPos++] = ')';\n          break;\n        case '\\uFB00': // \ufb00  [LATIN SMALL LIGATURE FF]\n          output[outputPos++] = 'f';\n          output[outputPos++] = 'f';\n          break;\n        case '\\uFB03': // \ufb03  [LATIN SMALL LIGATURE FFI]\n          output[outputPos++] = 'f';\n          output[outputPos++] = 'f';\n          output[outputPos++] = 'i';\n          break;\n        case '\\uFB04': // \ufb04  [LATIN SMALL LIGATURE FFL]\n          output[outputPos++] = 'f';\n          output[outputPos++] = 'f';\n          output[outputPos++] = 'l';\n          break;\n        case '\\uFB01': // \ufb01  [LATIN SMALL LIGATURE FI]\n          output[outputPos++] = 'f';\n          output[outputPos++] = 'i';\n          break;\n        case '\\uFB02': // \ufb02  [LATIN SMALL LIGATURE FL]\n          output[outputPos++] = 'f';\n          output[outputPos++] = 'l';\n          break;\n        case '\\u011C': // \u011c  [LATIN CAPITAL LETTER G WITH CIRCUMFLEX]\n        case '\\u011E': // \u011e  [LATIN CAPITAL LETTER G WITH BREVE]\n        case '\\u0120': // \u0120  [LATIN CAPITAL LETTER G WITH DOT ABOVE]\n        case '\\u0122': // \u0122  [LATIN CAPITAL LETTER G WITH CEDILLA]\n        case '\\u0193': // \u0193  [LATIN CAPITAL LETTER G WITH HOOK]\n        case '\\u01E4': // \u01e4  [LATIN CAPITAL LETTER G WITH STROKE]\n        case '\\u01E5': // \u01e5  [LATIN SMALL LETTER G WITH STROKE]\n        case '\\u01E6': // \u01e6  [LATIN CAPITAL LETTER G WITH CARON]\n        case '\\u01E7': // \u01e7  [LATIN SMALL LETTER G WITH CARON]\n        case '\\u01F4': // \u01f4  [LATIN CAPITAL LETTER G WITH ACUTE]\n        case '\\u0262': // \u0262  [LATIN LETTER SMALL CAPITAL G]\n        case '\\u029B': // \u029b  [LATIN LETTER SMALL CAPITAL G WITH HOOK]\n        case '\\u1E20': // \u1e20  [LATIN CAPITAL LETTER G WITH MACRON]\n        case '\\u24BC': // \u24bc  [CIRCLED LATIN CAPITAL LETTER G]\n        case '\\uA77D': // \ua77d  [LATIN CAPITAL LETTER INSULAR G]\n        case '\\uA77E': // \ua77e  [LATIN CAPITAL LETTER TURNED INSULAR G]\n        case '\\uFF27': // \uff27  [FULLWIDTH LATIN CAPITAL LETTER G]\n          output[outputPos++] = 'G';\n          break;\n        case '\\u011D': // \u011d  [LATIN SMALL LETTER G WITH CIRCUMFLEX]\n        case '\\u011F': // \u011f  [LATIN SMALL LETTER G WITH BREVE]\n        case '\\u0121': // \u0121  [LATIN SMALL LETTER G WITH DOT ABOVE]\n        case '\\u0123': // \u0123  [LATIN SMALL LETTER G WITH CEDILLA]\n        case '\\u01F5': // \u01f5  [LATIN SMALL LETTER G WITH ACUTE]\n        case '\\u0260': // \u0260  [LATIN SMALL LETTER G WITH HOOK]\n        case '\\u0261': // \u0261  [LATIN SMALL LETTER SCRIPT G]\n        case '\\u1D77': // \u1d77  [LATIN SMALL LETTER TURNED G]\n        case '\\u1D79': // \u1d79  [LATIN SMALL LETTER INSULAR G]\n        case '\\u1D83': // \u1d83  [LATIN SMALL LETTER G WITH PALATAL HOOK]\n        case '\\u1E21': // \u1e21  [LATIN SMALL LETTER G WITH MACRON]\n        case '\\u24D6': // \u24d6  [CIRCLED LATIN SMALL LETTER G]\n        case '\\uA77F': // \ua77f  [LATIN SMALL LETTER TURNED INSULAR G]\n        case '\\uFF47': // \uff47  [FULLWIDTH LATIN SMALL LETTER G]\n          output[outputPos++] = 'g';\n          break;\n        case '\\u24A2': // \u24a2  [PARENTHESIZED LATIN SMALL LETTER G]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'g';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0124': // \u0124  [LATIN CAPITAL LETTER H WITH CIRCUMFLEX]\n        case '\\u0126': // \u0126  [LATIN CAPITAL LETTER H WITH STROKE]\n        case '\\u021E': // \u021e  [LATIN CAPITAL LETTER H WITH CARON]\n        case '\\u029C': // \u029c  [LATIN LETTER SMALL CAPITAL H]\n        case '\\u1E22': // \u1e22  [LATIN CAPITAL LETTER H WITH DOT ABOVE]\n        case '\\u1E24': // \u1e24  [LATIN CAPITAL LETTER H WITH DOT BELOW]\n        case '\\u1E26': // \u1e26  [LATIN CAPITAL LETTER H WITH DIAERESIS]\n        case '\\u1E28': // \u1e28  [LATIN CAPITAL LETTER H WITH CEDILLA]\n        case '\\u1E2A': // \u1e2a  [LATIN CAPITAL LETTER H WITH BREVE BELOW]\n        case '\\u24BD': // \u24bd  [CIRCLED LATIN CAPITAL LETTER H]\n        case '\\u2C67': // \u2c67  [LATIN CAPITAL LETTER H WITH DESCENDER]\n        case '\\u2C75': // \u2c75  [LATIN CAPITAL LETTER HALF H]\n        case '\\uFF28': // \uff28  [FULLWIDTH LATIN CAPITAL LETTER H]\n          output[outputPos++] = 'H';\n          break;\n        case '\\u0125': // \u0125  [LATIN SMALL LETTER H WITH CIRCUMFLEX]\n        case '\\u0127': // \u0127  [LATIN SMALL LETTER H WITH STROKE]\n        case '\\u021F': // \u021f  [LATIN SMALL LETTER H WITH CARON]\n        case '\\u0265': // \u0265  [LATIN SMALL LETTER TURNED H]\n        case '\\u0266': // \u0266  [LATIN SMALL LETTER H WITH HOOK]\n        case '\\u02AE': // \u02ae  [LATIN SMALL LETTER TURNED H WITH FISHHOOK]\n        case '\\u02AF': // \u02af  [LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL]\n        case '\\u1E23': // \u1e23  [LATIN SMALL LETTER H WITH DOT ABOVE]\n        case '\\u1E25': // \u1e25  [LATIN SMALL LETTER H WITH DOT BELOW]\n        case '\\u1E27': // \u1e27  [LATIN SMALL LETTER H WITH DIAERESIS]\n        case '\\u1E29': // \u1e29  [LATIN SMALL LETTER H WITH CEDILLA]\n        case '\\u1E2B': // \u1e2b  [LATIN SMALL LETTER H WITH BREVE BELOW]\n        case '\\u1E96': // \u1e96  [LATIN SMALL LETTER H WITH LINE BELOW]\n        case '\\u24D7': // \u24d7  [CIRCLED LATIN SMALL LETTER H]\n        case '\\u2C68': // \u2c68  [LATIN SMALL LETTER H WITH DESCENDER]\n        case '\\u2C76': // \u2c76  [LATIN SMALL LETTER HALF H]\n        case '\\uFF48': // \uff48  [FULLWIDTH LATIN SMALL LETTER H]\n          output[outputPos++] = 'h';\n          break;\n        case '\\u01F6': // \u01f6  http://en.wikipedia.org/wiki/Hwair  [LATIN CAPITAL LETTER HWAIR]\n          output[outputPos++] = 'H';\n          output[outputPos++] = 'V';\n          break;\n        case '\\u24A3': // \u24a3  [PARENTHESIZED LATIN SMALL LETTER H]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'h';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0195': // \u0195  [LATIN SMALL LETTER HV]\n          output[outputPos++] = 'h';\n          output[outputPos++] = 'v';\n          break;\n        case '\\u00CC': // \u00cc  [LATIN CAPITAL LETTER I WITH GRAVE]\n        case '\\u00CD': // \u00cd  [LATIN CAPITAL LETTER I WITH ACUTE]\n        case '\\u00CE': // \u00ce  [LATIN CAPITAL LETTER I WITH CIRCUMFLEX]\n        case '\\u00CF': // \u00cf  [LATIN CAPITAL LETTER I WITH DIAERESIS]\n        case '\\u0128': // \u0128  [LATIN CAPITAL LETTER I WITH TILDE]\n        case '\\u012A': // \u012a  [LATIN CAPITAL LETTER I WITH MACRON]\n        case '\\u012C': // \u012c  [LATIN CAPITAL LETTER I WITH BREVE]\n        case '\\u012E': // \u012e  [LATIN CAPITAL LETTER I WITH OGONEK]\n        case '\\u0130': // \u0130  [LATIN CAPITAL LETTER I WITH DOT ABOVE]\n        case '\\u0196': // \u0196  [LATIN CAPITAL LETTER IOTA]\n        case '\\u0197': // \u0197  [LATIN CAPITAL LETTER I WITH STROKE]\n        case '\\u01CF': // \u01cf  [LATIN CAPITAL LETTER I WITH CARON]\n        case '\\u0208': // \u0208  [LATIN CAPITAL LETTER I WITH DOUBLE GRAVE]\n        case '\\u020A': // \u020a  [LATIN CAPITAL LETTER I WITH INVERTED BREVE]\n        case '\\u026A': // \u026a  [LATIN LETTER SMALL CAPITAL I]\n        case '\\u1D7B': // \u1d7b  [LATIN SMALL CAPITAL LETTER I WITH STROKE]\n        case '\\u1E2C': // \u1e2c  [LATIN CAPITAL LETTER I WITH TILDE BELOW]\n        case '\\u1E2E': // \u1e2e  [LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE]\n        case '\\u1EC8': // \u1ec8  [LATIN CAPITAL LETTER I WITH HOOK ABOVE]\n        case '\\u1ECA': // \u1eca  [LATIN CAPITAL LETTER I WITH DOT BELOW]\n        case '\\u24BE': // \u24be  [CIRCLED LATIN CAPITAL LETTER I]\n        case '\\uA7FE': // \ua7fe  [LATIN EPIGRAPHIC LETTER I LONGA]\n        case '\\uFF29': // \uff29  [FULLWIDTH LATIN CAPITAL LETTER I]\n          output[outputPos++] = 'I';\n          break;\n        case '\\u00EC': // \u00ec  [LATIN SMALL LETTER I WITH GRAVE]\n        case '\\u00ED': // \u00ed  [LATIN SMALL LETTER I WITH ACUTE]\n        case '\\u00EE': // \u00ee  [LATIN SMALL LETTER I WITH CIRCUMFLEX]\n        case '\\u00EF': // \u00ef  [LATIN SMALL LETTER I WITH DIAERESIS]\n        case '\\u0129': // \u0129  [LATIN SMALL LETTER I WITH TILDE]\n        case '\\u012B': // \u012b  [LATIN SMALL LETTER I WITH MACRON]\n        case '\\u012D': // \u012d  [LATIN SMALL LETTER I WITH BREVE]\n        case '\\u012F': // \u012f  [LATIN SMALL LETTER I WITH OGONEK]\n        case '\\u0131': // \u0131  [LATIN SMALL LETTER DOTLESS I]\n        case '\\u01D0': // \u01d0  [LATIN SMALL LETTER I WITH CARON]\n        case '\\u0209': // \u0209  [LATIN SMALL LETTER I WITH DOUBLE GRAVE]\n        case '\\u020B': // \u020b  [LATIN SMALL LETTER I WITH INVERTED BREVE]\n        case '\\u0268': // \u0268  [LATIN SMALL LETTER I WITH STROKE]\n        case '\\u1D09': // \u1d09  [LATIN SMALL LETTER TURNED I]\n        case '\\u1D62': // \u1d62  [LATIN SUBSCRIPT SMALL LETTER I]\n        case '\\u1D7C': // \u1d7c  [LATIN SMALL LETTER IOTA WITH STROKE]\n        case '\\u1D96': // \u1d96  [LATIN SMALL LETTER I WITH RETROFLEX HOOK]\n        case '\\u1E2D': // \u1e2d  [LATIN SMALL LETTER I WITH TILDE BELOW]\n        case '\\u1E2F': // \u1e2f  [LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE]\n        case '\\u1EC9': // \u1ec9  [LATIN SMALL LETTER I WITH HOOK ABOVE]\n        case '\\u1ECB': // \u1ecb  [LATIN SMALL LETTER I WITH DOT BELOW]\n        case '\\u2071': // \u2071  [SUPERSCRIPT LATIN SMALL LETTER I]\n        case '\\u24D8': // \u24d8  [CIRCLED LATIN SMALL LETTER I]\n        case '\\uFF49': // \uff49  [FULLWIDTH LATIN SMALL LETTER I]\n          output[outputPos++] = 'i';\n          break;\n        case '\\u0132': // \u0132  [LATIN CAPITAL LIGATURE IJ]\n          output[outputPos++] = 'I';\n          output[outputPos++] = 'J';\n          break;\n        case '\\u24A4': // \u24a4  [PARENTHESIZED LATIN SMALL LETTER I]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'i';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0133': // \u0133  [LATIN SMALL LIGATURE IJ]\n          output[outputPos++] = 'i';\n          output[outputPos++] = 'j';\n          break;\n        case '\\u0134': // \u0134  [LATIN CAPITAL LETTER J WITH CIRCUMFLEX]\n        case '\\u0248': // \u0248  [LATIN CAPITAL LETTER J WITH STROKE]\n        case '\\u1D0A': // \u1d0a  [LATIN LETTER SMALL CAPITAL J]\n        case '\\u24BF': // \u24bf  [CIRCLED LATIN CAPITAL LETTER J]\n        case '\\uFF2A': // \uff2a  [FULLWIDTH LATIN CAPITAL LETTER J]\n          output[outputPos++] = 'J';\n          break;\n        case '\\u0135': // \u0135  [LATIN SMALL LETTER J WITH CIRCUMFLEX]\n        case '\\u01F0': // \u01f0  [LATIN SMALL LETTER J WITH CARON]\n        case '\\u0237': // \u0237  [LATIN SMALL LETTER DOTLESS J]\n        case '\\u0249': // \u0249  [LATIN SMALL LETTER J WITH STROKE]\n        case '\\u025F': // \u025f  [LATIN SMALL LETTER DOTLESS J WITH STROKE]\n        case '\\u0284': // \u0284  [LATIN SMALL LETTER DOTLESS J WITH STROKE AND HOOK]\n        case '\\u029D': // \u029d  [LATIN SMALL LETTER J WITH CROSSED-TAIL]\n        case '\\u24D9': // \u24d9  [CIRCLED LATIN SMALL LETTER J]\n        case '\\u2C7C': // \u2c7c  [LATIN SUBSCRIPT SMALL LETTER J]\n        case '\\uFF4A': // \uff4a  [FULLWIDTH LATIN SMALL LETTER J]\n          output[outputPos++] = 'j';\n          break;\n        case '\\u24A5': // \u24a5  [PARENTHESIZED LATIN SMALL LETTER J]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'j';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0136': // \u0136  [LATIN CAPITAL LETTER K WITH CEDILLA]\n        case '\\u0198': // \u0198  [LATIN CAPITAL LETTER K WITH HOOK]\n        case '\\u01E8': // \u01e8  [LATIN CAPITAL LETTER K WITH CARON]\n        case '\\u1D0B': // \u1d0b  [LATIN LETTER SMALL CAPITAL K]\n        case '\\u1E30': // \u1e30  [LATIN CAPITAL LETTER K WITH ACUTE]\n        case '\\u1E32': // \u1e32  [LATIN CAPITAL LETTER K WITH DOT BELOW]\n        case '\\u1E34': // \u1e34  [LATIN CAPITAL LETTER K WITH LINE BELOW]\n        case '\\u24C0': // \u24c0  [CIRCLED LATIN CAPITAL LETTER K]\n        case '\\u2C69': // \u2c69  [LATIN CAPITAL LETTER K WITH DESCENDER]\n        case '\\uA740': // \ua740  [LATIN CAPITAL LETTER K WITH STROKE]\n        case '\\uA742': // \ua742  [LATIN CAPITAL LETTER K WITH DIAGONAL STROKE]\n        case '\\uA744': // \ua744  [LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE]\n        case '\\uFF2B': // \uff2b  [FULLWIDTH LATIN CAPITAL LETTER K]\n          output[outputPos++] = 'K';\n          break;\n        case '\\u0137': // \u0137  [LATIN SMALL LETTER K WITH CEDILLA]\n        case '\\u0199': // \u0199  [LATIN SMALL LETTER K WITH HOOK]\n        case '\\u01E9': // \u01e9  [LATIN SMALL LETTER K WITH CARON]\n        case '\\u029E': // \u029e  [LATIN SMALL LETTER TURNED K]\n        case '\\u1D84': // \u1d84  [LATIN SMALL LETTER K WITH PALATAL HOOK]\n        case '\\u1E31': // \u1e31  [LATIN SMALL LETTER K WITH ACUTE]\n        case '\\u1E33': // \u1e33  [LATIN SMALL LETTER K WITH DOT BELOW]\n        case '\\u1E35': // \u1e35  [LATIN SMALL LETTER K WITH LINE BELOW]\n        case '\\u24DA': // \u24da  [CIRCLED LATIN SMALL LETTER K]\n        case '\\u2C6A': // \u2c6a  [LATIN SMALL LETTER K WITH DESCENDER]\n        case '\\uA741': // \ua741  [LATIN SMALL LETTER K WITH STROKE]\n        case '\\uA743': // \ua743  [LATIN SMALL LETTER K WITH DIAGONAL STROKE]\n        case '\\uA745': // \ua745  [LATIN SMALL LETTER K WITH STROKE AND DIAGONAL STROKE]\n        case '\\uFF4B': // \uff4b  [FULLWIDTH LATIN SMALL LETTER K]\n          output[outputPos++] = 'k';\n          break;\n        case '\\u24A6': // \u24a6  [PARENTHESIZED LATIN SMALL LETTER K]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'k';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0139': // \u0139  [LATIN CAPITAL LETTER L WITH ACUTE]\n        case '\\u013B': // \u013b  [LATIN CAPITAL LETTER L WITH CEDILLA]\n        case '\\u013D': // \u013d  [LATIN CAPITAL LETTER L WITH CARON]\n        case '\\u013F': // \u013f  [LATIN CAPITAL LETTER L WITH MIDDLE DOT]\n        case '\\u0141': // \u0141  [LATIN CAPITAL LETTER L WITH STROKE]\n        case '\\u023D': // \u023d  [LATIN CAPITAL LETTER L WITH BAR]\n        case '\\u029F': // \u029f  [LATIN LETTER SMALL CAPITAL L]\n        case '\\u1D0C': // \u1d0c  [LATIN LETTER SMALL CAPITAL L WITH STROKE]\n        case '\\u1E36': // \u1e36  [LATIN CAPITAL LETTER L WITH DOT BELOW]\n        case '\\u1E38': // \u1e38  [LATIN CAPITAL LETTER L WITH DOT BELOW AND MACRON]\n        case '\\u1E3A': // \u1e3a  [LATIN CAPITAL LETTER L WITH LINE BELOW]\n        case '\\u1E3C': // \u1e3c  [LATIN CAPITAL LETTER L WITH CIRCUMFLEX BELOW]\n        case '\\u24C1': // \u24c1  [CIRCLED LATIN CAPITAL LETTER L]\n        case '\\u2C60': // \u2c60  [LATIN CAPITAL LETTER L WITH DOUBLE BAR]\n        case '\\u2C62': // \u2c62  [LATIN CAPITAL LETTER L WITH MIDDLE TILDE]\n        case '\\uA746': // \ua746  [LATIN CAPITAL LETTER BROKEN L]\n        case '\\uA748': // \ua748  [LATIN CAPITAL LETTER L WITH HIGH STROKE]\n        case '\\uA780': // \ua780  [LATIN CAPITAL LETTER TURNED L]\n        case '\\uFF2C': // \uff2c  [FULLWIDTH LATIN CAPITAL LETTER L]\n          output[outputPos++] = 'L';\n          break;\n        case '\\u013A': // \u013a  [LATIN SMALL LETTER L WITH ACUTE]\n        case '\\u013C': // \u013c  [LATIN SMALL LETTER L WITH CEDILLA]\n        case '\\u013E': // \u013e  [LATIN SMALL LETTER L WITH CARON]\n        case '\\u0140': // \u0140  [LATIN SMALL LETTER L WITH MIDDLE DOT]\n        case '\\u0142': // \u0142  [LATIN SMALL LETTER L WITH STROKE]\n        case '\\u019A': // \u019a  [LATIN SMALL LETTER L WITH BAR]\n        case '\\u0234': // \u0234  [LATIN SMALL LETTER L WITH CURL]\n        case '\\u026B': // \u026b  [LATIN SMALL LETTER L WITH MIDDLE TILDE]\n        case '\\u026C': // \u026c  [LATIN SMALL LETTER L WITH BELT]\n        case '\\u026D': // \u026d  [LATIN SMALL LETTER L WITH RETROFLEX HOOK]\n        case '\\u1D85': // \u1d85  [LATIN SMALL LETTER L WITH PALATAL HOOK]\n        case '\\u1E37': // \u1e37  [LATIN SMALL LETTER L WITH DOT BELOW]\n        case '\\u1E39': // \u1e39  [LATIN SMALL LETTER L WITH DOT BELOW AND MACRON]\n        case '\\u1E3B': // \u1e3b  [LATIN SMALL LETTER L WITH LINE BELOW]\n        case '\\u1E3D': // \u1e3d  [LATIN SMALL LETTER L WITH CIRCUMFLEX BELOW]\n        case '\\u24DB': // \u24db  [CIRCLED LATIN SMALL LETTER L]\n        case '\\u2C61': // \u2c61  [LATIN SMALL LETTER L WITH DOUBLE BAR]\n        case '\\uA747': // \ua747  [LATIN SMALL LETTER BROKEN L]\n        case '\\uA749': // \ua749  [LATIN SMALL LETTER L WITH HIGH STROKE]\n        case '\\uA781': // \ua781  [LATIN SMALL LETTER TURNED L]\n        case '\\uFF4C': // \uff4c  [FULLWIDTH LATIN SMALL LETTER L]\n          output[outputPos++] = 'l';\n          break;\n        case '\\u01C7': // \u01c7  [LATIN CAPITAL LETTER LJ]\n          output[outputPos++] = 'L';\n          output[outputPos++] = 'J';\n          break;\n        case '\\u1EFA': // \u1efa  [LATIN CAPITAL LETTER MIDDLE-WELSH LL]\n          output[outputPos++] = 'L';\n          output[outputPos++] = 'L';\n          break;\n        case '\\u01C8': // \u01c8  [LATIN CAPITAL LETTER L WITH SMALL LETTER J]\n          output[outputPos++] = 'L';\n          output[outputPos++] = 'j';\n          break;\n        case '\\u24A7': // \u24a7  [PARENTHESIZED LATIN SMALL LETTER L]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'l';\n          output[outputPos++] = ')';\n          break;\n        case '\\u01C9': // \u01c9  [LATIN SMALL LETTER LJ]\n          output[outputPos++] = 'l';\n          output[outputPos++] = 'j';\n          break;\n        case '\\u1EFB': // \u1efb  [LATIN SMALL LETTER MIDDLE-WELSH LL]\n          output[outputPos++] = 'l';\n          output[outputPos++] = 'l';\n          break;\n        case '\\u02AA': // \u02aa  [LATIN SMALL LETTER LS DIGRAPH]\n          output[outputPos++] = 'l';\n          output[outputPos++] = 's';\n          break;\n        case '\\u02AB': // \u02ab  [LATIN SMALL LETTER LZ DIGRAPH]\n          output[outputPos++] = 'l';\n          output[outputPos++] = 'z';\n          break;\n        case '\\u019C': // \u019c  [LATIN CAPITAL LETTER TURNED M]\n        case '\\u1D0D': // \u1d0d  [LATIN LETTER SMALL CAPITAL M]\n        case '\\u1E3E': // \u1e3e  [LATIN CAPITAL LETTER M WITH ACUTE]\n        case '\\u1E40': // \u1e40  [LATIN CAPITAL LETTER M WITH DOT ABOVE]\n        case '\\u1E42': // \u1e42  [LATIN CAPITAL LETTER M WITH DOT BELOW]\n        case '\\u24C2': // \u24c2  [CIRCLED LATIN CAPITAL LETTER M]\n        case '\\u2C6E': // \u2c6e  [LATIN CAPITAL LETTER M WITH HOOK]\n        case '\\uA7FD': // \ua7fd  [LATIN EPIGRAPHIC LETTER INVERTED M]\n        case '\\uA7FF': // \ua7ff  [LATIN EPIGRAPHIC LETTER ARCHAIC M]\n        case '\\uFF2D': // \uff2d  [FULLWIDTH LATIN CAPITAL LETTER M]\n          output[outputPos++] = 'M';\n          break;\n        case '\\u026F': // \u026f  [LATIN SMALL LETTER TURNED M]\n        case '\\u0270': // \u0270  [LATIN SMALL LETTER TURNED M WITH LONG LEG]\n        case '\\u0271': // \u0271  [LATIN SMALL LETTER M WITH HOOK]\n        case '\\u1D6F': // \u1d6f  [LATIN SMALL LETTER M WITH MIDDLE TILDE]\n        case '\\u1D86': // \u1d86  [LATIN SMALL LETTER M WITH PALATAL HOOK]\n        case '\\u1E3F': // \u1e3f  [LATIN SMALL LETTER M WITH ACUTE]\n        case '\\u1E41': // \u1e41  [LATIN SMALL LETTER M WITH DOT ABOVE]\n        case '\\u1E43': // \u1e43  [LATIN SMALL LETTER M WITH DOT BELOW]\n        case '\\u24DC': // \u24dc  [CIRCLED LATIN SMALL LETTER M]\n        case '\\uFF4D': // \uff4d  [FULLWIDTH LATIN SMALL LETTER M]\n          output[outputPos++] = 'm';\n          break;\n        case '\\u24A8': // \u24a8  [PARENTHESIZED LATIN SMALL LETTER M]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'm';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00D1': // \u00d1  [LATIN CAPITAL LETTER N WITH TILDE]\n        case '\\u0143': // \u0143  [LATIN CAPITAL LETTER N WITH ACUTE]\n        case '\\u0145': // \u0145  [LATIN CAPITAL LETTER N WITH CEDILLA]\n        case '\\u0147': // \u0147  [LATIN CAPITAL LETTER N WITH CARON]\n        case '\\u014A': // \u014a  http://en.wikipedia.org/wiki/Eng_(letter)  [LATIN CAPITAL LETTER ENG]\n        case '\\u019D': // \u019d  [LATIN CAPITAL LETTER N WITH LEFT HOOK]\n        case '\\u01F8': // \u01f8  [LATIN CAPITAL LETTER N WITH GRAVE]\n        case '\\u0220': // \u0220  [LATIN CAPITAL LETTER N WITH LONG RIGHT LEG]\n        case '\\u0274': // \u0274  [LATIN LETTER SMALL CAPITAL N]\n        case '\\u1D0E': // \u1d0e  [LATIN LETTER SMALL CAPITAL REVERSED N]\n        case '\\u1E44': // \u1e44  [LATIN CAPITAL LETTER N WITH DOT ABOVE]\n        case '\\u1E46': // \u1e46  [LATIN CAPITAL LETTER N WITH DOT BELOW]\n        case '\\u1E48': // \u1e48  [LATIN CAPITAL LETTER N WITH LINE BELOW]\n        case '\\u1E4A': // \u1e4a  [LATIN CAPITAL LETTER N WITH CIRCUMFLEX BELOW]\n        case '\\u24C3': // \u24c3  [CIRCLED LATIN CAPITAL LETTER N]\n        case '\\uFF2E': // \uff2e  [FULLWIDTH LATIN CAPITAL LETTER N]\n          output[outputPos++] = 'N';\n          break;\n        case '\\u00F1': // \u00f1  [LATIN SMALL LETTER N WITH TILDE]\n        case '\\u0144': // \u0144  [LATIN SMALL LETTER N WITH ACUTE]\n        case '\\u0146': // \u0146  [LATIN SMALL LETTER N WITH CEDILLA]\n        case '\\u0148': // \u0148  [LATIN SMALL LETTER N WITH CARON]\n        case '\\u0149': // \u0149  [LATIN SMALL LETTER N PRECEDED BY APOSTROPHE]\n        case '\\u014B': // \u014b  http://en.wikipedia.org/wiki/Eng_(letter)  [LATIN SMALL LETTER ENG]\n        case '\\u019E': // \u019e  [LATIN SMALL LETTER N WITH LONG RIGHT LEG]\n        case '\\u01F9': // \u01f9  [LATIN SMALL LETTER N WITH GRAVE]\n        case '\\u0235': // \u0235  [LATIN SMALL LETTER N WITH CURL]\n        case '\\u0272': // \u0272  [LATIN SMALL LETTER N WITH LEFT HOOK]\n        case '\\u0273': // \u0273  [LATIN SMALL LETTER N WITH RETROFLEX HOOK]\n        case '\\u1D70': // \u1d70  [LATIN SMALL LETTER N WITH MIDDLE TILDE]\n        case '\\u1D87': // \u1d87  [LATIN SMALL LETTER N WITH PALATAL HOOK]\n        case '\\u1E45': // \u1e45  [LATIN SMALL LETTER N WITH DOT ABOVE]\n        case '\\u1E47': // \u1e47  [LATIN SMALL LETTER N WITH DOT BELOW]\n        case '\\u1E49': // \u1e49  [LATIN SMALL LETTER N WITH LINE BELOW]\n        case '\\u1E4B': // \u1e4b  [LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW]\n        case '\\u207F': // \u207f  [SUPERSCRIPT LATIN SMALL LETTER N]\n        case '\\u24DD': // \u24dd  [CIRCLED LATIN SMALL LETTER N]\n        case '\\uFF4E': // \uff4e  [FULLWIDTH LATIN SMALL LETTER N]\n          output[outputPos++] = 'n';\n          break;\n        case '\\u01CA': // \u01ca  [LATIN CAPITAL LETTER NJ]\n          output[outputPos++] = 'N';\n          output[outputPos++] = 'J';\n          break;\n        case '\\u01CB': // \u01cb  [LATIN CAPITAL LETTER N WITH SMALL LETTER J]\n          output[outputPos++] = 'N';\n          output[outputPos++] = 'j';\n          break;\n        case '\\u24A9': // \u24a9  [PARENTHESIZED LATIN SMALL LETTER N]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'n';\n          output[outputPos++] = ')';\n          break;\n        case '\\u01CC': // \u01cc  [LATIN SMALL LETTER NJ]\n          output[outputPos++] = 'n';\n          output[outputPos++] = 'j';\n          break;\n        case '\\u00D2': // \u00d2  [LATIN CAPITAL LETTER O WITH GRAVE]\n        case '\\u00D3': // \u00d3  [LATIN CAPITAL LETTER O WITH ACUTE]\n        case '\\u00D4': // \u00d4  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX]\n        case '\\u00D5': // \u00d5  [LATIN CAPITAL LETTER O WITH TILDE]\n        case '\\u00D6': // \u00d6  [LATIN CAPITAL LETTER O WITH DIAERESIS]\n        case '\\u00D8': // \u00d8  [LATIN CAPITAL LETTER O WITH STROKE]\n        case '\\u014C': // \u014c  [LATIN CAPITAL LETTER O WITH MACRON]\n        case '\\u014E': // \u014e  [LATIN CAPITAL LETTER O WITH BREVE]\n        case '\\u0150': // \u0150  [LATIN CAPITAL LETTER O WITH DOUBLE ACUTE]\n        case '\\u0186': // \u0186  [LATIN CAPITAL LETTER OPEN O]\n        case '\\u019F': // \u019f  [LATIN CAPITAL LETTER O WITH MIDDLE TILDE]\n        case '\\u01A0': // \u01a0  [LATIN CAPITAL LETTER O WITH HORN]\n        case '\\u01D1': // \u01d1  [LATIN CAPITAL LETTER O WITH CARON]\n        case '\\u01EA': // \u01ea  [LATIN CAPITAL LETTER O WITH OGONEK]\n        case '\\u01EC': // \u01ec  [LATIN CAPITAL LETTER O WITH OGONEK AND MACRON]\n        case '\\u01FE': // \u01fe  [LATIN CAPITAL LETTER O WITH STROKE AND ACUTE]\n        case '\\u020C': // \u020c  [LATIN CAPITAL LETTER O WITH DOUBLE GRAVE]\n        case '\\u020E': // \u020e  [LATIN CAPITAL LETTER O WITH INVERTED BREVE]\n        case '\\u022A': // \u022a  [LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON]\n        case '\\u022C': // \u022c  [LATIN CAPITAL LETTER O WITH TILDE AND MACRON]\n        case '\\u022E': // \u022e  [LATIN CAPITAL LETTER O WITH DOT ABOVE]\n        case '\\u0230': // \u0230  [LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON]\n        case '\\u1D0F': // \u1d0f  [LATIN LETTER SMALL CAPITAL O]\n        case '\\u1D10': // \u1d10  [LATIN LETTER SMALL CAPITAL OPEN O]\n        case '\\u1E4C': // \u1e4c  [LATIN CAPITAL LETTER O WITH TILDE AND ACUTE]\n        case '\\u1E4E': // \u1e4e  [LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS]\n        case '\\u1E50': // \u1e50  [LATIN CAPITAL LETTER O WITH MACRON AND GRAVE]\n        case '\\u1E52': // \u1e52  [LATIN CAPITAL LETTER O WITH MACRON AND ACUTE]\n        case '\\u1ECC': // \u1ecc  [LATIN CAPITAL LETTER O WITH DOT BELOW]\n        case '\\u1ECE': // \u1ece  [LATIN CAPITAL LETTER O WITH HOOK ABOVE]\n        case '\\u1ED0': // \u1ed0  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE]\n        case '\\u1ED2': // \u1ed2  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE]\n        case '\\u1ED4': // \u1ed4  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE]\n        case '\\u1ED6': // \u1ed6  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE]\n        case '\\u1ED8': // \u1ed8  [LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW]\n        case '\\u1EDA': // \u1eda  [LATIN CAPITAL LETTER O WITH HORN AND ACUTE]\n        case '\\u1EDC': // \u1edc  [LATIN CAPITAL LETTER O WITH HORN AND GRAVE]\n        case '\\u1EDE': // \u1ede  [LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE]\n        case '\\u1EE0': // \u1ee0  [LATIN CAPITAL LETTER O WITH HORN AND TILDE]\n        case '\\u1EE2': // \u1ee2  [LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW]\n        case '\\u24C4': // \u24c4  [CIRCLED LATIN CAPITAL LETTER O]\n        case '\\uA74A': // \ua74a  [LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY]\n        case '\\uA74C': // \ua74c  [LATIN CAPITAL LETTER O WITH LOOP]\n        case '\\uFF2F': // \uff2f  [FULLWIDTH LATIN CAPITAL LETTER O]\n          output[outputPos++] = 'O';\n          break;\n        case '\\u00F2': // \u00f2  [LATIN SMALL LETTER O WITH GRAVE]\n        case '\\u00F3': // \u00f3  [LATIN SMALL LETTER O WITH ACUTE]\n        case '\\u00F4': // \u00f4  [LATIN SMALL LETTER O WITH CIRCUMFLEX]\n        case '\\u00F5': // \u00f5  [LATIN SMALL LETTER O WITH TILDE]\n        case '\\u00F6': // \u00f6  [LATIN SMALL LETTER O WITH DIAERESIS]\n        case '\\u00F8': // \u00f8  [LATIN SMALL LETTER O WITH STROKE]\n        case '\\u014D': // \u014d  [LATIN SMALL LETTER O WITH MACRON]\n        case '\\u014F': // \u014f  [LATIN SMALL LETTER O WITH BREVE]\n        case '\\u0151': // \u0151  [LATIN SMALL LETTER O WITH DOUBLE ACUTE]\n        case '\\u01A1': // \u01a1  [LATIN SMALL LETTER O WITH HORN]\n        case '\\u01D2': // \u01d2  [LATIN SMALL LETTER O WITH CARON]\n        case '\\u01EB': // \u01eb  [LATIN SMALL LETTER O WITH OGONEK]\n        case '\\u01ED': // \u01ed  [LATIN SMALL LETTER O WITH OGONEK AND MACRON]\n        case '\\u01FF': // \u01ff  [LATIN SMALL LETTER O WITH STROKE AND ACUTE]\n        case '\\u020D': // \u020d  [LATIN SMALL LETTER O WITH DOUBLE GRAVE]\n        case '\\u020F': // \u020f  [LATIN SMALL LETTER O WITH INVERTED BREVE]\n        case '\\u022B': // \u022b  [LATIN SMALL LETTER O WITH DIAERESIS AND MACRON]\n        case '\\u022D': // \u022d  [LATIN SMALL LETTER O WITH TILDE AND MACRON]\n        case '\\u022F': // \u022f  [LATIN SMALL LETTER O WITH DOT ABOVE]\n        case '\\u0231': // \u0231  [LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON]\n        case '\\u0254': // \u0254  [LATIN SMALL LETTER OPEN O]\n        case '\\u0275': // \u0275  [LATIN SMALL LETTER BARRED O]\n        case '\\u1D16': // \u1d16  [LATIN SMALL LETTER TOP HALF O]\n        case '\\u1D17': // \u1d17  [LATIN SMALL LETTER BOTTOM HALF O]\n        case '\\u1D97': // \u1d97  [LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK]\n        case '\\u1E4D': // \u1e4d  [LATIN SMALL LETTER O WITH TILDE AND ACUTE]\n        case '\\u1E4F': // \u1e4f  [LATIN SMALL LETTER O WITH TILDE AND DIAERESIS]\n        case '\\u1E51': // \u1e51  [LATIN SMALL LETTER O WITH MACRON AND GRAVE]\n        case '\\u1E53': // \u1e53  [LATIN SMALL LETTER O WITH MACRON AND ACUTE]\n        case '\\u1ECD': // \u1ecd  [LATIN SMALL LETTER O WITH DOT BELOW]\n        case '\\u1ECF': // \u1ecf  [LATIN SMALL LETTER O WITH HOOK ABOVE]\n        case '\\u1ED1': // \u1ed1  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE]\n        case '\\u1ED3': // \u1ed3  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE]\n        case '\\u1ED5': // \u1ed5  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE]\n        case '\\u1ED7': // \u1ed7  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE]\n        case '\\u1ED9': // \u1ed9  [LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW]\n        case '\\u1EDB': // \u1edb  [LATIN SMALL LETTER O WITH HORN AND ACUTE]\n        case '\\u1EDD': // \u1edd  [LATIN SMALL LETTER O WITH HORN AND GRAVE]\n        case '\\u1EDF': // \u1edf  [LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE]\n        case '\\u1EE1': // \u1ee1  [LATIN SMALL LETTER O WITH HORN AND TILDE]\n        case '\\u1EE3': // \u1ee3  [LATIN SMALL LETTER O WITH HORN AND DOT BELOW]\n        case '\\u2092': // \u2092  [LATIN SUBSCRIPT SMALL LETTER O]\n        case '\\u24DE': // \u24de  [CIRCLED LATIN SMALL LETTER O]\n        case '\\u2C7A': // \u2c7a  [LATIN SMALL LETTER O WITH LOW RING INSIDE]\n        case '\\uA74B': // \ua74b  [LATIN SMALL LETTER O WITH LONG STROKE OVERLAY]\n        case '\\uA74D': // \ua74d  [LATIN SMALL LETTER O WITH LOOP]\n        case '\\uFF4F': // \uff4f  [FULLWIDTH LATIN SMALL LETTER O]\n          output[outputPos++] = 'o';\n          break;\n        case '\\u0152': // \u0152  [LATIN CAPITAL LIGATURE OE]\n        case '\\u0276': // \u0276  [LATIN LETTER SMALL CAPITAL OE]\n          output[outputPos++] = 'O';\n          output[outputPos++] = 'E';\n          break;\n        case '\\uA74E': // \ua74e  [LATIN CAPITAL LETTER OO]\n          output[outputPos++] = 'O';\n          output[outputPos++] = 'O';\n          break;\n        case '\\u0222': // \u0222  http://en.wikipedia.org/wiki/OU  [LATIN CAPITAL LETTER OU]\n        case '\\u1D15': // \u1d15  [LATIN LETTER SMALL CAPITAL OU]\n          output[outputPos++] = 'O';\n          output[outputPos++] = 'U';\n          break;\n        case '\\u24AA': // \u24aa  [PARENTHESIZED LATIN SMALL LETTER O]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'o';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0153': // \u0153  [LATIN SMALL LIGATURE OE]\n        case '\\u1D14': // \u1d14  [LATIN SMALL LETTER TURNED OE]\n          output[outputPos++] = 'o';\n          output[outputPos++] = 'e';\n          break;\n        case '\\uA74F': // \ua74f  [LATIN SMALL LETTER OO]\n          output[outputPos++] = 'o';\n          output[outputPos++] = 'o';\n          break;\n        case '\\u0223': // \u0223  http://en.wikipedia.org/wiki/OU  [LATIN SMALL LETTER OU]\n          output[outputPos++] = 'o';\n          output[outputPos++] = 'u';\n          break;\n        case '\\u01A4': // \u01a4  [LATIN CAPITAL LETTER P WITH HOOK]\n        case '\\u1D18': // \u1d18  [LATIN LETTER SMALL CAPITAL P]\n        case '\\u1E54': // \u1e54  [LATIN CAPITAL LETTER P WITH ACUTE]\n        case '\\u1E56': // \u1e56  [LATIN CAPITAL LETTER P WITH DOT ABOVE]\n        case '\\u24C5': // \u24c5  [CIRCLED LATIN CAPITAL LETTER P]\n        case '\\u2C63': // \u2c63  [LATIN CAPITAL LETTER P WITH STROKE]\n        case '\\uA750': // \ua750  [LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER]\n        case '\\uA752': // \ua752  [LATIN CAPITAL LETTER P WITH FLOURISH]\n        case '\\uA754': // \ua754  [LATIN CAPITAL LETTER P WITH SQUIRREL TAIL]\n        case '\\uFF30': // \uff30  [FULLWIDTH LATIN CAPITAL LETTER P]\n          output[outputPos++] = 'P';\n          break;\n        case '\\u01A5': // \u01a5  [LATIN SMALL LETTER P WITH HOOK]\n        case '\\u1D71': // \u1d71  [LATIN SMALL LETTER P WITH MIDDLE TILDE]\n        case '\\u1D7D': // \u1d7d  [LATIN SMALL LETTER P WITH STROKE]\n        case '\\u1D88': // \u1d88  [LATIN SMALL LETTER P WITH PALATAL HOOK]\n        case '\\u1E55': // \u1e55  [LATIN SMALL LETTER P WITH ACUTE]\n        case '\\u1E57': // \u1e57  [LATIN SMALL LETTER P WITH DOT ABOVE]\n        case '\\u24DF': // \u24df  [CIRCLED LATIN SMALL LETTER P]\n        case '\\uA751': // \ua751  [LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER]\n        case '\\uA753': // \ua753  [LATIN SMALL LETTER P WITH FLOURISH]\n        case '\\uA755': // \ua755  [LATIN SMALL LETTER P WITH SQUIRREL TAIL]\n        case '\\uA7FC': // \ua7fc  [LATIN EPIGRAPHIC LETTER REVERSED P]\n        case '\\uFF50': // \uff50  [FULLWIDTH LATIN SMALL LETTER P]\n          output[outputPos++] = 'p';\n          break;\n        case '\\u24AB': // \u24ab  [PARENTHESIZED LATIN SMALL LETTER P]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'p';\n          output[outputPos++] = ')';\n          break;\n        case '\\u024A': // \u024a  [LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL]\n        case '\\u24C6': // \u24c6  [CIRCLED LATIN CAPITAL LETTER Q]\n        case '\\uA756': // \ua756  [LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER]\n        case '\\uA758': // \ua758  [LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE]\n        case '\\uFF31': // \uff31  [FULLWIDTH LATIN CAPITAL LETTER Q]\n          output[outputPos++] = 'Q';\n          break;\n        case '\\u0138': // \u0138  http://en.wikipedia.org/wiki/Kra_(letter)  [LATIN SMALL LETTER KRA]\n        case '\\u024B': // \u024b  [LATIN SMALL LETTER Q WITH HOOK TAIL]\n        case '\\u02A0': // \u02a0  [LATIN SMALL LETTER Q WITH HOOK]\n        case '\\u24E0': // \u24e0  [CIRCLED LATIN SMALL LETTER Q]\n        case '\\uA757': // \ua757  [LATIN SMALL LETTER Q WITH STROKE THROUGH DESCENDER]\n        case '\\uA759': // \ua759  [LATIN SMALL LETTER Q WITH DIAGONAL STROKE]\n        case '\\uFF51': // \uff51  [FULLWIDTH LATIN SMALL LETTER Q]\n          output[outputPos++] = 'q';\n          break;\n        case '\\u24AC': // \u24ac  [PARENTHESIZED LATIN SMALL LETTER Q]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'q';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0239': // \u0239  [LATIN SMALL LETTER QP DIGRAPH]\n          output[outputPos++] = 'q';\n          output[outputPos++] = 'p';\n          break;\n        case '\\u0154': // \u0154  [LATIN CAPITAL LETTER R WITH ACUTE]\n        case '\\u0156': // \u0156  [LATIN CAPITAL LETTER R WITH CEDILLA]\n        case '\\u0158': // \u0158  [LATIN CAPITAL LETTER R WITH CARON]\n        case '\\u0210': // \u0212  [LATIN CAPITAL LETTER R WITH DOUBLE GRAVE]\n        case '\\u0212': // \u0212  [LATIN CAPITAL LETTER R WITH INVERTED BREVE]\n        case '\\u024C': // \u024c  [LATIN CAPITAL LETTER R WITH STROKE]\n        case '\\u0280': // \u0280  [LATIN LETTER SMALL CAPITAL R]\n        case '\\u0281': // \u0281  [LATIN LETTER SMALL CAPITAL INVERTED R]\n        case '\\u1D19': // \u1d19  [LATIN LETTER SMALL CAPITAL REVERSED R]\n        case '\\u1D1A': // \u1d1a  [LATIN LETTER SMALL CAPITAL TURNED R]\n        case '\\u1E58': // \u1e58  [LATIN CAPITAL LETTER R WITH DOT ABOVE]\n        case '\\u1E5A': // \u1e5a  [LATIN CAPITAL LETTER R WITH DOT BELOW]\n        case '\\u1E5C': // \u1e5c  [LATIN CAPITAL LETTER R WITH DOT BELOW AND MACRON]\n        case '\\u1E5E': // \u1e5e  [LATIN CAPITAL LETTER R WITH LINE BELOW]\n        case '\\u24C7': // \u24c7  [CIRCLED LATIN CAPITAL LETTER R]\n        case '\\u2C64': // \u2c64  [LATIN CAPITAL LETTER R WITH TAIL]\n        case '\\uA75A': // \ua75a  [LATIN CAPITAL LETTER R ROTUNDA]\n        case '\\uA782': // \ua782  [LATIN CAPITAL LETTER INSULAR R]\n        case '\\uFF32': // \uff32  [FULLWIDTH LATIN CAPITAL LETTER R]\n          output[outputPos++] = 'R';\n          break;\n        case '\\u0155': // \u0155  [LATIN SMALL LETTER R WITH ACUTE]\n        case '\\u0157': // \u0157  [LATIN SMALL LETTER R WITH CEDILLA]\n        case '\\u0159': // \u0159  [LATIN SMALL LETTER R WITH CARON]\n        case '\\u0211': // \u0211  [LATIN SMALL LETTER R WITH DOUBLE GRAVE]\n        case '\\u0213': // \u0213  [LATIN SMALL LETTER R WITH INVERTED BREVE]\n        case '\\u024D': // \u024d  [LATIN SMALL LETTER R WITH STROKE]\n        case '\\u027C': // \u027c  [LATIN SMALL LETTER R WITH LONG LEG]\n        case '\\u027D': // \u027d  [LATIN SMALL LETTER R WITH TAIL]\n        case '\\u027E': // \u027e  [LATIN SMALL LETTER R WITH FISHHOOK]\n        case '\\u027F': // \u027f  [LATIN SMALL LETTER REVERSED R WITH FISHHOOK]\n        case '\\u1D63': // \u1d63  [LATIN SUBSCRIPT SMALL LETTER R]\n        case '\\u1D72': // \u1d72  [LATIN SMALL LETTER R WITH MIDDLE TILDE]\n        case '\\u1D73': // \u1d73  [LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE]\n        case '\\u1D89': // \u1d89  [LATIN SMALL LETTER R WITH PALATAL HOOK]\n        case '\\u1E59': // \u1e59  [LATIN SMALL LETTER R WITH DOT ABOVE]\n        case '\\u1E5B': // \u1e5b  [LATIN SMALL LETTER R WITH DOT BELOW]\n        case '\\u1E5D': // \u1e5d  [LATIN SMALL LETTER R WITH DOT BELOW AND MACRON]\n        case '\\u1E5F': // \u1e5f  [LATIN SMALL LETTER R WITH LINE BELOW]\n        case '\\u24E1': // \u24e1  [CIRCLED LATIN SMALL LETTER R]\n        case '\\uA75B': // \ua75b  [LATIN SMALL LETTER R ROTUNDA]\n        case '\\uA783': // \ua783  [LATIN SMALL LETTER INSULAR R]\n        case '\\uFF52': // \uff52  [FULLWIDTH LATIN SMALL LETTER R]\n          output[outputPos++] = 'r';\n          break;\n        case '\\u24AD': // \u24ad  [PARENTHESIZED LATIN SMALL LETTER R]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'r';\n          output[outputPos++] = ')';\n          break;\n        case '\\u015A': // \u015a  [LATIN CAPITAL LETTER S WITH ACUTE]\n        case '\\u015C': // \u015c  [LATIN CAPITAL LETTER S WITH CIRCUMFLEX]\n        case '\\u015E': // \u015e  [LATIN CAPITAL LETTER S WITH CEDILLA]\n        case '\\u0160': // \u0160  [LATIN CAPITAL LETTER S WITH CARON]\n        case '\\u0218': // \u0218  [LATIN CAPITAL LETTER S WITH COMMA BELOW]\n        case '\\u1E60': // \u1e60  [LATIN CAPITAL LETTER S WITH DOT ABOVE]\n        case '\\u1E62': // \u1e62  [LATIN CAPITAL LETTER S WITH DOT BELOW]\n        case '\\u1E64': // \u1e64  [LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE]\n        case '\\u1E66': // \u1e66  [LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE]\n        case '\\u1E68': // \u1e68  [LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE]\n        case '\\u24C8': // \u24c8  [CIRCLED LATIN CAPITAL LETTER S]\n        case '\\uA731': // \ua731  [LATIN LETTER SMALL CAPITAL S]\n        case '\\uA785': // \ua785  [LATIN SMALL LETTER INSULAR S]\n        case '\\uFF33': // \uff33  [FULLWIDTH LATIN CAPITAL LETTER S]\n          output[outputPos++] = 'S';\n          break;\n        case '\\u015B': // \u015b  [LATIN SMALL LETTER S WITH ACUTE]\n        case '\\u015D': // \u015d  [LATIN SMALL LETTER S WITH CIRCUMFLEX]\n        case '\\u015F': // \u015f  [LATIN SMALL LETTER S WITH CEDILLA]\n        case '\\u0161': // \u0161  [LATIN SMALL LETTER S WITH CARON]\n        case '\\u017F': // \u017f  http://en.wikipedia.org/wiki/Long_S  [LATIN SMALL LETTER LONG S]\n        case '\\u0219': // \u0219  [LATIN SMALL LETTER S WITH COMMA BELOW]\n        case '\\u023F': // \u023f  [LATIN SMALL LETTER S WITH SWASH TAIL]\n        case '\\u0282': // \u0282  [LATIN SMALL LETTER S WITH HOOK]\n        case '\\u1D74': // \u1d74  [LATIN SMALL LETTER S WITH MIDDLE TILDE]\n        case '\\u1D8A': // \u1d8a  [LATIN SMALL LETTER S WITH PALATAL HOOK]\n        case '\\u1E61': // \u1e61  [LATIN SMALL LETTER S WITH DOT ABOVE]\n        case '\\u1E63': // \u1e63  [LATIN SMALL LETTER S WITH DOT BELOW]\n        case '\\u1E65': // \u1e65  [LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE]\n        case '\\u1E67': // \u1e67  [LATIN SMALL LETTER S WITH CARON AND DOT ABOVE]\n        case '\\u1E69': // \u1e69  [LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE]\n        case '\\u1E9C': // \u1e9c  [LATIN SMALL LETTER LONG S WITH DIAGONAL STROKE]\n        case '\\u1E9D': // \u1e9d  [LATIN SMALL LETTER LONG S WITH HIGH STROKE]\n        case '\\u24E2': // \u24e2  [CIRCLED LATIN SMALL LETTER S]\n        case '\\uA784': // \ua784  [LATIN CAPITAL LETTER INSULAR S]\n        case '\\uFF53': // \uff53  [FULLWIDTH LATIN SMALL LETTER S]\n          output[outputPos++] = 's';\n          break;\n        case '\\u1E9E': // \u1e9e  [LATIN CAPITAL LETTER SHARP S]\n          output[outputPos++] = 'S';\n          output[outputPos++] = 'S';\n          break;\n        case '\\u24AE': // \u24ae  [PARENTHESIZED LATIN SMALL LETTER S]\n          output[outputPos++] = '(';\n          output[outputPos++] = 's';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00DF': // \u00df  [LATIN SMALL LETTER SHARP S]\n          output[outputPos++] = 's';\n          output[outputPos++] = 's';\n          break;\n        case '\\uFB06': // \ufb06  [LATIN SMALL LIGATURE ST]\n          output[outputPos++] = 's';\n          output[outputPos++] = 't';\n          break;\n        case '\\u0162': // \u0162  [LATIN CAPITAL LETTER T WITH CEDILLA]\n        case '\\u0164': // \u0164  [LATIN CAPITAL LETTER T WITH CARON]\n        case '\\u0166': // \u0166  [LATIN CAPITAL LETTER T WITH STROKE]\n        case '\\u01AC': // \u01ac  [LATIN CAPITAL LETTER T WITH HOOK]\n        case '\\u01AE': // \u01ae  [LATIN CAPITAL LETTER T WITH RETROFLEX HOOK]\n        case '\\u021A': // \u021a  [LATIN CAPITAL LETTER T WITH COMMA BELOW]\n        case '\\u023E': // \u023e  [LATIN CAPITAL LETTER T WITH DIAGONAL STROKE]\n        case '\\u1D1B': // \u1d1b  [LATIN LETTER SMALL CAPITAL T]\n        case '\\u1E6A': // \u1e6a  [LATIN CAPITAL LETTER T WITH DOT ABOVE]\n        case '\\u1E6C': // \u1e6c  [LATIN CAPITAL LETTER T WITH DOT BELOW]\n        case '\\u1E6E': // \u1e6e  [LATIN CAPITAL LETTER T WITH LINE BELOW]\n        case '\\u1E70': // \u1e70  [LATIN CAPITAL LETTER T WITH CIRCUMFLEX BELOW]\n        case '\\u24C9': // \u24c9  [CIRCLED LATIN CAPITAL LETTER T]\n        case '\\uA786': // \ua786  [LATIN CAPITAL LETTER INSULAR T]\n        case '\\uFF34': // \uff34  [FULLWIDTH LATIN CAPITAL LETTER T]\n          output[outputPos++] = 'T';\n          break;\n        case '\\u0163': // \u0163  [LATIN SMALL LETTER T WITH CEDILLA]\n        case '\\u0165': // \u0165  [LATIN SMALL LETTER T WITH CARON]\n        case '\\u0167': // \u0167  [LATIN SMALL LETTER T WITH STROKE]\n        case '\\u01AB': // \u01ab  [LATIN SMALL LETTER T WITH PALATAL HOOK]\n        case '\\u01AD': // \u01ad  [LATIN SMALL LETTER T WITH HOOK]\n        case '\\u021B': // \u021b  [LATIN SMALL LETTER T WITH COMMA BELOW]\n        case '\\u0236': // \u0236  [LATIN SMALL LETTER T WITH CURL]\n        case '\\u0287': // \u0287  [LATIN SMALL LETTER TURNED T]\n        case '\\u0288': // \u0288  [LATIN SMALL LETTER T WITH RETROFLEX HOOK]\n        case '\\u1D75': // \u1d75  [LATIN SMALL LETTER T WITH MIDDLE TILDE]\n        case '\\u1E6B': // \u1e6b  [LATIN SMALL LETTER T WITH DOT ABOVE]\n        case '\\u1E6D': // \u1e6d  [LATIN SMALL LETTER T WITH DOT BELOW]\n        case '\\u1E6F': // \u1e6f  [LATIN SMALL LETTER T WITH LINE BELOW]\n        case '\\u1E71': // \u1e71  [LATIN SMALL LETTER T WITH CIRCUMFLEX BELOW]\n        case '\\u1E97': // \u1e97  [LATIN SMALL LETTER T WITH DIAERESIS]\n        case '\\u24E3': // \u24e3  [CIRCLED LATIN SMALL LETTER T]\n        case '\\u2C66': // \u2c66  [LATIN SMALL LETTER T WITH DIAGONAL STROKE]\n        case '\\uFF54': // \uff54  [FULLWIDTH LATIN SMALL LETTER T]\n          output[outputPos++] = 't';\n          break;\n        case '\\u00DE': // \u00de  [LATIN CAPITAL LETTER THORN]\n        case '\\uA766': // \ua766  [LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER]\n          output[outputPos++] = 'T';\n          output[outputPos++] = 'H';\n          break;\n        case '\\uA728': // \ua728  [LATIN CAPITAL LETTER TZ]\n          output[outputPos++] = 'T';\n          output[outputPos++] = 'Z';\n          break;\n        case '\\u24AF': // \u24af  [PARENTHESIZED LATIN SMALL LETTER T]\n          output[outputPos++] = '(';\n          output[outputPos++] = 't';\n          output[outputPos++] = ')';\n          break;\n        case '\\u02A8': // \u02a8  [LATIN SMALL LETTER TC DIGRAPH WITH CURL]\n          output[outputPos++] = 't';\n          output[outputPos++] = 'c';\n          break;\n        case '\\u00FE': // \u00fe  [LATIN SMALL LETTER THORN]\n        case '\\u1D7A': // \u1d7a  [LATIN SMALL LETTER TH WITH STRIKETHROUGH]\n        case '\\uA767': // \ua767  [LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER]\n          output[outputPos++] = 't';\n          output[outputPos++] = 'h';\n          break;\n        case '\\u02A6': // \u02a6  [LATIN SMALL LETTER TS DIGRAPH]\n          output[outputPos++] = 't';\n          output[outputPos++] = 's';\n          break;\n        case '\\uA729': // \ua729  [LATIN SMALL LETTER TZ]\n          output[outputPos++] = 't';\n          output[outputPos++] = 'z';\n          break;\n        case '\\u00D9': // \u00d9  [LATIN CAPITAL LETTER U WITH GRAVE]\n        case '\\u00DA': // \u00da  [LATIN CAPITAL LETTER U WITH ACUTE]\n        case '\\u00DB': // \u00db  [LATIN CAPITAL LETTER U WITH CIRCUMFLEX]\n        case '\\u00DC': // \u00dc  [LATIN CAPITAL LETTER U WITH DIAERESIS]\n        case '\\u0168': // \u0168  [LATIN CAPITAL LETTER U WITH TILDE]\n        case '\\u016A': // \u016a  [LATIN CAPITAL LETTER U WITH MACRON]\n        case '\\u016C': // \u016c  [LATIN CAPITAL LETTER U WITH BREVE]\n        case '\\u016E': // \u016e  [LATIN CAPITAL LETTER U WITH RING ABOVE]\n        case '\\u0170': // \u0170  [LATIN CAPITAL LETTER U WITH DOUBLE ACUTE]\n        case '\\u0172': // \u0172  [LATIN CAPITAL LETTER U WITH OGONEK]\n        case '\\u01AF': // \u01af  [LATIN CAPITAL LETTER U WITH HORN]\n        case '\\u01D3': // \u01d3  [LATIN CAPITAL LETTER U WITH CARON]\n        case '\\u01D5': // \u01d5  [LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON]\n        case '\\u01D7': // \u01d7  [LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE]\n        case '\\u01D9': // \u01d9  [LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON]\n        case '\\u01DB': // \u01db  [LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE]\n        case '\\u0214': // \u0214  [LATIN CAPITAL LETTER U WITH DOUBLE GRAVE]\n        case '\\u0216': // \u0216  [LATIN CAPITAL LETTER U WITH INVERTED BREVE]\n        case '\\u0244': // \u0244  [LATIN CAPITAL LETTER U BAR]\n        case '\\u1D1C': // \u1d1c  [LATIN LETTER SMALL CAPITAL U]\n        case '\\u1D7E': // \u1d7e  [LATIN SMALL CAPITAL LETTER U WITH STROKE]\n        case '\\u1E72': // \u1e72  [LATIN CAPITAL LETTER U WITH DIAERESIS BELOW]\n        case '\\u1E74': // \u1e74  [LATIN CAPITAL LETTER U WITH TILDE BELOW]\n        case '\\u1E76': // \u1e76  [LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW]\n        case '\\u1E78': // \u1e78  [LATIN CAPITAL LETTER U WITH TILDE AND ACUTE]\n        case '\\u1E7A': // \u1e7a  [LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS]\n        case '\\u1EE4': // \u1ee4  [LATIN CAPITAL LETTER U WITH DOT BELOW]\n        case '\\u1EE6': // \u1ee6  [LATIN CAPITAL LETTER U WITH HOOK ABOVE]\n        case '\\u1EE8': // \u1ee8  [LATIN CAPITAL LETTER U WITH HORN AND ACUTE]\n        case '\\u1EEA': // \u1eea  [LATIN CAPITAL LETTER U WITH HORN AND GRAVE]\n        case '\\u1EEC': // \u1eec  [LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE]\n        case '\\u1EEE': // \u1eee  [LATIN CAPITAL LETTER U WITH HORN AND TILDE]\n        case '\\u1EF0': // \u1ef0  [LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW]\n        case '\\u24CA': // \u24ca  [CIRCLED LATIN CAPITAL LETTER U]\n        case '\\uFF35': // \uff35  [FULLWIDTH LATIN CAPITAL LETTER U]\n          output[outputPos++] = 'U';\n          break;\n        case '\\u00F9': // \u00f9  [LATIN SMALL LETTER U WITH GRAVE]\n        case '\\u00FA': // \u00fa  [LATIN SMALL LETTER U WITH ACUTE]\n        case '\\u00FB': // \u00fb  [LATIN SMALL LETTER U WITH CIRCUMFLEX]\n        case '\\u00FC': // \u00fc  [LATIN SMALL LETTER U WITH DIAERESIS]\n        case '\\u0169': // \u0169  [LATIN SMALL LETTER U WITH TILDE]\n        case '\\u016B': // \u016b  [LATIN SMALL LETTER U WITH MACRON]\n        case '\\u016D': // \u016d  [LATIN SMALL LETTER U WITH BREVE]\n        case '\\u016F': // \u016f  [LATIN SMALL LETTER U WITH RING ABOVE]\n        case '\\u0171': // \u0171  [LATIN SMALL LETTER U WITH DOUBLE ACUTE]\n        case '\\u0173': // \u0173  [LATIN SMALL LETTER U WITH OGONEK]\n        case '\\u01B0': // \u01b0  [LATIN SMALL LETTER U WITH HORN]\n        case '\\u01D4': // \u01d4  [LATIN SMALL LETTER U WITH CARON]\n        case '\\u01D6': // \u01d6  [LATIN SMALL LETTER U WITH DIAERESIS AND MACRON]\n        case '\\u01D8': // \u01d8  [LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE]\n        case '\\u01DA': // \u01da  [LATIN SMALL LETTER U WITH DIAERESIS AND CARON]\n        case '\\u01DC': // \u01dc  [LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE]\n        case '\\u0215': // \u0215  [LATIN SMALL LETTER U WITH DOUBLE GRAVE]\n        case '\\u0217': // \u0217  [LATIN SMALL LETTER U WITH INVERTED BREVE]\n        case '\\u0289': // \u0289  [LATIN SMALL LETTER U BAR]\n        case '\\u1D64': // \u1d64  [LATIN SUBSCRIPT SMALL LETTER U]\n        case '\\u1D99': // \u1d99  [LATIN SMALL LETTER U WITH RETROFLEX HOOK]\n        case '\\u1E73': // \u1e73  [LATIN SMALL LETTER U WITH DIAERESIS BELOW]\n        case '\\u1E75': // \u1e75  [LATIN SMALL LETTER U WITH TILDE BELOW]\n        case '\\u1E77': // \u1e77  [LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW]\n        case '\\u1E79': // \u1e79  [LATIN SMALL LETTER U WITH TILDE AND ACUTE]\n        case '\\u1E7B': // \u1e7b  [LATIN SMALL LETTER U WITH MACRON AND DIAERESIS]\n        case '\\u1EE5': // \u1ee5  [LATIN SMALL LETTER U WITH DOT BELOW]\n        case '\\u1EE7': // \u1ee7  [LATIN SMALL LETTER U WITH HOOK ABOVE]\n        case '\\u1EE9': // \u1ee9  [LATIN SMALL LETTER U WITH HORN AND ACUTE]\n        case '\\u1EEB': // \u1eeb  [LATIN SMALL LETTER U WITH HORN AND GRAVE]\n        case '\\u1EED': // \u1eed  [LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE]\n        case '\\u1EEF': // \u1eef  [LATIN SMALL LETTER U WITH HORN AND TILDE]\n        case '\\u1EF1': // \u1ef1  [LATIN SMALL LETTER U WITH HORN AND DOT BELOW]\n        case '\\u24E4': // \u24e4  [CIRCLED LATIN SMALL LETTER U]\n        case '\\uFF55': // \uff55  [FULLWIDTH LATIN SMALL LETTER U]\n          output[outputPos++] = 'u';\n          break;\n        case '\\u24B0': // \u24b0  [PARENTHESIZED LATIN SMALL LETTER U]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'u';\n          output[outputPos++] = ')';\n          break;\n        case '\\u1D6B': // \u1d6b  [LATIN SMALL LETTER UE]\n          output[outputPos++] = 'u';\n          output[outputPos++] = 'e';\n          break;\n        case '\\u01B2': // \u01b2  [LATIN CAPITAL LETTER V WITH HOOK]\n        case '\\u0245': // \u0245  [LATIN CAPITAL LETTER TURNED V]\n        case '\\u1D20': // \u1d20  [LATIN LETTER SMALL CAPITAL V]\n        case '\\u1E7C': // \u1e7c  [LATIN CAPITAL LETTER V WITH TILDE]\n        case '\\u1E7E': // \u1e7e  [LATIN CAPITAL LETTER V WITH DOT BELOW]\n        case '\\u1EFC': // \u1efc  [LATIN CAPITAL LETTER MIDDLE-WELSH V]\n        case '\\u24CB': // \u24cb  [CIRCLED LATIN CAPITAL LETTER V]\n        case '\\uA75E': // \ua75e  [LATIN CAPITAL LETTER V WITH DIAGONAL STROKE]\n        case '\\uA768': // \ua768  [LATIN CAPITAL LETTER VEND]\n        case '\\uFF36': // \uff36  [FULLWIDTH LATIN CAPITAL LETTER V]\n          output[outputPos++] = 'V';\n          break;\n        case '\\u028B': // \u028b  [LATIN SMALL LETTER V WITH HOOK]\n        case '\\u028C': // \u028c  [LATIN SMALL LETTER TURNED V]\n        case '\\u1D65': // \u1d65  [LATIN SUBSCRIPT SMALL LETTER V]\n        case '\\u1D8C': // \u1d8c  [LATIN SMALL LETTER V WITH PALATAL HOOK]\n        case '\\u1E7D': // \u1e7d  [LATIN SMALL LETTER V WITH TILDE]\n        case '\\u1E7F': // \u1e7f  [LATIN SMALL LETTER V WITH DOT BELOW]\n        case '\\u24E5': // \u24e5  [CIRCLED LATIN SMALL LETTER V]\n        case '\\u2C71': // \u2c71  [LATIN SMALL LETTER V WITH RIGHT HOOK]\n        case '\\u2C74': // \u2c74  [LATIN SMALL LETTER V WITH CURL]\n        case '\\uA75F': // \ua75f  [LATIN SMALL LETTER V WITH DIAGONAL STROKE]\n        case '\\uFF56': // \uff56  [FULLWIDTH LATIN SMALL LETTER V]\n          output[outputPos++] = 'v';\n          break;\n        case '\\uA760': // \ua760  [LATIN CAPITAL LETTER VY]\n          output[outputPos++] = 'V';\n          output[outputPos++] = 'Y';\n          break;\n        case '\\u24B1': // \u24b1  [PARENTHESIZED LATIN SMALL LETTER V]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'v';\n          output[outputPos++] = ')';\n          break;\n        case '\\uA761': // \ua761  [LATIN SMALL LETTER VY]\n          output[outputPos++] = 'v';\n          output[outputPos++] = 'y';\n          break;\n        case '\\u0174': // \u0174  [LATIN CAPITAL LETTER W WITH CIRCUMFLEX]\n        case '\\u01F7': // \u01f7  http://en.wikipedia.org/wiki/Wynn  [LATIN CAPITAL LETTER WYNN]\n        case '\\u1D21': // \u1d21  [LATIN LETTER SMALL CAPITAL W]\n        case '\\u1E80': // \u1e80  [LATIN CAPITAL LETTER W WITH GRAVE]\n        case '\\u1E82': // \u1e82  [LATIN CAPITAL LETTER W WITH ACUTE]\n        case '\\u1E84': // \u1e84  [LATIN CAPITAL LETTER W WITH DIAERESIS]\n        case '\\u1E86': // \u1e86  [LATIN CAPITAL LETTER W WITH DOT ABOVE]\n        case '\\u1E88': // \u1e88  [LATIN CAPITAL LETTER W WITH DOT BELOW]\n        case '\\u24CC': // \u24cc  [CIRCLED LATIN CAPITAL LETTER W]\n        case '\\u2C72': // \u2c72  [LATIN CAPITAL LETTER W WITH HOOK]\n        case '\\uFF37': // \uff37  [FULLWIDTH LATIN CAPITAL LETTER W]\n          output[outputPos++] = 'W';\n          break;\n        case '\\u0175': // \u0175  [LATIN SMALL LETTER W WITH CIRCUMFLEX]\n        case '\\u01BF': // \u01bf  http://en.wikipedia.org/wiki/Wynn  [LATIN LETTER WYNN]\n        case '\\u028D': // \u028d  [LATIN SMALL LETTER TURNED W]\n        case '\\u1E81': // \u1e81  [LATIN SMALL LETTER W WITH GRAVE]\n        case '\\u1E83': // \u1e83  [LATIN SMALL LETTER W WITH ACUTE]\n        case '\\u1E85': // \u1e85  [LATIN SMALL LETTER W WITH DIAERESIS]\n        case '\\u1E87': // \u1e87  [LATIN SMALL LETTER W WITH DOT ABOVE]\n        case '\\u1E89': // \u1e89  [LATIN SMALL LETTER W WITH DOT BELOW]\n        case '\\u1E98': // \u1e98  [LATIN SMALL LETTER W WITH RING ABOVE]\n        case '\\u24E6': // \u24e6  [CIRCLED LATIN SMALL LETTER W]\n        case '\\u2C73': // \u2c73  [LATIN SMALL LETTER W WITH HOOK]\n        case '\\uFF57': // \uff57  [FULLWIDTH LATIN SMALL LETTER W]\n          output[outputPos++] = 'w';\n          break;\n        case '\\u24B2': // \u24b2  [PARENTHESIZED LATIN SMALL LETTER W]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'w';\n          output[outputPos++] = ')';\n          break;\n        case '\\u1E8A': // \u1e8a  [LATIN CAPITAL LETTER X WITH DOT ABOVE]\n        case '\\u1E8C': // \u1e8c  [LATIN CAPITAL LETTER X WITH DIAERESIS]\n        case '\\u24CD': // \u24cd  [CIRCLED LATIN CAPITAL LETTER X]\n        case '\\uFF38': // \uff38  [FULLWIDTH LATIN CAPITAL LETTER X]\n          output[outputPos++] = 'X';\n          break;\n        case '\\u1D8D': // \u1d8d  [LATIN SMALL LETTER X WITH PALATAL HOOK]\n        case '\\u1E8B': // \u1e8b  [LATIN SMALL LETTER X WITH DOT ABOVE]\n        case '\\u1E8D': // \u1e8d  [LATIN SMALL LETTER X WITH DIAERESIS]\n        case '\\u2093': // \u2093  [LATIN SUBSCRIPT SMALL LETTER X]\n        case '\\u24E7': // \u24e7  [CIRCLED LATIN SMALL LETTER X]\n        case '\\uFF58': // \uff58  [FULLWIDTH LATIN SMALL LETTER X]\n          output[outputPos++] = 'x';\n          break;\n        case '\\u24B3': // \u24b3  [PARENTHESIZED LATIN SMALL LETTER X]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'x';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00DD': // \u00dd  [LATIN CAPITAL LETTER Y WITH ACUTE]\n        case '\\u0176': // \u0176  [LATIN CAPITAL LETTER Y WITH CIRCUMFLEX]\n        case '\\u0178': // \u0178  [LATIN CAPITAL LETTER Y WITH DIAERESIS]\n        case '\\u01B3': // \u01b3  [LATIN CAPITAL LETTER Y WITH HOOK]\n        case '\\u0232': // \u0232  [LATIN CAPITAL LETTER Y WITH MACRON]\n        case '\\u024E': // \u024e  [LATIN CAPITAL LETTER Y WITH STROKE]\n        case '\\u028F': // \u028f  [LATIN LETTER SMALL CAPITAL Y]\n        case '\\u1E8E': // \u1e8e  [LATIN CAPITAL LETTER Y WITH DOT ABOVE]\n        case '\\u1EF2': // \u1ef2  [LATIN CAPITAL LETTER Y WITH GRAVE]\n        case '\\u1EF4': // \u1ef4  [LATIN CAPITAL LETTER Y WITH DOT BELOW]\n        case '\\u1EF6': // \u1ef6  [LATIN CAPITAL LETTER Y WITH HOOK ABOVE]\n        case '\\u1EF8': // \u1ef8  [LATIN CAPITAL LETTER Y WITH TILDE]\n        case '\\u1EFE': // \u1efe  [LATIN CAPITAL LETTER Y WITH LOOP]\n        case '\\u24CE': // \u24ce  [CIRCLED LATIN CAPITAL LETTER Y]\n        case '\\uFF39': // \uff39  [FULLWIDTH LATIN CAPITAL LETTER Y]\n          output[outputPos++] = 'Y';\n          break;\n        case '\\u00FD': // \u00fd  [LATIN SMALL LETTER Y WITH ACUTE]\n        case '\\u00FF': // \u00ff  [LATIN SMALL LETTER Y WITH DIAERESIS]\n        case '\\u0177': // \u0177  [LATIN SMALL LETTER Y WITH CIRCUMFLEX]\n        case '\\u01B4': // \u01b4  [LATIN SMALL LETTER Y WITH HOOK]\n        case '\\u0233': // \u0233  [LATIN SMALL LETTER Y WITH MACRON]\n        case '\\u024F': // \u024f  [LATIN SMALL LETTER Y WITH STROKE]\n        case '\\u028E': // \u028e  [LATIN SMALL LETTER TURNED Y]\n        case '\\u1E8F': // \u1e8f  [LATIN SMALL LETTER Y WITH DOT ABOVE]\n        case '\\u1E99': // \u1e99  [LATIN SMALL LETTER Y WITH RING ABOVE]\n        case '\\u1EF3': // \u1ef3  [LATIN SMALL LETTER Y WITH GRAVE]\n        case '\\u1EF5': // \u1ef5  [LATIN SMALL LETTER Y WITH DOT BELOW]\n        case '\\u1EF7': // \u1ef7  [LATIN SMALL LETTER Y WITH HOOK ABOVE]\n        case '\\u1EF9': // \u1ef9  [LATIN SMALL LETTER Y WITH TILDE]\n        case '\\u1EFF': // \u1eff  [LATIN SMALL LETTER Y WITH LOOP]\n        case '\\u24E8': // \u24e8  [CIRCLED LATIN SMALL LETTER Y]\n        case '\\uFF59': // \uff59  [FULLWIDTH LATIN SMALL LETTER Y]\n          output[outputPos++] = 'y';\n          break;\n        case '\\u24B4': // \u24b4  [PARENTHESIZED LATIN SMALL LETTER Y]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'y';\n          output[outputPos++] = ')';\n          break;\n        case '\\u0179': // \u0179  [LATIN CAPITAL LETTER Z WITH ACUTE]\n        case '\\u017B': // \u017b  [LATIN CAPITAL LETTER Z WITH DOT ABOVE]\n        case '\\u017D': // \u017d  [LATIN CAPITAL LETTER Z WITH CARON]\n        case '\\u01B5': // \u01b5  [LATIN CAPITAL LETTER Z WITH STROKE]\n        case '\\u021C': // \u021c  http://en.wikipedia.org/wiki/Yogh  [LATIN CAPITAL LETTER YOGH]\n        case '\\u0224': // \u0224  [LATIN CAPITAL LETTER Z WITH HOOK]\n        case '\\u1D22': // \u1d22  [LATIN LETTER SMALL CAPITAL Z]\n        case '\\u1E90': // \u1e90  [LATIN CAPITAL LETTER Z WITH CIRCUMFLEX]\n        case '\\u1E92': // \u1e92  [LATIN CAPITAL LETTER Z WITH DOT BELOW]\n        case '\\u1E94': // \u1e94  [LATIN CAPITAL LETTER Z WITH LINE BELOW]\n        case '\\u24CF': // \u24cf  [CIRCLED LATIN CAPITAL LETTER Z]\n        case '\\u2C6B': // \u2c6b  [LATIN CAPITAL LETTER Z WITH DESCENDER]\n        case '\\uA762': // \ua762  [LATIN CAPITAL LETTER VISIGOTHIC Z]\n        case '\\uFF3A': // \uff3a  [FULLWIDTH LATIN CAPITAL LETTER Z]\n          output[outputPos++] = 'Z';\n          break;\n        case '\\u017A': // \u017a  [LATIN SMALL LETTER Z WITH ACUTE]\n        case '\\u017C': // \u017c  [LATIN SMALL LETTER Z WITH DOT ABOVE]\n        case '\\u017E': // \u017e  [LATIN SMALL LETTER Z WITH CARON]\n        case '\\u01B6': // \u01b6  [LATIN SMALL LETTER Z WITH STROKE]\n        case '\\u021D': // \u021d  http://en.wikipedia.org/wiki/Yogh  [LATIN SMALL LETTER YOGH]\n        case '\\u0225': // \u0225  [LATIN SMALL LETTER Z WITH HOOK]\n        case '\\u0240': // \u0240  [LATIN SMALL LETTER Z WITH SWASH TAIL]\n        case '\\u0290': // \u0290  [LATIN SMALL LETTER Z WITH RETROFLEX HOOK]\n        case '\\u0291': // \u0291  [LATIN SMALL LETTER Z WITH CURL]\n        case '\\u1D76': // \u1d76  [LATIN SMALL LETTER Z WITH MIDDLE TILDE]\n        case '\\u1D8E': // \u1d8e  [LATIN SMALL LETTER Z WITH PALATAL HOOK]\n        case '\\u1E91': // \u1e91  [LATIN SMALL LETTER Z WITH CIRCUMFLEX]\n        case '\\u1E93': // \u1e93  [LATIN SMALL LETTER Z WITH DOT BELOW]\n        case '\\u1E95': // \u1e95  [LATIN SMALL LETTER Z WITH LINE BELOW]\n        case '\\u24E9': // \u24e9  [CIRCLED LATIN SMALL LETTER Z]\n        case '\\u2C6C': // \u2c6c  [LATIN SMALL LETTER Z WITH DESCENDER]\n        case '\\uA763': // \ua763  [LATIN SMALL LETTER VISIGOTHIC Z]\n        case '\\uFF5A': // \uff5a  [FULLWIDTH LATIN SMALL LETTER Z]\n          output[outputPos++] = 'z';\n          break;\n        case '\\u24B5': // \u24b5  [PARENTHESIZED LATIN SMALL LETTER Z]\n          output[outputPos++] = '(';\n          output[outputPos++] = 'z';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2070': // \u2070  [SUPERSCRIPT ZERO]\n        case '\\u2080': // \u2080  [SUBSCRIPT ZERO]\n        case '\\u24EA': // \u24ea  [CIRCLED DIGIT ZERO]\n        case '\\u24FF': // \u24ff  [NEGATIVE CIRCLED DIGIT ZERO]\n        case '\\uFF10': // \uff10  [FULLWIDTH DIGIT ZERO]\n          output[outputPos++] = '0';\n          break;\n        case '\\u00B9': // \u00b9  [SUPERSCRIPT ONE]\n        case '\\u2081': // \u2081  [SUBSCRIPT ONE]\n        case '\\u2460': // \u2460  [CIRCLED DIGIT ONE]\n        case '\\u24F5': // \u24f5  [DOUBLE CIRCLED DIGIT ONE]\n        case '\\u2776': // \u2776  [DINGBAT NEGATIVE CIRCLED DIGIT ONE]\n        case '\\u2780': // \u2780  [DINGBAT CIRCLED SANS-SERIF DIGIT ONE]\n        case '\\u278A': // \u278a  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE]\n        case '\\uFF11': // \uff11  [FULLWIDTH DIGIT ONE]\n          output[outputPos++] = '1';\n          break;\n        case '\\u2488': // \u2488  [DIGIT ONE FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2474': // \u2474  [PARENTHESIZED DIGIT ONE]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00B2': // \u00b2  [SUPERSCRIPT TWO]\n        case '\\u2082': // \u2082  [SUBSCRIPT TWO]\n        case '\\u2461': // \u2461  [CIRCLED DIGIT TWO]\n        case '\\u24F6': // \u24f6  [DOUBLE CIRCLED DIGIT TWO]\n        case '\\u2777': // \u2777  [DINGBAT NEGATIVE CIRCLED DIGIT TWO]\n        case '\\u2781': // \u2781  [DINGBAT CIRCLED SANS-SERIF DIGIT TWO]\n        case '\\u278B': // \u278b  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO]\n        case '\\uFF12': // \uff12  [FULLWIDTH DIGIT TWO]\n          output[outputPos++] = '2';\n          break;\n        case '\\u2489': // \u2489  [DIGIT TWO FULL STOP]\n          output[outputPos++] = '2';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2475': // \u2475  [PARENTHESIZED DIGIT TWO]\n          output[outputPos++] = '(';\n          output[outputPos++] = '2';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00B3': // \u00b3  [SUPERSCRIPT THREE]\n        case '\\u2083': // \u2083  [SUBSCRIPT THREE]\n        case '\\u2462': // \u2462  [CIRCLED DIGIT THREE]\n        case '\\u24F7': // \u24f7  [DOUBLE CIRCLED DIGIT THREE]\n        case '\\u2778': // \u2778  [DINGBAT NEGATIVE CIRCLED DIGIT THREE]\n        case '\\u2782': // \u2782  [DINGBAT CIRCLED SANS-SERIF DIGIT THREE]\n        case '\\u278C': // \u278c  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE]\n        case '\\uFF13': // \uff13  [FULLWIDTH DIGIT THREE]\n          output[outputPos++] = '3';\n          break;\n        case '\\u248A': // \u248a  [DIGIT THREE FULL STOP]\n          output[outputPos++] = '3';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2476': // \u2476  [PARENTHESIZED DIGIT THREE]\n          output[outputPos++] = '(';\n          output[outputPos++] = '3';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2074': // \u2074  [SUPERSCRIPT FOUR]\n        case '\\u2084': // \u2084  [SUBSCRIPT FOUR]\n        case '\\u2463': // \u2463  [CIRCLED DIGIT FOUR]\n        case '\\u24F8': // \u24f8  [DOUBLE CIRCLED DIGIT FOUR]\n        case '\\u2779': // \u2779  [DINGBAT NEGATIVE CIRCLED DIGIT FOUR]\n        case '\\u2783': // \u2783  [DINGBAT CIRCLED SANS-SERIF DIGIT FOUR]\n        case '\\u278D': // \u278d  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR]\n        case '\\uFF14': // \uff14  [FULLWIDTH DIGIT FOUR]\n          output[outputPos++] = '4';\n          break;\n        case '\\u248B': // \u248b  [DIGIT FOUR FULL STOP]\n          output[outputPos++] = '4';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2477': // \u2477  [PARENTHESIZED DIGIT FOUR]\n          output[outputPos++] = '(';\n          output[outputPos++] = '4';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2075': // \u2075  [SUPERSCRIPT FIVE]\n        case '\\u2085': // \u2085  [SUBSCRIPT FIVE]\n        case '\\u2464': // \u2464  [CIRCLED DIGIT FIVE]\n        case '\\u24F9': // \u24f9  [DOUBLE CIRCLED DIGIT FIVE]\n        case '\\u277A': // \u277a  [DINGBAT NEGATIVE CIRCLED DIGIT FIVE]\n        case '\\u2784': // \u2784  [DINGBAT CIRCLED SANS-SERIF DIGIT FIVE]\n        case '\\u278E': // \u278e  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE]\n        case '\\uFF15': // \uff15  [FULLWIDTH DIGIT FIVE]\n          output[outputPos++] = '5';\n          break;\n        case '\\u248C': // \u248c  [DIGIT FIVE FULL STOP]\n          output[outputPos++] = '5';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2478': // \u2478  [PARENTHESIZED DIGIT FIVE]\n          output[outputPos++] = '(';\n          output[outputPos++] = '5';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2076': // \u2076  [SUPERSCRIPT SIX]\n        case '\\u2086': // \u2086  [SUBSCRIPT SIX]\n        case '\\u2465': // \u2465  [CIRCLED DIGIT SIX]\n        case '\\u24FA': // \u24fa  [DOUBLE CIRCLED DIGIT SIX]\n        case '\\u277B': // \u277b  [DINGBAT NEGATIVE CIRCLED DIGIT SIX]\n        case '\\u2785': // \u2785  [DINGBAT CIRCLED SANS-SERIF DIGIT SIX]\n        case '\\u278F': // \u278f  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX]\n        case '\\uFF16': // \uff16  [FULLWIDTH DIGIT SIX]\n          output[outputPos++] = '6';\n          break;\n        case '\\u248D': // \u248d  [DIGIT SIX FULL STOP]\n          output[outputPos++] = '6';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2479': // \u2479  [PARENTHESIZED DIGIT SIX]\n          output[outputPos++] = '(';\n          output[outputPos++] = '6';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2077': // \u2077  [SUPERSCRIPT SEVEN]\n        case '\\u2087': // \u2087  [SUBSCRIPT SEVEN]\n        case '\\u2466': // \u2466  [CIRCLED DIGIT SEVEN]\n        case '\\u24FB': // \u24fb  [DOUBLE CIRCLED DIGIT SEVEN]\n        case '\\u277C': // \u277c  [DINGBAT NEGATIVE CIRCLED DIGIT SEVEN]\n        case '\\u2786': // \u2786  [DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN]\n        case '\\u2790': // \u2790  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN]\n        case '\\uFF17': // \uff17  [FULLWIDTH DIGIT SEVEN]\n          output[outputPos++] = '7';\n          break;\n        case '\\u248E': // \u248e  [DIGIT SEVEN FULL STOP]\n          output[outputPos++] = '7';\n          output[outputPos++] = '.';\n          break;\n        case '\\u247A': // \u247a  [PARENTHESIZED DIGIT SEVEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '7';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2078': // \u2078  [SUPERSCRIPT EIGHT]\n        case '\\u2088': // \u2088  [SUBSCRIPT EIGHT]\n        case '\\u2467': // \u2467  [CIRCLED DIGIT EIGHT]\n        case '\\u24FC': // \u24fc  [DOUBLE CIRCLED DIGIT EIGHT]\n        case '\\u277D': // \u277d  [DINGBAT NEGATIVE CIRCLED DIGIT EIGHT]\n        case '\\u2787': // \u2787  [DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT]\n        case '\\u2791': // \u2791  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT]\n        case '\\uFF18': // \uff18  [FULLWIDTH DIGIT EIGHT]\n          output[outputPos++] = '8';\n          break;\n        case '\\u248F': // \u248f  [DIGIT EIGHT FULL STOP]\n          output[outputPos++] = '8';\n          output[outputPos++] = '.';\n          break;\n        case '\\u247B': // \u247b  [PARENTHESIZED DIGIT EIGHT]\n          output[outputPos++] = '(';\n          output[outputPos++] = '8';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2079': // \u2079  [SUPERSCRIPT NINE]\n        case '\\u2089': // \u2089  [SUBSCRIPT NINE]\n        case '\\u2468': // \u2468  [CIRCLED DIGIT NINE]\n        case '\\u24FD': // \u24fd  [DOUBLE CIRCLED DIGIT NINE]\n        case '\\u277E': // \u277e  [DINGBAT NEGATIVE CIRCLED DIGIT NINE]\n        case '\\u2788': // \u2788  [DINGBAT CIRCLED SANS-SERIF DIGIT NINE]\n        case '\\u2792': // \u2792  [DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE]\n        case '\\uFF19': // \uff19  [FULLWIDTH DIGIT NINE]\n          output[outputPos++] = '9';\n          break;\n        case '\\u2490': // \u2490  [DIGIT NINE FULL STOP]\n          output[outputPos++] = '9';\n          output[outputPos++] = '.';\n          break;\n        case '\\u247C': // \u247c  [PARENTHESIZED DIGIT NINE]\n          output[outputPos++] = '(';\n          output[outputPos++] = '9';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2469': // \u2469  [CIRCLED NUMBER TEN]\n        case '\\u24FE': // \u24fe  [DOUBLE CIRCLED NUMBER TEN]\n        case '\\u277F': // \u277f  [DINGBAT NEGATIVE CIRCLED NUMBER TEN]\n        case '\\u2789': // \u2789  [DINGBAT CIRCLED SANS-SERIF NUMBER TEN]\n        case '\\u2793': // \u2793  [DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '0';\n          break;\n        case '\\u2491': // \u2491  [NUMBER TEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '0';\n          output[outputPos++] = '.';\n          break;\n        case '\\u247D': // \u247d  [PARENTHESIZED NUMBER TEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '0';\n          output[outputPos++] = ')';\n          break;\n        case '\\u246A': // \u246a  [CIRCLED NUMBER ELEVEN]\n        case '\\u24EB': // \u24eb  [NEGATIVE CIRCLED NUMBER ELEVEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '1';\n          break;\n        case '\\u2492': // \u2492  [NUMBER ELEVEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '1';\n          output[outputPos++] = '.';\n          break;\n        case '\\u247E': // \u247e  [PARENTHESIZED NUMBER ELEVEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '1';\n          output[outputPos++] = ')';\n          break;\n        case '\\u246B': // \u246b  [CIRCLED NUMBER TWELVE]\n        case '\\u24EC': // \u24ec  [NEGATIVE CIRCLED NUMBER TWELVE]\n          output[outputPos++] = '1';\n          output[outputPos++] = '2';\n          break;\n        case '\\u2493': // \u2493  [NUMBER TWELVE FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '2';\n          output[outputPos++] = '.';\n          break;\n        case '\\u247F': // \u247f  [PARENTHESIZED NUMBER TWELVE]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '2';\n          output[outputPos++] = ')';\n          break;\n        case '\\u246C': // \u246c  [CIRCLED NUMBER THIRTEEN]\n        case '\\u24ED': // \u24ed  [NEGATIVE CIRCLED NUMBER THIRTEEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '3';\n          break;\n        case '\\u2494': // \u2494  [NUMBER THIRTEEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '3';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2480': // \u2480  [PARENTHESIZED NUMBER THIRTEEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '3';\n          output[outputPos++] = ')';\n          break;\n        case '\\u246D': // \u246d  [CIRCLED NUMBER FOURTEEN]\n        case '\\u24EE': // \u24ee  [NEGATIVE CIRCLED NUMBER FOURTEEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '4';\n          break;\n        case '\\u2495': // \u2495  [NUMBER FOURTEEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '4';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2481': // \u2481  [PARENTHESIZED NUMBER FOURTEEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '4';\n          output[outputPos++] = ')';\n          break;\n        case '\\u246E': // \u246e  [CIRCLED NUMBER FIFTEEN]\n        case '\\u24EF': // \u24ef  [NEGATIVE CIRCLED NUMBER FIFTEEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '5';\n          break;\n        case '\\u2496': // \u2496  [NUMBER FIFTEEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '5';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2482': // \u2482  [PARENTHESIZED NUMBER FIFTEEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '5';\n          output[outputPos++] = ')';\n          break;\n        case '\\u246F': // \u246f  [CIRCLED NUMBER SIXTEEN]\n        case '\\u24F0': // \u24f0  [NEGATIVE CIRCLED NUMBER SIXTEEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '6';\n          break;\n        case '\\u2497': // \u2497  [NUMBER SIXTEEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '6';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2483': // \u2483  [PARENTHESIZED NUMBER SIXTEEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '6';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2470': // \u2470  [CIRCLED NUMBER SEVENTEEN]\n        case '\\u24F1': // \u24f1  [NEGATIVE CIRCLED NUMBER SEVENTEEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '7';\n          break;\n        case '\\u2498': // \u2498  [NUMBER SEVENTEEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '7';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2484': // \u2484  [PARENTHESIZED NUMBER SEVENTEEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '7';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2471': // \u2471  [CIRCLED NUMBER EIGHTEEN]\n        case '\\u24F2': // \u24f2  [NEGATIVE CIRCLED NUMBER EIGHTEEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '8';\n          break;\n        case '\\u2499': // \u2499  [NUMBER EIGHTEEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '8';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2485': // \u2485  [PARENTHESIZED NUMBER EIGHTEEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '8';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2472': // \u2472  [CIRCLED NUMBER NINETEEN]\n        case '\\u24F3': // \u24f3  [NEGATIVE CIRCLED NUMBER NINETEEN]\n          output[outputPos++] = '1';\n          output[outputPos++] = '9';\n          break;\n        case '\\u249A': // \u249a  [NUMBER NINETEEN FULL STOP]\n          output[outputPos++] = '1';\n          output[outputPos++] = '9';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2486': // \u2486  [PARENTHESIZED NUMBER NINETEEN]\n          output[outputPos++] = '(';\n          output[outputPos++] = '1';\n          output[outputPos++] = '9';\n          output[outputPos++] = ')';\n          break;\n        case '\\u2473': // \u2473  [CIRCLED NUMBER TWENTY]\n        case '\\u24F4': // \u24f4  [NEGATIVE CIRCLED NUMBER TWENTY]\n          output[outputPos++] = '2';\n          output[outputPos++] = '0';\n          break;\n        case '\\u249B': // \u249b  [NUMBER TWENTY FULL STOP]\n          output[outputPos++] = '2';\n          output[outputPos++] = '0';\n          output[outputPos++] = '.';\n          break;\n        case '\\u2487': // \u2487  [PARENTHESIZED NUMBER TWENTY]\n          output[outputPos++] = '(';\n          output[outputPos++] = '2';\n          output[outputPos++] = '0';\n          output[outputPos++] = ')';\n          break;\n        case '\\u00AB': // \u00ab  [LEFT-POINTING DOUBLE ANGLE QUOTATION MARK]\n        case '\\u00BB': // \u00bb  [RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK]\n        case '\\u201C': // \u201c  [LEFT DOUBLE QUOTATION MARK]\n        case '\\u201D': // \u201d  [RIGHT DOUBLE QUOTATION MARK]\n        case '\\u201E': // \u201e  [DOUBLE LOW-9 QUOTATION MARK]\n        case '\\u2033': // \u2033  [DOUBLE PRIME]\n        case '\\u2036': // \u2036  [REVERSED DOUBLE PRIME]\n        case '\\u275D': // \u275d  [HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT]\n        case '\\u275E': // \u275e  [HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT]\n        case '\\u276E': // \u276e  [HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT]\n        case '\\u276F': // \u276f  [HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT]\n        case '\\uFF02': // \uff02  [FULLWIDTH QUOTATION MARK]\n          output[outputPos++] = '\"';\n          break;\n        case '\\u2018': // \u2018  [LEFT SINGLE QUOTATION MARK]\n        case '\\u2019': // \u2019  [RIGHT SINGLE QUOTATION MARK]\n        case '\\u201A': // \u201a  [SINGLE LOW-9 QUOTATION MARK]\n        case '\\u201B': // \u201b  [SINGLE HIGH-REVERSED-9 QUOTATION MARK]\n        case '\\u2032': // \u2032  [PRIME]\n        case '\\u2035': // \u2035  [REVERSED PRIME]\n        case '\\u2039': // \u2039  [SINGLE LEFT-POINTING ANGLE QUOTATION MARK]\n        case '\\u203A': // \u203a  [SINGLE RIGHT-POINTING ANGLE QUOTATION MARK]\n        case '\\u275B': // \u275b  [HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT]\n        case '\\u275C': // \u275c  [HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT]\n        case '\\uFF07': // \uff07  [FULLWIDTH APOSTROPHE]\n          output[outputPos++] = '\\'';\n          break;\n        case '\\u2010': // \u2010  [HYPHEN]\n        case '\\u2011': // \u2011  [NON-BREAKING HYPHEN]\n        case '\\u2012': // \u2012  [FIGURE DASH]\n        case '\\u2013': // \u2013  [EN DASH]\n        case '\\u2014': // \u2014  [EM DASH]\n        case '\\u207B': // \u207b  [SUPERSCRIPT MINUS]\n        case '\\u208B': // \u208b  [SUBSCRIPT MINUS]\n        case '\\uFF0D': // \uff0d  [FULLWIDTH HYPHEN-MINUS]\n          output[outputPos++] = '-';\n          break;\n        case '\\u2045': // \u2045  [LEFT SQUARE BRACKET WITH QUILL]\n        case '\\u2772': // \u2772  [LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT]\n        case '\\uFF3B': // \uff3b  [FULLWIDTH LEFT SQUARE BRACKET]\n          output[outputPos++] = '[';\n          break;\n        case '\\u2046': // \u2046  [RIGHT SQUARE BRACKET WITH QUILL]\n        case '\\u2773': // \u2773  [LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT]\n        case '\\uFF3D': // \uff3d  [FULLWIDTH RIGHT SQUARE BRACKET]\n          output[outputPos++] = ']';\n          break;\n        case '\\u207D': // \u207d  [SUPERSCRIPT LEFT PARENTHESIS]\n        case '\\u208D': // \u208d  [SUBSCRIPT LEFT PARENTHESIS]\n        case '\\u2768': // \u2768  [MEDIUM LEFT PARENTHESIS ORNAMENT]\n        case '\\u276A': // \u276a  [MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT]\n        case '\\uFF08': // \uff08  [FULLWIDTH LEFT PARENTHESIS]\n          output[outputPos++] = '(';\n          break;\n        case '\\u2E28': // \u2e28  [LEFT DOUBLE PARENTHESIS]\n          output[outputPos++] = '(';\n          output[outputPos++] = '(';\n          break;\n        case '\\u207E': // \u207e  [SUPERSCRIPT RIGHT PARENTHESIS]\n        case '\\u208E': // \u208e  [SUBSCRIPT RIGHT PARENTHESIS]\n        case '\\u2769': // \u2769  [MEDIUM RIGHT PARENTHESIS ORNAMENT]\n        case '\\u276B': // \u276b  [MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT]\n        case '\\uFF09': // \uff09  [FULLWIDTH RIGHT PARENTHESIS]\n          output[outputPos++] = ')';\n          break;\n        case '\\u2E29': // \u2e29  [RIGHT DOUBLE PARENTHESIS]\n          output[outputPos++] = ')';\n          output[outputPos++] = ')';\n          break;\n        case '\\u276C': // \u276c  [MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT]\n        case '\\u2770': // \u2770  [HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT]\n        case '\\uFF1C': // \uff1c  [FULLWIDTH LESS-THAN SIGN]\n          output[outputPos++] = '<';\n          break;\n        case '\\u276D': // \u276d  [MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT]\n        case '\\u2771': // \u2771  [HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT]\n        case '\\uFF1E': // \uff1e  [FULLWIDTH GREATER-THAN SIGN]\n          output[outputPos++] = '>';\n          break;\n        case '\\u2774': // \u2774  [MEDIUM LEFT CURLY BRACKET ORNAMENT]\n        case '\\uFF5B': // \uff5b  [FULLWIDTH LEFT CURLY BRACKET]\n          output[outputPos++] = '{';\n          break;\n        case '\\u2775': // \u2775  [MEDIUM RIGHT CURLY BRACKET ORNAMENT]\n        case '\\uFF5D': // \uff5d  [FULLWIDTH RIGHT CURLY BRACKET]\n          output[outputPos++] = '}';\n          break;\n        case '\\u207A': // \u207a  [SUPERSCRIPT PLUS SIGN]\n        case '\\u208A': // \u208a  [SUBSCRIPT PLUS SIGN]\n        case '\\uFF0B': // \uff0b  [FULLWIDTH PLUS SIGN]\n          output[outputPos++] = '+';\n          break;\n        case '\\u207C': // \u207c  [SUPERSCRIPT EQUALS SIGN]\n        case '\\u208C': // \u208c  [SUBSCRIPT EQUALS SIGN]\n        case '\\uFF1D': // \uff1d  [FULLWIDTH EQUALS SIGN]\n          output[outputPos++] = '=';\n          break;\n        case '\\uFF01': // \uff01  [FULLWIDTH EXCLAMATION MARK]\n          output[outputPos++] = '!';\n          break;\n        case '\\u203C': // \u203c  [DOUBLE EXCLAMATION MARK]\n          output[outputPos++] = '!';\n          output[outputPos++] = '!';\n          break;\n        case '\\u2049': // \u2049  [EXCLAMATION QUESTION MARK]\n          output[outputPos++] = '!';\n          output[outputPos++] = '?';\n          break;\n        case '\\uFF03': // \uff03  [FULLWIDTH NUMBER SIGN]\n          output[outputPos++] = '#';\n          break;\n        case '\\uFF04': // \uff04  [FULLWIDTH DOLLAR SIGN]\n          output[outputPos++] = '$';\n          break;\n        case '\\u2052': // \u2052  [COMMERCIAL MINUS SIGN]\n        case '\\uFF05': // \uff05  [FULLWIDTH PERCENT SIGN]\n          output[outputPos++] = '%';\n          break;\n        case '\\uFF06': // \uff06  [FULLWIDTH AMPERSAND]\n          output[outputPos++] = '&';\n          break;\n        case '\\u204E': // \u204e  [LOW ASTERISK]\n        case '\\uFF0A': // \uff0a  [FULLWIDTH ASTERISK]\n          output[outputPos++] = '*';\n          break;\n        case '\\uFF0C': // \uff0c  [FULLWIDTH COMMA]\n          output[outputPos++] = ',';\n          break;\n        case '\\uFF0E': // \uff0e  [FULLWIDTH FULL STOP]\n          output[outputPos++] = '.';\n          break;\n        case '\\u2044': // \u2044  [FRACTION SLASH]\n        case '\\uFF0F': // \uff0f  [FULLWIDTH SOLIDUS]\n          output[outputPos++] = '/';\n          break;\n        case '\\uFF1A': // \uff1a  [FULLWIDTH COLON]\n          output[outputPos++] = ':';\n          break;\n        case '\\u204F': // \u204f  [REVERSED SEMICOLON]\n        case '\\uFF1B': // \uff1b  [FULLWIDTH SEMICOLON]\n          output[outputPos++] = ';';\n          break;\n        case '\\uFF1F': // \uff1f  [FULLWIDTH QUESTION MARK]\n          output[outputPos++] = '?';\n          break;\n        case '\\u2047': // \u2047  [DOUBLE QUESTION MARK]\n          output[outputPos++] = '?';\n          output[outputPos++] = '?';\n          break;\n        case '\\u2048': // \u2048  [QUESTION EXCLAMATION MARK]\n          output[outputPos++] = '?';\n          output[outputPos++] = '!';\n          break;\n        case '\\uFF20': // \uff20  [FULLWIDTH COMMERCIAL AT]\n          output[outputPos++] = '@';\n          break;\n        case '\\uFF3C': // \uff3c  [FULLWIDTH REVERSE SOLIDUS]\n          output[outputPos++] = '\\\\';\n          break;\n        case '\\u2038': // \u2038  [CARET]\n        case '\\uFF3E': // \uff3e  [FULLWIDTH CIRCUMFLEX ACCENT]\n          output[outputPos++] = '^';\n          break;\n        case '\\uFF3F': // \uff3f  [FULLWIDTH LOW LINE]\n          output[outputPos++] = '_';\n          break;\n        case '\\u2053': // \u2053  [SWUNG DASH]\n        case '\\uFF5E': // \uff5e  [FULLWIDTH TILDE]\n          output[outputPos++] = '~';\n          break;\n        default:\n          output[outputPos++] = c;\n          break;\n      }\n    }\n  }\n\n  return new String(output, 0, outputPos);\n}", "path": "src\\hbaseindex\\src\\main\\java\\org\\lilycms\\hbaseindex\\ASCIIFoldingUtil.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Returns the location of an element that has been processed by this pipe (DOM flavor).\n * If the location is to be kept into an object built from this element, consider using\n * {@link #getLocation(Element)} and the {@link Locatable} interface.\n *\n * @param elem the element that holds the location information\n * @return a location string as defined by {@link Location#toString()}.\n */\n", "func_signal": "public static String getLocationString(Element elem)", "code": "{\n    Attr srcAttr = elem.getAttributeNodeNS(URI, SRC_ATTR);\n    if (srcAttr == null) {\n        return LocationUtils.UNKNOWN_STRING;\n    }\n\n    return srcAttr.getValue() + \":\" + elem.getAttributeNS(URI, LINE_ATTR) + \":\" + elem.getAttributeNS(URI, COL_ATTR);\n}", "path": "src\\util\\src\\main\\java\\org\\lilycms\\util\\location\\LocationAttributes.java", "repo_name": "adragomir/hbase-indexing-library", "stars": 8, "license": "apache-2.0", "language": "java", "size": 205}
{"docstring": "/**\n * Test getters for values passed into constructor\n */\n", "func_signal": "@Test\npublic void getters()", "code": "{\n\tBuildRepository repo = new BuildRepository(\"git://host/repo.git\",\n\t\t\t\"master\", \".\");\n\tassertEquals(\"git://host/repo.git\", repo.getUri());\n\tassertEquals(\"master\", repo.getBranch());\n\tassertEquals(\".\", repo.getDirectory());\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\BuildRepositoryTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Insert a mapping between a repository and an object id\n *\n * @param repo\n * @param id\n * @return this repository state\n */\n", "func_signal": "public BuildRepositoryState put(BuildRepository repo, ObjectId id)", "code": "{\n\tif (repo == null || id == null)\n\t\treturn this;\n\tstates.put(repo, id.copy());\n\treturn this;\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\BuildRepositoryState.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Create commit from repository and {@link RevCommit} instance\n * \n * @param repository\n * @param commit\n */\n", "func_signal": "public Commit(Repository repository, RevCommit commit)", "code": "{\n\tif (repository == null)\n\t\tthrow new IllegalArgumentException(\"Repository cannot be null\");\n\tif (commit == null)\n\t\tthrow new IllegalArgumentException(\"Commit cannot be null\");\n\tPersonIdent person = commit.getAuthorIdent();\n\tif (person == null)\n\t\tperson = commit.getCommitterIdent();\n\tname = person.getName();\n\temail = person.getEmailAddress();\n\tdate = person.getWhen();\n\tmessage = commit.getFullMessage();\n\tid = commit.name();\n\tfiles = CommitFileFilter.getFiles(repository, commit);\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\log\\Commit.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Create repository manager with given build repositories\n *\n * @param repositories\n */\n", "func_signal": "@DataBoundConstructor\npublic RepositoryManager(List<BuildRepository> repositories)", "code": "{\n\tif (repositories != null)\n\t\trepos = Collections.unmodifiableList(repositories);\n\telse\n\t\trepos = Collections.emptyList();\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\RepositoryManager.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Create commit log writer\n * \n * @param writer\n *            must be non-null\n */\n", "func_signal": "public CommitLogWriter(Writer writer)", "code": "{\n\tif (writer == null)\n\t\tthrow new IllegalArgumentException(\"Writer cannot be null\");\n\tgson = GsonUtils.getGson();\n\tjsonWriter = new JsonWriter(writer);\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\log\\CommitLogWriter.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Write commit. Null commits will be ignored.\n * \n * @param commit\n * @return this commit log writer\n * @throws IOException\n */\n", "func_signal": "public CommitLogWriter write(Commit commit) throws IOException", "code": "{\n\tif (commit == null)\n\t\treturn this;\n\tif (first) {\n\t\tjsonWriter.beginArray();\n\t\tfirst = false;\n\t}\n\ttry {\n\t\tgson.toJson(commit, Commit.class, jsonWriter);\n\t} catch (JsonIOException e) {\n\t\tthrow new IOException(e);\n\t}\n\treturn this;\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\log\\CommitLogWriter.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test polling a {@link BuildRepository} with one new change\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void oneChange() throws Exception", "code": "{\n\tRevCommit commit = git.add(\"file.txt\", \"a\");\n\tBuildRepository repo = new BuildRepository(git.repo().getDirectory()\n\t\t\t.toURI().toString(), \"refs/heads/master\", null);\n\tCloneOperation clone = new CloneOperation(repo);\n\tFile dir = git.tempDirectory();\n\tassertNotNull(clone.invoke(dir, null));\n\tBuildRepositoryState state = new BuildRepositoryState();\n\tstate.put(repo, commit);\n\tPollOperation op = new PollOperation(state,\n\t\t\tCollections.singletonList(repo));\n\tgit.add(\"file2.txt\", \"b\");\n\tassertEquals(PollingResult.SIGNIFICANT, op.invoke(dir, null));\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\PollOperationTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test cloning a local repository\n * \n * @throws Exception\n */\n", "func_signal": "@Test\npublic void cloneRepository() throws Exception", "code": "{\n\tRepository existing = git.repo();\n\tRevCommit commit = git.add(\"file.txt\", \"abcd\");\n\tBuildRepository repo = new BuildRepository(existing.getDirectory()\n\t\t\t.toURI().toString(), \"master\", null);\n\tFile dir = git.tempDirectory();\n\tCloneOperation op = new CloneOperation(repo);\n\tRepository cloned = op.invoke(dir, null);\n\tassertNotNull(cloned);\n\tassertFalse(existing.getDirectory().equals(cloned.getDirectory()));\n\tassertTrue(new File(dir, Constants.DOT_GIT).exists());\n\tassertNotNull(CommitUtils.getCommit(cloned, commit));\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\CloneOperationTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Get object id for repository\n *\n * @param repo\n * @return object id\n */\n", "func_signal": "public ObjectId get(BuildRepository repo)", "code": "{\n\tif (repo == null)\n\t\treturn null;\n\treturn states.get(repo);\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\BuildRepositoryState.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Create init operation\n *\n * @param repository\n */\n", "func_signal": "public InitOperation(final BuildRepository repository)", "code": "{\n\tif (repository == null)\n\t\tthrow new IllegalArgumentException(\"Repository cannot be null\");\n\tthis.repo = repository;\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\InitOperation.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Set parent commit log\n * \n * @param log\n * @return this commit\n */\n", "func_signal": "public Commit setParent(CommitLog log)", "code": "{\n\tsuper.setParent(log);\n\treturn this;\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\log\\Commit.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Close writer\n * \n * @return this commit log writer\n * @throws IOException\n */\n", "func_signal": "public CommitLogWriter close() throws IOException", "code": "{\n\tif (first)\n\t\tjsonWriter.beginArray();\n\tjsonWriter.endArray();\n\tjsonWriter.close();\n\treturn this;\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\log\\CommitLogWriter.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test polling a {@link BuildRepository} that does not resolve to a\n * {@link Repository}\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void noRepo() throws Exception", "code": "{\n\tBuildRepository repo = new BuildRepository(\"a\", \"master\", null);\n\tPollOperation op = new PollOperation(new BuildRepositoryState(),\n\t\t\tCollections.singletonList(repo));\n\tFile dir = git.tempDirectory();\n\tassertEquals(PollingResult.BUILD_NOW, op.invoke(dir, null));\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\PollOperationTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test polling a {@link BuildRepository} with no new changes\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void noChanges() throws Exception", "code": "{\n\tRevCommit commit = git.add(\"file.txt\", \"a\");\n\tBuildRepository repo = new BuildRepository(git.repo().getDirectory()\n\t\t\t.toURI().toString(), \"refs/heads/master\", null);\n\tCloneOperation clone = new CloneOperation(repo);\n\tFile dir = git.tempDirectory();\n\tassertNotNull(clone.invoke(dir, null));\n\tBuildRepositoryState state = new BuildRepositoryState();\n\tstate.put(repo, commit);\n\tPollOperation op = new PollOperation(state,\n\t\t\tCollections.singletonList(repo));\n\tassertEquals(PollingResult.NO_CHANGES, op.invoke(dir, null));\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\PollOperationTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test cloning into a subdirectory\n * \n * @throws Exception\n */\n", "func_signal": "@Test\npublic void cloneIntoSubDirectory() throws Exception", "code": "{\n\tRepository existing = git.repo();\n\tRevCommit commit = git.add(\"file.txt\", \"abcd\");\n\tBuildRepository repo = new BuildRepository(existing.getDirectory()\n\t\t\t.toURI().toString(), \"master\", \"sub1\");\n\tCloneOperation op = new CloneOperation(repo);\n\tFile dir = git.tempDirectory();\n\tRepository cloned = op.invoke(dir, null);\n\tassertNotNull(cloned);\n\tassertFalse(existing.getDirectory().equals(cloned.getDirectory()));\n\tassertFalse(new File(dir, Constants.DOT_GIT).exists());\n\tassertTrue(new File(dir, repo.getDirectory()).exists());\n\tassertTrue(new File(dir, repo.getDirectory() + File.separatorChar\n\t\t\t+ Constants.DOT_GIT).exists());\n\tassertNotNull(CommitUtils.getCommit(cloned, commit));\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\CloneOperationTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test different {@link BuildRepository} instances being equal\n */\n", "func_signal": "@Test\npublic void equalsRepository()", "code": "{\n\tBuildRepository repo1 = new BuildRepository(\"git://host/repo.git\",\n\t\t\t\"master\", \".\");\n\tassertTrue(repo1.equals(repo1));\n\tassertFalse(repo1.equals(null));\n\tassertFalse(repo1.equals(\"string\"));\n\tassertEquals(repo1.hashCode(), repo1.hashCode());\n\tassertEquals(repo1.toString(), repo1.toString());\n\n\tBuildRepository repo2 = new BuildRepository(null, null, null);\n\tassertFalse(repo1.equals(repo2));\n\trepo2 = new BuildRepository(\"git://host/repo.git\", null, null);\n\tassertFalse(repo1.equals(repo2));\n\trepo2 = new BuildRepository(\"git://host/repo.git\", \"master\", null);\n\tassertFalse(repo1.equals(repo2));\n\trepo2 = new BuildRepository(\"git://host/repo.git\", \"master\", \".\");\n\tassertTrue(repo1.equals(repo2));\n\tassertEquals(repo1.hashCode(), repo2.hashCode());\n\tassertEquals(repo1.toString(), repo2.toString());\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\BuildRepositoryTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test polling with an empty repository state\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void emptyState() throws Exception", "code": "{\n\tgit.add(\"file.txt\", \"a\");\n\tBuildRepository repo = new BuildRepository(git.repo().getDirectory()\n\t\t\t.toURI().toString(), \"refs/heads/master\", null);\n\tCloneOperation clone = new CloneOperation(repo);\n\tFile dir = git.tempDirectory();\n\tassertNotNull(clone.invoke(dir, null));\n\tPollOperation op = new PollOperation(new BuildRepositoryState(),\n\t\t\tCollections.singletonList(repo));\n\tassertEquals(PollingResult.BUILD_NOW, op.invoke(dir, null));\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\PollOperationTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Create poll operation using given baseline\n *\n * @param baseline\n * @param repos\n */\n", "func_signal": "public PollOperation(BuildRepositoryState baseline,\n\t\tList<BuildRepository> repos)", "code": "{\n\tif (baseline == null)\n\t\tthrow new IllegalArgumentException(\"Baseline cannot be null\");\n\tif (repos == null)\n\t\tthrow new IllegalArgumentException(\"Repos cannot be null\");\n\tstate = baseline;\n\tthis.repos = repos;\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\PollOperation.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Create commit file from diff entry\n * \n * @param entry\n */\n", "func_signal": "public CommitFile(DiffEntry entry)", "code": "{\n\ttype = entry.getChangeType();\n\tswitch (type) {\n\tcase ADD:\n\t\toldPath = null;\n\t\tnewPath = entry.getNewPath();\n\t\tbreak;\n\tcase DELETE:\n\t\toldPath = entry.getOldPath();\n\t\tnewPath = null;\n\t\tbreak;\n\tcase COPY:\n\tcase MODIFY:\n\tcase RENAME:\n\tdefault:\n\t\toldPath = entry.getOldPath();\n\t\tnewPath = entry.getNewPath();\n\t\tbreak;\n\t}\n}", "path": "plugin\\src\\main\\java\\org\\jenkinsci\\git\\log\\CommitFile.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Test polling an empty list of repositories\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void emptyRepos() throws Exception", "code": "{\n\tPollOperation op = new PollOperation(new BuildRepositoryState(),\n\t\t\tCollections.<BuildRepository> emptyList());\n\tassertEquals(PollingResult.NO_CHANGES, op.invoke(null, null));\n}", "path": "plugin\\src\\test\\java\\org\\jenkinsci\\git\\PollOperationTest.java", "repo_name": "kevinsawicki/gitng-plugin", "stars": 8, "license": "None", "language": "java", "size": 184}
{"docstring": "/**\n * Returns the exception types.\n *\n * @return the exception types\n */\n", "func_signal": "public ClassInfo[] getExceptionTypes()", "code": "{\n    if (m_exceptionTypes == null) {\n        Class[] exceptionTypes = ((Method) m_member).getExceptionTypes();\n        m_exceptionTypes = new ClassInfo[exceptionTypes.length];\n        for (int i = 0; i < exceptionTypes.length; i++) {\n            Class exceptionType = exceptionTypes[i];\n            ClassInfo metaData;\n            if (m_classInfoRepository.hasClassInfo(exceptionType.getName())) {\n                metaData = m_classInfoRepository.getClassInfo(exceptionType.getName());\n            } else {\n                metaData = JavaClassInfo.getClassInfo(exceptionType);\n                m_classInfoRepository.addClassInfo(metaData);\n            }\n            m_exceptionTypes[i] = metaData;\n        }\n    }\n    return m_exceptionTypes;\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\reflect\\impl\\java\\JavaMethodInfo.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * @Around methodsToLog\n */\n", "func_signal": "public Object logMethod(StaticJoinPoint joinPoint) throws Throwable", "code": "{\n    MemberSignature signature = (MemberSignature) joinPoint.getSignature();\n    indent();\n    System.out.println(\n            \"--> \"\n            + joinPoint.getCalleeClass().getName()\n            + \"::\"\n            + signature.getName()\n    );\n    m_level++;\n    final Object result = joinPoint.proceed();\n    m_level--;\n    indent();\n    System.out.println(\n            \"<-- \"\n            + joinPoint.getCalleeClass().getName()\n            + \"::\"\n            + signature.getName()\n    );\n    return result;\n}", "path": "src\\samples\\examples\\logging\\AbstractLoggingAspect.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Returns the return type.\n *\n * @return the return type\n */\n", "func_signal": "public ClassInfo getReturnType()", "code": "{\n    if (m_returnType == null) {\n        Class returnTypeClass = ((Method) m_member).getReturnType();\n        if (m_classInfoRepository.hasClassInfo(returnTypeClass.getName())) {\n            m_returnType = m_classInfoRepository.getClassInfo(returnTypeClass.getName());\n        } else {\n            m_returnType = JavaClassInfo.getClassInfo(returnTypeClass);\n            m_classInfoRepository.addClassInfo(m_returnType);\n        }\n    }\n    return m_returnType;\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\reflect\\impl\\java\\JavaMethodInfo.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates the getSignature method.\n */\n", "func_signal": "protected void createGetSignatureMethod()", "code": "{\n\tMethodVisitor cv = m_cw.visitMethod(ACC_PUBLIC,\n\t                                  GET_SIGNATURE_METHOD_NAME,\n\t                                  GET_SIGNATURE_METHOD_SIGNATURE,\n\t                                  null,\n\t                                  null);\n\n\tcv.visitFieldInsn(GETSTATIC,\n\t                  m_joinPointClassName,\n\t                  SIGNATURE_FIELD_NAME,\n\t                  STATICINITIALIZATION_SIGNATURE_IMPL_CLASS_SIGNATURE);\n\tcv.visitInsn(ARETURN);\n\tcv.visitMaxs(0, 0);\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\transform\\inlining\\compiler\\StaticInitializationJoinPointCompiler.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * @AfterFinally methodsToLog\n */\n", "func_signal": "public void logAfterFinally(final StaticJoinPoint joinPoint) throws Throwable", "code": "{\n    MemberSignature signature = (MemberSignature) joinPoint.getSignature();\n    System.out.println(\n            \"AFTER FINALLY: \"\n            + joinPoint.getCalleeClass().getName()\n            + \"::\"\n            + signature.getName()\n    );\n}", "path": "src\\samples\\examples\\logging\\AbstractLoggingAspect.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates a call to the target join point, the parameter(s) to the join\n * point are retrieved from the invocation local join point instance.\n * \n * @param cv\n */\n", "func_signal": "protected void createJoinPointInvocation(final MethodVisitor cv)", "code": "{\n\n\t// load the target instance member field unless calleeMember is static\n\tString joinPointName = TransformationUtil.getPrefixedOriginalClinitName(m_calleeClassName);\n\tcv.visitMethodInsn(INVOKESTATIC, m_calleeClassName, joinPointName, m_calleeMemberDesc);\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\transform\\inlining\\compiler\\StaticInitializationJoinPointCompiler.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Return the annotation with a specific name for a specific method.\n *\n * @param annotationName the annotation name\n * @param methodInfo     the MethodInfo object to find the annotation on.\n * @return the annotation or null\n */\n", "func_signal": "public static Annotation getAnnotation(final String annotationName, final MethodInfo methodInfo)", "code": "{\n    return methodInfo.getDeclaringType().getAnnotationReader().getMethodAnnotation(\n            annotationName,\n            methodInfo.getName(),\n            methodInfo.getSignature(),\n            methodInfo.getDeclaringType().getClassLoader()\n    );\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\annotation\\AsmAnnotations.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Return the annotation with a specific name for a specific constructor.\n *\n * @param annotationName  the annotation name\n * @param constructorInfo the ConstructorInfo object to find the annotation on.\n * @return the annotation or null\n */\n", "func_signal": "public static Annotation getAnnotation(final String annotationName, final ConstructorInfo constructorInfo)", "code": "{\n    return constructorInfo.getDeclaringType().getAnnotationReader().getConstructorAnnotation(\n            annotationName,\n            constructorInfo.getSignature(),\n            constructorInfo.getDeclaringType().getClassLoader()\n    );\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\annotation\\AsmAnnotations.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Returns the method info for the method specified.\n *\n * @param method the method\n * @return the method info\n */\n", "func_signal": "public static MethodInfo getMethodInfo(final Method method)", "code": "{\n    Class declaringClass = method.getDeclaringClass();\n    JavaClassInfoRepository repository = JavaClassInfoRepository.getRepository(declaringClass.getClassLoader());\n    ClassInfo classInfo = repository.getClassInfo(declaringClass.getName());\n    if (classInfo == null) {\n        classInfo = JavaClassInfo.getClassInfo(declaringClass);\n    }\n    return classInfo.getMethod(ReflectHelper.calculateHash(method));\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\reflect\\impl\\java\\JavaMethodInfo.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates a new perClass mixin instance.\n *\n * @param klass\n * @return the mixin instance\n */\n", "func_signal": "public Object mixinOf(final Class klass)", "code": "{\n    if (m_perClassMixins.containsKey(klass)) {\n        return m_perClassMixins.get(klass);\n    }\n    synchronized (m_perClassMixins) {\n        if (!m_perClassMixins.containsKey(klass)) {\n            final Object mixin;\n            if (m_deploymentModel == DeploymentModel.PER_CLASS) {\n                try {\n                    if (m_perClassConstructor != null) {\n                        mixin = m_perClassConstructor.newInstance(new Object[]{klass});\n                    } else if (m_defaultConstructor != null) {\n                        mixin = m_defaultConstructor.newInstance(new Object[]{});\n                    } else {\n                        throw new DefinitionException(\n                                \"no valid constructor found for mixin [\" + m_mixinClass.getName() + \"]\"\n                        );\n                    }\n                } catch (InvocationTargetException e) {\n                    throw new WrappedRuntimeException(e.getTargetException());\n                } catch (Exception e) {\n                    throw new WrappedRuntimeException(e);\n                }\n            } else {\n                throw new DefinitionException(\n                        \"Mixins.mixinOf(Class) is can not be invoked for mixin deployed using as \" +\n                        m_deploymentModel\n                );\n            }\n            m_perClassMixins.put(klass, mixin);\n        }\n        return m_perClassMixins.get(klass);\n    }\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\aspect\\DefaultMixinFactory.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates the getRtti method\n */\n", "func_signal": "protected void createGetRttiMethod()", "code": "{\n\tMethodVisitor cv = m_cw.visitMethod(ACC_PUBLIC,\n\t                                  GET_RTTI_METHOD_NAME,\n\t                                  GET_RTTI_METHOD_SIGNATURE,\n\t                                  null,\n\t                                  null\n\t);\n\n\t// new StaticInitializationRttiImpl\n\tcv.visitTypeInsn(NEW, STATICINITIALIZATION_RTTI_IMPL_CLASS_NAME);\n\tcv.visitInsn(DUP);\n\tcv.visitFieldInsn(GETSTATIC,\n\t                  m_joinPointClassName,\n\t                  SIGNATURE_FIELD_NAME,\n\t                  STATICINITIALIZATION_SIGNATURE_IMPL_CLASS_SIGNATURE);\n        cv.visitMethodInsn(INVOKESPECIAL, \n                           STATICINITIALIZATION_RTTI_IMPL_CLASS_NAME, \n                           INIT_METHOD_NAME,\n                           STATICINITIALIZATION_RTTI_IMPL_INIT_SIGNATURE\n        );\n        \n\tcv.visitInsn(ARETURN);\n\tcv.visitMaxs(0, 0);\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\transform\\inlining\\compiler\\StaticInitializationJoinPointCompiler.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * @AfterThrowing(type=\"java.lang.IllegalArgumentException\", pointcut=\"methodsToLog\")\n */\n", "func_signal": "public void logAfterThrowingIAE(final StaticJoinPoint joinPoint) throws Throwable", "code": "{\n    MemberSignature signature = (MemberSignature) joinPoint.getSignature();\n    System.out.println(\n            \"AFTER THROWING IAE: \"\n            + joinPoint.getCalleeClass().getName()\n            + \"::\"\n            + signature.getName()\n    );\n}", "path": "src\\samples\\examples\\logging\\AbstractLoggingAspect.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Returns the parameter types.\n *\n * @return the parameter types\n */\n", "func_signal": "public ClassInfo[] getParameterTypes()", "code": "{\n    if (m_parameterTypes == null) {\n        Class[] parameterTypes = ((Method) m_member).getParameterTypes();\n        m_parameterTypes = new ClassInfo[parameterTypes.length];\n        for (int i = 0; i < parameterTypes.length; i++) {\n            Class parameterType = parameterTypes[i];\n            ClassInfo metaData;\n            if (m_classInfoRepository.hasClassInfo(parameterType.getName())) {\n                metaData = m_classInfoRepository.getClassInfo(parameterType.getName());\n            } else {\n                metaData = JavaClassInfo.getClassInfo(parameterType);\n                m_classInfoRepository.addClassInfo(metaData);\n            }\n            m_parameterTypes[i] = metaData;\n        }\n    }\n    return m_parameterTypes;\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\reflect\\impl\\java\\JavaMethodInfo.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates a new perInstance mixin instance.\n *\n * @param instance\n * @return the mixin instance\n */\n", "func_signal": "public Object mixinOf(final Object instance)", "code": "{\n    if (m_perInstanceMixins.containsKey(instance)) {\n        return m_perInstanceMixins.get(instance);\n    }\n    synchronized (m_perInstanceMixins) {\n        if (!m_perInstanceMixins.containsKey(instance)) {\n            final Object mixin;\n            if (m_deploymentModel == DeploymentModel.PER_INSTANCE) {\n                try {\n                    if (m_perInstanceConstructor != null) {\n                        mixin = m_perInstanceConstructor.newInstance(new Object[]{instance});\n                    } else if (m_defaultConstructor != null) {\n                        mixin = m_defaultConstructor.newInstance(new Object[]{});\n                    } else {\n                        throw new DefinitionException(\n                                \"no valid constructor found for mixin [\" + m_mixinClass.getName() + \"]\"\n                        );\n                    }\n                } catch (InvocationTargetException e) {\n                    throw new WrappedRuntimeException(e.getTargetException());\n                } catch (Exception e) {\n                    throw new WrappedRuntimeException(e);\n                }\n            } else {\n                throw new DefinitionException(\n                        \"Mixins.mixinOf(Object) is can not be invoked for mixin deployed using as \" +\n                        m_deploymentModel\n                );\n            }\n            m_perInstanceMixins.put(instance, mixin);\n        }\n        return m_perInstanceMixins.get(instance);\n    }\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\aspect\\DefaultMixinFactory.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * @AfterReturning(type=\"java.lang.String\", pointcut=\"methodsToLog\")\n */\n", "func_signal": "public void logAfterReturning(final StaticJoinPoint joinPoint) throws Throwable", "code": "{\n    MemberSignature signature = (MemberSignature) joinPoint.getSignature();\n    System.out.println(\n            \"AFTER RETURNING: \"\n            + joinPoint.getCalleeClass().getName()\n            + \"::\"\n            + signature.getName()\n    );\n}", "path": "src\\samples\\examples\\logging\\AbstractLoggingAspect.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * @AfterThrowing(type=\"java.lang.RuntimeException\", pointcut=\"methodsToLog\")\n */\n", "func_signal": "public void logAfterThrowingRE(final StaticJoinPoint joinPoint) throws Throwable", "code": "{\n    MemberSignature signature = (MemberSignature) joinPoint.getSignature();\n    System.out.println(\n            \"AFTER THROWING RE: \"\n            + joinPoint.getCalleeClass().getName()\n            + \"::\"\n            + signature.getName()\n    );\n}", "path": "src\\samples\\examples\\logging\\AbstractLoggingAspect.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates join point specific fields.\n */\n", "func_signal": "protected void createJoinPointSpecificFields()", "code": "{\n    m_fieldNames = new String[0];\n    \n\tm_cw.visitField(ACC_PRIVATE + ACC_STATIC,\n\t\t\t\t\tSIGNATURE_FIELD_NAME,\n\t\t\t\t\tSTATICINITIALIZATION_SIGNATURE_IMPL_CLASS_SIGNATURE,\n\t\t\t\t\tnull,\n\t\t\t\t\tnull);\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\transform\\inlining\\compiler\\StaticInitializationJoinPointCompiler.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates the signature for the join point.\n * \n * @param cv\n */\n", "func_signal": "protected void createSignature(final MethodVisitor cv)", "code": "{\n\tcv.visitFieldInsn(GETSTATIC,\n\t                  m_joinPointClassName,\n\t                  TARGET_CLASS_FIELD_NAME_IN_JP,\n\t                  CLASS_CLASS_SIGNATURE);\n\tcv.visitMethodInsn(INVOKESTATIC,\n\t                   SIGNATURE_FACTORY_CLASS,\n\t                   NEW_STATICINITIALIZATION_SIGNATURE_METHOD_NAME,\n\t                   NEW_STATICINITIALIZATION_SIGNATURE_METHOD_SIGNATURE);\n\tcv.visitFieldInsn(PUTSTATIC,\n\t                  m_joinPointClassName,\n\t                  SIGNATURE_FIELD_NAME,\n\t                  STATICINITIALIZATION_SIGNATURE_IMPL_CLASS_SIGNATURE);\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\transform\\inlining\\compiler\\StaticInitializationJoinPointCompiler.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Creates a new perJVM mixin instance.\n *\n * @return the mixin instance\n */\n", "func_signal": "public Object mixinOf()", "code": "{\n    if (m_perJVM != null) {\n        return m_perJVM;\n    }\n    synchronized (this) {\n        final Object mixin;\n        if (m_deploymentModel == DeploymentModel.PER_JVM) {\n            try {\n                mixin = m_defaultConstructor.newInstance(EMPTY_OBJECT_ARRAY);\n            } catch (InvocationTargetException e) {\n                throw new WrappedRuntimeException(e.getTargetException());\n            } catch (Exception e) {\n                throw new WrappedRuntimeException(e);\n            }\n        } else {\n            throw new DefinitionException(\n                    \"Mixins.mixinOf() is can not be invoked for mixin deployed using as \" +\n                    m_deploymentModel\n            );\n        }\n        m_perJVM = mixin;\n    }\n    return m_perJVM;\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\aspect\\DefaultMixinFactory.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "/**\n * Optimized implementation that does not retrieve the parameters from the\n * join point instance but is passed directly to the method from the input\n * parameters in the 'invoke' method. Can only be used if no around advice\n * exists.\n * \n * @param cv\n * @param input\n */\n", "func_signal": "protected void createInlinedJoinPointInvocation(final MethodVisitor cv,\n                                                    final CompilerInput input)", "code": "{\n\tString joinPointName = TransformationUtil.getPrefixedOriginalClinitName(m_calleeClassName);\n\t\n\tcv.visitMethodInsn(INVOKESTATIC, m_calleeClassName, joinPointName, m_calleeMemberDesc);\n}", "path": "src\\main\\org\\codehaus\\aspectwerkz\\transform\\inlining\\compiler\\StaticInitializationJoinPointCompiler.java", "repo_name": "jboner/aspectwerkz", "stars": 12, "license": "other", "language": "java", "size": 12384}
{"docstring": "// v has at least 1 edge to given cluster\n", "func_signal": "protected boolean intDegNotZero(Node v, byte c)", "code": "{\n\tfor (Relationship e : v.getRelationships()) {\n\n\t\tNode u = e.getOtherNode(v);\n\t\tbyte uColor = (Byte) u.getProperty(Consts.COLOR);\n\n\t\tif (c == uColor)\n\t\t\treturn true;\n\n\t}\n\n\treturn false;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiC.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Literal implementation of pseudo code. Too complex/convoluted to be used\n// p is used to find jMax. Smaller p -> larger jMax\n", "func_signal": "private void evoPartitionOld(Double theta, Double p)", "code": "{\n\n\t// Set W(j) = W(0) = V\n\tLong volumeG = getVolumeG((byte) -1);\n\n\tLong m = volumeG / 2;\n\n\t// Set j = 0\n\tInteger j = 0;\n\n\t// Set conductance = theta/7\n\tDouble conductance = theta / 7;\n\n\t// [WHILE] j < 12.m.Ceil( lg(1/p) ) [AND] volumeWj >= (3/4)volumeG\n\tDouble jMax = 12 * m * Math.ceil(Math.log10(1.0 / p));\n\n\tLong volumeWj = volumeG;\n\n\tSystem.out.printf(\"evoPartition[theta=%f,p=%f]\\n\", theta, p);\n\tSystem.out.printf(\"            [conduct=%f,jMax=%f,volWj=%d]\\n\",\n\t\t\tconductance, jMax, volumeWj);\n\n\twhile ((j < jMax) && (volumeWj >= (3.0 / 4.0) * (double) volumeG)) {\n\n\t\tSystem.out.printf(\n\t\t\t\t\"evoPartition[j=%d,jMax=%f,volWj=%d, 3/4volG[%f]]\\n%s\\n\",\n\t\t\t\tj, jMax, volumeWj, (3.0 / 4.0) * (double) volumeG,\n\t\t\t\tnodesToStr());\n\n\t\tTransaction tx = transNeo.beginTx();\n\n\t\ttry {\n\n\t\t\t// -> D(j) = evoNibble(G[W(j-1)], conductance)\n\t\t\tDataStructEvoPartition Dj = evoNibble(conductance, volumeWj);\n\n\t\t\tj++;\n\n\t\t\t// -> Set j = j+1\n\t\t\tif (Dj != null) {\n\t\t\t\tSystem.out.printf(\n\t\t\t\t\t\t\"\\n\\tevoNibble returned. |D%d|[%d], volD%d[%d]\\n\",\n\t\t\t\t\t\tj, Dj.getS().size(), j, Dj.getVolume());\n\t\t\t\tSystem.out.printf(\"\\t%s\\n\\n\", dToStr(Dj.getS()));\n\n\t\t\t\t// -> W(j) = W(j-1) - D(j)\n\t\t\t\tclusterColor++;\n\t\t\t\tupdateClusterAlloc(Dj.getS(), clusterColor);\n\n\t\t\t\tvolumeWj -= Dj.getVolume();\n\n\t\t\t\ttx.success();\n\t\t\t} else\n\t\t\t\tSystem.out.printf(\n\t\t\t\t\t\t\"\\n\\tevoNibble returned. D(%d) = null!\\n\\n\", j);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttx.finish();\n\t\t}\n\n\t}\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"\\nevoPartition[volWj=%d, 3/4volG[%f], volG[%d]]\\n%s\\n\\n\",\n\t\t\t\t\tvolumeWj, (3.0 / 4.0) * (double) volumeG, volumeG,\n\t\t\t\t\tnodesToStr());\n\n\t// Set D = D(1) U ... U D(j)\n\t// In this implementation vertices are colored rather than removed,\n\t// so there is no need to perform a Union operation\n\n\t// TODO Tidy up the unallocated vertices here?\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartitionBase.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// p is used to find jMax. Smaller p -> larger jMax\n", "func_signal": "private void evoPartition(Double conductance, Double p)", "code": "{\n\n\t// Set W(j) = W(0) = V\n\tLong volumeG = getVolumeG((byte) -1);\n\n\tLong m = volumeG / 2;\n\n\t// Set j = 0\n\tInteger j = 0;\n\n\t// [WHILE] j < 12.m.Ceil( lg(1/p) ) [AND] volumeWj >= (3/4)volumeG\n\tDouble jMax = 12 * m * Math.ceil(Math.log10(1.0 / p));\n\n\tLong volumeWj = volumeG;\n\n\t// NOTE Experimental!\n\tLong minClusterVolume = volumeG / config.getClusterCount();\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"evoPartition[conduct=%f,p=%f,clusterCount=%d,minClusterVolume=%d]\\n\",\n\t\t\t\t\tconductance, p, config.getClusterCount(),\n\t\t\t\t\tminClusterVolume);\n\n\t// while ((j < jMax) && (volumeWj >= (3.0 / 4.0) * (double) volumeG)) {\n\twhile (volumeWj >= (1.0 / 4.0) * (double) volumeG) {\n\n\t\t// System.out.printf(\n\t\t// \"evoPartition[j=%d,jMax=%f,volWj=%d, 3/4volG[%f]]\\n%s\\n\",\n\t\t// j, jMax, volumeWj, (3.0 / 4.0) * (double) volumeG,\n\t\t// nodesToStr());\n\t\tSystem.out.printf(\n\t\t\t\t\"evoPartition[j=%d,jMax=%f,volWj=%d, 1/4volG[%f]]\\n%s\\n\",\n\t\t\t\tj, jMax, volumeWj, (1.0 / 4.0) * (double) volumeG,\n\t\t\t\tnodesToStr());\n\n\t\tTransaction tx = transNeo.beginTx();\n\n\t\ttry {\n\n\t\t\t// -> D(j) = evoNibble(G[W(j-1)], conductance)\n\t\t\tDataStructEvoPartition Dj = evoNibble(conductance, volumeWj,\n\t\t\t\t\tminClusterVolume);\n\n\t\t\t// -> Set j = j+1\n\t\t\tj++;\n\n\t\t\tif (Dj != null) {\n\t\t\t\tSystem.out.printf(\n\t\t\t\t\t\t\"\\n\\tevoNibble returned. |D%d|[%d], volD%d[%d]\\n\",\n\t\t\t\t\t\tj, Dj.getS().size(), j, Dj.getVolume());\n\t\t\t\tSystem.out.printf(\"\\t%s\\n\\n\", dToStr(Dj.getS()));\n\n\t\t\t\t// -> W(j) = W(j-1) - D(j)\n\t\t\t\tclusterColor++;\n\t\t\t\tupdateClusterAlloc(Dj.getS(), clusterColor);\n\n\t\t\t\tvolumeWj -= Dj.getVolume();\n\n\t\t\t\ttx.success();\n\t\t\t} else\n\t\t\t\tSystem.out.printf(\n\t\t\t\t\t\t\"\\n\\tevoNibble returned. D(%d) = null!\\n\\n\", j);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttx.finish();\n\t\t}\n\n\t}\n\n\t// Tidy up the unallocated vertices here\n\tallocateUnallocated();\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"\\nevoPartition[volWj=%d, 1/4volG[%f], volG[%d]]\\n%s\\n\\n\",\n\t\t\t\t\tvolumeWj, (1.0 / 4.0) * (double) volumeG, volumeG,\n\t\t\t\t\tnodesToStr());\n\n\t// Set D = D(1) U ... U D(j)\n\t// In this implementation vertices are colored rather than removed,\n\t// so there is no need to perform a Union operation\n}\n\nprivate DataStructEvoPartition evoNibble(Double conductance, Long volumeWj,\n\t\tLong minClusterVolume) {\n\n\t// Precompute for efficiency\n\tDouble log2VolumeWj = Math.log(volumeWj) / Math.log(2);\n\tDouble logVolumeWj = Math.log(volumeWj);\n\n\t// T = Floor(conductance^-1 / 100)\n\t// Double T = Math.floor(Math.pow(conductance, -1) / 100.0);\n\tDouble T = (double) 500;\n\n\t// thetaT = Sqrt(4.T^-1.log(volume(G)) )\n\tDouble thetaT = Math.sqrt(4.0 * Math.pow(T, -1) * logVolumeWj);\n\n\t// Choose random vertex with probability P(X=x) = d(x)/volume(G)\n\tNode v = getRandomNode();\n\n\t// This can only happen if all nodes have been partitioned\n\tif (v == null)\n\t\treturn null;\n\n\t// Choose random budget\n\t// -> Let jMax = Ceil(log_2(volumeG))\n\tDouble jMax = Math.ceil(log2VolumeWj);\n\n\t// -> Let j be an integer in the range [0,jMax]\n\t// -> Choose budget with probability P(J=j) = constB.2^-j\n\t// ----> Where constB is a proportionality constant\n\t// NOTE Exponential distribution has similar charateristics\n\tDouble j = expGenB.nextValue() * jMax;\n\tif (j > jMax) // Exponential distribution may return > 1.0\n\t\tj = 0.0; // If so, default to most probable j value\n\n\t// -> Let Bj = 8.y.2^j\n\t// ----> Where y = 1 + 4.Sqrt(T.log_2(volumeG))\n\tDouble y = 1 + (4 * Math.sqrt(T * logVolumeWj));\n\tDouble Bj = 8 * y * Math.pow(2, j);\n\n\tSystem.out.printf(\"\\t\\tevoNibble[conduct=%f,volG=%d]\\n\", conductance,\n\t\t\tvolumeWj);\n\tSystem.out.printf(\"\\t\\t         [v=%d,j=%f,jMax=%f,y=%f,Bj=%f]\\n\", v\n\t\t\t.getId(), j, jMax, y, Bj);\n\n\tDataStructEvoPartition sAndB = genSample(v, T, Bj, thetaT,\n\t\t\tminClusterVolume);\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"\\t\\t<evoNibble> genSample() -> S: conductS[%f]<=3thetaT[%f] , minVol[%d]<volS[%d]<=3/4volG[%f]\\n\",\n\t\t\t\t\tsAndB.getConductance(), 3 * thetaT, minClusterVolume,\n\t\t\t\t\tsAndB.getVolume(), (3.0 / 4.0) * volumeWj);\n\n\t// NOTE Experimental!\n\t// if ((sAndB.getConductance() <= 3 * thetaT)\n\t// && (sAndB.getVolume() > minClusterVolume)\n\t// && (sAndB.getVolume() <= (3.0 / 4.0) * volumeWj))\n\t// return sAndB;\n\tif ((sAndB.getVolume() > minClusterVolume)\n\t\t\t&& (sAndB.getVolume() <= (3.0 / 4.0) * volumeWj))\n\t\treturn sAndB;\n\n\treturn null;\n}\n\n// Simulates volume-biased Evolving Set Process\n// Updates boundary of current set at each step\n// Generates sample path of sets and outputs last set\n//\n// INPUT\n// ----> x : Starting vertex\n// ----> T>=0 : Time limit\n// ----> B>=0 : Budget\n// OUTPUT\n// ----> St : Set sampled from volume-biased Evolving Set Process\nprivate DataStructEvoPartition genSample(Node x, Double T, Double B,\n\t\tDouble thetaT, Long minClusterVolume) {\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"\\t\\t\\tgenSample[x=%d,T=%f,B=%f,thetaT=%f,minClusterVolume=%d]\\n\",\n\t\t\t\t\tx.getId(), T, B, thetaT, minClusterVolume);\n\n\tDataStructEvoPartition sAndB = null; // S, B, volume, conductance\n\tNode X = null; // Current random-walk position @ time t\n\tDouble Z = new Double(0);\n\tHashMap<Node, Boolean> D = null;\n\n\t// Inititialization\n\t// -> X = x0 = x\n\tX = x;\n\t// -> S = S0 = {x}\n\tsAndB = new DataStructEvoPartition(X, rng);\n\n\tsAndB.printSAndB();\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"\\t\\t\\t<genSample> SB_Init: conductS=%f, costS=%d, volS=%d, X=%d\\n\",\n\t\t\t\t\tsAndB.getConductance(), sAndB.getCost(), sAndB\n\t\t\t\t\t\t\t.getVolume(), X.getId());\n\n\ttry {\n\t\t// ForEach Step t <= T\n\t\tfor (int t = 0; t < T; t++) {\n\n\t\t\t// STAGE 1: compute St-1 to St difference\n\n\t\t\t// -> X = Choose X with p(Xt-1,Xt)\n\t\t\tX = sAndB.getNextV(X);\n\n\t\t\t// -> Compute probYinS(X)\n\t\t\t// -> Select random threshold Z = uniformRand[0,probNodeInS(v)]\n\t\t\tZ = sAndB.getZ(X);\n\n\t\t\tSystem.out.printf(\n\t\t\t\t\t\"\\t\\t\\t<genSample> t[%d], nextX[%d], Z[%f]\\n\", t, X\n\t\t\t\t\t\t\t.getId(), Z);\n\n\t\t\t// -> Define St = {y | probYinS(y,St-1) >= Z}\n\t\t\t// -> D = Set different between St & St-1\n\t\t\t// -> Update volume(St) & cost(S0,...,St)\n\t\t\t// -> Add/remove vertices in D to/from St\n\t\t\t// -> Update B(St-1) to B(St)\n\t\t\tD = sAndB.updateBoundary(Z, transNeo);\n\n\t\t\t// -> IF t==T OR cost()>B RETURN St = St-1 Diff D\n\t\t\tSystem.out.printf(\n\t\t\t\t\t\"\\t\\t\\t<genSample> Phase1? costS[%d] > B[%f]\\n\", sAndB\n\t\t\t\t\t\t\t.getCost(), B);\n\n\t\t\t// NOTE Experimental!\n\t\t\t// if (sAndB.getCost() > B) {\n\t\t\t//\n\t\t\t// sAndB.printSAndB();\n\t\t\t//\n\t\t\t// break;\n\t\t\t// }\n\n\t\t\t// STAGE 2: update S to St by adding/removing vertices in D to S\n\n\t\t\t// -> Compute conductance(St) = outDeg(St) / vol(St)\n\t\t\t// -> IF conductance(St) < thetaT RETURN St\n\t\t\tSystem.out\n\t\t\t\t\t.printf(\n\t\t\t\t\t\t\t\"\\t\\t\\t<genSample> Phase2? conductS[%f] < thetaT[%f]\\n\",\n\t\t\t\t\t\t\tsAndB.getConductance(), thetaT);\n\n\t\t\tsAndB.printSAndB();\n\n\t\t\t// NOTE Experimental!\n\t\t\t// if ((sAndB.getConductance() < thetaT)\n\t\t\t// && (sAndB.getVolume() > clusterVolume))\n\t\t\tif (sAndB.getVolume() > minClusterVolume)\n\t\t\t\tbreak;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n\treturn sAndB;\n}\n\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartitionExp.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// ***********************************************************\n// *****************PRINT OUTS********************************\n// ***********************************************************\n", "func_signal": "private String getClusterSizes()", "code": "{\n\tString result = \"[ \";\n\n\tfor (byte c = 0; c < config.getClusterCount(); c++) {\n\t\tresult = String.format(\"%s%d \", result, clusterSizes.get(c));\n\t}\n\n\treturn String.format(\"%s]\", result);\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiCBal.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Optimization to exclude clusters with no connections\n// Assign to cluster:\n// * Associated with highest load value\n// AND\n// * Internal Degree of v is greater than zero\n", "func_signal": "@Override\nprotected byte allocateClusterIntdeg(Node v, ArrayList<Double> wC,\n\t\tArrayList<Double> lC, int timeStep)", "code": "{\n\n\tbyte maxC = (Byte) v.getProperty(Consts.COLOR);\n\tdouble maxW = 0.0;\n\n\tfor (byte c = 0; c < wC.size(); c++) {\n\n\t\t// NOTE Experimental!\n\t\t// double loadTotal = wC.get(c)\n\t\t// + (lC.get(c) * config.getFOSBIterations());\n\t\t// double loadTotal = (2 * wC.get(c)) + lC.get(c);\n\t\t// double loadTotal = lC.get(c) / wC.get(c);\n\t\tdouble loadTotal = wC.get(c) + (timeStepWeight * lC.get(c));\n\t\t// double loadTotal = wC.get(c) + lC.get(c);\n\n\t\tif ((loadTotal > maxW) && (intDegNotZero(v, c))) {\n\t\t\tmaxW = loadTotal;\n\t\t\tmaxC = c;\n\t\t}\n\t}\n\n\treturn maxC;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiCFix.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// NOTE Currently load is diffused EQUALLY (ignores edge weights)\n", "func_signal": "protected void diffuseLoadToNeighbours(Node node)", "code": "{\n\n\tint neighbourCount = 0;\n\tfor (Relationship rel : node.getRelationships()) {\n\t\tneighbourCount++;\n\t}\n\n\tif (neighbourCount == 0)\n\t\treturn;\n\n\tArrayList<Double> lV = l.get(node.getId());\n\tArrayList<Double> wV = w.get(node.getId());\n\n\tfor (byte i = 0; i < config.getClusterCount(); i++) {\n\t\tdouble lVPerNeighbour = lV.get(i) / neighbourCount;\n\t\tdouble wVPerNeighbour = wV.get(i) / neighbourCount;\n\n\t\tfor (Relationship rel : node.getRelationships()) {\n\n\t\t\tNode otherNode = rel.getOtherNode(node);\n\n\t\t\tArrayList<Double> lVOther = l.get(otherNode.getId());\n\t\t\tArrayList<Double> wVOther = w.get(otherNode.getId());\n\n\t\t\tlVOther.set(i, lVOther.get(i) + lVPerNeighbour);\n\t\t\twVOther.set(i, wVOther.get(i) + wVPerNeighbour);\n\t\t}\n\t}\n\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiC.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// ***********************************************************\n// *****************PRINT OUTS / DEBUGGING********************\n// ***********************************************************\n", "func_signal": "protected String getConfigStr()", "code": "{\n\treturn String\n\t\t\t.format(\n\t\t\t\t\t\"DiDiC [FOST_ITERS=%d, FOSB_ITERS=%d, MAX_CLUSTERS=%d, TIME_STEPS=%d]%n\",\n\t\t\t\t\tconfig.getFOSTIterations(), config.getFOSBIterations(),\n\t\t\t\t\tconfig.getClusterCount(), config.getMaxIterations());\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiC.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Number of\n", "func_signal": "public PtnAlgDiDiCBal(GraphDatabaseService transNeo, Logger logger,\n\t\t\tLinkedBlockingQueue<ChangeOp> changeLog, Migrator migrator)", "code": "{\n\t\tsuper(transNeo, logger, changeLog, migrator);\n\t\tthis.clusterSizes = new HashMap<Byte, Long>();\n\t\tthis.clusterActivated = new HashMap<Byte, Boolean>();\n\t}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiCBal.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Assign to cluster:\n// * Associated with highest load value\n", "func_signal": "protected byte allocateClusterBasic(ArrayList<Double> wC,\n\t\tArrayList<Double> lC)", "code": "{\n\tbyte maxC = 0;\n\tdouble maxW = 0.0;\n\n\tfor (byte c = 0; c < wC.size(); c++) {\n\n\t\tdouble loadTotal = wC.get(c);\n\n\t\tif (loadTotal > maxW) {\n\t\t\tmaxW = loadTotal;\n\t\t\tmaxC = c;\n\t\t}\n\t}\n\n\treturn maxC;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiC.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Choose random vertex from remaining (unpartitioned) vertices\n// Choose vertex with probability P(X=x) = d(x)/volume(G)\n", "func_signal": "protected Node getRandomNode()", "code": "{\n\tDouble randVal = expGenVertex.nextValue();\n\n\tlong randIndex = Math.round(randVal * (nodes.size() - 1));\n\n\t// Exponential distribution can result in randIndex > 1.0\n\t// Default to node with highest degree in this case\n\tif (randIndex >= nodes.size())\n\t\trandIndex = 0;\n\n\tif (nodes.size() == 0)\n\t\treturn null;\n\n\treturn transNeo.getNodeById(nodes.get((int) randIndex));\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartition.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// ***********************************************************\n// *****************PRINT OUTS / DEBUGGING********************\n// ***********************************************************\n", "func_signal": "protected String nodesToStr()", "code": "{\n\tString nodesToStr = \"[ \";\n\n\tfor (Long vID : nodes) {\n\t\tnodesToStr += String.format(\"%d \", vID);\n\t}\n\tnodesToStr += \"]\";\n\n\treturn nodesToStr;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartition.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Assign to cluster:\n// * Associated with highest load value\n", "func_signal": "@Override\nprotected byte allocateClusterBasic(ArrayList<Double> wC,\n\t\tArrayList<Double> lC)", "code": "{\n\tbyte maxC = 0;\n\tdouble maxW = 0.0;\n\n\tfor (byte c = 0; c < wC.size(); c++) {\n\n\t\t// NOTE Experimental!\n\t\t// double loadTotal = wC.get(c)\n\t\t// + (lC.get(c) * config.getFOSBIterations());\n\t\t// double loadTotal = (2 * wC.get(c)) + lC.get(c);\n\t\t// double loadTotal = lC.get(c) / wC.get(c);\n\t\tdouble loadTotal = wC.get(c) + (timeStepWeight * lC.get(c));\n\t\t// double loadTotal = wC.get(c) + lC.get(c);\n\n\t\tif (loadTotal > maxW) {\n\t\t\tmaxW = loadTotal;\n\t\t\tmaxC = c;\n\t\t}\n\t}\n\n\treturn maxC;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiCFix.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Calculate volume of a given colour/partitioned graph\n// volume(G) = sum( deg(v elementOf St) )\n// volume(G) DOES NOT mean edgeCount(G)\n// edgeCount(G) = m = volume(G)/2\n", "func_signal": "protected Long getVolumeG(Byte color)", "code": "{\n\tLong volumeG = new Long(0);\n\n\tTransaction tx = transNeo.beginTx();\n\n\ttry {\n\n\t\tfor (Node v : transNeo.getAllNodes()) {\n\t\t\t// Only count nodes that have not yet been partitioned\n\t\t\tif (v.getProperty(Consts.COLOR) == color) {\n\n\t\t\t\tfor (Relationship e : v.getRelationships(Direction.BOTH)) {\n\t\t\t\t\tif (e.getOtherNode(v).getProperty(Consts.COLOR) == color)\n\t\t\t\t\t\tvolumeG++;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttx.finish();\n\t}\n\n\treturn volumeG;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartition.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Optimized version. Find vDeg once only\n", "func_signal": "protected double alphaE(Node u, int vDeg)", "code": "{\n\t// alphaE = 1/max{deg(u),deg(v)};\n\tdouble uDeg = getDeg(u);\n\n\treturn 1.0 / Math.max(uDeg, vDeg);\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiC.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Color all nodes in Dj with color j\n", "func_signal": "protected void updateClusterAlloc(ArrayList<Long> Dj, Byte j)\n\t\tthrows Exception", "code": "{\n\n\tfor (Long vID : Dj) {\n\n\t\tNode v = transNeo.getNodeById(vID);\n\t\tv.setProperty(Consts.COLOR, j);\n\n\t\tif (nodes.remove(vID) == false) {\n\t\t\tthrow new Exception(String.format(\n\t\t\t\t\t\"Could not remove node %d from nodes\", vID));\n\t\t}\n\n\t}\n\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartition.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Optimization to exclude clusters with no connections\n// Assign to cluster:\n// * Associated with highest load value\n// AND\n// * Internal Degree of v is greater than zero\n", "func_signal": "protected byte allocateClusterIntdeg(Node v, ArrayList<Double> wC,\n\t\tArrayList<Double> lC, int timeStep)", "code": "{\n\n\tbyte maxC = (Byte) v.getProperty(Consts.COLOR);\n\tdouble maxW = 0.0;\n\n\tfor (byte c = 0; c < wC.size(); c++) {\n\n\t\tdouble loadTotal = wC.get(c);\n\n\t\tif ((loadTotal > maxW) && (intDegNotZero(v, c))) {\n\t\t\tmaxW = loadTotal;\n\t\t\tmaxC = c;\n\t\t}\n\t}\n\n\treturn maxC;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiC.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// p is used to find jMax. Smaller p -> larger jMax\n", "func_signal": "private void evoPartition(Double conductance, Double p)", "code": "{\n\n\t// Set W(j) = W(0) = V\n\tLong volumeG = getVolumeG((byte) -1);\n\n\tLong m = volumeG / 2;\n\n\t// Set j = 0\n\tInteger j = 0;\n\n\t// [WHILE] j < 12.m.Ceil( lg(1/p) ) [AND] volumeWj >= (3/4)volumeG\n\tDouble jMax = 12 * m * Math.ceil(Math.log10(1.0 / p));\n\n\tLong volumeWj = volumeG;\n\n\tSystem.out.printf(\"evoPartition[conduct=%f,p=%f]\\n\", conductance, p);\n\n\twhile ((j < jMax) && (volumeWj >= (3.0 / 4.0) * (double) volumeG)) {\n\n\t\tSystem.out.printf(\n\t\t\t\t\"evoPartition[j=%d,jMax=%f,volWj=%d, 3/4volG[%f]]\\n%s\\n\",\n\t\t\t\tj, jMax, volumeWj, (3.0 / 4.0) * (double) volumeG,\n\t\t\t\tnodesToStr());\n\n\t\tTransaction tx = transNeo.beginTx();\n\n\t\ttry {\n\n\t\t\t// -> D(j) = evoNibble(G[W(j-1)], conductance)\n\t\t\tDataStructEvoPartition Dj = evoNibble(conductance, volumeWj);\n\n\t\t\t// -> Set j = j+1\n\t\t\tj++;\n\n\t\t\tif (Dj != null) {\n\t\t\t\tSystem.out.printf(\n\t\t\t\t\t\t\"\\n\\tevoNibble returned. |D%d|[%d], volD%d[%d]\\n\",\n\t\t\t\t\t\tj, Dj.getS().size(), j, Dj.getVolume());\n\t\t\t\tSystem.out.printf(\"\\t%s\\n\\n\", dToStr(Dj.getS()));\n\n\t\t\t\t// -> W(j) = W(j-1) - D(j)\n\t\t\t\tclusterColor++;\n\t\t\t\tupdateClusterAlloc(Dj.getS(), clusterColor);\n\n\t\t\t\tvolumeWj -= Dj.getVolume();\n\n\t\t\t\ttx.success();\n\t\t\t} else\n\t\t\t\tSystem.out.printf(\n\t\t\t\t\t\t\"\\n\\tevoNibble returned. D(%d) = null!\\n\\n\", j);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttx.finish();\n\t\t}\n\n\t}\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"\\nevoPartition[volWj=%d, 3/4volG[%f], volG[%d]]\\n%s\\n\\n\",\n\t\t\t\t\tvolumeWj, (3.0 / 4.0) * (double) volumeG, volumeG,\n\t\t\t\t\tnodesToStr());\n\n\t// Set D = D(1) U ... U D(j)\n\t// In this implementation vertices are colored rather than removed,\n\t// So there is no need to perform a Union operation\n\n\t// TODO Tidy up the unallocated vertices here?\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartitionBase.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t// This method does the following:\n\t// ---> Loads a Neo4j instance\n\t// ---> Loads Neo4j into memory\n\t// ---> Creates and configures metrics Logger\n\t// ---> Creates change log\n\t// ---> Creates migrator\n\t// ---> Creates simulation job and passes it to migrator\n\t// ---> Creates and configures partitioning algorithm (PtnAlg)\n\t// ---> Runs partitioning algorithm\n\n\tif (args[0].equals(\"help\")) {\n\t\tSystem.out.println(\"Params - \" +\n\n\t\t\"GraphName:Str \" + \"Partitions:Byte \" + \"AlgIters:Int \"\n\t\t\t\t+ \"DBDirectory:Str \" + \"ResultsDir:Str \"\n\t\t\t\t+ \"DBSyncPeriod:Int \" + \"MetricsLogPeriod:Int \"\n\t\t\t\t+ \"InputReadOpsFile:String \" + \"OutputReadOpsDir:String \"\n\t\t\t\t+ \"ChangeOpLogFiles:Array \"\n\t\t\t\t+ \"SimType:Enum(gis,fstree,twitter,dummy) \");\n\n\t\treturn;\n\t}\n\n\t// *********************\n\n\tPGraphDatabaseServiceSIM db = null;\n\n\ttry {\n\n\t\t// Name that will prepend metrics file names\n\t\tString graphName = args[0]; // \"fs-tree\"\n\n\t\t// Algorithm parameter: partition count\n\t\tbyte numberOfPartitions = Byte.parseByte(args[1]);\n\n\t\t// Algorithm parameter: Max iterations\n\t\tint maxIterations = Integer.parseInt(args[2]);\n\n\t\t// This is where Neo4j instance is located\n\t\tString dbDirectory = args[3]; // \"var/tree-graph/\"\n\n\t\t// Directory where metrics files will be written\n\t\tString resultsDirectory = args[4]; // \"var/tree-graph-logs/\"\n\n\t\t// How often changes are pushed to PGraphDatabaseService\n\t\tint migrationPeriod = Integer.parseInt(args[5]);\n\n\t\t// How often metrics are calculated & logged\n\t\tint metricsPeriod = Integer.parseInt(args[6]);\n\n\t\t// Input Operation logs to be loaded by simulator\n\t\tString readOperationLogIn = args[7];\n\n\t\t// Directory simulator should write result logs\n\t\tString operationLogsOutDir = args[8];\n\n\t\tString[] changeOpLogFilesArg = args[9].replaceAll(\"[{}]\", \"\")\n\t\t\t\t.split(\"[:]\");\n\t\tString[] changeOpLogFiles = new String[changeOpLogFilesArg.length * 2];\n\t\tfor (int i = 0; i < changeOpLogFilesArg.length; i++) {\n\t\t\t// Make sure every 2nd ChangeOpLog is a DUMMY empty log\n\t\t\t// This allows for calling Migrator twice per DiDiC iteration\n\t\t\tchangeOpLogFiles[i * 2] = changeOpLogFilesArg[i];\n\t\t\tchangeOpLogFiles[i * 2 + 1] = null;\n\t\t}\n\n\t\tString simTypeStr = args[10];\n\t\tSimType simType = null;\n\t\tif (simTypeStr.equals(\"twitter\") == true) {\n\t\t\tsimType = SimType.TWITTER;\n\t\t} else if (simTypeStr.equals(\"gis\") == true) {\n\t\t\tsimType = SimType.GIS;\n\t\t} else if (simTypeStr.equals(\"fstree\") == true) {\n\t\t\tsimType = SimType.FSTREE;\n\t\t} else if (simTypeStr.equals(\"dummy\") == true) {\n\t\t\tsimType = SimType.DUMMY;\n\t\t} else {\n\t\t\tString errStr = String\n\t\t\t\t\t.format(\n\t\t\t\t\t\t\t\"Invalid SimType[%s], must be (twitter,gis,fstree,dummy)\\n\",\n\t\t\t\t\t\t\tsimTypeStr);\n\t\t\tthrow new Exception(errStr);\n\t\t}\n\n\t\t// *****************************\n\n\t\t// graphName = \"migrator_gis_test\";\n\t\t// numberOfPartitions = (byte) 2;\n\t\t// maxIterations = 100;\n\t\t// dbDirectory = \"var/\";\n\t\t// resultsDirectory = \"results/\";\n\t\t// migrationPeriod = 25;\n\t\t// metricsPeriod = 1;\n\t\t// operationLogsIn = \"inputLogsDirectory/inputLog.txt\";\n\t\t// operationLogsOutDir = \"resultLogsDirectory/\";\n\t\t// changeopLogFile = \"{file1.txt:file2.txt:file3.txt}\"\n\n\t\t// *****************************\n\n\t\tPGraphDatabaseService pdb = new PGraphDatabaseServiceSIM(\n\t\t\t\tdbDirectory, 0);\n\n\t\tMemGraph memDb = NeoFromFile.readMemGraph(pdb);\n\n\t\tLogger logger = new LoggerBase(metricsPeriod, graphName,\n\t\t\t\tresultsDirectory);\n\n\t\tSimJob simJob = null;\n\n\t\tswitch (simType) {\n\t\tcase TWITTER:\n\t\t\tsimJob = new SimJobLoadOpsTwitter(\n\t\t\t\t\tnew String[] { readOperationLogIn },\n\t\t\t\t\toperationLogsOutDir, pdb, true);\n\t\t\tbreak;\n\t\tcase GIS:\n\t\t\tsimJob = new SimJobLoadOpsGIS(\n\t\t\t\t\tnew String[] { readOperationLogIn },\n\t\t\t\t\toperationLogsOutDir, pdb, true);\n\t\t\tbreak;\n\t\tcase FSTREE:\n\t\t\tsimJob = new SimJobLoadOpsTree(\n\t\t\t\t\tnew String[] { readOperationLogIn },\n\t\t\t\t\toperationLogsOutDir, pdb, true);\n\t\t\tbreak;\n\t\tcase DUMMY:\n\t\t\tsimJob = new SimJobLoadOpsDummy();\n\t\t\tbreak;\n\t\t}\n\n\t\tLinkedBlockingQueue<ChangeOp> changeLog = new LinkedBlockingQueue<ChangeOp>();\n\n\t\tMigrator migrator = new MigratorSim(pdb, migrationPeriod,\n\t\t\t\tchangeLog, simJob, changeOpLogFiles);\n\n\t\tPtnAlg ptnAlg = new PtnAlgDiDiCSync(memDb, logger, changeLog,\n\t\t\t\tmigrator);\n\n\t\tConfDiDiC config = new ConfDiDiC(numberOfPartitions);\n\t\tconfig.setMaxIterations(maxIterations);\n\n\t\tptnAlg.doPartition(config);\n\n\t\tpdb.shutdown();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (db != null)\n\t\t\tdb.shutdown();\n\t}\n\n}", "path": "src\\main\\java\\applications\\ChurnPtnAlgRunner.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Simulates volume-biased Evolving Set Process\n// Updates boundary of current set at each step\n// Generates sample path of sets and outputs last set\n//\n// INPUT\n// ----> x : Starting vertex\n// ----> T>=0 : Time limit\n// ----> B>=0 : Budget\n// OUTPUT\n// ----> St : Set sampled from volume-biased Evolving Set Process\n", "func_signal": "private DataStructEvoPartition genSample(Node x, Double T, Double B,\n\t\tDouble thetaT)", "code": "{\n\n\tSystem.out.printf(\"\\t\\t\\tgenSample[x=%d,T=%f,B=%f,thetaT=%f]\\n\", x\n\t\t\t.getId(), T, B, thetaT);\n\n\tDataStructEvoPartition sAndB = null; // S, B, volume, conductance\n\tNode X = null; // Current random-walk position @ time t\n\tDouble Z = new Double(0);\n\tHashMap<Node, Boolean> D = null;\n\n\t// Initialization\n\t// -> X = x0 = x\n\tX = x;\n\t// -> S = S0 = {x}\n\tsAndB = new DataStructEvoPartition(X, rng);\n\n\tsAndB.printSAndB();\n\n\tSystem.out\n\t\t\t.printf(\n\t\t\t\t\t\"\\t\\t\\t<genSample> SB_Init: conductS=%f, costS=%d, volS=%d, X=%d\\n\",\n\t\t\t\t\tsAndB.getConductance(), sAndB.getCost(), sAndB\n\t\t\t\t\t\t\t.getVolume(), X.getId());\n\n\ttry {\n\t\t// ForEach Step t <= T\n\t\tfor (int t = 0; t < T; t++) {\n\n\t\t\t// STAGE 1: compute St-1 to St difference\n\n\t\t\t// -> X = Choose X with p(Xt-1,Xt)\n\t\t\tX = sAndB.getNextV(X);\n\n\t\t\t// -> Compute probYinS(X)\n\t\t\t// -> Select random threshold Z = uniformRand[0,probNodeInS(v)]\n\t\t\tZ = sAndB.getZ(X);\n\n\t\t\tSystem.out.printf(\n\t\t\t\t\t\"\\t\\t\\t<genSample> t[%d], nextX[%d], Z[%f]\\n\", t, X\n\t\t\t\t\t\t\t.getId(), Z);\n\n\t\t\t// -> Define St = {y | probYinS(y,St-1) >= Z}\n\t\t\t// -> D = Set different between St & St-1\n\t\t\t// -> Update volume(St) & cost(S0,...,St)\n\t\t\t// -> Add/remove vertices in D to/from St\n\t\t\t// -> Update B(St-1) to B(St)\n\t\t\tD = sAndB.updateBoundary(Z, transNeo);\n\n\t\t\t// -> IF t==T OR cost()>B RETURN St = St-1 Diff D\n\t\t\tSystem.out.printf(\n\t\t\t\t\t\"\\t\\t\\t<genSample> Phase1? costS[%d] > B[%f]\\n\", sAndB\n\t\t\t\t\t\t\t.getCost(), B);\n\t\t\tif (sAndB.getCost() > B) {\n\n\t\t\t\tsAndB.printSAndB();\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// STAGE 2: update S to St by adding/removing vertices in D to S\n\n\t\t\t// -> Compute conductance(St) = outDeg(St) / vol(St)\n\t\t\t// -> IF conductance(St) < thetaT RETURN St\n\t\t\tSystem.out\n\t\t\t\t\t.printf(\n\t\t\t\t\t\t\t\"\\t\\t\\t<genSample> Phase2? conductS[%f] < thetaT[%f]\\n\",\n\t\t\t\t\t\t\tsAndB.getConductance(), thetaT);\n\n\t\t\tsAndB.printSAndB();\n\n\t\t\tif (sAndB.getConductance() < thetaT)\n\t\t\t\tbreak;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n\treturn sAndB;\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\esp\\PtnAlgEvoPartitionBase.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "// Switch between algorithms depending on time-step\n", "func_signal": "protected byte allocateCluster(Node v, ArrayList<Double> wC,\n\t\tArrayList<Double> lC, int timeStep)", "code": "{\n\t// Choose cluster with largest load vector\n\tif ((timeStep < config.getHybridSwitchPoint())\n\t\t\t|| (config.getHybridSwitchPoint() == -1))\n\t\treturn allocateClusterBasic(wC, lC);\n\n\t// Optimization to exclude clusters with no connections\n\telse\n\t\treturn allocateClusterIntdeg(v, wC, lC, timeStep);\n}", "path": "src\\main\\java\\graph_cluster_utils\\ptn_alg\\didic\\PtnAlgDiDiC.java", "repo_name": "alexaverbuch/graph_cluster_utils", "stars": 8, "license": "None", "language": "java", "size": 13759}
{"docstring": "/**\n * Indicates that the specified entity has been mentioned.\n * @param e The entity which has been mentioned.\n */\n", "func_signal": "public void mentionEntity(DiscourseEntity e)", "code": "{\n  if (entities.remove(e)) {\n    entities.add(0,e);\n  }\n  else {\n    System.err.println(\"DiscourseModel.mentionEntity: failed to remove \"+e);\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\coref\\DiscourseModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/* (non-Javadoc)\n * @see opennlp.tools.tokenize.TokenContextGenerator#getContext(java.lang.String, int)\n */\n", "func_signal": "public String[] getContext(String sentence, int index)", "code": "{\n  List<String> preds = new ArrayList<String>();\n  preds.add(\"p=\"+sentence.substring(0,index));\n  preds.add(\"s=\"+sentence.substring(index));\n  if (index>0) {\n    addCharPreds(\"p1\", sentence.charAt(index-1), preds);\n    if (index>1) {\n      addCharPreds(\"p2\", sentence.charAt(index-2), preds);\n      preds.add(\"p21=\"+sentence.charAt(index-2)+sentence.charAt(index-1));\n    }\n    else {\n      preds.add(\"p2=bok\");\n    }\n    preds.add(\"p1f1=\"+sentence.charAt(index-1)+sentence.charAt(index));\n  }\n  else {\n    preds.add(\"p1=bok\");\n  }\n  addCharPreds(\"f1\",sentence.charAt(index), preds);\n  if (index+1 < sentence.length()) {\n    addCharPreds(\"f2\", sentence.charAt(index+1), preds);\n    preds.add(\"f12=\"+sentence.charAt(index)+sentence.charAt(index+1));\n  }\n  else {\n    preds.add(\"f2=bok\");\n  }\n  if (sentence.charAt(0) == '&' && sentence.charAt(sentence.length()-1) == ';') {\n    preds.add(\"cc\");//character code\n  }\n\n  String[] context = new String[preds.size()];\n  preds.toArray(context);\n  return context;\n}", "path": "src\\main\\java\\opennlp\\tools\\tokenize\\DefaultTokenContextGenerator.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Deletes all ngram which do appear less than the cutoffUnder value\n * and more often than the cutoffOver value.\n *\n * @param cutoffUnder\n * @param cutoffOver\n */\n", "func_signal": "public void cutoff(int cutoffUnder, int cutoffOver)", "code": "{\n\n  if (cutoffUnder > 0 || cutoffOver < Integer.MAX_VALUE) {\n\n    for (Iterator<StringList> it = iterator(); it.hasNext();) {\n\n      StringList ngram = (StringList) it.next();\n\n      int count = getCount(ngram);\n\n      if (count < cutoffUnder ||\n          count > cutoffOver) {\n        it.remove();\n      }\n    }\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\ngram\\NGramModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Tests {@link Sequence#compareTo(Sequence)}.\n */\n", "func_signal": "public void testCompareTo()", "code": "{\n  Sequence lowScore = new Sequence();\n  lowScore.add(\"A\", 1d);\n  lowScore.add(\"B\", 2d);\n  lowScore.add(\"C\", 3d);\n\n  Sequence highScore = new Sequence();\n  lowScore.add(\"A\", 7d);\n  lowScore.add(\"B\", 8d);\n  lowScore.add(\"C\", 9d);\n\n  assertEquals(-1, lowScore.compareTo(highScore));\n  assertEquals(1, highScore.compareTo(lowScore));\n  assertEquals(0, highScore.compareTo(highScore));\n}", "path": "src\\test\\java\\opennlp\\tools\\util\\SequenceTest.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Evaluates the given reference {@link POSSample} object.\n *\n * This is done by tagging the sentence from the reference\n * {@link POSSample} with the {@link POSTagger}. The\n * tags are then used to update the word accuracy score.\n *\n * @param reference the reference {@link POSSample}.\n */\n", "func_signal": "public void evaluateSample(POSSample reference)", "code": "{\n\n  String predictedTags[] = tagger.tag(reference.getSentence());\n\n  for (int i = 0; i < reference.getTags().length; i++) {\n    if (reference.getTags()[i].equals(predictedTags[i])) {\n      wordAccuracy.add(1);\n    }\n    else {\n      wordAccuracy.add(0);\n    }\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\postag\\POSEvaluator.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Returns the entities in the discourse model.\n * @return the entities in the discourse model.\n */\n", "func_signal": "public DiscourseEntity[] getEntities()", "code": "{\n  DiscourseEntity[] des = new DiscourseEntity[entities.size()];\n  entities.toArray(des);\n  return(des);\n}", "path": "src\\main\\java\\opennlp\\tools\\coref\\DiscourseModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Creates {@link Entry}s form the given {@link InputStream} and\n * forwards these {@link Entry}s to the {@link EntryInserter}.\n *\n * After creation is finished the provided {@link InputStream} is closed.\n *\n * @param in\n * @param inserter\n *\n * @throws IOException\n * @throws InvalidFormatException\n */\n", "func_signal": "public static void create(InputStream in, EntryInserter inserter)\n    throws IOException, InvalidFormatException", "code": "{\n\n  DictionaryContenthandler profileContentHandler =\n      new DictionaryContenthandler(inserter);\n\n  XMLReader xmlReader;\n  try {\n    xmlReader = XMLReaderFactory.createXMLReader();\n    xmlReader.setContentHandler(profileContentHandler);\n    xmlReader.parse(new InputSource(in));\n  }\n  catch (SAXException e) {\n    throw new InvalidFormatException(\"The profile data stream has \" +\n          \"an invalid format!\", e);\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\dictionary\\serializer\\DictionarySerializer.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Checks that {@link Sequence#toString()} is executable.\n */\n", "func_signal": "public void testToString()", "code": "{\n  new Sequence().toString();\n\n  Sequence sequence = new Sequence();\n  sequence.add(\"test\", 0.1d);\n  sequence.toString();\n}", "path": "src\\test\\java\\opennlp\\tools\\util\\SequenceTest.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Retrieves the count of the given ngram.\n *\n * @param ngram\n *\n * @return count of the ngram or 0 if it is not contained\n *\n */\n", "func_signal": "public int getCount(StringList ngram)", "code": "{\n\n  Integer count = (Integer) mNGrams.get(ngram);\n\n  if (count == null) {\n    return 0;\n  }\n\n  return count.intValue();\n}", "path": "src\\main\\java\\opennlp\\tools\\ngram\\NGramModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Serializes the given entries to the given {@link OutputStream}.\n *\n * After the serialization is finished the provided\n * {@link OutputStream} remains open.\n *\n * @param out\n * @param entries\n *\n * @throws IOException If an I/O error occurs\n */\n", "func_signal": "public static void serialize(OutputStream out, Iterator<Entry> entries)\n    throws IOException", "code": "{\n  StreamResult streamResult = new StreamResult(out);\n  SAXTransformerFactory tf = (SAXTransformerFactory)\n      SAXTransformerFactory.newInstance();\n\n  TransformerHandler hd;\n  try {\n    hd = tf.newTransformerHandler();\n  } catch (TransformerConfigurationException e1) {\n    throw new AssertionError(\"The Tranformer configuration must be valid!\");\n  }\n\n  Transformer serializer = hd.getTransformer();\n  serializer.setOutputProperty(OutputKeys.ENCODING, CHARSET);\n  serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\n  hd.setResult(streamResult);\n\n\n  try {\n    hd.startDocument();\n\n\n    hd.startElement(\"\", \"\", DICTIONARY_ELEMENT, new AttributesImpl());\n\n    while (entries.hasNext()) {\n      Entry entry = entries.next();\n\n      serializeEntry(hd, entry);\n    }\n\n    hd.endElement(\"\", \"\", DICTIONARY_ELEMENT);\n\n    hd.endDocument();\n  }\n  catch (SAXException e) {\n    throw new IOException(\"There was an error during serialization!\");\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\dictionary\\serializer\\DictionarySerializer.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Creates a dictionary which contains all {@link StringList}s which\n * are in the current {@link NGramModel}.\n *\n * @param caseSensitive Specifies whether case distinctions should be kept in the creation of the dictionary.\n *\n * @return a dictionary of the ngrams\n */\n", "func_signal": "public Dictionary toDictionary(boolean caseSensitive)", "code": "{\n\n  Dictionary dict = new Dictionary(caseSensitive);\n\n  for (Iterator<StringList> it = iterator(); it.hasNext();) {\n    dict.put((StringList)it.next());\n  }\n\n  return dict;\n}", "path": "src\\main\\java\\opennlp\\tools\\ngram\\NGramModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Represents this objects as human readable {@link String}.\n */\n", "func_signal": "public String toString()", "code": "{\n  return \"Accuracy:\" + wordAccuracy.mean() +\n      \" Number of Samples: \" + wordAccuracy.count();\n}", "path": "src\\main\\java\\opennlp\\tools\\postag\\POSEvaluator.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Creates the Profile object after processing is complete\n * and switches mIsInsideNgramElement flag.\n */\n", "func_signal": "public void endElement(String uri, String localName, String qName)\n    throws SAXException", "code": "{\n\n  if (TOKEN_ELEMENT.equals(localName)) {\n    mTokenList.add(token.toString().trim());\n    token.setLength(0);\n  }\n  else if (ENTRY_ELEMENT.equals(localName)) {\n\n    String[] tokens = mTokenList.toArray(\n        new String[mTokenList.size()]);\n\n    Entry entry = new Entry(new StringList(tokens), mAttributes);\n\n    try {\n      mInserter.insert(entry);\n    } catch (InvalidFormatException e) {\n      throw new SAXException(\"Invalid dictionary format!\", e);\n    }\n\n    mTokenList.clear();\n    mAttributes = null;\n  }\n  else if (TOKEN_ELEMENT.equals(localName)) {\n    mIsInsideTokenElement = false;\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\dictionary\\serializer\\DictionarySerializer.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Retrieves the total count of all Ngrams.\n *\n * @return total count of all ngrams\n */\n", "func_signal": "public int numberOfGrams()", "code": "{\n  int counter = 0;\n\n  for (Iterator<StringList> it = iterator(); it.hasNext();) {\n\n    StringList ngram = it.next();\n\n    counter += getCount(ngram);\n  }\n\n  return counter;\n}", "path": "src\\main\\java\\opennlp\\tools\\ngram\\NGramModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Tests the copy constructor {@link Sequence#Sequence(Sequence)}.\n */\n", "func_signal": "public void testCopyConstructor()", "code": "{\n  Sequence sequence = new Sequence();\n  sequence.add(\"a\", 10);\n  sequence.add(\"b\", 20);\n\n  Sequence copy = new Sequence(sequence);\n\n  assertEquals(sequence.getOutcomes(), copy.getOutcomes());\n  assertTrue(Arrays.equals(sequence.getProbs(), copy.getProbs()));\n  assertTrue(sequence.compareTo(copy) == 0);\n}", "path": "src\\test\\java\\opennlp\\tools\\util\\SequenceTest.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Adds NGrams up to the specified length to the current instance.\n *\n * @param ngram the tokens to build the uni-grams, bi-grams, tri-grams, ..\n *     from.\n * @param minLength - minimal length\n * @param maxLength - maximal length\n */\n", "func_signal": "public void add(StringList ngram, int minLength, int maxLength)", "code": "{\n\n  if (minLength < 1 || maxLength < 1)\n      throw new IllegalArgumentException(\"minLength and maxLength param must be at least 1!\");\n\n  if (minLength > maxLength)\n      throw new IllegalArgumentException(\"minLength param must not be larger than maxLength param!\");\n\n  for (int lengthIndex = minLength; lengthIndex < maxLength + 1;\n  lengthIndex++) {\n    for (int textIndex = 0;\n        textIndex + lengthIndex - 1 < ngram.size(); textIndex++) {\n\n      String[] grams = new String[lengthIndex];\n\n      for (int i = textIndex; i < textIndex + lengthIndex; i++) {\n        grams[i - textIndex] = ngram.getToken(i);\n      }\n\n      add(new StringList(grams));\n    }\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\ngram\\NGramModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Tests {@link Sequence#add(String, double)}, also\n * tests {@link Sequence#getOutcomes()} and {@link Sequence#getProbs()}.\n */\n", "func_signal": "public void testAddMethod()", "code": "{\n  Sequence sequence = new Sequence();\n  sequence.add(\"a\", 10);\n\n  // check if insert was successful\n  assertEquals(\"a\", sequence.getOutcomes().get(0));\n  assertEquals(10d, sequence.getProbs()[0]);\n}", "path": "src\\test\\java\\opennlp\\tools\\util\\SequenceTest.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Helper function for getContext.\n */\n", "func_signal": "private void addCharPreds(String key, char c, List<String> preds)", "code": "{\n  preds.add(key + \"=\" + c);\n  if (Character.isLetter(c)) {\n    preds.add(key+\"_alpha\");\n    if (Character.isUpperCase(c)) {\n      preds.add(key+\"_caps\");\n    }\n  }\n  else if (Character.isDigit(c)) {\n    preds.add(key+\"_num\");\n  }\n  else if (Character.isWhitespace(c)) {\n    preds.add(key+\"_ws\");\n  }\n  else {\n    if (c=='.' || c=='?' || c=='!') {\n      preds.add(key+\"_eos\");\n    }\n    else if (c=='`' || c=='\"' || c=='\\'') {\n      preds.add(key+\"_quote\");\n    }\n    else if (c=='[' || c=='{' || c=='(') {\n      preds.add(key+\"_lp\");\n    }\n    else if (c==']' || c=='}' || c==')') {\n      preds.add(key+\"_rp\");\n    }\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\tokenize\\DefaultTokenContextGenerator.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Adds the specified entity to this discourse model.\n * @param e the entity to be added to the model.\n */\n", "func_signal": "public void addEntity(DiscourseEntity e)", "code": "{\n  e.setId(nextEntityId);\n  nextEntityId++;\n  entities.add(0,e);\n}", "path": "src\\main\\java\\opennlp\\tools\\coref\\DiscourseModel.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Reads all {@link POSSample} objects from the stream\n * and evaluates each {@link POSSample} object with\n * {@link #evaluateSample(POSSample)} method.\n *\n * @param samples the stream of reference {@link POSSample} which\n * should be evaluated.\n */\n", "func_signal": "public void evaluate(ObjectStream<POSSample> samples) throws ObjectStreamException", "code": "{\n  POSSample sample;\n  while ((sample = samples.read()) != null) {\n    evaluateSample(sample);\n  }\n}", "path": "src\\main\\java\\opennlp\\tools\\postag\\POSEvaluator.java", "repo_name": "mccraigmccraig/opennlp", "stars": 12, "license": "apache-2.0", "language": "java", "size": 18986}
{"docstring": "/**\n * Adds a criterion that will match the current search string within (depending on the MatchMode)\n * any of the given properties. If the search is empty, no criterion is added.\n * @param matchMode used against all properties\n * @param searchProperty one or more properties to be searched\n * @return builder to be used with list model or data provider\n */\n", "func_signal": "public CriteriaBuilder getCriteriaBuilder(final MatchMode matchMode, final String... searchProperty)", "code": "{\n\treturn new CriteriaBuilder() {\n\t\tpublic void build(final Criteria criteria) {\n\t\t\tfinal String search = (String) getDefaultModelObject();\n\t\t\tif (search != null) {\n\t\t\t\tfinal Disjunction d = Restrictions.disjunction();\n\t\t\t\tfor (final String prop : searchProperty) {\n            d.add(Property.forName(prop).like(search, matchMode));\n          }\n\t\t\t\tcriteria.add(d);\n\t\t\t}\n\t\t}\n\t};\n}", "path": "databinder-components-hib\\src\\main\\java\\net\\databinder\\components\\hib\\SearchPanel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Converts the upload's inputstream to the resolved blob setter.\n */\n", "func_signal": "@Override\npublic void updateModel()", "code": "{\n\ttry {\n\t\tif (uploadField.getFileUpload() != null) {\n\t\t\tsetModelObject(Hibernate.createBlob(\n\t\t\t\tuploadField.getFileUpload().getInputStream()));\n\t\t\tonUpdated();\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "path": "databinder-components-hib\\src\\main\\java\\net\\databinder\\components\\hib\\BlobUploadField.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/** @return hash of contained object if present, otherwise from super-implementation.*/\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tObject target = getObject();\n\tif (target == null)\n\t\treturn super.hashCode();\n\treturn target.hashCode();\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Checks if the model is retaining an object this has since become a\n * persistent entity. If so, the ID is fetched and the reference discarded.  \n */\n", "func_signal": "public void checkBinding()", "code": "{\n\tif (!isBound() && retainedObject != null) {\n\t\tSession sess = Databinder.getHibernateSession(factoryKey);\n\t\t\n\t\tif (sess.contains(retainedObject)) {\n\t\t\tobjectId = sess.getIdentifier(retainedObject);\n\t\t\tretainedObject = null;\n\t\t}\n\t}\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Construct with a class and criteria binder that return exactly one result. Use this for fetch\n * instructions, scalar results, or if the persistent object ID is not available. Criteria that\n * return more than one result will produce exceptions. Criteria that return no result\n * will produce a null object.\n * @param objectClass class of object for root criteria\n * @param criteriaBuilder builder to apply criteria restrictions\n */\n", "func_signal": "public HibernateObjectModel(Class objectClass, CriteriaBuilder criteriaBuilder)", "code": "{\n\tthis.objectClass = objectClass;\n\tthis.criteriaBuilder = criteriaBuilder;\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * @param object The object to bind properties of\n * @param properties The properties list to associate\n */\n", "func_signal": "public PropertyQueryBinder(final Object object, final String[] properties)", "code": "{\n\tthis.object = object;\n\tthis.properties = properties;\n}", "path": "databinder-models-jpa1\\src\\main\\java\\net\\databinder\\models\\jpa\\PropertyQueryBinder.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/** Compares contained objects if present, otherwise calls super-implementation.*/\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tObject target = getObject();\n\tif (target != null && obj instanceof HibernateObjectModel)\n\t\treturn target.equals(((HibernateObjectModel)obj).getObject());\n\treturn super.equals(obj);\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Return user object by matching against a \"username\" property. Override\n * if you have a differently named property.\n * @return DataUser for the given username. \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic DataUser getUser(String username)", "code": "{\n\ttry {\n\t\tQuery q = Query.select().where(\"username = ?\", username).limit(1);\n\t\tDataUser[] users = (DataUser[]) Databinder.getEntityManager().find(\n\t\t\t\t(Class<? extends RawEntity>)getUserClass(),q);\n\t\tif (users.length == 0)\n\t\t\treturn null;\n\t\treturn users[0];\n\t} catch (SQLException e) {\n\t\tthrow new WicketRuntimeException(e);\n\t}\n}", "path": "databinder-app-ao\\src\\main\\java\\net\\databinder\\auth\\ao\\AuthDataApplication.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Internal initialization. Client applications should not normally override\n * or call this method.\n */\n", "func_signal": "@Override\nprotected void internalInit()", "code": "{\n\tsuper.internalInit();\n\tauthInit();\n}", "path": "databinder-app-ao\\src\\main\\java\\net\\databinder\\auth\\ao\\AuthDataApplication.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/** Use the given model (must not be read-only ) for the search string */\n", "func_signal": "public SearchPanel(final String id, final IModel searchModel)", "code": "{\n\tsuper(id, searchModel);\n\tadd(new SearchForm(\"searchForm\"));\n}", "path": "databinder-components-hib\\src\\main\\java\\net\\databinder\\components\\hib\\SearchPanel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/** Clear field and register updates. */\n", "func_signal": "@Override\n        public void onClick(final AjaxRequestTarget target)", "code": "{\n\tresetSearchModelObject();\n\ttarget.addComponent(searchWrap);\n\ttarget.addComponent(clearWrap);\n\tonUpdate(target);\n}", "path": "databinder-components-hib\\src\\main\\java\\net\\databinder\\components\\hib\\SearchPanel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Get the restricted token for a user, using IP addresses as location parameter. This implementation\n * combines the \"X-Forwarded-For\" header with the remote address value so that unique\n * values result with and without proxying. (The forwarded header is not trusted on its own\n * because it can be most easily spoofed.)\n * @param user source of token\n * @return restricted token\n */\n", "func_signal": "public String getToken(DataUser user)", "code": "{\n\tHttpServletRequest req = ((WebRequest) RequestCycle.get().getRequest()).getHttpServletRequest();\n\tString fwd = req.getHeader(\"X-Forwarded-For\");\n\tif (fwd == null)\n\t\tfwd = \"nil\";\n\tMessageDigest digest = getDigest();\n\tuser.getPassword().update(digest);\n\tdigest.update((fwd + \"-\" + req.getRemoteAddr()).getBytes());\n\tbyte[] hash = digest.digest(user.getUsername().getBytes());\n\treturn new String(Base64UrlSafe.encodeBase64(hash));\n}", "path": "databinder-app-ao\\src\\main\\java\\net\\databinder\\auth\\ao\\AuthDataApplication.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Sets Wicket's security strategy for role authorization and appoints this \n * object as the unauthorized instatiation listener. Called automatically on start-up.\n */\n", "func_signal": "protected void authInit()", "code": "{\n\tgetSecuritySettings().setAuthorizationStrategy(new RoleAuthorizationStrategy(this));\n\tgetSecuritySettings().setUnauthorizedComponentInstantiationListener(this);\n}", "path": "databinder-app-ao\\src\\main\\java\\net\\databinder\\auth\\ao\\AuthDataApplication.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Create a model bound to the given class and entity id. If nothing matches\n * the id the model object will be null.\n * @param objectClass class to be loaded and stored by Hibernate\n * @param entityId id of the persistent object\n */\n", "func_signal": "public HibernateObjectModel(Class objectClass, Serializable entityId)", "code": "{\n\tthis.objectClass = objectClass;\n\tthis.objectId = entityId;\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * @return app-salted MessageDigest.  \n */\n", "func_signal": "public MessageDigest getDigest()", "code": "{\n\ttry {\n\t\tMessageDigest digest = MessageDigest.getInstance(\"SHA\");\n\t\tdigest.update(getSalt());\n\t\treturn digest;\n\t} catch (NoSuchAlgorithmException e) {\n\t\tthrow new RuntimeException(\"SHA Hash algorithm not found.\", e);\n\t}\n}", "path": "databinder-app-ao\\src\\main\\java\\net\\databinder\\auth\\ao\\AuthDataApplication.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Disassociates this object from any persistent object, but retains the class\n * for constructing a blank copy if requested.\n * @see HibernateObjectModel#HibernateObjectModel(Class objectClass)\n * @see #isBound()\n */\n", "func_signal": "public void unbind()", "code": "{\n\tobjectId = null;\n\tqueryBuilder = null;\n\tcriteriaBuilder = null;\n\tretainedObject = null;\n\tdetach();\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Load the object through Hibernate, contruct a new instance if it is not\n * bound to an id, or use unsaved retained object. Returns null if no\n * criteria needed to load or construct an object are available.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Override\nprotected T load()", "code": "{\n\tif (objectClass == null && queryBuilder == null)\n\t\treturn null;\t// can't load without one of these\n\ttry {\n\t\tif (!isBound()) {\n\t\t\tif (retainUnsaved && retainedObject != null)\n\t\t\t\treturn retainedObject;\n\t\t\telse if (retainUnsaved) try {\n\t\t\t\treturn retainedObject = (T) objectClass.newInstance();\n\t\t\t} catch (ClassCastException e) {\n\t\t\t\tthrow new WicketRuntimeException(\"Unsaved entity must be Serializable or retainUnsaved set to false; see HibernateObjectModel javadocs.\");\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn (T) objectClass.newInstance();\n\t\t}\n\t} catch (ClassCastException e) {\n\t\tthrow new RuntimeException(\"Retaining unsaved model objects requires that they be Serializable.\", e);\n\t} catch (Throwable e) {\n\t\tthrow new RuntimeException(\"Unable to instantiate object. Does it have a default constructor?\", e);\n\t}\n\tSession sess = Databinder.getHibernateSession(factoryKey);\n\tif (objectId != null) {\n\t\treturn (T) sess.get(objectClass, objectId);\n\t}\n\n\tif(criteriaBuilder != null) {\n\t\tCriteria criteria = sess.createCriteria(objectClass);\n\t\tcriteriaBuilder.build(criteria);\n\t\treturn (T) criteria.uniqueResult();\n\t}\n\n\treturn (T) queryBuilder.build(sess).uniqueResult();\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Set a factory key other than the default (null).\n * @param key session factory key\n * @return this, for chaining\n */\n", "func_signal": "public HibernateObjectModel setFactoryKey(Object key)", "code": "{\n\tthis.factoryKey = key;\n\treturn this;\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Passes query on to the DataUser object if signed in.\n */\n", "func_signal": "public final boolean hasAnyRole(Roles roles)", "code": "{\n\tDataUser user = ((AuthSession)Session.get()).getUser();\n\tif (user != null)\n\t\tfor (String role : roles)\n\t\t\tif (user.hasRole(role))\n\t\t\t\treturn true;\n\treturn false;\n}", "path": "databinder-app-ao\\src\\main\\java\\net\\databinder\\auth\\ao\\AuthDataApplication.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Change the persistent object contained in this model.\n * Because this method establishes a persistent object ID, queries and binders\n * are removed if present.\n * @param object must be an entity contained in the current Hibernate session, or Serializable, or null\n */\n", "func_signal": "public void setObject(T object)", "code": "{\n\tunbind();\t// clear everything but class, name\n\tobjectClass = null;\n\n\tif (object != null) {\n\t\tobjectClass = HibernateProxyHelper.getClassWithoutInitializingProxy(object);\n\n\t\tSession sess = Databinder.getHibernateSession(factoryKey);\n\t\tif (sess.contains(object))\n\t\t\tobjectId = sess.getIdentifier(object);\n\t\telse if (retainUnsaved)\n\t\t\t\tretainedObject = (T) object;\n\t\tsetTempModelObject(object);\t// skip calling load later\n\t}\n}", "path": "databinder-models-hib\\src\\main\\java\\net\\databinder\\models\\hib\\HibernateObjectModel.java", "repo_name": "n8han/Databinder-for-Wicket", "stars": 15, "license": "lgpl-2.1", "language": "java", "size": 2833}
{"docstring": "/**\n * Is this tag a custom tag\n * \n * @return\n */\n", "func_signal": "public boolean isCustomTag()", "code": "{\n\tboolean iscustom = false;\n\t\n\tif (this.name.toLowerCase().startsWith(\"cf_\") || this.name.toLowerCase().startsWith(\"cfx_\")) {\n\t\tiscustom = true;\n\t}\n\treturn iscustom;\n}", "path": "src\\cfml\\dictionary\\Tag.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Creates a simple, one attribute set trigger. Just used to reduce the amount of coding required :)\n * \n * @param paramName\n *            Name of the parameter to create the trigger from\n * @param paramVal\n *            The value of said triggered\n * @param required\n *            Whether this trigger triggered means that the parameter must be used\n * @return The newly created trigger\n */\n", "func_signal": "public static Trigger CreateSimpleTrigger(String paramName, String paramVal, boolean required)", "code": "{\n\tHashMap params = new HashMap();\n\tparams.put(paramName, paramVal);\n\treturn new Trigger(params, required);\n}", "path": "src\\cfml\\dictionary\\Trigger.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Alternate version using JDOM\n * \n * @param versionkey\n * @return\n */\n", "func_signal": "public static SyntaxDictionary getDictionaryByVersionAlt(String versionkey)", "code": "{\n\t\n\tif (dictionaryVersionCache.containsKey(versionkey)) {\n\t\treturn (SyntaxDictionary) dictionaryVersionCache.get(versionkey);\n\t} else {\n\t\tSAXBuilder builder = new SAXBuilder();\n\t\tSyntaxDictionary dic = new SQLSyntaxDictionary();\n\t\tURL dictionaryConfigURL = null;\n\t\t\n\t\ttry {\n\t\t\tdictionaryConfigURL = new URL(DICTIONARY_DIR);\n\t\t\tURL configurl = new URL(dictionaryConfigURL, \"dictionaryconfig.xml\");\n\t\t\torg.jdom.Document document = builder.build(configurl);\n\t\t\t\n\t\t\tXPath x = XPath.newInstance(\"//dictionary[@id='CF_DICTIONARY']/version[@key=\\'\" + versionkey\n\t\t\t\t\t+ \"\\']/grammar[1]\");\n\t\t\t\n\t\t\tElement grammerElement = (Element) x.selectSingleNode(document);\n\t\t\tdic = new SQLSyntaxDictionary();\n\t\t\tdic.loadDictionary(getDictionaryLocation(grammerElement.getAttributeValue(\"location\")));\n\t\t\tdictionaryVersionCache.put(versionkey, dic);\n\t\t} catch (MalformedURLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (JDOMException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\treturn (SyntaxDictionary) dictionaryVersionCache.get(versionkey);\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Creates a tag with a series of tag-based info. The name, whether or not the tag is single or not, the style (is\n * it xmlstyle or not) and it's creator (see syntax dictionaries for more info).\n * \n * @param name\n *            The name of the tag\n * @param single\n *            Is the tag a single tag or not?\n * @param style\n *            Is the tag XML style or not?\n * @param creator\n *            The creator/author of the tag\n */\n", "func_signal": "public Tag(String name, boolean single, boolean style, byte creator)", "code": "{\n\tthis(name, single);\n\tthis.creator = creator;\n\txmlstyle = style;\n}", "path": "src\\cfml\\dictionary\\Tag.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * returns true if this is a form tag\n * \n * @return\n */\n", "func_signal": "public boolean isFormTag()", "code": "{\n\tif (getCreatorFlags() == FORM) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\cfml\\dictionary\\Tag.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Compares two maps. Looks like AbstractMap::equals() doesn't work correctly!\n * \n * @param m1\n *            First map to check\n * @param m2\n *            Second map for the comparison\n * @return true/false if they're equal or not\n */\n", "func_signal": "private boolean mapsEqual(Map m1, Map m2)", "code": "{\n\t// boolean retVal = false;\n\t\n\tif (!m1.keySet().equals(m2.keySet())) {\n\t\treturn false;\n\t}\n\t\n\tIterator m1Iter = m1.keySet().iterator();\n\twhile (m1Iter.hasNext()) {\n\t\tObject key = m1Iter.next();\n\t\tif (m1.get(key) == null)\n\t\t\treturn false;\n\t\tif (m2.get(key) == null)\n\t\t\treturn false;\n\t\t\n\t\tif (!m1.get(key).equals(m2.get(key))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}", "path": "src\\cfml\\dictionary\\Trigger.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Creates a simple, one attribute set trigger with a required value and a positional index. Just used to reduce the\n * amount of coding required :)\n * \n * @param paramName\n *            Name of the parameter to create the trigger from\n * @param paramVal\n *            The value of said triggered\n * @param required\n *            Whether this trigger triggered means that the parameter must be used\n * @param index\n *            The positional index of this parameter in the tag or function call\n * @return The newly created trigger\n */\n", "func_signal": "public static Trigger CreateSimpleTrigger(String paramName, String paramVal, boolean required, int index)", "code": "{\n\tHashMap params = new HashMap();\n\tparams.put(paramName, paramVal);\n\treturn new Trigger(params, required, index);\n}", "path": "src\\cfml\\dictionary\\Trigger.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Tell the dictionaries to load based on the config file\n */\n", "func_signal": "public static void initDictionaries(DictionaryPreferences prefs)", "code": "{\n\tfPrefs = prefs;\n\tinit();\n\tinitDictionaries();\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * returns true if this is a table tag\n * \n * @return\n */\n", "func_signal": "public boolean isTableTag()", "code": "{\n\tif (getCreatorFlags() == TABLE) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\cfml\\dictionary\\Tag.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Takes a Syntax dictionary from the cache and puts it into the live dictionary. Doesn't try to load dictionary if\n * retry is true.\n * \n * @param cachekey\n * @param livekey\n * @param retry\n *            - Indicates if we have already tried to load the dictionary into the cache.\n */\n", "func_signal": "private static synchronized void loadDictionaryFromCache(String cachekey, String livekey, boolean retry)", "code": "{\n\t\n\tif (dictionariesCache.containsKey(cachekey) && dictionaries.containsKey(livekey)) {\n\t\t// Object tdic = dictionaries.get(livekey);\n\t\tObject tdic = dictionariesCache.get(cachekey);\n\t\t\n\t\tdictionaries.put(livekey, tdic);\n\t} else if (dictionariesCache.containsKey(cachekey)) {\n\t\tdictionaries.put(livekey, dictionariesCache.get(cachekey));\n\t} else if (!dictionariesCache.containsKey(cachekey) && cachekey != null && cachekey.length() > 0) {\n\t\tif (retry) {\n\t\t\t// We've already tried to load the dictionary, so something must\n\t\t\t// be broken.\n\t\t\tSystem.out\n\t\t\t\t\t.println(\"Error! Dictionary \"\n\t\t\t\t\t\t\t+ cachekey\n\t\t\t\t\t\t\t+ \" could not be loaded.\\n This may cause CFEclipse to work unpredictably or, in some cases, not at all.\\n\\nTry closing Eclipse and starting it from the command line with -clean as a command line argument.\");\n\t\t\tthrow new IllegalArgumentException(\"Problem loading version node \" + cachekey\n\t\t\t\t\t+ \" from dictionaryconfig.xml\");\n\t\t}\n\t\t// the dictionary is not in the cache, lets try to load it...\n\t\tloadDictionaryByVersion(cachekey);\n\t\t// try again..\n\t\tloadDictionaryFromCache(cachekey, livekey, true);\n\t} else if (cachekey != null || cachekey.length() > 0) {\n\t\treturn;\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Cache key: \" + cachekey + \" is not in the cache\"\n\t\t\t\t+ dictionariesCache.keySet().toString());\n\t}\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Checks to see if the passed object is equal to this value\n */\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n\tif (obj instanceof Value) {\n\t\t// if the name is the same and the type is the same\n\t\t// assume its the same\n\t\tif (((Value) obj).getValue().equals(this.value)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}", "path": "src\\cfml\\dictionary\\Value.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Returns whether the trigger has, um, triggered or not.\n * \n * @param params\n *            The attributes/parameters currently set.\n * @return PARAM_TRIGGERD | PARAM_REQUIRED (triggered & required) PARAM_TRIGGERED (simply triggered, therefore\n *         optional) PARAM_NOTTRIGGERED (not triggered, technically optional)\n */\n", "func_signal": "public int WillTrigger(HashMap params)", "code": "{\n\t// /System.out.print(\"  Trigger:WillTrigger() - \");\n\t\n\tif (triggerParams.size() == 0) {\n\t\t// System.out.println(\" no trigger params, triggered and required\");\n\t\treturn Parameter.PARAM_TRIGGERED | (isRequired ? Parameter.PARAM_REQUIRED : 0);\n\t}\n\t\n\tif (mapsEqual(this.triggerParams, params)) {\n\t\tif (isRequired) {\n\t\t\t// System.out.println(\" required and triggered\");\n\t\t\treturn Parameter.PARAM_TRIGGERED | Parameter.PARAM_REQUIRED;\n\t\t} else {\n\t\t\t// System.out.println(\" triggered, not required\");\n\t\t\treturn Parameter.PARAM_TRIGGERED;\n\t\t}\n\t}\n\t\n\tSet paramSet = params.keySet();\n\tIterator i = paramSet.iterator();\n\twhile (i.hasNext()) {\n\t\tObject key = i.next();\n\t\tString value = params.get(key).toString();\n\t\tHashMap thisParam = new HashMap();\n\t\tthisParam.put(key.toString(), value);\n\t\t// System.out.println(\"Param\");\n\t\t// System.out.println(key.toString() + \":\" + value);\n\t\t// System.out.println(\"Trigger\");\n\t\t// System.out.println(this.toString());\n\t\tif (this.triggerParams.toString().equalsIgnoreCase(thisParam.toString())) {\n\t\t\tif (this.isRequired) {\n\t\t\t\treturn Parameter.PARAM_TRIGGERED | Parameter.PARAM_REQUIRED;\n\t\t\t} else {\n\t\t\t\treturn Parameter.PARAM_TRIGGERED;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn Parameter.PARAM_NOTTRIGGERED;\n}", "path": "src\\cfml\\dictionary\\Trigger.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Gets the first version set in the dictionaryconfig file for the given dictionary. This is useful when hitting an\n * error and wanting to get a fall back dictionary. This might error if there are no versions defined for the given\n * dictionary (or if the document is not valid)\n * \n * @param forDictionary\n * @return\n */\n", "func_signal": "public static String getFirstVersion(String forDictionary)", "code": "{\n\treturn dictionaryConfig.getElementById(forDictionary).getFirstChild().getAttributes().getNamedItem(\"key\")\n\t\t\t.getNodeValue();\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Constructs a new Tag with the specified name and whether or not it is a single tag or not (i.e. &lt;cfbreak&gt;).\n * \n * @param name\n *            The name of the tag\n * @param single\n *            Is the tag a single tag or not\n */\n", "func_signal": "public Tag(String name, boolean single)", "code": "{\n\tsuper(name);\n\tthis.single = single;\n}", "path": "src\\cfml\\dictionary\\Tag.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * This gets a string array of supported types. This is mostly used in the radio display on the project settings. It\n * builds a string array from the key and label attributes in the dictionary config file\n * \n * @return {key, label} array\n */\n", "func_signal": "public static String[][] getConfiguredDictionaries()", "code": "{\n\tNodeList cfmltypes = dictionaryConfig.getElementById(CFDIC_KEY).getChildNodes();\n\t\n\tbyte typeslen = (byte) cfmltypes.getLength();\n\t\n\tString[][] options = new String[typeslen][2];\n\t\n\tfor (byte z = 0; z < typeslen; z++) {\n\t\tString key = cfmltypes.item(z).getAttributes().getNamedItem(\"key\").getNodeValue();\n\t\tString label = cfmltypes.item(z).getAttributes().getNamedItem(\"label\").getNodeValue();\n\t\t\n\t\toptions[z][0] = label;\n\t\toptions[z][1] = key;\n\t}\n\t\n\treturn options;\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Get a dictionary from the live dictionaries\n * \n * @param key\n *            the dictionary's key (often one of the statics above)\n * @return the dictionary\n */\n", "func_signal": "public static SyntaxDictionary getDictionary(String key)", "code": "{\n\t// System.out.println(\"Getting dictionary \" + key);\n\tSyntaxDictionary dict = (SyntaxDictionary) dictionaries.get(key);\n\t// System.out.println(\"GOT: \" + dict);\n\treturn dict;\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Compares the passed object to this value\n */\n", "func_signal": "public int compareTo(Object o)", "code": "{\n\tif (o == null)\n\t\tthrow new NullPointerException(\"Object o that I am comparing with is null!\");\n\t\n\tif (o instanceof Value) {\n\t\treturn value.compareTo(((Value) o).getValue());\n\t}\n\t\n\treturn 0;\n}", "path": "src\\cfml\\dictionary\\Value.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Tell the dictionaries to load based on the config file\n */\n", "func_signal": "public static void initDictionaries()", "code": "{\n\t\n\t// long time = System.currentTimeMillis();\n\t// System.out.println(\"Dictionaries initialized start\");\n\t\n\t// get the dictionary config file into a DOM\n\tloadDictionaryConfig();\n\tString cfdictversion = getInitialDictVersion();\n\tif (dictionaryConfig == null)\n\t\tthrow new IllegalArgumentException(\"Problem loading dictionaryconfig.xml\");\n\t\n\t// load the default dictionaries into the cache\n\t// this is kind of weak but it'll do pig... it'll do...\n\tif (cfdictversion.trim().length() == 0) {\n\t\tcfdictversion = getFirstVersion(CFDIC_KEY);\n\t}\n\tString htdictversion = getFirstVersion(HTDIC_KEY);\n\tString jsdictversion = getFirstVersion(JSDIC_KEY);\n\t\n\t// load the dictionary into the cache\n\tloadDictionaryByVersion(cfdictversion);\n\tloadDictionaryByVersion(htdictversion);\n\tloadDictionaryByVersion(jsdictversion);\n\t\n\t// load from the cache to the live\n\tloadDictionaryFromCache(cfdictversion, CFDIC_KEY);\n\tloadDictionaryFromCache(cfdictversion, SQLDIC_KEY);\n\tloadDictionaryFromCache(htdictversion, HTDIC_KEY);\n\tloadDictionaryFromCache(jsdictversion, JSDIC_KEY);\n\t\n\t// System.out.println(\"Dictionaries initialized in \" +\n\t// (System.currentTimeMillis() - time) + \" ms\");\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Creates a tag with a series of tag-based info. The name, whether or not the tag is single or not, the style (is\n * it xmlstyle or not) and it's creator (see syntax dictionaries for more info). Additionally it takes whether or\n * not the tag is a hybrid (???) and whether it can take any attribute (ala &lt;cfif&gt;).\n * \n * @param name\n *            The name of the tag\n * @param single\n *            Is the tag a single tag or not?\n * @param style\n *            Is the tag XML style or not?\n * @param creator\n *            The creator/author of the tag\n * @param hybrid\n *            Is the tag a hybrid or not\n * @param anyAttribute\n *            Can the tag take any attribute\n */\n", "func_signal": "public Tag(String name, boolean single, boolean style, byte creator, boolean hybrid, boolean anyAttribute)", "code": "{\n\tthis(name, single);\n\tthis.creator = creator;\n\txmlstyle = style;\n\tthis.hybrid = hybrid;\n\tthis.anyAttribute = anyAttribute;\n}", "path": "src\\cfml\\dictionary\\Tag.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Loads the dictionary config file. The config file lists all the dictionary files that are available to the system\n */\n", "func_signal": "private static void loadDictionaryConfig()", "code": "{\n\ttry {\n\t\tif (fPrefs == null) {\n\t\t\tfPrefs = new DictionaryPreferences();\n\t\t\tinit();\n\t\t}\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tfactory.setIgnoringComments(true);\n\t\tfactory.setIgnoringElementContentWhitespace(true);\n\t\tfactory.setCoalescing(true);\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tif (fPrefs.getDictionaryDir().length() != 0) {\n\t\t\tdictionaryConfig = builder.parse(new File(fPrefs.getDictionaryDir() + \"/dictionaryconfig.xml\"));\n\t\t} else {\n\t\t\tSystem.out.println(fBuiltInDictionaryPath);\n\t\t\tURL dc = new URL(fBuiltInDictionaryPath + \"dictionaryconfig.xml\");\n\t\t\tdictionaryConfig = builder.parse(dc.openStream());\n\t\t}\n\t\t// URL configurl = DictionaryManager.class.getResource(\"/dictionary/dictionaryconfig.xml\");\n\t\t// URL configurl = new URL(dictionaryConfigURL + \"/dictionaryconfig.xml\");\n\t\t// System.err.println(configurl.getPath());\n\t\t// System.err.println(configurl.getFile().toString());\n\t\t// dictionaryConfig = builder.parse(configurl.getFile());\n\t} catch (Exception e) {\n\t\te.printStackTrace(System.err);\n\t}\n}", "path": "src\\cfml\\dictionary\\DictionaryManager.java", "repo_name": "denuno/cfml.dictionary", "stars": 8, "license": "None", "language": "java", "size": 2434}
{"docstring": "/**\n * Parse the project's main properties file\n * @return Object that contains all of the configuration parameters\n */\n", "func_signal": "public static Properties getConfig()", "code": "{\n\ttry {\n\t\tProperties mainConfig = new Properties();\n\t\t// Load the config.properties file and return the Properties object\n\t\tmainConfig.load(new FileInputStream(\"build/classes/org/cl/nm417/config/config.properties\"));\n\t\treturn mainConfig;\n\t} catch (Exception ex) {\n\t\tex.printStackTrace();\n\t}\n\treturn null;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\org\\cl\\nm417\\config\\ConfigLoader.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see edu.mit.jwi.item.ISynset#getType()\n */\n", "func_signal": "public int getType()", "code": "{\n\tPOS pos = getPOS();\n\tif(pos == POS.NOUN) return 1;\n\tif(pos == POS.VERB) return 2;\n\tif(pos == POS.ADVERB) return 4;\n\treturn isAdjectiveSatellite() ? 5 : 3;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\Synset.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see edu.mit.wordnet.core.file.ILineParser#parseIndexLine(java.lang.String)\n */\n", "func_signal": "public ISenseEntry parseLine(String line)", "code": "{\n\tif (line == null) throw new MisformattedLineException(line);\n\n\ttry {\n\t\tint begin = 0, end = 0;\n\t\t\n\t\t// get sense key\n\t\tend = line.indexOf(space, begin);\n\t\tString keyStr = line.substring(begin, end);\n\t\tISenseKey sense_key = getSenseKeyParser().parseLine(keyStr);\n\t\t\n\t\t// get offset\n\t\tbegin = end+1;\n\t\tend = line.indexOf(space, begin);\n\t\tint synset_offset = Integer.parseInt(line.substring(begin, end));\n\t\t\n\t\t// get sense number\n\t\tbegin = end+1;\n\t\tend = line.indexOf(space, begin);\n\t\tint sense_number = Integer.parseInt(line.substring(begin, end));\n\t\t\n\t\t// get tag cnt\n\t\tbegin = end+1;\n\t\tint tag_cnt = Integer.parseInt(line.substring(begin));\n\t\t\n\t\treturn new SenseEntry(sense_key, synset_offset, sense_number, tag_cnt);\n\t} catch (Exception e) {\n\t\tthrow new MisformattedLineException(line, e);\n\t}\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\data\\parse\\SenseLineParser.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#equals(java.lang.Object)\n */\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n    if (this == obj) return true;\n    if (obj == null) return false;\n    \n    if (!(obj instanceof ISynset)) return false;\n    final ISynset other = (ISynset) obj;\n    \n    if (fGloss == null) {\n        if (other.getGloss() != null) return false;\n    } else if (!fGloss.equals(other.getGloss())) return false;\n    \n    if (!fID.equals(other.getID())) return false;\n    if (!fWords.equals(other.getWords())) return false;\n    if (fIsAdjSat != other.isAdjectiveSatellite()) return false;\n    if (!synsetMap.equals(other.getRelatedMap())) return false;\n    return true;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\Synset.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n * Returns the singleton instance of this class, instantiating it if\n * necessary.\n */\n", "func_signal": "public static ExceptionLineParser getInstance()", "code": "{\n\tif (fInstance == null) fInstance = new ExceptionLineParser();\n\treturn fInstance;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\data\\parse\\ExceptionLineParser.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n * Returns the singleton instance of this class, instantiating it if\n * necessary.\n */\n", "func_signal": "public static SenseLineParser getInstance()", "code": "{\n\tif (fInstance == null) fInstance = new SenseLineParser();\n\treturn fInstance;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\data\\parse\\SenseLineParser.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#toString()\n */\n", "func_signal": "public String toString()", "code": "{\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(\"SYNSET{\");\n    buffer.append(fID.toString());\n    buffer.append(\" : Words[\");\n    for (IWord word : fWords) {\n        buffer.append(word.toString());\n        buffer.append(\", \");\n    }\n    buffer.replace(buffer.length() - 2, buffer.length(), \"]}\");\n\n    return buffer.toString();\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\Synset.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n\t * (non-Javadoc)\n\t * \n\t * @see java.lang.Object#toString()\n\t */\n", "func_signal": "public String toString()", "code": "{\n    String result = \"[\" + fID.getLemma() + \" (\" + fID.getPOS()\n            + \") \";\n    for (IWordID id : fWordIDs) {\n        result = result + id.toString() + \", \";\n    }\n    result = result.substring(0, result.length() - 2) + \"]\";\n    return result;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\IndexWord.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n * @throws NullPointerException if the argument is <code>null</code>\n */\n", "func_signal": "public ExceptionEntryProxy(IExceptionEntryProxy proxy)", "code": "{\n\tfSurface = proxy.getSurfaceForm();\n\tfRoots = proxy.getRootForms();\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\ExceptionEntryProxy.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n * The arguments, and the contents of the array, cannot be null, otherwise\n * it will throw an NullPointerException or IllegalArgumentException.\n */\n", "func_signal": "public ExceptionEntryProxy(String surfaceForm, String ... rootForms)", "code": "{\n\tif (surfaceForm == null) throw new NullPointerException();\n\tfor(String form : rootForms){\n\t\tif (form == null || form.length() == 0)\tthrow new IllegalArgumentException();\n\t}\n\t\n\tfSurface = surfaceForm;\n\tfRoots = Collections.unmodifiableList(Arrays.asList(rootForms));\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\ExceptionEntryProxy.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see edu.mit.wordnet.core.file.ILineParser#parseIndexLine(java.lang.String)\n */\n", "func_signal": "public IExceptionEntryProxy parseLine(String line)", "code": "{\n\tif (line == null) throw new MisformattedLineException(line);\n\n\tString[] forms = line.split(\" \");\n\tif (forms.length < 2) throw new MisformattedLineException(line);\n\n\tString surface = forms[0].trim();\n\n\tString[] trimmed = new String[forms.length - 1];\n\tfor (int i = 1; i < forms.length; i++)\n\t\ttrimmed[i - 1] = forms[i].trim();\n\n\treturn new ExceptionEntryProxy(surface, trimmed);\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\data\\parse\\ExceptionLineParser.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n     * (non-Javadoc)\n     * \n     * @see edu.mit.wordnet.core.data.ISynset#getRelatedSynsets(edu.mit.wordnet.core.data.IPointerType)\n     */\n", "func_signal": "public List<ISynsetID> getRelatedSynsets(IPointer type)", "code": "{\n    \tif(synsetMap == null) return Collections.<ISynsetID>emptyList();\n        List<ISynsetID> result = synsetMap.get(type);\n        return result != null ? result : Collections.<ISynsetID>emptyList(); \n    }", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\Synset.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#hashCode()\n */\n", "func_signal": "public int hashCode()", "code": "{\n    final int PRIME = 31;\n    int result = 1;\n    result = PRIME * result + ((fGloss == null) ? 0 : fGloss.hashCode());\n    result = PRIME * result + (fIsAdjSat ? 1231 : 1237);\n    result = PRIME * result + fID.hashCode();\n    result = PRIME * result + fWords.hashCode();\n    result = PRIME * result + synsetMap.hashCode();\n    return result;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\Synset.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#hashCode()\n */\n", "func_signal": "public int hashCode()", "code": "{\n    final int prime = 31;\n    int result = 1;\n\t\tresult = prime * result + fID.hashCode();\n\t\tresult = prime * result + fTagSenseCnt;\n    result = prime * result + fWordIDs.hashCode();\n    return result;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\IndexWord.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n\t * Takes an integer in the closed range [0,99999999] and converts it into an\n\t * eight decimal digit zero-filled string. E.g., \"1\" becomes \"00000001\",\n\t * \"1234\" becomes \"00001234\", and so on. This is used for the generation of\n\t * Synset and Word ID numbers.\n\t */\n", "func_signal": "public static String zeroFillOffset(int offset)", "code": "{\n\tcheckOffset(offset);\n\tStringBuilder sb = new StringBuilder(8);\n\tString offsetStr = Integer.toString(offset);\n\tint numZeros = 8-offsetStr.length();\n\tfor(int i = 0; i < numZeros; i++) sb.append(zero);\n\tsb.append(offsetStr);\n\treturn sb.toString();\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\Synset.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n\t * Constructs a new index word using the specified index word id and words\n\t * \n\t * @throws NullPointerException\n\t *             if the id or word array is <code>null</code>\n\t * @throws IllegalArgumentException\n\t *             if the word array is empty\n\t * @throws IllegalArgumentException\n\t *             if the pointer tag count is less than zero\n\t */\n", "func_signal": "public IndexWord(IIndexWordID id, int tagSenseCnt, IWordID[] words)", "code": "{\n    if (id == null) throw new NullPointerException();\n    if (words.length == 0) throw new IllegalArgumentException();\n    if(tagSenseCnt < 0) throw new IllegalArgumentException();\n    \n    fID = id;\n    fTagSenseCnt = tagSenseCnt;\n    fWordIDs = Collections.unmodifiableList(Arrays.asList(words));\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\IndexWord.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see edu.mit.wordnet.core.file.ILineParser#parseIndexLine(java.lang.String)\n */\n", "func_signal": "public IIndexWord parseLine(String line)", "code": "{\n\tif (line == null) throw new MisformattedLineException(line);\n\n\ttry {\n\t\tIIndexWord result = null;\n\t\tStringTokenizer tokenizer = new StringTokenizer(line, \" \");\n\n\t\t// get lemma\n\t\tString lemma = tokenizer.nextToken();\n\n\t\t// get pos\n\t\tString posSym = tokenizer.nextToken();\n\t\tPOS pos = POS.getPartOfSpeech(posSym.charAt(0));\n\t\t\n\t\t// consume synset_cnt\n\t\ttokenizer.nextToken();\n\n\t\t// consume ptr_symbols\n\t\tint p_cnt = Integer.parseInt(tokenizer.nextToken());\n\t\tfor (int i = 0; i < p_cnt; ++i) tokenizer.nextToken();\n\n\t\t// get sense_cnt\n\t\tint senseCount = Integer.parseInt(tokenizer.nextToken());\n\n\t\t// get tagged sense count\n\t\tint tagSenseCnt = Integer.parseInt(tokenizer.nextToken());\n\n\t\t// get words\n\t\tIWordID[] words = new IWordID[senseCount];\n\t\tint offset;\n\t\tfor (int i = 0; i < senseCount; i++) {\n\t\t\toffset = Integer.parseInt(tokenizer.nextToken());\n\t\t\twords[i] = new WordID(new SynsetID(offset, pos), lemma);\n\t\t}\n\n\t\tresult = new IndexWord(lemma, pos, tagSenseCnt, words);\n\t\treturn result;\n\t} catch (Exception e) {\n\t\tthrow new MisformattedLineException(line, e);\n\t} \n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\data\\parse\\IndexLineParser.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#equals(java.lang.Object)\n */\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (!(obj instanceof IIndexWord)) return false;\n    final IIndexWord other = (IndexWord) obj;\n    if (!fID.equals(other.getID())) return false;\n    if (fTagSenseCnt != other.getTagSenseCount()) return false;\n    if (!fWordIDs.equals(other.getWordIDs())) return false;\n    return true;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\IndexWord.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n * Returns the singleton instance of this class, instantiating it if\n * necessary.\n */\n", "func_signal": "public static IndexLineParser getInstance()", "code": "{\n\tif (fInstance == null) fInstance = new IndexLineParser();\n\treturn fInstance;\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\data\\parse\\IndexLineParser.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n * @throws NullPointerException if any argument is <code>null</code>\n */\n", "func_signal": "public Synset(ISynsetID id, ILexFile lexFile, boolean isAdjSat, boolean isAdjHead, String gloss, \n\t\tList<IWord> words, Map<IPointer, ? extends List<ISynsetID>> ids)", "code": "{\n\t\n\tif(id == null || lexFile == null || gloss == null) throw new NullPointerException();\n    if(isAdjSat && isAdjHead) throw new IllegalArgumentException();\n    if((isAdjSat || isAdjHead) && lexFile.getNumber() != 0) throw new IllegalArgumentException();\n    \n    fID = id;\n    fLexFile = lexFile;\n    fGloss = gloss;\n    fIsAdjSat = isAdjSat;\n    fIsAdjHead = isAdjHead;\n\n    // copy words\n    fWords = Collections.unmodifiableList(words); // takes care of null pointer in words\n\n    Set<ISynsetID> hiddenSet = null;\n    Map<IPointer, List<ISynsetID>> hiddenMap = null;\n    // fill synset map\n    if(ids != null){\n    \thiddenSet = new LinkedHashSet<ISynsetID>();\n    \thiddenMap = new HashMap<IPointer, List<ISynsetID>>(ids.size());\n    \tfor(Entry<IPointer, ? extends List<ISynsetID>> entry : ids.entrySet()){\n    \t\tif(entry.getValue() == null || entry.getValue().isEmpty()) continue;\n    \t\thiddenMap.put(entry.getKey(), Collections.unmodifiableList(new ArrayList<ISynsetID>(entry.getValue())));\n    \t\thiddenSet.addAll(entry.getValue());\n    \t}\n    }\n    allRelated = (hiddenSet != null && !hiddenSet.isEmpty()) ? Collections.unmodifiableList(new ArrayList<ISynsetID>(hiddenSet)) : Collections.<ISynsetID>emptyList();\n    synsetMap = (hiddenMap != null && !hiddenMap.isEmpty()) ? Collections.unmodifiableMap(hiddenMap) : Collections.<IPointer, List<ISynsetID>>emptyMap();\n}", "path": "03_PersonalizationServer\\Personalization\\AlterEgoServer\\src\\edu\\mit\\jwi\\item\\Synset.java", "repo_name": "nicolaasmatthijs/AlterEgo", "stars": 10, "license": "None", "language": "java", "size": 228493}
{"docstring": "/**\n * 1. Create unfiled entries\n * 2. Iterate on all the entries and remove them from the roster\n * 3. Check that the number of entries and groups is zero\n */\n", "func_signal": "public void testDeleteAllUnfiledRosterEntries()", "code": "{\n    try {\n        // Add a new roster entry\n        Roster roster = getConnection(0).getRoster();\n        roster.createEntry(getBareJID(1), \"gato11\", null);\n        roster.createEntry(getBareJID(2), \"gato12\", null);\n\n        // Wait up to 2 seconds to let the server process presence subscriptions\n        long initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 && (\n                !roster.getPresence(getBareJID(1)).isAvailable() ||\n                        !roster.getPresence(getBareJID(2)).isAvailable())) {\n            Thread.sleep(100);\n        }\n\n        Thread.sleep(200);\n\n        for (RosterEntry entry : roster.getEntries()) {\n            roster.removeEntry(entry);\n            Thread.sleep(100);\n        }\n\n        // Wait up to 2 seconds to receive roster removal notifications\n        initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000  && roster.getEntryCount() != 0) {\n            Thread.sleep(100);\n        }\n\n        assertEquals(\"Wrong number of entries in connection 0\", 0, roster.getEntryCount());\n        assertEquals(\"Wrong number of groups in connection 0\", 0, roster.getGroupCount());\n\n        assertEquals(\n            \"Wrong number of entries in connection 1\",\n            0,\n            getConnection(1).getRoster().getEntryCount());\n        assertEquals(\n            \"Wrong number of groups in connection 1\",\n            0,\n            getConnection(1).getRoster().getGroupCount());\n    }\n    catch (Exception e) {\n        fail(e.getMessage());\n    }\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Sets the current state of the provided chat. This method will send an empty bodied Message\n * packet with the state attached as a {@link org.jivesoftware.smack.packet.PacketExtension}, if\n * and only if the new chat state is different than the last state.\n *\n * @param newState the new state of the chat\n * @param chat the chat.\n * @throws org.jivesoftware.smack.XMPPException\n *          when there is an error sending the message\n *          packet.\n */\n", "func_signal": "public void setCurrentState(ChatState newState, Chat chat) throws XMPPException", "code": "{\n    if(chat == null || newState == null) {\n        throw new IllegalArgumentException(\"Arguments cannot be null.\");\n    }\n    if(!updateChatState(chat, newState)) {\n        return;\n    }\n    Message message = new Message();\n    ChatStateExtension extension = new ChatStateExtension(newState);\n    message.addExtension(extension);\n\n    chat.sendMessage(message);\n}", "path": "source\\org\\jivesoftware\\smackx\\ChatStateManager.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Tests that the server and Smack are able to handle nicknames that include\n * < > characters.\n */\n", "func_signal": "public void testNotCommonNickname() throws Exception", "code": "{\n    // Add a new roster entry\n    Roster roster = getConnection(0).getRoster();\n    roster.createEntry(getBareJID(1), \"Thiago <12001200>\", null);\n\n    Thread.sleep(500);\n\n    assertEquals(\"Created entry was never received\", 1, roster.getEntryCount());\n\n    // Create another connection for the same user of connection 0\n    ConnectionConfiguration connectionConfiguration =\n            new ConnectionConfiguration(getHost(), getPort(), getServiceName());\n    XMPPConnection conn2 = new XMPPConnection(connectionConfiguration);\n    conn2.connect();\n    conn2.login(getUsername(0), getUsername(0), \"Home\");\n\n    // Retrieve roster and verify that new contact is there and nickname is correct\n    Roster roster2 = conn2.getRoster();\n    assertEquals(\"Created entry was never received\", 1, roster2.getEntryCount());\n    RosterEntry entry = roster2.getEntry(getBareJID(1));\n    assertNotNull(\"New entry was not returned from the server\", entry);\n    assertEquals(\"Roster item name is incorrect\", \"Thiago <12001200>\", entry.getName());\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * 1. Create entries in roster groups\n * 2. Iterate on all the entries and remove them from the roster\n * 3. Check that the number of entries and groups is zero\n */\n", "func_signal": "public void testDeleteAllRosterEntries() throws Exception", "code": "{\n    // Add a new roster entry\n    Roster roster = getConnection(0).getRoster();\n    roster.createEntry(getBareJID(1), \"gato11\", new String[] { \"Friends\" });\n    roster.createEntry(getBareJID(2), \"gato12\", new String[] { \"Family\" });\n\n    // Wait up to 2 seconds to receive new roster contacts\n    long initial = System.currentTimeMillis();\n    while (System.currentTimeMillis() - initial < 2000  && roster.getEntryCount() != 2) {\n        Thread.sleep(100);\n    }\n\n    assertEquals(\"Wrong number of entries in connection 0\", 2, roster.getEntryCount());\n\n    // Wait up to 2 seconds to receive presences of the new roster contacts\n    initial = System.currentTimeMillis();\n    while (System.currentTimeMillis() - initial < 5000 &&\n            (!roster.getPresence(getBareJID(1)).isAvailable() ||\n            !roster.getPresence(getBareJID(2)).isAvailable()))\n    {\n        Thread.sleep(100);\n    }\n    assertTrue(\"Presence not received\", roster.getPresence(getBareJID(1)).isAvailable());\n    assertTrue(\"Presence not received\", roster.getPresence(getBareJID(2)).isAvailable());\n\n    for (RosterEntry entry : roster.getEntries()) {\n        roster.removeEntry(entry);\n        Thread.sleep(250);\n    }\n\n    // Wait up to 2 seconds to receive roster removal notifications\n    initial = System.currentTimeMillis();\n    while (System.currentTimeMillis() - initial < 2000  && roster.getEntryCount() != 0) {\n        Thread.sleep(100);\n    }\n\n    assertEquals(\"Wrong number of entries in connection 0\", 0, roster.getEntryCount());\n    assertEquals(\"Wrong number of groups in connection 0\", 0, roster.getGroupCount());\n\n    assertEquals(\n        \"Wrong number of entries in connection 1\",\n        0,\n        getConnection(1).getRoster().getEntryCount());\n    assertEquals(\n        \"Wrong number of groups in connection 1\",\n        0,\n        getConnection(1).getRoster().getGroupCount());\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Builds and sends the <tt>auth</tt> stanza to the server.\n * This overrides from the abstract class because the initial token\n * needed for GSSAPI is binary, and not safe to put in a string, thus\n * getAuthenticationText() cannot be used.\n *\n * @param username the username of the user being authenticated.\n * @param host     the hostname where the user account resides.\n * @param cbh      the CallbackHandler (not used with GSSAPI)\n * @throws IOException If a network error occures while authenticating.\n */\n", "func_signal": "public void authenticate(String username, String host, CallbackHandler cbh) throws IOException, XMPPException", "code": "{\n    String[] mechanisms = { getName() };\n    Map props = new HashMap();\n    props.put(Sasl.SERVER_AUTH,\"TRUE\");\n    sc = Sasl.createSaslClient(mechanisms, username, \"xmpp\", host, props, cbh);\n    authenticate();\n}", "path": "source\\org\\jivesoftware\\smack\\sasl\\SASLGSSAPIMechanism.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Returns the list of addresses that matches the specified type. Examples of address\n * type are: TO, CC, BCC, etc..\n *\n * @param type Examples of address type are: TO, CC, BCC, etc.\n * @return the list of addresses that matches the specified type.\n */\n", "func_signal": "public List getAddressesOfType(String type)", "code": "{\n    List answer = new ArrayList(addresses.size());\n    for (Iterator it = addresses.iterator(); it.hasNext();) {\n        Address address = (Address) it.next();\n        if (address.getType().equals(type)) {\n            answer.add(address);\n        }\n    }\n\n    return answer;\n}", "path": "source\\org\\jivesoftware\\smackx\\packet\\MultipleAddresses.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Clean up all the entries in the roster\n */\n", "func_signal": "private void cleanUpRoster()", "code": "{\n    for (int i=0; i<getMaxConnections(); i++) {\n        // Delete all the entries from the roster\n        Roster roster = getConnection(i).getRoster();\n        for (RosterEntry entry : roster.getEntries()) {\n            try {\n                roster.removeEntry(entry);\n            }\n            catch (XMPPException e) {\n                e.printStackTrace();\n                fail(e.getMessage());\n            }\n        }\n\n        try  {\n            Thread.sleep(700);\n        }\n        catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n    }\n    // Wait up to 6 seconds to receive roster removal notifications\n    long initial = System.currentTimeMillis();\n    while (System.currentTimeMillis() - initial < 6000 && (\n            getConnection(0).getRoster().getEntryCount() != 0 ||\n                    getConnection(1).getRoster().getEntryCount() != 0 ||\n                    getConnection(2).getRoster().getEntryCount() != 0)) {\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {}\n    }\n\n    assertEquals(\n        \"Wrong number of entries in connection 0\",\n        0,\n        getConnection(0).getRoster().getEntryCount());\n    assertEquals(\n        \"Wrong number of groups in connection 0\",\n        0,\n        getConnection(0).getRoster().getGroupCount());\n\n    assertEquals(\n        \"Wrong number of entries in connection 1\",\n        0,\n        getConnection(1).getRoster().getEntryCount());\n    assertEquals(\n        \"Wrong number of groups in connection 1\",\n        0,\n        getConnection(1).getRoster().getGroupCount());\n\n    assertEquals(\n        \"Wrong number of entries in connection 2\",\n        0,\n        getConnection(2).getRoster().getEntryCount());\n    assertEquals(\n        \"Wrong number of groups in connection 2\",\n        0,\n        getConnection(2).getRoster().getGroupCount());\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Indicate that the packet being sent should not be replied.\n */\n", "func_signal": "public void setNoReply()", "code": "{\n    // Create a new address with the specificed configuration\n    Address address = new Address(NO_REPLY);\n    // Add the new address to the list of multiple recipients\n    addresses.add(address);\n}", "path": "source\\org\\jivesoftware\\smackx\\packet\\MultipleAddresses.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Returns the ChatStateManager related to the XMPPConnection and it will create one if it does\n * not yet exist.\n *\n * @param connection the connection to return the ChatStateManager\n * @return the ChatStateManager related the the connection.\n */\n", "func_signal": "public static ChatStateManager getInstance(final XMPPConnection connection)", "code": "{\n    if(connection == null) {\n        return null;\n    }\n    synchronized (managers) {\n        ChatStateManager manager = managers.get(connection);\n        if (manager == null) {\n            manager = new ChatStateManager(connection);\n            manager.init();\n            managers.put(connection, manager);\n        }\n\n        return manager;\n    }\n}", "path": "source\\org\\jivesoftware\\smackx\\ChatStateManager.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * 1. Create an unfiled entry with no name\n * 2. Check that the the entry does not belong to any group\n * 3. Change its name and add it to a group\n * 4. Check that the name has been modified and that the entry belongs to a group\n */\n", "func_signal": "public void testChangeGroupAndNameToUnfiledEntry()", "code": "{\n    try {\n        // Add a new roster entry\n        Roster roster = getConnection(0).getRoster();\n        roster.createEntry(getBareJID(1), null, null);\n\n        Thread.sleep(500);\n\n        getConnection(1).getRoster().createEntry(getBareJID(0), null, null);\n\n        // Wait up to 5 seconds to receive presences of the new roster contacts\n        long initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 5000 &&\n                !roster.getPresence(getBareJID(0)).isAvailable()) {\n            Thread.sleep(100);\n        }\n        //assertNotNull(\"Presence not received\", roster.getPresence(getBareJID(0)));\n\n        for (RosterEntry entry : roster.getEntries()) {\n            assertFalse(\"The roster entry belongs to a group\", !entry.getGroups().isEmpty());\n        }\n\n        // Change the roster entry name and check if the change was made\n        roster.createEntry(getBareJID(1), \"NewName\", new String[] { \"Friends\" });\n\n        // Reload the roster and check the name again\n        Thread.sleep(200);\n        for (RosterEntry entry : roster.getEntries()) {\n            assertEquals(\"Name of roster entry is wrong\", \"NewName\", entry.getName());\n            assertTrue(\"The roster entry does not belong to any group\", !entry.getGroups().isEmpty());\n        }\n        // Wait up to 5 seconds to receive presences of the new roster contacts\n        initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 5000 &&\n                !roster.getPresence(getBareJID(1)).isAvailable()) {\n            Thread.sleep(100);\n        }\n        assertTrue(\"Presence not received\", roster.getPresence(getBareJID(1)).isAvailable());\n    } catch (Exception e) {\n        fail(e.getMessage());\n    }\n    finally {\n        cleanUpRoster();\n    }\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Tests the creation of a roster and then simulates abrupt termination. Cached presences\n * must go offline. At reconnection, presences must go back to online.\n * <ol>\n *     <li> Create some entries\n *     <li> Breack the connection\n *     <li> Check offline presences\n *     <li> Whait for automatic reconnection\n *     <li> Check online presences\n * </ol>\n */\n", "func_signal": "public void testOfflinePresencesAfterDisconnection() throws Exception", "code": "{\n    // Add a new roster entry\n    Roster roster = getConnection(0).getRoster();\n    roster.createEntry(getBareJID(1), \"gato11\", null);\n    roster.createEntry(getBareJID(2), \"gato12\", null);\n\n    // Wait up to 2 seconds to let the server process presence subscriptions\n    long initial = System.currentTimeMillis();\n    while (System.currentTimeMillis() - initial < 2000 && (\n            !roster.getPresence(getBareJID(1)).isAvailable() ||\n                    !roster.getPresence(getBareJID(2)).isAvailable())) {\n        Thread.sleep(100);\n    }\n\n    Thread.sleep(200);\n\n    // Break the connection\n    getConnection(0).packetReader.notifyConnectionError(new Exception(\"Simulated Error\"));\n\n    Presence presence = roster.getPresence(getBareJID(1));\n    assertFalse(\"Unavailable presence not found for offline user\", presence.isAvailable());\n    assertEquals(\"Unavailable presence not found for offline user\", Presence.Type.unavailable,\n            presence.getType());\n    // Reconnection should occur in 10 seconds\n    Thread.sleep(12200);\n    presence = roster.getPresence(getBareJID(1));\n    assertTrue(\"Presence not found for user\", presence.isAvailable());\n    assertEquals(\"Presence should be online after a connection reconnection\",\n            Presence.Type.available, presence.getType());\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Adds a new address to which the packet is going to be sent or was sent.\n *\n * @param type on of the static type (BCC, CC, NO_REPLY, REPLY_ROOM, etc.)\n * @param jid the JID address of the recipient.\n * @param node used to specify a sub-addressable unit at a particular JID, corresponding to\n *             a Service Discovery node.\n * @param desc used to specify human-readable information for this address.\n * @param delivered true when the packet was already delivered to this address.\n * @param uri used to specify an external system address, such as a sip:, sips:, or im: URI.\n */\n", "func_signal": "public void addAddress(String type, String jid, String node, String desc, boolean delivered,\n        String uri)", "code": "{\n    // Create a new address with the specificed configuration\n    Address address = new Address(type);\n    address.setJid(jid);\n    address.setNode(node);\n    address.setDescription(desc);\n    address.setDelivered(delivered);\n    address.setUri(uri);\n    // Add the new address to the list of multiple recipients\n    addresses.add(address);\n}", "path": "source\\org\\jivesoftware\\smackx\\packet\\MultipleAddresses.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * 1. Create entries in roster groups\n * 2. Iterate on the groups and remove the entry from each group\n * 3. Check that the entries are kept as unfiled entries\n */\n", "func_signal": "public void testDeleteAllRosterGroupEntries()", "code": "{\n    try {\n        // Add a new roster entry\n        Roster roster = getConnection(0).getRoster();\n        roster.createEntry(getBareJID(1), \"gato11\", new String[] { \"Friends\", \"Family\" });\n        roster.createEntry(getBareJID(2), \"gato12\", new String[] { \"Family\" });\n\n        // Wait until the server confirms the new entries\n        long initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 && (\n                !roster.getPresence(getBareJID(1)).isAvailable() ||\n                        !roster.getPresence(getBareJID(2)).isAvailable())) {\n            Thread.sleep(100);\n        }\n\n        for (RosterEntry entry : roster.getEntries()) {\n            for (RosterGroup rosterGroup : entry.getGroups()) {\n                rosterGroup.removeEntry(entry);\n            }\n        }\n        // Wait up to 2 seconds\n        initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 &&\n                (roster.getGroupCount() != 0 &&\n                getConnection(2).getRoster().getEntryCount() != 2)) {\n            Thread.sleep(100);\n        }\n\n        assertEquals(\n            \"The number of entries in connection 1 should be 1\",\n            1,\n            getConnection(1).getRoster().getEntryCount());\n        assertEquals(\n            \"The number of groups in connection 1 should be 0\",\n            0,\n            getConnection(1).getRoster().getGroupCount());\n\n        assertEquals(\n            \"The number of entries in connection 2 should be 1\",\n            1,\n            getConnection(2).getRoster().getEntryCount());\n        assertEquals(\n            \"The number of groups in connection 2 should be 0\",\n            0,\n            getConnection(2).getRoster().getGroupCount());\n\n        assertEquals(\n            \"The number of entries in connection 0 should be 2\",\n            2,\n            roster.getEntryCount());\n        assertEquals(\n            \"The number of groups in connection 0 should be 0\",\n            0,\n            roster.getGroupCount());\n    }\n    catch (Exception e) {\n        fail(e.getMessage());\n    }\n    finally {\n        cleanUpRoster();\n    }\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * User1 is connected from 2 resources. User1 adds User0 to his roster. Ensure\n * that both resources of user1 get the available presence of User0. Remove User0\n * from User1's roster and check presences again.\n */\n", "func_signal": "public void testMultipleResources() throws Exception", "code": "{\n    // Create another connection for the same user of connection 1\n    ConnectionConfiguration connectionConfiguration =\n            new ConnectionConfiguration(getHost(), getPort(), getServiceName());\n    XMPPConnection conn4 = new XMPPConnection(connectionConfiguration);\n    conn4.connect();\n    conn4.login(getUsername(1), getUsername(1), \"Home\");\n\n    // Add a new roster entry\n    Roster roster = conn4.getRoster();\n    roster.createEntry(getBareJID(0), \"gato11\", null);\n\n    // Wait up to 2 seconds\n    long initial = System.currentTimeMillis();\n    while (System.currentTimeMillis() - initial < 2000 && (\n            !roster.getPresence(getBareJID(0)).isAvailable() ||\n                    !getConnection(1).getRoster().getPresence(getBareJID(0)).isAvailable())) {\n        Thread.sleep(100);\n    }\n\n    // Check that a presence is returned for the new contact\n    Presence presence = roster.getPresence(getBareJID(0));\n    assertTrue(\"Returned a null Presence for an existing user\", presence.isAvailable());\n\n    // Check that a presence is returned for the new contact\n    presence = getConnection(1).getRoster().getPresence(getBareJID(0));\n    assertTrue(\"Returned a null Presence for an existing user\", presence.isAvailable());\n\n    // Delete user from roster\n    roster.removeEntry(roster.getEntry(getBareJID(0)));\n\n    // Wait up to 2 seconds\n    initial = System.currentTimeMillis();\n    while (System.currentTimeMillis() - initial < 2000 && (\n            roster.getPresence(getBareJID(0)).getType() != Presence.Type.unavailable ||\n                    getConnection(1).getRoster().getPresence(getBareJID(0)).getType() !=\n                            Presence.Type.unavailable)) {\n        Thread.sleep(100);\n    }\n\n    // Check that no presence is returned for the removed contact\n    presence = roster.getPresence(getBareJID(0));\n    assertFalse(\"Available presence was returned for removed contact\", presence.isAvailable());\n    assertEquals(\"Returned Presence for removed contact has incorrect type\",\n            Presence.Type.unavailable, presence.getType());\n\n    // Check that no presence is returned for the removed contact\n    presence = getConnection(1).getRoster().getPresence(getBareJID(0));\n    assertFalse(\"Available presence was returned for removed contact\", presence.isAvailable());\n    assertEquals(\"Returned Presence for removed contact has incorrect type\",\n            Presence.Type.unavailable, presence.getType());\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Returns the Action enum for a String action value.\n */\n", "func_signal": "public static JingleActionEnum getAction(String inActionCode)", "code": "{\n    for (JingleActionEnum jingleAction : JingleActionEnum.values()) {\n        if (jingleAction.actionCode.equals(inActionCode)) {\n            return jingleAction;\n        }\n    }\n    return null;\n}", "path": "jingle\\extension\\source\\org\\jivesoftware\\smackx\\jingle\\JingleActionEnum.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Builds and sends the <tt>auth</tt> stanza to the server.\n * This overrides from the abstract class because the initial token\n * needed for GSSAPI is binary, and not safe to put in a string, thus\n * getAuthenticationText() cannot be used.\n *\n * @param username the username of the user being authenticated.\n * @param host     the hostname where the user account resides.\n * @param password the password of the user (ignored for GSSAPI)\n * @throws IOException If a network error occures while authenticating.\n */\n", "func_signal": "public void authenticate(String username, String host, String password) throws IOException, XMPPException", "code": "{\n    String[] mechanisms = { getName() };\n    Map props = new HashMap();\n    props.put(Sasl.SERVER_AUTH,\"TRUE\");\n    sc = Sasl.createSaslClient(mechanisms, username, \"xmpp\", host, props, this);\n    authenticate();\n}", "path": "source\\org\\jivesoftware\\smack\\sasl\\SASLGSSAPIMechanism.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * 1. Create an unfiled entry\n * 2. Change its name\n * 3. Check that the name has been modified\n * 4. Reload the whole roster\n * 5. Check that the name has been modified\n */\n", "func_signal": "public void testChangeNameToUnfiledEntry()", "code": "{\n    try {\n        // Add a new roster entry\n        Roster roster = getConnection(0).getRoster();\n        roster.createEntry(getBareJID(1), null, null);\n\n        // Wait up to 2 seconds to let the server process presence subscriptions\n        long initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 &&\n                !roster.getPresence(getBareJID(1)).isAvailable())\n        {\n            Thread.sleep(100);\n        }\n\n        // Change the roster entry name and check if the change was made\n        for (RosterEntry entry : roster.getEntries()) {\n            entry.setName(\"gato11\");\n            assertEquals(\"gato11\", entry.getName());\n        }\n        // Reload the roster and check the name again\n        roster.reload();\n        Thread.sleep(2000);\n        for (RosterEntry entry : roster.getEntries()) {\n            assertEquals(\"gato11\", entry.getName());\n        }\n    }\n    catch (Exception e) {\n        fail(e.getMessage());\n    }\n    finally {\n        cleanUpRoster();\n    }\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Tests that adding an existing roster entry that belongs to a group to another group\n * works fine.\n */\n", "func_signal": "public void testAddEntryToNewGroup()", "code": "{\n    try {\n        Thread.sleep(500);\n\n        // Add a new roster entry\n        Roster roster = getConnection(0).getRoster();\n        roster.createEntry(getBareJID(1), \"gato11\", new String[] { \"Friends\" });\n        roster.createEntry(getBareJID(2), \"gato12\", new String[] { \"Family\" });\n\n        // Wait up to 2 seconds to receive new roster contacts\n        long initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000  && roster.getEntryCount() != 2) {\n            Thread.sleep(100);\n        }\n\n        assertEquals(\"Wrong number of entries in connection 0\", 2, roster.getEntryCount());\n\n        // Add \"gato11\" to a new group called NewGroup\n        roster.createGroup(\"NewGroup\").addEntry(roster.getEntry(getBareJID(1)));\n\n\n        // Log in from another resource so we can test the roster\n        XMPPConnection con2 = createConnection();\n        con2.connect();\n        con2.login(getUsername(0), getUsername(0), \"MyNewResource\");\n\n        Roster roster2 = con2.getRoster();\n\n        assertEquals(\"Wrong number of entries in new connection\", 2, roster2.getEntryCount());\n        assertEquals(\"Wrong number of groups in new connection\", 3, roster2.getGroupCount());\n\n\n        RosterEntry entry = roster2.getEntry(getBareJID(1));\n        assertNotNull(\"No entry for user 1 was found\", entry);\n\n        List<String> groupNames = new ArrayList<String>();\n        for (RosterGroup rosterGroup : entry.getGroups()) {\n            groupNames.add(rosterGroup.getName());\n        }\n        assertTrue(\"Friends group was not found\", groupNames.contains(\"Friends\"));\n        assertTrue(\"NewGroup group was not found\", groupNames.contains(\"NewGroup\"));\n\n        // Close the new connection\n        con2.disconnect();\n        Thread.sleep(500);\n    }\n    catch (Exception e) {\n        fail(e.getMessage());\n    }\n    finally {\n        cleanUpRoster();\n    }\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Test presence management.<p>\n * \n * 1. Log in user0 from a client and user1 from 2 clients\n * 2. Create presence subscription of type BOTH between 2 users\n * 3. Check that presence is correctly delivered to both users\n * 4. User1 logs out from a client\n * 5. Check that presence for each connected resource is correct\n */\n", "func_signal": "public void testRosterPresences() throws Exception", "code": "{\n    Thread.sleep(200);\n    try {\n        Presence presence;\n\n        // Create another connection for the same user of connection 1\n        ConnectionConfiguration connectionConfiguration =\n                new ConnectionConfiguration(getHost(), getPort(), getServiceName());\n        XMPPConnection conn4 = new XMPPConnection(connectionConfiguration);\n        conn4.connect();\n        conn4.login(getUsername(1), getUsername(1), \"Home\");\n\n        // Add a new roster entry\n        Roster roster = getConnection(0).getRoster();\n        roster.createEntry(getBareJID(1), \"gato11\", null);\n\n        // Wait up to 2 seconds\n        long initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 &&\n                (roster.getPresence(getBareJID(1)).getType() == Presence.Type.unavailable)) {\n            Thread.sleep(100);\n        }\n\n        // Check that a presence is returned for a user\n        presence = roster.getPresence(getBareJID(1));\n        assertTrue(\"Returned a null Presence for an existing user\", presence.isAvailable());\n\n        // Check that the right presence is returned for a user+resource\n        presence = roster.getPresenceResource(getUsername(1) + \"@\" + conn4.getServiceName() + \"/Home\");\n        assertEquals(\"Returned the wrong Presence\", \"Home\",\n                StringUtils.parseResource(presence.getFrom()));\n\n        // Check that the right presence is returned for a user+resource\n        presence = roster.getPresenceResource(getFullJID(1));\n        assertTrue(\"Presence not found for user \" + getFullJID(1), presence.isAvailable());\n        assertEquals(\"Returned the wrong Presence\", \"Smack\",\n                StringUtils.parseResource(presence.getFrom()));\n\n        // Check the returned presence for a non-existent user+resource\n        presence = roster.getPresenceResource(\"noname@\" + getServiceName() + \"/Smack\");\n        assertFalse(\"Available presence was returned for a non-existing user\", presence.isAvailable());\n        assertEquals(\"Returned Presence for a non-existing user has the incorrect type\",\n                Presence.Type.unavailable, presence.getType());\n\n        // Check that the returned presences are correct\n        Iterator<Presence> presences = roster.getPresences(getBareJID(1));\n        int count = 0;\n        while (presences.hasNext()) {\n            count++;\n            presences.next();\n        }\n        assertEquals(\"Wrong number of returned presences\", count, 2);\n\n        // Close the connection so one presence must go\n        conn4.disconnect();\n\n        // Check that the returned presences are correct\n        presences = roster.getPresences(getBareJID(1));\n        count = 0;\n        while (presences.hasNext()) {\n            count++;\n            presences.next();\n        }\n        assertEquals(\"Wrong number of returned presences\", count, 1);\n\n        Thread.sleep(200);\n    }\n    finally {\n        cleanUpRoster();\n    }\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "/**\n * Test if renaming a roster group works fine.\n *\n */\n", "func_signal": "public void testRenameRosterGroup()", "code": "{\n    try {\n        Thread.sleep(200);\n\n        // Add a new roster entry\n        Roster roster = getConnection(0).getRoster();\n        roster.createEntry(getBareJID(1), \"gato11\", new String[] { \"Friends\" });\n        roster.createEntry(getBareJID(2), \"gato12\", new String[] { \"Friends\" });\n\n        // Wait up to 2 seconds to let the server process presence subscriptions\n        long initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 && (\n                !roster.getPresence(getBareJID(1)).isAvailable() ||\n                        !roster.getPresence(getBareJID(2)).isAvailable())) {\n            Thread.sleep(100);\n        }\n\n        roster.getGroup(\"Friends\").setName(\"Amigos\");\n\n        // Wait up to 2 seconds\n        initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 &&\n                (roster.getGroup(\"Friends\") != null)) {\n            Thread.sleep(100);\n        }\n\n        assertNull(\"The group Friends still exists\", roster.getGroup(\"Friends\"));\n        assertNotNull(\"The group Amigos does not exist\", roster.getGroup(\"Amigos\"));\n        assertEquals(\n            \"Wrong number of entries in the group Amigos\",\n            2,\n            roster.getGroup(\"Amigos\").getEntryCount());\n\n        // Setting the name to empty is like removing this group\n        roster.getGroup(\"Amigos\").setName(\"\");\n\n        // Wait up to 2 seconds for the group to change its name\n        initial = System.currentTimeMillis();\n        while (System.currentTimeMillis() - initial < 2000 &&\n                (roster.getGroup(\"Amigos\") != null)) {\n            Thread.sleep(100);\n        }\n\n        assertNull(\"The group Amigos still exists\", roster.getGroup(\"Amigos\"));\n        assertNotNull(\"The group with no name does not exist\", roster.getGroup(\"\"));\n        assertEquals(\n            \"Wrong number of entries in the group with no name\",\n            2,\n            roster.getGroup(\"\").getEntryCount());\n\n        /*assertEquals(\"There are still groups in the roster\", 0, roster.getGroupCount());\n        assertEquals(\n            \"Wrong number of entries in the group \\\"\\\" \",\n            2,\n            roster.getUnfiledEntryCount());*/\n\n\n        Thread.sleep(200);\n    }\n    catch (Exception e) {\n        fail(e.getMessage());\n    }\n    finally {\n        cleanUpRoster();    \n    }\n}", "path": "test\\org\\jivesoftware\\smack\\RosterTest.java", "repo_name": "jadahl/smack-linklocal", "stars": 11, "license": "None", "language": "java", "size": 4873}
{"docstring": "// Virtual Keyboard input\n", "func_signal": "public void onKey(int primaryCode, int[] keyCodes)", "code": "{\n\tif (primaryCode == KBManager.KEYCODE_NEXT_IME)\n\t{\n\t\t_currentMode = InputMode.MODE_IME;\n\t\trequestNextInputMethod();\n\t}\n\telse if (primaryCode == KBManager.KEYCODE_DO_OUTPUT_CHARS)\n\t\treturn; // Let IME onText listener handle it.\n\telse if (_currentMode != InputMode.MODE_IME || (_currentMethod != null && !_currentMethod.wantHandleEvent(primaryCode)))\n\t{\n\t\t// If the IME does not want the event, we assume it's an plain-English keyboard.\n\t\tswitch(primaryCode) {\n\t\tcase Keyboard.KEYCODE_SHIFT: // Shift Key\n\t\t\tif (_currentMode == InputMode.MODE_IME)\n\t\t\t\t_currentMethod.commitCurrentComposingBuffer();\n\n\t\t\tBoolean isShifted = !_kbm.getCurrentKeyboard().isShifted();\n\t\t\t_kbm.getCurrentKeyboard().setShifted(isShifted);\n\t\t\tKeyboardView kv = _kbm.getCurrentKeyboardView();\n\t\t\tkv.setShifted(isShifted);\n\t\t\t\n\t\t\t// Dirty Hack :( Force KeyboardView wipe out its buffer...\n\t\t\tkv.onSizeChanged(kv.getWidth(), kv.getHeight(), 0, 0);\n\t\t\tbreak;\n\t\tcase KBManager.KEYCODE_SYM: // 123 Keyboard\n\t\t\tif (_currentMode == InputMode.MODE_IME)\n\t\t\t\t_currentMethod.commitCurrentComposingBuffer();\n\n\t\t\t_currentMode = InputMode.MODE_SYM;\n\t\t\t_kbm.setNativeKeyboard(NativeKeyboardTypes.MODE_SYM);\n\t\t\tpostShowPopup(\"123\");\n\t\t\thideCandidatesView();\n\t\t\t\n\t\t\tbreak;\n\t\tcase KBManager.KEYCODE_SYM_ALT: // 123 Keyboard\n\t\t\tif (_currentMode == InputMode.MODE_IME)\n\t\t\t\t_currentMethod.commitCurrentComposingBuffer();\n\n\t\t\t_currentMode = InputMode.MODE_SYM_ALT;\n\t\t\t_kbm.setNativeKeyboard(NativeKeyboardTypes.MODE_SYM_ALT);\n\t\t\tpostShowPopup(\"#+=\");\n\t\t\thideCandidatesView();\n\t\t\tbreak;\n\t\tcase KBManager.KEYCODE_ABC: // ABC Keyboard\n\t\t\tif (_currentMode == InputMode.MODE_IME)\n\t\t\t\t_currentMethod.commitCurrentComposingBuffer();\n\n\t\t\t_currentMode = InputMode.MODE_ABC;\n\t\t\t_kbm.setNativeKeyboard(NativeKeyboardTypes.MODE_ABC);\n\t\t\tpostShowPopup(\"ABC\");\n\t\t\thideCandidatesView();\n\t\t\tbreak;\n\t\tcase KBManager.KEYCODE_IME: // IME Keyboard\n\t\t\t_currentMode = InputMode.MODE_IME;\n\t\t\t//showCandidatesView();\n\t\t\tif (_currentMethod == null)\n\t\t\t\trequestNextInputMethod();\n\t\t\t_currentMethod.onEnterInputMethod();\n\t\t\t_kbm.setNativeKeyboard(NativeKeyboardTypes.MODE_IME);\n\t\t\tpostShowPopup(_currentMethod.getName());\n\t\t\tbreak;\n\t\tcase KBManager.KEYCODE_IME_MENU:\n\t\t\tString[] imeNames = new String [_methods.size()];\n\t\t\tint i=0;\n\t\t\tfor(IKerKerInputMethod method : _methods)\n\t\t\t\timeNames[i++] = method.getName();\n\t\t\tfinal PopupWindow win = new PopupWindow(_frontEnd);\n\t\t\twin.setBackgroundDrawable(new ColorDrawable(Color.argb(220, 0, 0, 0)));\n\t\t\twin.setWindowLayoutMode(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n\t\t\twin.setContentView(getInflater().inflate(R.layout.method_chooser, null));\n\t        final ListView lstIME = (ListView) win.getContentView().findViewById(R.id.lstIME);\n\t        lstIME.setAdapter(new ArrayAdapter<String>(_frontEnd, android.R.layout.simple_list_item_1, imeNames));\n\t        win.setWidth(320);\n\t        win.setHeight(_kbm.getCurrentKeyboardView().getHeight());\n\t        win.setOutsideTouchable(false);\n\t        win.setTouchable(true);\n\t        win.setTouchInterceptor(new OnTouchListener() {\n\t        \tprivate boolean detectedMove = false;\n\t        \tprivate float lastX, lastY;\n\t        \t\n\t\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\t\t\tif (event.getAction() == MotionEvent.ACTION_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (detectedMove)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdetectedMove = false;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tevent.offsetLocation(-lstIME.getLeft(), -lstIME.getTop());\n\t\t\t\t\t\tLog.i(\"PopupWindow\", \"IME selected!\");\n\t\t\t\t\t\tint pos = lstIME.pointToPosition((int)event.getX(), (int)event.getY());\n\t\t\t\t\t\tif (pos > ListView.INVALID_POSITION)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_currentMode = InputMode.MODE_IME;\n\t\t\t\t\t\t\tsetCurrentInputMethod(_methods.get(pos));\n\t\t\t\t\t\t\twin.dismiss();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (event.getAction() == MotionEvent.ACTION_MOVE && Math.abs(lastX - event.getX()) > 5 && Math.abs(lastY - event.getY()) > 5)\n\t\t\t\t\t\tdetectedMove = true;\n\t\t\t\t\telse if (event.getAction() == MotionEvent.ACTION_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastX = event.getX();\n\t\t\t\t\t\tlastY = event.getY();\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\twin.showAtLocation(_kbm.getCurrentKeyboardView(), Gravity.BOTTOM, 0, 0);\n\t\t\tlstIME.requestFocusFromTouch();\n\t\t\tbreak;\n\t\tcase Keyboard.KEYCODE_DELETE:\n\t\t\tgetFrontend().sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);\n\t\t\tfor(IKerKerInputFilter f : _filters)\n\t\t\t\tf.onDelete();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (getKeyboardManager().getCurrentKeyboard().isShifted())\n\t\t\t\tsendKeyChar(Character.toUpperCase((char) primaryCode));\n\t\t\telse\n\t\t\t\tsendKeyChar((char) primaryCode);\n\t\t\tbreak;\n\t\t}\n\t}\n\telse\n\t\tif (_currentMethod != null) _currentMethod.onKeyEvent(primaryCode, keyCodes);\n\t\n\t// User feedbacks\n\tif (shouldMakeNoise)\n\t{\n\t\tswitch(primaryCode)\n\t\t{\n\t\tcase '\\n':\n\t\t\tplayAudioResource(R.raw.returndown);\n\t\t\tplayAudioResource(R.raw.returnup);\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\tplayAudioResource(R.raw.spacedown);\n\t\t\tplayAudioResource(R.raw.spaceup);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tplayAudioResource(R.raw.keydown);\n\t\t\tplayAudioResource(R.raw.keyup);\n\t\t}\n\t}\n\t\n\tif (shouldVibrate)\n\t\t((Vibrator)getFrontend().getSystemService(Context.VIBRATOR_SERVICE)).vibrate(50);\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Handling when input method lost focus\n */\n", "func_signal": "public void onLostFocus()", "code": "{\n\t_core.clearCandidates();\n\t_core.hideCandidatesView();\n}", "path": "src\\idv\\Zero\\KerKerInput\\IKerKerInputMethod.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Create SoundPool if activate this function, or release all sound resources\n * \n * @param shouldMakeNoise\n */\n", "func_signal": "public void setShouldMakeNoise(Boolean shouldMakeNoise)", "code": "{\n\tthis.shouldMakeNoise = shouldMakeNoise;\n\t\n\tif (shouldMakeNoise)\n\t{\n\t\tsndPool = new SoundPool(6, AudioManager.STREAM_RING, 0);\n\t\tsndPoolMap = null;\n\t}\n\telse\n\t{\n\t\tif (sndPool != null)\n\t\t\tsndPool.release();\n\t\tsndPool = null;\n\t\t\n\t\tsndPoolMap = null;\n\t}\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * \n * @see EditorInfo#imeOptions\n * @param inputType\n */\n", "func_signal": "public void setImeOptions(int inputType)", "code": "{\n\timeOptions = inputType;\n\tapplyIMEOptions();\n}", "path": "src\\idv\\Zero\\KerKerInput\\KBManager.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Handle KeyDown event from physical Keyboard input.\n * Judging the pressed key and Choosing the solution. \n * \n * @param keyCode Unicode character of Key\n * @param e KeyEvent of the pressed key.  \n * @return <code>true</code> Finish operation.\n * \t\t   <code>false</code> Let system to handle the rest part.  \n */\n", "func_signal": "public boolean onKeyDown(int keyCode, KeyEvent e)", "code": "{\n\t// Allow user to user BACK key to hide SIP\n\tif (e.getKeyCode() == KeyEvent.KEYCODE_BACK || e.getKeyCode() == KeyEvent.KEYCODE_SEARCH || e.getKeyCode() == KeyEvent.KEYCODE_MENU ||\n\t\t\te.getKeyCode() == KeyEvent.KEYCODE_DPAD_DOWN && e.getKeyCode() == KeyEvent.KEYCODE_DPAD_UP && e.getKeyCode() == KeyEvent.KEYCODE_DPAD_LEFT && e.getKeyCode() == KeyEvent.KEYCODE_DPAD_RIGHT)\n\t\treturn false;\n\t\n\tif (e.getKeyCode() == KeyEvent.KEYCODE_ALT_LEFT)\n\t{\n\t\tif (_currentMode == InputMode.MODE_IME)\n\t\t{\n\t\t\t_currentMethod.commitCurrentComposingBuffer();\n\t\t\t_currentMode = InputMode.MODE_ABC;\n\t\t\tpostShowPopup(\"\u82f1\u6578\u9375\u76e4\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_currentMode = InputMode.MODE_IME;\n\t\t\tif (_currentMethod == null)\n\t\t\t\trequestNextInputMethod();\n\t\t\t_currentMethod.onEnterInputMethod();\n\t\t\tpostShowPopup(_currentMethod.getName());\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tif (_currentMode == InputMode.MODE_IME && _currentMethod != null && _currentMethod.wantHandleEvent(e.getKeyCode()))\n\t\treturn _currentMethod.onKeyEvent(keyCode, new int[]{keyCode});\n\t\n\treturn false;\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Change Keyboard Mode and update Keyboard\n * @param kbmode \n */\n", "func_signal": "public void setKeyboardMode(int kbmode)", "code": "{\n\t_kbMode = kbmode;\n\tsetNativeKeyboard(_currentKBType);\n}", "path": "src\\idv\\Zero\\KerKerInput\\KBManager.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Fix the different keyChar between different brands by the keyCode defined in KBManager.\n * \n * @param e KeyEvent\n * @return the unicode character from KeyEvent e would produce\n */\n", "func_signal": "private int generateVKBCode(KeyEvent e)", "code": "{\n\tif (e.getKeyCode() == KeyEvent.KEYCODE_DEL)\n\t\treturn -5;\n\telse if (e.getKeyCode() == KeyEvent.KEYCODE_DPAD_UP)\n\t\treturn KBManager.KEYCODE_DPAD_UP;\n\telse if (e.getKeyCode() == KeyEvent.KEYCODE_DPAD_DOWN)\n\t\treturn KBManager.KEYCODE_DPAD_DOWN;\n\telse if (e.getKeyCode() == KeyEvent.KEYCODE_DPAD_LEFT)\n\t\treturn KBManager.KEYCODE_DPAD_LEFT;\n\telse if (e.getKeyCode() == KeyEvent.KEYCODE_DPAD_RIGHT)\n\t\treturn KBManager.KEYCODE_DPAD_RIGHT;\n\t\n\treturn e.getUnicodeChar();\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputService.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * This method will change current input method to what you give.\n * And it will initialize all thing about input method.\n * \n * @param method the method which you want to set up\n */\n", "func_signal": "public void setCurrentInputMethod(IKerKerInputMethod method)", "code": "{\n\tif (_currentMethod != null)\n\t\t_currentMethod.onLeaveInputMethod();\n\t\n\tLog.i(\"KerKerInputCore\", \"setCurrentInputMethod = \" + method);\n\t_currentMethod = method;\n\t_currentMethod.initInputMethod(this);\n\tif (!_currentMethod.hasCustomInputView())\n\t\tgetFrontend().restoreKerKerKeyboardView();\n\telse\n\t\tgetFrontend().setInputView(_currentMethod.onCreateInputView());\n\t_currentMethod.onEnterInputMethod();\n\t_kbm.setCurrentKeyboard(_currentMethod.getDesiredKeyboard());\n\tpostShowPopup(_currentMethod.getName());\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/* IME entry point and some metadata accessors */\n", "func_signal": "public CINBasedInput(String imeIdentifier, String dbPath)", "code": "{\n\t_strIMEIdentifier = imeIdentifier;\n\tif (dbPath != null)\n\t\t_dbPath = dbPath;\n}", "path": "src\\idv\\Zero\\KerKerInput\\Methods\\CINBasedInput.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Play Audio by the ID of resource. Initialize Audio resource if it didn't exist.\n * \n * @param resourceID the audio resource id to play\n */\n", "func_signal": "private void playAudioResource(final int resourceID)", "code": "{\n\tif (sndPool == null || sndPoolMap == null)\n\t\tinitSounds();\n\t\n\tint volume = ((AudioManager)getFrontend().getSystemService(Context.AUDIO_SERVICE)).getStreamVolume(AudioManager.STREAM_RING);\n\tInteger rid = sndPoolMap.get(resourceID);\n\tif (rid != null)\n\t\tsndPool.play(rid, volume, volume, 1, 0, 1f);\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * set current KeyboardView to a new one\n * \n * @param kv the KeyboardView to set\n */\n", "func_signal": "public void setKeyboardView(KeyboardView kv)", "code": "{\n\tLog.i(\"KBManager\", \"setKeyboardView = \" + kv);\n\t_currentKBView = kv;\n\treturn;\n}", "path": "src\\idv\\Zero\\KerKerInput\\KBManager.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Given string will run through filter to decide\n * its result(like expending or being deleted) \n * \n * @param str the string to filter \n * @return the string after filtering\n */\n", "func_signal": "private String runThroughFilters(String str)", "code": "{\n\tfor(IKerKerInputFilter filter : _filters)\n\t{\n\t\tstr = filter.onTextCommit(str.toString());\n\t\tif (str == null || str.toString().equalsIgnoreCase(\"\"))\n\t\t\treturn \"\";\n\t}\n\treturn str;\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * @see PopupWindow#dismiss() \n */\n", "func_signal": "private void hidePopup()", "code": "{\n\ttry\n\t{\n\t\t_winMsg.dismiss();\n\t}\n\tcatch(Exception e)\n\t{}\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Re-create popup window if _winMsg is null. Then,\n * change its contents to the message to notify users,\n * and hide it after one second.\n *\n * @param msg the string to display\n */\n", "func_signal": "public void showPopup(final CharSequence msg)", "code": "{\n\tif (!_frontEnd.isInputViewShown() && !_candidatesShown)\n\t\treturn;\n\t\n\tif (_winMsg == null)\n\t{\n\t\tLog.i(\"KerKerInputCore\", \"Re-create popup window\");\n\t\t_winMsg = new PopupWindow(_frontEnd);\n\t\t_winMsg.setWindowLayoutMode(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n\t\t_winMsg.setBackgroundDrawable(null);\n\t\t_txtvMsg = (TextView) getInflater().inflate(R.layout.candidates_preview, null);\n\t\t_winMsg.setContentView(_txtvMsg);\n\t}\n\n\ttry\n\t{\n\t\tView baseView = (_frontEnd.isInputViewShown() ? _kbm.getCurrentKeyboardView() : _candidatesContainer);\n\t\t\n    \t_txtvMsg.setText(msg);\n    \t_txtvMsg.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));\n    \tint wordWidth = (int)(_pntText.measureText(msg.toString()));\n    \tint popupWidth = wordWidth + _txtvMsg.getPaddingLeft() + _txtvMsg.getPaddingRight();\n    \tint popupHeight = _txtvMsg.getMeasuredHeight();\n    \tint popupX = (baseView.getWidth() - popupWidth) / 2;\n    \tint popupY = -popupHeight;\n    \t\n    \tint[] offset = new int[2];\n    \tbaseView.getLocationInWindow(offset);\n    \tpopupY += offset[1];\n    \t\n    \tif (_winMsg.isShowing())\n    \t\t_winMsg.update(popupX, popupY, popupWidth, popupHeight);\n    \telse\n    \t{\n    \t\t_winMsg.setWidth(popupWidth);\n    \t\t_winMsg.setHeight(popupHeight);\n    \t\t_winMsg.showAtLocation(baseView, Gravity.NO_GRAVITY, popupX, popupY);\n    \t}\n    \t_txtvMsg.setVisibility(View.VISIBLE);\n    \t\n    \t_handler.postDelayed(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tif (_txtvMsg.getText() == msg.toString())\n\t\t\t\t\t\thidePopup();\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch(Exception ex)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n    \t}, 1000);\n\t}\n\tcatch(Exception e)\n\t{\n\t\te.printStackTrace();\n\t\tLog.e(\"KerKerInputCore\", \"Show popup failed, force reset popup window.\");\n\t\t_winMsg = null;\n\t\t_txtvMsg = null;\n\t}\n    }", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Change current input method to next one.\n * If there are no input method loaded, it will change to first one.\n */\n", "func_signal": "public void requestNextInputMethod()", "code": "{\n\tif (_currentMethod == null)\n\t{\n\t\tsetCurrentInputMethod(_methods.get(0));\n\t}\n\telse\n\t{\n\t\tint curIndex = _methods.indexOf(_currentMethod);\n\t\t\n\t\twhile(true)\n\t\t{\t\n\t\t\tif (_methods.size() <= curIndex + 1)\n\t\t\t\tcurIndex = 0;\n\t\t\telse\n\t\t\t\tcurIndex++;\n\t\t\t\n\t\t\tif (_methods.get(curIndex).shouldAvailableForSwitchingButton())\n\t\t\t{\n\t\t\t\tsetCurrentInputMethod(_methods.get(curIndex));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Hide & Clear CandidatesView\n */\n", "func_signal": "public void hideCandidatesView()", "code": "{\n\tif (_currentMode != InputMode.MODE_IME)\n\t{\n\t\t_frontEnd.setCandidatesViewShown(false);\n\t\t_candidatesShown = false;\n\t}\n\t\n\tif (_candidatesContainer != null)\n\t\tclearCandidates();\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Commit text to screen through filters\n * @param str\n */\n", "func_signal": "public void commitText(CharSequence str)", "code": "{\n\t\tstr = runThroughFilters(str.toString());\n\t\thideCandidatesView();\n\t\tif (str.toString().equalsIgnoreCase(\"\"))\n\t\t{\n\t\t\tsetCompositeBuffer(\"\");\n\t\t\treturn;\n\t\t}\n\t\tgetConnection().commitText(str, 1);\n\t}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Judging the sent charcode and Calling proper method \n * \n * @param charCode The Unicode character to send\n */\n", "func_signal": "public void sendKeyChar(char charCode)", "code": "{\n\tswitch (charCode) {\n    case '\\n':\n    \tgetFrontend().sendKeyChar(charCode);\n        break;\n    default:\n        if (charCode >= '0' && charCode <= '9')\n        {\n        \tgetFrontend().sendKeyChar(charCode);\n        \trunThroughFilters(Character.valueOf(charCode).toString());\n        }\n        else\n        \tcommitText(Character.valueOf(charCode).toString());\n        break;\n    }\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n *  current KeyboardView and reset a new one. \n */\n", "func_signal": "public void resetKeyboard()", "code": "{\n\t_currentKB = null;\n\tgetCurrentKeyboard();\n}", "path": "src\\idv\\Zero\\KerKerInput\\KBManager.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Shows a short-time popup window to notify users the name of IME\n * @see #showPopup\n * @param imeName the name of IME\n */\n", "func_signal": "public void postShowPopup(final String imeName)", "code": "{\n\t_handler.postDelayed(new Runnable(){\n\t\tpublic void run() {\n\t\t\ttry{\n\t\t\t\tshowPopup(imeName);\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}, 1000);\n}", "path": "src\\idv\\Zero\\KerKerInput\\KerKerInputCore.java", "repo_name": "itszero/KerKerInput", "stars": 12, "license": "None", "language": "java", "size": 6314}
{"docstring": "/**\n * Get an optional string associated with a key.\n * It returns the defaultValue if there is no such key.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      A string which is the value.\n */\n", "func_signal": "public String optString(String key, String defaultValue)", "code": "{\n    Object o = opt(key);\n    return o != null ? o.toString() : defaultValue;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Put a key/int pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value An int which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, int value) throws JSONException", "code": "{\n    put(key, new Integer(value));\n    return this;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Put a key/value pair in the JSONObject. If the value is null,\n * then the key will be removed from the JSONObject if it is present.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is non-finite number\n *  or if the key is null.\n */\n", "func_signal": "public JSONObject put(String key, Object value) throws JSONException", "code": "{\n    if (key == null) {\n        throw new JSONException(\"Null key.\");\n    }\n    if (value != null) {\n        testValidity(value);\n        this.myHashMap.put(key, value);\n    } else {\n        remove(key);\n    }\n    return this;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, where the value will be a\n * JSONObject which is produced from a Map.\n * @param key \tA key string.\n * @param value\tA Map value.\n * @return\t\tthis.\n * @throws JSONException\n */\n", "func_signal": "public JSONObject put(String key, Hashtable value) throws JSONException", "code": "{\n    put(key, new JSONObject(value));\n    return this;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Replace special characters with XML escapes:\n * <pre>\n * &amp; <small>(ampersand)</small> is replaced by &amp;amp;\n * &lt; <small>(less than)</small> is replaced by &amp;lt;\n * &gt; <small>(greater than)</small> is replaced by &amp;gt;\n * &quot; <small>(double quote)</small> is replaced by &amp;quot;\n * </pre>\n * @param string The string to be escaped.\n * @return The escaped string.\n */\n", "func_signal": "public static String escape(String string)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0, len = string.length(); i < len; i++) {\n        char c = string.charAt(i);\n        switch (c) {\n        case '&':\n            sb.append(\"&amp;\");\n            break;\n        case '<':\n            sb.append(\"&lt;\");\n            break;\n        case '>':\n            sb.append(\"&gt;\");\n            break;\n        case '\"':\n            sb.append(\"&quot;\");\n            break;\n        default:\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}", "path": "src\\org\\json\\me\\util\\XML.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Append values to the array under a key. If the key does not exist in the\n * JSONObject, then the key is put in the JSONObject with its value being a\n * JSONArray containing the value parameter. If the key was already\n * associated with a JSONArray, then the value parameter is appended to it.\n * @param key   A key string.\n * @param value An object to be accumulated under the key.\n * @return this.\n * @throws JSONException If the key is null or if the current value \n * \tassociated with the key is not a JSONArray.\n */\n", "func_signal": "public JSONObject append(String key, Object value)\n        throws JSONException", "code": "{\n    testValidity(value);\n    Object o = opt(key);\n    if (o == null) {\n        put(key, new JSONArray().put(value));\n    } else if (o instanceof JSONArray) {\n        throw new JSONException(\"JSONObject[\" + key + \n        \t\t\"] is not a JSONArray.\");\n    } else {\n        put(key, new JSONArray().put(o).put(value));\n    }\n    return this;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, but only if the\n * key and the value are both non-null.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is a non-finite number.\n */\n", "func_signal": "public JSONObject putOpt(String key, Object value) throws JSONException", "code": "{\n    if (key != null && value != null) {\n        put(key, value);\n    }\n    return this;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Get the boolean value associated with a key.\n *\n * @param key   A key string.\n * @return      The truth.\n * @throws   JSONException\n *  if the value is not a Boolean or the String \"true\" or \"false\".\n */\n", "func_signal": "public boolean getBoolean(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o.equals(Boolean.FALSE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (o.equals(Boolean.TRUE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a Boolean.\");\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Shave off trailing zeros and decimal point, if possible.\n */\n", "func_signal": "static public String trimNumber(String s)", "code": "{\n    if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {\n        while (s.endsWith(\"0\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n        if (s.endsWith(\".\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n    }\n    return s;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Get the long value associated with a key. If the number value is too\n * long for a long, it will be clipped.\n *\n * @param key   A key string.\n * @return      The long value.\n * @throws   JSONException if the key is not found or if the value cannot\n *  be converted to a long.\n */\n", "func_signal": "public long getLong(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o instanceof Byte) {\n        return ((Byte)o).byteValue();\n    } else if (o instanceof Short) {\n        return ((Short)o).shortValue();\n    } else if (o instanceof Integer) {\n        return ((Integer)o).intValue();\n    } else if (o instanceof Long) {\n        return ((Long)o).longValue();\n    } else if (o instanceof Float) {\n        return (long) ((Float)o).floatValue();\n    } else if (o instanceof Double) {\n        return (long) ((Double)o).doubleValue();\n    } else if (o instanceof String) {\n        return (long) getDouble(key);\n    } \n    throw new JSONException(\"JSONObject[\" + quote(key) +\n        \"] is not a number.\");\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Get the JSONObject value associated with a key.\n *\n * @param key   A key string.\n * @return      A JSONObject which is the value.\n * @throws   JSONException if the key is not found or\n *  if the value is not a JSONObject.\n */\n", "func_signal": "public JSONObject getJSONObject(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o instanceof JSONObject) {\n        return (JSONObject)o;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a JSONObject.\");\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Put a key/double pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A double which is the value.\n * @return this.\n * @throws JSONException If the key is null or if the number is invalid.\n */\n", "func_signal": "public JSONObject put(String key, double value) throws JSONException", "code": "{\n    put(key, new Double(value));\n    return this;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Get an optional double associated with a key, or the\n * defaultValue if there is no such key or if its value is not a number.\n * If the value is a string, an attempt will be made to evaluate it as\n * a number.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      An object which is the value.\n */\n", "func_signal": "public double optDouble(String key, double defaultValue)", "code": "{\n    try {\n        Object o = opt(key);\n        return Double.parseDouble((String)o);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Produce a JSONArray containing the values of the members of this\n * JSONObject.\n * @param names A JSONArray containing a list of key strings. This\n * determines the sequence of the values in the result.\n * @return A JSONArray of values.\n * @throws JSONException If any of the values are non-finite numbers.\n */\n", "func_signal": "public JSONArray toJSONArray(JSONArray names) throws JSONException", "code": "{\n    if (names == null || names.length() == 0) {\n        return null;\n    }\n    JSONArray ja = new JSONArray();\n    for (int i = 0; i < names.length(); i += 1) {\n        ja.put(this.opt(names.getString(i)));\n    }\n    return ja;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Construct a JSONObject from a subset of another JSONObject.\n * An array of strings is used to identify the keys that should be copied.\n * Missing keys are ignored.\n * @param jo A JSONObject.\n * @param sa An array of strings.\n * @exception JSONException If a value is a non-finite number.\n */\n", "func_signal": "public JSONObject(JSONObject jo, String[] sa) throws JSONException", "code": "{\n    this();\n    for (int i = 0; i < sa.length; i += 1) {\n        putOpt(sa[i], jo.opt(sa[i]));\n    }\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Put a key/long pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A long which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, long value) throws JSONException", "code": "{\n    put(key, new Long(value));\n    return this;\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Get the double value associated with a key.\n * @param key   A key string.\n * @return      The numeric value.\n * @throws JSONException if the key is not found or\n *  if the value is not a Number object and cannot be converted to a number.\n */\n", "func_signal": "public double getDouble(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o instanceof Byte) {\n        return (double) ((Byte)o).byteValue();\n    } else if (o instanceof Short) {\n        return (double) ((Short)o).shortValue();\n    } else if (o instanceof Integer) {\n        return (double) ((Integer)o).intValue();\n    } else if (o instanceof Long) {\n        return (double) ((Long)o).longValue();\n    } else if (o instanceof Float) {\n        return (double) ((Float)o).floatValue();\n    } else if (o instanceof Double) {\n        return ((Double)o).doubleValue();\n    } else if (o instanceof String) {\n        try {\n            return Double.valueOf((String)o).doubleValue();\n        } catch (Exception e) {\n            throw new JSONException(\"JSONObject[\" + quote(key) +\n                \"] is not a number.\");\n        }\n    } \n    throw new JSONException(\"JSONObject[\" + quote(key) +\n        \"] is not a number.\");\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Convert a JSONObject into a well-formed, element-normal XML string.\n * @param o A JSONObject.\n * @param tagName The optional name of the enclosing tag.\n * @return A string.\n * @throws JSONException\n */\n", "func_signal": "public static String toString(Object o, String tagName)\n        throws JSONException", "code": "{\n    StringBuffer b = new StringBuffer();\n    int          i;\n    JSONArray    ja;\n    JSONObject   jo;\n    String       k;\n    Enumeration  keys;\n    int          len;\n    String       s;\n    Object       v;\n    if (o instanceof JSONObject) {\n\n// Emit <tagName>\n\n        if (tagName != null) {\n            b.append('<');\n            b.append(tagName);\n            b.append('>');\n        }\n\n// Loop thru the keys.\n\n        jo = (JSONObject)o;\n        keys = jo.keys();\n        while (keys.hasMoreElements()) {\n            k = keys.nextElement().toString();\n            v = jo.get(k);\n            if (v instanceof String) {\n                s = (String)v;\n            } else {\n                s = null;\n            }\n\n// Emit content in body\n\n            if (k.equals(\"content\")) {\n                if (v instanceof JSONArray) {\n                    ja = (JSONArray)v;\n                    len = ja.length();\n                    for (i = 0; i < len; i += 1) {\n                        if (i > 0) {\n                            b.append('\\n');\n                        }\n                        b.append(escape(ja.get(i).toString()));\n                    }\n                } else {\n                    b.append(escape(v.toString()));\n                }\n\n// Emit an array of similar keys\n\n            } else if (v instanceof JSONArray) {\n                ja = (JSONArray)v;\n                len = ja.length();\n                for (i = 0; i < len; i += 1) {\n                    b.append(toString(ja.get(i), k));\n                }\n            } else if (v.equals(\"\")) {\n                b.append('<');\n                b.append(k);\n                b.append(\"/>\");\n\n// Emit a new tag <k>\n\n            } else {\n                b.append(toString(v, k));\n            }\n        }\n        if (tagName != null) {\n\n// Emit the </tagname> close tag\n\n            b.append(\"</\");\n            b.append(tagName);\n            b.append('>');\n        }\n        return b.toString();\n\n// XML does not have good support for arrays. If an array appears in a place\n// where XML is lacking, synthesize an <array> element.\n\n    } else if (o instanceof JSONArray) {\n        ja = (JSONArray)o;\n        len = ja.length();\n        for (i = 0; i < len; ++i) {\n            b.append(toString(\n                ja.opt(i), (tagName == null) ? \"array\" : tagName));\n        }\n        return b.toString();\n    } else {\n        s = (o == null) ? \"null\" : escape(o.toString());\n        return (tagName == null) ? \"\\\"\" + s + \"\\\"\" :\n            (s.length() == 0) ? \"<\" + tagName + \"/>\" :\n            \"<\" + tagName + \">\" + s + \"</\" + tagName + \">\";\n    }\n}", "path": "src\\org\\json\\me\\util\\XML.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Produce a string in double quotes with backslash sequences in all the\n * right places. A backslash will be inserted within </, allowing JSON\n * text to be delivered in HTML. In JSON text, a string cannot contain a\n * control character or an unescaped quote or backslash.\n * @param string A String\n * @return  A String correctly formatted for insertion in a JSON text.\n */\n", "func_signal": "public static String quote(String string)", "code": "{\n    if (string == null || string.length() == 0) {\n        return \"\\\"\\\"\";\n    }\n\n    char         b;\n    char         c = 0;\n    int          i;\n    int          len = string.length();\n    StringBuffer sb = new StringBuffer(len + 4);\n    String       t;\n\n    sb.append('\"');\n    for (i = 0; i < len; i += 1) {\n        b = c;\n        c = string.charAt(i);\n        switch (c) {\n        case '\\\\':\n        case '\"':\n            sb.append('\\\\');\n            sb.append(c);\n            break;\n        case '/':\n            if (b == '<') {\n                sb.append('\\\\');\n            }\n            sb.append(c);\n            break;\n        case '\\b':\n            sb.append(\"\\\\b\");\n            break;\n        case '\\t':\n            sb.append(\"\\\\t\");\n            break;\n        case '\\n':\n            sb.append(\"\\\\n\");\n            break;\n        case '\\f':\n            sb.append(\"\\\\f\");\n            break;\n        case '\\r':\n            sb.append(\"\\\\r\");\n            break;\n        default:\n            if (c < ' ') {\n                t = \"000\" + Integer.toHexString(c);\n                sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    sb.append('\"');\n    return sb.toString();\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Construct a JSONObject from a Map.\n * @param map A map object that can be used to initialize the contents of\n *  the JSONObject.\n */\n", "func_signal": "public JSONObject(Hashtable map)", "code": "{\n    if (map == null) {\n        this.myHashMap = new Hashtable();\n    } else {\n        this.myHashMap = new Hashtable(map.size());\n        Enumeration keys = map.keys();\n        while (keys.hasMoreElements()) {\n            Object key = keys.nextElement();\n            this.myHashMap.put(key, map.get(key));\n        }\n    }\n}", "path": "src\\org\\json\\me\\JSONObject.java", "repo_name": "greyson/j2me-json", "stars": 11, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Constructor.\n * \n * @param constants the constants\n */\n", "func_signal": "public CwFlowPanel(CwConstants constants)", "code": "{\n  super(constants);\n  this.constants = constants;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\panels\\CwFlowPanel.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Add a tab to this example to show the messages interface.\n */\n", "func_signal": "private void addConstantsTab()", "code": "{\n  // Add a tab to show the interface\n  javaWidget = new HTML();\n  add(javaWidget, \"ExampleConstants.java\");\n\n  // Add a tab to show the properties\n  propertiesWidget = new HTML();\n  add(propertiesWidget, \"ExampleConstants.properties\");\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwConstantsExample.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Create a vertical panel to align the check boxes\n  VerticalPanel vPanel = new VerticalPanel();\n  HTML label = new HTML(constants.cwCheckBoxCheckAll());\n  label.ensureDebugId(\"cwCheckBox-label\");\n  vPanel.add(label);\n\n  // Add a checkbox for each day of the week\n  String[] daysOfWeek = constants.cwCheckBoxDays();\n  for (int i = 0; i < daysOfWeek.length; i++) {\n    String day = daysOfWeek[i];\n    CheckBox checkBox = new CheckBox(day);\n    checkBox.ensureDebugId(\"cwCheckBox-\" + day);\n\n    // Disable the weekends\n    if (i >= 5) {\n      checkBox.setEnabled(false);\n    }\n\n    vPanel.add(checkBox);\n  }\n\n  // Return the panel of checkboxes\n  return vPanel;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\widgets\\CwCheckBox.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Create a Flow Panel\n  FlowPanel flowPanel = new FlowPanel();\n  flowPanel.ensureDebugId(\"cwFlowPanel\");\n\n  // Add some content to the panel\n  for (int i = 0; i < 30; i++) {\n    CheckBox checkbox = new CheckBox(constants.cwFlowPanelItem() + \" \" + i);\n    checkbox.addStyleName(\"cw-FlowPanel-checkBox\");\n    flowPanel.add(checkbox);\n  }\n\n  // Return the content\n  return flowPanel;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\panels\\CwFlowPanel.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Use a Grid to layout the content\n  Grid layout = new Grid(4, 2);\n  CellFormatter formatter = layout.getCellFormatter();\n  layout.setCellSpacing(5);\n\n  // Add a field to select the pattern\n  patternList = new ListBox();\n  patternList.setWidth(\"17em\");\n  String[] patterns = constants.cwDateTimeFormatPatterns();\n  for (String pattern : patterns) {\n    patternList.addItem(pattern);\n  }\n  patternList.addChangeHandler(new ChangeHandler() {\n    public void onChange(ChangeEvent event) {\n      updatePattern();\n    }\n  });\n  layout.setHTML(0, 0, constants.cwDateTimeFormatPatternLabel());\n  layout.setWidget(0, 1, patternList);\n\n  // Add a field to display the pattern\n  patternBox = new TextBox();\n  patternBox.setWidth(\"17em\");\n  patternBox.addKeyUpHandler(new KeyUpHandler() {\n    public void onKeyUp(KeyUpEvent event) {\n      updatePattern();\n    }\n  });\n\n  layout.setWidget(1, 1, patternBox);\n\n  // Add a field to set the value\n  valueBox = new TextBox();\n  valueBox.setWidth(\"17em\");\n  valueBox.setText(\"13 September 1999 12:34:56\");\n  valueBox.addKeyUpHandler(new KeyUpHandler() {\n\n    public void onKeyUp(KeyUpEvent event) {\n      updateFormattedValue();\n    }\n\n  });\n\n  layout.setHTML(2, 0, constants.cwDateTimeFormatValueLabel());\n  layout.setWidget(2, 1, valueBox);\n\n  // Add a field to display the formatted value\n  formattedBox = new Label();\n  formattedBox.setWidth(\"17em\");\n  layout.setHTML(3, 0, constants.cwDateTimeFormatFormattedLabel());\n  layout.setWidget(3, 1, formattedBox);\n  formatter.setVerticalAlignment(3, 0, HasVerticalAlignment.ALIGN_TOP);\n\n  // Return the layout Widget\n  updatePattern();\n  return layout;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwDateTimeFormat.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Create a Horizontal Panel\n  HorizontalPanel hPanel = new HorizontalPanel();\n  hPanel.setSpacing(5);\n\n  // Add some content to the panel\n  for (int i = 1; i < 5; i++) {\n    hPanel.add(new Button(constants.cwHorizontalPanelButton() + \" \" + i));\n  }\n\n  // Return the content\n  hPanel.ensureDebugId(\"cwHorizontalPanel\");\n  return hPanel;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\panels\\CwHorizontalPanel.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Create a basic popup widget\n  final DecoratedPopupPanel simplePopup = new DecoratedPopupPanel(true);\n  simplePopup.ensureDebugId(\"cwBasicPopup-simplePopup\");\n  simplePopup.setWidth(\"150px\");\n  simplePopup.setWidget(new HTML(\n      constants.cwBasicPopupClickOutsideInstructions()));\n\n  // Create a button to show the popup\n  Button openButton = new Button(constants.cwBasicPopupShowButton(),\n      new ClickHandler() {\n        public void onClick(ClickEvent event) {\n          // Reposition the popup relative to the button\n          Widget source = (Widget) event.getSource();\n          int left = source.getAbsoluteLeft() + 10;\n          int top = source.getAbsoluteTop() + 10;\n          simplePopup.setPopupPosition(left, top);\n\n          // Show the popup\n          simplePopup.show();\n        }\n      });\n\n  // Create a popup to show the full size image\n  Image jimmyFull = new Image(Showcase.images().jimmy());\n  final PopupPanel imagePopup = new PopupPanel(true);\n  imagePopup.setAnimationEnabled(true);\n  imagePopup.ensureDebugId(\"cwBasicPopup-imagePopup\");\n  imagePopup.setWidget(jimmyFull);\n  jimmyFull.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      imagePopup.hide();\n    }\n  });\n\n  // Add an image thumbnail\n  Image jimmyThumb = new Image(Showcase.images().jimmyThumb());\n  jimmyThumb.ensureDebugId(\"cwBasicPopup-thumb\");\n  jimmyThumb.addStyleName(\"cw-BasicPopup-thumb\");\n  jimmyThumb.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      imagePopup.center();\n    }\n  });\n\n  // Add the widgets to a panel\n  VerticalPanel vPanel = new VerticalPanel();\n  vPanel.setSpacing(5);\n  vPanel.add(openButton);\n  vPanel.add(new HTML(\"<br><br><br>\" + constants.cwBasicPopupInstructions()));\n  vPanel.add(jimmyThumb);\n\n  // Return the panel\n  return vPanel;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\popups\\CwBasicPopup.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Constructor.\n * \n * @param constants the constants\n */\n", "func_signal": "public CwHorizontalPanel(CwConstants constants)", "code": "{\n  super(constants);\n  this.constants = constants;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\panels\\CwHorizontalPanel.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Create a vertical panel to align the content\n  VerticalPanel vPanel = new VerticalPanel();\n\n  // Add a label\n  vPanel.add(new HTML(constants.cwFileUploadSelectFile()));\n\n  // Add a file upload widget\n  final FileUpload fileUpload = new FileUpload();\n  fileUpload.ensureDebugId(\"cwFileUpload\");\n  vPanel.add(fileUpload);\n\n  // Add a button to upload the file\n  Button uploadButton = new Button(constants.cwFileUploadButton());\n  uploadButton.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      String filename = fileUpload.getFilename();\n      if (filename.length() == 0) {\n        Window.alert(constants.cwFileUploadNoFileError());\n      } else {\n        Window.alert(constants.cwFileUploadSuccessful());\n      }\n    }\n  });\n  vPanel.add(new HTML(\"<br>\"));\n  vPanel.add(uploadButton);\n\n  // Return the layout panel\n  return vPanel;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\widgets\\CwFileUpload.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Update the formatted message.\n */\n", "func_signal": "@ShowcaseSource\nprivate void updateMessage()", "code": "{\n  try {\n    int count = Integer.parseInt(arg0Box.getText().trim());\n    formattedMessage.setText(pluralMessages.treeCount(count));\n  } catch (NumberFormatException e) {\n    // Ignore.\n  }\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwPluralFormsExample.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Constructor.\n * \n * @param constants the constants\n */\n", "func_signal": "public CwBasicPopup(CwConstants constants)", "code": "{\n  super(constants);\n  this.constants = constants;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\popups\\CwBasicPopup.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Internationalized messages used by {@link CwPluralFormsExample}. Used to\n * demonstrate plural forms support.\n */\n", "func_signal": "@DefaultLocale(\"en\")\npublic interface PluralMessages extends Messages", "code": "{\n  @DefaultMessage(\"You have {0} trees.\")\n  @PluralText({\"one\", \"You have one tree.\"})\n  String treeCount(@PluralCount int count);\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\PluralMessages.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Create the internationalized constants\n  ExampleConstants exampleConstants = GWT.create(ExampleConstants.class);\n\n  // Use a FlexTable to layout the content\n  FlexTable layout = new FlexTable();\n  FlexCellFormatter formatter = layout.getFlexCellFormatter();\n  layout.setCellSpacing(5);\n\n  // Add a link to the source code of the Interface\n  HTML link = new HTML(\n      \" <a href=\\\"javascript:void(0);\\\">ExampleConstants</a>\");\n  link.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      selectTab(2);\n    }\n  });\n  HorizontalPanel linkPanel = new HorizontalPanel();\n  linkPanel.setSpacing(3);\n  linkPanel.add(new HTML(constants.cwConstantsExampleLinkText()));\n  linkPanel.add(link);\n  layout.setWidget(0, 0, linkPanel);\n  formatter.setColSpan(0, 0, 2);\n\n  // Show the first name\n  TextBox firstNameBox = new TextBox();\n  firstNameBox.setText(\"Amelie\");\n  firstNameBox.setWidth(\"17em\");\n  layout.setHTML(1, 0, exampleConstants.firstName());\n  layout.setWidget(1, 1, firstNameBox);\n\n  // Show the last name\n  TextBox lastNameBox = new TextBox();\n  lastNameBox.setText(\"Crutcher\");\n  lastNameBox.setWidth(\"17em\");\n  layout.setHTML(2, 0, exampleConstants.lastName());\n  layout.setWidget(2, 1, lastNameBox);\n\n  // Create a list box of favorite colors\n  ListBox colorBox = new ListBox();\n  Map<String, String> colorMap = exampleConstants.colorMap();\n  for (Map.Entry<String, String> entry : colorMap.entrySet()) {\n    String key = entry.getKey();\n    String value = entry.getValue();\n    colorBox.addItem(value, key);\n  }\n  layout.setHTML(3, 0, exampleConstants.favoriteColor());\n  layout.setWidget(3, 1, colorBox);\n\n  // Return the layout Widget\n  return layout;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwConstantsExample.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Constructor.\n * \n * @param constants the constants\n */\n", "func_signal": "public CwConstantsExample(CwConstants constants)", "code": "{\n  super(constants);\n  this.constants = constants;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwConstantsExample.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Constructor.\n * \n * @param constants the constants\n */\n", "func_signal": "public CwDateTimeFormat(CwConstants constants)", "code": "{\n  super(constants);\n  this.constants = constants;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwDateTimeFormat.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Constructor.\n * \n * @param constants the constants\n */\n", "func_signal": "public CwCheckBox(CwConstants constants)", "code": "{\n  super(constants);\n  this.constants = constants;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\widgets\\CwCheckBox.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Constructor.\n * \n * @param constants the constants\n */\n", "func_signal": "public CwPluralFormsExample(CwConstants constants)", "code": "{\n  super(constants);\n  this.constants = constants;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwPluralFormsExample.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Show an error message. Pass in null to clear the error message.\n * \n * @param errorMsg the error message\n */\n", "func_signal": "@ShowcaseSource\nprivate void showErrorMessage(String errorMsg)", "code": "{\n  if (errorMsg == null) {\n    formattedBox.removeStyleName(\"cw-RedText\");\n  } else {\n    formattedBox.setText(errorMsg);\n    formattedBox.addStyleName(\"cw-RedText\");\n  }\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwDateTimeFormat.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Initialize this example.\n */\n", "func_signal": "@ShowcaseSource\n@Override\npublic Widget onInitialize()", "code": "{\n  // Create the internationalized error messages\n  pluralMessages = GWT.create(PluralMessages.class);\n\n  // Use a FlexTable to layout the content\n  FlexTable layout = new FlexTable();\n  FlexCellFormatter formatter = layout.getFlexCellFormatter();\n  layout.setCellSpacing(5);\n\n  // Add a link to the source code of the Interface\n  HTML link = new HTML(\" <a href=\\\"javascript:void(0);\\\">PluralMessages</a>\");\n  link.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      selectTab(2);\n    }\n  });\n  HorizontalPanel linkPanel = new HorizontalPanel();\n  linkPanel.setSpacing(3);\n  linkPanel.add(new HTML(constants.cwPluralFormsExampleLinkText()));\n  linkPanel.add(link);\n  layout.setWidget(0, 0, linkPanel);\n  formatter.setColSpan(0, 0, 2);\n\n  // Add argument 0\n  arg0Box = new TextBox();\n  arg0Box.setText(\"13\");\n  layout.setHTML(2, 0, constants.cwPluralFormsExampleArg0Label());\n  layout.setWidget(2, 1, arg0Box);\n\n  // Add the formatted message\n  formattedMessage = new Label();\n  layout.setHTML(5, 0, constants.cwPluralFormsExampleFormattedLabel());\n  layout.setWidget(5, 1, formattedMessage);\n  formatter.setVerticalAlignment(5, 0, HasVerticalAlignment.ALIGN_TOP);\n\n  // Add handlers to all of the argument boxes\n  KeyUpHandler keyUpHandler = new KeyUpHandler() {\n    public void onKeyUp(KeyUpEvent event) {\n      updateMessage();\n    }\n  };\n  arg0Box.addKeyUpHandler(keyUpHandler);\n\n  // Return the layout Widget\n  updateMessage();\n  return layout;\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwPluralFormsExample.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "/**\n * Update the formatted value based on the user entered value and pattern.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\n@ShowcaseSource\nprivate void updateFormattedValue()", "code": "{\n  String sValue = valueBox.getText();\n  if (!sValue.equals(\"\")) {\n    try {\n      Date date = new Date(sValue);\n      String formattedValue = activeFormat.format(date);\n      formattedBox.setText(formattedValue);\n      showErrorMessage(null);\n    } catch (IllegalArgumentException e) {\n      showErrorMessage(constants.cwDateTimeFormatFailedToParseInput());\n    }\n  } else {\n    formattedBox.setText(\"<None>\");\n  }\n}", "path": "src\\com\\google\\gwt\\sample\\showcase\\client\\content\\i18n\\CwDateTimeFormat.java", "repo_name": "robheittman/scalagwt-sample", "stars": 9, "license": "None", "language": "java", "size": 204622}
{"docstring": "// $ANTLR start \"type\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:103:1: type : ( 'map<' type ',' type '>' -> TYPE_MAP ( type )+ | 'set<' type '>' -> TYPE_SET type | 'list<' type '>' -> TYPE_LIST type | TYPE -> TYPE_PRIMITIVE TYPE | ID -> TYPE_PRIMITIVE ID | ID '<' type ( ',' type )* '>' -> PARAMETERIZED_TYPE ID ( type )+ );\n", "func_signal": "public final GuiceyDataParser.type_return type() throws RecognitionException", "code": "{\n    GuiceyDataParser.type_return retval = new GuiceyDataParser.type_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token string_literal62=null;\n    Token char_literal64=null;\n    Token char_literal66=null;\n    Token string_literal67=null;\n    Token char_literal69=null;\n    Token string_literal70=null;\n    Token char_literal72=null;\n    Token TYPE73=null;\n    Token ID74=null;\n    Token ID75=null;\n    Token char_literal76=null;\n    Token char_literal78=null;\n    Token char_literal80=null;\n    GuiceyDataParser.type_return type63 = null;\n\n    GuiceyDataParser.type_return type65 = null;\n\n    GuiceyDataParser.type_return type68 = null;\n\n    GuiceyDataParser.type_return type71 = null;\n\n    GuiceyDataParser.type_return type77 = null;\n\n    GuiceyDataParser.type_return type79 = null;\n\n\n    Object string_literal62_tree=null;\n    Object char_literal64_tree=null;\n    Object char_literal66_tree=null;\n    Object string_literal67_tree=null;\n    Object char_literal69_tree=null;\n    Object string_literal70_tree=null;\n    Object char_literal72_tree=null;\n    Object TYPE73_tree=null;\n    Object ID74_tree=null;\n    Object ID75_tree=null;\n    Object char_literal76_tree=null;\n    Object char_literal78_tree=null;\n    Object char_literal80_tree=null;\n    RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,\"token 43\");\n    RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,\"token 42\");\n    RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,\"token 41\");\n    RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,\"token 40\");\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,\"token 39\");\n    RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,\"token TYPE\");\n    RewriteRuleTokenStream stream_29=new RewriteRuleTokenStream(adaptor,\"token 29\");\n    RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,\"rule type\");\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:104:2: ( 'map<' type ',' type '>' -> TYPE_MAP ( type )+ | 'set<' type '>' -> TYPE_SET type | 'list<' type '>' -> TYPE_LIST type | TYPE -> TYPE_PRIMITIVE TYPE | ID -> TYPE_PRIMITIVE ID | ID '<' type ( ',' type )* '>' -> PARAMETERIZED_TYPE ID ( type )+ )\n        int alt19=6;\n        switch ( input.LA(1) ) {\n        case 39:\n            {\n            alt19=1;\n            }\n            break;\n        case 41:\n            {\n            alt19=2;\n            }\n            break;\n        case 42:\n            {\n            alt19=3;\n            }\n            break;\n        case TYPE:\n            {\n            alt19=4;\n            }\n            break;\n        case ID:\n            {\n            switch ( input.LA(2) ) {\n            case 43:\n                {\n                alt19=6;\n                }\n                break;\n            case EOF:\n            case ID:\n            case 29:\n            case 37:\n            case 40:\n                {\n                alt19=5;\n                }\n                break;\n            default:\n                if (state.backtracking>0) {state.failed=true; return retval;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 19, 5, input);\n\n                throw nvae;\n            }\n\n            }\n            break;\n        default:\n            if (state.backtracking>0) {state.failed=true; return retval;}\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 19, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt19) {\n            case 1 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:104:4: 'map<' type ',' type '>'\n                {\n                string_literal62=(Token)match(input,39,FOLLOW_39_in_type552); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_39.add(string_literal62);\n\n                pushFollow(FOLLOW_type_in_type554);\n                type63=type();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_type.add(type63.getTree());\n                char_literal64=(Token)match(input,29,FOLLOW_29_in_type556); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_29.add(char_literal64);\n\n                pushFollow(FOLLOW_type_in_type558);\n                type65=type();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_type.add(type65.getTree());\n                char_literal66=(Token)match(input,40,FOLLOW_40_in_type560); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_40.add(char_literal66);\n\n\n\n                // AST REWRITE\n                // elements: type\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 104:29: -> TYPE_MAP ( type )+\n                {\n                    adaptor.addChild(root_0, (Object)adaptor.create(TYPE_MAP, \"TYPE_MAP\"));\n                    if ( !(stream_type.hasNext()) ) {\n                        throw new RewriteEarlyExitException();\n                    }\n                    while ( stream_type.hasNext() ) {\n                        adaptor.addChild(root_0, stream_type.nextTree());\n\n                    }\n                    stream_type.reset();\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 2 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:105:4: 'set<' type '>'\n                {\n                string_literal67=(Token)match(input,41,FOLLOW_41_in_type572); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_41.add(string_literal67);\n\n                pushFollow(FOLLOW_type_in_type574);\n                type68=type();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_type.add(type68.getTree());\n                char_literal69=(Token)match(input,40,FOLLOW_40_in_type576); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_40.add(char_literal69);\n\n\n\n                // AST REWRITE\n                // elements: type\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 105:20: -> TYPE_SET type\n                {\n                    adaptor.addChild(root_0, (Object)adaptor.create(TYPE_SET, \"TYPE_SET\"));\n                    adaptor.addChild(root_0, stream_type.nextTree());\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 3 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:106:4: 'list<' type '>'\n                {\n                string_literal70=(Token)match(input,42,FOLLOW_42_in_type587); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_42.add(string_literal70);\n\n                pushFollow(FOLLOW_type_in_type589);\n                type71=type();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_type.add(type71.getTree());\n                char_literal72=(Token)match(input,40,FOLLOW_40_in_type591); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_40.add(char_literal72);\n\n\n\n                // AST REWRITE\n                // elements: type\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 106:21: -> TYPE_LIST type\n                {\n                    adaptor.addChild(root_0, (Object)adaptor.create(TYPE_LIST, \"TYPE_LIST\"));\n                    adaptor.addChild(root_0, stream_type.nextTree());\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 4 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:107:4: TYPE\n                {\n                TYPE73=(Token)match(input,TYPE,FOLLOW_TYPE_in_type602); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_TYPE.add(TYPE73);\n\n\n\n                // AST REWRITE\n                // elements: TYPE\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 107:9: -> TYPE_PRIMITIVE TYPE\n                {\n                    adaptor.addChild(root_0, (Object)adaptor.create(TYPE_PRIMITIVE, \"TYPE_PRIMITIVE\"));\n                    adaptor.addChild(root_0, stream_TYPE.nextNode());\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 5 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:108:4: ID\n                {\n                ID74=(Token)match(input,ID,FOLLOW_ID_in_type613); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID74);\n\n\n\n                // AST REWRITE\n                // elements: ID\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 108:7: -> TYPE_PRIMITIVE ID\n                {\n                    adaptor.addChild(root_0, (Object)adaptor.create(TYPE_PRIMITIVE, \"TYPE_PRIMITIVE\"));\n                    adaptor.addChild(root_0, stream_ID.nextNode());\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 6 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:109:4: ID '<' type ( ',' type )* '>'\n                {\n                ID75=(Token)match(input,ID,FOLLOW_ID_in_type624); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID75);\n\n                char_literal76=(Token)match(input,43,FOLLOW_43_in_type626); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_43.add(char_literal76);\n\n                pushFollow(FOLLOW_type_in_type628);\n                type77=type();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_type.add(type77.getTree());\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:109:16: ( ',' type )*\n                loop18:\n                do {\n                    int alt18=2;\n                    switch ( input.LA(1) ) {\n                    case 29:\n                        {\n                        alt18=1;\n                        }\n                        break;\n\n                    }\n\n                    switch (alt18) {\n                \tcase 1 :\n                \t    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:109:17: ',' type\n                \t    {\n                \t    char_literal78=(Token)match(input,29,FOLLOW_29_in_type631); if (state.failed) return retval; \n                \t    if ( state.backtracking==0 ) stream_29.add(char_literal78);\n\n                \t    pushFollow(FOLLOW_type_in_type633);\n                \t    type79=type();\n\n                \t    state._fsp--;\n                \t    if (state.failed) return retval;\n                \t    if ( state.backtracking==0 ) stream_type.add(type79.getTree());\n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop18;\n                    }\n                } while (true);\n\n                char_literal80=(Token)match(input,40,FOLLOW_40_in_type637); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_40.add(char_literal80);\n\n\n\n                // AST REWRITE\n                // elements: ID, type\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 109:32: -> PARAMETERIZED_TYPE ID ( type )+\n                {\n                    adaptor.addChild(root_0, (Object)adaptor.create(PARAMETERIZED_TYPE, \"PARAMETERIZED_TYPE\"));\n                    adaptor.addChild(root_0, stream_ID.nextNode());\n                    if ( !(stream_type.hasNext()) ) {\n                        throw new RewriteEarlyExitException();\n                    }\n                    while ( stream_type.hasNext() ) {\n                        adaptor.addChild(root_0, stream_type.nextTree());\n\n                    }\n                    stream_type.reset();\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"pair\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:70:1: pair : key '=' value -> ^( PAIR key value ) ;\n", "func_signal": "public final GuiceyDataParser.pair_return pair() throws RecognitionException", "code": "{\n    GuiceyDataParser.pair_return retval = new GuiceyDataParser.pair_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token char_literal51=null;\n    GuiceyDataParser.key_return key50 = null;\n\n    GuiceyDataParser.value_return value52 = null;\n\n\n    Object char_literal51_tree=null;\n    RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,\"token 36\");\n    RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,\"rule value\");\n    RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,\"rule key\");\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:71:2: ( key '=' value -> ^( PAIR key value ) )\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:71:4: key '=' value\n        {\n        pushFollow(FOLLOW_key_in_pair428);\n        key50=key();\n\n        state._fsp--;\n        if (state.failed) return retval;\n        if ( state.backtracking==0 ) stream_key.add(key50.getTree());\n        char_literal51=(Token)match(input,36,FOLLOW_36_in_pair430); if (state.failed) return retval; \n        if ( state.backtracking==0 ) stream_36.add(char_literal51);\n\n        pushFollow(FOLLOW_value_in_pair432);\n        value52=value();\n\n        state._fsp--;\n        if (state.failed) return retval;\n        if ( state.backtracking==0 ) stream_value.add(value52.getTree());\n\n\n        // AST REWRITE\n        // elements: key, value\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        if ( state.backtracking==0 ) {\n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (Object)adaptor.nil();\n        // 71:18: -> ^( PAIR key value )\n        {\n            // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:71:21: ^( PAIR key value )\n            {\n            Object root_1 = (Object)adaptor.nil();\n            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PAIR, \"PAIR\"), root_1);\n\n            adaptor.addChild(root_1, stream_key.nextTree());\n            adaptor.addChild(root_1, stream_value.nextTree());\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;}\n        }\n\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "/**\n * Make sure that the data JavaDocs are being properly generated.\n */\n", "func_signal": "@Test\npublic void dataJavaDoc()", "code": "{\n    //Generate source files\n    GENERATOR.generate(SCHEMA_PERSON);\n\n    //Test for class in root of directory\n\tfinal File person = new File(OUTPUT_PERSON);\n    Assert.assertTrue(person.exists());\n\n    try {\n\t\t\tfinal String contents = FileUtils.readFileToString(person);\n\t\t\tAssert.assertTrue(REGEX_JAVADOC_DATA.matcher(contents).find());\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tAssert.fail(\"Could not read generated file.\");\n\t\t}\n}", "path": "src\\test\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\GuiceyDataGeneratorTest.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start synpred21_GuiceyData\n", "func_signal": "public final void synpred21_GuiceyData_fragment() throws RecognitionException", "code": "{   \n    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:91:4: ( type 'data;' )\n    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:91:4: type 'data;'\n    {\n    pushFollow(FOLLOW_type_in_synpred21_GuiceyData488);\n    type();\n\n    state._fsp--;\n    if (state.failed) return ;\n    match(input,37,FOLLOW_37_in_synpred21_GuiceyData490); if (state.failed) return ;\n\n    }\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "//\t\tcreateUpdater(builder, type, indentCount + 1);\n", "func_signal": "appendIndent(builder, indentCount + 1).append(\"@Override public boolean equals(Object obj)", "code": "{\\n\");\n\t\tappendIndent(builder, indentCount + 2).append(\"if (obj == null || !(obj instanceof \").append(getSimpleName(type.getJavaType())).append(\"))\\n\");\n\t\tappendIndent(builder, indentCount + 3).append(\"return false;\\n\");\n\t\tif (type.getProperties().size() > 0) {\n\t\t\tappendIndent(builder, indentCount + 2).append(getSimpleName(type.getJavaType())).append(\" other = (\").append(getSimpleName(type.getJavaType())).append(\")obj;\\n\");\n\t\t\tcreate(\"Equals\", builder, type, indentCount + 1);\n\t\t}\n\t\tappendIndent(builder, indentCount + 2).append(\"return true;\\n\");\n\t\tappendIndent(builder, indentCount + 1).append(\"}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\TypeGenerator.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "/**\n * Test file generation properly recurses into subdirectories to look for\n * schema definition files.\n */\n", "func_signal": "@Test\npublic void directoryRecursion()", "code": "{\n    //Generate source files\n    GENERATOR.generate(SCHEMA);\n\n    //Test for class in root of directory\n\tfinal File person = new File(OUTPUT_PERSON);\n    Assert.assertTrue(person.exists());\n\n    //Test for class stored in subdirectory\n\tfinal File vehicle = new File(OUTPUT_VEHICLE);\n    Assert.assertTrue(vehicle.exists());\n}", "path": "src\\test\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\GuiceyDataGeneratorTest.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"enumeration\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:45:1: enumeration : ( ( javadoc )? ENUM ID '{}' -> ^( ENUM ID ( javadoc )? ) | ( javadoc )? ENUM ID '{' ( ID ',' )* ID '}' -> ^( ENUM ( ID )+ ( javadoc )? ) );\n", "func_signal": "public final GuiceyDataParser.enumeration_return enumeration() throws RecognitionException", "code": "{\n    GuiceyDataParser.enumeration_return retval = new GuiceyDataParser.enumeration_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token ENUM16=null;\n    Token ID17=null;\n    Token string_literal18=null;\n    Token ENUM20=null;\n    Token ID21=null;\n    Token char_literal22=null;\n    Token ID23=null;\n    Token char_literal24=null;\n    Token ID25=null;\n    Token char_literal26=null;\n    GuiceyDataParser.javadoc_return javadoc15 = null;\n\n    GuiceyDataParser.javadoc_return javadoc19 = null;\n\n\n    Object ENUM16_tree=null;\n    Object ID17_tree=null;\n    Object string_literal18_tree=null;\n    Object ENUM20_tree=null;\n    Object ID21_tree=null;\n    Object char_literal22_tree=null;\n    Object ID23_tree=null;\n    Object char_literal24_tree=null;\n    Object ID25_tree=null;\n    Object char_literal26_tree=null;\n    RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,\"token ENUM\");\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleTokenStream stream_26=new RewriteRuleTokenStream(adaptor,\"token 26\");\n    RewriteRuleTokenStream stream_27=new RewriteRuleTokenStream(adaptor,\"token 27\");\n    RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,\"token 28\");\n    RewriteRuleTokenStream stream_29=new RewriteRuleTokenStream(adaptor,\"token 29\");\n    RewriteRuleSubtreeStream stream_javadoc=new RewriteRuleSubtreeStream(adaptor,\"rule javadoc\");\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:46:2: ( ( javadoc )? ENUM ID '{}' -> ^( ENUM ID ( javadoc )? ) | ( javadoc )? ENUM ID '{' ( ID ',' )* ID '}' -> ^( ENUM ( ID )+ ( javadoc )? ) )\n        int alt10=2;\n        alt10 = dfa10.predict(input);\n        switch (alt10) {\n            case 1 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:46:4: ( javadoc )? ENUM ID '{}'\n                {\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:46:4: ( javadoc )?\n                int alt7=2;\n                switch ( input.LA(1) ) {\n                    case 30:\n                        {\n                        alt7=1;\n                        }\n                        break;\n                }\n\n                switch (alt7) {\n                    case 1 :\n                        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:0:0: javadoc\n                        {\n                        pushFollow(FOLLOW_javadoc_in_enumeration211);\n                        javadoc15=javadoc();\n\n                        state._fsp--;\n                        if (state.failed) return retval;\n                        if ( state.backtracking==0 ) stream_javadoc.add(javadoc15.getTree());\n\n                        }\n                        break;\n\n                }\n\n                ENUM16=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumeration214); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ENUM.add(ENUM16);\n\n                ID17=(Token)match(input,ID,FOLLOW_ID_in_enumeration216); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID17);\n\n                string_literal18=(Token)match(input,28,FOLLOW_28_in_enumeration218); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_28.add(string_literal18);\n\n\n\n                // AST REWRITE\n                // elements: javadoc, ID, ENUM\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 46:26: -> ^( ENUM ID ( javadoc )? )\n                {\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:46:29: ^( ENUM ID ( javadoc )? )\n                    {\n                    Object root_1 = (Object)adaptor.nil();\n                    root_1 = (Object)adaptor.becomeRoot(stream_ENUM.nextNode(), root_1);\n\n                    adaptor.addChild(root_1, stream_ID.nextNode());\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:46:39: ( javadoc )?\n                    if ( stream_javadoc.hasNext() ) {\n                        adaptor.addChild(root_1, stream_javadoc.nextTree());\n\n                    }\n                    stream_javadoc.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 2 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:47:4: ( javadoc )? ENUM ID '{' ( ID ',' )* ID '}'\n                {\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:47:4: ( javadoc )?\n                int alt8=2;\n                switch ( input.LA(1) ) {\n                    case 30:\n                        {\n                        alt8=1;\n                        }\n                        break;\n                }\n\n                switch (alt8) {\n                    case 1 :\n                        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:0:0: javadoc\n                        {\n                        pushFollow(FOLLOW_javadoc_in_enumeration234);\n                        javadoc19=javadoc();\n\n                        state._fsp--;\n                        if (state.failed) return retval;\n                        if ( state.backtracking==0 ) stream_javadoc.add(javadoc19.getTree());\n\n                        }\n                        break;\n\n                }\n\n                ENUM20=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumeration237); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ENUM.add(ENUM20);\n\n                ID21=(Token)match(input,ID,FOLLOW_ID_in_enumeration239); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID21);\n\n                char_literal22=(Token)match(input,26,FOLLOW_26_in_enumeration241); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_26.add(char_literal22);\n\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:47:25: ( ID ',' )*\n                loop9:\n                do {\n                    int alt9=2;\n                    switch ( input.LA(1) ) {\n                    case ID:\n                        {\n                        switch ( input.LA(2) ) {\n                        case 29:\n                            {\n                            alt9=1;\n                            }\n                            break;\n\n                        }\n\n                        }\n                        break;\n\n                    }\n\n                    switch (alt9) {\n                \tcase 1 :\n                \t    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:47:26: ID ','\n                \t    {\n                \t    ID23=(Token)match(input,ID,FOLLOW_ID_in_enumeration244); if (state.failed) return retval; \n                \t    if ( state.backtracking==0 ) stream_ID.add(ID23);\n\n                \t    char_literal24=(Token)match(input,29,FOLLOW_29_in_enumeration246); if (state.failed) return retval; \n                \t    if ( state.backtracking==0 ) stream_29.add(char_literal24);\n\n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop9;\n                    }\n                } while (true);\n\n                ID25=(Token)match(input,ID,FOLLOW_ID_in_enumeration250); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID25);\n\n                char_literal26=(Token)match(input,27,FOLLOW_27_in_enumeration252); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_27.add(char_literal26);\n\n\n\n                // AST REWRITE\n                // elements: javadoc, ID, ENUM\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 47:42: -> ^( ENUM ( ID )+ ( javadoc )? )\n                {\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:47:45: ^( ENUM ( ID )+ ( javadoc )? )\n                    {\n                    Object root_1 = (Object)adaptor.nil();\n                    root_1 = (Object)adaptor.becomeRoot(stream_ENUM.nextNode(), root_1);\n\n                    if ( !(stream_ID.hasNext()) ) {\n                        throw new RewriteEarlyExitException();\n                    }\n                    while ( stream_ID.hasNext() ) {\n                        adaptor.addChild(root_1, stream_ID.nextNode());\n\n                    }\n                    stream_ID.reset();\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:47:56: ( javadoc )?\n                    if ( stream_javadoc.hasNext() ) {\n                        adaptor.addChild(root_1, stream_javadoc.nextTree());\n\n                    }\n                    stream_javadoc.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// constructor\n", "func_signal": "appendIndent(builder, indentCount + 1).append(\"private Wrapper(com.mongodb.DBObject backing)", "code": "{\\n\");\nappendIndent(builder, indentCount + 2).append(\"_backing = backing;\\n\");\nappendIndent(builder, indentCount + 1).append(\"}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\TypeGenerator.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "/**\n * Ensure every path to generate is being generated.\n */\n", "func_signal": "@Test\npublic void multiplePaths()", "code": "{\n    //Generate source files\n    GENERATOR.generate(SCHEMA_PERSON, SCHEMA_VEHICLE);\n\n    //Test for class in root of directory\n\tfinal File person = new File(OUTPUT_PERSON);\n    Assert.assertTrue(person.exists());\n\n    //Test for class stored in subdirectory\n\tfinal File vehicle = new File(OUTPUT_VEHICLE);\n    Assert.assertTrue(vehicle.exists());\n}", "path": "src\\test\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\GuiceyDataGeneratorTest.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"comment\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:59:1: comment : (~ ( '*/' ) )* ;\n", "func_signal": "public final GuiceyDataParser.comment_return comment() throws RecognitionException", "code": "{\n    GuiceyDataParser.comment_return retval = new GuiceyDataParser.comment_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token set34=null;\n\n    Object set34_tree=null;\n\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:60:2: ( (~ ( '*/' ) )* )\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:60:4: (~ ( '*/' ) )*\n        {\n        root_0 = (Object)adaptor.nil();\n\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:60:4: (~ ( '*/' ) )*\n        loop14:\n        do {\n            int alt14=2;\n            switch ( input.LA(1) ) {\n            case DATA:\n            case TYPE_MAP:\n            case TYPE_SET:\n            case TYPE_LIST:\n            case PARAMETERIZED_TYPE:\n            case TYPE_PRIMITIVE:\n            case PROPERTY:\n            case OPTION:\n            case COMMENT:\n            case PAIR:\n            case ENUM:\n            case ID:\n            case INT:\n            case FLOAT:\n            case STRING:\n            case TYPE:\n            case WS:\n            case EXPONENT:\n            case ESC_SEQ:\n            case HEX_DIGIT:\n            case UNICODE_ESC:\n            case OCTAL_ESC:\n            case 26:\n            case 27:\n            case 28:\n            case 29:\n            case 30:\n            case 32:\n            case 33:\n            case 34:\n            case 35:\n            case 36:\n            case 37:\n            case 38:\n            case 39:\n            case 40:\n            case 41:\n            case 42:\n            case 43:\n                {\n                alt14=1;\n                }\n                break;\n\n            }\n\n            switch (alt14) {\n        \tcase 1 :\n        \t    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:0:0: ~ ( '*/' )\n        \t    {\n        \t    set34=(Token)input.LT(1);\n        \t    if ( (input.LA(1)>=DATA && input.LA(1)<=30)||(input.LA(1)>=32 && input.LA(1)<=43) ) {\n        \t        input.consume();\n        \t        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set34));\n        \t        state.errorRecovery=false;state.failed=false;\n        \t    }\n        \t    else {\n        \t        if (state.backtracking>0) {state.failed=true; return retval;}\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        throw mse;\n        \t    }\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop14;\n            }\n        } while (true);\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"start\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:31:1: start : ( entry )+ EOF ;\n", "func_signal": "public final GuiceyDataParser.start_return start() throws RecognitionException", "code": "{\n    GuiceyDataParser.start_return retval = new GuiceyDataParser.start_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token EOF2=null;\n    GuiceyDataParser.entry_return entry1 = null;\n\n\n    Object EOF2_tree=null;\n\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:32:2: ( ( entry )+ EOF )\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:32:4: ( entry )+ EOF\n        {\n        root_0 = (Object)adaptor.nil();\n\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:32:4: ( entry )+\n        int cnt1=0;\n        loop1:\n        do {\n            int alt1=2;\n            switch ( input.LA(1) ) {\n            case DATA:\n            case ENUM:\n            case 30:\n                {\n                alt1=1;\n                }\n                break;\n\n            }\n\n            switch (alt1) {\n        \tcase 1 :\n        \t    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:0:0: entry\n        \t    {\n        \t    pushFollow(FOLLOW_entry_in_start121);\n        \t    entry1=entry();\n\n        \t    state._fsp--;\n        \t    if (state.failed) return retval;\n        \t    if ( state.backtracking==0 ) adaptor.addChild(root_0, entry1.getTree());\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt1 >= 1 ) break loop1;\n        \t    if (state.backtracking>0) {state.failed=true; return retval;}\n                    EarlyExitException eee =\n                        new EarlyExitException(1, input);\n                    throw eee;\n            }\n            cnt1++;\n        } while (true);\n\n        EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_start124); if (state.failed) return retval;\n        if ( state.backtracking==0 ) {\n        EOF2_tree = (Object)adaptor.create(EOF2);\n        adaptor.addChild(root_0, EOF2_tree);\n        }\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "/**\n * Make sure that the enum JavaDocs are being properly generated.\n */\n", "func_signal": "@Test\npublic void enumJavaDoc()", "code": "{\n    //Generate source files\n    GENERATOR.generate(SCHEMA_PERSON);\n\n    //Test for class in root of directory\n\tfinal File person = new File(OUTPUT_PERSON);\n    Assert.assertTrue(person.exists());\n\n    try {\n\t\t\tfinal String contents = FileUtils.readFileToString(person);\n\t\t\tAssert.assertTrue(REGEX_JAVADOC_ENUM.matcher(contents).find());\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tAssert.fail(\"Could not read generated file.\");\n\t\t}\n}", "path": "src\\test\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\GuiceyDataGeneratorTest.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"option\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:63:1: option : ( '[' ID ']' -> ^( OPTION ID ) | '[' ID '(' value ')]' -> ^( OPTION ID value ) | '[' ID '(' ( pair ',' )* pair ')]' -> ^( OPTION ID ( pair )+ ) );\n", "func_signal": "public final GuiceyDataParser.option_return option() throws RecognitionException", "code": "{\n    GuiceyDataParser.option_return retval = new GuiceyDataParser.option_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token char_literal35=null;\n    Token ID36=null;\n    Token char_literal37=null;\n    Token char_literal38=null;\n    Token ID39=null;\n    Token char_literal40=null;\n    Token string_literal42=null;\n    Token char_literal43=null;\n    Token ID44=null;\n    Token char_literal45=null;\n    Token char_literal47=null;\n    Token string_literal49=null;\n    GuiceyDataParser.value_return value41 = null;\n\n    GuiceyDataParser.pair_return pair46 = null;\n\n    GuiceyDataParser.pair_return pair48 = null;\n\n\n    Object char_literal35_tree=null;\n    Object ID36_tree=null;\n    Object char_literal37_tree=null;\n    Object char_literal38_tree=null;\n    Object ID39_tree=null;\n    Object char_literal40_tree=null;\n    Object string_literal42_tree=null;\n    Object char_literal43_tree=null;\n    Object ID44_tree=null;\n    Object char_literal45_tree=null;\n    Object char_literal47_tree=null;\n    Object string_literal49_tree=null;\n    RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,\"token 32\");\n    RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,\"token 35\");\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,\"token 33\");\n    RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,\"token 34\");\n    RewriteRuleTokenStream stream_29=new RewriteRuleTokenStream(adaptor,\"token 29\");\n    RewriteRuleSubtreeStream stream_pair=new RewriteRuleSubtreeStream(adaptor,\"rule pair\");\n    RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,\"rule value\");\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:64:2: ( '[' ID ']' -> ^( OPTION ID ) | '[' ID '(' value ')]' -> ^( OPTION ID value ) | '[' ID '(' ( pair ',' )* pair ')]' -> ^( OPTION ID ( pair )+ ) )\n        int alt16=3;\n        switch ( input.LA(1) ) {\n        case 32:\n            {\n            switch ( input.LA(2) ) {\n            case ID:\n                {\n                switch ( input.LA(3) ) {\n                case 33:\n                    {\n                    alt16=1;\n                    }\n                    break;\n                case 34:\n                    {\n                    switch ( input.LA(4) ) {\n                    case INT:\n                    case FLOAT:\n                    case STRING:\n                        {\n                        alt16=2;\n                        }\n                        break;\n                    case ID:\n                        {\n                        alt16=3;\n                        }\n                        break;\n                    default:\n                        if (state.backtracking>0) {state.failed=true; return retval;}\n                        NoViableAltException nvae =\n                            new NoViableAltException(\"\", 16, 4, input);\n\n                        throw nvae;\n                    }\n\n                    }\n                    break;\n                default:\n                    if (state.backtracking>0) {state.failed=true; return retval;}\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 16, 2, input);\n\n                    throw nvae;\n                }\n\n                }\n                break;\n            default:\n                if (state.backtracking>0) {state.failed=true; return retval;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 16, 1, input);\n\n                throw nvae;\n            }\n\n            }\n            break;\n        default:\n            if (state.backtracking>0) {state.failed=true; return retval;}\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 16, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt16) {\n            case 1 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:64:4: '[' ID ']'\n                {\n                char_literal35=(Token)match(input,32,FOLLOW_32_in_option349); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_32.add(char_literal35);\n\n                ID36=(Token)match(input,ID,FOLLOW_ID_in_option351); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID36);\n\n                char_literal37=(Token)match(input,33,FOLLOW_33_in_option353); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_33.add(char_literal37);\n\n\n\n                // AST REWRITE\n                // elements: ID\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 64:15: -> ^( OPTION ID )\n                {\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:64:18: ^( OPTION ID )\n                    {\n                    Object root_1 = (Object)adaptor.nil();\n                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OPTION, \"OPTION\"), root_1);\n\n                    adaptor.addChild(root_1, stream_ID.nextNode());\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 2 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:65:4: '[' ID '(' value ')]'\n                {\n                char_literal38=(Token)match(input,32,FOLLOW_32_in_option366); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_32.add(char_literal38);\n\n                ID39=(Token)match(input,ID,FOLLOW_ID_in_option368); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID39);\n\n                char_literal40=(Token)match(input,34,FOLLOW_34_in_option370); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_34.add(char_literal40);\n\n                pushFollow(FOLLOW_value_in_option372);\n                value41=value();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_value.add(value41.getTree());\n                string_literal42=(Token)match(input,35,FOLLOW_35_in_option374); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_35.add(string_literal42);\n\n\n\n                // AST REWRITE\n                // elements: value, ID\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 65:26: -> ^( OPTION ID value )\n                {\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:65:29: ^( OPTION ID value )\n                    {\n                    Object root_1 = (Object)adaptor.nil();\n                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OPTION, \"OPTION\"), root_1);\n\n                    adaptor.addChild(root_1, stream_ID.nextNode());\n                    adaptor.addChild(root_1, stream_value.nextTree());\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 3 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:67:4: '[' ID '(' ( pair ',' )* pair ')]'\n                {\n                char_literal43=(Token)match(input,32,FOLLOW_32_in_option390); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_32.add(char_literal43);\n\n                ID44=(Token)match(input,ID,FOLLOW_ID_in_option392); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID44);\n\n                char_literal45=(Token)match(input,34,FOLLOW_34_in_option394); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_34.add(char_literal45);\n\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:67:15: ( pair ',' )*\n                loop15:\n                do {\n                    int alt15=2;\n                    switch ( input.LA(1) ) {\n                    case ID:\n                        {\n                        switch ( input.LA(2) ) {\n                        case 36:\n                            {\n                            switch ( input.LA(3) ) {\n                            case INT:\n                            case FLOAT:\n                            case STRING:\n                                {\n                                switch ( input.LA(4) ) {\n                                case 29:\n                                    {\n                                    alt15=1;\n                                    }\n                                    break;\n\n                                }\n\n                                }\n                                break;\n\n                            }\n\n                            }\n                            break;\n\n                        }\n\n                        }\n                        break;\n\n                    }\n\n                    switch (alt15) {\n                \tcase 1 :\n                \t    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:67:16: pair ','\n                \t    {\n                \t    pushFollow(FOLLOW_pair_in_option397);\n                \t    pair46=pair();\n\n                \t    state._fsp--;\n                \t    if (state.failed) return retval;\n                \t    if ( state.backtracking==0 ) stream_pair.add(pair46.getTree());\n                \t    char_literal47=(Token)match(input,29,FOLLOW_29_in_option399); if (state.failed) return retval; \n                \t    if ( state.backtracking==0 ) stream_29.add(char_literal47);\n\n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop15;\n                    }\n                } while (true);\n\n                pushFollow(FOLLOW_pair_in_option403);\n                pair48=pair();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_pair.add(pair48.getTree());\n                string_literal49=(Token)match(input,35,FOLLOW_35_in_option405); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_35.add(string_literal49);\n\n\n\n                // AST REWRITE\n                // elements: pair, ID\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 67:37: -> ^( OPTION ID ( pair )+ )\n                {\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:67:40: ^( OPTION ID ( pair )+ )\n                    {\n                    Object root_1 = (Object)adaptor.nil();\n                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OPTION, \"OPTION\"), root_1);\n\n                    adaptor.addChild(root_1, stream_ID.nextNode());\n                    if ( !(stream_pair.hasNext()) ) {\n                        throw new RewriteEarlyExitException();\n                    }\n                    while ( stream_pair.hasNext() ) {\n                        adaptor.addChild(root_1, stream_pair.nextTree());\n\n                    }\n                    stream_pair.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"value_type\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:99:1: value_type : type ;\n", "func_signal": "public final GuiceyDataParser.value_type_return value_type() throws RecognitionException", "code": "{\n    GuiceyDataParser.value_type_return retval = new GuiceyDataParser.value_type_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    GuiceyDataParser.type_return type61 = null;\n\n\n\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:100:2: ( type )\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:100:4: type\n        {\n        root_0 = (Object)adaptor.nil();\n\n        pushFollow(FOLLOW_type_in_value_type541);\n        type61=type();\n\n        state._fsp--;\n        if (state.failed) return retval;\n        if ( state.backtracking==0 ) adaptor.addChild(root_0, type61.getTree());\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"value\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:77:1: value : ( INT | FLOAT | STRING );\n", "func_signal": "public final GuiceyDataParser.value_return value() throws RecognitionException", "code": "{\n    GuiceyDataParser.value_return retval = new GuiceyDataParser.value_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token set54=null;\n\n    Object set54_tree=null;\n\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:78:2: ( INT | FLOAT | STRING )\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:\n        {\n        root_0 = (Object)adaptor.nil();\n\n        set54=(Token)input.LT(1);\n        if ( (input.LA(1)>=INT && input.LA(1)<=STRING) ) {\n            input.consume();\n            if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set54));\n            state.errorRecovery=false;state.failed=false;\n        }\n        else {\n            if (state.backtracking>0) {state.failed=true; return retval;}\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            throw mse;\n        }\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// Delegated rules\n", "func_signal": "public final boolean synpred21_GuiceyData()", "code": "{\n    state.backtracking++;\n    int start = input.mark();\n    try {\n        synpred21_GuiceyData_fragment(); // can never throw exception\n    } catch (RecognitionException re) {\n        System.err.println(\"impossible: \"+re);\n    }\n    boolean success = !state.failed;\n    input.rewind(start);\n    state.backtracking--;\n    state.failed=false;\n    return success;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"key\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:74:1: key : ID ;\n", "func_signal": "public final GuiceyDataParser.key_return key() throws RecognitionException", "code": "{\n    GuiceyDataParser.key_return retval = new GuiceyDataParser.key_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token ID53=null;\n\n    Object ID53_tree=null;\n\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:75:2: ( ID )\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:75:4: ID\n        {\n        root_0 = (Object)adaptor.nil();\n\n        ID53=(Token)match(input,ID,FOLLOW_ID_in_key454); if (state.failed) return retval;\n        if ( state.backtracking==0 ) {\n        ID53_tree = (Object)adaptor.create(ID53);\n        adaptor.addChild(root_0, ID53_tree);\n        }\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "/**\n * Perform necessary set up tasks before each test runs.\n */\n", "func_signal": "@Before\npublic void setUp()", "code": "{\n    \t//Configure com.mattinsler.guiceymongo.data.generator\n        GENERATOR.setSourceDirectory(OUTPUT);\n        GENERATOR.setOutputPackage(PACKAGE);\n        GENERATOR.setFileExtensions(FILE_EXTENSION);\n\n        try {\n        \t//Delete anything in the output directory\n\t\tFileUtils.deleteDirectory(new File(OUTPUT));\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\tAssert.fail(\"Could not clear output directory for test.\");\n\t}\n}", "path": "src\\test\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\GuiceyDataGeneratorTest.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"key_type\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:95:1: key_type : type ;\n", "func_signal": "public final GuiceyDataParser.key_type_return key_type() throws RecognitionException", "code": "{\n    GuiceyDataParser.key_type_return retval = new GuiceyDataParser.key_type_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    GuiceyDataParser.type_return type60 = null;\n\n\n\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:96:2: ( type )\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:96:4: type\n        {\n        root_0 = (Object)adaptor.nil();\n\n        pushFollow(FOLLOW_type_in_key_type530);\n        type60=type();\n\n        state._fsp--;\n        if (state.failed) return retval;\n        if ( state.backtracking==0 ) adaptor.addChild(root_0, type60.getTree());\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "// $ANTLR start \"property\"\n// com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:83:1: property : ( type 'data;' -> ^( PROPERTY 'data' type ) | type ID ';' -> ^( PROPERTY ID type ) );\n", "func_signal": "public final GuiceyDataParser.property_return property() throws RecognitionException", "code": "{\n    GuiceyDataParser.property_return retval = new GuiceyDataParser.property_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token string_literal56=null;\n    Token ID58=null;\n    Token char_literal59=null;\n    GuiceyDataParser.type_return type55 = null;\n\n    GuiceyDataParser.type_return type57 = null;\n\n\n    Object string_literal56_tree=null;\n    Object ID58_tree=null;\n    Object char_literal59_tree=null;\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,\"token 37\");\n    RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,\"token 38\");\n    RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,\"rule type\");\n    try {\n        // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:91:2: ( type 'data;' -> ^( PROPERTY 'data' type ) | type ID ';' -> ^( PROPERTY ID type ) )\n        int alt17=2;\n        switch ( input.LA(1) ) {\n        case 39:\n            {\n            int LA17_1 = input.LA(2);\n\n            if ( (synpred21_GuiceyData()) ) {\n                alt17=1;\n            }\n            else if ( (true) ) {\n                alt17=2;\n            }\n            else {\n                if (state.backtracking>0) {state.failed=true; return retval;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 17, 1, input);\n\n                throw nvae;\n            }\n            }\n            break;\n        case 41:\n            {\n            int LA17_2 = input.LA(2);\n\n            if ( (synpred21_GuiceyData()) ) {\n                alt17=1;\n            }\n            else if ( (true) ) {\n                alt17=2;\n            }\n            else {\n                if (state.backtracking>0) {state.failed=true; return retval;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 17, 2, input);\n\n                throw nvae;\n            }\n            }\n            break;\n        case 42:\n            {\n            int LA17_3 = input.LA(2);\n\n            if ( (synpred21_GuiceyData()) ) {\n                alt17=1;\n            }\n            else if ( (true) ) {\n                alt17=2;\n            }\n            else {\n                if (state.backtracking>0) {state.failed=true; return retval;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 17, 3, input);\n\n                throw nvae;\n            }\n            }\n            break;\n        case TYPE:\n            {\n            int LA17_4 = input.LA(2);\n\n            if ( (synpred21_GuiceyData()) ) {\n                alt17=1;\n            }\n            else if ( (true) ) {\n                alt17=2;\n            }\n            else {\n                if (state.backtracking>0) {state.failed=true; return retval;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 17, 4, input);\n\n                throw nvae;\n            }\n            }\n            break;\n        case ID:\n            {\n            int LA17_5 = input.LA(2);\n\n            if ( (synpred21_GuiceyData()) ) {\n                alt17=1;\n            }\n            else if ( (true) ) {\n                alt17=2;\n            }\n            else {\n                if (state.backtracking>0) {state.failed=true; return retval;}\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 17, 5, input);\n\n                throw nvae;\n            }\n            }\n            break;\n        default:\n            if (state.backtracking>0) {state.failed=true; return retval;}\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 17, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt17) {\n            case 1 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:91:4: type 'data;'\n                {\n                pushFollow(FOLLOW_type_in_property488);\n                type55=type();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_type.add(type55.getTree());\n                string_literal56=(Token)match(input,37,FOLLOW_37_in_property490); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_37.add(string_literal56);\n\n\n\n                // AST REWRITE\n                // elements: DATA, type\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 91:17: -> ^( PROPERTY 'data' type )\n                {\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:91:20: ^( PROPERTY 'data' type )\n                    {\n                    Object root_1 = (Object)adaptor.nil();\n                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROPERTY, \"PROPERTY\"), root_1);\n\n                    adaptor.addChild(root_1, (Object)adaptor.create(DATA, \"DATA\"));\n                    adaptor.addChild(root_1, stream_type.nextTree());\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n            case 2 :\n                // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:92:4: type ID ';'\n                {\n                pushFollow(FOLLOW_type_in_property505);\n                type57=type();\n\n                state._fsp--;\n                if (state.failed) return retval;\n                if ( state.backtracking==0 ) stream_type.add(type57.getTree());\n                ID58=(Token)match(input,ID,FOLLOW_ID_in_property507); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_ID.add(ID58);\n\n                char_literal59=(Token)match(input,38,FOLLOW_38_in_property509); if (state.failed) return retval; \n                if ( state.backtracking==0 ) stream_38.add(char_literal59);\n\n\n\n                // AST REWRITE\n                // elements: ID, type\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                if ( state.backtracking==0 ) {\n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (Object)adaptor.nil();\n                // 92:16: -> ^( PROPERTY ID type )\n                {\n                    // com/mattinsler/guiceymongo/data/generator/parser/GuiceyData.g:92:19: ^( PROPERTY ID type )\n                    {\n                    Object root_1 = (Object)adaptor.nil();\n                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROPERTY, \"PROPERTY\"), root_1);\n\n                    adaptor.addChild(root_1, stream_ID.nextNode());\n                    adaptor.addChild(root_1, stream_type.nextTree());\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;}\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        if ( state.backtracking==0 ) {\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\main\\java\\com\\mattinsler\\guiceymongo\\data\\generator\\parser\\GuiceyDataParser.java", "repo_name": "mattinsler/guiceymongo-generator", "stars": 10, "license": "None", "language": "java", "size": 185}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.pidster.tomcat.util.cli.AbstractCommand#cleanup()\n */\n", "func_signal": "@Override\npublic void cleanup()", "code": "{\n    log(\"- TEST CLEANUP -------------------------------------------------------------- \\n\");\n    super.cleanup();\n    log(\"- TEST ENDS ----------------------------------------------------------------- \\n\");\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\TestJMXCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.pidster.tomcat.util.cli.AbstractCommand#configure(org.pidster.tomcat\n * .util.cli.CommandConfig)\n */\n", "func_signal": "@Override\npublic void configure(CommandConfig config) throws CommandException", "code": "{\n    super.configure(config);\n    log(\"- TEST STARTS --------------------------------------------------------------- \\n\");\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\TestCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.pidster.tomcat.util.cli.AbstractCommand#configure()\n */\n", "func_signal": "@Override\nprotected void configure() throws CommandException", "code": "{\n    log(\"- TEST CONFIG --------------------------------------------------------------- \\n\");\n    super.configure();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\TestCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param uptime\n * @return\n */\n", "func_signal": "public static String formatUptime(Long uptime)", "code": "{\n\n    Long days = (uptime) / UNIT_DAY;\n    Long hours = (uptime - (days * UNIT_DAY)) / UNIT_HOUR;\n    Long minutes = (uptime - ((days * UNIT_DAY) + (hours * UNIT_HOUR)))\n            / UNIT_MINUTE;\n    Long seconds = (uptime - ((days * UNIT_DAY) + (hours * UNIT_HOUR) + (minutes * UNIT_MINUTE)))\n            / UNIT_SECOND;\n    Long millis = (uptime - ((days * UNIT_DAY) + (hours * UNIT_HOUR)\n            + (minutes * UNIT_MINUTE) + (seconds * UNIT_SECOND))) / (1);\n\n    StringBuilder s = new StringBuilder();\n\n    if (days > 0) {\n        s.append(days);\n        s.append(\"d \");\n    }\n    if (hours > 0) {\n        s.append(hours);\n        s.append(\"h \");\n    }\n    if (minutes > 0) {\n        s.append(minutes);\n        s.append(\"m \");\n    }\n    if (seconds > 0) {\n        s.append(seconds);\n        s.append(\"s \");\n    }\n    if (millis > 0) {\n        s.append(millis);\n        s.append(\"ms\");\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\util\\DateTime.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param engineName\n * @param engine\n * @return hosts\n * @throws IOException\n * @throws JMXException\n */\n", "func_signal": "private String hosts(String engineName, ObjectName engine)\n        throws RuntimeException, IOException", "code": "{\n    StringBuilder s = new StringBuilder();\n\n    SortedSet<ObjectName> hosts = query(engineName + \":type=Host,host=*\");\n\n    for (ObjectName host : hosts) {\n\n        String hostname = (String) attribute(host, \"name\");\n\n        if (getConfig().isOptionSet(\"hostname\")) {\n            if (!getConfig().getOptionValue(\"hostname\").equals(hostname))\n                continue;\n        }\n\n        s.append(\"\\n  Host:\");\n        s.append(hostname);\n\n        String[] aliases = (String[]) attribute(host, \"aliases\");\n        ObjectName[] webapps = (ObjectName[]) attribute(host, \"children\");\n\n        if (super.getConfig().isOptionSet(\"verbose\")) {\n            s.append(\"\\n   Aliases[\");\n            boolean first = true;\n            for (String alias : aliases) {\n                if (!first)\n                    s.append(\",\");\n                s.append(alias);\n                first = false;\n            }\n            s.append(\"]\");\n        }\n\n        if ((getConfig().isOptionSet(\"webapps\") || getConfig().isOptionSet(\n                \"webapp\"))\n                && (webapps.length > 0)) {\n            s.append(webapps(engineName, hostname, webapps));\n            if (hosts.size() > 1) {\n                s.append(\"\\n\");\n            }\n        }\n        else {\n            if (getConfig().isOptionSet(\"verbose\")) {\n                s.append(\"\\n   \");\n            }\n            else {\n                s.append(\" - \");\n            }\n            s.append(webapps.length);\n            s.append(\" applications\");\n        }\n\n    }\n\n    return s.toString();\n\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.pidster.tomcat.util.cli.CommandConfig#getOptionValue(java.lang.String\n * )\n */\n", "func_signal": "@Override\npublic final String getOptionValue(String name)", "code": "{\n    for (Option option : options.keySet()) {\n        if (option.name().equals(name)) {\n            return options.get(option);\n        }\n    }\n    return null;\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\impl\\CommandConfigImpl.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param executors\n * @return content\n */\n", "func_signal": "private String executors(SortedSet<ObjectName> executors)", "code": "{\n    StringBuilder s = new StringBuilder();\n\n    if (executors.size() > 0) {\n\n        for (ObjectName executor : executors) {\n\n            String name = (String) attribute(executor, \"name\");\n            int activeCount = (Integer) attribute(executor, \"activeCount\");\n            int maxThreads = (Integer) attribute(executor, \"maxThreads\");\n            int minSpareThreads = (Integer) attribute(executor,\n                    \"minSpareThreads\");\n\n            int queueSize = (Integer) attribute(executor, \"queueSize\");\n            int poolSize = (Integer) attribute(executor, \"poolSize\");\n            int corePoolSize = (Integer) attribute(executor, \"corePoolSize\");\n            int largestPoolSize = (Integer) attribute(executor,\n                    \"largestPoolSize\");\n\n            s.append(\"\\n  Executor: \");\n            s.append(name);\n            s.append(String\n                    .format(\" [active:%d, pool:%d, init:%d, largest:%d, max:%d, spare:%d; queue:%d]\",\n                            activeCount, poolSize, corePoolSize,\n                            largestPoolSize, maxThreads, minSpareThreads,\n                            queueSize));\n        }\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param engineName\n * @param engine\n * @return engine\n * @throws IOException\n * @throws JMXException\n */\n", "func_signal": "private String connectors(String engineName, ObjectName engine)\n        throws RuntimeException, IOException", "code": "{\n    StringBuilder s = new StringBuilder();\n\n    SortedSet<ObjectName> executors = query(engineName + \":type=Executor,*\");\n\n    if (executors.size() > 0) {\n        s.append(executors(executors));\n    }\n\n    SortedSet<ObjectName> connectors = query(engineName\n            + \":type=Connector,*\");\n\n    for (ObjectName connector : connectors) {\n        String address = (String) attribute(connector, \"address\");\n        Integer port = (Integer) attribute(connector, \"port\");\n\n        SortedSet<ObjectName> protocolHandlers = query(engineName\n                + \":type=ProtocolHandler,port=\" + port);\n        ObjectName protocolHandler = protocolHandlers.first();\n        String name = (String) attribute(protocolHandler, \"name\");\n\n        s.append(String.format(\"\\n  Connector:%-8s [\",\n                attribute(connector, \"protocol\")));\n\n        if (address == null) {\n            address = \"0.0.0.0\";\n        }\n\n        s.append(String.format(\"%s::%s:%s, secure=%s, redirect=%s]\",\n                attribute(connector, \"scheme\"), address, port,\n                attribute(connector, \"secure\"),\n                attribute(connector, \"redirectPort\")));\n\n        if (super.getConfig().isOptionSet(\"threads\")) {\n            SortedSet<ObjectName> threadPools = query(engineName\n                    + \":type=ThreadPool,name=\" + name);\n            s.append(threads(engineName, threadPools));\n        }\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.pidster.tomcat.util.cli.AbstractCommand#cleanup()\n */\n", "func_signal": "@Override\npublic void cleanup()", "code": "{\n    log(\"- TEST CLEANUP -------------------------------------------------------------- \\n\");\n    super.cleanup();\n    log(\"- TEST ENDS ----------------------------------------------------------------- \\n\");\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\TestCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param environment\n * @param environment\n * @param arguments\n * @param options\n */\n", "func_signal": "public CommandConfigImpl(Environment environment, String name,\n        List<String> arguments, Map<Option, String> options)", "code": "{\n    this.environment = environment;\n    this.name = name;\n    this.arguments = arguments;\n    this.options = options;\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\impl\\CommandConfigImpl.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param threadPools\n * @return thread info\n * @throws IOException\n */\n", "func_signal": "private String threads(String engine, SortedSet<ObjectName> threadPools)\n        throws IOException", "code": "{\n\n    StringBuilder s = new StringBuilder();\n\n    if (threadPools.size() >= 1) {\n\n        for (ObjectName pool : threadPools) {\n            String name = attribute(pool, \"name\");\n            s.append(\"\\n  Pool[\");\n            s.append(name);\n            s.append(\"]\");\n\n            String processorQuery = engine\n                    + \":type=RequestProcessor,worker=\" + name + \",name=*\";\n\n            SortedSet<ObjectName> processors = query(processorQuery);\n\n            s.append(\"\\n   sent ------- recd ----- reqs ---- errors -- maxtime - proctime - maxURI -----------\");\n            for (ObjectName rp : processors) {\n                s.append(String.format(\n                        \"\\n   %-12s %-10s %-9s %-9s %-9s %-9s  %s\",\n                        attribute(rp, \"bytesSent\"),\n                        attribute(rp, \"bytesReceived\"),\n                        attribute(rp, \"requestCount\"),\n                        attribute(rp, \"errorCount\"),\n                        attribute(rp, \"maxTime\"),\n                        attribute(rp, \"processingTime\"),\n                        attribute(rp, \"maxRequestUri\")));\n            }\n        }\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param webapps\n * @return\n * @throws IOException\n */\n", "func_signal": "private String webapps(String engineName, String hostname,\n        ObjectName[] webapps) throws IOException", "code": "{\n\n    StringBuilder s = new StringBuilder();\n\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n    if (isVerbose()) {\n        s.append(\"\\n   application ---- path ------------ state sessions - total ---- proctime init -- tldscan ----------- started\");\n    }\n    else {\n        s.append(\"\\n   application ---- path ------------ state sessions - startup ------------ started\");\n    }\n\n    for (ObjectName webapp : webapps) {\n\n        // Hacks to get around v6.0 to v7.0 transition\n        Object stateObj = attribute(webapp, \"state\");\n\n        String appState = \"unknown\";\n        if (stateObj instanceof Integer) {\n            appState = WEBAPP_STATES[(Integer) stateObj];\n        }\n        else if (stateObj.getClass().isEnum()) {\n            appState = ((Enum<?>) stateObj).name().toLowerCase();\n        }\n\n        if (\"stopped\".equalsIgnoreCase(appState)) {\n            appState = appState + \"!\";\n        }\n\n        String path = \"\";\n        String started = \"\";\n        String docBase = (String) attribute(webapp, \"docBase\");\n\n        if (getConfig().isOptionSet(\"webapp\")) {\n            if (!getConfig().getOptionValue(\"webapp\").equals(docBase))\n                continue;\n        }\n\n        s.append(\"\\n   \");\n\n        // ------------------------------------------------------\n\n        String activeSessions = \"\";\n        String totalSessions = \"\";\n        String processingTime = \"\";\n        String initTime = \"\";\n        String startupTime = \"\";\n        String tldScanTime = \"\";\n\n        if (\"STARTED\".equalsIgnoreCase(appState)) {\n            appState = \"ok\";\n            path = (String) attribute(webapp, \"path\");\n            Long startTime = (Long) attribute(webapp, \"startTime\");\n            started = sdf.format(new Date(startTime));\n\n            if (path.isEmpty())\n                path = \"/\";\n\n            String query = engineName + \":type=Manager,path=\" + path\n                    + \",host=\" + hostname;\n\n            SortedSet<ObjectName> managers = query(query);\n            ObjectName manager = managers.first();\n\n            activeSessions = String.valueOf(attribute(manager,\n                    \"activeSessions\"));\n            totalSessions = String.valueOf(attribute(manager,\n                    \"sessionCounter\"));\n\n            processingTime = String.valueOf(attribute(manager,\n                    \"processingTime\"));\n\n            startupTime = attribute(webapp, \"startupTime\") + \"ms\";\n            tldScanTime = attribute(webapp, \"tldScanTime\") + \"ms\";\n            initTime = ((Long) attribute(webapp, \"startupTime\") + (Long) attribute(\n                    webapp, \"tldScanTime\")) + \"ms\";\n\n        }\n\n        if (isVerbose()) {\n            s.append(String.format(\n                    \"%-16s %-17s %-5s %-10s %-10s %-8s %-7s %-6s %20s\",\n                    docBase, path, appState, activeSessions, totalSessions,\n                    processingTime, startupTime, tldScanTime, started));\n        }\n        else {\n            s.append(String.format(\"%-16s %-17s %-5s %-10s %-7s %20s\",\n                    docBase, path, appState, activeSessions, initTime,\n                    started));\n        }\n\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.pidster.tomcat.util.cli.AbstractCommand#configure()\n */\n", "func_signal": "@Override\nprotected void configure() throws CommandException", "code": "{\n    log(\"- TEST CONFIG --------------------------------------------------------------- \\n\");\n    super.configure();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\TestJMXCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.pidster.tomcat.util.cli.CommandConfig#isOptionSet(java.lang.String)\n */\n", "func_signal": "@Override\npublic final boolean isOptionSet(String name)", "code": "{\n    for (Option option : options.keySet()) {\n        if (option.name().equals(name)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\impl\\CommandConfigImpl.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param service\n * @return str\n * @throws IOException\n * @throws JMXException\n */\n", "func_signal": "private String engines(ObjectName service) throws RuntimeException,\n        IOException", "code": "{\n\n    StringBuilder s = new StringBuilder();\n\n    SortedSet<ObjectName> engines = query(service.getDomain()\n            + \":type=Engine\");\n\n    for (ObjectName engine : engines) {\n\n        String engineName = (String) attribute(engine, \"name\");\n\n        s.append(String.format(\"\\n Engine:%1s\", engineName));\n\n        s.append(\" [\");\n        s.append(\"defaultHost=\");\n        s.append(attribute(engine, \"defaultHost\"));\n\n        Object jvmRoute = attribute(engine, \"jvmRoute\");\n        if (jvmRoute != null) {\n            s.append(\", jvmRoute=\");\n            s.append(jvmRoute);\n        }\n        if (super.getConfig().isOptionSet(\"verbose\")) {\n            s.append(\", baseDir=\");\n            s.append(attribute(engine, \"baseDir\"));\n\n        }\n        s.append(\"]\");\n        s.append(\"\");\n\n        if (super.getConfig().isOptionSet(\"connectors\")) {\n            s.append(connectors(engineName, engine));\n        }\n\n        s.append(hosts(engineName, engine));\n\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.pidster.tomcat.util.cli.AbstractCommand#execute(org.apache.tomcat.\n * util.cli .Environment)\n */\n", "func_signal": "@Override\npublic void execute() throws CommandException", "code": "{\n\n    try {\n        ObjectName server = query(\"*:type=Server\").first();\n\n        StringBuilder s = new StringBuilder();\n\n        s.append(\"Server: \");\n        s.append(server.getDomain());\n\n        if (isVerbose()) {\n            s.append(\"[\");\n            s.append(attribute(server, \"shutdown\"));\n            s.append(\">\");\n            s.append(attribute(server, \"port\"));\n            s.append(\"]\");\n        }\n\n        s.append(datasources(server));\n\n        s.append(services());\n\n        log(s.toString());\n    }\n    catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.pidster.tomcat.util.cli.AbstractCommand#configure(org.pidster.tomcat\n * .util.cli.CommandConfig)\n */\n", "func_signal": "@Override\npublic void configure(CommandConfig config) throws CommandException", "code": "{\n    super.configure(config);\n    log(\"- TEST STARTS --------------------------------------------------------------- \\n\");\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\TestJMXCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.pidster.tomcat.util.cli.CommandConfig#getOption(java.lang.String)\n */\n", "func_signal": "@Override\npublic final Option getOption(String name)", "code": "{\n    for (Option option : options.keySet()) {\n        if (option.name().equals(name)) {\n            return option;\n        }\n    }\n    return null;\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\impl\\CommandConfigImpl.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @return services\n * @throws IOException\n * @throws JMXException\n */\n", "func_signal": "private String services() throws RuntimeException, IOException", "code": "{\n\n    StringBuilder s = new StringBuilder();\n    SortedSet<ObjectName> names = query(\"*:type=Service,*\", null);\n\n    if (names.size() == 0) {\n        s.append(\"\\n\");\n        s.append(names.size());\n        s.append(\" services found.\");\n    }\n\n    for (ObjectName service : names) {\n        s.append(String.format(\"\\nService:%1s\", attribute(service, \"name\")));\n\n        s.append(engines(service));\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * @param server\n * @param s\n * @throws IOException\n * @throws RuntimeException\n */\n", "func_signal": "private String datasources(ObjectName server) throws IOException,\n        RuntimeException", "code": "{\n\n    StringBuilder s = new StringBuilder();\n\n    SortedSet<ObjectName> globalResources = query(server.getDomain()\n            + \":type=Resource,resourcetype=Global,*\");\n\n    if (getConfig().isOptionSet(\"datasources\")\n            && globalResources.size() > 0) {\n        s.append(\"\\nGlobal Resources:\");\n        for (ObjectName global : globalResources) {\n\n            String name = attribute(global, \"name\");\n            String type = attribute(global, \"type\");\n\n            String dsq = server.getDomain() + \":type=DataSource,name=\\\"\"\n                    + name + \"\\\",class=\" + type;\n\n            SortedSet<ObjectName> dataSources = query(dsq, null);\n            for (ObjectName ds : dataSources) {\n                s.append(String\n                        .format(\"\\n %-25s[init:%s, now:%s, mxA:%s, idl:%s, mnI:%s, mxI:%s]\",\n                                name, attribute(ds, \"initialSize\"), 0,\n                                attribute(ds, \"numActive\"),\n                                attribute(ds, \"maxActive\"),\n                                attribute(ds, \"numIdle\"),\n                                attribute(ds, \"minIdle\"),\n                                attribute(ds, \"maxIdle\")));\n                if (isVerbose()) {\n                    s.append(\"\\n - \");\n                    s.append(attribute(ds, \"url\"));\n                }\n            }\n        }\n    }\n\n    return s.toString();\n}", "path": "java\\src\\org\\pidster\\tomcat\\util\\cli\\commands\\StatusCommand.java", "repo_name": "pidster/Tomcat-CLI", "stars": 8, "license": "None", "language": "java", "size": 309}
{"docstring": "/**\n * Draws a circle representing an agent's political views location and lines representing the groups\n * @param g Graphics objects\n * @param agent_c colour of the lines joining the agents\n * @param players TreeMap of the AbstractAgents to draw\n */\n", "func_signal": "private void drawGroupLines(Graphics g, Color agent_c,\n\t\t\t\tTreeMap<String, AbstractAgent> players)", "code": "{\n\tdouble x1, y1, x2, y2;\n\tRectangle rect = g.getClipBounds();\n\tint size = 0;\n\n\tfor (Map.Entry<String, AbstractAgent> entry1 : players.entrySet())\n\t{\n\t\tPublicAgentDataModel agent1_dm = entry1.getValue().getDataModel();\n\n\t\tif (agent1_dm.getGroupId() != null && PublicEnvironmentConnection.getInstance().getGroupById(\n\t\t\t\t\t\tagent1_dm.getGroupId()).getMemberList().size() > 1)\n\t\t{\n\n\t\t\tfor (Map.Entry<String, AbstractAgent> entry2 : players.entrySet())\n\t\t\t{\n\t\t\t\tPublicAgentDataModel agent2_dm = entry2.getValue().getDataModel();\n\n\t\t\t\tif (agent2_dm.getGroupId() != null)\n\t\t\t\t{\n\t\t\t\t\tif (!entry1.getKey().equals(entry2.getKey()) && agent1_dm.getGroupId().equals(\n\t\t\t\t\t\t\t\t\tagent2_dm.getGroupId()))\n\t\t\t\t\t{\n\t\t\t\t\t\tg.setColor(agent_c);\n\t\t\t\t\t\tx1 = agent1_dm.getEconomicBelief() * (rect.width / correction);\n\t\t\t\t\t\tx2 = agent2_dm.getEconomicBelief() * (rect.width / correction);\n\t\t\t\t\t\ty1 = agent1_dm.getSocialBelief() * (rect.height / correction);\n\t\t\t\t\t\ty2 = agent2_dm.getSocialBelief() * (rect.height / correction);\n\t\t\t\t\t\tg.drawLine((int)x1 + 1, (int)y1 + 1, (int)x2 + 1, (int)y2 + 1);\n\t\t\t\t\t\tsize = PublicEnvironmentConnection.getInstance().getGroupById(\n\t\t\t\t\t\t\t\t\t\tagent1_dm.getGroupId()).getMemberList().size();\n\n\t\t\t\t\t\tfloat hue = getGroupColour(agent1_dm.getGroupId());\n\t\t\t\t\t\tg.setColor(Color.getHSBColor(hue, 1, 1));\n\t\t\t\t\t\tboolean ldr = false;\n\t\t\t\t\t\tfor (String LeaderId : PublicEnvironmentConnection.getInstance().getGroupById(\n\t\t\t\t\t\t\t\t\t\tagent1_dm.getGroupId()).getPanel()) //draw if not a leader\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (LeaderId.equals(entry1.getValue().getId()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tldr = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!ldr)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdrawAgent(g, entry1.getValue(), 3);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Run per-step-in-simulation code that changes the plugin's state.\n * Get new information from the alive agents of the simulation\n */\n", "func_signal": "@Override\npublic void execute()", "code": "{\n\t// Add/remove new/old players\n\ttry\n\t{\n\t\tupdatePoliticalPlayers();\n\t}\n\tcatch (Exception e)\n\t{\n\t\tSystem.out.println(\"Error updating Political Players: \" + e.getMessage());\n\t}\n\n\trepaint();\n\n\tif (this.outputdirectory != null && (PublicEnvironmentConnection.getInstance().getRoundsPassed() % 50 == 0))\n\t{\n\t\twriteToPNG();\n\t}\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Removes an {@link AbstractAgent agents} or {@link AbstractGroupAgent group}\n * from the simulation\n * @param id The id of the participant to remove\n * @return Whether the {@link Participant} could be removed\n * @see #registerParticipant(ise.mace.tokens.RegistrationRequest)\n * @see UnregisterRequest\n * @see Death\n */\n", "func_signal": "public boolean removeParticipant(String id)", "code": "{\n\tif (agents.remove(id) == null)\n\t{\n\t\treturn (agentGroups.remove(id) != null);\n\t}\n\treturn true;\n}", "path": "src\\ise\\mace\\environment\\EnvironmentDataModel.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Generates a (possibly non-unique) player name\n * @return New player name\n */\n", "func_signal": "public synchronized static String getName()", "code": "{\n\tif (!hasRandomised)\n\t{\n\t\tsort(foreNames);\n\t\tsort(lastNames);\n\t\thasRandomised = true;\n\t}\n\tString fName = foreNames[foreNameIndex];\n\tString lName = lastNames[lastNameIndex];\n\n\tif (rand.nextBoolean())\n\t{\n\t\tforeNameIndex++;\n\t\tif (foreNameIndex == foreNames.length) foreNameIndex = 0;\n\t}\n\telse\n\t{\n\t\tlastNameIndex++;\n\t\tif (lastNameIndex == lastNames.length) lastNameIndex = 0;\n\t}\n\treturn fName + ' ' + lName;\n}", "path": "src\\ise\\mace\\models\\NameGenerator.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Finds what food types are available to hunt\n * @return set of available food.\n * @see #getFoodById(java.util.UUID)\n */\n", "func_signal": "public Set<Food> availableFoods()", "code": "{\n\treturn Collections.unmodifiableSet(new HashSet<Food>(\n\t\t\t\t\tavailableFoodTypes.values()));\n}", "path": "src\\ise\\mace\\environment\\EnvironmentDataModel.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Draws a rectangle representing an group-agent's political views location and lines representing the groups\n * @param g Graphics objects\n */\n", "func_signal": "private void drawAgentGroups(Graphics g)", "code": "{\n\ttry\n\t{\n\t\tif (!agent_groups.isEmpty())\n\t\t{\n\t\t\tdrawGroupLines(g, Color.BLUE, agent_groups);\n\t\t}\n\t}\n\tcatch (Exception e)\n\t{\n\t\tSystem.out.println(\"Error in agent-groups: \" + e.getMessage());\n\t}\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Initialises a plugin that was stored using the SimpleXML framework, making\n * it ready to be used in the visualisation of a simulation\n * @param sim The simulation to which this plugin will belong\n */\n", "func_signal": "@Override\npublic void initialise(Simulation sim)", "code": "{\n\tSystem.out.println(\" -Initialising Political Compass Plugin....\");\n\n\tthis.sim = sim;\n\tthis.en = (Environment)sim.environment;\n\tsetBackground(Color.CYAN);\n\n\trepaint();\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Creates a new environment data model for constructing an {@link\n * Environment} in a {@link Simulation}\n * @param environmentName The name to give the environment\n * @param availableFoodTypes The food that agents can hunt {@link\n * #availableFoods()}\n * @param allowedGroupTypes The groups for use. {@link\n * #getAllowedGroupTypes()}\n * @param foodConsumedPerAdvice Amount of food consumed when an {@link\n * AbstractAgent agent} {@link AbstractAgent#seekAvice(java.lang.String) seeks\n * adive}. See {@link #foodConsumedPerAdvice}\n */\n", "func_signal": "public EnvironmentDataModel(String environmentName,\n    HashMap<String, Food> availableFoodTypes,\n    ArrayList<Class<? extends AbstractGroupAgent>> allowedGroupTypes,\n    double foodConsumedPerAdvice)", "code": "{\n\tsuper(environmentName, \"ISE Game of Life Enviroment Data Model\", 0);\n\tthis.availableFoodTypes = availableFoodTypes;\n\n\tthis.agentGroups = new HashMap<String, PublicGroupDataModel>();\n\tthis.allowedGroupTypes = allowedGroupTypes;\n\n\tthis.turn = TurnType.firstTurn;\n\tthis.rounds = 0;\n\tthis.id = UUID.randomUUID().toString();\n}", "path": "src\\ise\\mace\\environment\\EnvironmentDataModel.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Updates the time in the model\n * @param time New cycle time\n */\n", "func_signal": "@Override\npublic void setTime(long time)", "code": "{\n\tsuper.setTime(time);\n\tif (time == 0)\n\t{\n\t\tturn = TurnType.firstTurn;\n\t\treturn;\n\t}\n\n\tTurnType[] t = TurnType.values();\n\n\tint next = turn.ordinal() + 1;\n\tif (next == t.length)\n\t{\n\t\tnext = 0;\n\t\trounds++;\n\t}\n\n\tturn = t[next];\n}", "path": "src\\ise\\mace\\environment\\EnvironmentDataModel.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Draws a rectangle representing an leaders's political views location\n * @param g Graphics objects\n * @param p_player AbstractAgent object to draw\n * @param size size of the group\n */\n", "func_signal": "private void drawRect(Graphics g, AbstractAgent p_player, int size)", "code": "{\n\tRectangle rect = g.getClipBounds();\n\tdouble x, y;\n\tString name;\n\t//name = p_player.getDataModel().getName() +\"[\" + p_player.getDataModel().getAgentType().name() + \"]\";\n\tname = \"[\" + p_player.getDataModel().getAgentType().name() + \"]\" + \" - \" + PublicEnvironmentConnection.getInstance().getGroupById(\n\t\t\t\t\tp_player.getDataModel().getGroupId()).getName();\n\n\tx = p_player.getDataModel().getEconomicBelief() * (rect.width / correction);\n\ty = p_player.getDataModel().getSocialBelief() * (rect.height / correction);\n\t//draw the agents\n\tg.fillRect((int)x - size, (int)y - size, size * 2, size * 2);\n\t//print the names\n\tg.setColor(Color.BLACK);\n\tg.drawString(name, (int)x, (int)y);\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Draw everything to the screen\n * @param g Graphics object\n */\n", "func_signal": "@Override\npublic void paint(Graphics g)", "code": "{\n\t// Clear everything and set the clip\n\tg.setColor(Color.LIGHT_GRAY);\n\tg.fillRect(0, 0, getWidth(), getHeight());\n\tg.setClip(shift, shift, getWidth() - shift, getHeight() - shift);\n\n\t// Draw social and economic axis\n\tRectangle rect = g.getClipBounds();\n\tg.setColor(Color.YELLOW);\n\tg.drawLine((int)(rect.width / (correction * 2)), 0,\n\t\t\t\t\t(int)(rect.width / (correction * 2)), rect.height);\n\tg.drawLine(0, (int)(rect.height / (correction * 2)), rect.width,\n\t\t\t\t\t(int)(rect.height / (correction * 2)));\n\n\n\n\t// Draw all agents agents\n\ttry\n\t{\n\t\tif (CompassControl.agent_button)\n\t\t{\n\t\t\tfor (Map.Entry<String, AbstractAgent> entry : p_players.entrySet())\n\t\t\t{\n\t\t\t\tg.setColor(Color.BLUE);\n\t\t\t\tif (entry.getValue().getDataModel().getGroupId() == null)\n\t\t\t\t\tdrawAgent(g, entry.getValue(), 2);\n\t\t\t}\n\n\t\t\t// Draw agent connections + groupped agents\n\n\t\t\tdrawGroupLines(g, Color.RED, p_players);\n\t\t\tdrawLeaders(g);\n\t\t}\n\t\tif (CompassControl.group_button)\n\t\t{\n\t\t\tdrawAgentGroups(g);\n\t\t}\n\n\t}\n\tcatch (Exception e)\n\t{\n\t\tSystem.out.println(\n\t\t\t\t\t\t\"Error in Drawing the agents,lines or groups: \" + e.getMessage());\n\t}\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Sets everything up\n * @param agent The agent that applied\n * @param accepted Whether they were accepted\n */\n", "func_signal": "public RespondToApplication(String agent, boolean accepted)", "code": "{\n\tthis.agent = agent;\n\tthis.accepted = accepted;\n}", "path": "src\\ise\\mace\\actions\\RespondToApplication.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Adds new players and removes dead players since the last cycle.\n */\n", "func_signal": "private void updatePoliticalPlayers()", "code": "{\n\tSortedSet<String> active_agent_ids = sim.getactiveParticipantIdSet();\n\n\t// Add any new agents\n\tfor (String id : active_agent_ids)\n\t{\n\t\tif (!p_players.containsKey(id))\n\t\t{\n\t\t\tif (PublicEnvironmentConnection.getInstance().isAgentId(id))\n\t\t\t\tp_players.put(id, (AbstractAgent)sim.getPlayer(id));\n\t\t\telse\n\t\t\t\tagent_groups.put(id, (AbstractAgent)sim.getPlayer(id));\n\t\t}\n\t}\n\n\t// Delete agents which are no longer active\n\tp_players.keySet().retainAll(active_agent_ids);\n\tagent_groups.keySet().retainAll(active_agent_ids);\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Build the automatically built classes\n * @param args Command line arguments - are ignored\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n\tfor (Class<?> c : simulationClasses)\n\t{\n\t\ttry\n\t\t{\n\t\t\tc.newInstance();\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tlogger.log(Level.SEVERE, null, ex);\n\t\t}\n\t}\n}", "path": "src\\ise\\mace\\BuildSimulations.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * {@inheritDoc}\n * @see ise.mace.neuralnetworks.Neuron#activationFunction(double, double)\n */\n", "func_signal": "@Override\npublic double activationFunction(double sum, double offset)", "code": "{\n\tif (sum > offset)\n\t{\n\t\treturn 1.0f;\n\t}\n\treturn 0.0f;\n}", "path": "src\\ise\\mace\\neuralnetworks\\StepNeuron.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/*\n * creates a group for free agents.\n */\n", "func_signal": "private void createFreeAgentGroup()", "code": "{\n\tint groupid = 0;\n\twrap.groupAdd(\"FreeAgentsGroup\", groupid, round);\n\t//required to allow idMap to work for agents with no group\n\tgroupIdMap.put(null, groupid);\n}", "path": "src\\ise\\mace\\plugins\\database\\DatabasePlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Creates a new hunt action, which indicates that an agent is going to hunt\n * a particular type of food\n * @param type The type of food to hunt\n */\n", "func_signal": "public Hunt(Food type)", "code": "{\n\tsuper();\n\tfoodType = type.getId();\n}", "path": "src\\ise\\mace\\actions\\Hunt.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Draws a circle representing an agent's political views location\n * @param g Graphics objects\n * @param p_player AbstractAgent object to draw\n * @param size size of the group\n */\n", "func_signal": "private void drawAgent(Graphics g, AbstractAgent p_player, int size)", "code": "{\n\tRectangle rect = g.getClipBounds();\n\tdouble x, y;\n\tString name;\n\t//name = p_player.getDataModel().getName() +\"[\" + p_player.getDataModel().getAgentType().name() + \"]\";\n\tif (p_player.getDataModel().getAgentType() == null)\n\t{\n\t\tname = \"No-Type\";\n\t}\n\telse\n\t{\n\t\tname = \"[\" + p_player.getDataModel().getAgentType().name() + \"]\";\n\t}\n\tx = p_player.getDataModel().getEconomicBelief() * (rect.width / correction);\n\ty = p_player.getDataModel().getSocialBelief() * (rect.height / correction);\n\t//draw the agents\n\tg.fillOval((int)x - size, (int)y - size, size * 2, size * 2);\n\t//print the names\n\tg.setColor(Color.MAGENTA);\n\tg.drawString(name, (int)x, (int)y);\n}", "path": "src\\ise\\mace\\plugins\\AgentPoliticalCompassPlugin.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Random sorting utility function\n * @param values The array to randomising\n */\n", "func_signal": "private static void sort(String[] values)", "code": "{\n\tint i;\n\tString temp;\n\tfor (i = 0; i < values.length; i++)\n\t{\n\t\tint r = (rand.nextInt() & 0x7FFFFFFF) % values.length;\n\t\ttemp = values[i];\n\t\tvalues[i] = values[r];\n\t\tvalues[r] = temp;\n\t}\n}", "path": "src\\ise\\mace\\models\\NameGenerator.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Creates a new Hunting team\n * Note that such teams are a subset of a group, and that agents cannot be in\n * more than one team at once.\n * @param members The members of the team\n */\n", "func_signal": "public HuntingTeam(List<String> members)", "code": "{\n\tthis.members = Collections.unmodifiableList(members);\n\tthis.orderedTarget = orderedTarget;\n}", "path": "src\\ise\\mace\\models\\HuntingTeam.java", "repo_name": "javajawa/ISEGameOfLife", "stars": 8, "license": "None", "language": "java", "size": 6155}
{"docstring": "/**\n * Evaluates the value of this bind variable.  This is just a thin-wrapper around:\n * {@link #getValue(Object,Query)}.\n *\n * @param o The current object, not used in this method.\n * @param q The Query object.\n * @return The value of this bind variable.\n * @throws QueryExecutionException If there is a problem getting the value.\n */\n", "func_signal": "public Object evaluate (Object o,\n\t\t\t    Query  q)\n\t                    throws QueryExecutionException", "code": "{\n\n\treturn this.getValue (o,\n\t\t\t      q);\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\BindVariable.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Return whether this comparator uses caching to improve performance.\n *\n * @return <code>true</code> if caching is on.\n * @throws IllegalStateException If the query has not yet been parsed or set.\n */\n", "func_signal": "public boolean isCaching ()\n\t                     throws  IllegalStateException", "code": "{\n\n\tif ((this.q == null)\n\t    ||\n\t    (!this.q.parsed ())\n\t   )\n\t{\n\n\t    throw new IllegalStateException (\"Query has not yet been parsed.\");\n\n\t}\n\n\treturn this.c.isCaching ();\n\n}", "path": "src\\main\\java\\org\\josql\\utils\\JoSQLComparator.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Set a new Query (string form) for use in this filter.\n *\n * @param q The Query to use.\n * @throws QueryParseException If there is an issue with the parsing of the query, \n *                             or if the FROM class is not as expected.\n */\n", "func_signal": "public void setQuery (String  q)\n\t                  throws  QueryParseException", "code": "{\n\n\tthis.q = new Query ();\n\tthis.q.parse (q);\n\n\tthis.c = (ListExpressionComparator) this.q.getOrderByComparator ();\n\n\tthis.exp = null;\n\n}", "path": "src\\main\\java\\org\\josql\\utils\\JoSQLComparator.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Set a new Query object for use in this filter.\n *\n * @param q The Query to use.\n * @throws IllegalStateException If the Query object has not been parsed.\n * @throws QueryParseException If the FROM class is not as expected.\n */\n", "func_signal": "public void setQuery (Query   q)\n\t                  throws  IllegalStateException,\n\t                          QueryParseException", "code": "{\n\n\tif (!q.parsed ())\n\t{\n\n\t    throw new IllegalStateException (\"Query has not yet been parsed.\");\n\n\t}\n\n\tthis.q = q;\n\n\tthis.c = (ListExpressionComparator) this.q.getOrderByComparator ();\n\n\tthis.exp = null;\n\n}", "path": "src\\main\\java\\org\\josql\\utils\\JoSQLComparator.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Get the content type for this data source.\n * <p>\n * We base the content type on the file extension of the file minus the\n * <b>zipExtension</b>, so if a file is called <b>myFile.txt.gz</b> and\n * the zip extension is <b>.gz</b> then we trim off the <b>.gz</b> and\n * then look for the \"real\" file extension, then determine the\n * appropriate content type and return it.\n * <br /><br />\n * You should note that the file <b>DOESN'T</b> have to have the\n * zipExtension for this method to work.\n * <br /><br />\n * If we don't have a specific file extension to use (see the\n * table of <a href=\"#3\">content type to file extension mappings</a> for full details\n * of what this method returns.\n *\n * @return The content type based upon the file extension of the file, or \n *         <b>application/octet-stream</b> if we don't recognise the file extension.\n */\n", "func_signal": "public String getContentType ()", "code": "{\n\n\tString fName = this.file.getName ().toLowerCase ();\n\n\t// Strip off any gz file extension...\n\tif (fName.indexOf (this.zipExtension) != -1)\n\t{\n\t    \n\t    fName = fName.substring (0,\n\t\t\t\t     fName.indexOf (this.zipExtension));\n\t    \n\t}\n\t\n\tif (fName.endsWith (\".doc\"))\n\t{\n\t    \n\t    return \"application/msword\";\n\t    \n\t}\n\t\n\tif (fName.endsWith (\".sdw\"))\n\t{\n\n\t    return \"application/x-swriter\";\n\n\t}\n\t\n\tif (fName.endsWith (\".rtf\"))\n\t{\n\t    \n\t    return \"text/rtf\";\n\n\t}\n\n\tif (fName.endsWith (\".html\"))\n\t{\n\t    \n\t    return \"text/html\";\n\n\t}\n\n\tif (fName.endsWith (\".txt\"))\n\t{\n\n\t    return \"text/plain\";\n\n\t}\t\n\n\treturn \"application/octet-stream\";\n\n}", "path": "src\\main\\java\\com\\gentlyweb\\utils\\GZIPFileDataSource.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Initialises this bind variable.\n * If the bind variable is \"anonymous\" then a name is gained for it from the\n * Query object.  If there is a value then it is gained from the Query object and\n * cached.  Also, if there is an accessor defined then it is inited where possible.\n *\n * @param q The Query object.\n * @throws QueryParseException If the bind variable cannot be inited.\n */\n", "func_signal": "public void init (Query  q)\n\t              throws QueryParseException", "code": "{\n\n\tif (this.anon)\n\t{\n\n\t    this.name = q.getAnonymousBindVariableName ();\n\n\t}\n\n\tString n = this.name.toLowerCase ();\n\n\tif ((n.startsWith (Query.GRPBY_OBJ_VAR_NAME))\n\t    ||\n\t    (n.startsWith (Query.GRPBY_OBJ_VAR_NAME_SYNONYM))\n\t   )\n\t{\n\n        this.initForGroupByName (n,\n                                 q);\n\n\t} else {\n\n\t    if (n.startsWith (BindVariable.SPECIAL_NAME_PREFIX))\n\t    {\n\n\t\t// Make sure it's valid.\n\t\tif (!BindVariable.SPECIAL_VAR_NAMES.containsKey (n))\n\t\t{\n\n\t\t    throw new QueryParseException (\"Bind variable name: \" +\n\t\t\t\t\t\t   name +\n\t\t\t\t\t\t   \" is not valid, bind variable names starting with: \" +\n\t\t\t\t\t\t   BindVariable.SPECIAL_NAME_PREFIX + \n\t\t\t\t\t\t   \" are reserved, and must be one of: \" +\n\t\t\t\t\t\t   BindVariable.SPECIAL_VAR_NAMES.keySet ());\n\n\t\t}\n\n\t    }\n\n\t}\n\n\t// See if we already have this bind variable set...\n\tthis.val = q.getVariable (this.name);\n\n\t// See if we have a \"trailing\" accessor.\n\tif ((this.val != null)\n\t    &&\n\t    (this.acc != null)\n\t   )\n\t{\n\n\t    this.initGetter (this.val);\n\n\t    try\n\t    {\n\n\t\tthis.val = this.get.getValue (this.val);\n\n\t    } catch (Exception e) {\n\n\t\tthrow new QueryParseException (\"Unable to get value from accessor: \" +\n\t\t\t\t\t       this.acc +\n\t\t\t\t\t       \" and class: \" + \n\t\t\t\t\t       this.val.getClass ().getName () + \n\t\t\t\t\t       \" from bind variable: \" + \n\t\t\t\t\t       this.name,\n\t\t\t\t\t       e);\n\n\t    }\n\n\t}\n\n\t// See if we can init the getter... there are times when it \n\t// is possible even if the bind variable isn't available yet.\n\tif ((this.acc != null)\n\t    &&\n\t    (this.get == null)\n\t   )\n\t{\n\n\t    // Not over keen on this method but it will do for now...\n\t    // It precludes the init occurring if we are working on java.lang.Object\n\t    // objects... but how many times will that happen?\n\t    Class c = q.getVariableClass (this.name);\n\n\t    if (!c.isInstance (new Object ()))\n\t    {\n\n\t\t// Init the getter.\n\t\tthis.initGetter (c);\n\n\t    }\n\n\t}\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\BindVariable.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Gets the value of this bind variable.  \n *\n * @param o The current object.  Note that this variable isn't used in this method.\n * @param q The Query object.\n * @return The value.\n * @throws QueryExecutionException If something goes wrong during the accessing\n *                                 of the value.\n */\n", "func_signal": "public Object getValue (Object o,\n\t\t\t    Query  q)\n\t                    throws QueryExecutionException", "code": "{\n\n\tif (this.groupByVar)\n\t{\n\n\t    o = q.getGroupByVariable (this.groupByInd);\n\n\t} else {\n\n\t    o = q.getVariable (this.name);\n\n\t}\n\n\tif ((this.acc != null)\n\t    &&\n\t    (this.get == null)\n\t    &&\n\t    (o != null)\n\t   )\n\t{\n\n\t    // Unable to get the accessor...\n\t    this.initGetter (o);\n\n\t} \n\n\tif (this.get != null)\n\t{\n\n\t    try\n\t    {\n\n\t\to = this.get.getValue (o);\n\n\t    } catch (Exception e) {\n\n\t\tthrow new QueryExecutionException (\"Unable to get value for accessor: \" +\n\t\t\t\t\t\t   this.acc + \n\t\t\t\t\t\t   \", class: \" + \n\t\t\t\t\t\t   this.get.getBaseClass ().getName () + \n\t\t\t\t\t\t   \" from bind variable: \" + \n\t\t\t\t\t\t   this.name,\n\t\t\t\t\t\t   e);\n\n\t    }\n\n\t}\n\n\treturn o;\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\BindVariable.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Evaulates the expression and returns true if the expression evaulates to <code>true</code>.\n * <p>\n * <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n *   <tr>\n *     <th>Type</th>\n *     <th>LHS</th>\n *     <th>RHS</th>\n *     <th>Result</th>\n *     <th>Notes</th>\n *   </tr>\n *   <tr>\n *     <td>AND</td>\n *     <td>true</td>\n *     <td>true</td>\n *     <td>true</td>\n *     <td>Both LHS and RHS are evaulated.</td>\n *   </tr>\n *   <tr>\n *     <td>AND</td>\n *     <td>true</td>\n *     <td>false</td>\n *     <td>false</td>\n *     <td>Both LHS and RHS are evaulated.</td>\n *   </tr>\n *   <tr>\n *     <td>AND</td>\n *     <td>false</td>\n *     <td>unknown or false</td>\n *     <td>false</td>\n *     <td>Only the LHS is evaulated.</td>\n *   </tr>\n *   <tr>\n *     <td>OR</td>\n *     <td>true</td>\n *     <td>unknown</td>\n *     <td>true</td>\n *     <td>Only the LHS is evaulated.</td>\n *   </tr>\n *   <tr>\n *     <td>OR</td>\n *     <td>false</td>\n *     <td>true</td>\n *     <td>true</td>\n *     <td>Both the LHS and RHS are evaulated.</td>\n *   </tr>\n *   <tr>\n *     <td>OR</td>\n *     <td>false</td>\n *     <td>false</td>\n *     <td>false</td>\n *     <td>Both the LHS and RHS are evaulated.</td>\n *   </tr>\n * </table>\n * <p>\n * In general what this means is that you should \"left-weight\" your expressions so that\n * the expression that returns <code>true</code> most often (or more likely to return \n * <code>true</code>) should be on the LHS.\n *\n * @param o The current object to perform the expression on. \n * @param q The query object.\n * @return <code>true</code> if the expression evaulates to <code>true</code>, <code>false</code>\n *         otherwise.\n * @throws QueryExecutionException If the expression cannot be evaulated.\n */\n", "func_signal": "public boolean isTrue (Object o,\n\t\t\t   Query  q)\n\t                   throws QueryExecutionException", "code": "{\n\n\t// Execute left first.\n\tboolean l = this.left.isTrue (o,\n\t\t\t\t      q);\n\n\t// See what our predicate is...\n\tif (this.and)\n\t{\n\n        if (!l)\n        {\n\n           return false;\n\n        }\n\n\t    boolean r = this.right.isTrue (o,\n\t\t\t\t\t   q);\n\n\t    return l && r;\n\n\t}\n\n\tif (l)\n\t{\n\n\t    return true;\n\n\t}\n\n\tboolean r = this.right.isTrue (o,\n\t\t\t\t       q);\n\t\n\treturn r;\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\AndOrExpression.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Apply the WHERE clause of the statement to the {@link File} passed in.\n * If an exception is thrown by the execution of the WHERE clause the Query \n * is marked as \"dirty\" and the where clause is no longer executed on the passed in \n * files (since it is likely that the WHERE clause will fail for all File objects).  \n * You can get access to exception by using: {@link #getException()}.\n *\n * @param f The file to evaluate the WHERE on.\n * @return <code>true</code> if the WHERE clause evaluates to <code>true</code>.\n */\n", "func_signal": "public boolean accept (File f)", "code": "{\n\t\n\tif (this.badQuery)\n\t{\n\n\t    return false;\n\n\t}\n\n\ttry\n\t{\n\n\t    return this.q.getWhereClause ().isTrue (f,\n\t\t\t\t\t\t    this.q);\n\n\t} catch (Exception e) {\n\n\t    this.badQuery = true;\n\n\t    this.exp = e;\n\n\t}\n\n\treturn false;\n\n}", "path": "src\\main\\java\\org\\josql\\filters\\JoSQLFileFilter.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Execute the EXECUTE ON ALL expressions.  \n *\n * @param l The list to execute the expressions on.\n */\n", "func_signal": "public void doExecuteOn (List   l)\n\t                     throws QueryExecutionException", "code": "{\n\n\tthis.q.doExecuteOn (l,\n\t\t\t    Query.ALL);\n\n}", "path": "src\\main\\java\\org\\josql\\utils\\JoSQLComparator.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Return a string version of this expression.\n * Note: any formatting of the statement (such as line breaks) will be removed.\n *\n * @return A string version of the expression.  \n */\n", "func_signal": "public String toString ()", "code": "{\n\n\tString pred = \" OR \";\n\t\n\tif (this.and)\n\t{\n\n\t    pred = \" AND \";\n\n\t}\n\n\tif (this.isBracketed ())\n\t{\n\n\t    return \"(\" + this.left.toString () + pred + this.right.toString () + \")\";\n\n\t}\n\n\treturn this.left.toString () + pred + this.right.toString ();\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\AndOrExpression.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Get the name of the data source.\n * <br /><br />\n * If the file ends with the <b>zipExtension</b> then we strip that off\n * before returning the name.\n *\n * @return The name of the data source.\n */\n", "func_signal": "public String getName ()", "code": "{\n\n\tString fName = this.file.getName ().toLowerCase ();\n\n\t// Strip off any gz file extension...\n\tif (fName.indexOf (this.zipExtension) != -1)\n\t{\n\t    \n\t    fName = fName.substring (0,\n\t\t\t\t     fName.indexOf (this.zipExtension));\n\t    \n\t}\n\n\treturn fName;\n\n}", "path": "src\\main\\java\\com\\gentlyweb\\utils\\GZIPFileDataSource.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Set whether the comparator should use caching to improve performance.\n *\n * @param b Set to <code>true</code> to turn caching on.\n * @throws IllegalStateException If the query has not yet been parsed or set.\n */\n", "func_signal": "public void setCaching (boolean b)\n\t                    throws  IllegalStateException", "code": "{\n\n\tif ((this.q == null)\n\t    ||\n\t    (!this.q.parsed ())\n\t   )\n\t{\n\n\t    throw new IllegalStateException (\"Query has not yet been parsed.\");\n\n\t}\n\n\tthis.c.setCaching (b);\n\n}", "path": "src\\main\\java\\org\\josql\\utils\\JoSQLComparator.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Create a new data source for the specified file.\n * <p>\n * We expect the file to have the file extension as given by <b>zipExtension</b>.\n * </p>\n *\n * @param f The File.\n * @param zipExtension The file extension for gzipped files.  Set to <code>null</code>\n *                     to use the default of <b>.gz</b>.\n */\n", "func_signal": "public GZIPFileDataSource (File   f,\n\t\t\t       String zipExtension)", "code": "{\n\n\tthis.file = f;\n\n\tif (zipExtension != null)\n\t{\n\n\t    this.zipExtension = zipExtension.toLowerCase ();\n\n\t}\n\n}", "path": "src\\main\\java\\com\\gentlyweb\\utils\\GZIPFileDataSource.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Clear the cache, it is VITAL that you call this method before you use\n * the comparator (if it has been used before) otherwise data objects will\n * be \"left around\" and preventing the GC from cleaning them up.\n */\n", "func_signal": "public void clearCache ()", "code": "{\n\n\tif (this.q != null)\n\t{\n\n\t    this.c.clearCache ();\n\n\t}\n\n}", "path": "src\\main\\java\\org\\josql\\utils\\JoSQLComparator.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Returns whether the value of this bind variable represents a <code>true</code>\n * value.  See: {@link ArithmeticExpression#isTrue(Object,Query)} for details of how\n * the return value is determined.\n *\n * @param o The current object.  Not used in this method.\n * @param q The Query object.\n * @return <code>true</code> if the bind variable evaluates to <code>true</code>.\n * @throws QueryExecutionException If a problem occurs during evaluation.\n */\n", "func_signal": "public boolean isTrue (Object o,\n\t\t\t   Query  q)\n\t                   throws QueryExecutionException", "code": "{\n\n\to = this.getValue (o,\n\t\t\t   q);\n\n\tif (o == null)\n\t{\n\t    \n\t    return false;\n\n\t}\n\n\tif (Utilities.isNumber (o))\n\t{\n\n\t    return Utilities.getDouble (o) > 0;\n\n\t}\n\n\t// Not null so return true...\n\treturn true;\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\BindVariable.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/*\nString MultiName():\n{\n\n  StringBuffer v = new StringBuffer ();\n  Token val = null;\n  \n}\n{\n\n  // Is in form... name[name.name]\n  val = Name()\n  [ \"[\" [ <K_KEY> | <K_VALUE> ] val = PrimaryExpression() \"]\" { v.append (val.image); } ]\n  {\n\n     return v.toString ();\n\n  }\n\n} \n*/\n", "func_signal": "final public String RelObjectName() throws ParseException", "code": "{\n        Token tk = null;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case K_AS:\n    case K_BY:\n    case K_IS:\n    case K_IN:\n    case K_OR:\n    case K_ON:\n    case K_ALL:\n    case K_AND:\n    case K_NOT:\n    case K_ASC:\n    case K_DESC:\n    case K_LIKE:\n    case K_INLIKE:\n    case K_WHERE:\n    case K_GROUP:\n    case K_LIMIT:\n    case K_ORDER:\n    case K_SELECT:\n    case K_HAVING:\n    case K_BETWEEN:\n    case K_DISTINCT:\n    case K_USE:\n    case K_TRUE:\n    case K_FALSE:\n    case K_EXECUTE:\n    case K_RESULTS:\n    case K_WHERE_RESULTS:\n    case K_HAVING_RESULTS:\n    case K_GROUP_BY_RESULTS:\n    case K_NEW:\n    case S_IDENTIFIER:\n      tk = KeywordName();\n      break;\n    case S_CHAR_LITERAL:\n      tk = jj_consume_token(S_CHAR_LITERAL);\n      break;\n    case S_CHAR_LITERAL2:\n      tk = jj_consume_token(S_CHAR_LITERAL2);\n      break;\n    default:\n      jj_la1[6] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      {if (true) return tk.image;}\n    throw new Error(\"Missing return statement in function\");\n  }", "path": "src\\main\\java\\org\\josql\\parser\\JoSQLParser.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * This method (function) will return the associated field from a\n * {@link Calendar} instance.  The <b>type</b> parm should be one of the \n * constants from this class.  The default {@link java.util.TimeZone} is used.\n *\n * @param d If the type is a long value then it is first converted to a Date.\n *          Or a {@link Date} should be used.\n * @param type The type of field to get.\n * @return The field from {@link Calendar}.\n * @throws QueryExecutionException If the <b>d</b> parm isn't an instance of \n *                                 {@link Long} or {@link Date}.\n */\n", "func_signal": "public int timeField (Object d,\n\t\t          String type)\n\t                  throws QueryExecutionException", "code": "{\n\n\tif ((!(d instanceof Date))\n\t    &&\n\t    (!(d instanceof Long))\n\t   )\n\t{\n\n\t    throw new QueryExecutionException (\"Value passed in is of type: \" +\n\t\t\t\t\t       d.getClass ().getName () +\n\t\t\t\t\t       \" only: \" +\n\t\t\t\t\t       Long.class.getName () + \n\t\t\t\t\t       \" or: \" +\n\t\t\t\t\t       Date.class.getName () + \n\t\t\t\t\t       \" are supported.\");\n\n\t}\n\n\tDate date = null;\n\n\tif (d instanceof Long)\n\t{\n\n\t    date = new Date (((Long) d).longValue ());\n\n\t}\n\n\tif (d instanceof Date)\n\t{\n\n\t    date = (Date) d;\n\n\t}\n\n\tConversionFunctions.cal.setTime (date);\n\n\ttype = type.toLowerCase ();\n\n\tif (type.equals (ConversionFunctions.SECOND))\n\t{\n\n\t    return ConversionFunctions.cal.get (Calendar.SECOND);\n\n\t}\n\n\tif (type.equals (ConversionFunctions.MINUTE))\n\t{\n\n\t    return ConversionFunctions.cal.get (Calendar.MINUTE);\n\n\t}\n\n\tif (type.equals (ConversionFunctions.HOUR))\n\t{\n\n\t    return ConversionFunctions.cal.get (Calendar.HOUR_OF_DAY);\n\n\t}\n\n\tif (type.equals (ConversionFunctions.DAY))\n\t{\n\n\t    return ConversionFunctions.cal.get (Calendar.DATE);\n\n\t}\n\n\tif (type.equals (ConversionFunctions.WEEK))\n\t{\n\n\t    return ConversionFunctions.cal.get (Calendar.WEEK_OF_YEAR);\n\n\t}\n\n\tif (type.equals (ConversionFunctions.MONTH))\n\t{\n\n\t    return ConversionFunctions.cal.get (Calendar.MONTH);\n\n\t}\n\n\tif (type.equals (ConversionFunctions.YEAR))\n\t{\n\n\t    return ConversionFunctions.cal.get (Calendar.YEAR);\n\n\t}\n\n\t// None of the above...\n\treturn -1;\n\n}", "path": "src\\main\\java\\org\\josql\\functions\\ConversionFunctions.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Get the expected return type.\n * The exact class returned here is dependent (obviously) on what the bind variable\n * represents.  Wherever possible it attempts to get the most specific class for the\n * variable.  It is generally better to set the variables prior to executing the:\n * {@link Query#parse(String)} method to ensure that the correct class is returned here.\n *\n * @param q The Query object.\n * @return The return type class or <code>java.lang.Object.class</code> if the class\n *         cannot be determined.\n * @throws QueryParseException If the type cannot be determined.\n */\n", "func_signal": "public Class getExpectedReturnType (Query  q)\n\t                                throws QueryParseException", "code": "{\n\n\tif (this.get != null)\n\t{\n\n\t    return this.get.getType ();\n\n\t}\n\n\tif (this.val != null)\n\t{\n\n\t    return this.val.getClass ();\n\n\t}\n\n\treturn q.getVariableClass (this.name);\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\BindVariable.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Returns a string version of this expression.\n * Basically returns: true | false.\n *\n * @return A string version of this expression.\n */\n", "func_signal": "public String toString ()", "code": "{\n\n\tif (this.isBracketed ())\n\t{\n\n\t    return \"(\" + this.value.toString () + \")\";\n\n\t}\n\n\treturn this.value.toString ();\n\n}", "path": "src\\main\\java\\org\\josql\\expressions\\BooleanExpression.java", "repo_name": "edanuff/JoSQL", "stars": 14, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * The defualt constructor used by the XMLParser.\n * @param nameTag the name of the tag\n * @param a the attributes associated with the element\n */\n", "func_signal": "public Element(String nameTag, Attributes a)", "code": "{\n\tname = nameTag;\n\tattrs = a;\n\t\n\tsubObjects = new ArrayList();\n\telements = new ArrayList<Element>();\n}", "path": "edu\\fcps\\karel2\\xml\\Element.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Searches the subelements of this element for an XMLElement with the specified tag name.\n * @param name the name to search for\n * @return the first matching element or null if there are no matches\n */\n", "func_signal": "public Element get(String name)", "code": "{\n\tfor(Element e : elements)\n\t\tif(e.getName().equals(name))\n\t\t\treturn e;\n\t\n\treturn null;\n}", "path": "edu\\fcps\\karel2\\xml\\Element.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "//*********************instance methods**********************************\n", "func_signal": "private void pause()", "code": "{\n         try\n         {\n            Thread.sleep((int)(crawlSpeed * 1000));\n         }\n            catch(Exception e)\n            {\n            }\n      }", "path": "edu\\fcps\\Turtle.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Returns an ArrayList<Element> of all the elements that match the given name\n * @return a possibly empty ArrayList<Element> of matches\n */\n", "func_signal": "public ArrayList<Element> getElements(String name)", "code": "{\n\tArrayList<Element> res = new ArrayList<Element>();\n\t\n\tfor(Element e : elements)\n\t\tif(e.getName().equals(name))\n\t\t\tres.add(e);\n\t\n\treturn res;\n}", "path": "edu\\fcps\\karel2\\xml\\Element.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Adds a child Element to the Element.\n * @param element the Element to add\n */\n", "func_signal": "public void addElement(Element element)", "code": "{\n\tsubObjects.add(element);\n\telements.add(element);\n}", "path": "edu\\fcps\\karel2\\xml\\Element.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * If a WorldFrame has been previously created, its close method is called,\n * closing the associated WorldFrame and WorldBackend before disposing of\n * the current WorldFrame.\n */\n", "func_signal": "private static void closeWorld()", "code": "{\n\tif (WorldFrame.getCurrent() != null)\n\t\tWorldFrame.getCurrent().close();\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "//*************************constructors*************************************\n", "func_signal": "public Turtle (double x, double y, double heading)", "code": "{\n         xPos = x;\n         yPos = y;\n         this.heading = heading;\n         turtleColor = Color.black;\n         penIsDown = true;\n         thickness = 3.0f;\n      \n         Turtle[] temp = new Turtle[list.length + 1];\n         for(int z = 0; z < list.length; z++)\n            temp[z] = list[z];\n         temp[temp.length - 1] = this;\n         list = temp;\n      }", "path": "edu\\fcps\\Turtle.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Sets the speed at which the Display updates.\n * @param s the requested speed of the Display.  If it is greater than the\n * max speed, the speed is set to the max speed\n */\n", "func_signal": "public static void setSpeed(int s)", "code": "{\n\tif (s > MAX_SPEED || s < 1) {\n\t\tDebug.printWarning(\"Trying to set speed greater than maximum (\"\n\t\t                   + MAX_SPEED + \")!  Setting to max instead...\");\n\t\tspeed = MAX_SPEED;\n\t\treturn;\n\t}\n\n\tspeed = s;\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Sleeps the Thread for a period of time based on the current Display speed.\n */\n", "func_signal": "public static void pause()", "code": "{\n\ttry {\n\t\tThread.sleep(30 * (MAX_SPEED - speed + 1));\n\t}\n\tcatch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "//instance methods\n", "func_signal": "private void pause()", "code": "{\n         try\n         {\n            Thread.sleep(100);\n         }\n            catch(Exception e)\n            {\n            }\n      }", "path": "edu\\fcps\\Bucket.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "//**************************************************************\n", "func_signal": "public static Image getImage()", "code": "{\n         if(!crawlOff)\n            for(int x = 0; x < list.length; x++)\n            {\n               drawTurtle(graphics2, list[x].xPos, list[x].yPos, \n                         list[x].heading, list[x].turtleColor);\n            }\n         return buffer2;\n         //g.drawImage(buffer2, 0, 0, WIDTH, HEIGHT, null);\n      }", "path": "edu\\fcps\\Turtle.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Constructs an item with the specified x and y coordinates.\n */\n", "func_signal": "public Item(int x, int y)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n}", "path": "edu\\fcps\\karel2\\Item.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "//constructor (dynamic initializer - for dynamic fields)\n", "func_signal": "public Bucket(int numGals)", "code": "{\n         capacity = numGals;\n         water = 0.0;\n         jugList[numBuckets] = this;\n         numBuckets++;\n         if (capacity > maxCapacity)\n            capacity = maxCapacity;\n      }", "path": "edu\\fcps\\Bucket.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Blocks the Thread until input is given to System.in.\n */\n", "func_signal": "private static void hang()", "code": "{ //A bit hacky, but it works\n\ttry {\n\t\tSystem.in.read();\n\t}\n\tcatch (Exception e) { }\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * The same as calling WorldBackend.setSize(x, y)\n * @param x\n * @param y\n */\n", "func_signal": "public static void setSize(int x, int y)", "code": "{\n\tif (WorldBackend.getCurrent() == null)\n\t\topenDefaultWorld();\n\n\tWorldBackend.getCurrent().setSize(x, y);\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Closes the current world if there is one, then creates a new WorldFrame\n * with the default map.\n */\n", "func_signal": "public static void openDefaultWorld()", "code": "{\n\tcloseWorld();\n\tnew WorldFrame(new WorldBackend());\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Takes a possible invalid direction and returns a valid one via modding\n * @param dir a possibly invalid direction\n * @return a valid direction\n */\n", "func_signal": "public static int validateDirection(int dir)", "code": "{\n\tfor (int i = 0; i < directions.length; i++)\n\t\tif (dir == directions[i])\n\t\t\treturn dir;\n\n\treturn ((dir % 4) + 4) % 4; //This is in case it's negative\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Closes the current world if there is one, then creates a new WorldFrame\n * with the specified map file.\n * @param mapName the path to the map file to be loaded\n */\n", "func_signal": "public static void openWorld(String mapName)", "code": "{\n\tcloseWorld();\n\tnew WorldFrame(new WorldBackend(mapName));\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * Placea beeper at some coordinate x,y\n * @param x the x coordinate of the desired placement\n * @param y the y coordinate of the desired placement \n */\n", "func_signal": "public static void placeBeeper(int x, int y)", "code": "{\n\tif (WorldBackend.getCurrent() == null) {\n\t\tDisplay.openDefaultWorld();\n\t}\n\n\tif (isDead())\n\t\treturn;\n\tWorldBackend.getCurrent().putBeepers(x, y, 1);\n\tWorldPanel.getCurrent().repaint();\n}", "path": "edu\\fcps\\karel2\\Display.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "/**\n * The defualt constructor used by the XMLParser.\n * @param nameTag the name of the tag\n * @param a the attributes associated with the element\n */\n", "func_signal": "public Element(Element parent, String nameTag, Attributes a)", "code": "{\n\tthis(nameTag, a);\n\t\n\tparent.addElement(this);\n}", "path": "edu\\fcps\\karel2\\xml\\Element.java", "repo_name": "ComputerDruid/karel", "stars": 9, "license": "gpl-3.0", "language": "java", "size": 1379}
{"docstring": "// all generated reports are cached until flush is called. This is typically\n// called right before persisting stats to disk\n", "func_signal": "public static void flushSerializerCache()", "code": "{\n\tjsonCache = null;\n\tjavascriptCache = null;\n\txmlCache = null;\n\thtmlCache = null;\n}", "path": "src\\StatsSerializer.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "// Return a player's total play time\n", "func_signal": "public String getPlaytime(Player player)", "code": "{\n\tPlayerStatistics ps = getPlayerStats(player);\n\treturn ps.getTotalPlaytime();\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Note that the player killed something\n", "func_signal": "public void kill(Player attacker, LivingEntity victim)", "code": "{\n\tif(ignorePlayer(attacker)) return;\n\tPlayerStatistics ps = getPlayerStats(attacker);\n\t\n\tif(victim.isPlayer()) {\n\t\t// Increment the correct player kill counter\n\t\tString victimName = victim.getPlayer().getName();\n\t\tif(!ps.playerKills.containsKey(victimName)) {\n\t\t\tps.playerKills.put(victimName, 0L);\n\t\t}\n\t\tps.playerKills.put(victimName, ps.playerKills.get(victimName) + 1);\n\t} else if(victim.isMob()) {\n\t\tString victimName = \"Mob\"; //((Mob)victim).getName();\n\t\tif(!ps.creatureKills.containsKey(victimName)) {\n\t\t\tps.creatureKills.put(victimName, 0L);\n\t\t}\n\t\tps.creatureKills.put(victimName, ps.creatureKills.get(victimName) + 1);\n\t} else if(victim.isAnimal()) {\n\t\tString victimName = \"Animal\"; //((Animal)victim).getName();\n\t\tif(!ps.creatureKills.containsKey(victimName)) {\n\t\t\tps.creatureKills.put(victimName, 0L);\n\t\t}\n\t\tps.creatureKills.put(victimName, ps.creatureKills.get(victimName) + 1);\n\t}\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Note that the player has placed a block\n", "func_signal": "public void placeABlock(Player player, Block block)", "code": "{\n\tif (block.getType() > 0) {\n\t\tif(ignorePlayer(player)) return;\n\t\tPlayerStatistics ps = getPlayerStats(player);\n\t\tif (!ps.blocksPlaced.containsKey(block.getType())) {\n\t\t\tps.blocksPlaced.put(block.getType(), 0L);\n\t\t}\n\t\tps.blocksPlaced.put(block.getType(),\n\t\t\t\tps.blocksPlaced.get(block.getType()) + 1);\n\t}\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Get raw player stats\n", "func_signal": "public List<PlayerStatistics> getRawStats()", "code": "{\n\tsynchronized (stats) {\n\t\t//Copies references to the PlayerStats objects into a new array, preserving thread safety.\n\t\treturn new ArrayList<PlayerStatistics>(stats.values());\n\t}\n}", "path": "src\\StatsModel.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "// Utility methods\n", "func_signal": "private String secondsToTimestamp(long seconds)", "code": "{\n\tlong hours = seconds / 3600;\n\tseconds %= 3600;\n\tlong minutes = seconds / 60;\n\treturn String.format(\"%s.%02d hours\", hours, (int)Math.floor(minutes/60.0*100.0));\n}", "path": "src\\PlayerStatistics.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Add total play time to the player's secondsOnServer\n", "func_signal": "public void logOut(Player player)", "code": "{\n\tif(ignorePlayer(player)) return;\n\tPlayerStatistics ps = getPlayerStats(player);\n\tps.flushSessionPlaytime();\n\tps.sessionMarkTime = null;\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Detach listener hooks\n", "func_signal": "public void disableExtra()", "code": "{\n\tRuntime.getRuntime().removeShutdownHook(hook);\n\tcontroller.logOutAllPlayers();\n\tmodel.stopPersisting();\n\t\n\tmodel.saveStats();\n\tmodel.saveUserFiles();\n\t\n\tfor(PluginRegisteredListener psr : prls) {\n\t\tetc.getLoader().removeListener(psr);\n\t}\n\tprls = new ArrayList<PluginRegisteredListener>();\n\t\n\t//stop the http server if it's enabled\n\tif(config.getWebserverEnabled()) {\n\t\tlog.log(Level.INFO, \"MCStats stopping web server.\");\n\t\tserver.stop(1);\n\t\tserver.removeContext(config.getHttpServerContextRoot());\n\t\tserver = null;\n\t}\n}", "path": "src\\StatsPlugin.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Attach listener hooks\n", "func_signal": "public void enableExtra()", "code": "{\n\t\n\t// Configure the serializer cache\n\tStatsSerializer.enableSerializerCache = config.getEnableSerializerCache();\n\t\n\t// Register hMod command\n\tetc.getInstance().addCommand(\"/played\", \" - displays your total play time.\");\n\t//configure hMod hooks\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.BLOCK_PLACE, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.BLOCK_BROKEN, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.DISCONNECT, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.BAN, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.ITEM_DROP, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.LOGIN, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.PLAYER_MOVE, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.DAMAGE, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.HEALTH_CHANGE, listener, this, PluginListener.Priority.LOW));\n\tprls.add(etc.getLoader().addListener(PluginLoader.Hook.COMMAND, listener, this, PluginListener.Priority.LOW));\n\t\n\t//purge any users marked for removal\n\tfor(String playerName : config.getPlayersToPurge()) {\n\t\tmodel.purgePlayer(playerName);\n\t}\n\tconfig.clearPlayersToPurge();\n\t\n\t//reset all playtimes if requested\n\tif(config.getResetPlaytime()) {\n\t\tlog.log(Level.INFO, \"Resetting all player play times\");\n\t\tmodel.resetAllPlaytimes();\n\t\tconfig.clearResetPlaytime();\n\t}\n\t\n\t//start the http server if it's enabled\n\tif (config.getWebserverEnabled()) {\n\t\tString resource = config.getStatsBaseResource();\n\t\tString contextRoot = config.getHttpServerContextRoot();\n\t\t\n\t\tlog.log(Level.INFO, \"Starting MCStats web server.\");\n\t\ttry {\n\t\t\tserver = HttpServer.create(\n\t\t\t\t\tnew InetSocketAddress(config.getHttpPort()),\n\t\t\t\t\tconfig.getHttpBacklog());\n\t\t\tserver.createContext(contextRoot, new StatsHttpHandler(\n\t\t\t\t\tmodel, config));\n\t\t\tserver.setExecutor(null); // creates a default executor\n\t\t\tserver.start();\n\t\t\tlog.log(Level.INFO, String.format(\n\t\t\t\t\t\"Server stats available at http://[hostname]:%s%s%s, %s, %s, and %s\",\n\t\t\t\t\tconfig.getHttpPort(),\n\t\t\t\t\tcontextRoot,\n\t\t\t\t\tresource + \".xml\",\n\t\t\t\t\tresource + \".json\",\n\t\t\t\t\tresource + \".js\",\n\t\t\t\t\tresource + \".html\"));\n\t\t} catch (IOException e) {\n\t\t\tlog.log(Level.SEVERE, \"MCStats failed to start http server\", e);\n\t\t}\n\t}\n\t//register a shutdown hook\n\tRuntime.getRuntime().addShutdownHook(hook);\n\tcontroller.logOutAllPlayers();\n\tcontroller.logInOnlinePlayers();\n\tmodel.startPersisting();\n}", "path": "src\\StatsPlugin.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Logs out all players - called at shutdown\n", "func_signal": "public void logOutAllPlayers()", "code": "{\n\tsynchronized(stats) {\n\t\tfor(PlayerStatistics ps : stats.values()) {\n\t\t\tps.flushSessionPlaytime();\n\t\t\tps.sessionMarkTime = null;\n\t\t}\n\t}\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Logs in any players who are active when the mod starts\n", "func_signal": "public void logInOnlinePlayers()", "code": "{\n\tfor(Player player : etc.getServer().getPlayerList()) {\n\t\tlogIn(player);\n\t}\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//called by the timer every few seconds\n", "func_signal": "public void run()", "code": "{\n\tsaveStats();\n\tsaveUserFiles();\n}", "path": "src\\StatsModel.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Mark the player's connect time in the playclockStart field of stats\n", "func_signal": "public void logIn(Player player)", "code": "{\n\tif(ignorePlayer(player)) return;\n\tPlayerStatistics ps = getPlayerStats(player);\n\tps.sessionMarkTime = new Date();\n\tps.playerGroups = player.getGroups();\n\tps.lastLogin = new Date();\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Resets all player playtimes to zero\n", "func_signal": "public void resetAllPlaytimes()", "code": "{\n\tsynchronized(stats) {\n\t\tfor(PlayerStatistics ps : stats.values()) {\n\t\t\tps.secondsOnServer = 0;\n\t\t}\n\t}\n}", "path": "src\\StatsModel.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "// Ignore players with no group if ignoreGrouplessPlayers is true.\n", "func_signal": "private boolean ignorePlayer(Player player)", "code": "{\n\tif(config.getIgnoreGrouplessPlayers() && player.getGroups().length == 0 ) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Note that the player has destroyed a block\n", "func_signal": "public void destroyABlock(Player player, Block block)", "code": "{\n\tif (block.getType() > 0) {\n\t\tif(ignorePlayer(player)) return;\n\t\tPlayerStatistics ps = getPlayerStats(player);\n\t\tif (!ps.blocksDestroyed.containsKey(block.getType())) {\n\t\t\tps.blocksDestroyed.put(block.getType(), 0L);\n\t\t}\n\t\tps.blocksDestroyed.put(block.getType(),\n\t\t\t\tps.blocksDestroyed.get(block.getType()) + 1);\n\t}\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Note that the player has traveled a meter\n", "func_signal": "public void travelAMeter(Player player)", "code": "{\n\tif(ignorePlayer(player)) return;\n\tPlayerStatistics ps = getPlayerStats(player);\n\tps.metersTraveled++;\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Note that the player has died\n", "func_signal": "public void die(Player player)", "code": "{\n\tif(ignorePlayer(player)) return;\n\tPlayerStatistics ps = getPlayerStats(player);\n\tps.deaths++;\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "/**\n * Sends a message to all players!\n * @param String - Message to send to all players.\n */\n", "func_signal": "public void broadcast(String message)", "code": "{\n\tfor (Player p : etc.getServer().getPlayerList()) {\n\t\tp.sendMessage(message);\n\t}\n}", "path": "src\\SuperPlugin.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "//Note that the player disposed of an item\n", "func_signal": "public void dropAnItem(Player player, Item item)", "code": "{ \n\tif (item.getItemId() > 0) {\n\t\tif(ignorePlayer(player)) return;\n\t\tPlayerStatistics ps = getPlayerStats(player);\n\t\tif (!ps.itemsDropped.containsKey(item.getItemId())) {\n\t\t\tps.itemsDropped.put(item.getItemId(), 0L);\n\t\t}\n\t\tps.itemsDropped.put(item.getItemId(),\n\t\t\t\tps.itemsDropped.get(item.getItemId()) + 1);\n\t}\n}", "path": "src\\StatsController.java", "repo_name": "rmichela/MCStats", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 314}
{"docstring": "/**\n * Gets the value of the correlationKey property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the correlationKey property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getCorrelationKey().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link TCorrelationKey }\n * \n * \n */\n", "func_signal": "public List<TCorrelationKey> getCorrelationKey()", "code": "{\n    if (correlationKey == null) {\n        correlationKey = new ArrayList<TCorrelationKey>();\n    }\n    return this.correlationKey;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TChoreographyActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "// ===================================================================================================== getFlowNode\n", "func_signal": "static public TFlowNode getFlowNode(final String nodeId, TProcess tProcess)", "code": "{\n    ElementIterator<TFlowNode> iterator = new ElementIterator<TFlowNode>(tProcess, TFlowNode.class);\n    while (iterator.hasNext()) {\n        TFlowNode node = iterator.next();\n        if (node.getId().equals(nodeId)) {\n            return node;\n        }\n    }\n    return null;\n}", "path": "engine\\src\\main\\com\\worktoken\\engine\\BPMNUtils.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the completionQuantity property.\n * \n * @return\n *     possible object is\n *     {@link BigInteger }\n *     \n */\n", "func_signal": "public BigInteger getCompletionQuantity()", "code": "{\n    if (completionQuantity == null) {\n        return new BigInteger(\"1\");\n    } else {\n        return completionQuantity;\n    }\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the dataInputAssociation property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the dataInputAssociation property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getDataInputAssociation().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link TDataInputAssociation }\n * \n * \n */\n", "func_signal": "public List<TDataInputAssociation> getDataInputAssociation()", "code": "{\n    if (dataInputAssociation == null) {\n        dataInputAssociation = new ArrayList<TDataInputAssociation>();\n    }\n    return this.dataInputAssociation;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "// ============================================================================================================ find\n", "func_signal": "public static <T> T find(String id, TProcess tProcess, Class<T> clazz)", "code": "{\n    TBaseElement e = findElement(id, tProcess);\n    if (e == null) {\n        return null;\n    }\n    if (clazz.isInstance(e)) {\n        return clazz.cast(e);\n    } else {\n        throw new IllegalStateException(\"Element with id=\\\"\" + id + \"\\\" in process \\\"\" + tProcess.getId() +\n                \"\\\" may not cast to \" + clazz.getName());\n    }\n}", "path": "engine\\src\\main\\com\\worktoken\\engine\\BPMNUtils.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the loopType property.\n * \n * @return\n *     possible object is\n *     {@link TChoreographyLoopType }\n *     \n */\n", "func_signal": "public TChoreographyLoopType getLoopType()", "code": "{\n    if (loopType == null) {\n        return TChoreographyLoopType.NONE;\n    } else {\n        return loopType;\n    }\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TChoreographyActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the resourceRole property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the resourceRole property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getResourceRole().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link JAXBElement }{@code <}{@link TPerformer }{@code >}\n * {@link JAXBElement }{@code <}{@link TResourceRole }{@code >}\n * {@link JAXBElement }{@code <}{@link THumanPerformer }{@code >}\n * {@link JAXBElement }{@code <}{@link TPotentialOwner }{@code >}\n * \n * \n */\n", "func_signal": "public List<JAXBElement<? extends TResourceRole>> getResourceRole()", "code": "{\n    if (resourceRole == null) {\n        resourceRole = new ArrayList<JAXBElement<? extends TResourceRole>>();\n    }\n    return this.resourceRole;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the interfaceRef property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the interfaceRef property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getInterfaceRef().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link QName }\n * \n * \n */\n", "func_signal": "public List<QName> getInterfaceRef()", "code": "{\n    if (interfaceRef == null) {\n        interfaceRef = new ArrayList<QName>();\n    }\n    return this.interfaceRef;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TParticipant.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "// ============================================================================================== findOutgoingByName\n", "func_signal": "public static TSequenceFlow findOutgoingByName(TFlowNode fromNode, String name, TProcess tProcess)", "code": "{\n    for (QName qName :  fromNode.getOutgoing()) {\n        TSequenceFlow link = find(qName.getLocalPart(), tProcess, TSequenceFlow.class);\n        String linkName = link.getName();\n        if (linkName != null && !linkName.isEmpty() && linkName.equals(name)) {\n            return link;\n        }\n    }\n    return null;\n}", "path": "engine\\src\\main\\com\\worktoken\\engine\\BPMNUtils.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the dataOutputAssociation property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the dataOutputAssociation property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getDataOutputAssociation().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link TDataOutputAssociation }\n * \n * \n */\n", "func_signal": "public List<TDataOutputAssociation> getDataOutputAssociation()", "code": "{\n    if (dataOutputAssociation == null) {\n        dataOutputAssociation = new ArrayList<TDataOutputAssociation>();\n    }\n    return this.dataOutputAssociation;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the isForCompensation property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public boolean isIsForCompensation()", "code": "{\n    if (isForCompensation == null) {\n        return false;\n    } else {\n        return isForCompensation;\n    }\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the startQuantity property.\n * \n * @return\n *     possible object is\n *     {@link BigInteger }\n *     \n */\n", "func_signal": "public BigInteger getStartQuantity()", "code": "{\n    if (startQuantity == null) {\n        return new BigInteger(\"1\");\n    } else {\n        return startQuantity;\n    }\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the gatewayDirection property.\n * \n * @return\n *     possible object is\n *     {@link TGatewayDirection }\n *     \n */\n", "func_signal": "public TGatewayDirection getGatewayDirection()", "code": "{\n    if (gatewayDirection == null) {\n        return TGatewayDirection.UNSPECIFIED;\n    } else {\n        return gatewayDirection;\n    }\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TGateway.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the resourceRole property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the resourceRole property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getResourceRole().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link JAXBElement }{@code <}{@link TPerformer }{@code >}\n * {@link JAXBElement }{@code <}{@link TResourceRole }{@code >}\n * {@link JAXBElement }{@code <}{@link THumanPerformer }{@code >}\n * {@link JAXBElement }{@code <}{@link TPotentialOwner }{@code >}\n * \n * \n */\n", "func_signal": "public List<JAXBElement<? extends TResourceRole>> getResourceRole()", "code": "{\n    if (resourceRole == null) {\n        resourceRole = new ArrayList<JAXBElement<? extends TResourceRole>>();\n    }\n    return this.resourceRole;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TGlobalTask.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the property property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the property property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getProperty().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link TProperty }\n * \n * \n */\n", "func_signal": "public List<TProperty> getProperty()", "code": "{\n    if (property == null) {\n        property = new ArrayList<TProperty>();\n    }\n    return this.property;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TActivity.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the isCollection property.\n * \n * @return\n *     possible object is\n *     {@link Boolean }\n *     \n */\n", "func_signal": "public boolean isIsCollection()", "code": "{\n    if (isCollection == null) {\n        return false;\n    } else {\n        return isCollection;\n    }\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TDataObject.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "// ============================================================================ findLaneForNode(TFLowNode, TProcess)\n", "func_signal": "public static TLane findLaneForNode(TFlowNode tNode, TProcess tProcess)", "code": "{\n    for (TLaneSet laneSet : tProcess.getLaneSet()) {\n        TLane tLane = findLaneForNode(tNode, laneSet);\n        if (tLane != null) {\n            return tLane;\n        }\n    }\n    return null;\n}", "path": "engine\\src\\main\\com\\worktoken\\engine\\BPMNUtils.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Gets the value of the endPointRef property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the endPointRef property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getEndPointRef().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link QName }\n * \n * \n */\n", "func_signal": "public List<QName> getEndPointRef()", "code": "{\n    if (endPointRef == null) {\n        endPointRef = new ArrayList<QName>();\n    }\n    return this.endPointRef;\n}", "path": "engine\\src\\main\\org\\omg\\spec\\bpmn\\_20100524\\model\\TParticipant.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "// ===================================================================================================== findElement\n", "func_signal": "public static TBaseElement findElement(String id, TProcess tProcess)", "code": "{\n    for (JAXBElement<? extends TFlowElement> element : tProcess.getFlowElement()) {\n        if (element.getValue().getId().equals(id)) {\n            return element.getValue();\n        }\n    }\n    return null;\n}", "path": "engine\\src\\main\\com\\worktoken\\engine\\BPMNUtils.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Test help desk process, path 2\n * <p/>\n * Path 1: Receive question - Canned answer lookup succeeds - Process ends on receiving positive confirmation\n * from customer.\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testHelpDeskPath2() throws Exception", "code": "{\n\n    Assert.assertTrue(session.isRunning());\n    EntityManager em = emf.createEntityManager();\n\n    /*\n    Create process instance. We retrieve the process entity from database for verification purposes. After\n    verification the entity must be detached, otherwise we will have stale version of the object pretty soon.\n     */\n    em.getTransaction().begin();\n    long processId = session.createProcess(\"process-com_worktoken_helpdesk\");\n    Assert.assertTrue(processId > 0);\n    HelpDeskProcess process = em.find(HelpDeskProcess.class, processId);\n    Assert.assertNotNull(process);\n    em.clear();\n\n    /*\n    Sending \"Service request\" message. Please note that definition is the one of the message, not the event\n    trigger.\n     */\n    EventToken message = new EventToken();\n    String subject = \"My question\";\n    message.getData().put(\"email\", \"customer@example.com\");\n    message.getData().put(\"subject\", subject);\n    message.getData().put(\"question\", \"How are you?\");\n    message.setDefinitionId(\"ID_21465726_5737_2200_2400_000000600032\");\n    session.sendEventToken(message, processId);\n    em.getTransaction().commit();\n    em.close();\n\n    System.out.println(\"Waiting 2 seconds for the process to reach event based gateway node\");\n    Thread.sleep(2000);\n\n    System.out.println(\"\\n====================== Verifying gateway triggers =========================\\n\");\n    Assert.assertTrue(session.isRunning());\n    em = emf.createEntityManager();\n    List<EventTrigger> triggers = em.createQuery(\"SELECT t FROM EventTrigger t WHERE t.eventNode.process.id = :id\").setParameter(\"id\", processId).getResultList();\n    Assert.assertTrue(triggers.size() == 2);    // must be 2 triggers - message event and timer event\n    em.close();\n\n    message = new EventToken();\n    message.getData().put(\"message\", \"Thank you\");\n    message.getData().put(\"isAccepted\", new Boolean(true));\n    message.setDefinitionId(\"ID_30607364_7317_2206_0052_000400200024\");\n    session.sendEventToken(message, processId);\n\n    System.out.println(\"\\n===================== Waiting 2 seconds for the process to complete =====================\\n\");\n    Thread.sleep(2000);\n\n    System.out.println(\"\\n====================== Verifying process termination =========================\\n\");\n    Assert.assertTrue(session.isRunning());\n    em = emf.createEntityManager();\n    Assert.assertNull(em.find(HelpDeskProcess.class, processId));\n    em.close();\n}", "path": "engine\\src\\test\\com\\worktoken\\engine\\test\\helpdesk\\HelpDesk.java", "repo_name": "worktokenteam/worktoken", "stars": 8, "license": "None", "language": "java", "size": 84437}
{"docstring": "/**\n * Modifica el tipo de documento con el nombre dado\n * @param tipoDocumento TipoDocumento con el nombre y la nueva descripci\u00f3n\n * @return -1 Si la operaci\u00f3n no fue exitosa\n */\n", "func_signal": "public int modificarTipoDocumento(TipoDocumento tipoDocumento)", "code": "{\n    String sql_modificar;\n    sql_modificar=\"UPDATE tipo_material SET tipo_documento = '\"+ \n            tipoDocumento.getTipoDocumento() + \"' WHERE descripcion = '\"\n            + tipoDocumento.getDescripcion() + \"';\";\n    try{\n        Connection conn= fachada.conectar();\n        Statement sentencia = conn.createStatement();\n        int numFilas = sentencia.executeUpdate(sql_modificar);\n        conn.close();\n        return numFilas;\n\n    }\n    catch(SQLException e){ System.err.println(e); }\n    catch(Exception e){ System.err.println(e); }\n    return -1;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoTipoDocumento.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/** Creates new form Selecc_Areas */\n", "func_signal": "public Selecc_Areas(Documento documento)", "code": "{\n    initComponents();\n    this.documento=documento;\n    areasSeleccionadas=new ArrayList<Area>();\n    initComboBox();\n}", "path": "src\\biblioteca\\gui\\catalogacion\\Selecc_Areas.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Consulta todos los tipos de documento existentes en la base de datos\n * @return ArrayList de TipoDocumento con todos los tipos de documento existentes\n */\n", "func_signal": "public ArrayList<TipoDocumento> consultarTodosLosTipoDocumento()", "code": "{\n    String sql_consultar;\n    sql_consultar=\"SELECT * FROM  tipo_material ORDER BY tipo_documento ASC;\";\n    ArrayList<TipoDocumento> Tipos = null;\n    try{\n        Connection conn= fachada.conectar();\n        Statement sentencia = conn.createStatement();\n        ResultSet tabla = sentencia.executeQuery(sql_consultar);\n        \n        Tipos = new ArrayList<TipoDocumento>();\n        while(tabla.next()){\n            TipoDocumento tipoDocumento=new TipoDocumento();\n            tipoDocumento.setTipoDocumento(tabla.getString(1));\n            tipoDocumento.setDescripcion(tabla.getString(2));\n            Tipos.add(tipoDocumento);\n        }\n        conn.close();\n        return Tipos;\n\n    }\n    catch(SQLException e){ System.err.println(e); }\n    catch(Exception e){ System.err.println(e); }\n    return null;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoTipoDocumento.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * createPdf es una funci\u00f3n estatica que funciona como plantilla para generar\n * reportes dinamicos, seg\u00fan la necesidad del usuario.\n * @param path La direcci\u00f3n del archivo donde se guardar\u00e1 el pdf\n * @param titulo El T\u00edtulo que llevar\u00e1 el pdf\n * @param encabezado Un texto que se mostrar\u00e1 bajo el t\u00edtulo\n * @param tabla La tabla de resultados que mostrar\u00e1 el pdf\n */\n", "func_signal": "static public void createPdf(String path, String titulo, String encabezado, PdfPTable tabla)", "code": "{\n    Document document = new Document();\n    // step 2\n    try{\n    PdfWriter.getInstance(document, new FileOutputStream(path));\n    Font myFontTitle = new Font();\n    myFontTitle.setFamily(\"Arial\");\n    myFontTitle.setStyle(Font.BOLD);\n    myFontTitle.setSize(14);\n    Font Univallef= new Font();\n    Univallef.setColor(BaseColor.RED);\n    Univallef.setFamily(\"Arial\");\n    Univallef.setSize(18);\n    Image header = Image.getInstance(PdfCreator.class.getResource(\"/biblioteca/gui/resources/minilogo.png\"));\n    header.setAlignment(Image.ALIGN_CENTER);\n    header.scaleToFit(50, 75);\n    Paragraph Univalle = new Paragraph(\"Universidad del Valle\", Univallef);\n    Univalle.setAlignment(Paragraph.ALIGN_CENTER);\n    Paragraph pTitulo = new Paragraph(titulo, myFontTitle);\n    pTitulo.setAlignment(Paragraph.ALIGN_CENTER);\n    Paragraph biblioteca=new Paragraph(\"Biblioteca Digital EISC\", myFontTitle);\n    biblioteca.setAlignment(Paragraph.ALIGN_CENTER);\n    Paragraph developers=new Paragraph(\"Desarrollado por:\\n Mar\u00eda Cristina Bustos \\n Alejandro Vald\u00e9s Villada\", myFontTitle);\n    developers.setAlignment(Paragraph.ALIGN_CENTER);\n    Paragraph Fecha = new Paragraph(\"Fecha y Hora del Reporte: \"+fecha,myFontTitle);\n    document.open();\n    // step 4\n    document.add(header);\n    document.add(new Paragraph(\"\\r\\n\"));\n    document.add(Univalle);\n    document.add(new Paragraph(\"\\r\\n\"));\n    document.add(pTitulo);        \n    document.add(new Paragraph(\"\\r\\n\"));\n    document.add(biblioteca);        \n    document.add(new Paragraph(\"\\r\\n\"));\n    document.add(developers);        \n    document.add(new Paragraph(\"\\r\\n\"));\n    document.add(Fecha);\n    document.add(new Paragraph(\"\\r\\n\"));\n    document.add(new Paragraph(encabezado+(tabla.getRows().size()-1)));\n    document.add(new Paragraph(\"\\r\\n\"));\n    document.add(tabla);\n    // step 5\n    document.close();\n    }\n    catch(DocumentException de){\n        System.err.println(de);\n    }\n    catch(IOException ioex){\n        System.err.println(ioex);\n    }\n}", "path": "src\\biblioteca\\reportes\\PdfCreator.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Inserta un nuevo autor a la base de datos\n * @param autor Autor con los datos a insertar a la base de datos\n * @return -1 si la consulta no fue exitosa\n */\n", "func_signal": "public int guardarAutor(Autor autor)", "code": "{\n    String sql_guardar;\n    sql_guardar=\"INSERT INTO autor(autor_correo, nombre, apellido, acronimo) VALUES ('\" +\n            autor.getCorreo() + \"', '\" + autor.getNombre() +  \"', '\" +\n              autor.getApellido() + \"', '\"  + autor.getAcronimo()+ \"');\";\n    try{\n        Connection conect= fachada.conectar();\n        Statement sentencia = conect.createStatement();\n        int numFilas = sentencia.executeUpdate(sql_guardar);\n        conect.close();\n        return numFilas;\n    }\n    catch(SQLException e){ System.err.println(e); }\n    catch(Exception e){ System.err.println(e); }\n    return -1;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoAutor.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n    java.awt.GridBagConstraints gridBagConstraints;\n\n    jLabel3 = new javax.swing.JLabel();\n    jLabel4 = new javax.swing.JLabel();\n    jLabel5 = new javax.swing.JLabel();\n    Areas = new javax.swing.JComboBox();\n    Cancelar = new javax.swing.JButton();\n    Agregar = new javax.swing.JButton();\n    jSeparator1 = new javax.swing.JSeparator();\n    jLabel2 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    Area_Nombre = new javax.swing.JTextField();\n    jLabel1 = new javax.swing.JLabel();\n    Area_Descripcion = new javax.swing.JTextField();\n    jLabel7 = new javax.swing.JLabel();\n    Area_Padre = new javax.swing.JComboBox();\n    Siguiente = new javax.swing.JButton();\n    Estado = new javax.swing.JLabel();\n    jSeparator2 = new javax.swing.JSeparator();\n    Agregar_Area = new javax.swing.JButton();\n    jLabel8 = new javax.swing.JLabel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    Areas_Agregadas = new javax.swing.JTextArea();\n    jLabel19 = new javax.swing.JLabel();\n    jLabel20 = new javax.swing.JLabel();\n\n    setLayout(new java.awt.GridBagLayout());\n\n    jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/biblioteca/gui/resources/logo.png\"))); // NOI18N\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.gridwidth = 13;\n    gridBagConstraints.gridheight = 2;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n    gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);\n    add(jLabel3, gridBagConstraints);\n\n    jLabel4.setFont(new java.awt.Font(\"Ubuntu\", 1, 24));\n    jLabel4.setText(\"\u00c1reas de Inter\u00e9s\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 2;\n    gridBagConstraints.gridwidth = 17;\n    add(jLabel4, gridBagConstraints);\n\n    jLabel5.setFont(new java.awt.Font(\"Ubuntu\", 0, 18));\n    jLabel5.setText(\"\u00c1reas Existentes: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 3;\n    gridBagConstraints.gridwidth = 3;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);\n    add(jLabel5, gridBagConstraints);\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 4;\n    gridBagConstraints.gridwidth = 17;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.ipadx = 350;\n    gridBagConstraints.ipady = 2;\n    gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 15);\n    add(Areas, gridBagConstraints);\n\n    Cancelar.setText(\"Cancelar Operaci\u00f3n\");\n    Cancelar.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            CancelarActionPerformed(evt);\n        }\n    });\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 13;\n    gridBagConstraints.gridy = 3;\n    gridBagConstraints.gridwidth = 4;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);\n    add(Cancelar, gridBagConstraints);\n\n    Agregar.setText(\"Agregar \u00c1rea al Documento\");\n    Agregar.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            AgregarActionPerformed(evt);\n        }\n    });\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 12;\n    gridBagConstraints.gridy = 5;\n    gridBagConstraints.gridwidth = 5;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);\n    add(Agregar, gridBagConstraints);\n\n    jSeparator1.setMinimumSize(new java.awt.Dimension(150, 6));\n    jSeparator1.setPreferredSize(new java.awt.Dimension(200, 10));\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 14;\n    gridBagConstraints.gridwidth = 18;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.ipadx = 350;\n    gridBagConstraints.ipady = -4;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);\n    add(jSeparator1, gridBagConstraints);\n\n    jLabel2.setFont(new java.awt.Font(\"Ubuntu\", 0, 18));\n    jLabel2.setText(\"Agregar una Nueva \u00c1rea: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 9;\n    gridBagConstraints.gridwidth = 7;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);\n    add(jLabel2, gridBagConstraints);\n\n    jLabel6.setText(\"Nombre: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 10;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);\n    add(jLabel6, gridBagConstraints);\n\n    LimitadorDejTextField AreaL=new LimitadorDejTextField(70);\n    Area_Nombre.setDocument(AreaL);\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 2;\n    gridBagConstraints.gridy = 10;\n    gridBagConstraints.gridwidth = 15;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.ipadx = 300;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);\n    add(Area_Nombre, gridBagConstraints);\n\n    jLabel1.setText(\"Descripci\u00f3n: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 11;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);\n    add(jLabel1, gridBagConstraints);\n\n    LimitadorDejTextField Area_DescripcionL=new LimitadorDejTextField(200);\n    Area_Descripcion.setDocument(Area_DescripcionL);\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 2;\n    gridBagConstraints.gridy = 11;\n    gridBagConstraints.gridwidth = 15;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.ipadx = 300;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);\n    add(Area_Descripcion, gridBagConstraints);\n\n    jLabel7.setText(\"\u00c1rea Padre: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 12;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);\n    add(jLabel7, gridBagConstraints);\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 2;\n    gridBagConstraints.gridy = 12;\n    gridBagConstraints.gridwidth = 15;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.ipadx = 300;\n    gridBagConstraints.ipady = 2;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);\n    add(Area_Padre, gridBagConstraints);\n\n    Siguiente.setFont(new java.awt.Font(\"Ubuntu\", 1, 15));\n    Siguiente.setText(\"Siguiente Paso\");\n    Siguiente.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            SiguienteActionPerformed(evt);\n        }\n    });\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 13;\n    gridBagConstraints.gridy = 15;\n    gridBagConstraints.gridwidth = 4;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;\n    gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 15);\n    add(Siguiente, gridBagConstraints);\n\n    Estado.setFont(new java.awt.Font(\"Ubuntu\", 0, 24));\n    Estado.setForeground(new java.awt.Color(255, 0, 0));\n    Estado.setText(\"[Sin Guardar]\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 15;\n    gridBagConstraints.gridwidth = 4;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n    gridBagConstraints.insets = new java.awt.Insets(24, 12, 10, 0);\n    add(Estado, gridBagConstraints);\n\n    jSeparator2.setMinimumSize(new java.awt.Dimension(150, 6));\n    jSeparator2.setPreferredSize(new java.awt.Dimension(200, 10));\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 8;\n    gridBagConstraints.gridwidth = 17;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.ipadx = 350;\n    gridBagConstraints.ipady = -4;\n    gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);\n    add(jSeparator2, gridBagConstraints);\n\n    Agregar_Area.setText(\"Agregar \u00c1rea de Interes\");\n    Agregar_Area.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            Agregar_AreaActionPerformed(evt);\n        }\n    });\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 13;\n    gridBagConstraints.gridwidth = 17;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);\n    add(Agregar_Area, gridBagConstraints);\n\n    jLabel8.setFont(new java.awt.Font(\"Ubuntu\", 0, 18));\n    jLabel8.setText(\"\u00c1reas Agregadas: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 5;\n    gridBagConstraints.gridwidth = 6;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);\n    add(jLabel8, gridBagConstraints);\n\n    Areas_Agregadas.setColumns(20);\n    Areas_Agregadas.setRows(5);\n    Areas_Agregadas.setMinimumSize(new java.awt.Dimension(200, 200));\n    Areas_Agregadas.setPreferredSize(new java.awt.Dimension(300, 500));\n    jScrollPane1.setViewportView(Areas_Agregadas);\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 6;\n    gridBagConstraints.gridwidth = 17;\n    gridBagConstraints.gridheight = 2;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n    gridBagConstraints.ipadx = 350;\n    gridBagConstraints.ipady = 40;\n    gridBagConstraints.weightx = 1.0;\n    gridBagConstraints.weighty = 1.0;\n    gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 15);\n    add(jScrollPane1, gridBagConstraints);\n\n    jLabel19.setForeground(new java.awt.Color(255, 0, 0));\n    jLabel19.setText(\"*\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 10;\n    add(jLabel19, gridBagConstraints);\n\n    jLabel20.setForeground(new java.awt.Color(255, 0, 0));\n    jLabel20.setText(\"*\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 11;\n    add(jLabel20, gridBagConstraints);\n}", "path": "src\\biblioteca\\gui\\catalogacion\\Selecc_Areas.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Consulta un autor basandose en la direcci\u00f3n de correo electronico\n * @param correo String con el correo electronico del autor a consultar\n * @return Autor con los datos del autor encontrado\n */\n", "func_signal": "public Autor consultarAutor(String correo)", "code": "{\n   Autor autor= new Autor();\n   String sql_consultar;\n   sql_consultar=\"SELECT * FROM autor WHERE correo= '\" +correo+ \"';\";\n    try{\n       Connection conn= fachada.conectar();\n       Statement sentencia = conn.createStatement();\n       ResultSet tabla = sentencia.executeQuery(sql_consultar);\n       while(tabla.next()){\n         autor.setCorreo(tabla.getString(1));\n         autor.setAcronimo(tabla.getString(2));\n         autor.setNombre(tabla.getString(3));\n         autor.setApellido(tabla.getString(4));\n       }\n       conn.close();\n\n    }\n    catch(SQLException e){ System.err.println(e); }\n    catch(Exception e){ System.err.println(e); }\n   return autor;\n    }", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoAutor.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Inicializa los ComboBox de \u00e1reas con las existentes en la base de datos\n */\n", "func_signal": "private void initComboBox()", "code": "{\n    Areas.removeAllItems();\n    Area_Padre.removeAllItems();\n    areasExistentes= new ControladorArea().consultarTodasLasAreas();\n    if(areasExistentes!=null){\n        for(int i=0;i<areasExistentes.size();i++){\n            Areas.insertItemAt(areasExistentes.get(i), i);\n            Area_Padre.insertItemAt(areasExistentes.get(i), i);\n        }\n        Areas.setSelectedIndex(-1);\n        Area_Padre.setSelectedIndex(-1);\n    }\n}", "path": "src\\biblioteca\\gui\\catalogacion\\Selecc_Areas.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Consulta todos los autores existentes en la base de datos\n * @return ArrayList de Autor que contiene a todos autores\n */\n", "func_signal": "public ArrayList<Autor> consultarTodos()", "code": "{\n    ArrayList<Autor> autores = null;\n    String sql_consultar;\n    sql_consultar=\"SELECT * FROM autor ORDER BY autor_correo ASC;\";\n     try{\n        Connection conn= fachada.conectar();\n        Statement sentencia = conn.createStatement();\n        ResultSet tabla = sentencia.executeQuery(sql_consultar);\n        autores = new ArrayList<Autor>();\n        while(tabla.next()){\n          Autor autor = new Autor();\n          autor.setCorreo(tabla.getString(1));\n          autor.setAcronimo(tabla.getString(2));\n          autor.setApellido(tabla.getString(3));\n          autor.setNombre(tabla.getString(4));\n          autores.add(autor);\n        }\n        conn.close();\n\n     }\n     catch(SQLException e){ System.err.println(e); }\n     catch(Exception e){ System.err.println(e); }\n    return autores;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoAutor.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Handler para el bot\u00f3n de agregar area, agrega un \u00e1rea a la base de datos\n * con los datos obtenidos de la interfaz, adem\u00e1s reinicializa los Combobox\n * de \u00e1rea\n * @param evt ActionEvent (no se usa)\n */\n", "func_signal": "private void Agregar_AreaActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_Agregar_AreaActionPerformed\n    if(checkEmptyFieldsArea()){\n        new ControladorArea().insertarArea(Area_Descripcion.getText().replaceAll(\"[']\", \"`\"), Area_Nombre.getText().replaceAll(\"[']\", \"`\"), (Area_Padre.getSelectedIndex()!=-1) ? ((Area)Area_Padre.getSelectedItem()).getID() : \"0\");\n        JOptionPane.showMessageDialog(this, \"El el area con nombre \"+Area_Nombre.getText()+ \" ha sido agregado\", \"Notificaci\u00f3n\", JOptionPane.INFORMATION_MESSAGE);\n        Area_Nombre.setText(\"\");\n        Area_Descripcion.setText(\"\");\n        Area_Padre.setSelectedIndex(-1);\n        Areas.setSelectedIndex(-1);\n        initComboBox();\n    }\n}", "path": "src\\biblioteca\\gui\\catalogacion\\Selecc_Areas.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Dado un resultSet, se transforma en un ArrayList de ArrayList de String,\n * manteniendo la misma estructura de tabla que tenia el resultSet original,\n * y en su primera linea teniendo los nombres de las columnas del resultSet\n * @param entrada Un ResultSet obtenido de una consulta SQL\n * @return ArrayList<ArrayList<String>> que contiene los datos del ResultSet m\u00e1s los nombres de la columna\n */\n", "func_signal": "static public ArrayList<ArrayList<String>> resultSetToArrayList(ResultSet entrada)", "code": "{\n    ArrayList<ArrayList<String>> salida = null;\n    try{\n        ResultSetMetaData rsmd = entrada.getMetaData();\n        salida=new ArrayList<ArrayList<String>>();\n        ArrayList<String> titulos = new ArrayList<String>(rsmd.getColumnCount());\n        for(int i=1;i<=rsmd.getColumnCount();i++){\n            titulos.add(rsmd.getColumnName(i));\n        }\n        salida.add(titulos);\n        while(entrada.next()){\n            ArrayList<String> temporal = new ArrayList<String>(rsmd.getColumnCount());\n            for(int i=1;i<=rsmd.getColumnCount();i++){\n                temporal.add(entrada.getString(i));\n            }\n            salida.add(temporal);\n            \n        }\n    }catch(java.sql.SQLException sqlex){\n        System.err.println(sqlex);\n    }\n    return salida;\n}", "path": "src\\biblioteca\\reportes\\PdfCreator.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Elimina todas las \u00e1reas agregadas que est\u00e1n en el contenedor de \u00e1reas\n * seleccionadas y refresca el JTextArea de \u00e1reas\n * @param evt \n */\n", "func_signal": "private void CancelarActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_CancelarActionPerformed\n    biblioteca.gui.GUICatalogacion.Areas_Guardadas=false;\n    Cancelar.setEnabled(false);\n    Agregar.setEnabled(true);\n    Areas.setEnabled(true);\n    areasSeleccionadas.clear();\n    refreshAreas();\n    Estado.setForeground(Color.red);\n    Estado.setText(\"[Sin Guardar]\");\n}", "path": "src\\biblioteca\\gui\\catalogacion\\Selecc_Areas.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Modifica un autor seg\u00fan su correo electronico\n * @param autor Autor con los datos a modificar y el correo\n * @return -1 si la consulta no fue exitosa\n */\n", "func_signal": "public int modificarAutor(Autor autor)", "code": "{\n    String sql_modificar;\n    sql_modificar=\"UPDATE autor  SET autor_correo = '\"+autor.getCorreo()+\"', nombre = '\"+autor.getNombre()+\"', apellido = '\"+autor.getApellido()+\"', acronimo = '\"+autor.getAcronimo()+\n             \"' WHERE autor_correo = '\"+autor.getCorreo()+\"';\";\n    try{\n        Connection conn= fachada.conectar();\n        Statement sentencia = conn.createStatement();\n        int numFilas = sentencia.executeUpdate(sql_modificar);\n        conn.close();            \n        return numFilas;\n    }\n    catch(SQLException e){ System.err.println(e); }\n\n    return -1;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoAutor.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Finaliza el proceso de Seleccionar \u00e1reas y pasa a la siguiente interfaz\n * en el proceso de catalogaci\u00f3n.\n * @param evt \n */\n", "func_signal": "private void SiguienteActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_SiguienteActionPerformed\n    if(!areasSeleccionadas.isEmpty()){\n        Estado.setForeground(Color.green);\n        Estado.setText(\"[Guardado]\");\n        JTabbedPane parent =(JTabbedPane) this.getParent();\n        parent.setSelectedIndex(3);\n        Cancelar.setEnabled(true);\n        Agregar.setEnabled(false);\n        Areas.setEnabled(false);\n        Areas.setSelectedIndex(-1);\n        biblioteca.gui.GUICatalogacion.Areas_Guardadas=true;\n    }\n    else JOptionPane.showMessageDialog(this, \"Debe seleccionar al menos un area\", \"Error\", JOptionPane.ERROR_MESSAGE);\n    \n    \n}", "path": "src\\biblioteca\\gui\\catalogacion\\Selecc_Areas.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Dado un resultSet obtenido de una consulta, esta funci\u00f3n convierte los datos\n * internos de este en una tabla que puede ser insertada en un Document de iText\n * esta PdfPTable tiene en su primera linea los nombres de las columnas del ResultSet\n * @param entrada ResultSet El resultado de una consulta a la base de datos\n * @return una PdfPTable para insertar en un documento de iText\n * @see com.itextpdf.text.pdf.PdfPTable;\n * @see java.sql.ResultSet;\n */\n", "func_signal": "static public PdfPTable resultSetToTable(ResultSet entrada)", "code": "{\n    PdfPTable salida = null;\n    try{\n        ResultSetMetaData rsmd = entrada.getMetaData();\n    \n        salida = new PdfPTable(rsmd.getColumnCount());\n        for(int i=1;i<=rsmd.getColumnCount();i++){\n            salida.addCell(rsmd.getColumnName(i));\n        }\n        salida.setHeaderRows(1);\n        while(entrada.next()){\n            for(int i=1;i<=rsmd.getColumnCount();i++){\n                salida.addCell(entrada.getString(i));\n            }\n        }\n    }catch(java.sql.SQLException sqlex){\n        System.err.println(sqlex);\n    }\n    return salida;\n}", "path": "src\\biblioteca\\reportes\\PdfCreator.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Esta funci\u00f3n convierte un arrayList en una PdfPTable y, agrega una columna\n * de estadisticas a esta. Funcionar\u00e1 si el arrayList tiene en su ultima columna\n * numeros\n * @param entrada Matriz con los datos estadisticos de la base de datos\n * @param total La suma de todos los datos de la ultima columna\n * @param rows El numero de columnas que se mostrar\u00e1n en la PdfPTable\n * @return PdfPTable Contiene los datos del ArrayList m\u00e1s los porcentajes.\n */\n", "func_signal": "static public PdfPTable arrayListToStatisticTable(ArrayList<ArrayList<String>> entrada, int total, int rows)", "code": "{\n    PdfPTable salida = null;\n    \n    salida = new PdfPTable(entrada.get(0).size() +1);\n    for(int i=0;i<entrada.get(0).size();i++){\n        salida.addCell(entrada.get(0).get(i));\n    }\n    salida.addCell(\"Porcentaje\");\n    salida.setHeaderRows(1);\n    int counter=0;\n    for(int j=1;j<entrada.size()&&counter<rows;j++){\n        for(int i=0;i<entrada.get(j).size();i++){\n            salida.addCell(entrada.get(j).get(i));\n            if(i==entrada.get(j).size()-1){\n                int porcentaje=(int) (Integer.parseInt(entrada.get(j).get(i))*100)/total;\n                salida.addCell(porcentaje+\"%\");\n            }\n        }\n        counter++;\n    }\n    if(entrada.size()-1>rows){\n        int otros=0, otrospor;\n        for(int i=counter;i<entrada.size();i++){\n            otros+=Integer.parseInt(entrada.get(i).get(entrada.get(i).size()-1));\n        }\n        otrospor=otros*100;\n        otrospor/=total;\n        salida.addCell(\"-\");\n        salida.addCell(\"Otros\");\n        salida.addCell(otros+\"\");\n        salida.addCell(otrospor+\"%\");\n    }\n    return salida;\n}", "path": "src\\biblioteca\\reportes\\PdfCreator.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Refresca el JTextArea que contiene los nombres de las \u00e1reas que est\u00e1n\n * actualmente agregadas al contenedor de \u00e1reas seleccionadas\n */\n", "func_signal": "private void refreshAreas()", "code": "{\n    String texto=\"\";\n    for(int i=0;i<areasSeleccionadas.size();i++){\n        texto+=areasSeleccionadas.get(i).toString();\n        if(i!=(areasSeleccionadas.size()-1))\n            texto+=\"\\n\";\n    }\n    Areas_Agregadas.setText(texto);\n}", "path": "src\\biblioteca\\gui\\catalogacion\\Selecc_Areas.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Elimina un autor de la base de datos\n * @param correo String con el correo electronico del autor a eliminar\n * @return -1 si la consulta no fue exitosa\n * @deprecated No es recomendable eliminar autores de la base de datos, genera perdida de informaci\u00f3n\n */\n", "func_signal": "@Deprecated\npublic int eliminarAutor(String correo)", "code": "{\n    String sql_eliminar;\n    sql_eliminar=\"DELETE FROM autor WHERE correo = '\"+correo+\"';\";\n\n    try{\n        Connection conn= fachada.conectar();\n        Statement sentencia = conn.createStatement();\n        int numFilas = sentencia.executeUpdate(sql_eliminar);\n        System.out.println(\"se elimino exitosamente!!!!\");\n        conn.close();\n        System.out.println(\"Conexion cerrada\");\n        return numFilas;\n    }\n    catch(SQLException e){ System.err.println(e); }\n\n    return -1;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoAutor.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Inserta un nuevo tipo de documento, especificando sus datos\n * @param tipoDocumento TipoDocumento con los datos a insertar\n * @return -1 si la operaci\u00f3n no fue exitosa\n */\n", "func_signal": "public int agregarTipoDocumento(TipoDocumento tipoDocumento)", "code": "{\n   String sql_agregar;\n   sql_agregar = \"INSERT INTO tipo_material(tipo_documento, descripcion) VALUES ('\" +\n           tipoDocumento.getTipoDocumento() + \"','\" + tipoDocumento.getDescripcion() + \"')\";\n\n   try{\n        Connection conn= fachada.conectar();\n        Statement sentencia = conn.createStatement();\n        int numFilas = sentencia.executeUpdate(sql_agregar);\n        conn.close();\n        return numFilas;\n    }\n    catch(SQLException e){ System.err.println(e); }\n    catch(Exception e){ System.err.println(e); }\n\n   return -1;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoTipoDocumento.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Consulta el tipo de documento seg\u00fan el nombre dado\n * @param nombre String con el nombre del tipo de documento a consultar\n * @return TipoDocumento con los datos relacionados\n */\n", "func_signal": "public TipoDocumento consultarTipoDocumento(String nombre)", "code": "{\n    String sql_consultar;\n    sql_consultar=\"SELECT * FROM  tipo_material WHERE tipo_documento = '\" +\n            nombre + \"';\";\n    try{\n        Connection conn= fachada.conectar();\n        Statement sentencia = conn.createStatement();\n        ResultSet tabla = sentencia.executeQuery(sql_consultar);\n        \n        TipoDocumento tipoDocumento=null;\n        if(tabla.next()){\n            tipoDocumento.setTipoDocumento(tabla.getString(1));\n            tipoDocumento.setDescripcion(tabla.getString(2));\n        }\n        conn.close();\n        return tipoDocumento;\n\n    }\n    catch(SQLException e){ System.err.println(e); }\n    catch(Exception e){ System.err.println(e); }\n    return null;\n}", "path": "src\\biblioteca\\database2\\accesoDatos\\DaoTipoDocumento.java", "repo_name": "alevalv/Biblioteca-Digital", "stars": 8, "license": "gpl-3.0", "language": "java", "size": 26618}
{"docstring": "/**\n * Parses a general information line\n * \n * @param line\n */\n", "func_signal": "private void parseGeneralLine(String line)", "code": "{\n    String[] result = line.split(\"=\");\n    if (result.length == 2) {\n        String key = result[0].trim();\n        String value = result[1].trim();\n        if (key.toLowerCase().contains(VERSION_TOKEN)) {\n            generalData.setVersion(Integer.parseInt(value));\n        }\n        if (key.toLowerCase().contains(RELOAD_TOKEN)) {\n            generalData.setReload(Integer.parseInt(value));\n        }\n        if (key.toLowerCase().contains(UPDATE_TOKEN)) {\n            generalData.setLastUpdate(value);\n        }\n        if (key.toLowerCase().contains(CONNECTED_CLIENTS_TOKEN)) {\n            generalData.setConnectedClients(Integer.parseInt(value));\n        }\n        if (key.toLowerCase().contains(ATIS_ALLOW_MIN_TOKEN)) {\n            generalData.setAtisAllowMin(Integer.parseInt(value));\n        }\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\ServerParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * @return true if data of servers, pilots and controllers are available\n */\n", "func_signal": "public boolean allDataAvailable()", "code": "{\n    if (servers.size() == 0 || pilots.size() == 0 || controllers.size() == 0) {\n        return false;\n    }\n    return true;\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\VatsimDataManager.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void processLine(String line)", "code": "{\n    if (line.trim().startsWith(\";\")) {\n        return;\n    }\n    if (line.contains(ERROR_TOKEN)) {\n        servers = new ArrayList<VatsimServer>();\n        return;\n    }\n    findSection(line);\n    if (section == GENERAL_SECTION) {\n        parseGeneralLine(line);\n    } else if (section == SERVER_SECTION) {\n        parseServerSection(line);\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\ServerParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Tell the parser the current section\n * \n * @param line\n */\n", "func_signal": "private void findSection(String line)", "code": "{\n    if (line.contains(CLIENT_SECTION)) {\n        section = CLIENT_SECTION;\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\UserParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void processLine(String line)", "code": "{\n    if (line.contains(ERROR_TOKEN)) {\n        controllers = new ArrayList<VatsimController>();\n        pilots = new ArrayList<VatsimPilot>();\n        return;\n    }\n    findSection(line);\n    if (section.equalsIgnoreCase(CLIENT_SECTION)) {\n        parseClientLine(line);\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\UserParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Constructor.\n * \n * @param source\n * @param progress\n */\n", "func_signal": "public ServerParser(String source, VatsimProgressUpdate progress)", "code": "{\n    super(source, progress);\n    setProgressState(VatsimProgressUpdate.SERVER_LOADING_STATE);\n    parse();\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\ServerParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Updates all Vatsim data and notifies the registered {@link VatsimDataUpdate}\n * \n * @param progress\n *            callback to notify the caller about the current progress\n * @throws VatsimDataManagerException\n *             thrown if the VatsimDataManager is not initialized.\n */\n", "func_signal": "public void update(VatsimProgressUpdate progress) throws VatsimDataManagerException", "code": "{\n    lastUpdate = System.currentTimeMillis();\n    StatusParser statusParser = new StatusParser(statusUrl, progress);\n    status = statusParser.getVatsimStatus();\n    if (status != null) {\n        ServerParser serverParser = new ServerParser(status.getRandomServerUrl(), progress);\n        servers = serverParser.getServers();\n        UserParser userParser = new UserParser(status.getRandomDataUrl(), progress);\n        controllers = userParser.getControllers();\n        pilots = userParser.getPilots();\n        airports = generateAirportList();\n        updateDataListeners();\n    } else {\n        throw new VatsimDataManagerException(VatsimDataManagerException.NOT_INITIALIZED_MESSAGE);\n    }\n\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\VatsimDataManager.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Constructor.\n * \n * @param source\n *            url of file to parse\n * @param progress\n *            callback for sending progress information\n */\n", "func_signal": "protected AVatsimParser(String source, VatsimProgressUpdate progress)", "code": "{\n    this.source = source;\n    this.progress = progress;\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\AVatsimParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void addVatsimDataUpdateListener(VatsimDataUpdate client)", "code": "{\n    listeners.add(client);\n    client.update(pilots, servers, controllers, airports);\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\VatsimDataManager.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * @return a list of airports which are crawled from flight schedules of pilots\n */\n", "func_signal": "private ArrayList<VatsimAirport> generateAirportList()", "code": "{\n    ArrayList<VatsimAirport> airports = new ArrayList<VatsimAirport>();\n    for (VatsimPilot pilot : pilots) {\n        if (pilot.getFlightplanInfo().getDepartureAirport() != null) {\n            if (airports.contains(pilot.getFlightplanInfo().getDepartureAirport()) == false) {\n                airports.add(pilot.getFlightplanInfo().getDepartureAirport());\n            }\n        }\n        if (pilot.getFlightplanInfo().getDestinationAirport() != null) {\n            if (airports.contains(pilot.getFlightplanInfo().getDestinationAirport()) == false) {\n                airports.add(pilot.getFlightplanInfo().getDestinationAirport());\n            }\n        }\n    }\n    return airports;\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\VatsimDataManager.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * update all clients, if all data are available\n */\n", "func_signal": "private void updateDataListeners()", "code": "{\n    if (allDataAvailable()) {\n        for (VatsimDataUpdate client : listeners) {\n            if (client != null) {\n                client.update(pilots, servers, controllers, airports);\n            }\n        }\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\VatsimDataManager.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Constructor.\n * \n * @param source\n * @param progress\n */\n", "func_signal": "public UserParser(String source, VatsimProgressUpdate progress)", "code": "{\n    super(source, progress);\n    setProgressState(VatsimProgressUpdate.USER_LOADING_STATE);\n    parse();\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\UserParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "// 35\n", "func_signal": "public VatsimController(String[] data)", "code": "{\n        super(data);\n        frequency = data[4];\n        facilitytype = data[18];\n        visualrange = data[19];\n        atisMessage = data[35];\n\n    }", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\model\\VatsimController.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * @param line\n *            string of a clinet line (controller or pilot)\n */\n", "func_signal": "private void parseClientLine(String line)", "code": "{\n    line += END_TOKEN;\n    String[] result = line.split(\":\");\n    if (result.length == 42) {\n        if (result[3].contains(PILOT_TYPE)) {\n            pilots.add(new VatsimPilot(result));\n        }\n        if (result[3].contains(CONTROLLER_TYPE)) {\n            controllers.add(new VatsimController(result));\n        }\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\UserParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * @param line\n *            string of server section will be parsed and an entity of {@link VatsimServer} will\n *            be created\n */\n", "func_signal": "private void parseServerSection(String line)", "code": "{\n    String[] result = line.split(\":\");\n    if (result.length == 5) {\n        servers.add(new VatsimServer(result[0], result[1], result[2], result[3], Boolean.getBoolean(result[4]), generalData));\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\ServerParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Parses a file received from the source url and calls {$link {@link #processLine(String)} for\n * a specific entity.\n */\n", "func_signal": "protected void parse()", "code": "{\n    InputStream input = null;\n    int currentProgress = 0;\n    int totalProgress = 0;\n    try {\n        if (source == null) {\n            processLine(ERROR_TOKEN);\n            return;\n        }\n        URLConnection urlConnection = new URL(source).openConnection();\n        totalProgress = urlConnection.getContentLength();\n        input = urlConnection.getInputStream();\n        BufferedReader r = new BufferedReader(new InputStreamReader(input));\n        String line;\n        int sendProgressFlag = 0;\n        while ((line = r.readLine()) != null) {\n            sendProgressFlag++;\n            currentProgress += line.length();\n            processLine(line);\n            if (sendProgressFlag % 20 == 0) {\n                progress.updateProgress((int) ((currentProgress / (float) totalProgress) * 100), progressState);\n            }\n        }\n        processLine(END_TOKEN);\n    } catch (MalformedURLException e) {\n        processLine(ERROR_TOKEN);\n    } catch (IOException e) {\n        processLine(ERROR_TOKEN);\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\AVatsimParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void processLine(String line)", "code": "{\n    if (line.trim().startsWith(\";\")) {\n        return;\n    }\n    if (line.contains(ERROR_TOKEN)) {\n        vatsimStatus = null;\n        return;\n    }\n    String[] result = line.split(\"=\");\n    if (result.length == 2) {\n        String key = result[0].trim();\n        String value = result[1].trim();\n        if (key.toLowerCase().contains(DATA_URL_TOKEN)) {\n            vatsimStatus.addDataUrl(value);\n        }\n        if (key.toLowerCase().contains(SERVER_URL_TOKEN)) {\n            vatsimStatus.addServerUrl(value);\n        }\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\StatusParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "//usa-s1.vatsim.net/data/status.txt\";\n", "func_signal": "@Test\n    public void testVatsimDataManger() throws VatsimDataManagerException", "code": "{\n        VatsimDataManager manager = new VatsimDataManager();\n        manager.init(VATSIM_STATUS_URL);\n        manager.addVatsimDataUpdateListener(new VatsimDataUpdate() {\n\n            public void update(ArrayList<VatsimPilot> pilots, ArrayList<VatsimServer> servers, ArrayList<VatsimController> controller,\n                    ArrayList<VatsimAirport> airports) {\n                Assert.assertNotNull(servers);\n                Assert.assertNotNull(pilots);\n                Assert.assertNotNull(controller);\n            }\n        });\n        manager.update(new VatsimProgressUpdate() {\n\n            public void updateProgress(int progress, int state) {\n            }\n        });\n    }", "path": "vatsimdatamanager\\src\\test\\java\\de\\zilchinger\\vatsimdatamanager\\VatsimDataManagerTest.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Tell the parser the current section\n * \n * @param line\n */\n", "func_signal": "private void findSection(String line)", "code": "{\n    if (line.contains(GENERAL_SECTION)) {\n        section = GENERAL_SECTION;\n    }\n    if (line.contains(SERVER_SECTION)) {\n        section = SERVER_SECTION;\n    }\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\ServerParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Constructor.\n * \n * @param source\n * @param progress\n */\n", "func_signal": "public StatusParser(String source, VatsimProgressUpdate progress)", "code": "{\n    super(source, progress);\n    this.vatsimStatus = new VatsimStatus();\n    parse();\n}", "path": "vatsimdatamanager\\src\\main\\java\\de\\zilchinger\\vatsimdataapi\\parser\\StatusParser.java", "repo_name": "szilch/vatsim-data-api", "stars": 8, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Returns the number of transitions in this automaton. This number is counted\n * as the total number of edges, where one edge may be a character interval.\n */\n", "func_signal": "public int getNumberOfTransitions()", "code": "{\n\tif (isSingleton())\n\t\treturn singleton.length();\n\tint c = 0;\n\tfor (State s : getStates())\n\t\tc += s.transitions.size();\n\treturn c;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * JDK1.5-replacement of {@link Arrays#copyOf(char[], int)}\n */\n", "func_signal": "public static State[] copyOf(State[] original, int newLength)", "code": "{\n\tState[] copy = new State[newLength];\n\tSystem.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength));\n\treturn copy;\n}", "path": "src\\dk\\brics\\automaton\\StringUnionOperations.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Returns pre-built automaton.\n \t * Automata are loaded as resources from the class loader of the <tt>Datatypes</tt> class.\n \t * (Typically, the pre-built automata are stored in the same jar as this class.)\n \t * <p>\n * The following automata are available:\n * <table border=1>\n * <tr><th>Name</th><th>Description</th></tr>\n * <tr><td><tt>NCName</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a> from XML Namespaces 1.0</td></tr>\n * <tr><td><tt>QName</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/REC-xml-names/#NT-QName\">QName</a> from XML Namespaces 1.0</td></tr>\n * <tr><td><tt>Char</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/REC-xml/#NT-Char\">Char</a> from XML 1.0</td></tr>\n * <tr><td><tt>NameChar</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/REC-xml/#NT-NameChar\">NameChar</a> from XML 1.0</td></tr>\n * <tr><td><tt>URI</tt></td><td><a target=\"_top\" href=\"http://rfc.net/rfc2396.html#sA%2e\">URI</a> from RFC2396 with\n * amendments from <a target=\"_top\" href=\"http://www.faqs.org/rfcs/rfc2373.html\">RFC2373</td></tr>\n * <tr><td><tt>anyname</tt></td><td>optional URI enclosed by brackets, followed by NCName</td></tr>\n * <tr><td><tt>noap</tt></td><td>strings not containing '@' and '%'</td></tr>\n * <tr><td><tt>whitespace</tt></td><td>optional <a target=\"_top\" href=\"http://www.w3.org/TR/REC-xml/#NT-S\">S</a> from XML 1.0</td></tr>\n * <tr><td><tt>whitespacechar</tt></td><td>a single <a target=\"_top\" href=\"http://www.w3.org/TR/REC-xml/#NT-S\">whitespace character</a> from XML 1.0</td></tr>\n * <tr><td><tt>string</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#string\">string</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>boolean</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#boolean\">boolean</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>decimal</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#decimal\">decimal</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>float</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#float\">float</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>integer</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#integer\">integer</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>duration</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#duration\">duration</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>dateTime</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#dateTime\">dateTime</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>time</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#time\">time</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>date</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#date\">date</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>gYearMonth</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#gYearMonth\">gYearMonth</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>gYear</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#gYear\">gYear</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>gMonthDay</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#gMonthDay\">gMonthDay</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>gDay</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#gDay\">gDay</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>hexBinary</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#hexBinary\">hexBinary</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>base64Binary</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#base64Binary\">base64Binary</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>NCName2</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#NCName\">NCName</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>NCNames</tt></td><td>list of <a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#NCName\">NCName</a>s from XML Schema Part 2</td></tr>\n * <tr><td><tt>QName2</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#QName\">QName</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>Nmtoken2</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#NMTOKEN\">NMTOKEN</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>Nmtokens</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#NMTOKENS\">NMTOKENS</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>Name2</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#Name\">Name</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>Names</tt></td><td>list of <a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#Name\">Name</a>s from XML Schema Part 2</td></tr>\n * <tr><td><tt>language</tt></td><td><a target=\"_top\" href=\"http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#language\">language</a> from XML Schema Part 2</td></tr>\n * <tr><td><tt>BasicLatin</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">BasicLatin</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Latin-1Supplement</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Latin-1Supplement</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>LatinExtended-A</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">LatinExtended-A</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>LatinExtended-B</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">LatinExtended-B</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>IPAExtensions</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">IPAExtensions</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>SpacingModifierLetters</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">SpacingModifierLetters</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CombiningDiacriticalMarks</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CombiningDiacriticalMarks</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Greek</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Greek</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Cyrillic</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Cyrillic</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Armenian</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Armenian</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Hebrew</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Hebrew</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Arabic</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Arabic</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Syriac</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Syriac</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Thaana</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Thaana</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Devanagari</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Devanagari</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Bengali</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Bengali</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Gurmukhi</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Gurmukhi</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Gujarati</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Gujarati</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Oriya</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Oriya</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Tamil</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Tamil</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Telugu</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Telugu</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Kannada</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Kannada</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Malayalam</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Malayalam</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Sinhala</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Sinhala</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Thai</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Thai</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Lao</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Lao</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Tibetan</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Tibetan</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Myanmar</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Myanmar</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Georgian</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Georgian</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>HangulJamo</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">HangulJamo</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Ethiopic</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Ethiopic</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Cherokee</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Cherokee</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>UnifiedCanadianAboriginalSyllabics</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">UnifiedCanadianAboriginalSyllabics</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Ogham</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Ogham</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Runic</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Runic</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Khmer</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Khmer</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Mongolian</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Mongolian</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>LatinExtendedAdditional</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">LatinExtendedAdditional</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>GreekExtended</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">GreekExtended</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>GeneralPunctuation</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">GeneralPunctuation</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>SuperscriptsandSubscripts</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">SuperscriptsandSubscripts</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CurrencySymbols</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CurrencySymbols</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CombiningMarksforSymbols</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CombiningMarksforSymbols</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>LetterlikeSymbols</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">LetterlikeSymbols</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>NumberForms</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">NumberForms</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Arrows</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Arrows</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>MathematicalOperators</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">MathematicalOperators</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>MiscellaneousTechnical</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">MiscellaneousTechnical</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>ControlPictures</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">ControlPictures</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>OpticalCharacterRecognition</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">OpticalCharacterRecognition</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>EnclosedAlphanumerics</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">EnclosedAlphanumerics</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>BoxDrawing</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">BoxDrawing</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>BlockElements</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">BlockElements</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>GeometricShapes</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">GeometricShapes</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>MiscellaneousSymbols</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">MiscellaneousSymbols</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Dingbats</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Dingbats</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>BraillePatterns</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">BraillePatterns</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKRadicalsSupplement</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKRadicalsSupplement</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>KangxiRadicals</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">KangxiRadicals</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>IdeographicDescriptionCharacters</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">IdeographicDescriptionCharacters</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKSymbolsandPunctuation</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKSymbolsandPunctuation</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Hiragana</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Hiragana</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Katakana</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Katakana</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Bopomofo</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Bopomofo</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>HangulCompatibilityJamo</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">HangulCompatibilityJamo</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Kanbun</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Kanbun</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>BopomofoExtended</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">BopomofoExtended</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>EnclosedCJKLettersandMonths</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">EnclosedCJKLettersandMonths</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKCompatibility</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKCompatibility</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKUnifiedIdeographsExtensionA</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKUnifiedIdeographsExtensionA</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKUnifiedIdeographs</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKUnifiedIdeographs</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>YiSyllables</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">YiSyllables</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>YiRadicals</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">YiRadicals</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>HangulSyllables</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">HangulSyllables</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKCompatibilityIdeographs</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKCompatibilityIdeographs</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>AlphabeticPresentationForms</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">AlphabeticPresentationForms</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>ArabicPresentationForms-A</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">ArabicPresentationForms-A</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CombiningHalfMarks</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CombiningHalfMarks</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKCompatibilityForms</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKCompatibilityForms</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>SmallFormVariants</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">SmallFormVariants</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>ArabicPresentationForms-B</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">ArabicPresentationForms-B</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Specials</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Specials</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>HalfwidthandFullwidthForms</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">HalfwidthandFullwidthForms</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Specials</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Specials</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>OldItalic</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">OldItalic</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Gothic</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Gothic</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Deseret</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Deseret</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>ByzantineMusicalSymbols</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">ByzantineMusicalSymbols</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>MusicalSymbols</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">MusicalSymbols</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>MathematicalAlphanumericSymbols</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">MathematicalAlphanumericSymbols</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKUnifiedIdeographsExtensionB</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKUnifiedIdeographsExtensionB</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>CJKCompatibilityIdeographsSupplement</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">CJKCompatibilityIdeographsSupplement</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Tags</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/Blocks-4.txt\">Tags</a> block from Unicode 3.1</td></tr>\n * <tr><td><tt>Lu</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Lu</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Ll</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Ll</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Lt</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Lt</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Lm</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Lm</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Lo</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Lo</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>L</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">L</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Mn</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Mn</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Mc</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Mc</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Me</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Me</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>M</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">M</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Nd</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Nd</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Nl</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Nl</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>No</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">No</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>N</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">N</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Pc</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Pc</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Pd</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Pd</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Ps</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Ps</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Pe</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Pe</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Pi</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Pi</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Pf</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Pf</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Po</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Po</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>P</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">P</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Zs</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Zs</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Zl</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Zl</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Zp</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Zp</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Z</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Z</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Sm</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Sm</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Sc</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Sc</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Sk</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Sk</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>So</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">So</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>S</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">S</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Cc</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Cc</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Cf</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Cf</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Co</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Co</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>Cn</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">Cn</a> category from Unicode 3.1</td></tr>\n * <tr><td><tt>C</tt></td><td><a target=\"_top\" href=\"http://www.unicode.org/Public/3.1-Update/UnicodeData-3.1.0.txt\">C</a> category from Unicode 3.1</td></tr>\n * </table>\n * <p>Loaded automata are cached in memory.\n * @param name name of automaton\n * @return automaton\n */\n", "func_signal": "public static Automaton get(String name)", "code": "{\n\tAutomaton a = automata.get(name);\n\tif (a == null) {\n\t\ta = load(name);\n\t\tautomata.put(name, a);\n\t}\n\treturn a;\n}", "path": "src\\dk\\brics\\automaton\\Datatypes.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** \n * Returns the set of reachable accept states. \n * @return set of {@link State} objects\n */\n", "func_signal": "public Set<State> getAcceptStates()", "code": "{\n\texpandSingleton();\n\tHashSet<State> accepts = new HashSet<State>();\n\tHashSet<State> visited = new HashSet<State>();\n\tLinkedList<State> worklist = new LinkedList<State>();\n\tworklist.add(initial);\n\tvisited.add(initial);\n\twhile (worklist.size() > 0) {\n\t\tState s = worklist.removeFirst();\n\t\tif (s.accept)\n\t\t\taccepts.add(s);\n\t\tfor (Transition t : s.transitions)\n\t\t\tif (!visited.contains(t.to)) {\n\t\t\t\tvisited.add(t.to);\n\t\t\t\tworklist.add(t.to);\n\t\t\t}\n\t}\n\treturn accepts;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Compute the hash code of the <i>current</i> status of this state.\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tint hash = is_final ? 1 : 0;\n\n\thash ^= hash * 31 + this.labels.length;\n\tfor (char c : this.labels)\n\t\thash ^= hash * 31 + c;\n\n\t/*\n\t * Compare the right-language of this state using reference-identity of\n\t * outgoing states. This is possible because states are interned (stored\n\t * in registry) and traversed in post-order, so any outgoing transitions\n\t * are already interned.\n\t */\n\tfor (State s : this.states) {\n\t\thash ^= System.identityHashCode(s);\n\t}\n\n\treturn hash;\n}", "path": "src\\dk\\brics\\automaton\\StringUnionOperations.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * See {@link MinimizationOperations#minimize(Automaton)}.\n * Returns the automaton being given as argument.\n */\n", "func_signal": "public static Automaton minimize(Automaton a)", "code": "{\n\ta.minimize();\n\treturn a;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Build a minimal, deterministic automaton from a sorted list of strings.\n */\n", "func_signal": "public static dk.brics.automaton.State build(CharSequence[] input)", "code": "{\n\tfinal StringUnionOperations builder = new StringUnionOperations(); \n\n\tfor (CharSequence chs : input)\n\t\tbuilder.add(chs);\n\n\treturn convert(builder.complete(), new IdentityHashMap<State, dk.brics.automaton.State>());\n}", "path": "src\\dk\\brics\\automaton\\StringUnionOperations.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Add another character sequence to this automaton. The sequence must be\n * lexicographically larger or equal compared to any previous sequences\n * added to this automaton (the input must be sorted).\n */\n", "func_signal": "public void add(CharSequence current)", "code": "{\n\tassert register != null : \"Automaton already built.\";\n\tassert current.length() > 0 : \"Input sequences must not be empty.\";\n\tassert previous == null || LEXICOGRAPHIC_ORDER.compare(previous, current) <= 0 : \n\t\t\"Input must be sorted: \" + previous + \" >= \" + current;\n\tassert setPrevious(current);\n\n\t// Descend in the automaton (find matching prefix). \n\tint pos = 0, max = current.length();\n\tState next, state = root;\n\twhile (pos < max && (next = state.lastChild(current.charAt(pos))) != null) {\n\t\tstate = next;\n\t\tpos++;\n\t}\n\n\tif (state.hasChildren())\n\t\treplaceOrRegister(state);\n\n\taddSuffix(state, current, pos);\n}", "path": "src\\dk\\brics\\automaton\\StringUnionOperations.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Copy <code>current</code> into an internal buffer.\n */\n", "func_signal": "private boolean setPrevious(CharSequence current)", "code": "{\n\tif (previous == null) \n\t\tprevious = new StringBuilder();\n\n\tprevious.setLength(0);\n\tprevious.append(current);\n\n\treturn true;\n}", "path": "src\\dk\\brics\\automaton\\StringUnionOperations.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** \n * Reduces this automaton.\n * An automaton is \"reduced\" by combining overlapping and adjacent edge intervals with same destination. \n */\n", "func_signal": "public void reduce()", "code": "{\n\tif (isSingleton())\n\t\treturn;\n\tSet<State> states = getStates();\n\tsetStateNumbers(states);\n\tfor (State s : states) {\n\t\tList<Transition> st = s.getSortedTransitions(true);\n\t\ts.resetTransitions();\n\t\tState p = null;\n\t\tint min = -1, max = -1;\n\t\tfor (Transition t : st) {\n\t\t\tif (p == t.to) {\n\t\t\t\tif (t.min <= max + 1) {\n\t\t\t\t\tif (t.max > max)\n\t\t\t\t\t\tmax = t.max;\n\t\t\t\t} else {\n\t\t\t\t\tif (p != null)\n\t\t\t\t\t\ts.transitions.add(new Transition((char)min, (char)max, p));\n\t\t\t\t\tmin = t.min;\n\t\t\t\t\tmax = t.max;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (p != null)\n\t\t\t\t\ts.transitions.add(new Transition((char)min, (char)max, p));\n\t\t\t\tp = t.to;\n\t\t\t\tmin = t.min;\n\t\t\t\tmax = t.max;\n\t\t\t}\n\t\t}\n\t\tif (p != null)\n\t\t\ts.transitions.add(new Transition((char)min, (char)max, p));\n\t}\n\tclearHashCode();\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Finalize the automaton and return the root state. No more strings can be\n * added to the builder after this call.\n * \n * @return Root automaton state.\n */\n", "func_signal": "public State complete()", "code": "{\n\tif (this.register == null)\n\t\tthrow new IllegalStateException();\n\n\tif (root.hasChildren())\n\t\treplaceOrRegister(root);\n\n\tregister = null;\n\treturn root;\n}", "path": "src\\dk\\brics\\automaton\\StringUnionOperations.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * JDK1.5-replacement of {@link Arrays#copyOf(char[], int)}\n */\n", "func_signal": "private static char[] copyOf(char[] original, int newLength)", "code": "{\n\tchar[] copy = new char[newLength];\n\tSystem.arraycopy(original, 0, copy, 0, Math.min(original.length,\n\t\t\tnewLength));\n\treturn copy;\n}", "path": "src\\dk\\brics\\automaton\\StringUnionOperations.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** \n * Sets initial state. \n * @param s state\n */\n", "func_signal": "public void setInitialState(State s)", "code": "{\n\tinitial = s;\n\tsingleton = null;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Checks whether a given automaton is available.\n * @param name automaton name\n * @return true if the automaton is available\n */\n", "func_signal": "public static boolean exists(String name)", "code": "{\n\ttry {\n\t\tDatatypes.class.getClassLoader().getResource(name + \".aut\").openStream().close();\n\t} catch (IOException e) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\dk\\brics\\automaton\\Datatypes.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Sets or resets allow mutate flag.\n * If this flag is set, then all automata operations may modify automata given as input;\n * otherwise, operations will always leave input automata languages unmodified. \n * By default, the flag is not set.\n * @param flag if true, the flag is set\n * @return previous value of the flag\n */\n", "func_signal": "static public boolean setAllowMutate(boolean flag)", "code": "{\n\tboolean b = allow_mutation;\n\tallow_mutation = flag;\n\treturn b;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** \n * Returns the set of states that are reachable from the initial state.\n * @return set of {@link State} objects\n */\n", "func_signal": "public Set<State> getStates()", "code": "{\n\texpandSingleton();\n\tSet<State> visited;\n\tif (isDebug())\n\t\tvisited = new LinkedHashSet<State>();\n\telse\n\t\tvisited = new HashSet<State>();\n\tLinkedList<State> worklist = new LinkedList<State>();\n\tworklist.add(initial);\n\tvisited.add(initial);\n\twhile (worklist.size() > 0) {\n\t\tState s = worklist.removeFirst();\n\t\tCollection<Transition> tr;\n\t\tif (isDebug())\n\t\t\ttr = s.getSortedTransitions(false);\n\t\telse\n\t\t\ttr = s.transitions;\n\t\tfor (Transition t : tr)\n\t\t\tif (!visited.contains(t.to)) {\n\t\t\t\tvisited.add(t.to);\n\t\t\t\tworklist.add(t.to);\n\t\t\t}\n\t}\n\treturn visited;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** \n * Returns the set of live states. A state is \"live\" if an accept state is reachable from it. \n * @return set of {@link State} objects\n */\n", "func_signal": "public Set<State> getLiveStates()", "code": "{\n\texpandSingleton();\n\treturn getLiveStates(getStates());\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** \n * Gets initial state. \n * @return state\n */\n", "func_signal": "public State getInitialState()", "code": "{\n\texpandSingleton();\n\treturn initial;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/**\n * Retrieves a serialized <code>Automaton</code> from a stream.\n * @param stream input stream with serialized automaton\n * @exception IOException if input/output related exception occurs\n * @exception OptionalDataException if the data is not a serialized object\n * @exception InvalidClassException if the class serial number does not match\n * @exception ClassCastException if the data is not a serialized <code>Automaton</code>\n * @exception ClassNotFoundException if the class of the serialized object cannot be found\n */\n", "func_signal": "public static Automaton load(InputStream stream) throws IOException, OptionalDataException, ClassCastException, \n                                                        ClassNotFoundException, InvalidClassException", "code": "{\n\tObjectInputStream s = new ObjectInputStream(stream);\n\treturn (Automaton)s.readObject();\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** \n * Expands singleton representation to normal representation.\n * Does nothing if not in singleton representation. \n */\n", "func_signal": "public void expandSingleton()", "code": "{\n\tif (isSingleton()) {\n\t\tState p = new State();\n\t\tinitial = p;\n\t\tfor (int i = 0; i < singleton.length(); i++) {\n\t\t\tState q = new State();\n\t\t\tp.transitions.add(new Transition(singleton.charAt(i), q));\n\t\t\tp = q;\n\t\t}\n\t\tp.accept = true;\n\t\tdeterministic = true;\n\t\tsingleton = null;\n\t}\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "dweiss/dk.brics.automaton", "stars": 12, "license": "other", "language": "java", "size": 1121}
{"docstring": "/** Allows to replace the renderer. */\n", "func_signal": "public void setRenderer(AbstractEntityRenderer renderer)", "code": "{\n\tthis.renderer = renderer;\n\trepaint();\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Creates a scenario.\n * \n * @param env\n *            a map-based environment. Note that the contained map must be\n *            of type {@link ExtendableMap}\n * @param agentMap\n *            a map reflecting the knowledge of the agent about the\n *            environment\n * @param agentLoc\n *            initial location of the agent\n */\n", "func_signal": "public Scenario(MapEnvironment env, Map agentMap, String agentLoc)", "code": "{\n\tthis.agentMap = agentMap;\n\tthis.env = env;\n\tthis.initAgentLoc = agentLoc;\n}", "path": "aima-core\\src\\main\\java\\aima\\core\\environment\\map\\Scenario.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Provides the true width of the screen to the transformer. This is\n * necessary to get correct scale values.\n * \n * @param cm\n *            Screen width in centimeters.\n */\n", "func_signal": "public void setScreenWidthInCentimeter(double cm)", "code": "{\n\tdouble dotsPerCm = Toolkit.getDefaultToolkit().getScreenSize()\n\t\t\t.getWidth()\n\t\t\t/ cm;\n\ttransformer.setScreenResolution((int) (dotsPerCm * 2.54));\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Initiates a reset of all coordinate transformation parameters.\n */\n", "func_signal": "public void adjustToFit()", "code": "{\n\tisAdjusted = false;\n\trepaint();\n\tfireMapViewEvent(new MapViewEvent(this, MapViewEvent.Type.ADJUST));\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * \n * @param problem\n * @param frontier\n * @return if goal found, the list of actions to the Goal. If already at the\n *         goal you will receive a List with a single NoOp Action in it. If\n *         fail to find the Goal, an empty list will be returned to indicate\n *         that the search failed.\n */\n", "func_signal": "public List<Action> search(Problem problem, Queue<Node> frontier)", "code": "{\n\tthis.frontier = frontier;\n\n\tclearInstrumentation();\n\t// initialize the frontier using the initial state of the problem\n\tNode root = new Node(problem.getInitialState());\n\tif (isCheckGoalBeforeAddingToFrontier()) {\n\t\tif (SearchUtils.isGoalState(problem, root)) {\n\t\t\treturn SearchUtils.actionsFromNodes(root.getPathFromRoot());\n\t\t}\n\t}\n\tfrontier.insert(root);\n\tsetQueueSize(frontier.size());\n\twhile (!(frontier.isEmpty()) && !CancelableThread.currIsCanceled()) {\n\t\t// choose a leaf node and remove it from the frontier\n\t\tNode nodeToExpand = popNodeFromFrontier();\n\t\tsetQueueSize(frontier.size());\n\t\t// Only need to check the nodeToExpand if have not already\n\t\t// checked before adding to the frontier\n\t\tif (!isCheckGoalBeforeAddingToFrontier()) {\n\t\t\t// if the node contains a goal state then return the\n\t\t\t// corresponding solution\n\t\t\tif (SearchUtils.isGoalState(problem, nodeToExpand)) {\n\t\t\t\tsetPathCost(nodeToExpand.getPathCost());\n\t\t\t\treturn SearchUtils.actionsFromNodes(nodeToExpand\n\t\t\t\t\t\t.getPathFromRoot());\n\t\t\t}\n\t\t}\n\t\t// expand the chosen node, adding the resulting nodes to the\n\t\t// frontier\n\t\tfor (Node fn : getResultingNodesToAddToFrontier(nodeToExpand,\n\t\t\t\tproblem)) {\n\t\t\tif (isCheckGoalBeforeAddingToFrontier()) {\n\t\t\t\tif (SearchUtils.isGoalState(problem, fn)) {\n\t\t\t\t\tsetPathCost(fn.getPathCost());\n\t\t\t\t\treturn SearchUtils.actionsFromNodes(fn\n\t\t\t\t\t\t\t.getPathFromRoot());\n\t\t\t\t}\n\t\t\t}\n\t\t\tfrontier.insert(fn);\n\t\t}\n\t\tsetQueueSize(frontier.size());\n\t}\n\t// if the frontier is empty then return failure\n\treturn failure();\n}", "path": "aima-core\\src\\main\\java\\aima\\core\\search\\framework\\QueueSearch.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Informs all interested listener about view events such as mouse events\n * and data changes.\n */\n", "func_signal": "public void fireMapViewEvent(MapViewEvent e)", "code": "{\n\tfor (MapViewEventListener listener : eventListeners)\n\t\tlistener.eventHappened(e);\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "//\n// PRIVATE METHODS\n//\n", "func_signal": "private MDPUtilityFunction<STATE_TYPE> valueDetermination(\n\t\tList<MDPTransition<STATE_TYPE, ACTION_TYPE>> validTransitions,\n\t\tdouble gamma)", "code": "{\n\tMDPUtilityFunction<STATE_TYPE> uf = utilityFunction.copy();\n\tdouble additional = 0.0;\n\tif (validTransitions.size() > 0) {\n\t\tSTATE_TYPE initState = validTransitions.get(0).getInitialState();\n\t\tdouble reward = mdp.getRewardFor(initState);\n\t\tfor (MDPTransition<STATE_TYPE, ACTION_TYPE> transition : validTransitions) {\n\t\t\tadditional += mdp.getTransitionProbability(transition)\n\t\t\t\t\t* utilityFunction.getUtility(transition\n\t\t\t\t\t\t\t.getDestinationState());\n\t\t}\n\t\tuf.setUtility(initState, reward + (gamma * additional));\n\t}\n\n\treturn uf;\n}", "path": "aima-core\\src\\main\\java\\aima\\core\\learning\\reinforcement\\PassiveADPAgent.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "//\n// PROTECTED METHODS\n//\n", "func_signal": "@Override\nprotected boolean isValidMatch(Term toMatch,\n\t\tSet<Variable> toMatchVariables, Term possibleMatch,\n\t\tMap<Variable, Term> substitution)", "code": "{\n\n\tif (possibleMatch != null && substitution != null) {\n\t\t// Note:\n\t\t// [Brand 1975] showed that paramodulation into\n\t\t// variables is unnecessary.\n\t\tif (!(possibleMatch instanceof Variable)) {\n\t\t\t// TODO: Find out whether the following statement from:\n\t\t\t// http://www.cs.miami.edu/~geoff/Courses/CSC648-07F/Content/\n\t\t\t// Paramodulation.shtml\n\t\t\t// is actually the case, as it was not positive but\n\t\t\t// intuitively makes sense:\n\t\t\t// \"Similarly, depending on how paramodulation is used, it is\n\t\t\t// often unnecessary to paramodulate from variables.\"\n\t\t\t// if (!(toMatch instanceof Variable)) {\n\t\t\treturn true;\n\t\t\t// }\n\t\t}\n\t}\n\treturn false;\n}", "path": "aima-core\\src\\main\\java\\aima\\core\\logic\\fol\\inference\\Paramodulation.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Returns the world coordinates, which are currently shown in the center.\n */\n", "func_signal": "public Position getCenterPosition()", "code": "{\n\tfloat lat = transformer.lat(getHeight() / 2);\n\tfloat lon = transformer.lon(getWidth() / 2);\n\treturn new Position(lat, lon);\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * A contrapositive of a chain is a permutation in which a different literal\n * is placed at the front. The contrapositives of a chain are logically\n * equivalent to the original chain.\n * \n * @return a list of contrapositives for this chain.\n */\n", "func_signal": "public List<Chain> getContrapositives()", "code": "{\n\tList<Chain> contrapositives = new ArrayList<Chain>();\n\tList<Literal> lits = new ArrayList<Literal>();\n\n\tfor (int i = 1; i < literals.size(); i++) {\n\t\tlits.clear();\n\t\tlits.add(literals.get(i));\n\t\tlits.addAll(literals.subList(0, i));\n\t\tlits.addAll(literals.subList(i + 1, literals.size()));\n\t\tChain cont = new Chain(lits);\n\t\tcont.setProofStep(new ProofStepChainContrapositive(cont, this));\n\t\tcontrapositives.add(cont);\n\t}\n\n\treturn contrapositives;\n}", "path": "aima-core\\src\\main\\java\\aima\\core\\logic\\fol\\kb\\data\\Chain.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "//\n// PRIVATE METHODS\n// \n", "func_signal": "private BayesNet createBurglaryNetwork()", "code": "{\n\tBayesNetNode burglary = new BayesNetNode(\"Burglary\");\n\tBayesNetNode earthquake = new BayesNetNode(\"EarthQuake\");\n\tBayesNetNode alarm = new BayesNetNode(\"Alarm\");\n\tBayesNetNode johnCalls = new BayesNetNode(\"JohnCalls\");\n\tBayesNetNode maryCalls = new BayesNetNode(\"MaryCalls\");\n\n\talarm.influencedBy(burglary, earthquake);\n\tjohnCalls.influencedBy(alarm);\n\tmaryCalls.influencedBy(alarm);\n\n\tburglary.setProbability(true, 0.001);// TODO behaviour changes if\n\t// root node\n\tearthquake.setProbability(true, 0.002);\n\n\talarm.setProbability(true, true, 0.95);\n\talarm.setProbability(true, false, 0.94);\n\talarm.setProbability(false, true, 0.29);\n\talarm.setProbability(false, false, 0.001);\n\n\tjohnCalls.setProbability(true, 0.90);\n\tjohnCalls.setProbability(false, 0.05);\n\n\tmaryCalls.setProbability(true, 0.70);\n\tmaryCalls.setProbability(false, 0.01);\n\n\tBayesNet net = new BayesNet(burglary, earthquake);\n\treturn net;\n}", "path": "aima-core\\src\\test\\java\\aima\\test\\core\\unit\\probability\\EnumerationAskTest.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Writes all data from <code>mapData</code> to file.\n */\n", "func_signal": "@Override\npublic void writeMap(File file, OsmMap mapData, BoundingBox bb)", "code": "{\n\ttry  {\n\t\tOutputStream os = new BufferedOutputStream\n\t\t(new FileOutputStream(file));\n\t\tif (compressorClass != null && file.getName().endsWith(\".bz2\")) {\n\t\t\tConstructor<?> c = compressorClass.getConstructor\n\t\t\t(new Class[] {OutputStream.class});\n\t\t\tos = (OutputStream) c.newInstance(os);\n\t\t}\n\t\tOutputStreamWriter writer = new OutputStreamWriter(os, \"UTF-8\");\n\t\twriteMap(writer, mapData, bb);\n\t} catch (FileNotFoundException e) {\n\t\tLOG.warning(\"File does not exist \" + file);\n\t} catch (InvocationTargetException e) {\n\t\tLOG.warning(\"The map could not be read. Possibly unpacking problem. \" + e);\n\t} catch (Exception e) {\n\t\tLOG.warning(\"The map could not be read. \" + e);\n\t}\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\writer\\Bz2OsmWriter.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "//\n// PRIVATE METHODS\n//\n", "func_signal": "private void notifyFOLDomainListeners(FOLDomainEvent event)", "code": "{\n\tsynchronized (listeners) {\n\t\tfor (FOLDomainListener l : listeners) {\n\t\t\tevent.notifyListener(l);\n\t\t}\n\t}\n}", "path": "aima-core\\src\\main\\java\\aima\\core\\logic\\fol\\domain\\FOLDomain.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Provides the true size of the screen to the transformer. This is\n * necessary to get correct scale values.\n * \n * @param inch\n *            Screen size in inch.\n */\n", "func_signal": "public void setScreenSizeInInch(double inch)", "code": "{\n\tdouble width = Toolkit.getDefaultToolkit().getScreenSize().getWidth();\n\tdouble height = Toolkit.getDefaultToolkit().getScreenSize().getHeight();\n\tdouble dotsPerInch = Math.sqrt(width * width + height * height) / inch;\n\ttransformer.setScreenResolution((int) dotsPerInch);\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "//\n// START-LightestClauseHeuristic\n", "func_signal": "public Clause getLightestClause()", "code": "{\n\tClause lightest = null;\n\n\tif (sos.size() > 0) {\n\t\tlightest = sos.first();\n\t}\n\n\treturn lightest;\n}", "path": "aima-core\\src\\main\\java\\aima\\core\\logic\\fol\\inference\\otter\\defaultimpl\\DefaultLightestClauseHeuristic.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/** Returns a bounding box describing the currently visible area. */\n", "func_signal": "public BoundingBox getBoundingBox()", "code": "{\n\tfloat latMin = transformer.lat(getHeight());\n\tfloat lonMin = transformer.lon(0);\n\tfloat latMax = transformer.lat(0);\n\tfloat lonMax = transformer.lon(getWidth());\n\treturn new BoundingBox(latMin, lonMin, latMax, lonMax);\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Multiples the current scale with the specified factor and adjusts the\n * view so that the objects shown at the specified view focus keep at their\n * position.\n */\n", "func_signal": "public void zoom(float factor, int focusX, int focusY)", "code": "{\n\ttransformer.zoom(factor, focusX, focusY);\n\trepaint();\n\tfireMapViewEvent(new MapViewEvent(this, MapViewEvent.Type.ZOOM));\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/** Sets the map as model of this pane and initiates painting. */\n", "func_signal": "public void setMap(OsmMap map)", "code": "{\n\tif (this.map != null)\n\t\tthis.map.removeMapDataEventListener(this);\n\tthis.map = map;\n\tif (map != null) {\n\t\tmap.addMapDataEventListener(this);\n\t\tisAdjusted = false;\n\t}\n\tfireMapViewEvent(new MapViewEvent(this, MapViewEvent.Type.MAP_NEW));\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "// Note: Based on:\n// http://logic.stanford.edu/classes/cs157/2008/lectures/lecture15.pdf\n// Slide 31.\n", "func_signal": "@Test\npublic void testSimpleExample()", "code": "{\n\tFOLDomain domain = new FOLDomain();\n\tdomain.addConstant(\"A\");\n\tdomain.addConstant(\"B\");\n\tdomain.addPredicate(\"P\");\n\tdomain.addPredicate(\"Q\");\n\tdomain.addPredicate(\"R\");\n\tdomain.addFunction(\"F\");\n\n\tFOLParser parser = new FOLParser(domain);\n\n\tList<Literal> lits = new ArrayList<Literal>();\n\tAtomicSentence a1 = (AtomicSentence) parser.parse(\"P(F(x,B),x)\");\n\tAtomicSentence a2 = (AtomicSentence) parser.parse(\"Q(x)\");\n\tlits.add(new Literal(a1));\n\tlits.add(new Literal(a2));\n\n\tClause c1 = new Clause(lits);\n\n\tlits.clear();\n\ta1 = (AtomicSentence) parser.parse(\"F(A,y) = y\");\n\ta2 = (AtomicSentence) parser.parse(\"R(y)\");\n\tlits.add(new Literal(a1));\n\tlits.add(new Literal(a2));\n\n\tClause c2 = new Clause(lits);\n\n\tSet<Clause> paras = paramodulation.apply(c1, c2);\n\tAssert.assertEquals(2, paras.size());\n\n\tIterator<Clause> it = paras.iterator();\n\tAssert.assertEquals(\"[P(B,A), Q(A), R(B)]\", it.next().toString());\n\tAssert.assertEquals(\"[P(F(A,F(x,B)),x), Q(x), R(F(x,B))]\", it.next()\n\t\t\t.toString());\n}", "path": "aima-core\\src\\test\\java\\aima\\test\\core\\unit\\logic\\fol\\inference\\ParamodulationTest.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Shows a graphical representation of the provided map data.\n */\n", "func_signal": "public void paint(Graphics g)", "code": "{\n\tGraphics2D g2 = (java.awt.Graphics2D) g;\n\tg2.setBackground(renderer.getBackgroundColor());\n\tg2.clearRect(0, 0, getWidth(), getHeight());\n\tif (getWidth() > 0 && map != null) {\n\t\tif (!isAdjusted) {\n\t\t\ttransformer.adjustTransformation(map.getBoundingBox(),\n\t\t\t\t\tgetWidth(), getHeight());\n\t\t\tisAdjusted = true;\n\t\t}\n\t\tfloat latMin = transformer.lat(getHeight());\n\t\tfloat lonMin = transformer.lon(0);\n\t\tfloat latMax = transformer.lat(0);\n\t\tfloat lonMax = transformer.lon(getWidth());\n\t\tfloat scale = transformer.computeScale();\n\t\tBoundingBox vbox = new BoundingBox(latMin, lonMin, latMax, lonMax);\n\t\tfloat viewScale = scale / renderer.getDisplayFactor();\n\t\trenderer.initForRendering(g2, transformer, map);\n\t\tmap.visitEntities(renderer, vbox, viewScale);\n\t\tfor (MapEntity entity : map.getVisibleMarkersAndTracks(viewScale))\n\t\t\tentity.accept(renderer);\n\t\trenderer.printBufferedObjects();\n\t\tif (renderer.isDebugModeEnabled()\n\t\t\t\t&& map instanceof DefaultMap) {\n\t\t\tList<double[]> splits = ((DefaultMap) map)\n\t\t\t\t\t.getEntityTree().getSplitCoords();\n\t\t\tg2.setColor(Color.LIGHT_GRAY);\n\t\t\tg2.setStroke(new BasicStroke(1f));\n\t\t\tfor (double[] split : splits)\n\t\t\t\tg2.drawLine(renderer.transformer.x(split[1]),\n\t\t\t\t\t\trenderer.transformer.y(split[0]),\n\t\t\t\t\t\trenderer.transformer.x(split[3]),\n\t\t\t\t\t\trenderer.transformer.y(split[2]));\n\t\t}\n\t}\n}", "path": "aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\MapViewPane.java", "repo_name": "gnufs/aima-java", "stars": 15, "license": "None", "language": "java", "size": 25022}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of floats read from a XDR stream.\n *\n * @param length of vector to read.\n *\n * @return Decoded float vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final float [] xdrDecodeFloatFixedVector(int length)\n       throws OncRpcException, IOException", "code": "{\n    float [] value = new float[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeFloat();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of ints read from a XDR stream.\n *\n * @return Decoded int vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final int [] xdrDecodeIntVector()\n       throws OncRpcException, IOException", "code": "{\n    int length = xdrDecodeInt();\n    int [] value = new int[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeInt();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of strings read from a XDR stream.\n *\n * @return Decoded String vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final String [] xdrDecodeStringVector()\n       throws OncRpcException, IOException", "code": "{\n    int length = xdrDecodeInt();\n    String [] value = new String[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeString();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Configuration request: Get waypoints.\n * <br><br>\n * See the player_planner_waypoints_req structure from player.h\n */\n", "func_signal": "public void getWaypoints ()", "code": "{\n    try {\n        sendHeader (PLAYER_MSGTYPE_REQ, PLAYER_PLANNER_REQ_GET_WAYPOINTS, 0);\n        os.flush ();\n    } catch (IOException e) {\n        throw new PlayerException\n            (\"[Planner] : Couldn't request \" + \"\" +\n                    \"PLAYER_PLANNER_REQ_GET_WAYPOINTS: \" +\n                    e.toString(), e);\n    }\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\PlannerInterface.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a string read from a XDR stream.\n * If a character encoding has been set for this stream, then this\n * will be used for conversion.\n *\n * @return Decoded String value.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final String xdrDecodeString()\n       throws OncRpcException, IOException", "code": "{\n    int length = xdrDecodeInt();\n    if ( length > 0 ) {\n        byte [] bytes = new byte[length];\n        xdrDecodeOpaque(bytes, 0, length);\n        return (characterEncoding != null) ?\n        \t     new String(bytes, characterEncoding) :\n        \t     new String(bytes);\n    } else {\n        return new String();\n    }\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Configuration request: Enable/disable robot motion.\n * <br><br>\n * To enable or disable the planner, send a PLAYER_PLANNER_REQ_ENABLE\n * request. When disabled, the planner will stop the robot. When\n * enabled, the planner should resume plan execution. Null response.\n * <br><br>\n * See the player_planner_enable_req structure from player.h\n * @param state 1 to enable, 0 to disable\n */\n", "func_signal": "public void setRobotMotion (int state)", "code": "{\n    try {\n        sendHeader (PLAYER_MSGTYPE_REQ, PLAYER_PLANNER_REQ_ENABLE, 4);\n        XdrBufferEncodingStream xdr = new XdrBufferEncodingStream (4);\n        xdr.beginEncoding (null, 0);\n        xdr.xdrEncodeByte ((byte)state);\n        xdr.endEncoding ();\n        os.write (xdr.getXdrData (), 0, xdr.getXdrLength ());\n        xdr.close ();\n        os.flush ();\n    } catch (IOException e) {\n        throw new PlayerException\n            (\"[Planner] : Couldn't request PLAYER_PLANNER_REQ_ENABLE: \" +\n                    e.toString(), e);\n    } catch (OncRpcException e) {\n        throw new PlayerException\n            (\"[Planner] : Error while XDR-encoding ENABLE request: \" +\n                    e.toString(), e);\n    }\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\PlannerInterface.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Calculate and return the controller's command for the controlled system.\n * @param currentOutput the current output of the system\n * @return the new calculated command for the system\n */\n", "func_signal": "public double getCommand (double currentOutput)", "code": "{\n\tthis.currE = this.goal - currentOutput;\n    eSum += currE;\n\n    lastE = currE;\n    double Pgain = this.kp * currE;\n    double Igain = this.ki * eSum;\n\n    return Pgain + Igain;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\extra\\PIController.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Check if data is available.\n * @return true if ready, false if not ready \n */\n", "func_signal": "public boolean isDataReady ()", "code": "{\n    if (readyPrdata) {\n        readyPrdata = false;\n        return true;\n    }\n    return false;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\RFIDInterface.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Sends a new goal to the planner interface.\n * @param goal a PlayerPose structure containing the goal location (X, Y, A)\n */\n", "func_signal": "public void setGoal (PlayerPose goal)", "code": "{\n    try {\n        sendHeader (PLAYER_MSGTYPE_CMD, PLAYER_PLANNER_CMD_GOAL, 24);\n        XdrBufferEncodingStream xdr = new XdrBufferEncodingStream (24);\n        xdr.beginEncoding (null, 0);\n        xdr.xdrEncodeDouble (goal.getPx ());\n        xdr.xdrEncodeDouble (goal.getPy ());\n        xdr.xdrEncodeDouble (goal.getPa ());\n        xdr.endEncoding ();\n        os.write (xdr.getXdrData (), 0, xdr.getXdrLength ());\n        xdr.close ();\n        os.flush ();\n    } catch (IOException e) {\n        throw new PlayerException\n            (\"[Planner] : Couldn't send new goals command: \" +\n                    e.toString(), e);\n    } catch (OncRpcException e) {\n        throw new PlayerException\n            (\"[Planner] : Error while XDR-encoding goals command: \" +\n                    e.toString(), e);\n    }\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\PlannerInterface.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of longs read from a XDR stream.\n *\n * @param length of vector to read.\n *\n * @return Decoded long vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final long [] xdrDecodeLongFixedVector(int length)\n       throws OncRpcException, IOException", "code": "{\n    long [] value = new long[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeLong();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Check if waypoint data is available.\n * @return true if ready, false if not ready\n */\n", "func_signal": "public synchronized boolean isReadyWaypointData ()", "code": "{\n    if (readyPpWaypoints) {\n        readyPpWaypoints = false;\n        return true;\n    }\n    return false;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\PlannerInterface.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of bytes, which is nothing more\n * than a series of octets (or 8 bits wide bytes), each packed into its\n * very own 4 bytes (XDR int).\n *\n * @param length of vector to read.\n *\n * @return The byte vector containing the decoded data.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final byte [] xdrDecodeByteFixedVector(int length)\n       throws OncRpcException, IOException", "code": "{\n    if ( length > 0 ) {\n        byte [] bytes = new byte[length];\n        for ( int i = 0; i < length; ++i ) {\n            bytes[i] = (byte) xdrDecodeInt();\n        }\n        return bytes;\n    } else {\n        return new byte[0];\n    }\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of ints read from a XDR stream.\n *\n * @param length of vector to read.\n *\n * @return Decoded int vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final int [] xdrDecodeIntFixedVector(int length)\n       throws OncRpcException, IOException", "code": "{\n    int [] value = new int[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeInt();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of doubles read from a XDR stream.\n *\n * @param length of vector to read.\n *\n * @return Decoded double vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final double [] xdrDecodeDoubleFixedVector(int length)\n       throws OncRpcException, IOException", "code": "{\n    double [] value = new double[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeDouble();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Handle acknowledgement response messages\n * @param header Player header\n */\n", "func_signal": "public void handleResponse (PlayerMsgHdr header)", "code": "{\n    switch (header.getSubtype ()) {\n        case PLAYER_RFID_REQ_POWER: {\n            // null response\n            break;\n        }\n        case PLAYER_RFID_REQ_READTAG: {\n            // null response\n            break;\n        }\n        case PLAYER_RFID_REQ_WRITETAG: {\n            // null response\n            break;\n        }\n        case PLAYER_RFID_REQ_LOCKTAG: {\n            // null response\n            break;\n        }\n        default:{\n            if (isDebugging)\n                logger.log (Level.FINEST, \"[RFID][Debug] : \" +\n                        \"Unexpected response \" + header.getSubtype () + \n                        \" of size = \" + header.getSize ());\n            break;\n        }\n    }\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\RFIDInterface.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of booleans read from a XDR stream.\n *\n * @return Decoded boolean vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final boolean [] xdrDecodeBooleanVector()\n       throws OncRpcException, IOException", "code": "{\n    int length = xdrDecodeInt();\n    boolean [] value = new boolean[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeBoolean();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of doubles read from a XDR stream.\n *\n * @return Decoded double vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final double [] xdrDecodeDoubleVector()\n       throws OncRpcException, IOException", "code": "{\n    int length = xdrDecodeInt();\n    double [] value = new double[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeDouble();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Check if data is available.\n * @return true if ready, false if not ready\n */\n", "func_signal": "public boolean isDataReady ()", "code": "{\n    if (readyPpdata) {\n        readyPpdata = false;\n        return true;\n    }\n    return false;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\PlannerInterface.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Constructor for PIController.\n * @param Kp the proportional constant\n * @param Ki the integral constant\n */\n", "func_signal": "public PIController (double Kp, double Ki)", "code": "{\n\tthis.kp = Kp;\n    this.ki = Ki;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\extra\\PIController.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * Decodes (aka \"deserializes\") a vector of booleans read from a XDR stream.\n *\n * @param length of vector to read.\n *\n * @return Decoded boolean vector.\n *\n * @throws OncRpcException if an ONC/RPC error occurs.\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "public final boolean [] xdrDecodeBooleanFixedVector(int length)\n       throws OncRpcException, IOException", "code": "{\n    boolean [] value = new boolean[length];\n    for ( int i = 0; i < length; ++i ) {\n        value[i] = xdrDecodeBoolean();\n    }\n    return value;\n}", "path": "utils\\MetroboticsGUI-v1.0\\src\\javaclient3\\xdr\\XdrDecodingStream.java", "repo_name": "aozgelen/rteam", "stars": 8, "license": "None", "language": "java", "size": 10452}
{"docstring": "/**\n * turn the recorder off\n */\n", "func_signal": "public void turnOff()", "code": "{\n    if (records != null)\n    {\n        records.clear();\n    }\n\n    on = false;\n    currentRecord = null;\n    currentKey = null;\n    state = NOT_RECORDING;\n}", "path": "src\\java\\soc\\util\\DebugRecorder.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Store a record in the table\n *\n * @param key  the key for the record\n * @param rec  the record (a vector of strings)\n */\n", "func_signal": "public void putRecord(Object key, Vector rec)", "code": "{\n    if ((key != null) && (rec != null))\n    {\n        records.put(key, rec);\n    }\n}", "path": "src\\java\\soc\\util\\DebugRecorder.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * parse the command string into a MoveRobber message\n *\n * @param s   the String to parse\n * @return    a TextMsg message, or null of the data is garbled\n */\n", "func_signal": "public static MoveRobber parseDataStr(String s)", "code": "{\n    String na; // name of the game\n    int pn; // player number\n    int co; // coordinates\n\n    StringTokenizer st = new StringTokenizer(s, sep2);\n\n    try\n    {\n        na = st.nextToken();\n        pn = Integer.parseInt(st.nextToken());\n        co = Integer.parseInt(st.nextToken());\n    }\n    catch (Exception e)\n    {\n        return null;\n    }\n\n    return new MoveRobber(na, pn, co);\n}", "path": "src\\java\\soc\\message\\MoveRobber.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Start recording the current plan information\n *\n * @param key  the key to use to index this recording\n */\n", "func_signal": "public void startRecording(Object key)", "code": "{\n    state = RECORDING;\n    currentKey = key;\n    currentRecord = new Vector();\n}", "path": "src\\java\\soc\\util\\DebugRecorder.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * @return a human readable form of the message\n */\n", "func_signal": "public String toString()", "code": "{\n    String s = \"MoveRobber:game=\" + game + \"|playerNumber=\" + playerNumber + \"|coord=\" + Integer.toHexString(coordinates);\n\n    return s;\n}", "path": "src\\java\\soc\\message\\MoveRobber.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * @return a human readable form of the message\n */\n", "func_signal": "public String toString()", "code": "{\n    String s = \"RollDice:game=\" + game;\n\n    return s;\n}", "path": "src\\java\\soc\\message\\RollDice.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * turn the recorder on\n */\n", "func_signal": "public void turnOn()", "code": "{\n    if (records == null)\n    {\n        records = Collections.synchronizedMap(new Hashtable());\n    }\n\n    on = true;\n}", "path": "src\\java\\soc\\util\\DebugRecorder.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * constructor\n */\n", "func_signal": "public DebugRecorder()", "code": "{\n    state = NOT_RECORDING;\n    on = false;\n}", "path": "src\\java\\soc\\util\\DebugRecorder.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Add a string to the current record\n *\n * @param s  the string to add\n */\n", "func_signal": "public void record(String s)", "code": "{\n    if (state == RECORDING)\n    {\n        currentRecord.addElement(s);\n    }\n}", "path": "src\\java\\soc\\util\\DebugRecorder.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Parse the command String array into a PlayerStats message.\n * Calls {@link #PlayerStats(String, int[])} constructor,\n * see its javadoc for parameter details.\n *\n * @param pa   the parameters; length 2 or more required.\n * @return    a PlayerStats message, or null if parsing errors\n */\n", "func_signal": "public static PlayerStats parseDataStr(String[] pa)", "code": "{\n    if ((pa == null) || (pa.length < 2))\n        return null;\n    try\n    {\n        String ga = pa[0];\n        int[] ipa = new int[pa.length - 1];\n        for (int i = 0; i < ipa.length; ++i)\n            ipa[i] = Integer.parseInt(pa[i+1]);\n        return new PlayerStats(ga, ipa);\n    } catch (Throwable e)\n    {\n        return null;\n    }\n}", "path": "src\\java\\soc\\message\\PlayerStats.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * stop recording and store the vector in the table\n */\n", "func_signal": "public void stopRecording()", "code": "{\n    state = NOT_RECORDING;\n\n    if ((currentKey != null) && (currentRecord != null))\n    {\n        records.put(currentKey, currentRecord);\n    }\n}", "path": "src\\java\\soc\\util\\DebugRecorder.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * clear the list of threats\n */\n", "func_signal": "public void clearThreats()", "code": "{\n    if (threatUpdatedFlag)\n    {\n        threats.removeAllElements();\n        threatUpdatedFlag = false;\n    }\n}", "path": "src\\java\\soc\\robot\\PossiblePiece.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * add a threat to the list\n *\n * @param piece\n */\n", "func_signal": "public void addThreat(PossiblePiece piece)", "code": "{\n    if (!threats.contains(piece))\n    {\n        threats.addElement(piece);\n    }\n}", "path": "src\\java\\soc\\robot\\PossiblePiece.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * create a MoveRobber message\n *\n * @param na  name of the game\n * @param pn  player number\n * @param co  coordinates\n */\n", "func_signal": "public MoveRobber(String na, int pn, int co)", "code": "{\n    messageType = MOVEROBBER;\n    game = na;\n    playerNumber = pn;\n    coordinates = co;\n}", "path": "src\\java\\soc\\message\\MoveRobber.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Constructor for server to tell client about a player stat.\n * \n * @param pl  Player for these stats\n * @param stype  Stats type.  Newer servers and clients may support\n *           more types.  For each type (such as {@link #STYPE_RES_ROLL}),\n *           check the corresponding VERSION_FOR_ field before sending.\n * @throws IllegalArgumentException if <tt>stype</tt> < {@link #STYPE_MIN}\n *           or > {@link #STYPE_MAX}\n * @throws NullPointerException if <tt>pl</tt> null\n */\n", "func_signal": "public PlayerStats(Player pl, int stype)\n    throws IllegalArgumentException, NullPointerException", "code": "{\n    super(PLAYERSTATS, pl.getGame().getName(),\n        new int[6]);\n    if ((stype < STYPE_MIN) || (stype > STYPE_MAX))\n        throw new IllegalArgumentException(\"stype out of range: \" + stype);\n\n    pa[0] = stype;        \n    final int[] rstats = pl.getResourceRollStats();  // rstats[0] is unused\n    for (int i = 1; i <= 5; ++i)\n        pa[i] = rstats[i];\n}", "path": "src\\java\\soc\\message\\PlayerStats.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * @return a human readable form of this object\n */\n", "func_signal": "public String toString()", "code": "{\n    String s = \"PossiblePiece:type=\" + pieceType + \"|player=\" + player + \"|coord=\" + Integer.toHexString(coord);\n\n    return s;\n}", "path": "src\\java\\soc\\robot\\PossiblePiece.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Create a RollDice message.\n *\n * @param ga  name of game\n */\n", "func_signal": "public RollDice(String ga)", "code": "{\n    messageType = ROLLDICE;\n    game = ga;\n}", "path": "src\\java\\soc\\message\\RollDice.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Parse the command String into a DiscardRequest message\n *\n * @param s   the String to parse\n * @return    a DiscardRequest message, or null of the data is garbled\n */\n", "func_signal": "public static DiscardRequest parseDataStr(String s)", "code": "{\n    String ga; // the game name\n    int nd; // the number of discards\n\n    StringTokenizer st = new StringTokenizer(s, sep2);\n\n    try\n    {\n        ga = st.nextToken();\n        nd = Integer.parseInt(st.nextToken());\n    }\n    catch (Exception e)\n    {\n        return null;\n    }\n\n    return new DiscardRequest(ga, nd);\n}", "path": "src\\java\\soc\\message\\DiscardRequest.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * Create a DiscardRequest message.\n *\n * @param ga  the name of the game\n * @param nd  the number of discards\n */\n", "func_signal": "public DiscardRequest(String ga, int nd)", "code": "{\n    messageType = DISCARDREQUEST;\n    game = ga;\n    numDiscards = nd;\n}", "path": "src\\java\\soc\\message\\DiscardRequest.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "/**\n * update the eta for this piece\n *\n * @param e  the new eta\n */\n", "func_signal": "public void setETA(int e)", "code": "{\n    eta = e;\n    updated = true;\n}", "path": "src\\java\\soc\\robot\\PossiblePiece.java", "repo_name": "nsp/OpenSettlers", "stars": 12, "license": "gpl-3.0", "language": "java", "size": 19114}
{"docstring": "// -----\n", "func_signal": "public void repeatedUpdate(final boolean b)", "code": "{\n\tif (b) {\n\t\trepeatedUpdate(0.015);\n\t} else {\n\t\tString id = \"repeated-update-\"+this.toString();\n\t\tScheduler.Task t = Scheduler.instance().cancel(id);\n\t\tif (t instanceof UpdateTask) ((UpdateTask)t).cancel();\n\t}\n}", "path": "protovis\\src\\pv\\mark\\Scene.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// -----\n", "func_signal": "public void zoom(double s, double x, double y)", "code": "{\n\t_pt.setLocation(x, y);\n\t_itransform.transform(_pt, _pt);\n\tdouble zx = _pt.getX(), zy = _pt.getY();\n        _transform.translate(zx, zy);\n        _transform.scale(s, s);\n        _transform.translate(-zx, -zy);\n        try {\n            _itransform = _transform.createInverse();\n        } catch ( Exception e ) { /*will never happen here*/ }\n}", "path": "protovis\\src\\pv\\render\\awt\\java2D\\Java2DDisplay.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// runs iterations of the E-M algorithm to learn the model\n", "func_signal": "public double run(int iters)", "code": "{\n\tdouble ll = -1;\n\t\n\tfor (int iter=0; iter < iters; ++iter) {\n\t\t// -- E-step ---\n\t\tzero(wk); ll = 0;\n\t\tfor (int i=0; i < k; ++i) {\n\t\t\tdouble max = Double.MIN_VALUE;\n\t\t\tfor (int j=0; j < N; ++j) {\n\t\t\t\tw[i][j] = gaussian(X[j], u[i], s[i]) * p[i];\n\t\t\t\twk[j] += w[i][j];\n\t\t\t\tif (w[i][j] > max) max = w[i][j];\n\t\t\t}\n\t\t\tll += Math.log(max);\n\t\t}\n\t\tfor (int j=0; j < N; ++j) {\n\t\t\tfor (int i=0; i < k; ++i) {\n\t\t\t\tw[i][j] /= wk[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// -- M-step ---\n\t\t\n\t\t// compute new means and class probabilities\n\t\tzero(ws); zero(u); zero(s); zero(p);\n\t\tfor (int i=0; i < k; ++i) {\n\t\t\tfor (int j=0; j < N; ++j) {\n\t\t\t\tu[i] += w[i][j] * X[j];\n\t\t\t\tws[i] += w[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i=0; i < k; ++i) {\n\t\t\tu[i] /= ws[i];\n\t\t\tp[i] = ws[i] / N;\n\t\t}\n\t\t\n\t\t// compute new variance\n\t\tfor (int i=0; i < k; ++i) {\n\t\t\tfor (int j=0; j < N; ++j) {\n\t\t\t\ts[i] += w[i][j] * (X[j] - u[i]) * (X[j] - u[i]);\n\t\t\t}\n\t\t}\n\t\tfor (int i=0; i < k; ++i) {\n\t\t\ts[i] = s[i] / ws[i];\n\t\t}\n\t}\n\tupdate(); // recalculate measures and densities\n\treturn loglik;\n}", "path": "protovis-examples\\src\\edu\\stanford\\vis\\examples\\TurkModel.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n * Read in an array of numbers.\n */\n", "func_signal": "public static double[] read(String file)", "code": "{\n\tArrayList<Double> list = new ArrayList<Double>();\n\ttry {\n\t\tBufferedReader br = new BufferedReader(new FileReader(file));\n\t\tString line;\n\t\t\n\t\twhile ((line=br.readLine()) != null) {\n\t\t\tdouble x = Double.parseDouble(line);\n\t\t\tlist.add(x);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\tdouble[] a = new double[list.size()];\n\tfor (int i=0; i<list.size(); ++i) {\n\t\ta[i] = list.get(i);\n\t}\n\treturn a;\n}", "path": "protovis-examples\\src\\edu\\stanford\\vis\\examples\\TurkModel.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n * Set the size of the Display.\n * @param d the dimensions of the Display in pixels\n * @see java.awt.Component#setSize(java.awt.Dimension)\n */\n", "func_signal": "public void setSize(Dimension d)", "code": "{\n\t_offscreen = null;\n    setPreferredSize(d);\n    super.setSize(d);\n}", "path": "protovis\\src\\pv\\render\\awt\\java2D\\Java2DDisplay.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// switch to radix sort?\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static List<GroupItem> preprocess(List<Item> items)", "code": "{\n\tList<GroupItem> list = (List<GroupItem>)Objects.List.get();\n\tint len = items.size();\n\tfor (int i=0; i<len; ++i) {\n\t\tGroupItem g = (GroupItem) items.get(i);\n\t\tif (g != null) list.add(g);\n\t}\n\tif (len > 1) {\n\t\tCollections.sort(list, _depthCmp);\n\t}\n\treturn list;\n}", "path": "protovis\\src\\pv\\render\\AbstractRenderer.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// updates measures after optimization iterations\n", "func_signal": "private void update()", "code": "{\n\tloglik = loglik(X,u,s,p);\n\taic = 2*(3*k-1) - 2*loglik;\n\tbic = (3*k-1)*Math.log(N) - 2*loglik;\n\tdensity(0, 1, 0.001, densities);\n}", "path": "protovis-examples\\src\\edu\\stanford\\vis\\examples\\TurkModel.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// ----\n", "func_signal": "public Java2DDisplay()", "code": "{\n\tsetDoubleBuffered(false);\n        setBackground(Color.WHITE);\n        setSize(500,500);\n        \n        _handler = new AWTInputHandler(this);\n        addKeyListener(_handler);\n\taddMouseListener(_handler);\n\taddMouseMotionListener(_handler);\n\taddMouseWheelListener(_handler);\n\tsetFocusable(true);\n\t\n\tScheduler.instance().addPostTask(new DisplayTask(this));\n}", "path": "protovis\\src\\pv\\render\\awt\\java2D\\Java2DDisplay.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n     * Creates a new buffered image to use as an offscreen buffer.\n     */\n", "func_signal": "protected BufferedImage getNewOffscreenBuffer(int width, int height)", "code": "{\n        BufferedImage img = null;\n        if ( !GraphicsEnvironment.isHeadless() ) {\n            try {\n                img = (BufferedImage)createImage(width, height);\n            } catch ( Exception e ) {\n                img = null;\n            }\n        }\n        if ( img == null ) {\n            return new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        }\n        return img;\n    }", "path": "protovis\\src\\pv\\render\\awt\\java2D\\Java2DDisplay.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// -----\n", "func_signal": "private final void shape(final int type)", "code": "{\n\tint count = vb.position()>>1;\n\tvb.position(0);\n\tgl.glEnableClientState(GL.GL_VERTEX_ARRAY);\n\tgl.glVertexPointer(2, GL.GL_FLOAT, 0, vb);\n\tgl.glDrawArrays(type, 0, count);\n\tgl.glDisableClientState(GL.GL_VERTEX_ARRAY);\n\tvb.position(count<<1);\n}", "path": "protovis\\src\\pv\\render\\awt\\gl\\GLRenderer.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// intermediate variables\n", "func_signal": "public String aic()", "code": "{\n\t\t\tNumberFormat fmt = NumberFormat.getNumberInstance();\n\t\t\tfmt.setMaximumFractionDigits(8);\n\t\t\treturn fmt.format(aic);\n\t\t}", "path": "protovis-examples\\src\\edu\\stanford\\vis\\examples\\TurkModel.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n * Convex hull helper method for detecting a non left turn about 3 points\n */\n", "func_signal": "private static boolean isNonLeft(int i0, int i1, int i2, int i3, double[] pts)", "code": "{\n    double x, y, l1, l2, l4, l5, l6, angle1, angle2;\n    \n    y = pts[i2+1]-pts[i1+1]; x = pts[i2]-pts[i1]; l1 = x*x + y*y;\n    y = pts[i3+1]-pts[i2+1]; x = pts[i3]-pts[i2]; l2 = x*x + y*y;\n    y = pts[i3+1]-pts[i0+1]; x = pts[i3]-pts[i0]; l4 = x*x + y*y;\n    y = pts[i1+1]-pts[i0+1]; x = pts[i1]-pts[i0]; l5 = x*x + y*y;\n    y = pts[i2+1]-pts[i0+1]; x = pts[i2]-pts[i0]; l6 = x*x + y*y;\n\n    angle1 = Math.acos((l2+l6-l4) / (2*Math.sqrt(l2*l6)) );\n    angle2 = Math.acos((l6+l1-l5) / (2*Math.sqrt(l6*l1)) );\n    return ((Math.PI-angle1) - angle2) <= 0.0;\n}", "path": "protovis\\src\\pv\\util\\Geometry.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// ------------------------------------------------------------------------\n", "func_signal": "public static void drawWedge(GeneralPath p, WedgeItem wi)", "code": "{\n\tdouble cx = wi.left, cy = wi.top, x0=0, y0=0, x, y;\n\tdouble a0 = wi.startAngle, a1 = wi.endAngle;\n\tdouble inner = wi.innerRadius, outer = wi.outerRadius;\n\t\n\tdouble a = Math.abs(a1 - a0);\n\tint slices = (int)(2 * Math.PI * Math.PI * outer / a);\n\tboolean circle = (a >= 2*Math.PI - 0.001);\n\tif (slices <= 0) return;\n\n\t// pick starting point\n\tif (wi.innerRadius <= 0 && !circle) {\n\t\tp.moveTo(cx, cy);\n\t} else {\n\t\tx0 = cx + outer * Math.cos(a0);\n\t\ty0 = cy + -outer * Math.sin(a0);\n\t\tp.moveTo(x0, y0);\n\t}\n\t\t\n\t// draw outer arc\n\tfor (int i=0; i <= slices; ++i) {\n\t\ta = a0 + i*(a1-a0)/slices;\n\t\tx = cx + outer * Math.cos(a);\n\t\ty = cy + -outer * Math.sin(a);\n\t\tp.lineTo(x,y);\n\t}\n\n\tif (circle) {\n\t\t// return to starting point\n\t\tp.lineTo(x0, y0);\n\t} else if (inner > 0) {\n\t\t// draw inner arc\n\t\tfor (int i = slices+1; --i >= 0;) {\n\t\t\ta = a0 + i*(a1-a0)/slices;\n\t\t\tx = cx + inner * Math.cos(a);\n\t\t\ty = cy + -inner * Math.sin(a);\n\t\t\tp.lineTo(x,y);\n\t\t}\n\t\tp.lineTo(x0, y0);\n\t} else {\n\t\t// return to center\n\t\tp.lineTo(cx, cy);\n\t}\n}", "path": "protovis\\src\\pv\\render\\awt\\java2D\\Shapes.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n * Draws a cubic open uniform B-spline. The spline passes through the\n * first and last control points, but not necessarily any others.\n * @param p a double array of points defining the spline control points\n * @param slack a slack parameter determining the \"tightness\" of the\n *  spline. At value 1 (the default) a normal b-spline will be drawn,\n *  at value 0 a straight line between the first and last points will\n *  be drawn. Intermediate values interpolate smoothly between these\n *  two extremes.\n * @param includeFirst if true the first point will be included\n * @param vc callback to collect vertex values\n */\n", "func_signal": "public static int bspline(double[] p, int npts,\n\tboolean includeFirst, VertexCallback vc)", "code": "{\t\t\n\tint N = (npts < 0 ? p.length/2 : npts);\n\tint k = N<4 ? 3 : 4, nplusk = N+k;\n\tint i, j, s, subdiv = 40;\n\tdouble x, y, step, u;\n\t\n\t// if only two points, draw a line between them\n\tif (N==2) {\n\t\tif (includeFirst) vc.vertex(p[0], p[1]);\n\t\tvc.vertex(p[2], p[3]);\n\t\treturn (includeFirst ? 2 : 1);\n\t}\n\t\n\tdouble[] _knot = new double[nplusk];\n\tdouble[] _basis = new double[nplusk];\n\t\n\t// initialize knot vector\n\tfor (i=1, _knot[0]=0; i<nplusk; ++i) {\n\t\t_knot[i] = _knot[i-1] + (i>=k && i<=N ? 1 : 0);\n\t}\n\t\n\t// calculate the points on the bspline curve\n\tstep = _knot[nplusk-1] / subdiv;\n\tfor (s=0; s <= subdiv; ++s) {\n\t\tu = step * s;\n\t\t\n\t\t// calculate basis function -----\n\t\tfor (i=0; i < nplusk-1; ++i) { // first-order\n\t\t\t_basis[i] = (u >= _knot[i] && u < _knot[i+1] ? 1 : 0);\n\t\t}\n\t\tfor (j=2; j <= k; ++j) { // higher-order\n\t\t\tfor (i=0; i < nplusk-j; ++i) {\n\t\t\t\tx = (_basis[i  ]==0 ? 0 : (u-(_knot[i])*_basis[i]) / (_knot[i+j-1]-_knot[i]));\n\t\t\t\ty = (_basis[i+1]==0 ? 0 : ((_knot[i+j]-u)*_basis[i+1]) / (_knot[i+j]-_knot[i+1]));\n\t\t\t\t_basis[i] = x + y;\n\t\t\t}\n\t\t}\n\t\tif (u == _knot[nplusk-1]) _basis[N-1] = 1; // last point\n\t\t\n\t\t// interpolate b-spline point -----\n\t\tfor (i=0, j=0, x=0, y=0; i<N; ++i, j+=2) {\n\t\t\tx += _basis[i] * p[j];\n\t\t\ty += _basis[i] * p[j+1];\n\t\t}\n\t\tif (s==0) {\n\t\t\tif (includeFirst) vc.vertex(x, y);\n\t\t} else {\n\t\t\tvc.vertex(x, y);\n\t\t}\n\t}\n\treturn subdiv + (includeFirst ? 1 : 0);\n}", "path": "protovis\\src\\pv\\util\\Geometry.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n     * Set the size of the Display.\n     * @param width the width of the Display in pixels\n     * @param height the height of the Display in pixels\n     * @see java.awt.Component#setSize(int, int)\n     */\n", "func_signal": "public void setSize(int width, int height)", "code": "{\n    \t_offscreen = null;\n        setPreferredSize(new Dimension(width, height));\n        super.setSize(width, height);\n    }", "path": "protovis\\src\\pv\\render\\awt\\java2D\\Java2DDisplay.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// TODO? keep track of mouse event to populate key events\n", "func_signal": "public void keyPressed(KeyEvent e)", "code": "{\n\tif (_active == null) return;\n\tMarkEvent.fire(event(keyPress, e), _active);\n}", "path": "protovis\\src\\pv\\render\\awt\\AWTInputHandler.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n * Computes the 2D convex hull of a set of points using Graham's\n * scanning algorithm. The algorithm has been implemented as described\n * in Cormen, Leiserson, and Rivest's Introduction to Algorithms.\n * \n * The running time of this algorithm is O(n log n), where n is\n * the number of input points.\n * \n * @param pts the input points in [x0,y0,x1,y1,...] order\n * @param len the length of the pts array to consider (2 * #points)\n * @return the convex hull of the input points\n */\n", "func_signal": "public static double[] convexHull(double[] pts, int len)", "code": "{\n    if (len < 6) {\n        throw new IllegalArgumentException(\n                \"Input must have at least 3 points\");\n    }\n    int plen = len/2-1;\n    float[] angles = new float[plen];\n    int[] idx    = new int[plen];\n    int[] stack  = new int[len/2];\n    return convexHull(pts, len, angles, idx, stack);\n}", "path": "protovis\\src\\pv\\util\\Geometry.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "// -- Mergesort --\n", "func_signal": "protected static final void mergesort(float[] a, int[] b, int p, int r)", "code": "{\n    if (p >= r) {\n        return;\n    }\n    if (r - p + 1 < SORT_THRESHOLD) {\n        insertionsort(a, b, p, r);\n    } else {\n        int q = (p + r) / 2;\n        mergesort(a, b, p, q);\n        mergesort(a, b, q + 1, r);\n        merge(a, b, p, q, r);\n    }\n}", "path": "protovis\\src\\pv\\util\\Geometry.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n\t * Draws a cubic Bezier curve.\n\t * @param g the graphics context to draw with\n\t * @param ax x-coordinate of the starting point\n\t * @param ay y-coordinate of the starting point\n\t * @param bx x-coordinate of the first control point\n\t * @param by y-coordinate of the first control point\n\t * @param cx x-coordinate of the second control point\n\t * @param cy y-coordinate of the second control point\n\t * @param dx x-coordinate of the ending point\n\t * @param dy y-coordinate of the ending point\n\t * @param includeFirst if true the first point will be included\n\t * @param vc callback to collect vertex values\n\t */\n", "func_signal": "public static int cubic(double ax, double ay,\n\t\tdouble bx, double by, double cx, double cy, double dx, double dy,\n\t\tboolean includeFirst, VertexCallback vc)", "code": "{\n\t\tint subdiv;\n\t\tdouble u, xx, yy;\t\t\t\n\t\t\n\t\t// determine number of line segments\n//\t\tsubdiv = (int)((\n//\t\t\tMath.sqrt((xx=(bx-ax))*xx + (yy=(by-ay))*yy) +\n//\t\t\tMath.sqrt((xx=(cx-bx))*xx + (yy=(cy-by))*yy) +\n//\t\t\tMath.sqrt((xx=(dx-cx))*xx + (yy=(dy-cy))*yy)) / 4);\n//\t\tif (subdiv < 1) subdiv = 1;\n\t\tsubdiv = 30;\n\n\t\t// compute Bezier co-efficients\n\t\tdouble c3x = 3 * (bx - ax);\n    double c2x = 3 * (cx - bx) - c3x;\n    double c1x = dx - ax - c3x - c2x;\n    double c3y = 3 * (by - ay);\n    double c2y = 3 * (cy - by) - c3y;\n    double c1y = dy - ay - c3y - c2y;\n\t\t\n\t\tif (includeFirst) vc.vertex(ax, ay);\n\t\tfor (int i=0; i<=subdiv; ++i) {\n\t\t\tu = i/subdiv;\n\t\t\txx = u*(c3x + u*(c2x + u*c1x)) + ax;\n\t\t\tyy = u*(c3y + u*(c2y + u*c1y)) + ay;\n\t\t\tvc.vertex(xx, yy);\n\t\t}\n\t\treturn subdiv + (includeFirst ? 2 : 1);\n\t}", "path": "protovis\\src\\pv\\util\\Geometry.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n * Computes the 2D convex hull of a set of points using Graham's\n * scanning algorithm. The algorithm has been implemented as described\n * in Cormen, Leiserson, and Rivest's Introduction to Algorithms.\n * \n * The running time of this algorithm is O(n log n), where n is\n * the number of input points.\n * \n * @param pts\n * @return the convex hull of the input points\n */\n", "func_signal": "public static double[] convexHull(double[] pts, int len, \n        float[] angles, int[] idx, int[] stack)", "code": "{\n    // check arguments\n    int plen = len/2 - 1;\n    if (len < 6) {\n        throw new IllegalArgumentException(\n                \"Input must have at least 3 points\");\n    }\n    if (angles.length < plen || idx.length < plen || stack.length < len/2) {\n        throw new IllegalArgumentException(\n                \"Pre-allocated data structure too small\");\n    }\n    \n    int i0 = 0;\n    // find the starting ref point: leftmost point with the minimum y coord\n    for (int i=2; i<len; i += 2) {\n        if (pts[i+1] < pts[i0+1]) {\n            i0 = i;\n        } else if (pts[i+1] == pts[i0+1]) {\n            i0 = (pts[i] < pts[i0] ? i : i0);\n        }\n    }\n    \n    // calculate polar angles from ref point and sort\n    for (int i=0, j=0; i<len; i+=2) {\n        if (i == i0) continue;\n        angles[j] = (float)Math.atan2(pts[i+1]-pts[i0+1], pts[i]-pts[i0]);\n        idx[j++]  = i;\n    }\n    sort(angles,idx,plen);\n    \n    // toss out duplicated angles\n    float angle = angles[0];\n    int ti = 0, tj = idx[0];\n    for (int i=1; i<plen; i++) {\n        int j = idx[i];\n        if (angle == angles[i]) {\n            // keep whichever angle corresponds to the most distant\n            // point from the reference point\n            double x1 = pts[tj]   - pts[i0];\n            double y1 = pts[tj+1] - pts[i0+1];\n            double x2 = pts[j]    - pts[i0];\n            double y2 = pts[j+1]  - pts[i0+1];\n            double d1 = x1*x1 + y1*y1;\n            double d2 = x2*x2 + y2*y2;\n            if ( d1 >= d2 ) {\n                idx[i] = -1;\n            } else {\n                idx[ti] = -1;\n                angle = angles[i];\n                ti = i;\n                tj = j;\n            }\n        } else {\n            angle = angles[i];\n            ti = i;\n            tj = j;\n        }\n    }\n    \n    // initialize our stack\n    int sp = 0;\n    stack[sp++] = i0;\n    int j = 0;\n    for (int k=0; k<2; j++) {\n        if (idx[j] != -1) {\n            stack[sp++] = idx[j];\n            k++;\n        }\n    }\n    \n    // do graham's scan\n    for (; j < plen; j++) {\n        if (idx[j] == -1) continue; // skip tossed out points\n        while (isNonLeft(i0, stack[sp-2], stack[sp-1], idx[j], pts)) {\n            sp--;\n        }\n        stack[sp++] = idx[j];\n    }\n\n    // construct the hull\n    double[] hull = new double[2*sp];\n    for ( int i=0; i<sp; i++ ) {\n        hull[2*i]   = pts[stack[i]];\n        hull[2*i+1] = pts[stack[i]+1];\n    }\n    \n    return hull;\n}", "path": "protovis\\src\\pv\\util\\Geometry.java", "repo_name": "protovis/protovis-java", "stars": 10, "license": "bsd-3-clause", "language": "java", "size": 3337}
{"docstring": "/**\n * Find some user data, and create it if it does not exist\n * \n * @param playerName The player to find data for\n * @return A SamplePlayerData for this player, or null if the player is unknown.\n */\n", "func_signal": "public SamplePlayerData createData(String playerName)", "code": "{\n\tSamplePlayerData sampleData = null;\n\n\t// Check for playerData\n\tPlayerData playerData = persistence.get(playerName, PlayerData.class);\n\tif (playerData == null)\n\t{\n\t\treturn null;\n\t}\n\t\n\tSamplePlayerData samplePlayer = persistence.get(playerData, SamplePlayerData.class);\n\tif (samplePlayer == null)\n\t{\n\t\tsamplePlayer = new SamplePlayerData(playerData);\n\t\tpersistence.put(samplePlayer);\n\t}\n\n\treturn sampleData;\n}", "path": "SamplePlugin\\src\\main\\java\\com\\sample\\bukkit\\plugins\\sample\\SamplePlugin.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Initialize this data store.\n * \n * This is called internally by Persistence.\n * \n * @param schema The schema this data store connects to\n * @param p The Persistence instance this data store should use.\n */\n", "func_signal": "public void initialize(String schema, Persistence p)", "code": "{\n\tpersistence = p;\n\tthis.schema = schema;\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\persistence\\data\\DataStore.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/* Start up Persistence, bind event handlers\n * \n * @see org.bukkit.plugin.Plugin#onEnable()\n */\n", "func_signal": "public void onEnable()", "code": "{\n\ttry\n\t{\n\t\tinitialize();\n\t\tPluginDescriptionFile pdfFile = this.getDescription();\n        log.info(pdfFile.getName() + \" version \" + pdfFile.getVersion() + \" is enabled\");\n\t}\n\tcatch(Throwable e)\n\t{\n\t\tPluginDescriptionFile pdfFile = this.getDescription();\n        log.info(pdfFile.getName() + \" version \" + pdfFile.getVersion() + \" failed to initialize\");\n        e.printStackTrace();\n\t}\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\persistence\\PersistencePlugin.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "// TODO: SqlDataType class?\n", "func_signal": "public static int getSqlType(DataType dataType)", "code": "{\n\tswitch(dataType)\n\t{\n\t\tcase BOOLEAN: return java.sql.Types.BOOLEAN;\n\t\tcase DATE: return java.sql.Types.DATE;\n\t\tcase DOUBLE: return java.sql.Types.DOUBLE;\n\t\tcase FLOAT: return java.sql.Types.FLOAT;\n\t\tcase INTEGER: return java.sql.Types.INTEGER;\n\t\tcase BYTE: return java.sql.Types.TINYINT;\n\t\tcase STRING: return java.sql.Types.VARCHAR;\n\t}\n\t\n\treturn java.sql.Types.NULL;\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\persistence\\data\\DataType.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Adds a Portal to this world.\n * \n * You *should* only call this if this Portal's Location\n * is in this world!\n * \n * Also, this does not check for duplicates- it's just a \n * quick add to the transient list, meant to stay in sync\n * with the Portal Location world values.\n * \n * @param portal the portal to add to this world\n */\n", "func_signal": "public void addPortal(Portal portal)", "code": "{\n\tif (portals == null)\n\t{\n\t\tportals = new ArrayList<Portal>();\n\t}\n\tportals.add(portal);\n}", "path": "NetherGate\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\nether\\dao\\NetherWorld.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/* Called when your plugin is enabled. This is a good time to initialize.\n * \n * @see org.bukkit.plugin.Plugin#onEnable()\n */\n", "func_signal": "public void onEnable()", "code": "{\n\tif (initialize())\n\t{\n\t\tPluginDescriptionFile pdfFile = this.getDescription();\n\t\tlog.info(pdfFile.getName() + \" version \" + pdfFile.getVersion() + \" is enabled\");\n\t}\n\telse\n\t{\n\t\tPluginDescriptionFile pdfFile = this.getDescription();\n\t\tlog.info(pdfFile.getName() + \" version \" + pdfFile.getVersion() + \" failed to initialize\");\n\t}\t\n}", "path": "SamplePlugin\\src\\main\\java\\com\\sample\\bukkit\\plugins\\sample\\SamplePlugin.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Sets the default value for this node\n *\n * @param value New default value\n */\n", "func_signal": "public void setDefault(final Object value)", "code": "{\n    if (isValid(value)) {\n        map.put(\"default\", value);\n    } else {\n        throw new IllegalArgumentException(\"Default value is not of correct type\");\n    }\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\permission\\PermissionDescriptionNode.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/*\n * Protected members\n */\n", "func_signal": "protected DataTable getClassTable()", "code": "{\n\tDataTable classTable = new DataTable(getTableName());\n\treturn classTable;\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\persistence\\core\\PersistedClass.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "// I think this is only here for Permissions support..\n", "func_signal": "@Override\npublic void onPlayerJoin(PlayerEvent event)", "code": "{\n\tPlayer player = event.getPlayer();\n\tString playerName = player.getName();\n\tPlayerData playerData = persistence.get(playerName, PlayerData.class);\n\tif (playerData == null)\n\t{\n\t\tplayerData = new PlayerData(player);\n\t\tpersistence.put(playerData);\n\t}\n\t\n\tUser user = persistence.get(playerName, User.class);\n\tif (user == null)\n\t{\n\t\tuser = new User(playerData);\n\t\tpersistence.put(user);\n\t}\n\t\n\tplayerData.setProfile(user);\n}", "path": "GroupsPlugin\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\groups\\GroupPlayerListener.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Whew! Ok, took me a while to figure out  I needed this...\n * \n * getIdData will recurse down objects-as-id reference chains. This is for persisting\n * in the data store.\n * \n * getId will return the actual id value, which is how data is cached internally.\n * \n * A VERY important distinction! You look up object-as-id objects using their id instance,\n * not the id of their id (of that id's id, etc...)\n */\n", "func_signal": "public Object getIdData(Object o)", "code": "{\n\tObject value = null;\n\tPersistedField field = idField;\n\tif (field != null)\n\t{\n\t\tif (field instanceof PersistedReference)\n\t\t{\n\t\t\tPersistedReference ref = (PersistedReference)field;\n\t\t\tObject refId = idField.get(o);\n\t\t\tif (ref.getReferenceType() != null)\n\t\t\t{\n\t\t\t\treturn ref.getReferenceType().getIdData(refId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = idField.get(o);\t\t\t\t\n\t\t}\n\t}\n\treturn value;\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\persistence\\core\\PersistedClass.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/* Shut down Persistence, save data, clear cache\n * \n * @see org.bukkit.plugin.Plugin#onDisable()\n */\n", "func_signal": "public void onDisable()", "code": "{\n\tif (persistence != null)\n\t{\n\t\tpersistence.save();\n\t\tpersistence.clear();\n\t\tpersistence.disconnect();\n\t}\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\persistence\\PersistencePlugin.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Create a DataRow based on a SQL ResultSet\n * \n * This constructor is used to create a DataRow for reading from a store.\n * \n * @param row The SQL ResultSet to read from\n */\n", "func_signal": "public SqlDataRow(DataTable table, ResultSet row)", "code": "{\n\tsuper(table);\n\t\n\ttry\n\t{\n\t\tResultSetMetaData rowInfo = row.getMetaData();\n\t\tint columnCount = rowInfo.getColumnCount();\n\t\tfor (int i = 1; i <= columnCount; i++)\n\t\t{\n\t\t\tint sqlType = rowInfo.getColumnType(i);\n\t\t\tString columnName = rowInfo.getColumnName(i);\n\t\t\tDataType dataType = DataType.getTypeFromSqlType(sqlType);\n\t\t\tSqlDataField field = new SqlDataField(row, i, columnName, dataType);\n\t\t\tadd(field);\n\t\t}\n\t}\n\tcatch (SQLException ex)\n\t{\n\t\tlog.warning(\"Persistence: error creating SQLDataRow: \" + ex.getMessage());\n\t}\n\t\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\persistence\\data\\sql\\SqlDataRow.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/*\n * PortalArea\n */\n", "func_signal": "public boolean createArea(Player player)", "code": "{\n\tNetherPlayer playerData = getPlayerData(player);\n\t\n\tLocation location = player.getLocation();\n\tPortalArea nether = new PortalArea();\n\t\n\tint minX = location.getBlockX() - PortalArea.defaultSize / 2;\n\tint maxX = location.getBlockX() + PortalArea.defaultSize / 2;\n\tint minZ = location.getBlockZ() - PortalArea.defaultSize / 2;\n\tint maxZ = location.getBlockZ() + PortalArea.defaultSize / 2;\n\tint minY = PortalArea.defaultFloor + PortalArea.getFloorPadding();\n\tint maxY = minY + PortalArea.minHeight;\n\t\n\tint limitY = location.getBlockY() - PortalArea.getCeilingPadding();\n\t\n\tif (maxY > limitY)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile (maxY < limitY && maxY - minY < PortalArea.maxHeight)\n\t{\n\t\tmaxY++;\n\t}\n\t\n\tBoundingBox area = new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);\n\tnether.setInternalArea(area);\n\t\n\tint ratio = PortalArea.defaultRatio;\n\t\t\n\tnether.setCreator(playerData);\n\tnether.setRatio(ratio);\n\t\n\tnether.create(player.getWorld());\n\taddToMap(nether);\n\t\n\tnetherAreas.add(nether);\n\tpersistence.put(nether);\n\t\n\treturn true;\n}", "path": "NetherGate\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\nether\\NetherManager.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/*\n * Player teleportation\n */\n", "func_signal": "public BlockVector mapLocation(NetherWorld from, NetherWorld to, BlockVector target)", "code": "{\n\tdouble fromScale = from.getScale();\n\tdouble toScale = to.getScale();\n\t\n\tif (fromScale == 0 || toScale == 0) return target;\n\t\n\tint originalY = target.getBlockY();\n\tVector transformed = new Vector(target.getBlockX(), target.getBlockY(), target.getBlockZ());\n\t\n\t// First, offset to center on local spawn (making sure there is one set)\n\t\n\tBlockVector fromSpawn = from.getWorld().getSpawn();\n\tif (fromSpawn != null)\n\t{\n\t\ttransformed.subtract(fromSpawn);\n\t}\n\t\n\t// Apply additional offset\n\tBlockVector fromOffset = from.getCenterOffset();\n\tif (fromOffset != null)\n\t{\n\t\ttransformed.subtract(fromOffset);\n\t}\n\t\n\t// Scale\n\tif (fromScale != 0 && toScale != 0)\n\t{\n\t\ttransformed.multiply(fromScale / toScale);\n\t}\n\t\n\t// Unwind\n\t\n\tBlockVector toOffset = to.getCenterOffset();\n\tif (toOffset != null)\n\t{\n\t\ttransformed.add(toOffset);\n\t}\n\t\n\tBlockVector toSpawn = to.getWorld().getSpawn();\n\tif (toSpawn != null)\n\t{\n\t\ttransformed.add(toSpawn);\n\t}\n\t\n\ttransformed.setY(originalY);\n\t\n\treturn new BlockVector(transformed);\n}", "path": "NetherGate\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\nether\\NetherManager.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "// TODO: Less copy+paste! In a hurry....\n", "func_signal": "public boolean onRemoveFromGroup(CommandSender messageOutput, String[] parameters)", "code": "{\n\tif (parameters.length < 2)\n\t{\n\t\treturn false;\n\t}\n\t\n\tString playerName = parameters[0];\n\tString groupName = parameters[1];\n\t\n\t// First check for group\n\tGroup group = persistence.get(groupName, Group.class);\n\tif (group == null)\n\t{\n\t\tgroupNotFoundMessage.sendTo(messageOutput, group);\n\t\treturn true;\n\t}\n\t\n\t// Check for player data, create user if a player exists\n\tUser user = createUser(playerName);\n\tif (user == null)\n\t{\n\t\tplayerNotFoundMessage.sendTo(messageOutput, playerName);\n\t\treturn true;\n\t}\n\t\n\tuser.removeFromGroup(group);\n\tpersistence.put(user);\n\tremovedPlayerFromGroupMessage.sendTo(messageOutput, playerName, groupName);\n\t\n\treturn true;\n}", "path": "GroupsPlugin\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\groups\\GroupsPlugin.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/* Process player quit and join messages.\n * \n * @see org.bukkit.plugin.java.JavaPlugin#onCommand(org.bukkit.command.CommandSender, org.bukkit.command.Command, java.lang.String, java.lang.String[])\n */\n", "func_signal": "@Override\npublic boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] parameters)", "code": "{\n\tif (listeners == null)\n\t{\n\t\tlisteners = new ArrayList<Object>();\n\t\tlisteners.add(handler);\n\t\tlisteners.add(getPermissions());\n\t}\n\treturn utilities.dispatch(listeners, sender, cmd.getName(), parameters);\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\persistence\\PersistencePlugin.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/*\n * Hrm.. this compiles... but Maven doesn't like it.... ???\n * \n * [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile (default-compile) on project Persistence: Compilation failure\n * [ERROR] /Users/nathan/Documents/Code/Eclipse/Bukkit/BukkitPlugins/PersistencePlugin/src/main/java/com/elmakers/mine/bukkit/plugins/persistence/dao/ProfileData.java:[33,25] type parameters of <T>T cannot be determined; no unique maximal instance exists for type variable T with upper bounds T,java.lang.Object\n * [ERROR] -> [Help 1]\n     *\n     * Disabling for now, not working yet anyway (at an API level)\n */\n/*\npublic <T> T get(final String key)\n{\n\tif (this.profile == null)\n\t{\n\t\treturn null;\n\t}\n\n\treturn this.profile.get(key);\n}\n*/\n", "func_signal": "public boolean isSet(final String key)", "code": "{\n\tif (this.profile == null)\n\t{\n\t\treturn false;\n\t}\n\n\treturn profile.isSet(key);\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\persistence\\dao\\ProfileData.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Retrieve the singleton Persistence instance.\n * \n * Use this function to get a reference to Persistence, which you can use to access the Persistence API.\n * \n * @see com.elmakers.mine.craftbukkit.persistence.Persistence\n * \n * @return The singleton instance of Persistence\n */\n", "func_signal": "public Persistence getPersistence()", "code": "{\n\tif (persistence == null)\n\t{\n\t\tpersistence = Persistence.getInstance();\n\t}\n\treturn persistence;\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\bukkit\\plugins\\persistence\\PersistencePlugin.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Convert a SQL data type to a DataType.\n * \n * Only converts supported DataTypes.\n * \n * TODO: Move this to a SqlData type class, allow\n * stores to override type conversion\n * \n * @param sqlType The java.sql.Type value to convert\n * @return A DataType value, or DataType.NULL if invalid\n */\n", "func_signal": "public static DataType getTypeFromSqlType(int sqlType)", "code": "{\n\tDataType dataType = DataType.NULL;\n\t\n\tswitch(sqlType)\n\t{\n\t\tcase java.sql.Types.BOOLEAN:\n\t\t\tdataType = DataType.BOOLEAN;\n\t\t\tbreak;\n\t\tcase java.sql.Types.BIT:\n\t\t\tdataType = DataType.BOOLEAN;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.TINYINT:\n\t\t\tdataType = DataType.BYTE;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.DATE:\n\t\t\tdataType = DataType.DATE;\n\t\t\tbreak;\n\t\tcase java.sql.Types.DECIMAL:\n\t\t\tdataType = DataType.DOUBLE;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.DOUBLE:\n\t\t\tdataType = DataType.DOUBLE;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.FLOAT:\n\t\t\tdataType = DataType.DOUBLE;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.INTEGER:\n\t\t\tdataType = DataType.INTEGER;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.JAVA_OBJECT:\n\t\t\tdataType = DataType.OBJECT;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.LONGNVARCHAR:\n\t\t\tdataType = DataType.STRING;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.LONGVARCHAR:\n\t\t\tdataType = DataType.STRING;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.NCHAR:\n\t\t\tdataType = DataType.STRING;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.NULL:\n\t\t\tdataType = DataType.NULL;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.NUMERIC:\n\t\t\tdataType = DataType.INTEGER;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.REAL:\n\t\t\tdataType = DataType.DOUBLE;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.ROWID:\n\t\t\tdataType = DataType.INTEGER;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.SMALLINT:\n\t\t\tdataType = DataType.INTEGER;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.TIME:\n\t\t\tdataType = DataType.DATE;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.TIMESTAMP:\n\t\t\tdataType = DataType.DATE;\n\t\t\tbreak;\t\n\t\tcase java.sql.Types.VARCHAR:\n\t\t\tdataType = DataType.STRING;\n\t\t\tbreak;\t\n\t}\n\t\n\treturn dataType;\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\persistence\\data\\DataType.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/**\n * Will create a table if it does not exist, and migrate data as\n * necessary if it does exist.\n * \n * @param table The table definition. If this differs from the stored definition, data migration will occur.\n * @return true if success\n * @see #tableExists(DataTable)\n */\n", "func_signal": "public boolean migrateEntity(DataTable table, PersistedClass entity)", "code": "{\n\tif (!tableExists(table.getName())) \n\t{\n\t\tcreate(table);\n\t\treturn true;\n\t}\n\t\n\t// Migrate data\n\tDataTable currentTable = getTableHeader(table.getName());\n\tDataRow tableHeader = table.getHeader();\n\tDataRow currentHeader = currentTable.getHeader();\n\tif (tableHeader.isMigrationRequired(currentHeader))\n\t{\n\t\tMigrationInfo migrateInfo = entity.getMigrationInfo();\n\t\t\n\t\t// TODO: Support types other than auto reset\n\t\tif (migrateInfo == null)\n\t\t{\n\t\t\tlog.info(\"Persistence: Auto-migrating entity \" + entity.getSchema() + \".\" + entity.getName());\n\t\t\t\n\t\t\t/* TODO!\n\t\t\tString autoBackupTable = table.getName() + \"_autoBackup\";\n\t\t\tif (tableExists(autoBackupTable))\n\t\t\t{\n\t\t\t\tdrop(autoBackupTable);\n\t\t\t}\n\t\t\tcurrentTable.setName(autoBackupTable);\n\t\t\tcreate(currentTable);\n\t\t\t*/\n\t\t\tdrop(currentTable.getName());\n\t\t\tcreate(table);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Custom migration not supported- just dump error.\n\t\t\tlogMigrateError(entity.getSchemaName(), entity.getName());\n\t\t}\n\t}\n\t\n\treturn true;\n}", "path": "PersistencePlugin\\src\\main\\java\\com\\elmakers\\mine\\craftbukkit\\persistence\\data\\DataStore.java", "repo_name": "NathanWolf/BukkitPlugins", "stars": 14, "license": "None", "language": "java", "size": 8446}
{"docstring": "/*\n param@ key -- value whose hash is used to fill\n the filter_.\n This is a general purpose API.\n */\n", "func_signal": "public void add(String key)", "code": "{\n    if ( !isPresent(key) )\n        ++count_;\n    for (int i = 0; i < hashes_; ++i)\n    {\n        ISimpleHash hash = hashLibrary_.get(i);\n        int hashValue = hash.hash(key);\n        int index = Math.abs(hashValue % size_);\n        byte value = (filter_[index] == 0xFF) ? filter_[index] : (byte)( (++filter_[index]) & 0xFF );\n        filter_[index] = value;\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\utils\\BloomFilter.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/**\n * This method is part of IFailureDetectionEventListener interface. This is invoked\n * by the Failure Detector when it convicts an end point.\n * \n * param @ endpoint end point that is convicted.\n*/\n", "func_signal": "public void convict(EndPoint endpoint)", "code": "{\n    EndPointState epState = endPointStateMap_.get(endpoint);\n    if ( epState != null )\n    {\n        if ( !epState.isAlive() && epState.isAGossiper() )\n        {\n            /*\n             * just to be sure - is invoked just to make sure that\n             * it was called atleast once.\n            */\n            if ( liveEndpoints_.contains(endpoint) )\n            {\n                logger_.info(\"EndPoint \" + endpoint + \" is now dead.\");\n                isAlive(endpoint, epState, false);\n                \n                /* Notify an endpoint is dead to interested parties. */\n                EndPointState deltaState = new EndPointState(epState.getHeartBeatState());\n                doNotifications(endpoint, deltaState);\n            }\n            epState.isAGossiper(false);\n        }\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\gms\\Gossiper.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n param@ key -- value whose hash is used to fill\n the filter_.\n This is a general purpose API.\n */\n", "func_signal": "public void fill(String key)", "code": "{\n    for (int i = 0; i < hashes_; ++i)\n    {\n        ISimpleHash hash = hashLibrary_.get(i);\n        int hashValue = hash.hash(key);\n        int index = Math.abs(hashValue % size_);\n        filter_.set(index);\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\utils\\BloomFilter.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * The following methods are used for compact representation\n * of BloomFilter. This is essential, since we want to determine\n * the size of the serialized Bloom Filter blob before it is\n * populated armed with the knowledge of how many elements are\n * going to reside in it.\n */\n", "func_signal": "public void serialize(BloomFilter bf, DataOutput dos)\n        throws IOException", "code": "{\n    /* write out the count of the BloomFilter */\n    dos.writeInt(bf.count());\n    /* write the number of hash functions used */\n    dos.writeInt(bf.hashes());\n    /* write the size of the BloomFilter */\n    dos.writeInt(bf.size());\n    BitSet.serializer().serialize(bf.filter(), dos);\n}", "path": "src\\com\\facebook\\infrastructure\\utils\\BloomFilter.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/**\n * Return a new TokenMetadata object reflecting a new token for the given\n * endpoint.\n */\n", "func_signal": "public TokenMetadata update(BigInteger token, EndPoint endpoint)", "code": "{\n    TreeMap<BigInteger, EndPoint> newTTEP =\n        new TreeMap<BigInteger, EndPoint>(tokenToEndPointMap_);\n    Map<EndPoint, BigInteger> newEPTT =\n        new HashMap<EndPoint, BigInteger>(endPointToTokenMap_);\n\n    BigInteger oldToken = endPointToTokenMap_.get(endpoint);\n    if ( oldToken != null )\n        newTTEP.remove(oldToken);\n    newTTEP.put(token, endpoint);\n    newEPTT.put(endpoint, token);\n\n    return new TokenMetadata(newTTEP, newEPTT);\n}", "path": "src\\com\\facebook\\infrastructure\\service\\TokenMetadata.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * Resolve the column by comparing timestamps\n * if a newer vaue is being input\n * take the change else ignore .\n *\n */\n", "func_signal": "public boolean putColumn(IColumn column)", "code": "{\n\tif ( !(column instanceof Column))\n\t\tthrow new UnsupportedOperationException(\"Only Column objects should be put here\");\n\tif( !name_.equals(column.name()))\n\t\tthrow new IllegalArgumentException(\"The name should match the name of the current column or super column\");\n\tif(timestamp_ <= column.timestamp())\n\t{\n\t\tvalue_ = column.value();\n\t\ttimestamp_ = column.timestamp();\n        return true;\n\t}\n    return false;\n}", "path": "src\\com\\facebook\\infrastructure\\db\\Column.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * Process the HTTP commands sent from the client. Reads\n * the socket and parses the HTTP request.\n*/\n", "func_signal": "public void parse(ByteBuffer bb)", "code": "{\n    try\n    {\n        logger_.debug(\"Processing http requests from socket ...\");\n        switch (parseState_)\n        {\n            case IN_NEW:\n                parseState_ = ParseState.IN_START;\n                parseStartTime_ = System.currentTimeMillis();\n\n            // fall through\n            case IN_START:\n                if (startLineParser_.onMoreBytesNew(bb) == false)\n                {\n                    break;\n                }\n                else\n                {\n                    /* Already done through the callback */\n                    parseState_ = ParseState.IN_HEADERS;\n                }\n\n            // fall through\n            case IN_HEADERS:\n                if (headerParser_.onMoreBytesNew(bb) == false)\n                {\n\n                    break; // need more bytes\n                }\n                else\n                {\n                    String len;\n                    if (currentMsgType_ == HttpMessageType.REQUEST)\n                    {\n                        len = currentRequest_.getHeader(HttpProtocolConstants.CONTENT_LENGTH);\n\n                        // find if we should close method\n                        if (currentRequest_.getVersion().equalsIgnoreCase(\"HTTP/1.1\"))\n                        {\n                            /*\n                             * Scan all of the headers for close messages\n                             */\n                            String val = currentRequest_.getHeader(HttpProtocolConstants.CONNECTION);\n\n                            if (val != null && val.equalsIgnoreCase(HttpProtocolConstants.CLOSE))\n                            {\n                                shouldClose_ = true;\n                            }\n                        } else if (currentRequest_.getVersion().equalsIgnoreCase(\"HTTP/1.0\"))\n                        {\n                            /* By default no keep-alive */\n                            shouldClose_ = true;\n\n                            /*\n                             * Scan all of the headers for keep-alive\n                             * messages\n                             */\n                            String val = currentRequest_.getHeader(HttpProtocolConstants.CONNECTION);\n\n                            if (val != null && val.equalsIgnoreCase(HttpProtocolConstants.KEEP_ALIVE))\n                            {\n                                shouldClose_ = false;\n                            }\n                        } else\n                        {\n                            /* Assume 0.9 */\n                            shouldClose_ = true;\n                        }\n                    }\n                    else if (currentMsgType_ == HttpMessageType.RESPONSE)\n                    {\n                        len = currentResponse_.getHeader(HttpProtocolConstants.CONTENT_LENGTH);\n\n                    // TODO: pay attention to keep-alive and\n                    // close headers\n                    }\n                    else\n                    {\n                        logger_.warn(\"in HttpConnection::processInput_() Message type is not set\");\n                        return;\n                    }\n\n                    if (len != null)\n                    {\n                        try\n                        {\n                            if(len == null || len.equals(\"\"))\n                                contentLength_ = 0;\n                            else\n                                contentLength_ = Integer.parseInt(len);\n                        }\n                        catch (NumberFormatException ex)\n                        {\n                            throw new HttpParsingException();\n                        }\n                    }\n                    parseState_ = ParseState.IN_BODY;\n                }\n\n            // fall through\n            case IN_BODY:\n                boolean done = false;\n\n                if (contentLength_ > 0)\n                {\n                    if (bb.remaining() > contentLength_)\n                    {\n                        int newLimit = bb.position() + contentLength_;\n                        bodyBuffers_.add(((ByteBuffer) bb.duplicate().limit(newLimit)).slice());\n                        bb.position(newLimit);\n                        contentLength_ = 0;\n                    }\n                    else\n                    {\n                        contentLength_ -= bb.remaining();\n                        bodyBuffers_.add(bb.duplicate());\n                        bb.position(bb.limit());\n                    }\n                }\n\n            if (contentLength_ == 0)\n            {\n                done = true;\n            }\n\n            if (done)\n            {\n                if (currentMsgType_ == HttpMessageType.REQUEST)\n                {\n                    //currentRequest_.setParseTime(env_.getCurrentTime() - parseStartTime_);\n                    currentRequest_.setBody(bodyBuffers_);\n\n                    if (currentRequest_.getHeader(\"Content-Type\") == null)\n                    {\n                        currentRequest_.addHeader(\"Content-Type\", defaultContentType_);\n                    }\n\n                    handleRequest(currentRequest_);\n                }\n                else if (currentMsgType_ == HttpMessageType.RESPONSE)\n                {\n                    logger_.info(\"Holy shit! We are not supposed to be here - ever !!!\");\n                }\n                else\n                {\n                    logger_.error(\"Http message type is still\" +\n                            \" unset after we finish parsing the body?\");\n                }\n\n                resetParserState();\n            }\n        }\n\n    }\n    catch (final Throwable e)\n    {\n        logger_.warn(LogUtil.throwableToString(e));\n        //close();\n    }\n    finally\n    {\n        SelectorManager.getSelectorManager().modifyKeyForRead(httpKey_);\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\net\\http\\HttpConnection.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * For JAXB purposes.\n*/\n", "func_signal": "public TokenMetadata()", "code": "{\n    tokenToEndPointMap_ = new TreeMap<BigInteger, EndPoint>();\n    endPointToTokenMap_ = new HashMap<EndPoint, BigInteger>();\n}", "path": "src\\com\\facebook\\infrastructure\\service\\TokenMetadata.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * The following methods are used for compact representation\n * of BloomFilter. This is essential, since we want to determine\n * the size of the serialized Bloom Filter blob before it is\n * populated armed with the knowledge of how many elements are\n * going to reside in it.\n */\n", "func_signal": "public void serialize(BloomFilter.CountingBloomFilter cbf, DataOutput dos)\n        throws IOException", "code": "{\n    /* write the size of the BloomFilter */\n    dos.writeInt(cbf.size());\n    /* write the number of hash functions used */\n    dos.writeInt(cbf.hashes());\n\n    byte[] filter = cbf.filter();\n    /* write length of the filter */\n    dos.writeInt(filter.length);\n    dos.write(filter);\n}", "path": "src\\com\\facebook\\infrastructure\\utils\\BloomFilter.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/**\n * This test exposed a bug that the previous test didn't\n */\n", "func_signal": "public void testMore()", "code": "{\n    Random pr = new PureRandom();\n    int ubs[] = new int[] { 2, 3, 1};\n\n    for (int ub : ubs)\n    {\n        System.out.println(\"UB: \" + String.valueOf(ub));\n        for (int j = 0; j < 10; j++)\n        {\n            int junk = pr.nextInt(ub);\n            // Do something with junk so JVM doesn't optimize away\n            assertTrue(junk >= 0 && junk < ub);\n        }\n    }\n}", "path": "testsrc\\com\\facebook\\infrastructure\\gms\\TestPureRandom.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "// HttpHeaderParser.Callback interface implementation\n", "func_signal": "public void onHeader(String name, String value)", "code": "{\n    if (currentMsgType_ == HttpMessageType.REQUEST)\n    {\n            currentRequest_.addHeader(name, value);\n    }\n    else if (currentMsgType_ == HttpMessageType.RESPONSE)\n    {\n            currentResponse_.addHeader(name, value);\n    }\n    else\n    {\n        logger_.warn(\"Unknown message type -- HttpConnection::onHeader()\");\n    }\n\n    logger_.debug(name + \" : \" + value);\n}", "path": "src\\com\\facebook\\infrastructure\\net\\http\\HttpConnection.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * Read buffers from the input stream into the byte buffer.\n */\n", "func_signal": "public void run()", "code": "{\n    ByteBuffer readBuffer = ByteBuffer.allocate(HTTPReader.bufferSize_);\n    try\n    {\n        int bytesRead = httpChannel_.read(readBuffer);\n        readBuffer.flip();\n        if ( readBuffer.remaining() > 0 )\n            HttpConnection.this.parse(readBuffer);\n    }\n    catch ( IOException ex )\n    {\n        logger_.warn(LogUtil.throwableToString(ex));\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\net\\http\\HttpConnection.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n *  Read called on the Selector thread. This is called\n *  when there is some HTTP request that needs to be\n *  processed.\n*/\n", "func_signal": "public void read(SelectionKey key)", "code": "{\n    if ( httpKey_ == null )\n    {\n        httpKey_ = key;\n        httpChannel_ = (SocketChannel)key.channel();\n    }\n    /* deregister interest for read */\n    key.interestOps( key.interestOps() & ( ~SelectionKey.OP_READ ) );\n    /* Add a task to process the HTTP request */\n    MessagingService.getReadExecutor().execute(httpReader_);\n}", "path": "src\\com\\facebook\\infrastructure\\net\\http\\HttpConnection.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/**\n * Remove the entries in the two maps.\n * @param endpoint\n */\n", "func_signal": "public TokenMetadata remove(EndPoint endpoint)", "code": "{\n    TreeMap<BigInteger, EndPoint> newTTEP =\n        new TreeMap<BigInteger, EndPoint>(tokenToEndPointMap_);\n    Map<EndPoint, BigInteger> newEPTT =\n        new HashMap<EndPoint, BigInteger>(endPointToTokenMap_);\n\n    BigInteger oldToken = endPointToTokenMap_.get(endpoint);\n    if ( oldToken != null )\n        newTTEP.remove(oldToken);\n    newEPTT.remove(endpoint);\n\n    return new TokenMetadata(newTTEP, newEPTT);\n}", "path": "src\\com\\facebook\\infrastructure\\service\\TokenMetadata.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "// HttpStartLineParser.Callback interface implementation\n", "func_signal": "public void onStartLine(String method, String path, String query, String version)", "code": "{\n    logger_.debug(\"Startline method=\" + method + \" path=\" + path + \" query=\" + query + \" version=\" + version);\n\n    if (method.startsWith(\"HTTP\"))\n    {\n            // response\n            currentMsgType_ = HttpMessageType.RESPONSE;\n            currentResponse_ = new HttpResponse();\n            currentResponse_.setStartLine(method, path, version);\n    }\n    else\n    {\n            // request\n            currentMsgType_ = HttpMessageType.REQUEST;\n            currentRequest_ = new HttpRequest();\n            currentRequest_.setStartLine(method, path, query, version);\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\net\\http\\HttpConnection.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/**\n * This method is part of IFailureDetectionEventListener interface. This is invoked\n * by the Failure Detector when it suspects an end point may have failed.\n * \n * param @ endpoint end point that is suspected.\n*/\n", "func_signal": "public void suspect(EndPoint endpoint)", "code": "{\n    EndPointState epState = endPointStateMap_.get(endpoint);\n    if ( epState.isAlive() )\n    {\n        logger_.info(\"EndPoint \" + endpoint + \" is now dead.\");\n        isAlive(endpoint, epState, false);\n        \n        /* Notify an endpoint is dead to interested parties. */\n        EndPointState deltaState = new EndPointState(epState.getHeartBeatState());\n        doNotifications(endpoint, deltaState);\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\gms\\Gossiper.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * First construct a map whose key is the endpoint in the GossipDigest and the value is the\n * GossipDigest itself. Then build a list of version differences i.e difference between the\n * version in the GossipDigest and the version in the local state for a given EndPoint.\n * Sort this list. Now loop through the sorted list and retrieve the GossipDigest corresponding\n * to the endpoint from the map that was initially constructed.\n*/\n", "func_signal": "private void doSort(List<GossipDigest> gDigestList)", "code": "{\n    /* Construct a map of endpoint to GossipDigest. */\n    Map<EndPoint, GossipDigest> epToDigestMap = new HashMap<EndPoint, GossipDigest>();\n    for ( GossipDigest gDigest : gDigestList )\n    {\n        epToDigestMap.put(gDigest.getEndPoint(), gDigest);\n    }\n\n    /*\n     * These digests have their maxVersion set to the difference of the version\n     * of the local EndPointState and the version found in the GossipDigest.\n    */\n    List<GossipDigest> diffDigests = new ArrayList<GossipDigest>();\n    for ( GossipDigest gDigest : gDigestList )\n    {\n        EndPoint ep = gDigest.getEndPoint();\n        EndPointState epState = Gossiper.instance().getEndPointStateForEndPoint(ep);\n        int version = (epState != null) ? Gossiper.instance().getMaxEndPointStateVersion( epState ) : 0;\n        int diffVersion = Math.abs(version - gDigest.getMaxVersion() );\n        diffDigests.add( new GossipDigest(ep, gDigest.getGeneration(), diffVersion) );\n    }\n\n    gDigestList.clear();\n    Collections.sort(diffDigests);\n    int size = diffDigests.size();\n    /*\n     * Report the digests in descending order. This takes care of the endpoints\n     * that are far behind w.r.t this local endpoint\n    */\n    for ( int i = size - 1; i >= 0; --i )\n    {\n        gDigestList.add( epToDigestMap.get(diffDigests.get(i).getEndPoint()) );\n    }\n}", "path": "src\\com\\facebook\\infrastructure\\gms\\Gossiper.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/**\n * This method is used to forcibly remove a node from the membership\n * set. He is forgotten locally immediately.\n * \n * param@ ep the endpoint to be removed from membership.\n */\n", "func_signal": "public synchronized void removeFromMembership(EndPoint ep)", "code": "{\n    endPointStateMap_.remove(ep);\n    liveEndpoints_.remove(ep);\n    unreachableEndpoints_ .remove(ep);\n}", "path": "src\\com\\facebook\\infrastructure\\gms\\Gossiper.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * This method for resolving read data should look at the timestamps of each\n * of the columns that are read and should pick up columns with the latest\n * timestamp. For those columns where the timestamp is not the latest a\n * repair request should be scheduled.\n * \n */\n", "func_signal": "public Row resolve(List<Message> responses) throws DigestMismatchException", "code": "{\n        long startTime = System.currentTimeMillis();\n\tRow retRow = null;\n\tList<Row> rowList = new ArrayList<Row>();\n\tList<EndPoint> endPoints = new ArrayList<EndPoint>();\n\tString key = null;\n\tString table = null;\n\tbyte[] digest = new byte[0];\n\tboolean isDigestQuery = false;\n        \n        /*\n\t * Populate the list of rows from each of the messages.\n\t * Check to see if there is a digest query. If a digest \n         * query exists then we need to compare the digest with \n         * the digest of the data that is received.\n        */\n        DataInputBuffer bufIn = new DataInputBuffer();\n\tfor (Message response : responses)\n\t{\t\t\t\t\t            \n            byte[] body = (byte[])response.getMessageBody()[0];            \n            bufIn.reset(body, body.length);\n            try\n            {\n                long start = System.currentTimeMillis();\n                ReadResponseMessage result = ReadResponseMessage.serializer().deserialize(bufIn);            \n                logger_.debug( \"Response deserialization time : \" + (System.currentTimeMillis() - start) + \" ms.\");\n    \t\t\tif(!result.isDigestQuery())\n    \t\t\t{\n    \t\t\t\trowList.add(result.row());\n    \t\t\t\tendPoints.add(response.getFrom());\n    \t\t\t\tkey = result.row().key();\n    \t\t\t\ttable = result.table();\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\tdigest = result.digest();\n    \t\t\t\tisDigestQuery = true;\n    \t\t\t}\n            }\n            catch( IOException ex )\n            {\n                logger_.info(LogUtil.throwableToString(ex));\n            }\n\t}\n\t// If there was a digest query compare it withh all the data digests \n\t// If there is a mismatch then throw an exception so that read repair can happen.\n\tif(isDigestQuery)\n\t{\n\t\tfor(Row row: rowList)\n\t\t{\n\t\t\tif( !Arrays.equals(row.digest(), digest) )\n\t\t\t{\n\t\t\t\tthrow new DigestMismatchException(\"The Digest does not match\");\n\t\t\t}\n\t\t}\n\t}\n\t\n        /* If the rowList is empty then we had some exception above. */\n        if ( rowList.isEmpty() )\n        {\n            return retRow;\n        }\n        \n        /* Now calculate the resolved row */\n\tretRow = new Row(key);\t\t\n\tfor (Row row : rowList)\n\t{\n\t\tretRow.repair(row);\n\t}\n        // At this point we have the return row.\n\t// Now we need to calculate the differnce \n\t// so that we can schedule read repairs \n\t\n\tfor (int i = 0 ; i < rowList.size(); i++)\n\t{\n\t\t// calculate the difference , since retRow is the resolved\n\t\t// row it can be used as the super set , remember no deletes \n\t\t// will happen with diff its only for additions so far \n\t\t// TODO : handle deletes \n\t\tRow diffRow = rowList.get(i).diff(retRow);\n\t\tif(diffRow == null) // no repair needs to happen\n\t\t\tcontinue;\n\t\t// create the row mutation message based on the diff and schedule a read repair \n\t\tRowMutation rowMutation = new RowMutation(table, key);            \t\t\t\n    \tMap<String, ColumnFamily> columnFamilies = diffRow.getColumnFamilies();\n\n            for ( Map.Entry<String, ColumnFamily> entry : columnFamilies.entrySet() )\n            {\n                rowMutation.add(entry.getKey(), entry.getValue());\n            }\n            RowMutationMessage rowMutationMessage = new RowMutationMessage(rowMutation);\n        // schedule the read repair\n        ReadRepairManager.instance().schedule(endPoints.get(i),rowMutationMessage);\n\t}\n        logger_.info(\"resolve: \" + (System.currentTimeMillis() - startTime)\n                + \" ms.\");\n\treturn retRow;\n}", "path": "src\\com\\facebook\\infrastructure\\service\\ReadResponseResolver.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/**\n * Given the number of keys that need to be transferred say, 1000\n * and given the smallest key stored we need the hash of the 1000th\n * key greater than the smallest key in the sorted order in the primary\n * range.\n * \n * @param keyCount number of keys after which token is required.\n * @return token.\n*/\n", "func_signal": "public static BigInteger getTokenBasedOnPrimaryCount(int keyCount)", "code": "{\n    List<String> indexedPrimaryKeys = getIndexedPrimaryKeys();\n    int index = keyCount / SSTable.indexInterval();\n    String key = (index >= indexedPrimaryKeys.size()) ? indexedPrimaryKeys.get( indexedPrimaryKeys.size() - 1 ) : indexedPrimaryKeys.get(index);\n    logger_.debug(\"Hashing key \" + key + \" ...\");\n    return StorageService.instance().hash(key);\n}", "path": "src\\com\\facebook\\infrastructure\\service\\BootstrapAndLbHelper.java", "repo_name": "toddlipcon/cassandra", "stars": 11, "license": "apache-2.0", "language": "java", "size": 9676}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#drawText(java.lang.String, int, int, int, int, java.lang.String)\n */\n", "func_signal": "public void drawText(String str, int x, int y, int maxWidth, int anchor, String suffix)", "code": "{\n\t\n\t//TODO: Check this implementation when a test client is up and running. \n\t\n\tif ((anchor & ANCHOR_RIGHT) == ANCHOR_RIGHT ) {\n        x -= m_Graphics.getFont().getAdvance( str );\n    } else if ((anchor & ANCHOR_HCENTER) == ANCHOR_HCENTER ) {\n        x -= m_Graphics.getFont().getAdvance( str ) / 2;\n    }\n    \n    if((anchor & ANCHOR_BOTTOM) == ANCHOR_BOTTOM) {\n        y -= m_Graphics.getFont().getHeight();\n    } else if ((anchor & ANCHOR_BASELINE) == ANCHOR_BASELINE) {\n        y -= m_Graphics.getFont().getBaseline();\n    }\n    \n    final int strWidth = m_Graphics.getFont().getAdvance(str);\n    if(strWidth > maxWidth) {\n    \tif(suffix != null) {\n    \t\tmaxWidth -= m_Graphics.getFont().getAdvance(suffix);\n    \t\tif(maxWidth <= 0)\n    \t\t\tthrow new IllegalArgumentException(\"maxWidth are less then the size of the suffix!\");\n    \t\t\n    \t\tint index = m_Graphics.drawText(str, x, y, DrawStyle.TOP | DrawStyle.LEFT, maxWidth);\n    \t\tint sw = m_Graphics.getFont().getAdvance(str.substring(0, index));\n    \t\tm_Graphics.drawText(suffix, x+sw, y, DrawStyle.TOP | DrawStyle.LEFT, maxWidth);        \t\t        \t\t\n    \t} else {\n    \t\tm_Graphics.drawText(str, x, y, DrawStyle.TOP | DrawStyle.LEFT, maxWidth);\n    \t}        \t\n    } else {\n    \tm_Graphics.drawText(str, x, y, DrawStyle.TOP | DrawStyle.LEFT, maxWidth);\n    }        \n\t}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#fillPolygon(int[], int[])\n */\n", "func_signal": "public void fillPolygon(int[] x, int[] y, int length)", "code": "{\n\tint[] xPts = new int[length];\n\tint[] yPts = new int[length];\n\tfor (int i = 0; i < length; i++) {\n\t\txPts[i] = x[i];\n\t\tyPts[i] = y[i];\n\t}\n    m_Graphics.drawFilledPath(xPts, yPts, null, null );\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#drawText(java.lang.String, int, int, int, int)\n */\n", "func_signal": "public void drawText(String str, int x, int y, int maxWidth, int anchor)", "code": "{\n    if (( anchor & ANCHOR_RIGHT ) == ANCHOR_RIGHT ) {\n        x -= m_Graphics.getFont().getAdvance( str );\n    } else if (( anchor & ANCHOR_HCENTER ) == ANCHOR_HCENTER ) {\n        x -= m_Graphics.getFont().getAdvance( str ) / 2;\n    }\n    \n    if(( anchor & ANCHOR_BOTTOM) == ANCHOR_BOTTOM) {\n        y -= m_Graphics.getFont().getHeight();\n    } else if (( anchor & ANCHOR_BASELINE) == ANCHOR_BASELINE) {\n        y -= m_Graphics.getFont().getBaseline();\n    }\n    \n    m_Graphics.drawText(str, x, y, DrawStyle.TOP | DrawStyle.LEFT, maxWidth);\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.network.http.HttpEntity#getContent()\n */\n", "func_signal": "public InputStream getContent() throws IllegalStateException, IOException", "code": "{\n\tif (m_inStream != null) {\n            throw new IllegalStateException(\"InputStream has already been opened\");\n        }\n        return (m_inStream = m_conn.openInputStream());\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\http\\BlackBerryHttpResponse.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#fillTriangle(int, int, int, int, int, int)\n */\n", "func_signal": "public void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3)", "code": "{\n    xPositions[0] = x1;\n    xPositions[1] = x2;\n    xPositions[2] = x3;\n    yPositions[0] = y1;\n    yPositions[1] = y2;\n    yPositions[2] = y3;\n    \n    m_Graphics.drawFilledPath(xPositions, yPositions, null, null );\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphicsFactory#createWFImage(byte[], int, int)\n */\n", "func_signal": "public WFImage createWFImage(byte[] buf, int offset, int length)", "code": "{\n        EncodedImage encodedImage = EncodedImage.createEncodedImage(buf,offset,length );\n        encodedImage.setDecodeMode(EncodedImage.DECODE_ALPHA);\n        return new BlackBerryImage(encodedImage.getBitmap());\n    }", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphicsFactory.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.network.info.TGPPInfo#supportsCurrentMNC()\n */\n", "func_signal": "public boolean supportsCurrentMNC()", "code": "{\n    if (canExtractNetInfo()) {\n        if (RadioInfo.getCurrentNetworkIndex() < 0) {\n        \treturn false;\n        }\n        if (RadioInfo.getCurrentNetworkIndex() \n                >= RadioInfo.getNumberOfNetworks()) {\n        \treturn false;\n        }\n        return true;\n    }\n    return false;\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\info\\BlackBerry3GPPInfo.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#allowAntialias(boolean)\n */\n", "func_signal": "public void allowAntialias(boolean allow)", "code": "{\n    m_Graphics.setDrawingStyle(Graphics.DRAWSTYLE_AALINES, allow);\n    m_Graphics.setDrawingStyle(Graphics.DRAWSTYLE_AAPOLYGONS, allow);\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphicsFactory#getWFFont(int, int)\n */\n", "func_signal": "public WFFont getWFFont(int size, int style) throws IllegalArgumentException", "code": "{\t\t\n\tint pxSize = convertToPixelSize(size);\n        if(Display.getHorizontalResolution() >= 8547) {\n            pxSize += 10;\n        }\n        int rimStyle;\n        if(size == WFFont.SIZE_VERY_LARGE) {\n            rimStyle = Font.EXTRA_BOLD;\n        } else {\n            rimStyle = convertToRIMStyle(style);\n        }\n        \n        Font f = m_FontFamily.getFont(rimStyle, pxSize, Ui.UNITS_px);\n        f = f.derive(rimStyle, pxSize, Ui.UNITS_px, Font.ANTIALIAS_STANDARD, 0);\n        return new BlackBerryFont(f);\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphicsFactory.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.network.http.HttpEntity#isChunked()\n */\n", "func_signal": "public boolean isChunked()", "code": "{\n\ttry {\n\t\treturn \"chunked\".equalsIgnoreCase(m_conn.getHeaderField(\"Transfer-Encoding\"));\n\t} catch (IOException e) {\n\t\treturn false;\n\t}\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\http\\BlackBerryHttpResponse.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.network.http.StatusLine#getReasonPhrase()\n */\n", "func_signal": "public String getReasonPhrase()", "code": "{\n\ttry {\n            return m_conn.getResponseMessage();\n        } catch (IOException e) {\n            return null;\n        }\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\http\\BlackBerryHttpResponse.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "//-------------------------------------------------------------------------\n// Help methods\n", "func_signal": "private static boolean is3GPPNetwork()", "code": "{\n    switch(RadioInfo.getNetworkType()) {\n    case RadioInfo.NETWORK_GPRS:\n    case RadioInfo.NETWORK_UMTS:\n        return true;\n    }\n    return false;\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\info\\BlackBerry3GPPInfo.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.network.http.HttpEntity#finish()\n */\n", "func_signal": "public void finish() throws IOException", "code": "{\n\tif (m_inStream != null) {\n            m_inStream.close();\n        }\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\http\\BlackBerryHttpResponse.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#drawImage(com.wayfinder.pal.graphics.WFImage, int, int, int)\n */\n", "func_signal": "public void drawImage(WFImage img, int x, int y, int anchor)", "code": "{  \n    int width = img.getWidth();\n    if ((anchor & ANCHOR_RIGHT) == ANCHOR_RIGHT ) {\n        x -= width;\n    } else if ((anchor & ANCHOR_HCENTER) == ANCHOR_HCENTER ) {\n        x -= width / 2;\n    }\n    int height = img.getHeight();\n    if ((anchor & ANCHOR_BOTTOM) == ANCHOR_BOTTOM ) {\n        y -= height;\n    } else if ((anchor & ANCHOR_VCENTER) == ANCHOR_VCENTER ) {\n        y -= height / 2;\n    }\n    m_Graphics.drawBitmap(x, y, width, height, (Bitmap) img.getNativeImage(), 0, 0);\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.network.info.TGPPInfo#supportsCurrentMCC()\n */\n", "func_signal": "public boolean supportsCurrentMCC()", "code": "{\n    if (canExtractNetInfo()) {\n        //XXX: Sometimes RadioInfo.getCurrentNetworkIndex() returns some invalid\n        //value causing an IllegalArgumetException to be thrown when trying to\n        //get the MCC (and probably the MNC too, but MCC is requested first and \n        //it fails at that point). Check if we get a reasonable network index\n        //first.\n        if (RadioInfo.getCurrentNetworkIndex() < 0) return false;\n\n        //not sure about this check though, RadioInfo.getNumberOfNetworks() could\n        //have the same problems as RadioInfo.getCurrentNetworkIndex()\n        if (RadioInfo.getCurrentNetworkIndex() \n                >= RadioInfo.getNumberOfNetworks()) return false;\n        \n        return true;\n    }\n    return false;\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\info\\BlackBerry3GPPInfo.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphicsFactory#createWFImage(java.lang.String)\n */\n", "func_signal": "public WFImage createWFImage(String resourceName)", "code": "{\n    Bitmap b = Bitmap.getBitmapResource(\n            ApplicationDescriptor.currentApplicationDescriptor().getModuleName(),\n            resourceName);\n    if(b != null) {\n        return new BlackBerryImage(b);\n    }\n    return null;\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphicsFactory.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#drawPath(int[], int[], int, int)\n */\n", "func_signal": "public void drawPath(int[] xCoords, int[] yCoords, int nbrCoords, int width)", "code": "{\n\tint[] xPts = new int[nbrCoords];\n\tint[] yPts = new int[nbrCoords];\n\tfor (int i=0; i<nbrCoords; i++) {\n\t\txPts[i] = xCoords[i];\n\t\tyPts[i] = yCoords[i];\n\t}\n    m_Graphics.setStrokeWidth(width);\n    m_Graphics.drawPathOutline(xPts, yPts, null, null, false);\n    m_Graphics.setStrokeWidth(1);\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphicsFactory#createWFImage(int[], int, int, boolean)\n */\n", "func_signal": "public WFImage createWFImage(int[] rgb, int width, int height, boolean processAlpha)", "code": "{\n\t\tBitmap b = new Bitmap(width, height);\n    if(processAlpha) {\n        b.createAlpha(Bitmap.ALPHA_BITDEPTH_8BPP);\n    }\n    b.setARGB(rgb, 0, width, 0, 0, width, height);\n    return new BlackBerryImage(b);\n\t}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphicsFactory.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.wayfinder.pal.graphics.WFGraphics#drawRGB(int[], int, int, int, int, int, int, boolean)\n */\n", "func_signal": "public void drawRGB(int[] argbData, int offset, int scanlength, int x, int y, \n\t\tint width, int height, boolean processAlpha)", "code": "{\n\n    if(processAlpha) {\n        m_Graphics.drawARGB(argbData, offset, scanlength, x, y, width, height);\n    } else {\n        m_Graphics.drawRGB(argbData, offset, scanlength, x, y, width, height);\n    }\n\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\graphics\\BlackBerryGraphics.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/* (non-Javadoc)\n * @see com.wayfinder.pal.network.http.HttpMessage#containsHeader(java.lang.String)\n */\n", "func_signal": "public boolean containsHeader(String name)", "code": "{\n\ttry {\n\t\treturn m_conn.getHeaderField(name) != null;\n\t} catch (IOException e) {\n\t\treturn false;\n\t}\n}", "path": "src\\com\\wayfinder\\pal\\blackberry\\network\\http\\BlackBerryHttpResponse.java", "repo_name": "wayfinder/Wayfinder-JavaCore-PAL-BlackBerry", "stars": 12, "license": "None", "language": "java", "size": 231}
{"docstring": "/**\n * Tests that the constructor does not allow null providerImageName. \n */\n", "func_signal": "public final void testNullCtorParam7()", "code": "{\n    try {\n        OneListSearchMatchImpl o =\n            new OneListSearchMatchImpl(\n                    BasicSearchMatchImplTest.MATCH_ID,\n                    BasicSearchMatchImplTest.MATCH_LOCATION,\n                    BasicSearchMatchImplTest.MATCH_NAME,\n                    BasicSearchMatchImplTest.MATCH_POSITION,\n                    OneListSearchMatchImplTest.BRAND_IMAGE_NAME,\n                    OneListSearchMatchImplTest.CATEGORY_IMAGE_NAME,\n                    null);\n            fail(\"OneListSearchMatchImpl ctor must not allow null providerImageName\");\n                                        \n    } catch (IllegalArgumentException e) {\n    }\n}", "path": "search\\test\\com\\wayfinder\\core\\search\\internal\\OneListSearchMatchImpNullCtorlTest.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Remove a entry from the node. The entry will be compared using equals.  \n * \n * @param entry the entry to be removed\n * @return true if the object was found and removed \n */\n", "func_signal": "public synchronized boolean removeEntry(QuadTreeEntry entry)", "code": "{        \n    QuadTreeNode node = getNode(entry.getLatitude(),entry.getLongitude());\n    if(node != null) {\n        return node.removeEntry(entry);\n    }\n    return false;\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/*\n * NOTE: When adding a new language, review\n * LanguageInternal.getDefaultMeasurementSystem() to make sure that it does\n * the correct thing for your new language.\n */\n", "func_signal": "public static LanguageInternal createLanguageFor(int id)", "code": "{\n    switch(id) {\n    case Language.DA:\n        return new LanguageInternal(id, \n                \"DA\",\n                \"DA\",\n                \"danish\", \n                \"Dansk\", \n                LangTypes.DANISH,\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.DE:\n        return new LanguageInternal(id, \n                \"DE\",\n                \"DE\",\n                \"german\", \n                \"Deutsch\", \n                LangTypes.GERMAN,\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.EL:\n        return new LanguageInternal(\n                id, \n                \"EL\",\n                \"EL\",\n                \"greek\",\n                \"\\u0395\\u03BB\\u03BB\\u03B7\\u03BD\\u03B9\\u03BA\\u03AC\",\n                  LangTypes.GREEK,\n                  GeneralSettings.UNITS_METRIC);\n        \n    case Language.EN_UK:\n        return new LanguageInternal(\n                id, \n                \"EN\",\n                \"EN\",\n                \"english\",\n                \"English (UK)\",\n                LangTypes.ENGLISH,\n                GeneralSettings.UNITS_IMPERIAL_UK);\n        \n    case Language.EN_IE:\n        return new LanguageInternal(\n                id, \n                \"EN\",\n                \"IE\",\n                \"english\",\n                \"English (Ireland)\",\n                LangTypes.ENGLISH,\n                // republic of ireland officially switched to metric 1970s - 2005\n                // funny enough, a beer is still \"a pint\" :)\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.ES:\n        return new LanguageInternal(id, \n                \"ES\",\n                \"ES\",\n                \"spanish\", \n                \"Espa\\u00F1ol\", \n                LangTypes.SPANISH,\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.FR:\n        return new LanguageInternal(id, \n                \"FR\",\n                \"FR\",\n                \"french\", \n                \"Fran\\u00E7ais\", \n                LangTypes.FRENCH,\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.IT:\n        return new LanguageInternal(id, \n                \"IT\",\n                \"IT\",\n                \"italian\", \n                \"Italiano\", \n                LangTypes.ITALIAN,\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.NL:\n        return new LanguageInternal(id, \n                \"NL\",\n                \"NL\",\n                \"dutch\", \n                \"Nederlands\", \n                LangTypes.DUTCH,\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.PT:\n        return new LanguageInternal(id, \n                \"PT\",\n                \"PT\",\n                \"portuguese\", \n                \"Portugu\\u00EAs\",\n                LangTypes.PORTUGUESE,\n                GeneralSettings.UNITS_METRIC);\n        \n    case Language.TR:\n        return new LanguageInternal(id, \n                \"TR\",\n                \"TR\",\n                \"turkish\", \n                \"T\\u00FCrk\", \n                LangTypes.TURKISH,\n                GeneralSettings.UNITS_METRIC);\n    }\n    throw new IllegalArgumentException(\"Unknown language code\");\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\internal\\settings\\language\\LanguageFactory.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Add a entry to the QuadTree. \n * \n * @param aEntry the entry to be added into a node. \n * @return true if the node has been split into sub-nodes, \n *         false if the entry has been added into a existing node. \n */\n", "func_signal": "public synchronized boolean addEntry(QuadTreeEntry aEntry, QTFileInterface fileLoader)", "code": "{\n    /*\n    +--------+--------+\n    | Q0     | Q1     | Quarter number in binary form: 00ab\n    | 0000   | 0001   | a=1 for bottom quarters and a=0 for upper ones\n    |        |        | b=1 for right quarters and a=0 for left ones\n    +--------+--------+\n    | Q2     | Q3     |\n    | 0010   | 0011   |\n    |        |        |\n    +--------+--------+\n    */\n    int quarterNbr = 0;        \n    if(aEntry.getLongitude() > iQT_bb.getCenterLon())\n        quarterNbr |= 1;\n    if(aEntry.getLatitude() < iQT_bb.getCenterLat())\n        quarterNbr |= 2;\n    \n    /* Create new child node if necessary */\n    if(iQTQuater[quarterNbr] == null) {\n        createQTQuater(quarterNbr);                    \n    }\n    \n    return iQTQuater[quarterNbr].internalAddEntry(aEntry, fileLoader);        \n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Tests that the constructor does not allow null matchName. \n */\n", "func_signal": "public final void testNullCtorParam3()", "code": "{\n    try {\n        OneListSearchMatchImpl o =\n            new OneListSearchMatchImpl(\n                    BasicSearchMatchImplTest.MATCH_ID,\n                    BasicSearchMatchImplTest.MATCH_LOCATION,\n                    null,\n                    BasicSearchMatchImplTest.MATCH_POSITION,\n                    OneListSearchMatchImplTest.BRAND_IMAGE_NAME,\n                    OneListSearchMatchImplTest.CATEGORY_IMAGE_NAME,\n                    OneListSearchMatchImplTest.PROVIDER_IMAGE_NAME);\n            fail(\"OneListSearchMatchImpl ctor must not allow null matchName\");\n                                        \n    } catch (IllegalArgumentException e) {\n    }\n}", "path": "search\\test\\com\\wayfinder\\core\\search\\internal\\OneListSearchMatchImpNullCtorlTest.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Tests that the constructor does not allow null position. \n */\n", "func_signal": "public final void testNullCtorParam4()", "code": "{\n    try {\n        OneListSearchMatchImpl o =\n            new OneListSearchMatchImpl(\n                    BasicSearchMatchImplTest.MATCH_ID,\n                    BasicSearchMatchImplTest.MATCH_LOCATION,\n                    BasicSearchMatchImplTest.MATCH_NAME,\n                    null,\n                    OneListSearchMatchImplTest.BRAND_IMAGE_NAME,\n                    OneListSearchMatchImplTest.CATEGORY_IMAGE_NAME,\n                    OneListSearchMatchImplTest.PROVIDER_IMAGE_NAME);\n            fail(\"OneListSearchMatchImpl ctor must not allow null position\");\n                                        \n    } catch (IllegalArgumentException e) {\n    }\n}", "path": "search\\test\\com\\wayfinder\\core\\search\\internal\\OneListSearchMatchImpNullCtorlTest.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Removes all of the elements from this list.\n */\n", "func_signal": "public synchronized void clear()", "code": "{\n    iQTQuater = null;\n    iQTQuater = new QuadTree[4];\n    iQTQuater[0] = null;\n    iQTQuater[1] = null;\n    iQTQuater[2] = null;\n    iQTQuater[3] = null;\n    iNode = null;\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Add the list of item in a node to the vector specified by the parameter. \n * \n * Each entry in the vector will contain a vector with the added entrys for \n * one node.  \n * \n * @param v\n */\n", "func_signal": "public synchronized void getAllNodes(Vector v)", "code": "{\n    \n    iHasBeenSplit = false;\n    \n    if(iNode != null) {\n        v.addElement(iNode);\n    } else {\n        for(int i=0; i<4; i++) {\n            if(iQTQuater[i] != null) {\n                iQTQuater[i].getAllNodes(v);\n            }\n        }\n    }\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Add nodes that contains loaded data into the vector specified by the \n * parameter. \n * \n * @param v the vector where the data will be loaded into. \n */\n", "func_signal": "public synchronized void getAllNodesThatContainsLoadedEntrys(Vector v)", "code": "{ \n    iHasBeenSplit = false;\n    \n    if(iNode != null) {\n        if(iNode.getAllEntrys() != null) {                \n            v.addElement(iNode);\n        }\n    } else {\n        for(int i=0; i<4; i++) {\n            if(iQTQuater[i] != null) {\n                iQTQuater[i].getAllNodesThatContainsLoadedEntrys(v);\n            }\n        }\n    }\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/*\n * Return true if the node has one or more children. \n */\n", "func_signal": "private boolean hasChildren()", "code": "{\n    return (iQTQuater[0] != null || iQTQuater[1] != null || \n            iQTQuater[2] != null || iQTQuater[3] != null);\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * sort a {@link java.util.Vector} of {@link WFComparable}.\n *\n * @param v - the Vector to be sorted in place.\n * @see WFCollections#sort(WFComparable[])\n */\n", "func_signal": "public static void sort(java.util.Vector v)", "code": "{\n    // the copy into WFComparable[], sort and copy back would\n    // require as much code, but might be used if we do a more\n    // complex sort\n\n    int vSize = v.size();\n    for(int p=1; p < vSize; p++) {\n        WFComparable tmp = (WFComparable) v.elementAt(p);\n        // System.out.println(\"outer loop \" + p + \" \" + tmp);\n\n        int j = p;\n        for(; j > 0; j--) {\n            WFComparable e = (WFComparable) v.elementAt(j-1);\n\n            if (tmp.compareTo(e) < 0) {\n                v.setElementAt(e, j);\n            }\n            else {\n                break;\n            }\n        }\n        v.setElementAt(tmp, j);\n    }\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\internal\\WFCollections.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Thread#run()\n */\n", "func_signal": "public void run()", "code": "{\n    if(LOG.isDebug()) {\n        LOG.debug(\"WorkThread.run()\", m_threadName + \" started\");\n    }\n    \n    while(!m_shouldDie) {\n        if(LOG.isTrace()) {\n            LOG.trace(\"WorkThread.run()\", m_threadName + \" fetching next work\");\n        }\n\n        Work w = m_scheduler.getNextWork(m_threadNbr);\n        if(w != null) {\n            try {\n                if(LOG.isTrace()) {\n                    LOG.trace(\"WorkThread.run()\", \n                            m_threadName + \" executing work: \" \n                            + w.toString());\n                }\n\n                w.run();\n                \n                if(LOG.isTrace()) {\n                    LOG.trace(\"WorkThread.run()\", m_threadName + \n                            \" finished executing work: \" + w.toString());\n                }\n\n            } catch(Throwable t) {\n                if(LOG.isError()) {\n                    LOG.error(\"WorkThread.run()\", \n                            m_threadName + \" caught exception \" + \n                            t.toString() + \" from scheduled work: \" \n                            + w.toString());\n                    LOG.logException(Level.ERROR, \"WorkThread.run()\", t);\n                }\n            }\n\n            // in case the runnable changes the priority\n            Thread.currentThread().setPriority(Thread.NORM_PRIORITY);\n\n            if(w.shouldBeRescheduled()) {\n                m_scheduler.schedule(w);\n            } else {\n                m_scheduler.workCompleted(w);\n            }\n        }\n        Thread.yield();\n    }\n    m_scheduler.threadExiting(m_threadNbr);\n    if(LOG.isDebug()) {\n        LOG.debug(\"WorkThread.run()\", m_threadName + \" stopped\");\n    }\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\internal\\threadpool\\WorkThread.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * \n * Return the node for the lat/lon index specified by the parameter. \n * \n * @param aLat in MC2\n * @param aLon in MC2\n * \n * @return the node that holds the entrys with aLat/aLon\n */\n", "func_signal": "public synchronized QuadTreeNode getNode(int aLat, int aLon)", "code": "{\n    \n    if(iNode != null) {            \n        return iNode;            \n    } else {\n        \n        int quarterNbr = 0; \n        if(aLon > iQT_bb.getCenterLon())\n            quarterNbr |= 1;\n        if(aLat < iQT_bb.getCenterLat())\n            quarterNbr |= 2;\n        \n        if(iQTQuater[quarterNbr] != null) {\n            return iQTQuater[quarterNbr].getNode(aLat, aLon);\n        }            \n    }        \n    return null;\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Return a list with nodes that are inside the bounding box specified by \n * the parameter. No nodes will be removed from the tree. \n * \n * @param bb the bounding box to compare with. \n * @param v the vector where the removed node will be added to. \n */\n", "func_signal": "public synchronized void getNodesInside(BoundingBox bb, Vector v)", "code": "{\n    if (iNode != null) {\n        v.addElement(iNode);\n    } else {            \n        // For all 4 leaves of the node\n        for (int i=0; i<4; i++) {\n            // Check if the leaf exist\n            if (iQTQuater[i] != null) {\n                // Check to see if the whole or a part of the region is inside the bounding box\n                if (iQTQuater[i].getBoundingBox().overlaps(bb) || iQTQuater[i].getBoundingBox().intersectWith(bb)) {\n                    iQTQuater[i].getNodesInside(bb, v);\n                }\n            }\n        }\n    }\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Tests that the constructor does not allow null categoryImageName. \n */\n", "func_signal": "public final void testNullCtorParam6()", "code": "{\n    try {\n        OneListSearchMatchImpl o =\n            new OneListSearchMatchImpl(\n                    BasicSearchMatchImplTest.MATCH_ID,\n                    BasicSearchMatchImplTest.MATCH_LOCATION,\n                    BasicSearchMatchImplTest.MATCH_NAME,\n                    BasicSearchMatchImplTest.MATCH_POSITION,\n                    OneListSearchMatchImplTest.BRAND_IMAGE_NAME,\n                    null,\n                    OneListSearchMatchImplTest.PROVIDER_IMAGE_NAME);\n            fail(\"OneListSearchMatchImpl ctor must not allow null categoryImageName\");\n                                        \n    } catch (IllegalArgumentException e) {\n    }\n}", "path": "search\\test\\com\\wayfinder\\core\\search\\internal\\OneListSearchMatchImpNullCtorlTest.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/*\n * Internal method for adding a entry to the current node or\n * recursively subdividing the items into one of the sub nodes.   \n * \n * @param aEntry the entry to be added into a node\n * @return true if the node has been split into sub-nodes, \n *         false if the entry has been added into a existing node.  \n * \n */\n", "func_signal": "private boolean internalAddEntry(QuadTreeEntry aEntry, QTFileInterface fileLoader)", "code": "{\n    \n    if(hasChildren()) {\n        iHasBeenSplit = addEntry(aEntry, fileLoader);\n    } else {        \n        if(iNode == null) {\n            iHasBeenSplit = true;\n            iNode = new QuadTreeNode(iName,\n                                     iQT_bb.getSouthLatitude(), \n                                     iQT_bb.getWestLongitude(),\n                                     iQT_bb.getNorthLatitude(),\n                                     iQT_bb.getEastLongitude());\n        } else {\n            if(iNode.shouldDataBeLoaded() && fileLoader != null) {\n                if(LOG.isInfo()) {\n                    LOG.info(\"QuadTree.internalAddEntry()\", \"Load node from file, name: \"+iNode.getName());\n                }\n                \n                // Load the node from file and add QuadTreeEntrys into the node.  \n                fileLoader.readNodeFromFile(iNode);\n            }\n        }\n        \n        /* Add the enty to the nodes list*/            \n        iNode.addEntry(aEntry);\n        \n        /* If we have exceed the maximal number of item in the node we split \n         * up them into 4 sub-nodes. */\n        if(iNode.getSize() >= iMaxItems && iNode.getRadius() > MIN_RADIUS ) {\n            \n            iHasBeenSplit = true;\n            QuadTreeEntry qte = iNode.getAllEntrys();\n            \n            if(LOG.isTrace()) {\n                LOG.trace(\"QuadTree.internalAddEntry()\", \n                        \" iNbrOfEntrys= \"+iNode.getSize()+\n                        \" iMaxItems= \"+iMaxItems+\n                        \" iCacheRegion.size= \"+iNode.getSize()+\n                        \" name= \"+iName);\n            }\n            \n            /* Go throw all the entrys in the node and move it down\n             * one level in the tree. */\n            do {\n                QuadTreeEntry tmp = qte;\n                qte = qte.getNext();\n                tmp.setNext(null);\n                addEntry(tmp, fileLoader);                                \n            } while (qte != null);\n              \n            /* Clear and delete the node, the entrys has been split up in \n             * new leaves one level down in the tree. */\n            if(fileLoader != null)\n                fileLoader.deleteFile(iNode.getName());\n            iNode.clear();\n            iNode = null;\n            \n            if(fileLoader != null) {\n                /* Write all nodes to disc when we have split up a node into 4 sub nodes.*/ \n                for(int i=0; i < 4; i++) {\n                    if(iQTQuater[i] != null && iQTQuater[i].iNode != null) {\n                        if(iQTQuater[i].iNode.getAllEntrys() != null) {\n                            fileLoader.writeNodeToFile(iQTQuater[i].iNode);\n                            iQTQuater[i].iNode.clear();\n                        } \n                    } \n                }\n            }\n        }\n    }\n    return iHasBeenSplit;\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Tests that the constructor does not allow null brandImageName. \n */\n", "func_signal": "public final void testNullCtorParam5()", "code": "{\n    try {\n        OneListSearchMatchImpl o =\n            new OneListSearchMatchImpl(\n                    BasicSearchMatchImplTest.MATCH_ID,\n                    BasicSearchMatchImplTest.MATCH_LOCATION,\n                    BasicSearchMatchImplTest.MATCH_NAME,\n                    BasicSearchMatchImplTest.MATCH_POSITION,\n                    null,\n                    OneListSearchMatchImplTest.CATEGORY_IMAGE_NAME,\n                    OneListSearchMatchImplTest.PROVIDER_IMAGE_NAME);\n            fail(\"OneListSearchMatchImpl ctor must not allow null brandImageName\");\n                                        \n    } catch (IllegalArgumentException e) {\n    }\n}", "path": "search\\test\\com\\wayfinder\\core\\search\\internal\\OneListSearchMatchImpNullCtorlTest.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Tests that the constructor does not allow null matchID. \n */\n", "func_signal": "public final void testNullCtorParam1()", "code": "{\n    try {\n        OneListSearchMatchImpl o =\n            new OneListSearchMatchImpl(\n                    null,\n                    BasicSearchMatchImplTest.MATCH_LOCATION,\n                    BasicSearchMatchImplTest.MATCH_NAME,\n                    BasicSearchMatchImplTest.MATCH_POSITION,\n                    OneListSearchMatchImplTest.BRAND_IMAGE_NAME,\n                    OneListSearchMatchImplTest.CATEGORY_IMAGE_NAME,\n                    OneListSearchMatchImplTest.PROVIDER_IMAGE_NAME);\n            fail(\"OneListSearchMatchImpl ctor must not allow null matchID\");\n                                        \n    } catch (IllegalArgumentException e) {\n    }\n}", "path": "search\\test\\com\\wayfinder\\core\\search\\internal\\OneListSearchMatchImpNullCtorlTest.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Add a node to the QuadTree. \n * \n * @param aNode the node to be added. \n */\n", "func_signal": "public synchronized boolean addNode(QuadTreeNode aNode)", "code": "{\n\n    if(aNode.getMinLat() == iQT_bb.getSouthLatitude() && \n       aNode.getMaxLat() == iQT_bb.getNorthLatitude() &&\n       aNode.getMinLon() == iQT_bb.getWestLongitude() &&\n       aNode.getMaxLon() == iQT_bb.getEastLongitude()) {\n\n        iNode = aNode;\n\n    } else {\n        \n        int lat = (aNode.getMaxLat()/2+aNode.getMinLat()/2);         \n        int lon = (aNode.getMaxLon()/2+aNode.getMinLon()/2);\n        \n        int quarterNbr = 0;\n        if(lon > iQT_bb.getCenterLon())\n            quarterNbr |= 1;\n        if(lat < iQT_bb.getCenterLat())\n            quarterNbr |= 2;\n\n        if(iQTQuater[quarterNbr] == null) {\n            createQTQuater(quarterNbr);\n        }\n\n        iQTQuater[quarterNbr].addNode(aNode);\n    }\n    return true;\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "/**\n * Create a quad tree with the bounding box, name and max number of items \n * for a node, specified by the parameters. \n * \n * @param aMinLat\n * @param aMinLon\n * @param aMaxLat\n * @param aMaxLon\n * @param aMaxItems\n * @param aName\n */\n", "func_signal": "public QuadTree(int aMinLat, int aMinLon, int aMaxLat, int aMaxLon, int aMaxItems, String aName)", "code": "{\n    iQTQuater = new QuadTree[4];\n    iQTQuater[0] = null;\n    iQTQuater[1] = null;\n    iQTQuater[2] = null;\n    iQTQuater[3] = null;\n    \n    iQT_bb = new BoundingBox(aMaxLat, aMinLat, aMaxLon, aMinLon);\n    iMaxItems = aMaxItems;\n    iName = aName;\n}", "path": "shared\\src\\com\\wayfinder\\core\\shared\\util\\qtree\\QuadTree.java", "repo_name": "wayfinder/Wayfinder-JavaCore", "stars": 13, "license": "None", "language": "java", "size": 1146}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"VirtualHardwareSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<VirtualHardwareSectionType> createVirtualHardwareSection(\n        VirtualHardwareSectionType value)", "code": "{\n        return new JAXBElement<VirtualHardwareSectionType>(_VirtualHardwareSection_QNAME,\n            VirtualHardwareSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/**\n * Starts the virtual machine execution.\n */\n", "func_signal": "public void powerOnMachine()", "code": "{\n    try\n    {\n        // Create the domain\n        dom.create();\n    }\n    catch (LibvirtException e)\n    {\n        logger.error(\"creat exception caught:\" + e);\n    }\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"InstallSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<InstallSectionType> createInstallSection(InstallSectionType value)", "code": "{\n        return new JAXBElement<InstallSectionType>(_InstallSection_QNAME,\n            InstallSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"EulaSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<EulaSectionType> createEulaSection(EulaSectionType value)", "code": "{\n        return new JAXBElement<EulaSectionType>(_EulaSection_QNAME,\n            EulaSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/**\n * Resets the virtual machine.\n */\n", "func_signal": "public void resetMachine()", "code": "{\n    String msg = \"This method is not implemented for this hypervisor plugin\";\n    logger.error(msg);\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.abiquo.abicloud.model.AbsVirtualMachine#deleteMachine()\n */\n", "func_signal": "@Override\npublic void deleteMachine()", "code": "{\n    String msg = \"This method is not implemented for this hypervisor plugin\";\n    logger.error(msg);\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "// TODO\n/*\n * (non-Javadoc)\n * @see com.abiquo.abicloud.model.AbsVirtualMachine#setCurrentSnapshot(java.util .UUID)\n */\n", "func_signal": "public void setCurrentSnapshot(UUID id)", "code": "{\n    String msg = \"This method is not implemented for this hypervisor plugin\";\n    logger.error(msg);\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.abiquo.networking.InetManager#deleteDataCenterRang(java.lang.String)\n */\n", "func_signal": "@Override\npublic InetManagerStatus deleteDataCenterRang(Integer dataCenterId)", "code": "{\n    // check for errors\n    if (dataCenterId == null)\n    {\n        System.err.print(\"You are trying to delete the 'null' datacenter!\");\n        System.err.println(\"Check your code\");\n        return InetManagerStatus.LOGIC_ERROR;\n    }\n\n    DatacentersIPHB reqDatacenter = (DatacentersIPHB) datacentersDAO.findById(dataCenterId);\n\n    if (reqDatacenter == null)\n    {\n        System.err.println(\"Datacenter Id \" + dataCenterId + \" not found in DataBase.\");\n        return InetManagerStatus.LOGIC_ERROR;\n    }\n    else\n    {\n        try\n        {\n            datacentersDAO.makeTransient(reqDatacenter);\n            return InetManagerStatus.SUCCESS;\n        }\n        catch (HibernateException e)\n        {\n            System.err.println(\"Unexpected error trying to access to DB\");\n            return InetManagerStatus.DATABASE_ERROR;\n        }\n    }\n\n}", "path": "abicloud_server\\src\\com\\abiquo\\networking\\InetManagerMainPolicy.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "// TODO\n/*\n * (non-Javadoc)\n * @see com.abiquo.abicloud.model.AbsVirtualMachine#populateEvent()\n */\n", "func_signal": "public void populateEvent()", "code": "{\n    String msg = \"This method is not implemented for this hypervisor plugin\";\n    logger.error(msg);\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.abiquo.abicloud.model.AbsVirtualMachine#findSnapshot(java.lang.String )\n */\n", "func_signal": "public void findSnapshot(String name)", "code": "{\n    String msg = \"This method is not implemented for this hypervisor plugin\";\n    logger.error(msg);\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/**\n * Resumes the virtual machine execution.\n */\n", "func_signal": "public void resumeMachine()", "code": "{\n    String msg = \"This method is not implemented for this hypervisor plugin\";\n    logger.error(msg);\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/**\n * Deploys the machine.\n */\n", "func_signal": "protected void deployMachine()", "code": "{\n    KVMHyper.reconnect();\n    Connect conn = KVMHyper.getConnection();\n\n    try\n    {\n        // Get the domain handler\n        dom = conn.domainLookupByName(machineName);\n    }\n    catch (LibvirtException e)\n    {\n        logger.error(\"Virtual Machine lookup exception caught:\" + e);\n    }\n\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"StartupSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<StartupSectionType> createStartupSection(StartupSectionType value)", "code": "{\n        return new JAXBElement<StartupSectionType>(_StartupSection_QNAME,\n            StartupSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"DiskSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<DiskSectionType> createDiskSection(DiskSectionType value)", "code": "{\n        return new JAXBElement<DiskSectionType>(_DiskSection_QNAME,\n            DiskSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/**\n * Return a new IPNetworkRang for a given DatacenterIPHB Pojo\n */\n", "func_signal": "protected IPNetworkRang setNetworkRang(DatacentersIPHB rang)", "code": "{\n    return new IPNetworkRang(IPAddress.newIPAddress(rang.getFirstIP()), IPAddress\n        .newIPAddress(rang.getLastIP()), rang.getNumNodes());\n}", "path": "abicloud_server\\src\\com\\abiquo\\networking\\InetManagerMainPolicy.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/**\n * Instantiates a new KVM machine.\n * \n * @param config the config\n * @throws VirtualMachineException the virtual machine exception\n */\n", "func_signal": "public KVMMachine(VirtualMachineConfiguration config) throws VirtualMachineException", "code": "{\n    super(config);\n\n    if (config.isSetHypervisor() & config.getHyper() instanceof KVMHypervisor)\n    {\n        KVMHyper = (KVMHypervisor) config.getHyper();\n    }\n    else\n    {\n        throw new VirtualMachineException(\"KVMMachine requires a KVMHypervisor \"\n            + \"on VirtualMachineConfiguration, not a \"\n            + config.getHyper().getClass().getCanonicalName());\n    }\n\n    machineName = config.getMachineName();\n}", "path": "abicloud_WS\\src\\com\\abiquo\\abicloud\\machine\\impl\\KVMMachine.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"DeploymentOptionSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<DeploymentOptionSectionType> createDeploymentOptionSection(\n        DeploymentOptionSectionType value)", "code": "{\n        return new JAXBElement<DeploymentOptionSectionType>(_DeploymentOptionSection_QNAME,\n            DeploymentOptionSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "/**\n * Class constructor\n * \n * @param session We need an HibernateSession in order to don't throw exceptions in Hibernate\n *            queries\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic InetManagerMainPolicy(Session session, Integer datacenterNodes)", "code": "{\n    // TODO: leer del fichero de configuracion\n    this.datacenterNodes = datacenterNodes;\n    numberOfDatacenters = 16777216 / datacenterNodes;\n    datacentersDAO = new GenericHibernateDAO(DatacentersIPHB.class, session);\n    virtualMachineDAO = new GenericHibernateDAO(VirtualMachineIPHB.class, session);\n}", "path": "abicloud_server\\src\\com\\abiquo\\networking\\InetManagerMainPolicy.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"ProductSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<ProductSectionType> createProductSection(ProductSectionType value)", "code": "{\n        return new JAXBElement<ProductSectionType>(_ProductSection_QNAME,\n            ProductSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//schemas.dmtf.org/ovf/envelope/1\", name = \"OperatingSystemSection\", substitutionHeadNamespace = \"http://schemas.dmtf.org/ovf/envelope/1\", substitutionHeadName = \"Section\")\n", "func_signal": "public JAXBElement<OperatingSystemSectionType> createOperatingSystemSection(\n        OperatingSystemSectionType value)", "code": "{\n        return new JAXBElement<OperatingSystemSectionType>(_OperatingSystemSection_QNAME,\n            OperatingSystemSectionType.class,\n            null,\n            value);\n    }", "path": "abicloud_WS\\src\\org\\dmtf\\schemas\\ovf\\envelope\\_1\\ObjectFactory.java", "repo_name": "pnavarro/abicloud", "stars": 11, "license": "None", "language": "java", "size": 64698}
{"docstring": "//    @Override\n//    public Progress explore(Progress progress, boolean ignore) {\n//        for (OptimizedRule rule : rules) {\n//            rule.explore(progress, ignore);\n//        }\n//        Progress after = progress.getNext();\n//        after.setState(Engine.engine().getState(after, true));\n//        return after;\n//    }\n", "func_signal": "@Override\n    @Deprecated\n    public boolean findStarts(Set<String> list)", "code": "{\n        boolean more = false;\n        for (OptimizedRule rule : rules) {\n            more |= rule.findStarts(list);\n        }\n        return more;\n    }", "path": "src\\org\\neo\\parse\\RuleOr.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "/**\n * def eachIndex(array~Any, null) throws NullPointerException\n * def eachIndex(null, cl~Any) does nothing\n * def eachIndex(array~[Any], cl~Closure) invokes closure with index of each element\n * def eachIndex(array~List, cl~Closure) invokes closure with index of each element\n *\n * @param array\n * @param cl\n */\n", "func_signal": "public static void eachIndex(Object array, Closure cl)", "code": "{\n    if (cl == null) throw new NullPointerException(\"missing closure\");\n    if (array == null) return;\n    if (array.getClass().isArray()) {\n        synchronized(array) {\n            try {\n                for (int ix = 0, iz = Array.getLength(array); ix < iz; ix++) {\n                    cl.invoke(ix);\n                }\n            } catch (Notice ex) {\n            }\n        }\n    } else if (array instanceof List) {\n        eachIndex((List) array, cl);\n    } else {\n        throw new IllegalArgumentException(\"unsupported type: \" + array.getClass());\n    }\n}", "path": "src\\neo\\lang\\N.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    @Override\n//    public Progress explore(Progress progress, boolean ignore) {\n//        Progress after = child.explore(progress, ignore);\n//        after.getState().setGoto(progress.getState());\n//        return after;\n//    }\n", "func_signal": "@Override\n    public boolean findStarts(Set<String> list)", "code": "{\n        child.findStarts(list);\n        return true;\n    }", "path": "src\\org\\neo\\parse\\RuleStar.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    public Node getPrevWrapped() {\n//        if (prev == null) {\n//            return parent.last;\n//        }\n//        return prev;\n//    }\n", "func_signal": "public String getShortName()", "code": "{\n        int ix = name.indexOf('_');\n        if (ix > 0) {\n            return name.substring(0, ix);\n        }\n        return name;\n    }", "path": "src\\org\\neo\\parse\\Node.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    public RuleOr() {\n//    }\n", "func_signal": "public RuleOr(List<List<OptimizedRule>> lists)", "code": "{\n        for (List<OptimizedRule> list : lists) {\n            if (list.size() == 1) rules.add(list.get(0));\n            else rules.add(new RuleGroup(list));\n        }\n    }", "path": "src\\org\\neo\\parse\\RuleOr.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "/**\n * def each(array~Any, null) throws NullPointerException\n * def each(null, cl~Any) does nothing\n * def each(array~[Any], cl~Closure) invokes closure with each element\n * def each(array~Iterable, cl~Closure) invokes closure with each element\n *\n * @param array\n * @param cl\n */\n", "func_signal": "public static void each(Object array, Closure cl)", "code": "{\n    if (cl == null) throw new NullPointerException(\"missing closure\");\n    if (array == null) return;\n    if (array.getClass().isArray()) {\n        synchronized(array) {\n            try {\n                for (int ix = 0, iz = Array.getLength(array); ix < iz; ix++) {\n                    Object elem = Array.get(array, ix);\n                    cl.invoke(elem);\n                }\n            } catch (Notice ex) {\n            }\n        }\n    } else if (array instanceof Iterable) {\n        each((Iterable) array, cl);\n    } else {\n        throw new IllegalArgumentException(\"unsupported type: \" + array.getClass());\n    }\n}", "path": "src\\neo\\lang\\N.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    private String methodSignature(Node node) {\n//        StringBuilder buff = new StringBuilder();\n//        buff.append(node.getValue().toString());\n//        node = node.getNext();\n//        buff.append('(');\n//        String comma = \"\";\n//        while (node != null) {\n//            buff.append(comma);\n//            comma = \",\";\n//            buff.append(node.getTypeName());\n//            node = node.getNext();\n//        }\n//        buff.append(')');\n//        return buff.toString();\n//    }\n", "func_signal": "@Override\n    public void open()", "code": "{\n        addKeyword(\"def\");\n        addKeyword(\"then\");\n        addKeyword(\"do\");\n        addKeyword(\"else\");\n        addKeyword(\"end\");\n\n        addParser(\"array\", \"expression- symbol- < !start_bracket (@expression !comma?)* @expression? !end_bracket\");\n\n        addParser(\"call_dot\", \"@expression1 !operator_dot symbol !start_paren (@expression (!comma? @expression)*)? !end_paren\");\n        addParser(\"call_dot\", \"@expression1 !operator_dot symbol @expression (!comma? @expression)*\");\n\n        addParser(\"call_this\", \"symbol !start_paren (@expression (!comma? !terminator* @expression)*)? !end_paren\");\n        addParser(\"call_this\", \"symbol @expression ((!comma !terminator* | comma?) @expression)* > terminator | keyword_else | keyword_end\");\n\n        addParser(\"reference_dot\", \"@expression1 !operator_dot symbol\");\n        addParser(\"reference_array\", \"@expression1 !start_bracket @expression (!comma? @expression)* !end_bracket\");\n\n//        addParser(\"expression_symbol\", \"keyword_var- keyword_val- keyword_def- | statement_valAssign comma < symbol\");\n        addParser(\"expression0\", \"array\");\n        addParser(\"expression0\", \"symbol > operator_eq- operator_assign- start_paren- expression-\");\n        addParser(\"expression0\", \"symbol- < !start_paren @expression !end_paren\");\n        addParser(\"expression1\", \"call\");\n        addParser(\"expression1\", \"reference > operator_eq- operator_assign-\");\n        addParser(\"expression1\", \"@expression1 ^cast | @expression0\");\n        addParser(\"expression2\", \"@expression1 operator_dot- (^operator_pow @expression1)*\");\n        addParser(\"expression3\", \"@expression2 (^operator_mul @expression2)*\");\n        addParser(\"expression4\", \"@expression3 (^operator_add @expression3)*\");\n        // see Range for expression5\n        addParser(\"expression6\", \"@expression5 (^operator_compare @expression5)?\");\n        addParser(\"expression7\", \"@expression6 (^operator_other @expression6)*\");\n        addParser(\"expression\", \"(reference | symbol) ((^operator_assign | ^operator_eq) @expression)+ | @expression7\");\n\n        if (isMain) addParser(\"compilation\", \"!terminator_bof !terminator* expression (terminator_eof- !terminator)* !terminator_eof\");\n    }", "path": "src\\org\\neo\\core\\Expression.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    @SuppressWarnings(\"Unchecked\")\n", "func_signal": "private static Class<Backend> findClass(Node node, String backend) throws ClassNotFoundException", "code": "{\n        String nodeName = node.getName();\n        String nodeVar = \"\";\n        int dot = nodeName.indexOf('_');\n        if (dot > 0) {\n            nodeVar = nodeName.substring(dot + 1);\n            nodeName = nodeName.substring(0, dot);\n        }\n        String className = \"org.neo.back.\" + N.capitalize(backend) + N.capitalize(nodeName) + N.capitalize(nodeVar);\n        Class<Backend> type;\n        try {\n            type = (Class<Backend>) Engine.engine().loadClass(className);\n        } catch (ClassNotFoundException ex) {\n            className = \"org.neo.back.\" + N.capitalize(backend) + N.capitalize(nodeName);\n            type = (Class<Backend>) Engine.engine().loadClass(className);\n        }\n        return type;\n    }", "path": "src\\org\\neo\\core\\CorePlugin.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    public static <T> T[] toArray(Object obj, Class<T> type) {\n//        if (obj == null) return (T[]) Array.newInstance(type, 0);\n//        if (List.class.isAssignableFrom(type)) return toArray(obj, List<T>.class);\n//    }\n//\n//    public static <T> T[] toArray(Object val, T[] array) {\n//\n//    }\n", "func_signal": "public static boolean toboolean(Collection val)", "code": "{\n        if (val == null) return false;\n        return !val.isEmpty();\n    }", "path": "src\\neo\\lang\\N.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    public static String signature(Method method) {\n//        StringBuilder buff = new StringBuilder();\n//        buff.append(method.getName());\n//        buff.append('(');\n//        Class[] types = method.getParameterTypes();\n//        String comma = \"\";\n//        for (Class type : types) {\n//            buff.append(comma);\n//            comma = \",\";\n//            buff.append(type.getSimpleName());\n//        }\n//        buff.append(')');\n//        return buff.toString();\n//    }\n//\n//    public String signature() {\n//        StringBuilder buff = new StringBuilder(name);\n//        buff.append('(');\n//        String comma = \"\";\n//        if (argTypes != null) {\n//            for (ClassDef type : argTypes) {\n//                buff.append(comma);\n//                comma = \",\";\n//                if (type != null) buff.append(type.getName());\n//            }\n//        }\n//        buff.append(')');\n//        return buff.toString();\n//    }\n", "func_signal": "@Override\n    public String toString()", "code": "{\n        StringBuilder buff = new StringBuilder(\"def \");\n        buff.append(getName());\n        if (getReturnType() != null) {\n            buff.append('~');\n            buff.append(getReturnType().getName());\n        }\n        buff.append('(');\n        String comma = \"\";\n        if (argTypes != null) {\n            for (ClassDef type : argTypes) {\n                buff.append(comma);\n                comma = \", \";\n                if (type != null) buff.append(type.getName());\n            }\n        }\n        buff.append(')');\n        return buff.toString();\n    }", "path": "src\\org\\neo\\util\\MethodDef.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    protected void addParser(String name) {\n//        addParser(name, \"\");\n//    }\n", "func_signal": "protected void addParser(String name, String structure)", "code": "{\n        final Production production = new Production(this, name, structure);\n        productions.add(production);\n//        Engine.engine().index(production);\n    }", "path": "src\\org\\neo\\PluginBase.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    protected void renderExpression(Node node) {\n//        boolean needBoolean = !\"boolean\".equals(getConditionLeg(node).getTypeName());\n//        CodeBuilder buff = JavaCompilation.output();\n//        buff\n//        throw new UnsupportedOperationException(\"Not yet implemented\");\n//    }\n", "func_signal": "@Override\n    protected void renderTail(Node node, CodeBuilder buff)", "code": "{\n        Node mainLeg = getMainLeg(node);\n        Node elseLeg = getElseLeg(node);\n        if (elseLeg != null) {\n            buff.append(\") {\").eol().tabMore();\n            mainLeg.render(\"java\");\n            buff.tabLess().tab().append(\"}\");\n            elseLeg.render(\"java\");\n        } else {\n            super.renderTail(node, buff);\n        }\n    }", "path": "src\\org\\neo\\back\\JavaControlIf.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "/**\n * def eachWithIndex(array~Any, null) throws NullPointerException\n * def eachWithIndex(null, cl~Any) does nothing\n * def eachWithIndex(array~[Any], cl~Closure) invokes closure with each element and its index\n * def eachWithIndex(array~Iterable, cl~Closure) invokes closure with each element and its index\n *\n * @param array\n * @param cl\n */\n", "func_signal": "public static void eachWithIndex(Object array, Closure cl)", "code": "{\n    if (cl == null) throw new NullPointerException(\"missing closure\");\n    if (array == null) return;\n    if (array.getClass().isArray()) {\n        synchronized(array) {\n            try {\n                for (int ix = 0, iz = Array.getLength(array); ix < iz; ix++) {\n                    Object elem = Array.get(array, ix);\n                    cl.invoke(elem, ix);\n                }\n            } catch (Notice ex) {\n            }\n        }\n    } else if (array instanceof Iterable) {\n        eachWithIndex((Iterable) array, cl);\n    } else {\n        throw new IllegalArgumentException(\"unsupported type: \" + array.getClass());\n    }\n}", "path": "src\\neo\\lang\\N.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "/*\n * Convert:\n * ~\n *     [\n *     [\n *     symbol\n *     .\n *     symbol\n *     ]\n *     ]\n * into:\n * ~\n *     symbol\n *     .\n *     symbol\n *     [\n *     ]\n *     [\n *     ]\n */\n", "func_signal": "private void combineBrackets(Node first, Node last)", "code": "{\n    if (first.isNamed(\"start_bracket\") && last.isNamed(\"end_bracket\")) {\n        combineBrackets(first.getNext(), last.getPrev());\n        last.insertBefore(first);\n    }\n}", "path": "src\\org\\neo\\core\\Operator.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    public void transform_statement(Node node) {\n//        Compiler.compiler().importPackage(node.getValue().toString());\n////            try {\n////                Class[] classes = PackageTool.getClasses(node.getValue().toString());\n////                for (Class type : classes) {\n////                    String name = type.getName();\n////                    int dot = name.lastIndexOf('.');\n////                    if (dot > 0) name = name.substring(dot + 1);\n////                    Compiler.compiler().symbolAdd(name, type.getSimpleName());\n////                    if (\"N\".equals(name)) {\n////                        Method[] methods = type.getMethods();\n////                        for (Method method : methods) {\n////                            final int modifiers = method.getModifiers();\n////                            if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {\n////                                String signature = methodSignature(method);\n////                                Compiler.compiler().symbolAdd(signature, method.getReturnType().getSimpleName());\n////                            }\n////                        }\n////                    }\n////                }\n////            } catch (ClassNotFoundException ex) {\n////                Log.error(ex);\n////            } catch (IOException ex) {\n////                Log.error(ex);\n////            } catch (URISyntaxException ex) {\n////                Log.error(ex);\n////            }\n//    }\n", "func_signal": "public Node transform_statement_import(Node node)", "code": "{\n        String value = node.getFirst().getTypeName();\n        node.setValue(value);\n        Engine.engine().importPackage(value);\n        return node;\n    }", "path": "src\\org\\neo\\core\\Import.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    private static Method[] eachMulti;\n//    static {\n//        try {\n//            eachMulti = new Method[]{N.class.getDeclaredMethod(\"each\", Iterable.class, Closure.class)};\n//        } catch (Exception ex) {\n//            Log.error(ex);\n//        }\n//    }\n", "func_signal": "public static void each(Iterable array, Closure cl)", "code": "{\n        if (cl == null) throw new NullPointerException(\"missing closure\");\n        if (array == null) return;\n        synchronized(array) {\n            try {\n                for (Object elem : array) {\n                    cl.invoke(elem);\n                }\n            } catch (Notice ex) {\n            }\n        }\n    }", "path": "src\\neo\\lang\\N.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "/**\n * Find the matching end tag.\n * TODO Each time a new opening tag is encountered it should be recursively searched so we can match the correct end tag, in case\n * there are more than one.\n * TODO This could exceed the buffer so there needs to be a way to refill it.\n * @param buffer buffer to look in\n * @param tag tag to find\n * @return offset found or 0 if not\n */\n", "func_signal": "private int matchEnd(CharSequence buffer, String tag)", "code": "{\n    java.util.regex.Matcher matcher = xmlEnd.matcher(buffer);\n    while (matcher.find()) {\n        if (matcher.group(1).equalsIgnoreCase(tag)) {\n            return matcher.end();\n        }\n    }\n    return 0;\n}", "path": "src\\org\\neo\\core\\Xml.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    public static final String REAL_FORCED = \"number_real_forced\";\n", "func_signal": "@Override\n    public Token consume(String name, int chars, Object value, String type)", "code": "{\n        String text = Engine.chars(chars).toString();\n        if (name.equals(TRUE) || name.equals(FALSE)) {\n            value = text;\n            type = \"boolean\";\n        } else if (name.equals(NULL)) {\n        } else if (name.equals(LONG)) {\n                // Note, Java won't ignore the trailing 'l' here\n            value = new Long(text.substring(0, text.length() - 1));\n            type = \"long\";\n        } else if (name.equals(LONG + \"Binary\")) {\n            value = Long.parseLong(text.substring(2, text.length() - 1), 2);\n            type = \"long\";\n        } else if (name.equals(LONG + \"Octal\")) {\n            value = Long.parseLong(text.substring(1, text.length() - 1), 8);\n            type = \"long\";\n        } else if (name.equals(LONG + \"Hex\")) {\n            value = Long.parseLong(text.substring(2, text.length() - 1), 16);\n            type = \"long\";\n        } else if (name.equals(INTEGER)) {\n            value = new Integer(text);\n            type = \"int\";\n        } else if (name.equals(INTEGER + \"Binary\")) {\n            value = Integer.parseInt(text.substring(2, text.length()), 2);\n            type = \"long\";\n        } else if (name.equals(INTEGER + \"Octal\")) {\n            value = Integer.parseInt(text.substring(1, text.length()), 8);\n            type = \"long\";\n        } else if (name.equals(INTEGER + \"Hex\")) {\n            value = Integer.parseInt(text.substring(2, text.length()), 16);\n            type = \"long\";\n        } else {\n                // Note, Java will ignore the trailing 'f'\n            if (text.toLowerCase().endsWith(\"f\")) {\n                value = new Float(text);\n                type = \"float\";\n            } else {\n                value = new Double(text);\n                type = \"double\";\n            }\n        }\n        return super.consume(name, chars, value, type);\n    }", "path": "src\\org\\neo\\core\\Numbers.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    static Progress create(Production production, int index) {\n//        return create(production, index, null);\n//    }\n//\n//    static Progress create(Production production, int index, State state) {\n//        Progress progress = new Progress(production, index, state);\n//        Progress progress1 = Engine.engine().getProgress(progress);\n//        if (progress1 != null) return progress1;\n//        Engine.engine().index(progress);\n//        return progress;\n//    }\n", "func_signal": "@Override\n    public boolean equals(Object obj)", "code": "{\n        if (obj == null) return false;\n        if (!(obj instanceof Progress)) return false;\n        if (this.production != production) return false;\n        if (this.index != index) return false;\n        return true;\n    }", "path": "src\\org\\neo\\parse\\Progress.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "//    @Override\n//    public Progress explore(Progress progress, boolean ignore) {\n//        Progress after = child.explore(progress, ignore);\n//        after.getState().setGoto(progress.getState());  // TODO this allows loops which is not correct\n//        return after;\n//    }\n", "func_signal": "@Override\n    @Deprecated\n    public boolean findStarts(Set<String> list)", "code": "{\n        child.findStarts(list);\n        return true;\n    }", "path": "src\\org\\neo\\parse\\RuleOpt.java", "repo_name": "troyhen/neo", "stars": 12, "license": "None", "language": "java", "size": 544}
{"docstring": "/*-********************************************************************/\n", "func_signal": "public void registerOnDownloadListener(IPlaylistDownloadListener l)\n  throws RemoteException", "code": "{\n\t/* Inform this new listener of the currently active\n\t * downloads. */\n\tList<DownloadManager.Download> downloads =\n\t  mManager.getDownloadsCopy();\n\n\tfor (DownloadManager.Download dl: downloads)\n\t{\n\t\tlong songId = mManager.getSongIdFromUrl(dl.getUrl());\n\t\tl.onDownloadBegin(songId);\n\t\tl.onDownloadProgressUpdate(songId, dl.getProgress());\n\t}\n\n\tmDownloadListeners.register(l);\n}", "path": "src\\org\\devtcg\\five\\service\\PlaylistService.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Create a new HttpClient with reasonable defaults (which you can update).\n * @param userAgent to report in your HTTP requests.\n * @return FailfastHttpClient for you to use for all your requests.\n */\n", "func_signal": "public static FailfastHttpClient newInstance(String userAgent)", "code": "{\n    HttpParams params = new BasicHttpParams();\n\n    // Turn off stale checking.  Our connections break all the time anyway,\n    // and it's not worth it to pay the penalty of checking every time.\n    HttpConnectionParams.setStaleCheckingEnabled(params, false);\n\n    // Default connection and socket timeout of 10 seconds.  Tweak to taste.\n    HttpConnectionParams.setConnectionTimeout(params, CONNECT_TIMEOUT);\n    HttpConnectionParams.setSoTimeout(params, READ_TIMEOUT);\n    HttpConnectionParams.setSocketBufferSize(params, 8192);\n\n    // Don't handle redirects -- return them to the caller.  Our code\n    // often wants to re-POST after a redirect, which we must do ourselves.\n    HttpClientParams.setRedirecting(params, false);\n\n    // Set the specified user agent and register standard protocols.\n    if (userAgent != null)\n    \tHttpProtocolParams.setUserAgent(params, userAgent);\n\n    SchemeRegistry schemeRegistry = new SchemeRegistry();\n    schemeRegistry.register(new Scheme(\"http\",\n            PlainSocketFactory.getSocketFactory(), 80));\n    ClientConnectionManager manager =\n            new HackThreadSafeClientConnManager(params, schemeRegistry);\n\n    // We use a factory method to modify superclass initialization\n    // parameters without the funny call-a-static-method dance.\n    return new FailfastHttpClient(manager, params);\n}", "path": "src\\org\\devtcg\\five\\util\\streaming\\FailfastHttpClient.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Fatal error attempting to either start or bind to the service specified\n * by {@link getServiceIntent}.  Will not retry.  Default implementation is\n * to throw up an error and finish().\n */\n", "func_signal": "protected void onServiceFatal()", "code": "{\n\tLog.e(TAG, \"Unable to start service: \" + getServiceIntent());\n\n\t(new AlertDialog.Builder(this))\n\t  .setIcon(android.R.drawable.ic_dialog_alert)\n\t  .setTitle(\"Sorry!\")\n\t  .setMessage(R.string.app_error_msg)\n\t  .create().show();\n\n\tfinish();\n}", "path": "src\\org\\devtcg\\five\\util\\ServiceActivity.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/* Gets an Intent to move to the player screen with plenty of optimization\n * hints. */\n", "func_signal": "private Intent getHintedIntent(int pos, long id)", "code": "{\n\tIntent i = new Intent(SongList.this, Player.class);\n\n\tif (mExtras.showAlbumCover() == false)\n\t{\n\t\tLog.w(TAG, \"TODO: We don't pre-hint without the album queried out.\");\n\t\treturn i;\n\t}\n\n\tif (pos < 0 || id < 0)\n\t{\n\t\tLog.w(TAG, \"TODO: Hinting isn't covered in all cases where it could be.\");\n\t\treturn i;\n\t}\n\n\tCursor c = (Cursor)mAdapter.getItem(pos);\n\n\tif (mVAArtistMap != null)\n\t{\n\t\tlong artistId =\n\t\t  c.getLong(c.getColumnIndexOrThrow(Five.Music.Songs.ARTIST_ID));\n\t\ti.putExtra(Constants.EXTRA_ARTIST_ID, artistId);\n\t\ti.putExtra(Constants.EXTRA_ARTIST_NAME, mVAArtistMap.get(artistId));\n\t}\n\telse\n\t{\n\t\ti.putExtra(Constants.EXTRA_ARTIST_ID, mExtras.artistId);\n\t\ti.putExtra(Constants.EXTRA_ARTIST_NAME, mExtras.artistName);\n\t}\n\n\ti.putExtra(Constants.EXTRA_ALBUM_ID, mExtras.albumId);\n\ti.putExtra(Constants.EXTRA_ALBUM_NAME, mExtras.albumName);\n\ti.putExtra(Constants.EXTRA_ALBUM_ARTWORK_LARGE, mExtras.albumArtBig);\n\n\ti.putExtra(Constants.EXTRA_SONG_ID, id);\n\ti.putExtra(Constants.EXTRA_SONG_TITLE,\n\t  c.getString(c.getColumnIndexOrThrow(Five.Music.Songs.TITLE)));\n\ti.putExtra(Constants.EXTRA_SONG_LENGTH,\n\t  c.getLong(c.getColumnIndexOrThrow(Five.Music.Songs.LENGTH)));\n\ti.putExtra(Constants.EXTRA_PLAYLIST_POSITION, pos);\n\ti.putExtra(Constants.EXTRA_PLAYLIST_LENGTH, mAdapter.getCount());\n\n\treturn i;\n}", "path": "src\\org\\devtcg\\five\\activity\\SongList.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Closes a socket in such a way that ensures release from other threads\n * blocked on I/O from this socket. This is an upstream bug in Apache\n * Harmony that makes this necessary.\n */\n", "func_signal": "public static void closeSocket(Socket socket) throws IOException", "code": "{\n\ttry {\n\t\tsocket.shutdownInput();\n\t\tsocket.shutdownOutput();\n\t} catch (IOException e) {\n\t\tthrow e;\n\t} finally {\n\t\ttry {\n\t\t\tsocket.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n}", "path": "src\\org\\devtcg\\util\\IOUtilities.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * @deprecated See {@link #getItem(int)}.\n */\n", "func_signal": "public T getItemDAO(int position)", "code": "{\n\tif (super.getItem(position) != null)\n\t\treturn mItemDAO;\n\telse\n\t\treturn null;\n}", "path": "src\\org\\devtcg\\five\\widget\\AbstractDAOItemAdapter.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Creates a directory if it does not already exist. Throws an exception if\n * unable to do so.\n *\n * @param file Path to create.\n * @throws FileNotFoundException\n *             If the directory could not be made or the entry already\n *             exists but is not a directory.\n */\n", "func_signal": "public static void mkdirIfNecessary(File file) throws FileNotFoundException", "code": "{\n\tif (file.exists())\n\t{\n\t\tif (!file.isDirectory())\n\t\t{\n\t\t\tthrow new FileNotFoundException(\"Path already exists, but is not a directory: \" +\n\t\t\t\t\tfile.getAbsolutePath());\n\t\t}\n\t}\n\telse if (!file.mkdirs())\n\t{\n\t\tthrow new FileNotFoundException(\"Could not create directory: \" +\n\t\t\t\tfile.getAbsolutePath());\n\t}\n}", "path": "src\\org\\devtcg\\five\\util\\FileUtils.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Empties the contents of a directory, but does not delete the directory\n * itself.\n *\n * @throws IOException\n *             if this function failed to delete any files in the directory.\n */\n", "func_signal": "public static void emptyDirectory(File path) throws IOException", "code": "{\n        if (!path.exists())\n            throw new IllegalArgumentException(path + \" does not exist\");\n\n        if (!path.isDirectory())\n            throw new IllegalArgumentException(path + \" is not a directory\");\n\n        File[] files = path.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            File file = files[i];\n            deleteFileOrDirectory(file);\n        }\n    }", "path": "src\\org\\devtcg\\five\\util\\FileUtils.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Delete a file or directory. If a directory, deletes all files underneath\n * and the directory itself.\n *\n * @throws IOException\n *             if this function failed to delete the file\n *\n * @see #emptyDirectory\n */\n", "func_signal": "public static void deleteFileOrDirectory(File path) throws IOException", "code": "{\n    \tif (path.isDirectory())\n    \t\tdeleteDirectory(path);\n    \telse if (path.exists())\n    \t{\n    \t\tif (!path.delete())\n    \t\t\tthrow new IOException(\"failed to delete file: \" + path);\n    \t}\n    }", "path": "src\\org\\devtcg\\five\\util\\FileUtils.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Does all the heavy lifting to play a song.  Checks the cache,\n * manages the local HTTP server / streaming, and (later) playback\n * events.\n *\n * @return\n *   True if playback is starting; false if an unforeseen error has\n *   occurred.\n */\n", "func_signal": "private boolean playInternal(long songId)", "code": "{\n\tmHandler.cancelStopSelf();\n\n\tmPrepared = false;\n\tmPlayer.reset();\n//\t\tmPlayer.setOnBufferingUpdateListener(this);\n\tmPlayer.setOnCompletionListener(this);\n\tmPlayer.setOnErrorListener(this);\n\tmPlayer.setOnPreparedListener(this);\n\n\tSongItem song = SongItem.getInstance(Songs.getSong(this, songId));\n\ttry {\n\t\tDownloadManager.Download download = acquireDownload(song);\n\n\t\tif (download == null)\n\t\t\tmPlayer.setDataSource(song.getCachePath());\n\t\telse\n\t\t{\n\t\t\t/*\n\t\t\t * XXX: There is a bug here where if the server responds with a\n\t\t\t * different content length than was our initial guess (based on\n\t\t\t * the synced meta data), we'll end up waiting for the download\n\t\t\t * to complete forever.\n\t\t\t */\n\t\t\tmPlayer.setDataSource(new TailStream(download.getDestination().getAbsolutePath(),\n\t\t\t\t\tsong.getMimeType(), download.getExpectedContentLength()));\n\t\t}\n\t} catch (Exception e) {\n\t\t/*\n\t\t * This code looks suspicious to me. If this ever happens, I believe\n\t\t * we'll end up leaving the PlaylistService in a weird state where\n\t\t * it think its still playing but nothing is happening.\n\t\t */\n\t\tLog.e(Constants.TAG, \"Unable to start playback\", e);\n\t\tmPlayer.reset();\n\t} finally {\n\t\tsong.close();\n\t}\n\n\tnotifySong(songId);\n\n\tmBufferListeners.broadcastOnBufferingUpdate(songId, 0);\n\tmPlayer.prepareAsync();\n\n\treturn true;\n}", "path": "src\\org\\devtcg\\five\\service\\PlaylistService.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Generates a cURL command equivalent to the given request.\n */\n", "func_signal": "private static String toCurl(HttpUriRequest request) throws IOException", "code": "{\n    StringBuilder builder = new StringBuilder();\n\n    builder.append(\"curl \");\n\n    for (Header header: request.getAllHeaders()) {\n        builder.append(\"--header \\\"\");\n        builder.append(header.toString().trim());\n        builder.append(\"\\\" \");\n    }\n\n    URI uri = request.getURI();\n\n    // If this is a wrapped request, use the URI from the original\n    // request instead. getURI() on the wrapper seems to return a\n    // relative URI. We want an absolute URI.\n    if (request instanceof RequestWrapper) {\n        HttpRequest original = ((RequestWrapper) request).getOriginal();\n        if (original instanceof HttpUriRequest) {\n            uri = ((HttpUriRequest) original).getURI();\n        }\n    }\n\n    builder.append(\"\\\"\");\n    builder.append(uri);\n    builder.append(\"\\\"\");\n\n    if (request instanceof HttpEntityEnclosingRequest) {\n        HttpEntityEnclosingRequest entityRequest =\n                (HttpEntityEnclosingRequest) request;\n        HttpEntity entity = entityRequest.getEntity();\n        if (entity != null && entity.isRepeatable()) {\n            if (entity.getContentLength() < 1024) {\n                ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                entity.writeTo(stream);\n                String entityString = stream.toString();\n\n                // TODO: Check the content type, too.\n                builder.append(\" --data-ascii \\\"\")\n                        .append(entityString)\n                        .append(\"\\\"\");\n            } else {\n                builder.append(\" [TOO MUCH DATA TO INCLUDE]\");\n            }\n        }\n    }\n\n    return builder.toString();\n}", "path": "src\\org\\devtcg\\five\\util\\streaming\\FailfastHttpClient.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Previously used simply to control the notification displayed in the\n * status bar. Changes in Eclair now require that we tie this to the\n * foreground state of the service so that has been tacked on here.\n * <p>\n * This method is called to handle the play, pause/unpause, and stop events,\n * making it a good fit for foreground state control.\n */\n", "func_signal": "private void notifySong(long songId)", "code": "{\n\tif (songId < 0)\n\t\tPlayerNotification.getInstance().hideNotification(this);\n\telse\n\t\tPlayerNotification.getInstance().showNotification(this, songId);\n}", "path": "src\\org\\devtcg\\five\\service\\PlaylistService.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Awkward way to validate that the record type from the server matches what\n * we expect based on our request. Compares the RecordDispatcher simply\n * because the API throughout the sync adapter prefers to work with string\n * feedTypes instead of integers aligning with the protobufs record types\n * for some silly reason.\n */\n", "func_signal": "private void validateRecordType(Protos.Record.Type type, RecordDispatcher dispatcher)", "code": "{\n\tRecordDispatcher expected;\n\n\tswitch (type)\n\t{\n\t\tcase ARTIST: expected = mArtistDispatcher; break;\n\t\tcase ALBUM: expected = mAlbumDispatcher; break;\n\t\tcase SONG: expected = mSongDispatcher; break;\n\t\tcase PLAYLIST: expected = mPlaylistDispatcher; break;\n\t\tcase PLAYLIST_SONG: expected = mPlaylistSongDispatcher; break;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"Server produced unknown record of type \" + type);\n\t}\n\n\tif (expected != dispatcher)\n\t{\n\t\tthrow new IllegalStateException(\"Server produced unusual record of type \" + type +\n\t\t\t\t\" when we expected to dispatch with \" + dispatcher);\n\t}\n}", "path": "src\\org\\devtcg\\five\\provider\\FiveSyncAdapter.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Check at key stages to make sure that the song to be played next\n * is preemptively downloading.\n */\n", "func_signal": "private void prefetchCheck()\n  throws RemoteException", "code": "{\n\tlong currentId;\n\tlong nextId = -1;\n\n\tsynchronized(mBinderLock) {\n\t\tif (mPlaying == false)\n\t\t\treturn;\n\n\t\tcurrentId = getPlayingSong();\n\t\tassert currentId >= 0;\n\n\t\tint next = mBinder.peekNext();\n\t\tif (next < 0)\n\t\t\treturn;\n\n\t\tnextId = mPlaylist.get(next);\n\t\tassert nextId >= 0;\n\t}\n\n\tif (mManager.lookupDownload(currentId) != null)\n\t{\n\t\tLog.i(TAG, \"Prefetch miss due to active download.\");\n\t\treturn;\n\t}\n\n\tif (mManager.lookupDownload(nextId) != null)\n\t{\n\t\tLog.i(TAG, \"Prefetch already in progress.\");\n\t\treturn;\n\t}\n\n\tSongItem song = SongItem.getInstance(Songs.getSong(this, nextId));\n\ttry {\n\t\tDownloadManager.Download download = acquireDownload(song);\n\t\tif (download == null)\n\t\t\tLog.i(TAG, \"Prefetch not necessary, next track (nextId=\" + nextId + \") already in cache\");\n\t\telse\n\t\t\tLog.i(TAG, \"Prefetch started on next track (nextId=\" + nextId + \")\");\n\t} catch (Exception e) {\n\t\tLog.e(TAG, \"acquireDownload failed\", e);\n\t} finally {\n\t\tsong.close();\n\t}\n}", "path": "src\\org\\devtcg\\five\\service\\PlaylistService.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Issue an HTTP GET request and store the result in a content provider.\n * Also triggers an update to <code>localFeedItemUri</code>, storing\n * <code>localUri</code> in <code>columnToUpdate</code>.\n */\n", "func_signal": "private static void downloadFileAndUpdateProvider(SyncContext context,\n\t\tAbstractSyncProvider serverDiffs, String httpUrl, Uri localUri, Uri localFeedItemUri,\n\t\tString columnToUpdate) throws IOException", "code": "{\n\tif (context.hasError() || context.hasCanceled())\n\t\treturn;\n\n\tfinal HttpGet request = new HttpGet(httpUrl);\n\tfinal Thread currentThread = Thread.currentThread();\n\n\tcontext.trigger = new CancelTrigger() {\n\t\tpublic void onCancel()\n\t\t{\n\t\t\trequest.abort();\n\t\t\tcurrentThread.interrupt();\n\t\t}\n\t};\n\n\ttry {\n\t\tdownloadFileAndUpdateProviderCancelable(context, serverDiffs, request, localUri,\n\t\t\t\tlocalFeedItemUri, columnToUpdate);\n\t} finally {\n\t\tcontext.trigger = null;\n\t}\n}", "path": "src\\org\\devtcg\\five\\provider\\FiveSyncAdapter.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Run the main sync loop. Some effort was made to make this similar to\n * Google's own sync engine for Android, and as such well generalized.\n * My attempt has only partially succeeded and there is quite a bit of\n * leak abstraction in this design taking advantage of the fact that we\n * only have 1 provider to sync always.\n */\n", "func_signal": "public void runSyncLoop(SyncContext context)", "code": "{\n\tAbstractSyncProvider serverDiffs = mProvider.getSyncInstance();\n\n\tint maxTries = context.numberOfTries + MAXIMUM_NETWORK_RETRIES + 1;\n\n\tStopwatch watch = new Stopwatch();\n\n\twhile (context.hasCanceled() == false && context.numberOfTries++ < maxTries)\n\t{\n\t\tif (context.observer != null)\n\t\t\tcontext.observer.onStatusChanged(\"Downloading changes...\");\n\n\t\tLog.d(TAG, \"Downloading server diffs...\");\n\n\t\twatch.start();\n\n\t\t/*\n\t\t * Download all changes since our last sync from the server.\n\t\t */\n\t\ttry {\n\t\t\tgetServerDiffs(context, serverDiffs);\n\t\t} catch (RuntimeException e) {\n\t\t\t/* Uncaught runtime exception, blank the sync status. */\n\t\t\tif (context.observer != null)\n\t\t\t\tcontext.observer.onStatusChanged(null);\n\n\t\t\t/* Explode our process. */\n\t\t\tthrow e;\n\t\t}\n\n\t\twatch.stopAndDebugElapsed(TAG, \"getServerDiffs\");\n\n\t\tif (context.hasCanceled() == true)\n\t\t\tbreak;\n\n\t\tif (context.hasError())\n\t\t{\n\t\t\t/*\n\t\t\t * If we are going to retry, apply a short delay while we still\n\t\t\t * have the wake lock. This is designed as a way to avoid the\n\t\t\t * more expensive AlarmManager to schedule a retry in such a\n\t\t\t * short window of time. If we fail up to our allowed retry\n\t\t\t * limit we will be forced to reschedule another try later.\n\t\t\t */\n\t\t\tif (context.numberOfTries < maxTries)\n\t\t\t{\n\t\t\t\ttry {\n\t\t\t\t\tint retryIndex = (MAXIMUM_NETWORK_RETRIES -\n\t\t\t\t\t\t(maxTries - context.numberOfTries));\n\t\t\t\t\tThread.sleep(NETWORK_RETRY_DELAY[retryIndex]);\n\t\t\t\t} catch (InterruptedException e) {}\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t/*\n\t\t * No more network work left, go ahead and fold the temporary\n\t\t * serverDiffs provider into the main one.\n\t\t */\n\t\tif (!context.moreRecordsToGet)\n\t\t{\n\t\t\tif (context.observer != null)\n\t\t\t\tcontext.observer.onStatusChanged(\"Merging changes...\");\n\n\t\t\tLog.d(TAG, \"Downloaded records, merging...\");\n\t\t\twatch.start();\n\t\t\tmProvider.merge(context, serverDiffs);\n\t\t\twatch.stopAndDebugElapsed(TAG, \"serverDiffs.merge\");\n\n\t\t\tif (!context.hasError())\n\t\t\t\tLog.d(TAG, \"Successfully merged \" + context.getTotalRecordsProcessed() + \" records!\");\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tserverDiffs.close();\n\n\tif (context.hasCanceled() == true)\n\t\tLog.i(TAG, \"Sync canceled\");\n\telse if (context.hasError())\n\t\tLog.i(TAG, \"Sync aborted with errors, will try again later...\");\n\telse\n\t{\n\t\tLog.i(TAG, \"Sync completed successfully, processed \" +\n\t\t\t\tcontext.numberOfDeletes + \" deletes, \" +\n\t\t\t\tcontext.numberOfInserts + \" inserts, and \" +\n\t\t\t\tcontext.numberOfUpdates + \" updates\");\n\t\tserverDiffs.onDestroySyncInstance();\n\t}\n}", "path": "src\\org\\devtcg\\five\\provider\\AbstractSyncAdapter.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Deletes a directory recursively.\n *\n * @throws IOException\n *             if this function failed to delete any files in the directory\n *             or the directory itself.\n */\n", "func_signal": "public static void deleteDirectory(File path) throws IOException", "code": "{\n    \temptyDirectory(path);\n    \tif (!path.delete())\n    \t\tthrow new IOException(\"failed to delete directory: \" + path);\n    }", "path": "src\\org\\devtcg\\five\\util\\FileUtils.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Enables cURL request logging for this client.\n *\n * @param name to log messages with\n * @param level at which to log messages (see {@link android.util.Log})\n */\n", "func_signal": "public void enableCurlLogging(String name, int level)", "code": "{\n    if (name == null) {\n        throw new NullPointerException(\"name\");\n    }\n    if (level < Log.VERBOSE || level > Log.ASSERT) {\n        throw new IllegalArgumentException(\"Level is out of range [\"\n            + Log.VERBOSE + \"..\" + Log.ASSERT + \"]\");\n    }\n\n    curlConfiguration = new LoggingConfiguration(name, level);\n}", "path": "src\\org\\devtcg\\five\\util\\streaming\\FailfastHttpClient.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Get or start a download for the request song id.\n *\n * @return The download instance (either recently started, or reacquired\n *         from an existing download) if the song is not in cache;\n *         otherwise, null.\n *\n * @throws IOException\n *             When the download destination path cannot be opened for\n *             writing.\n * @throws CacheAllocationException\n */\n", "func_signal": "private DownloadManager.Download acquireDownload(SongItem song)\n\t\tthrows IOException, CacheAllocationException", "code": "{\n\tSourceItem source = SourceItem.getInstance(this, Sources.makeUri(song.getSourceId()));\n\n\ttry {\n\t\tlong songId = song.getId();\n\t\tString url = source.getSongUrl(song.getSyncId());\n\t\tlong size = song.getSize();\n\t\tString cachePath = song.getCachePath();\n\n\t\tLog.v(TAG, \"Preparing to download [url=\" + url + \"; size=\" + size +\n\t\t\t\t\"; cachePath=\" + cachePath + \"]\");\n\n\t\tlong resumeFrom = 0;\n\n\t\tif (cachePath != null)\n\t\t{\n\t\t\tresumeFrom = (new File(cachePath)).length();\n\n\t\t\tif (resumeFrom == size)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Cache hit, download of \" + cachePath + \" already complete!\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Partial cache hit, resuming from \" +\n\t\t\t\t\t\tcachePath + \" at \" + resumeFrom);\n\n\t\t\t\t/*\n\t\t\t\t * XXX: We have a small race condition possibility here\n\t\t\t\t * since we aren't synchronizing anything. The download\n\t\t\t\t * might have just finished, in which case our lookup would\n\t\t\t\t * yield null, but we'll foolishly try a resumed download\n\t\t\t\t * for a very small section of the file.\n\t\t\t\t */\n\t\t\t\tDownloadManager.Download download = mManager.lookupDownload(songId);\n\t\t\t\tif (download != null)\n\t\t\t\t\treturn download;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mManager.lookupDownload(songId) != null)\n\t\t\t\tthrow new IllegalStateException(\"Download started, but did not register with the cache.\");\n\n\t\t\tcachePath = mCacheMgr.requestStorage(this, song.getSourceId(), song.getSyncId());\n\t\t}\n\n\t\t/*\n\t\t * We only allow 1 download at a time, so invoking this method\n\t\t * implicitly asks for all other downloads to be canceled.\n\t\t */\n\t\tmManager.stopAllDownloads();\n\n\t\tmManager.updateCredentials(source);\n\n\t\ttry {\n\t\t\treturn mManager.startDownload(songId, url, cachePath, size, resumeFrom);\n\t\t} catch (IOException e) {\n\t\t\tmManager.stopDownload(songId);\n\t\t\tthrow e;\n\t\t}\n\t} finally {\n\t\tif (source != null)\n\t\t\tsource.close();\n\t}\n}", "path": "src\\org\\devtcg\\five\\service\\PlaylistService.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Special case which asks us to keep a sensible back stack while\n * mechanizing the user toward the initial SourceAdd screen.\n */\n", "func_signal": "public static void showThenStartSourceAdd(Context context)", "code": "{\n\tcontext.startActivity(new Intent(context, Settings.class)\n\t\t\t.putExtra(Constants.EXTRA_START_SOURCE_ADD, true));\n}", "path": "src\\org\\devtcg\\five\\activity\\Settings.java", "repo_name": "jasta/five-android", "stars": 15, "license": "None", "language": "java", "size": 1305}
{"docstring": "/**\n * Writes to XML.\n * \n * @param writer\n *            the writer\n * @param propertyBag\n *            the property bag\n * @param isUpdateOperation\n *            the is update operation\n * @throws Exception\n *             the exception\n */\n", "func_signal": "protected void writePropertyValueToXml(EwsServiceXmlWriter writer,\n\t\tPropertyBag propertyBag, boolean isUpdateOperation)\nthrows Exception", "code": "{\n\tRecurrence value = (Recurrence)propertyBag\n\t.getObjectFromPropertyDefinition(this);\n\n\tif (value != null) {\n\t\tvalue.writeToXml(writer, XmlElementNames.Recurrence);\n\t}\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\RecurrencePropertyDefinition.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Initializes a new instance of the ItemView class.\n * \n * @param pageSize\n *            the page size\n * @param offset\n *            the offset\n */\n", "func_signal": "public ItemView(int pageSize, int offset)", "code": "{\n\tsuper(pageSize, offset);\n\tthis.setOffset(offset);\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\ItemView.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * * Defines an implicit conversion of MessageBody into a string.\n * \n * @param messageBody\n *            The MessageBody to convert to a string.\n * @return A string containing the text of the MessageBody.\n * @throws Exception\n *             the exception\n */\n", "func_signal": "public static String getStringFromMessageBody(MessageBody messageBody)\n\t\tthrows Exception", "code": "{\n\tEwsUtilities.validateParam(messageBody, \"messageBody\");\n\treturn messageBody.text;\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\MessageBody.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Validates this view.\n * \n * @param request\n *            the request\n * @throws ServiceVersionException\n *             the service version exception\n * @throws ServiceValidationException\n *             the service validation exception\n */\n", "func_signal": "@Override\nprotected void internalValidate(ServiceRequestBase request)\n\t\tthrows ServiceVersionException, ServiceValidationException", "code": "{\n\tsuper.internalValidate(request);\n\n\tEwsUtilities.validateEnumVersionValue(this.traversal, request\n\t\t\t.getService().getRequestedServerVersion());\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\ItemView.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * * Writes attributes to XML.\n * \n * @param writer\n *            The writer.\n * @throws ServiceXmlSerializationException\n *             the service xml serialization exception\n */\n", "func_signal": "@Override\nprotected void writeAttributesToXml(EwsServiceXmlWriter writer)\n\t\tthrows ServiceXmlSerializationException", "code": "{\n\twriter.writeAttributeValue(XmlAttributeNames.BodyType, this\n\t\t\t.getBodyType());\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\MessageBody.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Writes the attributes to XML.\n * \n * @param writer\n *            the writer\n * @throws ServiceXmlSerializationException\n *             the service xml serialization exception\n */\n", "func_signal": "@Override\nprotected void writeAttributesToXml(EwsServiceXmlWriter writer)\n\t\tthrows ServiceXmlSerializationException", "code": "{\n\tsuper.writeAttributesToXml(writer);\n\twriter.writeAttributeValue(XmlAttributeNames.ItemId, this.getItemId());\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\AlternatePublicFolderItemId.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Loads the attributes from XML.\n * \n * @param reader\n *            the reader\n * @throws Exception\n *             the exception\n */\n", "func_signal": "@Override\nprotected void loadAttributesFromXml(EwsServiceXmlReader reader)\n\t\tthrows Exception", "code": "{\n\tsuper.loadAttributesFromXml(reader);\n\tthis.itemId = reader.readAttributeValue(XmlAttributeNames.ItemId);\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\AlternatePublicFolderItemId.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/***\n * Sets the text of the message body.\n * \n * @param text\n *            message body text\n */\n", "func_signal": "public void setText(String text)", "code": "{\n\tif (this.canSetFieldValue(this.text, text)) {\n\t\tthis.text = text;\n\t\tthis.changed();\n\t}\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\MessageBody.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Gets the value of the version property.\n * \n * @return\n *     possible object is\n *     {@link ExchangeVersionType }\n *     \n */\n", "func_signal": "public ExchangeVersionType getVersion()", "code": "{\n    if (version == null) {\n        return ExchangeVersionType.EXCHANGE_2007_SP_1;\n    } else {\n        return version;\n    }\n}", "path": "ews-api\\src\\main\\java\\com\\microsoft\\schemas\\exchange\\services\\_2006\\types\\RequestServerVersion.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * * Reads attributes from XML.\n * \n * @param reader\n *            The reader.\n * @throws Exception\n *             the exception\n */\n", "func_signal": "protected void readAttributesFromXml(EwsServiceXmlReader reader)\n\t\tthrows Exception", "code": "{\n\tthis.bodyType = reader.readAttributeValue(BodyType.class,\n\t\t\tXmlAttributeNames.BodyType);\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\MessageBody.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * * Initializes a new instance.\n * \n * @param bodyType\n *            The type of the message body's text.\n * @param text\n *            The text of the message body.\n */\n", "func_signal": "public MessageBody(BodyType bodyType, String text)", "code": "{\n\tthis();\n\tthis.bodyType = bodyType;\n\tthis.text = text;\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\MessageBody.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * * Writes elements to XML.\n * \n * @param writer\n *            The writer.\n * @throws ServiceXmlSerializationException\n *             the service xml serialization exception\n */\n", "func_signal": "@Override\nprotected void writeElementsToXml(EwsServiceXmlWriter writer)\n\t\tthrows ServiceXmlSerializationException", "code": "{\n\tif (null != this.text && !this.text.isEmpty()) {\n\t\twriter.writeValue(this.getText(), XmlElementNames.Body);\n\t}\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\MessageBody.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Writes the attributes to XML.\n * \n * @param writer\n *            the writer\n * @throws ServiceXmlSerializationException\n *             the service xml serialization exception\n */\n", "func_signal": "@Override\nprotected void writeAttributesToXml(EwsServiceXmlWriter writer)\n\t\tthrows ServiceXmlSerializationException", "code": "{\n\twriter.writeAttributeValue(XmlAttributeNames.Bias, EwsUtilities\n\t\t\t.getTimeSpanToXSDuration(this.bias));\n\twriter.writeAttributeValue(XmlAttributeNames.Name, this.name);\n\twriter.writeAttributeValue(XmlAttributeNames.Id, this.id);\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\TimeZonePeriod.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Gets the value of the restrictedGroupIdentifier property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the restrictedGroupIdentifier property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getRestrictedGroupIdentifier().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link SidAndAttributesType }\n * \n * \n */\n", "func_signal": "public List<SidAndAttributesType> getRestrictedGroupIdentifier()", "code": "{\n    if (restrictedGroupIdentifier == null) {\n        restrictedGroupIdentifier = new ArrayList<SidAndAttributesType>();\n    }\n    return this.restrictedGroupIdentifier;\n}", "path": "ews-api\\src\\main\\java\\com\\microsoft\\schemas\\exchange\\services\\_2006\\types\\NonEmptyArrayOfRestrictedGroupIdentifiersType.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Initializes a new instance of ConnectingId.\n * \n * @param idType\n *            The type of this Id.\n * @param id\n *            The user Id.\n */\n", "func_signal": "public ImpersonatedUserId(ConnectingIdType idType, String id)", "code": "{\n\tthis();\n\tthis.idType = idType;\n\tthis.id = id;\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\ImpersonatedUserId.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Writes attributes to XML.\n * \n * @param writer\n *            the writer\n * @throws ServiceXmlSerializationException\n *             the service xml serialization exception\n */\n", "func_signal": "@Override\nprotected void writeAttributesToXml(EwsServiceXmlWriter writer)\n\t\tthrows ServiceXmlSerializationException", "code": "{\n\twriter.writeAttributeValue(XmlAttributeNames.OccurrenceId, this\n\t\t\t.getUniqueId());\n\twriter.writeAttributeValue(XmlAttributeNames.ChangeKey, this\n\t\t\t.getChangeKey());\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\RecurringAppointmentMasterId.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/***\n * Sets the type of the message body's text.\n * \n * @param bodyType\n *            BodyType enum\n */\n", "func_signal": "public void setBodyType(BodyType bodyType)", "code": "{\n\tif (this.canSetFieldValue(this.bodyType, bodyType)) {\n\t\tthis.bodyType = bodyType;\n\t\tthis.changed();\n\t}\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\MessageBody.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Reads the attributes from XML.\n * \n * @param reader\n *            the reader\n * @throws Exception\n *             the exception\n */\n", "func_signal": "@Override\nprotected void readAttributesFromXml(EwsServiceXmlReader reader)\n\t\tthrows Exception", "code": "{\n\tthis.id = reader.readAttributeValue(XmlAttributeNames.Id);\n\tthis.name = reader.readAttributeValue(XmlAttributeNames.Name);\n\tthis.bias = EwsUtilities.getXSDurationToTimeSpan(reader\n\t\t\t.readAttributeValue(XmlAttributeNames.Bias));\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\TimeZonePeriod.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Gets the value of the entry property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the entry property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getEntry().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link PhoneNumberDictionaryEntryType }\n * \n * \n */\n", "func_signal": "public List<PhoneNumberDictionaryEntryType> getEntry()", "code": "{\n    if (entry == null) {\n        entry = new ArrayList<PhoneNumberDictionaryEntryType>();\n    }\n    return this.entry;\n}", "path": "ews-api\\src\\main\\java\\com\\microsoft\\schemas\\exchange\\services\\_2006\\types\\PhoneNumberDictionaryType.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * Loads from XML.\n * \n * @param reader\n *            the reader\n * @param propertyBag\n *            the property bag\n * @throws Exception\n *             the exception\n */\n", "func_signal": "protected void loadPropertyValueFromXml(EwsServiceXmlReader reader,\n\t\tPropertyBag propertyBag) throws Exception", "code": "{\n\treader.ensureCurrentNodeIsStartElement(XmlNamespace.Types,\n\t\t\tXmlElementNames.Recurrence);\n\n\tRecurrence recurrence = null;\n\n\treader.read(new XMLNodeType(XMLNodeType.START_ELEMENT)); // This is the\n\t// pattern\n\t// element\n\n\tif (reader.getLocalName().equals(\n\t\t\tXmlElementNames.RelativeYearlyRecurrence)) {\n\n\t\trecurrence = new Recurrence.RelativeYearlyPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.AbsoluteYearlyRecurrence)) {\n\n\t\trecurrence = new Recurrence.YearlyPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.RelativeMonthlyRecurrence)) {\n\n\t\trecurrence = new Recurrence.RelativeMonthlyPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.AbsoluteMonthlyRecurrence)) {\n\n\t\trecurrence = new Recurrence.MonthlyPattern();\n\t} else if (reader.getLocalName()\n\t\t\t.equals(XmlElementNames.DailyRecurrence)) {\n\n\t\trecurrence = new Recurrence.DailyPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.DailyRegeneration)) {\n\n\t\trecurrence = new Recurrence.DailyRegenerationPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.WeeklyRecurrence)) {\n\n\t\trecurrence = new Recurrence.WeeklyPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.WeeklyRegeneration)) {\n\n\t\trecurrence = new Recurrence.WeeklyRegenerationPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.MonthlyRegeneration)) {\n\n\t\trecurrence = new Recurrence.MonthlyRegenerationPattern();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.YearlyRegeneration)) {\n\n\t\trecurrence = new Recurrence.YearlyRegenerationPattern();\n\t} else {\n\n\t\tthrow new ServiceXmlDeserializationException(String.format(\n\t\t\t\tStrings.InvalidRecurrencePattern, reader.getLocalName()));\n\t}\n\n\trecurrence.loadFromXml(reader, reader.getLocalName());\n\n\treader.read(new XMLNodeType(XMLNodeType.START_ELEMENT)); // This is the\n\t// range\n\t// element\n\n\tRecurrenceRange range;\n\n\tif (reader.getLocalName().equals(XmlElementNames.NoEndRecurrence)) {\n\n\t\trange = new NoEndRecurrenceRange();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.EndDateRecurrence)) {\n\n\t\trange = new EndDateRecurrenceRange();\n\t} else if (reader.getLocalName().equals(\n\t\t\tXmlElementNames.NumberedRecurrence)) {\n\n\t\trange = new NumberedRecurrenceRange();\n\t} else {\n\t\tthrow new ServiceXmlDeserializationException(String.format(\n\t\t\t\tStrings.InvalidRecurrenceRange, reader.getLocalName()));\n\t}\n\n\trange.loadFromXml(reader, reader.getLocalName());\n\trange.setupRecurrence(recurrence);\n\n\treader.readEndElementIfNecessary(XmlNamespace.Types,\n\t\t\tXmlElementNames.Recurrence);\n\n\tpropertyBag.setObjectFromPropertyDefinition(this, recurrence);\n}", "path": "ews-ms-api\\src\\main\\java\\microsoft\\exchange\\webservices\\data\\RecurrencePropertyDefinition.java", "repo_name": "floriankammermann/java-microsoft-exchange-webservice-access", "stars": 10, "license": "None", "language": "java", "size": 3529}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic Object eGet(int featureID, boolean resolve, boolean coreType)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.PAINT_PROPERTY__PROPERTY:\n      return getProperty();\n    case JFXCssPackage.PAINT_PROPERTY__VALUE:\n      return getValue();\n  }\n  return super.eGet(featureID, resolve, coreType);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\PaintPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void eSet(int featureID, Object newValue)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.FONT_SIZE_PROPERTY__PROPERTY:\n      setProperty((String)newValue);\n      return;\n    case JFXCssPackage.FONT_SIZE_PROPERTY__VALUE:\n      setValue((SizeValue)newValue);\n      return;\n  }\n  super.eSet(featureID, newValue);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void eUnset(int featureID)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.FONT_SIZE_PROPERTY__PROPERTY:\n      setProperty(PROPERTY_EDEFAULT);\n      return;\n    case JFXCssPackage.FONT_SIZE_PROPERTY__VALUE:\n      setValue((SizeValue)null);\n      return;\n  }\n  super.eUnset(featureID);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.FONT_PROPERTY__VALUE:\n      return basicSetValue(null, msgs);\n  }\n  return super.eInverseRemove(otherEnd, featureID, msgs);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void setValue(SizeValue newValue)", "code": "{\n  if (newValue != value)\n  {\n    NotificationChain msgs = null;\n    if (value != null)\n      msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JFXCssPackage.FONT_SIZE_PROPERTY__VALUE, null, msgs);\n    if (newValue != null)\n      msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JFXCssPackage.FONT_SIZE_PROPERTY__VALUE, null, msgs);\n    msgs = basicSetValue(newValue, msgs);\n    if (msgs != null) msgs.dispatch();\n  }\n  else if (eNotificationRequired())\n    eNotify(new ENotificationImpl(this, Notification.SET, JFXCssPackage.FONT_SIZE_PROPERTY__VALUE, newValue, newValue));\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic boolean eIsSet(int featureID)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.PAINT_PROPERTY__PROPERTY:\n      return PROPERTY_EDEFAULT == null ? property != null : !PROPERTY_EDEFAULT.equals(property);\n    case JFXCssPackage.PAINT_PROPERTY__VALUE:\n      return value != null;\n  }\n  return super.eIsSet(featureID);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\PaintPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public NotificationChain basicSetValue(SizeValue newValue, NotificationChain msgs)", "code": "{\n  SizeValue oldValue = value;\n  value = newValue;\n  if (eNotificationRequired())\n  {\n    ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JFXCssPackage.FONT_SIZE_PROPERTY__VALUE, oldValue, newValue);\n    if (msgs == null) msgs = notification; else msgs.add(notification);\n  }\n  return msgs;\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n  if (eIsProxy()) return super.toString();\n\n  StringBuffer result = new StringBuffer(super.toString());\n  result.append(\" (property: \");\n  result.append(property);\n  result.append(')');\n  return result.toString();\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\PaintPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public NotificationChain basicSetValue(PaintValue newValue, NotificationChain msgs)", "code": "{\n  PaintValue oldValue = value;\n  value = newValue;\n  if (eNotificationRequired())\n  {\n    ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JFXCssPackage.PAINT_PROPERTY__VALUE, oldValue, newValue);\n    if (msgs == null) msgs = notification; else msgs.add(notification);\n  }\n  return msgs;\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\PaintPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic Object eGet(int featureID, boolean resolve, boolean coreType)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.FONT_PROPERTY__PROPERTY:\n      return getProperty();\n    case JFXCssPackage.FONT_PROPERTY__VALUE:\n      return getValue();\n  }\n  return super.eGet(featureID, resolve, coreType);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void setProperty(String newProperty)", "code": "{\n  String oldProperty = property;\n  property = newProperty;\n  if (eNotificationRequired())\n    eNotify(new ENotificationImpl(this, Notification.SET, JFXCssPackage.FONT_PROPERTY__PROPERTY, oldProperty, property));\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n  if (eIsProxy()) return super.toString();\n\n  StringBuffer result = new StringBuffer(super.toString());\n  result.append(\" (property: \");\n  result.append(property);\n  result.append(')');\n  return result.toString();\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void eUnset(int featureID)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.FONT_PROPERTY__PROPERTY:\n      setProperty(PROPERTY_EDEFAULT);\n      return;\n    case JFXCssPackage.FONT_PROPERTY__VALUE:\n      setValue((FontValue)null);\n      return;\n  }\n  super.eUnset(featureID);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void setProperty(String newProperty)", "code": "{\n  String oldProperty = property;\n  property = newProperty;\n  if (eNotificationRequired())\n    eNotify(new ENotificationImpl(this, Notification.SET, JFXCssPackage.FONT_SIZE_PROPERTY__PROPERTY, oldProperty, property));\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic Object eGet(int featureID, boolean resolve, boolean coreType)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.FONT_SIZE_PROPERTY__PROPERTY:\n      return getProperty();\n    case JFXCssPackage.FONT_SIZE_PROPERTY__VALUE:\n      return getValue();\n  }\n  return super.eGet(featureID, resolve, coreType);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void setValue(FontValue newValue)", "code": "{\n  if (newValue != value)\n  {\n    NotificationChain msgs = null;\n    if (value != null)\n      msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JFXCssPackage.FONT_PROPERTY__VALUE, null, msgs);\n    if (newValue != null)\n      msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JFXCssPackage.FONT_PROPERTY__VALUE, null, msgs);\n    msgs = basicSetValue(newValue, msgs);\n    if (msgs != null) msgs.dispatch();\n  }\n  else if (eNotificationRequired())\n    eNotify(new ENotificationImpl(this, Notification.SET, JFXCssPackage.FONT_PROPERTY__VALUE, newValue, newValue));\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public NotificationChain basicSetValue(FontValue newValue, NotificationChain msgs)", "code": "{\n  FontValue oldValue = value;\n  value = newValue;\n  if (eNotificationRequired())\n  {\n    ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JFXCssPackage.FONT_PROPERTY__VALUE, oldValue, newValue);\n    if (msgs == null) msgs = notification; else msgs.add(notification);\n  }\n  return msgs;\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void eUnset(int featureID)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.PAINT_PROPERTY__PROPERTY:\n      setProperty(PROPERTY_EDEFAULT);\n      return;\n    case JFXCssPackage.PAINT_PROPERTY__VALUE:\n      setValue((PaintValue)null);\n      return;\n  }\n  super.eUnset(featureID);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\PaintPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic boolean eIsSet(int featureID)", "code": "{\n  switch (featureID)\n  {\n    case JFXCssPackage.FONT_SIZE_PROPERTY__PROPERTY:\n      return PROPERTY_EDEFAULT == null ? property != null : !PROPERTY_EDEFAULT.equals(property);\n    case JFXCssPackage.FONT_SIZE_PROPERTY__VALUE:\n      return value != null;\n  }\n  return super.eIsSet(featureID);\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\FontSizePropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void setValue(PaintValue newValue)", "code": "{\n  if (newValue != value)\n  {\n    NotificationChain msgs = null;\n    if (value != null)\n      msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JFXCssPackage.PAINT_PROPERTY__VALUE, null, msgs);\n    if (newValue != null)\n      msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JFXCssPackage.PAINT_PROPERTY__VALUE, null, msgs);\n    msgs = basicSetValue(newValue, msgs);\n    if (msgs != null) msgs.dispatch();\n  }\n  else if (eNotificationRequired())\n    eNotify(new ENotificationImpl(this, Notification.SET, JFXCssPackage.PAINT_PROPERTY__VALUE, newValue, newValue));\n}", "path": "at.bestsolution.e4.jfx.xtext.css\\src-gen\\at\\bestsolution\\e4\\jfx\\xtext\\jFXCss\\impl\\PaintPropertyImpl.java", "repo_name": "tomsontom/emfdatabinding-tutorial", "stars": 8, "license": "None", "language": "java", "size": 5944}
{"docstring": "/**\n * \u8fd4\u56de\u6307\u5b9a\u7c7b\u7684class\u6587\u4ef6\u8def\u5f84\u3002\u6ce8\u610f\uff1a\u6b64\u65b9\u6cd5\u53ea\u9002\u7528\u4e8e\u6587\u4ef6\u5728\u672c\u5730\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u4e0d\u662f\u5728jar\u4e2d\n * @param c\n * @return\n */\n", "func_signal": "public static File getClassAbsolutePath(Class c)", "code": "{\n\tString path = c.getProtectionDomain().getCodeSource().getLocation().getPath();\n\tString name = c.getName().replaceAll(\"\\\\.\", \"/\");\n\treturn new File(path + name + \".class\");\n}", "path": "src\\main\\java\\zcx\\HibernateFunc.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * Rebuild the SessionFactory with the static Configuration.\n *\n */\n", "func_signal": "public static void rebuildSessionFactory() throws Exception", "code": "{\n\tsynchronized (sessionFactory) {\n\t\ttry {\n\t\t\tsessionFactory = getConfiguration().buildSessionFactory();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new Exception(ex);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\Metadata\\util\\HibernateUtil2.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u5220\u9664\u6570\u636e\u5e93\u4e2d\u7684\u8868\n * @param conf\n * @param tableName\n * @throws Exception\n */\n", "func_signal": "public static void dropTable(Configuration conf, String tableName) throws Exception", "code": "{\n\tConnectionProvider conPro = getConnection(conf);\n\ttry {\n\t\tString sql = \"drop table \" + tableName;\n\t\tConnection con = conPro.getConnection();\n\t\ttry {\n\t\t\tStatement sm = con.createStatement();\n\t\t\ttry {\n\t\t\t\tsm.executeUpdate(sql);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tsm.close();\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tconPro.closeConnection(con);\n\t\t}\n\t}\n\tfinally {\n\t\tconPro.close();\n\t}\n}", "path": "src\\main\\java\\zcx\\HibernateFunc.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u5224\u65ad\u6570\u636e\u5e93\u4e2d\u662f\u5426\u5b58\u5728\u8868tableName\n * @param conf\n * @param tableName\n * @return\n * @throws Exception\n */\n", "func_signal": "public static boolean isTableExist(Configuration conf, String tableName) throws Exception", "code": "{\n\tConnectionProvider conPro = getConnection(conf);\n\ttry {\n\t\tConnection con = conPro.getConnection();\n\t\ttry {\n\t\t\tDatabaseMetaData md = con.getMetaData();\n\t\t\tResultSet rs = md.getTables(null, null, tableName, null);\n\t\t\ttry {\n\t\t\t\treturn rs.next();\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\trs.close();\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tconPro.closeConnection(con);\n\t\t}\n\t}\n\tfinally {\n\t\tconPro.close();\n\t}\n}", "path": "src\\main\\java\\zcx\\HibernateFunc.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u8fd4\u56de\u6307\u5b9a\u7c7b\u6240\u5728\u7684\u5305\uff0c\u5305\u95f4\u4ee5/\u5206\u9694\uff0c\u4e3b\u8981\u7528\u4e8e\u786e\u5b9ahbm\u6587\u4ef6\u7684\u8def\u5f84\n * @param c\n * @return\n */\n", "func_signal": "public static String getPackageAsPath(Class c)", "code": "{\n\tPackage pkg = c.getPackage();\n\treturn pkg == null ? \"\" : pkg.getName().replaceAll(\"\\\\.\", \"/\");\n}", "path": "src\\main\\java\\zcx\\HibernateFunc.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * Retrieves the current Session local to the thread.\n * <p/>\n * If no Session is open, opens a new Session for the running thread.\n *\n * @return Session\n */\n", "func_signal": "public static Session getSession() throws Exception", "code": "{\n\tSession s = (Session) threadSession.get();\n\ttry {\n\t\tif (s == null) {\n\t\t\tif (getInterceptor() != null) {\n\t\t\t\ts = getSessionFactory().openSession(getInterceptor());\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts = getSessionFactory().openSession();\n\t\t\t}\n\t\t\tthreadSession.set(s);\n\t\t}\n\t}\n\tcatch (HibernateException ex) {\n\t\tthrow new Exception(ex);\n\t}\n\treturn s;\n}", "path": "src\\main\\java\\Metadata\\util\\HibernateUtil2.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u6d4b\u8bd5\u8c03\u7528Configuration.setProperties\u8bbe\u7f6e\u5c5e\u6027\n * \u6ce8\u610f\uff1a\u8c03\u7528Configuration.setProperties\u8bbe\u7f6e\u5c5e\u6027\u4f1a\u5c06\u5176\u4ed6\u5730\u65b9\u8bbe\u7f6e\u7684\u5c5e\u6027\u5168\u90e8\u53bb\u9664\uff0c\u53ea\u5269\u4e0b\u4f20\u5165\u7684Properties\u4e2d\u7684\u5c5e\u6027\n */\n", "func_signal": "public void testConfSetProperties()", "code": "{\n\tString propName = \"custm.config.setProperties\";\n\tString propValue = \"setProperties\";\n\tProperties props = new Properties();\n\tprops.put(propName, propValue);\n\n\tConfiguration conf = new Configuration();\n\tconf.setProperties(props);\n\tassertEquals(conf.getProperty(propName), propValue);\n}", "path": "src\\main\\java\\zcx\\propertyconfig\\TestPropertiesConfig.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u6d4b\u8bd5\u8bbe\u7f6ejvm\u53c2\u6570\u6765\u914d\u7f6ehibernate\u5c5e\u6027\n * \u6ce8\u610f\uff1a\u6b64\u65b9\u6cd5\u5fc5\u987b\u5728\u6240\u6709\u6d4b\u8bd5\u5355\u5143\u4e2d\u7b2c\u4e00\u4e2a\u6267\u884c\uff0c\u56e0\u4e3ajvm\u53c2\u6570\u662f\u5728Environment\u4e2d\u7684\u9759\u6001\u5757\u8f7d\u5165\u7684\uff0c\u53ea\u4f1a\u8bfb\u53d6\u4e00\u6b21\u3002\n */\n", "func_signal": "public void testJvmProperty() throws IOException", "code": "{\n\tString propName = \"custm.config.jvm.param\";\n\tString propValue = \"jvm.property\";\n\tSystem.setProperty(propName, propValue);\n\tConfiguration conf = new Configuration();\n\tassertEquals(conf.getProperty(propName), propValue);\n}", "path": "src\\main\\java\\zcx\\propertyconfig\\TestPropertiesConfig.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u6d4b\u8bd5\u5728hibernate.cfg.xml\u4e2d\u914d\u7f6ehibernate\u7684\u719f\u6089\uff0c\u5728\u8be5\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u5c5e\u6027\n * <property name=\"custom.config.hibernatecfg\">file.hibernate.cfg.xml</property>\n */\n", "func_signal": "public void testFileHibernateCfgXml()", "code": "{\n\tConfiguration conf = new Configuration().configure(\"/zcx/propertyconfig/propertyconfig-hibernate.cfg.xml\");\n\tassertEquals(conf.getProperty(\"custom.config.hibernatecfg\"), \"file.hibernate.cfg.xml\");\n}", "path": "src\\main\\java\\zcx\\propertyconfig\\TestPropertiesConfig.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u8fd4\u56de\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868\n * @param conf\n * @param tableName\n * @return\n * @throws Exception\n */\n", "func_signal": "public static String[] getTables(Configuration conf) throws Exception", "code": "{\n\tConnectionProvider conPro = getConnection(conf);\n\ttry {\n\t\tConnection con = conPro.getConnection();\n\t\ttry {\n\t\t\tArrayList<String> list = new ArrayList<String>();\n\t\t\tDatabaseMetaData md = con.getMetaData();\n\t\t\tResultSet rs = md.getTables(null, null, null, null);\n\t\t\ttry {\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tlist.add(rs.getString(\"TABLE_NAME\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\trs.close();\n\t\t\t}\n\t\t\tif (list.size() == 0)\n\t\t\t\treturn null;\n\t\t\treturn list.toArray(new String[list.size()]);\n\t\t}\n\t\tfinally {\n\t\t\tconPro.closeConnection(con);\n\t\t}\n\t}\n\tfinally {\n\t\tconPro.close();\n\t}\n}", "path": "src\\main\\java\\zcx\\HibernateFunc.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * Disconnect and return Session from current Thread.\n *\n * @return Session the disconnected Session\n */\n", "func_signal": "public static Session disconnectSession() throws Exception", "code": "{\n\n\tSession session = getSession();\n\ttry {\n\t\tthreadSession.set(null);\n\t\tif (session.isConnected() && session.isOpen())\n\t\t\tsession.disconnect();\n\t}\n\tcatch (HibernateException ex) {\n\t\tthrow new Exception(ex);\n\t}\n\treturn session;\n}", "path": "src\\main\\java\\Metadata\\util\\HibernateUtil2.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u6d4b\u8bd5\u5982\u4f55\u4eceSession\u4e2d\u83b7\u53d6Connecion\u5bf9\u8c61\uff1b\n */\n", "func_signal": "public void testGetConnectionFromSession()", "code": "{\n\tSessionFactory sf = getSessionFactory();\n\ttry {\n\t\tSession ss = sf.openSession();\n\t\ttry {\n\t\t\tConnection conn = ss.connection();//\u6b64\u65b9\u6cd5\u5df2\u7ecf\u8fc7\u671f\n\t\t\t//\u8981\u76f4\u63a5\u4f7f\u7528connection\u9700\u8981\u8c03\u7528\u5982\u4e0b\u65b9\u6cd5\uff1a\n\t\t\tWork work = new Work() {\n\t\t\t\t@Override\n\t\t\t\tpublic void execute(Connection con) throws SQLException {\n\t\t\t\t\tStatement stat = con.createStatement();\n\t\t\t\t\ttry{\n\t\t\t\t\t\tstat.executeQuery(\"select 1 from dual\");\n\t\t\t\t\t}finally{\n\t\t\t\t\t\tstat.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tss.doWork(work);\n\t\t}\n\t\tfinally {\n\t\t\tss.close();\n\t\t}\n\t}\n\tfinally {\n\t\tsf.close();\n\t}\n}", "path": "src\\main\\java\\dw\\dbpool\\TestDbpool.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * Commit the database transaction.\n */\n", "func_signal": "public static void rollbackTransaction() throws Exception", "code": "{\n\tTransaction tx = (Transaction) threadTransaction.get();\n\ttry {\n\t\tthreadTransaction.set(null);\n\t\tif (tx != null && !tx.wasCommitted() && !tx.wasRolledBack()) {\n\t\t\ttx.rollback();\n\t\t}\n\t}\n\tcatch (HibernateException ex) {\n\t\tthrow new Exception(ex);\n\t}\n\tfinally {\n\t\tcloseSession();\n\t}\n}", "path": "src\\main\\java\\Metadata\\util\\HibernateUtil2.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * Start a new database transaction.\n */\n", "func_signal": "public static void beginTransaction() throws Exception", "code": "{\n\tTransaction tx = (Transaction) threadTransaction.get();\n\ttry {\n\t\tif (tx == null) {\n\t\t\ttx = getSession().beginTransaction();\n\t\t\tthreadTransaction.set(tx);\n\t\t}\n\t}\n\tcatch (HibernateException ex) {\n\t\tthrow new Exception(ex);\n\t}\n}", "path": "src\\main\\java\\Metadata\\util\\HibernateUtil2.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * Closes the Session local to the thread.\n */\n", "func_signal": "public static void closeSession() throws Exception", "code": "{\n\ttry {\n\t\tSession s = (Session) threadSession.get();\n\t\tif (s != null && s.isOpen()) {\n\t\t\tthreadSession.set(null);\n\t\t\ts.close();\n\t\t}\n\t}\n\tcatch (HibernateException ex) {\n\t\tthrow new Exception(ex);\n\t}\n}", "path": "src\\main\\java\\Metadata\\util\\HibernateUtil2.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n   * \u5c06\u6d41\u4e2d\u7684\u6240\u6709\u4fe1\u606f\u8bfb\u51fa\u5e76\u4ee5byte\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\n   */\n", "func_signal": "public static final byte[] stm2bytes(InputStream in) throws IOException", "code": "{\n\tint available = in.available();\n\tif (available <= 0)\n\t\tavailable = 5 * 1024;\n\tByteArrayOutputStream out = new ByteArrayOutputStream(available);\n\tstmTryCopyFrom(in, out);\n\t//\u5982\u679cout.getBuf().length==out.size()\u90a3\u4e48\u76f4\u63a5\u8fd4\u56debuf\u5373\u53ef\uff0c\u4e0d\u5fc5\u518d\u6b21\u590d\u5236\u5185\u5b58\u5757\n\treturn out.toByteArray();\n}", "path": "src\\main\\java\\zcx\\HibernateFunc.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u6d4b\u8bd5\u8c03\u7528Configuration.addProperties\u8bbe\u7f6e\u5c5e\u6027\n * \u6ce8\u610f\uff1a\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u7684\u5c5e\u6027\uff0c\u4f1a\u88ab\u4f20\u5165\u7684Properties\u4e2d\u7684\u5c5e\u6027\u8986\u76d6\n */\n", "func_signal": "public void testConfAddProperties()", "code": "{\n\tString propName = \"custm.config.addProperties\";\n\tString propValue = \"addProperties\";\n\tProperties props = new Properties();\n\tprops.put(propName, propValue);\n\n\tConfiguration conf = new Configuration();\n\tconf.addProperties(props);\n\tassertEquals(conf.getProperty(propName), propValue);\n}", "path": "src\\main\\java\\zcx\\propertyconfig\\TestPropertiesConfig.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u6d4b\u8bd5\u8c03\u7528Configuration.mergeProperties\u8bbe\u7f6e\u5c5e\u6027\n * \u6ce8\u610f\uff1a\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u7684\u5c5e\u6027\uff0c\u4e0d\u4f1a\u88ab\u4f20\u5165\u7684Properties\u4e2d\u7684\u5c5e\u6027\u8986\u76d6\n */\n", "func_signal": "public void testConfMergeProperties()", "code": "{\n\tString propName = \"custm.config.mergeProperties\";\n\tString propValue = \"mergeProperties\";\n\tProperties props = new Properties();\n\tprops.put(propName, propValue);\n\n\tConfiguration conf = new Configuration();\n\tconf.mergeProperties(props);\n\tassertEquals(conf.getProperty(propName), propValue);\n}", "path": "src\\main\\java\\zcx\\propertyconfig\\TestPropertiesConfig.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u8c03\u7528load\u65b9\u6cd5\u7684\u65f6\u5019,hibernate\u4e00\u5f00\u59cb\u5e76\u6ca1\u6709\u67e5\u8be2\u4e8c\u7ea7\u7f13\u5b58\u6216\u662f\u6570\u636e\u5e93, \u800c\u662f\u5148\u8fd4\u56de\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61,\n * \u8be5\u5bf9\u8c61\u53ea\u5305\u542bid,\u53ea\u6709\u663e\u793a\u8c03\u7528\u5bf9\u8c61\u7684\u975eid\u5c5e\u6027\u65f6,\u6bd4\u5982subject.getName(),hibernate\u624d\u4f1a\u53bb\u4e8c\u7ea7\u7f13\u5b58\u67e5\u627e,\n * \u5982\u679c\u6ca1\u547d\u4e2d\u7f13\u5b58\u518d\u53bb\u6570\u636e\u5e93\u627e,\u6570\u636e\u5e93\u8fd8\u627e\u4e0d\u5230\u5219\u629b\u5f02\u5e38.load\u65b9\u6cd5\u4f1a\u5c3d\u91cf\u63a8\u8fdf\u5bf9\u8c61\u7684\u67e5\u627e\u5de5\u4f5c,\u8fd9\u662f\u5b83\u8ddfget\u65b9\u6cd5\u6700\u5927\u7684\u533a\u522b. \n */\n", "func_signal": "@Test\npublic void testSessionLoad()", "code": "{\n\tSubject subject = generateSubject();\n\tassertLoadMissCache(subject.getId());\n\tassertLoadHitCache(subject.getId());\n}", "path": "src\\test\\java\\org\\hibernate\\study\\CacheTest.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7684\u8bbe\u7f6e\n */\n", "func_signal": "public static void setDataSourceProperty(Configuration conf)", "code": "{\n\tProperties props = new Properties();\n\tprops.put(Environment.DRIVER, \"com.mysql.jdbc.Driver\");\n\tprops.put(Environment.URL, \"jdbc:mysql://localhost:3307/hibernate?useUnicode=true&amp;characterEncoding=utf8\");\n\tprops.put(Environment.USER, \"hibernate\");\n\tprops.put(Environment.PASS, \"hibernate\");\n\tprops.put(Environment.POOL_SIZE, \"1\");\n\tprops.put(Environment.DIALECT, \"org.hibernate.dialect.MySQLDialect\");\n\tconf.mergeProperties(props);\n}", "path": "src\\main\\java\\zcx\\HibernateFunc.java", "repo_name": "zcx/hibernate-study", "stars": 9, "license": "other", "language": "java", "size": 9044}
{"docstring": "/** Execute task that updates your Twitter status. */\n", "func_signal": "public void doTask()", "code": "{\n    try {\n        Status updatedStatus = api.updateStatus(status);\n        if(updatedStatus!=null) {\n            controller.addStatus(updatedStatus);\n        }\n    } finally {\n        controller.showRecentTimeline();\n    }\n}", "path": "src\\com\\substanceofcode\\identica\\tasks\\UpdateStatusTask.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/**\n * Get new instance of controller.\n * @param midlet\n * @return\n */\n", "func_signal": "public static IdenticaController getInstance(IdenticaMidlet midlet)", "code": "{\n    if(instance==null) {\n        instance = new IdenticaController(midlet);\n    }\n    return instance;\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** Create new Menu instance \n * @param labels        \n * @param screenWidth \n * @param screenHeight \n */\n", "func_signal": "public Menu(String[] labels, int screenWidth, int screenHeight)", "code": "{\n    this.labels = labels;\n    this.screenWidth = screenWidth;\n    this.screenHeight = screenHeight;\n    this.selectedIndex = 0;\n    this.active = false;\n    \n    int rowHeight = LABEL_FONT.getHeight();\n    this.height = (labels.length+1) * rowHeight;\n    this.top = screenHeight/2 - height/2;\n}", "path": "src\\com\\substanceofcode\\identica\\views\\Menu.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Update Twitter status.\n * @param status    New status\n */\n", "func_signal": "public void updateStatus(String status)", "code": "{\n    UpdateStatusTask task = new UpdateStatusTask( this, api, status );\n    WaitCanvas wait = new WaitCanvas(this, task);\n    wait.setWaitText(\"Updating status...\");\n    display.setCurrent(wait);\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Create new instance of UpdateStatusTask.\n * @param controller    Application controller\n * @param api           Twitter API wrapper\n * @param status        Your current status text\n */\n", "func_signal": "public UpdateStatusTask(\n        IdenticaController controller,\n        IdenticaApi api,\n        String status)", "code": "{\n    this.controller = controller;\n    this.api = api;\n    this.status = status;\n}", "path": "src\\com\\substanceofcode\\identica\\tasks\\UpdateStatusTask.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Handle commands.\n * @param cmd   Activated command.\n * @param disp  Display.\n */\n", "func_signal": "public void commandAction(Command cmd, Displayable disp)", "code": "{\n    if(cmd==okCommand) {\n        controller.updateStatus(this.getString());\n    } else {\n        controller.showRecentTimeline();\n    }\n}", "path": "src\\com\\substanceofcode\\identica\\views\\UpdateStatusTextBox.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Draw menu\n * @param g Application graphics.\n */\n", "func_signal": "public void draw(Graphics g)", "code": "{\n    if(active==false) {\n        return;\n    }\n    /** Draw background and borders */\n    g.setColor(BACK_COLOR);\n    g.fillRect(10, top-2, screenWidth-20, height+4);\n    g.setColor(BORDER_COLOR);\n    g.drawRect(10, top-2, screenWidth-20, height+4);\n    \n    /** Draw menu items */\n    g.setColor(FONT_COLOR);\n    g.setFont(TITLE_FONT);\n    \n    g.drawString(\n        \"Menu\", \n        screenWidth/2 - LABEL_FONT.stringWidth(\"Menu\")/2, \n        top + LABEL_FONT.getHeight(),\n        Graphics.LEFT|Graphics.BOTTOM);\n        \n    g.setFont(LABEL_FONT);\n    for(int menuIndex=0; menuIndex<labels.length; menuIndex++) {\n        if(menuIndex==selectedIndex) {\n            g.setColor(SELECTED_COLOR);\n            g.fillRect(11, top+(menuIndex+1)*LABEL_FONT.getHeight(), screenWidth-22, LABEL_FONT.getHeight());\n            g.setColor(FONT_COLOR);\n        }\n        String label = labels[ menuIndex ];\n        int labelWidth = LABEL_FONT.stringWidth(label);\n        g.drawString(labels[menuIndex], screenWidth/2 - labelWidth/2, top + (menuIndex+2)*LABEL_FONT.getHeight(), Graphics.LEFT|Graphics.BOTTOM);\n    }\n}", "path": "src\\com\\substanceofcode\\identica\\views\\Menu.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** Show friends */\n", "func_signal": "public void showFriends()", "code": "{\n    if(friendsStatuses==null) {\n        RequestFriendsTask task = new RequestFriendsTask(this, api);\n        WaitCanvas wait = new WaitCanvas(this, task);\n        wait.setWaitText(\"Loading friends\");\n        display.setCurrent(wait);\n    } else {\n        timeline.setTimeline(friendsStatuses);\n        display.setCurrent(timeline);\n    }\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Creates a new instance of TwitterController\n * @param midlet Application midlet.\n */\n", "func_signal": "private IdenticaController(IdenticaMidlet midlet)", "code": "{\n    try {\n        this.midlet = midlet;\n        this.display = Display.getDisplay(midlet);\n        this.api = new IdenticaApi();\n        this.timeline = new TimelineCanvas(this);\n        settings = Settings.getInstance(midlet);\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    } catch (RecordStoreException ex) {\n        ex.printStackTrace();\n    }\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/**\n * Draw about canvas.\n * @param g\n */\n", "func_signal": "protected void paint(Graphics g)", "code": "{\n    /** Clear canvas */\n    g.setColor(Theme.BACKGROUND_COLOR);\n    g.fillRect(0, 0, this.getWidth(), this.getHeight());\n    \n    /** Draw about text */\n    int height = 0;\n    height += balloon.draw(g, texts[0], \"Mobidentica\", 5 + height);\n    height += balloon.draw(g, texts[1], \"Mobidentica\", 5 + height);\n    height += balloon.draw(g, texts[2], \"Mobidentica\", 5 + height);\n}", "path": "src\\com\\substanceofcode\\identica\\views\\AboutCanvas.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Creates a new instance of SplashCanvas\n * @param controller \n */\n", "func_signal": "public SplashCanvas(IdenticaController controller)", "code": "{\n    this.controller = controller;\n    this.setFullScreenMode(true);\n    \n    logoImage = ImageUtil.loadImage(\"/images/logo.png\");\n    \n    waitThread = new Thread(this);\n    waitThread.run();\n}", "path": "src\\com\\substanceofcode\\identica\\views\\SplashCanvas.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Draw status lists \n * @param g         Graphics.\n * @param statuses  Vector containing status entries.\n * @param row       Row where drawing is started.\n */\n", "func_signal": "public void draw(Graphics g, Vector stats, int row, boolean drawSelectBox)", "code": "{\n    if(stats==null) {\n        return;\n    }\n    Enumeration statusEnum = stats.elements();\n    \n    int currentRow = row;\n    selectedStatus = null;\n    while(statusEnum.hasMoreElements()) {\n        Status status = (Status)statusEnum.nextElement();\n        //System.out.println(\"Status: \" + status.getText());\n        int statusHeight = status.getHeight();\n\n        if(status.getTextLines()==null) {\n            status.createTextLines(screenWidth-textFont.getHeight()*2-textFont.getHeight()/2, textFont);\n        }\n\n        boolean isSelected = false;\n        if(currentRow>=0 && selectedStatus==null && drawSelectBox==true) {\n            selectedStatus = status;\n            isSelected = true;\n        }\n\n        if( statusHeight==0 ||\n           (statusHeight>0 && (currentRow+statusHeight)>0) ) {\n            /** Draw status only when it is visible */\n            statusHeight = drawStatus(g, currentRow, status, isSelected);\n            status.setHeight( statusHeight );\n        }\n        currentRow += statusHeight;\n        if(currentRow>screenHeight) {\n            break;\n        }\n    }\n}", "path": "src\\com\\substanceofcode\\identica\\views\\StatusList.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** Show login form */\n", "func_signal": "public void showLoginForm()", "code": "{\n    LoginForm loginForm = new LoginForm( this );\n    display.setCurrent( loginForm );\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** Handle repeated key presses. */\n", "func_signal": "protected void keyRepeated(int keyCode)", "code": "{\n    handleUpAndDownKeys(keyCode);\n    repaint();\n}", "path": "src\\com\\substanceofcode\\identica\\views\\TimelineCanvas.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Creates a new instance of StatusList\n * @param width         Screen width\n * @param screenHeight  Screen height\n */\n", "func_signal": "public StatusList(int width, int screenHeight)", "code": "{\n    this.screenWidth = width;\n    this.screenHeight = screenHeight;\n    this.talkBalloon = new TalkBalloon(width, screenHeight);\n}", "path": "src\\com\\substanceofcode\\identica\\views\\StatusList.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Creates a new instance of TimelineCanvas\n * @param controller Application controller\n */\n", "func_signal": "public TimelineCanvas(IdenticaController controller)", "code": "{\n    this.controller = controller;\n    setFullScreenMode(true);\n    \n    /** Menu bar tabs */\n    String[] labels = {\"Archive\", \"Replies\", \"Recent\", \"Direct\", \"Friends\", \"Public\"};\n    menuBar = new TabBar(2, labels, getWidth());\n    \n    /** Menu */\n    String[] menuLabels = {\"Update status\", \"Reload items\", \"People\", \"Settings\", \"About\", \"Exit\", \"Cancel\"};\n    menu = new Menu(menuLabels, getWidth(), getHeight());\n\n    /** Status menu */\n    String[] statusMenuLabels = {\"Open in browser\", \"Open link in browser\", \"Reply\", \"Send direct message\", \"Cancel\"};\n    statusMenu = new Menu(statusMenuLabels, getWidth(), getHeight());\n\n    /** Status list control */\n    statusList = new StatusList(getWidth(), getHeight());        \n    \n    verticalScroll = 0;\n}", "path": "src\\com\\substanceofcode\\identica\\views\\TimelineCanvas.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** Show status updating view. */\n", "func_signal": "public void showStatusView(String prefix)", "code": "{\n    UpdateStatusTextBox statusView = new UpdateStatusTextBox(this, prefix);\n    display.setCurrent(statusView);\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** Show friends */\n", "func_signal": "public void showFriends(Vector friends)", "code": "{\n    String state = \"\";\n    int nullUserCount = 0; // Only for debugging purposes\n    try {\n        if(friends==null) {\n            showError(\"Friends vector is null\");\n            return;\n        }\n        state = \"initializing vector\";\n        friendsStatuses = new Vector();\n        state = \"creating enumeration\";\n        Enumeration friendEnum = friends.elements();\n        state = \"starting the loop friends\";\n        while(friendEnum.hasMoreElements()) {\n            state = \"getting user from element\";\n            User user = (User) friendEnum.nextElement();\n            if(user==null) {\n                // why?\n                nullUserCount++;\n            }\n            state = \"getting user's last status\";\n            if(user.getLastStatus()!=null) {\n                state = \"adding last status to vector\";\n                friendsStatuses.addElement(user.getLastStatus());\n            }\n        }\n        state = \"setting friends timeline\";\n        timeline.setTimeline(friendsStatuses);\n        state = \"showing timeline\";\n        display.setCurrent(timeline);\n    } catch(Exception ex) {\n        this.showError(\"Error while \" + state + \": \" + ex.getMessage()\n                + \"\\nNull users: \" + nullUserCount\n                + \"\\nFriends: \" + friends.capacity());\n    }\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/**\n * Encode a string to the \"x-www-form-urlencoded\" form, enhanced\n * with the UTF-8-in-URL proposal. This is what happens:\n *\n * <ul>\n * <li><p>The ASCII characters 'a' through 'z', 'A' through 'Z',\n *        and '0' through '9' remain the same.\n *\n * <li><p>The unreserved characters - _ . ! ~ * ' ( ) remain the same.\n *\n * <li><p>The space character ' ' is converted into a plus sign '+'.\n *\n * <li><p>All other ASCII characters are converted into the\n *        3-character string \"%xy\", where xy is\n *        the two-digit hexadecimal representation of the character\n *        code\n *\n * <li><p>All non-ASCII characters are encoded in two steps: first\n *        to a sequence of 2 or 3 bytes, using the UTF-8 algorithm;\n *        secondly each of these bytes is encoded as \"%xx\".\n * </ul>\n *\n * @param s The string to be encoded\n * @return The encoded string\n */\n", "func_signal": "public static String encode(String s)", "code": "{\n  StringBuffer sbuf = new StringBuffer();\n  int len = s.length();\n  for (int i = 0; i < len; i++) {\n    int ch = s.charAt(i);\n    if ('A' <= ch && ch <= 'Z') {\t\t// 'A'..'Z'\n      sbuf.append((char)ch);\n    } else if ('a' <= ch && ch <= 'z') {\t// 'a'..'z'\n\t       sbuf.append((char)ch);\n    } else if ('0' <= ch && ch <= '9') {\t// '0'..'9'\n\t       sbuf.append((char)ch);\n    } else if (ch == ' ') {\t\t\t// space\n\t       sbuf.append('+');\n    } else if (ch == '-' || ch == '_'\t\t// unreserved\n        || ch == '.' || ch == '!'\n        || ch == '~' || ch == '*'\n        || ch == '\\'' || ch == '('\n        || ch == ')') {\n      sbuf.append((char)ch);\n    } else if (ch <= 0x007f) {\t\t// other ASCII\n\t       sbuf.append(hex[ch]);\n    } else if (ch <= 0x07FF) {\t\t// non-ASCII <= 0x7FF\n\t       sbuf.append(hex[0xc0 | (ch >> 6)]);\n\t       sbuf.append(hex[0x80 | (ch & 0x3F)]);\n    } else {\t\t\t\t\t// 0x7FF < ch <= 0xFFFF\n\t       sbuf.append(hex[0xe0 | (ch >> 12)]);\n\t       sbuf.append(hex[0x80 | ((ch >> 6) & 0x3F)]);\n\t       sbuf.append(hex[0x80 | (ch & 0x3F)]);\n    }\n  }\n  return sbuf.toString();\n}", "path": "src\\com\\substanceofcode\\utils\\URLUTF8Encoder.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/** \n * Login to twitter.\n * @param username Username for Twitter\n * @param password Password for Twitter\n */\n", "func_signal": "public void login(String username, String password, String serviceUrl)", "code": "{\n    api.setUsername(username);\n    api.setPassword(password);\n    api.setUrl(serviceUrl);\n    showRecentTimeline();\n}", "path": "src\\com\\substanceofcode\\identica\\IdenticaController.java", "repo_name": "tlaukkanen/mobidentica", "stars": 15, "license": "None", "language": "java", "size": 142}
{"docstring": "/**\n * \n * @param visibleObject\n */\n", "func_signal": "public static Future<?> scheduleRespawnTask(final VisibleObject visibleObject)", "code": "{\n\tfinal World world = World.getInstance();\n\tfinal int interval = visibleObject.getSpawn().getSpawnGroup().getInterval();\n\n\treturn ThreadPoolManager.getInstance().schedule(new Runnable()\n\t{\n\t\t@Override\n\t\tpublic void run()\n\t\t{\n\t\t\tSpawnTime spawnTime = visibleObject.getSpawn().getSpawnGroup().getSpawnTime();\n\t\t\tif(spawnTime != null)\n\t\t\t{\n\t\t\t\tDayTime dayTime = GameTimeManager.getGameTime().getDayTime();\n\t\t\t\tif(!spawnTime.isAllowedDuring(dayTime))\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tint instanceId = visibleObject.getInstanceId();\n\t\t\tint worldId = visibleObject.getSpawn().getWorldId();\n\t\t\tboolean instanceExists = InstanceService.isInstanceExist(worldId, instanceId);\n\t\t\t\n\t\t\tif(visibleObject.getSpawn().isNoRespawn(instanceId) || !instanceExists)\n\t\t\t{\n\t\t\t\tvisibleObject.getController().delete();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvisibleObject.getSpawn().getSpawnGroup().exchangeSpawn(visibleObject);\n\t\t\t\tworld.setPosition(visibleObject, worldId, visibleObject.getSpawn().getX(), visibleObject.getSpawn().getY(), visibleObject.getSpawn().getZ(), visibleObject.getSpawn().getHeading());\n\t\t\t\t//call onRespawn before actual spawning\n\t\t\t\tvisibleObject.getController().onRespawn();\n\t\t\t\tworld.spawn(visibleObject);\n\t\t\t}\n\t\t}\n\t\t\n\t}, interval * 1000);\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\services\\RespawnService.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Create new MapRegion and add link to neighbours.\n *\n * @param regionId\n * @return newly created map region\n */\n", "func_signal": "private MapRegion createMapRegion(Integer regionId)", "code": "{\n\tMapRegion r = new MapRegion(regionId, this);\n\tregions.put(regionId, r);\n\n\tint rx = regionId / maxWorldSize;\n\tint ry = regionId % maxWorldSize;\n\n\tfor(int x = rx - 1; x <= rx + 1; x++)\n\t{\n\t\tfor(int y = ry - 1; y <= ry + 1; y++)\n\t\t{\n\t\t\tif(x == rx && y == ry)\n\t\t\t\tcontinue;\n\t\t\tint neighbourId = x * maxWorldSize + y;\n\n\t\t\tMapRegion neighbour = regions.get(neighbourId);\n\t\t\tif(neighbour != null)\n\t\t\t{\n\t\t\t\tr.addNeighbourRegion(neighbour);\n\t\t\t\tneighbour.addNeighbourRegion(r);\n\t\t\t}\n\t\t}\n\t}\n\treturn r;\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\world\\WorldMapInstance.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * \n * @param x\n * @param y\n * @param z\n * @param heading\n * @param walkerId\n * @param randomWalk\n * @param npcstate\n */\n", "func_signal": "public SpawnTemplate(float x, float y, float z, byte heading, int walkerId, int randomWalk, int npcfly)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n\tthis.z = z;\n\tthis.heading = heading;\n\tthis.walkerId = walkerId;\n\tthis.randomWalk = randomWalk;\n\tthis.npcfly = npcfly;\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\model\\templates\\spawn\\SpawnTemplate.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Returns list of classes that are members of a package\n * \n * @param packageName\n *            package to search for classes\n * @return list of classes that are package members\n * @throws IOException\n *             if was unable to load class\n */\n", "func_signal": "public Set<JavaFileObject> getClassesForPackage(String packageName) throws IOException", "code": "{\n\tSet<JavaFileObject> result = new HashSet<JavaFileObject>();\n\n\t// load parent\n\tClassLoader parent = getParent();\n\tif(parent instanceof ScriptClassLoaderImpl)\n\t{\n\t\tScriptClassLoaderImpl pscl = (ScriptClassLoaderImpl) parent;\n\t\tresult.addAll(pscl.getClassesForPackage(packageName));\n\t}\n\n\t// load current classloader compiled classes\n\tfor(String cn : classFileManager.getCompiledClasses().keySet())\n\t{\n\t\tif(ClassUtils.isPackageMember(cn, packageName))\n\t\t{\n\t\t\tBinaryClass bc = classFileManager.getCompiledClasses().get(cn);\n\t\t\tresult.add(bc);\n\t\t}\n\t}\n\n\t// load libraries\n\tfor(String cn : libraryClasses)\n\t{\n\t\tif(ClassUtils.isPackageMember(cn, packageName))\n\t\t{\n\t\t\tBinaryClass bc = new BinaryClass(cn);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbyte[] data = getRawClassByName(cn);\n\t\t\t\tOutputStream os = bc.openOutputStream();\n\t\t\t\tos.write(data);\n\t\t\t}\n\t\t\tcatch(IOException e)\n\t\t\t{\n\t\t\t\tlog.error(\"Error while loading class from package \" + packageName, e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tresult.add(bc);\n\t\t}\n\t}\n\n\treturn result;\n}", "path": "commons\\src\\org\\openaion\\commons\\scripting\\impl\\javacompiler\\ScriptClassLoaderImpl.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * @param timeInSeconds\n */\n", "func_signal": "public void setTimerEnd(int timeInSeconds)", "code": "{\n\ttimerEnd = Calendar.getInstance();\n\ttimerEnd.setTimeInMillis(Calendar.getInstance().getTimeInMillis() + timeInSeconds*1000);\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\world\\WorldMapInstance.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setDefinedClass(String name, Class<?> clazz)", "code": "{\n\tBinaryClass bc = classFileManager.getCompiledClasses().get(name);\n\n\tif(bc == null)\n\t{\n\t\tthrow new IllegalArgumentException(\"Attempt to set defined class for class that was not compiled?\");\n\t}\n\n\tbc.setDefinedClass(clazz);\n}", "path": "commons\\src\\org\\openaion\\commons\\scripting\\impl\\javacompiler\\ScriptClassLoaderImpl.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * @param player\n */\n", "func_signal": "public static void onLogin(Player player)", "code": "{\n\tKisk kisk = kiskContainer.get(player);\n\tif (kisk != null)\n\t\tkisk.reAddPlayer(player);\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\services\\KiskService.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Remove kisk references and containers.\n * @param kisk\n */\n", "func_signal": "public static void removeKisk(Kisk kisk)", "code": "{\n\tfor (Player member : kisk.getCurrentMemberList())\n\t{\n\t\tkiskContainer.remove(member);\n\t\t\n\t\tif (member.getKisk() == kisk)\n\t\t\tmember.setKisk(null);\n\t\t\n\t\tif (member.getKisk() == null)\n\t\t\tTeleportService.sendSetBindPoint(member);\n\n\t\tif (member.getLifeStats().isAlreadyDead())\n\t\t\tPacketSendUtility.sendPacket(member, new SM_DIE(false, false, 0));\n\t\t// TODO: Figure out what happens when kisk expires, but player has self-rez stone or Rebirth effect.\n\t}\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\services\\KiskService.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Set<String> getCompiledClasses()", "code": "{\n\tSet<String> compiledClasses = classFileManager.getCompiledClasses().keySet();\n\treturn Collections.unmodifiableSet(compiledClasses);\n}", "path": "commons\\src\\org\\openaion\\commons\\scripting\\impl\\javacompiler\\ScriptClassLoaderImpl.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * \n * @param npc\n * @return Future<?>\n */\n", "func_signal": "public static Future<?> scheduleDecayTask(final Npc npc)", "code": "{\n\tint respawnInterval = npc.getSpawn().getSpawnGroup().getInterval();\n\tint decayInterval = Math.round(respawnInterval * 0.8f);\n\tif(decayInterval > 240)\n\t\tdecayInterval = 240;\n\t\n\treturn ThreadPoolManager.getInstance().schedule(new Runnable()\n\t{\n\t\t@Override\n\t\tpublic void run()\n\t\t{\n\t\t\tnpc.getController().onDespawn(false);\n\t\t}\n\t}, decayInterval * 1000);\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\services\\RespawnService.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Set the randomWalk value only if it is 0.\n * @param rw\n */\n", "func_signal": "protected void setRandomWalkNr(int rw)", "code": "{\n\tif(randomWalk == 0)\n\t{\n\t\trandomWalk = rw;\n\t}\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\model\\templates\\spawn\\SpawnTemplate.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Constructor.\n *\n * @param parent\n */\n", "func_signal": "public WorldMapInstance(WorldMap parent, int instanceId)", "code": "{\n\tsuper();\n\tthis.parent = parent;\n\tthis.instanceId = instanceId;\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\world\\WorldMapInstance.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/*\n * returns Food groups in which item id was defined\n */\n", "func_signal": "public List<FoodType> getFoodTypes(int itemId)", "code": "{\n\tList<FoodType> list = new ArrayList<FoodType>();\n\tif (allFood.containsKey(itemId))\n\t{\n\t\tlist.addAll(allFood.get(itemId));\n\t}\n\t\n\tItemTemplate template = DataManager.ITEM_DATA.getItemTemplate(itemId);\n\tif (template.getItemQuality() == ItemQuality.JUNK)\n\t{\n\t\tif (template.getItemQuestId() == 0)\n\t\t{\n\t\t\t// MISC items not listed\n\t\t\tlist.add(FoodType.MISC);\n\t\t\treturn list;\n\t\t}\n\t}\n\n\treturn list;\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\model\\templates\\pet\\FoodGroups.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void writeImpl(AionConnection con, ByteBuffer buf)", "code": "{\n\tif(GSConfig.SERVER_VERSION.startsWith(\"2.1\"))\n\t{\n\t\twriteH(buf, 0x01);\n\t\twriteH(buf, (-1*completeQuestList.size()) & 0xFFFF);\n\t\tfor(QuestState qs : completeQuestList.values())\n\t\t{\n\t\t\twriteH(buf, qs.getQuestId());\n\t\t\twriteH(buf, 0x00);\n\t\t\twriteC(buf, qs.getCompleteCount());\n\t\t}\n\t}\n\telse\n\t{\n\t\twriteH(buf, completeQuestList.size());\n\t\tfor(QuestState qs : completeQuestList.values())\n\t\t{\n\t\t\twriteH(buf, qs.getQuestId());\n\t\t\twriteH(buf, 0x00);\n\t\t\twriteC(buf, qs.getCompleteCount());\n\t\t}\n\t\twriteC(buf, startedQuestList.size());\n\t\tfor(QuestState qs : startedQuestList) // quest list size ( retail max is 30 )\n\t\t{\n\t\t\twriteH(buf, qs.getQuestId());\n\t\t\twriteH(buf, 0);\n\t\t}\n\t\tfor(QuestState qs : startedQuestList)\n\t\t{\n\t\t\twriteC(buf, qs.getStatus().value());\n\t\t\twriteD(buf, qs.getQuestVars().getQuestVars());\n\t\t\twriteC(buf, 0);\n\t\t}\n\t}\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\network\\aion\\serverpackets\\SM_QUEST_LIST.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * State TALKING\n * AI NpcAi\n */\n", "func_signal": "@Override\npublic void handleState(AIState state, AI<?> ai)", "code": "{\n\tfinal Creature owner = ai.getOwner();\n\n\tif(!((Npc)owner).hasWalkRoutes())\n\t{\n\t\tai.clearDesires();\n\t\tai.stop();\n\n\t\tThreadPoolManager.getInstance().schedule(new Runnable(){\n\t\t\t@Override\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\towner.getAi().setAiState(AIState.THINKING);\n\t\t\t}\n\t\t}, 60000);\n\t}\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\ai\\state\\handler\\TalkingStateHandler.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**c\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void runImpl()", "code": "{\n\tPlayer player = getConnection().getActivePlayer();\n\n\tif(player == null)\n\t\treturn;\n\n\tint hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);\n\n\tTitleService.checkPlayerTitles(player);\n\n\tif(CustomConfig.RETAIL_EMOTIONS)\n\t\tEmotionService.removeExpiredEmotions(player);\n\n\tif(CustomConfig.ENABLE_SURVEYS)\n\t\tHTMLService.onPlayerLogin(player);\n\n\t//send dredgion instance entry\n\tif((hour >= 0 && hour <= 1) || (hour >= 12 && hour <= 13) || (hour >= 20 && hour <= 21))\n\t{\n\t\tif(!player.getReceiveEntry())\n\t\t{\n\t\t\tDredgionInstanceService.getInstance().sendDredgionEntry(player);\n\t\t\tplayer.setReceiveEntry(true);\n\t\t}\n\t}\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\network\\aion\\clientpackets\\CM_PLAYER_LISTENER.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Finds class with the specified name from the URL search path. Any URLs referring to JAR files are loaded and\n * opened as needed until the class is found.\n * \n * @param name\n *            the name of the class\n * @return the resulting class data\n * @throws IOException\n *             if the class could not be found\n */\n", "func_signal": "protected byte[] getRawClassByName(String name) throws IOException", "code": "{\n\tURL resource = findResource(name.replace('.', '/').concat(\".class\"));\n\tInputStream is = null;\n\tbyte[] clazz = null;\n\n\ttry\n\t{\n\t\tis = resource.openStream();\n\t\tclazz = IOUtils.toByteArray(is);\n\t}\n\tcatch(IOException e)\n\t{\n\t\tlog.error(\"Error while loading class data\", e);\n\t\tthrow e;\n\t}\n\tfinally\n\t{\n\t\tif(is != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tis.close();\n\t\t\t}\n\t\t\tcatch(IOException e)\n\t\t\t{\n\t\t\t\tlog.error(\"Error while closing stream\", e);\n\t\t\t}\n\t\t}\n\t}\n\treturn clazz;\n}", "path": "commons\\src\\org\\openaion\\commons\\scripting\\impl\\javacompiler\\ScriptClassLoaderImpl.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Thransforms string to float\n * \n * @param value\n *            value that will be transformed\n * @param field\n *            value will be assigned to this field\n * @return Float that represents value\n * @throws TransformationException\n *             if something went wrong\n */\n", "func_signal": "@Override\npublic Float transform(String value, Field field) throws TransformationException", "code": "{\n\ttry\n\t{\n\t\treturn Float.parseFloat(value);\n\t}\n\tcatch(Exception e)\n\t{\n\t\tthrow new TransformationException(e);\n\t}\n}", "path": "commons\\src\\org\\openaion\\commons\\configuration\\transformers\\FloatTransformer.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * \n * @param kisk\n * @param player\n */\n", "func_signal": "public static void onBind(Kisk kisk, Player player)", "code": "{\n\tif (player.getKisk() != null)\n\t{\n\t\tkiskContainer.remove(player);\n\t\tplayer.getKisk().removePlayer(player);\n\t}\n\t\n\tkiskContainer.add(kisk, player);\n\tkisk.addPlayer(player);\n\t\n\t// Send Bind Point Data\n\tTeleportService.sendSetBindPoint(player);\n\t\n\t// Send System Message\n\tPacketSendUtility.sendPacket(player, SM_SYSTEM_MESSAGE.STR_BINDSTONE_REGISTER);\n\t\n\t// Send Animated Bind Flash\n\tPacketSendUtility.broadcastPacket(player, new SM_LEVEL_UPDATE(player.getObjectId(),\n\t\t2, player.getCommonData().getLevel()), true);\n}", "path": "gameserver\\src\\org\\openaion\\gameserver\\services\\KiskService.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Class<?> getDefinedClass(String name)", "code": "{\n\tBinaryClass bc = classFileManager.getCompiledClasses().get(name);\n\tif(bc == null)\n\t{\n\t\treturn null;\n\t}\n\n\treturn bc.getDefinedClass();\n}", "path": "commons\\src\\org\\openaion\\commons\\scripting\\impl\\javacompiler\\ScriptClassLoaderImpl.java", "repo_name": "SkyFire/aion_ext", "stars": 9, "license": "None", "language": "java", "size": 48090}
{"docstring": "/**\n * Creates a new {@link TransferableObject} that will return the object\n * that is returned by <var>fetcher</var>. Along with the\n * {@link #DATA_FLAVOR} associated with this class, this creates a\n * custom data flavor with a representation class <var>dataClass</var>\n * and the MIME type\n * <tt>application/x-net.iharder.dnd.TransferableObject</tt>.\n * \n * @see Fetcher\n * @param dataClass The {@link java.lang.Class} to use in the custom\n *        data flavor\n * @param fetcher The {@link Fetcher} that will return the data object\n * @since 1.1\n */\n", "func_signal": "public TransferableObject(final Class dataClass, final Fetcher fetcher)", "code": "{\n    this.fetcher = fetcher;\n    this.customFlavor = new java.awt.datatransfer.DataFlavor(dataClass,\n            MIME_TYPE);\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Full constructor with a specified border and debugging optionally turned\n * on. With Debugging turned on, more status messages will be displayed to\n * <tt>out</tt>. A common way to use this constructor is with\n * <tt>System.out</tt> or <tt>System.err</tt>. A <tt>null</tt> value for the\n * parameter <tt>out</tt> will result in no debugging output.\n * \n * @param out PrintStream to record debugging info or null for no debugging.\n * @param c Component on which files will be dropped.\n * @param dragBorder Border to use on <tt>JComponent</tt> when dragging\n *        occurs.\n * @param recursive Recursively set children as drop targets.\n * @param listener Listens for <tt>filesDropped</tt>.\n * @since 1.0\n */\n", "func_signal": "public FileDrop(final java.io.PrintStream out, final java.awt.Component c,\n        final javax.swing.border.Border dragBorder,\n        final boolean recursive, final Listener listener)", "code": "{\n\n    if (supportsDnD()) { // Make a drop listener\n        dropListener = new java.awt.dnd.DropTargetListener() {\n            public void dragEnter(final java.awt.dnd.DropTargetDragEvent evt) {\n                log(out, \"FileDrop: dragEnter event.\");\n\n                // Is this an acceptable drag event?\n                if (isDragOk(out, evt)) {\n                    // If it's a Swing component, set its border\n                    if (c instanceof javax.swing.JComponent) {\n                        final javax.swing.JComponent jc = (javax.swing.JComponent) c;\n                        normalBorder = jc.getBorder();\n                        log(out, \"FileDrop: normal border saved.\");\n                        jc.setBorder(dragBorder);\n                        log(out, \"FileDrop: drag border set.\");\n                    } // end if: JComponent\n\n                    // Acknowledge that it's okay to enter\n                    // evt.acceptDrag(\n                    // java.awt.dnd.DnDConstants.ACTION_COPY_OR_MOVE );\n                    evt.acceptDrag(java.awt.dnd.DnDConstants.ACTION_COPY);\n                    log(out, \"FileDrop: event accepted.\");\n                } // end if: drag ok\n                else { // Reject the drag event\n                    evt.rejectDrag();\n                    log(out, \"FileDrop: event rejected.\");\n                } // end else: drag not ok\n            } // end dragEnter\n\n            public void dragOver(final java.awt.dnd.DropTargetDragEvent evt) { // This\n                                                                               // is\n                                                                               // called\n                                                                               // continually\n                                                                               // as\n                                                                               // long\n                                                                               // as\n                                                                               // the\n                                                                               // mouse\n                                                                               // is\n                                                                               // over\n                                                                               // the\n                                                                               // drag\n                                                                               // target.\n            } // end dragOver\n\n            public void drop(final java.awt.dnd.DropTargetDropEvent evt) {\n                log(out, \"FileDrop: drop event.\");\n                try { // Get whatever was dropped\n                    final java.awt.datatransfer.Transferable tr = evt\n                            .getTransferable();\n\n                    // Is it a file list?\n                    if (tr.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.javaFileListFlavor)) {\n                        // Say we'll take it.\n                        // evt.acceptDrop (\n                        // java.awt.dnd.DnDConstants.ACTION_COPY_OR_MOVE );\n                        evt.acceptDrop(java.awt.dnd.DnDConstants.ACTION_COPY);\n                        log(out, \"FileDrop: file list accepted.\");\n\n                        // Get a useful list\n                        final java.util.List fileList = (java.util.List) tr\n                                .getTransferData(java.awt.datatransfer.DataFlavor.javaFileListFlavor);\n                        final java.util.Iterator iterator = fileList\n                                .iterator();\n\n                        // Convert list to array\n                        final java.io.File[] filesTemp = new java.io.File[fileList\n                                .size()];\n                        fileList.toArray(filesTemp);\n                        final java.io.File[] files = filesTemp;\n\n                        // Alert listener to drop.\n                        if (listener != null) {\n                            listener.filesDropped(files);\n                        }\n\n                        // Mark that drop is completed.\n                        evt.getDropTargetContext().dropComplete(true);\n                        log(out, \"FileDrop: drop complete.\");\n                    } // end if: file list\n                    else // this section will check for a reader flavor.\n                    {\n                        // Thanks, Nathan!\n                        // BEGIN 2007-09-12 Nathan Blomquist -- Linux\n                        // (KDE/Gnome) support added.\n                        final DataFlavor[] flavors = tr\n                                .getTransferDataFlavors();\n                        boolean handled = false;\n                        for (int zz = 0; zz < flavors.length; zz++) {\n                            if (flavors[zz].isRepresentationClassReader()) {\n                                // Say we'll take it.\n                                // evt.acceptDrop (\n                                // java.awt.dnd.DnDConstants.ACTION_COPY_OR_MOVE\n                                // );\n                                evt.acceptDrop(java.awt.dnd.DnDConstants.ACTION_COPY);\n                                log(out, \"FileDrop: reader accepted.\");\n\n                                final Reader reader = flavors[zz]\n                                        .getReaderForText(tr);\n\n                                final BufferedReader br = new BufferedReader(\n                                        reader);\n\n                                if (listener != null) {\n                                    listener.filesDropped(createFileArray(\n                                            br, out));\n                                }\n\n                                // Mark that drop is completed.\n                                evt.getDropTargetContext().dropComplete(\n                                        true);\n                                log(out, \"FileDrop: drop complete.\");\n                                handled = true;\n                                break;\n                            }\n                        }\n                        if (!handled) {\n                            log(out,\n                                    \"FileDrop: not a file list or reader - abort.\");\n                            evt.rejectDrop();\n                        }\n                        // END 2007-09-12 Nathan Blomquist -- Linux\n                        // (KDE/Gnome) support added.\n                    } // end else: not a file list\n                } // end try\n                catch (final java.io.IOException io) {\n                    log(out, \"FileDrop: IOException - abort:\");\n                    io.printStackTrace(out);\n                    evt.rejectDrop();\n                } // end catch IOException\n                catch (final java.awt.datatransfer.UnsupportedFlavorException ufe) {\n                    log(out,\n                            \"FileDrop: UnsupportedFlavorException - abort:\");\n                    ufe.printStackTrace(out);\n                    evt.rejectDrop();\n                } // end catch: UnsupportedFlavorException\n                finally {\n                    // If it's a Swing component, reset its border\n                    if (c instanceof javax.swing.JComponent) {\n                        final javax.swing.JComponent jc = (javax.swing.JComponent) c;\n                        jc.setBorder(normalBorder);\n                        log(out, \"FileDrop: normal border restored.\");\n                    } // end if: JComponent\n                } // end finally\n            } // end drop\n\n            public void dragExit(final java.awt.dnd.DropTargetEvent evt) {\n                log(out, \"FileDrop: dragExit event.\");\n                // If it's a Swing component, reset its border\n                if (c instanceof javax.swing.JComponent) {\n                    final javax.swing.JComponent jc = (javax.swing.JComponent) c;\n                    jc.setBorder(normalBorder);\n                    log(out, \"FileDrop: normal border restored.\");\n                } // end if: JComponent\n            } // end dragExit\n\n            public void dropActionChanged(\n                    final java.awt.dnd.DropTargetDragEvent evt) {\n                log(out, \"FileDrop: dropActionChanged event.\");\n                // Is this an acceptable drag event?\n                if (isDragOk(out, evt)) { // evt.acceptDrag(\n                                          // java.awt.dnd.DnDConstants.ACTION_COPY_OR_MOVE\n                                          // );\n                    evt.acceptDrag(java.awt.dnd.DnDConstants.ACTION_COPY);\n                    log(out, \"FileDrop: event accepted.\");\n                } // end if: drag ok\n                else {\n                    evt.rejectDrag();\n                    log(out, \"FileDrop: event rejected.\");\n                } // end else: drag not ok\n            } // end dropActionChanged\n        }; // end DropTargetListener\n\n        // Make the component (and possibly children) drop targets\n        makeDropTarget(out, c, recursive);\n    } // end if: supports dnd\n    else {\n        log(out, \"FileDrop: Drag and drop is not supported with this JVM\");\n    } // end else: does not support DnD\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Constructor with a default border and the option to recursively set drop\n * targets. If your component is a <tt>java.awt.Container</tt>, then each of\n * its children components will also listen for drops, though only the\n * parent will change borders.\n * \n * @param c Component on which files will be dropped.\n * @param recursive Recursively set children as drop targets.\n * @param listener Listens for <tt>filesDropped</tt>.\n * @since 1.0\n */\n", "func_signal": "public FileDrop(final java.awt.Component c, final boolean recursive,\n        final Listener listener)", "code": "{\n    this(null, // Logging stream\n            c, // Drop target\n            javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2,\n                    defaultBorderColor), // Drag border\n            recursive, // Recursive\n            listener);\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Returns a two- or three-element array containing first the custom\n * data flavor, if one was created in the constructors, second the\n * default {@link #DATA_FLAVOR} associated with\n * {@link TransferableObject}, and third the\n * {@link java.awt.datatransfer.DataFlavor.stringFlavor}.\n * \n * @return An array of supported data flavors\n * @since 1.1\n */\n", "func_signal": "public java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()", "code": "{\n    if (customFlavor != null)\n        return new java.awt.datatransfer.DataFlavor[] { customFlavor,\n                DATA_FLAVOR,\n                java.awt.datatransfer.DataFlavor.stringFlavor }; // end\n                                                                 // flavors\n                                                                 // array\n    else\n        return new java.awt.datatransfer.DataFlavor[] { DATA_FLAVOR,\n                java.awt.datatransfer.DataFlavor.stringFlavor }; // end\n                                                                 // flavors\n                                                                 // array\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/** Outputs <tt>message</tt> to <tt>out</tt> if it's not null. */\n", "func_signal": "private static void log(final java.io.PrintStream out, final String message)", "code": "{ // Log\n                                                                               // message\n                                                                               // if\n                                                                               // requested\n    if (out != null) {\n        out.println(message);\n    }\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/** Determine if the dragged data is a file list. */\n", "func_signal": "private boolean isDragOk(final java.io.PrintStream out,\n        final java.awt.dnd.DropTargetDragEvent evt)", "code": "{\n    boolean ok = false;\n\n    // Get data flavors being dragged\n    final java.awt.datatransfer.DataFlavor[] flavors = evt\n            .getCurrentDataFlavors();\n\n    // See if any of the flavors are a file list\n    int i = 0;\n    while (!ok && i < flavors.length) {\n        // BEGIN 2007-09-12 Nathan Blomquist -- Linux (KDE/Gnome) support\n        // added.\n        // Is the flavor a file list?\n        final DataFlavor curFlavor = flavors[i];\n        if (curFlavor\n                .equals(java.awt.datatransfer.DataFlavor.javaFileListFlavor)\n                || curFlavor.isRepresentationClassReader()) {\n            ok = true;\n        }\n        // END 2007-09-12 Nathan Blomquist -- Linux (KDE/Gnome) support\n        // added.\n        i++;\n    } // end while: through flavors\n\n    // If logging is enabled, show data flavors\n    if (out != null) {\n        if (flavors.length == 0) {\n            log(out, \"FileDrop: no data flavors.\");\n        }\n        for (i = 0; i < flavors.length; i++) {\n            log(out, flavors[i].toString());\n        }\n    } // end if: logging enabled\n\n    return ok;\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Searches for a regex in the instruction list and returns all groups for the first match.\n * @param regex the regular expression\n * @return the groups with matching instructions\n */\n", "func_signal": "public AbstractInsnNode[][] findGroups(final String regex)", "code": "{\n\ttry {\n\t\tfinal Matcher regexMatcher = Pattern.compile(processRegex(regex),\n\t\t\t\tPattern.MULTILINE).matcher(insnString);\n\t\tif (regexMatcher.find()) {\n\t\t\tfinal AbstractInsnNode[][] result = new AbstractInsnNode[regexMatcher.groupCount() + 1][0];\n\t\t\tfor (int i = 0; i <= regexMatcher.groupCount(); i++) {\n                    result[i] = makeResult(regexMatcher.start(i), regexMatcher.end(i));\n                }\n\t\t\treturn result;\n\t\t}\n\t} catch (final PatternSyntaxException ex) {\n\t\tex.printStackTrace();\n\t}\n\treturn new AbstractInsnNode[0][0];\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\searching\\RegexInsnFinder.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "// END 2007-09-12 Nathan Blomquist -- Linux (KDE/Gnome) support added.\n", "func_signal": "private void makeDropTarget(final java.io.PrintStream out,\n        final java.awt.Component c, final boolean recursive)", "code": "{\n    // Make drop target\n    final java.awt.dnd.DropTarget dt = new java.awt.dnd.DropTarget();\n    try {\n        dt.addDropTargetListener(dropListener);\n    } // end try\n    catch (final java.util.TooManyListenersException e) {\n        e.printStackTrace();\n        log(out,\n                \"FileDrop: Drop will not work due to previous error. Do you have another listener attached?\");\n    } // end catch\n\n    // Listen for hierarchy changes and remove the drop target when the\n    // parent gets cleared out.\n    c.addHierarchyListener(new java.awt.event.HierarchyListener() {\n        public void hierarchyChanged(final java.awt.event.HierarchyEvent evt) {\n            log(out, \"FileDrop: Hierarchy changed.\");\n            final java.awt.Component parent = c.getParent();\n            if (parent == null) {\n                c.setDropTarget(null);\n                log(out, \"FileDrop: Drop target cleared from component.\");\n            } // end if: null parent\n            else {\n                new java.awt.dnd.DropTarget(c, dropListener);\n                log(out, \"FileDrop: Drop target added to component.\");\n            } // end else: parent not null\n        } // end hierarchyChanged\n    }); // end hierarchy listener\n    if (c.getParent() != null) {\n        new java.awt.dnd.DropTarget(c, dropListener);\n    }\n\n    if (recursive && (c instanceof java.awt.Container)) {\n        // Get the container\n        final java.awt.Container cont = (java.awt.Container) c;\n\n        // Get it's components\n        final java.awt.Component[] comps = cont.getComponents();\n\n        // Set it's components as listeners also\n        for (int i = 0; i < comps.length; i++) {\n            makeDropTarget(out, comps[i], recursive);\n        }\n    } // end if: recursively set components as listener\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Constructs a {@link FileDrop} with a default light-blue border and, if\n * <var>c</var> is a {@link java.awt.Container}, recursively sets all\n * elements contained within as drop targets, though only the top level\n * container will change borders.\n * \n * @param c Component on which files will be dropped.\n * @param listener Listens for <tt>filesDropped</tt>.\n * @since 1.0\n */\n", "func_signal": "public FileDrop(final java.awt.Component c, final Listener listener)", "code": "{\n    this(null, // Logging stream\n            c, // Drop target\n            javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2,\n                    defaultBorderColor), // Drag border\n            true, // Recursive\n            listener);\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Searches for a regex in the instruction list and returns the first match.\n * @param regex the regular expression\n * @return the matching instructions\n */\n", "func_signal": "public AbstractInsnNode[] find(final String regex)", "code": "{\n\ttry {\n\t\tfinal Matcher regexMatcher = Pattern.compile(processRegex(regex),\n\t\t\t\tPattern.MULTILINE).matcher(insnString);\n\t\tif (regexMatcher.find())\n\t\t\treturn makeResult(regexMatcher.start(), regexMatcher.end());\n\t} catch (final PatternSyntaxException ex) {\n\t\tex.printStackTrace();\n\t}\n\treturn new AbstractInsnNode[0];\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\searching\\RegexInsnFinder.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Returns <tt>true</tt> if <var>flavor</var> is one of the supported\n * flavors. Flavors are supported using the <code>equals(...)</code>\n * method.\n * \n * @param flavor The data flavor to check\n * @return Whether or not the flavor is supported\n * @since 1.1\n */\n", "func_signal": "public boolean isDataFlavorSupported(\n        final java.awt.datatransfer.DataFlavor flavor)", "code": "{\n    // Native object\n    if (flavor.equals(DATA_FLAVOR))\n        return true;\n\n    // String\n    if (flavor.equals(java.awt.datatransfer.DataFlavor.stringFlavor))\n        return true;\n\n    // We can't do anything else\n    return false;\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Removes the drag-and-drop hooks from the component and optionally from\n * the all children. You should call this if you add and remove components\n * after you've set up the drag-and-drop.\n * \n * @param out Optional {@link java.io.PrintStream} for logging drag and drop\n *        messages\n * @param c The component to unregister\n * @param recursive Recursively unregister components within a container\n * @since 1.0\n */\n", "func_signal": "public static boolean remove(final java.io.PrintStream out,\n        final java.awt.Component c, final boolean recursive)", "code": "{ // Make sure\n                                                               // we support\n                                                               // dnd.\n    if (supportsDnD()) {\n        log(out, \"FileDrop: Removing drag-and-drop hooks.\");\n        c.setDropTarget(null);\n        if (recursive && (c instanceof java.awt.Container)) {\n            final java.awt.Component[] comps = ((java.awt.Container) c)\n                    .getComponents();\n            for (int i = 0; i < comps.length; i++) {\n                remove(out, comps[i], recursive);\n            }\n            return true;\n        } // end if: recursive\n        else\n            return false;\n    } // end if: supports DnD\n    else\n        return false;\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Refreshes the internal instruction list when you have made changes to the method.\n */\n", "func_signal": "public void refresh()", "code": "{\n\torigInstructions = cleanInsn(mn.instructions);\n\tfinal List<AbstractInsnNode> il = new ArrayList<AbstractInsnNode>();\n\tfor (final AbstractInsnNode ain : mn.instructions.toArray())\n\t\tif (ain.getOpcode() >= 0) {\n                il.add(ain);\n            }\n\tinstructions = il.toArray(new AbstractInsnNode[il.size()]);\n\toffsets = new int[instructions.length];\n\tinsnString = \"\";\n\tfor (int i = 0; i < instructions.length; i++) {\n\t\toffsets[i] = -1;\n\t\tfinal AbstractInsnNode ain = instructions[i];\n\t\tif (ain.getOpcode() >= 0) {\n\t\t\tif (ain.getOpcode() >= opcodes.length) {\n                    try {\n\t\t\t\t\tthrow new UnexpectedException(\n\t\t\t\t\t\t\t\"Unknown opcode encountered: \"\n\t\t\t\t\t\t\t\t\t+ ain.getOpcode());\n\t\t\t\t} catch (final UnexpectedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n                }\n\t\t\toffsets[i] = insnString.length();\n\t\t\tinsnString += opcodes[ain.getOpcode()];\n\t\t\tswitch (ain.getType()) {\n\t\t\tcase AbstractInsnNode.INT_INSN:\n\t\t\t\tfinal IntInsnNode iin = (IntInsnNode) ain;\n\t\t\t\tinsnString += \"{\" + iin.operand + \"}\";\n\t\t\t\tbreak;\n\t\t\tcase AbstractInsnNode.LDC_INSN:\n\t\t\t\tfinal LdcInsnNode lin = (LdcInsnNode) ain;\n\t\t\t\tinsnString += \"{\" + lin.cst.toString().replace(\"}\", \"\\\\}\")\n\t\t\t\t\t\t+ \"}\";\n\t\t\t\tbreak;\n\t\t\tcase AbstractInsnNode.VAR_INSN:\n\t\t\t\tfinal VarInsnNode vin = (VarInsnNode) ain;\n\t\t\t\tinsnString += \"_\" + vin.var;\n\t\t\t\tbreak;\n\t\t\tcase AbstractInsnNode.IINC_INSN:\n\t\t\t\tfinal IincInsnNode iiin = (IincInsnNode) ain;\n\t\t\t\tinsnString += \"{\" + iiin.var + \",\" + iiin.incr + \"}\";\n\t\t\t\tbreak;\n\t\t\tcase AbstractInsnNode.FIELD_INSN:\n\t\t\t\tfinal FieldInsnNode fin = (FieldInsnNode) ain;\n\t\t\t\tinsnString += \"{\" + fin.desc + \",\" + fin.owner + \",\"\n\t\t\t\t\t\t+ fin.name + \"}\";\n\t\t\t\tbreak;\n\t\t\tcase AbstractInsnNode.METHOD_INSN:\n\t\t\t\tfinal MethodInsnNode min = (MethodInsnNode) ain;\n\t\t\t\tinsnString += \"{\" + min.desc + \",\" + min.owner + \",\"\n\t\t\t\t\t\t+ min.name + \"}\";\n\t\t\t\tbreak;\n\t\t\tcase AbstractInsnNode.TYPE_INSN:\n\t\t\t\tfinal TypeInsnNode tin = (TypeInsnNode) ain;\n\t\t\t\tinsnString += \"{\" + tin.desc + \"}\";\n\t\t\t\tbreak;\n\t\t\tcase AbstractInsnNode.MULTIANEWARRAY_INSN:\n\t\t\t\tfinal MultiANewArrayInsnNode manain = (MultiANewArrayInsnNode) ain;\n\t\t\t\tinsnString += \"{\" + manain.dims + \",\" + manain.desc + \"}\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tinsnString += \" \";\n\t\t}", "path": "JavaT-RET\\src\\reverse\\engineer\\searching\\RegexInsnFinder.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Searches for a regex in the instruction list and returns all groups for all matches.\n * @param regex the regular expression\n * @return a list with all sets of groups with matching instructions\n */\n", "func_signal": "public List<AbstractInsnNode[][]> findAllGroups(final String regex)", "code": "{\n\tfinal List<AbstractInsnNode[][]> results = new ArrayList<AbstractInsnNode[][]>();\n\ttry {\n\t\tfinal Matcher regexMatcher = Pattern.compile(processRegex(regex),\n\t\t\t\tPattern.MULTILINE).matcher(insnString);\n\t\tif (regexMatcher.find()) {\n\t\t\tfinal AbstractInsnNode[][] result = new AbstractInsnNode[regexMatcher.groupCount() + 1][0];\n\t\t\tfor (int i = 0; i <= regexMatcher.groupCount(); i++) {\n                    result[i] = makeResult(regexMatcher.start(i), regexMatcher.end(i));\n                }\n\t\t\tresults.add(result);\n\t\t}\n\t} catch (final PatternSyntaxException ex) {\n\t\tex.printStackTrace();\n\t}\n\treturn results;\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\searching\\RegexInsnFinder.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Constructor with a default border and debugging optionally turned on.\n * With Debugging turned on, more status messages will be displayed to\n * <tt>out</tt>. A common way to use this constructor is with\n * <tt>System.out</tt> or <tt>System.err</tt>. A <tt>null</tt> value for the\n * parameter <tt>out</tt> will result in no debugging output.\n * \n * @param out PrintStream to record debugging info or null for no debugging.\n * @param out\n * @param c Component on which files will be dropped.\n * @param listener Listens for <tt>filesDropped</tt>.\n * @since 1.0\n */\n", "func_signal": "public FileDrop(final java.io.PrintStream out, final java.awt.Component c,\n        final Listener listener)", "code": "{\n    this(out, // Logging stream\n            c, // Drop target\n            javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2,\n                    defaultBorderColor), false, // Recursive\n            listener);\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Searches a regex in an instruction list and returns all matches.\n * @param regex the regular expression\n * @return a list with all sets of matching instructions\n */\n", "func_signal": "public List<AbstractInsnNode[]> findAll(final String regex)", "code": "{\n\tfinal List<AbstractInsnNode[]> results = new ArrayList<AbstractInsnNode[]>();\n\ttry {\n\t\tfinal Matcher regexMatcher = Pattern.compile(processRegex(regex),\n\t\t\t\tPattern.MULTILINE).matcher(insnString);\n\t\twhile (regexMatcher.find()) {\n                results.add(makeResult(regexMatcher.start(), regexMatcher.end()));\n            }\n\t} catch (final PatternSyntaxException ex) {\n\t\tex.printStackTrace();\n\t}\n\treturn results;\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\searching\\RegexInsnFinder.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Constructor with a specified border and debugging optionally turned on.\n * With Debugging turned on, more status messages will be displayed to\n * <tt>out</tt>. A common way to use this constructor is with\n * <tt>System.out</tt> or <tt>System.err</tt>. A <tt>null</tt> value for the\n * parameter <tt>out</tt> will result in no debugging output.\n * \n * @param out PrintStream to record debugging info or null for no debugging.\n * @param c Component on which files will be dropped.\n * @param dragBorder Border to use on <tt>JComponent</tt> when dragging\n *        occurs.\n * @param listener Listens for <tt>filesDropped</tt>.\n * @since 1.0\n */\n", "func_signal": "public FileDrop(final java.io.PrintStream out, final java.awt.Component c,\n        final javax.swing.border.Border dragBorder, final Listener listener)", "code": "{\n    this(out, // Logging stream\n            c, // Drop target\n            dragBorder, // Drag border\n            false, // Recursive\n            listener);\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "// end constructor\n", "func_signal": "private static boolean supportsDnD()", "code": "{ // Static Boolean\n       if (supportsDnD == null) {\n           boolean support = false;\n           try {\n               final Class arbitraryDndClass = Class\n                       .forName(\"java.awt.dnd.DnDConstants\");\n               support = true;\n           } // end try\n           catch (final Exception e) {\n               support = false;\n           } // end catch\n           supportsDnD = new Boolean(support);\n       } // end if: first time through\n       return supportsDnD.booleanValue();\n   }", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Constructs an {@link Event} with the array of files that were dropped\n * and the {@link FileDrop} that initiated the event.\n * \n * @param files The array of files that were dropped\n * @source The event source\n * @since 1.1\n */\n", "func_signal": "public Event(final java.io.File[] files, final Object source)", "code": "{\n    super(source);\n    this.files = files;\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "/**\n * Constructor with a default border, debugging optionally turned on and the\n * option to recursively set drop targets. If your component is a\n * <tt>java.awt.Container</tt>, then each of its children components will\n * also listen for drops, though only the parent will change borders. With\n * Debugging turned on, more status messages will be displayed to\n * <tt>out</tt>. A common way to use this constructor is with\n * <tt>System.out</tt> or <tt>System.err</tt>. A <tt>null</tt> value for the\n * parameter <tt>out</tt> will result in no debugging output.\n * \n * @param out PrintStream to record debugging info or null for no debugging.\n * @param out\n * @param c Component on which files will be dropped.\n * @param recursive Recursively set children as drop targets.\n * @param listener Listens for <tt>filesDropped</tt>.\n * @since 1.0\n */\n", "func_signal": "public FileDrop(final java.io.PrintStream out, final java.awt.Component c,\n        final boolean recursive, final Listener listener)", "code": "{\n    this(out, // Logging stream\n            c, // Drop target\n            javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2,\n                    defaultBorderColor), // Drag border\n            recursive, // Recursive\n            listener);\n}", "path": "JavaT-RET\\src\\reverse\\engineer\\FileDrop.java", "repo_name": "Waterwolf/Java-ReverseEngineeringTool", "stars": 11, "license": "None", "language": "java", "size": 1527}
{"docstring": "// Returns cursor representing all log items\n", "func_signal": "public Cursor getLogs()", "code": "{\n  SQLiteDatabase db = getReadableDatabase();\n  return db.query(TABLE, null, null, null, null, null, C_TS + \" DESC\");\n}", "path": "KitchenSink\\src\\com\\marakana\\DbHelper.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Called when component is to be drawn\n", "func_signal": "@Override\npublic void onDraw(Canvas canvas)", "code": "{ // <3>\n  int height = this.getHeight();  // <4>\n  int width = this.getWidth();\n\n  canvas.rotate(direction, width / 2, height / 2); // <5>\n  super.onDraw(canvas); // <6>\n}", "path": "Compass\\src\\com\\marakana\\Rose.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Called by Compass to update the orientation\n", "func_signal": "public void setDirection(int direction)", "code": "{ // <7>\n  this.direction = direction;\n  this.invalidate(); // request to be redrawn <8>\n}", "path": "Compass\\src\\com\\marakana\\Rose.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Java implementation\n", "func_signal": "public static int fibJ(int n)", "code": "{ // <1>\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fibJ(n - 1) + fibJ(n - 2);\n}", "path": "KitchenSink\\src\\com\\marakana\\FibLib.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Called first time when the database doesn't exist at all\n", "func_signal": "@Override\npublic void onCreate(SQLiteDatabase db)", "code": "{\n  String sql = String.format(\"create table %s (\"\n      + \"%s integer primary key autoincrement, \"\n      + \"%s text, %s text, %s integer)\", TABLE, C_ID, C_TAG, C_MSG, C_TS);\n  db.execSQL(sql);\n}", "path": "KitchenSink\\src\\com\\marakana\\DbHelper.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Called when remote service drops the connection\n", "func_signal": "public void onServiceDisconnected(ComponentName name)", "code": "{\n  logger = null;\n  Log.d(TAG, \"onServiceDisconnected: \" + System.currentTimeMillis());\n}", "path": "KitchenSink\\src\\com\\marakana\\LoggerActivity.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// <6>\n", "func_signal": "@Override\n   public void onReceive(Context context, Intent intent)", "code": "{ // <7>\n     textOut.setText(\"\");\n\n     // List configured networks\n     List<WifiConfiguration> confs = wifiManager.getConfiguredNetworks(); // <8>\n     for (WifiConfiguration conf : confs) { // <9>\n       textOut.append(\"\\n\" + conf.SSID);\n     }\n\n     textOut.append(\"\\n\\nAvailable networks:\");\n     List<ScanResult> list = wifiManager.getScanResults(); // <10>\n     for (ScanResult result : list) {\n       textOut.append(\"\\n\" + result.SSID);\n     }\n   }", "path": "KitchenSink\\src\\com\\marakana\\WifiActivity.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Listen to sensor and provide output\n", "func_signal": "public void onSensorChanged(SensorEvent event)", "code": "{ // <12>\n  int orientation = (int) event.values[0]; // <13>\n  Log.d(\"Compass\", \"Got sensor event: \" + event.values[0]);\n  rose.setDirection(orientation); // <14>\n}", "path": "Compass\\src\\com\\marakana\\Compass.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Logs into the database\n", "func_signal": "public long log(String tag, String message)", "code": "{\n  SQLiteDatabase db = getWritableDatabase();\n  ContentValues values = new ContentValues();\n  values.put(C_TAG, tag);\n  values.put(C_MSG, message);\n  values.put(C_TS, System.currentTimeMillis());\n  return db.insert(TABLE, null, values);\n}", "path": "KitchenSink\\src\\com\\marakana\\DbHelper.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Called when we get remote service connection\n", "func_signal": "public void onServiceConnected(ComponentName name, IBinder binder)", "code": "{\n  logger = ILogger.Stub.asInterface(binder);\n  // Use remote service\n  try {\n    long id = logger.log(\"LoggerActivity\", \"Connected to LoggerService\");\n    textOut.setText(\"Logger connected and logged id: \" + id);\n    Log.d(TAG, \"onServiceConnected: \" + System.currentTimeMillis());\n  } catch (RemoteException e) {\n    e.printStackTrace();\n  }\n}", "path": "KitchenSink\\src\\com\\marakana\\LoggerActivity.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Unregister the sensor listener\n", "func_signal": "@Override\npublic void onPause()", "code": "{\n  super.onPause();\n  sensorManager.unregisterListener(this); // <10>\n}", "path": "Compass\\src\\com\\marakana\\Compass.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Listen to sensor and provide output\n", "func_signal": "public void onSensorChanged(int sensor, float[] values)", "code": "{\n\n\tint x = (int) values[2];\n\tint y = (int) values[1];\n\n\tbubbleView.update(x, y);\n}", "path": "Bubble\\src\\com\\marakana\\Bubble.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{ // <3>\n  super.onCreate(savedInstanceState);\n\n  // Set full screen view <4>\n  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n      WindowManager.LayoutParams.FLAG_FULLSCREEN);\n  requestWindowFeature(Window.FEATURE_NO_TITLE);\n\n  // Create new instance of custom Rose and set it on the screen\n  rose = new Rose(this); // <5>\n  setContentView(rose); // <6>\n\n  // Get sensor and sensor manager\n  sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE); // <7>\n  sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION); // <8>\n\n  Log.d(\"Compass\", \"onCreated\");\n}", "path": "Compass\\src\\com\\marakana\\Compass.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// --- Button click event handler\n", "func_signal": "public void onClickAnotherActivity(View v)", "code": "{\n  startActivity(new Intent(this, AnotherActivity.class));\n  Log.d(TAG, \"onClickAnotherActivity\");\n}", "path": "LifecycleDemo\\src\\com\\marakana\\android\\lifecycle\\ActivityDemo.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// --- Options menu methods\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n  getMenuInflater().inflate(R.menu.menu, menu);\n  return true;\n}", "path": "LifecycleDemo\\src\\com\\marakana\\android\\lifecycle\\ActivityDemo.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// unregister\n", "func_signal": "@Override\npublic void onPause()", "code": "{\n\tsuper.onPause();\n\tsensorManager.unregisterListener(this);\n}", "path": "Bubble\\src\\com\\marakana\\Bubble.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// Register to listen to sensors\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n  super.onResume();\n  sensorManager.registerListener(this, sensor,\n      SensorManager.SENSOR_DELAY_NORMAL); // <9>\n}", "path": "Compass\\src\\com\\marakana\\Compass.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// <5>\n", "func_signal": "@Override\n   public void onCallStateChanged(int state, String incomingNumber)", "code": "{ // <6>\n     switch (state) {\n     case TelephonyManager.CALL_STATE_IDLE:\n       textOut.append(\"\\nPhone idle\");\n       dbHelper.log(\"MyPhoneListener\", \"Phone idle\");\n       break;\n     case TelephonyManager.CALL_STATE_OFFHOOK:\n       textOut.append(\"\\nPhone off hook\");\n       dbHelper.log(\"MyPhoneListener\", \"Phone off hook\");\n       break;\n     case TelephonyManager.CALL_STATE_RINGING:\n       textOut.append(\"\\nIncoming call from \" + incomingNumber);\n       dbHelper.log(\"MyPhoneListener\", \"Incoming call from \" + incomingNumber);\n       break;\n     }\n   }", "path": "KitchenSink\\src\\com\\marakana\\TelephonyActivity.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "// register to listen to sensors\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n\tsuper.onResume();\n\tsensorManager.registerListener(this, sensor);\n}", "path": "Bubble\\src\\com\\marakana\\Bubble.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "/** Called on touch */\n", "func_signal": "public boolean onTouch(View view, MotionEvent event)", "code": "{\n  oldX = x;\n  oldY = y;\n\tx = event.getX();\n\ty = event.getY();\n    int left = (int)Math.min(x, oldX); \n\tint right = (int)Math.max(x, oldX);\n\tint top = (int)Math.min(y, oldY);\n\tint bottom = (int)Math.max(y, oldY);\n    if(oldX<0) return false;\n\n\tinvalidate(left,top,right,bottom); // redraw just the rectangle\n\treturn true;\n}", "path": "DrawDemo\\src\\com\\example\\DrawView.java", "repo_name": "mgargenta/android-demos", "stars": 11, "license": "None", "language": "java", "size": 61917}
{"docstring": "/*\npublic Block getWorldBlock(int x, int y, int z){\n\tif(rotation == 0)\n\t\treturn world.getBlockAt(minX + CraftRotator.rotateX(x, z, rotation),\n\t\t\t\tminY + y,\n\t\t\t\tminZ + CraftRotator.rotateZ(x, z, rotation));\n\t\n\telse\n\t\treturn world.getBlockAt(posX + CraftRotator.rotateX(x - offX, z - offZ, rotation),\n\t\t\tposY + y,\n\t\t\tposZ + CraftRotator.rotateZ(x - offX, z - offZ, rotation));\n}\n*/\n", "func_signal": "public ArrayList<Entity> getCraftEntities()", "code": "{\n\tArrayList<Entity> checkEntities = new ArrayList<Entity>();\n\n\tChunk firstChunk = world.getChunkAt(new Location(world, minX, minY, minZ));\n\tChunk lastChunk = world.getChunkAt(new Location(world, minX + sizeX, minY + sizeY, minZ + sizeZ));\n\t\n\tint targetX = 0;\n\tint targetZ = 0;\n\tChunk addChunk;\n\tEntity[] ents;\n\n\tfor(int x = 0; Math.abs(firstChunk.getX() - lastChunk.getX()) >= x; x++) {\n\t\ttargetX = 0;\n\t\tif(firstChunk.getX() < lastChunk.getX()) {\n\t\t\ttargetX = firstChunk.getX() + x;\n\t\t} else {\n\t\t\ttargetX = firstChunk.getX() - x;\n\t\t}\n\t\tfor(int z = 0; Math.abs(firstChunk.getZ() - lastChunk.getZ()) >= z; z++) {\n\t\t\ttargetZ = 0;\n\t\t\tif(firstChunk.getZ() < lastChunk.getZ()) {\n\t\t\t\ttargetZ = firstChunk.getZ() + z;\n\t\t\t} else {\n\t\t\t\ttargetZ = firstChunk.getZ() - z;\n\t\t\t}\n\n\t\t\taddChunk = world.getChunkAt(targetX, targetZ);\n\n\t\t\ttry {\n\t\t\t\tents = addChunk.getEntities();\n\t\t\t\tfor(Entity e : ents) {\n\t\t\t\t\tif(!(e instanceof Item) && this.isOnCraft(e, false)) {\n\t\t\t\t\t\tcheckEntities.add(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\n\t\t\t}\n\t\t}\n\t}\n\treturn checkEntities;\n}", "path": "src\\com\\sycoprime\\movecraft\\Craft.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// return the craft the block is belonging to\n", "func_signal": "public static Craft getCraft(int x, int y, int z)", "code": "{\n\n\tif (craftList.isEmpty())\n\t\treturn null;\n\n\tfor (Craft craft : craftList) {\n\t\tif (craft.isIn(x, y, z)) {\n\t\t\treturn craft;\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\com\\sycoprime\\movecraft\\Craft.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// return if the point is in the craft box\n", "func_signal": "public boolean isIn(int x, int y, int z)", "code": "{\n\treturn x >= minX && x <= maxX && y >= minY && y <= maxY\n\t&& z >= minZ && z <= maxZ;\n}", "path": "src\\com\\sycoprime\\movecraft\\Craft.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// restore items that need a support but are not data blocks\n", "func_signal": "public void restoreSupportBlocks(int dx, int dy, int dz)", "code": "{\n\tshort blockId;\n\n\tfor (int x = 0; x < craft.sizeX; x++) {\n\t\tfor (int z = 0; z < craft.sizeZ; z++) {\n\t\t\tfor (int y = 0; y < craft.sizeY; y++) {\n\n\t\t\t\tblockId = craft.matrix[x][y][z];\n\n\t\t\t\tif (BlocksInfo.needsSupport(blockId)\n\t\t\t\t\t\t&& !BlocksInfo.isDataBlock(blockId)\n\t\t\t\t\t\t&& !BlocksInfo.isComplexBlock(blockId)) {\n\t\t\t\t\t//setBlock(blockId, world.getBlockAt(posX + dx + x, posY + dy + y, posZ + dz + z));\n\t\t\t\t\tsetBlock(blockId, getWorldBlock(dx + x, dy + y, dz + z));\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftMover.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// add a block to the craft, if it is connected to a craft block\n", "func_signal": "public void addBlock(Block block)", "code": "{\n\tMoveCraft.instance.DebugMessage(\"Adding a block...\", 4);\n\n\t// to craft coordinates\n\tint x = block.getX() - minX;\n\tint y = block.getY() - minY;\n\tint z = block.getZ() - minZ;\n\n\t// the block can be attached to a bloc of the craft\n\tif (x < sizeX - 1 && !isFree(matrix[x + 1][y][z]) || x > 0\n\t\t\t&& !isFree(matrix[x - 1][y][z]) || y < sizeY - 1\n\t\t\t&& !isFree(matrix[x][y + 1][z]) || y > 0\n\t\t\t&& !isFree(matrix[x][y - 1][z]) || z < sizeZ - 1\n\t\t\t&& !isFree(matrix[x][y][z + 1]) || z > 0\n\t\t\t&& !isFree(matrix[x][y][z - 1])) {\n\n\t\tshort blockId = (short) block.getTypeId();\n\n\t\t// some items need to be converted into blocks\n\t\tif (blockId == 331) // redstone wire\n\t\t\tblockId = 55;\n\t\telse if (blockId == 323) // sign\n\t\t\tblockId = 68;\n\t\telse if (blockId == 324) { // door\n\t\t\tblockId = 64;\n\t\t\tmatrix[x][y + 1][z] = blockId;\n\t\t\tdataBlocks.add(new DataBlock(blockId, x, y + 1, z, block.getData() + 8));\n\t\t\tblockCount++;\n\t\t} else if (blockId == 330) { // door\n\t\t\tblockId = 71;\n\t\t\tmatrix[x][y + 1][z] = blockId;\n\t\t\tdataBlocks.add(new DataBlock(blockId, x, y + 1, z, block.getData() + 8));\n\t\t\tblockCount++;\n\t\t} else if (blockId == 338) { // reed\n\t\t\tblockId = 83;\n\t\t} else if (blockId >= 256) {\n\t\t\treturn;\n\t\t}\n\n\t\tmatrix[x][y][z] = blockId;\n\n\t\t// add block data\n\t\tif (BlocksInfo.isDataBlock(blockId)) {\n\t\t\tdataBlocks.add(new DataBlock(blockId, x, y, z, block.getData()));\n\t\t}\n\t\tif (BlocksInfo.isComplexBlock(blockId)) {\n\t\t\tcomplexBlocks.add(new DataBlock(blockId, x, y, z, block.getData()));\n\t\t}\n\n\t\tblockCount++;\n\t}\n}", "path": "src\\com\\sycoprime\\movecraft\\Craft.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// scan to know if any of the craft blocks are now missing (blocks removed, TNT damage, creeper ?)\n// and update the structure\n", "func_signal": "public void structureUpdate()", "code": "{\n\tshort craftBlockId;\n\tint blockId;\n\t\n\tfor (int x = 0; x < craft.sizeX; x++) {\n\t\tfor (int y = 0; y < craft.sizeY; y++) {\n\t\t\tfor (int z = 0; z < craft.sizeZ; z++) {\n\t\t\t\tcraftBlockId = craft.matrix[x][y][z];\n\n\t\t\t\t// remove blocks from the structure if it is not there anymore\n\t\t\t\tif (craftBlockId != -1 && craftBlockId != 0\n\t\t\t\t\t\t&& !(craftBlockId >= 8 && craftBlockId <= 11)) {\n\n\t\t\t\t\t//int blockId = world.getBlockAt(posX + x, posY + y, posZ + z).getTypeId();\n\t\t\t\t\tblockId = craft.world.getBlockAt(craft.minX + x, craft.minY + y, craft.minZ + z).getTypeId();\n\n\t\t\t\t\t // regenerate TNT on a bomber\n\t\t\t\t\tif (craftBlockId == 46 && craft.type.bomber)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t// block is not here anymore, remove it\n\t\t\t\t\tif (blockId == 0 || blockId >= 8 && blockId <= 11) {\n\t\t\t\t\t\t// air, water, or lava\n\t\t\t\t\t\tif (craft.waterType != 0 && y <= craft.waterLevel)\n\t\t\t\t\t\t\tcraft.matrix[x][y][z] = 0;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcraft.matrix[x][y][z] = -1; // make a hole in the craft\n\n\t\t\t\t\t\tcraft.blockCount--;\n\t\t\t\t\t\tMoveCraft.instance.DebugMessage(\"Removing a block of type \" + craftBlockId + \n\t\t\t\t\t\t\t\t\" because of type \" + blockId, 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftMover.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "/* Given cardinals */\n", "func_signal": "private BlockInfo(int id, String name, boolean isDataBlock, boolean needSupport, boolean isComplexBlock, byte[] cardinals)", "code": "{\n\tthis(id, name, isDataBlock, needSupport, isComplexBlock, id, 1, false);\n\tthis.cardinalDirections = cardinals;\n\t//blocks[id].cardinalDirections = cardinals;\n}", "path": "src\\com\\sycoprime\\movecraft\\BlocksInfo.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "/* Given cardinals and dropItems */\n//cardinals are North, East, West, South\n", "func_signal": "private BlockInfo(int id, String name, boolean isDataBlock, boolean isComplexBlock, int dropItem, int dropQuantity, byte[] cardinals)", "code": "{\n\t//this(id, name, isDataBlock, false, isComplexBlock, id, 1, false);\n\tthis.id = id;\n\tthis.isDataBlock = isDataBlock;\n\tthis.isComplexBlock = isComplexBlock;\n\tthis.dropItem = dropItem;\n\tthis.dropQuantity = dropQuantity;\n\tthis.cardinalDirections = cardinals;\n\t//blocks[id].cardinalDirections = cardinals;\n}", "path": "src\\com\\sycoprime\\movecraft\\BlocksInfo.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//will replace other rotates\n", "func_signal": "public Location rotate(Location point, int r, boolean isEntity)", "code": "{\n\t@SuppressWarnings(\"unused\")\n\tLocation entOffset;\n\tif (isEntity){\n\t\tentOffset = new Location(craft.world, 0.5, 0.0, 0.5);\n\t}\n\telse entOffset = new Location(craft.world, 0.0, 0.0, 0.0);\n\t//Location pivot = this.getPivot().add(entOffset);\n\tLocation newPoint = point.clone();\n\t//newPoint = point.subtract(pivot);// make point relative to pivot\n\tMoveCraft.instance.DebugMessage(\"r \" + r, 2);\n\tMoveCraft.instance.DebugMessage(\"newPoint1 \" + newPoint, 2);\n\tdouble x, z;\n\n\n\t\tif(r==90){\n\t\t\tx = newPoint.getZ() * -1;\n\t\t\tz = newPoint.getX();\n\t\t\t}\n\t\telse if(r==180){\n\t\t\tx = newPoint.getX() * -1;\n\t\t\tz = newPoint.getZ() * -1;\n\t\t}\n\t\telse if(r==270){\n\t\t\tx = newPoint.getZ();\n\t\t\tz = newPoint.getX() * -1;\n\t\t}\n\t\telse{\n\t\t\tx = newPoint.getX();\n\t\t\tz = newPoint.getZ();\n\t\t}\n\n\tnewPoint.setX(x);\n\tnewPoint.setZ(z);\n\n\t//return(newPoint.add(pivot));// make newPoint relative to world\n\treturn newPoint;\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftRotator.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//remove water blocks that have been incorrectly added\n", "func_signal": "private static void removeWater()", "code": "{\n\n\tboolean updated;\n\n\tdo{\n\n\t\tupdated = false;\n\n\t\tfor(int x=0;x<craft.sizeX;x++){\n\t\t\tfor(int z=0;z<craft.sizeZ;z++){\n\t\t\t\tfor(int y=0;y<craft.sizeY;y++){\n\n\t\t\t\t\tif(craft.matrix[x][y][z] >= 8 && craft.matrix[x][y][z] <= 11 && y <= craft.waterLevel){\n\n\t\t\t\t\t\tif(isFree(x + 1, y, z) ||\n\t\t\t\t\t\t\t\tisFree(x - 1, y, z) ||\n\t\t\t\t\t\t\t\tisFree(x, y, z + 1) ||\n\t\t\t\t\t\t\t\tisFree(x, y, z - 1) ||\n\t\t\t\t\t\t\t\tisFree(x, y - 1, z)){\n\n\t\t\t\t\t\t\tcraft.matrix[x][y][z] = -1;\n\t\t\t\t\t\t\tupdated = true;\n\n\t\t\t\t\t\t\t//craft.thePlayer.sendMessage(\"water removed\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while(updated);\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftBuilder.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// Gathering up pivot data as a Location\n// This should be how things are stored in Craft.\n", "func_signal": "public Location getPivot()", "code": "{\n\tdouble x = craft.minX + craft.offX;\n\tdouble z = craft.minZ + craft.offZ;\n\tLocation pivot = new Location(craft.world, x, craft.minY, z, craft.rotation, 0);\n\n\treturn pivot;\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftRotator.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// set the attributes of the craft type\n", "func_signal": "private static void setAttribute(CraftType craftType, String attribute,\n\t\tString value)", "code": "{\n\n\tif (attribute.equalsIgnoreCase(\"driveCommand\"))\n\t\tcraftType.driveCommand = value;\n\telse if (attribute.equalsIgnoreCase(\"minBlocks\"))\n\t\tcraftType.minBlocks = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"maxBlocks\"))\n\t\tcraftType.maxBlocks = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"maxSpeed\"))\n\t\tcraftType.maxSpeed = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"flyBlockType\"))\n\t\tcraftType.flyBlockType = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"flyBlockPercent\"))\n\t\tcraftType.flyBlockPercent = Double.parseDouble(value);\n\telse if (attribute.equalsIgnoreCase(\"digBlockId\"))\n\t\tcraftType.digBlockId = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"digBlockDurability\"))\n\t\tcraftType.digBlockDurability = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"fuelItemId\"))\n\t\tcraftType.fuelItemId = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"fuelConsumptionMultiplier\"))\n\t\tcraftType.fuelConsumptionMultiplier = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"canNavigate\"))\n\t\tcraftType.canNavigate = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"isTerrestrial\"))\n\t\tcraftType.isTerrestrial = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"requiresRails\"))\n\t\tcraftType.requiresRails = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"canFly\"))\n\t\tcraftType.canFly = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"canDive\"))\n\t\tcraftType.canDive = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"canDig\"))\n\t\tcraftType.canDig = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"obeysGravity\"))\n\t\tcraftType.obeysGravity = Boolean.parseBoolean(value);\n\t// else if(attribute.equalsIgnoreCase(\"iceBreaker\"))\n\t// craftType.iceBreaker = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"bomber\"))\n\t\tcraftType.bomber = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"sayOnControl\"))\n\t\tcraftType.sayOnControl = value;\n\telse if (attribute.equalsIgnoreCase(\"sayOnRelease\"))\n\t\tcraftType.sayOnRelease = value;\n\telse if (attribute.equalsIgnoreCase(\"remoteControllerItem\"))\n\t\tcraftType.remoteControllerItem = Integer.parseInt(value);\n\telse if (attribute.equalsIgnoreCase(\"listenItem\"))\n\t\tcraftType.listenItem = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"listenAnimation\"))\n\t\tcraftType.listenAnimation = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"listenMovement\"))\n\t\tcraftType.listenMovement = Boolean.parseBoolean(value);\n\telse if (attribute.equalsIgnoreCase(\"engineBlockId\")) {\n\t\tcraftType.engineBlockId = Integer.parseInt(value);\n\t\tif(BlocksInfo.getCardinals(craftType.engineBlockId) == null){\n\t\t\tSystem.out.println(\"Invalid engine block specified in craft type \" +\n\t\t\t\t\tcraftType.name + \". Use something that has a face, like a furnace or a dispenser.\");\n\t\t\tcraftType.engineBlockId = 0;\n\t\t}\t\t\t\t\n\t}\n\telse if (attribute.equalsIgnoreCase(\"structureBlocks\")) {\n\t\tString[] split = value.split(\",\");\n\t\tcraftType.structureBlocks = new short[split.length];\n\t\tint i = 0;\n\t\tfor (String blockId : split) {\n\t\t\tcraftType.structureBlocks[i] = Short.parseShort(blockId);\n\t\t\ti++;\n\t\t}\n\t} else if (attribute.equalsIgnoreCase(\"restrictedBlocks\")) {\n\t\tif(craftType.structureBlocks == null)\n\t\t\treturn;\n\t\t\n\t\tArrayList<Short> restrictedBlocks = new ArrayList<Short>();\n\t\tArrayList<Short> newStructureBlocks = new ArrayList<Short>();\n\t\t//short[] newStructureBlocks = new short[craftType.structureBlocks.length];\n\t\tString[] split = value.split(\",\");\n\t\t\n\t\tfor(String s : split){\n\t\t\ttry\n\t\t\t{\n\t\t\t\trestrictedBlocks.add(Short.parseShort(s));\n\t\t\t}\n\t\t\tcatch (NumberFormatException ex) {\n\t\t\t\tSystem.out.println(\"Tried to remove invalid block ID \" + s + \n\t\t\t\t\t\t\" from structureblocks of craft type \" + craftType.name);\n\t\t\t}\n\t\t}\n\t\tfor(Short i: craftType.structureBlocks)\n\t\t\tif(!restrictedBlocks.contains(i))\n\t\t\t\tnewStructureBlocks.add(i);\n\t\t\n\t\tShort nsb[] = new Short[newStructureBlocks.size()];\n\t\t//craftType.structureBlocks = newStructureBlocks.toArray(short[]);\n\t\tnewStructureBlocks.toArray(nsb);\n\t\t//I give up.\n\t\t//craftType.structureBlocks = nsb;\n\t\t\n\t} else if (attribute.equalsIgnoreCase(\"extendedBlocks\")) {\n\t\tif(craftType.structureBlocks == null)\n\t\t\treturn;\n\t\t\n\t\tString[] split = value.split(\",\");\n\t\tshort[] newStructureBlocks = new short[craftType.structureBlocks.length + split.length];\n\t\t\n\t\tfor(int i = 0; i < craftType.structureBlocks.length; i++) {\n\t\t\tnewStructureBlocks[i] = craftType.structureBlocks[i];\n\t\t}\n\t\t\n\t\tint i = 0;\n\t\tfor(String s : split) {\n\t\t\ttry\n\t\t\t{\n\t\t\t\tnewStructureBlocks[craftType.structureBlocks.length + i] = Short.parseShort(s);\n\t\t\t}\n\t\t\tcatch (NumberFormatException ex) {\n\t\t\t\tSystem.out.println(\"Tried to add invalid block ID \" + s + \n\t\t\t\t\t\t\" to structureblocks of craft type \" + craftType.name);\t\t\t\t\t\n\t\t\t}\t\t\t\t\n\t\t}\n\t\tcraftType.structureBlocks = newStructureBlocks;\n\t} else if (attribute.equalsIgnoreCase(\"forbiddenBlocks\")) {\t\t\t\n\t\tString[] split = value.split(\",\");\n\t\tcraftType.forbiddenBlocks = new short[split.length];\n\t\tfor (int i = 0; i < split.length; i++) {\n\t\t\tcraftType.forbiddenBlocks[i] = Short.parseShort(split[i]);\n\t\t}\t\t\t\n\t}\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftType.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//setblock, SAFE !\n", "func_signal": "public void setBlock(double id, int X, int Y, int Z)", "code": "{\n\tif(Y < 0 || Y > 127 || id < 0 || id > 255){\n\t\treturn;\n\t}\n\n\tif((id == 64 || id == 63) && MoveCraft.instance.DebugMode) {\n\t\tSystem.out.println(\"This stack trace is totally expected.\");\n\t\t//Thread.currentThread().getStackTrace();\n\t\t//new Throwable().getStackTrace();\n\t\tnew Throwable().printStackTrace();\n\t\t//Exception ex = new Exception();\n\t\t//ex.printStackTrace();\n\t}\n\n\tcraft.world.getBlockAt(X, Y, Z).setTypeId((int)id);\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftRotator.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//second pass detection, we have the craft blocks, now we go from bottom to top,\n//add all missing blocks, detect water level\n", "func_signal": "private static boolean secondPassDetection()", "code": "{\n\t//boolean needWaterDetection = false;\n\n\tfor(int x=0; x<craft.sizeX; x++){\n\t\tfor(int z=0; z<craft.sizeZ; z++){\n\n\t\t\tboolean floor = false; //if we have reached the craft floor\n\n\t\t\tfor(int y=0; y<craft.sizeY; y++){\n\n\t\t\t\t//we reached the floor of the craft\n\t\t\t\tif(!floor && craft.matrix[x][y][z] != -1){                       \n\t\t\t\t\tfloor = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if(floor && craft.matrix[x][y][z] == -1) {\t//free space, check there is no block here\n\n\t\t\t\t\tBlock block = craft.world.getBlockAt(craft.minX + x, craft.minY + y, craft.minZ + z);\n\t\t\t\t\tint blockId = block.getTypeId();\n\n\t\t\t\t\tcraft.matrix[x][y][z] = (short)blockId; // record this block as part of the craft, also fill with air\n\n\t\t\t\t\tif(BlocksInfo.isDataBlock(blockId)){\n\t\t\t\t\t\taddDataBlock(blockId, craft.minX + x, craft.minY + y, craft.minZ + z);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(BlocksInfo.isComplexBlock(blockId)){\n\t\t\t\t\t\taddComplexBlock(blockId, craft.minX + x, craft.minY + y, craft.minZ + z);\n\t\t\t\t\t\tcraft.findFuel(block);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(craft.type.engineBlockId != 0 && blockId == craft.type.engineBlockId) {\n\t\t\t\t\t\taddEngineBlock(blockId, craft.minX + x, craft.minY + y, craft.minZ + z);\n\t\t\t\t\t}\n\n\t\t\t\t\t//there is a problem with ice that spawn a source block, we can't have ice\n\t\t\t\t\tif(blockId==79){\n\t\t\t\t\t\tcraft.player.sendMessage(ChatColor.RED + \"Sorry, you can't have ice in the \" + craft.name);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//water detected, we do the detection of the water level\n\t\t\t\tif(craft.waterType != 0 && craft.matrix[x][y][z] != -1) {\n\t\t\t\t\tdetectWater(x + 1, y, z);\n\t\t\t\t\tdetectWater(x - 1, y, z);\n\t\t\t\t\tdetectWater(x, y, z + 1);\n\t\t\t\t\tdetectWater(x, y, z - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//remove water blocks that can flow out of the craft\n\tif(craft.waterLevel != -1)\n\t\tremoveWater();\n\n\t//if the craft can dive, we need to create an air bubble surrounding the player\n\t//if it touch the bounding box walls, then the submarine has a hole !\n\tif(craft.type.canDive){\n\n\t\t//remove air\n\t\tfor(int x=0;x<craft.sizeX;x++){\n\t\t\tfor(int z=0;z<craft.sizeZ;z++){\n\t\t\t\tfor(int y=0;y<craft.sizeY;y++){\n\t\t\t\t\tif(craft.matrix[x][y][z]== 0)\n\t\t\t\t\t\tcraft.matrix[x][y][z] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tblocksStack = new Stack<BlockLoc>();\n\n\t\t//start with the player's head\n\t\tblocksStack.push(new BlockLoc((int)Math.floor(craft.player.getLocation().getX()) - craft.minX,\n\t\t\t\t(int)Math.floor(craft.player.getLocation().getY() + 1 - craft.minY),\n\t\t\t\t(int)Math.floor(craft.player.getLocation().getZ()) - craft.minZ));\n\n\t\t//detect all connected empty blocks\n\t\tdo{\n\t\t\tif(!createAirBubble() && MoveCraft.instance.ConfigSetting(\"allowHoles\").equalsIgnoreCase(\"false\")){\n\t\t\t\tcraft.player.sendMessage(ChatColor.YELLOW + \"This \" + craft.type.name + \" have holes, it needs to be waterproof\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\twhile(!blocksStack.isEmpty());\n\n\t\tblocksStack = null;\n\n\t\t//fill with air\n\t\tfor(int x=0;x<craft.sizeX;x++){\n\t\t\tfor(int z=0;z<craft.sizeZ;z++){\n\t\t\t\tfor(int y=0;y<craft.sizeY;y++){\n\t\t\t\t\tif(craft.matrix[x][y][z]== -1)\n\t\t\t\t\t\tcraft.matrix[x][y][z] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//if there is air touching a border, remove it\n\t\tfor(int x=0;x<craft.sizeX;x++){\n\t\t\tfor(int z=0;z<craft.sizeZ;z++){\n\t\t\t\tfor(int y=0;y<craft.sizeY;y++){\n\t\t\t\t\tif(craft.matrix[x][y][z] == 0 &&\n\t\t\t\t\t\t\t(x == 0 ||\n\t\t\t\t\t\t\t\t\ty == 0 ||\n\t\t\t\t\t\t\t\t\tz == 0 ||\n\t\t\t\t\t\t\t\t\tx == craft.sizeX - 1 ||\n\t\t\t\t\t\t\t\t\ty == craft.sizeY - 1 ||\n\t\t\t\t\t\t\t\t\tz == craft.sizeZ - 1)){\n\n\t\t\t\t\t\tblocksStack = new Stack<BlockLoc>();\n\t\t\t\t\t\tblocksStack.push(new BlockLoc(x, y, z));\n\n\t\t\t\t\t\tdo{\n\t\t\t\t\t\t\tremoveAir();\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile(!blocksStack.isEmpty());\n\n\t\t\t\t\t\tblocksStack = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tblocksStack = null;\n\n\t} else {\n\n\t\t//there is water detected\n\t\tif(craft.waterLevel != -1){\n\n\t\t\t//remove air above the water level (so the part under water have still air)\n\t\t\tfor(int x=0;x<craft.sizeX;x++){\n\t\t\t\tfor(int z=0;z<craft.sizeZ;z++){\n\t\t\t\t\tfor(int y=craft.waterLevel + 1;y<craft.sizeY;y++){\n\t\t\t\t\t\tif(craft.matrix[x][y][z]==0)\n\t\t\t\t\t\t\tcraft.matrix[x][y][z] = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//no water, remove ALL air\n\t\t} else {\n\t\t\tfor(int x=0;x<craft.sizeX;x++){\n\t\t\t\tfor(int z=0;z<craft.sizeZ;z++){\n\t\t\t\t\tfor(int y=0;y<craft.sizeY;y++){\n\t\t\t\t\t\tif(craft.matrix[x][y][z]==0)\n\t\t\t\t\t\t\tcraft.matrix[x][y][z] = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftBuilder.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "// if the craft can go through this block id\n", "func_signal": "private boolean canGoThrough(int craftBlockId, int blockId, int data)", "code": "{\n\n\t// all craft types can move through air and flowing water/lava\n\tif ( blockId == 0 ||\n\t\t\t(blockId >= 8 && blockId <= 11 && data != 0) ||\n\t\t\t//blockId == 78 || \n\t\t\tBlocksInfo.coversGrass(blockId)) //snow cover\n\t\treturn true;\n\n\t// we can't go through adminium\n\tif(blockId == 7)\n\t\treturn false;\n\n\tif (!type.canNavigate && !type.canDive){\n\t\treturn false;\n\t}\n\n\tif(craftBlockId == 0) {\n\t\tif( (blockId >= 8 && blockId <= 11) // air can go through liquid,\n\t\t\t\t|| blockId == 0) //or other air\n\t\t\treturn true;\n\t\telse\t\t\t\t\t\t\t\t//but nothing else\n\t\t\treturn false;\n\t}\n\n\t// drill can move through all block types...for now.\n\tif (type.canDig && craftBlockId == type.digBlockId && blockId != 0)\n\t\treturn true;\n\n\t// ship on water\n\tif (blockId == 8 || blockId == 9)\n\t\tif (waterType == 8)\n\t\t\treturn true;\n\n\t// ship on lava\n\tif (blockId == 10 || blockId == 11)\n\t\tif (waterType == 10)\n\t\t\treturn true;\n\n\tif(blockId == waterType)\n\t\treturn true;\n\n\t// iceBreaker can go through ice :)\n\tif (blockId == 79 && type.iceBreaker)\n\t\tif (waterType == 8)\n\t\t\treturn true;\n\treturn false;\n}", "path": "src\\com\\sycoprime\\movecraft\\Craft.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//detect the craft you are in\n", "func_signal": "private static void detectBlock(BlockLoc block)", "code": "{\n\n\t//explore all directions\n\n\t//face-face connection\n\tdetectBlock(block.x + 1, block.y, block.z, 1);\n\tdetectBlock(block.x - 1, block.y, block.z, 2);\n\tdetectBlock(block.x, block.y + 1, block.z, 1);\n\tdetectBlock(block.x, block.y - 1, block.z, 6);\n\tdetectBlock(block.x, block.y, block.z + 1, 3);\n\tdetectBlock(block.x, block.y, block.z - 1, 4);\n\n\t//edge-edge horizontal connection\n\tdetectBlock(block.x + 1, block.y - 1, block.z, -1);\n\tdetectBlock(block.x - 1, block.y - 1, block.z, -1);\n\tdetectBlock(block.x, block.y - 1, block.z + 1, -1);\n\tdetectBlock(block.x, block.y - 1, block.z - 1, -1);\n\tdetectBlock(block.x + 1, block.y + 1, block.z, -1);\n\tdetectBlock(block.x - 1, block.y + 1, block.z, -1);\n\tdetectBlock(block.x, block.y + 1, block.z + 1, -1);\n\tdetectBlock(block.x, block.y + 1, block.z - 1, -1);\n\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftBuilder.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//put all data in a standard matrix to be more efficient\n", "func_signal": "private static void createMatrix()", "code": "{\n\n\tcraft.matrix = new short[craft.sizeX][craft.sizeY][craft.sizeZ];\n\tcraft.displacedBlocks = new short[craft.matrix[0].length + 1][craft.matrix[1].length + 1][craft.matrix[2].length + 1];\n\tcraft.dataBlocks = new ArrayList<DataBlock>();\n\tcraft.complexBlocks = new ArrayList<DataBlock>();\n\n\tfor(int x=0;x<craft.sizeX;x++){\n\t\tfor(int z=0;z<craft.sizeZ;z++){\n\t\t\tfor(int y=0;y<craft.sizeY;y++){\n\t\t\t\tcraft.matrix[x][y][z] = -1;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(Integer x:dmatrix.keySet()){\n\t\tHashMap<Integer,HashMap<Integer,Short>> xRow = dmatrix.get(x);\n\t\tfor(Integer y:xRow.keySet()){\n\t\t\tHashMap<Integer,Short> yRow = xRow.get(y);\n\t\t\tfor(Integer z:yRow.keySet()){\n\n\t\t\t\tshort blockId = yRow.get(z);\n\n\t\t\t\tif(blockId == -1)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tcraft.matrix[x - craft.minX][y - craft.minY][z - craft.minZ] = blockId;\n\n                   if(BlocksInfo.isDataBlock(blockId)){\n                        addDataBlock(blockId, x, y, z);\n                   }\n                   if(BlocksInfo.isComplexBlock(blockId)){\n                        addComplexBlock(blockId, x, y, z);\n                   }\n\t\t\t}\n\t\t}\n\t}\n\n\tdmatrix = null; //release the dynamic matrix now we don't need it anymore\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftBuilder.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "/* Given dropitems */\n", "func_signal": "private BlockInfo(int id, String name, boolean isDataBlock, boolean needSupport,\n\t\tboolean isComplexBlock, int dropItem, int dropQuantity, boolean isGrassCover)", "code": "{\n\n\tthis.id = id;\n\t//this.name = name;\n\tthis.isDataBlock = isDataBlock;\n\tthis.needSupport = needSupport;\n\tthis.isComplexBlock = isComplexBlock;\n\tthis.dropItem = dropItem;\n\tthis.dropQuantity = dropQuantity;\n\tthis.isGrassCover = isGrassCover;\n}", "path": "src\\com\\sycoprime\\movecraft\\BlocksInfo.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//offset between the craft origin and the pivot for rotation\n", "func_signal": "public CraftRotator(Craft c)", "code": "{\n\t\tcraft = c;\n\n\t\tif(craft.offX == 0 || craft.offZ == 0) {\n\t\t\tcraft.offX = Math.round(craft.sizeX / 2);\n\t\t\tcraft.offZ = Math.round(craft.sizeZ / 2);\n\t\t}\n\t}", "path": "src\\com\\sycoprime\\movecraft\\CraftRotator.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "//detect and create an air bubble surrounding the player\n", "func_signal": "private static boolean createAirBubble()", "code": "{\n\tMoveCraft.instance.DebugMessage(\"Adding an air bubble.\", 4);\n\n\tBlockLoc block = blocksStack.pop();\n\n\t//out of the craft, there is a hole\n\tif(block.x < 0 || block.x > craft.maxX - craft.minX ||\n\t\t\tblock.y < 0 || block.y > craft.maxY - craft.minY ||\n\t\t\tblock.z < 0 || block.z > craft.maxZ - craft.minZ){\n\n\t\treturn false;\n\t}\n\n\t//already visited\n\tif(craft.matrix[block.x][block.y][block.z] == 0)\n\t\treturn true;\n\n\tif(craft.matrix[block.x][block.y][block.z] == -1){\n\n\t\t//add air\n\t\tcraft.matrix[block.x][block.y][block.z] = 0;\n\n\t} else {\n\t\treturn true;\n\t}\n\n\t//explore all 6 directions\n\tblocksStack.push(new BlockLoc(block.x + 1, block.y, block.z));\n\tblocksStack.push(new BlockLoc(block.x - 1, block.y, block.z));\n\tblocksStack.push(new BlockLoc(block.x, block.y + 1, block.z));\n\tblocksStack.push(new BlockLoc(block.x, block.y - 1, block.z));\n\tblocksStack.push(new BlockLoc(block.x, block.y, block.z + 1));\n\tblocksStack.push(new BlockLoc(block.x, block.y, block.z - 1));\n\n\treturn true;\n\n}", "path": "src\\com\\sycoprime\\movecraft\\CraftBuilder.java", "repo_name": "MoveCraft/MoveCraft", "stars": 9, "license": "None", "language": "java", "size": 598}
{"docstring": "/**\n * Converts a dbus type string into Java Type objects, \n * @param dbus The DBus type or types.\n * @param rv Vector to return the types in.\n * @param limit Maximum number of types to parse (-1 == nolimit).\n * @return number of characters parsed from the type string.\n */\n", "func_signal": "public static int getJavaType(String dbus, List<Type> rv, int limit) throws DBusException", "code": "{\n   if (null == dbus || \"\".equals(dbus) || 0 == limit) return 0;\n\n   try {\n      int i = 0;\n      for (; i < dbus.length() && (-1 == limit || limit > rv.size()); i++) \n         switch(dbus.charAt(i)) {\n            case Message.ArgumentType.STRUCT1:\n               int j = i+1;\n               for (int c = 1; c > 0; j++) {\n                  if (')' == dbus.charAt(j)) c--;\n                  else if (Message.ArgumentType.STRUCT1 == dbus.charAt(j)) c++;\n               }\n\n               Vector<Type> contained = new Vector<Type>();\n               int c = getJavaType(dbus.substring(i+1, j-1), contained, -1);\n               rv.add(new DBusStructType(contained.toArray(new Type[0])));\n               i = j;\n               break;                     \n            case Message.ArgumentType.ARRAY:\n               if (Message.ArgumentType.DICT_ENTRY1 == dbus.charAt(i+1)) {\n                  contained = new Vector<Type>();\n                  c = getJavaType(dbus.substring(i+2), contained, 2);\n                  rv.add(new DBusMapType(contained.get(0), contained.get(1)));\n                  i += (c+2);\n               } else {\n                  contained = new Vector<Type>();\n                  c = getJavaType(dbus.substring(i+1), contained, 1);\n                  rv.add(new DBusListType(contained.get(0)));\n                  i += c;\n               }\n               break;\n            case Message.ArgumentType.VARIANT:\n               rv.add(Variant.class);\n               break;\n            case Message.ArgumentType.BOOLEAN:\n               rv.add(Boolean.class);\n               break;\n            case Message.ArgumentType.INT16:\n               rv.add(Short.class);\n               break;\n            case Message.ArgumentType.BYTE:\n               rv.add(Byte.class);\n               break;\n            case Message.ArgumentType.OBJECT_PATH:\n               rv.add(DBusInterface.class);\n               break;\n            case Message.ArgumentType.UINT16:\n               rv.add(UInt16.class);\n               break;\n            case Message.ArgumentType.INT32:\n               rv.add(Integer.class);\n               break;\n            case Message.ArgumentType.UINT32:\n               rv.add(UInt32.class);\n               break;\n            case Message.ArgumentType.INT64:\n               rv.add(Long.class);\n               break;\n            case Message.ArgumentType.UINT64:\n               rv.add(UInt64.class);\n               break;\n            case Message.ArgumentType.DOUBLE:\n               rv.add(Double.class);\n               break;\n            case Message.ArgumentType.FLOAT:\n               rv.add(Float.class);\n               break;\n            case Message.ArgumentType.STRING:\n               rv.add(String.class);\n               break;\n            case Message.ArgumentType.SIGNATURE:\n               rv.add(Type[].class);\n               break;\n            case Message.ArgumentType.DICT_ENTRY1:\n               rv.add(Map.Entry.class);\n               contained = new Vector<Type>();\n               c = getJavaType(dbus.substring(i+1), contained, 2);\n               i+=c+1;\n               break;\n            default:\n               throw new DBusException(MessageFormat.format(_(\"Failed to parse DBus type signature: {0} ({1}).\"), new Object[] { dbus, dbus.charAt(i) }));\n         }\n      return i;\n   } catch (IndexOutOfBoundsException IOOBe) {\n      if (AbstractConnection.EXCEPTION_DEBUG && Debug.debug) Debug.print(Debug.ERR, IOOBe);\n      throw new DBusException(_(\"Failed to parse DBus type signature: \")+dbus);\n   }\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Marshalling.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/**\n * Will return the DBus type corresponding to the given Java type.\n * Note, container type should have their ParameterizedType not their\n * Class passed in here.\n * @param c The Java type.\n * @return The DBus type.\n * @throws DBusException If the given type cannot be converted to a DBus type.\n */\n", "func_signal": "public static String[] getDBusType(Type c) throws DBusException", "code": "{\n   String[] cached = typeCache.get(c);\n   if (null != cached) return cached;\n   cached = getDBusType(c, false);\n   typeCache.put(c, cached);\n   return cached;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Marshalling.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\n\tint row = table.getSelectedRow();\n\tDBusTableModel model = (DBusTableModel) table.getModel();\n\tif (row > -1 && row < model.getRowCount())\n\t{\n\t\tDBusEntry entry = model.getEntry(row);\n\t\tfinal String xmlFile = entry.getName() + \".xml\";\n\t\tfinal Introspectable introspectable = entry.getIntrospectable();\n\t\tnew Thread(new Runnable()\n\t\t{\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\t\n\t\t\t\tStringStreamFactory factory = new StringStreamFactory();\n\t\t\t\tCreateInterface createInterface = new CreateInterface(factory, false);\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tString xml = introspectable.Introspect();\n\t\t\t\t\t\n\t\t\t\t\tString docType = \"<!DOCTYPE node PUBLIC \\\"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\\\"\\n\\\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\\\">\";\n\n\t\t\t\t\tcreateInterface.createInterface(new StringReader(xml.replace(docType, \"\")));\n\t\t\t\t\tfinal JTabbedPane tabbedPane = new JTabbedPane();\n\t\t\t\t\t\n\t\t\t\t\ttabbedPane.addTab(xmlFile, createSourceTab(xmlFile, xml));\n\t\t\t\t\t\n\t\t\t\t\tfor (String file : factory.streamMap.keySet())\n\t\t\t\t\t{\n\t\t\t\t\t\tfinal String source = factory.streamMap.get(file).toString();\n\t\t\t\t\t\t\n\t\t\t\t\t\ttabbedPane.addTab(file, createSourceTab(file, source));\n\t\t\t\t\t}\n\t\t\t\t\ttabbedPane.setPreferredSize(new Dimension(600, 400));\n\t\t\t\t\t\n\t\t\t\t\tfinal JPanel introspectionPanel = new JPanel(new BorderLayout());\n\t\t\t\t\tintrospectionPanel.add(tabbedPane, BorderLayout.CENTER);\n\n\t\t\t\t\tJPanel southPanel = new JPanel();\n\t\t\t\t\tsouthPanel.add(new JButton(new SaveFileAction(tabbedPane)));\n\t\t\t\t\tsouthPanel.add(new JButton(new SaveAllAction(tabbedPane)));\n\t\t\t\t\tintrospectionPanel.add(southPanel, BorderLayout.SOUTH);\n\t\t\t\t\t\n\t\t\t\t\tSwingUtilities.invokeLater(new Runnable()\n\t\t\t\t\t{\n\t\t\t\t\t\t@SuppressWarnings(\"synthetic-access\")\n\t\t\t\t\t\tpublic void run()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(table, introspectionPanel, \"Introspection\", JOptionPane.PLAIN_MESSAGE);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch (final Exception e)\n\t\t\t\t{\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tSwingUtilities.invokeLater(new Runnable()\n\t\t\t\t\t{\n\t\t\t\t\t\t@SuppressWarnings(\"synthetic-access\")\n\t\t\t\t\t\tpublic void run()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(table, e.getMessage(), \"Introspection Failed\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate JScrollPane createSourceTab(String file, final String source)\n\t\t\t{\n\t\t\t\tJTextArea area = new JTextArea(source);\n\t\t\t\tarea.setLineWrap(true);\n\t\t\t\tarea.setWrapStyleWord(true);\n\t\t\t\treturn new JScrollPane(area, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);\n\t\t\t}\n\t\t}).start();\n\t\t\n\t}\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\viewer\\IntrospectAction.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** Returns this struct as a string. */\n", "func_signal": "public final String toString()", "code": "{\n   String s = getClass().getName()+\"<\";\n   if (null == parameters)\n      setup();\n   if (0 == parameters.length) \n      return s+\">\";\n   for (Object o: parameters)\n      s += o+\", \";\n   return s.replaceAll(\", $\", \">\");\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Container.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** Create the TextFile\n * \n * @param fileName The file name\n * @param contents The contents\n */\n", "func_signal": "public TextFile(String fileName, String contents)", "code": "{\n\tthis.fileName = fileName;\n\tthis.contents = contents;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\viewer\\TextFile.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** \n * Create a Variant.\n * @param o The wrapped value.\n * @param sig The explicit type of the value, as a dbus type string.\n * @throws IllegalArugmentException If you try and wrap Null or an object which cannot be sent over DBus.\n */\n", "func_signal": "public Variant(T o, String sig) throws IllegalArgumentException", "code": "{\n   if (null == o) throw new IllegalArgumentException(_(\"Can't wrap Null in a Variant\"));\n   this.sig = sig;\n   try {\n      Vector<Type> ts = new Vector<Type>();\n      Marshalling.getJavaType(sig, ts,1);\n      if (ts.size() != 1)\n         throw new IllegalArgumentException(_(\"Can't wrap multiple or no types in a Variant: \")+sig);\n      this.type = ts.get(0);\n   } catch (DBusException DBe) {\n      if (AbstractConnection.EXCEPTION_DEBUG && Debug.debug) Debug.print(Debug.ERR, DBe);\n      throw new IllegalArgumentException(MessageFormat.format(_(\"Can't wrap {0} in an unqualified Variant ({1}).\"), new Object[] { sig, DBe.getMessage() }));\n   }\n   this.o = o;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Variant.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "// create a new vector with just the valid keys in and return it\n", "func_signal": "public long[] getKeys()", "code": "{\n   int size;\n   if (start < end) size = end-start;\n   else size = kv.length-(start-end);\n   long[] lv = new long[size];\n   int copya;\n   if (size > kv.length-start) copya = kv.length-start;\n   else copya = size;\n   System.arraycopy(kv,start,lv,0,copya);\n   if (copya < size) {\n      System.arraycopy(kv,0,lv,copya,size-copya);\n   }\n   return lv;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\EfficientMap.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void valueChanged(ListSelectionEvent e)", "code": "{\n\tif (!e.getValueIsAdjusting())\n\t{\n\t\tDBusTableModel model = (DBusTableModel) table.getModel();\n\t\tint selection = table.getSelectedRow();\n\t\tif (selection > -1 && selection < model.getRowCount())\n\t\t{\n\t\t\tDBusEntry entry = model.getEntry(selection);\n\t\t\tfinal Introspectable introspectable = entry.getIntrospectable();\n\t\t\tsetEnabled(introspectable != null);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\viewer\\IntrospectAction.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic PrintStream createPrintStream(final String file) throws IOException", "code": "{\n\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n\tstreamMap.put(file, stream);\n\treturn new PrintStream(stream);\n\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\viewer\\StringStreamFactory.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public TextFile next()", "code": "{\n\tif (hasNext())\n\t{\n\t\tint currentIndex = i;\n\t\ti++;\n\t\treturn getTextFile(currentIndex);\n\t}\n\tthrow new NoSuchElementException();\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\viewer\\SaveAllAction.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** \n * Create a new signal.\n * This contructor MUST be called by all sub classes.\n * @param objectpath The path to the object this is emitted from.\n * @param args The parameters of the signal.\n * @throws DBusException This is thrown if the subclass is incorrectly defined.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected DBusSignal(String objectpath, Object... args) throws DBusException", "code": "{\n   super(Message.Endian.BIG, Message.MessageType.SIGNAL, (byte) 0);\n\n   if (!objectpath.matches(AbstractConnection.OBJECT_REGEX)) throw new DBusException(_(\"Invalid object path: \")+objectpath);\n\n   Class<? extends DBusSignal> tc = getClass();\n   String member;\n   if (tc.isAnnotationPresent(DBusMemberName.class))\n      member = tc.getAnnotation(DBusMemberName.class).value();\n   else\n      member = tc.getSimpleName();\n   String iface = null;\n   Class<? extends Object> enc = tc.getEnclosingClass();\n   if (null == enc ||\n         !DBusInterface.class.isAssignableFrom(enc) ||\n         enc.getName().equals(enc.getSimpleName()))\n      throw new DBusException(_(\"Signals must be declared as a member of a class implementing DBusInterface which is the member of a package.\"));\n   else\n      if (null != enc.getAnnotation(DBusInterfaceName.class))\n         iface = enc.getAnnotation(DBusInterfaceName.class).value();\n      else\n         iface = AbstractConnection.dollar_pattern.matcher(enc.getName()).replaceAll(\".\");\n\n   headers.put(Message.HeaderField.PATH,objectpath);\n   headers.put(Message.HeaderField.MEMBER,member);\n   headers.put(Message.HeaderField.INTERFACE,iface);\n\n   Vector<Object> hargs = new Vector<Object>();\n   hargs.add(new Object[] { Message.HeaderField.PATH, new Object[] { ArgumentType.OBJECT_PATH_STRING, objectpath } });\n   hargs.add(new Object[] { Message.HeaderField.INTERFACE, new Object[] { ArgumentType.STRING_STRING, iface } });\n   hargs.add(new Object[] { Message.HeaderField.MEMBER, new Object[] { ArgumentType.STRING_STRING, member } });\n\n   String sig = null;\n   if (0 < args.length) {\n      try {\n         Type[] types = typeCache.get(tc);\n         if (null == types) {\n            Constructor<? extends DBusSignal> con = (Constructor<? extends DBusSignal>) tc.getDeclaredConstructors()[0];\n            conCache.put(tc, con);\n            Type[] ts = con.getGenericParameterTypes();\n            types = new Type[ts.length-1];\n            for (int i = 1; i <= types.length; i++) \n               if (ts[i] instanceof TypeVariable)\n                  types[i-1] = ((TypeVariable<GenericDeclaration>) ts[i]).getBounds()[0];\n               else\n                  types[i-1] = ts[i];\n            typeCache.put(tc, types);\n         }\n         sig = Marshalling.getDBusType(types);\n         hargs.add(new Object[] { Message.HeaderField.SIGNATURE, new Object[] { ArgumentType.SIGNATURE_STRING, sig } });\n         headers.put(Message.HeaderField.SIGNATURE,sig);\n         setArgs(args);\n      } catch (Exception e) {\n         if (AbstractConnection.EXCEPTION_DEBUG && Debug.debug) Debug.print(Debug.ERR, e);\n         throw new DBusException(_(\"Failed to add signal parameters: \")+e.getMessage());\n      }\n   }\n\n   blen = new byte[4];\n   appendBytes(blen);\n   append(\"ua(yv)\", ++serial, hargs.toArray());\n   pad((byte)8);\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\DBusSignal.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** \n * Create a Variant.\n * @param o The wrapped value.\n * @param type The explicit type of the value.\n * @throws IllegalArugmentException If you try and wrap Null or an object which cannot be sent over DBus.\n */\n", "func_signal": "public Variant(T o, Type type) throws IllegalArgumentException", "code": "{\n   if (null == o) throw new IllegalArgumentException(_(\"Can't wrap Null in a Variant\"));\n   this.type = type;\n   try {\n      String[] ss = Marshalling.getDBusType(type);\n      if (ss.length != 1)\n      throw new IllegalArgumentException(_(\"Can't wrap a multi-valued type in a Variant: \")+type);\n      this.sig = ss[0];\n   } catch (DBusException DBe) {\n      if (AbstractConnection.EXCEPTION_DEBUG && Debug.debug) Debug.print(Debug.ERR, DBe);\n      throw new IllegalArgumentException(MessageFormat.format(_(\"Can't wrap {0} in an unqualified Variant ({1}).\"), new Object[] { type, DBe.getMessage() }));\n   }\n   this.o = o;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Variant.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/**\n * Returns the struct contents in order.\n * @throws DBusException If there is  a problem doing this.\n */\n", "func_signal": "public final Object[] getParameters()", "code": "{\n   if (null != parameters) return parameters;\n   setup();\n   return parameters;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Container.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/**\n * A sample signal with two parameters\n */\n", "func_signal": "@Description(\"Test interface containing signals\")\npublic interface TestSignalInterface extends DBusInterface", "code": "{\n   @Description(\"Test basic signal\")\n   public static class TestSignal extends DBusSignal\n   {\n      public final String value;\n      public final UInt32 number;\n      /**\n       * Create a signal.\n       */\n      public TestSignal(String path, String value, UInt32 number) throws DBusException\n      {\n         super(path, value, number);\n         this.value = value;\n         this.number = number;\n      }\n   }\n\tpublic static class StringSignal extends DBusSignal\n\t{\n\t\tpublic final String aoeu;\n\t\tpublic StringSignal(String path, String aoeu) throws DBusException\n\t\t{\n\t\t\tsuper(path, aoeu);\n\t\t\tthis.aoeu = aoeu;\n\t\t}\n\t}\n\tpublic static class EmptySignal extends DBusSignal\n\t{\n\t\tpublic EmptySignal(String path) throws DBusException\n\t\t{\n\t\t\tsuper(path);\n\t\t}\n\t}\n   @Description(\"Test signal with arrays\")\n   public static class TestArraySignal extends DBusSignal\n   {\n      public final List<TestStruct2> v;\n      public final Map<UInt32, TestStruct2> m;\n      public TestArraySignal(String path, List<TestStruct2> v, Map<UInt32, TestStruct2> m) throws DBusException\n      {\n         super(path, v, m);\n         this.v = v;\n         this.m = m;\n      }\n   }\n   @Description(\"Test signal sending an object path\")\n   @DBusMemberName(\"TestSignalObject\")\n   public static class TestObjectSignal extends DBusSignal\n   {\n      public final DBusInterface otherpath;\n      public TestObjectSignal(String path, DBusInterface otherpath) throws DBusException\n      {\n         super(path, otherpath);\n         this.otherpath = otherpath;\n      }\n   }\n   public static class TestPathSignal extends DBusSignal\n   {\n      public final Path otherpath;\n      public final List<Path> pathlist;\n      public final Map<Path,Path> pathmap;\n      public TestPathSignal(String path, Path otherpath, List<Path> pathlist, Map<Path,Path> pathmap) throws DBusException\n      {\n         super(path, otherpath, pathlist, pathmap);\n         this.otherpath = otherpath;\n         this.pathlist = pathlist;\n         this.pathmap = pathmap;\n      }\n   }\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\test\\TestSignalInterface.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/* could binary search, but it's probably the first one */\n", "func_signal": "private int find(long l)", "code": "{\n   int i = start;\n   while (i != end && kv[i] != l)\n      if (i == (kv.length-1)) i = 0; else i++;\n   if (i == end) return -1;\n   return i;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\EfficientMap.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/**\n * Recursively converts types for serialization onto DBus.\n * @param parameters The parameters to convert.\n * @param types The (possibly generic) types of the parameters.\n * @return The converted parameters.\n * @throws DBusException Thrown if there is an error in converting the objects.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static Object[] convertParameters(Object[] parameters, Type[] types, AbstractConnection conn) throws DBusException", "code": "{\n   if (null == parameters) return null;\n   for (int i = 0; i < parameters.length; i++) {\n      if (Debug.debug) Debug.print(Debug.VERBOSE,\"Converting \"+i+\" from \"+parameters[i]+\" to \"+types[i]);\n      if (null == parameters[i]) continue;\n\n      if (parameters[i] instanceof DBusSerializable) {\n         for (Method m: parameters[i].getClass().getDeclaredMethods()) \n            if (m.getName().equals(\"deserialize\")) {\n               Type[] newtypes = m.getParameterTypes();\n               Type[] expand = new Type[types.length + newtypes.length - 1];\n               System.arraycopy(types, 0, expand, 0, i); \n               System.arraycopy(newtypes, 0, expand, i, newtypes.length); \n               System.arraycopy(types, i+1, expand, i+newtypes.length, types.length-i-1); \n               types = expand;\n               Object[] newparams = ((DBusSerializable) parameters[i]).serialize();\n               Object[] exparams = new Object[parameters.length + newparams.length - 1];\n               System.arraycopy(parameters, 0, exparams, 0, i);\n               System.arraycopy(newparams, 0, exparams, i, newparams.length);\n               System.arraycopy(parameters, i+1, exparams, i+newparams.length, parameters.length-i-1);\n               parameters = exparams;\n            }\n         i--;\n      } else if (parameters[i] instanceof Tuple) {\n         Type[] newtypes = ((ParameterizedType) types[i]).getActualTypeArguments();\n         Type[] expand = new Type[types.length + newtypes.length - 1];\n         System.arraycopy(types, 0, expand, 0, i);\n         System.arraycopy(newtypes, 0, expand, i, newtypes.length);\n         System.arraycopy(types, i+1, expand, i+newtypes.length, types. length-i-1);\n         types = expand;\n         Object[] newparams = ((Tuple) parameters[i]).getParameters();\n         Object[] exparams = new Object[parameters.length + newparams.length - 1];\n         System.arraycopy(parameters, 0, exparams, 0, i);\n         System.arraycopy(newparams, 0, exparams, i, newparams.length);\n         System.arraycopy(parameters, i+1, exparams, i+newparams.length, parameters.length-i-1);\n         parameters = exparams;\n         if (Debug.debug) Debug.print(Debug.VERBOSE, \"New params: \"+Arrays.deepToString(parameters)+\" new types: \"+Arrays.deepToString(types));\n         i--;\n      } else if (types[i] instanceof TypeVariable &&\n            !(parameters[i] instanceof Variant)) \n         // its an unwrapped variant, wrap it\n         parameters[i] = new Variant<Object>(parameters[i]);\n      else if (parameters[i] instanceof DBusInterface)\n         parameters[i] = conn.getExportedObject((DBusInterface) parameters[i]);\n   }\n   return parameters;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Marshalling.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** \n * Create a Variant from a basic type object.\n * @param o The wrapped value.\n * @throws IllegalArugmentException If you try and wrap Null or an object of a non-basic type.\n */\n", "func_signal": "public Variant(T o) throws IllegalArgumentException", "code": "{\n   if (null == o) throw new IllegalArgumentException(_(\"Can't wrap Null in a Variant\"));\n   type = o.getClass();\n   try {\n      String[] ss = Marshalling.getDBusType(o.getClass(), true);\n      if (ss.length != 1)\n      throw new IllegalArgumentException(_(\"Can't wrap a multi-valued type in a Variant: \")+type);\n      this.sig = ss[0];\n   } catch (DBusException DBe) {\n      if (AbstractConnection.EXCEPTION_DEBUG && Debug.debug) Debug.print(Debug.ERR, DBe);\n      throw new IllegalArgumentException(MessageFormat.format(_(\"Can't wrap {0} in an unqualified Variant ({1}).\"), new Object[] { o.getClass(), DBe.getMessage() }));\n   }\n   this.o = o;\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Variant.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public TextFile next()", "code": "{\n\tif (iterated)\n\t{\n\t\tthrow new NoSuchElementException(_(\"Already iterated\"));\n\t}\n\titerated = true;\n\treturn getTextFile(tabbedPane.getSelectedIndex());\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\viewer\\SaveFileAction.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/**\n * Will return the DBus type corresponding to the given Java type.\n * Note, container type should have their ParameterizedType not their\n * Class passed in here.\n * @param c The Java types.\n * @return The DBus types.\n * @throws DBusException If the given type cannot be converted to a DBus type.\n */\n", "func_signal": "public static String getDBusType(Type[] c) throws DBusException", "code": "{\n   StringBuffer sb = new StringBuffer();\n   for (Type t: c) \n      for (String s: getDBusType(t))\n         sb.append(s);\n   return sb.toString();\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Marshalling.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/** Compare this Variant with another by comparing contents */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic boolean equals(Object other)", "code": "{\n   if (null == other) return false;\n   if (!(other instanceof Variant)) return false;\n   return this.o.equals(((Variant<? extends Object>)other).o);\n}", "path": "src\\main\\java\\org\\freedesktop\\dbus\\Variant.java", "repo_name": "diega/dbus-java", "stars": 10, "license": "other", "language": "java", "size": 695}
{"docstring": "/**\n * Deletes an alert from the DB\n * \n * @param alertId The rowId of the alert to delete\n */\n", "func_signal": "public void deleteAlert(long alertId)", "code": "{\n    \tLog.d(TAG, \"deleting alert \" + alertId);\n        mDb.delete(db_ALERT_TABLE, db_ID + \"=\" + alertId, null);\n        updateAlertSchedule();\n    }", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Updates an alert in the DB according to changes in the DTO (if any)\n * \n * @param alert The Alert DTO of the alert to be updated\n */\n", "func_signal": "public void updateAlert(Alert alert)", "code": "{\n\t\tContentValues args = alert.getChanged();\n\t\tif(args.size() > 0) {\n\t        mDb.update(db_ALERT_TABLE, args, db_ID + \"=\" + alert.id, null);\n\t        alert.clearChanged();\n\t        updateAlertSchedule();\n\t\t}\n\t}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * @param groupId rowId of group to return\n * @return Cursor positioned at single group matching id if any\n */\n", "func_signal": "public Cursor fetchGroup(long groupId)", "code": "{\n\tLog.d(TAG, \"fetching group \" + groupId);\n\t\tCursor mCursor = mDb.query(true, \n\t\t\t\tdb_GROUP_TABLE, \n\t\t\t\tnew String[] { db_ID, db_GROUP_NAME }, \n\t\t\t\tdb_ID + \"=\" + groupId, \n\t\t\t\tnull, null, null, null, null);\n    if (mCursor != null) {\n        mCursor.moveToFirst();\n    }\n    return mCursor;\n}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * \n * Hands an alarm to the alarm manager to go off later.\n * \n * @param context\n *            Application context\n * @param alertId\n *            rowId of the tracker that the alert refers to\n * @param time\n *            Time at which to go off (system time in milliseconds)\n */\n", "func_signal": "public static void setAlert(Context context, long alertId, long time)", "code": "{\n\tLog.d(TAG, \"Setting alert for alert \" + alertId);\n\tIntent intent = new Intent(context, AlertReceiver.class);\n\tintent.putExtra(C.db_ALERT_TABLE, alertId);\n\tPendingIntent pendingIntent = PendingIntent.getBroadcast(context,\n\t\t\tAlarmManager.RTC_WAKEUP, intent,\n\t\t\tPendingIntent.FLAG_CANCEL_CURRENT // keeps from re-using the\n\t\t\t\t\t\t\t\t\t\t\t\t// previous intent\n\t\t\t);\n\tAlarmManager alarmManager = (AlarmManager) context\n\t\t\t.getSystemService(Context.ALARM_SERVICE);\n\talarmManager.cancel(pendingIntent);\n\tif(time > 0 )\n\t\talarmManager.set(AlarmManager.RTC_WAKEUP, time, pendingIntent);\n}", "path": "src\\net\\sosiouxme\\logmylife\\receiver\\AlertReceiver.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "// may have decimal point in it?\n", "func_signal": "private ValueType(int id, boolean decimal)", "code": "{\n\t\tthis.id = id;\n\t\tthis.decimal = decimal;\n\t}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\dto\\ValueType.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/* get the cursor with all lists and attach to the spinner */\n", "func_signal": "private void fillGroupSpinner()", "code": "{\n\tLog.d(TAG, \"fillGroupSpinner\");\n\tmSpinner = new GroupSpinner(this,\n\t\t\t(Spinner) findViewById(R.id.group_spinner), mDba);\n\tmSpinner.setOnGroupSelectedListener(this);\n\tmCurrentGroupId = mSpinner.getSelectedItemId();\n}", "path": "src\\net\\sosiouxme\\logmylife\\activity\\TrackerEdit.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Create a DB alert entry from an Alert DTO\n * \n * @param newAlert the DTO to create in the DB\n * @return rowId of the alert created\n */\n", "func_signal": "public long createAlert(Alert newAlert)", "code": "{\n    \tLog.d(TAG, \"creating Alert for tracker \" + newAlert.trackerId);\n       \tlong alertId = mDb.insert(db_ALERT_TABLE, null, newAlert.getChanged());\n       \tupdateAlertSchedule();\n       \treturn alertId;\n    }", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/* \n * (non-Javadoc)\n * expects an extras bundle on the intent, specifying either:\n * C.db_ID = rowId of log entry to edit\n * C.db_LOG_TRACKER = rowId of tracker for which to create new log entry\n */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\t\n\t// get a DB handle\n\tmDba = new DbAdapter(this);\n\t// Set the layout for this activity.\n\tsetContentView(R.layout.a_log_edit);\n\t// set up the date/time formatters\n\tmDateFormat = Settings.getDateFormat(this);\n\tmTimeFormat = Settings.getTimeFormat(this);\n\n\t// find existing log entry / tracker to work on\n\tmLogEntry = findOrCreateLogEntry();\n\n\t// get the tracker to log against (whether new or existing log) \n\tmTracker = mDba.fetchTracker(mLogEntry.getTrackerId());\n\tif (mTracker == null)\n\t\tthrow new RuntimeException(\"couldn't find tracker id \" + mLogEntry.getTrackerId());\n\t\n\t/* locate and fill the necessary elements of the layout */\n\n\t// tracker information\n\tTextView tvName = (TextView) findViewById(R.id.tracker_name);\n\tTextView tvBody = (TextView) findViewById(R.id.tracker_details);\n\ttvName.setText(mTracker.name);\n\ttvBody.setText(mTracker.body);\n\n\t// find/set log text and value\n\tmetBody = (EditText) findViewById(R.id.body);\n\tmetBody.setText(mLogEntry.body);\n\tmetValue = (EditText) findViewById(R.id.logValue);\n\tmetValue.setText(ValueType.getById(mLogEntry.valueType).formatValue(mLogEntry.value));\n\tadjustValueLayout(); // as needed depending on settings\n\t\n\t// log date/time\n\tmDateEditButton = (Button) findViewById(R.id.editDate);\n\tmDateEditButton.setOnClickListener(this);\n\tmTimeEditButton = (Button) findViewById(R.id.editTime);\n\tmTimeEditButton.setOnClickListener(this);\n\tsetDateTimeDisplay();\n\t\n\t// wire up the save/cancel buttons\n\tButton cancelButton = (Button) findViewById(R.id.cancel);\n\tcancelButton.setOnClickListener(this);\n\tButton saveButton = (Button) findViewById(R.id.save);\n\tsaveButton.setOnClickListener(this);\n}", "path": "src\\net\\sosiouxme\\logmylife\\activity\\LogEdit.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "// creates/updates the tracker UNLESS the name is empty\n", "func_signal": "private boolean saveTracker()", "code": "{\n\tString name = metName.getText().toString();\n\tlong trackerId = -1;\n\tif (name.length() > 0) {\n\t\tmTracker.setName(name);\n\t\tmTracker.setBody(metBody.getText().toString());\n\t\tmTracker.setLogValueLabel(metValLabel.getText().toString());\n\t\tmTracker.setLogValueLabelPos(metValLabelPos.isChecked() ? Tracker.LABEL_RIGHT : Tracker.LABEL_LEFT);\n\t\tmTracker.setGroupId(mCurrentGroupId);\n\t\tmTracker.setSkipNextAlert(false);\n\t\tif(mTracker.isNew()) {\n\t\t\ttrackerId = mDba.createTracker(mTracker);\n\t\t\t((LogMyLife) getApplication()).showToast(C.TOAST_TRACKER_CREATED);\n\t\t} else {\n\t\t\ttrackerId = mTracker.getId();\n\t\t\tmDba.updateTracker(mTracker);\n\t\t\t((LogMyLife) getApplication()).showToast(C.TOAST_TRACKER_UPDATED);\n\t\t}\n\t\tstoreAlerts(trackerId);\n\t}\n\treturn trackerId > -1;\n}", "path": "src\\net\\sosiouxme\\logmylife\\activity\\TrackerEdit.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Turns a single cursor row from the DB into an Alert object\n * @param c The cursor\n * @return The filled out Alert oject\n */\n", "func_signal": "private Alert getAlertFromCursor(Cursor c)", "code": "{\nAlert a = new Alert(c.getLong(0));\na.trackerId = c.getLong(c.getColumnIndex(C.db_ALERT_TRACKER));\na.isEnabled = c.getInt(c.getColumnIndex(C.db_ALERT_ENABLED)) > 0;\na.skipNext = c.getInt(c.getColumnIndex(C.db_ALERT_SKIP_NEXT)) > 0;\na.ivalMonths = c.getInt(c.getColumnIndex(C.db_ALERT_INTERVAL_MONTHS));\na.ivalWeeks = c.getInt(c.getColumnIndex(C.db_ALERT_INTERVAL_WEEKS));\na.ivalDays = c.getInt(c.getColumnIndex(C.db_ALERT_INTERVAL_DAYS));\na.ivalHours = c.getInt(c.getColumnIndex(C.db_ALERT_INTERVAL_HOURS));\na.ivalMinutes = c.getInt(c.getColumnIndex(C.db_ALERT_INTERVAL_MINUTES));\na.ivalSeconds = c.getInt(c.getColumnIndex(C.db_ALERT_INTERVAL_SECONDS));\na.ringtone = c.getString(c.getColumnIndex(C.db_ALERT_RINGTONE));\nString date = c.getString(c.getColumnIndex(C.db_ALERT_NEXT_TIME));\ntry {\n\tif (date != null)\n\t\ta.nextTime = dbDateFormat.parse(date);\n} catch (ParseException e) {\n\tthrow new RuntimeException(\"fetchAlert couldn't parse nextTime for \" + a.id, e);\n}\nreturn a;\n\t}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Deletes an alert from the DB\n * \n * @param trackerId The rowId of the tracker to delete alerts for\n */\n", "func_signal": "public void deleteAlerts(long trackerId)", "code": "{\n\tLog.d(TAG, \"deleting alerts for tracker \" + trackerId);\n    mDb.delete(db_ALERT_TABLE, db_ALERT_TRACKER + \"=\" + trackerId, null);\n        updateAlertSchedule();\n}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Opens a database handle, creating if needed. If it cannot be created, throw exception.\n * @param ctx \n * \n * @return this\n * @throws SQLException if the database could be neither opened nor created\n */\n", "func_signal": "public DbAdapter open(Context ctx) throws SQLException", "code": "{\n\tif(mDbHelper != null) return this;\n    mDbHelper = new DbAdmin(ctx);\n    mDb = mDbHelper.getWritableDatabase();\n    return this;\n}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Fetches an Alert cursor of all alerts for a tracker \n * @param trackerId The rowId of the tracker\n * @return Cursor of all the tracker's alerts\n */\n", "func_signal": "public Cursor fetchAlertsCursor(long trackerId)", "code": "{\n    \tLog.d(TAG, \"fetching alerts for tracker \" + trackerId);\n        Cursor c = mDb.query(true, db_ALERT_TABLE,\n\t\tALERT_COLUMNS,\n\t\tdb_ALERT_TRACKER + \"=\" + trackerId, null,\n        null, null, db_ID, null);\n        if (c != null)\n            c.moveToFirst();\n        return c;\n\n    }", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "// creates/updates the log entry\n", "func_signal": "private boolean saveLogEntry()", "code": "{\n\tmLogEntry.setBody(metBody.getText().toString());\n\tString value = metValue.getText().toString();\n\tmLogEntry.setValue(value.equals(\"\") ? null : value);\n\tif (mLogEntry.isNew()) {\n\t\tmDba.createLog(mLogEntry);\n\t\t((LogMyLife) getApplication()).showToast(C.TOAST_LOG_CREATED);\n\t} else {\n\t\tmDba.updateLog(mLogEntry);\n\t\t((LogMyLife) getApplication()).showToast(C.TOAST_LOG_UPDATED);\n\t}\n\treturn true;\n}", "path": "src\\net\\sosiouxme\\logmylife\\activity\\LogEdit.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/*\n * *********************************************************************\n * \n * Handle group table\n * \n */\n", "func_signal": "public long createGroup(String title)", "code": "{\n    // @return listId or -1 if failed\n\tLog.d(TAG, \"creating group \" + title);\n    ContentValues initialValues = new ContentValues();\n    initialValues.put(db_GROUP_NAME, title);\n\n    return mDb.insert(db_GROUP_TABLE, null, initialValues);\n}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "// quiet hours disabled\n", "func_signal": "public QuietHours(String beginStr, String endStr)", "code": "{\n\t\t\tbegin = extractDateLimit(beginStr);\n\t\t\tend = extractDateLimit(endStr);\n\t\t\tif(begin == null || end == null)\n\t\t\t\treturn; // can't do anything with this; quiet hours disabled\n\t\t\t\n\t\t\tenabled = true;\n\t\t\tif(endStr.compareTo(beginStr) <= 0) {\n\t\t\t\t// end equal or before beginning = overnight quiet hours\n\t\t\t\tif(begin.after(now)) // begin > now\n\t\t\t\t\tbegin.roll(Calendar.DATE, -1); // use yesterday's period begin\n\t\t\t\telse if(end.before(now)) // end < now\n\t\t\t\t\tend.roll(Calendar.DATE, 1); // use tomorrow's period end\n\t\t\t}\n\t\t}", "path": "src\\net\\sosiouxme\\logmylife\\activity\\Settings.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Creates the database adapter that mediates all DB access\n * \n * @param ctx The application context in which this adapter is created\n */\n", "func_signal": "public DbAdapter(Context ctx)", "code": "{\n        mContext = ctx;\n        resources = ctx.getResources();\n        open(ctx);\n}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Fetches the Alert from the DB that is enabled and has the soonest\n * scheduled time to go off (even if it may be skipped once reached).\n *   \n * @return The Alert DTO, or none if none are scheduled\n */\n", "func_signal": "public Alert fetchNextAlert()", "code": "{\nLog.d(TAG, \"fetching next alert\");\nreturn fetchAlert(\n\tdb_ALERT_ENABLED + \" = 1 AND \" + db_ALERT_SKIP_NEXT + \" != 1 AND \" +\n\tdb_ALERT_NEXT_TIME + \" > datetime('now', 'localtime')\",\n\tnull, null, null, db_ALERT_NEXT_TIME + \" ASC\", \"1\"\n\t);\n\t}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "// TODO: all this stuff regarding intervals might really not belong in a DTO.\n// Should probably move to some util class or something.\n", "func_signal": "public int getSingleIval(Interval i)", "code": "{\n\tswitch (i) {\n\tcase MONTHS:\n\t\treturn ivalMonths;\n\tcase WEEKS:\n\t\treturn ivalWeeks;\n\tcase DAYS:\n\t\treturn ivalDays;\n\tcase HOURS:\n\t\treturn ivalHours;\n\tcase MINUTES:\n\t\treturn ivalMinutes;\n\tcase SECONDS:\n\t\treturn ivalSeconds;\n\t}\n\treturn 0;\n}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\dto\\Alert.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Close any open database handles.\n */\n", "func_signal": "public void close()", "code": "{\n\tif(mDbHelper == null) return;\n    mDbHelper.close();\n    mDb = null;\n    mDbHelper = null;\n}", "path": "src\\net\\sosiouxme\\logmylife\\domain\\DbAdapter.java", "repo_name": "sosiouxme/LogMyLife", "stars": 10, "license": "other", "language": "java", "size": 440}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 3: // COLUMN_FAMILY\n      return COLUMN_FAMILY;\n    case 4: // SUPER_COLUMN\n      return SUPER_COLUMN;\n    default:\n      return null;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\ColumnParent.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\SuperColumn.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case COLUMN_FAMILY:\n    return isSetColumn_family();\n  case SUPER_COLUMN:\n    return isSetSuper_column();\n  }\n  throw new IllegalStateException();\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\ColumnParent.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case WHY:\n    return isSetWhy();\n  }\n  throw new IllegalStateException();\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthorizationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case COLUMN_NAMES:\n    return isSetColumn_names();\n  case SLICE_RANGE:\n    return isSetSlice_range();\n  }\n  throw new IllegalStateException();\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\SlicePredicate.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // WHY\n      return WHY;\n    default:\n      return null;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthenticationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "// Includes synthetic '$self' parameter!\n", "func_signal": "private static String getPropertyNameCapitalized(MethodNode accessor)", "code": "{\n    final String accessorName = accessor.getName();\n    if (accessorName.startsWith(\"get\") && accessorName.length() > 3 && accessor.getParameters().length == 1) return accessorName.substring(3);\n    if (accessorName.startsWith(\"is\") && accessorName.length() > 2 && accessor.getParameters().length == 1) return accessorName.substring(2);\n    if (accessorName.startsWith(\"set\") && accessorName.length() > 3 && accessor.getParameters().length == 2) return accessorName.substring(3);\n    return null;\n}", "path": "Compiler\\src\\org\\mbte\\groovypp\\compiler\\TraitASTTransformFinal.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case WHY:\n    return isSetWhy();\n  }\n  throw new IllegalStateException();\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthenticationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthenticationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public AuthenticationException(AuthenticationException other)", "code": "{\n  if (other.isSetWhy()) {\n    this.why = other.why;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthenticationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public SuperColumn(SuperColumn other)", "code": "{\n  if (other.isSetName()) {\n    this.name = ByteBuffer.wrap(new byte[other.name.limit() - other.name.arrayOffset()]);\n    System.arraycopy(other.name.array(), other.name.arrayOffset(), name.array(), 0, other.name.limit() - other.name.arrayOffset());\n  }\n  if (other.isSetColumns()) {\n    List<Column> __this__columns = new ArrayList<Column>();\n    for (Column other_element : other.columns) {\n      __this__columns.add(new Column(other_element));\n    }\n    this.columns = __this__columns;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\SuperColumn.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // NAME\n      return NAME;\n    case 2: // COLUMNS\n      return COLUMNS;\n    default:\n      return null;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\SuperColumn.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // WHY\n      return WHY;\n    default:\n      return null;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthorizationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthorizationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\ColumnParent.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // COLUMN_NAMES\n      return COLUMN_NAMES;\n    case 2: // SLICE_RANGE\n      return SLICE_RANGE;\n    default:\n      return null;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\SlicePredicate.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public AuthorizationException(AuthorizationException other)", "code": "{\n  if (other.isSetWhy()) {\n    this.why = other.why;\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\AuthorizationException.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\SlicePredicate.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  switch (field) {\n  case NAME:\n    return isSetName();\n  case COLUMNS:\n    return isSetColumns();\n  }\n  throw new IllegalStateException();\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\SuperColumn.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public ColumnParent(ColumnParent other)", "code": "{\n  if (other.isSetColumn_family()) {\n    this.column_family = other.column_family;\n  }\n  if (other.isSetSuper_column()) {\n    this.super_column = ByteBuffer.wrap(new byte[other.super_column.limit() - other.super_column.arrayOffset()]);\n    System.arraycopy(other.super_column.array(), other.super_column.arrayOffset(), super_column.array(), 0, other.super_column.limit() - other.super_column.arrayOffset());\n  }\n}", "path": "Gretty\\src\\org\\mbte\\gretty\\cassandra\\thrift\\ColumnParent.java", "repo_name": "marcusb/groovypp", "stars": 10, "license": "None", "language": "java", "size": 155454}
