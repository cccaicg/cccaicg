{"docstring": "/**\n * Animate child views from side to side (based on the provided corner parameter), alternating left to right and right to left on each row.\n *\n * @param interObjectDelay long delay between objects\n * @param reversed boolean indicating if the selection is reversed\n * @param corner {@link com.willowtreeapps.spruce.sort.CorneredSort.Corner Corner} value to start from\n */\n", "func_signal": "public SnakeSort(long interObjectDelay, boolean reversed, Corner corner)", "code": "{\n    super(interObjectDelay, reversed, corner);\n    this.interObjectDelay = interObjectDelay;\n    this.reversed = reversed;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/sort/SnakeSort.java", "commit_date": "2017-07-11 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Establishes the delay between object animations and their starting position based on distance,\n * delay, and a value from the Position enum\n *\n * @param interObjectDelay delay between object animations\n * @param reversed flag to indicate if the animation should be reversed\n * @param position enum value of the position the animation should start from\n */\n", "func_signal": "public RadialSort(long interObjectDelay, boolean reversed, Position position)", "code": "{\n    super(interObjectDelay, reversed);\n    if (position == null) {\n        throw new NullPointerException(\"Position can't be null and must be a valid type\");\n    }\n    this.position = position;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/sort/RadialSort.java", "commit_date": "2017-03-08 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * excludeViews to exclude the view with Ids as a list of integers\n *\n * @param exclusionList list of ids that are excluded from the choreographed spruce animation.\n * @param mode          there are two modes for exclusion\n *                      1. R_L_MODE : In this mode, you can set the positions of the list view\n *                      / recycler view that is to be excluded/\n *                      2. NORMAL_MODE : This mode is used to exclude the views from view groups\n *                      other than recycler view/ list view.\n * @return SpruceBuilder object\n */\n", "func_signal": "public SpruceBuilder excludeViews(@NonNull List<Integer> exclusionList, int mode)", "code": "{\n    exclusionHelper.initialize(exclusionList, mode);\n    return this;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/Spruce.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * isToBeIncluded function works in 2 modes,\n * 1. ID mode : exclude if the ID is present.\n * 2. Index mode: exclude a specific index.\n *\n * @param view  the view to be checked for exclusion.\n * @param index index of the view/\n * @return true of the view is to be included else excluded.\n */\n", "func_signal": "public boolean isToBeIncluded(View view, int index)", "code": "{\n    if (mode == NORMAL_MODE) {\n        return view != null && !exclusionMap.containsKey(view.getId());\n    } else if (mode == R_L_MODE) {\n        return view != null && !exclusionMap.containsKey(index);\n    }\n    return false;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/exclusion/ExclusionHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * filterViews function will filter out the {@link HashMap} exclusionMap from the parent view group.\n *\n * @param viewGroup parent view group\n * @return returns filtered list of type view\n */\n", "func_signal": "public List<View> filterViews(ViewGroup viewGroup)", "code": "{\n    List<View> children = new ArrayList<>();\n\n    /*\n     * The reason why we use hash map for the comparison is because\n     * HashMap has complexity of O(1) for insertion and lookup.\n     * this will keep the overall complexity as O(n).\n     */\n    for (int index = 0; index < viewGroup.getChildCount(); index++) {\n        View view = viewGroup.getChildAt(index);\n        if (isToBeIncluded(view, index))\n            children.add(view);\n    }\n    return children;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/exclusion/ExclusionHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Establishes the delay between object animations and their direction based on distance,\n * delay, and a value from the Direction enum\n * @param interObjectDelay delay between object animations\n * @param reversed flag to indicate if the animation should be reversed\n * @param direction enum value of the direction the animation should start from and end with\n */\n", "func_signal": "public LinearSort(long interObjectDelay, boolean reversed, Direction direction)", "code": "{\n    super(interObjectDelay, reversed);\n    if (direction == null) {\n        throw new NullPointerException(\"Direction can't be null and must be of a valid type\");\n    }\n    this.direction = direction;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/sort/LinearSort.java", "commit_date": "2017-07-10 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Animate child views from side to side (based on the provided corner parameter).\n *\n * @param interObjectDelay long delay between objects\n * @param reversed boolean indicating if the selection is reversed\n * @param corner {@link com.willowtreeapps.spruce.sort.CorneredSort.Corner Corner} value to start from\n */\n", "func_signal": "public InlineSort(long interObjectDelay, boolean reversed, Corner corner)", "code": "{\n    super(interObjectDelay, reversed, corner);\n    this.interObjectDelay = interObjectDelay;\n    this.reversed = reversed;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/sort/InlineSort.java", "commit_date": "2017-07-11 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * getExcludedViews method gives the positions to be excluded.\n *\n * @return position list.\n */\n", "func_signal": "private List<Integer> getExcludedViews()", "code": "{\n    List<Integer> positions = new ArrayList<>();\n    if (excludeView.isChecked()) {\n        positions.add(1);\n        positions.add(4);\n        positions.add(7);\n    }\n    return positions;\n}", "path": "spruce-android/app/src/main/java/com/willowtreeapps/spurceexampleapp/fragments/ListViewFragment.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Apply one to many animations to the ViewGroup\n *\n * @param animators Animator array to apply to the ViewGroup children\n * @return SpruceBuilder object\n */\n", "func_signal": "public SpruceBuilder animateWith(Animator... animators)", "code": "{\n    this.animators = animators;\n    return this;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/Spruce.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Establishes the delay between object animations and their starting position based on distance,\n * delay, and a value from the Position enum\n *\n * @param interObjectDelay delay between object animations\n * @param reversed         flag to indicate if the animation should be reversed\n * @param position         enum value of the position the animation should start from\n */\n", "func_signal": "public ContinuousSort(long interObjectDelay, boolean reversed, Position position)", "code": "{\n    super(interObjectDelay, reversed, position);\n    this.duration = interObjectDelay;\n    this.reversed = reversed;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/sort/ContinuousSort.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * addInterpolator adds the interpolator to the {@link AnimatorSet}, This gives the user\n * complete control over the overall flow of the animation.\n * <p>\n * A {@link LinearInterpolator} is substituted of the user doesn't add an interpolator.\n *\n * @param interpolator interpolator for the animation set.\n * @return SpruceBuilder object\n */\n", "func_signal": "public SpruceBuilder addInterpolator(Interpolator interpolator)", "code": "{\n    this.interpolator = interpolator;\n    return this;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/Spruce.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Animates views in a corner like fashion. The views near the starting corner will animate first.\n *\n * @param interObjectDelay long delay between objects\n * @param reversed boolean\n * @param corner Corner enum value {@link Corner corner}\n */\n", "func_signal": "public CorneredSort(long interObjectDelay, boolean reversed, Corner corner)", "code": "{\n    super(interObjectDelay, reversed);\n    if (corner == null) {\n        throw new NullPointerException(\"Corner can't be null and must be a valid type\");\n    }\n    this.interObjectDelay = interObjectDelay;\n    this.corner = corner;\n    this.reversed = reversed;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/sort/CorneredSort.java", "commit_date": "2017-07-10 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Creates a Spruce instance and starts the sequence of animations\n *\n * @return Spruce The Spruce object to apply operations to.\n */\n", "func_signal": "public Animator start()", "code": "{\n    Spruce spruce = new Spruce(this);\n    return spruce.animatorSet;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/Spruce.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * Get the point that's closest to the start point\n *\n * @param children List of views to sort by distance\n * @return PointF of the distance between a point and 0, 0\n */\n", "func_signal": "public PointF getDistancePoint(ViewGroup parent, List<View> children)", "code": "{\n    PointF distancePoint = new PointF(0, 0);\n    return translate(distancePoint, children);\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/sort/DistancedSort.java", "commit_date": "2017-07-10 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * This method is used to set the interpolator for {@link Spruce} builder.\n */\n", "func_signal": "private void initInterpolatorSelection()", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        /*\n         * Path Interpolator is only supported only versions >=\n         * {@link Build.VERSION_CODES.LOLLIPOP}\n         */\n        final InterpolatorSelector selector = new InterpolatorSelector();\n\n        builderSingle = new AlertDialog.Builder(getActivity());\n        builderSingle.setTitle(getResources().getString(R.string.interpolator));\n        final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(getContext(),\n                android.R.layout.select_dialog_singlechoice);\n        arrayAdapter.addAll(getResources().getStringArray(R.array.interpolator_array));\n        builderSingle.setNegativeButton(getResources().getString(R.string.cancel), new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                dialog.dismiss();\n            }\n        });\n\n        builderSingle.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                btnInterpolator.setText(arrayAdapter.getItem(which));\n                interpolator = selector.getInterpolatorMap(which);\n                dialog.dismiss();\n            }\n        });\n        initializeInterpolatorClickListener();\n    } else {\n        // Don't need to show, user can use predefined interpolator from the framework.\n        btnInterpolator.setVisibility(View.GONE);\n    }\n\n}", "path": "spruce-android/app/src/main/java/com/willowtreeapps/spurceexampleapp/fragments/ControlsFragment.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * getExclusionViews method has a predefined set of Id that will be excluded from the\n * choreography.\n *\n * @return returns the list of ids to be excluded.\n */\n", "func_signal": "private List<Integer> getExclusionViews()", "code": "{\n    List<Integer> ids = new ArrayList<>();\n    if (excludeView.isChecked()) {\n        ids.add(1);\n        ids.add(10);\n        ids.add(17);\n        ids.add(21);\n        ids.add(26);\n        ids.add(30);\n    }\n    return ids;\n}", "path": "spruce-android/app/src/main/java/com/willowtreeapps/spurceexampleapp/fragments/ControlsFragment.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * getExcludedViews method gives the positions to be excluded.\n *\n * @return position list.\n */\n", "func_signal": "private List<Integer> getExcludedViews()", "code": "{\n    List<Integer> positions = new ArrayList<>();\n    if (excludeView.isChecked()) {\n        positions.add(1);\n        positions.add(4);\n        positions.add(7);\n    }\n    return positions;\n}", "path": "spruce-android/app/src/main/java/com/willowtreeapps/spurceexampleapp/fragments/RecyclerFragment.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * SortFunction to animate the ViewGroup\n *\n * @param function subclass of SortFunction to be applied to the ViewGroup\n * @return SpruceBuilder object\n */\n", "func_signal": "public SpruceBuilder sortWith(SortFunction function)", "code": "{\n    this.sortFunction = function;\n    return this;\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/Spruce.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * This method is used to setup click listener for the interpolator selection button.\n */\n", "func_signal": "private void initializeInterpolatorClickListener()", "code": "{\n    btnInterpolator.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            builderSingle.show();\n        }\n    });\n}", "path": "spruce-android/app/src/main/java/com/willowtreeapps/spurceexampleapp/fragments/ControlsFragment.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * This method is used to initialize the exclusion module.\n *\n * @param exclusionList list of items to be excluded.\n * @param mode          mode in which the exclusion works.\n */\n", "func_signal": "public void initialize(List<Integer> exclusionList, int mode)", "code": "{\n    /*\n     * making hash-map from the given list.\n     * This is to cut down the complexity in the future.\n     */\n    this.mode = mode;\n    for (Integer id : exclusionList) {\n        exclusionMap.put(id, true);\n    }\n}", "path": "spruce-android/lib/src/main/java/com/willowtreeapps/spruce/exclusion/ExclusionHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "willowtreeapps/spruce-android", "stars": 3715, "license": "mit", "language": "java", "size": 8169}
{"docstring": "/**\n * @return true if execution tree prefetching is enabled\n */\n", "func_signal": "protected boolean isExecutionTreePrefetchEnabled()", "code": "{\n  return Context.getProcessEngineConfiguration()\n    .isExecutionTreePrefetchEnabled();\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n *           +-------------------------------------------------------+\n *           | embedded subprocess                                   |\n *           |                  +--------------------------------+   |\n *           |                  | nested embedded subprocess     |   |\n * +-----+   | +-----------+    |  +-----------+                 |   |\n * |start|-->| |startInside|--> |  |startInside|                 |   |\n * +-----+   | +-----------+    |  +-----------+                 |   |\n *           |                  +--------------------------------+   |\n *           |                                                       |\n *           +-------------------------------------------------------+\n */\n", "func_signal": "@Test\npublic void testNestedSubProcessBothNoEnd()", "code": "{\n\n  ActivityInstanceVerification verifier = new ActivityInstanceVerification();\n\n  PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()\n    .createActivity(\"start\")\n      .initial()\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"embeddedsubprocess\")\n    .endActivity()\n    .createActivity(\"embeddedsubprocess\")\n      .scope()\n      .behavior(new EmbeddedSubProcess())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .createActivity(\"startInside\")\n        .behavior(new Automatic())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n        .transition(\"nestedSubProcess\")\n      .endActivity()\n        .createActivity(\"nestedSubProcess\")\n        .scope()\n        .behavior(new EmbeddedSubProcess())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n        .createActivity(\"startNestedInside\")\n          .behavior(new Automatic())\n          .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n          .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n          .endActivity()\n      .endActivity()\n    .endActivity()\n  .buildProcessDefinition();\n\n  PvmProcessInstance processInstance = processDefinition.createProcessInstance();\n  processInstance.start();\n\n  assertTrue(processInstance.isEnded());\n\n  verifier.assertStartInstanceCount(1, \"start\");\n  verifier.assertProcessInstanceParent(\"start\", processInstance);\n  verifier.assertStartInstanceCount(1, \"embeddedsubprocess\");\n  verifier.assertProcessInstanceParent(\"embeddedsubprocess\", processInstance);\n  verifier.assertStartInstanceCount(1, \"startInside\");\n  verifier.assertParent(\"startInside\", \"embeddedsubprocess\");\n  verifier.assertStartInstanceCount(1, \"nestedSubProcess\");\n  verifier.assertParent(\"nestedSubProcess\", \"embeddedsubprocess\");\n  verifier.assertStartInstanceCount(1, \"startNestedInside\");\n  verifier.assertParent(\"startNestedInside\", \"nestedSubProcess\");\n\n}", "path": "camunda-bpm-platform/engine/src/test/java/org/camunda/bpm/engine/test/standalone/pvm/PvmActivityInstanceTest.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n *                  +----------------------------+\n *                  v                            |\n * +-------+   +------+   +-----+   +-----+    +-------+\n * | start |-->| loop |-->| one |-->| two |--> | three |\n * +-------+   +------+   +-----+   +-----+    +-------+\n *                  |\n *                  |   +-----+\n *                  +-->| end |\n *                      +-----+\n */\n", "func_signal": "@Test\npublic void testWhileLoop()", "code": "{\n\n  ActivityInstanceVerification verifier = new ActivityInstanceVerification();\n  TransitionInstanceVerifyer transitionVerifier = new TransitionInstanceVerifyer();\n\n  PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()\n    .createActivity(\"start\")\n      .initial()\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .startTransition(\"loop\")\n        .executionListener(ExecutionListener.EVENTNAME_TAKE, transitionVerifier)\n      .endTransition()\n    .endActivity()\n    .createActivity(\"loop\")\n      .behavior(new While(\"count\", 0, 10))\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .startTransition(\"one\", \"more\")\n       .executionListener(ExecutionListener.EVENTNAME_TAKE, transitionVerifier)\n      .endTransition()\n      .startTransition(\"end\", \"done\")\n       .executionListener(ExecutionListener.EVENTNAME_TAKE, transitionVerifier)\n      .endTransition()\n    .endActivity()\n    .createActivity(\"one\")\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"two\")\n    .endActivity()\n    .createActivity(\"two\")\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"three\")\n    .endActivity()\n    .createActivity(\"three\")\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"loop\")\n    .endActivity()\n    .createActivity(\"end\")\n      .behavior(new End())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n    .endActivity()\n  .buildProcessDefinition();\n\n  PvmProcessInstance processInstance = processDefinition.createProcessInstance();\n  processInstance.start();\n\n  assertEquals(new ArrayList<String>(), processInstance.findActiveActivityIds());\n  assertTrue(processInstance.isEnded());\n\n  verifier.assertStartInstanceCount(1, \"start\");\n  verifier.assertProcessInstanceParent(\"start\", processInstance);\n\n  verifier.assertStartInstanceCount(11, \"loop\");\n  verifier.assertProcessInstanceParent(\"loop\", processInstance);\n\n  verifier.assertStartInstanceCount(10, \"one\");\n  verifier.assertProcessInstanceParent(\"one\", processInstance);\n\n  verifier.assertStartInstanceCount(10, \"two\");\n  verifier.assertProcessInstanceParent(\"two\", processInstance);\n\n  verifier.assertStartInstanceCount(10, \"three\");\n  verifier.assertProcessInstanceParent(\"three\", processInstance);\n\n  verifier.assertStartInstanceCount(1, \"end\");\n  verifier.assertProcessInstanceParent(\"end\", processInstance);\n}", "path": "camunda-bpm-platform/engine/src/test/java/org/camunda/bpm/engine/test/standalone/pvm/PvmActivityInstanceTest.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// toString /////////////////////////////////////////////////////////////\n", "func_signal": "public String toString()", "code": "{\n  if (isCaseInstanceExecution()) {\n    return \"CaseInstance[\"+getToStringIdentity()+\"]\";\n  } else {\n    return \"CaseExecution[\"+getToStringIdentity()+\"]\";\n  }\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// sub-/super- case instance ////////////////////////////////////////////////////\n", "func_signal": "public CaseExecutionEntity getSubCaseInstance()", "code": "{\n  ensureSubCaseInstanceInitialized();\n  return subCaseInstance;\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n * +-----+   +-----+   +-------+\n * | one |-->| two |-->| three |\n * +-----+   +-----+   +-------+\n */\n", "func_signal": "@Test\npublic void testScopeActivity()", "code": "{\n\n  ActivityInstanceVerification verifier = new ActivityInstanceVerification();\n\n  PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()\n    .createActivity(\"one\")\n      .initial()\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"two\")\n    .endActivity()\n    .createActivity(\"two\")\n      .scope()\n      .behavior(new WaitState())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"three\")\n    .endActivity()\n    .createActivity(\"three\")\n      .behavior(new End())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n    .endActivity()\n  .buildProcessDefinition();\n\n  PvmProcessInstance processInstance = processDefinition.createProcessInstance();\n  processInstance.start();\n\n  PvmExecution childExecution = processInstance.findExecution(\"two\");\n  String parentActivityInstanceId = ((ExecutionImpl)childExecution).getParentActivityInstanceId();\n  assertEquals(((ExecutionImpl)processInstance).getId(), parentActivityInstanceId);\n\n  childExecution.signal(null, null);\n\n  verifier.assertStartInstanceCount(1, \"one\");\n  verifier.assertStartInstanceCount(1, \"two\");\n  verifier.assertProcessInstanceParent(\"two\", processInstance);\n  verifier.assertStartInstanceCount(1, \"three\");\n\n}", "path": "camunda-bpm-platform/engine/src/test/java/org/camunda/bpm/engine/test/standalone/pvm/PvmActivityInstanceTest.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n * +-----+   +-----+   +-------+\n * | one |-->| two |-->| three |\n * +-----+   +-----+   +-------+\n */\n", "func_signal": "@Test\npublic void testSequence()", "code": "{\n\n  ActivityInstanceVerification verifier = new ActivityInstanceVerification();\n\n  PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()\n    .createActivity(\"one\")\n      .initial()\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"two\")\n    .endActivity()\n    .createActivity(\"two\")\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"three\")\n    .endActivity()\n    .createActivity(\"three\")\n      .behavior(new End())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n    .endActivity()\n  .buildProcessDefinition();\n\n  PvmProcessInstance processInstance = processDefinition.createProcessInstance();\n  processInstance.start();\n\n  verifier.assertStartInstanceCount(1, \"one\");\n  verifier.assertStartInstanceCount(1, \"two\");\n  verifier.assertStartInstanceCount(1, \"three\");\n\n}", "path": "camunda-bpm-platform/engine/src/test/java/org/camunda/bpm/engine/test/standalone/pvm/PvmActivityInstanceTest.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// ensures\n", "func_signal": "protected void ensureDeploymentsWithIdsExists(Set<String> expected, List<DeploymentEntity> actual)", "code": "{\n  Map<String, DeploymentEntity> deploymentMap = new HashMap<>();\n  for (DeploymentEntity deployment : actual) {\n    deploymentMap.put(deployment.getId(), deployment);\n  }\n\n  List<String> missingDeployments = getMissingElements(expected, deploymentMap);\n\n  if (!missingDeployments.isEmpty()) {\n    StringBuilder builder = new StringBuilder();\n\n    builder.append(\"The following deployments are not found by id: \");\n    builder.append(StringUtil.join(missingDeployments.iterator()));\n\n    throw new NotFoundException(builder.toString());\n  }\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// sentry /////////////////////////////////////////////////////////////////////////\n", "func_signal": "public List<CaseSentryPartEntity> getCaseSentryParts()", "code": "{\n  ensureCaseSentryPartsInitialized();\n  return caseSentryParts;\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n * Creates a meter only for database collection.\n */\n", "func_signal": "public void createDbMeter(String name)", "code": "{\n  Meter dbMeter = new Meter(name);\n  dbMeters.put(name, dbMeter);\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/metrics/MetricsRegistry.java", "commit_date": "2020-09-23 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// activity //////////////////////////////////////////////////////////////////\n", "func_signal": "public CmmnActivity getActivity()", "code": "{\n  ensureActivityInitialized();\n  return super.getActivity();\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// parent ////////////////////////////////////////////////////////////////////\n", "func_signal": "public CaseExecutionEntity getParent()", "code": "{\n  ensureParentInitialized();\n  return parent;\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// sub process instance ///////////////////////////////////////////////////\n", "func_signal": "public ExecutionEntity getSubProcessInstance()", "code": "{\n  ensureSubProcessInstanceInitialized();\n  return subProcessInstance;\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n *           +-------------------------------------------------------+\n *           | embedded subprocess                                   |\n *           |                  +--------------------------------+   |\n *           |                  | nested embedded subprocess     |   |\n * +-----+   | +-----------+    |  +-----------+   +---------+   |   |   +---+\n * |start|-->| |startInside|--> |  |startInside|-->|endInside|   |   |-->|end|\n * +-----+   | +-----------+    |  +-----------+   +---------+   |   |   +---+\n *           |                  +--------------------------------+   |\n *           |                                                       |\n *           +-------------------------------------------------------+\n */\n", "func_signal": "@Test\npublic void testNestedSubProcessNoEnd()", "code": "{\n\n  ActivityInstanceVerification verifier = new ActivityInstanceVerification();\n\n  PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()\n    .createActivity(\"start\")\n      .initial()\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"embeddedsubprocess\")\n    .endActivity()\n    .createActivity(\"embeddedsubprocess\")\n      .scope()\n      .behavior(new EmbeddedSubProcess())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .createActivity(\"startInside\")\n        .behavior(new Automatic())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n        .transition(\"nestedSubProcess\")\n      .endActivity()\n        .createActivity(\"nestedSubProcess\")\n        .scope()\n        .behavior(new EmbeddedSubProcess())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n        .createActivity(\"startNestedInside\")\n          .behavior(new Automatic())\n          .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n          .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n          .transition(\"endInside\")\n          .endActivity()\n        .createActivity(\"endInside\")\n          .behavior(new End())\n          .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n          .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n          .endActivity()\n      .endActivity()\n    .transition(\"end\")\n    .endActivity()\n    .createActivity(\"end\")\n      .behavior(new End())\n       .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n    .endActivity()\n  .buildProcessDefinition();\n\n  PvmProcessInstance processInstance = processDefinition.createProcessInstance();\n  processInstance.start();\n  assertTrue(processInstance.isEnded());\n\n  verifier.assertStartInstanceCount(1, \"start\");\n  verifier.assertProcessInstanceParent(\"start\", processInstance);\n  verifier.assertStartInstanceCount(1, \"embeddedsubprocess\");\n  verifier.assertProcessInstanceParent(\"embeddedsubprocess\", processInstance);\n  verifier.assertStartInstanceCount(1, \"startInside\");\n  verifier.assertParent(\"startInside\", \"embeddedsubprocess\");\n  verifier.assertStartInstanceCount(1, \"nestedSubProcess\");\n  verifier.assertParent(\"nestedSubProcess\", \"embeddedsubprocess\");\n  verifier.assertStartInstanceCount(1, \"startNestedInside\");\n  verifier.assertParent(\"startNestedInside\", \"nestedSubProcess\");\n  verifier.assertStartInstanceCount(1, \"endInside\");\n  verifier.assertParent(\"endInside\", \"nestedSubProcess\");\n  verifier.assertStartInstanceCount(1, \"end\");\n  verifier.assertProcessInstanceParent(\"end\", processInstance);\n}", "path": "camunda-bpm-platform/engine/src/test/java/org/camunda/bpm/engine/test/standalone/pvm/PvmActivityInstanceTest.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n *           +-------------------------------------------------+\n *           | embeddedsubprocess        +----------+          |\n *           |                     +---->|endInside1|          |\n *           |                     |     +----------+          |\n *           |                     |                           |\n * +-----+   |  +-----------+   +----+   +----+   +----------+ |   +---+\n * |start|-->|  |startInside|-->|fork|-->|wait|-->|endInside2| |-->|end|\n * +-----+   |  +-----------+   +----+   +----+   +----------+ |   +---+\n *           |                     |                           |\n *           |                     |     +----------+          |\n *           |                     +---->|endInside3|          |\n *           |                           +----------+          |\n *           +-------------------------------------------------+\n */\n", "func_signal": "@Test\npublic void testMultipleConcurrentEndsInsideEmbeddedSubProcessWithWaitState()", "code": "{\n\n  ActivityInstanceVerification verifier = new ActivityInstanceVerification();\n\n  PvmProcessDefinition processDefinition = new ProcessDefinitionBuilder()\n    .createActivity(\"start\")\n      .initial()\n      .behavior(new Automatic())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .transition(\"embeddedsubprocess\")\n    .endActivity()\n    .createActivity(\"embeddedsubprocess\")\n      .scope()\n      .behavior(new EmbeddedSubProcess())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .createActivity(\"startInside\")\n        .behavior(new Automatic())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n        .transition(\"fork\")\n      .endActivity()\n      .createActivity(\"fork\")\n        .behavior(new ParallelGateway())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n        .transition(\"endInside1\")\n        .transition(\"wait\")\n        .transition(\"endInside3\")\n      .endActivity()\n      .createActivity(\"endInside1\")\n        .behavior(new End())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .endActivity()\n      .createActivity(\"wait\")\n        .behavior(new WaitState())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n        .transition(\"endInside2\")\n      .endActivity()\n      .createActivity(\"endInside2\")\n        .behavior(new End())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .endActivity()\n      .createActivity(\"endInside3\")\n        .behavior(new End())\n        .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n        .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n      .endActivity()\n      .transition(\"end\")\n    .endActivity()\n    .createActivity(\"end\")\n      .behavior(new End())\n      .executionListener(ExecutionListener.EVENTNAME_START, verifier)\n      .executionListener(ExecutionListener.EVENTNAME_END, verifier)\n    .endActivity()\n  .buildProcessDefinition();\n\n  PvmProcessInstance processInstance = processDefinition.createProcessInstance();\n  processInstance.start();\n\n  assertFalse(processInstance.isEnded());\n  PvmExecution execution = processInstance.findExecution(\"wait\");\n  execution.signal(null, null);\n\n  assertTrue(processInstance.isEnded());\n\n  verifier.assertStartInstanceCount(1, \"start\");\n  verifier.assertProcessInstanceParent(\"start\", processInstance);\n\n  verifier.assertStartInstanceCount(1, \"embeddedsubprocess\");\n  verifier.assertProcessInstanceParent(\"embeddedsubprocess\", processInstance);\n\n  verifier.assertStartInstanceCount(1, \"startInside\");\n  verifier.assertParent(\"startInside\", \"embeddedsubprocess\");\n\n  verifier.assertStartInstanceCount(1, \"fork\");\n  verifier.assertParent(\"fork\", \"embeddedsubprocess\");\n\n  verifier.assertStartInstanceCount(1, \"wait\");\n  verifier.assertParent(\"wait\", \"embeddedsubprocess\");\n\n  verifier.assertStartInstanceCount(1, \"endInside1\");\n  verifier.assertParent(\"endInside1\", \"embeddedsubprocess\");\n\n  verifier.assertStartInstanceCount(1, \"endInside2\");\n  verifier.assertParent(\"endInside2\", \"embeddedsubprocess\");\n\n  verifier.assertStartInstanceCount(1, \"endInside3\");\n  verifier.assertParent(\"endInside3\", \"embeddedsubprocess\");\n\n  verifier.assertStartInstanceCount(1, \"end\");\n  verifier.assertProcessInstanceParent(\"end\", processInstance);\n\n}", "path": "camunda-bpm-platform/engine/src/test/java/org/camunda/bpm/engine/test/standalone/pvm/PvmActivityInstanceTest.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// getters\n", "func_signal": "protected List<String> getMissingElements(Set<String> expected, Map<String, ?> actual)", "code": "{\n  List<String> missingElements = new ArrayList<>();\n  for (String value : expected) {\n    if (!actual.containsKey(value)) {\n      missingElements.add(value);\n    }\n  }\n  return missingElements;\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n * @see ExecutionEntity#ensureExecutionTreeInitialized\n */\n", "func_signal": "protected void ensureCaseExecutionTreeInitialized()", "code": "{\n  List<CaseExecutionEntity> executions = Context.getCommandContext()\n    .getCaseExecutionManager()\n    .findChildCaseExecutionsByCaseInstanceId(caseInstanceId);\n\n  CaseExecutionEntity caseInstance = null;\n\n  Map<String, CaseExecutionEntity> executionMap = new HashMap<String, CaseExecutionEntity>();\n  for (CaseExecutionEntity execution : executions) {\n    execution.caseExecutions = new ArrayList<CaseExecutionEntity>();\n    executionMap.put(execution.getId(), execution);\n    if(execution.isCaseInstanceExecution()) {\n      caseInstance = execution;\n    }\n  }\n\n  for (CaseExecutionEntity execution : executions) {\n    String parentId = execution.getParentId();\n    CaseExecutionEntity parent = executionMap.get(parentId);\n    if(!execution.isCaseInstanceExecution()) {\n      execution.caseInstance = caseInstance;\n      execution.parent = parent;\n      parent.caseExecutions.add(execution);\n    } else {\n      execution.caseInstance = execution;\n    }\n  }\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmmn/entity/runtime/CaseExecutionEntity.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n * This assumes that all children have been fetched\n */\n", "func_signal": "protected boolean matches(ExecutionTree tree)", "code": "{\n  // match activity id\n  String actualActivityId = tree.getActivityId();\n  if (expectedActivityId == null && actualActivityId != null) {\n    return false;\n  } else if (expectedActivityId != null && !expectedActivityId.equals(tree.getActivityId())) {\n    return false;\n  }\n\n  if (expectedId != null && !expectedId.equals(tree.getId())) {\n    return false;\n  }\n\n\n  // match is scope\n  if (expectedIsScope != null && !expectedIsScope.equals(tree.isScope())) {\n    return false;\n  }\n\n  if (expectedIsConcurrent != null && !expectedIsConcurrent.equals(tree.isConcurrent())) {\n    return false;\n  }\n\n  if (expectedIsEventScope != null && !expectedIsEventScope.equals(tree.isEventScope())) {\n    return false;\n  }\n\n  // match children\n  if (tree.getExecutions().size() != childAssertions.size()) {\n    return false;\n  }\n\n  List<ExecutionTreeStructureAssertion> unmatchedChildAssertions = new ArrayList<ExecutionTreeStructureAssertion>(childAssertions);\n  for (ExecutionTree child : tree.getExecutions()) {\n    for (ExecutionTreeStructureAssertion childAssertion : unmatchedChildAssertions) {\n      if (childAssertion.matches(child)) {\n        unmatchedChildAssertions.remove(childAssertion);\n        break;\n      }\n    }\n  }\n\n  if (!unmatchedChildAssertions.isEmpty()) {\n    return false;\n  }\n\n  return true;\n}", "path": "camunda-bpm-platform/engine/src/test/java/org/camunda/bpm/engine/test/util/ExecutionTreeStructureAssertion.java", "commit_date": "2019-04-09 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "// setters, initializers etc.\n", "func_signal": "protected void createUserOperationLog(DeploymentBuilderImpl deploymentBuilder, Deployment deployment, CommandContext commandContext)", "code": "{\n  UserOperationLogManager logManager = commandContext.getOperationLogManager();\n\n  List<PropertyChange> properties = new ArrayList<>();\n\n  PropertyChange filterDuplicate = new PropertyChange(\"duplicateFilterEnabled\", null, deploymentBuilder.isDuplicateFilterEnabled());\n  properties.add(filterDuplicate);\n\n  if (deploymentBuilder.isDuplicateFilterEnabled()) {\n    PropertyChange deployChangedOnly = new PropertyChange(\"deployChangedOnly\", null, deploymentBuilder.isDeployChangedOnly());\n    properties.add(deployChangedOnly);\n  }\n\n  logManager.logDeploymentOperation(UserOperationLogEntry.OPERATION_TYPE_CREATE, deployment.getId(), properties);\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/cmd/DeployCmd.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "/**\n * Creates a meter for both database and telemetry collection.\n */\n", "func_signal": "public void createMeter(String name)", "code": "{\n  Meter dbMeter = new Meter(name);\n  dbMeters.put(name, dbMeter);\n\n  Meter telemetryMeter = new Meter(name);\n  telemetryMeters.put(name, telemetryMeter);\n}", "path": "camunda-bpm-platform/engine/src/main/java/org/camunda/bpm/engine/impl/metrics/MetricsRegistry.java", "commit_date": "2020-09-23 00:00:00", "repo_name": "camunda/camunda-bpm-platform", "stars": 3868, "license": "apache-2.0", "language": "java", "size": 156175}
{"docstring": "//TODO: Rename it\n", "func_signal": "@Nullable\nprivate void loadAndParseConfigData()", "code": "{\n    synchronized (this) {\n        try {\n            if (fileData == null) {\n                File f = new File(Utils.getApplication().getFilesDir().getAbsolutePath() + \"/qnotified_\" + mUin + \".dat\");\n                fileData = new ConfigManager(f, SyncUtils.FILE_UIN_DATA, mUin);\n                SyncUtils.addOnFileChangedListener(this);\n            }\n            updateFriendTableVersion();\n            initEventsTable();\n            tableToFriend();\n            tableToEvents();\n            lastUpdateTimeSec = (long) fileData.getAllConfig().get(\"lastUpdateFl\");\n        } catch (IOException e) {\n            log(e);\n        }\n    }\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/ExfriendManager.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * @hide\n */\n//@Deprecated\n", "func_signal": "public ConcurrentHashMap<Integer, EventRecord> getEvents()", "code": "{\n    dirtySerializedFlag = true;\n    return events;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/ExfriendManager.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * \u6ca1\u826f\u5fc3\u7684method\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    if (Looper.myLooper() == mainLooper) {\n        statusTv.setTextColor(color);\n        return;\n    }\n    while (isVisible && needRun) {\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException ignored) {\n        }\n        step += 30;\n        stage = (stage + step / 256) % 6;\n        step = step % 256;\n        switch (stage) {\n            case 0:\n                color = Color.argb(255, 255, step, 0);//R-- RG-\n                break;\n            case 1:\n                color = Color.argb(255, 255 - step, 255, 0);//RG- -G-\n                break;\n            case 2:\n                color = Color.argb(255, 0, 255, step);//-G- -GB\n                break;\n            case 3:\n                color = Color.argb(255, 0, 255 - step, 255);//-GB --B\n                break;\n            case 4:\n                color = Color.argb(255, step, 0, 255);//--B R-B\n                break;\n            case 5:\n                color = Color.argb(255, 255, 0, 255 - step);//R-B R--\n                break;\n        }\n        runOnUiThread(this);\n    }\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/activity/ConfigActivity.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//FailureZero\n", "func_signal": "public static int getIdentifier(Context ctx, String type, String name, boolean allowSearch)", "code": "{\n    if (name == null) return 0;\n    if (name.contains(\"@\")) {\n        String[] arr = name.split(\"@\");\n        name = arr[arr.length - 1];\n    }\n    if (type == null && name.contains(\"/\")) {\n        String[] arr = name.split(\"/\");\n        type = arr[0];\n        name = arr[arr.length - 1];\n    }\n    try {\n        return Integer.parseInt(name);\n    } catch (NumberFormatException ignored) {\n    }\n    if (ctx == null) ctx = Utils.getApplication();\n    String pkg = ctx.getPackageName();\n    int ret = ctx.getResources().getIdentifier(name, type, pkg);\n    if (ret != 0) return ret;\n    //ResId is obfuscated, try to get it from cache.\n    ConfigManager cache = ConfigManager.getCache();\n    ret = cache.getIntOrDefault(CACHED_RES_ID_NAME_PREFIX + type + \"/\" + name, 0);\n    int oldcode = cache.getIntOrDefault(CACHED_RES_ID_CODE_PREFIX + type + \"/\" + name, -1);\n    int currcode = Utils.getHostVersionCode32();\n    if (ret != 0 && (oldcode == currcode)) {\n        return ret;\n    }\n    //parse thr ARSC to find it.\n    if (!allowSearch) return 0;\n    ret = enumArsc(pkg, type, name);\n    if (ret != 0) {\n        cache.getAllConfig().put(CACHED_RES_ID_NAME_PREFIX + type + \"/\" + name, ret);\n        cache.getAllConfig().put(CACHED_RES_ID_CODE_PREFIX + type + \"/\" + name, currcode);\n        try {\n            cache.save();\n        } catch (IOException e) {\n            log(e);\n        }\n    }\n    return ret;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/util/ArscKit.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//Return the size 2 or 4\n", "func_signal": "public static int readUtf16_len(byte[] src, int p, int[] ret)", "code": "{\n    int s = readLe16(src, p);\n    if ((0x8000 & s) != 0) {\n        ret[0] = (s & 0x7FFF) << 16 | (readLe16(src, p + 2) & 0xFFFF);\n        return 4;\n    } else {\n        ret[0] = s & 0xFFFF;\n        return 2;\n    }\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/util/ArscKit.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//@Deprecated\n", "func_signal": "public static DexFieldDescriptor guessFieldByNewInstance(byte[] buf, DexMethodDescriptor method, Class<?> instanceClass) throws NoSuchMethodException", "code": "{\n    if (instanceClass == null) throw new NullPointerException(\"instanceClass == null\");\n    return guessFieldByNewInstance(buf, method, \"L\" + instanceClass.getName().replace('.', '/') + \";\");\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/util/DexFlow.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/*public static int getResourceId(Context context,String name,String type,String packageName){\n Resources themeResources=null;\n PackageManager pm=context.getPackageManager();\n try{\n themeResources=pm.getResourcesForApplication(packageName);\n return themeResources.getIdentifier(name,type,packageName);\n }catch(PackageManager.NameNotFoundException e){}\n return 0;\n }*/\n", "func_signal": "public void doRequestFlRefresh()", "code": "{\n        boolean inLogin;\n        inLogin = (Utils.getLongAccountUin() == mUin);\n        if (!inLogin) {\n            logi(\"doRequestFlRefresh but uin(\" + mUin + \") isn't logged in.\");\n            return;\n        }\n        try {\n            //log(\"Request friendlist update for \" + mUin + \" ...\");\n            invoke_virtual_any(Utils.getFriendListHandler(), true, true, boolean.class, boolean.class, void.class);\n        } catch (Exception e) {\n            log(e);\n        }\n    }", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/ExfriendManager.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//default\n", "func_signal": "@Override\npublic boolean onFileChanged(int type, long uin, int what)", "code": "{\n    if (type == mFileTypeId) {\n        dirty = true;\n    }\n    return false;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/config/ConfigManager.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//@Deprecated\n", "func_signal": "public ConcurrentHashMap<String, Object> getAllConfig()", "code": "{\n    try {\n        if (dirty) reload();\n    } catch (Exception ignored) {\n    }\n    return config;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/config/ConfigManager.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * @hide\n */\n//@Deprecated\n", "func_signal": "public ConcurrentHashMap<Long, FriendRecord> getPersons()", "code": "{\n    dirtySerializedFlag = true;\n    return persons;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/ExfriendManager.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * ?(0xFE)QNC I_version I_size I_RAW_reserved 16_md5 DATA\n */\n", "func_signal": "public void reload() throws IOException", "code": "{\n    synchronized (this) {\n        FileInputStream fin;\n        fin = new FileInputStream(file);\n        if (fin.available() == 0) return;\n        config.clear();\n        DataInputStream in = new DataInputStream(fin);\n        in.skip(4);//flag\n        int endian = in.readInt();\n        int file_size = in.readInt();\n        readIRaw(in);//ignore\n        byte[] md5 = new byte[16];\n        if (in.read(md5, 0, 16) < 16) throw new IOException(\"Failed to read md5\");\n        String key;\n        a:\n        while (in.available() > 0) {\n            int _type = in.read();\n            if (_type < 0 || _type > 255)\n                throw new IOException(\"Unexpected type:\" + _type + \",version:\" + endian);\n            key = readIStr(in);\n            switch ((byte) _type) {\n                case TYPE_VOID:\n                    log(new RuntimeException(\"ConcurrentHashMap/reload: replace null with \" + VOID_INSTANCE + \" in [key=\\\"\" + key + \"\\\",type=TYPE_VOID] at \" + file.getAbsolutePath()));\n                    config.put(key, VOID_INSTANCE);\n                    break;\n                case TYPE_BYTE:\n                    config.put(key, (byte) in.read());\n                    break;\n                case TYPE_BOOL:\n                    config.put(key, in.read() != 0);\n                    break;\n                case TYPE_WCHAR32:\n                    config.put(key, in.readInt());\n                    break;\n                case TYPE_INT:\n                    config.put(key, in.readInt());\n                    break;\n                case TYPE_SHORT:\n                    config.put(key, in.readShort());\n                    break;\n                case TYPE_LONG:\n                    config.put(key, in.readLong());\n                    break;\n                case TYPE_FLOAT:\n                    config.put(key, in.readFloat());\n                    break;\n                case TYPE_DOUBLE:\n                    config.put(key, in.readDouble());\n                    break;\n                case TYPE_IUTF8:\n                    config.put(key, readIStr(in));\n                    break;\n                case TYPE_IRAW:\n                    config.put(key, readIRaw(in));\n                    break;\n                case TYPE_TABLE:\n                    config.put(key, readTable(in));\n                    break;\n                case TYPE_ARRAY:\n                    config.put(key, readArray(in));\n                    break;\n                case TYPE_EOF:\n                    break a;\n                default:\n                    throw new IOException(\"Unexpected type:\" + _type + \",name:\\\"\" + key + \"\\\",version:\" + endian);\n            }\n        }\n        dirty = false;\n    }\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/config/ConfigManager.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * We try to add some columns\n */\n", "func_signal": "private void initEventsTable()", "code": "{\n    Table<Integer> ev = (Table<Integer>) fileData.getAllConfig().get(\"events\");\n    if (ev == null) {\n        logd(\"damn! initEvT in null\");\n        return;\n    }\n    /** uin+\"\" is key */\n    ev.keyName = \"id\";\n    ev.keyType = TYPE_INT;\n    ev.addField(\"timeRangeEnd\", TYPE_LONG);\n    ev.addField(\"timeRangeBegin\", TYPE_LONG);\n    ev.addField(\"event\", TYPE_INT);\n    ev.addField(\"operand\", TYPE_LONG);\n    ev.addField(\"operator\", TYPE_LONG);\n    ev.addField(\"executor\", TYPE_LONG);\n    ev.addField(\"before\", TYPE_IUTF8);\n    ev.addField(\"after\", TYPE_IUTF8);\n    ev.addField(\"extra\", TYPE_IUTF8);\n    ev.addField(\"_nick\", TYPE_IUTF8);\n    ev.addField(\"_remark\", TYPE_IUTF8);\n    ev.addField(\"_friendStatus\", TYPE_INT);\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/ExfriendManager.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//struct DexCode {\n//0   u2  registersSize;\n//2   u2  insSize;\n//4   u2  outsSize;\n//6   u2  triesSize;\n//8   u4  debugInfoOff;       /* file offset to debug info stream */\n//12  u4  insnsSize;          /* size of the insns array, in u2 units */\n//16  u2  insns[1];\n//    /* followed by optional u2 padding */\n//    /* followed by try_item[triesSize] */\n//    /* followed by uleb128 handlersSize */\n//    /* followed by catch_handler_item[handlersSize] */\n//};\n", "func_signal": "public static boolean hasClassInDex(byte[] dex, String clz)", "code": "{\n    if (!clz.endsWith(\";\")) {\n        clz = \"L\" + clz.replace('.', '/') + \";\";\n    }\n    int classDefsSize = readLe32(dex, 0x60);\n    int classDefsOff = readLe32(dex, 0x64);\n    for (int cn = 0; cn < classDefsSize; cn++) {\n        int classIdx = readLe32(dex, classDefsOff + cn * 32);\n        String c = readType(dex, classIdx);\n        if (clz.equals(c)) return true;\n    }\n    return false;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/util/DexFlow.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//FailureZero\n", "func_signal": "private static int seekInArscByFileName(byte[] buf, String pkgName, String type, String name)", "code": "{\n    try {\n        int p = 0, p2;\n        int chunkSize = readLe32(buf, p + 4);\n        int headerSize = readLe16(buf, p + 2);\n        if (buf.length < chunkSize) throw new IllegalArgumentException(\"Truncated data\");\n        //int packageCount = readLe32(buf, p + 8);\n        p += headerSize;\n        int targetStrIdx = findInterestedStringIndex(buf, p, \"/\" + name + \".\");\n        if (targetStrIdx == -1) return 0;\n        p += getChunkSize(buf, p);\n        if (readLe16(buf, p) != RES_TABLE_PACKAGE_TYPE) {\n            throw new IllegalArgumentException(\"Excepted RES_TABLE_PACKAGE_TYPE, got \" + Integer.toHexString(readLe16(buf, p)));\n        }\n        //headerSize = readLe16(buf, p + 2);\n        //chunkSize = readLe32(buf, p + 4);\n        int pkgId = readLe32(buf, p + 8);\n        String currPkgName;\n        try {\n            currPkgName = new String(buf, p + 12, 256, \"UTF-16LE\").replace(\"\\0\", \"\");\n        } catch (UnsupportedEncodingException e) {\n            currPkgName = new String(buf, p + 12, 256).replace(\"\\0\", \"\");\n        }\n        p2 = p + 12 + 256;\n        int typeStrOff = readLe32(buf, p2);\n        int lastPublicType = readLe32(buf, p2 + 4);\n        int keyStrOff = readLe32(buf, p2 + 8);\n        int lastPublicKey = readLe32(buf, p2 + 12);\n        @SuppressLint(\"UseSparseArrays\") HashMap<Integer, String> typeStrPool = new HashMap<>();\n        parseStringPool(buf, p + typeStrOff, typeStrPool);\n        //HashMap<Integer, String> keyStrPool = new HashMap<>();\n        p2 = p + keyStrOff + getChunkSize(buf, p + keyStrOff);\n        while (p2 < buf.length) {\n            int chunkType = readLe16(buf, p2);\n            headerSize = readLe16(buf, p2 + 2);\n            chunkSize = readLe32(buf, p2 + 4);\n            if (chunkType == RES_TABLE_TYPE_TYPE) {\n                int typeId = getTypeChunkTypeId(buf, p2);\n                if (typeStrPool.get(typeId - 1).equals(type)) {\n                    int ret = seekStrByIndex(buf, p, p2 - p, targetStrIdx);\n                    if (ret != -1) {\n                        return (pkgId << 24) | (typeId << 16) | ret;\n                    }\n                }\n            }\n            p2 += chunkSize;\n        }\n    } catch (Throwable e) {\n        log(e);\n    }\n    return 0;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/util/ArscKit.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//Return the size 1 or 2\n", "func_signal": "public static int readUtf8_len(byte[] src, int p, int[] ret)", "code": "{\n    byte b = src[p];\n    if ((0x80 & b) != 0) {\n        ret[0] = (b & 0x7f) << 8 | (src[p + 1] & 0xFF);\n        return 2;\n    } else {\n        ret[0] = b & 0xFF;\n        return 1;\n    }\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/util/ArscKit.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * @param buf       the byte array containing the whole dex file\n * @param opcodeOff offset relative to {@code buf}\n * @param verify    whether to verify if the {@code opcodeOff} is aligned to opcode,\n *                  return {@code null} if the offset failed the verification\n * @return\n */\n", "func_signal": "@Nullable\npublic static DexMethodDescriptor getDexMethodByOpOffset(byte[] buf, int opcodeOff, boolean verify)", "code": "{\n    int methodIdsSize = readLe32(buf, 0x58);\n    int methodIdsOff = readLe32(buf, 0x5c);\n    int classDefsSize = readLe32(buf, 0x60);\n    int classDefsOff = readLe32(buf, 0x64);\n    int[] p = new int[1];\n    int[] ret = new int[1];\n    int[] co = new int[1];\n    for (int cn = 0; cn < classDefsSize; cn++) {\n        int classIdx = readLe32(buf, classDefsOff + cn * 32);\n        int classDataOff = readLe32(buf, classDefsOff + cn * 32 + 24);\n        p[0] = classDataOff;\n        if (classDataOff == 0) continue;\n        int fieldIdx = 0;\n        int staticFieldsSize = readUleb128(buf, p),\n                instanceFieldsSize = readUleb128(buf, p),\n                directMethodsSize = readUleb128(buf, p),\n                virtualMethodsSize = readUleb128(buf, p);\n        for (int fn = 0; fn < staticFieldsSize + instanceFieldsSize; fn++) {\n            fieldIdx += readUleb128(buf, p);\n            int accessFlags = readUleb128(buf, p);\n        }\n        int methodIdx = 0;\n        for (int mn = 0; mn < directMethodsSize; mn++) {\n            methodIdx += readUleb128(buf, p);\n            int accessFlags = readUleb128(buf, p);\n            int codeOff = co[0] = readUleb128(buf, p);\n            if (codeOff == 0) continue;\n            int insnsSize = readLe32(buf, codeOff + 12);\n            if (codeOff + 16 <= opcodeOff && opcodeOff <= codeOff + 16 + insnsSize * 2) {\n                if (verify && !verifyOpcodeOffset(buf, codeOff + 16, insnsSize * 2, opcodeOff)) {\n                    return null;\n                }\n                String clz = readType(buf, classIdx);\n                int pMethodId = methodIdsOff + 8 * methodIdx;\n                String name = readString(buf, readLe32(buf, pMethodId + 4));\n                String sig = readProto(buf, readLe16(buf, pMethodId + 2));\n                return new DexMethodDescriptor(clz, name, sig);\n            }\n        }\n        methodIdx = 0;\n        for (int mn = 0; mn < virtualMethodsSize; mn++) {\n            methodIdx += readUleb128(buf, p);\n            int accessFlags = readUleb128(buf, p);\n            int codeOff = co[0] = readUleb128(buf, p);\n            if (codeOff == 0) continue;\n            int insnsSize = readLe32(buf, codeOff + 12);\n            if (codeOff + 16 <= opcodeOff && opcodeOff <= codeOff + 16 + insnsSize * 2) {\n                if (verify && !verifyOpcodeOffset(buf, codeOff + 16, insnsSize * 2, opcodeOff)) {\n                    return null;\n                }\n                String clz = readType(buf, classIdx);\n                int pMethodId = methodIdsOff + 8 * methodIdx;\n                String name = readString(buf, readLe32(buf, pMethodId + 4));\n                String sig = readProto(buf, readLe16(buf, pMethodId + 2));\n                return new DexMethodDescriptor(clz, name, sig);\n            }\n        }\n    }\n    return null;\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/util/DexFlow.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/* We try to add some columns */\n", "func_signal": "private void updateFriendTableVersion()", "code": "{\n    Table<Long> fr = (Table<Long>) fileData.getAllConfig().get(\"friends\");\n    if (fr == null) {\n        logd(\"damn! updateFriendTableVersion in null\");\n    }\n    /* uin+\"\" is key */\n    fr.keyName = \"uin\";\n    fr.keyType = TYPE_LONG;\n    fr.addField(\"nick\", TYPE_IUTF8);\n    fr.addField(\"remark\", TYPE_IUTF8);\n    fr.addField(\"friendStatus\", TYPE_INT);\n    fr.addField(\"serverTime\", TYPE_LONG);\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/ExfriendManager.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * Send a broadcast meaning a file was changed\n *\n * @param file FILE_*\n * @param uin  0 for a common file\n * @param what 0 for unspecified\n */\n", "func_signal": "public static void onFileChanged(int file, long uin, int what)", "code": "{\n    Context ctx = getApplication();\n    Intent changed = new Intent(SYNC_FILE_CHANGED);\n    changed.setPackage(ctx.getPackageName());\n    initId();\n    changed.putExtra(\"id\", myId);\n    changed.putExtra(\"file\", file);\n    changed.putExtra(\"uin\", uin);\n    changed.putExtra(\"what\", what);\n    ctx.sendBroadcast(changed);\n    //log(\"Tx: file changed \" + file);\n}", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/SyncUtils.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "//    public static int getUid() {\n//        try {\n//            return Libcore.os.getuid();\n//        } catch (Throwable e) {\n//            return android.os.Process.myUid();\n//        }\n//    }\n", "func_signal": "public static void initId()", "code": "{\n        if (myId == 0) {\n            myId = (int) ((Math.random()) * (Integer.MAX_VALUE / 4));\n        }\n    }", "path": "QNotified/app/src/main/java/nil/nadph/qnotified/SyncUtils.java", "commit_date": "2020-09-15 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * Set the new color\n *\n * @param color The newly selected color\n */\n", "func_signal": "public void saveValue(@ColorInt int color)", "code": "{\n    this.color = color;\n    persistInt(this.color);\n    notifyChanged();\n    callChangeListener(color);\n}", "path": "QNotified/app/src/main/java/me/zpp0196/qqpurify/fragment/custom/ColorPickerPreference.java", "commit_date": "2020-08-06 00:00:00", "repo_name": "ferredoxin/QNotified", "stars": 3268, "license": "other", "language": "java", "size": 8766}
{"docstring": "/**\n * Parse the given string into Date object.\n * @param str String\n * @return Date\n */\n", "func_signal": "public Date parseDate(String str)", "code": "{\n  try {\n    return dateFormat.parse(str);\n  } catch (java.text.ParseException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Set the connect timeout (in milliseconds).\n * A value of 0 means no timeout, otherwise values must be between 1 and\n * {@link Integer#MAX_VALUE}.\n * @param connectionTimeout Connection timeout in milliseconds\n * @return API client\n */\n", "func_signal": "public ApiClient setConnectTimeout(int connectionTimeout)", "code": "{\n  this.connectionTimeout = connectionTimeout;\n  httpClient.property(ClientProperties.CONNECT_TIMEOUT, connectionTimeout);\n  return this;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Enable/disable debugging for this API client.\n *\n * @param debugging To enable (true) or disable (false) debugging\n * @return API client\n */\n", "func_signal": "public ApiClient setDebugging(boolean debugging)", "code": "{\n  this.debugging = debugging;\n  // Rebuild HTTP Client according to the new \"debugging\" value.\n  this.httpClient = buildHttpClient(debugging);\n  return this;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Set temp folder path\n * @param tempFolderPath Temp folder path\n * @return API client\n */\n", "func_signal": "public ApiClient setTempFolderPath(String tempFolderPath)", "code": "{\n  this.tempFolderPath = tempFolderPath;\n  return this;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Select the Accept header's value from the given accepts array:\n *   if JSON exists in the given array, use it;\n *   otherwise use all of them (joining into a string)\n *\n * @param accepts The accepts array to select from\n * @return The Accept header to use. If the given array is empty,\n *   null will be returned (not to set the Accept header explicitly).\n */\n", "func_signal": "public String selectHeaderAccept(String[] accepts)", "code": "{\n  if (accepts.length == 0) {\n    return null;\n  }\n  for (String accept : accepts) {\n    if (isJsonMime(accept)) {\n      return accept;\n    }\n  }\n  return StringUtil.join(accepts, \",\");\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Build the Client used to make HTTP requests.\n * @param debugging Debug setting\n * @return Client\n */\n", "func_signal": "protected Client buildHttpClient(boolean debugging)", "code": "{\n  final ClientConfig clientConfig = new ClientConfig();\n  clientConfig.register(MultiPartFeature.class);\n  clientConfig.register(json);\n  clientConfig.register(JacksonFeature.class);\n  clientConfig.property(HttpUrlConnectorProvider.SET_METHOD_WORKAROUND, true);\n  if (debugging) {\n    clientConfig.register(new LoggingFeature(java.util.logging.Logger.getLogger(LoggingFeature.DEFAULT_LOGGER_NAME), java.util.logging.Level.INFO, LoggingFeature.Verbosity.PAYLOAD_ANY, 1024*50 /* Log payloads up to 50K */));\n    clientConfig.property(LoggingFeature.LOGGING_FEATURE_VERBOSITY, LoggingFeature.Verbosity.PAYLOAD_ANY);\n    // Set logger to ALL\n    java.util.logging.Logger.getLogger(LoggingFeature.DEFAULT_LOGGER_NAME).setLevel(java.util.logging.Level.ALL);\n  }\n  performAdditionalClientConfiguration(clientConfig);\n  return ClientBuilder.newClient(clientConfig);\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Helper method to set API key prefix for the first API key authentication.\n * @param apiKeyPrefix API key prefix\n */\n", "func_signal": "public void setApiKeyPrefix(String apiKeyPrefix)", "code": "{\n  for (Authentication auth : authentications.values()) {\n    if (auth instanceof ApiKeyAuth) {\n      ((ApiKeyAuth) auth).setApiKeyPrefix(apiKeyPrefix);\n      return;\n    }\n  }\n  throw new RuntimeException(\"No API key authentication configured!\");\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Helper method to set access token for the first OAuth2 authentication.\n * @param accessToken Access token\n */\n", "func_signal": "public void setAccessToken(String accessToken)", "code": "{\n  for (Authentication auth : authentications.values()) {\n    if (auth instanceof OAuth) {\n      ((OAuth) auth).setAccessToken(accessToken);\n      return;\n    }\n  }\n  throw new RuntimeException(\"No OAuth2 authentication configured!\");\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Download file from the given response.\n * @param response Response\n * @return File\n * @throws ApiException If fail to read file content from response and write to disk\n */\n", "func_signal": "public File downloadFileFromResponse(Response response) throws ApiException", "code": "{\n  try {\n    File file = prepareDownloadFile(response);\n    Files.copy(response.readEntity(InputStream.class), file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n    return file;\n  } catch (IOException e) {\n    throw new ApiException(e);\n  }\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Set the read timeout (in milliseconds).\n * A value of 0 means no timeout, otherwise values must be between 1 and\n * {@link Integer#MAX_VALUE}.\n * @param readTimeout Read timeout in milliseconds\n * @return API client\n */\n", "func_signal": "public ApiClient setReadTimeout(int readTimeout)", "code": "{\n  this.readTimeout = readTimeout;\n  httpClient.property(ClientProperties.READ_TIMEOUT, readTimeout);\n  return this;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Serialize the given Java object into string entity according the given\n * Content-Type (only JSON is supported for now).\n * @param obj Object\n * @param formParams Form parameters\n * @param contentType Context type\n * @return Entity\n * @throws ApiException API exception\n */\n", "func_signal": "public Entity<?> serialize(Object obj, Map<String, Object> formParams, String contentType) throws ApiException", "code": "{\n  Entity<?> entity;\n  if (contentType.startsWith(\"multipart/form-data\")) {\n    MultiPart multiPart = new MultiPart();\n    for (Entry<String, Object> param: formParams.entrySet()) {\n      if (param.getValue() instanceof File) {\n        File file = (File) param.getValue();\n        FormDataContentDisposition contentDisp = FormDataContentDisposition.name(param.getKey())\n            .fileName(file.getName()).size(file.length()).build();\n        multiPart.bodyPart(new FormDataBodyPart(contentDisp, file, MediaType.APPLICATION_OCTET_STREAM_TYPE));\n      } else {\n        FormDataContentDisposition contentDisp = FormDataContentDisposition.name(param.getKey()).build();\n        multiPart.bodyPart(new FormDataBodyPart(contentDisp, parameterToString(param.getValue())));\n      }\n    }\n    entity = Entity.entity(multiPart, MediaType.MULTIPART_FORM_DATA_TYPE);\n  } else if (contentType.startsWith(\"application/x-www-form-urlencoded\")) {\n    Form form = new Form();\n    for (Entry<String, Object> param: formParams.entrySet()) {\n      form.param(param.getKey(), parameterToString(param.getValue()));\n    }\n    entity = Entity.entity(form, MediaType.APPLICATION_FORM_URLENCODED_TYPE);\n  } else {\n    // We let jersey handle the serialization\n    entity = Entity.entity(obj, contentType);\n  }\n  return entity;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Set the date format used to parse/format date parameters.\n * @param dateFormat Date format\n * @return API client\n */\n", "func_signal": "public ApiClient setDateFormat(DateFormat dateFormat)", "code": "{\n  this.dateFormat = dateFormat;\n  // also set the date format for model (de)serialization with Date properties\n  this.json.setDateFormat((DateFormat) dateFormat.clone());\n  return this;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/*\n * Format to {@code Pair} objects.\n * @param collectionFormat Collection format\n * @param name Name\n * @param value Value\n * @return List of pairs\n */\n", "func_signal": "public List<Pair> parameterToPairs(String collectionFormat, String name, Object value)", "code": "{\n  List<Pair> params = new ArrayList<Pair>();\n\n  // preconditions\n  if (name == null || name.isEmpty() || value == null) return params;\n\n  Collection valueCollection;\n  if (value instanceof Collection) {\n    valueCollection = (Collection) value;\n  } else {\n    params.add(new Pair(name, parameterToString(value)));\n    return params;\n  }\n\n  if (valueCollection.isEmpty()){\n    return params;\n  }\n\n  // get the collection format (default: csv)\n  String format = (collectionFormat == null || collectionFormat.isEmpty() ? \"csv\" : collectionFormat);\n\n  // create the params based on the collection format\n  if (\"multi\".equals(format)) {\n    for (Object item : valueCollection) {\n      params.add(new Pair(name, parameterToString(item)));\n    }\n\n    return params;\n  }\n\n  String delimiter = \",\";\n\n  if (\"csv\".equals(format)) {\n    delimiter = \",\";\n  } else if (\"ssv\".equals(format)) {\n    delimiter = \" \";\n  } else if (\"tsv\".equals(format)) {\n    delimiter = \"\\t\";\n  } else if (\"pipes\".equals(format)) {\n    delimiter = \"|\";\n  }\n\n  StringBuilder sb = new StringBuilder() ;\n  for (Object item : valueCollection) {\n    sb.append(delimiter);\n    sb.append(parameterToString(item));\n  }\n\n  params.add(new Pair(name, sb.substring(1)));\n\n  return params;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Check if the given MIME is a JSON MIME.\n * JSON MIME examples:\n *   application/json\n *   application/json; charset=UTF8\n *   APPLICATION/JSON\n *   application/vnd.company+json\n * \"* / *\" is also default to JSON\n * @param mime MIME\n * @return True if the MIME type is JSON\n */\n", "func_signal": "public boolean isJsonMime(String mime)", "code": "{\n  String jsonMime = \"(?i)^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$\";\n  return mime != null && (mime.matches(jsonMime) || mime.equals(\"*/*\"));\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Helper method to set username for the first HTTP basic authentication.\n * @param username Username\n */\n", "func_signal": "public void setUsername(String username)", "code": "{\n  for (Authentication auth : authentications.values()) {\n    if (auth instanceof HttpBasicAuth) {\n      ((HttpBasicAuth) auth).setUsername(username);\n      return;\n    }\n  }\n  throw new RuntimeException(\"No HTTP basic authentication configured!\");\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Helper method to set API key value for the first API key authentication.\n * @param apiKey API key\n */\n", "func_signal": "public void setApiKey(String apiKey)", "code": "{\n  for (Authentication auth : authentications.values()) {\n    if (auth instanceof ApiKeyAuth) {\n      ((ApiKeyAuth) auth).setApiKey(apiKey);\n      return;\n    }\n  }\n  throw new RuntimeException(\"No API key authentication configured!\");\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Escape the given string to be used as URL query value.\n * @param str String\n * @return Escaped string\n */\n", "func_signal": "public String escapeString(String str)", "code": "{\n  try {\n    return URLEncoder.encode(str, \"utf8\").replaceAll(\"\\\\+\", \"%20\");\n  } catch (UnsupportedEncodingException e) {\n    return str;\n  }\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Set the User-Agent header's value (by adding to the default header map).\n * @param userAgent Http user agent\n * @return API client\n */\n", "func_signal": "public ApiClient setUserAgent(String userAgent)", "code": "{\n  addDefaultHeader(\"User-Agent\", userAgent);\n  return this;\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Deserialize response body to Java object according to the Content-Type.\n * @param <T> Type\n * @param response Response\n * @param returnType Return type\n * @return Deserialize object\n * @throws ApiException API exception\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T> T deserialize(Response response, GenericType<T> returnType) throws ApiException", "code": "{\n  if (response == null || returnType == null) {\n    return null;\n  }\n\n  if (\"byte[]\".equals(returnType.toString())) {\n    // Handle binary response (byte array).\n    return (T) response.readEntity(byte[].class);\n  } else if (returnType.getRawType() == File.class) {\n    // Handle file downloading.\n    T file = (T) downloadFileFromResponse(response);\n    return file;\n  }\n\n  String contentType = null;\n  List<Object> contentTypes = response.getHeaders().get(\"Content-Type\");\n  if (contentTypes != null && !contentTypes.isEmpty())\n    contentType = String.valueOf(contentTypes.get(0));\n\n  return response.readEntity(returnType);\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * Format the given parameter object into string.\n * @param param Object\n * @return Object in string format\n */\n", "func_signal": "public String parameterToString(Object param)", "code": "{\n  if (param == null) {\n    return \"\";\n  } else if (param instanceof Date) {\n    return formatDate((Date) param);\n  } else if (param instanceof Collection) {\n    StringBuilder b = new StringBuilder();\n    for(Object o : (Collection)param) {\n      if(b.length() > 0) {\n        b.append(',');\n      }\n      b.append(String.valueOf(o));\n    }\n    return b.toString();\n  } else {\n    return String.valueOf(param);\n  }\n}", "path": "cyberduck/storegate/src/main/java/ch/cyberduck/core/storegate/io/swagger/client/ApiClient.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "iterate-ch/cyberduck", "stars": 2862, "license": "gpl-3.0", "language": "java", "size": 631827}
{"docstring": "/**\n * GLOB pattern supports *, ** and ? wild cards.\n * Leading and trailing ** have special meaning, consecutive separator become optional.\n */\n", "func_signal": "protected static String wildCardTranslate(String pattern)", "code": "{\n    String separator = \".\";\n    StringBuffer sb = new StringBuffer();\n    String es = escape(separator);\n    // special starter\n    Matcher ss = Pattern.compile(\"^([*][*][\" + es + \"]).*\").matcher(pattern);\n    if (ss.matches()) {\n        pattern = pattern.substring(ss.group(1).length());\n        // make leading sep optional\n        sb.append(\"(.*[\" + es + \"])?\");\n    }\n    // special trailer\n    Matcher st = Pattern.compile(\".*([\" + es + \"][*][*])$\").matcher(pattern);\n    boolean useSt = false;\n    if (st.matches()) {\n        pattern = pattern.substring(0, st.start(1));\n        useSt = true;\n    }\n\n    for(int i = 0; i != pattern.length(); ++i) {\n        char c = pattern.charAt(i);\n        if (c == '?') {\n            sb.append(\"[^\" + es + \"]\");\n        }\n        else if (c == '*') {\n            if (i + 1 < pattern.length() && pattern.charAt(i+1) == '*') {\n                i++;\n                // **\n                sb.append(\".*\");\n            }\n            else {\n                sb.append(\"[^\" + es + \"]*\");\n            }\n        }\n        else {\n            if (c == '$') {\n                sb.append(\"\\\\$\");\n            }\n            else if (Character.isJavaIdentifierPart(c) || Character.isWhitespace(c)) {\n                sb.append(c);\n            }\n            else {\n                sb.append('\\\\').append(c);\n            }\n        }\n    }\n\n    if (useSt) {\n        sb.append(\"([\" + es + \"].*)?\");\n    }\n\n    return sb.toString();\n}", "path": "jvm-tools/sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/BasicFilterFactory.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Method called after an object field has been output, but\n * before the value is output.\n *<p>\n * Default handling (without pretty-printing) will output a single\n * colon to separate the two. Pretty-printer is\n * to output a colon as well, but can surround that with other\n * (white-space) decoration.\n */\n", "func_signal": "@Override\npublic void writeObjectFieldValueSeparator(JsonGenerator jg)\n    throws IOException, JsonGenerationException", "code": "{\n    if (_spacesInObjectEntries) {\n        jg.writeRaw(\" : \");\n    } else {\n        jg.writeRaw(':');\n    }\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/DefaultPrettyPrinter.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Method called after an array value has been completely\n * output, and before another value is to be output.\n *<p>\n * Default handling (without pretty-printing) will output a single\n * comma to separate the two. Pretty-printer is\n * to output a comma as well, but can surround that with other\n * (white-space) decoration.\n */\n", "func_signal": "@Override\npublic void writeArrayValueSeparator(JsonGenerator jg)\n    throws IOException, JsonGenerationException", "code": "{\n    jg.writeRaw(',');\n    _arrayIndenter.writeIndentation(jg, _nesting);\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/DefaultPrettyPrinter.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "//    @Test\n", "func_signal": "public void verifyVarIntEncoding() throws IOException", "code": "{\n\n        int n = 0;\n        int j = 0;\n        ByteArrayOutputStream bos;\n        DataOutputStream dos;\n        bos = new ByteArrayOutputStream(4 << 20);\n        dos = new DataOutputStream(bos);\n        for(int i = 0; i != (1 << 30) + 1000000; ++i) {\n            StackTraceCodec.writeVarInt(dos, i);\n            ++n;\n            if (n == 1000000) {\n                System.out.println(i);\n                n = 0;\n                byte[] buf = bos.toByteArray();\n                DataInputStream dis = new DataInputStream(new ByteArrayInputStream(buf));\n                for(;j <= i; ++j) {\n                    int x = StackTraceCodec.readVarInt(dis);\n                    Assert.assertEquals(j, x);\n                }\n                bos = new ByteArrayOutputStream(4 << 20);\n                dos = new DataOutputStream(bos);\n            }\n        }\n    }", "path": "jvm-tools/sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/StackTreeCoderTest.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "// reads chars until space\n", "func_signal": "public static byte[] readMagic(InputStream is) throws IOException", "code": "{\n    byte[] buf = new byte[32];\n    int n = 0;\n    while(true) {\n        int c = is.read();\n        if (c < 0) {\n            throw new EOFException(\"Cannot read magic\");\n        }\n        if (n >= buf.length) {\n            throw new IOException(\"Cannot read magic\");\n        }\n        if (c == ' ') {\n            buf[n] = (byte) c;\n            ++n;\n            break;\n        }\n        else if (MAGIC_APHLABET.indexOf(c) >= 0) {\n            buf[n] = (byte) c;\n        }\n        else {\n            throw new IOException(\"Invalid magic\");\n        }\n        ++n;\n    }\n    return Arrays.copyOf(buf, n);\n}", "path": "jvm-tools/sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/MagicReader.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/*\n/**********************************************************\n/* Life-cycle\n/**********************************************************\n */\n", "func_signal": "protected JsonWriteContext(int type, JsonWriteContext parent)", "code": "{\n    super();\n    _type = type;\n    _parent = parent;\n    _index = -1;\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/JsonWriteContext.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * GLOB pattern supports *, ** and ? wild cards.\n * Leading and trailing ** have special meaning, consecutive separator become optional.\n */\n", "func_signal": "public static Pattern translate(String pattern, String separator)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    String es = escape(separator);\n    // special starter\n    Matcher ss = Pattern.compile(\"^([*][*][\" + es + \"]).*\").matcher(pattern);\n    if (ss.matches()) {\n        pattern = pattern.substring(ss.group(1).length());\n        // make leading sep optional\n        sb.append(\"(.*[\" + es + \"])?\");\n    }\n    // special trailer\n    Matcher st = Pattern.compile(\".*([\" + es + \"][*][*])$\").matcher(pattern);\n    boolean useSt = false;\n    if (st.matches()) {\n        pattern = pattern.substring(0, st.start(1));\n        useSt = true;\n    }\n\n    for(int i = 0; i != pattern.length(); ++i) {\n        char c = pattern.charAt(i);\n        if (c == '?') {\n            sb.append(\"[^\" + es + \"]\");\n        }\n        else if (c == '*') {\n            if (i + 1 < pattern.length() && pattern.charAt(i+1) == '*') {\n                i++;\n                // **\n                sb.append(\".*\");\n            }\n            else {\n                sb.append(\"[^\" + es + \"]*\");\n            }\n        }\n        else {\n            if (c == '$') {\n                sb.append(\"\\\\$\");\n            }\n            else if (Character.isJavaIdentifierPart(c) || Character.isWhitespace(c)) {\n                sb.append(c);\n            }\n            else {\n                sb.append('\\\\').append(c);\n            }\n        }\n    }\n\n    if (useSt) {\n        sb.append(\"([\" + es + \"].*)?\");\n    }\n\n    return Pattern.compile(sb.toString());\n}", "path": "jvm-tools/sjk-core/src/main/java/org/gridkit/jvmtool/GlobHelper.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * GLOB pattern supports *, ** and ? wild cards.\n * Leading and trailing ** have special meaning, consecutive separator become optional.\n */\n", "func_signal": "public static Pattern translate(String pattern, String separator)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    String es = escape(separator);\n    // special starter\n    Matcher ss = Pattern.compile(\"^([*][*][\" + es + \"]).*\").matcher(pattern);\n    if (ss.matches()) {\n        pattern = pattern.substring(ss.group(1).length());\n        // make leading sep optional\n        sb.append(\"(.*[\" + es + \"])?\");\n    }\n    // special trailer\n    Matcher st = Pattern.compile(\".*([\" + es + \"][*][*])$\").matcher(pattern);\n    boolean useSt = false;\n    if (st.matches()) {\n        pattern = pattern.substring(0, st.start(1));\n        useSt = true;\n    }\n\n    for(int i = 0; i != pattern.length(); ++i) {\n        char c = pattern.charAt(i);\n        if (c == '?') {\n            sb.append(\"[^\" + es + \"]\");\n        }\n        else if (c == '*') {\n            if (i + 1 < pattern.length() && pattern.charAt(i+1) == '*') {\n                i++;\n                // **\n                sb.append(\".*\");\n            }\n            else {\n                sb.append(\"[^\" + es + \"]*\");\n            }\n        }\n        else {\n            if (c == '$') {\n                sb.append(\"\\\\$\");\n            }\n            else if (Character.isJavaIdentifierPart(c) || Character.isWhitespace(c)) {\n                sb.append(c);\n            }\n            else {\n                sb.append('\\\\').append(c);\n            }\n        }\n    }\n\n    if (useSt) {\n        sb.append(\"([\" + es + \"].*)?\");\n    }\n\n    return Pattern.compile(sb.toString());\n}", "path": "jvm-tools/sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/GlobHelper.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Helper method that can be used to get a copy of standard JSON\n * escape definitions; this is useful when just wanting to slightly\n * customize definitions. Caller can modify this array as it sees\n * fit and usually returns modified instance via {@link #getEscapeCodesForAscii}\n */\n", "func_signal": "public static int[] standardAsciiEscapesForJSON()", "code": "{\n    int[] esc = CharTypes.get7BitOutputEscapes();\n    int len = esc.length;\n    int[] result = new int[len];\n    System.arraycopy(esc, 0, result, 0, esc.length);\n    return result;\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/CharacterEscapes.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "// // // Internally used abstract methods\n", "func_signal": "protected final void appendDesc(StringBuilder sb)", "code": "{\n    if (_type == TYPE_OBJECT) {\n        sb.append('{');\n        if (_currentName != null) {\n            sb.append('\"');\n            // !!! TODO: Name chars should be escaped?\n            sb.append(_currentName);\n            sb.append('\"');\n        } else {\n            sb.append('?');\n        }\n        sb.append('}');\n    } else if (_type == TYPE_ARRAY) {\n        sb.append('[');\n        sb.append(getCurrentIndex());\n        sb.append(']');\n    } else {\n        // nah, ROOT:\n        sb.append(\"/\");\n    }\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/JsonWriteContext.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Find threads according to thread name filters and memorise their IDs.\n * <br/>\n * Optional method to avoid dump all threads at every collection.\n */\n", "func_signal": "public void prime()", "code": "{\n    ThreadInfo[] ti = threading.dumpAllThreads(false, false);\n    long[] tids = new long[ti.length];\n    int n = 0;\n    for(ThreadInfo t:ti) {\n        long tid = t.getThreadId();\n        String name = t.getThreadName();\n        if (threadFilter == null || threadFilter.accept(name)) {\n            tids[n++] = tid;\n        }\n    }\n    tids = Arrays.copyOf(tids, n);\n    threadSet = tids;\n}", "path": "jvm-tools/sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/ThreadDumpSampler.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Method called after an object entry (field:value) has been completely\n * output, and before another value is to be output.\n *<p>\n * Default handling (without pretty-printing) will output a single\n * comma to separate the two. Pretty-printer is\n * to output a comma as well, but can surround that with other\n * (white-space) decoration.\n */\n", "func_signal": "@Override\npublic void writeObjectEntrySeparator(JsonGenerator jg)\n    throws IOException, JsonGenerationException", "code": "{\n    jg.writeRaw(',');\n    _objectIndenter.writeIndentation(jg, _nesting);\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/DefaultPrettyPrinter.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Call kernel32::GetThreadTimes.\n * If successful kernel and user times are set to\n * first two slots in array.\n * <p>\n * Time units are microseconds.\n *\n * @param pid\n * @return <code>false</code> is not successful\n */\n", "func_signal": "public synchronized boolean getThreadCpuTimes(int pid, long[] result)", "code": "{\n    int rc = GetThreadTimes(pid, callBuf);\n    if (rc == 0) {\n        long ktime = (0xFFFFFFFFl & callBuf[4]) | ((long)callBuf[5]) << 32;\n        long utime = (0xFFFFFFFFl & callBuf[6]) | ((long)callBuf[7]) << 32;\n\n        result[0] = ktime / 10;\n        result[1] = utime / 10;\n        return true;\n    }\n    else {\n        System.out.println(\"Error code: \" + rc);\n        return false;\n    }\n}", "path": "jvm-tools/sjk-win32/src/main/java/org/gridkit/jvmtool/win32/SjkWinHelper.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "// special hack to workaround Java module system\n", "func_signal": "private void breakCage(String... args)", "code": "{\n    if (\"false\".equalsIgnoreCase(System.getProperty(\"sjk.breakCage\", \"true\"))) {\n        // do not break\n        return;\n    }\n    RuntimeMXBean rtBean = ManagementFactory.getRuntimeMXBean();\n    String spec = rtBean.getSpecVersion();\n    if (spec.startsWith(\"1.\")) {\n        // good classic Java\n        if (verbose) {\n            System.err.println(\"Java version \" + spec + \" skipping cage break\");\n        }\n        return;\n    }\n    else {\n        if (getModulesUnlockCommand().length > 0) {\n            // we need to unlock some modules\n            StringBuilder sb = new StringBuilder();\n            for(String a: rtBean.getInputArguments()) {\n                if (sb.length() > 0) {\n                    sb.append(\" \");\n                }\n                sb.append(a);\n            }\n            if (isUnlocked(sb.toString())) {\n                // modules are unlocked\n                if (verbose) {\n                    System.err.println(\"All required modules are unlocked, skipping cage break\");\n                }\n                return;\n            }\n            else {\n                // break cage\n                List<String> command = new ArrayList<String>();\n                File jhome = new File(System.getProperty(\"java.home\"));\n                File jbin = new File(jhome, \"bin/java\");\n                command.add(jbin.getPath());\n                for(String m: getModulesUnlockCommand()) {\n                    command.add(\"--add-opens\");\n                    command.add(m);\n                }\n                command.add(\"-Dsjk.breakCage=false\");\n                command.add(\"-cp\");\n                command.add(rtBean.getClassPath());\n                command.addAll(rtBean.getInputArguments());\n                command.add(this.getClass().getName());\n                command.addAll(Arrays.asList(args));\n\n                System.err.println(\"Restarting java with unlocked package access\");\n                if (verbose) {\n                    System.err.println(\"Exec command: \" + formatCmd(command));\n                }\n\n                ProcessSpawner.start(command);\n            }\n        }\n    }\n}", "path": "jvm-tools/sjk-cli/src/main/java/org/gridkit/jvmtool/cli/CommandLauncher.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Optimize conjunction into single frame matcher where possible.\n */\n", "func_signal": "private StackFrameMatcher produceConjunctionMatcher(Op node)", "code": "{\n    List<String> pattern = new ArrayList<String>();\n    while(node.toc == TokenType.COMMA && node.right.toc == TokenType.PATTERN) {\n        pattern.add(refinePattern(node.right.body));\n        node = node.left;\n    }\n\n    if (pattern.isEmpty()) {\n        return filterFactory.matcherConjunction(produceMatcher(node), produceMatcher(node.right));\n    }\n    else {\n        if (node.toc == TokenType.PATTERN) {\n            pattern.add(refinePattern(node.body));\n            node = null;\n        }\n        StackFrameMatcher f = filterFactory.patternFrameMatcher(pattern);\n        return node == null ? f : filterFactory.matcherConjunction(f, produceMatcher(node));\n    }\n}", "path": "jvm-tools/sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/TraceFilterPredicateParser.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "//    @Test\n", "func_signal": "public void verifyVarLongEncoding() throws IOException", "code": "{\n\n        Random rnd = new Random(1);\n\n        int n = 0;\n        int j = 0;\n        ByteArrayOutputStream bos;\n        DataOutputStream dos;\n        bos = new ByteArrayOutputStream(4 << 20);\n        dos = new DataOutputStream(bos);\n        long[] lbuf = new long[1 << 20];\n\n        for(int i = 0; i != 1 << 30 ; ++i) {\n            lbuf[n] = rnd.nextLong();\n            StackTraceCodec.writeVarLong(dos, lbuf[n]);\n            ++n;\n            if (n == lbuf.length) {\n//                System.out.println(i);\n                n = 0;\n                byte[] buf = bos.toByteArray();\n                DataInputStream dis = new DataInputStream(new ByteArrayInputStream(buf));\n                for(j = 0;j != lbuf.length; ++j) {\n                    long x = StackTraceCodec.readVarLong(dis);\n                    Assert.assertEquals(lbuf[j], x);\n                }\n                bos = new ByteArrayOutputStream(4 << 20);\n                dos = new DataOutputStream(bos);\n            }\n        }\n    }", "path": "jvm-tools/sjk-stacktrace/src/test/java/org/gridkit/jvmtool/stacktrace/StackTreeCoderTest.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Method that writer is to call before it writes a field name.\n *\n * @return Index of the field entry (0-based)\n */\n", "func_signal": "public final int writeFieldName(String name)", "code": "{\n    if (_type == TYPE_OBJECT) {\n        if (_currentName != null) { // just wrote a name...\n            return STATUS_EXPECT_VALUE;\n        }\n        _currentName = name;\n        return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n    }\n    return STATUS_EXPECT_VALUE;\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/JsonWriteContext.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Call kernel32::GetProcessTimes.\n * If successful kernel and user times are set to\n * first two slots in array.\n * <p>\n * Time units are microseconds.\n *\n * @param pid\n * @return <code>false</code> is not successful\n */\n", "func_signal": "public synchronized boolean getProcessCpuTimes(int pid, long[] result)", "code": "{\n    int rc = GetProcessTimes(pid, callBuf);\n    if (rc == 0) {\n        long ktime = (0xFFFFFFFFl & callBuf[4]) | ((long)callBuf[5]) << 32;\n        long utime = (0xFFFFFFFFl & callBuf[6]) | ((long)callBuf[7]) << 32;\n\n        result[0] = ktime / 10;\n        result[1] = utime / 10;\n        return true;\n    }\n    else {\n        System.out.println(\"Error code: \" + rc);\n        return false;\n    }\n}", "path": "jvm-tools/sjk-win32/src/main/java/org/gridkit/jvmtool/win32/SjkWinHelper.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Optimize conjunction into single frame matcher where possible.\n */\n", "func_signal": "private ThreadSnapshotFilter produceConjunctionFilter(Op node)", "code": "{\n    List<String> pattern = new ArrayList<String>();\n    while(node.toc == TokenType.COMMA && node.right.toc == TokenType.PATTERN) {\n        pattern.add(refinePattern(node.right.body));\n        node = node.left;\n    }\n\n    if (pattern.isEmpty()) {\n        return filterFactory.conjunction(produceFilter(node.left), produceFilter(node.right));\n    }\n    else {\n        if (node.toc == TokenType.PATTERN) {\n            pattern.add(refinePattern(node.body));\n            node = null;\n        }\n        ThreadSnapshotFilter f = filterFactory.frameFilter(filterFactory.patternFrameMatcher(pattern));\n        return node == null ? f : filterFactory.conjunction(f, produceFilter(node));\n    }\n}", "path": "jvm-tools/sjk-stacktrace/src/main/java/org/gridkit/jvmtool/stacktrace/analytics/TraceFilterPredicateParser.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Overridden to provide developer writeable \"JsonPath\" representation\n * of the context.\n */\n", "func_signal": "@Override\npublic final String toString()", "code": "{\n    StringBuilder sb = new StringBuilder(64);\n    appendDesc(sb);\n    return sb.toString();\n}", "path": "jvm-tools/sjk-json/src/main/java/org/gridkit/jvmtool/jackson/JsonWriteContext.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "aragozin/jvm-tools", "stars": 3276, "license": "apache-2.0", "language": "java", "size": 5659}
{"docstring": "/**\n * Adds a listener for all of this Controller's lifecycle events\n *\n * @param lifecycleListener The listener\n */\n", "func_signal": "public final void addLifecycleListener(@NonNull LifecycleListener lifecycleListener)", "code": "{\n    if (!lifecycleListeners.contains(lifecycleListener)) {\n        lifecycleListeners.add(lifecycleListener);\n    }\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Constructor that will create a circular reveal from the center of the fromView parameter.\n * @param fromView The view from which the circular reveal should originate\n * @param containerView The view that hosts fromView\n * @param duration The duration of the animation\n * @param removesFromViewOnPush If true, the view being replaced will be removed from the view hierarchy on pushes\n */\n", "func_signal": "public CircularRevealChangeHandler(@NonNull View fromView, @NonNull View containerView, long duration, boolean removesFromViewOnPush)", "code": "{\n    super(duration, removesFromViewOnPush);\n\n    int[] fromLocation = new int[2];\n    fromView.getLocationInWindow(fromLocation);\n\n    int[] containerLocation = new int[2];\n    containerView.getLocationInWindow(containerLocation);\n\n    int relativeLeft = fromLocation[0] - containerLocation[0];\n    int relativeTop  = fromLocation[1] - containerLocation[1];\n\n    cx = fromView.getWidth() / 2 + relativeLeft;\n    cy = fromView.getHeight() / 2 + relativeTop;\n}", "path": "Conductor/demo/src/main/java/com/bluelinelabs/conductor/demo/changehandler/CircularRevealChangeHandler.java", "commit_date": "2020-05-11 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Sets this Controller's {@link RetainViewMode}, which will influence when its view will be released.\n * This is useful when a Controller's view hierarchy is expensive to tear down and rebuild.\n */\n", "func_signal": "public void setRetainViewMode(@NonNull RetainViewMode retainViewMode)", "code": "{\n    this.retainViewMode = retainViewMode != null ? retainViewMode : RetainViewMode.RELEASE_DETACH;\n    if (this.retainViewMode == RetainViewMode.RELEASE_DETACH && !attached) {\n        removeViewReference();\n    }\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Retrieves the child {@link Router} for the given container/tag combination. Note that multiple\n * routers should not exist in the same container unless a lot of care is taken to maintain order\n * between them. Avoid using the same container unless you have a great reason to do so (ex: ViewPagers).\n * The only time this method will return {@code null} is when the child router does not exist prior\n * to calling this method and the createIfNeeded parameter is set to false.\n *\n * @param container      The ViewGroup that hosts the child Router\n * @param tag            The router's tag or {@code null} if none is needed\n * @param createIfNeeded If true, a router will be created if one does not yet exist. Else {@code null} will be returned in this case.\n */\n", "func_signal": "@Nullable\npublic final Router getChildRouter(@NonNull ViewGroup container, @Nullable String tag, boolean createIfNeeded)", "code": "{\n    @IdRes final int containerId = container.getId();\n    if (containerId == View.NO_ID) {\n        throw new IllegalStateException(\"You must set an id on your container.\");\n    }\n\n    ControllerHostedRouter childRouter = null;\n    for (ControllerHostedRouter router : childRouters) {\n        if (router.getHostId() == containerId && TextUtils.equals(tag, router.getTag())) {\n            childRouter = router;\n            break;\n        }\n    }\n\n    if (childRouter == null) {\n        if (createIfNeeded) {\n            childRouter = new ControllerHostedRouter(container.getId(), tag);\n            childRouter.setHostContainer(this, container);\n            childRouters.add(childRouter);\n\n            if (isPerformingExitTransition) {\n                childRouter.setDetachFrozen(true);\n            }\n        }\n    } else if (!childRouter.hasHost()) {\n        childRouter.setHostContainer(this, container);\n        childRouter.rebindIfNeeded();\n    }\n\n    return childRouter;\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Returns the Resources from the host Activity or {@code null} if this Controller has not\n * yet been attached to an Activity or if the Activity has been destroyed.\n */\n", "func_signal": "@Nullable\npublic final Resources getResources()", "code": "{\n    Activity activity = getActivity();\n    return activity != null ? activity.getResources() : null;\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Returns the Application Context derived from the host Activity or {@code null} if this Controller\n * has not yet been attached to an Activity or if the Activity has been destroyed.\n */\n", "func_signal": "@Nullable\npublic final Context getApplicationContext()", "code": "{\n    Activity activity = getActivity();\n    return activity != null ? activity.getApplicationContext() : null;\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Optional target for this Controller. One reason this could be used is to send results back to the Controller\n * that started this one. Target Controllers are retained across instances. It is recommended\n * that Controllers enforce that their target Controller conform to a specific Interface.\n *\n * @param target The Controller that is the target of this one.\n */\n", "func_signal": "public void setTargetController(@Nullable Controller target)", "code": "{\n    if (targetInstanceId != null) {\n        throw new RuntimeException(\"Target controller already set. A controller's target may only be set once.\");\n    }\n\n    targetInstanceId = target != null ? target.getInstanceId() : null;\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Sets whether or not this controller's menu items should be visible. This is useful for hiding the\n * controller's options menu items when its UI is hidden, and not just when it is detached from the\n * window (the default).\n *\n * @param optionsMenuHidden Defaults to false. If true, this controller's menu items will not be shown.\n */\n", "func_signal": "public final void setOptionsMenuHidden(boolean optionsMenuHidden)", "code": "{\n    boolean invalidate = attached && hasOptionsMenu && this.optionsMenuHidden != optionsMenuHidden;\n\n    this.optionsMenuHidden = optionsMenuHidden;\n\n    if (invalidate) {\n        router.invalidateOptionsMenu();\n    }\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Calls requestPermission(String[], int) from this Controller's host Activity. Results for this request,\n * including {@link #shouldShowRequestPermissionRationale(String)} and\n * {@link #onRequestPermissionsResult(int, String[], int[])} will be forwarded back to this Controller by the system.\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.M)\npublic final void requestPermissions(@NonNull final String[] permissions, final int requestCode)", "code": "{\n    requestedPermissions.addAll(Arrays.asList(permissions));\n\n    executeWithRouter(new RouterRequiringFunc() {\n        @Override\n        public void execute() {\n            router.requestPermissions(instanceId, permissions, requestCode);\n        }\n    });\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Constructor that takes arguments that need to be retained across restarts.\n *\n * @param args Any arguments that need to be retained.\n */\n", "func_signal": "protected Controller(@Nullable Bundle args)", "code": "{\n    this.args = args != null ? args : new Bundle(getClass().getClassLoader());\n    instanceId = UUID.randomUUID().toString();\n    ensureRequiredConstructor();\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Returns the target Controller that was set with the {@link #setTargetController(Controller)}\n * method or {@code null} if this Controller has no target.\n *\n * @return This Controller's target\n */\n", "func_signal": "@Nullable\npublic final Controller getTargetController()", "code": "{\n    if (targetInstanceId != null) {\n        return router.getRootRouter().getControllerWithInstanceId(targetInstanceId);\n    }\n    return null;\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Constructor that will create a circular reveal from the center point passed in.\n * @param cx The center's x-axis\n * @param cy The center's y-axis\n * @param duration The duration of the animation\n * @param removesFromViewOnPush If true, the view being replaced will be removed from the view hierarchy on pushes\n */\n", "func_signal": "public CircularRevealChangeHandler(int cx, int cy, long duration, boolean removesFromViewOnPush)", "code": "{\n    super(duration, removesFromViewOnPush);\n    this.cx = cx;\n    this.cy = cy;\n}", "path": "Conductor/demo/src/main/java/com/bluelinelabs/conductor/demo/changehandler/CircularRevealChangeHandler.java", "commit_date": "2020-05-11 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Calls startActivity(Intent) from this Controller's host Activity.\n */\n", "func_signal": "public final void startActivity(@NonNull final Intent intent)", "code": "{\n    executeWithRouter(new RouterRequiringFunc() {\n        @Override\n        public void execute() {\n            router.startActivity(intent);\n        }\n    });\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Registers this Controller to handle onActivityResult responses. Calling this method is NOT\n * necessary when calling {@link #startActivityForResult(Intent, int)}\n *\n * @param requestCode The request code being registered for.\n */\n", "func_signal": "public final void registerForActivityResult(final int requestCode)", "code": "{\n    executeWithRouter(new RouterRequiringFunc() {\n        @Override\n        public void execute() {\n            router.registerForActivityResult(instanceId, requestCode);\n        }\n    });\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Calls startActivityForResult(Intent, int, Bundle) from this Controller's host Activity.\n */\n", "func_signal": "public final void startActivityForResult(@NonNull final Intent intent, final int requestCode, @Nullable final Bundle options)", "code": "{\n    executeWithRouter(new RouterRequiringFunc() {\n        @Override\n        public void execute() {\n            router.startActivityForResult(instanceId, intent, requestCode, options);\n        }\n    });\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Registers/unregisters for participation in populating the options menu by receiving options-related\n * callbacks, such as {@link #onCreateOptionsMenu(Menu, MenuInflater)}\n *\n * @param hasOptionsMenu If true, this controller's options menu callbacks will be called.\n */\n", "func_signal": "public final void setHasOptionsMenu(boolean hasOptionsMenu)", "code": "{\n    boolean invalidate = attached && !optionsMenuHidden && this.hasOptionsMenu != hasOptionsMenu;\n\n    this.hasOptionsMenu = hasOptionsMenu;\n\n    if (invalidate) {\n        router.invalidateOptionsMenu();\n    }\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Removes a child {@link Router} from this Controller. When removed, all Controllers currently managed by\n * the {@link Router} will be destroyed.\n *\n * @param childRouter The router to be removed\n */\n", "func_signal": "public final void removeChildRouter(@NonNull Router childRouter)", "code": "{\n    if ((childRouter instanceof ControllerHostedRouter) && childRouters.remove(childRouter)) {\n        childRouter.destroy(true);\n    }\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Should be overridden if this Controller needs to handle the back button being pressed.\n *\n * @return True if this Controller has consumed the back button press, otherwise false\n */\n", "func_signal": "public boolean handleBack()", "code": "{\n    List<RouterTransaction> childTransactions = new ArrayList<>();\n\n    for (ControllerHostedRouter childRouter : childRouters) {\n        childTransactions.addAll(childRouter.getBackstack());\n    }\n\n    Collections.sort(childTransactions, new Comparator<RouterTransaction>() {\n        @Override\n        public int compare(RouterTransaction o1, RouterTransaction o2) {\n            return o2.getTransactionIndex() - o1.getTransactionIndex();\n        }\n    });\n\n    for (RouterTransaction transaction : childTransactions) {\n        Controller childController = transaction.controller();\n\n        if (childController.isAttached() && childController.getRouter().handleBack()) {\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Calls startActivityForResult(Intent, int) from this Controller's host Activity.\n */\n", "func_signal": "public final void startActivityForResult(@NonNull final Intent intent, final int requestCode)", "code": "{\n    executeWithRouter(new RouterRequiringFunc() {\n        @Override\n        public void execute() {\n            router.startActivityForResult(instanceId, intent, requestCode);\n        }\n    });\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Returns all of this Controller's child Routers\n */\n", "func_signal": "@NonNull\npublic final List<Router> getChildRouters()", "code": "{\n    List<Router> routers = new ArrayList<>(childRouters.size());\n    routers.addAll(childRouters);\n    return routers;\n}", "path": "Conductor/conductor/src/main/java/com/bluelinelabs/conductor/Controller.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "bluelinelabs/Conductor", "stars": 3891, "license": "apache-2.0", "language": "java", "size": 3760}
{"docstring": "/**\n * Gets the song for a given file\n */\n", "func_signal": "public static Single<Song> getSong(Repository.SongsRepository songsRepository, File file)", "code": "{\n    return songsRepository.getSongs(song -> song.path.contains(FileHelper.getPath(file)))\n            .firstOrError()\n            .flatMap(songs -> {\n                try {\n                    return Single.just(Stream.of(songs).findFirst().get());\n                } catch (NoSuchElementException e) {\n                    return Single.error(e);\n                }\n            })\n            .subscribeOn(Schedulers.io());\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Loads the specified folder.\n *\n * @param directory The file object to points to the directory to load.\n * @return An {@link List<BaseFileObject>} object that holds the data of the specified directory.\n */\n", "func_signal": "@WorkerThread\npublic List<BaseFileObject> loadDir(File directory)", "code": "{\n\n    ThreadUtils.ensureNotOnMainThread();\n\n    currentDir = directory;\n\n    List<BaseFileObject> folderObjects = new ArrayList<>();\n    List<BaseFileObject> fileObjects = new ArrayList<>();\n\n    //Grab a list of all files/subdirs within the specified directory.\n    File[] files = directory.listFiles(FileHelper.getAudioFilter());\n\n    if (files != null) {\n        for (File file : files) {\n            BaseFileObject baseFileObject;\n\n            if (file.isDirectory()) {\n                baseFileObject = new FolderObject();\n                baseFileObject.path = FileHelper.getPath(file);\n                baseFileObject.name = file.getName();\n                File[] listOfFiles = file.listFiles(FileHelper.getAudioFilter());\n                if (listOfFiles != null && listOfFiles.length > 0) {\n                    for (File listOfFile : listOfFiles) {\n                        if (listOfFile.isDirectory()) {\n                            ((FolderObject) baseFileObject).folderCount++;\n                        } else {\n                            ((FolderObject) baseFileObject).fileCount++;\n                        }\n                    }\n                } else {\n                    continue;\n                }\n                if (!folderObjects.contains(baseFileObject)) {\n                    folderObjects.add(baseFileObject);\n                }\n            } else {\n                baseFileObject = new FileObject();\n                baseFileObject.path = FileHelper.getPath(file);\n                baseFileObject.name = FileHelper.getName(file.getName());\n                baseFileObject.size = file.length();\n                ((FileObject) baseFileObject).extension = FileHelper.getExtension(file.getName());\n                if (TextUtils.isEmpty(((FileObject) baseFileObject).extension)) {\n                    continue;\n                }\n                ((FileObject) baseFileObject).tagInfo = new TagInfo(baseFileObject.path);\n\n                if (!fileObjects.contains(baseFileObject)) {\n                    fileObjects.add(baseFileObject);\n                }\n            }\n        }\n    }\n\n    sortFileObjects(fileObjects);\n    sortFolderObjects(folderObjects);\n\n    if (!settingsManager.getFolderBrowserFilesAscending()) {\n        Collections.reverse(fileObjects);\n    }\n\n    if (!settingsManager.getFolderBrowserFoldersAscending()) {\n        Collections.reverse(folderObjects);\n    }\n\n    folderObjects.addAll(fileObjects);\n\n    if (!FileHelper.isRootDirectory(currentDir)) {\n        FolderObject parentObject = new FolderObject();\n        parentObject.fileType = FileType.PARENT;\n        parentObject.name = FileHelper.PARENT_DIRECTORY;\n        parentObject.path = FileHelper.getPath(currentDir) + \"/\" + FileHelper.PARENT_DIRECTORY;\n        folderObjects.add(0, parentObject);\n    }\n\n    return folderObjects;\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileBrowser.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Recursively collects all the songs for the given directory and\n * all of its sub-directories. Must be called Asynchronously.\n *\n * @param file the File to retrieve the song Id's from\n * @param recursive whether to recursively check the sub-directories for song Id's\n * @return List<Song> a list of the songs for the given fileObject's directory & sub-directories\n */\n", "func_signal": "public static Single<List<Song>> getSongList(Repository.SongsRepository songsRepository, File file, boolean recursive, boolean inSameDir)", "code": "{\n    return Single.fromCallable(\n            () -> walk(file, new ArrayList<>(), recursive, inSameDir))\n            .flatMap(filePaths -> songsRepository.getSongs(song -> song.path.contains(FileHelper.getPath(inSameDir ? file.getParentFile() : file)))\n                    .first(Collections.emptyList()))\n            .subscribeOn(Schedulers.io());\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Adds the passed in songs to the queue, then calls onComplete with a message to be displayed\n * in a toast.\n *\n * @param single the songs to be added to the queue.\n */\n", "func_signal": "public static Disposable addToQueue(\n        MediaManager mediaManager,\n        Single<List<Song>> single, Function1<Integer, Unit> onSongsAddedToQueue)", "code": "{\n    return single.observeOn(AndroidSchedulers.mainThread())\n            .subscribe(\n                    songs -> mediaManager.addToQueue(songs, numSongs -> {\n                        onSongsAddedToQueue.invoke(numSongs);\n                        return Unit.INSTANCE;\n                    }),\n                    throwable -> LogUtils.logException(TAG, \"Error adding to queue\", throwable)\n            );\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/menu/MenuUtils.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "// View implementation\n", "func_signal": "@Override\npublic void setSeekProgress(int progress)", "code": "{\n    if (!isSeeking && seekBar != null) {\n        seekBar.setProgress(progress);\n    }\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/ui/screens/nowplaying/PlayerFragment.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Returns the extension of the file\n *\n * @param name the File to retrieve the extension from\n * @return String the extension of the file\n */\n", "func_signal": "public static String getExtension(String name)", "code": "{\n    final char dot = '.';\n    int pos = name.lastIndexOf(dot);\n    if (pos == -1 || pos == 0) { // Hidden files don't have extensions\n        return null;\n    }\n\n    return name.substring(pos + 1);\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Gets a formatted, human readable file size String\n *\n * @param size long, the size of the file in bytes\n * @return String a formatted, human readable file size\n */\n", "func_signal": "public static String getHumanReadableSize(long size)", "code": "{\n    if (size <= 0) {\n        return \"0\";\n    }\n    final String[] units = new String[] { \"B\", \"KB\", \"MB\", \"GB\", \"TB\" };\n    int digitGroups = (int) (Math.log10(size) / Math.log10(1024));\n    return new DecimalFormat(\"#,##0.#\").format(size / Math.pow(1024, digitGroups)) + \" \" + units[digitGroups];\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Recursively delete a File\n *\n * @param fileOrDirectory the file or directory to delete\n * @return true id the deletion was successful\n */\n", "func_signal": "private static boolean DeleteRecursive(File fileOrDirectory)", "code": "{\n    if (fileOrDirectory == null) {\n        return false;\n    } else if (fileOrDirectory.isDirectory()) {\n        File[] fileList = fileOrDirectory.listFiles();\n        if (fileList != null) {\n            for (File child : fileList)\n                DeleteRecursive(child);\n        }\n    }\n    return fileOrDirectory.delete();\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Returns the name of a string, excluding the extension\n *\n * @param name the name (path) of the file\n * @return the name of the file, excluding the extension\n */\n", "func_signal": "public static String getName(String name)", "code": "{\n    String ext = getExtension(name);\n    if (ext == null) {\n        return name;\n    }\n    return name.substring(0, name.length() - ext.length() - 1);\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Recursively collects all the files for the given directory and\n * all of its sub-directories. Must be called Asynchronously.\n *\n * @param file the File to retrieve the song Id's from\n * @param recursive whether to recursively check the sub-directories for song Id's\n * @return long[] a list of the songId's for the given fileObject's directory & sub-directories\n */\n", "func_signal": "public static Observable<List<String>> getPathList(final File file, final boolean recursive, final boolean inSameDir)", "code": "{\n    return Observable.fromCallable(\n            () -> walk(file, new ArrayList<>(), recursive, inSameDir))\n            .subscribeOn(Schedulers.io());\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Todo: Remove context requirement\n * Add the passed in songs to a new playlist. The 'create playlist dialog' will be presented to the user.\n *\n * @param single the songs to be added to the playlist\n */\n", "func_signal": "public static Disposable newPlaylist(Fragment fragment, Single<List<Song>> single)", "code": "{\n    return single.observeOn(AndroidSchedulers.mainThread())\n            .subscribe(\n                    songs -> CreatePlaylistDialog.Companion.newInstance(songs).show(fragment.getChildFragmentManager(), \"CreatePlaylistFragment\"),\n                    throwable -> LogUtils.logException(TAG, \"Error adding to new playlist\", throwable)\n            );\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/menu/MenuUtils.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Note: This does not return a fully populated album.\n *\n * @return a partial {@link Album} containing this song.\n */\n", "func_signal": "public Album getAlbum()", "code": "{\n    if (MusicServiceConnectionUtils.serviceBinder != null && MusicServiceConnectionUtils.serviceBinder.getService() != null) {\n        if (getSong() != null) {\n            return getSong().getAlbum();\n        }\n    }\n    return null;\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/playback/MediaManager.java", "commit_date": "2019-05-20 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Resolves the /storage/emulated/legacy paths to\n * their true folder path representations. Required\n * for Nexii and other devices with no SD card.\n *\n * @return The true, resolved file path to the input path.\n */\n", "func_signal": "@SuppressLint(\"SdCardPath\")\npublic static String getPath(File file)", "code": "{\n\n    if (file == null) {\n        return null;\n    }\n\n    String filePath = file.getAbsolutePath();\n\n    try {\n        if (isSymlink(file)) {\n            file = resolveSymlink(file);\n            filePath = file.getAbsolutePath();\n        }\n    } catch (IOException ignored) {\n\n    }\n\n    if (!TextUtils.isEmpty(filePath) && filePath.equals(\"/storage/emulated/0\") ||\n            filePath.equals(\"/storage/emulated/0/\") ||\n            filePath.equals(\"/storage/emulated/legacy\") ||\n            filePath.equals(\"/storage/emulated/legacy/\") ||\n            filePath.equals(\"/storage/sdcard0\") ||\n            filePath.equals(\"/storage/sdcard0/\") ||\n            filePath.equals(\"/sdcard\") ||\n            filePath.equals(\"/sdcard/\") ||\n            filePath.equals(\"/mnt/sdcard\") ||\n            filePath.equals(\"/mnt/sdcard/\")) {\n\n        filePath = Environment.getExternalStorageDirectory().toString();\n    }\n\n    return filePath;\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * @return The current repeat mode\n */\n", "func_signal": "public int getRepeatMode()", "code": "{\n    if (MusicServiceConnectionUtils.serviceBinder != null && MusicServiceConnectionUtils.serviceBinder.getService() != null) {\n        return MusicServiceConnectionUtils.serviceBinder.getService().getRepeatMode();\n    }\n    return 0;\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/playback/MediaManager.java", "commit_date": "2019-05-20 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * An {@link FileFilter} which only accepts directories & supported audio filetypes, based on extension\n */\n", "func_signal": "public static FileFilter getAudioFilter()", "code": "{\n    return file -> {\n        if (!file.isHidden() && file.canRead()) {\n            if (file.isDirectory()) {\n                return true;\n            } else {\n                String ext = getExtension(file.getName());\n                for (String allowedExtension : sExtensions) {\n                    if (!TextUtils.isEmpty(ext)) {\n                        if (allowedExtension.equalsIgnoreCase(ext)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    };\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Fix for https://code.google.com/p/android/issues/detail?id=171190 .\n * <p>\n * When a view that has focus gets detached, we wait for the main thread to be idle and then\n * check if the InputMethodManager is leaking a view. If yes, we tell it that the decor view got\n * focus, which is what happens if you press home and come back from recent apps. This replaces\n * the reference to the detached view with a reference to the decor view.\n * <p>\n * Should be called from {@link Activity#onCreate(android.os.Bundle)} )}.\n */\n", "func_signal": "@SuppressLint(\"PrivateApi\")\npublic static void fixFocusedViewLeak(Application application)", "code": "{\n\n    // Still not fixed until android 23\n    if (SDK_INT < KITKAT || SDK_INT > Build.VERSION_CODES.N_MR1) {\n        return;\n    }\n\n    final InputMethodManager inputMethodManager =\n            (InputMethodManager) application.getSystemService(INPUT_METHOD_SERVICE);\n\n    final Field mServedViewField;\n    final Field mHField;\n    final Method finishInputLockedMethod;\n    final Method focusInMethod;\n    try {\n        mServedViewField = InputMethodManager.class.getDeclaredField(\"mServedView\");\n        mServedViewField.setAccessible(true);\n        mHField = InputMethodManager.class.getDeclaredField(\"mServedView\");\n        mHField.setAccessible(true);\n        finishInputLockedMethod = InputMethodManager.class.getDeclaredMethod(\"finishInputLocked\");\n        finishInputLockedMethod.setAccessible(true);\n        focusInMethod = InputMethodManager.class.getDeclaredMethod(\"focusIn\", View.class);\n        focusInMethod.setAccessible(true);\n    } catch (NoSuchMethodException | NoSuchFieldException unexpected) {\n        Log.e(\"IMMLeaks\", \"Unexpected reflection exception\", unexpected);\n        return;\n    }\n\n    application.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n\n        }\n\n        @Override\n        public void onActivityStarted(Activity activity) {\n            ReferenceCleaner cleaner =\n                    new ReferenceCleaner(inputMethodManager, mHField, mServedViewField,\n                            finishInputLockedMethod);\n            View rootView = activity.getWindow().getDecorView().getRootView();\n            ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();\n            viewTreeObserver.addOnGlobalFocusChangeListener(cleaner);\n        }\n\n        @Override\n        public void onActivityResumed(Activity activity) {\n\n        }\n\n        @Override\n        public void onActivityPaused(Activity activity) {\n\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n\n        }\n\n        @Override\n        public void onActivityDestroyed(Activity activity) {\n\n        }\n    });\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/InputMethodManagerLeaks.java", "commit_date": "2018-05-05 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Recursively 'walks' the files subdirectories, gathering a list of paths.\n *\n * @param root the root file to walk\n * @param paths the paths will be added to this List\n * @param recursive whether to recursively walk subdirectories\n * @param inSameDir whether files in the same dir as root should be included\n * @return a List of paths\n */\n", "func_signal": "@WorkerThread\nprivate static List<String> walk(File root, final List<String> paths, final boolean recursive, final boolean inSameDir)", "code": "{\n\n    if (inSameDir) {\n        root = root.getParentFile();\n    }\n\n    if (!root.isDirectory()) {\n        paths.add(root.getAbsolutePath());\n        return paths;\n    }\n\n    File[] list = root.listFiles(getAudioFilter());\n    if (list != null) {\n        for (File f : list) {\n            if (f.isDirectory()) {\n                if (recursive) {\n                    walk(f, paths, true, false);\n                }\n            } else {\n                paths.add(f.getAbsolutePath());\n            }\n        }\n    }\n\n    return paths;\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * This method converts device specific pixels to density independent pixels.\n *\n * @param px A value in px (pixels) unit. Which we need to convert into db\n * @return A float value to represent dp equivalent to px value\n */\n", "func_signal": "public static float toDips(float px)", "code": "{\n    DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();\n    return px / (metrics.densityDpi / 160f);\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/ResourceUtils.java", "commit_date": "2018-05-05 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Note: This does not return a fully populated album artist.\n *\n * @return a partial {@link AlbumArtist} containing a partial {@link Album}\n * which contains the current song.\n */\n", "func_signal": "public AlbumArtist getAlbumArtist()", "code": "{\n    if (MusicServiceConnectionUtils.serviceBinder != null && MusicServiceConnectionUtils.serviceBinder.getService() != null) {\n        if (getSong() != null) {\n            return getSong().getAlbumArtist();\n        }\n    }\n    return null;\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/playback/MediaManager.java", "commit_date": "2019-05-20 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/**\n * Renames an {@link FileObject} to the passed in newName\n *\n * @param context Context\n * @param baseFileObject the FileObject representation of the file to rename\n * @param newName the new name of the file\n */\n", "func_signal": "public static boolean renameFile(Context context, BaseFileObject baseFileObject, String newName)", "code": "{\n    if (newName == null) {\n        return false;\n    }\n\n    if (baseFileObject instanceof FileObject) {\n        String ext = ((FileObject) baseFileObject).extension;\n        if (ext == null) {\n            ext = \"\";\n        }\n        newName = newName + \".\" + ext;\n    }\n    File file = new File(baseFileObject.path);\n    File newFile = new File(baseFileObject.getParent(), newName);\n    if (file.renameTo(newFile)) {\n        baseFileObject.name = FileHelper.getName(newFile.getName());\n        CustomMediaScanner.scanFiles(context, Collections.singletonList(file.getPath()), null);\n        return true;\n    }\n    return false;\n}", "path": "Shuttle/app/src/main/java/com/simplecity/amp_library/utils/FileHelper.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "timusus/Shuttle", "stars": 2206, "license": "other", "language": "java", "size": 9924}
{"docstring": "/** \u5fae\u4fe1\u62a2\u5230\u7ea2\u5305\u540e\u7684\u4e8b\u4ef6*/\n", "func_signal": "public int getWechatAfterGetHongBaoEvent()", "code": "{\n    int defaultValue = 1;\n    String result =  preferences.getString(KEY_WECHAT_AFTER_GET_HONGBAO, String.valueOf(defaultValue));\n    try {\n        return Integer.parseInt(result);\n    } catch (Exception e) {}\n    return defaultValue;\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/Config.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u6253\u5f00\u901a\u77e5\u680f\u6d88\u606f*/\n", "func_signal": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN)\nprivate void newHongBaoNotification(Notification notification)", "code": "{\n    isReceivingHongbao = true;\n    //\u4ee5\u4e0b\u662f\u7cbe\u534e\uff0c\u5c06\u5fae\u4fe1\u7684\u901a\u77e5\u680f\u6d88\u606f\u6253\u5f00\n    PendingIntent pendingIntent = notification.contentIntent;\n    boolean lock = NotifyHelper.isLockScreen(getContext());\n\n    if(!lock) {\n        NotifyHelper.send(pendingIntent);\n    } else {\n        NotifyHelper.showNotify(getContext(), String.valueOf(notification.tickerText), pendingIntent);\n    }\n\n    if(lock || getConfig().getWechatMode() != Config.WX_MODE_0) {\n        NotifyHelper.playEffect(getContext(), getConfig());\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/job/WechatAccessbilityJob.java", "commit_date": "2016-02-28 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u6267\u884cPendingIntent\u4e8b\u4ef6*/\n", "func_signal": "public static void send(PendingIntent pendingIntent)", "code": "{\n    try {\n        pendingIntent.send();\n    } catch (PendingIntent.CanceledException e) {\n        e.printStackTrace();\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/util/NotifyHelper.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u6253\u5f00\u8f85\u52a9\u670d\u52a1\u7684\u8bbe\u7f6e*/\n", "func_signal": "private void openAccessibilityServiceSettings()", "code": "{\n    try {\n        Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);\n        startActivity(intent);\n        Toast.makeText(this, R.string.tips, Toast.LENGTH_LONG).show();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/MainActivity.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u5fae\u4fe1\u6253\u5f00\u7ea2\u5305\u540e\u5ef6\u65f6\u65f6\u95f4*/\n", "func_signal": "public int getWechatOpenDelayTime()", "code": "{\n    int defaultValue = 0;\n    String result = preferences.getString(KEY_WECHAT_DELAY_TIME, String.valueOf(defaultValue));\n    try {\n        return Integer.parseInt(result);\n    } catch (Exception e) {}\n    return defaultValue;\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/Config.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u66f4\u65b0\u5fae\u4fe1\u5305\u4fe1\u606f*/\n", "func_signal": "private void updatePackageInfo()", "code": "{\n    try {\n        mWechatPackageInfo = getContext().getPackageManager().getPackageInfo(WECHAT_PACKAGENAME, 0);\n    } catch (PackageManager.NameNotFoundException e) {\n        e.printStackTrace();\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/job/WechatAccessbilityJob.java", "commit_date": "2016-02-28 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u83b7\u53d6\u62a2\u5fae\u4fe1\u7ea2\u5305\u7684\u6a21\u5f0f*/\n", "func_signal": "public int getWechatMode()", "code": "{\n    int defaultValue = 0;\n    String result = preferences.getString(KEY_WECHAT_MODE, String.valueOf(defaultValue));\n    try {\n        return Integer.parseInt(result);\n    } catch (Exception e) {}\n    return defaultValue;\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/Config.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u663e\u793a\u6350\u8d60\u7684\u5bf9\u8bdd\u6846*/\n", "func_signal": "private void showDonateDialog()", "code": "{\n    final Dialog dialog = new Dialog(this, R.style.QR_Dialog_Theme);\n    View view = getLayoutInflater().inflate(R.layout.donate_dialog_layout, null);\n    view.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            dialog.dismiss();\n        }\n    });\n    view.setOnLongClickListener(new View.OnLongClickListener() {\n\n        @Override\n        public boolean onLongClick(View v) {\n            File output = new File(android.os.Environment.getExternalStorageDirectory(), \"codeboy_wechatpay_qr.jpg\");\n            if(!output.exists()) {\n                Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.wechatpay_qr);\n                BitmapUtils.saveBitmap(MainActivity.this, output, bitmap);\n            }\n            Toast.makeText(MainActivity.this, \"\u5df2\u4fdd\u5b58\u5230:\" + output.getAbsolutePath(), Toast.LENGTH_LONG).show();\n            return true;\n        }\n    });\n    dialog.setContentView(view);\n    dialog.show();\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/MainActivity.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u662f\u5426\u4e3a\u9501\u5c4f\u6216\u9ed1\u5c4f\u72b6\u6001*/\n", "func_signal": "public static boolean isLockScreen(Context context)", "code": "{\n    KeyguardManager km = getKeyguardManager(context);\n\n    return km.inKeyguardRestrictedInputMode() || !isScreenOn(context);\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/util/NotifyHelper.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u5fae\u4fe1\u6253\u5f00\u7ea2\u5305\u540e\u7684\u4e8b\u4ef6*/\n", "func_signal": "public int getWechatAfterOpenHongBaoEvent()", "code": "{\n    int defaultValue = 0;\n    String result =  preferences.getString(KEY_WECHAT_AFTER_OPEN_HONGBAO, String.valueOf(defaultValue));\n    try {\n        return Integer.parseInt(result);\n    } catch (Exception e) {}\n    return defaultValue;\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/Config.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u64ad\u653e\u6548\u679c\u3001\u58f0\u97f3\u4e0e\u9707\u52a8*/\n", "func_signal": "public static void playEffect(Context context, Config config)", "code": "{\n    //\u591c\u95f4\u6a21\u5f0f\uff0c\u4e0d\u5904\u7406\n    if(NotifyHelper.isNightTime() && config.isNotifyNight()) {\n        return;\n    }\n\n    if(config.isNotifySound()) {\n        sound(context);\n    }\n    if(config.isNotifyVibrate()) {\n        vibrator(context);\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/util/NotifyHelper.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u6253\u5f00\u901a\u77e5\u680f\u8bbe\u7f6e*/\n", "func_signal": "@TargetApi(Build.VERSION_CODES.LOLLIPOP_MR1)\nprivate void openNotificationServiceSettings()", "code": "{\n    try {\n        Intent intent = new Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS);\n        startActivity(intent);\n        Toast.makeText(this, R.string.tips, Toast.LENGTH_LONG).show();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/MainActivity.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u901a\u77e5\u680f\u4e8b\u4ef6*/\n", "func_signal": "private void notificationEvent(String ticker, Notification nf)", "code": "{\n    String text = ticker;\n    int index = text.indexOf(\":\");\n    if(index != -1) {\n        text = text.substring(index + 1);\n    }\n    text = text.trim();\n    if(text.contains(HONGBAO_TEXT_KEY)) { //\u7ea2\u5305\u6d88\u606f\n        newHongBaoNotification(nf);\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/job/WechatAccessbilityJob.java", "commit_date": "2016-02-28 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u662f\u5426\u4e3a\u7fa4\u804a\u5929*/\n", "func_signal": "private boolean isMemberChatUi(AccessibilityNodeInfo nodeInfo)", "code": "{\n    if(nodeInfo == null) {\n        return false;\n    }\n    String id = \"com.tencent.mm:id/ces\";\n    int wv = getWechatVersion();\n    if(wv <= 680) {\n        id = \"com.tencent.mm:id/ew\";\n    } else if(wv <= 700) {\n        id = \"com.tencent.mm:id/cbo\";\n    }\n    String title = null;\n    AccessibilityNodeInfo target = AccessibilityHelper.findNodeInfosById(nodeInfo, id);\n    if(target != null) {\n        title = String.valueOf(target.getText());\n    }\n    List<AccessibilityNodeInfo> list = nodeInfo.findAccessibilityNodeInfosByText(\"\u8fd4\u56de\");\n\n    if(list != null && !list.isEmpty()) {\n        AccessibilityNodeInfo parent = null;\n        for(AccessibilityNodeInfo node : list) {\n            if(!\"android.widget.ImageView\".equals(node.getClassName())) {\n                continue;\n            }\n            String desc = String.valueOf(node.getContentDescription());\n            if(!\"\u8fd4\u56de\".equals(desc)) {\n                continue;\n            }\n            parent = node.getParent();\n            break;\n        }\n        if(parent != null) {\n            parent = parent.getParent();\n        }\n        if(parent != null) {\n            if( parent.getChildCount() >= 2) {\n                AccessibilityNodeInfo node = parent.getChild(1);\n                if(\"android.widget.TextView\".equals(node.getClassName())) {\n                    title = String.valueOf(node.getText());\n                }\n            }\n        }\n    }\n\n\n    if(title != null && title.endsWith(\")\")) {\n        return true;\n    }\n    return false;\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/job/WechatAccessbilityJob.java", "commit_date": "2016-02-28 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/**\n * \u6536\u5230\u804a\u5929\u91cc\u7684\u7ea2\u5305\n * */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\nprivate void handleChatListHongBao()", "code": "{\n    int mode = getConfig().getWechatMode();\n    if(mode == Config.WX_MODE_3) { //\u53ea\u901a\u77e5\u6a21\u5f0f\n        return;\n    }\n\n    AccessibilityNodeInfo nodeInfo = getService().getRootInActiveWindow();\n    if(nodeInfo == null) {\n        Log.w(TAG, \"rootWindow\u4e3a\u7a7a\");\n        return;\n    }\n\n    if(mode != Config.WX_MODE_0) {\n        boolean isMember = isMemberChatUi(nodeInfo);\n        if(mode == Config.WX_MODE_1 && isMember) {//\u8fc7\u6ee4\u7fa4\u804a\n            return;\n        } else if(mode == Config.WX_MODE_2 && !isMember) { //\u8fc7\u6ee4\u5355\u804a\n            return;\n        }\n    }\n\n    List<AccessibilityNodeInfo> list = nodeInfo.findAccessibilityNodeInfosByText(\"\u9886\u53d6\u7ea2\u5305\");\n\n    if(list != null && list.isEmpty()) {\n        // \u4ece\u6d88\u606f\u5217\u8868\u67e5\u627e\u7ea2\u5305\n        AccessibilityNodeInfo node = AccessibilityHelper.findNodeInfosByText(nodeInfo, \"[\u5fae\u4fe1\u7ea2\u5305]\");\n        if(node != null) {\n            if(BuildConfig.DEBUG) {\n                Log.i(TAG, \"-->\u5fae\u4fe1\u7ea2\u5305:\" + node);\n            }\n            isReceivingHongbao = true;\n            AccessibilityHelper.performClick(nodeInfo);\n        }\n    } else if(list != null) {\n        if (isReceivingHongbao){\n            //\u6700\u65b0\u7684\u7ea2\u5305\u9886\u8d77\n            AccessibilityNodeInfo node = list.get(list.size() - 1);\n            AccessibilityHelper.performClick(node);\n            isReceivingHongbao = false;\n        }\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/job/WechatAccessbilityJob.java", "commit_date": "2016-02-28 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u83b7\u53d6\u5fae\u4fe1\u7684\u7248\u672c*/\n", "func_signal": "private int getWechatVersion()", "code": "{\n    if(mWechatPackageInfo == null) {\n        return 0;\n    }\n    return mWechatPackageInfo.versionCode;\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/job/WechatAccessbilityJob.java", "commit_date": "2016-02-28 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u662f\u5426\u4e3a\u591c\u95f4*/\n", "func_signal": "public static  boolean isNightTime()", "code": "{\n    Calendar cal = Calendar.getInstance();\n    int hour = cal.get(Calendar.HOUR_OF_DAY);\n    if(hour >= 23 || hour < 7) {\n        return true;\n    }\n    return false;\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/util/NotifyHelper.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u66f4\u65b0\u5feb\u901f\u8bfb\u53d6\u901a\u77e5\u7684\u8bbe\u7f6e*/\n", "func_signal": "public void updateNotifyPreference()", "code": "{\n    if(notificationPref == null) {\n        return;\n    }\n    boolean running = QiangHongBaoService.isNotificationServiceRunning();\n    boolean enable = Config.getConfig(getActivity()).isEnableNotificationService();\n    if( enable && running && !notificationPref.isChecked()) {\n        QHBApplication.eventStatistics(getActivity(), \"notify_service\", String.valueOf(true));\n        notificationChangeByUser = false;\n        notificationPref.setChecked(true);\n    } else if((!enable || !running) && notificationPref.isChecked()) {\n        notificationChangeByUser = false;\n        notificationPref.setChecked(false);\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/MainActivity.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/**\n * \u70b9\u51fb\u804a\u5929\u91cc\u7684\u7ea2\u5305\u540e\uff0c\u663e\u793a\u7684\u754c\u9762\n * */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN)\nprivate void handleLuckyMoneyReceive()", "code": "{\n    AccessibilityNodeInfo nodeInfo = getService().getRootInActiveWindow();\n    if(nodeInfo == null) {\n        Log.w(TAG, \"rootWindow\u4e3a\u7a7a\");\n        return;\n    }\n\n    AccessibilityNodeInfo targetNode = null;\n\n    int event = getConfig().getWechatAfterOpenHongBaoEvent();\n    int wechatVersion = getWechatVersion();\n    if(event == Config.WX_AFTER_OPEN_HONGBAO) { //\u62c6\u7ea2\u5305\n        if (wechatVersion < USE_ID_MIN_VERSION) {\n            targetNode = AccessibilityHelper.findNodeInfosByText(nodeInfo, \"\u62c6\u7ea2\u5305\");\n        } else {\n            String buttonId = \"com.tencent.mm:id/b43\";\n\n            if(wechatVersion == 700) {\n                buttonId = \"com.tencent.mm:id/b2c\";\n            }\n\n            if(buttonId != null) {\n                targetNode = AccessibilityHelper.findNodeInfosById(nodeInfo, buttonId);\n            }\n\n            if(targetNode == null) {\n                //\u5206\u522b\u5bf9\u5e94\u56fa\u5b9a\u91d1\u989d\u7684\u7ea2\u5305 \u62fc\u624b\u6c14\u7ea2\u5305\n                AccessibilityNodeInfo textNode = AccessibilityHelper.findNodeInfosByTexts(nodeInfo, \"\u53d1\u4e86\u4e00\u4e2a\u7ea2\u5305\", \"\u7ed9\u4f60\u53d1\u4e86\u4e00\u4e2a\u7ea2\u5305\", \"\u53d1\u4e86\u4e00\u4e2a\u7ea2\u5305\uff0c\u91d1\u989d\u968f\u673a\");\n\n                if(textNode != null) {\n                    for (int i = 0; i < textNode.getChildCount(); i++) {\n                        AccessibilityNodeInfo node = textNode.getChild(i);\n                        if (BUTTON_CLASS_NAME.equals(node.getClassName())) {\n                            targetNode = node;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if(targetNode == null) { //\u901a\u8fc7\u7ec4\u4ef6\u67e5\u627e\n                targetNode = AccessibilityHelper.findNodeInfosByClassName(nodeInfo, BUTTON_CLASS_NAME);\n            }\n        }\n    } else if(event == Config.WX_AFTER_OPEN_SEE) { //\u770b\u4e00\u770b\n        if(getWechatVersion() < USE_ID_MIN_VERSION) { //\u4f4e\u7248\u672c\u624d\u6709 \u770b\u5927\u5bb6\u624b\u6c14\u7684\u529f\u80fd\n            targetNode = AccessibilityHelper.findNodeInfosByText(nodeInfo, \"\u770b\u770b\u5927\u5bb6\u7684\u624b\u6c14\");\n        }\n    } else if(event == Config.WX_AFTER_OPEN_NONE) {\n        return;\n    }\n\n    if(targetNode != null) {\n        final AccessibilityNodeInfo n = targetNode;\n        long sDelayTime = getConfig().getWechatOpenDelayTime();\n        if(sDelayTime != 0) {\n            getHandler().postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    AccessibilityHelper.performClick(n);\n                }\n            }, sDelayTime);\n        } else {\n            AccessibilityHelper.performClick(n);\n        }\n        if(event == Config.WX_AFTER_OPEN_HONGBAO) {\n            QHBApplication.eventStatistics(getContext(), \"open_hongbao\");\n        } else {\n            QHBApplication.eventStatistics(getContext(), \"open_see\");\n        }\n    }\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/job/WechatAccessbilityJob.java", "commit_date": "2016-02-28 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/** \u663e\u793a\u672a\u5f00\u542f\u8f85\u52a9\u670d\u52a1\u7684\u5bf9\u8bdd\u6846*/\n", "func_signal": "private void showOpenAccessibilityServiceDialog()", "code": "{\n    if(mTipsDialog != null && mTipsDialog.isShowing()) {\n        return;\n    }\n    View view = getLayoutInflater().inflate(R.layout.dialog_tips_layout, null);\n    view.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            openAccessibilityServiceSettings();\n        }\n    });\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setTitle(R.string.open_service_title);\n    builder.setView(view);\n    builder.setPositiveButton(R.string.open_service_button, new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            openAccessibilityServiceSettings();\n        }\n    });\n    mTipsDialog = builder.show();\n}", "path": "qianghongbao/app/src/main/java/com/codeboy/qianghongbao/MainActivity.java", "commit_date": "2016-02-11 00:00:00", "repo_name": "lendylongli/qianghongbao", "stars": 2139, "license": "None", "language": "java", "size": 26359}
{"docstring": "/**\n * Checks that number of updated documents is correct (see {@link com.mongodb.WriteResult})\n */\n", "func_signal": "@Test\npublic void writeResult() throws Exception", "code": "{\n  ImmutableItem item1 = ImmutableItem.of(\"id1\");\n\n  ItemRepository.Criteria crit1 = repository.criteria().id(item1.id());\n\n  check(repository.update(crit1).addList(\"l1\").updateAll().getUnchecked()).is(0);\n  check(repository.update(crit1).addList(\"l1\").updateFirst().getUnchecked()).is(0);\n\n  // mongo returns WriteResult(0) for inserts\n  repository.insert(item1).getUnchecked();\n  check(repository.update(crit1).addList(\"l1\").updateAll().getUnchecked()).is(1);\n  check(repository.update(crit1).addList(\"l2\").updateFirst().getUnchecked()).is(1);\n\n  check(repository.update(repository.criteria().id(\"_MISSING_\")).addList(\"l2\").updateFirst().getUnchecked()).is(0);\n  check(repository.update(repository.criteria().id(\"_MISSING_\")).addList(\"l2\").updateAll().getUnchecked()).is(0);\n\n  ImmutableItem item2 = ImmutableItem.of(\"id2\");\n  ItemRepository.Criteria crit2 = repository.criteria().id(item2.id());\n\n  repository.insert(item2).getUnchecked();\n  check(repository.update(crit2).addList(\"l1\").updateAll().getUnchecked()).is(1);\n  check(repository.update(crit2).addList(\"l1\").updateFirst().getUnchecked()).is(1);\n\n  // crit1 still returns valid result\n  check(repository.update(crit1).addList(\"l1\").updateAll().getUnchecked()).is(1);\n  check(repository.update(crit1).addList(\"l2\").updateFirst().getUnchecked()).is(1);\n\n  // both crit1 and crit2\n  check(repository.update(repository.criteria()).addList(\"l1\").updateAll().getUnchecked()).is(2);\n  check(repository.update(repository.criteria()).addList(\"l2\").updateFirst().getUnchecked()).is(1);\n}", "path": "immutables/mongo/test/org/immutables/mongo/fixture/SimpleUpdaterTest.java", "commit_date": "2017-10-25 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Makes checker negative.\n * @return negative checker\n */\n", "func_signal": "public ObjectChecker<T> not()", "code": "{\n  ensureNonNegative();\n  return new ObjectChecker<>(actualValue, true);\n}", "path": "immutables/testing/src/org/immutables/check/ObjectChecker.java", "commit_date": "2018-10-18 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Checks {@code $set} functionality of the repository\n */\n", "func_signal": "@Test\npublic void setList() throws Exception", "code": "{\n  String id = \"i1\";\n\n  check(overrideList(id, Collections.singleton(\"BAD\"))).is(0);\n\n  ImmutableItem item = ImmutableItem.builder().id(id).addList(\"l1\").build();\n\n  check(repository.upsert(item).getUnchecked()).is(1);\n  check(findById(id).list()).hasAll(\"l1\");\n\n  overrideList(id, Collections.<String>emptyList());\n  check(findById(id).list()).isEmpty();\n\n  overrideList(id, Collections.singleton(\"l2\"));\n  check(findById(id).list()).hasAll(\"l2\");\n\n  overrideList(id, Arrays.asList(\"l3\", \"l4\", \"l5\"));\n  check(findById(id).list()).hasAll(\"l3\", \"l4\", \"l5\");\n}", "path": "immutables/mongo/test/org/immutables/mongo/fixture/SimpleUpdaterTest.java", "commit_date": "2017-10-25 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * write with BSON read with jackson.\n * inverse of {@link #jacksonThenBson(String)}\n */\n", "func_signal": "private void bsonThenJackson(String json) throws IOException", "code": "{\n  ObjectNode toWrite = maybeWrap(mapper.readTree(json));\n\n  BasicOutputBuffer buffer = new BasicOutputBuffer();\n  BsonWriter writer = new BsonBinaryWriter(buffer);\n\n  // write with BSON\n  BsonDocument expected = BsonDocument.parse(toWrite.toString());\n  MongoClientSettings.getDefaultCodecRegistry().get(BsonDocument.class)\n          .encode(writer, expected, EncoderContext.builder().build());\n\n  BsonBinaryReader reader = new BsonBinaryReader(ByteBuffer.wrap(buffer.toByteArray()));\n  IOContext ioContext = new IOContext(new BufferRecycler(), null, false);\n  BsonParser parser = new BsonParser(ioContext, 0, reader);\n\n  // read with jackson\n  BsonDocument actual = BsonDocument.parse(mapper.readValue(parser, JsonNode.class).toString());\n\n  if (!actual.equals(expected)) {\n     check(maybeUnwrap(actual)).is(maybeUnwrap(expected));\n     Assertions.fail(\"Should have failed before\");\n  }\n}", "path": "immutables/criteria/mongo/test/org/immutables/criteria/mongo/bson4jackson/BsonParserTest.java", "commit_date": "2019-10-19 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Read and Write in Jackson API but using BSON reader/writer adapters\n */\n", "func_signal": "private void jacksonThenJackson(String json) throws IOException", "code": "{\n  ObjectNode expected = maybeWrap(mapper.readTree(json));\n\n  BasicOutputBuffer buffer = new BasicOutputBuffer();\n  BsonWriter writer = new BsonBinaryWriter(buffer);\n\n  BsonGenerator generator = new BsonGenerator(0, writer);\n  // write with Jackson\n  mapper.writeValue(generator, expected);\n\n  BsonBinaryReader reader = new BsonBinaryReader(ByteBuffer.wrap(buffer.toByteArray()));\n  IOContext ioContext = new IOContext(new BufferRecycler(), null, false);\n  BsonParser parser = new BsonParser(ioContext, 0, reader);\n\n  // read with Jackson\n  JsonNode actual = mapper.readValue(parser, JsonNode.class);\n  check(actual).is(expected);\n}", "path": "immutables/criteria/mongo/test/org/immutables/criteria/mongo/bson4jackson/BsonParserTest.java", "commit_date": "2019-10-19 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Marshaled name for compatibility with repository.\n * @return get JSON name either specified or default.\n */\n", "func_signal": "public String getMarshaledName()", "code": "{\n  String serializedName = getSerializedName();\n  if (!serializedName.isEmpty()) {\n    return serializedName;\n  }\n  return names.raw;\n}", "path": "immutables/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java", "commit_date": "2020-12-27 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Serialized name, actully specified via annotation\n * @return name for JSON as overriden.\n */\n", "func_signal": "public String getSerializedName()", "code": "{\n  if (serializedName == null) {\n    Optional<SerializedNameMirror> serializedNameAnnotation = SerializedNameMirror.find(element);\n    if (serializedNameAnnotation.isPresent()) {\n      SerializedNameMirror m = serializedNameAnnotation.get();\n      serializedName = m.value();\n      alternateSerializedNames = m.alternate();\n      return serializedName;\n    }\n    Optional<NamedMirror> namedAnnotation = NamedMirror.find(element);\n    if (namedAnnotation.isPresent()) {\n      String value = namedAnnotation.get().value();\n      if (!value.isEmpty()) {\n        serializedName = value;\n        return serializedName;\n      }\n    }\n    Optional<OkNamedMirror> okNamedAnnotation = OkNamedMirror.find(element);\n    if (okNamedAnnotation.isPresent()) {\n      String value = okNamedAnnotation.get().name();\n      if (!value.isEmpty()) {\n        serializedName = value;\n        return serializedName;\n      }\n    }\n    if (isMarkedAsMongoId()) {\n      serializedName = ID_ATTRIBUTE_NAME;\n      return serializedName;\n    }\n    serializedName = \"\";\n    return serializedName;\n  }\n  return serializedName;\n}", "path": "immutables/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java", "commit_date": "2020-12-27 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * {@code $set} functionality but on a non-scalar Object\n */\n", "func_signal": "@Test\npublic void setListNonScalar() throws Exception", "code": "{\n  String id = \"i1\";\n  ImmutableItem item = ImmutableItem.builder().id(id).addList(\"l1\").addTags(ImmutableTag.of(\"t1\")).build();\n\n  check(repository.upsert(item).getUnchecked()).is(1);\n\n  repository.update(repository.criteria().id(id))\n      .setTags(Collections.<Item.Tag>emptyList())\n      .updateFirst()\n      .getUnchecked();\n\n  check(findById(id).tags()).isEmpty();\n\n  Set<Item.Tag> set1 = Collections.<Item.Tag>singleton(ImmutableTag.of(\"t2\"));\n  repository.update(repository.criteria().id(id))\n      .setTags(set1)\n      .updateFirst()\n      .getUnchecked();\n\n  check(findById(id).tags()).hasAll(set1);\n\n  List<? extends Item.Tag> set2 = Arrays.asList(ImmutableTag.of(\"t3\"), ImmutableTag.of(\"t4\"));\n\n  repository.update(repository.criteria().id(id))\n      .setTags(set2)\n      .updateFirst()\n      .getUnchecked();\n\n  check(findById(id).tags()).hasAll(set2);\n}", "path": "immutables/mongo/test/org/immutables/mongo/fixture/SimpleUpdaterTest.java", "commit_date": "2017-10-25 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * write with Jackson read with Bson.\n * Inverse of {@link #bsonThenJackson(String)}\n */\n", "func_signal": "private void jacksonThenBson(String json) throws IOException", "code": "{\n  ObjectNode toWrite = maybeWrap(mapper.readTree(json));\n\n  BasicOutputBuffer buffer = new BasicOutputBuffer();\n  BsonWriter writer = new BsonBinaryWriter(buffer);\n  BsonGenerator generator = new BsonGenerator(0, writer);\n  // write with jackson\n  mapper.writeValue(generator, toWrite);\n  BsonBinaryReader reader = new BsonBinaryReader(ByteBuffer.wrap(buffer.toByteArray()));\n\n  // read with BSON\n  BsonDocument actual = MongoClientSettings.getDefaultCodecRegistry()\n          .get(BsonDocument.class)\n          .decode(reader, DecoderContext.builder().build());\n\n  // compare results\n  BsonDocument expected = BsonDocument.parse(toWrite.toString());\n  if (!expected.equals(actual)) {\n    check(maybeUnwrap(actual)).is(maybeUnwrap(expected));\n    Assertions.fail(\"Should have failed before\");\n  }\n}", "path": "immutables/criteria/mongo/test/org/immutables/criteria/mongo/bson4jackson/BsonParserTest.java", "commit_date": "2019-10-19 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Gson library reads numbers lazily when using generic\n * {@link com.google.gson.internal.bind.TypeAdapters#JSON_ELEMENT} type adapter.\n * Number is read as string and then wrapped inside {@link LazilyParsedNumber}. This inefficiency\n * should only occur if reading numbers with generic JSON element API\n * and not using generated type adapters.\n * @see LazilyParsedNumber\n * @see com.google.gson.internal.bind.TypeAdapters#JSON_ELEMENT\n */\n", "func_signal": "private String scalarToString()", "code": "{\n  final BsonType type = delegate.getCurrentBsonType();\n  switch (type) {\n  case STRING:\n    return delegate.readString();\n  case SYMBOL:\n    return delegate.readSymbol();\n  case INT32:\n    return Integer.toString(delegate.readInt32());\n  case INT64:\n    return Long.toString(delegate.readInt64());\n  case DOUBLE:\n    return Double.toString(delegate.readDouble());\n  case DECIMAL128:\n    return delegate.readDecimal128().toString();\n  case REGULAR_EXPRESSION:\n    return delegate.readRegularExpression().getPattern();\n  case OBJECT_ID:\n    return delegate.readObjectId().toHexString();\n  default:\n    throw new IllegalStateException(\"Unknown scalar type to be converted to string: \" + type);\n  }\n}", "path": "immutables/mongo/src/org/immutables/mongo/bson4gson/BsonReader.java", "commit_date": "2019-09-27 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Performs several json read / writes in binary format\n */\n", "func_signal": "private void compare(String json) throws IOException", "code": "{\n  jacksonThenBson(json);\n  bsonThenJackson(json);\n  jacksonThenJackson(json);\n}", "path": "immutables/criteria/mongo/test/org/immutables/criteria/mongo/bson4jackson/BsonParserTest.java", "commit_date": "2019-10-19 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * This is equal to check\n * @param value the value\n */\n", "func_signal": "public void is(@Nullable T value)", "code": "{\n  if (value == null) {\n    isNull();\n  } else {\n    verifyUsingMatcher(Is.is(value));\n  }\n}", "path": "immutables/testing/src/org/immutables/check/ObjectChecker.java", "commit_date": "2018-10-18 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Return list of path members starting with root (excluded) to current element (included).\n * For root path returns empty list.\n */\n", "func_signal": "public List<Member> members()", "code": "{\n  ImmutableList.Builder<Member> parents = ImmutableList.builder();\n  Path current = this;\n  while (!current.isRoot()) {\n    parents.add((Member) current.element());\n    current = current.parent;\n  }\n  return parents.build().reverse();\n}", "path": "immutables/criteria/common/src/org/immutables/criteria/expression/Path.java", "commit_date": "2020-05-08 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Checks {@code $push} functionality of repository\n */\n", "func_signal": "@Test\npublic void addToList() throws Exception", "code": "{\n  String id = \"i1\";\n  ImmutableItem item = ImmutableItem.builder().id(id).addList(\"l1\").build();\n\n  check(repository.upsert(item).getUnchecked()).is(1);\n\n  push(id, Collections.singleton(\"l2\"));\n  check(findById(id).list()).hasAll(\"l1\", \"l2\");\n\n  push(id, Arrays.asList(\"l3\", \"l4\"));\n  check(findById(id).list()).hasAll(\"l1\", \"l2\", \"l3\", \"l4\");\n}", "path": "immutables/mongo/test/org/immutables/mongo/fixture/SimpleUpdaterTest.java", "commit_date": "2017-10-25 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Criteria templates are always generated as top-level class (separate file).\n * Construct criteria name from {@linkplain TypeMirror}\n *\n * @return fully qualified criteria (template) class name\n */\n", "func_signal": "private static String topLevelCriteriaClassName(TypeMirror type)", "code": "{\n  DeclaredType declaredType = MoreTypes.asDeclared(type);\n  Element element = declaredType.asElement();\n  do {\n    element = element.getEnclosingElement();\n  } while (element.getKind() != ElementKind.PACKAGE);\n\n  String packagePrefix = \"\";\n  if (!element.getSimpleName().contentEquals(\"\")) {\n    packagePrefix = MoreElements.asPackage(element).getQualifiedName() + \".\";\n  }\n\n  // package name + type name + \"CriteriaTemplate\"\n  return packagePrefix + declaredType.asElement().getSimpleName().toString() + \"CriteriaTemplate\";\n}", "path": "immutables/value-processor/src/org/immutables/value/processor/meta/CriteriaModel.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Expose criteria metadata like list of matchers for current attribute.\n */\n", "func_signal": "public CriteriaModel criteria()", "code": "{\n  CriteriaModel model = criteriaModel;\n  if (model == null) {\n    model = new CriteriaModel(this);\n    criteriaModel = model;\n  }\n\n  return model;\n}", "path": "immutables/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java", "commit_date": "2020-12-27 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Create new instance of path with {@code member} appended\n */\n", "func_signal": "public Path append(Member member)", "code": "{\n  Objects.requireNonNull(member, \"member\");\n  Preconditions.checkArgument(member instanceof AnnotatedElement, \"Expected %s to implement %s\", member.getClass(), AnnotatedElement.class);\n  return new Path(this, (AnnotatedElement) member);\n}", "path": "immutables/criteria/common/src/org/immutables/criteria/expression/Path.java", "commit_date": "2020-05-08 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Create repository using lambda for customization\n */\n", "func_signal": "private PersonRepository createRepository(Function<GeodeSetup.Builder, GeodeSetup.Builder> fn)", "code": "{\n  RegionResolver resolver = new LocalResolver(RegionResolver.defaultResolver(cache));\n  GeodeSetup.Builder setup = fn.apply(GeodeSetup.builder().regionResolver(resolver));\n  AutocreateRegion autocreate = new AutocreateRegion(cache);\n  Backend backend = WithSessionCallback.wrap(new GeodeBackend(setup.build()), autocreate);\n  return new PersonRepository(backend);\n}", "path": "immutables/criteria/geode/test/org/immutables/criteria/geode/GetAllOptimizationTest.java", "commit_date": "2020-04-24 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * persist empty Optional of Date\n */\n", "func_signal": "@Test\npublic void nullDate()", "code": "{\n  final Jackson expected = ImmutableJackson.builder()\n          .id(ObjectId.get())\n          .prop1(\"prop11\")\n          .prop2(\"prop22\")\n          .build();\n\n  repository.insert(expected).getUnchecked();\n\n  final Jackson actual = repository.findAll()\n          .fetchAll().getUnchecked().get(0);\n\n  check(expected.date().asSet()).isEmpty();\n  check(expected).is(actual);\n  final BsonDocument doc = collection.find().first();\n  check(doc.keySet()).hasContentInAnyOrder(\"_id\", \"prop1\", \"prop2\", \"date\", \"uuid\");\n  check(doc.get(\"date\")).is(BsonNull.VALUE);\n}", "path": "immutables/mongo/test/org/immutables/mongo/fixture/JacksonRepoTest.java", "commit_date": "2020-11-23 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Init (or override) internal attributes specific to JavaBeans\n */\n", "func_signal": "private void maybeInitJavaBean()", "code": "{\n  if (!containingType.kind().isJavaBean()) {\n    return;\n  }\n\n  // JavaBeans have nullable attributes by default (except for primitives / optionals /\n  // collections / criteria)\n  // allow only scalar types to be nullable (by default) for JavaBeans\n  // override nullability if not set\n  if (this.nullability == null\n      && !isPrimitive()\n      && !isOptionalType()\n      && !isCollectionType()) {\n    this.nullability = NullabilityAnnotationInfo.forTypeUse();\n  }\n}", "path": "immutables/value-processor/src/org/immutables/value/processor/meta/ValueAttribute.java", "commit_date": "2020-12-27 00:00:00", "repo_name": "immutables/immutables", "stars": 3357, "license": "apache-2.0", "language": "java", "size": 12824}
{"docstring": "/**\n * Close statement\n *\n * @param statement the statement to be closed or null\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic StandardSource<C> close(Statement statement) throws SQLException", "code": "{\n    if (statement != null) {\n        statement.close();\n    }\n    return this;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Execute prepared update statement\n *\n * @param statement the prepared statement\n * @return the result set\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic StandardSource<C> executeUpdate(Statement statement, String sql) throws SQLException", "code": "{\n    statement.executeUpdate(sql);\n    if (!writeConnection.getAutoCommit()) {\n        writeConnection.commit();\n    }\n    return this;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Close read connection\n */\n", "func_signal": "@Override\npublic StandardSource<C> closeReading()", "code": "{\n    try {\n        if (readConnection != null && !readConnection.isClosed()) {\n            // always commit before close to finish cursors/transactions\n            if (!readConnection.getAutoCommit()) {\n                readConnection.commit();\n            }\n            readConnection.close();\n        }\n    } catch (SQLException e) {\n        logger.warn(\"while closing read connection: \" + e.getMessage());\n    }\n    return this;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Execute query statement\n *\n * @param statement the statement\n * @param sql       the SQL\n * @return the result set\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic ResultSet executeQuery(Statement statement, String sql) throws SQLException", "code": "{\n    statement.setMaxRows(getMaxRows());\n    statement.setFetchSize(getFetchSize());\n    return statement.executeQuery(sql);\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Prepare an update statement\n *\n * @param sql the SQL statement\n * @return a prepared statement\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic PreparedStatement prepareUpdate(String sql) throws SQLException", "code": "{\n    Connection connection = getConnectionForWriting();\n    if (connection == null) {\n        throw new SQLException(\"can't connect to source \" + url);\n    }\n    return connection.prepareStatement(sql);\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Close read connection\n */\n", "func_signal": "@Override\npublic StandardSource<C> closeWriting()", "code": "{\n    try {\n        if (writeConnection != null && !writeConnection.isClosed()) {\n            // always commit before close to finish cursors/transactions\n            if (!writeConnection.getAutoCommit()) {\n                writeConnection.commit();\n            }\n            writeConnection.close();\n        }\n    } catch (SQLException e) {\n        logger.warn(\"while closing write connection: \" + e.getMessage());\n    }\n    return this;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Prepare a query statement\n *\n * @param sql the SQL statement\n * @return a prepared statement\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic PreparedStatement prepareQuery(String sql) throws SQLException", "code": "{\n    Connection connection = getConnectionForReading();\n    if (connection == null) {\n        throw new SQLException(\"can't connect to source \" + url);\n    }\n    logger.debug(\"preparing statement with SQL {}\", sql);\n    int type = \"TYPE_FORWARD_ONLY\".equals(getResultSetType()) ?\n            ResultSet.TYPE_FORWARD_ONLY : \"TYPE_SCROLL_SENSITIVE\".equals(getResultSetType()) ?\n            ResultSet.TYPE_SCROLL_SENSITIVE : \"TYPE_SCROLL_INSENSITIVE\".equals(getResultSetType()) ?\n            ResultSet.TYPE_SCROLL_INSENSITIVE : ResultSet.TYPE_FORWARD_ONLY;\n    int concurrency = \"CONCUR_READ_ONLY\".equals(getResultSetConcurrency()) ?\n            ResultSet.CONCUR_READ_ONLY : ResultSet.CONCUR_UPDATABLE;\n    return connection.prepareStatement(sql, type, concurrency);\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Get JDBC connection for writing. FOr executing \"update\", \"insert\", callable statements\n *\n * @return the connection\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic synchronized Connection getConnectionForWriting() throws SQLException", "code": "{\n    boolean invalid = writeConnection == null || writeConnection.isClosed();\n    try {\n        invalid = invalid || !writeConnection.isValid(5);\n    } catch (AbstractMethodError e) {\n        // old/buggy JDBC driver do not implement isValid()\n    } catch (SQLFeatureNotSupportedException e) {\n        // Example: postgresql does implement but not support isValid()\n    }\n    if (invalid) {\n        int retries = getRetries();\n        while (retries > 0) {\n            retries--;\n            try {\n                if (user != null) {\n                    Properties properties = new Properties();\n                    properties.put(\"user\", user);\n                    if (password != null) {\n                        properties.put(\"password\", password);\n                    }\n                    if (getConnectionProperties() != null) {\n                        properties.putAll(getConnectionProperties());\n                    }\n                    writeConnection = DriverManager.getConnection(url, properties);\n                } else {\n                    writeConnection = DriverManager.getConnection(url);\n                }\n                // many drivers don't like autocommit=true\n                writeConnection.setAutoCommit(getAutoCommit());\n                return writeConnection;\n            } catch (SQLNonTransientConnectionException e) {\n                // ignore derby drop=true silently\n            } catch (SQLException e) {\n                context.setThrowable(e);\n                logger.error(\"while opening write connection: \" + url + \" \" + e.getMessage(), e);\n                try {\n                    Thread.sleep(getMaxRetryWait().millis());\n                } catch (InterruptedException ex) {\n                    // do nothing\n                }\n            }\n        }\n    }\n    return writeConnection;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Execute prepared query statement\n *\n * @param statement the prepared statement\n * @return the result set\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic ResultSet executeQuery(PreparedStatement statement) throws SQLException", "code": "{\n    statement.setMaxRows(getMaxRows());\n    statement.setFetchSize(getFetchSize());\n    return statement.executeQuery();\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Fetch, issue SQL statements.\n *\n * @throws SQLException when SQL execution gives an error\n * @throws IOException  when input/output error occurs\n */\n", "func_signal": "@Override\npublic void fetch() throws SQLException, IOException", "code": "{\n    logger.debug(\"fetching, {} SQL commands\", getStatements().size());\n    DateTime dateTime = new DateTime();\n    try {\n        for (SQLCommand command : getStatements()) {\n            try {\n                if (command.isCallable()) {\n                    logger.debug(\"{} executing callable SQL: {}\", this, command);\n                    executeCallable(command);\n                } else if (!command.getParameters().isEmpty()) {\n                    logger.debug(\"{} executing SQL with params: {}\", this, command);\n                    executeWithParameter(command);\n                } else {\n                    logger.debug(\"{} executing SQL without params: {}\", this, command);\n                    execute(command);\n                }\n                if (sourceMetric != null) {\n                    sourceMetric.getSucceeded().inc();\n                    sourceMetric.setLastExecutionStart(dateTime);\n                    sourceMetric.setLastExecutionEnd(new DateTime());\n                }\n            } catch (SQLRecoverableException e) {\n                long millis = getMaxRetryWait().getMillis();\n                logger.warn(\"retrying after \" + millis / 1000 + \" seconds, got exception \", e);\n                Thread.sleep(getMaxRetryWait().getMillis());\n                if (command.isCallable()) {\n                    logger.debug(\"retrying, executing callable SQL: {}\", command);\n                    executeCallable(command);\n                } else if (!command.getParameters().isEmpty()) {\n                    logger.debug(\"retrying, executing SQL with params: {}\", command);\n                    executeWithParameter(command);\n                } else {\n                    logger.debug(\"retrying, executing SQL without params: {}\", command);\n                    execute(command);\n                }\n                if (sourceMetric != null) {\n                    sourceMetric.getSucceeded().inc();\n                    sourceMetric.setLastExecutionStart(dateTime);\n                    sourceMetric.setLastExecutionEnd(new DateTime());\n                }\n            }\n        }\n    } catch (Exception e) {\n        if (sourceMetric != null) {\n            sourceMetric.getFailed().inc();\n            sourceMetric.setLastExecutionStart(dateTime);\n            sourceMetric.setLastExecutionEnd(new DateTime());\n        }\n        throw new IOException(e);\n    } finally {\n        if (sourceMetric != null) {\n            sourceMetric.incCounter();\n        }\n    }\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Execute SQL query command without parameter binding.\n *\n * @param command the SQL command\n * @throws SQLException when SQL execution gives an error\n * @throws IOException  when input/output error occurs\n */\n", "func_signal": "private void execute(SQLCommand command) throws Exception", "code": "{\n    Statement statement = null;\n    ResultSet results = null;\n    try {\n        if (command.isQuery()) {\n            // use read connection\n            // we must not use prepareStatement for Postgresql!\n            // Postgresql requires direct use of executeQuery(sql) for cursor with fetchsize set.\n            Connection connection = getConnectionForReading();\n            if (connection != null) {\n                logger.debug(\"{} using read connection {} for executing query\", this, connection);\n                statement = connection.createStatement();\n                try {\n                    statement.setQueryTimeout(getQueryTimeout());\n                } catch (SQLFeatureNotSupportedException e) {\n                    // Postgresql does not support setQueryTimeout()\n                    logger.warn(\"driver does not support setQueryTimeout(), skipped\");\n                }\n                results = executeQuery(statement, command.getSQL());\n                if (shouldPrepareResultSetMetadata()) {\n                    prepare(results.getMetaData());\n                }\n                SinkKeyValueStreamListener<Object, Object> listener = new SinkKeyValueStreamListener<Object, Object>()\n                        .output(context.getSink())\n                        .shouldIgnoreNull(shouldIgnoreNull())\n                        .shouldDetectGeo(shouldDetectGeo())\n                        .shouldDetectJson(shouldDetectJson());\n                merge(command, results, listener);\n            }\n        } else {\n            // use write connection\n            Connection connection = getConnectionForWriting();\n            if (connection != null) {\n                logger.debug(\"{} using write connection {} for executing insert/update\", this, connection);\n                statement = connection.createStatement();\n                executeUpdate(statement, command.getSQL());\n            }\n        }\n    } finally {\n        close(results);\n        close(statement);\n    }\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Execute SQL query command with parameter binding.\n *\n * @param command the SQL command\n * @throws SQLException when SQL execution gives an error\n * @throws IOException  when input/output error occurs\n */\n", "func_signal": "private void executeWithParameter(SQLCommand command) throws Exception", "code": "{\n    PreparedStatement statement = null;\n    ResultSet results = null;\n    try {\n        if (command.isQuery()) {\n            statement = prepareQuery(command.getSQL());\n            bind(statement, command.getParameters());\n            logger.info(\"execute sql is {} \", statement.toString());\n            results = executeQuery(statement);\n            SinkKeyValueStreamListener<Object, Object> listener = new SinkKeyValueStreamListener<Object, Object>()\n                    .output(context.getSink())\n                    .shouldIgnoreNull(shouldIgnoreNull())\n                    .shouldDetectGeo(shouldDetectGeo())\n                    .shouldDetectJson(shouldDetectJson());\n            merge(command, results, listener);\n        } else {\n            statement = prepareUpdate(command.getSQL());\n            bind(statement, command.getParameters());\n            executeUpdate(statement);\n        }\n    } finally {\n        close(results);\n        close(statement);\n    }\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Parse of value of result set\n *\n * @param result the result set\n * @param i      the offset in the result set\n * @param type   the JDBC type\n * @param locale the locale to use for parsing\n * @return The parse value\n * @throws SQLException when SQL execution gives an error\n * @throws IOException  when input/output error occurs\n */\n", "func_signal": "@Override\npublic Object parseType(ResultSet result, Integer i, int type, Locale locale)\n        throws SQLException, IOException, ParseException", "code": "{\n    logger.trace(\"i={} type={}\", i, type);\n    switch (type) {\n        /**\n         * The JDBC types CHAR, VARCHAR, and LONGVARCHAR are closely\n         * related. CHAR represents a small, fixed-length character string,\n         * VARCHAR represents a small, variable-length character string, and\n         * LONGVARCHAR represents a large, variable-length character string.\n         */\n        case Types.CHAR:\n        case Types.VARCHAR:\n        case Types.LONGVARCHAR: {\n            return result.getString(i);\n        }\n        case Types.NCHAR:\n        case Types.NVARCHAR:\n        case Types.LONGNVARCHAR: {\n            return result.getNString(i);\n        }\n        /**\n         * The JDBC types BINARY, VARBINARY, and LONGVARBINARY are closely\n         * related. BINARY represents a small, fixed-length binary value,\n         * VARBINARY represents a small, variable-length binary value, and\n         * LONGVARBINARY represents a large, variable-length binary value\n         */\n        case Types.BINARY:\n        case Types.VARBINARY:\n        case Types.LONGVARBINARY: {\n            byte[] b = result.getBytes(i);\n            return shouldTreatBinaryAsString() ? (b != null ? new String(b) : null) : b;\n        }\n        /**\n         * The JDBC type ARRAY represents the SQL3 type ARRAY.\n         *\n         * An ARRAY value is mapped to an instance of the Array interface in\n         * the Java programming language. If a driver follows the standard\n         * implementation, an Array object logically points to an ARRAY\n         * value on the server rather than containing the elements of the\n         * ARRAY object, which can greatly increase efficiency. The Array\n         * interface contains methods for materializing the elements of the\n         * ARRAY object on the client in the form of either an array or a\n         * ResultSet object.\n         */\n        case Types.ARRAY: {\n            Array arr = result.getArray(i);\n            return arr == null ? null : arr.getArray();\n        }\n        /**\n         * The JDBC type BIGINT represents a 64-bit signed integer value\n         * between -9223372036854775808 and 9223372036854775807.\n         *\n         * The corresponding SQL type BIGINT is a nonstandard extension to\n         * SQL. In practice the SQL BIGINT type is not yet currently\n         * implemented by any of the major databases, and we recommend that\n         * its use be avoided in code that is intended to be portable.\n         *\n         * The recommended Java mapping for the BIGINT type is as a Java\n         * long.\n         */\n        case Types.BIGINT: {\n            Object o = result.getLong(i);\n            return result.wasNull() ? null : o;\n        }\n        /**\n         * The JDBC type BIT represents a single bit value that can be zero\n         * or one.\n         *\n         * SQL-92 defines an SQL BIT type. However, unlike the JDBC BIT\n         * type, this SQL-92 BIT type can be used as a parameterized type to\n         * define a fixed-length binary string. Fortunately, SQL-92 also\n         * permits the use of the simple non-parameterized BIT type to\n         * represent a single binary digit, and this usage corresponds to\n         * the JDBC BIT type. Unfortunately, the SQL-92 BIT type is only\n         * required in \"full\" SQL-92 and is currently supported by only a\n         * subset of the major databases. Portable code may therefore prefer\n         * to use the JDBC SMALLINT type, which is widely supported.\n         */\n        case Types.BIT: {\n            try {\n                Object o = result.getInt(i);\n                return result.wasNull() ? null : o;\n            } catch (Exception e) {\n                String exceptionClassName = e.getClass().getName();\n                // postgresql can not handle boolean, it will throw PSQLException, something like \"Bad value for type int : t\"\n                if (\"org.postgresql.util.PSQLException\".equals(exceptionClassName)) {\n                    return \"t\".equals(result.getString(i));\n                }\n                throw new IOException(e);\n            }\n        }\n        /**\n         * The JDBC type BOOLEAN, which is new in the JDBC 3.0 API, maps to\n         * a boolean in the Java programming language. It provides a\n         * representation of true and false, and therefore is a better match\n         * than the JDBC type BIT, which is either 1 or 0.\n         */\n        case Types.BOOLEAN: {\n            return result.getBoolean(i);\n        }\n        /**\n         * The JDBC type BLOB represents an SQL3 BLOB (Binary Large Object).\n         *\n         * A JDBC BLOB value is mapped to an instance of the Blob interface\n         * in the Java programming language. If a driver follows the\n         * standard implementation, a Blob object logically points to the\n         * BLOB value on the server rather than containing its binary data,\n         * greatly improving efficiency. The Blob interface provides methods\n         * for materializing the BLOB data on the client when that is\n         * desired.\n         */\n        case Types.BLOB: {\n            Blob blob = result.getBlob(i);\n            if (blob != null) {\n                long n = blob.length();\n                if (n > Integer.MAX_VALUE) {\n                    throw new IOException(\"can't process blob larger than Integer.MAX_VALUE\");\n                }\n                byte[] tab = blob.getBytes(1, (int) n);\n                blob.free();\n                return tab;\n            }\n            break;\n        }\n        /**\n         * The JDBC type CLOB represents the SQL3 type CLOB (Character Large\n         * Object).\n         *\n         * A JDBC CLOB value is mapped to an instance of the Clob interface\n         * in the Java programming language. If a driver follows the\n         * standard implementation, a Clob object logically points to the\n         * CLOB value on the server rather than containing its character\n         * data, greatly improving efficiency. Two of the methods on the\n         * Clob interface materialize the data of a CLOB object on the\n         * client.\n         */\n        case Types.CLOB: {\n            Clob clob = result.getClob(i);\n            if (clob != null) {\n                long n = clob.length();\n                if (n > Integer.MAX_VALUE) {\n                    throw new IOException(\"can't process clob larger than Integer.MAX_VALUE\");\n                }\n                String str = clob.getSubString(1, (int) n);\n                clob.free();\n                return str;\n            }\n            break;\n        }\n        case Types.NCLOB: {\n            NClob nclob = result.getNClob(i);\n            if (nclob != null) {\n                long n = nclob.length();\n                if (n > Integer.MAX_VALUE) {\n                    throw new IOException(\"can't process nclob larger than Integer.MAX_VALUE\");\n                }\n                String str = nclob.getSubString(1, (int) n);\n                nclob.free();\n                return str;\n            }\n            break;\n        }\n        /**\n         * The JDBC type DATALINK, new in the JDBC 3.0 API, is a column\n         * value that references a file that is outside of a data source but\n         * is managed by the data source. It maps to the Java type\n         * java.net.URL and provides a way to manage external files. For\n         * instance, if the data source is a DBMS, the concurrency controls\n         * it enforces on its own data can be applied to the external file\n         * as well.\n         *\n         * A DATALINK value is retrieved from a ResultSet object with the\n         * ResultSet methods getURL or getObject. If the Java platform does\n         * not support the type of URL returned by getURL or getObject, a\n         * DATALINK value can be retrieved as a String object with the\n         * method getString.\n         *\n         * java.net.URL values are stored in a database using the method\n         * setURL. If the Java platform does not support the type of URL\n         * being set, the method setString can be used instead.\n         *\n         *\n         */\n        case Types.DATALINK: {\n            return result.getURL(i);\n        }\n        /**\n         * The JDBC DATE type represents a date consisting of day, month,\n         * and year. The corresponding SQL DATE type is defined in SQL-92,\n         * but it is implemented by only a subset of the major databases.\n         * Some databases offer alternative SQL types that support similar\n         * semantics.\n         */\n        case Types.DATE: {\n            try {\n                Date d = result.getDate(i, calendar);\n                return d != null ? formatDate(d.getTime()) : null;\n            } catch (SQLException e) {\n                return null;\n            }\n        }\n        case Types.TIME: {\n            try {\n                Time t = result.getTime(i, calendar);\n                return t != null ? formatDate(t.getTime()) : null;\n            } catch (SQLException e) {\n                return null;\n            }\n        }\n        case Types.TIMESTAMP: {\n            try {\n                Timestamp t = result.getTimestamp(i, calendar);\n                return t != null ? formatDate(t.getTime()) : null;\n            } catch (SQLException e) {\n                // java.sql.SQLException: Cannot convert value '0000-00-00 00:00:00' from column ... to TIMESTAMP.\n                return null;\n            }\n        }\n        /**\n         * The JDBC types DECIMAL and NUMERIC are very similar. They both\n         * represent fixed-precision decimal values.\n         *\n         * The corresponding SQL types DECIMAL and NUMERIC are defined in\n         * SQL-92 and are very widely implemented. These SQL types take\n         * precision and scale parameters. The precision is the total number\n         * of decimal digits supported, and the scale is the number of\n         * decimal digits after the decimal point. For most DBMSs, the scale\n         * is less than or equal to the precision. So for example, the value\n         * \"12.345\" has a precision of 5 and a scale of 3, and the value\n         * \".11\" has a precision of 2 and a scale of 2. JDBC requires that\n         * all DECIMAL and NUMERIC types support both a precision and a\n         * scale of at least 15.\n         *\n         * The sole distinction between DECIMAL and NUMERIC is that the\n         * SQL-92 specification requires that NUMERIC types be represented\n         * with exactly the specified precision, whereas for DECIMAL types,\n         * it allows an implementation to add additional precision beyond\n         * that specified when the type was created. Thus a column created\n         * with type NUMERIC(12,4) will always be represented with exactly\n         * 12 digits, whereas a column created with type DECIMAL(12,4) might\n         * be represented by some larger number of digits.\n         *\n         * The recommended Java mapping for the DECIMAL and NUMERIC types is\n         * java.math.BigDecimal. The java.math.BigDecimal type provides math\n         * operations to allow BigDecimal types to be added, subtracted,\n         * multiplied, and divided with other BigDecimal types, with integer\n         * types, and with floating point types.\n         *\n         * The method recommended for retrieving DECIMAL and NUMERIC values\n         * is ResultSet.getBigDecimal. JDBC also allows access to these SQL\n         * types as simple Strings or arrays of char. Thus, Java programmers\n         * can use getString to receive a DECIMAL or NUMERIC result.\n         * However, this makes the common case where DECIMAL or NUMERIC are\n         * used for currency values rather awkward, since it means that\n         * application writers have to perform math on strings. It is also\n         * possible to retrieve these SQL types as any of the Java numeric\n         * types.\n         */\n        case Types.DECIMAL:\n        case Types.NUMERIC: {\n            BigDecimal bd = null;\n            try {\n                // getBigDecimal() should get obsolete. Most seem to use getString/getObject anyway...\n                bd = result.getBigDecimal(i);\n            } catch (NullPointerException e) {\n                // But is it true? JDBC NPE exists since 13 years?\n                // http://forums.codeguru.com/archive/index.php/t-32443.html\n                // Null values are driving us nuts in JDBC:\n                // http://stackoverflow.com/questions/2777214/when-accessing-resultsets-in-jdbc-is-there-an-elegant-way-to-distinguish-betwee\n            }\n            if (bd == null || result.wasNull()) {\n                return null;\n            }\n            if (getScale() >= 0) {\n                bd = bd.setScale(getScale(), getRounding());\n                try {\n                    long l = bd.longValueExact();\n                    if (Long.toString(l).equals(result.getString(i))) {\n                        // convert to long if possible\n                        return l;\n                    } else {\n                        // convert to double (with precision loss)\n                        return bd.doubleValue();\n                    }\n                } catch (ArithmeticException e) {\n                    return bd.doubleValue();\n                }\n            } else {\n                return bd.toPlainString();\n            }\n        }\n        /**\n         * The JDBC type DOUBLE represents a \"double precision\" floating\n         * point number that supports 15 digits of mantissa.\n         *\n         * The corresponding SQL type is DOUBLE PRECISION, which is defined\n         * in SQL-92 and is widely supported by the major databases. The\n         * SQL-92 standard leaves the precision of DOUBLE PRECISION up to\n         * the implementation, but in practice all the major databases\n         * supporting DOUBLE PRECISION support a mantissa precision of at\n         * least 15 digits.\n         *\n         * The recommended Java mapping for the DOUBLE type is as a Java\n         * double.\n         */\n        case Types.DOUBLE: {\n            String s = result.getString(i);\n            if (result.wasNull() || s == null) {\n                return null;\n            }\n            NumberFormat format = NumberFormat.getInstance(locale);\n            Number number = format.parse(s);\n            return number.doubleValue();\n        }\n        /**\n         * The JDBC type FLOAT is basically equivalent to the JDBC type\n         * DOUBLE. We provided both FLOAT and DOUBLE in a possibly misguided\n         * attempt at consistency with previous database APIs. FLOAT\n         * represents a \"double precision\" floating point number that\n         * supports 15 digits of mantissa.\n         *\n         * The corresponding SQL type FLOAT is defined in SQL-92. The SQL-92\n         * standard leaves the precision of FLOAT up to the implementation,\n         * but in practice all the major databases supporting FLOAT support\n         * a mantissa precision of at least 15 digits.\n         *\n         * The recommended Java mapping for the FLOAT type is as a Java\n         * double. However, because of the potential confusion between the\n         * double precision SQL FLOAT and the single precision Java float,\n         * we recommend that JDBC programmers should normally use the JDBC\n         * DOUBLE type in preference to FLOAT.\n         */\n        case Types.FLOAT: {\n            String s = result.getString(i);\n            if (result.wasNull() || s == null) {\n                return null;\n            }\n            NumberFormat format = NumberFormat.getInstance(locale);\n            Number number = format.parse(s);\n            return number.doubleValue();\n        }\n        /**\n         * The JDBC type JAVA_OBJECT, added in the JDBC 2.0 core API, makes\n         * it easier to use objects in the Java programming language as\n         * values in a database. JAVA_OBJECT is simply a type code for an\n         * instance of a class defined in the Java programming language that\n         * is stored as a database object. The type JAVA_OBJECT is used by a\n         * database whose type system has been extended so that it can store\n         * Java objects directly. The JAVA_OBJECT value may be stored as a\n         * serialized Java object, or it may be stored in some\n         * vendor-specific format.\n         *\n         * The type JAVA_OBJECT is one of the possible values for the column\n         * DATA_TYPE in the ResultSet objects returned by various\n         * DatabaseMetaData methods, including getTypeInfo, getColumns, and\n         * getUDTs. The method getUDTs, part of the new JDBC 2.0 core API,\n         * will return information about the Java objects contained in a\n         * particular schema when it is given the appropriate parameters.\n         * Having this information available facilitates using a Java class\n         * as a database type.\n         */\n        case Types.OTHER:\n        case Types.JAVA_OBJECT: {\n            return result.getObject(i);\n        }\n        /**\n         * The JDBC type REAL represents a \"single precision\" floating point\n         * number that supports seven digits of mantissa.\n         *\n         * The corresponding SQL type REAL is defined in SQL-92 and is\n         * widely, though not universally, supported by the major databases.\n         * The SQL-92 standard leaves the precision of REAL up to the\n         * implementation, but in practice all the major databases\n         * supporting REAL support a mantissa precision of at least seven\n         * digits.\n         *\n         * The recommended Java mapping for the REAL type is as a Java\n         * float.\n         */\n        case Types.REAL: {\n            String s = result.getString(i);\n            if (result.wasNull() || s == null) {\n                return null;\n            }\n            NumberFormat format = NumberFormat.getInstance(locale);\n            Number number = format.parse(s);\n            return number.doubleValue();\n        }\n        /**\n         * The JDBC type TINYINT represents an 8-bit integer value between 0\n         * and 255 that may be signed or unsigned.\n         *\n         * The corresponding SQL type, TINYINT, is currently supported by\n         * only a subset of the major databases. Portable code may therefore\n         * prefer to use the JDBC SMALLINT type, which is widely supported.\n         *\n         * The recommended Java mapping for the JDBC TINYINT type is as\n         * either a Java byte or a Java short. The 8-bit Java byte type\n         * represents a signed value from -128 to 127, so it may not always\n         * be appropriate for larger TINYINT values, whereas the 16-bit Java\n         * short will always be able to hold all TINYINT values.\n         */\n        /**\n         * The JDBC type SMALLINT represents a 16-bit signed integer value\n         * between -32768 and 32767.\n         *\n         * The corresponding SQL type, SMALLINT, is defined in SQL-92 and is\n         * supported by all the major databases. The SQL-92 standard leaves\n         * the precision of SMALLINT up to the implementation, but in\n         * practice, all the major databases support at least 16 bits.\n         *\n         * The recommended Java mapping for the JDBC SMALLINT type is as a\n         * Java short.\n         */\n        /**\n         * The JDBC type INTEGER represents a 32-bit signed integer value\n         * ranging between -2147483648 and 2147483647.\n         *\n         * The corresponding SQL type, INTEGER, is defined in SQL-92 and is\n         * widely supported by all the major databases. The SQL-92 standard\n         * leaves the precision of INTEGER up to the implementation, but in\n         * practice all the major databases support at least 32 bits.\n         *\n         * The recommended Java mapping for the INTEGER type is as a Java\n         * int.\n         */\n        case Types.TINYINT:\n        case Types.SMALLINT:\n        case Types.INTEGER: {\n            try {\n                Integer integer = result.getInt(i);\n                return result.wasNull() ? null : integer;\n            } catch (SQLDataException e) {\n                Long l = result.getLong(i);\n                return result.wasNull() ? null : l;\n            }\n        }\n\n        case Types.SQLXML: {\n            SQLXML xml = result.getSQLXML(i);\n            return xml != null ? xml.getString() : null;\n        }\n\n        case Types.NULL: {\n            return null;\n        }\n        /**\n         * The JDBC type DISTINCT field (Types class)>DISTINCT represents\n         * the SQL3 type DISTINCT.\n         *\n         * The standard mapping for a DISTINCT type is to the Java type to\n         * which the base type of a DISTINCT object would be mapped. For\n         * example, a DISTINCT type based on a CHAR would be mapped to a\n         * String object, and a DISTINCT type based on an SQL INTEGER would\n         * be mapped to an int.\n         *\n         * The DISTINCT type may optionally have a custom mapping to a class\n         * in the Java programming language. A custom mapping consists of a\n         * class that implements the interface SQLData and an entry in a\n         * java.util.Map object.\n         */\n        case Types.DISTINCT: {\n            logger.warn(\"JDBC type not implemented: {}\", type);\n            return null;\n        }\n        /**\n         * The JDBC type STRUCT represents the SQL99 structured type. An SQL\n         * structured type, which is defined by a user with a CREATE TYPE\n         * statement, consists of one or more attributes. These attributes\n         * may be any SQL data type, built-in or user-defined.\n         *\n         * The standard mapping for the SQL type STRUCT is to a Struct\n         * object in the Java programming language. A Struct object contains\n         * a value for each attribute of the STRUCT value it represents.\n         *\n         * A STRUCT value may optionally be custom mapped to a class in the\n         * Java programming language, and each attribute in the STRUCT may\n         * be mapped to a field in the class. A custom mapping consists of a\n         * class that implements the interface SQLData and an entry in a\n         * java.util.Map object.\n         *\n         *\n         */\n        case Types.STRUCT: {\n            logger.warn(\"JDBC type not implemented: {}\", type);\n            return null;\n        }\n        case Types.REF: {\n            logger.warn(\"JDBC type not implemented: {}\", type);\n            return null;\n        }\n        case Types.ROWID: {\n            logger.warn(\"JDBC type not implemented: {}\", type);\n            return null;\n        }\n        default: {\n            logger.warn(\"unknown JDBC type ignored: {}\", type);\n            return null;\n        }\n    }\n    return null;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Merge key/values from JDBC result set\n *\n * @param command  the SQL command that created this result set\n * @param results  result set\n * @param listener the value listener\n * @throws SQLException when SQL execution gives an error\n * @throws IOException  when input/output error occurs\n */\n", "func_signal": "protected void merge(SQLCommand command, ResultSet results, KeyValueStreamListener listener)\n        throws SQLException, IOException", "code": "{\n    if (listener == null) {\n        return;\n    }\n    beforeRows(command, results, listener);\n    long rows = 0L;\n    if (sourceMetric != null) {\n        sourceMetric.resetCurrentRows();\n    }\n    while (nextRow(command, results, listener)) {\n        rows++;\n        if (sourceMetric != null) {\n            sourceMetric.getCurrentRows().inc();\n            sourceMetric.getTotalRows().inc();\n        }\n    }\n    setLastRowCount(rows);\n    if (rows > 0) {\n        logger.debug(\"merged {} rows\", rows);\n    } else {\n        logger.debug(\"no rows merged \");\n    }\n    afterRows(command, results, listener);\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Get JDBC connection for reading\n *\n * @return the connection\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic synchronized Connection getConnectionForReading() throws SQLException", "code": "{\n    boolean invalid = readConnection == null || readConnection.isClosed();\n    try {\n        invalid = invalid || !readConnection.isValid(5);\n    } catch (AbstractMethodError e) {\n        // old/buggy JDBC driver\n        logger.debug(e.getMessage());\n    } catch (SQLFeatureNotSupportedException e) {\n        // postgresql does not support isValid()\n        logger.debug(e.getMessage());\n    }\n    if (invalid) {\n        int retries = getRetries();\n        while (retries > 0) {\n            retries--;\n            try {\n                if (user != null) {\n                    Properties properties = new Properties();\n                    properties.put(\"user\", user);\n                    if (password != null) {\n                        properties.put(\"password\", password);\n                    }\n                    if (getConnectionProperties() != null) {\n                        properties.putAll(getConnectionProperties());\n                    }\n                    readConnection = DriverManager.getConnection(url, properties);\n                } else {\n                    readConnection = DriverManager.getConnection(url);\n                }\n                DatabaseMetaData metaData = readConnection.getMetaData();\n                if (shouldPrepareDatabaseMetadata()) {\n                    prepare(metaData);\n                }\n                if (metaData.getTimeDateFunctions().contains(\"TIMESTAMPDIFF\")) {\n                    setTimestampDiffSupported(true);\n                }\n                // \"readonly\" is required by MySQL for large result streaming\n                readConnection.setReadOnly(true);\n                // Postgresql cursor mode condition:\n                // fetchsize > 0, no scrollable result set, no auto commit, no holdable cursors over commit\n                // https://github.com/pgjdbc/pgjdbc/blob/master/org/postgresql/jdbc2/AbstractJdbc2Statement.java#L514\n                //readConnection.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);\n                // many drivers don't like autocommit=true\n                readConnection.setAutoCommit(getAutoCommit());\n                return readConnection;\n            } catch (SQLException e) {\n                logger.error(\"while opening read connection: \" + url + \" \" + e.getMessage(), e);\n                try {\n                    logger.debug(\"delaying for {} seconds...\", getMaxRetryWait().seconds());\n                    Thread.sleep(getMaxRetryWait().millis());\n                } catch (InterruptedException ex) {\n                    // do nothing\n                }\n            }\n        }\n    }\n    return readConnection;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Get next row and prepare the values for processing. The labels of each\n * columns are used for the ValueListener as paths for JSON object merging.\n *\n * @param command  the SQL command that created this result set\n * @param results  the result set\n * @param listener the listener\n * @return true if row exists and was processed, false otherwise\n * @throws SQLException when SQL execution gives an error\n * @throws IOException  when input/output error occurs\n */\n", "func_signal": "@Override\npublic boolean nextRow(SQLCommand command, ResultSet results, KeyValueStreamListener listener)\n        throws SQLException, IOException", "code": "{\n    if (results.next()) {\n        processRow(results, listener);\n        return true;\n    }\n    return false;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Execute callable SQL command\n *\n * @param command the SQL command\n * @throws SQLException when SQL execution gives an error\n * @throws IOException  when input/output error occurs\n */\n", "func_signal": "private void executeCallable(SQLCommand command) throws Exception", "code": "{\n    // call stored procedure\n    CallableStatement statement = null;\n    try {\n        // we do not make a difference betwwen read/write and we assume\n        // it is safe to use the read connection and query the DB\n        Connection connection = getConnectionForWriting();\n        logger.debug(\"{} using write connection {} for executing callable statement\", this, connection);\n        if (connection != null) {\n            statement = connection.prepareCall(command.getSQL());\n            if (!command.getParameters().isEmpty()) {\n                bind(statement, command.getParameters());\n            }\n            if (!command.getRegister().isEmpty()) {\n                register(statement, command.getRegister());\n            }\n            boolean hasRows = statement.execute();\n            SinkKeyValueStreamListener<Object, Object> listener = new SinkKeyValueStreamListener<Object, Object>()\n                    .output(context.getSink());\n            if (hasRows) {\n                logger.debug(\"callable execution created result set\");\n                while (hasRows) {\n                    // merge result set, but use register\n                    merge(command, statement.getResultSet(), listener);\n                    hasRows = statement.getMoreResults();\n                }\n            } else {\n                // no result set, merge from registered params only\n                merge(command, statement, listener);\n            }\n        }\n    } finally {\n        close(statement);\n    }\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Bind values to prepared statement\n *\n * @param statement the prepared statement\n * @param values    the values to bind\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic StandardSource<C> bind(PreparedStatement statement, List<Object> values) throws SQLException", "code": "{\n    if (values == null) {\n        logger.warn(\"no values given for bind\");\n        return this;\n    }\n    for (int i = 1; i <= values.size(); i++) {\n        bind(statement, i, values.get(i - 1));\n    }\n    return this;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Execute prepared update statement\n *\n * @param statement the prepared statement\n * @return the result set\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic StandardSource<C> executeUpdate(PreparedStatement statement) throws SQLException", "code": "{\n    statement.executeUpdate();\n    if (!writeConnection.getAutoCommit()) {\n        writeConnection.commit();\n    }\n    return this;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Close result set\n *\n * @param result the result set to be closed or null\n * @throws SQLException when SQL execution gives an error\n */\n", "func_signal": "@Override\npublic StandardSource<C> close(ResultSet result) throws SQLException", "code": "{\n    if (result != null) {\n        result.close();\n    }\n    return this;\n}", "path": "elasticsearch-jdbc/src/main/java/org/xbib/elasticsearch/jdbc/strategy/standard/StandardSource.java", "commit_date": "2016-04-10 00:00:00", "repo_name": "jprante/elasticsearch-jdbc", "stars": 2840, "license": "apache-2.0", "language": "java", "size": 7823}
{"docstring": "/**\n * Process hexadecimal integer.\n */\n", "func_signal": "private int readHex(int max)", "code": "{\n    StringBuilder st = new StringBuilder(max);\n    int length = pattern.length - 2;\n    int i;\n    for (i = 0; i < max && index < length; i++) {\n        st.append(pattern[nextIndex()]);\n    }\n    if (i == max) {\n        try {\n            return Integer.parseInt(st.toString(), 16);\n        } catch (NumberFormatException nfe) {\n            // do nothing\n        }\n    }\n\n    throw new TPatternSyntaxException(\"\", this.toString(), index);\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Process expression flags given with (?idmsux-idmsux)\n */\n", "func_signal": "private int readFlags()", "code": "{\n    char ch;\n    boolean pos = true;\n    int res = flags;\n\n    while (index < pattern.length) {\n        ch = pattern[index];\n        switch (ch) {\n            case '-':\n                if (!pos) {\n                    throw new TPatternSyntaxException(\"\", this.toString(), index);\n                }\n                pos = false;\n                break;\n\n            case 'i':\n                res = pos ? res | TPattern.CASE_INSENSITIVE : (res ^ TPattern.CASE_INSENSITIVE) & res;\n                break;\n\n            case 'd':\n                res = pos ? res | TPattern.UNIX_LINES : (res ^ TPattern.UNIX_LINES) & res;\n                break;\n\n            case 'm':\n                res = pos ? res | TPattern.MULTILINE : (res ^ TPattern.MULTILINE) & res;\n                break;\n\n            case 's':\n                res = pos ? res | TPattern.DOTALL : (res ^ TPattern.DOTALL) & res;\n                break;\n\n            case 'u':\n                res = pos ? res | TPattern.UNICODE_CASE : (res ^ TPattern.UNICODE_CASE) & res;\n                break;\n\n            case 'x':\n                res = pos ? res | TPattern.COMMENTS : (res ^ TPattern.COMMENTS) & res;\n                break;\n\n            case ':':\n                nextIndex();\n                return res;\n\n            case ')':\n                nextIndex();\n                return res | (1 << 8);\n\n            default:\n                // ignore invalid flags (HARMONY-2127)\n        }\n        nextIndex();\n    }\n    throw new TPatternSyntaxException(\"\", this.toString(), index);\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Performs {@code res = a + b}.\n */\n", "func_signal": "private static void add(int[] res, int[] a, int aSize, int[] b, int bSize)", "code": "{\n    // PRE: a.length < max(aSize, bSize)\n\n    int i;\n    long carry = (a[0] & 0xFFFFFFFFL) + (b[0] & 0xFFFFFFFFL);\n\n    res[0] = (int) carry;\n    carry >>= 32;\n\n    if (aSize >= bSize) {\n        for (i = 1; i < bSize; i++) {\n            carry += (a[i] & 0xFFFFFFFFL) + (b[i] & 0xFFFFFFFFL);\n            res[i] = (int) carry;\n            carry >>= 32;\n        }\n        for (; i < aSize; i++) {\n            carry += a[i] & 0xFFFFFFFFL;\n            res[i] = (int) carry;\n            carry >>= 32;\n        }\n    } else {\n        for (i = 1; i < aSize; i++) {\n            carry += (a[i] & 0xFFFFFFFFL) + (b[i] & 0xFFFFFFFFL);\n            res[i] = (int) carry;\n            carry >>= 32;\n        }\n        for (; i < bSize; i++) {\n            carry += b[i] & 0xFFFFFFFFL;\n            res[i] = (int) carry;\n            carry >>= 32;\n        }\n    }\n    if (carry != 0) {\n        res[i] = (int) carry;\n    }\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/math/TElementary.java", "commit_date": "2015-10-04 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Subtracts the value represented by {@code b} from the value represented\n * by {@code a}. It is assumed the magnitude of a is not less than the\n * magnitude of b.\n *\n * @return {@code a - b}\n */\n", "func_signal": "private static int[] subtract(int[] a, int aSize, int[] b, int bSize)", "code": "{\n    // PRE: a[] >= b[]\n    int[] res = new int[aSize];\n    subtract(res, a, aSize, b, bSize);\n    return res;\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/math/TElementary.java", "commit_date": "2015-10-04 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Process given character in assumption that it's quantifier.\n */\n", "func_signal": "private TQuantifier processQuantifier(int ch)", "code": "{\n    StringBuilder sb = new StringBuilder(4);\n    int min = -1;\n    int max = Integer.MAX_VALUE;\n    while (index < pattern.length) {\n        ch = pattern[nextIndex()];\n        if (ch == '}') {\n            break;\n        }\n        if (ch == ',' && min < 0) {\n            try {\n                min = Integer.parseInt(sb.toString(), 10);\n                sb.delete(0, sb.length());\n            } catch (NumberFormatException nfe) {\n                throw new TPatternSyntaxException(\"\", this.toString(), index);\n            }\n        } else {\n            sb.append((char) ch);\n        }\n    }", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Moves pointer one position right; save current character to lookBack;\n * lookAhead to current one and finally read one more to lookAhead;\n */\n", "func_signal": "private void movePointer()", "code": "{\n    // swap pointers\n    lookBack = ch;\n    ch = lookAhead;\n    curST = lookAheadST;\n    curToc = lookAheadToc;\n    lookAheadToc = index;\n    boolean reread;\n    do {\n        reread = false;\n        // read next character analyze it and construct token:\n        // //\n\n        lookAhead = (index < pattern.length) ? nextCodePoint() : 0;\n        lookAheadST = null;\n\n        if (mode == TLexer.MODE_ESCAPE) {\n            if (lookAhead == '\\\\') {\n\n                // need not care about supplementary codepoints here\n                lookAhead = (index < pattern.length) ? pattern[nextIndex()] : 0;\n\n                switch (lookAhead) {\n                    case 'E': {\n                        mode = savedMode;\n\n                        lookAhead = (index <= pattern.length - 2) ? nextCodePoint() : 0;\n                        break;\n                    }\n\n                    default: {\n                        lookAhead = '\\\\';\n                        index = prevNW;\n                        return;\n                    }\n                }\n            } else {\n                return;\n            }\n        }\n\n        if (lookAhead == '\\\\') {\n\n            lookAhead = (index < pattern.length - 2) ? nextCodePoint() : -1;\n            switch (lookAhead) {\n                case -1:\n                    throw new TPatternSyntaxException(\"\", this.toString(), index);\n                case 'P':\n                case 'p': {\n                    String cs = parseCharClassName();\n                    boolean negative = false;\n\n                    if (lookAhead == 'P') {\n                        negative = true;\n                    }\n                    try {\n                        lookAheadST = TAbstractCharClass.getPredefinedClass(cs, negative);\n                    } catch (MissingResourceException mre) {\n                        throw new TPatternSyntaxException(\"\", this.toString(), index);\n                    }\n                    lookAhead = 0;\n                    break;\n                }\n\n                case 'w':\n                case 's':\n                case 'd':\n                case 'W':\n                case 'S':\n                case 'D': {\n                    lookAheadST = TCharClass.getPredefinedClass(new String(pattern, prevNW, 1), false);\n                    lookAhead = 0;\n                    break;\n                }\n\n                case 'Q': {\n                    savedMode = mode;\n                    mode = TLexer.MODE_ESCAPE;\n                    reread = true;\n                    break;\n                }\n\n                case 't':\n                    lookAhead = '\\t';\n                    break;\n                case 'n':\n                    lookAhead = '\\n';\n                    break;\n                case 'r':\n                    lookAhead = '\\r';\n                    break;\n                case 'f':\n                    lookAhead = '\\f';\n                    break;\n                case 'a':\n                    lookAhead = '\\u0007';\n                    break;\n                case 'e':\n                    lookAhead = '\\u001B';\n                    break;\n\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                case '8':\n                case '9': {\n                    if (mode == TLexer.MODE_PATTERN) {\n                        lookAhead = 0x80000000 | lookAhead;\n                    }\n                    break;\n                }\n\n                case '0':\n                    lookAhead = readOctals();\n                    break;\n                case 'x':\n                    lookAhead = readHex(2);\n                    break;\n                case 'u':\n                    lookAhead = readHex(4);\n                    break;\n\n                case 'b':\n                    lookAhead = CHAR_WORD_BOUND;\n                    break;\n                case 'B':\n                    lookAhead = CHAR_NONWORD_BOUND;\n                    break;\n                case 'A':\n                    lookAhead = CHAR_START_OF_INPUT;\n                    break;\n                case 'G':\n                    lookAhead = CHAR_PREVIOUS_MATCH;\n                    break;\n                case 'Z':\n                    lookAhead = CHAR_END_OF_LINE;\n                    break;\n                case 'z':\n                    lookAhead = CHAR_END_OF_INPUT;\n                    break;\n                case 'c': {\n                    if (index < pattern.length - 2) {\n\n                        // need not care about supplementary codepoints here\n                        lookAhead = pattern[nextIndex()] & 0x1f;\n                        break;\n                    } else {\n                        throw new TPatternSyntaxException(\"\", this.toString(), index);\n                    }\n                }\n                case 'C':\n                case 'E':\n                case 'F':\n                case 'H':\n                case 'I':\n                case 'J':\n                case 'K':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'O':\n                case 'R':\n                case 'T':\n                case 'U':\n                case 'V':\n                case 'X':\n                case 'Y':\n                case 'g':\n                case 'h':\n                case 'i':\n                case 'j':\n                case 'k':\n                case 'l':\n                case 'm':\n                case 'o':\n                case 'q':\n                case 'y':\n                    throw new TPatternSyntaxException(\"\", this.toString(), index);\n\n                default:\n                    break;\n            }\n        } else if (mode == TLexer.MODE_PATTERN) {\n            switch (lookAhead) {\n                case '+':\n                case '*':\n                case '?': {\n                    char mod = (index < pattern.length) ? pattern[index] : '*';\n                    switch (mod) {\n                        case '+': {\n                            lookAhead = lookAhead | TLexer.QMOD_POSSESSIVE;\n                            nextIndex();\n                            break;\n                        }\n                        case '?': {\n                            lookAhead = lookAhead | TLexer.QMOD_RELUCTANT;\n                            nextIndex();\n                            break;\n                        }\n                        default: {\n                            lookAhead = lookAhead | TLexer.QMOD_GREEDY;\n                            break;\n                        }\n                    }\n\n                    break;\n                }\n\n                case '{': {\n                    lookAheadST = processQuantifier(lookAhead);\n                    break;\n                }\n\n                case '$':\n                    lookAhead = CHAR_DOLLAR;\n                    break;\n                case '(': {\n                    if (pattern[index] == '?') {\n                        nextIndex();\n                        char nonCap = pattern[index];\n                        boolean behind = false;\n                        do {\n                            if (!behind) {\n                                switch (nonCap) {\n                                    case '!':\n                                        lookAhead = CHAR_NEG_LOOKAHEAD;\n                                        nextIndex();\n                                        break;\n                                    case '=':\n                                        lookAhead = CHAR_POS_LOOKAHEAD;\n                                        nextIndex();\n                                        break;\n                                    case '>':\n                                        lookAhead = CHAR_ATOMIC_GROUP;\n                                        nextIndex();\n                                        break;\n                                    case '<': {\n                                        nextIndex();\n                                        nonCap = pattern[index];\n                                        behind = true;\n                                        break;\n                                    }\n                                    default: {\n                                        lookAhead = readFlags();\n\n                                        /*\n                                         * We return res = res | 1 << 8 from\n                                         * readFlags() if we read\n                                         * (?idmsux-idmsux)\n                                         */\n                                        if (lookAhead >= 256) {\n\n                                            // Erase auxiliary bit\n                                            lookAhead = lookAhead & 0xff;\n                                            flags = lookAhead;\n                                            lookAhead = lookAhead << 16;\n                                            lookAhead = CHAR_FLAGS | lookAhead;\n                                        } else {\n                                            flags = lookAhead;\n                                            lookAhead = lookAhead << 16;\n                                            lookAhead = CHAR_NONCAP_GROUP | lookAhead;\n                                        }\n                                        break;\n                                    }\n                                }\n                            } else {\n                                behind = false;\n                                switch (nonCap) {\n                                    case '!':\n                                        lookAhead = CHAR_NEG_LOOKBEHIND;\n                                        nextIndex();\n                                        break;\n                                    case '=':\n                                        lookAhead = CHAR_POS_LOOKBEHIND;\n                                        nextIndex();\n                                        break;\n                                    default:\n                                        throw new TPatternSyntaxException(\"\", this.toString(), index);\n                                }\n                            }\n                        } while (behind);\n                    } else {\n                        lookAhead = CHAR_LEFT_PARENTHESIS;\n                    }\n                    break;\n                }\n\n                case ')':\n                    lookAhead = CHAR_RIGHT_PARENTHESIS;\n                    break;\n                case '[': {\n                    lookAhead = CHAR_LEFT_SQUARE_BRACKET;\n                    setMode(TLexer.MODE_RANGE);\n                    break;\n                }\n                case ']': {\n                    if (mode == TLexer.MODE_RANGE) {\n                        lookAhead = CHAR_RIGHT_SQUARE_BRACKET;\n                    }\n                    break;\n                }\n                case '^':\n                    lookAhead = CHAR_CARET;\n                    break;\n                case '|':\n                    lookAhead = CHAR_VERTICAL_BAR;\n                    break;\n                case '.':\n                    lookAhead = CHAR_DOT;\n                    break;\n                default:\n                    break;\n            }\n        } else if (mode == TLexer.MODE_RANGE) {\n            switch (lookAhead) {\n                case '[':\n                    lookAhead = CHAR_LEFT_SQUARE_BRACKET;\n                    break;\n                case ']':\n                    lookAhead = CHAR_RIGHT_SQUARE_BRACKET;\n                    break;\n                case '^':\n                    lookAhead = CHAR_CARET;\n                    break;\n                case '&':\n                    lookAhead = CHAR_AMPERSAND;\n                    break;\n                case '-':\n                    lookAhead = CHAR_HYPHEN;\n                    break;\n                default:\n                    break;\n            }\n        }\n    } while (reread);\n}\n\n/**\n * Parse character classes names and verifies correction of the syntax;\n */\nprivate String parseCharClassName() {\n    StringBuilder sb = new StringBuilder(10);\n    if (index < pattern.length - 2) {\n        // one symbol family\n        if (pattern[index] != '{') {\n            return \"Is\" + new String(pattern, nextIndex(), 1); //$NON-NLS-1$\n        }\n\n        nextIndex();\n        char ch = 0;\n        while (index < pattern.length - 2) {\n            ch = pattern[nextIndex()];\n            if (ch == '}') {\n                break;\n            }\n            sb.append(ch);\n        }\n        if (ch != '}') {\n            throw new TPatternSyntaxException(\"\", this.toString(), index);\n        }\n    }\n\n    if (sb.length() == 0) {\n        throw new TPatternSyntaxException(\"\", this.toString(), index);\n    }\n\n    String res = sb.toString();\n    if (res.length() == 1) {\n        return \"Is\" + res;\n    }\n    return (res.length() > 3 && (res.startsWith(\"Is\") || res.startsWith(\"In\"))) ? res.substring(2) : res;\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Performs {@code res = b - a}\n */\n", "func_signal": "private static void inverseSubtract(int[] res, int[] a, int aSize, int[] b, int bSize)", "code": "{\n    int i;\n    long borrow = 0;\n    if (aSize < bSize) {\n        for (i = 0; i < aSize; i++) {\n            borrow += (b[i] & 0xFFFFFFFFL) - (a[i] & 0xFFFFFFFFL);\n            res[i] = (int) borrow;\n            borrow >>= 32; // -1 or 0\n        }\n        for (; i < bSize; i++) {\n            borrow += b[i] & 0xFFFFFFFFL;\n            res[i] = (int) borrow;\n            borrow >>= 32; // -1 or 0\n        }\n    } else {\n        for (i = 0; i < bSize; i++) {\n            borrow += (b[i] & 0xFFFFFFFFL) - (a[i] & 0xFFFFFFFFL);\n            res[i] = (int) borrow;\n            borrow >>= 32; // -1 or 0\n        }\n        for (; i < aSize; i++) {\n            borrow -= a[i] & 0xFFFFFFFFL;\n            res[i] = (int) borrow;\n            borrow >>= 32; // -1 or 0\n        }\n    }\n\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/math/TElementary.java", "commit_date": "2015-10-04 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Find the central directory and read the contents.\n *\n * <p>The central directory can be followed by a variable-length comment\n * field, so we have to scan through it backwards.  The comment is at\n * most 64K, plus we have 18 bytes for the end-of-central-dir stuff\n * itself, plus apparently sometimes people throw random junk on the end\n * just for the fun of it.\n *\n * <p>This is all a little wobbly.  If the wrong value ends up in the EOCD\n * area, we're hosed. This appears to be the way that everybody handles\n * it though, so we're in good company if this fails.\n */\n", "func_signal": "private void readCentralDir() throws IOException", "code": "{\n    /*\n     * Scan back, looking for the End Of Central Directory field.  If\n     * the archive doesn't have a comment, we'll hit it on the first\n     * try.\n     *\n     * No need to synchronize mRaf here -- we only do this when we\n     * first open the Zip file.\n     */\n    long scanOffset = mRaf.length() - ENDHDR;\n    if (scanOffset < 0) {\n        throw new TZipException();\n    }\n\n    long stopOffset = scanOffset - 65536;\n    if (stopOffset < 0) {\n        stopOffset = 0;\n    }\n\n    while (true) {\n        mRaf.seek(scanOffset);\n        if (TZipEntry.readIntLE(mRaf) == 101010256L) {\n            break;\n        }\n\n        scanOffset--;\n        if (scanOffset < stopOffset) {\n            throw new TZipException();\n        }\n    }\n\n    /*\n     * Found it, read the EOCD.\n     *\n     * For performance we want to use buffered I/O when reading the\n     * file.  We wrap a buffered stream around the random-access file\n     * object.  If we just read from the RandomAccessFile we'll be\n     * doing a read() system call every time.\n     */\n    RAFStream rafs = new RAFStream(mRaf, mRaf.getFilePointer());\n    BufferedInputStream bin = new BufferedInputStream(rafs, ENDHDR);\n\n    int diskNumber = ler.readShortLE(bin);\n    int diskWithCentralDir = ler.readShortLE(bin);\n    int numEntries = ler.readShortLE(bin);\n    int totalNumEntries = ler.readShortLE(bin);\n    /*centralDirSize =*/ ler.readIntLE(bin);\n    long centralDirOffset = ler.readIntLE(bin);\n    /*commentLen =*/ ler.readShortLE(bin);\n\n    if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {\n        throw new TZipException();\n    }\n\n    /*\n     * Seek to the first CDE and read all entries.\n     * However, when Z_SYNC_FLUSH is used the offset may not point directly\n     * to the CDE so skip over until we find it. \n     * At most it will be 6 bytes away (one or two bytes for empty block, 4 bytes for\n     * empty block signature).  \n     */\n    scanOffset = centralDirOffset;\n    stopOffset = scanOffset + 6;\n    \n    while (true) {\n        mRaf.seek(scanOffset);\n        if (TZipEntry.readIntLE(mRaf) == CENSIG) {\n            break;\n        }\n\n        scanOffset++;\n        if (scanOffset > stopOffset) {\n            throw new TZipException();\n        }\n    }\n    \n    // If CDE is found then go and read all the entries\n    rafs = new RAFStream(mRaf, scanOffset);\n    bin = new BufferedInputStream(rafs, 4096);\n    for (int i = 0; i < numEntries; i++) {\n        TZipEntry newEntry = new TZipEntry(ler, bin);\n        mEntries.put(newEntry.getName(), newEntry);\n    }\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/zip/TZipFile.java", "commit_date": "2017-11-09 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Set the Lexer to PATTERN or RANGE mode; Lexer interpret character two\n * different ways in parser or range modes.\n *\n * @param mode\n *            Lexer.PATTERN or Lexer.RANGE\n */\n", "func_signal": "public void setMode(int mode)", "code": "{\n    if (mode > 0 && mode < 3) {\n        this.mode = mode;\n    }\n\n    if (mode == TLexer.MODE_PATTERN) {\n        reread();\n    }\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Performs {@code res = a - b}. It is assumed the magnitude of a is not\n * less than the magnitude of b.\n */\n", "func_signal": "private static void subtract(int[] res, int[] a, int aSize, int[] b, int bSize)", "code": "{\n    // PRE: a[] >= b[]\n    int i;\n    long borrow = 0;\n\n    for (i = 0; i < bSize; i++) {\n        borrow += (a[i] & 0xFFFFFFFFL) - (b[i] & 0xFFFFFFFFL);\n        res[i] = (int) borrow;\n        borrow >>= 32; // -1 or 0\n    }\n    for (; i < aSize; i++) {\n        borrow += a[i] & 0xFFFFFFFFL;\n        res[i] = (int) borrow;\n        borrow >>= 32; // -1 or 0\n    }\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/math/TElementary.java", "commit_date": "2015-10-04 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Returns next character index to read and moves pointer to the next one.\n * If comments flag is on this method will skip comments and whitespaces.\n *\n * The following actions are equivalent if comments flag is off ch =\n * pattern[index++] == ch = pattern[nextIndex]\n *\n * @return next character index to read.\n */\n", "func_signal": "private int nextIndex()", "code": "{\n    prevNW = index;\n    if ((flags & TPattern.COMMENTS) != 0) {\n        skipComments();\n    } else {\n        index++;\n    }\n    return prevNW;\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Skips comments and whitespaces\n */\n", "func_signal": "private int skipComments()", "code": "{\n    int length = pattern.length - 2;\n    index++;\n    do {\n        while (index < length && Character.isWhitespace(pattern[index])) {\n            index++;\n        }\n        if (index < length && pattern[index] == '#') {\n            index++;\n            while (index < length && !isLineSeparator(pattern[index])) {\n                index++;\n            }\n        } else {\n            return index;\n        }\n    } while (true);\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Addss the value represented by {@code b} to the value represented by\n * {@code a}. It is assumed the magnitude of a is not less than the\n * magnitude of b.\n *\n * @return {@code a + b}\n */\n", "func_signal": "private static int[] add(int[] a, int aSize, int[] b, int bSize)", "code": "{\n    // PRE: a[] >= b[]\n    int[] res = new int[aSize + 1];\n    add(res, a, aSize, b, bSize);\n    return res;\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/math/TElementary.java", "commit_date": "2015-10-04 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Reread current character, may be require if previous token changes mode\n * to one with different character interpretation.\n *\n */\n", "func_signal": "private void reread()", "code": "{\n    lookAhead = ch;\n    lookAheadST = curST;\n    index = lookAheadToc;\n    lookAheadToc = curToc;\n    movePointer();\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Give string representation of this.\n *\n * @return - string representation.\n */\n", "func_signal": "private String getDecomposedChar()", "code": "{\n    if (decomposedCharUTF16 == null) {\n        decomposedCharUTF16 = new String(decomposedChar);\n    }\n    return decomposedCharUTF16;\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/THangulDecomposedCharSet.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "//@Test\n// TODO: fix and uncomment\n", "func_signal": "public void readException() throws IOException", "code": "{\n    pis = new PipedInputStream();\n    pos = new PipedOutputStream();\n\n    try {\n        pis.connect(pos);\n        pw = new PWriter(pos, 1000);\n        t = new Thread(pw);\n        t.start();\n        assertTrue(t.isAlive());\n        while (true) {\n            pis.read();\n            t.interrupt();\n        }\n    } catch (IOException e) {\n        if (!e.getMessage().contains(\"Write end dead\")) {\n            throw e;\n        }\n    } finally {\n        try {\n            pis.close();\n            pos.close();\n        } catch (IOException ee) {\n            // Do nothing\n        }\n    }\n}", "path": "teavm/tests/src/test/java/org/teavm/classlib/java/io/PipedInputStreamTest.java", "commit_date": "2017-11-16 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Process octal integer.\n */\n", "func_signal": "private int readOctals()", "code": "{\n    int max = 3;\n    int i = 1;\n    int first;\n    int res;\n    int length = pattern.length - 2;\n\n    first = Character.digit(pattern[index], 8);\n    switch (first) {\n        case -1:\n            throw new TPatternSyntaxException(\"\", this.toString(), index);\n        default: {\n            if (first > 3) {\n                max--;\n            }\n            nextIndex();\n            res = first;\n        }\n    }\n\n    while (i < max && index < length) {\n        first = Character.digit(pattern[index], 8);\n        if (first < 0) {\n            break;\n        }\n        res = res * 8 + first;\n        nextIndex();\n        i++;\n    }\n\n    return res;\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/*\n * Tests entrySet().contains() method behaviour with respect to entries\n * with null values.\n * Regression test for HARMONY-5788.\n */\n", "func_signal": "@Test\npublic void test_entrySet_contains() throws Exception", "code": "{\n    TreeMap<String, String> master = new TreeMap<>();\n    TreeMap<String, String> testMap = new TreeMap<>();\n\n    master.put(\"null\", null);\n    Object[] entry = master.entrySet().toArray();\n    assertFalse(\"Empty map should not contain the null-valued entry\",\n            testMap.entrySet().contains(entry[0]));\n\n    Map<String, String> submap = testMap.subMap(\"a\", \"z\");\n    entry = master.entrySet().toArray();\n    assertFalse(\"Empty submap should not contain the null-valued entry\",\n            submap.entrySet().contains(entry[0]));\n\n    testMap.put(\"null\", null);\n    assertTrue(\"entrySet().containsAll(...) should work with null values\",\n            testMap.entrySet().containsAll(master.entrySet()));\n\n    master.clear();\n    master.put(\"null\", \"0\");\n    entry = master.entrySet().toArray();\n    assertFalse(\"Null-valued entry should not equal non-null-valued entry\",\n            testMap.entrySet().contains(entry[0]));\n}", "path": "teavm/tests/src/test/java/org/teavm/classlib/java/util/TreeMapTest.java", "commit_date": "2020-02-27 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Compares two arrays, representing unsigned integer in little-endian\n * order. Returns +1,0,-1 if a is - respective - greater, equal or lesser\n * then b\n */\n", "func_signal": "private static int unsignedArraysCompare(int[] a, int[] b, int aSize, int bSize)", "code": "{\n    if (aSize > bSize) {\n        return 1;\n    } else if (aSize < bSize) {\n        return -1;\n    } else {\n        int i;\n        for (i = aSize - 1; i >= 0 && a[i] == b[i]; i--) {\n            // do nothing\n        }\n        return i < 0 ? TBigInteger.EQUALS : ((a[i] & 0xFFFFFFFFL) < (b[i] & 0xFFFFFFFFL) ? TBigInteger.LESS\n                : TBigInteger.GREATER);\n    }\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/math/TElementary.java", "commit_date": "2015-10-04 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * Restores flags for Lexer\n *\n * @param flags\n */\n", "func_signal": "public void restoreFlags(int flags)", "code": "{\n    this.flags = flags;\n    lookAhead = ch;\n    lookAheadST = curST;\n\n    // curToc is an index of closing bracket )\n    index = curToc + 1;\n    lookAheadToc = curToc;\n    movePointer();\n}", "path": "teavm/classlib/src/main/java/org/teavm/classlib/java/util/regex/TLexer.java", "commit_date": "2017-07-01 00:00:00", "repo_name": "konsoletyper/teavm", "stars": 2447, "license": "apache-2.0", "language": "java", "size": 109858}
{"docstring": "/**\n * \u4e3a\u81ea\u5b9a\u4e49\u7684DayView\u8bbe\u7f6e\u8d44\u6e90\u6587\u4ef6\n *\n * @param layoutResource \u8d44\u6e90\u6587\u4ef6\n * @return CalendarDate \u4fee\u6539\u540e\u7684\u65e5\u671f\n */\n", "func_signal": "private void setupLayoutResource(int layoutResource)", "code": "{\n    View inflated = LayoutInflater.from(getContext()).inflate(layoutResource, this);\n    inflated.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED),\n            MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));\n    inflated.layout(0, 0, getMeasuredWidth(), getMeasuredHeight());\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/view/DayView.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u5f97\u5230\u79cd\u5b50\u65e5\u671f\u6240\u5728\u5468\u7684\u5468\u65e5\n *\n * @param seedDate \u79cd\u5b50\u65e5\u671f\n * @return CalendarDate \u6240\u5728\u5468\u5468\u65e5\n */\n", "func_signal": "public static CalendarDate getSunday(CalendarDate seedDate)", "code": "{// TODO: 16/12/12 \u5f97\u5230\u4e00\u4e2aCustomDate\u5bf9\u8c61\n    Calendar c = Calendar.getInstance();\n    String dateString = seedDate.toString();\n    Date date = new Date();\n    try {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-M-d\");\n        date = sdf.parse(dateString);\n    } catch (ParseException e) {\n        System.out.println(e.getMessage());\n    }\n    c.setTime(date);\n    if (c.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {\n        c.add(Calendar.DAY_OF_MONTH, 7 - c.get(Calendar.DAY_OF_WEEK) + 1);\n    }\n    return new CalendarDate(c.get(Calendar.YEAR),\n            c.get(Calendar.MONTH) + 1,\n            c.get(Calendar.DAY_OF_MONTH));\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u6784\u9020\u5668\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param layoutResource \u81ea\u5b9a\u4e49DayView\u7684layout\u8d44\u6e90\n */\n", "func_signal": "public CustomDayView(Context context, int layoutResource)", "code": "{\n    super(context, layoutResource);\n    dateTv = (TextView) findViewById(R.id.date);\n    marker = (ImageView) findViewById(R.id.maker);\n    selectedBackground = findViewById(R.id.selected_background);\n    todayBackground = findViewById(R.id.today_background);\n}", "path": "SuperCalendar/example/src/main/java/com/hqyxjy/ldf/supercalendar/CustomDayView.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u8ba1\u7b97\u504f\u79fb\u8ddd\u79bb\n *\n * @param offset \u504f\u79fb\u503c\n * @param min    \u6700\u5c0f\u504f\u79fb\u503c\n * @param max    \u6700\u5927\u504f\u79fb\u503c\n * @return int offset\n */\n", "func_signal": "private static int calcOffset(int offset, int min, int max)", "code": "{\n    if (offset > max) {\n        return max;\n    } else if (offset < min) {\n        return min;\n    } else {\n        return offset;\n    }\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u901a\u8fc7scrollTo\u65b9\u6cd5\u5b8c\u6210\u534f\u8c03\u5e03\u5c40\u7684\u6ed1\u52a8\uff0c\u5176\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86ViewCompat.postOnAnimation\n *\n * @param parent   \u534f\u8c03\u5e03\u5c40parent\n * @param child    \u534f\u8c03\u5e03\u5c40\u534f\u8c03\u6ed1\u52a8\u7684child\n * @param y        \u6ed1\u52a8\u76ee\u6807\u4f4d\u7f6ey\u8f74\u6570\u503c\n * @param duration \u6ed1\u52a8\u6267\u884c\u65f6\u95f4\n * @return void\n */\n", "func_signal": "public static void scrollTo(final CoordinatorLayout parent, final RecyclerView child, final int y, int duration)", "code": "{\n    final Scroller scroller = new Scroller(parent.getContext());\n    scroller.startScroll(0, top, 0, y - top, duration);   //\u8bbe\u7f6escroller\u7684\u6eda\u52a8\u504f\u79fb\u91cf\n    ViewCompat.postOnAnimation(child, new Runnable() {\n        @Override\n        public void run() {\n            //\u8fd4\u56de\u503c\u4e3aboolean\uff0ctrue\u8bf4\u660e\u6eda\u52a8\u5c1a\u672a\u5b8c\u6210\uff0cfalse\u8bf4\u660e\u6eda\u52a8\u5df2\u7ecf\u5b8c\u6210\u3002\n            // \u8fd9\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u65b9\u6cd5\uff0c\u901a\u5e38\u653e\u5728View.computeScroll()\u4e2d\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u6eda\u52a8\u662f\u5426\u7ed3\u675f\u3002\n            if (scroller.computeScrollOffset()) {\n                int delta = scroller.getCurrY() - child.getTop();\n                child.offsetTopAndBottom(delta);\n                saveTop(child.getTop());\n                parent.dispatchDependentViewsChanged(child);\n                ViewCompat.postOnAnimation(child, this);\n            }\n        }\n    });\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u5220\u9664\u65b9\u6cd5, \u8fd9\u91cc\u53ea\u4f1a\u5220\u9664\u67d0\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u4f20\u5165\u7684directory\u662f\u4e2a\u6587\u4ef6\uff0c\u5c06\u4e0d\u505a\u5904\u7406\n *\n * @param child     \u9700\u8981\u79fb\u52a8\u7684View\n * @param dy        \u5b9e\u9645\u504f\u79fb\u91cf\n * @param minOffset \u6700\u5c0f\u504f\u79fb\u91cf\n * @param maxOffset \u6700\u5927\u504f\u79fb\u91cf\n * @return void\n */\n", "func_signal": "public static int scroll(View child, int dy, int minOffset, int maxOffset)", "code": "{\n    final int initOffset = child.getTop();\n    int offset = calcOffset(initOffset - dy, minOffset, maxOffset) - initOffset;\n    child.offsetTopAndBottom(offset);\n    return -offset;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u8ba1\u7b97\u53c2\u6570\u65e5\u671f\u6708\u4e0e\u5f53\u524d\u6708\u76f8\u5dee\u7684\u6708\u4efd\u6570\n *\n * @param year        \u53c2\u6570\u65e5\u671f\u6240\u5728\u5e74\n * @param month       \u53c2\u6570\u65e5\u671f\u6240\u5728\u6708\n * @param currentDate \u5f53\u524d\u6708\n * @return int offset \u76f8\u5dee\u6708\u4efd\u6570\n */\n", "func_signal": "public static int calculateMonthOffset(int year, int month, CalendarDate currentDate)", "code": "{\n    int currentYear = currentDate.getYear();\n    int currentMonth = currentDate.getMonth();\n    int offset = (year - currentYear) * 12 + (month - currentMonth);\n    return offset;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u70b9\u51fb\u67d0\u4e00\u5929\u65f6\u5237\u65b0\u8fd9\u4e00\u5929\u7684\u72b6\u6001\n *\n * @return void\n */\n", "func_signal": "public void onClickDate(int col, int row)", "code": "{\n    if (col >= Const.TOTAL_COL || row >= Const.TOTAL_ROW)\n        return;\n    if (weeks[row] != null) {\n        if (attr.getCalendarType() == CalendarAttr.CalendarType.MONTH) {\n            if (weeks[row].days[col].getState() == State.CURRENT_MONTH) {\n                weeks[row].days[col].setState(State.SELECT);\n                selectedDate = weeks[row].days[col].getDate();\n                CalendarViewAdapter.saveSelectedDate(selectedDate);\n                onSelectDateListener.onSelectDate(selectedDate);\n                seedDate = selectedDate;\n            } else if (weeks[row].days[col].getState() == State.PAST_MONTH) {\n                selectedDate = weeks[row].days[col].getDate();\n                CalendarViewAdapter.saveSelectedDate(selectedDate);\n                onSelectDateListener.onSelectOtherMonth(-1);\n                onSelectDateListener.onSelectDate(selectedDate);\n            } else if (weeks[row].days[col].getState() == State.NEXT_MONTH) {\n                selectedDate = weeks[row].days[col].getDate();\n                CalendarViewAdapter.saveSelectedDate(selectedDate);\n                onSelectDateListener.onSelectOtherMonth(1);\n                onSelectDateListener.onSelectDate(selectedDate);\n            }\n        } else {\n            weeks[row].days[col].setState(State.SELECT);\n            selectedDate = weeks[row].days[col].getDate();\n            CalendarViewAdapter.saveSelectedDate(selectedDate);\n            onSelectDateListener.onSelectDate(selectedDate);\n            seedDate = selectedDate;\n        }\n    }\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/component/CalendarRenderer.java", "commit_date": "2018-01-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u5c06yyyy-MM-dd\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684Date\u5bf9\u8c61\n *\n * @param year  \u5f53\u524d\u5e74\n * @param month \u5f53\u524d\u6708\n * @return Date  \u5bf9\u5e94\u7684Date\u5bf9\u8c61\n */\n", "func_signal": "@SuppressLint(\"SimpleDateFormat\")\npublic static Date getDateFromString(int year, int month)", "code": "{\n    String dateString = year + \"-\" + (month > 9 ? month : (\"0\" + month)) + \"-01\";\n    Date date = new Date();\n    try {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        date = sdf.parse(dateString);\n    } catch (ParseException e) {\n        System.out.println(e.getMessage());\n    }\n    return date;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u5f97\u5230\u5f53\u524d\u6708\u7b2c\u4e00\u5929\u5728\u5176\u5468\u7684\u4f4d\u7f6e\n *\n * @param year  \u5f53\u524d\u5e74\n * @param month \u5f53\u524d\u6708\n * @param type  \u5468\u6392\u5217\u65b9\u5f0f 0\u4ee3\u8868\u5468\u4e00\u4f5c\u4e3a\u672c\u5468\u7684\u7b2c\u4e00\u5929\uff0c 2\u4ee3\u8868\u5468\u65e5\u4f5c\u4e3a\u672c\u5468\u7684\u7b2c\u4e00\u5929\n * @return int \u672c\u6708\u7b2c\u4e00\u5929\u5728\u5176\u5468\u7684\u4f4d\u7f6e\n */\n", "func_signal": "public static int getFirstDayWeekPosition(int year, int month, CalendarAttr.WeekArrayType type)", "code": "{\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(getDateFromString(year, month));\n    int week_index = cal.get(Calendar.DAY_OF_WEEK) - 1;\n    if (type == CalendarAttr.WeekArrayType.Sunday) {\n        return week_index;\n    } else {\n        week_index = cal.get(Calendar.DAY_OF_WEEK) + 5;\n        if (week_index >= 7) {\n            week_index -= 7;\n        }\n    }\n    return week_index;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u4e3a\u6bcf\u4e00\u4e2aCalendar\u5b9e\u4f8b\u8bbe\u7f6erenderer\u5bf9\u8c61\n *\n * @return void\n */\n", "func_signal": "public void setCustomDayRenderer(IDayRenderer dayRenderer)", "code": "{\n    Calendar c0 = calendars.get(0);\n    c0.setDayRenderer(dayRenderer);\n\n    Calendar c1 = calendars.get(1);\n    c1.setDayRenderer(dayRenderer.copy());\n\n    Calendar c2 = calendars.get(2);\n    c2.setDayRenderer(dayRenderer.copy());\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/component/CalendarViewAdapter.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u586b\u5145\u6708\u6570\u636e\n *\n * @return void\n */\n", "func_signal": "private void instantiateMonth()", "code": "{\n    int lastMonthDays = Utils.getMonthDays(seedDate.year, seedDate.month - 1);    // \u4e0a\u4e2a\u6708\u7684\u5929\u6570\n    int currentMonthDays = Utils.getMonthDays(seedDate.year, seedDate.month);    // \u5f53\u524d\u6708\u7684\u5929\u6570\n    int firstDayPosition = Utils.getFirstDayWeekPosition(\n            seedDate.year,\n            seedDate.month,\n            attr.getWeekArrayType());\n    Log.e(\"ldf\",\"firstDayPosition = \" + firstDayPosition);\n\n    int day = 0;\n    for (int row = 0; row < Const.TOTAL_ROW; row++) {\n        day = fillWeek(lastMonthDays, currentMonthDays, firstDayPosition, day, row);\n    }\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/component/CalendarRenderer.java", "commit_date": "2018-01-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u901a\u8fc7\u4fee\u6539\u5f53\u524dDate\u5bf9\u8c61\u7684\u5929\u6570\u8fd4\u56de\u4e00\u4e2a\u4fee\u6539\u540e\u7684Date\n *\n * @return CalendarDate \u4fee\u6539\u540e\u7684\u65e5\u671f\n */\n", "func_signal": "public CalendarDate modifyDay(int day)", "code": "{\n    int lastMonthDays = Utils.getMonthDays(this.year, this.month - 1);\n    int currentMonthDays = Utils.getMonthDays(this.year, this.month);\n\n    CalendarDate modifyDate;\n    if (day > currentMonthDays) {\n        modifyDate = new CalendarDate(this.year, this.month, this.day);\n        Log.e(\"ldf\", \"\u79fb\u52a8\u5929\u6570\u8fc7\u5927\");\n    } else if (day > 0) {\n        modifyDate = new CalendarDate(this.year, this.month, day);\n    } else if (day > 0 - lastMonthDays) {\n        modifyDate = new CalendarDate(this.year, this.month - 1, lastMonthDays + day);\n    } else {\n        modifyDate = new CalendarDate(this.year, this.month, this.day);\n        Log.e(\"ldf\", \"\u79fb\u52a8\u5929\u6570\u8fc7\u5927\");\n    }\n    return modifyDate;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/model/CalendarDate.java", "commit_date": "2017-07-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u6784\u9020\u5668 \u4f20\u5165\u8d44\u6e90\u6587\u4ef6\u521b\u5efaDayView\n *\n * @param layoutResource \u8d44\u6e90\u6587\u4ef6\n * @param context \u4e0a\u4e0b\u6587\n */\n", "func_signal": "public DayView(Context context, int layoutResource)", "code": "{\n    super(context);\n    setupLayoutResource(layoutResource);\n    this.context = context;\n    this.layoutResource = layoutResource;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/view/DayView.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u4f7f\u7528dayRenderer\u7ed8\u5236\u6bcf\u4e00\u5929\n *\n * @return void\n */\n", "func_signal": "public void draw(Canvas canvas)", "code": "{\n    for (int row = 0; row < Const.TOTAL_ROW; row++) {\n        if (weeks[row] != null) {\n            for (int col = 0; col < Const.TOTAL_COL; col++) {\n                if (weeks[row].days[col] != null) {\n                    dayRenderer.drawDay(canvas, weeks[row].days[col]);\n                }\n            }\n        }\n    }\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/component/CalendarRenderer.java", "commit_date": "2018-01-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u6839\u636e\u79cd\u5b50\u65e5\u671f\u5b75\u5316\u51fa\u672c\u65e5\u5386\u724c\u7684\u6570\u636e\n *\n * @return void\n */\n", "func_signal": "public void showDate(CalendarDate seedDate)", "code": "{\n    if (seedDate != null) {\n        this.seedDate = seedDate;\n    } else {\n        this.seedDate = new CalendarDate();\n    }\n    update();\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/component/CalendarRenderer.java", "commit_date": "2018-01-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u5237\u65b0\u6307\u5b9a\u884c\u7684\u5468\u6570\u636e\n *\n * @param rowIndex  \u53c2\u6570\u6708\u6240\u5728\u5e74\n * @return void\n */\n", "func_signal": "public void updateWeek(int rowIndex)", "code": "{\n    CalendarDate currentWeekLastDay;\n    if (attr.getWeekArrayType() == CalendarAttr.WeekArrayType.Sunday) {\n        currentWeekLastDay = Utils.getSaturday(seedDate);\n    } else {\n        currentWeekLastDay = Utils.getSunday(seedDate);\n    }\n    int day = currentWeekLastDay.day;\n    for (int i = Const.TOTAL_COL - 1; i >= 0; i--) {\n        CalendarDate date = currentWeekLastDay.modifyDay(day);\n        if (weeks[rowIndex] == null) {\n            weeks[rowIndex] = new Week(rowIndex);\n        }\n        if (weeks[rowIndex].days[i] != null) {\n            if (date.equals(CalendarViewAdapter.loadSelectedDate())) {\n                weeks[rowIndex].days[i].setState(State.SELECT);\n                weeks[rowIndex].days[i].setDate(date);\n            } else {\n                weeks[rowIndex].days[i].setState(State.CURRENT_MONTH);\n                weeks[rowIndex].days[i].setDate(date);\n            }\n        } else {\n            if (date.equals(CalendarViewAdapter.loadSelectedDate())) {\n                weeks[rowIndex].days[i] = new Day(State.SELECT, date, rowIndex, i);\n            } else {\n                weeks[rowIndex].days[i] = new Day(State.CURRENT_MONTH, date, rowIndex, i);\n            }\n        }\n        day--;\n    }\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/component/CalendarRenderer.java", "commit_date": "2018-01-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u5f97\u5230\u79cd\u5b50\u65e5\u671f\u6240\u5728\u5468\u7684\u5468\u516d\n *\n * @param seedDate \u79cd\u5b50\u65e5\u671f\n * @return CalendarDate \u6240\u5728\u5468\u5468\u516d\n */\n", "func_signal": "public static CalendarDate getSaturday(CalendarDate seedDate)", "code": "{// TODO: 16/12/12 \u5f97\u5230\u4e00\u4e2aCustomDate\u5bf9\u8c61\n    Calendar c = Calendar.getInstance();\n    String dateString = seedDate.toString();\n    Date date = null;\n    try {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-M-d\");\n        date = sdf.parse(dateString);\n    } catch (ParseException e) {\n        System.out.println(e.getMessage());\n    }\n    c.setTime(date);\n    c.add(Calendar.DAY_OF_MONTH, 7 - c.get(Calendar.DAY_OF_WEEK));\n    return new CalendarDate(c.get(Calendar.YEAR),\n            c.get(Calendar.MONTH) + 1,\n            c.get(Calendar.DAY_OF_MONTH));\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/Utils.java", "commit_date": "2018-03-01 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u901a\u8fc7\u4fee\u6539\u5f53\u524dDate\u5bf9\u8c61\u7684\u6240\u5728\u5468\u8fd4\u56de\u4e00\u4e2a\u4fee\u6539\u540e\u7684Date\n *\n * @return CalendarDate \u4fee\u6539\u540e\u7684\u65e5\u671f\n */\n", "func_signal": "public CalendarDate modifyWeek(int offset)", "code": "{\n    CalendarDate result = new CalendarDate();\n    Calendar c = Calendar.getInstance();\n    c.set(Calendar.YEAR, year);\n    c.set(Calendar.MONTH, month - 1);\n    c.set(Calendar.DAY_OF_MONTH, day);\n    c.add(Calendar.DATE, offset * 7);\n    result.setYear(c.get(Calendar.YEAR));\n    result.setMonth(c.get(Calendar.MONTH) + 1);\n    result.setDay(c.get(Calendar.DATE));\n    return result;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/model/CalendarDate.java", "commit_date": "2017-07-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u901a\u8fc7\u4fee\u6539\u5f53\u524dDate\u5bf9\u8c61\u7684\u6240\u5728\u6708\u8fd4\u56de\u4e00\u4e2a\u4fee\u6539\u540e\u7684Date\n *\n * @return CalendarDate \u4fee\u6539\u540e\u7684\u65e5\u671f\n */\n", "func_signal": "public CalendarDate modifyMonth(int offset)", "code": "{\n    CalendarDate result = new CalendarDate();\n    int addToMonth = this.month + offset;\n    if (offset > 0) {\n        if (addToMonth > 12) {\n            result.setYear(this.year + (addToMonth - 1) / 12);\n            result.setMonth(addToMonth % 12 == 0 ? 12 : addToMonth % 12);\n        } else {\n            result.setYear(this.year);\n            result.setMonth(addToMonth);\n        }\n    } else {\n        if (addToMonth == 0) {\n            result.setYear(this.year - 1);\n            result.setMonth(12);\n        } else if (addToMonth < 0) {\n            result.setYear(this.year + addToMonth / 12 - 1);\n            int month = 12 - Math.abs(addToMonth) % 12;\n            result.setMonth(month == 0 ? 12 : month);\n        } else {\n            result.setYear(this.year);\n            result.setMonth(addToMonth == 0 ? 12 : addToMonth);\n        }\n    }\n    return result;\n}", "path": "SuperCalendar/calendar/src/main/java/com/ldf/calendar/model/CalendarDate.java", "commit_date": "2017-07-30 00:00:00", "repo_name": "MagicMashRoom/SuperCalendar", "stars": 2758, "license": "None", "language": "java", "size": 2154}
{"docstring": "/**\n * \u5c06\u4e00\u4e2aint\u8f6c\u6362\u6210\u5b57\u8282\u6570\u7ec4\n * @param in int\n * @return \u5b57\u8282\u6570\u7ec4\n */\n", "func_signal": "public static byte[] valueOf(int in)", "code": "{\n\tbyte[] b = new byte[4];\n    for (int i = 0; i < 4; i++) {\n    \tint offset = (b.length - 1 - i) * 8;\n    \tb[i] = (byte) ((in >>> offset) & 0xFF);\n    }\n    return b;\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n *\u62cd\u7167\u6253\u5f00\u7167\u76f8\u673a\uff01\n * @param requestcode   \u8fd4\u56de\u503c\n * @param activity   \u4e0a\u4e0b\u6587\n * @param fileName    \u751f\u6210\u7684\u56fe\u7247\u6587\u4ef6\u7684\u8def\u5f84\n */\n", "func_signal": "public static void toTakePhoto(int requestcode, Activity activity, String fileName)", "code": "{\n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    intent.putExtra(\"camerasensortype\", 2);// \u8c03\u7528\u524d\u7f6e\u6444\u50cf\u5934\n    intent.putExtra(\"autofocus\", true);// \u81ea\u52a8\u5bf9\u7126\n    intent.putExtra(\"fullScreen\", false);// \u5168\u5c4f\n    intent.putExtra(\"showActionIcons\", false);\n    try {//\u521b\u5efa\u4e00\u4e2a\u5f53\u524d\u4efb\u52a1id\u7684\u6587\u4ef6\u7136\u540e\u91cc\u9762\u5b58\u653e\u4efb\u52a1\u7684\u7167\u7247\u7684\u548c\u8def\u5f84\uff01\u8fd9\u4e3b\u6587\u4ef6\u7684\u540d\u5b57\u662f\u7528uuid\u5230\u65f6\u5019\u5728\u7528\u4efb\u52a1id\u53bb\u67e5\u8def\u5f84\uff01\n        File file = new File(fileName);\n        Uri uri = Uri.fromFile(file);\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n        activity.startActivityForResult(intent, requestcode);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/PhoneUtil.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u6839\u636e/system/bin/\u6216/system/xbin\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728su\u6587\u4ef6\u5224\u65ad\u662f\u5426\u5df2ROOT\n * @return true\uff1a\u5df2ROOT\n */\n", "func_signal": "public static boolean isRoot()", "code": "{\n    try {\n        return new File(\"/system/bin/su\").exists() || new File(\"/system/xbin/su\").exists();\n    } catch (Exception e) {\n        return false;\n    }\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/OSUtils.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u8c03\u7528\u7cfb\u7edf\u53d1\u77ed\u4fe1\u754c\u9762\n *\n * @param activity    Activity\n * @param phoneNumber \u624b\u673a\u53f7\u7801\n * @param smsContent  \u77ed\u4fe1\u5185\u5bb9\n */\n", "func_signal": "public static void sendMessage(Context activity, String phoneNumber, String smsContent)", "code": "{\n    if (phoneNumber == null || phoneNumber.length() < 4) {\n        return;\n    }\n    Uri uri = Uri.parse(\"smsto:\" + phoneNumber);\n    Intent it = new Intent(Intent.ACTION_SENDTO, uri);\n    it.putExtra(\"sms_body\", smsContent);\n    it.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    activity.startActivity(it);\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/PhoneUtil.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u8f6c\u6570\u7ec4\n * @param str\n * @return\n */\n", "func_signal": "public static byte[] hexStrToByteArray(String str)", "code": "{\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tif (str.length() == 0) {\n\t\treturn new byte[0];\n\t}\n\tbyte[] byteArray = new byte[str.length() / 2];\n\tfor (int i = 0; i < byteArray.length; i++){\n\t\tString subStr = str.substring(2 * i, 2 * i + 2);\n\t\tbyteArray[i] = ((byte)Integer.parseInt(subStr, 16));\n\t}\n\treturn byteArray;\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * (02)\u3001\u4ecebytes\u4e0a\u622a\u53d6\u4e00\u6bb5\n * @param bytes \u6bcd\u4f53\n * @param off \u8d77\u59cb\n * @param length \u4e2a\u6570\n * @return byte[]\n */\n", "func_signal": "public static byte[] cutOut(byte[] bytes, int off, int length)", "code": "{\n\tbyte[] bytess = new byte[length];\n\tSystem.arraycopy(bytes, off, bytess, 0, length);\n\treturn bytess;\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u83b7\u53d6\u624b\u673a\u54c1\u724c\n *\n * @param context  \u4e0a\u4e0b\u6587\n * @return  String\n */\n", "func_signal": "public static String getMobileBrand(Context context)", "code": "{\n    try {\n        String brand = android.os.Build.BRAND; // android\u7cfb\u7edf\u7248\u672c\u53f7\n        return brand;\n    } catch (Exception e) {\n        return \"\u672a\u77e5\";\n    }\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/PhoneUtil.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * (01)\u3001\u4f4d\u79fb\u52a0\u5bc6\n * @param bytes\n */\n", "func_signal": "public static void byteJiaMi(byte[] bytes)", "code": "{\n\tfor (int w = 0; w < bytes.length; w++){\n\t\tint a = bytes[w];\n\t\ta = ~a;\n\t\tbytes[w] = (byte)a;\n\t}\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u621016\u8fdb\u5236\u5b57\u7b26\u4e32\n * @param raw\n * @return\n */\n", "func_signal": "public static String getHex(byte [] raw )", "code": "{\n\tString HEXES = \"0123456789ABCDEF\";\n    if ( raw == null ) {\n      return null;\n    }\n    final StringBuilder hex = new StringBuilder( 2 * raw.length );\n    for ( final byte b : raw ) {\n      hex.append(HEXES.charAt((b & 0xF0) >> 4))\n         .append(HEXES.charAt((b & 0x0F)));\n    }\n    return hex.toString();\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5207\u6362\u8f6f\u952e\u76d8\u7684\u72b6\u6001\n */\n", "func_signal": "public static void toggleSoftKeyboardState(Context context)", "code": "{\n    ((InputMethodManager) context.getSystemService(\n            Context.INPUT_METHOD_SERVICE)).toggleSoftInput(\n            InputMethodManager.SHOW_IMPLICIT,\n            InputMethodManager.HIDE_NOT_ALWAYS);\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/InputMethodUtils.java", "commit_date": "2017-03-15 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u4ece\u4e00\u4e2abyte[]\u6570\u7ec4\u4e2d\u622a\u53d6\u4e00\u90e8\u5206\n * @param src\n * @param begin\n * @param count\n * @return\n */\n", "func_signal": "public static byte[] subBytes ( byte[] src, int begin, int count)", "code": "{\n\tbyte[] bs = new byte[count];\n\tfor (int i = begin; i < begin + count; i++) {\n\t\tbs[i - begin] = src[i];\n\t}\n\treturn bs;\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5c06\u5b57\u8282\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n * @param bytes \u5b57\u8282\u6570\u7ec4\n * @return \u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String byteToBit(byte... bytes)", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\tint z, len;\n\tString str;\n\tfor(int w = 0; w < bytes.length ; w++){\n\t\tz = bytes[w]; \n\t\tz |= 256;\n\t\tstr = Integer.toBinaryString(z);\n\t\tlen = str.length(); \n\t\tsb.append(str.substring(len-8, len));\n\t}\n\treturn sb.toString();\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u83b7\u53d6\u6240\u6709\u8054\u7cfb\u4eba\u7684\u59d3\u540d\u548c\u7535\u8bdd\u53f7\u7801\uff0c\u9700\u8981READ_CONTACTS\u6743\u9650\n * @param context \u4e0a\u4e0b\u6587\n * @return Cursor\u3002\u59d3\u540d\uff1aCommonDataKinds.Phone.DISPLAY_NAME\uff1b\u53f7\u7801\uff1aCommonDataKinds.Phone.NUMBER\n */\n", "func_signal": "public static Cursor getContactsNameAndNumber(Context context)", "code": "{\n    return context.getContentResolver().query(\n            ContactsContract.CommonDataKinds.Phone.CONTENT_URI, new String[] {\n                    ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME, ContactsContract.CommonDataKinds.Phone.NUMBER}, null, null, ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME + \" COLLATE LOCALIZED ASC\");\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/PhoneUtil.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u4e3a\u7ed9\u5b9a\u7684\u7f16\u8f91\u5668\u5f00\u542f\u8f6f\u952e\u76d8\n *\n * @param editText \u7ed9\u5b9a\u7684\u7f16\u8f91\u5668\n */\n", "func_signal": "public static void openSoftKeyboard(Context context, EditText editText)", "code": "{\n    editText.requestFocus();\n    InputMethodManager inputMethodManager\n            = (InputMethodManager) context.getSystemService(\n            Context.INPUT_METHOD_SERVICE);\n    inputMethodManager.showSoftInput(editText,\n            InputMethodManager.SHOW_IMPLICIT);\n    ViewUtils.setEditTextSelectionToEnd(editText);\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/InputMethodUtils.java", "commit_date": "2017-03-15 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n *\u6253\u5f00\u76f8\u518c\n * @param requestcode  \u54cd\u5e94\u7801\n * @param activity  \u4e0a\u4e0b\u6587\n */\n", "func_signal": "public static void toTakePicture(int requestcode, Activity activity)", "code": "{\n    Intent intent = new Intent(Intent.ACTION_PICK, null);\n    intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n            \"image/*\");\n    activity.startActivityForResult(intent, requestcode);\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/PhoneUtil.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5c06\u4e00\u4e2ashort\u8f6c\u6362\u6210\u5b57\u8282\u6570\u7ec4\n * @param sh short\n * @return \u5b57\u8282\u6570\u7ec4\n */\n", "func_signal": "public static byte[] valueOf(short sh)", "code": "{\n\tbyte[] shortBuf = new byte[2];\n\tfor(int i=0;i<2;i++) {\n\t\tint offset = (shortBuf.length - 1 -i)*8;\n\t\tshortBuf[i] = (byte)((sh>>>offset)&0xff);\n\t}\n\treturn shortBuf;\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/ByteUtils.java", "commit_date": "2017-03-13 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5224\u65ad\u9690\u85cf\u8f6f\u952e\u76d8\u662f\u5426\u5f39\u51fa,\u5f39\u51fa\u5c31\u9690\u85cf\n * @param mActivity\n * @return\n */\n", "func_signal": "public boolean keyBoxIsShow(Activity mActivity)", "code": "{\n    if (mActivity.getWindow().getAttributes().softInputMode == WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) {\n        //\u9690\u85cf\u8f6f\u952e\u76d8\n        mActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);\n        return true;\n    }\n    else {\n        return false;\n    }\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/InputMethodUtils.java", "commit_date": "2017-03-15 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u4e3a\u8fde\u51fb\n *\n * @return  boolean\n */\n", "func_signal": "public static boolean isFastDoubleClick()", "code": "{\n    long time = System.currentTimeMillis();\n    long timeD = time - lastClickTime;\n    if (0 < timeD && timeD < 500) {\n        return true;\n    }\n    lastClickTime = time;\n    return false;\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/PhoneUtil.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u83b7\u53d6\u624b\u673a\u578b\u53f7\n *\n * @param context  \u4e0a\u4e0b\u6587\n * @return   String\n */\n", "func_signal": "public static String getMobileModel(Context context)", "code": "{\n    try {\n        String model = android.os.Build.MODEL; // \u624b\u673a\u578b\u53f7\n        return model;\n    } catch (Exception e) {\n        return \"\u672a\u77e5\";\n    }\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/PhoneUtil.java", "commit_date": "2016-01-21 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u5173\u95ed\u8f6f\u952e\u76d8\n */\n", "func_signal": "public static void closeSoftKeyboard(Activity activity)", "code": "{\n    //\u9690\u85cf\u8f6f\u952e\u76d8\n    View view = activity.getWindow().peekDecorView();\n    if (view != null) {\n        InputMethodManager inputmanger = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);\n        inputmanger.hideSoftInputFromWindow(view.getWindowToken(), 0);\n    }\n}", "path": "Lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/InputMethodUtils.java", "commit_date": "2017-03-15 00:00:00", "repo_name": "l123456789jy/Lazy", "stars": 2177, "license": "None", "language": "java", "size": 1285}
{"docstring": "/**\n * \u4ece\u4e00\u4e2a UU64 \u6062\u590d\u56de\u4e00\u4e2a UUID \u5bf9\u8c61\n * \n * @param uu64\n *            64\u8fdb\u5236\u8868\u793a\u7684 UUID, \u5185\u5bb9\u4e3a [\\\\-0-9a-zA-Z_]\n * @return UUID \u5bf9\u8c61\n */\n", "func_signal": "public static java.util.UUID fromUU64(String uu64)", "code": "{\n    String uu16 = UU16FromUU64(uu64);\n    return java.util.UUID.fromString(UU(uu16));\n}", "path": "my-site/src/main/java/cn/luischen/utils/UUID.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u8fd4\u56de\u6307\u5b9a\u957f\u5ea6\u968f\u673a\u6570\u5b57+\u5b57\u6bcd(\u5927\u5c0f\u5199\u654f\u611f)\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\n * \n * @param length\n *            \u6307\u5b9a\u957f\u5ea6\n * @param caseSensitivity\n *            \u662f\u5426\u533a\u5206\u5927\u5c0f\u5199\n * @return \u968f\u673a\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String captchaChar(int length, boolean caseSensitivity)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    Random rand = new Random();// \u968f\u673a\u7528\u4ee5\u4e0b\u4e09\u4e2a\u968f\u673a\u751f\u6210\u5668\n    Random randdata = new Random();\n    int data = 0;\n    for (int i = 0; i < length; i++) {\n        int index = rand.nextInt(caseSensitivity ? 3 : 2);\n        // \u76ee\u7684\u662f\u968f\u673a\u9009\u62e9\u751f\u6210\u6570\u5b57\uff0c\u5927\u5c0f\u5199\u5b57\u6bcd\n        switch (index) {\n        case 0:\n            data = randdata.nextInt(10);// \u4ec5\u4ec5\u4f1a\u751f\u62100~9, 0~9\u7684ASCII\u4e3a48~57\n            sb.append(data);\n            break;\n        case 1:\n            data = randdata.nextInt(26) + 97;// \u4fdd\u8bc1\u53ea\u4f1a\u4ea7\u751fASCII\u4e3a97~122(a-z)\u4e4b\u95f4\u7684\u6574\u6570,\n            sb.append((char) data);\n            break;\n        case 2: // caseSensitivity\u4e3atrue\u7684\u65f6\u5019, \u624d\u4f1a\u6709\u5927\u5199\u5b57\u6bcd\n            data = randdata.nextInt(26) + 65;// \u4fdd\u8bc1\u53ea\u4f1a\u4ea7\u751fASCII\u4e3a65~90(A~Z)\u4e4b\u95f4\u7684\u6574\u6570\n            sb.append((char) data);\n            break;\n        }\n    }\n    return sb.toString();\n}", "path": "my-site/src/main/java/cn/luischen/utils/UUID.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u8fd4\u56de\u6307\u5b9a\u957f\u5ea6\u968f\u673a\u6570\u5b57\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\n * \n * @param length\n *            \u6307\u5b9a\u957f\u5ea6\n * @return \u968f\u673a\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String captchaNumber(int length)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    Random rand = new Random();\n    for (int i = 0; i < length; i++) {\n        sb.append(rand.nextInt(10));\n    }\n    return sb.toString();\n}", "path": "my-site/src/main/java/cn/luischen/utils/UUID.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u82f1\u6587\u683c\u5f0f\u7684\u65e5\u671f\n * @param unixTime\n * @return\n */\n", "func_signal": "public static String fmtdate_en(Integer unixTime)", "code": "{\n    String fmtdate = fmtdate(unixTime, \"d,MMM,yyyy\");\n    String[] dateArr = fmtdate.split(\",\");\n    String rs = \"<span>\" + dateArr[0] + \"</span> \" + dateArr[1] + \"  \" + dateArr[2];\n    return rs;\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u683c\u5f0f\u5316unix\u65f6\u95f4\u6233\u4e3a\u65e5\u671f\n *\n * @param unixTime\n * @param patten\n * @return\n */\n", "func_signal": "public static String fmtdate(Integer unixTime, String patten)", "code": "{\n    if (null != unixTime && StringUtils.isNotBlank(patten)) {\n        return DateKit.formatDateByUnixTime(unixTime, patten);\n    }\n    return \"\";\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u8fd4\u56degithub\u5934\u50cf\u5730\u5740\n *\n * @param email\n * @return\n */\n", "func_signal": "public static String gravatar(String email)", "code": "{\n    String avatarUrl = \"https://github.com/identicons/\";\n    if (StringUtils.isBlank(email)) {\n        email = \"user@hanshuai.xin\";\n    }\n    String hash = TaleUtils.MD5encode(email.trim().toLowerCase());\n    return avatarUrl + hash + \".png\";\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u83b7\u53d6blog\u9875\u9762\u9700\u8981\u7684\u516c\u5171\u6570\u636e\n * @param request\n * @return\n */\n", "func_signal": "public BaseController blogBaseData(HttpServletRequest request, ContentCond contentCond)", "code": "{\n//        List<MetaDto> categories = metaService.getMetaList(Types.CATEGORY.getType(), null, WebConst.MAX_POSTS);\n//        List<MetaDto> tags = metaService.getMetaList(Types.TAG.getType(), null, WebConst.MAX_POSTS);\n    List<MetaDto> links = metaService.getMetaList(Types.LINK.getType(), null,WebConst.MAX_POSTS);\n//        request.setAttribute(\"categories\", categories);//\u5206\u7c7b\n//        request.setAttribute(\"tags\", tags);//\u6807\u7b7e\n    request.setAttribute(\"links\", links);\n//        PageInfo<ContentDomain> recentlyArticles = contentService.getRecentlyArticle(1, 10);\n//        ContentCond cond = new ContentCond();\n//        cond.setType(contentCond.getType());\n//        request.setAttribute(\"recentlyArticles\", recentlyArticles);\n//        List<ArchiveDto> archives = siteService.getArchivesSimple(cond);\n//        request.setAttribute(\"archives\", archives);//\u5f52\u6863\u6570\u636e\n\n    return this;\n}", "path": "my-site/src/main/java/cn/luischen/controller/BaseController.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u5c06\u7d27\u51d1\u683c\u5f0f\u7684 UU16 \u5b57\u7b26\u4e32\u53d8\u6210\u6807\u51c6 UUID \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n * \n * @param uu16\n * @return \u6807\u51c6 UUID \u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String UU(String uu16)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(uu16.substring(0, 8));\n    sb.append('-');\n    sb.append(uu16.substring(8, 12));\n    sb.append('-');\n    sb.append(uu16.substring(12, 16));\n    sb.append('-');\n    sb.append(uu16.substring(16, 20));\n    sb.append('-');\n    sb.append(uu16.substring(20));\n    return sb.toString();\n}", "path": "my-site/src/main/java/cn/luischen/utils/UUID.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u7f51\u7ad9\u914d\u7f6e\u9879\n *\n * @param key\n * @param defalutValue \u9ed8\u8ba4\u503c\n * @return\n */\n", "func_signal": "public static String site_option(String key, String defalutValue)", "code": "{\n    if (StringUtils.isBlank(key)) {\n        return \"\";\n    }\n    String str = WebConst.initConfig.get(key);\n    if (StringUtils.isNotBlank(str)) {\n        return str;\n    } else {\n        return defalutValue;\n    }\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u6587\u4ef6\u4e0a\u4f20\uff0c\u4e3a\u6587\u4ef6\u91cd\u65b0\u547d\u540d\n **/\n", "func_signal": "public static String getFileRename(String name)", "code": "{\n    Date date = new Date();\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\");\n    String sdfDate = sdf.format(date);\n    int pos = name.lastIndexOf(\".\");\n    String suffix = name.substring(pos);\n    String rename = sdfDate+suffix;\n    return rename;\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u83b7\u53d6\u793e\u4ea4\u7684\u94fe\u63a5\u5730\u5740\n *\n * @return\n */\n", "func_signal": "public static Map<String, String> social()", "code": "{\n    final String prefix = \"social_\";\n    Map<String, String> map = new HashMap<>();\n    map.put(\"csdn\", WebConst.initConfig.get(prefix + \"csdn\"));\n    map.put(\"jianshu\", WebConst.initConfig.get(prefix + \"jianshu\"));\n    map.put(\"resume\", WebConst.initConfig.get(prefix + \"resume\"));\n    map.put(\"weibo\", WebConst.initConfig.get(prefix + \"weibo\"));\n    map.put(\"zhihu\", WebConst.initConfig.get(prefix + \"zhihu\"));\n    map.put(\"github\", WebConst.initConfig.get(prefix + \"github\"));\n    map.put(\"twitter\", WebConst.initConfig.get(prefix + \"twitter\"));\n    return map;\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u663e\u793a\u6587\u7ae0\u5185\u5bb9\uff0c\u8f6c\u6362markdown\u4e3ahtml\n *\n * @param value\n * @return\n */\n", "func_signal": "public static String article(String value)", "code": "{\n    if (StringUtils.isNotBlank(value)) {\n        value = value.replace(\"<!--more-->\", \"\\r\\n\");\n        value = value.replace(\"<!-- more -->\", \"\\r\\n\");\n        return TaleUtils.mdToHtml(value);\n    }\n    return \"\";\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u7ae0\u7b2c\u4e00\u5f20\u56fe\u7247\n *\n * @return\n */\n", "func_signal": "public static String show_thumb(String content)", "code": "{\n    content = TaleUtils.mdToHtml(content);\n    if (content.contains(\"<img\")) {\n        String img = \"\";\n        String regEx_img = \"<img.*src\\\\s*=\\\\s*(.*?)[^>]*?>\";\n        Pattern p_image = Pattern.compile(regEx_img, Pattern.CASE_INSENSITIVE);\n        Matcher m_image = p_image.matcher(content);\n        if (m_image.find()) {\n            img = img + \",\" + m_image.group();\n            // //\u5339\u914dsrc\n            Matcher m = Pattern.compile(\"src\\\\s*=\\\\s*\\'?\\\"?(.*?)(\\'|\\\"|>|\\\\s+)\").matcher(img);\n            if (m.find()) {\n                return m.group(1);\n            }\n        }\n    }\n    return \"\";\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u5c06\u4e2d\u6587\u7684yyyy\u5e74MM\u6708 - > yyyy\n * @param date\n * @return\n */\n", "func_signal": "public static String parsedate_zh_y_m(String date)", "code": "{\n    if (StringUtils.isNotBlank(date)){\n        Date d = DateKit.dateFormat(date, \"yyyy\u5e74MM\u6708\");\n        return DateKit.dateFormat(d, \"yyyy\");\n    }\n    return null;\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u8fd4\u56de\u4e00\u4e2a UUID \uff0c\u5e76\u7528 64 \u8fdb\u5236\u8f6c\u6362\u6210\u7d27\u51d1\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u5185\u5bb9\u4e3a [\\\\-0-9a-zA-Z_]\n * <p>\n * \u6bd4\u5982\u4e00\u4e2a\u7c7b\u4f3c\u4e0b\u9762\u7684 UUID:\n * \n * <pre>\n * a6c5c51c-689c-4525-9bcd-c14c1e107c80\n * \u4e00\u5171 128 \u4f4d\uff0c\u5206\u505aL64 \u548c R64\uff0c\u5206\u4e3a\u4e3a\u4e24\u4e2a 64\u4f4d\u6570\uff08\u4e24\u4e2a long\uff09\n *    > L = uu.getLeastSignificantBits();\n *    > UUID = uu.getMostSignificantBits();\n * \u800c\u4e00\u4e2a 64 \u8fdb\u5236\u6570\uff0c\u662f 6 \u4f4d\uff0c\u56e0\u6b64\u6211\u4eec\u53d6\u503c\u7684\u987a\u5e8f\u662f\n * 1. \u4eceL64\u4f4d\u53d610\u6b21\uff0c\u6bcf\u6b21\u53d66\u4f4d\n * 2. \u4eceL64\u4f4d\u53d6\u6700\u540e\u76844\u4f4d \uff0b R64\u4f4d\u59342\u4f4d\u62fc\u4e0a\n * 3. \u4eceR64\u4f4d\u53d610\u6b21\uff0c\u6bcf\u6b21\u53d66\u4f4d\n * 4. \u5269\u4e0b\u7684\u4e24\u4f4d\u6700\u540e\u53d6\n * \u8fd9\u6837\uff0c\u5c31\u80fd\u7528\u4e00\u4e2a 22 \u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4e00\u4e2a 32 \u957f\u5ea6\u7684UUID\uff0c\u538b\u7f29\u4e86 1/3\n * </pre>\n * \n * @param uu\n *            UUID \u5bf9\u8c61\n * @return 64\u8fdb\u5236\u8868\u793a\u7684\u7d27\u51d1\u683c\u5f0f\u7684 UUID\n */\n", "func_signal": "public static String UU64(java.util.UUID uu)", "code": "{\n    int index = 0;\n    char[] cs = new char[22];\n    long L = uu.getMostSignificantBits();\n    long R = uu.getLeastSignificantBits();\n    long mask = 63;\n    // \u4eceL64\u4f4d\u53d610\u6b21\uff0c\u6bcf\u6b21\u53d66\u4f4d\n    for (int off = 58; off >= 4; off -= 6) {\n        long hex = (L & (mask << off)) >>> off;\n        cs[index++] = _UU64[(int) hex];\n    }\n    // \u4eceL64\u4f4d\u53d6\u6700\u540e\u76844\u4f4d \uff0b R64\u4f4d\u59342\u4f4d\u62fc\u4e0a\n    int l = (int) (((L & 0xF) << 2) | ((R & (3 << 62)) >>> 62));\n    cs[index++] = _UU64[l];\n    // \u4eceR64\u4f4d\u53d610\u6b21\uff0c\u6bcf\u6b21\u53d66\u4f4d\n    for (int off = 56; off >= 2; off -= 6) {\n        long hex = (R & (mask << off)) >>> off;\n        cs[index++] = _UU64[(int) hex];\n    }\n    // \u5269\u4e0b\u7684\u4e24\u4f4d\u6700\u540e\u53d6\n    cs[index++] = _UU64[(int) (R & 3)];\n    // \u8fd4\u56de\u5b57\u7b26\u4e32\n    return new String(cs);\n}", "path": "my-site/src/main/java/cn/luischen/utils/UUID.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u8f6cDate\n * @param date\n * @return\n */\n", "func_signal": "public static Date fmtdate_date(String date)", "code": "{\n    if (StringUtils.isNotBlank(date)){\n        return DateKit.dateFormat(date, \"yyyy\u5e74MM\u6708\");\n    }\n    return null;\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u6570\u7ec4\u8f6c\u5b57\u7b26\u4e32\n *\n * @param arr\n * @return\n */\n", "func_signal": "public String join(String[] arr)", "code": "{\n    StringBuilder ret = new StringBuilder();\n    String[] var3 = arr;\n    int var4 = arr.length;\n\n    for (int var5 = 0; var5 < var4; ++var5) {\n        String item = var3[var5];\n        ret.append(',').append(item);\n    }\n\n    return ret.length() > 0 ? ret.substring(1) : ret.toString();\n}", "path": "my-site/src/main/java/cn/luischen/controller/BaseController.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u622a\u53d6\u5b57\u7b26\u4e32\n *\n * @param str\n * @param len\n * @return\n */\n", "func_signal": "public static String substr(String str, int len)", "code": "{\n    if (str.length() > len) {\n        return str.substring(0, len);\n    }\n    return str;\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u5c06\u4e00\u4e2a UU64 \u8868\u793a\u7684\u7d27\u51d1\u5b57\u7b26\u4e32\uff0c\u53d8\u6210 UU16 \u8868\u793a\u7684\u5b57\u7b26\u4e32\n * \n * <pre>\n * \u6bcf\u6b21\u53d62\u4e2a\u5b57\u7b26\uff0c\u6062\u590d\u62103\u4e2abyte\uff0c\u91cd\u590d10\u6b21\uff0c \u6700\u540e\u4e00\u6b21\uff0c\u662f\u7528\u6700\u540e2\u4e2a\u5b57\u7b26\uff0c\u6062\u590d\u56de2\u4e2abyte </prev>\n * \n * @param uu64\n *            uu64 64\u8fdb\u5236\u8868\u793a\u7684 UUID, \u5185\u5bb9\u4e3a [\\\\-0-9a-zA-Z_]\n * @return 16\u8fdb\u5236\u8868\u793a\u7684\u7d27\u51d1\u683c\u5f0f\u7684 UUID\n */\n", "func_signal": "public static String UU16FromUU64(String uu64)", "code": "{\n    byte[] bytes = new byte[32];\n    char[] cs = uu64.toCharArray();\n    int index = 0;\n    // \u6bcf\u6b21\u53d62\u4e2a\u5b57\u7b26\uff0c\u6062\u590d\u62103\u4e2abyte\uff0c\u91cd\u590d10\u6b21\uff0c\n    for (int i = 0; i < 10; i++) {\n        int off = i * 2;\n        char cl = cs[off];\n        char cr = cs[off + 1];\n        int l = Arrays.binarySearch(_UU64, cl);\n        int r = Arrays.binarySearch(_UU64, cr);\n        int n = (l << 6) | r;\n        bytes[index++] = (byte) ((n & 0xF00) >>> 8);\n        bytes[index++] = (byte) ((n & 0xF0) >>> 4);\n        bytes[index++] = (byte) (n & 0xF);\n    }\n    // \u6700\u540e\u4e00\u6b21\uff0c\u662f\u7528\u6700\u540e2\u4e2a\u5b57\u7b26\uff0c\u6062\u590d\u56de2\u4e2abyte\n    char cl = cs[20];\n    char cr = cs[21];\n    int l = Arrays.binarySearch(_UU64, cl);\n    int r = Arrays.binarySearch(_UU64, cr);\n    int n = (l << 2) | r;\n    bytes[index++] = (byte) ((n & 0xF0) >>> 4);\n    bytes[index++] = (byte) (n & 0xF);\n\n    // \u8fd4\u56de UUID \u5bf9\u8c61\n    char[] names = new char[32];\n    for (int i = 0; i < bytes.length; i++)\n        names[i] = _UU16[bytes[i]];\n    return new String(names);\n}", "path": "my-site/src/main/java/cn/luischen/utils/UUID.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * \u6839\u636enuix\u65f6\u95f4\u6233\u83b7\u53d6Date\n * @param nuixTime\n * @return\n */\n", "func_signal": "public static Date fmtdate_unxtime(Integer nuixTime)", "code": "{\n    if (null != nuixTime){\n        return DateKit.getDateByUnixTime(nuixTime);\n    }\n    return  null;\n}", "path": "my-site/src/main/java/cn/luischen/utils/Commons.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "WinterChenS/my-site", "stars": 3123, "license": "apache-2.0", "language": "java", "size": 6340}
{"docstring": "/**\n * Produce a JSONObject by combining a JSONArray of names with the values of\n * this JSONArray.\n *\n * @param names\n *            A JSONArray containing a list of key strings. These will be\n *            paired with the values.\n * @return A JSONObject, or null if there are no names or if this JSONArray\n *         has no values.\n * @throws JSONException\n *             If any of the names are null.\n */\n", "func_signal": "public JSONObject toJSONObject(JSONArray names) throws JSONException", "code": "{\n    if (names == null || names.length() == 0 || this.length() == 0) {\n        return null;\n    }\n    JSONObject jo = new JSONObject();\n    for (int i = 0; i < names.length(); i += 1) {\n        jo.put(names.getString(i), this.opt(i));\n    }\n    return jo;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the optional string associated with an index. The defaultValue is\n * returned if the key is not found.\n *\n * @param index\n *            The index must be between 0 and length() - 1.\n * @param defaultValue\n *            The default value.\n * @return A String value.\n */\n", "func_signal": "public String optString(int index, String defaultValue)", "code": "{\n    Object object = this.opt(index);\n    return JSONObject.NULL.equals(object) ? defaultValue : object\n            .toString();\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Construct a JSONArray from a JSONTokener.\n *\n * @param x\n *            A JSONTokener\n * @throws JSONException\n *             If there is a syntax error.\n */\n", "func_signal": "public JSONArray(JSONTokener x) throws JSONException", "code": "{\n    this();\n    if (x.nextClean() != '[') {\n        throw x.syntaxError(\"A JSONArray text must start with '['\");\n    }\n    if (x.nextClean() != ']') {\n        x.back();\n        for (;;) {\n            if (x.nextClean() == ',') {\n                x.back();\n                this.myArrayList.add(JSONObject.NULL);\n            } else {\n                x.back();\n                this.myArrayList.add(x.nextValue());\n            }\n            switch (x.nextClean()) {\n            case ',':\n                if (x.nextClean() == ']') {\n                    return;\n                }\n                x.back();\n                break;\n            case ']':\n                return;\n            default:\n                throw x.syntaxError(\"Expected a ',' or ']'\");\n            }\n        }\n    }\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the int value associated with an index.\n *\n * @param index\n *            The index must be between 0 and length() - 1.\n * @return The value.\n * @throws JSONException\n *             If the key is not found or if the value is not a number.\n */\n", "func_signal": "public int getInt(int index) throws JSONException", "code": "{\n    Object object = this.get(index);\n    try {\n        return object instanceof Number ? ((Number) object).intValue()\n                : Integer.parseInt((String) object);\n    } catch (Exception e) {\n        throw new JSONException(\"JSONArray[\" + index + \"] is not a number.\");\n    }\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a JSONArray which\n * is produced from a Collection.\n *\n * @param value\n *            A Collection value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(Collection<Object> value)", "code": "{\n    this.put(new JSONArray(value));\n    return this;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Make a string from the contents of this JSONArray. The\n * <code>separator</code> string is inserted between each element. Warning:\n * This method assumes that the data structure is acyclical.\n *\n * @param separator\n *            A string that will be inserted between the elements.\n * @return a string.\n * @throws JSONException\n *             If the array contains an invalid number.\n */\n", "func_signal": "public String join(String separator) throws JSONException", "code": "{\n    int len = this.length();\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 0; i < len; i += 1) {\n        if (i > 0) {\n            sb.append(separator);\n        }\n        sb.append(JSONObject.valueToString(this.myArrayList.get(i)));\n    }\n    return sb.toString();\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the optional JSONArray associated with an index.\n *\n * @param index\n *            subscript\n * @return A JSONArray value, or null if the index has no value, or if the\n *         value is not a JSONArray.\n */\n", "func_signal": "public JSONArray optJSONArray(int index)", "code": "{\n    Object o = this.opt(index);\n    return o instanceof JSONArray ? (JSONArray) o : null;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the object value associated with an index.\n *\n * @param index\n *            The index must be between 0 and length() - 1.\n * @return An object value.\n * @throws JSONException\n *             If there is no value for the index.\n */\n", "func_signal": "public Object get(int index) throws JSONException", "code": "{\n    Object object = this.opt(index);\n    if (object == null) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    return object;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a JSONObject which\n * is produced from a Map.\n *\n * @param value\n *            A Map value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(Map<String, Object> value)", "code": "{\n    this.put(new JSONObject(value));\n    return this;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Append an object value. This increases the array's length by one.\n *\n * @param value\n *            An object value. The value should be a Boolean, Double,\n *            Integer, JSONArray, JSONObject, Long, or String, or the\n *            JSONObject.NULL object.\n * @return this.\n */\n", "func_signal": "public JSONArray put(Object value)", "code": "{\n    this.myArrayList.add(value);\n    return this;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Construct a JSONArray from a Collection.\n *\n * @param collection\n *            A Collection.\n */\n", "func_signal": "public JSONArray(Collection<Object> collection)", "code": "{\n    this.myArrayList = new ArrayList<Object>();\n    if (collection != null) {\n        Iterator<Object> iter = collection.iterator();\n        while (iter.hasNext()) {\n            this.myArrayList.add(JSONObject.wrap(iter.next()));\n        }\n    }\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the long value associated with an index.\n *\n * @param index\n *            The index must be between 0 and length() - 1.\n * @return The value.\n * @throws JSONException\n *             If the key is not found or if the value cannot be converted\n *             to a number.\n */\n", "func_signal": "public long getLong(int index) throws JSONException", "code": "{\n    Object object = this.get(index);\n    try {\n        return object instanceof Number ? ((Number) object).longValue()\n                : Long.parseLong((String) object);\n    } catch (Exception e) {\n        throw new JSONException(\"JSONArray[\" + index + \"] is not a number.\");\n    }\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Remove an index and close the hole.\n *\n * @param index\n *            The index of the element to be removed.\n * @return The value that was associated with the index, or null if there\n *         was no value.\n */\n", "func_signal": "public Object remove(int index)", "code": "{\n    return index >= 0 && index < this.length()\n        ? this.myArrayList.remove(index)\n        : null;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the string associated with an index.\n *\n * @param index\n *            The index must be between 0 and length() - 1.\n * @return A string value.\n * @throws JSONException\n *             If there is no string value for the index.\n */\n", "func_signal": "public String getString(int index) throws JSONException", "code": "{\n    Object object = this.get(index);\n    if (object instanceof String) {\n        return (String) object;\n    }\n    throw new JSONException(\"JSONArray[\" + index + \"] not a string.\");\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * \u8f6c\u6210\u9a7c\u5cf0\n *\n * @param text\n * @return\n */\n", "func_signal": "public static String captureStringLeaveUnderscore(String text)", "code": "{\n    if (TextUtils.isEmpty(text)) {\n        return text;\n    }\n    String temp = text.replaceAll(\"^_+\", \"\");\n\n    if (!TextUtils.isEmpty(temp)) {\n        text = temp;\n    }\n    String[] strings = text.split(\"_\");\n    StringBuilder stringBuilder = new StringBuilder();\n    stringBuilder.append(strings[0]);\n    for (int i = 1; i < strings.length; i++) {\n        stringBuilder.append(captureName(strings[i]));\n    }\n    return stringBuilder.toString();\n}", "path": "GsonFormat/src/main/java/org/gsonformat/intellij/common/StringUtils.java", "commit_date": "2017-01-21 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a JSONObject that\n * is produced from a Map.\n *\n * @param index\n *            The subscript.\n * @param value\n *            The Map value.\n * @return this.\n * @throws JSONException\n *             If the index is negative or if the the value is an invalid\n *             number.\n */\n", "func_signal": "public JSONArray put(int index, Map<String, Object> value) throws JSONException", "code": "{\n    this.put(index, new JSONObject(value));\n    return this;\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the optional double value associated with an index. The defaultValue\n * is returned if there is no value for the index, or if the value is not a\n * number and cannot be converted to a number.\n *\n * @param index\n *            subscript\n * @param defaultValue\n *            The default value.\n * @return The value.\n */\n", "func_signal": "public double optDouble(int index, double defaultValue)", "code": "{\n    try {\n        return this.getDouble(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "//NOI18N\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n          grabFocus();\n          decorator.nextState();\n      }", "path": "GsonFormat/ThirdParty/treetable/java/src/org/jdesktop/swingx/ux/TristateCheckBox.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the boolean value associated with an index. The string values \"true\"\n * and \"false\" are converted to boolean.\n *\n * @param index\n *            The index must be between 0 and length() - 1.\n * @return The truth.\n * @throws JSONException\n *             If there is no value for the index or if the value is not\n *             convertible to boolean.\n */\n", "func_signal": "public boolean getBoolean(int index) throws JSONException", "code": "{\n    Object object = this.get(index);\n    if (object.equals(Boolean.FALSE)\n            || (object instanceof String && ((String) object)\n                    .equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (object.equals(Boolean.TRUE)\n            || (object instanceof String && ((String) object)\n                    .equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONArray[\" + index + \"] is not a boolean.\");\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Get the optional int value associated with an index. The defaultValue is\n * returned if there is no value for the index, or if the value is not a\n * number and cannot be converted to a number.\n *\n * @param index\n *            The index must be between 0 and length() - 1.\n * @param defaultValue\n *            The default value.\n * @return The value.\n */\n", "func_signal": "public int optInt(int index, int defaultValue)", "code": "{\n    try {\n        return this.getInt(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "GsonFormat/ThirdParty/json/java/src/org/json/JSONArray.java", "commit_date": "2016-11-07 00:00:00", "repo_name": "zzz40500/GsonFormat", "stars": 3168, "license": "apache-2.0", "language": "java", "size": 4212}
{"docstring": "/**\n * Set the minimum length of the formatted string. If this is not set\n * the default is to allow any length.\n * @param minimumLength of the formatted string\n * @return The instance of the builder for chaining.\n */\n", "func_signal": "public FormattedBuilder<T> minimumLength(int minimumLength)", "code": "{\n\tthis.minimumLength = minimumLength;\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * If set to true, once the step is complete, if the resource previously provided is\n * empty, it will be deleted.\n *\n * @param shouldDelete defaults to false\n * @return The current instance of the builder\n * @see FlatFileItemWriter#setShouldDeleteIfEmpty(boolean)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> shouldDeleteIfEmpty(boolean shouldDelete)", "code": "{\n\tthis.shouldDeleteIfEmpty = shouldDelete;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * A flag indicating that changes should be force-synced to disk on flush.  Defaults\n * to false.\n *\n * @param forceSync value to set the flag to\n * @return The current instance of the builder.\n * @see FlatFileItemWriter#setForceSync(boolean)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> forceSync(boolean forceSync)", "code": "{\n\tthis.forceSync = forceSync;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Set the maximum length of the formatted string. If this is not set\n * the default is to allow any length.\n * @param maximumLength of the formatted string\n * @return The instance of the builder for chaining.\n */\n", "func_signal": "public FormattedBuilder<T> maximumLength(int maximumLength)", "code": "{\n\tthis.maximumLength = maximumLength;\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * The name used to calculate the key within the\n * {@link org.springframework.batch.item.ExecutionContext}. Required if\n * {@link #saveState(boolean)} is set to true.\n *\n * @param name name of the reader instance\n * @return The current instance of the builder.\n * @see org.springframework.batch.item.ItemStreamSupport#setName(String)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> name(String name)", "code": "{\n\tthis.name = name;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * The {@link Resource} to be used as output.\n *\n * @param resource the output of the writer.\n * @return The current instance of the builder.\n * @see FlatFileItemWriter#setResource(Resource)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> resource(Resource resource)", "code": "{\n\tthis.resource = resource;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Names of each of the fields within the fields that are returned in the order\n * they occur within the formatted file. These names will be used to create\n * a {@link BeanWrapperFieldExtractor} only if no explicit field extractor\n * is set via {@link FormattedBuilder#fieldExtractor(FieldExtractor)}.\n *\n * @param names names of each field\n * @return The parent {@link FlatFileItemWriterBuilder}\n * @see BeanWrapperFieldExtractor#setNames(String[])\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> names(String... names)", "code": "{\n\tthis.names.addAll(Arrays.asList(names));\n\treturn this.parent;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Set the format string used to aggregate items\n * @param format used to aggregate items\n * @return The instance of the builder for chaining.\n */\n", "func_signal": "public FormattedBuilder<T> format(String format)", "code": "{\n\tthis.format = format;\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Set the locale.\n * @param locale to use\n * @return The instance of the builder for chaining.\n */\n", "func_signal": "public FormattedBuilder<T> locale(Locale locale)", "code": "{\n\tthis.locale = locale;\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Names of each of the fields within the fields that are returned in the order\n * they occur within the delimited file. These names will be used to create\n * a {@link BeanWrapperFieldExtractor} only if no explicit field extractor\n * is set via {@link DelimitedBuilder#fieldExtractor(FieldExtractor)}.\n *\n * @param names names of each field\n * @return The parent {@link FlatFileItemWriterBuilder}\n * @see BeanWrapperFieldExtractor#setNames(String[])\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> names(String... names)", "code": "{\n\tthis.names.addAll(Arrays.asList(names));\n\treturn this.parent;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * If set to true, the flushing of the buffer is delayed while a transaction is active.\n *\n * @param transactional defaults to true\n * @return The current instance of the builder\n * @see FlatFileItemWriter#setTransactional(boolean)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> transactional(boolean transactional)", "code": "{\n\tthis.transactional = transactional;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Validates and builds a {@link FlatFileItemWriter}.\n *\n * @return a {@link FlatFileItemWriter}\n */\n", "func_signal": "public FlatFileItemWriter<T> build()", "code": "{\n\n\tAssert.isTrue(this.lineAggregator != null || this.delimitedBuilder != null || this.formattedBuilder != null,\n\t\t\t\"A LineAggregator or a DelimitedBuilder or a FormattedBuilder is required\");\n\n\tif(this.saveState) {\n\t\tAssert.hasText(this.name, \"A name is required when saveState is true\");\n\t}\n\n\tif(this.resource == null) {\n\t\tlogger.debug(\"The resource is null. This is only a valid scenario when \" +\n\t\t\t\t\"injecting it later as in when using the MultiResourceItemWriter\");\n\t}\n\n\tFlatFileItemWriter<T> writer = new FlatFileItemWriter<>();\n\n\twriter.setName(this.name);\n\twriter.setAppendAllowed(this.append);\n\twriter.setEncoding(this.encoding);\n\twriter.setFooterCallback(this.footerCallback);\n\twriter.setForceSync(this.forceSync);\n\twriter.setHeaderCallback(this.headerCallback);\n\tif (this.lineAggregator == null) {\n\t\tAssert.state(this.delimitedBuilder == null || this.formattedBuilder == null,\n\t\t\t\t\"Either a DelimitedLineAggregator or a FormatterLineAggregator should be provided, but not both\");\n\t\tif (this.delimitedBuilder != null) {\n\t\t\tthis.lineAggregator = this.delimitedBuilder.build();\n\t\t}\n\t\telse {\n\t\t\tthis.lineAggregator = this.formattedBuilder.build();\n\t\t}\n\t}\n\twriter.setLineAggregator(this.lineAggregator);\n\twriter.setLineSeparator(this.lineSeparator);\n\twriter.setResource(this.resource);\n\twriter.setSaveState(this.saveState);\n\twriter.setShouldDeleteIfEmpty(this.shouldDeleteIfEmpty);\n\twriter.setShouldDeleteIfExists(this.shouldDeleteIfExists);\n\twriter.setTransactional(this.transactional);\n\n\treturn writer;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * If set to true, upon the start of the step, if the resource already exists, it will\n * be deleted and recreated.\n *\n * @param shouldDelete defaults to true\n * @return The current instance of the builder\n * @see FlatFileItemWriter#setShouldDeleteIfExists(boolean)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> shouldDeleteIfExists(boolean shouldDelete)", "code": "{\n\tthis.shouldDeleteIfExists = shouldDelete;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * A callback for footer processing\n * @param callback {@link FlatFileFooterCallback} impl\n * @return The current instance of the builder\n * @see FlatFileItemWriter#setFooterCallback(FlatFileFooterCallback)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> footerCallback(FlatFileFooterCallback callback)", "code": "{\n\tthis.footerCallback = callback;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * If set to true and the file exists, the output will be appended to the existing\n * file.\n *\n * @param append defaults to false\n * @return The current instance of the builder\n * @see FlatFileItemWriter#setAppendAllowed(boolean)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> append(boolean append)", "code": "{\n\tthis.append = append;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Returns an instance of a {@link FormattedBuilder} for building a\n * {@link FormatterLineAggregator}. The {@link FormatterLineAggregator} configured by\n * this builder will only be used if one is not explicitly configured via\n * {@link FlatFileItemWriterBuilder#lineAggregator}\n *\n * @return a {@link FormattedBuilder}\n *\n */\n", "func_signal": "public FormattedBuilder<T> formatted()", "code": "{\n\tthis.formattedBuilder = new FormattedBuilder<>(this);\n\treturn this.formattedBuilder;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Set the {@link FieldExtractor} to use to extract fields from each item.\n * @param fieldExtractor to use to extract fields from each item\n * @return The parent {@link FlatFileItemWriterBuilder}\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> fieldExtractor(FieldExtractor<T> fieldExtractor)", "code": "{\n\tthis.fieldExtractor = fieldExtractor;\n\treturn this.parent;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Returns an instance of a {@link DelimitedBuilder} for building a\n * {@link DelimitedLineAggregator}. The {@link DelimitedLineAggregator} configured by\n * this builder will only be used if one is not explicitly configured via\n * {@link FlatFileItemWriterBuilder#lineAggregator}\n *\n * @return a {@link DelimitedBuilder}\n *\n */\n", "func_signal": "public DelimitedBuilder<T> delimited()", "code": "{\n\tthis.delimitedBuilder = new DelimitedBuilder<>(this);\n\treturn this.delimitedBuilder;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * A callback for header processing.\n *\n * @param callback {@link FlatFileHeaderCallback} impl\n * @return The current instance of the builder\n * @see FlatFileItemWriter#setHeaderCallback(FlatFileHeaderCallback)\n */\n", "func_signal": "public FlatFileItemWriterBuilder<T> headerCallback(FlatFileHeaderCallback callback)", "code": "{\n\tthis.headerCallback = callback;\n\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Define the delimiter for the file.\n *\n * @param delimiter String used as a delimiter between fields.\n * @return The instance of the builder for chaining.\n * @see DelimitedLineAggregator#setDelimiter(String)\n */\n", "func_signal": "public DelimitedBuilder<T> delimiter(String delimiter)", "code": "{\n\tthis.delimiter = delimiter;\n\treturn this;\n}", "path": "spring-batch/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemWriterBuilder.java", "commit_date": "2019-11-29 00:00:00", "repo_name": "spring-projects/spring-batch", "stars": 2554, "license": "apache-2.0", "language": "java", "size": 104346}
{"docstring": "/**\n * Constructs a new Region object to be used for Ranging or Monitoring\n * @param uniqueId - A unique identifier used to later cancel Ranging and Monitoring, or change the region being Ranged/Monitored\n * @param identifiers - list of identifiers for this region\n * @param bluetoothAddress - mac address\n */\n", "func_signal": "public Region(String uniqueId, List<Identifier> identifiers, String bluetoothAddress)", "code": "{\n    validateMac(bluetoothAddress);\n    this.mIdentifiers = new ArrayList<Identifier>(identifiers);\n    this.mUniqueId = uniqueId;\n    this.mBluetoothAddress = bluetoothAddress;\n    if (uniqueId == null) {\n        throw new NullPointerException(\"uniqueId may not be null\");\n    }\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/Region.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Checks to see if an Beacon object is included in the matching criteria of this Region\n * @param beacon the beacon to check to see if it is in the Region\n * @return true if is covered\n */\n", "func_signal": "public boolean matchesBeacon(Beacon beacon)", "code": "{\n    // All identifiers must match, or the corresponding region identifier must be null.\n    for (int i = mIdentifiers.size(); --i >= 0; ) {\n        final Identifier identifier = mIdentifiers.get(i);\n        Identifier beaconIdentifier = null;\n        if (i < beacon.mIdentifiers.size()) {\n            beaconIdentifier = beacon.getIdentifier(i);\n        }\n        if ((beaconIdentifier == null && identifier != null) ||\n                (beaconIdentifier != null  && identifier != null && !identifier.equals(beaconIdentifier))) {\n            return false;\n        }\n    }\n    if (mBluetoothAddress != null && !mBluetoothAddress.equalsIgnoreCase(beacon.mBluetoothAddress)) {\n        return false;\n    }\n    return true;\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/Region.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/*\n * This is here because Identifier.parse wrongly accepts UUIDs without\n * dashes, but we want to be backward compatible.\n */\n", "func_signal": "@Test\npublic void testParseInvalidUuid()", "code": "{\n    UUID ref = UUID.fromString(\"2f234454-cf6d-4a0f-adf2-f4911ba9ffa6\");\n    Identifier id = Identifier.parse(\"2f234454cf6d4a0fadf2f4911ba9ffa6\");\n    assertEquals(\"Malformed UUID was parsed as expected.\", id.toUuid(), ref);\n}", "path": "android-beacon-library/lib/src/test/java/org/altbeacon/beacon/IdentifierTest.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * When binding to the service, we return an interface to our messenger\n * for sending messages to the service.\n */\n", "func_signal": "@Override\npublic IBinder onBind(Intent intent)", "code": "{\n    LogManager.i(TAG, \"binding\");\n    return mMessenger.getBinder();\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Method reserved for system use\n */\n", "func_signal": "@Override\npublic boolean bindService(Intent intent, ServiceConnection conn, int arg2)", "code": "{\n    this.serviceIntent = intent;\n    context.startService(intent);\n    return context.bindService(intent, conn, arg2);\n\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Method reserved for system use\n */\n", "func_signal": "@Override\npublic void unbindService(ServiceConnection conn)", "code": "{\n    context.unbindService(conn);\n    context.stopService(serviceIntent);\n    serviceConnected = false;\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Remove a given region\n *\n * @param region\n */\n", "func_signal": "public void removeRegion(Region region)", "code": "{\n    if (regions.contains(region)) {\n        if (serviceConnected) {\n            try {\n                beaconManager.stopMonitoringBeaconsInRegion(region);\n            } catch (RemoteException e) {\n                LogManager.e(e, TAG, \"Can't stop bootstrap region\");\n            }\n        } else {\n            LogManager.w(TAG, \"Removing a region: service not yet Connected\");\n        }\n        regions.remove(region);\n    }\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "//kept here for backward compatibility\n", "func_signal": "public static void setSampleExpirationMilliseconds(long milliseconds)", "code": "{\n    sampleExpirationMilliseconds = milliseconds;\n    RunningAverageRssiFilter.setSampleExpirationMilliseconds(sampleExpirationMilliseconds);\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Converts the given URL string into a byte array \"compressed\" version of the URL.\n *\n * The regex needs to determine what the URL starts with and what the hostname ends\n * with.  The URL must start with one of the following:\n *\n * http://www.\n * https://www.\n * http://\n * https://\n *\n * The hostname may end with one of the following TLDs:\n *\n * .com\n * .org\n * .edu\n * .net\n * .info\n * .biz\n * .gov\n *\n * If the path component of the URL is non-empty, then the \"slash\" version of\n * the matching TLD can be used.  Otherwise, the \"non-slash\" version of the TLD is used.\n * If the hostname doesn't end with a TLD, that's fine; it just isn't compressed\n * into a single byte.\n *\n * Therefore, the following regex should tell me what I need to know about the URL:\n *\n * ^(http|https):\\/\\/(www.)?((?:[0-9a-z_-]+\\.??)+)(\\.[0-9a-z_-]+\\/?)(.*)$\n *\n * Groups:\n *\n * 1: http or https\n * 2: www. or empty\n * 3: hostname including optional leading www. but excluding trailing dot up to but not including TLD\n * 4: TLD with leading dot and optional trailing slash\n * 5: path without leading slash or empty\n *\n * @param urlString\n * @return\n */\n", "func_signal": "public static byte[] compress(String urlString) throws MalformedURLException", "code": "{\n    byte[] compressedBytes = null;\n    if (urlString != null) {\n        // Figure the compressed bytes can't be longer than the original string.\n        byte[] byteBuffer = new byte[urlString.length()];\n        int byteBufferIndex = 0;\n        Arrays.fill(byteBuffer, (byte) 0x00);\n\n        Pattern urlPattern = Pattern.compile(EDDYSTONE_URL_REGEX);\n        Matcher urlMatcher = urlPattern.matcher(urlString);\n        if (urlMatcher.matches()) {\n            // www.\n            String wwwdot = urlMatcher.group(EDDYSTONE_URL_WWW_GROUP);\n            boolean haswww = (wwwdot != null);\n\n            // Protocol.\n            String rawProtocol = urlMatcher.group(EDDYSTONE_URL_PROTOCOL_GROUP);\n            String protocol = rawProtocol.toLowerCase();\n            if (protocol.equalsIgnoreCase(URL_PROTOCOL_HTTP)) {\n                byteBuffer[byteBufferIndex] = (haswww ? EDDYSTONE_URL_PROTOCOL_HTTP_WWW : EDDYSTONE_URL_PROTOCOL_HTTP);\n            }\n            else {\n                byteBuffer[byteBufferIndex] = (haswww ? EDDYSTONE_URL_PROTOCOL_HTTPS_WWW : EDDYSTONE_URL_PROTOCOL_HTTPS);\n            }\n            byteBufferIndex++;\n\n            // Fully-qualified domain name (FQDN).  This includes the hostname and any other components after the dots\n            // but BEFORE the first single slash in the URL.\n            byte[] hostnameBytes = urlMatcher.group(EDDYSTONE_URL_FQDN_GROUP).getBytes();\n            String rawHostname = new String(hostnameBytes);\n            String hostname = rawHostname.toLowerCase();\n            String[] domains = hostname.split(Pattern.quote(\".\"));\n\n            boolean consumedSlash = false;\n            if (domains != null) {\n                // Write the hostname/subdomains prior to the last one.  If there's only one (e. g. http://localhost)\n                // then that's the only thing to write out.\n                byte[] periodBytes = {'.'};\n                int writableDomainsCount = (domains.length == 1 ? 1 : domains.length - 1);\n                for (int domainIndex = 0; domainIndex < writableDomainsCount; domainIndex++) {\n                    // Write out leading period, if necessary.\n                    if (domainIndex > 0) {\n                        System.arraycopy(periodBytes, 0, byteBuffer, byteBufferIndex, periodBytes.length);\n                        byteBufferIndex += periodBytes.length;\n                    }\n\n                    byte[] domainBytes = domains[domainIndex].getBytes();\n                    int domainLength = domainBytes.length;\n                    System.arraycopy(domainBytes, 0, byteBuffer, byteBufferIndex, domainLength);\n                    byteBufferIndex += domainLength;\n                }\n\n                // Is the TLD one that we can encode?\n                if (domains.length > 1) {\n                    String tld = \".\" + domains[domains.length - 1];\n                    String slash = urlMatcher.group(EDDYSTONE_URL_SLASH_GROUP);\n                    String encodableTLDCandidate = (slash == null ? tld : tld + slash);\n                    byte encodedTLDByte = encodedByteForTopLevelDomain(encodableTLDCandidate);\n                    if (encodedTLDByte != TLD_NOT_ENCODABLE) {\n                        byteBuffer[byteBufferIndex++] = encodedTLDByte;\n                        consumedSlash = (slash != null);\n                    } else {\n                        byte[] tldBytes = tld.getBytes();\n                        int tldLength = tldBytes.length;\n                        System.arraycopy(tldBytes, 0, byteBuffer, byteBufferIndex, tldLength);\n                        byteBufferIndex += tldLength;\n                    }\n                }\n            }\n\n            // Optional slash.\n            if (! consumedSlash) {\n                String slash = urlMatcher.group(EDDYSTONE_URL_SLASH_GROUP);\n                if (slash != null) {\n                    int slashLength = slash.length();\n                    System.arraycopy(slash.getBytes(), 0, byteBuffer, byteBufferIndex, slashLength);\n                    byteBufferIndex += slashLength;\n                }\n            }\n\n            // Path.\n            String path = urlMatcher.group(EDDYSTONE_URL_PATH_GROUP);\n            if (path != null) {\n                int pathLength =  path.length();\n                System.arraycopy(path.getBytes(), 0, byteBuffer, byteBufferIndex, pathLength);\n                byteBufferIndex += pathLength;\n            }\n\n            // Copy the result.\n            compressedBytes = new byte[byteBufferIndex];\n            System.arraycopy(byteBuffer, 0, compressedBytes, 0, compressedBytes.length);\n        }\n        else {\n            throw new MalformedURLException();\n        }\n    }\n    else {\n        throw new MalformedURLException();\n    }\n    return compressedBytes;\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressor.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "// utilty methods for testing serialization\n", "func_signal": "private byte[] convertToBytes(Object object) throws IOException", "code": "{\n    try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         ObjectOutputStream out = new ObjectOutputStream(bos)) {\n        out.writeObject(object);\n        return bos.toByteArray();\n    }\n}", "path": "android-beacon-library/lib/src/test/java/org/altbeacon/beacon/RegionTest.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Constructor to bootstrap your Application on an entry/exit from multiple regions\n *\n * @param context\n * @param monitorNotifier\n * @param regions\n */\n", "func_signal": "public RegionBootstrap(final Context context, final MonitorNotifier monitorNotifier, List<Region> regions)", "code": "{\n    if (context == null) {\n        throw new NullPointerException(\"Application Context should not be null\");\n    }\n    this.context = context.getApplicationContext();\n    this.monitorNotifier = monitorNotifier;\n\n    this.regions = regions;\n\n    beaconManager = BeaconManager.getInstanceForApplication(context);\n    beaconConsumer = new InternalBeaconConsumer();\n    if (beaconManager.isBackgroundModeUninitialized()) {\n        beaconManager.setBackgroundMode(true);\n    }\n    beaconManager.bind(beaconConsumer);\n    LogManager.d(TAG, \"Waiting for BeaconService connection\");\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "// called when the last bound client calls unbind\n", "func_signal": "@Override\npublic boolean onUnbind(Intent intent)", "code": "{\n    LogManager.i(TAG, \"unbinding so destroying self\");\n    this.stopForeground(true);\n    this.stopSelf();\n    return false;\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Used to disable additional bootstrap callbacks after the first is received.  Unless this is called,\n * your application will be get additional calls as the supplied regions are entered or exited.\n */\n", "func_signal": "public void disable()", "code": "{\n    if (disabled) {\n        return;\n    }\n    disabled = true;\n    try {\n        for (Region region : regions) {\n            beaconManager.stopMonitoringBeaconsInRegion(region);\n        }\n    } catch (RemoteException e) {\n        LogManager.e(e, TAG, \"Can't stop bootstrap regions\");\n    }\n    beaconManager.unbind(beaconConsumer);\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Constructor to bootstrap your Application on an entry/exit from a single region.\n *\n * @param application\n * @param region\n */\n", "func_signal": "public RegionBootstrap(BootstrapNotifier application, Region region)", "code": "{\n    if (application.getApplicationContext() == null) {\n        throw new NullPointerException(\"The BootstrapNotifier instance is returning null from its getApplicationContext() method.  Have you implemented this method?\");\n    }\n    this.context = application.getApplicationContext();\n    regions = new ArrayList<Region>();\n    regions.add(region);\n    this.monitorNotifier = application;\n    beaconManager = BeaconManager.getInstanceForApplication(context);\n    beaconConsumer = new InternalBeaconConsumer();\n    if (beaconManager.isBackgroundModeUninitialized()) {\n        beaconManager.setBackgroundMode(true);\n    }\n    beaconManager.bind(beaconConsumer);\n    LogManager.d(TAG, \"Waiting for BeaconService connection\");\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Parse a PDU from a byte array looking offset by startIndex\n * @param bytes\n * @param startIndex\n * @return\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.GINGERBREAD)\npublic static Pdu parse(byte[] bytes, int startIndex)", "code": "{\n    Pdu pdu = null;\n    if (bytes.length-startIndex >= 2) {\n        byte length = bytes[startIndex];\n        if (length > 0) {\n            byte type = bytes[startIndex + 1];\n            int firstIndex = startIndex + 2;\n            if (firstIndex < bytes.length) {\n                pdu = new Pdu();\n                // The End index is the startIndex + the length, because the first byte is the\n                // length field and the length field does not include the length field itself in\n                // the count\n                pdu.mEndIndex = startIndex + length;\n                if (pdu.mEndIndex >= bytes.length) {\n                    pdu.mEndIndex = bytes.length - 1;\n                }\n                pdu.mType = type;\n                pdu.mDeclaredLength = length;\n                pdu.mStartIndex = firstIndex;\n                pdu.mBytes = bytes;\n            }\n        }\n    }\n    return pdu;\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/bluetooth/Pdu.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/*\n * This starts the scanning service as a foreground service if it is so configured in the\n * manifest\n */\n", "func_signal": "private void startForegroundIfConfigured()", "code": "{\n    BeaconManager beaconManager = BeaconManager.getInstanceForApplication(\n            this.getApplicationContext());\n    Notification notification = beaconManager\n            .getForegroundServiceNotification();\n    int notificationId = beaconManager\n            .getForegroundServiceNotificationId();\n    if (notification != null &&\n            Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n        this.startForeground(notificationId, notification);\n    }\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java", "commit_date": "2020-07-24 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Obtains the best possible <code>DistanceCalculator</code> for the Android device passed\n * as an argument\n */\n", "func_signal": "public ModelSpecificDistanceCalculator(Context context, String remoteUpdateUrlString, AndroidModel model)", "code": "{\n    mRequestedModel = model;\n    mRemoteUpdateUrlString = remoteUpdateUrlString;\n    mContext = context;\n    loadModelMap();\n    mDistanceCalculator = findCalculatorForModelWithLock(model);\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculator.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Constructs a new Region object to be used for Ranging or Monitoring\n * @param uniqueId - A unique identifier used to later cancel Ranging and Monitoring, or change the region being Ranged/Monitored\n * @param bluetoothAddress - mac address used to match beacons\n */\n", "func_signal": "public Region(String uniqueId, String bluetoothAddress)", "code": "{\n    validateMac(bluetoothAddress);\n    this.mBluetoothAddress = bluetoothAddress;\n    this.mUniqueId = uniqueId;\n    this.mIdentifiers = new ArrayList<Identifier>();\n    if (uniqueId == null) {\n        throw new NullPointerException(\"uniqueId may not be null\");\n    }\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/Region.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Constructs a new Region object to be used for Ranging or Monitoring\n * @param uniqueId - A unique identifier used to later cancel Ranging and Monitoring, or change the region being Ranged/Monitored\n * @param id1 - most significant identifier (can be null)\n * @param id2 - second most significant identifier (can be null)\n * @param id3 - third most significant identifier (can be null)\n */\n", "func_signal": "public Region(String uniqueId, Identifier id1, Identifier id2, Identifier id3)", "code": "{\n    this.mIdentifiers = new ArrayList<Identifier>(3);\n    this.mIdentifiers.add(id1);\n    this.mIdentifiers.add(id2);\n    this.mIdentifiers.add(id3);\n    this.mUniqueId = uniqueId;\n    this.mBluetoothAddress = null;\n    if (uniqueId == null) {\n        throw new NullPointerException(\"uniqueId may not be null\");\n    }\n}", "path": "android-beacon-library/lib/src/main/java/org/altbeacon/beacon/Region.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * URLs to test:\n * <p/>\n * http://www.radiusnetworks.com\n * https://www.radiusnetworks.com\n * http://radiusnetworks.com\n * https://radiusnetworks.com\n * https://radiusnetworks.com/\n * https://radiusnetworks.com/v1/index.html\n * https://api.v1.radiusnetworks.com\n * https://www.api.v1.radiusnetworks.com\n */\n", "func_signal": "@Test\npublic void testCompressURL() throws MalformedURLException", "code": "{\n    String testURL = \"http://www.radiusnetworks.com\";\n    byte[] expectedBytes = {0x00, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x07};\n    assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));\n}", "path": "android-beacon-library/lib/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java", "commit_date": "2019-01-10 00:00:00", "repo_name": "AltBeacon/android-beacon-library", "stars": 2804, "license": "apache-2.0", "language": "java", "size": 8543}
{"docstring": "/**\n * Constructor\n *\n * @param titleRes    String resource\n * @param drawableRes Drawable resource\n * @param colorRes    Color resource\n */\n", "func_signal": "public AHBottomNavigationItem(@StringRes int titleRes, @DrawableRes int drawableRes, @ColorRes int colorRes)", "code": "{\n\tthis.titleRes = titleRes;\n\tthis.drawableRes = drawableRes;\n\tthis.colorRes = colorRes;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigationItem.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Init the fragment\n */\n", "func_signal": "private void initDemoList(View view)", "code": "{\n\t\n\tfragmentContainer = view.findViewById(R.id.fragment_container);\n\trecyclerView = view.findViewById(R.id.fragment_demo_recycler_view);\n\trecyclerView.setHasFixedSize(true);\n\tlayoutManager = new LinearLayoutManager(getActivity());\n\trecyclerView.setLayoutManager(layoutManager);\n\t\n\tArrayList<String> itemsData = new ArrayList<>();\n\tfor (int i = 0; i < 50; i++) {\n\t\titemsData.add(\"Fragment \" + getArguments().getInt(\"index\", -1) + \" / Item \" + i);\n\t}\n\t\n\tDemoAdapter adapter = new DemoAdapter(itemsData);\n\trecyclerView.setAdapter(adapter);\n}", "path": "ahbottomnavigation/demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoFragment.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Constructor\n *\n * @param title    String\n * @param drawable Drawable\n * @param color    Color\n */\n", "func_signal": "public AHBottomNavigationItem(String title, Drawable drawable, @ColorInt int color)", "code": "{\n\tthis.title = title;\n\tthis.drawable = drawable;\n\tthis.color = color;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigationItem.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update left margin with animation\n */\n", "func_signal": "public static void updateLeftMargin(final View view, int fromMargin, int toMargin)", "code": "{\n\tValueAnimator animator = ValueAnimator.ofFloat(fromMargin, toMargin);\n\tanimator.setDuration(150);\n\tanimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator valueAnimator) {\n\t\t\tfloat animatedValue = (float) valueAnimator.getAnimatedValue();\n\t\t\tif (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n\t\t\t\tViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n\t\t\t\tp.setMargins((int) animatedValue, p.topMargin, p.rightMargin, p.bottomMargin);\n\t\t\t\tview.requestLayout();\n\t\t\t}\n\t\t}\n\t});\n\tanimator.start();\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update alpha\n */\n", "func_signal": "public static void updateAlpha(final View view, float fromValue, float toValue)", "code": "{\n\tValueAnimator animator = ValueAnimator.ofFloat(fromValue, toValue);\n\tanimator.setDuration(150);\n\tanimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator valueAnimator) {\n\t\t\tfloat animatedValue = (float) valueAnimator.getAnimatedValue();\n\t\t\tview.setAlpha(animatedValue);\n\t\t}\n\t});\n\tanimator.start();\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Get the height of the buttons bar\n *\n * @param context Context\n * @return\n */\n", "func_signal": "public static int getSoftButtonsBarSizePort(Context context)", "code": "{\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n\t\tDisplayMetrics metrics = new DisplayMetrics();\n\t\tWindow window = unwrap(context).getWindow();\n\t\twindow.getWindowManager().getDefaultDisplay().getMetrics(metrics);\n\t\tint usableHeight = metrics.heightPixels;\n\t\twindow.getWindowManager().getDefaultDisplay().getRealMetrics(metrics);\n\t\tint realHeight = metrics.heightPixels;\n\t\tif (realHeight > usableHeight)\n\t\t\treturn realHeight - usableHeight;\n\t\telse\n\t\t\treturn 0;\n\t}\n\treturn 0;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update text color with animation\n */\n", "func_signal": "public static void updateTextColor(final TextView textView, @ColorInt int fromColor,\n                                   @ColorInt int toColor)", "code": "{\n\tValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), fromColor, toColor);\n\tcolorAnimation.setDuration(150);\n\tcolorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator animator) {\n\t\t\ttextView.setTextColor((Integer) animator.getAnimatedValue());\n\t\t}\n\t});\n\tcolorAnimation.start();\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update text color with animation\n */\n", "func_signal": "public static void updateViewBackgroundColor(final View view, @ColorInt int fromColor,\n                                             @ColorInt int toColor)", "code": "{\n\tValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), fromColor, toColor);\n\tcolorAnimation.setDuration(150);\n\tcolorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator animator) {\n\t\t\tview.setBackgroundColor((Integer) animator.getAnimatedValue());\n\t\t}\n\t});\n\tcolorAnimation.start();\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update width\n */\n", "func_signal": "public static void updateWidth(final View view, float fromWidth, float toWidth)", "code": "{\n\tValueAnimator animator = ValueAnimator.ofFloat(fromWidth, toWidth);\n\tanimator.setDuration(150);\n\tanimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator animator) {\n\t\t\tViewGroup.LayoutParams params = view.getLayoutParams();\n\t\t\tparams.width = Math.round((float) animator.getAnimatedValue());\n\t\t\tview.setLayoutParams(params);\n\t\t}\n\t});\n\tanimator.start();\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update text size with animation\n */\n", "func_signal": "public static void updateTextSize(final TextView textView, float fromSize, float toSize)", "code": "{\n\tValueAnimator animator = ValueAnimator.ofFloat(fromSize, toSize);\n\tanimator.setDuration(150);\n\tanimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator valueAnimator) {\n\t\t\tfloat animatedValue = (float) valueAnimator.getAnimatedValue();\n\t\t\ttextView.setTextSize(TypedValue.COMPLEX_UNIT_PX, animatedValue);\n\t\t}\n\t});\n\tanimator.start();\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update image view color with animation\n */\n", "func_signal": "public static void updateDrawableColor(final Context context, final Drawable drawable,\n                                       final ImageView imageView, @ColorInt int fromColor,\n                                       @ColorInt int toColor, final boolean forceTint)", "code": "{\n\tif (forceTint) {\n\t\tValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), fromColor, toColor);\n\t\tcolorAnimation.setDuration(150);\n\t\tcolorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t\t@Override\n\t\t\tpublic void onAnimationUpdate(ValueAnimator animator) {\n\t\t\t\timageView.setImageDrawable(AHHelper.getTintDrawable(drawable,\n\t\t\t\t\t\t(Integer) animator.getAnimatedValue(), forceTint));\n\t\t\t\timageView.requestLayout();\n\t\t\t}\n\t\t});\n\t\tcolorAnimation.start();\n\t}\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Unwrap wactivity\n *\n * @param context Context\n * @return Activity\n */\n", "func_signal": "public static Activity unwrap(Context context)", "code": "{\n\twhile (!(context instanceof Activity)) {\n\t\tContextWrapper wrapper = (ContextWrapper) context;\n\t\tcontext = wrapper.getBaseContext();\n\t}\n\treturn (Activity) context;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Refresh\n */\n", "func_signal": "public void refresh()", "code": "{\n\tif (getArguments().getInt(\"index\", 0) > 0 && recyclerView != null) {\n\t\trecyclerView.smoothScrollToPosition(0);\n\t}\n}", "path": "ahbottomnavigation/demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoFragment.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Called when a fragment will be hidden\n */\n", "func_signal": "public void willBeHidden()", "code": "{\n\tif (fragmentContainer != null) {\n\t\tAnimation fadeOut = AnimationUtils.loadAnimation(getActivity(), R.anim.fade_out);\n\t\tfragmentContainer.startAnimation(fadeOut);\n\t}\n}", "path": "ahbottomnavigation/demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoFragment.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Return a tint drawable\n *\n * @param drawable\n * @param color\n * @param forceTint\n * @return\n */\n", "func_signal": "public static Drawable getTintDrawable(Drawable drawable, @ColorInt int color, boolean forceTint)", "code": "{\n\tif (forceTint) {\n\t\tdrawable.clearColorFilter();\n\t\tdrawable.mutate().setColorFilter(color, PorterDuff.Mode.SRC_IN);\n\t\tdrawable.invalidateSelf();\n\t\treturn drawable;\n\t}\n\tDrawable wrapDrawable = DrawableCompat.wrap(drawable).mutate();\n\tDrawableCompat.setTint(wrapDrawable, color);\n\treturn wrapDrawable;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Check if the status bar is translucent\n *\n * @param context Context\n * @return\n */\n", "func_signal": "public static boolean isTranslucentStatusBar(Context context)", "code": "{\n\tWindow w = unwrap(context).getWindow();\n\tWindowManager.LayoutParams lp = w.getAttributes();\n\tint flags = lp.flags;\n\tif ((flags & WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION) == WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Update bottom margin with animation\n */\n", "func_signal": "public static void updateBottomMargin(final View view, int fromMargin, int toMargin, int duration)", "code": "{\n\tValueAnimator animator = ValueAnimator.ofFloat(fromMargin, toMargin);\n\tanimator.setDuration(duration);\n\tanimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator valueAnimator) {\n\t\t\tfloat animatedValue = (float) valueAnimator.getAnimatedValue();\n\t\t\tif (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n\t\t\t\tViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n\t\t\t\tp.setMargins(p.leftMargin, p.topMargin, p.rightMargin, (int) animatedValue);\n\t\t\t\tview.requestLayout();\n\t\t\t}\n\t\t}\n\t});\n\tanimator.start();\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Constructor\n *\n * @param title    String\n * @param drawable Drawable\n */\n", "func_signal": "public AHBottomNavigationItem(String title, Drawable drawable)", "code": "{\n\tthis.title = title;\n\tthis.drawable = drawable;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigationItem.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * @param title    Title\n * @param resource Drawable resource\n * @param color    Background color\n */\n", "func_signal": "@Deprecated\npublic AHBottomNavigationItem(String title, @DrawableRes int resource, @ColorRes int color)", "code": "{\n\tthis.title = title;\n\tthis.drawableRes = resource;\n\tthis.color = color;\n}", "path": "ahbottomnavigation/ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigationItem.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * Called when a fragment will be displayed\n */\n", "func_signal": "public void willBeDisplayed()", "code": "{\n\t// Do what you want here, for example animate the content\n\tif (fragmentContainer != null) {\n\t\tAnimation fadeIn = AnimationUtils.loadAnimation(getActivity(), R.anim.fade_in);\n\t\tfragmentContainer.startAnimation(fadeIn);\n\t}\n}", "path": "ahbottomnavigation/demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoFragment.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "aurelhubert/ahbottomnavigation", "stars": 3848, "license": "None", "language": "java", "size": 5644}
{"docstring": "/**\n * \u6587\u4ef6\u662f\u5426\u5b58\u5728\n * @param path\n * @return\n */\n", "func_signal": "public static boolean fileIsExists(String path)", "code": "{\n    try {\n        File f = new File(path);\n        if (!f.exists()) {\n            return false;\n        }\n    } catch (Exception e) {\n\n        return false;\n    }\n    return true;\n}", "path": "AndroidFire/library/common/src/main/java/com/jaydenxiao/common/compressorutils/FileUtil.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u9012\u5f52\u521b\u5efa\u6587\u4ef6\u5939\n *\n * @param file\n * @return \u521b\u5efa\u5931\u8d25\u8fd4\u56de\"\"\n */\n", "func_signal": "public static String createFile(File file)", "code": "{\n    try {\n        if (file.getParentFile().exists()) {\n            LogUtils.i(\"----- \u521b\u5efa\u6587\u4ef6\" + file.getAbsolutePath());\n            file.createNewFile();\n            return file.getAbsolutePath();\n        } else {\n            createDir(file.getParentFile().getAbsolutePath());\n            file.createNewFile();\n            LogUtils.i(\"----- \u521b\u5efa\u6587\u4ef6\" + file.getAbsolutePath());\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return \"\";\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u8bf7\u6c42\u83b7\u53d6\u5217\u8868\u6570\u636e\n * @param type\n * @param id\n * @param startPage\n */\n", "func_signal": "@Override\npublic void getNewsListDataRequest(String type, String id, int startPage)", "code": "{\n     mRxManage.add(mModel.getNewsListData(type,id,startPage).subscribe(new RxSubscriber<List<NewsSummary>>(mContext,false) {\n         @Override\n         public void onStart() {\n             super.onStart();\n             mView.showLoading(mContext.getString(R.string.loading));\n         }\n\n         @Override\n         protected void _onNext(List<NewsSummary> newsSummaries) {\n             mView.returnNewsListData(newsSummaries);\n             mView.stopLoading();\n         }\n\n         @Override\n         protected void _onError(String message) {\n             mView.showErrorTip(message);\n         }\n     }));\n}", "path": "AndroidFire/app/src/main/java/com/jaydenxiao/androidfire/ui/news/presenter/NewsListPresenter.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\n *\n * @param filePath eg:/mnt/sdcard/demo.txt\n * @param content  \u5185\u5bb9\n */\n", "func_signal": "public static void writeFileSdcard(String filePath, String content, boolean isAppend)", "code": "{\n    try {\n        FileOutputStream fout = new FileOutputStream(filePath, isAppend);\n        byte[] bytes = content.getBytes();\n        fout.write(bytes);\n        fout.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u6587\u4ef6\u62f7\u8d1d\n *\n * @param src  \u6e90\u6587\u4ef6\n * @param desc \u76ee\u7684\u6587\u4ef6\n */\n", "func_signal": "public static void fileChannelCopy(File src, File desc)", "code": "{\n    FileInputStream fi = null;\n    FileOutputStream fo = null;\n    try {\n        fi = new FileInputStream(src);\n        fo = new FileOutputStream(desc);\n        FileChannel in = fi.getChannel();//\u5f97\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u901a\u9053\n        FileChannel out = fo.getChannel();//\u5f97\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u901a\u9053\n        in.transferTo(0, in.size(), out);//\u8fde\u63a5\u4e24\u4e2a\u901a\u9053\uff0c\u5e76\u4e14\u4ecein\u901a\u9053\u8bfb\u53d6\uff0c\u7136\u540e\u5199\u5165out\u901a\u9053\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if (fo != null) fo.close();\n            if (fi != null) fi.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u5185\u5bb9\n *\n * @param path\n * @return\n */\n", "func_signal": "public static String getFileOutputString(String path)", "code": "{\n    try {\n        BufferedReader bufferedReader = new BufferedReader(new FileReader(path), 8192);\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        while ((line = bufferedReader.readLine()) != null) {\n            sb.append(\"\\n\").append(line);\n        }\n        bufferedReader.close();\n        return sb.toString();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "//Get alpha color\n", "func_signal": "private static int calculateStatusBarColor(int color, int alpha)", "code": "{\n    float a = 1 - alpha / 255f;\n    int red = color >> 16 & 0xff;\n    int green = color >> 8 & 0xff;\n    int blue = color & 0xff;\n    red = (int) (red * a + 0.5);\n    green = (int) (green * a + 0.5);\n    blue = (int) (blue * a + 0.5);\n    return 0xff << 24 | red << 16 | green << 8 | blue;\n}", "path": "AndroidFire/library/common/src/main/java/com/jaydenxiao/common/commonwidget/StatusBarCompat.java", "commit_date": "2016-11-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u7f13\u5b58\u76ee\u5f55\n *\n * @return \u521b\u5efa\u5931\u8d25, \u8fd4\u56de\"\"\n */\n", "func_signal": "public static String getImageCachePath(Context context)", "code": "{\n    String path = createDir(createRootPath(context) + File.separator + \"img\" + File.separator);\n    return path;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * Get activity from context object\n *\n * @param context something\n * @return object of Activity or null if it is not Activity\n */\n", "func_signal": "public static Activity scanForActivity(Context context)", "code": "{\n    if (context == null) return null;\n\n    if (context instanceof Activity) {\n        return (Activity) context;\n    } else if (context instanceof ContextWrapper) {\n        return scanForActivity(((ContextWrapper) context).getBaseContext());\n    }\n\n    return null;\n}", "path": "AndroidFire/library/jcvideoplayer/src/main/java/fm/jiecao/jcvideoplayer_lib/JCUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u88c1\u526a\u7f13\u5b58\u76ee\u5f55\n *\n * @return \u521b\u5efa\u5931\u8d25, \u8fd4\u56de\"\"\n */\n", "func_signal": "public static String getImageCropCachePath(Context context)", "code": "{\n    String path = createDir(createRootPath(context) + File.separator + \"imgCrop\" + File.separator);\n    return path;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/***\n * \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d\n *\n * @param filename \u6587\u4ef6\u540d\n * @return\n */\n", "func_signal": "public static String getExtensionName(String filename)", "code": "{\n    if ((filename != null) && (filename.length() > 0)) {\n        int dot = filename.lastIndexOf('.');\n        if ((dot > -1) && (dot < (filename.length() - 1))) {\n            return filename.substring(dot + 1);\n        }\n    }\n    return filename;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u5220\u9664\u6307\u5b9a\u6587\u4ef6\uff0c\u5982\u679c\u662f\u6587\u4ef6\u5939\uff0c\u5219\u9012\u5f52\u5220\u9664\n *\n * @param file\n * @return\n * @throws IOException\n */\n", "func_signal": "public static boolean deleteFileOrDirectory(File file) throws IOException", "code": "{\n    try {\n        if (file != null && file.isFile()) {\n            return file.delete();\n        }\n        if (file != null && file.isDirectory()) {\n            File[] childFiles = file.listFiles();\n            // \u5220\u9664\u7a7a\u6587\u4ef6\u5939\n            if (childFiles == null || childFiles.length == 0) {\n                return file.delete();\n            }\n            // \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939\u4e0b\u7684\u5b50\u6587\u4ef6\n            for (int i = 0; i < childFiles.length; i++) {\n                deleteFileOrDirectory(childFiles[i]);\n            }\n            return file.delete();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u6253\u5f00Asset\u4e0b\u7684\u6587\u4ef6\n *\n * @param context\n * @param fileName\n * @return\n */\n", "func_signal": "public static InputStream openAssetFile(Context context, String fileName)", "code": "{\n    AssetManager am = context.getAssets();\n    InputStream is = null;\n    try {\n        is = am.open(fileName);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return is;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * Get AppCompatActivity from context\n *\n * @param context\n * @return AppCompatActivity if it's not null\n */\n", "func_signal": "public static AppCompatActivity getAppCompActivity(Context context)", "code": "{\n    if (context == null) return null;\n    if (context instanceof AppCompatActivity) {\n        return (AppCompatActivity) context;\n    } else if (context instanceof ContextThemeWrapper) {\n        return getAppCompActivity(((ContextThemeWrapper) context).getBaseContext());\n    }\n    return null;\n}", "path": "AndroidFire/library/jcvideoplayer/src/main/java/fm/jiecao/jcvideoplayer_lib/JCUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u83b7\u53d6Raw\u4e0b\u7684\u6587\u4ef6\u5185\u5bb9\n *\n * @param context\n * @param resId\n * @return \u6587\u4ef6\u5185\u5bb9\n */\n", "func_signal": "public static String getFileFromRaw(Context context, int resId)", "code": "{\n    if (context == null) {\n        return null;\n    }\n\n    StringBuilder s = new StringBuilder();\n    try {\n        InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));\n        BufferedReader br = new BufferedReader(in);\n        String line;\n        while ((line = br.readLine()) != null) {\n            s.append(line);\n        }\n        return s.toString();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u521b\u5efa\u6839\u7f13\u5b58\u76ee\u5f55\n *\n * @return\n */\n", "func_signal": "public static String createRootPath(Context context)", "code": "{\n    String cacheRootPath = \"\";\n    if (isSdCardAvailable()) {\n        // /sdcard/Android/data/<application package>/cache\n        cacheRootPath = context.getExternalCacheDir().getPath();\n    } else {\n        // /data/data/<application package>/cache\n        cacheRootPath = context.getCacheDir().getPath();\n    }\n    return cacheRootPath;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u8f6c\u6362\u6587\u4ef6\u5927\u5c0f\n *\n * @param fileLen \u5355\u4f4dB\n * @return\n */\n", "func_signal": "public static String formatFileSizeToString(long fileLen)", "code": "{\n    DecimalFormat df = new DecimalFormat(\"#.00\");\n    String fileSizeString = \"\";\n    if (fileLen < 1024) {\n        fileSizeString = df.format((double) fileLen) + \"B\";\n    } else if (fileLen < 1048576) {\n        fileSizeString = df.format((double) fileLen / 1024) + \"K\";\n    } else if (fileLen < 1073741824) {\n        fileSizeString = df.format((double) fileLen / 1048576) + \"M\";\n    } else {\n        fileSizeString = df.format((double) fileLen / 1073741824) + \"G\";\n    }\n    return fileSizeString;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * change to full screen mode\n * @param hideStatusBarBackground hide status bar alpha Background when SDK > 21, true if hide it\n */\n", "func_signal": "public static void translucentStatusBar(Activity activity, boolean hideStatusBarBackground)", "code": "{\n    Window window = activity.getWindow();\n    ViewGroup mContentView = (ViewGroup) activity.findViewById(Window.ID_ANDROID_CONTENT);\n\n    //set child View not fill the system window\n    View mChildView = mContentView.getChildAt(0);\n    if (mChildView != null) {\n        ViewCompat.setFitsSystemWindows(mChildView, false);\n    }\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        int statusBarHeight = getStatusBarHeight(activity);\n\n        //First translucent status bar.\n        window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            //After LOLLIPOP just set LayoutParams.\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n            if (hideStatusBarBackground) {\n                window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n                window.setStatusBarColor(COLOR_TRANSLUCENT);\n            } else {\n                window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT, DEFAULT_COLOR_ALPHA));\n            }\n            //must call requestApplyInsets, otherwise it will have space in screen bottom\n            if (mChildView != null) {\n                ViewCompat.requestApplyInsets(mChildView);\n            }\n        } else {\n            ViewGroup mDecorView = (ViewGroup) window.getDecorView();\n            if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {\n                mChildView = mDecorView.getChildAt(0);\n                //remove fake status bar view.\n                mContentView.removeView(mChildView);\n                mChildView = mContentView.getChildAt(0);\n                if (mChildView != null) {\n                    FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) mChildView.getLayoutParams();\n                    //cancel the margin top\n                    if (lp != null && lp.topMargin >= statusBarHeight) {\n                        lp.topMargin -= statusBarHeight;\n                        mChildView.setLayoutParams(lp);\n                    }\n                }\n                mDecorView.setTag(false);\n            }\n        }\n    }\n}", "path": "AndroidFire/library/common/src/main/java/com/jaydenxiao/common/commonwidget/StatusBarCompat.java", "commit_date": "2016-11-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * \u9012\u5f52\u521b\u5efa\u6587\u4ef6\u5939\n *\n * @param dirPath\n * @return \u521b\u5efa\u5931\u8d25\u8fd4\u56de\"\"\n */\n", "func_signal": "public static String createDir(String dirPath)", "code": "{\n    try {\n        File file = new File(dirPath);\n        if (file.getParentFile().exists()) {\n            LogUtils.i(\"----- \u521b\u5efa\u6587\u4ef6\u5939\" + file.getAbsolutePath());\n            file.mkdir();\n            return file.getAbsolutePath();\n        } else {\n            createDir(file.getParentFile().getAbsolutePath());\n            LogUtils.i(\"----- \u521b\u5efa\u6587\u4ef6\u5939\" + file.getAbsolutePath());\n            file.mkdir();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return dirPath;\n}", "path": "AndroidFire/library/photoPicker/src/main/java/com/yuyh/library/imgsel/utils/FileUtils.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "//Get status bar height\n", "func_signal": "public static int getStatusBarHeight(Context context)", "code": "{\n    int result = 0;\n    int resId = context.getResources().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");\n    if (resId > 0) {\n        result = context.getResources().getDimensionPixelOffset(resId);\n    }\n    return result;\n}", "path": "AndroidFire/library/common/src/main/java/com/jaydenxiao/common/commonwidget/StatusBarCompat.java", "commit_date": "2016-11-26 00:00:00", "repo_name": "jaydenxiao2016/AndroidFire", "stars": 2614, "license": "None", "language": "java", "size": 9822}
{"docstring": "/**\n * Adds {@link ContentResolverTypeMapping} for some type.\n *\n * @param type        type.\n * @param typeMapping mapping for type.\n * @param <T>         type.\n * @return builder.\n */\n", "func_signal": "@NonNull\npublic <T> CompleteBuilder addTypeMapping(@NonNull Class<T> type, @NonNull ContentResolverTypeMapping<T> typeMapping)", "code": "{\n    checkNotNull(type, \"Please specify type\");\n    checkNotNull(typeMapping, \"Please specify type mapping\");\n\n    if (this.typeMapping == null) {\n        this.typeMapping = new HashMap<Class<?>, ContentResolverTypeMapping<?>>();\n    }\n\n    this.typeMapping.put(type, typeMapping);\n\n    return this;\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Provides a scheduler on which {@link io.reactivex.Flowable} / {@link io.reactivex.Single}\n * or {@link io.reactivex.Completable} will be subscribed.\n * <p/>\n * @see com.pushtorefresh.storio3.operations.PreparedOperation#asRxFlowable(BackpressureStrategy)\n * @see com.pushtorefresh.storio3.operations.PreparedOperation#asRxSingle()\n * @see PreparedCompletableOperation#asRxCompletable()\n *\n * @return the scheduler or {@code null} if it isn't needed to apply it.\n */\n", "func_signal": "@NonNull\npublic CompleteBuilder defaultRxScheduler(@Nullable Scheduler defaultRxScheduler)", "code": "{\n    this.defaultRxScheduler = defaultRxScheduler;\n    return this;\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Optional: Specifies {@link DeleteResolver} for Delete Operation.\n * <p>\n * <p>\n * Can be set via {@link SQLiteTypeMapping},\n * If value is not set via {@link SQLiteTypeMapping}\n * or explicitly \u2014 exception will be thrown.\n *\n * @param deleteResolver {@link DeleteResolver} for Delete Operation.\n * @return builder.\n */\n", "func_signal": "@NonNull\npublic Builder<T> withDeleteResolver(@Nullable DeleteResolver<T> deleteResolver)", "code": "{\n    this.deleteResolver = deleteResolver;\n    return this;\n}", "path": "storio/storio-sqlite/src/main/java/com/pushtorefresh/storio3/sqlite/operations/delete/PreparedDeleteCollectionOfObjects.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@WorkerThread\n@SuppressLint(\"Recycle\")\n@NonNull\n@Override\npublic Cursor query(@NonNull Query query)", "code": "{\n    Cursor cursor = contentResolver.query(\n            query.uri(),\n            nullableArrayOfStringsFromListOfStrings(query.columns()),\n            nullableString(query.where()),\n            nullableArrayOfStringsFromListOfStrings(query.whereArgs()),\n            nullableString(query.sortOrder())\n    );\n\n    if (cursor == null) {\n        throw new IllegalStateException(\"Cursor returned by content provider is null\");\n    }\n\n    return cursor;\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Verifies behavior of {@link DefaultPutResolver} for \"update\"\n */\n", "func_signal": "@Test\npublic void update() throws Exception", "code": "{\n    final StorIOContentResolver storIOContentResolver = mock(StorIOContentResolver.class);\n    final StorIOContentResolver.LowLevel lowLevel = mock(StorIOContentResolver.LowLevel.class);\n    final TestItem testItem = new TestItem(1L); // item with some id, should be updated\n\n    when(storIOContentResolver.lowLevel())\n            .thenReturn(lowLevel);\n\n    final Query expectedQuery = Query.builder()\n            .uri(TestItem.CONTENT_URI)\n            .where(TestItem.COLUMN_ID + \" = ?\")\n            .whereArgs(testItem.getId())\n            .build();\n\n    final Cursor cursor = mock(Cursor.class);\n\n    when(lowLevel.query(eq(expectedQuery)))\n            .thenReturn(cursor);\n\n    when(cursor.getCount())\n            .thenReturn(1); // Some rows already in db -> update should be performed\n\n    final Integer expectedNumberOfRowsUpdated = 1;\n\n    when(lowLevel.update(any(UpdateQuery.class), any(ContentValues.class)))\n            .thenReturn(expectedNumberOfRowsUpdated);\n\n    final UpdateQuery expectedUpdateQuery = UpdateQuery.builder()\n            .uri(TestItem.CONTENT_URI)\n            .where(TestItem.COLUMN_ID + \" = ?\")\n            .whereArgs(testItem.getId())\n            .build();\n\n    final PutResolver<TestItem> putResolver = new DefaultPutResolver<TestItem>() {\n        @NonNull\n        @Override\n        protected InsertQuery mapToInsertQuery(@NonNull TestItem object) {\n            fail(\"Should not be called\");\n            return null;\n        }\n\n        @NonNull\n        @Override\n        protected UpdateQuery mapToUpdateQuery(@NonNull TestItem object) {\n            return UpdateQuery.builder()\n                    .uri(TestItem.CONTENT_URI)\n                    .where(TestItem.COLUMN_ID + \" = ?\")\n                    .whereArgs(object.getId())\n                    .build();\n        }\n\n        @NonNull\n        @Override\n        protected ContentValues mapToContentValues(@NonNull TestItem object) {\n            try {\n                return TestItem.MAP_TO_CONTENT_VALUES.apply(object);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    };\n\n    final ContentValues expectedContentValues = TestItem.MAP_TO_CONTENT_VALUES.apply(testItem);\n\n    // Performing Put that should \"update\"\n    final PutResult putResult = putResolver.performPut(storIOContentResolver, testItem);\n\n    // checks that it asks db for results\n    verify(lowLevel, times(1)).query(eq(expectedQuery));\n\n    // checks that cursor was closed\n    verify(cursor, times(1)).close();\n\n    // only one query should occur\n    verify(lowLevel, times(1)).query(any(Query.class));\n\n    // checks that required update was performed\n    verify(lowLevel, times(1)).update(eq(expectedUpdateQuery), eq(expectedContentValues));\n\n    // only one update should occur\n    verify(lowLevel, times(1)).update(any(UpdateQuery.class), any(ContentValues.class));\n\n    // no inserts should occur\n    verify(lowLevel, times(0)).insert(any(InsertQuery.class), any(ContentValues.class));\n\n    // put result checks\n    assertThat(putResult.wasInserted()).isFalse();\n    assertThat(putResult.wasUpdated()).isTrue();\n\n    assertThat(putResult.numberOfRowsUpdated()).isEqualTo(expectedNumberOfRowsUpdated);\n    assertThat(putResult.insertedUri()).isNull();\n}", "path": "storio/storio-content-resolver/src/test/java/com/pushtorefresh/storio3/contentresolver/operations/put/DefaultPutResolverTest.java", "commit_date": "2017-11-28 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@WorkerThread\n@Override\npublic int update(@NonNull UpdateQuery updateQuery, @NonNull ContentValues contentValues)", "code": "{\n    return contentResolver.update(\n            updateQuery.uri(),\n            contentValues,\n            nullableString(updateQuery.where()),\n            nullableArrayOfStringsFromListOfStrings(updateQuery.whereArgs())\n    );\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Optional: Specifies {@link TypeMappingFinder} for low level usage.\n *\n * @param typeMappingFinder non-null custom implementation of {@link TypeMappingFinder}.\n * @return builder.\n */\n", "func_signal": "@NonNull\npublic CompleteBuilder typeMappingFinder(@NonNull TypeMappingFinder typeMappingFinder)", "code": "{\n    checkNotNull(typeMappingFinder, \"Please specify typeMappingFinder\");\n\n    this.typeMappingFinder = typeMappingFinder;\n\n    return this;\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Checks that passed reference is not null,\n * throws {@link NullPointerException} with passed message if reference is null\n *\n * @param object  to check\n * @param message exception message if object is null\n */\n", "func_signal": "public static void checkNotNull(@Nullable Object object, @NonNull String message)", "code": "{\n    if (object == null) {\n        throw new NullPointerException(message);\n    }\n}", "path": "storio/storio-common/src/main/java/com/pushtorefresh/storio3/internal/Checks.java", "commit_date": "2017-11-28 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Prepares Delete Operation.\n *\n * @return {@link PreparedDeleteCollectionOfObjects}.\n */\n", "func_signal": "@NonNull\npublic PreparedDeleteCollectionOfObjects<T> prepare()", "code": "{\n    return new PreparedDeleteCollectionOfObjects<T>(\n            storIOSQLite,\n            objects,\n            deleteResolver,\n            useTransaction\n    );\n}", "path": "storio/storio-sqlite/src/main/java/com/pushtorefresh/storio3/sqlite/operations/delete/PreparedDeleteCollectionOfObjects.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "// We suggest to keep one instance of StorIO (SQLite or ContentResolver)\n// It's thread safe and so on, so just share it.\n// But if you need you can have multiple instances of StorIO\n// (SQLite or ContentResolver) with different settings such as type mapping, logging and so on.\n// But keep in mind that different instances of StorIOSQLite won't share notifications!\n", "func_signal": "@Provides\n@NonNull\n@Singleton\npublic StorIOSQLite provideStorIOSQLite(@NonNull SQLiteOpenHelper sqLiteOpenHelper)", "code": "{\n    final CarStorIOSQLitePutResolver carStorIOSQLitePutResolver = new CarStorIOSQLitePutResolver();\n    final CarStorIOSQLiteGetResolver carStorIOSQLiteGetResolver = new CarStorIOSQLiteGetResolver();\n\n    final PersonStorIOSQLitePutResolver personStorIOSQLitePutResolver = new PersonStorIOSQLitePutResolver();\n    final PersonStorIOSQLiteGetResolver personStorIOSQLiteGetResolver = new PersonStorIOSQLiteGetResolver();\n\n    final CarPersonRelationPutResolver carPersonRelationPutResolver = new CarPersonRelationPutResolver();\n\n    return DefaultStorIOSQLite.builder()\n            .sqliteOpenHelper(sqLiteOpenHelper)\n            .addTypeMapping(Tweet.class, new TweetSQLiteTypeMapping())\n            .addTypeMapping(User.class, new UserSQLiteTypeMapping())\n            .addTypeMapping(TweetWithUser.class, SQLiteTypeMapping.<TweetWithUser>builder()\n                    .putResolver(new TweetWithUserPutResolver())\n                    .getResolver(new TweetWithUserGetResolver())\n                    .deleteResolver(new TweetWithUserDeleteResolver())\n                    .build())\n\n            .addTypeMapping(Person.class, SQLiteTypeMapping.<Person>builder()\n                    .putResolver(new PersonRelationsPutResolver(carStorIOSQLitePutResolver, carPersonRelationPutResolver))\n                    .getResolver(new PersonRelationsGetResolver(carStorIOSQLiteGetResolver))\n                    .deleteResolver(new PersonRelationsDeleteResolver())\n                    .build())\n            .addTypeMapping(Car.class, SQLiteTypeMapping.<Car>builder()\n                    .putResolver(new CarRelationsPutResolver(personStorIOSQLitePutResolver, carPersonRelationPutResolver))\n                    .getResolver(new CarRelationsGetResolver(personStorIOSQLiteGetResolver))\n                    .deleteResolver(new CarRelationsDeleteResolver())\n\n                    .build()\n            )\n            .build();\n}", "path": "storio/storio-sample-app/src/main/java/com/pushtorefresh/storio3/sample/db/DbModule.java", "commit_date": "2017-11-28 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@WorkerThread\n@Override\npublic int delete(@NonNull DeleteQuery deleteQuery)", "code": "{\n    return contentResolver.delete(\n            deleteQuery.uri(),\n            nullableString(deleteQuery.where()),\n            nullableArrayOfStringsFromListOfStrings(deleteQuery.whereArgs())\n    );\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Builds new instance of {@link DefaultStorIOContentResolver}.\n *\n * @return new instance of {@link DefaultStorIOContentResolver}.\n */\n", "func_signal": "@NonNull\npublic DefaultStorIOContentResolver build()", "code": "{\n    if (contentObserverHandler == null) {\n        final HandlerThread handlerThread = new HandlerThread(\"StorIOContentResolverNotificationsThread\");\n        handlerThread.start(); // multithreading: don't block me, bro!\n        contentObserverHandler = new Handler(handlerThread.getLooper());\n    }\n\n    if (typeMappingFinder == null) {\n        typeMappingFinder = new TypeMappingFinderImpl();\n    }\n    if (typeMapping != null) {\n        typeMappingFinder.directTypeMapping(unmodifiableMap(typeMapping));\n    }\n\n    return new DefaultStorIOContentResolver(contentResolver, contentObserverHandler, typeMappingFinder, defaultRxScheduler, interceptors);\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\n@NonNull\npublic PrimitiveFields mapFromCursor(@NonNull StorIOContentResolver storIOContentResolver, @NonNull Cursor cursor)", "code": "{\n    PrimitiveFields object = new PrimitiveFields();\n\n    object.field1 = cursor.getInt(cursor.getColumnIndex(\"field1\")) == 1;\n    object.field2 = cursor.getShort(cursor.getColumnIndex(\"field2\"));\n    object.field3 = cursor.getInt(cursor.getColumnIndex(\"field3\"));\n    object.field4 = cursor.getLong(cursor.getColumnIndex(\"field4\"));\n    object.field5 = cursor.getFloat(cursor.getColumnIndex(\"field5\"));\n    object.field6 = cursor.getDouble(cursor.getColumnIndex(\"field6\"));\n    object.field7 = cursor.getString(cursor.getColumnIndex(\"field7\"));\n    object.field8 = cursor.getBlob(cursor.getColumnIndex(\"field8\"));\n\n    return object;\n}", "path": "storio/storio-content-resolver-annotations-processor-test/src/test/resources/PrimitiveFieldsStorIOContentResolverGetResolver.java", "commit_date": "2017-11-28 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\n@NonNull\npublic DeleteQuery mapToDeleteQuery(@NonNull BoxedTypesFields object)", "code": "{\n    return DeleteQuery.builder()\n        .table(\"table\")\n        .where(\"field4 = ?\")\n        .whereArgs(object.field4)\n        .build();\n}", "path": "storio/storio-sqlite-annotations-processor-test/src/test/resources/BoxedTypesFieldsStorIOSQLiteDeleteResolver.java", "commit_date": "2017-11-28 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"ConstantConditions\")\n@NonNull\n@Override\npublic Flowable<Changes> observeChangesOfUris(@NonNull final Set<Uri> uris, @NonNull BackpressureStrategy backpressureStrategy)", "code": "{\n    throwExceptionIfRxJava2IsNotAvailable(\"Observing changes in StorIOContentProvider\");\n\n    // indirect usage of RxJava\n    // required to avoid problems with ClassLoader when RxJava is not in ClassPath\n    return RxChangesObserver.observeChanges(contentResolver, uris, contentObserverHandler, Build.VERSION.SDK_INT, backpressureStrategy);\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Optional: Defines that Delete Operation will use transaction or not.\n * <p>\n * By default, transaction will be used.\n *\n * @param useTransaction {@code true} to use transaction, {@code false} to not.\n * @return builder.\n */\n", "func_signal": "@NonNull\npublic Builder<T> useTransaction(boolean useTransaction)", "code": "{\n    this.useTransaction = useTransaction;\n    return this;\n}", "path": "storio/storio-sqlite/src/main/java/com/pushtorefresh/storio3/sqlite/operations/delete/PreparedDeleteCollectionOfObjects.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Optional: Adds {@link Interceptor} to all database operation.\n * Multiple interceptors would be called in the order they were added.\n *\n * @param interceptor non-null custom implementation of {@link Interceptor}.\n * @return builder.\n */\n", "func_signal": "@NonNull\npublic CompleteBuilder addInterceptor(@NonNull Interceptor interceptor)", "code": "{\n    interceptors.add(interceptor);\n    return this;\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Verifies behavior of {@link DefaultPutResolver} for \"insert\"\n */\n", "func_signal": "@Test\npublic void insert() throws Exception", "code": "{\n    final StorIOContentResolver storIOContentResolver = mock(StorIOContentResolver.class);\n    final StorIOContentResolver.LowLevel lowLevel = mock(StorIOContentResolver.LowLevel.class);\n    final TestItem testItem = new TestItem(null); // item without id, should be inserted\n\n    when(storIOContentResolver.lowLevel())\n            .thenReturn(lowLevel);\n\n    final Uri expectedInsertedUri = mock(Uri.class);\n\n    final Query expectedQuery = Query.builder()\n            .uri(TestItem.CONTENT_URI)\n            .where(TestItem.COLUMN_ID + \" = ?\")\n            .whereArgs(testItem.getId())\n            .build();\n\n    final Cursor cursor = mock(Cursor.class);\n\n    when(lowLevel.query(eq(expectedQuery)))\n            .thenReturn(cursor);\n\n    when(cursor.getCount())\n            .thenReturn(0); // No results -> insert should be performed\n\n    when(lowLevel.insert(any(InsertQuery.class), any(ContentValues.class)))\n            .thenReturn(expectedInsertedUri);\n\n    final InsertQuery expectedInsertQuery = InsertQuery.builder()\n            .uri(TestItem.CONTENT_URI)\n            .build();\n\n    final PutResolver<TestItem> putResolver = new DefaultPutResolver<TestItem>() {\n        @NonNull\n        @Override\n        protected InsertQuery mapToInsertQuery(@NonNull TestItem object) {\n            return expectedInsertQuery;\n        }\n\n        @NonNull\n        @Override\n        protected UpdateQuery mapToUpdateQuery(@NonNull TestItem object) {\n            return UpdateQuery.builder()\n                    .uri(TestItem.CONTENT_URI)\n                    .where(TestItem.COLUMN_ID + \" = ?\")\n                    .whereArgs(object.getId())\n                    .build();\n        }\n\n        @NonNull\n        @Override\n        protected ContentValues mapToContentValues(@NonNull TestItem object) {\n            try {\n                return TestItem.MAP_TO_CONTENT_VALUES.apply(object);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    };\n\n    final ContentValues expectedContentValues = TestItem.MAP_TO_CONTENT_VALUES.apply(testItem);\n\n    // Performing Put that should \"insert\"\n    final PutResult putResult = putResolver.performPut(storIOContentResolver, testItem);\n\n    // checks that it asks db for results\n    verify(lowLevel).query(eq(expectedQuery));\n\n    // checks that cursor was closed\n    verify(cursor).close();\n\n    // only one query should occur\n    verify(lowLevel).query(any(Query.class));\n\n    // checks that required insert was performed\n    verify(lowLevel).insert(eq(expectedInsertQuery), eq(expectedContentValues));\n\n    // only one insert should occur\n    verify(lowLevel).insert(any(InsertQuery.class), any(ContentValues.class));\n\n    // no updates should occur\n    verify(lowLevel, never()).update(any(UpdateQuery.class), any(ContentValues.class));\n\n    // put result checks\n    assertThat(putResult.wasInserted()).isTrue();\n    assertThat(putResult.wasUpdated()).isFalse();\n\n    assertThat(putResult.insertedUri()).isEqualTo(expectedInsertedUri);\n    assertThat(putResult.numberOfRowsUpdated()).isNull();\n}", "path": "storio/storio-content-resolver/src/test/java/com/pushtorefresh/storio3/contentresolver/operations/put/DefaultPutResolverTest.java", "commit_date": "2017-11-28 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Checks that passed string is not null and not empty,\n * throws {@link NullPointerException} or {@link IllegalStateException} with passed message\n * if string is null or empty.\n *\n * @param value   a string to check\n * @param message exception message if object is null\n */\n", "func_signal": "public static void checkNotEmpty(@Nullable String value, @NonNull String message)", "code": "{\n    if (value == null) {\n        throw new NullPointerException(message);\n    } else if (value.length() == 0) {\n        throw new IllegalStateException(message);\n    }\n}", "path": "storio/storio-common/src/main/java/com/pushtorefresh/storio3/internal/Checks.java", "commit_date": "2017-11-28 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Required: Specifies {@link ContentResolver} for {@link StorIOContentResolver}.\n * <p>\n * You can get in from any {@link android.content.Context}\n * instance: {@code context.getContentResolver().\n * It's safe to use {@link android.app.Activity} as {@link android.content.Context}.\n *\n * @param contentResolver non-null instance of {@link ContentResolver}.\n * @return builder.\n */\n", "func_signal": "@NonNull\npublic CompleteBuilder contentResolver(@NonNull ContentResolver contentResolver)", "code": "{\n    checkNotNull(contentResolver, \"Please specify content resolver\");\n    return new CompleteBuilder(contentResolver);\n}", "path": "storio/storio-content-resolver/src/main/java/com/pushtorefresh/storio3/contentresolver/impl/DefaultStorIOContentResolver.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "pushtorefresh/storio", "stars": 2551, "license": "apache-2.0", "language": "java", "size": 4427}
{"docstring": "/**\n * Get the value of one of the fields.\n *\n * @param fieldName\n *     the field name. E.g \"PPid\", \"Uid\", \"Groups\".\n * @return The value of the field or {@code null}.\n */\n", "func_signal": "public String getValue(String fieldName)", "code": "{\n  String[] lines = content.split(\"\\n\");\n  for (String line : lines) {\n    if (line.startsWith(fieldName + \":\")) {\n      return line.split(fieldName + \":\")[1].trim();\n    }\n  }\n  return null;\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/models/Status.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u81ea\u52a8\u6839\u636e\u53c2\u6570\u9009\u62e9\u5224\u65ad\u524d\u540e\u53f0\u7684\u65b9\u6cd5\n *\n * @param context     \u4e0a\u4e0b\u6587\u53c2\u6570\n * @param packageName \u9700\u8981\u68c0\u67e5\u662f\u5426\u4f4d\u4e8e\u6808\u9876\u7684App\u7684\u5305\u540d\n * @return\n */\n", "func_signal": "public static boolean isForeground(Context context, int methodID, String packageName)", "code": "{\n    switch (methodID) {\n        case BKGMETHOD_GETRUNNING_TASK:\n            return getRunningTask(context, packageName);\n        case BKGMETHOD_GETRUNNING_PROCESS:\n            return getRunningAppProcesses(context, packageName);\n        case BKGMETHOD_GETAPPLICATION_VALUE:\n            return getApplicationValue((MyApplication) ((Service) context).getApplication());\n        case BKGMETHOD_GETUSAGESTATS:\n            return queryUsageStats(context, packageName);\n        case BKGMETHOD_GETACCESSIBILITYSERVICE:\n            return getFromAccessibilityService(context, packageName);\n        case BKGMETHOD_GETLINUXPROCESS:\n            return getLinuxCoreInfo(context, packageName);\n        default:\n            return false;\n    }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/BackgroundUtil.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * AndroidProcess constructor\n *\n * @param pid\n *     the process id\n * @throws IOException\n *     if /proc/[pid] does not exist or we don't have read access.\n */\n", "func_signal": "public AndroidProcess(int pid) throws IOException", "code": "{\n  this.pid = pid;\n  this.name = getProcessName(pid);\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/models/AndroidProcess.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * @return a list of all running app processes on the device.\n */\n", "func_signal": "public static List<AndroidAppProcess> getRunningAppProcesses()", "code": "{\n    List<AndroidAppProcess> processes = new ArrayList<>();\n    File[] files = new File(\"/proc\").listFiles();\n    for (File file : files) {\n        if (file.isDirectory()) {\n            int pid;\n            try {\n                pid = Integer.parseInt(file.getName());\n            } catch (NumberFormatException e) {\n                continue;\n            }\n            try {\n                processes.add(new AndroidAppProcess(pid));\n            } catch (AndroidAppProcess.NotAndroidAppProcessException ignored) {\n            } catch (IOException e) {\n                log(e, \"Error reading from /proc/%d.\", pid);\n                // System apps will not be readable on Android 5.0+ if SELinux is enforcing.\n                // You will need root access or an elevated SELinux context to read all files under /proc.\n            }\n        }\n    }\n    return processes;\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/ProcessManager.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * @return {@code true} if this process is in the foreground.\n */\n", "func_signal": "public static boolean isMyProcessInTheForeground()", "code": "{\n    List<AndroidAppProcess> processes = getRunningAppProcesses();\n    int myPid = android.os.Process.myPid();\n    for (AndroidAppProcess process : processes) {\n        if (process.pid == myPid && process.foreground) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/ProcessManager.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u6b64\u65b9\u6cd5\u7528\u6765\u5224\u65ad\u5f53\u524d\u5e94\u7528\u7684\u8f85\u52a9\u529f\u80fd\u670d\u52a1\u662f\u5426\u5f00\u542f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isAccessibilitySettingsOn(Context context)", "code": "{\n    int accessibilityEnabled = 0;\n    try {\n        accessibilityEnabled = Settings.Secure.getInt(context.getContentResolver(),\n                android.provider.Settings.Secure.ACCESSIBILITY_ENABLED);\n    } catch (Settings.SettingNotFoundException e) {\n        Log.d(\"wenming\", e.getMessage());\n    }\n\n    if (accessibilityEnabled == 1) {\n        String services = Settings.Secure.getString(context.getContentResolver(),\n                Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);\n        if (services != null) {\n            return services.toLowerCase().contains(context.getPackageName().toLowerCase());\n        }\n    }\n    return false;\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/DetectService.java", "commit_date": "2016-02-10 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * @return The process' GID or -1 if parsing the GID failed.\n */\n", "func_signal": "public int getGid()", "code": "{\n  try {\n    return Integer.parseInt(getValue(\"Gid\").split(\"\\\\s+\")[0]);\n  } catch (Exception e) {\n    return -1;\n  }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/models/Status.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * Read the contents of a file.\n *\n * @param path\n *     the absolute path to the file.\n * @return the contents of the file.\n * @throws IOException\n *     if an error occurred while reading.\n */\n", "func_signal": "protected static String readFile(String path) throws IOException", "code": "{\n  BufferedReader reader = null;\n  try {\n    StringBuilder output = new StringBuilder();\n    reader = new BufferedReader(new FileReader(path));\n    for (String line = reader.readLine(), newLine = \"\"; line != null; line = reader.readLine()) {\n      output.append(newLine).append(line);\n      newLine = \"\\n\";\n    }\n    return output.toString();\n  } finally {\n    if (reader != null) {\n      reader.close();\n    }\n  }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/models/ProcFile.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u76d1\u542c\u7a97\u53e3\u7126\u70b9,\u5e76\u4e14\u83b7\u53d6\u7126\u70b9\u7a97\u53e3\u7684\u5305\u540d\n *\n * @param event\n */\n", "func_signal": "@Override\npublic void onAccessibilityEvent(AccessibilityEvent event)", "code": "{\n    if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {\n        mForegroundPackageName = event.getPackageName().toString();\n    }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/DetectService.java", "commit_date": "2016-02-10 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * Send a log message if logging is enabled.\n *\n * @param error   An exception to log\n * @param message the message to log\n * @param args    list of arguments to pass to the formatter\n */\n", "func_signal": "public static void log(Throwable error, String message, Object... args)", "code": "{\n    if (loggingEnabled) {\n        Log.d(TAG, args.length == 0 ? message : String.format(message, args), error);\n    }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/ProcessManager.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * Send a log message if logging is enabled.\n *\n * @param message the message to log\n * @param args    list of arguments to pass to the formatter\n */\n", "func_signal": "public static void log(String message, Object... args)", "code": "{\n    if (loggingEnabled) {\n        Log.d(TAG, args.length == 0 ? message : String.format(message, args));\n    }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/ProcessManager.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u65b9\u6cd55\uff1a\u901a\u8fc7Android\u81ea\u5e26\u7684\u65e0\u969c\u788d\u529f\u80fd\uff0c\u76d1\u63a7\u7a97\u53e3\u7126\u70b9\u7684\u53d8\u5316\uff0c\u8fdb\u800c\u62ff\u5230\u5f53\u524d\u7126\u70b9\u7a97\u53e3\u5bf9\u5e94\u7684\u5305\u540d\n * \u5fc5\u987b\uff1a\n * 1. \u521b\u5efaACCESSIBILITY SERVICE INFO \u5c5e\u6027\u6587\u4ef6\n * 2. \u6ce8\u518c DETECTION SERVICE \u5230 ANDROIDMANIFEST.XML\n *\n * @param context\n * @param packageName\n * @return\n */\n", "func_signal": "public static boolean getFromAccessibilityService(Context context, String packageName)", "code": "{\n    if (DetectService.isAccessibilitySettingsOn(context) == true) {\n        DetectService detectService = DetectService.getInstance();\n        String foreground = detectService.getForegroundPackage();\n        Log.d(\"wenming\", \"**\u65b9\u6cd5\u4e94** \u5f53\u524d\u7a97\u53e3\u7126\u70b9\u5bf9\u5e94\u7684\u5305\u540d\u4e3a\uff1a =\" + foreground);\n        return packageName.equals(foreground);\n    } else {\n        Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n        Toast.makeText(context, R.string.accessbiliityNo, Toast.LENGTH_SHORT).show();\n        return false;\n    }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/BackgroundUtil.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * @return The process' UID or -1 if parsing the UID failed.\n */\n", "func_signal": "public int getUid()", "code": "{\n  try {\n    return Integer.parseInt(getValue(\"Uid\").split(\"\\\\s+\")[0]);\n  } catch (Exception e) {\n    return -1;\n  }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/models/Status.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u65b9\u6cd54\uff1a\u901a\u8fc7\u4f7f\u7528UsageStatsManager\u83b7\u53d6\uff0c\u6b64\u65b9\u6cd5\u662fndroid5.0A\u4e4b\u540e\u63d0\u4f9b\u7684API\n * \u5fc5\u987b\uff1a\n * 1. \u6b64\u65b9\u6cd5\u53ea\u5728android5.0\u4ee5\u4e0a\u6709\u6548\n * 2. AndroidManifest\u4e2d\u52a0\u5165\u6b64\u6743\u9650<uses-permission xmlns:tools=\"http://schemas.android.com/tools\" android:name=\"android.permission.PACKAGE_USAGE_STATS\"\n * tools:ignore=\"ProtectedPermissions\" />\n * 3. \u6253\u5f00\u624b\u673a\u8bbe\u7f6e\uff0c\u70b9\u51fb\u5b89\u5168-\u9ad8\u7ea7\uff0c\u5728\u6709\u6743\u67e5\u770b\u4f7f\u7528\u60c5\u51b5\u7684\u5e94\u7528\u4e2d\uff0c\u4e3a\u8fd9\u4e2aApp\u6253\u4e0a\u52fe\n *\n * @param context     \u4e0a\u4e0b\u6587\u53c2\u6570\n * @param packageName \u9700\u8981\u68c0\u67e5\u662f\u5426\u4f4d\u4e8e\u6808\u9876\u7684App\u7684\u5305\u540d\n * @return\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.LOLLIPOP)\npublic static boolean queryUsageStats(Context context, String packageName)", "code": "{\n    class RecentUseComparator implements Comparator<UsageStats> {\n        @Override\n        public int compare(UsageStats lhs, UsageStats rhs) {\n            return (lhs.getLastTimeUsed() > rhs.getLastTimeUsed()) ? -1 : (lhs.getLastTimeUsed() == rhs.getLastTimeUsed()) ? 0 : 1;\n        }\n    }\n    RecentUseComparator mRecentComp = new RecentUseComparator();\n    long ts = System.currentTimeMillis();\n    UsageStatsManager mUsageStatsManager = (UsageStatsManager) context.getSystemService(\"usagestats\");\n    List<UsageStats> usageStats = mUsageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_BEST, ts - 1000 * 10, ts);\n    if (usageStats == null || usageStats.size() == 0) {\n        if (HavaPermissionForTest(context) == false) {\n            Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n            Toast.makeText(context, \"\u6743\u9650\u4e0d\u591f\\n\u8bf7\u6253\u5f00\u624b\u673a\u8bbe\u7f6e\uff0c\u70b9\u51fb\u5b89\u5168-\u9ad8\u7ea7\uff0c\u5728\u6709\u6743\u67e5\u770b\u4f7f\u7528\u60c5\u51b5\u7684\u5e94\u7528\u4e2d\uff0c\u4e3a\u8fd9\u4e2aApp\u6253\u4e0a\u52fe\", Toast.LENGTH_SHORT).show();\n        }\n        return false;\n    }\n    Collections.sort(usageStats, mRecentComp);\n    String currentTopPackage = usageStats.get(0).getPackageName();\n    if (currentTopPackage.equals(packageName)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/BackgroundUtil.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u65b9\u6cd51\uff1a\u901a\u8fc7getRunningTasks\u5224\u65adApp\u662f\u5426\u4f4d\u4e8e\u524d\u53f0\uff0c\u6b64\u65b9\u6cd5\u57285.0\u4ee5\u4e0a\u5931\u6548\n *\n * @param context     \u4e0a\u4e0b\u6587\u53c2\u6570\n * @param packageName \u9700\u8981\u68c0\u67e5\u662f\u5426\u4f4d\u4e8e\u6808\u9876\u7684App\u7684\u5305\u540d\n * @return\n */\n", "func_signal": "public static boolean getRunningTask(Context context, String packageName)", "code": "{\n    ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n    ComponentName cn = am.getRunningTasks(1).get(0).topActivity;\n    return !TextUtils.isEmpty(packageName) && packageName.equals(cn.getPackageName());\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/BackgroundUtil.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u65b9\u6cd56\uff1a\u65e0\u610f\u4e2d\u770b\u5230\u4e4c\u4e91\u4e0a\u6709\u4eba\u63d0\u7684\u4e00\u4e2a\u6f0f\u6d1e\uff0cLinux\u7cfb\u7edf\u5185\u6838\u4f1a\u628aprocess\u8fdb\u7a0b\u4fe1\u606f\u4fdd\u5b58\u5728/proc\u76ee\u5f55\u4e0b\uff0c\u4f7f\u7528Shell\u547d\u4ee4\u53bb\u83b7\u53d6\u7684\u4ed6\uff0c\u518d\u6839\u636e\u8fdb\u7a0b\u7684\u5c5e\u6027\u5224\u65ad\u662f\u5426\u4e3a\u524d\u53f0\n *\n * @param packageName \u9700\u8981\u68c0\u67e5\u662f\u5426\u4f4d\u4e8e\u6808\u9876\u7684App\u7684\u5305\u540d\n */\n", "func_signal": "public static boolean getLinuxCoreInfo(Context context, String packageName)", "code": "{\n\n    List<AndroidAppProcess> processes = ProcessManager.getRunningForegroundApps(context);\n    for (AndroidAppProcess appProcess : processes) {\n        if (appProcess.getPackageName().equals(packageName) && appProcess.foreground) {\n            return true;\n        }\n    }\n    return false;\n\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/BackgroundUtil.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u6709\u7528\u6743\u9650\n *\n * @param context \u4e0a\u4e0b\u6587\u53c2\u6570\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.KITKAT)\nprivate static boolean HavaPermissionForTest(Context context)", "code": "{\n    try {\n        PackageManager packageManager = context.getPackageManager();\n        ApplicationInfo applicationInfo = packageManager.getApplicationInfo(context.getPackageName(), 0);\n        AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n        int mode = appOpsManager.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, applicationInfo.uid, applicationInfo.packageName);\n        return (mode == AppOpsManager.MODE_ALLOWED);\n    } catch (PackageManager.NameNotFoundException e) {\n        return true;\n    }\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/BackgroundUtil.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * Get a list of user apps running in the foreground.\n *\n * @param ctx the application context\n * @return a list of user apps that are in the foreground.\n */\n", "func_signal": "public static List<AndroidAppProcess> getRunningForegroundApps(Context ctx)", "code": "{\n    List<AndroidAppProcess> processes = new ArrayList<>();\n    File[] files = new File(\"/proc\").listFiles();\n    PackageManager pm = ctx.getPackageManager();\n    for (File file : files) {\n        if (file.isDirectory()) {\n            int pid;\n            try {\n                pid = Integer.parseInt(file.getName());\n            } catch (NumberFormatException e) {\n                continue;\n            }\n            try {\n                AndroidAppProcess process = new AndroidAppProcess(pid);\n                if (process.foreground\n                        // ignore system processes. First app user starts at 10000.\n                        && (process.uid < 1000 || process.uid > 9999)\n                        // ignore processes that are not running in the default app process.\n                        && !process.name.contains(\":\")\n                        // Ignore processes that the user cannot launch.\n                        && pm.getLaunchIntentForPackage(process.getPackageName()) != null) {\n                    processes.add(process);\n                }\n            } catch (AndroidAppProcess.NotAndroidAppProcessException ignored) {\n            } catch (IOException e) {\n                log(e, \"Error reading from /proc/%d.\", pid);\n                // System apps will not be readable on Android 5.0+ if SELinux is enforcing.\n                // You will need root access or an elevated SELinux context to read all files under /proc.\n            }\n        }\n    }\n    return processes;\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/ProcessManager.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * @return a list of <i>all</i> processes running on the device.\n */\n", "func_signal": "public static List<AndroidProcess> getRunningProcesses()", "code": "{\n    List<AndroidProcess> processes = new ArrayList<>();\n    File[] files = new File(\"/proc\").listFiles();\n    for (File file : files) {\n        if (file.isDirectory()) {\n            int pid;\n            try {\n                pid = Integer.parseInt(file.getName());\n            } catch (NumberFormatException e) {\n                continue;\n            }\n            try {\n                processes.add(new AndroidProcess(pid));\n            } catch (IOException e) {\n                log(e, \"Error reading from /proc/%d.\", pid);\n                // System apps will not be readable on Android 5.0+ if SELinux is enforcing.\n                // You will need root access or an elevated SELinux context to read all files under /proc.\n            }\n        }\n    }\n    return processes;\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/ProcessManager.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * Returns a list of application processes that are running on the device.\n * <p/>\n * <p><b>NOTE:</b> On Lollipop (SDK 22) this does not provide\n * {@link RunningAppProcessInfo#pkgList},\n * {@link RunningAppProcessInfo#importance},\n * {@link RunningAppProcessInfo#lru},\n * {@link RunningAppProcessInfo#importanceReasonCode},\n * {@link RunningAppProcessInfo#importanceReasonComponent},\n * {@link RunningAppProcessInfo#importanceReasonPid},\n * etc. If you need more process information try using\n * {@link #getRunningAppProcesses()} or {@link android.app.usage.UsageStatsManager}</p>\n *\n * @param ctx the application context\n * @return a list of RunningAppProcessInfo records, or null if there are no\n * running processes (it will not return an empty list).  This list ordering is not\n * specified.\n */\n", "func_signal": "public static List<RunningAppProcessInfo> getRunningAppProcessInfo(Context ctx)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {\n        List<AndroidAppProcess> runningAppProcesses = ProcessManager.getRunningAppProcesses();\n        List<RunningAppProcessInfo> appProcessInfos = new ArrayList<>();\n        for (AndroidAppProcess process : runningAppProcesses) {\n            RunningAppProcessInfo info = new RunningAppProcessInfo(process.name, process.pid, null);\n            info.uid = process.uid;\n            // TODO: Get more information about the process. pkgList, importance, lru, etc.\n            appProcessInfos.add(info);\n        }\n        return appProcessInfos;\n    }\n    ActivityManager am = (ActivityManager) ctx.getSystemService(Context.ACTIVITY_SERVICE);\n    return am.getRunningAppProcesses();\n}", "path": "AndroidProcess/library/src/main/java/com/wenming/library/processutil/ProcessManager.java", "commit_date": "2016-03-03 00:00:00", "repo_name": "wenmingvs/AndroidProcess", "stars": 2769, "license": "apache-2.0", "language": "java", "size": 11122}
{"docstring": "/**\n * Inserts a new {@link PortabilityJob} keyed by its job ID in the store.\n *\n * <p>To update an existing {@link PortabilityJob} instead, use {@link JobStore#update}.\n *\n * @throws IOException if a job already exists for {@code job}'s ID, or if there was a different\n *     problem inserting the job.\n */\n", "func_signal": "@Override\npublic void createJob(UUID jobId, PortabilityJob job) throws IOException", "code": "{\n  Preconditions.checkNotNull(jobId);\n  monitor.debug(() -> format(\"Creating job %s in local storage\", jobId));\n  if (JOB_MAP.get(jobId) != null) {\n    throw new IOException(\"An entry already exists for jobId: \" + jobId);\n  }\n  JOB_MAP.put(jobId, job.toMap());\n}", "path": "data-transfer-project/extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "// Store any album data in the cache because Flickr only allows you to create an album with a\n// photo in it, so we have to wait for the first photo to create the album\n", "func_signal": "private void storeAlbumbs(UUID jobId, Collection<PhotoAlbum> albums) throws IOException", "code": "{\n  for (PhotoAlbum album : albums) {\n    jobStore.create(\n        jobId,\n        ORIGINAL_ALBUM_PREFIX + album.getId(),\n        new FlickrTempPhotoData(album.getName(), album.getDescription()));\n  }\n}", "path": "data-transfer-project/extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporter.java", "commit_date": "2020-05-04 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Registers a LoggingDtpInternalMetricRecorder in the {@link ExtensionContext} if there is not\n * another {@link DtpInternalMetricRecorder} registered.\n **/\n", "func_signal": "public static void registerRecorderIfNeeded(ExtensionContext context)", "code": "{\n  if (context.getService(DtpInternalMetricRecorder.class) == null) {\n    context.registerService(\n        DtpInternalMetricRecorder.class,\n        new LoggingDtpInternalMetricRecorder(context.getMonitor()));\n  }\n}", "path": "data-transfer-project/portability-api-launcher/src/main/java/org/datatransferproject/launcher/metrics/LoggingDtpInternalMetricRecorder.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "// Request an upload session to the OneDrive api so that we can upload chunks\n// to the returned URL\n", "func_signal": "private String createUploadSession(PhotoModel photo, IdempotentImportExecutor idempotentImportExecutor) throws\n        IOException, CopyExceptionWithFailureReason", "code": "{\n\n  // Forming the URL to create an upload session\n  String createSessionUrl;\n  if (Strings.isNullOrEmpty(photo.getAlbumId())) {\n    createSessionUrl = String.format(albumlessPhotoUrlTemplate, photo.getTitle(), UPLOAD_PARAMS);\n\n  } else {\n    String oneDriveFolderId = idempotentImportExecutor.getCachedValue(photo.getAlbumId());\n    createSessionUrl =\n      String.format(\n        uploadPhotoUrlTemplate, oneDriveFolderId, photo.getTitle(), UPLOAD_PARAMS);\n  }\n\n  // create upload session\n  // POST to /me/drive/items/{folder_id}:/{file_name}:/createUploadSession OR /me/drive/items/root:/Photos/{file_name}:/createUploadSession\n  // get {uploadurl} from response\n  Request.Builder createSessionRequestBuilder = new Request.Builder().url(createSessionUrl);\n\n  // Auth headers\n  createSessionRequestBuilder.header(\"Authorization\", \"Bearer \" + credential.getAccessToken());\n  createSessionRequestBuilder.header(\"Content-Type\", \"application/json\");\n\n  // Post request with empty body. If you don't include an empty body, you'll have problems\n  createSessionRequestBuilder.post(\n    RequestBody.create(\n      MediaType.parse(\"application/json\"), objectMapper.writeValueAsString(ImmutableMap.of())));\n\n  // Make the call, we should get an upload url for photo data in a 200 response\n  Response response = client.newCall(createSessionRequestBuilder.build()).execute();\n  int code = response.code();\n  ResponseBody responseBody = response.body();\n\n  // If there was an unauthorized error, then try refreshing the creds\n  if (code == 401) {\n    this.credentialFactory.refreshCredential(credential);\n    monitor.info(() -> \"Refreshed authorization token successfuly\");\n\n    createSessionRequestBuilder.header(\"Authorization\", \"Bearer \" + credential.getAccessToken());\n    Response newResponse = client.newCall(createSessionRequestBuilder.build()).execute();\n    code = newResponse.code();\n    responseBody = newResponse.body();\n  }\n\n  if (code == 403 && response.message().contains(\"Access Denied\")) {\n    throw new PermissionDeniedException(\n        \"User access to Microsoft One Drive was denied\",\n        new IOException(\n            String.format(\"Got error code %d  with message: %s\", code, response.message())));\n  } else if (code == 507 && response.message().contains(\"Insufficient Storage\")) {\n    throw new DestinationMemoryFullException(\n        \"Microsoft destination storage limit reached\",\n        new IOException(\n            String.format(\"Got error code %d  with message: %s\", code, response.message())));\n  } else if (code < 200 || code > 299) {\n    throw new IOException(\n        String.format(\n            \"Got error code: %s\\n\"\n                + \"message: %s\\n\"\n                + \"body: %s\\n\"\n                + \"request url: %s\\n\"\n                + \"bearer token: %s\\n\"\n                + \" photo: %s\\n\", // For debugging 404s on upload\n            code,\n            response.message(),\n            response.body().string(),\n            createSessionUrl,\n            credential.getAccessToken(),\n            photo));\n  } else if (code != 200) {\n    monitor.info(() -> String.format(\"Got an unexpected non-200, non-error response code\"));\n  }\n  // make sure we have a non-null response body\n  Preconditions.checkState(\n      responseBody != null, \"Got Null Body when creating photo upload session %s\", photo);\n  // convert to a map\n  final Map<String, Object> responseData = objectMapper.readValue(responseBody.bytes(), Map.class);\n  // return the session's upload url\n  Preconditions.checkState(responseData.containsKey(\"uploadUrl\"), \"No uploadUrl :(\");\n  return (String) responseData.get(\"uploadUrl\");\n}", "path": "data-transfer-project/extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java", "commit_date": "2020-08-17 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "// TODO(data-transfer-project/issues/43): Make this an integration test which uses both the API\n// and transfer worker, rather than simulating API calls, in case this test ever diverges from\n// what the API actually does.\n", "func_signal": "@Test\npublic void pollingLifeCycle() throws Exception", "code": "{\n\n  when(asymmetricKeyGenerator.generate()).thenReturn(TEST_KEY_PAIR);\n  // Initial state\n  assertThat(JobMetadata.isInitialized()).isFalse();\n\n  // Run once with no data in the database\n  jobPollingService.runOneIteration();\n  assertThat(JobMetadata.isInitialized()).isFalse();\n  PortabilityJob job = store.findJob(TEST_ID);\n  assertThat(job).isNull(); // No existing ready job\n\n  // API inserts an job in initial authorization state\n  job =\n      PortabilityJob.builder()\n          .setTransferDataType(\"photo\")\n          .setExportService(\"DummyExportService\")\n          .setImportService(\"DummyImportService\")\n          .setAndValidateJobAuthorization(\n              JobAuthorization.builder()\n                  .setEncryptionScheme(\"cleartext\")\n                  .setState(State.INITIAL)\n                  .setSessionSecretKey(\"fooBar\")\n                  .build())\n          .build();\n  store.createJob(TEST_ID, job);\n\n  // Verify initial authorization state\n  job = store.findJob(TEST_ID);\n  assertThat(job.jobAuthorization().state()).isEqualTo(State.INITIAL);\n  // no auth data should exist yet\n  assertThat(job.jobAuthorization().encryptedAuthData()).isNull();\n\n  // API atomically updates job to from 'initial' to 'creds available'\n  job =\n      job.toBuilder()\n          .setAndValidateJobAuthorization(\n              job.jobAuthorization().toBuilder().setState(State.CREDS_AVAILABLE).build())\n          .build();\n  store.updateJobAuthStateToCredsAvailable(TEST_ID);\n\n  // Verify 'creds available' state\n  job = store.findJob(TEST_ID);\n  assertThat(job.jobAuthorization().state()).isEqualTo(State.CREDS_AVAILABLE);\n  // no auth data should exist yet\n  assertThat(job.jobAuthorization().encryptedAuthData()).isNull();\n\n  // Worker initiates the JobPollingService\n  jobPollingService.runOneIteration();\n  assertThat(JobMetadata.isInitialized()).isTrue();\n  assertThat(JobMetadata.getJobId()).isEqualTo(TEST_ID);\n\n  // Verify assigned without auth data state\n  job = store.findJob(TEST_ID);\n  assertThat(job.jobAuthorization().state())\n      .isEqualTo(JobAuthorization.State.CREDS_ENCRYPTION_KEY_GENERATED);\n  assertThat(job.jobAuthorization().authPublicKey()).isNotEmpty();\n\n  // Client encrypts data and updates the job\n  job =\n      job.toBuilder()\n          .setAndValidateJobAuthorization(\n              job.jobAuthorization()\n                  .toBuilder()\n                  .setEncryptedAuthData(\"dummy export data\")\n                  .setState(State.CREDS_STORED)\n                  .build())\n          .build();\n  store.updateJobWithCredentials(TEST_ID, job);\n\n  // Run another iteration of the polling service\n  // Worker should pick up encrypted data and update job\n  jobPollingService.runOneIteration();\n  job = store.findJob(TEST_ID);\n  JobAuthorization jobAuthorization = job.jobAuthorization();\n  assertThat(jobAuthorization.state()).isEqualTo(JobAuthorization.State.CREDS_STORED);\n  assertThat(jobAuthorization.encryptedAuthData()).isNotEmpty();\n\n  store.remove(TEST_ID);\n}", "path": "data-transfer-project/portability-transfer/src/test/java/org/datatransferproject/transfer/JobPollingServiceTest.java", "commit_date": "2019-12-05 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "// For descriptions of scopes see: https://developers.deezer.com/api/permissions\n", "func_signal": "@Override\npublic Map<String, Set<String>> getExportScopes()", "code": "{\n  return ImmutableMap.<String, Set<String>>builder()\n      .put(\"PLAYLISTS\", ImmutableSet.of(\"offline_access,manage_library\"))\n      .build();\n}", "path": "data-transfer-project/extensions/auth/portability-auth-deezer/src/main/java/org/datatransferproject/auth/deezer/DeezerOAuthConfig.java", "commit_date": "2019-02-25 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "// Uploads a single DataChunk to an upload URL\n// PUT to {photoUploadUrl}\n// HEADERS\n// Content-Length: {chunk size in bytes}\n// Content-Range: bytes {begin}-{end}/{total size}\n// body={bytes}\n", "func_signal": "private Response uploadChunk(DataChunk chunk, String photoUploadUrl, int totalFileSize, String mediaType)\n        throws IOException, DestinationMemoryFullException", "code": "{\n\n  Request.Builder uploadRequestBuilder = new Request.Builder().url(photoUploadUrl);\n  uploadRequestBuilder.header(\"Authorization\", \"Bearer \" + credential.getAccessToken());\n\n  // put chunk data in\n  RequestBody uploadChunkBody = RequestBody.create(MediaType.parse(mediaType), chunk.getData(), 0, chunk.getSize());\n  uploadRequestBuilder.put(uploadChunkBody);\n\n  // set chunk data headers, indicating size and chunk range\n  final String contentRange =\n      String.format(\"bytes %d-%d/%d\", chunk.getStart(), chunk.getEnd(), totalFileSize);\n  uploadRequestBuilder.header(\"Content-Range\", contentRange);\n  uploadRequestBuilder.header(\"Content-Length\", String.format(\"%d\", chunk.getSize()));\n\n  // upload the chunk\n  Response chunkResponse = client.newCall(uploadRequestBuilder.build()).execute();\n  Preconditions.checkNotNull(chunkResponse, \"chunkResponse is null\");\n  if (chunkResponse.code() == 401) {\n    // If there was an unauthorized error, then try refreshing the creds\n    credentialFactory.refreshCredential(credential);\n    monitor.info(() -> \"Refreshed authorization token successfuly\");\n\n    // update auth info, reupload chunk\n    uploadRequestBuilder.header(\"Authorization\", \"Bearer \" + credential.getAccessToken());\n    chunkResponse = client.newCall(uploadRequestBuilder.build()).execute();\n  }\n  int chunkCode = chunkResponse.code();\n  if (chunkCode == 507 && chunkResponse.message().contains(\"Insufficient Storage\")) {\n    throw new DestinationMemoryFullException(\n        \"Microsoft destination storage limit reached\",\n        new IOException(\n            String.format(\n                \"Got error code %d  with message: %s\", chunkCode, chunkResponse.message())));\n  } else if (chunkCode < 200 || chunkCode > 299) {\n    throw new IOException(\n        \"Got error code: \"\n            + chunkCode\n            + \" message: \"\n            + chunkResponse.message()\n            + \" body: \"\n            + chunkResponse.body().string());\n  } else if (chunkCode == 200 || chunkCode == 201 || chunkCode == 202) {\n    monitor.info(\n        () ->\n            String.format(\n                \"Uploaded chunk %s-%s successfuly, code %d\",\n                chunk.getStart(), chunk.getEnd(), chunkCode));\n  }\n  return chunkResponse;\n}", "path": "data-transfer-project/extensions/data-transfer/portability-data-transfer-microsoft/src/main/java/org/datatransferproject/transfer/microsoft/photos/MicrosoftPhotosImporter.java", "commit_date": "2020-08-17 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Finds the ID of the first {@link PortabilityJob} in state {@code jobState} in the map, or null\n * if none found.\n */\n", "func_signal": "@Override\npublic synchronized UUID findFirst(JobAuthorization.State jobState)", "code": "{\n  // Mimic an index lookup\n  for (Entry<UUID, Map<String, Object>> job : JOB_MAP.entrySet()) {\n    Map<String, Object> properties = job.getValue();\n    State state = State.valueOf(properties.get(PortabilityJob.AUTHORIZATION_STATE).toString());\n    UUID jobKey = job.getKey();\n    monitor.debug(\n        () ->\n            format(\n                \"Looking up first job in state %s: found job %s (state %s)\",\n                jobState, jobKey, state));\n    if (state == jobState) {\n      return jobKey;\n    }\n  }\n  return null;\n}", "path": "data-transfer-project/extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Verifies a {@code PortabilityJob} already exists for {@code jobId}, and updates the entry to\n * {@code job}. If {@code validator} is non-null, validator.validate() is called first, as part of\n * the atomic update.\n *\n * @throws IOException if a job didn't already exist for {@code jobId} or there was a problem\n *     updating it\n * @throws IllegalStateException if validator.validate() failed\n */\n", "func_signal": "@Override\nprotected synchronized void updateJob(\n    UUID jobId, PortabilityJob job, JobUpdateValidator validator) throws IOException", "code": "{\n  Preconditions.checkNotNull(jobId);\n  try {\n    Map<String, Object> previousEntry = JOB_MAP.replace(jobId, job.toMap());\n    if (previousEntry == null) {\n      throw new IOException(\"jobId: \" + jobId + \" didn't exist in the map\");\n    }\n    if (validator != null) {\n      PortabilityJob previousJob = PortabilityJob.fromMap(previousEntry);\n      validator.validate(previousJob, job);\n    }\n  } catch (NullPointerException | IllegalStateException e) {\n    throw new IOException(\"Couldn't update jobId: \" + jobId, e);\n  }\n}", "path": "data-transfer-project/extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Gets an input stream to an image, given its URL. Used by {@link FlickrPhotosImporter} to\n * upload the image.\n */\n", "func_signal": "public BufferedInputStream get(String urlStr) throws IOException", "code": "{\n  URL url = new URL(urlStr);\n  HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n  conn.connect();\n  return new BufferedInputStream(conn.getInputStream());\n}", "path": "data-transfer-project/extensions/data-transfer/portability-data-transfer-flickr/src/main/java/org/datatransferproject/datatransfer/flickr/photos/FlickrPhotosImporter.java", "commit_date": "2020-05-04 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Transfers data from the given {@code exporter} optionally starting at the point specified in\n * the provided {@code exportInfo}. Imports the data using the provided {@code importer}. If there\n * is more data to required to be exported, recursively copies using the specific {@link\n * ExportInformation} to continue the process.\n *\n * @param exportAuthData The auth data for the export\n * @param importAuthData The auth data for the import\n * @param exportInfo Any pagination or resource information to use for subsequent calls.\n */\n", "func_signal": "private Collection<ErrorDetail> copyHelper(\n    AuthData exportAuthData,\n    AuthData importAuthData,\n    UUID jobId,\n    Optional<ExportInformation> exportInfo)\n    throws CopyException", "code": "{\n\n  String jobIdPrefix = \"Job \" + jobId + \": \";\n  final int copyIteration = COPY_ITERATION_COUNTER.incrementAndGet();\n\n  // NOTE: order is important below, do the import of all the items, then do continuation\n  // then do sub resources, this ensures all parents are populated before children get\n  // processed.\n\n  ExportResult<?> exportResult =\n      copyIteration(\n          jobId, exportAuthData, importAuthData, exportInfo, jobIdPrefix, copyIteration);\n\n  // Import and Export were successful, determine what to do next\n  ContinuationData continuationData = exportResult.getContinuationData();\n\n  if (null != continuationData) {\n    // Process the next page of items for the resource\n    if (null != continuationData.getPaginationData()) {\n      monitor.debug(\n          () ->\n              jobIdPrefix\n                  + \"Starting off a new copy iteration with pagination info, copy iteration: \"\n                  + copyIteration);\n      copyHelper(\n          exportAuthData,\n          importAuthData,\n          jobId,\n          Optional.of(\n              new ExportInformation(\n                  continuationData.getPaginationData(),\n                  exportInfo.isPresent() ? exportInfo.get().getContainerResource() : null)));\n    }\n\n    // Start processing sub-resources\n    if (continuationData.getContainerResources() != null\n        && !continuationData.getContainerResources().isEmpty()) {\n      for (ContainerResource resource : continuationData.getContainerResources()) {\n        monitor.debug(\n            () ->\n                jobIdPrefix\n                    + \"Starting off a new copy iteration with a new container resource, copy iteration: \"\n                    + copyIteration);\n        copyHelper(\n            exportAuthData,\n            importAuthData,\n            jobId,\n            Optional.of(new ExportInformation(null, resource)));\n      }\n    }\n  }\n  return idempotentImportExecutor.getErrors();\n}", "path": "data-transfer-project/portability-transfer/src/main/java/org/datatransferproject/transfer/copier/PortabilityInMemoryDataCopier.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Ctor.\n *\n * @param type the result type\n */\n", "func_signal": "public ExportResult(ResultType type)", "code": "{\n  verifyNonErrorResultType(type);\n  this.type = type;\n}", "path": "data-transfer-project/portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/ExportResult.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * The {@code id} is used to associate videos with this album. *\n */\n", "func_signal": "@JsonCreator\npublic VideoAlbum(\n        @JsonProperty(\"id\") String id,\n        @JsonProperty(\"name\") String name,\n        @JsonProperty(\"description\") String description)", "code": "{\n  Preconditions.checkNotNull(id);\n  this.id = id;\n  this.name = name;\n  this.description = description;\n}", "path": "data-transfer-project/portability-types-common/src/main/java/org/datatransferproject/types/common/models/videos/VideoAlbum.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Ctor.\n *\n * @param type the result type\n * @param exportedData the exported data\n */\n", "func_signal": "public ExportResult(ResultType type, T exportedData)", "code": "{\n  verifyNonErrorResultType(type);\n  this.type = type;\n  this.exportedData = exportedData;\n}", "path": "data-transfer-project/portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/ExportResult.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Tries to call the {@link Callable} given the class's {@link RetryStrategyLibrary}.\n *\n * @return Whatever is returned by the {@link Callable}.\n */\n", "func_signal": "@Override\npublic T call() throws RetryException", "code": "{\n  while (true) {\n    Instant start = clock.instant();\n    attempts++;\n    try {\n      monitor.debug(\n          () ->\n              String.format(\n                  \"Attempt %d started, service: %s, dataType: %s\",\n                  attempts, service, dataType));\n      return callable.call();\n    } catch (Exception e) {\n      mostRecentException = e;\n      monitor.info(() -> \"RetryingCallable caught an exception\", e);\n      long elapsedMillis = Duration.between(start, clock.instant()).toMillis();\n      // TODO: do we want to reset anything (eg, number of retries) if we see a different\n      // RetryStrategy?\n      RetryStrategy strategy = retryStrategyLibrary.checkoutRetryStrategy(e);\n      monitor.debug(\n          () ->\n              String.format(\n                  \"Attempt %d failed, using retry strategy: %s, service: %s, dataType: %s\",\n                  attempts, strategy.toString(), service, dataType));\n      if (strategy.canTryAgain(attempts)) {\n        long nextAttemptIntervalMillis =\n            strategy.getRemainingIntervalMillis(attempts, elapsedMillis);\n        monitor.debug(\n            () ->\n                String.format(\n                    \"Strategy has %d remainingIntervalMillis after %d elapsedMillis\",\n                    nextAttemptIntervalMillis, elapsedMillis));\n        if (nextAttemptIntervalMillis > 0L) {\n          try {\n            Thread.sleep(nextAttemptIntervalMillis);\n            // wait is now complete, retry\n          } catch (InterruptedException ie) {\n            currentThread().interrupt();\n            throw new RetryException(attempts, mostRecentException);\n          }\n        }\n      } else {\n        monitor.debug(\n            () ->\n                String.format(\"Strategy canTryAgain returned false after %d retries\", attempts));\n        throw new RetryException(attempts, mostRecentException);\n      }\n    }\n  }\n}", "path": "data-transfer-project/portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/retry/RetryingCallable.java", "commit_date": "2020-06-15 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Removes the {@link PortabilityJob} keyed by {@code jobId} in the map.\n *\n * @throws IOException if the job doesn't exist, or there was a different problem deleting it.\n */\n", "func_signal": "@Override\npublic void remove(UUID jobId) throws IOException", "code": "{\n  monitor.debug(() -> format(\"Remove job %s from local storage\", jobId));\n  Map<String, Object> previous = JOB_MAP.remove(jobId);\n  if (previous == null) {\n    throw new IOException(\"jobId: \" + jobId + \" didn't exist in the map\");\n  }\n}", "path": "data-transfer-project/extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Returns the best {@link RetryStrategy} for a given Throwable.  If there are no matches, returns\n * the default RetryStrategy.\n *\n * Right now it just looks at the message in the Throwable and tries to find a matching regex in\n * its internal library.  Later on it will use more and more of the Throwable to make a decision.\n */\n", "func_signal": "public RetryStrategy checkoutRetryStrategy(Throwable throwable)", "code": "{\n  // TODO: determine retry strategy based on full information in Throwable\n  for (RetryMapping mapping : retryMappings) {\n    if (mapping.matchesThrowable(throwable)) {\n      return mapping.getStrategy();\n    }\n  }\n  return defaultRetryStrategy;\n}", "path": "data-transfer-project/portability-types-transfer/src/main/java/org/datatransferproject/types/transfer/retry/RetryStrategyLibrary.java", "commit_date": "2019-09-13 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Ctor.\n *\n * @param throwable the throwable from execution\n */\n", "func_signal": "public ExportResult(Throwable throwable)", "code": "{\n  this.type = ResultType.ERROR;\n  this.throwable = Optional.of(throwable);\n}", "path": "data-transfer-project/portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/ExportResult.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Ctor.\n *\n * @param type the result type\n * @param exportedData the exported data\n * @param continuationData continuation information\n */\n", "func_signal": "public ExportResult(ResultType type, T exportedData, ContinuationData continuationData)", "code": "{\n  verifyNonErrorResultType(type);\n  this.type = type;\n  this.exportedData = exportedData;\n  this.continuationData = continuationData;\n}", "path": "data-transfer-project/portability-spi-transfer/src/main/java/org/datatransferproject/spi/transfer/provider/ExportResult.java", "commit_date": "2018-11-15 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "/**\n * Returns the job for the id or null if not found.\n *\n * @param jobId the job id\n */\n", "func_signal": "@Override\npublic PortabilityJob findJob(UUID jobId)", "code": "{\n  if (!JOB_MAP.containsKey(jobId)) {\n    return null;\n  }\n  return PortabilityJob.fromMap(JOB_MAP.get(jobId));\n}", "path": "data-transfer-project/extensions/cloud/portability-cloud-local/src/main/java/org/datatransferproject/cloud/local/LocalJobStore.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "google/data-transfer-project", "stars": 3538, "license": "apache-2.0", "language": "java", "size": 10346}
{"docstring": "// A key Generator and a single value:\n", "func_signal": "public MapData(Generator<K> genK, V value, int quantity)", "code": "{\n  for(int i = 0; i < quantity; i++) {\n    put(genK.next(), value);\n  }\n}", "path": "learning-note/src/main/java/com/learning/concurrent/performance/collection/other/MapData.java", "commit_date": "2020-07-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u957f\u671f\u5b58\u6d3b\u5bf9\u8c61\u8fdb\u5165\u8001\u5e74\u4ee3\n *\n * -XX:+UseSerialGC -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=1 -XX:+PrintTenuringDistribution\n * Eden\u4e3a8M\uff0c\u5f53\u5206\u914dallocation3 = new byte[4* _1MB]\uff0c\u89e6\u53d1minor GC\uff0callocation1\u8fdb\u5165\u5230Survivor\u7a7a\u95f4\u4e2d\n * \u7b2c\u4e8c\u6b21allocation3 = new byte[4* _1MB]\uff0c\u518d\u6b21\u89e6\u53d1minor GC \u65e7\u76844M\u5bf9\u8c61\u88ab\u56de\u6536\uff0c\u56e0\u4e3aMaxTenuringThreshold\u8bbe\u7f6e\u4e3a1\uff0callocation1\u8fdb\u5165\u5230\u8001\u5e74\u4ee3\n *\n */\n", "func_signal": "public static void testTenuringThreshold()", "code": "{\n    byte[] allocation1, allocation2, allocation3;\n    allocation1 = new byte[_1MB /4];\n    allocation2 = new byte[4* _1MB];\n    allocation3 = new byte[4* _1MB];\n    allocation3 = null;\n    allocation3 = new byte[4* _1MB];\n}", "path": "learning-note/src/main/java/com/learning/jvm/memory/TestAllocation.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u4f18\u5316\u7248\u8ba1\u6570\u6392\u5e8f\n *\n * @param array\n * @return\n */\n", "func_signal": "public static int[] countSort(int[] array)", "code": "{\n    //1.\u5f97\u5230\u6570\u5217\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u5e76\u7b97\u51fa\u5dee\u503cd\n    int max = array[0];\n    int min = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n        if(array[i] < min) {\n            min = array[i];\n        }\n    }\n    int d = max - min;\n    //2.\u521b\u5efa\u7edf\u8ba1\u6570\u7ec4\u5e76\u8ba1\u7b97\u7edf\u8ba1\u5bf9\u5e94\u5143\u7d20\u4e2a\u6570\n    int[] countArray = new int[d + 1];\n    for (int i = 0; i < array.length; i++) {\n        countArray[array[i] - min]++;\n    }\n    //3.\u7edf\u8ba1\u6570\u7ec4\u53d8\u5f62\uff0c\u540e\u9762\u7684\u5143\u7d20\u7b49\u4e8e\u524d\u9762\u7684\u5143\u7d20\u4e4b\u548c\n    int sum = 0;\n    for (int i = 0; i < countArray.length; i++) {\n        sum += countArray[i];\n        countArray[i] = sum;\n    }\n    //4.\u5012\u5e8f\u904d\u5386\u539f\u59cb\u6570\u7ec4\uff0c\u4ece\u7edf\u8ba1\u6570\u7ec4\u627e\u5230\u6b63\u786e\u4f4d\u7f6e\uff0c\u8f93\u51fa\u5230\u7ed3\u679c\u6570\u7ec4\n    int[] sortedArray = new int[array.length];\n    for (int i = array.length - 1; i > 0; i--) {\n        sortedArray[countArray[array[i] - min] - 1] = array[i];\n        // -1 \u8868\u793a\u540e\u6765\u7684\u5143\u7d20\u7684\u4f4d\u7f6e\u5e94\u5411\u524d\u79fb\u52a8\n        countArray[array[i] - min]--;\n    }\n    return sortedArray;\n}", "path": "learning-note/src/main/java/com/learning/sort/CountSort.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "// Convert a String array to a TestParam array:\n", "func_signal": "public static TestParam[] array(String[] values)", "code": "{\n  int[] vals = new int[values.length];\n  for(int i = 0; i < vals.length; i++)\n    vals[i] = Integer.decode(values[i]);\n  return array(vals);\n}", "path": "learning-note/src/main/java/com/learning/collection/performance/TestParam.java", "commit_date": "2020-07-14 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u591a\u91cd\u80cc\u5305\u95ee\u9898 \u4e3a01\u80cc\u5305\u7684\u53d8\u5f62\u7248\u672c\uff0c\u589e\u52a0\u4e86\u6570\u91cf\u7684\u53c2\u6570\n * \u4e8c\u7ef4\u6570\u7ec4\u7248\u672c\n * \u5728\u7b2ci\u4e2a\u7269\u54c1\u653e\u4e0e\u4e0d\u653e\u7684\u5224\u65ad\u65f6\uff0c\u589e\u52a0\u6570\u91cf\u7684\u904d\u5386\n * @param n\n * @param m\n * @param v\n * @param val\n * @param nums\n * @return\n */\n", "func_signal": "public int getMaxValueOfPackage2(int n, int m, int[] v, int[] val, int[] nums)", "code": "{\n    int[][]dp = new int[n+1][m+1];\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            dp[i][j] = dp[i-1][j];\n            // \u904d\u5386\u6570\u91cf\n            for (int k = 1; k <=nums[i-1] && j>=k*v[i-1]; k++) {\n                dp[i][j] = Math.max(dp[i][j], dp[i-1][j-k*v[i-1]] + k*val[i-1]);\n            }\n        }\n    }\n    return dp[n][m];\n}", "path": "learning-note/src/main/java/com/learning/algorithm/basic/dynamic/packagePro/MultiPackage.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u4e00\u7ef4\u538b\u7f29 \u5b8c\u5168\u80cc\u5305\n * \u6b64\u5904\u4e0d\u9700\u8981\u4ece\u5927\u5230\u5c0f\u904d\u5386\uff0c\u56e0\u4e3a\u7269\u54c1\u53ef\u4ee5\u591a\u6b21\u653e\u5165\u80cc\u5305\uff0c\u56e0\u6b64\u53d6\u5f97\u72b6\u6001\u4e3a\u7b2ci\u4e2a\u7269\u54c1\u904d\u5386\u4f53\u79ef\u7684\u524d\u5e8f\u72b6\u6001\u3002\n * @param n\n * @param m\n * @param v\n * @param val\n * @return\n */\n", "func_signal": "public int getMaxPackageValue2(int n,int m ,int[]v, int [] val)", "code": "{\n    int[] dp = new int[m + 1];\n    for (int i = 1; i <= n; i++) {\n        for (int j = v[i-1]; j <= m; j++) {\n            dp[j] = Math.max(dp[j], dp[j-v[i-1]] + val [i-1]);\n        }\n    }\n    return dp[m];\n}", "path": "learning-note/src/main/java/com/learning/algorithm/basic/dynamic/packagePro/FullPackage.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u591a\u91cd\u80cc\u5305\u95ee\u9898\u4e8c\u8fdb\u5236\u4f18\u5316\n *\n * \u9488\u5bf9\u7269\u54c1\u8fdb\u884c\u4e8c\u8fdb\u5236\u4f18\u5316\uff0c\u6b64\u5904\u7684\u4f18\u5316\u8868\u793a\u5bf9\u7269\u54c1\u8fdb\u884c\u6253\u5305\u64cd\u4f5c\uff0c\u6bd4\u59827\u4e2a\u7269\u54c1\uff0c\u53ef\u4ee5\u6253\u5305\u62101,2,4\u4e2a\u7269\u54c1\u5305\u88f9\n * \u5982\u7269\u54c1\u6570\u91cf\u4e3a10 \u90a3\u4e48\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236 1\uff0c 2\uff0c 4 \u8868\u793a0~7\uff0c\u800c\u5269\u4f59\u76843\u6253\u5305\u6210\u4e00\u4e2a\u7269\u54c1\u5305\u88f9\uff0c4\u4e2a\u5305\u88f9\u5c31\u4efb\u610f\u7ec4\u5408\u8868\u793a\u539f\u676510\u7269\u54c1\u60c5\u51b5\n * \u56e0\u6b64\u539f\u676510\u4e2a\u7269\u54c1\u7684\u6570\u91cf\uff0c\u73b0\u5728\u4f18\u5316\u6210\u53ea\u8981\u904d\u53864\u4e2a\u7269\u54c1\u5305\u88f9\uff0c\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\n *\n * @param n\n * @param m\n * @param v\n * @param val\n * @param nums\n * @return\n */\n", "func_signal": "public int getMaxValueOfPackageSuper(int n, int m, int[] v, int[] val, int[] nums)", "code": "{\n    List<Good> goods = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n        int s = nums[i];\n        int curV = v[i];\n        int curVal = val[i];\n        // \u6b64\u5904\u4e3a\u4e8c\u8fdb\u5236\u5904\u7406\n        for (int j = 1; j < s; j*=2) {\n            s-=j;\n            goods.add(new Good(curV*j, curVal*j));\n        }\n        if(s>0) {\n            goods.add(new Good(curV*s, curVal*s));\n        }\n    }\n    int[]dp = new int[m+1];\n//        for (int i = 1; i <= n; i++) {\n//            for (int j = m; j >= v[i-1]; j--) {\n            //\u9488\u5bf9\u539f\u6765\u7684\u90e8\u5206\u8fdb\u884c\u4f18\u5316\n//                for (int k = 1; k <=nums[i-1] && j>=k*v[i-1]; k++) {\n//                    dp[j] = Math.max(dp[j], dp[j-k*v[i-1]] + k*val[i-1]);\n//                }\n\n//            }\n//        }\n    for (Good good : goods) {\n        for (int j = m; j >= good.v; j--) {\n            dp[j] = Math.max(dp[j], dp[j - good.v] + good.val);\n        }\n    }\n    return dp[m];\n}", "path": "learning-note/src/main/java/com/learning/algorithm/basic/dynamic/packagePro/MultiPackage.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "// An Iterable and a single value:\n", "func_signal": "public MapData(Iterable<K> genK, V value)", "code": "{\n  for(K key : genK) {\n    put(key, value);\n  }\n}", "path": "learning-note/src/main/java/com/learning/concurrent/performance/collection/other/MapData.java", "commit_date": "2020-07-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u4e0d\u7a33\u5b9a\u6392\u5e8f\u7248\u672c\n * @param array\n * @return\n */\n", "func_signal": "public static int[] sort(int[] array)", "code": "{\n    int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\n    for (int i = 0; i < array.length; i++) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n        if (array[i] < min) {\n            min = array[i];\n        }\n    }\n    int[] countArray = new int[max-min+1];\n    for (int i = 0; i < array.length; i++) {\n        countArray[array[i]-min]++;\n    }\n    int[] sortArray = new int[array.length];\n    for (int j = 0,i = 0; j < countArray.length; j++) {\n        while (countArray[j] >0){\n            sortArray[i++] = j + min;\n            countArray[j]--;\n        }\n    }\n    return sortArray;\n}", "path": "learning-note/src/main/java/com/learning/sort/CountSort.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u5bf9\u8c61\u4f18\u5148\u5728Eden\u4e2d\u5206\u914d\n * -XX:+UseSerialGC -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8\n *\n */\n", "func_signal": "public static void testAllocation()", "code": "{\n    byte[] allocation1,allocation2,allocation3,allocation4;\n    allocation1 = new byte[2* _1MB];\n    allocation2 = new byte[2* _1MB];\n    allocation3 = new byte[2* _1MB];\n    allocation4 = new byte[4* _1MB];\n}", "path": "learning-note/src/main/java/com/learning/jvm/memory/TestAllocation.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * 01 \u80cc\u5305\u4e00\u7ef4\u6570\u7ec4\u7684\u89e3\u6cd5\n * \u6ce8\u610f\u9700\u8981\u9006\u5e8f\u5904\u7406\uff0c\u56e0\u4e3a\u539f\u5148\u7684\u4e8c\u7ef4\u538b\u7f29\u6210\u4e00\u7ef4\uff0c\u5728\u5f00\u59cb\u7b2ci\u4e2a\u7269\u54c1\u7684\u904d\u5386\u65f6\uff0cdp\u5b58\u50a8\u7684\u4e3ai-1\u4e2a\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\u3002\n * \u82e5\u4f7f\u7528\u987a\u5e8f\u904d\u5386\uff0c\u5219i-1\u4e2a\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\u4f1a\u88ab\u8986\u76d6\uff0c\u6bcf\u6b21\u653e\u8fdb\u7269\u54c1\u53d6 dp[j-v[i-1]] \u7684\u6570\u636e\u662f\u5f80\u524d\u53d6\uff0c\u56e0\u6b64\u9700\u8981\u9006\u5e8f\u904d\u5386\n * f[j] = max(f[j], f[j-v[i]])\n * @param n\n * @param m\n * @param v\n * @param val\n * @return\n */\n", "func_signal": "public int getMaxValueOfPackage2(int n, int m, int[] v, int[] val)", "code": "{\n    int[] dp = new int[m + 1];\n    for (int i = 1; i <= n; i++) {\n        //\u4f18\u5316\u4f7f\u7528j>=v[i-1], \u4ec5\u9700\u8981\u67e5\u770b v[i-1] ~ m \u8fd9\u4e2a\u4f53\u79ef\u533a\u95f4\u7684\u6700\u5927\u4ef7\u503c\u662f\u5426\u9700\u8981\u66f4\u65b0\n        for (int j = m; j >=v[i-1]; j--) {\n            dp[j] = Math.max(dp[j], dp[j-v[i-1]] + val[i-1]);\n        }\n    }\n    return dp[m];\n}", "path": "learning-note/src/main/java/com/learning/algorithm/basic/dynamic/packagePro/ZeroOnePackage.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "// Create an array of TestParam from a varargs sequence:\n", "func_signal": "public static TestParam[] array(int... values)", "code": "{\n  int size = values.length/2;\n  TestParam[] result = new TestParam[size];\n  int n = 0;\n  for(int i = 0; i < size; i++)\n    result[i] = new TestParam(values[n++], values[n++]);\n  return result;\n}", "path": "learning-note/src/main/java/com/learning/collection/performance/TestParam.java", "commit_date": "2020-07-14 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u4e8c\u7ef4\u6570\u7ec4\u5b8c\u5168\u80cc\u5305\n * \u6309\u786c\u5e01\u548c\u4f53\u79ef\u7684\u987a\u5e8f\u4e8c\u7ef4\u904d\u5386\uff0c\u6bcf\u6b21\u7269\u54c1\u53ea\u6709\u653e\u4e0e\u4e0d\u653e\u4e24\u79cd\u60c5\u51b5\uff0c\u7b2ci\u4e2a\u7269\u54c1\u4e0d\u653e\u5219\u603b\u4ef7\u503c\u4e0ei-1\u4e2a\u7269\u54c1\u4e00\u81f4\n * \u7b2ci\u4e2a\u7269\u54c1\u653e\u8fdb\u80cc\u5305\uff0c\u5219\u4ef7\u503c\u4e3a f[i][j-v[i]+ val[i] \u6ce8\u610f\u8fd9\u8fb9\u540c\u6837\u4e3a\u7b2ci\u884c\uff0c\u56e0\u4e3a\u7269\u54c1\u53ef\u4ee5\u653e\u591a\u6b21\u3002\n * f[i][j] = max( f[i-1][j] + f[i][j-v[i]+ val[i])\n * @param n\n * @param m\n * @param v\n * @param val\n * @return\n */\n", "func_signal": "public int getMaxPackageValue(int n,int m ,int[]v, int [] val)", "code": "{\n    int [][]dp = new int[n+1][m+1];\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            // \u9ed8\u8ba4\u7b2ci\u4e2a\u7269\u54c1\u4e0d\u653e\u8fdb\u80cc\u5305\n            dp[i][j] = dp[i-1][j];\n            // \u7b2ci\u4e2a\u7269\u54c1\u653e\u8fdb\u80cc\u5305\uff0c\u524d\u63d0\u6761\u4ef6\u4f53\u79efj\u5927\u4e8e\u7269\u54c1i\u7684\u4f53\u79ef\uff0c\u53d6\u6700\u5927\u4ef7\u503c\n            if (j>=v[i-1]) {\n                dp[i][j] = Math.max(dp[i][j], dp[i][j-v[i-1]] +val[i-1]);\n            }\n        }\n    }\n    return dp[n][m];\n}", "path": "learning-note/src/main/java/com/learning/algorithm/basic/dynamic/packagePro/FullPackage.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u52a8\u6001\u7a7a\u95f4\u62c5\u4fdd\n * -XX:+UseSerialGC -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:HandlePromotionFailure\n * jdk6\u4e4b\u540e -XX:HandlePromotionFailure \u53c2\u6570\u4f5c\u5e9f\u3002\n */\n", "func_signal": "public static void testHandlePromotion()", "code": "{\n    byte[] allocation1, allocation2, allocation3, allocation4,allocation5,allocation6,allocation7;\n    allocation1 = new byte[2* _1MB];\n    allocation2 = new byte[2* _1MB];\n    allocation3 = new byte[2* _1MB];\n    allocation1 = null;\n    allocation4 = new byte[2* _1MB];\n    allocation5 = new byte[2* _1MB];\n    allocation6 = new byte[2* _1MB];\n    allocation4 = null;\n    allocation5 = null;\n    allocation6 = null;\n    allocation7 = new byte[2* _1MB];\n}", "path": "learning-note/src/main/java/com/learning/jvm/memory/TestAllocation.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u4e8c\u7ef4\u77e9\u9635 01 \u80cc\u5305\n * n\u4e2a\u7269\u54c1  m\u7684\u4f53\u79ef\u7684\u80cc\u5305\n * \u5148\u904d\u5386\u7269\u54c1\u518d\u904d\u5386\u80cc\u5305\uff0c\u6d4b\u8bd5\u6bcf\u4e2a\u7269\u54c1\u653e\u8fdb\u80cc\u5427\u4e0e\u4e0d\u653e\u8fdb\u80cc\u5305\u7684\u6700\u5927\u4ef7\u503c\n *\n * f[n][m] = max( f[n-1][m], f[n-1][m-v[i]] + val[i]\n *\n * @param m\n * @param n\n * @param v\n * @param val\n * @return\n */\n", "func_signal": "public int getMaxValueOfPackage(int n, int m, int[] v, int[] val)", "code": "{\n    // \u8fd9\u8fb9\u5b9a\u4e49\u4e3an+1 \u4e0e m+1 \u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u8868\u793ai\u4e2a\u7269\u54c1\u7684j\u4f53\u79ef\u7684\u6700\u5927\u4ef7\u503c\u3002\u4e0b\u9762\u6ce8\u610f \u6570\u7ec4-1\u95ee\u9898\n    int[][] dp = new int[n + 1][m + 1];\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j <= m; j++) {\n            // \u9ed8\u8ba4\u7b2ci\u4e2a\u7269\u54c1\u4e0d\u653e\u8fdb\u80cc\u5305\n            dp[i][j] = dp[i - 1][j];\n            // \u7b2ci\u4e2a\u7269\u54c1\u653e\u8fdb\u80cc\u5305\uff0c \u524d\u63d0\u6761\u4ef6\u4f53\u79efj\u5927\u4e8e\u7269\u54c1i\u7684\u4f53\u79ef\uff0c\u53d6\u6700\u5927\u4ef7\u503c\n            if (j >= v[i - 1]) {\n                dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - v[i - 1]] + val[i - 1]);\n            }\n        }\n    }\n    return dp[n][m];\n}", "path": "learning-note/src/main/java/com/learning/algorithm/basic/dynamic/packagePro/ZeroOnePackage.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u6876\u6392\u5e8f\n * 1. \u83b7\u53d6\u6700\u5927\u6700\u5c0f\u6811\uff0c\u6876\u7684\u7a7a\u95f4\n * 2. num[i] -min \u5b9a\u4f4d\u6876\u7d22\u5f15\uff0c\u6dfb\u52a0\u5f53\u524d\u6811\u5230\u6876\u4e2d\u3002\n * 3. \u4f7f\u7528\u7d22\u5f15\u626b\u63cf\u6bcf\u4e2a\u6876\u4f4d\uff0c\u66f4\u65b0\u5230\u6392\u5e8f\u6570\u7ec4\u4e2d\n * @param nums\n */\n", "func_signal": "public static void sort(int[] nums)", "code": "{\n    int len = nums.length;\n    int min = Integer.MAX_VALUE;\n    int max = Integer.MIN_VALUE;\n    for (int num : nums) {\n        min = Math.min(num, min);\n        max = Math.max(num, max);\n    }\n    ArrayList<Integer>[] buckets = new ArrayList[max-min +1];\n    for (int i = 0; i < buckets.length; i++) {\n        buckets[i] = new ArrayList<>();\n    }\n    for (int i = 0; i < len; i++) {\n        buckets[nums[i]-min].add(nums[i]);\n    }\n    for (int i = 0,j = 0; i < buckets.length; i++) {\n        List<Integer> curList = buckets[i];\n        int index = 0;\n        while (!curList.isEmpty() && index< curList.size()){\n            nums[j++] = curList.get(index++);\n        }\n    }\n}", "path": "learning-note/src/main/java/com/learning/sort/BucketSort.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "// An Iterable and a value Generator:\n", "func_signal": "public MapData(Iterable<K> genK, Generator<V> genV)", "code": "{\n  for(K key : genK) {\n    put(key, genV.next());\n  }\n}", "path": "learning-note/src/main/java/com/learning/concurrent/performance/collection/other/MapData.java", "commit_date": "2020-07-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "// A single Pair Generator:\n", "func_signal": "public MapData(Generator<Pair<K,V>> gen, int quantity)", "code": "{\n  for(int i = 0; i < quantity; i++) {\n    Pair<K,V> p = gen.next();\n    put(p.key, p.value);\n  }\n}", "path": "learning-note/src/main/java/com/learning/concurrent/performance/collection/other/MapData.java", "commit_date": "2020-07-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u52a8\u6001\u5e74\u9f84\u5224\u65ad\n *\n * -XX:+UseSerialGC -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=1 -XX:+PrintTenuringDistribution\n *  allocation1,allocation1 \u5360\u7528\u7a7a\u95f4\u4e3aSurvivor\u7684\u4e00\u534a\uff0cMinor GC\u65f6\u5019\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3\uff0c\u901a\u8fc7\u52a8\u6001\u5bf9\u8c61\u5e74\u9f84\u5224\u65ad\u3002\n *\n * Heap\n *  def new generation   total 9216K, used 4297K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)\n *   eden space 8192K,  52% used [0x00000000fec00000, 0x00000000ff032238, 0x00000000ff400000)\n *   from space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500310, 0x00000000ff600000)\n *   to   space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)\n *  tenured generation   total 10240K, used 5723K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)\n */\n", "func_signal": "public static void testTenuringThreshold2()", "code": "{\n    byte[] allocation1, allocation2, allocation3, allocation4;\n    allocation1 = new byte[_1MB /4];\n    allocation2 = new byte[_1MB /4];\n    allocation3 = new byte[4* _1MB];\n    allocation4 = new byte[4* _1MB];\n    allocation4 = null;\n    allocation4 = new byte[4* _1MB];\n}", "path": "learning-note/src/main/java/com/learning/jvm/memory/TestAllocation.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/**\n * \u591a\u91cd\u80cc\u5305\u4e09\u7ef4\u6570\u7ec4\u7248\u672c\u8f83\u96be\u7406\u89e3  \u89c1\u5907\u6ce8\n * @param n\n * @param m\n * @param v\n * @param val\n * @param nums\n * @return\n */\n", "func_signal": "public int getMaxValueOfPackage3(int n, int m, int[] v, int[] val, int[] nums)", "code": "{\n    //\u53d6\u5f97\u7269\u54c1\u4e2d\u6700\u5927\u7684\u6570\u91cf\n    int maxNum = Arrays.stream(nums).max().getAsInt();\n    int[][][]dp = new int[n+1][m+1][maxNum+1];\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            for (int k = 1; k <=maxNum; k++) {\n                // \u5982\u679c\u4f53\u79ef\u6ee1\u8db3 j>= k*v[i-1], \u5224\u65ad\u653ek\u4e2a\u7269\u54c1\u8fdb\u80cc\u5305\n                if(j>=k*v[i-1]) {\n                    // \u4e0ei-1\u4e2a\u7269\u54c1\u653e\u8fdbmax\u6570\u91cf\u7684\u6700\u5927\u4ef7\u503c\u6bd4\u8f83\u3002\n                    dp[i][j][k] = Math.max(dp[i-1][j][maxNum], dp[i-1][j-k*v[i-1]][k] + k*val[i-1]);\n                } else {\n                    //\u82e5j\u65e0\u6cd5\u653e\u5165k\u4e2a\u7269\u54c1\uff0c\u6bd4\u8f83i-1\u4e2a\u7269\u54c1\u7684\u653e\u8fdbmax\u6570\u91cf\u7684\u6700\u5927\u4ef7\u503c \u4e0e  \u7b2ci\u4e2a\u7269\u54c1\u653e\u8fdbk-1\u4e2a\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\n                    // \u8fd9\u6837\u9ed8\u8ba4[i][j][maxNum] \u4fdd\u8bc1\u83b7\u53d6\u5230\u524di\u4e2a\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\n                    dp[i][j][k] = Math.max(dp[i-1][j][maxNum],dp[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return dp[n][m][maxNum];\n}", "path": "learning-note/src/main/java/com/learning/algorithm/basic/dynamic/packagePro/MultiPackage.java", "commit_date": "2020-09-12 00:00:00", "repo_name": "rbmonster/learning-note", "stars": 3045, "license": "None", "language": "java", "size": 67621}
{"docstring": "/** Test for <code>equals(Object)</code> method. */\n", "func_signal": "public void testObject()", "code": "{\n  Metadata meta1 = new Metadata();\n  Metadata meta2 = new Metadata();\n  assertFalse(meta1.equals(null));\n  assertFalse(meta1.equals(\"String\"));\n  assertTrue(meta1.equals(meta2));\n  meta1.add(\"name-one\", \"value-1.1\");\n  assertFalse(meta1.equals(meta2));\n  meta2.add(\"name-one\", \"value-1.1\");\n  assertTrue(meta1.equals(meta2));\n  meta1.add(\"name-one\", \"value-1.2\");\n  assertFalse(meta1.equals(meta2));\n  meta2.add(\"name-one\", \"value-1.2\");\n  assertTrue(meta1.equals(meta2));\n  meta1.add(\"name-two\", \"value-2.1\");\n  assertFalse(meta1.equals(meta2));\n  meta2.add(\"name-two\", \"value-2.1\");\n  assertTrue(meta1.equals(meta2));\n  meta1.add(\"name-two\", \"value-2.2\");\n  assertFalse(meta1.equals(meta2));\n  meta2.add(\"name-two\", \"value-2.x\");\n  assertFalse(meta1.equals(meta2));\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/* ---------------------------------- *\n * <implementation:Configurable> *\n * ---------------------------------- */\n", "func_signal": "private void setRobotNames(String[] robotNames)", "code": "{\n  this.robotNames= new HashMap();\n  for (int i= 0; i < robotNames.length; i++) {\n    this.robotNames.put(robotNames[i].toLowerCase(), new Integer(i));\n  }\n  // always make sure \"*\" is included\n  if (!this.robotNames.containsKey(\"*\"))\n    this.robotNames.put(\"*\", new Integer(robotNames.length));\n}", "path": "anthelion/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/RobotRulesParser.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n *  Returns <code>false</code> if the <code>robots.txt</code> file\n *  prohibits us from accessing the given <code>url</code>, or\n *  <code>true</code> otherwise.\n */\n", "func_signal": "public boolean isAllowed(URL url)", "code": "{\n  String path = url.getPath();                  // check rules\n  if ((path == null) || \"\".equals(path)) {\n    path= \"/\";\n  }\n  return isAllowed(path);\n}", "path": "anthelion/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/RobotRulesParser.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * The {@link AnchorIndexingFilter} filter object which supports boolean \n * configuration settings for the deduplication of anchors. \n * See {@code anchorIndexingFilter.deduplicate} in nutch-default.xml.\n *  \n * @param doc The {@link NutchDocument} object\n * @param parse The relevant {@link Parse} object passing through the filter \n * @param url URL to be filtered for anchor text\n * @param datum The {@link CrawlDatum} entry\n * @param inlinks The {@link Inlinks} containing anchor text\n * @return filtered NutchDocument\n */\n", "func_signal": "public NutchDocument filter(NutchDocument doc, Parse parse, Text url, CrawlDatum datum,\n  Inlinks inlinks) throws IndexingException", "code": "{\n\n  String[] anchors = (inlinks != null ? inlinks.getAnchors()\n    : new String[0]);\n\n  HashSet<String> set = null;\n\n  for (int i = 0; i < anchors.length; i++) {\n    if (deduplicate) {\n      if (set == null) set = new HashSet<String>();\n      String lcAnchor = anchors[i].toLowerCase();\n\n      // Check if already processed the current anchor\n      if (!set.contains(lcAnchor)) {\n        doc.add(\"anchor\", anchors[i]);\n\n        // Add to map\n        set.add(lcAnchor);\n      }\n    } else {\n      doc.add(\"anchor\", anchors[i]);\n    }\n  }\n\n  return doc;\n}", "path": "anthelion/src/plugin/index-anchor/src/java/org/apache/nutch/indexer/anchor/AnchorIndexingFilter.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** command-line main for testing */\n", "func_signal": "public static void main(String[] argv)", "code": "{\n  if (argv.length < 3) {\n    System.out.println(\"Usage:\");\n    System.out.println(\"   java <robots-file> <url-file> <agent-name>+\");\n    System.out.println(\"\");\n    System.out.println(\"The <robots-file> will be parsed as a robots.txt file,\");\n    System.out.println(\"using the given <agent-name> to select rules.  URLs \");\n    System.out.println(\"will be read (one per line) from <url-file>, and tested\");\n    System.out.println(\"against the rules.\");\n    System.exit(-1);\n  }\n  try { \n    FileInputStream robotsIn= new FileInputStream(argv[0]);\n    LineNumberReader testsIn= new LineNumberReader(new FileReader(argv[1]));\n    String[] robotNames= new String[argv.length - 2];\n\n    for (int i= 0; i < argv.length - 2; i++) \n      robotNames[i]= argv[i+2];\n\n    ArrayList bufs= new ArrayList();\n    byte[] buf= new byte[BUFSIZE];\n    int totBytes= 0;\n\n    int rsize= robotsIn.read(buf);\n    while (rsize >= 0) {\n      totBytes+= rsize;\n      if (rsize != BUFSIZE) {\n        byte[] tmp= new byte[rsize];\n        System.arraycopy(buf, 0, tmp, 0, rsize);\n        bufs.add(tmp);\n      } else {\n        bufs.add(buf);\n        buf= new byte[BUFSIZE];\n      }\n      rsize= robotsIn.read(buf);\n    }\n\n    byte[] robotsBytes= new byte[totBytes];\n    int pos= 0;\n\n    for (int i= 0; i < bufs.size(); i++) {\n      byte[] currBuf= (byte[]) bufs.get(i);\n      int currBufLen= currBuf.length;\n      System.arraycopy(currBuf, 0, robotsBytes, pos, currBufLen);\n      pos+= currBufLen;\n    }\n\n    RobotRulesParser parser= \n      new RobotRulesParser(robotNames);\n    RobotRuleSet rules= parser.parseRules(robotsBytes);\n    System.out.println(\"Rules:\");\n    System.out.println(rules);\n    System.out.println();\n\n    String testPath= testsIn.readLine().trim();\n    while (testPath != null) {\n      System.out.println( (rules.isAllowed(new URL(testPath)) ? \n                           \"allowed\" : \"not allowed\")\n                          + \":\\t\" + testPath);\n      testPath= testsIn.readLine();\n    }\n\n  } catch (Exception e) {\n    e.printStackTrace();\n  }\n}", "path": "anthelion/src/plugin/lib-http/src/java/org/apache/nutch/protocol/http/api/RobotRulesParser.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** Test for <code>Writable</code> implementation. */\n", "func_signal": "public void testWritable()", "code": "{\n  Metadata result = null;\n  Metadata meta = new Metadata();\n  result = writeRead(meta);\n  assertEquals(0, result.size());\n  meta.add(\"name-one\", \"value-1.1\");\n  result = writeRead(meta);\n  assertEquals(1, result.size());\n  assertEquals(1, result.getValues(\"name-one\").length);\n  assertEquals(\"value-1.1\", result.get(\"name-one\"));\n  meta.add(\"name-two\", \"value-2.1\");\n  meta.add(\"name-two\", \"value-2.2\");\n  result = writeRead(meta);\n  assertEquals(2, result.size());\n  assertEquals(1, result.getValues(\"name-one\").length);\n  assertEquals(\"value-1.1\", result.getValues(\"name-one\")[0]);\n  assertEquals(2, result.getValues(\"name-two\").length);\n  assertEquals(\"value-2.1\", result.getValues(\"name-two\")[0]);\n  assertEquals(\"value-2.2\", result.getValues(\"name-two\")[1]);\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Tests the setting of the <code>Response.CONTENT_TYPE</code> metadata field.\n * \n * @since NUTCH-384\n * \n */\n", "func_signal": "public void setContentType(String testTextFile) throws ProtocolException", "code": "{\n  String urlString = \"file:\" + sampleDir + fileSeparator + testTextFile;\n  assertNotNull(urlString);\n  Protocol protocol = new ProtocolFactory(conf).getProtocol(urlString);\n  ProtocolOutput output = protocol.getProtocolOutput(new Text(urlString),\n      datum);\n  assertNotNull(output);\n  assertEquals(\"Status code: [\" + output.getStatus().getCode()\n      + \"], not equal to: [\" + ProtocolStatus.SUCCESS + \"]: args: [\"\n      + output.getStatus().getArgs() + \"]\", ProtocolStatus.SUCCESS, output\n      .getStatus().getCode());\n  assertNotNull(output.getContent());\n  assertNotNull(output.getContent().getContentType());\n  assertEquals(expectedMimeType, output.getContent().getContentType());\n  assertNotNull(output.getContent().getMetadata());\n  assertEquals(expectedMimeType,\n      output.getContent().getMetadata().get(Response.CONTENT_TYPE));\n\n}", "path": "anthelion/src/plugin/protocol-file/src/test/org/apache/nutch/protocol/file/TestProtocolFile.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Return a new classifier for the given a string\n * \n * @param cn\n *            the name of the classifier\n * @return the {@link Classifier}\n */\n", "func_signal": "public static Classifier getClassifier(String cn)", "code": "{\n\tClassifier classifier = null;\n\tswitch (cn) {\n\tcase \"NaiveBayes\":\n\t\tclassifier = new NaiveBayes();\n\t\tbreak;\n\tcase \"DecisionStump\":\n\t\tclassifier = new DecisionStump();\n\t\tbreak;\n\tcase \"HoeffdingTree\":\n\t\tclassifier = new HoeffdingTree();\n\t\tbreak;\n\t// we removed this one because of license issues\n\t// case \"HoeffdingTreeNG\":\n\t// classifier = new HoeffdingTreeNG();\n\t// break;\n\tcase \"HoeffdingAdaptiveTree\":\n\t\tclassifier = new HoeffdingAdaptiveTree();\n\t\tbreak;\n\tcase \"AdaHoeffdingTree\":\n\t\tclassifier = new AdaHoeffdingOptionTree();\n\t\tbreak;\n\tcase \"RandomBinary\":\n\t\tclassifier = new RandomBinaryClassifier();\n\t}\n\n\treturn classifier;\n}", "path": "anthelion/anthelion/src/main/java/com/yahoo/research/robme/anthelion/models/ClassifierEnum.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** Test for <code>setAll(Properties)</code> method. */\n", "func_signal": "public void testSetProperties()", "code": "{\n  String[] values = null;\n  Metadata meta = new Metadata();\n  Properties props = new Properties();\n\n  meta.setAll(props);\n  assertEquals(0, meta.size());\n\n  props.setProperty(\"name-one\", \"value1.1\");\n  meta.setAll(props);\n  assertEquals(1, meta.size());\n  values = meta.getValues(\"name-one\");\n  assertEquals(1, values.length);\n  assertEquals(\"value1.1\", values[0]);\n\n  props.setProperty(\"name-two\", \"value2.1\");\n  meta.setAll(props);\n  assertEquals(2, meta.size());\n  values = meta.getValues(\"name-one\");\n  assertEquals(1, values.length);\n  assertEquals(\"value1.1\", values[0]);\n  values = meta.getValues(\"name-two\");\n  assertEquals(1, values.length);\n  assertEquals(\"value2.1\", values[0]);\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Set the {@link Configuration} object\n */\n", "func_signal": "public void setConf(Configuration conf)", "code": "{\n  this.conf = conf;\n\n  deduplicate = conf.getBoolean(\"anchorIndexingFilter.deduplicate\", false);\n  LOG.info(\"Anchor deduplication is: \" + (deduplicate ? \"on\" : \"off\"));\n}", "path": "anthelion/src/plugin/index-anchor/src/java/org/apache/nutch/indexer/anchor/AnchorIndexingFilter.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** Test for the <code>set(String, String)</code> method. */\n", "func_signal": "public void testSet()", "code": "{\n  String[] values = null;\n  Metadata meta = new Metadata();\n\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(0, values.length);\n\n  meta.set(CONTENTTYPE, \"value1\");\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(1, values.length);\n  assertEquals(\"value1\", values[0]);\n\n  meta.set(CONTENTTYPE, \"value2\");\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(1, values.length);\n  assertEquals(\"value2\", values[0]);\n\n  meta.set(CONTENTTYPE, \"new value 1\");\n  meta.add(\"contenttype\", \"new value 2\");\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(2, values.length);\n  assertEquals(\"new value 1\", values[0]);\n  assertEquals(\"new value 2\", values[1]);\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Test parsing of language identifiers from html \n **/\n", "func_signal": "public void testMetaHTMLParsing()", "code": "{\n\n  try {\n    ParseUtil parser = new ParseUtil(NutchConfiguration.create());\n    /* loop through the test documents and validate result */\n    for (int t = 0; t < docs.length; t++) {\n      Content content = getContent(docs[t]);\n      Parse parse = parser.parse(content).get(content.getUrl());\n      assertEquals(metalanguages[t], (String) parse.getData().getParseMeta().get(Metadata.LANGUAGE));\n    }\n  } catch (Exception e) {\n    e.printStackTrace(System.out);\n    fail(e.toString());\n  }\n\n}", "path": "anthelion/src/plugin/language-identifier/src/test/org/apache/nutch/analysis/lang/TestHTMLLanguageParser.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Calls the {@link FeedParser} on a sample RSS file and checks that there are\n * 3 {@link ParseResult} entries including the below 2 links:\n * <ul>\n * <li>http://www-scf.usc.edu/~mattmann/</li>\n * <li>http://www.nutch.org</li>\n * </ul>\n * \n * \n * @throws ProtocolNotFound\n *           If the {@link Protocol}Layer cannot be loaded (required to fetch\n *           the {@link Content} for the RSS file).\n * @throws ParseException\n *           If the {@link Parser}Layer cannot be loaded.\n */\n", "func_signal": "public void testParseFetchChannel() throws ProtocolNotFound, ParseException", "code": "{\n  String urlString;\n  Protocol protocol;\n  Content content;\n  ParseResult parseResult;\n\n  Configuration conf = NutchConfiguration.create();\n  for (int i = 0; i < sampleFiles.length; i++) {\n    urlString = \"file:\" + sampleDir + fileSeparator + sampleFiles[i];\n    urlString = urlString.replace('\\\\', '/');\n\n    protocol = new ProtocolFactory(conf).getProtocol(urlString);\n    content = protocol.getProtocolOutput(new Text(urlString),\n        new CrawlDatum()).getContent();\n\n    parseResult = new ParseUtil(conf).parseByExtensionId(\"feed\", content);\n\n    assertEquals(3, parseResult.size());\n\n    boolean hasLink1 = false, hasLink2 = false, hasLink3=false;\n\n    for (Iterator<Map.Entry<Text, Parse>> j = parseResult.iterator(); j\n        .hasNext();) {\n      Map.Entry<Text, Parse> entry = j.next();\n      if (entry.getKey().toString().equals(\n          \"http://www-scf.usc.edu/~mattmann/\")) {\n        hasLink1 = true;\n      } else if (entry.getKey().toString().equals(\"http://www.nutch.org/\")) {\n        hasLink2 = true;\n      }\n      else if(entry.getKey().toString().equals(urlString)){\n        hasLink3 = true;\n      }\n\n      assertNotNull(entry.getValue());\n      assertNotNull(entry.getValue().getData());\n    }\n\n    if (!hasLink1 || !hasLink2 || !hasLink3) {\n      fail(\"Outlinks read from sample rss file are not correct!\");\n    }\n  }\n\n}", "path": "anthelion/src/plugin/feed/src/test/org/apache/nutch/parse/feed/TestFeedParser.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** Test for <code>isMultiValued()</code> method. */\n", "func_signal": "public void testIsMultiValued()", "code": "{\n  Metadata meta = new Metadata();\n  assertFalse(meta.isMultiValued(\"key\"));\n  meta.add(\"key\", \"value1\");\n  assertFalse(meta.isMultiValued(\"key\"));\n  meta.add(\"key\", \"value2\");\n  assertTrue(meta.isMultiValued(\"key\"));\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** Test for the <code>add(String, String)</code> method. */\n", "func_signal": "public void testAdd()", "code": "{\n  String[] values = null;\n  Metadata meta = new Metadata();\n\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(0, values.length);\n\n  meta.add(CONTENTTYPE, \"value1\");\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(1, values.length);\n  assertEquals(\"value1\", values[0]);\n\n  meta.add(CONTENTTYPE, \"value2\");\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(2, values.length);\n  assertEquals(\"value1\", values[0]);\n  assertEquals(\"value2\", values[1]);\n\n  // NOTE : For now, the same value can be added many times.\n  // Should it be changed?\n  meta.add(CONTENTTYPE, \"value1\");\n  values = meta.getValues(CONTENTTYPE);\n  assertEquals(3, values.length);\n  assertEquals(\"value1\", values[0]);\n  assertEquals(\"value2\", values[1]);\n  assertEquals(\"value1\", values[2]);\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** Test for <code>get(String)</code> method. */\n", "func_signal": "public void testGet()", "code": "{\n  Metadata meta = new Metadata();\n  assertNull(meta.get(\"a-name\"));\n  meta.add(\"a-name\", \"value-1\");\n  assertEquals(\"value-1\", meta.get(\"a-name\"));\n  meta.add(\"a-name\", \"value-2\");\n  assertEquals(\"value-1\", meta.get(\"a-name\"));\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/** Test for <code>names</code> method. */\n", "func_signal": "public void testNames()", "code": "{\n  String[] names = null;\n  Metadata meta = new Metadata();\n  names = meta.names();\n  assertEquals(0, names.length);\n\n  meta.add(\"name-one\", \"value\");\n  names = meta.names();\n  assertEquals(1, names.length);\n  assertEquals(\"name-one\", names[0]);\n  meta.add(\"name-two\", \"value\");\n  names = meta.names();\n  assertEquals(2, names.length);\n}", "path": "anthelion/src/test/org/apache/nutch/metadata/TestMetadata.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Turns an array of FileStatus into an array of Paths.\n */\n", "func_signal": "public static Path[] getPaths(FileStatus[] stats)", "code": "{\n  if (stats == null) {\n    return null;\n  }\n  if (stats.length == 0) {\n    return new Path[0];\n  }\n  Path[] res = new Path[stats.length];\n  for (int i = 0; i < stats.length; i++) {\n    res[i] = stats[i].getPath();\n  }\n  return res;\n}", "path": "anthelion/src/java/org/apache/nutch/util/HadoopFSUtil.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Returns PathFilter that passes directories through.\n */\n", "func_signal": "public static PathFilter getPassDirectoriesFilter(final FileSystem fs)", "code": "{\n    return new PathFilter() {\n        public boolean accept(final Path path) {\n            try {\n                return fs.getFileStatus(path).isDir();\n            } catch (IOException ioe) {\n                return false;\n            }\n        }\n\n    };\n}", "path": "anthelion/src/java/org/apache/nutch/util/HadoopFSUtil.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "/**\n * Returns PathFilter that passes all paths through.\n */\n", "func_signal": "public static PathFilter getPassAllFilter()", "code": "{\n    return new PathFilter() {\n        public boolean accept(Path arg0) {\n            return true;\n        }\n    };\n}", "path": "anthelion/src/java/org/apache/nutch/util/HadoopFSUtil.java", "commit_date": "2015-10-27 00:00:00", "repo_name": "YahooArchive/anthelion", "stars": 2842, "license": "apache-2.0", "language": "java", "size": 35326}
{"docstring": "//\u662f\u5426\u5f00\u542f md5 \uff0cseckillId\n", "func_signal": "public ExposerRsp(boolean exposed, String md5, long seckillId)", "code": "{\n    this.exposed = exposed;\n    this.md5 = md5;\n    this.seckillId = seckillId;\n}", "path": "Java/seckill/src/main/java/org/seckill/dto/ExposerRsp.java", "commit_date": "2018-01-03 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * <p>\n * \u8bfb\u53d6\u63a7\u5236\u53f0\u5185\u5bb9\n * </p>\n */\n", "func_signal": "public static String scanner(String tip)", "code": "{\n    Scanner scanner = new Scanner(System.in);\n    StringBuilder help = new StringBuilder();\n    help.append(\"\u8bf7\u8f93\u5165\" + tip + \"\uff1a\");\n    System.out.println(help.toString());\n    if (scanner.hasNext()) {\n        String ipt = scanner.next();\n        if (StringUtils.isNotEmpty(ipt)) {\n            return ipt;\n        }\n    }\n    throw new MybatisPlusException(\"\u8bf7\u8f93\u5165\u6b63\u786e\u7684\" + tip + \"\uff01\");\n}", "path": "Java/springboot-shiro/src/main/java/com/springboot/demo/common/config/generatir/CodeGenerator.java", "commit_date": "2019-03-29 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * Redis \u914d\u7f6e\n * @return\n */\n", "func_signal": "public RedisManager redisManager()", "code": "{\n    RedisManager redisManager = new RedisManager();\n    return redisManager;\n}", "path": "Java/springboot-shiro/src/main/java/com/springboot/demo/common/auth/ShiroConfig.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * \u5411\u6307\u5b9aURL\u53d1\u9001get\u8bf7\u6c42\n * @param url\u53d1\u9001\u8bf7\u6c42\u7684URL\n * @param param\u8bf7\u6c42\u53c2\u6570 \u683c\u5f0f\u6ee1\u8db3name1=value&name2=value2 \u7684\u5f62\u5f0f\n * @return URL\u4ee3\u8868\u8fdc\u7a0b\u8d44\u6e90\u7684\u54cd\u5e94\n */\n", "func_signal": "public static String sendGet(String url,String param)", "code": "{\n\tString result=\"\";\n\tString urlName = url;\n\tif(param != null){\n\t\turlName = url + \"?\" + param;\n\t}\n\ttry {\n\t\tURL realUrl = new URL(urlName);\n\t\t//\u6253\u5f00\u4e0eURL\u7684\u8fde\u63a5\n\t\tURLConnection conn = realUrl.openConnection();\n\t\t//\u8bbe\u7f6e\u901a\u7528\u7684\u8bf7\u6c42\u5c5e\u6027\n\t\tconn.setRequestProperty(\"accept\", \"*/*\");\n\t\tconn.setRequestProperty(\"connection\", \"Keep-Alive\");\n\t\tconn.setRequestProperty(\"user-agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1\"\n\t\t\t\t+ \"; SV1)\");\n\t\t//\u5efa\u7acb\u5b9e\u9645\u7684\u8fde\u63a5\n\t\tconn.connect();\n\t\t//\u83b7\u53d6\u6240\u6709\u7684\u54cd\u5e94\u5934\u5b57\u6bb5\n\t\tMap<String, List<String>> map = conn.getHeaderFields();\n\t\tfor(String key : map.keySet()){\n\t\t\tSystem.out.println(key + \"--->\" + map.get(key));\n\t\t}\n\t\ttry(BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(),\"utf-8\"))){\n\t\t\tString line;\n\t\t\twhile((line = in.readLine()) != null){\n\t\t\t\tresult += \"\\n\" +line;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"\u53d1\u9001\u8bf7\u6c42\u5f02\u5e38\");\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "path": "Java/tomcatServer3.0/src/com/hjy/GetPosyTest.java", "commit_date": "2016-12-10 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "//\u521d\u59cb\u5316\uff0c\u521b\u5efa\u670d\u52a1\u5668\n", "func_signal": "public void init()", "code": "{\n\ttry {\n\t\tport = Integer.parseInt(prop.getProperty(\"port\"));\n\t\tserver = new ServerSocket(port);\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n}", "path": "Java/tomcatServer3.0/src/com/hjy/server/Server.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * RedisManager \u914d\u7f6e\n * @return\n */\n", "func_signal": "public RedisCacheManager cacheManager()", "code": "{\n    RedisCacheManager redisCacheManager = new RedisCacheManager();\n    redisCacheManager.setRedisManager(redisManager());\n    return redisCacheManager;\n}", "path": "Java/springboot-shiro/src/main/java/com/springboot/demo/common/auth/ShiroConfig.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * \u83b7\u53d6Connection\u5bf9\u8c61\n * */\n", "func_signal": "public static Connection getConnection(String url,String user,String password)", "code": "{\n\ttry {\n\t\tdriverName = \"oracle.jdbc.driver.OracleDriver\";\n\t\tClass.forName(driverName);\n\t\tconnection=\n\t\t\tDriverManager.getConnection(url,user,password);\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t} catch (SQLException e) {\n\t\te.printStackTrace();\n\t}\n\treturn connection;\n}", "path": "Java/woss/src/com/briup/common/DBUtils.java", "commit_date": "2017-03-25 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * AuthorizationAttributeSourceAdvisor\uff0cshiro\u91cc\u5b9e\u73b0\u7684 Advisor \u7c7b\uff0c\n * \u5185\u90e8\u4f7f\u7528 AopAllianceAnnotationsAuthorizingMethodInterceptor \u6765\u62e6\u622a\u7528\u4ee5\u4e0b\u6ce8\u89e3\u7684\u65b9\u6cd5\u3002\n * \u8001\u5b9e\u8bf4\uff0c\u8fd9\u91cc\u6ce8\u5165securityManager\uff0c\u6211\u4e0d\u77e5\u9053\u6709\u5565\u7528\uff0c\u4ecesource\u4e0a\u770b\u4e0d\u51fa\u5b83\u5728\u4ec0\u4e48\u5730\u65b9\u4f1a\u88ab\u8c03\u7528\u3002\n *\n * @return\n */\n", "func_signal": "@Bean\npublic AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)", "code": "{\n    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\n    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\n    return authorizationAttributeSourceAdvisor;\n}", "path": "Java/springboot-shiro/src/main/java/com/springboot/demo/common/auth/ShiroConfig.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * \u83b7\u53d6\u7f51\u9875\u6e90\u4ee3\u7801\n * @param url \u7f51\u5740\n * @return\n */\n", "func_signal": "public static String getSource(String url)", "code": "{\n\tBufferedReader reader=null;\n\tString result = \"\";\n\ttry {\n\t\tURL realUrl = new URL(url);\n//\t\t\t\u6253\u5f00\u548curl\u4e4b\u95f4\u7684\u8fde\u63a5\n\t\tURLConnection conn = realUrl.openConnection();\n\t\t\n\t\treader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n\t\tString line=\"\";\n\t\twhile((line=reader.readLine())!=null){\n\t\t\tresult+=line;\n\t\t}\n//\t\t\tSystem.out.println(result);\n\t\tif(reader!=null)\n\t\t\treader.close();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "path": "Java/IMOOCSpider/src/spider/Spider.java", "commit_date": "2017-03-19 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * cookie\u5bf9\u8c61\n * @return\n */\n", "func_signal": "public SimpleCookie rememberMeCookie()", "code": "{\n    // \u8bbe\u7f6ecookie\u540d\u79f0\uff0c\u5bf9\u5e94login.html\u9875\u9762\u7684<input type=\"checkbox\" name=\"rememberMe\"/>\n    SimpleCookie cookie = new SimpleCookie(\"rememberMe\");\n    // \u8bbe\u7f6ecookie\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u8fd9\u91cc\u4e3a\u4e00\u5929\n    cookie.setMaxAge(86400);\n    return cookie;\n}", "path": "Java/springboot-shiro/src/main/java/com/springboot/demo/common/auth/ShiroConfig.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n     *  return session factory\n     *\n     *\tsession factory will be rebuilded in the next call\n     */\n", "func_signal": "public static void setConfigFile(String configFile)", "code": "{\n\tMybatisSessionFactory.configFile = configFile;\n\tsessionFactory = null;\n}", "path": "Java/estore/src/com/briup/common/MybatisSessionFactory.java", "commit_date": "2016-12-10 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n     * Returns the ThreadLocal Session instance.  Lazy initialize\n     * the <code>SessionFactory</code> if needed.\n     *\n     *  @return Session\n     *  @throws HibernateException\n     */\n", "func_signal": "public static SqlSession getSession()", "code": "{\n    \tSqlSession session = (SqlSession) threadLocal.get();\n\n\tif (session == null) {\n\t\tif (sessionFactory == null) {\n\t\t\trebuildSessionFactory();\n\t\t}\n\t\tsession = (sessionFactory != null) ? sessionFactory.openSession()\n\t\t\t\t: null;\n\t\tthreadLocal.set(session);\n\t}\n\n        return session;\n    }", "path": "Java/estore/src/com/briup/common/MybatisSessionFactory.java", "commit_date": "2016-12-10 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * cookie\u7ba1\u7406\u5bf9\u8c61\n * @return\n */\n", "func_signal": "public CookieRememberMeManager rememberMeManager()", "code": "{\n    CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();\n    cookieRememberMeManager.setCookie(rememberMeCookie());\n    // rememberMe cookie\u52a0\u5bc6\u7684\u5bc6\u94a5\n    cookieRememberMeManager.setCipherKey(Base64.decode(\"4AvVhmFLUs0KTA3Kprsdag==\"));\n    return cookieRememberMeManager;\n}", "path": "Java/springboot-shiro/src/main/java/com/springboot/demo/common/auth/ShiroConfig.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\", \"anon\");\n        filterChainDefinitionMap.put(\"/js/**\", \"anon\");\n        filterChainDefinitionMap.put(\"/fonts/**\", \"anon\");\n        filterChainDefinitionMap.put(\"/img/**\", \"anon\");\n        // druid\u6570\u636e\u6e90\u76d1\u63a7\u9875\u9762\u4e0d\u62e6\u622a\n        filterChainDefinitionMap.put(\"/druid/**\", \"anon\");\n        // \u914d\u7f6e\u9000\u51fa\u8fc7\u6ee4\u5668\uff0c\u5176\u4e2d\u5177\u4f53\u7684\u9000\u51fa\u4ee3\u7801Shiro\u5df2\u7ecf\u66ff\u6211\u4eec\u5b9e\u73b0\u4e86\n        filterChainDefinitionMap.put(\"/logout\", \"logout\");\n        filterChainDefinitionMap.put(\"/\", \"anon\");\n        // \u9664\u4e0a\u4ee5\u5916\u6240\u6709url\u90fd\u5fc5\u987b\u8ba4\u8bc1\u901a\u8fc7\u624d\u53ef\u4ee5\u8bbf\u95ee\uff0c\u672a\u901a\u8fc7\u8ba4\u8bc1\u81ea\u52a8\u8bbf\u95eeLoginUrl\n        filterChainDefinitionMap.put(\"/**\", \"user\");\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n        return shiroFilterFactoryBean;\n    }\n\n    /**\n     * \u914d\u7f6e SecurityManager \u52a0\u8f7d\u81ea\u5b9a\u4e49 Realm\n     *\n     * @return\n     */\n", "func_signal": "@Bean\n    public SecurityManager securityManager()", "code": "{\n        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n        // \u52a0\u8f7d shiroRealm\n        securityManager.setRealm(shiroRealm());\n        // \u52a0\u8f7d cookie\n        securityManager.setRememberMeManager(rememberMeManager());\n        // \u52a0\u8f7d redisManager\n        securityManager.setCacheManager(cacheManager());\n        // \u52a0\u8f7d SessionManager\n        securityManager.setSessionManager(sessionManager());\n        return securityManager;\n    }", "path": "Java/springboot-shiro/src/main/java/com/springboot/demo/common/auth/ShiroConfig.java", "commit_date": "2019-04-01 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * \u5411\u6307\u5b9a\u7684URL\u53d1\u9001Post\u8bf7\u6c42\n * @param url \u53d1\u9001\u8bf7\u6c42\u7684url\n * @param param \u8bf7\u6c42\u53c2\u6570 \uff0c\u683c\u5f0f\u6ee1\u8db3 name1=value1&name2=value2\u7684\u5f62\u5f0f\n * @return URL\u4ee3\u8868\u8fdc\u7a0b\u8d44\u6e90\u7684\u54cd\u5e94\n */\n", "func_signal": "public static String sendPost(String url,String param)", "code": "{\n\tString result = \"\";\n\ttry {\n\t\tURL realUrl = new URL(url);\n\t\t//\u6253\u5f00\u548cURL\u4e4b\u95f4\u7684\u8fde\u63a5\n\t\tURLConnection conn = realUrl.openConnection();\n\t\t//\u8bbe\u7f6e\u901a\u7528\u7684\u8bf7\u6c42\u5c5e\u6027\n\t\tconn.setRequestProperty(\"accept\", \"*/*\");\n\t\tconn.setRequestProperty(\"connection\", \"Keep-Alive\");\n\t\tconn.setRequestProperty(\"user-agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1\"\n\t\t\t\t+ \"; SV1)\");\n\t\t//\u53d1\u9001post\u8bf7\u6c42\u5fc5\u987b\u8bbe\u7f6e\u5982\u4e0b\u4e24\u884c\n\t\tconn.setDoOutput(true);\n\t\tconn.setDoInput(true);\n\t\ttry(//\u83b7\u53d6URLConnection\u5bf9\u8c61\u5bf9\u5e94\u7684\u8f93\u51fa\u6d41\n\t\t\t\tPrintWriter out = new PrintWriter(conn.getOutputStream())\n\t\t){\n\t\t\t//\u53d1\u9001\u8bf7\u6c42\u53c2\u6570\n\t\t\tout.print(param);\n\t\t\t//flush\u8f93\u51fa\u6d41\u7684\u7f13\u51b2\n\t\t\tout.flush();\n\t\t}\n\t\ttry(//\u5b9a\u4e49BufferedReader\u8f93\u5165\u6d41\u6765\u8bfb\u53d6URL\u7684\u54cd\u5e94\n\t\t\t\tBufferedReader in = new BufferedReader(\n\t\t\t\t\t\tnew InputStreamReader(conn.getInputStream(), \"utf-8\"))\n\t\t){\n\t\t\tString line;\n\t\t\twhile((line = in.readLine()) != null){\n\t\t\t\tresult += \"\\n\" + line;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\n\treturn result;\n}", "path": "Java/tomcatServer3.0/src/com/hjy/GetPosyTest.java", "commit_date": "2016-12-10 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "//\t\u6d4b\u8bd5\u662f\u5426\u83b7\u5f97\u6155\u8bfe\u95ee\u7b54\u9875\u9762\u6e90\u7801\n//\t\u6d4b\u8bd5\u662f\u5426\u83b7\u53d6\u95ee\u9898\u7684url\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\tString url = \"http://www.imooc.com/wenda\";\n\t\tString regex = \"class=\\\"content\\\".+?href=\\\"(.+?)\\\".+?</a>\";\n\t\tString result = getSource(url);\n\t\tList<String> wendaUrl = getImoocPage(result,regex);\n\t\tSystem.out.println(wendaUrl);\n\t}", "path": "Java/IMOOCSpider/src/spider/Spider.java", "commit_date": "2017-03-19 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "//\t\u6ca1\u6709\u7528\u5230\n/**\n * \u83b7\u53d6\u95ee\u9898\u9875\u9762url\n * @param quesSource \u9875\u9762\u6e90\u7801\n * @param regex      \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\n * @return\n */\n", "func_signal": "public static List<String> getImoocPage(String quesSource,String regex)", "code": "{\n\t\tPattern pattern = Pattern.compile(regex);\n\t\tMatcher matcher = pattern.matcher(quesSource);\n\t\tList<String> quesUrl = new ArrayList<String>();\n\t\twhile(matcher.find()){\n\t\t\tString url = \"http://www.imooc.com\"+matcher.group(1);\n\t\t\tquesUrl.add(url);\n\t\t}\n//\t\tSystem.out.println(quesUrl);\t\n\t\treturn quesUrl;\n\t}", "path": "Java/IMOOCSpider/src/spider/Spider.java", "commit_date": "2017-03-19 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n     *  Close the single hibernate session instance.\n     *\n     *  @throws HibernateException\n     */\n", "func_signal": "public static void closeSession() throws Exception", "code": "{\n    \tSqlSession session = (SqlSession) threadLocal.get();\n        threadLocal.set(null);\n\n        if (session != null) {\n            session.close();\n        }\n    }", "path": "Java/estore/src/com/briup/common/MybatisSessionFactory.java", "commit_date": "2016-12-10 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "//\u96c6\u6210\u6d4b\u8bd5\u4ee3\u7801\u5b8c\u6574\u903b\u8f91\uff0c\u6ce8\u610f\u91cd\u590d\u6267\u884c\n", "func_signal": "@Test\npublic void seckillLogic() throws Exception", "code": "{\n    long id = 1004;\n    ExposerRsp exposerRsp = seckillService.exprotSeckillUrl(id);\n    if(exposerRsp.isExposed()){\n        logger.info(\"expose={}\",exposerRsp);\n        long phone = 13023217863L;\n        String md5 = \"9f26737a177b65c934341b48e4cdf21c\";\n        try {\n            SeckillExecutionRsp executionRsp = seckillService.executeSeckill(id, phone, md5);\n            logger.info(\"result={}\",executionRsp);\n        } catch (RepeatKillException e){\n            logger.error(e.getMessage(), e);\n        } catch (SeckillCloseException e){\n            logger.error(e.getMessage(), e);\n        }\n    }else{\n        logger.warn(\"expose={}\",exposerRsp);\n    }\n\n\n    //exposed=true,\n    // md5='9f26737a177b65c934341b48e4cdf21c',\n    // seckillId=1004,\n    // now=0,\n    // start=0,\n    // end=0\n}", "path": "Java/seckill/src/test/java/org/seckill/service/SeckillServiceTest.java", "commit_date": "2018-01-03 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n     *  Rebuild hibernate session factory\n     *\n     */\n", "func_signal": "public static void rebuildSessionFactory()", "code": "{\n\ttry {\n\t\tInputStream is = Resources.getResourceAsStream(configFile);\n\t\tsessionFactory = builder.build(is);\n\t} catch (Exception e) {\n\t\tSystem.err\n\t\t\t\t.println(\"%%%% Error Creating SessionFactory %%%%\");\n\t\te.printStackTrace();\n\t}\n}", "path": "Java/estore/src/com/briup/common/MybatisSessionFactory.java", "commit_date": "2016-12-10 00:00:00", "repo_name": "HelloWorld521/Java", "stars": 2934, "license": "None", "language": "java", "size": 28772}
{"docstring": "/**\n * A rectangle, expressed in default user space units, defining the extent of the page's\n * meaningful content (including potential white space) as intended by the page's creator The\n * default is the CropBox.\n * \n * @return The ArtBox attribute.\n */\n", "func_signal": "public PDRectangle getArtBox()", "code": "{\n    COSBase base = page.getDictionaryObject(COSName.ART_BOX);\n    if (base instanceof COSArray)\n    {\n        return clipToMediaBox(new PDRectangle((COSArray) base));\n    }\n    else\n    {\n        return getCropBox();\n    }\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Constructs TreePath from Status String.\n * @param pathString\n * @return a TreePath, or null if there is an error.\n */\n", "func_signal": "private TreePath generatePath(String pathString)", "code": "{\n    List<String> nodes = parsePathString(pathString);\n    if (nodes == null)\n    {\n        return null;\n    }\n    Object obj = rootNode;\n    TreePath treePath = new TreePath(obj);\n    for (String node : nodes)\n    {\n        obj = searchNode(obj, node);\n        if (obj == null)\n        {\n            return null;\n        }\n        treePath = treePath.pathByAddingChild(obj);\n    }\n    return treePath;\n}", "path": "pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/treestatus/TreeStatus.java", "commit_date": "2017-04-14 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * This will set the TrimBox for this page.\n * \n * @param trimBox The new TrimBox for this page.\n */\n", "func_signal": "public void setTrimBox(PDRectangle trimBox)", "code": "{\n    if (trimBox == null)\n    {\n        page.removeItem(COSName.TRIM_BOX);\n    }\n    else\n    {\n        page.setItem(COSName.TRIM_BOX, trimBox);\n    }\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * This will set the contents of this page.\n *\n * @param contents Array of new contents of the page.\n */\n", "func_signal": "public void setContents(List<PDStream> contents)", "code": "{\n    COSArray array = new COSArray();\n    contents.forEach(array::add);\n    page.setItem(COSName.CONTENTS, array);\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Parses a string and lists all the nodes.\n *\n * @param path a tree path.\n * @return a list of nodes, or null if there is an empty node.\n */\n", "func_signal": "private List<String> parsePathString(String path)", "code": "{\n    List<String> nodes = new ArrayList<>();\n    for (String node : path.split(\"/\"))\n    {\n        node = node.trim();\n        if (node.startsWith(\"[\"))\n        {\n            node = node.replace(\"]\", \"\").replace(\"[\", \"\");\n        }\n        node = node.trim();\n        if (node.isEmpty())\n        {\n            return null;\n        }\n        nodes.add(node);\n    }\n    return nodes;\n}", "path": "pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/treestatus/TreeStatus.java", "commit_date": "2017-04-14 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * This will set the mediaBox for this page.\n * \n * @param mediaBox The new mediaBox for this page.\n */\n", "func_signal": "public void setMediaBox(PDRectangle mediaBox)", "code": "{\n    this.mediaBox = mediaBox;\n    if (mediaBox == null)\n    {\n        page.removeItem(COSName.MEDIA_BOX);\n    }\n    else\n    {\n        page.setItem(COSName.MEDIA_BOX, mediaBox);\n    }\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Returns the rotation angle in degrees by which the page should be rotated\n * clockwise when displayed or printed. Valid values in a PDF must be a\n * multiple of 90.\n *\n * @return The rotation angle in degrees in normalized form (0, 90, 180 or\n * 270) or 0 if invalid or not set at this level.\n */\n", "func_signal": "public int getRotation()", "code": "{\n    COSBase obj = PDPageTree.getInheritableAttribute(page, COSName.ROTATE);\n    if (obj instanceof COSNumber)\n    {\n        int rotationAngle = ((COSNumber) obj).intValue();\n        if (rotationAngle % 90 == 0)\n        {\n            return (rotationAngle % 360 + 360) % 360;\n        }\n    }\n    return 0;\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Get the user unit. This is a positive number that shall give the size of default user space\n * units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher.\n *\n * @param userUnit\n * throws IllegalArgumentException if the parameter is not positive.\n */\n", "func_signal": "public void setUserUnit(float userUnit)", "code": "{\n    if (userUnit <= 0)\n    {\n        throw new IllegalArgumentException(\"User unit must be positive\");\n    }\n    page.setFloat(COSName.USER_UNIT, userUnit);\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * A rectangle, expressed in default user space units, defining the boundaries of the physical\n * medium on which the page is intended to be displayed or printed.\n */\n", "func_signal": "public PDRectangle getMediaBox()", "code": "{\n    if (mediaBox == null)\n    {\n        COSBase base = PDPageTree.getInheritableAttribute(page, COSName.MEDIA_BOX);\n        if (base instanceof COSArray)\n        {\n            mediaBox = new PDRectangle((COSArray) base);\n        }\n    }\n    if (mediaBox == null)\n    {\n        LOG.debug(\"Can't find MediaBox, will use U.S. Letter\");\n        mediaBox = PDRectangle.LETTER;\n    }\n    return mediaBox;\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Get the viewports.\n *\n * @return a list of viewports or null if there is no /VP entry.\n */\n", "func_signal": "public List<PDViewportDictionary> getViewports()", "code": "{\n    COSBase base = page.getDictionaryObject(COSName.VP);\n    if (!(base instanceof COSArray))\n    {\n        return null;\n    }\n    COSArray array = (COSArray) base;\n    List<PDViewportDictionary> viewports = new ArrayList<>();\n    for (int i = 0; i < array.size(); ++i)\n    {\n        COSBase base2 = array.getObject(i);\n        if (base2 instanceof COSDictionary)\n        {\n            viewports.add(new PDViewportDictionary((COSDictionary) base2));\n        }\n        else\n        {\n            LOG.warn(\"Array element \" + base2 + \" is skipped, must be a (viewport) dictionary\");\n        }\n    }\n    return viewports;\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * This will set the resources for this page.\n * \n * @param resources The new resources for this page.\n */\n", "func_signal": "public void setResources(PDResources resources)", "code": "{\n    pageResources = resources;\n    if (resources != null)\n    {\n        page.setItem(COSName.RESOURCES, resources);\n    }\n    else\n    {\n        page.removeItem(COSName.RESOURCES);\n    }\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Constructs a status string from the path.\n * @param path\n * @return the status string.\n */\n", "func_signal": "private String generatePathString(TreePath path)", "code": "{\n    StringBuilder pathStringBuilder = new StringBuilder();\n    while (path.getParentPath() != null)\n    {\n        Object object = path.getLastPathComponent();\n        pathStringBuilder.insert(0, \"/\" + getObjectName(object));\n        path = path.getParentPath();\n    }\n    pathStringBuilder.delete(0, 1);\n    return pathStringBuilder.toString();\n}", "path": "pdfbox/debugger/src/main/java/org/apache/pdfbox/debugger/treestatus/TreeStatus.java", "commit_date": "2017-04-14 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Returns the content stream(s) of this page as a single input stream.\n *\n * @return An InputStream, never null. Multiple content streams are concatenated and separated\n * with a newline. An empty stream is returned if the page doesn't have any content stream.\n * @throws IOException If the stream could not be read\n */\n", "func_signal": "@Override\npublic InputStream getContents() throws IOException", "code": "{\n    COSBase base = page.getDictionaryObject(COSName.CONTENTS);\n    if (base instanceof COSStream)\n    {\n        return ((COSStream)base).createInputStream();\n    }\n    else if (base instanceof COSArray && ((COSArray) base).size() > 0)\n    {\n        COSArray streams = (COSArray)base;\n        byte[] delimiter = new byte[] { '\\n' };\n        List<InputStream> inputStreams = new ArrayList<>();\n        for (int i = 0; i < streams.size(); i++)\n        {\n            COSBase strm = streams.getObject(i);\n            if (strm instanceof COSStream)\n            {\n                COSStream stream = (COSStream) strm;\n                inputStreams.add(stream.createInputStream());\n                inputStreams.add(new ByteArrayInputStream(delimiter));\n            }\n        }\n        return new SequenceInputStream(Collections.enumeration(inputStreams));\n    }\n    return new ByteArrayInputStream(new byte[0]);\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Get the page actions.\n * \n * @return The Actions for this Page\n */\n", "func_signal": "public PDPageAdditionalActions getActions()", "code": "{\n    COSDictionary addAct;\n    COSBase base = page.getDictionaryObject(COSName.AA);\n    if (base instanceof COSDictionary)\n    {\n        addAct = (COSDictionary) base;\n    }\n    else\n    {\n        addAct = new COSDictionary();\n        page.setItem(COSName.AA, addAct);\n    }\n    return new PDPageAdditionalActions(addAct);\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Get the user unit. This is a positive number that shall give the size of default user space\n * units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6\n * and higher.\n *\n * @return the user unit.\n */\n", "func_signal": "public float getUserUnit()", "code": "{\n    float userUnit = page.getFloat(COSName.USER_UNIT, 1.0f);\n    return userUnit > 0 ? userUnit : 1.0f;\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * This will set the BleedBox for this page.\n * \n * @param bleedBox The new BleedBox for this page.\n */\n", "func_signal": "public void setBleedBox(PDRectangle bleedBox)", "code": "{\n    if (bleedBox == null)\n    {\n        page.removeItem(COSName.BLEED_BOX);\n    }\n    else\n    {\n        page.setItem(COSName.BLEED_BOX, bleedBox);\n    }\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Get the metadata that is part of the document catalog. This will return null if there is\n * no meta data for this object.\n * \n * @return The metadata for this object.\n */\n", "func_signal": "public PDMetadata getMetadata()", "code": "{\n    PDMetadata retval = null;\n    COSBase base = page.getDictionaryObject(COSName.METADATA);\n    if (base instanceof COSStream)\n    {\n        retval = new PDMetadata((COSStream) base);\n    }\n    return retval;\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Returns the content streams which make up this page.\n * \n * @return content stream iterator\n */\n", "func_signal": "public Iterator<PDStream> getContentStreams()", "code": "{\n    List<PDStream> streams = new ArrayList<>();\n    COSBase base = page.getDictionaryObject(COSName.CONTENTS);\n    if (base instanceof COSStream)\n    {\n        streams.add(new PDStream((COSStream) base));\n    }\n    else if (base instanceof COSArray && ((COSArray) base).size() > 0)\n    {\n        COSArray array = (COSArray)base;\n        for (int i = 0; i < array.size(); i++)\n        {\n            COSStream stream = (COSStream) array.getObject(i);\n            streams.add(new PDStream(stream));\n        }\n    }\n    return streams.iterator();\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * A rectangle, expressed in default user space units, defining the visible region of default\n * user space. When the page is displayed or printed, its contents are to be clipped (cropped)\n * to this rectangle.\n */\n", "func_signal": "public PDRectangle getCropBox()", "code": "{\n    COSBase base = PDPageTree.getInheritableAttribute(page, COSName.CROP_BOX);\n    if (base instanceof COSArray)\n    {\n        return clipToMediaBox(new PDRectangle((COSArray) base));\n    }\n    else\n    {\n        return getMediaBox();\n    }\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * A dictionary containing any resources required by the page.\n */\n", "func_signal": "@Override\npublic PDResources getResources()", "code": "{\n    if (pageResources == null)\n    {\n        COSBase base = PDPageTree.getInheritableAttribute(page, COSName.RESOURCES);\n\n        // note: it's an error for resources to not be present\n        if (base instanceof COSDictionary)\n        {\n            pageResources = new PDResources((COSDictionary) base, resourceCache);\n        }\n    }\n    return pageResources;\n}", "path": "pdfbox/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPage.java", "commit_date": "2020-11-28 00:00:00", "repo_name": "apache/pdfbox", "stars": 2334, "license": "apache-2.0", "language": "java", "size": 104534}
{"docstring": "/**\n * Fixes the error by assigning the result of the call to the receiver reference, or deleting the\n * method call.\n */\n", "func_signal": "private Description describe(MethodInvocationTree methodInvocationTree, VisitorState state)", "code": "{\n  // Find the root of the field access chain, i.e. a.intern().trim() ==> a.\n  ExpressionTree identifierExpr = ASTHelpers.getRootAssignable(methodInvocationTree);\n  String identifierStr = null;\n  Type identifierType = null;\n  if (identifierExpr != null) {\n    identifierStr = state.getSourceForNode(identifierExpr);\n    if (identifierExpr instanceof JCIdent) {\n      identifierType = ((JCIdent) identifierExpr).sym.type;\n    } else if (identifierExpr instanceof JCFieldAccess) {\n      identifierType = ((JCFieldAccess) identifierExpr).sym.type;\n    } else {\n      throw new IllegalStateException(\"Expected a JCIdent or a JCFieldAccess\");\n    }\n  }\n\n  Type returnType = getReturnType(((JCMethodInvocation) methodInvocationTree).getMethodSelect());\n\n  Fix fix;\n  if (identifierStr != null\n      && !\"this\".equals(identifierStr)\n      && returnType != null\n      && state.getTypes().isAssignable(returnType, identifierType)) {\n    // Fix by assigning the assigning the result of the call to the root receiver reference.\n    fix = SuggestedFix.prefixWith(methodInvocationTree, identifierStr + \" = \");\n  } else {\n    // Unclear what the programmer intended.  Delete since we don't know what else to do.\n    Tree parent = state.getPath().getParentPath().getLeaf();\n    fix = SuggestedFix.delete(parent);\n  }\n  return describeMatch(methodInvocationTree, fix);\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/main/java/autodispose2/errorprone/AbstractReturnValueIgnored.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "// subscribeWith only works IFF the argument passed implements Disposable\n", "func_signal": "public void subscribeWithOnlyDisposable()", "code": "{\n  Observer<Integer> o =\n      Observable.just(1)\n          .subscribeWith(\n              new DisposableObserver<Integer>() {\n\n                @Override\n                public void onNext(Integer integer) {}\n\n                @Override\n                public void onError(Throwable e) {}\n\n                @Override\n                public void onComplete() {}\n              });\n  DisposableObserver<Integer> o2 =\n      Observable.just(1)\n          .subscribeWith(\n              new DisposableObserver<Integer>() {\n\n                @Override\n                public void onNext(Integer integer) {}\n\n                @Override\n                public void onError(Throwable e) {}\n\n                @Override\n                public void onComplete() {}\n              });\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeNegativeCasesLenient.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * @param hideProxies {@code true} hide proxy interfaces. This wraps all proxy interfaces in\n *     {@link autodispose2} at runtime in an anonymous instance to prevent introspection, similar\n *     to {@link Observable#hide()}. The default is {@code true}.\n */\n", "func_signal": "public static void setHideProxies(boolean hideProxies)", "code": "{\n  if (lockdown) {\n    throw new IllegalStateException(\"Plugins can't be changed anymore\");\n  }\n  AutoDisposePlugins.hideProxies = hideProxies;\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/AutoDisposePlugins.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Builds the error message with the consumer class.\n *\n * @param consumer the class of the consumer\n * @return the error message string\n */\n", "func_signal": "public static String composeMessage(String consumer)", "code": "{\n  return \"It is not allowed to subscribe with a(n) \"\n      + consumer\n      + \" multiple times. \"\n      + \"Please create a fresh instance of \"\n      + consumer\n      + \" and subscribe that to the target source instead.\";\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/AutoDisposeEndConsumerHelper.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Overload for resolving lifecycle providers allows configuration of checking \"end\" boundaries of\n * lifecycles. That is, they will ensure that the lifecycle has both started and not ended, and\n * otherwise will throw one of {@link LifecycleNotStartedException} (if {@link\n * LifecycleScopeProvider#peekLifecycle() peekLifecycle} returns {@code null}) or {@link\n * LifecycleEndedException} if the lifecycle is ended. To configure the runtime behavior of these\n * exceptions, see {@link AutoDisposePlugins}.\n *\n * <p><em>Note:</em> This resolves the scope immediately, so consider deferring execution as\n * needed, such as using {@link Completable#defer(Supplier) defer}.\n *\n * @param provider the {@link LifecycleScopeProvider} to resolve.\n * @param checkEndBoundary whether or not to check that the lifecycle has ended\n * @param <E> the lifecycle event type\n * @return a resolved {@link CompletableSource} representation of a given provider\n * @throws OutsideScopeException if the {@link LifecycleScopeProvider#correspondingEvents()}\n *     throws an {@link OutsideScopeException} during resolution.\n */\n", "func_signal": "public static <E> CompletableSource resolveScopeFromLifecycle(\n    final LifecycleScopeProvider<E> provider, final boolean checkEndBoundary)\n    throws OutsideScopeException", "code": "{\n  E lastEvent = provider.peekLifecycle();\n  CorrespondingEventsFunction<E> eventsFunction = provider.correspondingEvents();\n  if (lastEvent == null) {\n    throw new LifecycleNotStartedException();\n  }\n  E endEvent;\n  try {\n    endEvent = eventsFunction.apply(lastEvent);\n  } catch (Exception e) {\n    if (checkEndBoundary && e instanceof LifecycleEndedException) {\n      Consumer<? super OutsideScopeException> handler =\n          AutoDisposePlugins.getOutsideScopeHandler();\n      if (handler != null) {\n        try {\n          handler.accept((LifecycleEndedException) e);\n\n          // Swallowed the end exception, just silently dispose immediately.\n          return Completable.complete();\n        } catch (Throwable e1) {\n          return Completable.error(e1);\n        }\n      }\n      throw e;\n    }\n    return Completable.error(e);\n  }\n  return resolveScopeFromLifecycle(provider.lifecycle(), endEvent);\n}", "path": "AutoDispose/autodispose-lifecycle/src/main/java/autodispose2/lifecycle/LifecycleScopes.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Atomically updates the target upstream AtomicReference from null to the non-null\n * next Subscription, otherwise cancels next and reports a ProtocolViolationException\n * if the AtomicReference doesn't contain the shared cancelled indicator.\n *\n * @param upstream the target AtomicReference to update\n * @param next the Subscription to set on it atomically\n * @param subscriber the class of the consumer to have a personalized\n * error message if the upstream already contains a non-cancelled Subscription.\n * @return true if successful, false if the content of the AtomicReference was non null\n */\n", "func_signal": "public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "code": "{\n  AutoDisposeUtil.checkNotNull(next, \"next is null\");\n  if (!upstream.compareAndSet(null, next)) {\n    next.cancel();\n    if (upstream.get() != AutoSubscriptionHelper.CANCELLED) {\n      reportDoubleSubscription(subscriber);\n    }\n    return false;\n  }\n  return true;\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/AutoDisposeEndConsumerHelper.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Extracts the {@link Type} of the return value for {@link MethodInvocationTree} or {@link\n * MemberReferenceTree}, then checks it against {@link #capturedTypeAllowed(Type, VisitorState)}.\n */\n", "func_signal": "private boolean isValidReturnValueType(ExpressionTree tree, VisitorState state)", "code": "{\n  Type returnType = null;\n  if (tree instanceof MethodInvocationTree) {\n    returnType = getReturnType(((JCMethodInvocation) tree).getMethodSelect());\n  } else if (tree instanceof MemberReferenceTree) {\n    // Get the return type of the target referenced interface\n    returnType =\n        state.getTypes().findDescriptorType(((JCMemberReference) tree).type).getReturnType();\n  }\n  if (returnType != null) {\n    return capturedTypeAllowed(returnType, state);\n  }\n  return true;\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/main/java/autodispose2/errorprone/AbstractReturnValueIgnored.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * @return a sequence of lifecycle events. It's recommended to back this with a static instance to\n *     avoid unnecessary object allocation.\n */\n", "func_signal": "@Override\n@CheckReturnValue\npublic CorrespondingEventsFunction<TestLifecycle> correspondingEvents()", "code": "{\n  return testLifecycle -> {\n    switch (testLifecycle) {\n      case STARTED:\n        return TestLifecycle.STOPPED;\n      case STOPPED:\n        throw new LifecycleEndedException();\n      default:\n        throw new IllegalStateException(\"Unknown lifecycle event.\");\n    }\n  };\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeNegativeCasesLenient.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * @return a sequence of lifecycle events. It's recommended to back this with a static instance to\n *     avoid unnecessary object allocation.\n */\n", "func_signal": "@CheckReturnValue\npublic CorrespondingEventsFunction<TestLifecycle> correspondingEvents()", "code": "{\n  return testLifecycle -> {\n    switch (testLifecycle) {\n      case STARTED:\n        return TestLifecycle.STOPPED;\n      case STOPPED:\n        throw new LifecycleEndedException();\n      default:\n        throw new IllegalStateException(\"Unknown lifecycle event.\");\n    }\n  };\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeDefaultClassPositiveCasesLenient.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * @param lifecycle the stream of lifecycle events\n * @param endEvent the target end event\n * @param comparator an optional comparator for checking event equality.\n * @param <E> the lifecycle event type\n * @return a resolved {@link Completable} representation of a given lifecycle, targeting the given\n *     event\n */\n", "func_signal": "public static <E> CompletableSource resolveScopeFromLifecycle(\n    Observable<E> lifecycle, final E endEvent, @Nullable final Comparator<E> comparator)", "code": "{\n  Predicate<E> equalityPredicate;\n  if (comparator != null) {\n    equalityPredicate = e -> comparator.compare(e, endEvent) >= 0;\n  } else {\n    equalityPredicate = e -> e.equals(endEvent);\n  }\n  return lifecycle.skip(1).takeUntil(equalityPredicate).ignoreElements();\n}", "path": "AutoDispose/autodispose-lifecycle/src/main/java/autodispose2/lifecycle/LifecycleScopes.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Atomically updates the target upstream AtomicReference from null to the non-null\n * next Disposable, otherwise disposes next and reports a ProtocolViolationException\n * if the AtomicReference doesn't contain the shared disposed indicator.\n *\n * @param upstream the target AtomicReference to update\n * @param next the Disposable to set on it atomically\n * @param observer the class of the consumer to have a personalized\n * error message if the upstream already contains a non-cancelled Disposable.\n * @return true if successful, false if the content of the AtomicReference was non null\n */\n", "func_signal": "public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "code": "{\n  AutoDisposeUtil.checkNotNull(next, \"next is null\");\n  if (!upstream.compareAndSet(null, next)) {\n    next.dispose();\n    if (upstream.get() != AutoDisposableHelper.DISPOSED) {\n      reportDoubleSubscription(observer);\n    }\n    return false;\n  }\n  return true;\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/AutoDisposeEndConsumerHelper.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * @return a {@link Completable} representation of the given {@code scopeProvider}. This will be\n *     deferred appropriately and handle {@link OutsideScopeException OutsideScopeExceptions}.\n */\n", "func_signal": "public static Completable completableOf(ScopeProvider scopeProvider)", "code": "{\n  return Completable.defer(\n      () -> {\n        try {\n          return scopeProvider.requestScope();\n        } catch (OutsideScopeException e) {\n          Consumer<? super OutsideScopeException> handler =\n              AutoDisposePlugins.getOutsideScopeHandler();\n          if (handler != null) {\n            handler.accept(e);\n            return Completable.complete();\n          } else {\n            return Completable.error(e);\n          }\n        }\n      });\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/Scopes.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "// Public for ErrorProne\n", "func_signal": "public UseAutoDispose(ErrorProneFlags flags)", "code": "{\n   Optional<ImmutableSet<String>> inputClasses =\n       flags.getList(\"TypesWithScope\").map(ImmutableSet::copyOf);\n   Optional<Boolean> overrideScopes = flags.getBoolean(\"OverrideScopes\");\n\n   ImmutableSet<String> classesWithScope = getClassesWithScope(inputClasses, overrideScopes);\n   matcher = allOf(SUBSCRIBE_METHOD, matcher(classesWithScope));\n   lenient = flags.getBoolean(\"Lenient\").orElse(false);\n }", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/main/java/autodispose2/errorprone/UseAutoDispose.java", "commit_date": "2019-09-24 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Cancels the Subscription set via onSubscribe or makes sure a Subscription set asynchronously\n * (later) is cancelled immediately.\n *\n * <p>This method is thread-safe and can be exposed as a public API.\n */\n", "func_signal": "@Override\npublic void cancel()", "code": "{\n  AutoDisposableHelper.dispose(scopeDisposable);\n  AutoSubscriptionHelper.cancel(mainSubscription);\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/AutoDisposingSubscriberImpl.java", "commit_date": "2019-11-12 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "// subscribeWith only works IFF the argument passed implements Disposable\n", "func_signal": "public void subscribeWithOnlyDisposable()", "code": "{\n  Observer<Integer> o =\n      Observable.just(1)\n          // BUG: Diagnostic contains: Missing Disposable handling: Apply AutoDispose or cache\n          // the Disposable instance manually and enable lenient mode.\n          .subscribeWith(\n              new Observer<Integer>() {\n                @Override\n                public void onSubscribe(Disposable d) {}\n\n                @Override\n                public void onNext(Integer integer) {}\n\n                @Override\n                public void onError(Throwable e) {}\n\n                @Override\n                public void onComplete() {}\n              });\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/test/resources/autodispose2/errorprone/UseAutoDisposeDefaultClassPositiveCasesLenient.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Checks that the return value of a functional interface is void. Note, we do not use\n * ASTHelpers.isVoidType here, return values of Void are actually type-checked. Only\n * void-returning functions silently ignore return values of any type.\n */\n", "func_signal": "private static boolean functionalInterfaceReturnsExactlyVoid(\n    Type interfaceType, VisitorState state)", "code": "{\n  return state.getTypes().findDescriptorType(interfaceType).getReturnType().getKind()\n      == TypeKind.VOID;\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/main/java/autodispose2/errorprone/AbstractReturnValueIgnored.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/** @param handler the consumer for handling {@link OutsideScopeException} to set, null allowed */\n", "func_signal": "public static void setOutsideScopeHandler(\n    @Nullable Consumer<? super OutsideScopeException> handler)", "code": "{\n  if (lockdown) {\n    throw new IllegalStateException(\"Plugins can't be changed anymore\");\n  }\n  outsideScopeHandler = handler;\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/AutoDisposePlugins.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Don't match the method that is invoked through {@code Mockito.verify(t)} or {@code\n * doReturn(val).when(t)}.\n */\n", "func_signal": "private static boolean mockitoInvocation(Tree tree, VisitorState state)", "code": "{\n  if (!(tree instanceof JCMethodInvocation)) {\n    return false;\n  }\n  JCMethodInvocation invocation = (JCMethodInvocation) tree;\n  if (!(invocation.getMethodSelect() instanceof JCFieldAccess)) {\n    return false;\n  }\n  ExpressionTree receiver = ASTHelpers.getReceiver(invocation);\n  return MOCKITO_MATCHER.matches(receiver, state);\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/main/java/autodispose2/errorprone/AbstractReturnValueIgnored.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * @param fillInStacktrace {@code true} to fill in stacktraces in {@link OutsideScopeException}s.\n *     {@code false} to disable them (and use them as signals only). Disabling them, if you don't\n *     care about the stacktraces, can result in some minor performance improvements.\n */\n", "func_signal": "public static void setFillInOutsideScopeExceptionStacktraces(boolean fillInStacktrace)", "code": "{\n  if (lockdown) {\n    throw new IllegalStateException(\"Plugins can't be changed anymore\");\n  }\n  fillInOutsideScopeExceptionStacktraces = fillInStacktrace;\n}", "path": "AutoDispose/autodispose/src/main/java/autodispose2/AutoDisposePlugins.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * Return the lifecycle classes on which to apply the Error-Prone check.\n *\n * @param inputClasses the custom scopes defined by user.\n * @param overrideScopes whether the custom scopes are exclusive.\n * @return the classes on which to apply the error-prone check.\n */\n", "func_signal": "private static ImmutableSet<String> getClassesWithScope(\n    Optional<ImmutableSet<String>> inputClasses, Optional<Boolean> overrideScopes)", "code": "{\n  if (inputClasses.isPresent()) {\n    if (overrideScopes.isPresent() && overrideScopes.get()) {\n      // The custom scopes are exclusive, just return that.\n      return inputClasses.get();\n    } else {\n      // The custom scopes aren't exclusive, so bundle them together with default scopes.\n      return ImmutableSet.<String>builder()\n          .addAll(DEFAULT_CLASSES_WITH_LIFECYCLE)\n          .addAll(inputClasses.get())\n          .build();\n    }\n  } else {\n    // No custom scopes. Return default scopes.\n    return DEFAULT_CLASSES_WITH_LIFECYCLE;\n  }\n}", "path": "AutoDispose/static-analysis/autodispose-error-prone/src/main/java/autodispose2/errorprone/UseAutoDispose.java", "commit_date": "2019-09-24 00:00:00", "repo_name": "uber/AutoDispose", "stars": 3348, "license": "apache-2.0", "language": "java", "size": 12546}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:45\n */\n", "func_signal": "public Constant constant()", "code": "{\n  ASTNode$State state = state();\n  try {\n\t\tthrow new UnsupportedOperationException();\n\t}\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @ast method \n * \n */\n", "func_signal": "public CatchParameterDeclaration(Modifiers p0, List<Access> p1, String p2)", "code": "{\n  setChild(p0, 0);\n  setChild(p1, 1);\n  setID(p2);\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n\t * Duplicate declaration checking for catch parameters.\n\t * @ast method \n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:186\n */\n", "func_signal": "public void nameCheck()", "code": "{\n\t\tSimpleSet decls = outerScope().lookupVariable(name());\n\t\tfor(Iterator iter = decls.iterator(); iter.hasNext(); ) {\n\t\t\tVariable var = (Variable)iter.next();\n\t\t\tif (var instanceof VariableDeclaration) {\n\t\t\t\tVariableDeclaration decl = (VariableDeclaration)var;\n\t\t\t\tif (decl.enclosingBodyDecl() == enclosingBodyDecl())\n\t\t\t\t\terror(\"duplicate declaration of \"+\n\t\t\t\t\t\t\"catch parameter \"+name());\n\t\t\t} else if (var instanceof ParameterDeclaration) {\n\t\t\t\tParameterDeclaration decl = (ParameterDeclaration)var;\n\t\t\t\tif (decl.enclosingBodyDecl() == enclosingBodyDecl())\n\t\t\t\t\terror(\"duplicate declaration of \"+\n\t\t\t\t\t\t\"catch parameter \"+name());\n\t\t\t} else if (var instanceof CatchParameterDeclaration) {\n\t\t\t\tCatchParameterDeclaration decl = (CatchParameterDeclaration)var;\n\t\t\t\tif (decl.enclosingBodyDecl() == enclosingBodyDecl())\n\t\t\t\t\terror(\"duplicate declaration of \"+\n\t\t\t\t\t\t\"catch parameter \"+name());\n\t\t\t}\n\t\t}\n\n\t\t// 8.4.1  \n\t\tif (!lookupVariable(name()).contains(this))\n\t\t\terror(\"duplicate declaration of catch parameter \" +\n\t\t\t\t\tname());\n\t}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:61\n */\n", "func_signal": "public int size()", "code": "{\n  ASTNode$State state = state();\n  try {  return 1;  }\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:66\n */\n", "func_signal": "public boolean contains(Object o)", "code": "{\n  ASTNode$State state = state();\n  try {  return this == o;  }\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/** Write a segment of the given String. */\n", "func_signal": "public void write(String s, int off, int len) throws IOException", "code": "{\n  for (int i = off; i < off + len; i++) {\n    write(s.charAt(i));\n  }\n}", "path": "soot/src/main/java/soot/util/EscapedWriter.java", "commit_date": "2018-06-05 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:35\n */\n", "func_signal": "public boolean isVolatile()", "code": "{\n  ASTNode$State state = state();\n  try {  return getModifiers().isVolatile();  }\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/*\n * This is the object for a flag use in a conditional If the value is a local set the appropriate heuristic\n */\n", "func_signal": "public void inASTUnaryCondition(ASTUnaryCondition uc)", "code": "{\n  Value val = uc.getValue();\n  if (val instanceof Local) {\n    if (inIf) {\n      info.setHeuristic((Local) val, infoGatheringAnalysis.IF);\n    }\n    if (inWhile) {\n      info.setHeuristic((Local) val, infoGatheringAnalysis.WHILE);\n    }\n  }\n}", "path": "soot/src/main/java/soot/dava/toolkits/base/renamer/infoGatheringAnalysis.java", "commit_date": "2018-06-05 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:37\n */\n", "func_signal": "public boolean isStatic()", "code": "{\n  ASTNode$State state = state();\n  try {  return false;  }\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * Replaces the TypeAccess list element at index {@code i} with the new node {@code node}.\n * @param node The new node to replace the old list element.\n * @param i The list index of the node to be replaced.\n * @apilevel high-level\n * @ast method \n * \n */\n", "func_signal": "public void setTypeAccess(Access node, int i)", "code": "{\n  List<Access> list = getTypeAccessList();\n  list.setChild(node, i);\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/*\n * Deals with cases in which a local is assigned a value from a static field int local = field int local = class.field\n */\n", "func_signal": "public void inStaticFieldRef(StaticFieldRef sfr)", "code": "{\n  if (inDefinitionStmt && (definedLocal != null)) {\n    SootField field = sfr.getField();\n    info.setFieldName(definedLocal, field.getName());\n  }\n}", "path": "soot/src/main/java/soot/dava/toolkits/base/renamer/infoGatheringAnalysis.java", "commit_date": "2018-06-05 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:42\n */\n", "func_signal": "public Expr getInit()", "code": "{\n  ASTNode$State state = state();\n  try {\n\t\tthrow new UnsupportedOperationException();\n\t}\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n\t * The catch parameter of a multi-catch clause is implicitly final.\n\t * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:34\n */\n", "func_signal": "public boolean isFinal()", "code": "{\n  ASTNode$State state = state();\n  try {  return true;  }\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "// Find multi called methods relavant to recusive method invocation\n", "func_signal": "private void finder2(PegCallGraph pcg)", "code": "{\n\n  pcg.trim();\n  Set<SootMethod> first = new HashSet<SootMethod>();\n  Set<SootMethod> second = new HashSet<SootMethod>();\n  // Visit each node\n  Iterator it = pcg.iterator();\n  while (it.hasNext()) {\n    SootMethod s = (SootMethod) it.next();\n\n    if (!second.contains(s)) {\n\n      visitNode(s, pcg, first, second);\n    }\n  }\n\n}", "path": "soot/src/main/java/soot/jimple/toolkits/thread/mhp/findobject/MultiCalledMethods.java", "commit_date": "2018-06-05 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/*\n * Check the key of the switch statement to see if its a local\n */\n", "func_signal": "public void inASTSwitchNode(ASTSwitchNode node)", "code": "{\n  Value key = node.get_Key();\n  if (key instanceof Local) {\n    info.setHeuristic((Local) key, infoGatheringAnalysis.SWITCH);\n  }\n}", "path": "soot/src/main/java/soot/dava/toolkits/base/renamer/infoGatheringAnalysis.java", "commit_date": "2018-06-05 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/*\n * The method checks whether a particular ConditionExpr is a comparison of a local with a boolean If so the local is\n * returned\n */\n", "func_signal": "private Local checkBooleanUse(ConditionExpr condition)", "code": "{\n  boolean booleanUse = false;\n\n  // check whether the condition qualifies as a boolean use\n  if (condition instanceof NeExpr || condition instanceof EqExpr) {\n    Value op1 = condition.getOp1();\n    Value op2 = condition.getOp2();\n    if (op1 instanceof DIntConstant) {\n      Type op1Type = ((DIntConstant) op1).type;\n      if (op1Type instanceof BooleanType) {\n        booleanUse = true;\n      }\n    } else if (op2 instanceof DIntConstant) {\n      Type op2Type = ((DIntConstant) op2).type;\n      if (op2Type instanceof BooleanType) {\n        booleanUse = true;\n      }\n    }\n    if (booleanUse) {\n      // at this point we know that one of the values op1 or op2 was a boolean\n      // check whether the other is a local\n      if (op1 instanceof Local) {\n        return (Local) op1;\n      } else if (op2 instanceof Local) {\n        return (Local) op2;\n      }\n    } else {\n      return null;// meaning no local used as boolean found\n    }\n  }\n  return null; // meaning no local used as boolean found\n}", "path": "soot/src/main/java/soot/dava/toolkits/base/renamer/infoGatheringAnalysis.java", "commit_date": "2018-06-05 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @param from\n * @param to\n */\n", "func_signal": "public AssignEdge(final VarNode from, final VarNode to)", "code": "{\n  this.src = from;\n  this.dst = to;\n}", "path": "soot/src/main/java/soot/jimple/spark/ondemand/pautil/AssignEdge.java", "commit_date": "2018-06-05 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:21\n */\n", "func_signal": "public boolean isInstanceVariable()", "code": "{\n  ASTNode$State state = state();\n  try {  return false;  }\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n\t * A catch parameter declared with a disjunction type has the\n\t * effective type lub(t1, t2, ...)\n\t *\n\t * @see \"JLSv3 &sect;15.12.2.7\"\n\t * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:173\n */\n", "func_signal": "public TypeDecl type()", "code": "{\n  ASTNode$State state = state();\n  try {\n\t\tArrayList<TypeDecl> list = new ArrayList<TypeDecl>();\n\t\tfor (int i = 0; i < getNumTypeAccess(); i++)\n\t\t\tlist.add(getTypeAccess(i).type());\n\t\treturn lookupLUBType(list).lub();\n\t}\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * @attribute syn\n * @aspect MultiCatch\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java7Frontend/MultiCatch.jrag:36\n */\n", "func_signal": "public boolean isBlank()", "code": "{\n  ASTNode$State state = state();\n  try {  return false;  }\n  finally {\n  }\n}", "path": "soot/src/main/generated/jastadd/soot/JastAddJ/CatchParameterDeclaration.java", "commit_date": "2017-11-06 00:00:00", "repo_name": "soot-oss/soot", "stars": 2750, "license": "lgpl-2.1", "language": "java", "size": 591195}
{"docstring": "/**\n * \u8bbe\u7f6e\u534a\u9ad8\u5ea6\u5706\u89d2\n *\n * @param enable\n * @return\n */\n", "func_signal": "public T setRadiusHalfHeightEnable(boolean enable)", "code": "{\n    this.mRadiusHalfHeightEnable = enable;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u865a\u7ebf\u5bbd\u5ea6\n *\n * @param strokeDashWidth\n * @return\n */\n", "func_signal": "public T setStrokeDashWidth(float strokeDashWidth)", "code": "{\n    this.mStrokeDashWidth = strokeDashWidth;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fb9\u6846\u7ebfselected\u72b6\u6001\u989c\u8272\n *\n * @param strokeSelectedColor\n * @return\n */\n", "func_signal": "public T setStrokeSelectedColor(int strokeSelectedColor)", "code": "{\n    this.mStrokeSelectedColor = strokeSelectedColor;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u53f3\u4e0a\u5706\u89d2\n *\n * @param radius\n * @return\n */\n", "func_signal": "public T setTopRightRadius(float radius)", "code": "{\n    this.mTopRightRadius = radius;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fb9\u6846\u7ebf\u4e0d\u53ef\u70b9\u51fb\u72b6\u6001\u4e0b\u989c\u8272\n *\n * @param strokeDisabledColor\n * @return\n */\n", "func_signal": "public T setStrokeDisabledColor(int strokeDisabledColor)", "code": "{\n    this.mStrokeDisabledColor = strokeDisabledColor;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u6574\u4f53\u5706\u89d2\u5f27\u5ea6\n *\n * @param radius\n * @return\n */\n", "func_signal": "public T setRadius(float radius)", "code": "{\n    this.mRadius = radius;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * ratiox = 0.2, ratioy = 0.55 \u4e3a\u8c03\u8bd5\u503c\n * \u5355\u6b21\u8def\u5f84\u6548\u679c\u56fe\uff1a http://cubic-bezier.com/#.2,.55,.8,.45\n * \u53ef\u81ea\u884c\u8c03\u6574\uff0c\u914d\u5408\u52a8\u753b\u7684\u6574\u4f53\u65f6\u957f\uff0c\u8c03\u51fa\u6bd4\u8f83\u63a5\u8fd1\u81ea\u7531\u843d\u4f53\u7684\u6548\u679c\n */\n", "func_signal": "public MultiDecelerateAccelerateInterpolator()", "code": "{\n    this(new PointF(0, 0),\n            new PointF(1, 1),\n            0.2f,\n            0.55f);\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/ball/MultiDecelerateAccelerateInterpolator.java", "commit_date": "2018-04-30 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u5bbd\u9ad8\u76f8\u7b49\n *\n * @param enable\n * @return\n */\n", "func_signal": "public T setWidthHeightEqualEnable(boolean enable)", "code": "{\n    this.mWidthHeightEqualEnable = enable;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u662f\u5426\u9ed8\u8ba4\u5f00\u542f\u6c34\u6ce2\u7eb9\n *\n * @return\n */\n", "func_signal": "private boolean getDefaultRippleEnable()", "code": "{\n    boolean enable = !(mView instanceof CompoundButton) && !(mView instanceof EditText);\n    return enable;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * @param selected\n */\n", "func_signal": "public void setSelected(boolean selected)", "code": "{\n    if (mView != null) {\n        if (mSelected != selected) {\n            mSelected = selected;\n            if (mOnSelectedChangeListener != null) {\n                mOnSelectedChangeListener.onSelectedChanged(mView, mSelected);\n            }\n        }\n    }\n    init();\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fb9\u6846\u7ebf\u5bbd\u5ea6(\u7c97\u7ec6)\n *\n * @param strokeWidth\n * @return\n */\n", "func_signal": "public T setStrokeWidth(int strokeWidth)", "code": "{\n    this.mStrokeWidth = strokeWidth;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u6309\u4e0b\u72b6\u6001\u80cc\u666f\u8272\n *\n * @param color\n * @return\n */\n", "func_signal": "public T setBackgroundPressedColor(int color)", "code": "{\n    this.mBackgroundPressedColor = color;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6eshape\u5c5e\u6027\n * \u8bbe\u7f6e\u5b8c\u6240\u6709\u5c5e\u6027\u540e\u8c03\u7528\u8bbe\u7f6e\u80cc\u666f\n */\n", "func_signal": "public void init()", "code": "{\n    //\u83b7\u53d6view\u5f53\u524ddrawable--\u7528\u4e8e\u5224\u65ad\u662f\u5426\u901a\u8fc7\u9ed8\u8ba4\u5c5e\u6027\u8bbe\u7f6e\u80cc\u666f\n    Drawable mDrawable = mView.getBackground();\n    //\u5224\u65ad\u662f\u5426\u4f7f\u7528\u81ea\u5b9a\u4e49\u989c\u8272\u503c\n    boolean isSetBg = mBackgroundColor != Integer.MAX_VALUE\n            || mBackgroundPressedColor != Integer.MAX_VALUE\n            || mBackgroundDisabledColor != Integer.MAX_VALUE\n            || mBackgroundSelectedColor != Integer.MAX_VALUE\n            || mStrokeWidth > 0 || mRadius > 0\n            || mTopLeftRadius > 0 || mTopLeftRadius > 0 || mBottomLeftRadius > 0 || mBottomRightRadius > 0;\n\n    setDrawable(mBackgroundChecked, mBackgroundCheckedColor, mStrokeCheckedColor);\n    setDrawable(mBackgroundSelected, mBackgroundPressedColor, mStrokeSelectedColor);\n    setDrawable(mBackground, mBackgroundColor, mStrokeColor);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP\n            && mRippleEnable && mView.isEnabled() && !mView.isSelected()) {//5.0\u4ee5\u4e0a\u4e14\u8bbe\u7f6e\u6c34\u6ce2\u5c5e\u6027\u5e76\u4e14\u53ef\u64cd\u4f5c\n        RippleDrawable rippleDrawable = new RippleDrawable(\n                new ColorStateList(\n                        new int[][]{\n                                new int[]{mStatePressed},\n                                new int[]{}\n                        },\n                        new int[]{\n                                mRippleColor != Integer.MAX_VALUE ? mRippleColor : mBackgroundPressedColor,\n                                mRippleColor\n                        }\n                )\n                , getContentDrawable(mDrawable, isSetBg)\n                , null);\n        mView.setBackground(rippleDrawable);\n    } else {\n        if (!isSetBg) {\n            return;\n        }\n        StateListDrawable mStateDrawable = new StateListDrawable();\n        mStateDrawable.setEnterFadeDuration(mEnterFadeDuration);\n        mStateDrawable.setExitFadeDuration(mExitFadeDuration);\n        if (mBackgroundPressedColor != Integer.MAX_VALUE || mStrokePressedColor != Integer.MAX_VALUE) {\n            setDrawable(mBackgroundPressed, mBackgroundPressedColor, mStrokePressedColor);\n            mStateDrawable.addState(new int[]{mStatePressed}, mBackgroundPressed);\n        }\n        if (mBackgroundSelectedColor != Integer.MAX_VALUE || mStrokeSelectedColor != Integer.MAX_VALUE) {\n            setDrawable(mBackgroundSelected, mBackgroundSelectedColor, mStrokeSelectedColor);\n            mStateDrawable.addState(new int[]{mStateSelected}, mBackgroundSelected);\n        }\n        if (mBackgroundCheckedColor != Integer.MAX_VALUE || mStrokeCheckedColor != Integer.MAX_VALUE) {\n            setDrawable(mBackgroundChecked, mBackgroundCheckedColor, mStrokeCheckedColor);\n            mStateDrawable.addState(new int[]{mStateChecked}, mBackgroundChecked);\n        }\n        if (mBackgroundDisabledColor != Integer.MAX_VALUE || mStrokeDisabledColor != Integer.MAX_VALUE) {\n            setDrawable(mBackgroundDisabled, mBackgroundDisabledColor, mStrokeDisabledColor);\n            mStateDrawable.addState(new int[]{mStateDisabled}, mBackgroundDisabled);\n        }\n        mStateDrawable.addState(new int[]{}, mBackground);//\u9ed8\u8ba4\u72b6\u6001--\u653e\u7f6e\u5728\u6700\u540e\u5426\u5219\u5176\u5b83\u72b6\u6001\u4e0d\u751f\u6548\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n            mView.setBackground(mStateDrawable);\n        } else {\n            mView.setBackgroundDrawable(mStateDrawable);\n        }\n    }\n    return;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u6c34\u6ce2\u7eb9\u989c\u8272 5.0\u4ee5\u4e0a\u652f\u6301\n *\n * @param color\n * @return\n */\n", "func_signal": "public T setRippleColor(int color)", "code": "{\n    this.mRippleColor = color;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fb9\u6846\u7ebf\u5e38\u6001\u989c\u8272\n *\n * @param strokeColor\n * @return\n */\n", "func_signal": "public T setStrokeColor(int strokeColor)", "code": "{\n    this.mStrokeColor = strokeColor;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u6784\u9020PathInterpolator\n * @param segmentLength\n * @return\n */\n", "func_signal": "public Interpolator createInterpolator(float[] segmentLength)", "code": "{\n    Path p = createPath(segmentLength);\n    Interpolator inter = PathInterpolatorCompat.create(p);\n    return inter;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/ball/MultiDecelerateAccelerateInterpolator.java", "commit_date": "2018-04-30 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fb9\u6846checked\u72b6\u6001\u989c\u8272\n *\n * @param strokeCheckedColor\n * @return\n */\n", "func_signal": "public T setStrokeCheckedColor(int strokeCheckedColor)", "code": "{\n    this.mStrokeCheckedColor = strokeCheckedColor;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u5de6\u4e0a\u5706\u89d2\n *\n * @param radius\n * @return\n */\n", "func_signal": "public T setTopLeftRadius(float radius)", "code": "{\n    this.mTopLeftRadius = radius;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6e\u9009\u4e2d\u72b6\u6001\u53d8\u6362\u76d1\u542c\n *\n * @param listener\n * @return\n */\n", "func_signal": "public T setOnSelectedChangeListener(OnSelectedChangeListener listener)", "code": "{\n    this.mOnSelectedChangeListener = listener;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/**\n * \u8bbe\u7f6eselected\u72b6\u6001\u4e0b\u80cc\u666f\u8272\n *\n * @param color\n * @return\n */\n", "func_signal": "public T setBackgroundSelectedColor(int color)", "code": "{\n    this.mBackgroundSelectedColor = color;\n    return (T) this;\n}", "path": "MeiWidgetView/widget/src/main/java/com/meis/widget/radius/delegate/RadiusViewDelegate.java", "commit_date": "2018-05-12 00:00:00", "repo_name": "HpWens/MeiWidgetView", "stars": 2170, "license": "apache-2.0", "language": "java", "size": 78708}
{"docstring": "/** Test. */\n", "func_signal": "@Test\npublic void testCheckCsrfToken()", "code": "{\n\tfinal HttpServletRequest httpRequest0 = createNiceMock(HttpServletRequest.class);\n\treplay(httpRequest0);\n\ttry {\n\t\tMonitoringController.checkCsrfToken(httpRequest0);\n\t} catch (final Exception e) {\n\t\tassertNotNull(\"e\", e);\n\t}\n\tverify(httpRequest0);\n\n\tfinal HttpServletRequest httpRequest1 = createNiceMock(HttpServletRequest.class);\n\tfinal HttpSession httpSession1 = createNiceMock(HttpSession.class);\n\tfinal String token = \"dummy token\";\n\texpect(HttpParameter.TOKEN.getParameterFrom(httpRequest1)).andReturn(token);\n\texpect(httpRequest1.getSession(false)).andReturn(httpSession1);\n\texpect(httpSession1.getAttribute(SessionListener.CSRF_TOKEN_SESSION_NAME)).andReturn(token);\n\treplay(httpRequest1);\n\treplay(httpSession1);\n\tMonitoringController.checkCsrfToken(httpRequest1);\n\tverify(httpRequest1);\n\tverify(httpSession1);\n\n\tfinal HttpServletRequest httpRequest2 = createNiceMock(HttpServletRequest.class);\n\tfinal HttpSession httpSession2 = createNiceMock(HttpSession.class);\n\texpect(HttpParameter.TOKEN.getParameterFrom(httpRequest2)).andReturn(token);\n\texpect(httpRequest2.getSession(false)).andReturn(httpSession2);\n\texpect(httpSession2.getAttribute(SessionListener.CSRF_TOKEN_SESSION_NAME))\n\t\t\t.andReturn(\"unknown\");\n\treplay(httpRequest2);\n\treplay(httpSession2);\n\ttry {\n\t\tMonitoringController.checkCsrfToken(httpRequest2);\n\t} catch (final Exception e) {\n\t\tassertNotNull(\"e\", e);\n\t}\n\tverify(httpRequest2);\n\tverify(httpSession2);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringController.java", "commit_date": "2019-07-19 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoFilterWithSession() throws ServletException, IOException", "code": "{\n\tfinal HttpServletRequest request = createNiceMock(HttpServletRequest.class);\n\tfinal HttpSession session = createNiceMock(HttpSession.class);\n\texpect(request.getSession(false)).andReturn(session).anyTimes();\n\texpect(request.getLocale()).andReturn(Locale.FRANCE);\n\treplay(session);\n\tdoFilter(request);\n\tverify(session);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoFilter() throws ServletException, IOException", "code": "{\n\t// displayed-counters\n\tsetProperty(Parameter.DISPLAYED_COUNTERS, \"sql\");\n\ttry {\n\t\tsetUp();\n\t\tHttpServletRequest request = createNiceMock(HttpServletRequest.class);\n\t\tdoFilter(request);\n\t\tsetProperty(Parameter.DISPLAYED_COUNTERS, \"\");\n\t\tsetUp();\n\t\trequest = createNiceMock(HttpServletRequest.class);\n\t\tdoFilter(request);\n\t\tsetProperty(Parameter.DISPLAYED_COUNTERS, \"unknown\");\n\t\ttry {\n\t\t\tsetUp();\n\t\t\trequest = createNiceMock(HttpServletRequest.class);\n\t\t\tdoFilter(request);\n\t\t} catch (final IllegalArgumentException e) {\n\t\t\tassertNotNull(\"ok\", e);\n\t\t}\n\t} finally {\n\t\tsetProperty(Parameter.DISPLAYED_COUNTERS, null);\n\t}\n\n\t// url exclue\n\tsetProperty(Parameter.URL_EXCLUDE_PATTERN, \".*\");\n\ttry {\n\t\tsetUp();\n\t\tfinal HttpServletRequest request = createNiceMock(HttpServletRequest.class);\n\t\tdoFilter(request);\n\t} finally {\n\t\tsetProperty(Parameter.URL_EXCLUDE_PATTERN, \"\");\n\t}\n\n\t// standard\n\tsetUp();\n\tHttpServletRequest request = createNiceMock(HttpServletRequest.class);\n\tdoFilter(request);\n\n\t// log\n\tsetUp();\n\tsetProperty(Parameter.LOG, TRUE);\n\ttry {\n\t\t((Logger) org.slf4j.LoggerFactory.getLogger(FILTER_NAME)).setLevel(Level.WARN);\n\t\trequest = createNiceMock(HttpServletRequest.class);\n\t\tdoFilter(request);\n\n\t\t((Logger) org.slf4j.LoggerFactory.getLogger(FILTER_NAME)).setLevel(Level.DEBUG);\n\t\trequest = createNiceMock(HttpServletRequest.class);\n\t\tdoFilter(request);\n\n\t\trequest = createNiceMock(HttpServletRequest.class);\n\t\texpect(request.getHeader(\"X-Forwarded-For\")).andReturn(\"me\").anyTimes();\n\t\texpect(request.getQueryString()).andReturn(\"param1=1\").anyTimes();\n\t\tdoFilter(request);\n\t} finally {\n\t\tsetProperty(Parameter.LOG, null);\n\t}\n\n\t// ajax\n\trequest = createNiceMock(HttpServletRequest.class);\n\texpect(request.getHeader(\"X-Requested-With\")).andReturn(\"XMLHttpRequest\");\n\tdoFilter(request);\n\n\t// spring mvc with @RequestMapping (read in CounterRequestContext.getHttpRequestName())\n\trequest = createNiceMock(HttpServletRequest.class);\n\texpect(request\n\t\t\t.getAttribute(\"org.springframework.web.servlet.HandlerMapping.bestMatchingPattern\"))\n\t\t\t\t\t.andReturn(\"/testspringmvc\").anyTimes();\n\tdoFilter(request);\n\n\t// erreur syst\u00e8me http, avec log\n\tsetProperty(Parameter.LOG, TRUE);\n\ttry {\n\t\tfinal String test = \"test\";\n\t\trequest = createNiceMock(HttpServletRequest.class);\n\t\tdoFilter(request, new UnknownError(test));\n\t\trequest = createNiceMock(HttpServletRequest.class);\n\t\tdoFilter(request, new IllegalStateException(test));\n\t\t// pas possibles:\n\t\t//\t\t\tdoFilter(createNiceMock(HttpServletRequest.class), new IOException(test));\n\t\t//\t\t\tdoFilter(createNiceMock(HttpServletRequest.class), new ServletException(test));\n\t\t//\t\t\tdoFilter(createNiceMock(HttpServletRequest.class), new Exception(test));\n\t} finally {\n\t\tsetProperty(Parameter.LOG, null);\n\t}\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e\n */\n", "func_signal": "@Test\npublic void testDoMonitoringWithFormatPrometheus() throws ServletException, IOException", "code": "{\n\tfinal Map<String, String> parameters = new HashMap<>();\n\tparameters.put(\"format\", \"prometheus\");\n\tmonitoring0(parameters, true);\n\tparameters.put(\"includeLastValue\", \"true\");\n\tmonitoring0(parameters, true);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoringWithRum() throws ServletException, IOException", "code": "{\n\ttry {\n\t\tsetProperty(Parameter.RUM_ENABLED, Boolean.TRUE.toString());\n\t\tsetUp();\n\n\t\t// simulate html page with RUM\n\t\tfinal HttpServletRequest requestForRum = createNiceMock(HttpServletRequest.class);\n\t\texpect(requestForRum.getHeader(\"accept\")).andReturn(\"text/html\");\n\t\texpect(requestForRum.getInputStream())\n\t\t\t\t.andReturn(createInputStreamForString(\"<html><body>test</body></html>\"))\n\t\t\t\t.anyTimes();\n\t\tdoFilter(requestForRum);\n\n\t\t// simulate call to monitoring?resource=boomerang.min.js\n\t\tmonitoring(Collections.singletonMap(HttpParameter.RESOURCE, \"boomerang.min.js\"));\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap());\n\t\tmonitoring(Collections.singletonMap(HttpParameter.PART, HttpPart.RUM.getName()), false);\n\n\t\t// simulate call to monitoring?part=rum to register RUM data\n\t\tfinal Map<String, String> rumMap = new HashMap<>();\n\t\trumMap.put(HttpParameter.PART.getName(), HttpPart.RUM.getName());\n\t\trumMap.put(\"requestName\", TEST_REQUEST + \" GET\");\n\t\trumMap.put(\"serverTime\", \"100\");\n\t\trumMap.put(\"timeToFirstByte\", \"100\");\n\t\trumMap.put(\"domProcessing\", \"50\");\n\t\trumMap.put(\"pageRendering\", \"50\");\n\t\tmonitoring0(rumMap, false);\n\n\t\t// simulate call to monitoring for details of request with RUM data in html (period=jour : rumHits=0)\n\t\tfinal Map<HttpParameter, String> graphMap = new HashMap<>();\n\t\tgraphMap.put(HttpParameter.PART, HttpPart.GRAPH.getName());\n\t\tfinal String requestId = new CounterRequest(TEST_REQUEST + \" GET\",\n\t\t\t\tCounter.HTTP_COUNTER_NAME).getId();\n\t\tgraphMap.put(HttpParameter.GRAPH, requestId);\n\t\tmonitoring(graphMap);\n\n\t\t// simulate call to monitoring for details of request with RUM data in html (period=tout  : rumHits>0)\n\t\tgraphMap.put(HttpParameter.PERIOD, Period.TOUT.getCode());\n\t\tmonitoring(graphMap);\n\t\t// simulate call to monitoring for details of request with RUM data in pdf\n\t\tgraphMap.put(HttpParameter.FORMAT, \"pdf\");\n\t\tmonitoring(graphMap);\n\t} finally {\n\t\tsetProperty(Parameter.RUM_ENABLED, null);\n\t}\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test. */\n", "func_signal": "@Test\npublic void testAddPdfContentTypeAndDisposition()", "code": "{\n\tfinal Counter sqlCounter = new Counter(\"sql\", \"db.png\");\n\tfinal Collector collector = new Collector(\"test collector\", Arrays.asList(sqlCounter));\n\tfinal HttpServletRequest httpRequest = createNiceMock(HttpServletRequest.class);\n\tfinal HttpServletResponse httpResponse = createNiceMock(HttpServletResponse.class);\n\texpect(httpRequest.getHeader(\"user-agent\")).andReturn(\"Firefox\").anyTimes();\n\treplay(httpRequest);\n\treplay(httpResponse);\n\tnew MonitoringController(collector, null).addPdfContentTypeAndDisposition(httpRequest,\n\t\t\thttpResponse);\n\tverify(httpRequest);\n\tverify(httpResponse);\n\n\tfinal HttpServletRequest httpRequest2 = createNiceMock(HttpServletRequest.class);\n\tfinal HttpServletResponse httpResponse2 = createNiceMock(HttpServletResponse.class);\n\texpect(httpRequest2.getHeader(\"user-agent\")).andReturn(\"MSIE\").anyTimes();\n\treplay(httpRequest2);\n\treplay(httpResponse2);\n\tnew MonitoringController(collector, null).addPdfContentTypeAndDisposition(httpRequest2,\n\t\t\thttpResponse2);\n\tverify(httpRequest2);\n\tverify(httpResponse2);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringController.java", "commit_date": "2019-07-19 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e */\n", "func_signal": "@Test\npublic void testLog() throws ServletException", "code": "{\n\tfinal HttpServletRequest request = createNiceMock(HttpServletRequest.class);\n\texpect(request.getRemoteAddr()).andReturn(REMOTE_ADDR);\n\texpect(request.getRequestURI()).andReturn(CONTEXT_PATH + TEST_REQUEST);\n\texpect(request.getContextPath()).andReturn(CONTEXT_PATH);\n\texpect(request.getQueryString()).andReturn(\"param1=1\");\n\texpect(request.getMethod()).andReturn(\"GET\");\n\n\tsetProperty(Parameter.LOG, TRUE);\n\n\tsetUp();\n\n\treplay(request);\n\tmonitoringFilter.log(request, \"test\", 1000, false, 200, 10000);\n\tverify(request);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test. */\n", "func_signal": "@Test\npublic void testWriteHtmlToLastShutdownFile()", "code": "{\n\tfinal Counter sqlCounter = new Counter(\"sql\", \"db.png\");\n\tfinal Collector collector = new Collector(\"test\", Arrays.asList(sqlCounter));\n\tnew MonitoringController(collector, null).writeHtmlToLastShutdownFile();\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringController.java", "commit_date": "2019-07-19 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoringWithGraph() throws ServletException, IOException", "code": "{\n\tfinal Map<HttpParameter, String> parameters = new HashMap<>();\n\tparameters.put(HttpParameter.GRAPH, \"usedMemory\");\n\tparameters.put(HttpParameter.WIDTH, \"800\");\n\tparameters.put(HttpParameter.HEIGHT, \"600\");\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.GRAPH, \"unknown\");\n\tmonitoring(parameters, false);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test. */\n", "func_signal": "@Test\npublic void testGuiceAOP()", "code": "{\n\tfinal Counter guiceCounter = MonitoringProxy.getGuiceCounter();\n\tguiceCounter.clear();\n\n\tfinal Key<AnnotatedTest> annotatedTestMethodKey = Key.get(AnnotatedTest.class,\n\t\t\tNames.named(\"annotatedTestMethod\"));\n\tfinal Key<AnnotatedTest> annotatedTestOtherClassKey = Key.get(AnnotatedTest.class,\n\t\t\tNames.named(\"annotatedTestOtherClass\"));\n\tfinal Module testModule = new AbstractModule() {\n\t\t/** {@inheritDoc} */\n\t\t@Override\n\t\tprotected void configure() {\n\t\t\t// configuration du monitoring Guice\n\t\t\tinstall(new MonitoringGuiceModule());\n\t\t\t// impl\u00e9mentation de test\n\t\t\tbind(SpringTestFacade.class).to(SpringTestFacadeImpl.class);\n\t\t\tbind(AnnotatedTest.class).to(AnnotatedTestClass.class);\n\t\t\tbind(annotatedTestOtherClassKey).to(AnnotatedTestOtherClass.class);\n\t\t\tbind(annotatedTestMethodKey).to(AnnotatedTestMethod.class);\n\t\t}\n\t};\n\tfinal Injector injector = Guice.createInjector(testModule);\n\tfinal SpringTestFacade springTestFacade = injector.getInstance(SpringTestFacade.class);\n\n\tguiceCounter.setDisplayed(false);\n\tassertNotNull(\"now()\", springTestFacade.now());\n\tassertSame(REQUESTS_COUNT, 0, guiceCounter.getRequestsCount());\n\n\tguiceCounter.setDisplayed(true);\n\tassertNotNull(\"now()\", springTestFacade.now());\n\tassertSame(REQUESTS_COUNT, 1, guiceCounter.getRequestsCount());\n\n\ttry {\n\t\tspringTestFacade.throwError();\n\t} catch (final Error e) {\n\t\tassertSame(REQUESTS_COUNT, 2, guiceCounter.getRequestsCount());\n\t}\n\n\tfinal AnnotatedTest annotatedTestClass = injector.getInstance(AnnotatedTestClass.class);\n\tassertNotNull(\"annotatedTestClass\", annotatedTestClass.myMethod());\n\tassertSame(REQUESTS_COUNT, 3, guiceCounter.getRequestsCount());\n\n\tfinal AnnotatedTest annotatedTestOtherClass = injector\n\t\t\t.getInstance(annotatedTestOtherClassKey);\n\tassertNotNull(\"annotatedTestOtherClass\", annotatedTestOtherClass.myMethod());\n\tassertSame(REQUESTS_COUNT, 4, guiceCounter.getRequestsCount());\n\n\tfinal AnnotatedTest annotatedTestMethod = injector.getInstance(annotatedTestMethodKey);\n\tassertNotNull(\"annotatedTestMethod\", annotatedTestMethod.myMethod());\n\tassertNotNull(\"annotatedTestMethod\", annotatedTestMethod.myOtherMethod());\n\tassertSame(REQUESTS_COUNT, 6, guiceCounter.getRequestsCount());\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringGuiceInterceptor.java", "commit_date": "2019-07-12 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoFilterWithSessionBis() throws ServletException, IOException", "code": "{\n\tfinal HttpServletRequest request = createNiceMock(HttpServletRequest.class);\n\tfinal HttpSession session = createNiceMock(HttpSession.class);\n\texpect(request.getSession(false)).andReturn(session);\n\t// Locale sans pays\n\texpect(request.getLocale()).andReturn(Locale.FRENCH).anyTimes();\n\t// \"X-Forwarded-For\"\n\texpect(request.getHeader(\"X-Forwarded-For\")).andReturn(\"somewhere\").anyTimes();\n\t// getRemoteUser\n\texpect(request.getRemoteUser()).andReturn(\"me\").anyTimes();\n\treplay(session);\n\tdoFilter(request);\n\tverify(session);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoringWithMail() throws ServletException, IOException", "code": "{\n\tsetProperty(Parameter.MAIL_SESSION, \"testmailsession\");\n\tsetProperty(Parameter.ADMIN_EMAILS, null);\n\tsetUp();\n\tmonitoring(Collections.<HttpParameter, String> emptyMap());\n\tsetProperty(Parameter.ADMIN_EMAILS, \"evernat@free.fr\");\n\tsetUp();\n\tmonitoring(Collections.<HttpParameter, String> emptyMap());\n\tsetProperty(Parameter.MAIL_SESSION, null);\n\tsetProperty(Parameter.ADMIN_EMAILS, null);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoFilterNoHttp() throws ServletException, IOException", "code": "{\n\tfinal FilterChain servletChain = createNiceMock(FilterChain.class);\n\tfinal ServletRequest servletRequest = createNiceMock(ServletRequest.class);\n\tfinal ServletResponse servletResponse = createNiceMock(ServletResponse.class);\n\treplay(servletRequest);\n\treplay(servletResponse);\n\treplay(servletChain);\n\tmonitoringFilter.doFilter(servletRequest, servletResponse, servletChain);\n\tverify(servletRequest);\n\tverify(servletResponse);\n\tverify(servletChain);\n\n\tfinal FilterChain servletChain2 = createNiceMock(FilterChain.class);\n\tfinal HttpServletRequest servletRequest2 = createNiceMock(HttpServletRequest.class);\n\tfinal ServletResponse servletResponse2 = createNiceMock(ServletResponse.class);\n\treplay(servletRequest2);\n\treplay(servletResponse2);\n\treplay(servletChain2);\n\tmonitoringFilter.doFilter(servletRequest2, servletResponse2, servletChain2);\n\tverify(servletRequest2);\n\tverify(servletResponse2);\n\tverify(servletChain2);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoringWithResource() throws ServletException, IOException", "code": "{\n\tmonitoring(Collections.singletonMap(HttpParameter.RESOURCE, \"monitoring.css\"));\n\tmonitoring(Collections.singletonMap(HttpParameter.RESOURCE, \"beans.png\"));\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoringWithPeriod() throws ServletException, IOException", "code": "{\n\tfinal Map<HttpParameter, String> parameters = new HashMap<>();\n\tparameters.put(HttpParameter.PERIOD, Period.JOUR.getCode());\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.PATTERN, \"dd/MM/yyyy\");\n\tparameters.put(HttpParameter.PERIOD, \"1/1/2000|1/1/2001\");\n\tmonitoring(parameters);\n\n\tHttpCookieManager.setDefaultRange(Period.TOUT.getRange());\n\tHttpCookieManager.setDefaultRange(Period.JOUR.getRange());\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoring() throws ServletException, IOException", "code": "{\n\tmonitoring(Collections.<HttpParameter, String> emptyMap());\n\tmonitoring(Collections.singletonMap(HttpParameter.FORMAT, \"html\"));\n\tmonitoring(Collections.singletonMap(HttpParameter.FORMAT, \"htmlbody\"));\n\tsetProperty(Parameter.DISABLED, Boolean.TRUE.toString());\n\ttry {\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap(), false);\n\t} finally {\n\t\tsetProperty(Parameter.DISABLED, Boolean.FALSE.toString());\n\t}\n\tsetProperty(Parameter.NO_DATABASE, Boolean.TRUE.toString());\n\ttry {\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap());\n\t} finally {\n\t\tsetProperty(Parameter.NO_DATABASE, Boolean.FALSE.toString());\n\t}\n\tsetProperty(Parameter.ALLOWED_ADDR_PATTERN, \"256.*\");\n\ttry {\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap(), false);\n\t\tsetProperty(Parameter.ALLOWED_ADDR_PATTERN, \".*\");\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap(), false);\n\t} finally {\n\t\tsetProperty(Parameter.ALLOWED_ADDR_PATTERN, null);\n\t}\n\tsetProperty(Parameter.AUTHORIZED_USERS, \"admin:password, \");\n\ttry {\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap(), false);\n\t\tsetProperty(Parameter.AUTHORIZED_USERS, \"\");\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap(), false);\n\t} finally {\n\t\tsetProperty(Parameter.AUTHORIZED_USERS, null);\n\t}\n\tsetProperty(Parameter.MONITORING_PATH, \"/admin/monitoring\");\n\ttry {\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap(), false);\n\t} finally {\n\t\tsetProperty(Parameter.MONITORING_PATH, \"/monitoring\");\n\t}\n\ttry {\n\t\tsetProperty(Parameter.JMX_EXPOSE_ENABLED, Boolean.TRUE.toString());\n\t\tsetUp();\n\t\tmonitoring(Collections.<HttpParameter, String> emptyMap());\n\t} finally {\n\t\tsetProperty(Parameter.JMX_EXPOSE_ENABLED, null);\n\t}\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoringWithFormatXml() throws ServletException, IOException", "code": "{\n\tfinal Map<HttpParameter, String> parameters = new HashMap<>();\n\tparameters.put(HttpParameter.FORMAT, TransportFormat.XML.getCode());\n\tmonitoring(parameters);\n\tsetProperty(Parameter.SYSTEM_ACTIONS_ENABLED, TRUE);\n\tparameters.put(HttpParameter.PART, HttpPart.SESSIONS.getName());\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.PART, HttpPart.PROCESSES.getName());\n\tmonitoring(parameters);\n\tTestDatabaseInformations.initJdbcDriverParameters();\n\tparameters.put(HttpParameter.PART, HttpPart.DATABASE.getName());\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.PART, HttpPart.CONNECTIONS.getName());\n\tmonitoring(parameters);\n\t// il ne faut pas faire un heapHisto sans thread comme dans TestHtmlHeapHistogramReport\n\t//\t\tparameters.put(HttpParameter.PART, HttpPart.HEAP_HISTO.getName());\n\t//\t\tmonitoring(parameters);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoFilterWithGWT() throws ServletException, IOException", "code": "{\n\tfinal HttpServletRequest request = createNiceMock(HttpServletRequest.class);\n\tfinal String textGwtRpc = \"text/x-gwt-rpc\";\n\texpect(request.getContentType()).andReturn(textGwtRpc).anyTimes();\n\texpect(request.getInputStream())\n\t\t\t.andReturn(createInputStreamForString(\"1|2|3|4|5|6|7|8|9|10\")).anyTimes();\n\tdoFilter(request);\n\n\tfinal HttpServletRequest request2a = createNiceMock(HttpServletRequest.class);\n\texpect(request2a.getContentType()).andReturn(\"not/x-gwt-rpc\").anyTimes();\n\texpect(request2a.getInputStream())\n\t\t\t.andReturn(createInputStreamForString(\"1|2|3|4|5|6|7|8|9|10\")).anyTimes();\n\tdoFilter(request2a);\n\n\tfinal HttpServletRequest request2b = createNiceMock(HttpServletRequest.class);\n\texpect(request2b.getContentType()).andReturn(textGwtRpc).anyTimes();\n\texpect(request2b.getInputStream()).andReturn(createInputStreamForString(\"1|2|3|4|5|6\"))\n\t\t\t.anyTimes();\n\texpect(request2b.getReader()).andReturn(new BufferedReader(new StringReader(\"1|2|3|4|5|6\")))\n\t\t\t.anyTimes();\n\treplay(request2b);\n\tfinal PayloadNameRequestWrapper wrapper2b = new PayloadNameRequestWrapper(request2b);\n\twrapper2b.getInputStream().read();\n\twrapper2b.getReader().read();\n\tverify(request2b);\n\n\tfinal HttpServletRequest request2 = createNiceMock(HttpServletRequest.class);\n\texpect(request2.getContentType()).andReturn(textGwtRpc).anyTimes();\n\texpect(request2.getInputStream())\n\t\t\t.andReturn(createInputStreamForString(\"1|2|3|4|5|6||8|9|10\")).anyTimes();\n\texpect(request2.getReader()).andReturn(new BufferedReader(new StringReader(\"1|2|3|4|5|6\")))\n\t\t\t.anyTimes();\n\treplay(request2);\n\tfinal PayloadNameRequestWrapper wrapper2 = new PayloadNameRequestWrapper(request2);\n\twrapper2.getInputStream().read();\n\twrapper2.getReader().read();\n\tverify(request2);\n\n\tfinal HttpServletRequest request3 = createNiceMock(HttpServletRequest.class);\n\texpect(request3.getContentType()).andReturn(textGwtRpc).anyTimes();\n\texpect(request3.getCharacterEncoding()).andReturn(\"utf-8\").anyTimes();\n\texpect(request3.getInputStream())\n\t\t\t.andReturn(createInputStreamForString(\"1|2|3|4|5|6||8|9|10\")).anyTimes();\n\texpect(request3.getReader()).andReturn(new BufferedReader(new StringReader(\"1|2|3|4|5|6\")))\n\t\t\t.anyTimes();\n\treplay(request3);\n\tfinal PayloadNameRequestWrapper wrapper3 = new PayloadNameRequestWrapper(request3);\n\twrapper3.getInputStream().read();\n\twrapper3.getInputStream().read();\n\twrapper3.getReader().read();\n\twrapper3.getReader().read();\n\tverify(request3);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/**\n * Initialisation.\n */\n", "func_signal": "@Before\npublic void setUp()", "code": "{\n\tUtils.initialize();\n\tfinal ServletContext context = createNiceMock(ServletContext.class);\n\texpect(context.getMajorVersion()).andReturn(2).anyTimes();\n\texpect(context.getMinorVersion()).andReturn(5).anyTimes();\n\texpect(context.getServletContextName()).andReturn(\"test webapp\").anyTimes();\n\texpect(context.getServerInfo()).andReturn(\"mockJetty\").anyTimes();\n\texpect(context.getContextPath()).andReturn(\"/test\").anyTimes();\n\treplay(context);\n\tParameters.initialize(context);\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringController.java", "commit_date": "2019-07-19 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/** Test.\n * @throws ServletException e\n * @throws IOException e */\n", "func_signal": "@Test\npublic void testDoMonitoringWithParts() throws ServletException, IOException", "code": "{\n\tfinal Map<HttpParameter, String> parameters = new HashMap<>();\n\n\tparameters.put(HttpParameter.PART, HttpPart.CURRENT_REQUESTS.getName());\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.PART, HttpPart.THREADS.getName());\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.PART, HttpPart.THREADS_DUMP.getName());\n\tmonitoring(parameters);\n\tfinal File hsErrPidFile = new File(\"./hs_err_pid12345.log\");\n\ttry {\n\t\thsErrPidFile.createNewFile();\n\t\tparameters.put(HttpParameter.PART, HttpPart.CRASHES.getName());\n\t\tmonitoring(parameters, false);\n\t\tparameters.put(HttpParameter.PATH, hsErrPidFile.getAbsolutePath().replace('\\\\', '/'));\n\t\tmonitoring(parameters, false);\n\t\tparameters.put(HttpParameter.PATH, \"unknown\");\n\t\tmonitoring(parameters, false);\n\t\tparameters.remove(HttpParameter.PATH);\n\t} finally {\n\t\thsErrPidFile.delete();\n\t}\n\tparameters.put(HttpParameter.PART, HttpPart.CACHE_KEYS.getName());\n\tfinal String cacheName = getClass().getName();\n\tCacheManager.getInstance().addCache(cacheName);\n\tparameters.put(HttpParameter.CACHE_ID, cacheName);\n\tmonitoring(parameters);\n\tCacheManager.getInstance().getCache(cacheName).put(new Element(\"1\", \"value\"));\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.FORMAT, \"htmlbody\");\n\tmonitoring(parameters);\n\tsetProperty(Parameter.SYSTEM_ACTIONS_ENABLED, \"false\");\n\tmonitoring(parameters);\n\tCacheManager.getInstance().removeCache(cacheName);\n\tparameters.remove(HttpParameter.CACHE_ID);\n\tparameters.remove(HttpParameter.FORMAT);\n\tsetProperty(Parameter.SYSTEM_ACTIONS_ENABLED, TRUE);\n\n\tparameters.put(HttpParameter.PART, HttpPart.JCACHE_KEYS.getName());\n\tfinal MutableConfiguration<Object, Object> conf = new MutableConfiguration<>();\n\tconf.setManagementEnabled(true);\n\tconf.setStatisticsEnabled(true);\n\tCaching.getCachingProvider().getCacheManager().createCache(cacheName, conf);\n\tCaching.getCachingProvider().getCacheManager().createCache(cacheName + \"2\", conf);\n\tparameters.put(HttpParameter.CACHE_ID, cacheName);\n\tmonitoring(parameters);\n\tCaching.getCachingProvider().getCacheManager().getCache(cacheName).put(\"1\", \"value\");\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.FORMAT, \"htmlbody\");\n\tmonitoring(parameters);\n\tsetProperty(Parameter.SYSTEM_ACTIONS_ENABLED, \"false\");\n\tmonitoring(parameters);\n\tCaching.getCachingProvider().getCacheManager().destroyCache(cacheName);\n\tparameters.remove(HttpParameter.CACHE_ID);\n\tparameters.remove(HttpParameter.FORMAT);\n\tsetProperty(Parameter.SYSTEM_ACTIONS_ENABLED, TRUE);\n\n\tparameters.put(HttpParameter.PART, HttpPart.JNLP.getName());\n\tmonitoring(parameters);\n\tsetProperty(Parameter.JAVAMELODY_SWING_URL, \"http://dummy\");\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.PART, HttpPart.DEPENDENCIES.getName());\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.PART, HttpPart.COUNTER_SUMMARY_PER_CLASS.getName());\n\tparameters.put(HttpParameter.COUNTER, \"services\");\n\tmonitoring(parameters);\n\tparameters.put(HttpParameter.GRAPH, \"unknown service\");\n\tmonitoring(parameters);\n\tparameters.remove(HttpParameter.COUNTER);\n\n\tdoMonitoringWithGraphPart();\n\n\tdoMonitoringWithSourcePart();\n\n\tdoMonitoringWithUnknownPart();\n}", "path": "javamelody/javamelody-core/src/test/java/net/bull/javamelody/TestMonitoringFilter.java", "commit_date": "2020-11-22 00:00:00", "repo_name": "javamelody/javamelody", "stars": 2900, "license": "apache-2.0", "language": "java", "size": 109370}
{"docstring": "/**\n * \u662f\u5426\u5f00\u542f\u7ed8\u5236\u5206\u9694\u7ebf\uff0c\u9ed8\u8ba4\u5173\u95ed\n *\n * @param enableDivider true\u4e3a\u7ed8\u5236\uff0cfalse\u4e0d\u7ed8\u5236\uff0cfalse\u65f6setDividerId\u65e0\u6548\n * @return \u6784\u5efa\u8005\n */\n", "func_signal": "public Builder enableDivider(boolean enableDivider)", "code": "{\n    this.enableDivider = enableDivider;\n    return this;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u521b\u5efa\u6807\u7b7e\u5f3a\u5236\u56fa\u5b9a\u5728\u9876\u90e8\n *\n * @param parent\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate void createPinnedHeader(final RecyclerView parent)", "code": "{\n\n    if (mAdapter == null) {\n        // checkCache\u7684\u8bddRecyclerView\u672a\u8bbe\u7f6e\u4e4b\u524dmAdapter\u4e3a\u7a7a\n        return;\n    }\n\n    final RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();\n\n    // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u53ef\u89c1\u7684item\u4f4d\u7f6e\n    mFirstVisiblePosition = findFirstVisiblePosition(layoutManager);\n\n    // \u83b7\u53d6\u6807\u7b7e\u7684\u4f4d\u7f6e\uff0c\n    int pinnedHeaderPosition = findPinnedHeaderPosition(mFirstVisiblePosition);\n    if (pinnedHeaderPosition >= 0 && mPinnedHeaderPosition != pinnedHeaderPosition) {\n\n        // \u6807\u7b7e\u4f4d\u7f6e\u6709\u6548\u5e76\u4e14\u548c\u7f13\u5b58\u7684\u4f4d\u7f6e\u4e0d\u540c\n        mPinnedHeaderPosition = pinnedHeaderPosition;\n        // \u83b7\u53d6\u6807\u7b7e\u7684type\n        final int type = mAdapter.getItemViewType(mPinnedHeaderPosition);\n\n        // \u624b\u52a8\u8c03\u7528\u521b\u5efa\u6807\u7b7e\n        final RecyclerView.ViewHolder holder = mAdapter.createViewHolder(parent, type);\n        mAdapter.bindViewHolder(holder, mPinnedHeaderPosition);\n        // \u7f13\u5b58\u6807\u7b7e\n        mPinnedHeaderView = holder.itemView;\n\n        ViewGroup.LayoutParams lp = mPinnedHeaderView.getLayoutParams();\n        if (lp == null) {\n            // \u6807\u7b7e\u9ed8\u8ba4\u5bbd\u5ea6\u5360\u6ee1parent\n            lp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n            mPinnedHeaderView.setLayoutParams(lp);\n        }\n\n        // \u5bf9\u9ad8\u5ea6\u8fdb\u884c\u5904\u7406\n        int heightMode;\n        int heightSize;\n\n        if (lp.height >= 0) {\n            heightMode = View.MeasureSpec.EXACTLY;\n            heightSize = lp.height;\n        } else if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {\n            heightMode = View.MeasureSpec.EXACTLY;\n            heightSize = parent.getHeight();\n        } else if (lp.height == ViewGroup.LayoutParams.WRAP_CONTENT) {\n            heightMode = View.MeasureSpec.AT_MOST;\n            heightSize = parent.getHeight();\n        } else {\n            heightMode = View.MeasureSpec.AT_MOST;\n            heightSize = parent.getHeight();\n        }\n\n        mRecyclerViewPaddingLeft = parent.getPaddingLeft();\n        int recyclerViewPaddingRight = parent.getPaddingRight();\n        mRecyclerViewPaddingTop = parent.getPaddingTop();\n        int recyclerViewPaddingBottom = parent.getPaddingBottom();\n\n        if (lp instanceof ViewGroup.MarginLayoutParams) {\n            final ViewGroup.MarginLayoutParams mlp = (ViewGroup.MarginLayoutParams) lp;\n            mHeaderLeftMargin = mlp.leftMargin;\n            mHeaderTopMargin = mlp.topMargin;\n            mHeaderRightMargin = mlp.rightMargin;\n            mHeaderBottomMargin = mlp.bottomMargin;\n        }\n\n        // \u6700\u5927\u9ad8\u5ea6\u4e3aRecyclerView\u7684\u9ad8\u5ea6\u51cf\u53bbpadding\n        final int maxHeight = parent.getHeight() - mRecyclerViewPaddingTop - recyclerViewPaddingBottom;\n        // \u4e0d\u80fd\u8d85\u8fc7maxHeight\n        heightSize = Math.min(heightSize, maxHeight);\n\n        // \u56e0\u4e3a\u6807\u7b7e\u9ed8\u8ba4\u5bbd\u5ea6\u5360\u6ee1parent\uff0c\u6240\u4ee5\u5bbd\u5ea6\u5f3a\u5236\u4e3aRecyclerView\u7684\u5bbd\u5ea6\u51cf\u53bbpadding\n        final int widthSpec = View.MeasureSpec\n                .makeMeasureSpec(parent.getWidth() - mRecyclerViewPaddingLeft - recyclerViewPaddingRight - mHeaderLeftMargin - mHeaderRightMargin,\n                        View.MeasureSpec.EXACTLY);\n        final int heightSpec = View.MeasureSpec.makeMeasureSpec(heightSize, heightMode);\n        // \u5f3a\u5236\u6d4b\u91cf\n        mPinnedHeaderView.measure(widthSpec, heightSpec);\n\n        mLeft = mRecyclerViewPaddingLeft + mHeaderLeftMargin;\n        mRight = mPinnedHeaderView.getMeasuredWidth() + mLeft;\n        mTop = mRecyclerViewPaddingTop + mHeaderTopMargin;\n        mBottom = mPinnedHeaderView.getMeasuredHeight() + mTop;\n\n        // \u4f4d\u7f6e\u5f3a\u5236\u5e03\u5c40\u5728\u9876\u90e8\n        mPinnedHeaderView.layout(mLeft, mTop, mRight, mBottom);\n\n        if (mItemTouchListener == null && mHeaderClickListener != null) {\n            mItemTouchListener = new OnItemTouchListener(parent.getContext());\n            try {\n                final Field field = parent.getClass().getDeclaredField(\"mOnItemTouchListeners\");\n                field.setAccessible(true);\n                final ArrayList<RecyclerView.OnItemTouchListener> touchListeners = (ArrayList<RecyclerView.OnItemTouchListener>) field.get(parent);\n                touchListeners.add(0, mItemTouchListener);\n            } catch (NoSuchFieldException e) {\n                e.printStackTrace();\n                parent.addOnItemTouchListener(mItemTouchListener);\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n                parent.addOnItemTouchListener(mItemTouchListener);\n            } catch (Exception e) {\n                // \u9632\u6b62android 9\u7981\u6b62\u4e86\u53cd\u5c04\u8c03\u7528\n                e.printStackTrace();\n                parent.addOnItemTouchListener(mItemTouchListener);\n            }\n            mItemTouchListener.setHeaderClickListener(mHeaderClickListener);\n            mItemTouchListener.disableHeaderClick(mDisableHeaderClick);\n            mItemTouchListener.setClickBounds(OnItemTouchListener.HEADER_ID, mPinnedHeaderView);\n        }\n\n        if (mHeaderClickListener != null) {\n            // OnItemTouchListener.HEADER_ID\u4ee3\u8868\u662f\u6807\u7b7e\u7684Id\n            mItemTouchListener.setClickBounds(OnItemTouchListener.HEADER_ID, mPinnedHeaderView);\n            if (mHeaderClickListener != null && mClickIds != null && mClickIds.length > 0) {\n                for (int mClickId : mClickIds) {\n                    final View view = mPinnedHeaderView.findViewById(mClickId);\n                    if (view != null && view.getVisibility() == View.VISIBLE) {\n                        mItemTouchListener.setClickBounds(mClickId, view);\n                    }\n                }\n            }\n            mItemTouchListener.setClickHeaderInfo(mPinnedHeaderPosition - mDataPositionOffset);\n        }\n\n    }\n\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u662f\u5426\u5173\u95ed\u6807\u7b7e\u70b9\u51fb\u4e8b\u4ef6\uff0c\u9ed8\u8ba4\u5f00\u542f\n *\n * @param disableHeaderClick true\u4e3a\u5173\u95ed\u6807\u7b7e\u70b9\u51fb\u4e8b\u4ef6\uff0cfalse\u4e3a\u5f00\u542f\u6807\u7b7e\u70b9\u51fb\u4e8b\u4ef6\n * @return \u6784\u5efa\u8005\n */\n", "func_signal": "public Builder disableHeaderClick(boolean disableHeaderClick)", "code": "{\n    this.disableHeaderClick = disableHeaderClick;\n    return this;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/SmallPinnedHeaderItemDecoration.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u67e5\u627e\u5230view\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4ece\u800c\u5224\u65ad\u51fa\u662f\u5426\u6807\u7b7e\u7c7b\u578b\n *\n * @param parent\n * @param view\n * @return\n */\n", "func_signal": "private boolean isPinnedHeader(RecyclerView parent, View view)", "code": "{\n    final int position = parent.getChildAdapterPosition(view);\n    if (position == RecyclerView.NO_POSITION) {\n        return false;\n    }\n    final int type = mAdapter.getItemViewType(position);\n    return isPinnedHeaderType(type);\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u66f4\u65b0\u70b9\u51fb\u8303\u56f4\u7684\u9876\u90e8\u548c\u5e95\u90e8\n *\n * @param offset \u504f\u5dee\n */\n", "func_signal": "public void invalidTopAndBottom(int offset)", "code": "{\n    for (int i = 0; i < mBoundsArray.size(); i++) {\n        final ClickBounds bounds = mBoundsArray.valueAt(i);\n        bounds.setTop(bounds.getFirstTop() + offset);\n        bounds.setBottom(bounds.getFirstBottom() + offset);\n    }\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/callback/OnItemTouchListener.java", "commit_date": "2018-11-07 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u627e\u51fa\u7b2c\u4e00\u4e2a\u53ef\u89c1\u7684Item\u7684\u4f4d\u7f6e\n *\n * @param layoutManager\n * @return\n */\n", "func_signal": "private int findFirstVisiblePosition(RecyclerView.LayoutManager layoutManager)", "code": "{\n    int firstVisiblePosition = 0;\n    if (layoutManager instanceof GridLayoutManager) {\n        firstVisiblePosition = ((GridLayoutManager) layoutManager).findFirstVisibleItemPosition();\n    } else if (layoutManager instanceof LinearLayoutManager) {\n        firstVisiblePosition = ((LinearLayoutManager) layoutManager).findFirstVisibleItemPosition();\n    } else if (layoutManager instanceof StaggeredGridLayoutManager) {\n        int[] into = new int[((StaggeredGridLayoutManager) layoutManager).getSpanCount()];\n        ((StaggeredGridLayoutManager) layoutManager).findFirstVisibleItemPositions(into);\n        firstVisiblePosition = Integer.MAX_VALUE;\n        for (int pos : into) {\n            firstVisiblePosition = Math.min(pos, firstVisiblePosition);\n        }\n    }\n    return firstVisiblePosition;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u8bbe\u7f6e\u5206\u9694\u7ebf\u8d44\u6e90ID\n *\n * @param dividerId \u8d44\u6e90ID\uff0c\u82e5\u4e0d\u8bbe\u7f6e\u8fd9\u4e2a\u5e76\u4e14enableDivider=true\u65f6\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5206\u9694\u7ebf\n * @return \u6784\u5efa\u8005\n */\n", "func_signal": "public Builder setDividerId(int dividerId)", "code": "{\n    this.dividerId = dividerId;\n    return this;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u8bbe\u7f6e\u6807\u7b7e\u548c\u5176\u5185\u90e8\u7684\u5b50\u63a7\u4ef6\u7684\u76d1\u542c\uff0c\u82e5\u8bbe\u7f6e\u70b9\u51fb\u76d1\u542c\u4e0d\u4e3anull\uff0c\u4f46\u662fdisableHeaderClick(true)\u7684\u8bdd\uff0c\u8fd8\u662f\u4e0d\u4f1a\u54cd\u5e94\u70b9\u51fb\u4e8b\u4ef6\n *\n * @param headerClickListener \u76d1\u542c\uff0c\u82e5\u4e0d\u8bbe\u7f6e\u8fd9\u4e2asetClickIds\u65e0\u6548\n * @return \u6784\u5efa\u8005\n */\n", "func_signal": "public Builder setHeaderClickListener(OnHeaderClickListener headerClickListener)", "code": "{\n    this.headerClickListener = headerClickListener;\n    return this;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u6784\u9020\u65b9\u6cd5\n *\n * @param pinnedHeaderId   \u5c0f\u6807\u7b7e\u5bf9\u5e94\u7684ID\n * @param pinnedHeaderType \u7c98\u6027\u6807\u7b7e\u7684\u7c7b\u578b\n */\n", "func_signal": "public Builder(int pinnedHeaderId, int pinnedHeaderType)", "code": "{\n    this.pinnedHeaderId = pinnedHeaderId;\n    this.pinnedHeaderType = pinnedHeaderType;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/SmallPinnedHeaderItemDecoration.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "// \u67e5\u627e\u6807\u7b7e\u7684\u4f4d\u7f6e\n", "func_signal": "private int findPinnedHeaderPosition(int fromPosition)", "code": "{\n\n    for (int position = fromPosition; position >= 0; position--) {\n        // \u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u9012\u51cf\uff0c\u53ea\u8981\u4e00\u67e5\u5230\u6709\u4f4d\u7f6etype\u4e3a\u6807\u7b7e\uff0c\u7acb\u5373\u8fd4\u56de\u6b64\u6807\u7b7e\u4f4d\u7f6e\n        final int viewType = mAdapter.getItemViewType(position);\n        // \u68c0\u67e5\u662f\u5426\u662f\u6807\u7b7e\u7c7b\u578b\n        if (isPinnedViewType(viewType)) {\n            // \u662f\u6807\u7b7e\u7c7b\u578b\uff0c\u8fd4\u56de\u4f4d\u7f6e\n            return position;\n        }\n    }\n\n    return -1;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/SmallPinnedHeaderItemDecoration.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u7981\u6b62\u7ed8\u5236\u7c98\u6027\u5934\u90e8\n *\n * @param disableDrawHeader true\u7684\u8bdd\u4e0d\u7ed8\u5236\u5934\u90e8\uff0c\u9ed8\u8ba4false\u7ed8\u5236\u5934\u90e8\n */\n", "func_signal": "public void disableDrawHeader(boolean disableDrawHeader)", "code": "{\n    mDisableDrawHeader = disableDrawHeader;\n    if (mParent != null) {\n        mParent.invalidateItemDecorations();\n    }\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u9002\u7528\u4e8e\u7f51\u683c\u5e03\u5c40\uff0c\u7528\u4e8e\u5224\u65ad\u662f\u5426\u662f\u7b2c\u4e00\u5217\n *\n * @param parent\n * @param pos\n * @param spanCount\n * @return\n */\n", "func_signal": "private boolean isFirstColumn(RecyclerView parent, int pos, int spanCount)", "code": "{\n    RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();\n    if (layoutManager instanceof GridLayoutManager) {\n        final int headerPosition = findPinnedHeaderPosition(pos);\n        if (headerPosition >= 0 && (pos - (headerPosition + 1)) % spanCount == 0) {\n            // \u627e\u5230\u5934\u90e8\u4f4d\u7f6e\u51cf\u53bb\u5305\u62ec\u5934\u90e8\u4f4d\u7f6e\u4e4b\u524d\u7684\u4e2a\u6570\n            return true;\n        }\n    }\n    return false;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u662f\u5426\u5f00\u542f\u7ed8\u5236\u5206\u9694\u7ebf\uff0c\u9ed8\u8ba4\u5173\u95ed\n *\n * @param enableDivider true\u4e3a\u7ed8\u5236\uff0cfalse\u4e0d\u7ed8\u5236\uff0cfalse\u65f6setDividerId\u65e0\u6548\n * @return \u6784\u5efa\u8005\n */\n", "func_signal": "public Builder enableDivider(boolean enableDivider)", "code": "{\n    this.enableDivider = enableDivider;\n    return this;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/SmallPinnedHeaderItemDecoration.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u68c0\u67e5\u7f13\u5b58\n *\n * @param parent\n */\n", "func_signal": "private void checkCache(final RecyclerView parent)", "code": "{\n\n    if (mParent != parent) {\n        mParent = parent;\n    }\n\n    final RecyclerView.Adapter adapter = parent.getAdapter();\n    if (mAdapter != adapter) {\n        // \u9002\u914d\u5668\u4e3anull\u6216\u8005\u4e0d\u540c\uff0c\u6e05\u7a7a\u7f13\u5b58\n        mPinnedHeaderView = null;\n        mPinnedHeaderPosition = -1;\n        mAdapter = adapter;\n        mAdapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\n            @Override\n            public void onChanged() {\n                super.onChanged();\n                reset();\n            }\n\n            @Override\n            public void onItemRangeChanged(int positionStart, int itemCount) {\n                super.onItemRangeChanged(positionStart, itemCount);\n                reset();\n            }\n\n            @Override\n            public void onItemRangeChanged(int positionStart, int itemCount, Object payload) {\n                super.onItemRangeChanged(positionStart, itemCount, payload);\n                reset();\n            }\n\n            @Override\n            public void onItemRangeInserted(int positionStart, int itemCount) {\n                super.onItemRangeInserted(positionStart, itemCount);\n                reset();\n            }\n\n            @Override\n            public void onItemRangeRemoved(int positionStart, int itemCount) {\n                super.onItemRangeRemoved(positionStart, itemCount);\n                reset();\n            }\n\n            @Override\n            public void onItemRangeMoved(int fromPosition, int toPosition, int itemCount) {\n                super.onItemRangeMoved(fromPosition, toPosition, itemCount);\n                reset();\n            }\n        });\n    }\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u901a\u8fc7\u4f20\u5165\u5305\u62ec\u6807\u7b7e\u548c\u5176\u5185\u90e8\u7684\u5b50\u63a7\u4ef6\u7684ID\u8bbe\u7f6e\u5176\u5bf9\u5e94\u7684\u70b9\u51fb\u4e8b\u4ef6\n *\n * @param clickIds \u6807\u7b7e\u6216\u5176\u5185\u90e8\u7684\u5b50\u63a7\u4ef6\u7684ID\n * @return \u6784\u5efa\u8005\n */\n", "func_signal": "public Builder setClickIds(int... clickIds)", "code": "{\n    this.clickIds = clickIds;\n    return this;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/SmallPinnedHeaderItemDecoration.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u8bbe\u7f6e\u5bf9\u5e94\u7684View\u7684\u70b9\u51fb\u8303\u56f4\n *\n * @param id   View\u7684ID\n * @param view \u70b9\u51fb\u7684View\n */\n", "func_signal": "public void setClickBounds(int id, View view)", "code": "{\n    ClickBounds bounds;\n    if (mBoundsArray.get(id) == null) {\n        bounds = new ClickBounds(view, view.getLeft(), view.getTop(), view.getLeft() + view.getMeasuredWidth(), view.getTop() + view.getMeasuredHeight());\n        mBoundsArray.put(id, bounds);\n    } else {\n        bounds = mBoundsArray.get(id);\n        bounds.setBounds(view.getLeft(), view.getTop(), view.getLeft() + view.getMeasuredWidth(), view.getTop() + view.getMeasuredHeight());\n    }\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/callback/OnItemTouchListener.java", "commit_date": "2018-11-07 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u4ece\u4f20\u5165\u4f4d\u7f6e\u9012\u51cf\u627e\u51fa\u6807\u7b7e\u7684\u4f4d\u7f6e\n *\n * @param formPosition\n * @return\n */\n", "func_signal": "private int findPinnedHeaderPosition(int formPosition)", "code": "{\n\n    for (int position = formPosition; position >= 0; position--) {\n        // \u4f4d\u7f6e\u9012\u51cf\uff0c\u53ea\u8981\u67e5\u5230\u4f4d\u7f6e\u662f\u6807\u7b7e\uff0c\u7acb\u5373\u8fd4\u56de\u6b64\u4f4d\u7f6e\n        final int type = mAdapter.getItemViewType(position);\n        if (isPinnedHeaderType(type)) {\n            return position;\n        }\n    }\n\n    return -1;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u662f\u5426\u5173\u95ed\u6807\u7b7e\u70b9\u51fb\u4e8b\u4ef6\uff0c\u9ed8\u8ba4\u5f00\u542f\n *\n * @param disableHeaderClick true\u4e3a\u5173\u95ed\u6807\u7b7e\u70b9\u51fb\u4e8b\u4ef6\uff0cfalse\u4e3a\u5f00\u542f\u6807\u7b7e\u70b9\u51fb\u4e8b\u4ef6\n * @return \u6784\u5efa\u8005\n */\n", "func_signal": "public Builder disableHeaderClick(boolean disableHeaderClick)", "code": "{\n    this.disableHeaderClick = disableHeaderClick;\n    return this;\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/PinnedHeaderItemDecoration.java", "commit_date": "2019-03-06 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * \u7981\u6b62\u7ed8\u5236\u7c98\u6027\u5934\u90e8\n *\n * @param disableDrawHeader true\u7684\u8bdd\u4e0d\u7ed8\u5236\u5934\u90e8\uff0c\u9ed8\u8ba4false\u7ed8\u5236\u5934\u90e8\n */\n", "func_signal": "public void disableDrawHeader(boolean disableDrawHeader)", "code": "{\n    mDisableDrawHeader = disableDrawHeader;\n    if (mParent != null) {\n        mParent.invalidateItemDecorations();\n    }\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/SmallPinnedHeaderItemDecoration.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "// \u6d4b\u91cf\u6807\u7b7e\u9ad8\u5ea6\n", "func_signal": "private void measurePinnedHeader()", "code": "{\n\n    // 2.\u6d4b\u91cf\u6807\u7b7e\n    mPinnedHeaderView = mPinnedHeaderParentView.findViewById(mPinnedHeaderId);\n    // \u83b7\u53d6\u6807\u7b7e\u7684\u5e03\u5c40\u5c5e\u6027\n    ViewGroup.LayoutParams lp = mPinnedHeaderView.getLayoutParams();\n    if (lp == null) {\n        lp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        mPinnedHeaderView.setLayoutParams(lp);\n    }\n\n    if (lp instanceof ViewGroup.MarginLayoutParams) {\n        final ViewGroup.MarginLayoutParams mlp = (ViewGroup.MarginLayoutParams) lp;\n        mHeaderLeftMargin = mlp.leftMargin;\n        mHeaderRightMargin = mlp.rightMargin;\n        mHeaderTopMargin = mlp.topMargin;\n        mHeaderBottomMargin = mlp.bottomMargin;\n    }\n\n    // \u8bbe\u7f6e\u9ad8\u5ea6\n    int heightMode = View.MeasureSpec.getMode(lp.height);\n    int heightSize = View.MeasureSpec.getSize(lp.height);\n\n    switch (heightMode) {\n        case View.MeasureSpec.UNSPECIFIED:\n            heightMode = View.MeasureSpec.EXACTLY;\n            break;\n        case View.MeasureSpec.EXACTLY:\n            heightMode = View.MeasureSpec.EXACTLY;\n            break;\n        case View.MeasureSpec.AT_MOST:\n            heightMode = View.MeasureSpec.AT_MOST;\n            break;\n        default:\n            heightMode = View.MeasureSpec.AT_MOST;\n            break;\n    }\n\n    // \u6700\u5927\u9ad8\u5ea6\u4e3amPinnedHeaderParentView\u7684\u9ad8\u5ea6\u51cf\u53bbpadding\n    int maxHeight = mPinnedHeaderParentView.getMeasuredHeight() - mPinnedHeaderParentView.getPaddingTop() - mPinnedHeaderParentView.getPaddingBottom();\n    heightSize = Math.min(heightSize, maxHeight);\n\n    int hs = View.MeasureSpec.makeMeasureSpec(heightSize, heightMode);\n\n    // \u8bbe\u7f6e\u5bbd\u5ea6\n    int widthMode = View.MeasureSpec.getMode(lp.width);\n    int widthSize = View.MeasureSpec.getSize(lp.width);\n\n    switch (widthMode) {\n        case View.MeasureSpec.UNSPECIFIED:\n            widthMode = View.MeasureSpec.EXACTLY;\n            break;\n        case View.MeasureSpec.EXACTLY:\n            widthMode = View.MeasureSpec.EXACTLY;\n            break;\n        case View.MeasureSpec.AT_MOST:\n            widthMode = View.MeasureSpec.AT_MOST;\n            break;\n        default:\n            widthMode = View.MeasureSpec.AT_MOST;\n            break;\n    }\n\n    int maxWidth = mPinnedHeaderParentView.getMeasuredWidth() - mPinnedHeaderParentView.getPaddingLeft() - mPinnedHeaderParentView.getPaddingRight();\n    widthSize = Math.min(widthSize, maxWidth);\n\n    int ws = View.MeasureSpec.makeMeasureSpec(widthSize, widthMode);\n\n    // \u5f3a\u5236\u6d4b\u91cf\n    mPinnedHeaderView.measure(ws, hs);\n\n}", "path": "PinnedSectionItemDecoration/library/src/main/java/com/oushangfeng/pinnedsectionitemdecoration/SmallPinnedHeaderItemDecoration.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "oubowu/PinnedSectionItemDecoration", "stars": 2078, "license": "apache-2.0", "language": "java", "size": 32520}
{"docstring": "/**\n * Constructs the clock with custom configuration parameters.\n *\n * @param maxMeasurementRetries  the maximum number of times that this clock will attempt to re-sample the initial\n *                               time values.\n * @param measurementThresholdNs the desired accuracy window for the initial clock samples.\n * @param resampleIntervalNs     the desired interval before the samples are automatically recalculated. The seed\n *                               recalculation enables the system to minimise clock drift if the system clock is\n *                               updated.\n */\n", "func_signal": "public OffsetEpochNanoClock(\n    final int maxMeasurementRetries, final long measurementThresholdNs, final long resampleIntervalNs)", "code": "{\n    this.maxMeasurementRetries = maxMeasurementRetries;\n    this.measurementThresholdNs = measurementThresholdNs;\n    this.resampleIntervalNs = resampleIntervalNs;\n\n    sample();\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/OffsetEpochNanoClock.java", "commit_date": "2020-10-01 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Check the the buffer capacity is the correct size.\n *\n * @param capacity to be checked.\n * @throws IllegalStateException if the buffer capacity is not a power of 2.\n */\n", "func_signal": "public static void checkCapacity(final int capacity)", "code": "{\n    if (!isPowerOfTwo(capacity))\n    {\n        final String msg = \"capacity must be a positive power of 2 + TRAILER_LENGTH: capacity=\" + capacity;\n        throw new IllegalStateException(msg);\n    }\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/broadcast/BroadcastBufferDescriptor.java", "commit_date": "2020-01-20 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Remove the barrier from the shutdown signals.\n */\n", "func_signal": "public void remove()", "code": "{\n    synchronized (LATCHES)\n    {\n        LATCHES.remove(latch);\n    }\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ShutdownSignalBarrier.java", "commit_date": "2020-07-31 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public boolean write(final int msgTypeId, final DirectBuffer srcBuffer, final int offset, final int length)", "code": "{\n    checkTypeId(msgTypeId);\n    checkMsgLength(length);\n\n    final AtomicBuffer buffer = this.buffer;\n    final int recordLength = length + HEADER_LENGTH;\n    final int recordIndex = claimCapacity(buffer, recordLength);\n\n    if (INSUFFICIENT_CAPACITY == recordIndex)\n    {\n        return false;\n    }\n\n    buffer.putIntOrdered(lengthOffset(recordIndex), -recordLength);\n    UnsafeAccess.UNSAFE.storeFence();\n\n    buffer.putBytes(encodedMsgOffset(recordIndex), srcBuffer, offset, length);\n    buffer.putInt(typeOffset(recordIndex), msgTypeId);\n    buffer.putIntOrdered(lengthOffset(recordIndex), recordLength);\n\n    return true;\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ringbuffer/ManyToOneRingBuffer.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Construct a new {@link RingBuffer} based on an underlying {@link AtomicBuffer}.\n * The underlying buffer must a power of 2 in size plus sufficient space\n * for the {@link RingBufferDescriptor#TRAILER_LENGTH}.\n *\n * @param buffer via which events will be exchanged.\n * @throws IllegalStateException if the buffer capacity is not a power of 2\n *                               plus {@link RingBufferDescriptor#TRAILER_LENGTH} in capacity.\n */\n", "func_signal": "public ManyToOneRingBuffer(final AtomicBuffer buffer)", "code": "{\n    this.buffer = buffer;\n    checkCapacity(buffer.capacity());\n    capacity = buffer.capacity() - TRAILER_LENGTH;\n\n    buffer.verifyAlignment();\n\n    maxMsgLength = capacity >> 3;\n    tailPositionIndex = capacity + TAIL_POSITION_OFFSET;\n    headCachePositionIndex = capacity + HEAD_CACHE_POSITION_OFFSET;\n    headPositionIndex = capacity + HEAD_POSITION_OFFSET;\n    correlationIdCounterIndex = capacity + CORRELATION_COUNTER_OFFSET;\n    consumerHeartbeatIndex = capacity + CONSUMER_HEARTBEAT_OFFSET;\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ringbuffer/ManyToOneRingBuffer.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Main method.\n *\n * @param args command line args.\n * @throws IOException in case of I/O error.\n */\n", "func_signal": "public static void main(final String[] args) throws IOException", "code": "{\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"IntIntConsumer\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"IntArrayList\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"IntArrayQueue\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"Int2IntHashMap\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"Int2IntCounterMap\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"IntHashSet\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"IntLruCache\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"Int2ObjectCache\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"Int2ObjectHashMap\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"Int2NullableObjectHashMap\", SRC_DIR, DST_DIR);\n    specialise(SUBSTITUTIONS, COLLECTIONS_PACKAGE, \"Object2IntHashMap\", SRC_DIR, DST_DIR);\n}", "path": "agrona/agrona/src/main/java/org/agrona/generation/SpecialisationGenerator.java", "commit_date": "2020-10-01 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public void commit(final int index)", "code": "{\n    final int recordIndex = computeRecordIndex(index);\n    final AtomicBuffer buffer = this.buffer;\n    final int recordLength = verifyClaimedSpaceNotReleased(buffer, recordIndex);\n\n    buffer.putIntOrdered(lengthOffset(recordIndex), -recordLength);\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ringbuffer/ManyToOneRingBuffer.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public void abort(final int index)", "code": "{\n    final int recordIndex = computeRecordIndex(index);\n    final AtomicBuffer buffer = this.buffer;\n    final int recordLength = verifyClaimedSpaceNotReleased(buffer, recordIndex);\n\n    buffer.putInt(typeOffset(recordIndex), PADDING_MSG_TYPE_ID);\n    buffer.putIntOrdered(lengthOffset(recordIndex), -recordLength);\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ringbuffer/ManyToOneRingBuffer.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Construct and register the barrier ready for use.\n */\n", "func_signal": "public ShutdownSignalBarrier()", "code": "{\n    synchronized (LATCHES)\n    {\n        LATCHES.add(latch);\n    }\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ShutdownSignalBarrier.java", "commit_date": "2020-07-31 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Perform conditional code substitutions, i.e. only if not disabled.\n *\n * @param contents original source code.\n * @return modified source code.\n */\n", "func_signal": "public String conditionalSubstitute(final String contents)", "code": "{\n    return\n        (contents.contains(\"@DoNotSub\") || contents.contains(\"interface\") || contents.contains(\"Interface\")) ?\n            contents : substitute(contents);\n}", "path": "agrona/agrona/src/main/java/org/agrona/generation/SpecialisationGenerator.java", "commit_date": "2020-10-01 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public int tryClaim(final int msgTypeId, final int length)", "code": "{\n    checkTypeId(msgTypeId);\n    checkMsgLength(length);\n\n    final AtomicBuffer buffer = this.buffer;\n    final int recordLength = length + HEADER_LENGTH;\n    final int recordIndex = claimCapacity(buffer, recordLength);\n\n    if (INSUFFICIENT_CAPACITY == recordIndex)\n    {\n        return recordIndex;\n    }\n\n    buffer.putIntOrdered(lengthOffset(recordIndex), -recordLength);\n    UnsafeAccess.UNSAFE.storeFence();\n    buffer.putInt(typeOffset(recordIndex), msgTypeId);\n\n    return encodedMsgOffset(recordIndex);\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ringbuffer/ManyToOneRingBuffer.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public int read(final MessageHandler handler, final int messageCountLimit)", "code": "{\n    int messagesRead = 0;\n\n    final AtomicBuffer buffer = this.buffer;\n    final int headPositionIndex = this.headPositionIndex;\n    final long head = buffer.getLong(headPositionIndex);\n\n    final int capacity = this.capacity;\n    final int headIndex = (int)head & (capacity - 1);\n    final int maxBlockLength = capacity - headIndex;\n    int bytesRead = 0;\n\n    try\n    {\n        while ((bytesRead < maxBlockLength) && (messagesRead < messageCountLimit))\n        {\n            final int recordIndex = headIndex + bytesRead;\n            final int recordLength = buffer.getIntVolatile(lengthOffset(recordIndex));\n            if (recordLength <= 0)\n            {\n                break;\n            }\n\n            bytesRead += align(recordLength, ALIGNMENT);\n\n            final int messageTypeId = buffer.getInt(typeOffset(recordIndex));\n            if (PADDING_MSG_TYPE_ID == messageTypeId)\n            {\n                continue;\n            }\n\n            handler.onMessage(messageTypeId, buffer, recordIndex + HEADER_LENGTH, recordLength - HEADER_LENGTH);\n            ++messagesRead;\n        }\n    }\n    finally\n    {\n        if (bytesRead > 0)\n        {\n            buffer.setMemory(headIndex, bytesRead, (byte)0);\n            buffer.putLongOrdered(headPositionIndex, head + bytesRead);\n        }\n    }\n\n    return messagesRead;\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ringbuffer/ManyToOneRingBuffer.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Explicitly resample the initial seeds.\n */\n", "func_signal": "public void sample()", "code": "{\n    // Loop attempts to find a measurement that is accurate to a given threshold\n    long bestInitialCurrentNanoTime = 0, bestInitialNanoTime = 0;\n    long bestNanoTimeWindow = Long.MAX_VALUE;\n\n    for (int i = 0; i < maxMeasurementRetries; i++)\n    {\n        final long firstNanoTime = System.nanoTime();\n        final long initialCurrentTimeMillis = System.currentTimeMillis();\n        final long secondNanoTime = System.nanoTime();\n\n        final long nanoTimeWindow = secondNanoTime - firstNanoTime;\n        if (nanoTimeWindow < measurementThresholdNs)\n        {\n            initialCurrentNanoTime = MILLISECONDS.toNanos(initialCurrentTimeMillis);\n            initialNanoTime = (firstNanoTime + secondNanoTime) >> 1;\n            isWithinThreshold = true;\n            return;\n        }\n        else if (nanoTimeWindow < bestNanoTimeWindow)\n        {\n            bestInitialCurrentNanoTime = MILLISECONDS.toNanos(initialCurrentTimeMillis);\n            bestInitialNanoTime = (firstNanoTime + secondNanoTime) >> 1;\n            bestNanoTimeWindow = nanoTimeWindow;\n        }\n    }\n\n    // If we never get a time below the threshold, pick the narrowest window we've seen so far.\n    initialCurrentNanoTime = bestInitialCurrentNanoTime;\n    initialNanoTime = bestInitialNanoTime;\n    isWithinThreshold = false;\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/OffsetEpochNanoClock.java", "commit_date": "2020-10-01 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Programmatically signal awaiting threads on the latch associated with this barrier.\n */\n", "func_signal": "public void signal()", "code": "{\n    synchronized (LATCHES)\n    {\n        LATCHES.remove(latch);\n        latch.countDown();\n    }\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ShutdownSignalBarrier.java", "commit_date": "2020-07-31 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "// Generated suite to test conformity to the java.util.Set interface\n", "func_signal": "public static TestSuite suite()", "code": "{\n    return mapTestSuite(new TestMapGenerator<Integer, Integer>()\n    {\n        public Integer[] createKeyArray(final int length)\n        {\n            return new Integer[length];\n        }\n\n        public Integer[] createValueArray(final int length)\n        {\n            return new Integer[length];\n        }\n\n        public SampleElements<Map.Entry<Integer, Integer>> samples()\n        {\n            return new SampleElements<>(\n                Helpers.mapEntry(1, 123),\n                Helpers.mapEntry(2, 234),\n                Helpers.mapEntry(3, 345),\n                Helpers.mapEntry(345, 6),\n                Helpers.mapEntry(777, 666));\n        }\n\n        public Map<Integer, Integer> create(final Object... entries)\n        {\n            final Int2NullableObjectHashMap<Integer> map = new Int2NullableObjectHashMap<>(\n                entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\n\n            for (final Object o : entries)\n            {\n                @SuppressWarnings(\"unchecked\")\n                final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>)o;\n                map.put(e.getKey(), e.getValue());\n            }\n\n            return map;\n        }\n\n        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n        public Map.Entry<Integer, Integer>[] createArray(final int length)\n        {\n            return new Map.Entry[length];\n        }\n\n        public Iterable<Map.Entry<Integer, Integer>> order(final List<Map.Entry<Integer, Integer>> insertionOrder)\n        {\n            return insertionOrder;\n        }\n    }, Int2NullableObjectHashMap.class.getSimpleName());\n}", "path": "agrona/agrona/src/test/java/org/agrona/collections/Int2NullableObjectHashMapConformanceTest.java", "commit_date": "2020-10-02 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public int size()", "code": "{\n    final AtomicBuffer buffer = this.buffer;\n    final int headPositionIndex = this.headPositionIndex;\n    final int tailPositionIndex = this.tailPositionIndex;\n    long headBefore;\n    long tail;\n    long headAfter = buffer.getLongVolatile(headPositionIndex);\n\n    do\n    {\n        headBefore = headAfter;\n        tail = buffer.getLongVolatile(tailPositionIndex);\n        headAfter = buffer.getLongVolatile(headPositionIndex);\n    }\n    while (headAfter != headBefore);\n\n    final long size = tail - headAfter;\n    if (size < 0)\n    {\n        return 0;\n    }\n    else if (size > capacity)\n    {\n        return capacity;\n    }\n\n    return (int)size;\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ringbuffer/ManyToOneRingBuffer.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Perform code substitutions.\n *\n * @param contents original source code.\n * @return modified source code.\n */\n", "func_signal": "public String substitute(final String contents)", "code": "{\n    return contents\n        .replace(\"int\", primitiveType)\n        .replace(\"Integer\", boxedType)\n        .replace(\"Int\", className);\n}", "path": "agrona/agrona/src/main/java/org/agrona/generation/SpecialisationGenerator.java", "commit_date": "2020-10-01 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Specialise a class replacing int types based on {@link Substitution}s.\n *\n * @param substitutions to be applied.\n * @param packageName   for the source and destination classes.\n * @param srcClassName  to be specialised.\n * @param srcDirName    containing the source file.\n * @param dstDirName    for where the generated file should be stored.\n * @throws IOException if an error occurs.\n */\n", "func_signal": "public static void specialise(\n    final List<Substitution> substitutions,\n    final String packageName,\n    final String srcClassName,\n    final String srcDirName,\n    final String dstDirName)\n    throws IOException", "code": "{\n    final Path inputPath = Paths.get(srcDirName, packageName, srcClassName + SUFFIX);\n    final Path outputDirectory = Paths.get(dstDirName, packageName);\n    Files.createDirectories(outputDirectory);\n\n    final List<String> contents = Files.readAllLines(inputPath, UTF_8);\n    for (final Substitution substitution : substitutions)\n    {\n        final String substitutedFileName = substitution.substitute(srcClassName);\n        final List<String> substitutedContents = contents\n            .stream()\n            .map(substitution::conditionalSubstitute)\n            .collect(toList());\n\n        final Path outputPath = Paths.get(dstDirName, packageName, substitutedFileName + SUFFIX);\n\n        Files.write(outputPath, substitutedContents, UTF_8);\n    }\n}", "path": "agrona/agrona/src/main/java/org/agrona/generation/SpecialisationGenerator.java", "commit_date": "2020-10-01 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "// Generated suite to test conformity to the java.util.Set interface\n", "func_signal": "public static TestSuite suite()", "code": "{\n    return mapTestSuite(new TestMapGenerator<Long, Long>()\n    {\n        public Long[] createKeyArray(final int length)\n        {\n            return new Long[length];\n        }\n\n        public Long[] createValueArray(final int length)\n        {\n            return new Long[length];\n        }\n\n        public SampleElements<Map.Entry<Long, Long>> samples()\n        {\n            return new SampleElements<>(\n                Helpers.mapEntry(1L, 123L),\n                Helpers.mapEntry(2L, 234L),\n                Helpers.mapEntry(3L, 345L),\n                Helpers.mapEntry(345L, 6L),\n                Helpers.mapEntry(777L, 666L));\n        }\n\n        public Map<Long, Long> create(final Object... entries)\n        {\n            final Long2NullableObjectHashMap<Long> map = new Long2NullableObjectHashMap<>(\n                entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\n\n            for (final Object o : entries)\n            {\n                @SuppressWarnings(\"unchecked\")\n                final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>)o;\n                map.put(e.getKey(), e.getValue());\n            }\n\n            return map;\n        }\n\n        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n        public Map.Entry<Long, Long>[] createArray(final int length)\n        {\n            return new Map.Entry[length];\n        }\n\n        public Iterable<Map.Entry<Long, Long>> order(final List<Map.Entry<Long, Long>> insertionOrder)\n        {\n            return insertionOrder;\n        }\n    }, Long2NullableObjectHashMap.class.getSimpleName());\n}", "path": "agrona/agrona/src/test/java/org/agrona/collections/Long2NullableObjectHashMapConformanceTest.java", "commit_date": "2020-10-02 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * Await the reception of the shutdown signal.\n */\n", "func_signal": "public void await()", "code": "{\n    try\n    {\n        latch.await();\n    }\n    catch (final InterruptedException ignore)\n    {\n        Thread.currentThread().interrupt();\n    }\n}", "path": "agrona/agrona/src/main/java/org/agrona/concurrent/ShutdownSignalBarrier.java", "commit_date": "2020-07-31 00:00:00", "repo_name": "real-logic/agrona", "stars": 2725, "license": "apache-2.0", "language": "java", "size": 5223}
{"docstring": "/**\n * \u751f\u6210\u7c7b\u4f3c\u4e0b\u9762\u683c\u5f0f\u7684HandlerInitClass\uff0c\u540c\u65f6\u751f\u6210ServiceInitClass\n * <pre>\n * package com.sankuai.waimai.router.generated;\n * public class UriRouter_RouterUri_xxx implements IUriAnnotationInit {\n *     public void init(UriAnnotationHandler handler) {\n *         handler.register(\"\", \"\", \"/login\", \"com.xxx.LoginActivity\", false);\n *         // ...\n *     }\n * }\n * </pre>\n *\n * @param code             \u65b9\u6cd5\u4e2d\u7684\u4ee3\u7801\n * @param genClassName     \u751f\u6210class\u7684SimpleClassName\uff0c\u5f62\u5982 UriRouter_RouterUri_xxx\n * @param handlerClassName Handler\u7c7b\u540d\uff0c\u4f8b\u5982 com.sankuai.waimai.router.common.UriAnnotationHandler\n * @param interfaceName    \u63a5\u53e3\u540d\uff0c\u4f8b\u5982 com.sankuai.waimai.router.common.IUriAnnotationInit\n */\n", "func_signal": "public void buildHandlerInitClass(CodeBlock code, String genClassName, String handlerClassName, String interfaceName)", "code": "{\n    MethodSpec methodSpec = MethodSpec.methodBuilder(Const.INIT_METHOD)\n            .addModifiers(Modifier.PUBLIC)\n            .returns(TypeName.VOID)\n            .addParameter(className(handlerClassName), \"handler\")\n            .addCode(code)\n            .build();\n    TypeSpec typeSpec = TypeSpec.classBuilder(genClassName)\n            .addSuperinterface(className(interfaceName))\n            .addModifiers(Modifier.PUBLIC)\n            .addMethod(methodSpec)\n            .build();\n    try {\n        JavaFile.builder(Const.GEN_PKG, typeSpec)\n                .build()\n                .writeTo(filer);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n\n    String fullImplName = Const.GEN_PKG + Const.DOT + genClassName;\n    String className = \"ServiceInit\" + Const.SPLITTER + hash(genClassName);\n\n    new ServiceInitClassBuilder(className)\n            .putDirectly(interfaceName, fullImplName, fullImplName, false)\n            .build();\n}", "path": "WMRouter/compiler/src/main/java/com/sankuai/waimai/router/compiler/BaseProcessor.java", "commit_date": "2019-03-28 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, byte[] value)", "code": "{\n    extra().putByteArray(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, long[] value)", "code": "{\n    extra().putLongArray(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * @param defaultScheme {@link RouterUri} \u6ca1\u6709\u6307\u5b9ascheme\u65f6\uff0c\u5219\u4f7f\u7528\u8fd9\u91cc\u8bbe\u7f6e\u7684defaultScheme\n * @param defaultHost   {@link RouterUri} \u6ca1\u6709\u6307\u5b9ahost\u65f6\uff0c\u5219\u4f7f\u7528\u8fd9\u91cc\u8bbe\u7f6e\u7684defaultHost\n */\n", "func_signal": "public DefaultRootUriHandler(Context context,\n                             @Nullable String defaultScheme, @Nullable String defaultHost)", "code": "{\n    super(context);\n    mPageAnnotationHandler = createPageAnnotationHandler();\n    mUriAnnotationHandler = createUriAnnotationHandler(defaultScheme, defaultHost);\n    mRegexAnnotationHandler = createRegexAnnotationHandler();\n\n    // \u6309\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u6570\u5b57\u8d8a\u5927\u8d8a\u5148\u6267\u884c\n\n    // \u5904\u7406RouterPage\u6ce8\u89e3\u5b9a\u4e49\u7684\u5185\u90e8\u9875\u9762\u8df3\u8f6c\uff0c\u5982\u679c\u6ce8\u89e3\u6ca1\u5b9a\u4e49\uff0c\u76f4\u63a5\u7ed3\u675f\u5206\u53d1\n    addChildHandler(mPageAnnotationHandler, 300);\n    // \u5904\u7406RouterUri\u6ce8\u89e3\u5b9a\u4e49\u7684URI\u8df3\u8f6c\uff0c\u5982\u679c\u6ce8\u89e3\u6ca1\u5b9a\u4e49\uff0c\u7ee7\u7eed\u5206\u53d1\u5230\u540e\u9762\u7684Handler\n    addChildHandler(mUriAnnotationHandler, 200);\n    // \u5904\u7406RouterRegex\u6ce8\u89e3\u5b9a\u4e49\u7684\u6b63\u5219\u5339\u914d\n    addChildHandler(mRegexAnnotationHandler, 100);\n    // \u6dfb\u52a0\u5176\u4ed6\u7528\u6237\u81ea\u5b9a\u4e49Handler...\n\n    // \u90fd\u6ca1\u6709\u5904\u7406\uff0c\u5219\u5c1d\u8bd5\u4f7f\u7528\u9ed8\u8ba4\u7684StartUriHandler\u76f4\u63a5\u542f\u52a8Uri\n    addChildHandler(new StartUriHandler(), -100);\n    // \u5168\u5c40OnCompleteListener\uff0c\u7528\u4e8e\u8f93\u51fa\u8df3\u8f6c\u5931\u8d25\u63d0\u793a\u4fe1\u606f\n    setGlobalOnCompleteListener(DefaultOnCompleteListener.INSTANCE);\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/common/DefaultRootUriHandler.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u6307\u5b9a\u4e00\u4e2a\u5185\u90e8\u9875\u9762\u8df3\u8f6c\uff0c\u6b64\u6ce8\u89e3\u53ef\u4ee5\u7528\u5728Activity\u548cUriHandler\u4e0a\n *\n * Created by jzj on 2018/3/19.\n */\n", "func_signal": "@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.CLASS)\npublic @interface RouterPage", "code": "{\n\n    /**\n     * path\n     */\n    String[] path();\n\n    /**\n     * \u8981\u6dfb\u52a0\u7684interceptors\n     */\n    Class[] interceptors() default {};\n}", "path": "WMRouter/interfaces/src/main/java/com/sankuai/waimai/router/annotation/RouterPage.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * @param activity \u7236activity\n * @param uri      \u5730\u5740\n */\n", "func_signal": "public FragmentTransactionUriRequest(@NonNull Activity activity, String uri)", "code": "{\n    super(activity, uri);\n    mFragmentManager = activity.getFragmentManager();\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/FragmentTransactionUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, int[] value)", "code": "{\n    extra().putIntArray(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, boolean[] value)", "code": "{\n    extra().putBooleanArray(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, double[] value)", "code": "{\n    extra().putDoubleArray(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u521b\u5efaHandler\u3002\u683c\u5f0f\uff1a<code>\"com.demo.TestActivity\"</code> \u6216 <code>new TestHandler()</code>\n */\n", "func_signal": "public CodeBlock buildHandler(boolean isActivity, Symbol.ClassSymbol cls)", "code": "{\n    CodeBlock.Builder b = CodeBlock.builder();\n    if (isActivity) {\n        b.add(\"$S\", cls.className());\n    } else {\n        b.add(\"new $T()\", cls);\n    }\n    return b.build();\n}", "path": "WMRouter/compiler/src/main/java/com/sankuai/waimai/router/compiler/BaseProcessor.java", "commit_date": "2019-03-28 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, float[] value)", "code": "{\n    extra().putFloatArray(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * @param context context\n * @param fragmentManager fragmentManager\n * @param uri uri\n */\n", "func_signal": "public FragmentTransactionUriRequest(@NonNull Context context, @NonNull FragmentManager fragmentManager, String uri)", "code": "{\n    super(context, uri);\n    mFragmentManager = fragmentManager;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/FragmentTransactionUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtras(Bundle extras)", "code": "{\n    if (extras != null) {\n        extra().putAll(extras);\n    }\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * @see LazyInitHelper#lazyInit()\n */\n", "func_signal": "public void lazyInit()", "code": "{\n    mPageAnnotationHandler.lazyInit();\n    mUriAnnotationHandler.lazyInit();\n    mRegexAnnotationHandler.lazyInit();\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/common/DefaultRootUriHandler.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, String[] value)", "code": "{\n    extra().putStringArray(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u6ce8\u518c\u4e00\u4e2a\u5b50\u8282\u70b9\n *\n * @param regex        \u6b63\u5219\u8868\u8fbe\u5f0f\n * @param target       \u652f\u6301ActivityClassName\u3001ActivityClass\u3001UriHandler\n * @param exported     \u662f\u5426\u5141\u8bb8\u5916\u90e8\u8df3\u8f6c\n * @param priority     \u4f18\u5148\u7ea7\n * @param interceptors \u8981\u6dfb\u52a0\u7684interceptor\n */\n", "func_signal": "public void register(String regex, Object target, boolean exported, int priority,\n                     UriInterceptor... interceptors)", "code": "{\n    Pattern pattern = compile(regex);\n    if (pattern != null) {\n        UriHandler innerHandler = UriTargetTools.parse(target, exported, interceptors);\n        if (innerHandler != null) {\n            RegexWrapperHandler handler = new RegexWrapperHandler(pattern, priority,\n                    innerHandler);\n            addChildHandler(handler, priority);\n        }\n    }\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/regex/RegexAnnotationHandler.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, Bundle value)", "code": "{\n    extra().putBundle(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u5904\u7406URI\u3002\u901a\u5e38\u4e0d\u9700\u8981\u8986\u5199\u672c\u65b9\u6cd5\u3002\n *\n * @param request  URI\u8df3\u8f6c\u8bf7\u6c42\n * @param callback \u5904\u7406\u5b8c\u6210\u540e\u7684\u56de\u8c03\n */\n", "func_signal": "public void handle(@NonNull final UriRequest request, @NonNull final UriCallback callback)", "code": "{\n    if (shouldHandle(request)) {\n        Debugger.i(\"%s: handle request %s\", this, request);\n        if (mInterceptor != null && !request.isSkipInterceptors()) {\n            mInterceptor.intercept(request, new UriCallback() {\n                @Override\n                public void onNext() {\n                    handleInternal(request, callback);\n                }\n\n                @Override\n                public void onComplete(int result) {\n                    callback.onComplete(result);\n                }\n            });\n        } else {\n            handleInternal(request, callback);\n        }\n    } else {\n        Debugger.i(\"%s: ignore request %s\", this, request);\n        callback.onNext();\n    }\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/core/UriHandler.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u521b\u5efaInterceptors\u3002\u683c\u5f0f\uff1a<code>, new Interceptor1(), new Interceptor2()</code>\n */\n", "func_signal": "public CodeBlock buildInterceptors(List<? extends TypeMirror> interceptors)", "code": "{\n    CodeBlock.Builder b = CodeBlock.builder();\n    if (interceptors != null && interceptors.size() > 0) {\n        for (TypeMirror type : interceptors) {\n            if (type instanceof Type.ClassType) {\n                Symbol.TypeSymbol e = ((Type.ClassType) type).asElement();\n                if (e instanceof Symbol.ClassSymbol && isInterceptor(e)) {\n                    b.add(\", new $T()\", e);\n                }\n            }\n        }\n    }\n    return b.build();\n}", "path": "WMRouter/compiler/src/main/java/com/sankuai/waimai/router/compiler/BaseProcessor.java", "commit_date": "2019-03-28 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * \u9644\u52a0\u5230Intent\u7684Extra\n */\n", "func_signal": "public AbsFragmentUriRequest putExtra(String name, Serializable value)", "code": "{\n    extra().putSerializable(name, value);\n    return this;\n}", "path": "WMRouter/router/src/main/java/com/sankuai/waimai/router/fragment/AbsFragmentUriRequest.java", "commit_date": "2019-03-07 00:00:00", "repo_name": "meituan/WMRouter", "stars": 2266, "license": "apache-2.0", "language": "java", "size": 3722}
{"docstring": "/**\n * The resource id for the out animation\n *\n * @param outAnimationResId\n *   The resource identifier for the animation that's being shown\n *   when the {@link Crouton} is going to be removed.\n *\n * @return the {@link Builder}.\n */\n", "func_signal": "public Builder setOutAnimation(final int outAnimationResId)", "code": "{\n  this.outAnimationResId = outAnimationResId;\n\n  return this;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Configuration.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Sends a {@link Crouton} within a {@link Message}.\n *\n * @param crouton\n *     The {@link Crouton} that should be sent.\n * @param messageId\n *     The {@link Message} id.\n */\n", "func_signal": "private void sendMessage(Crouton crouton, final int messageId)", "code": "{\n  final Message message = obtainMessage(messageId);\n  message.obj = crouton;\n  sendMessage(message);\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Manager.java", "commit_date": "2015-06-05 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Set the {@link Configuration} on this {@link Crouton}, prior to showing it.\n *\n * @param configuration\n *     a {@link Configuration} built using the {@link Configuration.Builder}.\n *\n * @return this {@link Crouton}.\n */\n", "func_signal": "public Crouton setConfiguration(final Configuration configuration)", "code": "{\n  this.configuration = configuration;\n  return this;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Creates the {@link Crouton}.\n *\n * @param activity\n *     The {@link Activity} that represents the context in which the Crouton should exist.\n * @param customView\n *     The custom {@link View} to display\n * @param viewGroup\n *     The {@link ViewGroup} that this {@link Crouton} should be added to.\n * @param configuration\n *     The {@link Configuration} for this {@link Crouton}.\n */\n", "func_signal": "private Crouton(final Activity activity, final View customView, final ViewGroup viewGroup,\n                final Configuration configuration)", "code": "{\n  if ((activity == null) || (customView == null)) {\n    throw new IllegalArgumentException(NULL_PARAMETERS_ARE_NOT_ACCEPTED);\n  }\n\n  this.activity = activity;\n  this.customView = customView;\n  this.viewGroup = viewGroup;\n  this.style = new Style.Builder().build();\n  this.text = null;\n  this.configuration = configuration;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Load the {@link Typeface} and apply to a spannable.\n */\n", "func_signal": "public TypefaceSpan(Context context, String typefaceName)", "code": "{\n  mTypeface = sTypefaceCache.get(typefaceName);\n\n  if (mTypeface == null) {\n    mTypeface = Typeface.createFromAsset(context.getApplicationContext()\n        .getAssets(), String.format(\"%s\", typefaceName));\n\n    // Cache the loaded Typeface\n    sTypefaceCache.put(typefaceName, mTypeface);\n  }\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/TypefaceSpan.java", "commit_date": "2014-04-16 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Sends a {@link Crouton} within a delayed {@link Message}.\n *\n * @param crouton\n *     The {@link Crouton} that should be sent.\n * @param messageId\n *     The {@link Message} id.\n * @param delay\n *     The delay in milliseconds.\n */\n", "func_signal": "private void sendMessageDelayed(Crouton crouton, final int messageId, final long delay)", "code": "{\n  Message message = obtainMessage(messageId);\n  message.obj = crouton;\n  sendMessageDelayed(message, delay);\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Manager.java", "commit_date": "2015-06-05 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Creates the {@link Crouton}.\n *\n * @param activity\n *     The {@link Activity} that represents the context in which the Crouton should exist.\n * @param text\n *     The text you want to display.\n * @param style\n *     The style that this {@link Crouton} should be created with.\n * @param viewGroup\n *     The {@link ViewGroup} that this {@link Crouton} should be added to.\n */\n", "func_signal": "private Crouton(Activity activity, CharSequence text, Style style, ViewGroup viewGroup)", "code": "{\n  if ((activity == null) || (text == null) || (style == null)) {\n    throw new IllegalArgumentException(NULL_PARAMETERS_ARE_NOT_ACCEPTED);\n  }\n\n  this.activity = activity;\n  this.text = text;\n  this.style = style;\n  this.viewGroup = viewGroup;\n  this.customView = null;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * The resource id for the in animation.\n *\n * @param inAnimationResId\n *   The resource identifier for the animation that's being shown\n *   when the {@link Crouton} is going to be displayed.\n *\n * @return the {@link Builder}.\n */\n", "func_signal": "public Builder setInAnimation(final int inAnimationResId)", "code": "{\n  this.inAnimationResId = inAnimationResId;\n\n  return this;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Configuration.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Creates a {@link Crouton} with provided text-resource and style for a given\n * activity.\n *\n * @param activity\n *     The {@link Activity} that represents the context in which the Crouton should exist.\n * @param textResourceId\n *     The resource id of the text you want to display.\n * @param style\n *     The style that this {@link Crouton} should be created with.\n * @param viewGroupResId\n *     The resource id of the {@link ViewGroup} that this {@link Crouton} should be added to.\n *\n * @return The created {@link Crouton}.\n */\n", "func_signal": "public static Crouton makeText(Activity activity, int textResourceId, Style style, int viewGroupResId)", "code": "{\n  return makeText(activity, activity.getString(textResourceId), style,\n      (ViewGroup) activity.findViewById(viewGroupResId));\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Cancels a {@link Crouton} immediately.\n */\n", "func_signal": "public void cancel()", "code": "{\n  Manager manager = Manager.getInstance();\n  manager.removeCroutonImmediately(this);\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/*\n * (non-Javadoc)\n *\n * @see android.os.Handler#handleMessage(android.os.Message)\n */\n", "func_signal": "@Override\npublic void handleMessage(Message message)", "code": "{\n  final Crouton crouton = (Crouton) message.obj;\n  if (null == crouton) {\n    return;\n  }\n  switch (message.what) {\n    case Messages.DISPLAY_CROUTON: {\n      displayCrouton();\n      break;\n    }\n\n    case Messages.ADD_CROUTON_TO_VIEW: {\n      addCroutonToView(crouton);\n      break;\n    }\n\n    case Messages.REMOVE_CROUTON: {\n      removeCrouton(crouton);\n      if (null != crouton.getLifecycleCallback()) {\n        crouton.getLifecycleCallback().onRemoved();\n      }\n      break;\n    }\n\n    default: {\n      super.handleMessage(message);\n      break;\n    }\n  }\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Manager.java", "commit_date": "2015-06-05 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Convenience method to get the license text for embedding within your application.\n *\n * @return The license text.\n */\n", "func_signal": "public static String getLicenseText()", "code": "{\n  return \"This application uses the Crouton library.\\n\\n\" +\n      \"Copyright 2012 - 2013 Benjamin Weiss \\n\" +\n      \"\\n\" +\n      \"Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\" +\n      \"you may not use this file except in compliance with the License.\\n\" +\n      \"You may obtain a copy of the License at\\n\" +\n      \"\\n\" +\n      \"   http://www.apache.org/licenses/LICENSE-2.0\\n\" +\n      \"\\n\" +\n      \"Unless required by applicable law or agreed to in writing, software\\n\" +\n      \"distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\" +\n      \"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\" +\n      \"See the License for the specific language governing permissions and\\n\" +\n      \"limitations under the License.\";\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Allows setting of an {@link OnClickListener} directly to a {@link Crouton} without having to use a custom view.\n *\n * @param onClickListener\n *     The {@link OnClickListener} to set.\n *\n * @return this {@link Crouton}.\n */\n", "func_signal": "public Crouton setOnClickListener(OnClickListener onClickListener)", "code": "{\n  this.onClickListener = onClickListener;\n  return this;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Removes the {@link Crouton}'s view after it's display\n * durationInMilliseconds.\n *\n * @param crouton\n *     The {@link Crouton} added to a {@link ViewGroup} and should be\n *     removed.\n */\n", "func_signal": "protected void removeCrouton(Crouton crouton)", "code": "{\n  // If the crouton hasn't been displayed yet a `Crouton.hide()` will fail to hide\n  // it since the DISPLAY message might still be in the queue. Remove all messages\n  // for this crouton.\n  removeAllMessagesForCrouton(crouton);\n\n  View croutonView = crouton.getView();\n  ViewGroup croutonParentView = (ViewGroup) croutonView.getParent();\n\n  if (null != croutonParentView) {\n    croutonView.startAnimation(crouton.getOutAnimation());\n\n    // Remove the Crouton from the queue.\n    Crouton removed = croutonQueue.poll();\n\n    // Remove the crouton from the view's parent.\n    croutonParentView.removeView(croutonView);\n    if (null != removed) {\n      removed.detachActivity();\n      removed.detachViewGroup();\n      if (null != removed.getLifecycleCallback()) {\n        removed.getLifecycleCallback().onRemoved();\n      }\n      removed.detachLifecycleCallback();\n    }\n\n    // Send a message to display the next crouton but delay it by the out\n    // animation duration to make sure it finishes\n    sendMessageDelayed(crouton, Messages.DISPLAY_CROUTON, crouton.getOutAnimation().getDuration());\n  }\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Manager.java", "commit_date": "2015-06-05 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Generates and dispatches an SDK-specific spoken announcement.\n * <p>\n * For backwards compatibility, we're constructing an event from scratch\n * using the appropriate event type. If your application only targets SDK\n * 16+, you can just call View.announceForAccessibility(CharSequence).\n * </p>\n * <p/>\n * note: AccessibilityManager is only available from API lvl 4.\n * <p/>\n * Adapted from https://http://eyes-free.googlecode.com/files/accessibility_codelab_demos_v2_src.zip\n * via https://github.com/coreform/android-formidable-validation\n *\n * @param context\n *     Used to get {@link AccessibilityManager}\n * @param text\n *     The text to announce.\n */\n", "func_signal": "public static void announceForAccessibilityCompat(Context context, CharSequence text)", "code": "{\n  if (Build.VERSION.SDK_INT >= 4) {\n    AccessibilityManager accessibilityManager = null;\n    if (null != context) {\n      accessibilityManager = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);\n    }\n    if (null == accessibilityManager || !accessibilityManager.isEnabled()) {\n      return;\n    }\n\n    // Prior to SDK 16, announcements could only be made through FOCUSED\n    // events. Jelly Bean (SDK 16) added support for speaking text verbatim\n    // using the ANNOUNCEMENT event type.\n    final int eventType;\n    if (Build.VERSION.SDK_INT < 16) {\n      eventType = AccessibilityEvent.TYPE_VIEW_FOCUSED;\n    } else {\n      eventType = AccessibilityEvent.TYPE_ANNOUNCEMENT;\n    }\n\n    // Construct an accessibility event with the minimum recommended\n    // attributes. An event without a class name or package may be dropped.\n    final AccessibilityEvent event = AccessibilityEvent.obtain(eventType);\n    event.getText().add(text);\n    event.setClassName(Manager.class.getName());\n    event.setPackageName(context.getPackageName());\n\n    // Sends the event directly through the accessibility manager. If your\n    // application only targets SDK 14+, you should just call\n    // getParent().requestSendAccessibilityEvent(this, event);\n    accessibilityManager.sendAccessibilityEvent(event);\n  }\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Manager.java", "commit_date": "2015-06-05 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Displays the next {@link Crouton} within the queue.\n */\n", "func_signal": "private void displayCrouton()", "code": "{\n  if (croutonQueue.isEmpty()) {\n    return;\n  }\n\n  // First peek whether the Crouton has an activity.\n  final Crouton currentCrouton = croutonQueue.peek();\n\n  // If the activity is null we poll the Crouton off the queue.\n  if (null == currentCrouton.getActivity()) {\n    croutonQueue.poll();\n  }\n\n  if (!currentCrouton.isShowing()) {\n    // Display the Crouton\n    sendMessage(currentCrouton, Messages.ADD_CROUTON_TO_VIEW);\n    if (null != currentCrouton.getLifecycleCallback()) {\n      currentCrouton.getLifecycleCallback().onDisplayed();\n    }\n  } else {\n    sendMessageDelayed(currentCrouton, Messages.DISPLAY_CROUTON, calculateCroutonDuration(currentCrouton));\n  }\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Manager.java", "commit_date": "2015-06-05 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Creates the {@link Crouton}.\n *\n * @param activity\n *     The {@link Activity} that the {@link Crouton} should be attached\n *     to.\n * @param customView\n *     The custom {@link View} to display\n */\n", "func_signal": "private Crouton(Activity activity, View customView)", "code": "{\n  if ((activity == null) || (customView == null)) {\n    throw new IllegalArgumentException(NULL_PARAMETERS_ARE_NOT_ACCEPTED);\n  }\n\n  this.activity = activity;\n  this.viewGroup = null;\n  this.customView = customView;\n  this.style = new Style.Builder().build();\n  this.text = null;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Adds a {@link Crouton} to the {@link ViewParent} of it's {@link Activity}.\n *\n * @param crouton\n *     The {@link Crouton} that should be added.\n */\n", "func_signal": "private void addCroutonToView(final Crouton crouton)", "code": "{\n  // don't add if it is already showing\n  if (crouton.isShowing()) {\n    return;\n  }\n\n  final View croutonView = crouton.getView();\n  if (null == croutonView.getParent()) {\n    ViewGroup.LayoutParams params = croutonView.getLayoutParams();\n    if (null == params) {\n      params =\n          new ViewGroup.MarginLayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n    }\n    // display Crouton in ViewGroup if it has been supplied\n    if (null != crouton.getViewGroup()) {\n      final ViewGroup croutonViewGroup = crouton.getViewGroup();\n      if (shouldAddViewWithoutPosition(croutonViewGroup)) {\n        croutonViewGroup.addView(croutonView, params);\n      } else {\n        croutonViewGroup.addView(croutonView, 0, params);\n      }\n    } else {\n      Activity activity = crouton.getActivity();\n      if (null == activity || activity.isFinishing()) {\n        return;\n      }\n      handleTranslucentActionBar((ViewGroup.MarginLayoutParams) params, activity);\n      handleActionBarOverlay((ViewGroup.MarginLayoutParams) params, activity);\n\n      activity.addContentView(croutonView, params);\n    }\n  }\n\n  croutonView.requestLayout(); // This is needed so the animation can use the measured with/height\n  ViewTreeObserver observer = croutonView.getViewTreeObserver();\n  if (null != observer) {\n    observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n      @Override\n      @TargetApi(16)\n      public void onGlobalLayout() {\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n          croutonView.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n        } else {\n          croutonView.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n        }\n\n        if(crouton.getInAnimation() != null) {\n          croutonView.startAnimation(crouton.getInAnimation());\n          announceForAccessibilityCompat(crouton.getActivity(), crouton.getText());\n          if (Configuration.DURATION_INFINITE != crouton.getConfiguration().durationInMilliseconds) {\n            sendMessageDelayed(crouton, Messages.REMOVE_CROUTON,\n                crouton.getConfiguration().durationInMilliseconds + crouton.getInAnimation().getDuration());\n          }\n        }\n      }\n    });\n  }\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Manager.java", "commit_date": "2015-06-05 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Creates the {@link Crouton}.\n *\n * @param activity\n *     The {@link Activity} that the {@link Crouton} should be attached\n *     to.\n * @param text\n *     The text you want to display.\n * @param style\n *     The style that this {@link Crouton} should be created with.\n */\n", "func_signal": "private Crouton(Activity activity, CharSequence text, Style style)", "code": "{\n  if ((activity == null) || (text == null) || (style == null)) {\n    throw new IllegalArgumentException(NULL_PARAMETERS_ARE_NOT_ACCEPTED);\n  }\n\n  this.activity = activity;\n  this.viewGroup = null;\n  this.text = text;\n  this.style = style;\n  this.customView = null;\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Creates a {@link Crouton} with provided text and style for a given activity\n * and displays it directly.\n *\n * @param activity\n *     The {@link Activity} that represents the context in which the Crouton should exist.\n * @param text\n *     The text you want to display.\n * @param style\n *     The style that this {@link Crouton} should be created with.\n * @param viewGroupResId\n *     The resource id of the {@link ViewGroup} that this {@link Crouton} should be added to.\n * @param configuration\n *     The configuration for this Crouton.\n */\n", "func_signal": "public static void showText(Activity activity, CharSequence text, Style style, int viewGroupResId,\n                            final Configuration configuration)", "code": "{\n  makeText(activity, text, style, (ViewGroup) activity.findViewById(viewGroupResId)).setConfiguration(configuration)\n      .show();\n}", "path": "Crouton/library/src/main/java/de/keyboardsurfer/android/widget/crouton/Crouton.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "keyboardsurfer/Crouton", "stars": 3012, "license": "apache-2.0", "language": "java", "size": 3934}
{"docstring": "/**\n * Returns <code>true</code> if method is a bean property.\n */\n", "func_signal": "public static boolean isBeanProperty(Method method)", "code": "{\n    String methodName = method.getName();\n    Class<?> returnType = method.getReturnType();\n    Class<?>[] paramTypes =  method.getParameterTypes();\n    if (methodName.startsWith(\"get\") && methodName.equals(\"getClass\") == false) {    // getter method must starts with 'get' and it is not getClass()\n        if ((returnType != null) && (paramTypes.length == 0)) {  // getter must have a return type and no arguments\n            return true;\n        }\n    } else if (methodName.startsWith(\"is\")) {    // ister must starts with 'is'\n        if ((returnType != null)  && (paramTypes.length == 0)) {  // ister must have return type and no arguments\n            return true;\n        }\n    } else if (methodName.startsWith(\"set\")) {    // setter must start with a 'set'\n        if (paramTypes.length == 1) {        // setter must have just one argument\n            return true;\n        }\n    }\n    return false;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/ReflectUtils.java", "commit_date": "2014-02-06 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by\n * {@link java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by\n * {@link java.lang.reflect.Method#getReturnType} of the same method object. Specifically:\n * <ul>\n * <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned.\n * <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is\n *     returned.\n * <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array\n *     class. For example: {@code List<Integer>[] => List[]}.\n * <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound\n *     is returned. For example: {@code <X extends Foo> => Foo}.\n * </ul>\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic final Class<T> getRawType()", "code": "{\n    Class<?> rawType = getRawType(type);\n    // raw type is |T|\n    Class<T> result = (Class<T>) rawType;\n    return result;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/TypeReference.java", "commit_date": "2014-07-12 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Invoke the given callback on all fields in the target class, going up the\n * class hierarchy to get all declared fields.\n * @param clazz the target class to analyze\n * @param fc the callback to invoke for each field\n * @param ff the filter that determines the fields to apply the callback to\n */\n", "func_signal": "public static void doWithFields(Class<?> clazz, FieldCallback fc, FieldFilter ff)\n        throws IllegalArgumentException", "code": "{\n\n    // Keep backing up the inheritance hierarchy.\n    Class<?> targetClass = clazz;\n    do {\n        Field[] fields = targetClass.getDeclaredFields();\n        for (Field field : fields) {\n            // Skip static and final fields.\n            if (ff != null && !ff.matches(field)) {\n                continue;\n            }\n            fc.doWith(field);\n        }\n        targetClass = targetClass.getSuperclass();\n    }\n    while (targetClass != null && targetClass != Object.class);\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/ReflectUtils.java", "commit_date": "2014-02-06 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Decodes a byte array from Base64 format and ignores line separators, tabs\n * and blanks. CR, LF, Tab and Space characters are ignored in the input\n * data. This method is compatible with\n * <code>sun.misc.BASE64Decoder.decodeBuffer(String)</code>.\n * \n * @param s\n *            A Base64 String to be decoded.\n * @return An array containing the decoded data bytes.\n * @throws IllegalArgumentException\n *             If the input is not valid Base64 encoded data.\n */\n", "func_signal": "public static byte[] decodeLines(String s)", "code": "{\n    char[] buf = new char[s.length()];\n    int p = 0;\n    for (int ip = 0; ip < s.length(); ip++) {\n        char c = s.charAt(ip);\n        if (c != ' ' && c != '\\r' && c != '\\n' && c != '\\t')\n            buf[p++] = c;\n    }\n    return decode(buf, 0, p);\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/Base64Coder.java", "commit_date": "2014-02-10 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Encodes a byte array into Base 64 format and breaks the output into\n * lines.\n * \n * @param in\n *            An array containing the data bytes to be encoded.\n * @param iOff\n *            Offset of the first byte in <code>in</code> to be processed.\n * @param iLen\n *            Number of bytes to be processed in <code>in</code>, starting\n *            at <code>iOff</code>.\n * @param lineLen\n *            Line length for the output data. Should be a multiple of 4.\n * @param lineSeparator\n *            The line separator to be used to separate the output lines.\n * @return A String containing the Base64 encoded data, broken into lines.\n */\n", "func_signal": "public static String encodeLines(byte[] in, int iOff, int iLen,\n        int lineLen, String lineSeparator)", "code": "{\n    int blockLen = (lineLen * 3) / 4;\n    if (blockLen <= 0)\n        throw new IllegalArgumentException();\n    int lines = (iLen + blockLen - 1) / blockLen;\n    int bufLen = ((iLen + 2) / 3) * 4 + lines * lineSeparator.length();\n    StringBuilder buf = new StringBuilder(bufLen);\n    int ip = 0;\n    while (ip < iLen) {\n        int l = Math.min(iLen - ip, blockLen);\n        buf.append(encode(in, iOff + ip, l));\n        buf.append(lineSeparator);\n        ip += l;\n    }\n    return buf.toString();\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/Base64Coder.java", "commit_date": "2014-02-10 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Return the given annotation from the class.  If the class does not have the annotation, it's parent class and any\n * interfaces will also be checked.\n * @param theClass the class to inspect\n * @param theAnnotation the annotation to retrieve\n * @return the class's annotation, or it's \"inherited\" annotation, or null if the annotation cannot be found.\n */\n", "func_signal": "public static <T extends Annotation> T getAnnotation(Class<?> theClass, Class<T> theAnnotation)", "code": "{\n    T aAnnotation = null;\n\n    if (theClass.isAnnotationPresent(theAnnotation)) {\n        aAnnotation = theClass.getAnnotation(theAnnotation);\n    } else {\n        if (shouldInspectClass(theClass.getSuperclass())) \n            aAnnotation = getAnnotation(theClass.getSuperclass(), theAnnotation);\n\n        if (aAnnotation == null) {\n            for (Class<?> aInt : theClass.getInterfaces()) {\n                aAnnotation = getAnnotation(aInt, theAnnotation);\n                if (aAnnotation != null) { break; }\n            }\n        }\n    }\n    return aAnnotation;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/ReflectUtils.java", "commit_date": "2014-02-06 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * I would not think this should be a supported use case but nevertheless it\n * failed because it only performed one additional lookup iteration on\n * finding an interface...\n */\n", "func_signal": "@Test\npublic void testRegisterInterfaceToInterface()", "code": "{\n    SquirrelProvider.getInstance().register(Person.class, Student.class);\n    SquirrelProvider.getInstance().register(Student.class, Programmer.class);\n    Person p = SquirrelProvider.getInstance().newInstance(Person.class);\n    assertThat(p, notNullValue());\n    assertThat(p, instanceOf(ProgrammerImpl.class));\n    SquirrelProvider.getInstance().unregister(Person.class);\n}", "path": "squirrel/squirrel-foundation/src/test/java/org/squirrelframework/foundation/component/ComponentProviderTest.java", "commit_date": "2014-07-13 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Register a new post processor class for a certain component class, note existing registration \n * are overwritten without warning.\n *\n * @param componentClass component class\n * @param postProcessor post processor to be registered for component class\n * @param <T> type of component class\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T> void register(Class<T> componentClass, SquirrelPostProcessor<? super T> postProcessor)", "code": "{\n    Method method = ReflectUtils.getFirstMethodOfName(postProcessor.getClass(), \"postProcess\");\n    Class<?>[] params = method.getParameterTypes();\n    Preconditions.checkArgument(params.length==1, \"Parameter size of method \"+method.getName()+\" is not match.\");\n    Preconditions.checkArgument(params[0].isAssignableFrom(componentClass), \n            \"Parameter type of method \"+method.getName()+\" is not correct.\");\n    \n    if(postProcessorRegistry.containsKey(componentClass)) {\n        SquirrelPostProcessor<? super T> existedProcessor = \n                (SquirrelPostProcessor<? super T>) postProcessorRegistry.get(componentClass);\n        if(existedProcessor instanceof CompositePostProcessorImpl) {\n            ((CompositePostProcessorImpl<T>)existedProcessor).compose(postProcessor);\n        } else {\n            postProcessorRegistry.remove(componentClass);\n            CompositePostProcessorImpl<T> compositeProcessor = new CompositePostProcessorImpl<T>(existedProcessor);\n            compositeProcessor.compose(postProcessor);\n            postProcessorRegistry.put(componentClass, compositeProcessor);\n        }\n    } else {\n        postProcessorRegistry.put(componentClass, postProcessor);\n    }\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/component/SquirrelPostProcessorProvider.java", "commit_date": "2015-02-13 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Perform the given callback operation on all matching methods of the given\n * class and superclasses (or given interface and super-interfaces).\n * <p>The same named method occurring on subclass and superclass will appear\n * twice, unless excluded by the specified {@link MethodFilter}.\n * @param clazz class to start looking at\n * @param mc the callback to invoke for each method\n * @param mf the filter that determines the methods to apply the callback to\n */\n", "func_signal": "public static void doWithMethods(Class<?> clazz, MethodCallback mc, MethodFilter mf)\n        throws IllegalArgumentException", "code": "{\n\n    // Keep backing up the inheritance hierarchy.\n    Method[] methods = clazz.getDeclaredMethods();\n    for (Method method : methods) {\n        if (mf != null && !mf.matches(method)) {\n            continue;\n        }\n        mc.doWith(method);\n    }\n    if (clazz.getSuperclass() != null) {\n        doWithMethods(clazz.getSuperclass(), mc, mf);\n    }\n    else if (clazz.isInterface()) {\n        for (Class<?> superIfc : clazz.getInterfaces()) {\n            doWithMethods(superIfc, mc, mf);\n        }\n    }\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/ReflectUtils.java", "commit_date": "2014-02-06 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "// original transition D-[ToA, Always, 1]->B was override to D-[ToA, Always, 1000]->A\n", "func_signal": "public void testTransitionPriority2()", "code": "{\n    stateMachine.fire(ToB, null);\n    stateMachine.fire(ToC, null);\n    stateMachine.fire(ToD, null);\n    stateMachine.fire(ToA, null);\n    assertThat(stateMachine.getCurrentState(), equalTo(A));\n}", "path": "squirrel/squirrel-foundation/src/test/java/org/squirrelframework/foundation/fsm/StateMachineExtensionTest.java", "commit_date": "2014-07-12 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "// find implementation class name according to programming convention\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate <T> Class<T> findImplementationClass(Class<T> interfaceClass)", "code": "{\n    Class<?> implementationClass = null;\n    String implClassName = interfaceClass.getName() + \"Impl\";\n    try {\n        implementationClass = Class.forName(implClassName);\n    } catch (ClassNotFoundException e) {\n        implClassName = ReflectUtils.getPackageName(interfaceClass.getName())+\n                \".impl.\"+interfaceClass.getSimpleName()+\"Impl\";\n        implementationClass = ReflectUtils.getClass(implClassName);\n    }\n    return (Class<T>) implementationClass;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/component/SquirrelProvider.java", "commit_date": "2015-02-13 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Initializes a test.\n */\n", "func_signal": "@Before\npublic void setup()", "code": "{\n    MockitoAnnotations.initMocks(this);\n\n    StateMachineBuilder<DeclarativeStateMachine, TestState, TestEvent, Integer> builder = \n            StateMachineBuilderFactory.<DeclarativeStateMachine, TestState, TestEvent, Integer>\n                create(DeclarativeStateMachineImpl.class, TestState.class, \n                        TestEvent.class, Integer.class, DeclarativeStateMachine.class);\n    stateMachine = builder.newStateMachine(TestState.A, monitor);\n    StateMachineLogger fsmLogger = new StateMachineLogger(stateMachine);\n    fsmLogger.startLogging();\n}", "path": "squirrel/squirrel-foundation/src/test/java/org/squirrelframework/foundation/fsm/DeclarativeStateMachineTest.java", "commit_date": "2014-03-04 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Encodes a byte array into Base64 format. No blanks or line breaks are\n * inserted in the output.\n * \n * @param in\n *            An array containing the data bytes to be encoded.\n * @param iOff\n *            Offset of the first byte in <code>in</code> to be processed.\n * @param iLen\n *            Number of bytes to process in <code>in</code>, starting at\n *            <code>iOff</code>.\n * @return A character array containing the Base64 encoded data.\n */\n", "func_signal": "public static char[] encode(byte[] in, int iOff, int iLen)", "code": "{\n    int oDataLen = (iLen * 4 + 2) / 3; // output length without padding\n    int oLen = ((iLen + 2) / 3) * 4; // output length including padding\n    char[] out = new char[oLen];\n    int ip = iOff;\n    int iEnd = iOff + iLen;\n    int op = 0;\n    while (ip < iEnd) {\n        int i0 = in[ip++] & 0xff;\n        int i1 = ip < iEnd ? in[ip++] & 0xff : 0;\n        int i2 = ip < iEnd ? in[ip++] & 0xff : 0;\n        int o0 = i0 >>> 2;\n        int o1 = ((i0 & 3) << 4) | (i1 >>> 4);\n        int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);\n        int o3 = i2 & 0x3F;\n        out[op++] = map1[o0];\n        out[op++] = map1[o1];\n        out[op] = op < oDataLen ? map1[o2] : '=';\n        op++;\n        out[op] = op < oDataLen ? map1[o3] : '=';\n        op++;\n    }\n    return out;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/Base64Coder.java", "commit_date": "2014-02-10 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "//    private String localizedErrorMessage;\n", "func_signal": "public SquirrelRuntimeException(ErrorCodes errorCode)", "code": "{\n        this.errorCodeId = errorCode.getCode();\n        this.errorMessage = String.format(\"%08d : %s.\", getErrorCodeId(), errorCode.getDescription());\n    }", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/exception/SquirrelRuntimeException.java", "commit_date": "2013-07-19 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Create a new instance of the requested class using the internal registry.\n * @param clz class of new instance\n * @param argTypes arguments type of new instance constructor\n * @param args arguments of new instance constructor\n * @param <T> type of new instance\n * @return new instance\n */\n", "func_signal": "public <T> T newInstance(Class<T> clz, Class<?>[] argTypes, Object[] args)", "code": "{\n    Class<T> implementationClass = getImplementation(clz);\n    if (args == null) {\n        return postProcess(clz, ReflectUtils.newInstance(implementationClass));\n    }\n    Constructor<T> constructor = ReflectUtils.getConstructor(implementationClass, argTypes);\n    return postProcess(clz, ReflectUtils.newInstance(constructor, args));\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/component/SquirrelProvider.java", "commit_date": "2015-02-13 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Decodes a byte array from Base64 format. No blanks or line breaks are\n * allowed within the Base64 encoded input data.\n * \n * @param in\n *            A character array containing the Base64 encoded data.\n * @param iOff\n *            Offset of the first character in <code>in</code> to be\n *            processed.\n * @param iLen\n *            Number of characters to process in <code>in</code>, starting\n *            at <code>iOff</code>.\n * @return An array containing the decoded data bytes.\n * @throws IllegalArgumentException\n *             If the input is not valid Base64 encoded data.\n */\n", "func_signal": "public static byte[] decode(char[] in, int iOff, int iLen)", "code": "{\n    if (iLen % 4 != 0)\n        throw new IllegalArgumentException(\n                \"Length of Base64 encoded input string is not a multiple of 4.\");\n    while (iLen > 0 && in[iOff + iLen - 1] == '=')\n        iLen--;\n    int oLen = (iLen * 3) / 4;\n    byte[] out = new byte[oLen];\n    int ip = iOff;\n    int iEnd = iOff + iLen;\n    int op = 0;\n    while (ip < iEnd) {\n        int i0 = in[ip++];\n        int i1 = in[ip++];\n        int i2 = ip < iEnd ? in[ip++] : 'A';\n        int i3 = ip < iEnd ? in[ip++] : 'A';\n        if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)\n            throw new IllegalArgumentException(\n                    \"Illegal character in Base64 encoded data.\");\n        int b0 = map2[i0];\n        int b1 = map2[i1];\n        int b2 = map2[i2];\n        int b3 = map2[i3];\n        if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)\n            throw new IllegalArgumentException(\n                    \"Illegal character in Base64 encoded data.\");\n        int o0 = (b0 << 2) | (b1 >>> 4);\n        int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);\n        int o2 = ((b2 & 3) << 6) | b3;\n        out[op++] = (byte) o0;\n        if (op < oLen)\n            out[op++] = (byte) o1;\n        if (op < oLen)\n            out[op++] = (byte) o2;\n    }\n    return out;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/util/Base64Coder.java", "commit_date": "2014-02-10 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Enters this instance with history type = shallow.\n *\n * @param stateContext\n *            state context\n * @return the entered state\n */\n", "func_signal": "private ImmutableState<T, S, E, C> enterHistoryShallow(StateContext<T, S, E, C> stateContext)", "code": "{\n    final ImmutableState<T, S, E, C> lastActiveState = getLastActiveChildStateOf(this, stateContext.getStateMachineData().read());\n    return lastActiveState != null ? lastActiveState.enterShallow(stateContext) : this;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/fsm/impl/StateImpl.java", "commit_date": "2020-06-24 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Recursively traverses the state hierarchy, exiting states along the way, performing the action, and entering states to the target.\n * <hr>\n * There exist the following transition scenarios:\n * <ul>\n * <li>0. there is no target state (internal transition) --> handled outside this method.</li>\n * <li>1. The source and target state are the same (self transition) --> perform the transition directly: Exit source state, perform\n * transition actions and enter target state</li>\n * <li>2. The target state is a direct or indirect sub-state of the source state --> perform the transition actions, then traverse the\n * hierarchy from the source state down to the target state, entering each state along the way. No state is exited.\n * <li>3. The source state is a sub-state of the target state --> traverse the hierarchy from the source up to the target, exiting each\n * state along the way. Then perform transition actions. Finally enter the target state.</li>\n * <li>4. The source and target state share the same super-state</li>\n * <li>5. All other scenarios:\n * <ul>\n * <li>a. The source and target states reside at the same level in the hierarchy but do not share the same direct super-state</li>\n * <li>b. The source state is lower in the hierarchy than the target state</li>\n * <li>c. The target state is lower in the hierarchy than the source state</li>\n * </ul>\n * </ul>\n *\n * @param source the source state\n * @param target the target state\n * @param stateContext the state context\n */\n", "func_signal": "private void doTransitInternal(ImmutableState<T, S, E, C> source, ImmutableState<T, S, E, C> target, StateContext<T, S, E, C> stateContext)", "code": "{\n    if (source == this.getTargetState()) {\n        // Handles 1.\n        // Handles 3. after traversing from the source to the target.\n        if(type==TransitionType.LOCAL) {\n            // not exit and re-enter the composite (source) state for\n            // local transition\n            transit(stateContext);\n        } else {\n            source.exit(stateContext);\n            transit(stateContext);\n            getTargetState().entry(stateContext);\n        }\n    } else if (source == target) {\n        // Handles 2. after traversing from the target to the source.\n        transit(stateContext);\n    } else if (source.getParentState() == target.getParentState()) {\n        // Handles 4.\n        // Handles 5a. after traversing the hierarchy until a common ancestor if found.\n        source.exit(stateContext);\n        transit(stateContext);\n        target.entry(stateContext);\n    } else {\n        // traverses the hierarchy until one of the above scenarios is met.\n        if (source.getLevel() > target.getLevel()) {\n            // Handles 3.\n            // Handles 5b.\n            source.exit(stateContext);\n            doTransitInternal(source.getParentState(), target, stateContext);\n        } else if (source.getLevel() < target.getLevel()) {\n            // Handles 2.\n            // Handles 5c.\n            doTransitInternal(source, target.getParentState(), stateContext);\n            target.entry(stateContext);\n        } else {\n            // Handles 5a.\n            source.exit(stateContext);\n            doTransitInternal(source.getParentState(), target.getParentState(), stateContext);\n            target.entry(stateContext);\n        }\n    }\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/fsm/impl/TransitionImpl.java", "commit_date": "2014-07-31 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "// TODO-hhe: check type safety\n", "func_signal": "@Override\n   public void internalFire(StateContext<T, S, E, C> stateContext)", "code": "{\n       StateMachine<? extends StateMachine<?, S, E, C>, S, E, C> stateMachine = \n               linkedStateMachineInstances.get(getKey(stateContext.getStateMachine().getThis()));\n       if(stateMachine.getStatus()==StateMachineStatus.TERMINATED) {\n           // if linked state machine entered its final state, then outside state will process event, \n           super.internalFire(stateContext);\n       } else {\n           // otherwise the linked state machine will try to process event first and only handle event \n           // to outside state when event was declined by linked state machine.\n           DeclineEventHandler declinedEventHandler = new DeclineEventHandler(stateContext);\n           try {\n               // add declined event listener\n               stateMachine.addTransitionDeclinedListener(declinedEventHandler);\n               // set child(linked) state machine context\n               StateMachineContext.set(stateMachine.getThis(), StateMachineContext.isTestEvent());\n               // delegate the event to linked state machine process\n               stateMachine.fire(stateContext.getEvent(), stateContext.getContext());\n           } finally {\n               StateMachineContext.set(null);\n               // remove declined event listener\n               stateMachine.removeTransitionDecleindListener(declinedEventHandler);\n           }\n       }\n   }", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/fsm/impl/LinkedStateImpl.java", "commit_date": "2014-02-19 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "/**\n * Enters this instance with history type = deep.\n *\n * @param stateContext\n *            the state context.\n * @return the state\n */\n", "func_signal": "private ImmutableState<T, S, E, C> enterHistoryDeep(StateContext<T, S, E, C> stateContext)", "code": "{\n    final ImmutableState<T, S, E, C> lastActiveState = getLastActiveChildStateOf(\n            this, stateContext.getStateMachineData().read() );\n    return lastActiveState != null ? lastActiveState.enterDeep(stateContext) : this;\n}", "path": "squirrel/squirrel-foundation/src/main/java/org/squirrelframework/foundation/fsm/impl/StateImpl.java", "commit_date": "2020-06-24 00:00:00", "repo_name": "hekailiang/squirrel", "stars": 2143, "license": "other", "language": "java", "size": 3151}
{"docstring": "// Parametes example: 5 10\n", "func_signal": "public static void main(String[] args)", "code": "{\n    int personOrder = Integer.parseInt(args[0]);\n    int numberOfPeople = Integer.parseInt(args[1]);\n\n    StdOut.println(\"Order in which people are eliminated:\");\n    josephusProblem(personOrder, numberOfPeople);\n}", "path": "algorithms-sedgewick-wayne/src/chapter1/section3/Exercise37_JosephusProblem.java", "commit_date": "2018-03-13 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "//O(lg N)\n", "func_signal": "public Comparable deleteMin()", "code": "{\n    if (size == 0) {\n        throw new RuntimeException(\"Priority queue underflow\");\n    }\n\n    size--;\n\n    PQNode min = minPriorityQueue[1];\n\n    deleteTopItem(minPriorityQueue, Orientation.MIN);\n    deleteItem(maxPriorityQueue, Orientation.MAX, min.maxHeapIndex);\n\n    if (size == minPriorityQueue.length / 4) {\n        resize(minPriorityQueue.length / 2);\n    }\n\n    return min.key;\n}", "path": "algorithms-sedgewick-wayne/src/chapter2/section4/Exercise29_MinMaxPriorityQueue.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Display footer\n", "func_signal": "private static void footer(Comparable[] array)", "code": "{\n    StdDraw.setPenColor(StdDraw.BLACK);\n\n    for (int i = 0; i < array.length; i++) {\n        StdDraw.text(i, array.length, String.format(\"%.1f\", Double.parseDouble(String.valueOf(array[i]))));\n    }\n}", "path": "algorithms-sedgewick-wayne/src/chapter2/section1/InsertionSortDraw.java", "commit_date": "2018-03-13 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "//O(lg N)\n", "func_signal": "public Comparable deleteMax()", "code": "{\n    if (size == 0) {\n        throw new RuntimeException(\"Priority queue underflow\");\n    }\n\n    size--;\n\n    PQNode max = maxPriorityQueue[1];\n\n    deleteTopItem(maxPriorityQueue, Orientation.MAX);\n    deleteItem(minPriorityQueue, Orientation.MIN, max.minHeapIndex);\n\n    if (size == minPriorityQueue.length / 4) {\n        resize(minPriorityQueue.length / 2);\n    }\n\n    return max.key;\n}", "path": "algorithms-sedgewick-wayne/src/chapter2/section4/Exercise29_MinMaxPriorityQueue.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// O(n lg n) due to sort - the hash map in the nodes saves memory, but does not necessarily store subsets in order.\n// So a sort is required to return the keys in order.\n", "func_signal": "public Iterable<String> keys()", "code": "{\n    List<String> keys = new ArrayList<>();\n    keys(root, new StringBuilder(), keys);\n\n    Collections.sort(keys);\n\n    return keys;\n}", "path": "algorithms-sedgewick-wayne/src/chapter5/section2/StringSet.java", "commit_date": "2018-02-21 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Searches for the pattern in the text starting at specified index\n", "func_signal": "protected int searchFromIndex(String text, int textStartIndex)", "code": "{\n    String eligibleText = text.substring(textStartIndex);\n\n    int textLength = eligibleText.length();\n\n    if (textLength < patternLength) {\n        return textStartIndex + textLength;  // no match\n    }\n\n    long textHash = hash(eligibleText);\n\n    if (patternHash == textHash && check(eligibleText, 0)) {\n        return textStartIndex;  // match\n    }\n\n    for (int textIndex = patternLength; textIndex < textLength; textIndex++) {\n        // Remove leading character, add trailing character, check for match\n        textHash = (textHash + largePrimeNumber - rm * eligibleText.charAt(textIndex - patternLength) % largePrimeNumber)\n                % largePrimeNumber;\n        textHash = (textHash * alphabetSize + eligibleText.charAt(textIndex)) % largePrimeNumber;\n\n        int offset = textIndex - patternLength + 1;\n\n        if (patternHash == textHash && check(eligibleText, offset)) {\n            return textStartIndex + offset;  // match\n        }\n    }\n\n    return textStartIndex + textLength;      // no match\n}", "path": "algorithms-sedgewick-wayne/src/chapter5/section3/Exercise10.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "/*\nSolution to Part 1: To achieve 2 * sqrt(N), drop eggs at floors\nsqrt(N), 2 * sqrt(N), 3 * sqrt(N), ..., sqrt(N) * sqrt(N).\n(For simplicity, we assume here that sqrt(N) is an integer.)\nLet assume that the egg broke at level k * sqrt(N).\nWith the second egg you should then perform a linear search\nin the interval (k-1) * sqrt(N) to k * sqrt(N).\nIn total you will be able to find the floor F in at most 2 * sqrt(N) trials.\n */\n", "func_signal": "private int findFloorIn2SqrtN(int[] array, int low, int high, int searchLevel)", "code": "{\n    int key = 1;\n\n    if (low <= high) {\n        int sqrt = (int) Math.sqrt(array.length - 1);\n\n        int separator = sqrt * searchLevel;\n\n        if (separator >= array.length) {\n            separator = array.length - 1;\n        }\n\n        StdOut.println(\"Debug - current index: \" + separator);\n\n        if (key > array[separator]) {\n            return findFloorIn2SqrtN(array, separator + 1, high, ++searchLevel);\n        } else {\n            //We broke 1 out of 2 eggs, now we do a linear search starting from a floor in which we know that the egg\n            // does not break\n\n            if (searchLevel != 0) {\n                searchLevel = searchLevel - 1;\n            }\n\n            int lastFloorThatDidNotBreak = sqrt * searchLevel;\n\n            for(int i = lastFloorThatDidNotBreak; i <= separator; i++) {\n                StdOut.println(\"Debug - current index: \" + i);\n\n                if (array[i] == 1) {\n                    //2 out of 2 eggs broken, but we now have the floor number\n                    return i;\n                }\n            }\n        }\n    }\n\n    return -1;\n}", "path": "algorithms-sedgewick-wayne/src/chapter1/section4/Exercise25_Throwing2Eggs.java", "commit_date": "2018-03-13 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Prints all the occurrences of pattern in the text\n", "func_signal": "public void searchAll(String text)", "code": "{\n    int occurrenceIndex = searchFromIndex(text, 0);\n\n    if (occurrenceIndex == text.length()) {\n        StdOut.println(\"No occurrences\");\n        return;\n    }\n\n    while (occurrenceIndex != text.length()) {\n        StdOut.println(\"Pattern found at index \" + occurrenceIndex);\n\n        if (occurrenceIndex + 1 >= text.length()) {\n            break;\n        }\n\n        occurrenceIndex = searchFromIndex(text, occurrenceIndex + 1);\n    }\n}", "path": "algorithms-sedgewick-wayne/src/chapter5/section3/Exercise10.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// V = SQRT(2 kb T / M)\n// SQRT(V / 2) = (vx + vy) / 2\n", "func_signal": "private void setTemperature(double temperature)", "code": "{\n\n    for (ParticleInterface particle : particles) {\n        ParticleWithTemperature particleWithTemperature = (ParticleWithTemperature) particle;\n\n        double newVelocityMagnitude =\n                Math.sqrt(2 * BOLTZMANN_CONSTANT * temperature / particleWithTemperature.getMass());\n        double velocityComponent = Math.sqrt(newVelocityMagnitude / 2);\n        particleWithTemperature.setVelocityX(velocityComponent);\n        particleWithTemperature.setVelocityY(velocityComponent);\n    }\n}", "path": "algorithms-sedgewick-wayne/src/chapter6/eventdrivensimulation/Exercise8_MaxwellBoltzmann.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "//Hint from website: 1 + 2 + 3 + ... k ~ 1/2 k^2.\n", "func_signal": "private int findFloorInCSqrtF(int[] array, int low, int high, int searchElement, int increment)", "code": "{\n    int key = 1;\n\n    if (low <= high) {\n\n        searchElement = searchElement + increment;\n\n        if (searchElement >= array.length) {\n            searchElement = array.length - 1;\n        }\n\n        StdOut.println(\"Debug - current index: \" + searchElement);\n\n        if (key > array[searchElement]) {\n            return findFloorInCSqrtF(array, searchElement + 1, high, searchElement, ++increment);\n        } else {\n            //We broke 1 out of 2 eggs, now we do a linear search starting from a floor in which we know that the egg\n            // does not break\n\n            searchElement = searchElement - increment;\n            int lastFloorThatDidNotBreak = searchElement;\n\n            for(int i = lastFloorThatDidNotBreak; i <= searchElement + increment; i++) {\n                StdOut.println(\"Debug - current index: \" + i);\n\n                if (array[i] == 1) {\n                    //2 out of 2 eggs broken, but we now have the floor number\n                    return i;\n                }\n            }\n        }\n    }\n\n    return -1;\n}", "path": "algorithms-sedgewick-wayne/src/chapter1/section4/Exercise25_Throwing2Eggs.java", "commit_date": "2018-03-13 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// vertices on recursive call stack\n", "func_signal": "public DirectedCycle(Digraph digraph)", "code": "{\n           onStack = new boolean[digraph.vertices()];\n           edgeTo = new int[digraph.vertices()];\n           visited = new boolean[digraph.vertices()];\n\n           for(int vertex = 0; vertex < digraph.vertices(); vertex++) {\n               if (!visited[vertex]) {\n                   dfs(digraph, vertex);\n               }\n           }\n       }", "path": "algorithms-sedgewick-wayne/src/chapter4/section2/Exercise51_RealWorldDAG.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Parameters example: 10 100000 300000 1000\n", "func_signal": "public static void main(String[] args)", "code": "{\n    int experiments = Integer.parseInt(args[0]);\n    int vertices = Integer.parseInt(args[1]);\n    int edges = Integer.parseInt(args[2]);\n\n    // In the Euclidean graph all vertices are connected to all vertices.\n    // So this requires a separate number of vertices to avoid a very high number of edges while still having a dense graph.\n    int euclideanGraphVertices = Integer.parseInt(args[3]);\n\n    new Exercise39_PrimVersusKruskal().generateGraphsAndDoExperiments(experiments, vertices, edges, euclideanGraphVertices);\n}", "path": "algorithms-sedgewick-wayne/src/chapter4/section3/Exercise39_PrimVersusKruskal.java", "commit_date": "2018-01-01 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Display header\n", "func_signal": "private static void header(Comparable[] array)", "code": "{\n    StdDraw.setPenColor(StdDraw.BLACK);\n    StdDraw.text(array.length / 2.0, -2.7, \"array[ ]\");\n\n    for (int i = 0; i < array.length; i++) {\n        StdDraw.text(i, -2, String.valueOf(i));\n    }\n\n    StdDraw.text(-2.50, -2, \"i\");\n    StdDraw.text(-1.25, -2, \"j\");\n    StdDraw.setPenColor(StdDraw.BOOK_RED);\n    StdDraw.line(-3, -1.65, array.length - 0.5, -1.65);\n    StdDraw.setPenColor(StdDraw.BLACK);\n\n    for (int i = 0; i < array.length; i++) {\n        StdDraw.text(i, -1, String.format(\"%.1f\", Double.parseDouble(String.valueOf(array[i]))));\n    }\n}", "path": "algorithms-sedgewick-wayne/src/chapter2/section1/InsertionSortDraw.java", "commit_date": "2018-03-13 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Parameter example: \"1 + 2 ) * 3 - 4 ) * 5 - 6 ) ) )\"\n", "func_signal": "public static void main (String args[])", "code": "{\n\t\tString input = args[0];\n\t\tStdOut.println(getInfixExpression(input));\n\t}", "path": "algorithms-sedgewick-wayne/src/chapter1/section3/Exercise9.java", "commit_date": "2018-03-13 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Returns the highest key in the symbol table smaller than or equal to key.\n", "func_signal": "public Key floor(Key key)", "code": "{\n    PageSTInterface<Key, Value> pageThatMayContainKey = getPageThatMayContainKey(key);\n    pageThatMayContainKey.open();\n\n    Key floorKey = pageThatMayContainKey.floor(key);\n    pageThatMayContainKey.close(false);\n\n    if (floorKey == sentinel) {\n        floorKey = null;\n    }\n\n    return floorKey;\n}", "path": "algorithms-sedgewick-wayne/src/chapter6/btrees/BTreeST.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Returns the smallest key in the symbol table greater than or equal to key.\n", "func_signal": "public Key ceiling(Key key)", "code": "{\n    PageSTInterface<Key, Value> pageThatMayContainKey = getPageThatMayContainKey(key);\n    pageThatMayContainKey.open();\n\n    Key ceilingKey = pageThatMayContainKey.ceiling(key);\n    pageThatMayContainKey.close(false);\n\n    if (ceilingKey == null) {\n        int rank = rank(key);\n\n        if (rank < size()) {\n            ceilingKey = select(rank);\n        }\n    }\n\n    if (ceilingKey == sentinel) {\n        ceilingKey = min();\n    }\n\n    return ceilingKey;\n}", "path": "algorithms-sedgewick-wayne/src/chapter6/btrees/BTreeST.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Pipe coordinates\n// X: 0.4 to 0.6\n// Y: upper: 0 to 0.45\n//    lower: 0.55 to 1\n", "func_signal": "private void drawPipe()", "code": "{\n    StdDraw.setPenColor(Color.BLACK);\n\n    double centerX = 0.5;\n    double halfWidth = 0.1;\n\n    double halHeight = 0.225;\n\n    // Lower pipe\n    double lowerY = 0.775;\n    StdDraw.filledRectangle(centerX, lowerY, halfWidth, halHeight);\n\n    // Upper pipe\n    double upperY = 0.225;\n    StdDraw.filledRectangle(centerX, upperY, halfWidth, halHeight);\n}", "path": "algorithms-sedgewick-wayne/src/chapter6/eventdrivensimulation/Exercise9_ArbitraryShape.java", "commit_date": "2018-08-23 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Count the occurrences of pattern in the text\n", "func_signal": "public int count(String text)", "code": "{\n    int count = 0;\n\n    int occurrenceIndex = searchFromIndex(text, 0);\n\n    while (occurrenceIndex != text.length()) {\n        count++;\n\n        if (occurrenceIndex + 1 >= text.length()) {\n            break;\n        }\n\n        occurrenceIndex = searchFromIndex(text, occurrenceIndex + 1);\n    }\n\n    return count;\n}", "path": "algorithms-sedgewick-wayne/src/chapter5/section3/Exercise10.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Trade-off between time and memory\n// Takes longer because it has to create the iterators, but avoid stack overflows\n", "func_signal": "private void depthFirstSearchIterative(Graph graph, int sourceVertex, boolean[] visited)", "code": "{\n    Stack<Integer> stack = new Stack<>();\n    stack.push(sourceVertex);\n    visited[sourceVertex] = true;\n    StdOut.print(sourceVertex + \" \");\n\n    // Used to be able to iterate over each adjacency list, keeping track of which\n    // vertex in each adjacency list needs to be explored next\n    Iterator<Integer>[] adjacentIterators = (Iterator<Integer>[]) new Iterator[graph.vertices()];\n\n    for (int vertexId = 0; vertexId < adjacentIterators.length; vertexId++) {\n        if (graph.adjacent(vertexId) != null) {\n            adjacentIterators[vertexId] = graph.adjacent(vertexId).iterator();\n        }\n    }\n\n    while (!stack.isEmpty()) {\n        int currentVertex = stack.peek();\n\n        if (adjacentIterators[currentVertex].hasNext()) {\n            int neighbor = adjacentIterators[currentVertex].next();\n\n            if (!visited[neighbor]) {\n                StdOut.print(neighbor + \" \");\n\n                stack.push(neighbor);\n                visited[neighbor] = true;\n            }\n        } else {\n            stack.pop();\n        }\n    }\n}", "path": "algorithms-sedgewick-wayne/src/chapter4/section1/Exercise38_NonRecursiveDepthFirstSearch.java", "commit_date": "2018-03-13 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "// Example parameters:\n// 500 20\n", "func_signal": "public static void main(String[] args)", "code": "{\n    int randomVerticesToChoose = Integer.parseInt(args[0]);\n    int randomEdgesToChoose = Integer.parseInt(args[1]);\n\n    Digraph randomRealDAG = new Exercise51_RealWorldDAG().\n            randomRealDAG(randomVerticesToChoose, randomEdgesToChoose);\n\n    StdOut.println(randomRealDAG);\n}", "path": "algorithms-sedgewick-wayne/src/chapter4/section2/Exercise51_RealWorldDAG.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "reneargento/algorithms-sedgewick-wayne", "stars": 2155, "license": "mit", "language": "java", "size": 15189}
{"docstring": "/**\n * @see MediaPlayer#setDataSource(FileDescriptor fd, long offset, long length)\n */\n", "func_signal": "public void setDataSource(AssetFileDescriptor assetFileDescriptor) throws IOException", "code": "{\n    synchronized (mState) {\n        switch (mState.get()) {\n            case IDLE:\n                mMediaPlayer.setDataSource(\n                        assetFileDescriptor.getFileDescriptor(),\n                        assetFileDescriptor.getStartOffset(),\n                        assetFileDescriptor.getLength());\n                mState.set(State.INITIALIZED);\n                break;\n            case INITIALIZED:\n            case PREPARING:\n            case PREPARED:\n            case STARTED:\n            case PAUSED:\n            case STOPPED:\n            case PLAYBACK_COMPLETED:\n            case END:\n            case ERROR:\n            default:\n                throw new IllegalStateException(\"setDataSource called in state \" + mState);\n        }\n    }\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/MediaPlayerWrapper.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * When Scrolling list is in this state we start calculating Active Item.\n * Here we assume that scroll state was idle previously and {@link #mCurrentItem} already contains some data\n *\n * @param itemsPositionGetter\n */\n", "func_signal": "@Override\nprotected void onStateTouchScroll(ItemsPositionGetter itemsPositionGetter)", "code": "{\n    if(SHOW_LOGS) Logger.v(TAG, \">> onStateTouchScroll, mScrollDirection \" + mScrollDirection);\n\n    ListItemData listItemData = mCurrentItem;\n    if(SHOW_LOGS) Logger.v(TAG, \"onStateTouchScroll, listItemData \" + listItemData);\n\n    calculateActiveItem(itemsPositionGetter, listItemData);\n    if(SHOW_LOGS) Logger.v(TAG, \"<< onStateTouchScroll, mScrollDirection \" + mScrollDirection);\n}", "path": "VideoPlayerManager/list-visibility-utils/src/main/java/com/volokh/danylo/visibility_utils/calculator/SingleListViewItemActiveCalculator.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * This method calculates most visible item from top to bottom or from bottom to top depends on scroll direction.\n *\n * @param itemsPositionGetter\n * @param firstVisiblePosition\n * @param lastVisiblePosition\n */\n", "func_signal": "private void calculateMostVisibleItem(ItemsPositionGetter itemsPositionGetter, int firstVisiblePosition, int lastVisiblePosition)", "code": "{\n\n    ListItemData mostVisibleItem = getMockCurrentItem(itemsPositionGetter, firstVisiblePosition, lastVisiblePosition);\n    int maxVisibilityPercents = mostVisibleItem.getVisibilityPercents(mListItems);\n\n    switch (mScrollDirection){\n        case UP:\n            bottomToTopMostVisibleItem(itemsPositionGetter, maxVisibilityPercents, mostVisibleItem);\n            break;\n        case DOWN:\n            topToBottomMostVisibleItem(itemsPositionGetter, maxVisibilityPercents, mostVisibleItem);\n            break;\n        default:\n            throw new RuntimeException(\"not handled mScrollDirection \" + mScrollDirection);\n    }\n    if(SHOW_LOGS) Logger.v(TAG, \"topToBottomMostVisibleItem, mostVisibleItem \" + mostVisibleItem);\n\n    if(mostVisibleItem.isMostVisibleItemChanged()){\n        if(SHOW_LOGS) Logger.v(TAG, \"topToBottomMostVisibleItem, item changed\");\n\n        setCurrentItem(mostVisibleItem);\n    } else {\n        if(SHOW_LOGS) Logger.v(TAG, \"topToBottomMostVisibleItem, item not changed\");\n\n    }\n}", "path": "VideoPlayerManager/list-visibility-utils/src/main/java/com/volokh/danylo/visibility_utils/calculator/SingleListViewItemActiveCalculator.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Pause video. If video is already paused, stopped or ended nothing will happen.\n */\n", "func_signal": "public void pause()", "code": "{\n    if (SHOW_LOGS) Logger.v(TAG, \">> pause\");\n\n    synchronized (mState) {\n        if (SHOW_LOGS)\n            Logger.v(TAG, \"pause, mState \" + mState);\n\n        switch (mState.get()) {\n            case IDLE:\n            case INITIALIZED:\n            case PAUSED:\n            case PLAYBACK_COMPLETED:\n            case ERROR:\n            case PREPARING:\n            case STOPPED:\n            case PREPARED:\n            case END:\n                throw new IllegalStateException(\"pause, called from illegal state \"  + mState);\n\n            case STARTED:\n                mMediaPlayer.pause();\n                mState.set(State.PAUSED);\n                break;\n        }\n    }\n    if (SHOW_LOGS) Logger.v(TAG, \"<< pause\");\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/MediaPlayerWrapper.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * This is copy paste of {@link #startNewPlayback(MetaData, VideoPlayerView, AssetFileDescriptor)}\n * The difference is that this method uses AssetFileDescriptor instead of direct path\n */\n", "func_signal": "private void startNewPlayback(MetaData currentItemMetaData, VideoPlayerView videoPlayerView, String videoUrl)", "code": "{\n    // set listener for new player\n    // TODO: find a place when we have to remove this listener.\n    videoPlayerView.addMediaPlayerListener(this);\n    if (SHOW_LOGS) Logger.v(TAG, \"startNewPlayback, mCurrentPlayerState \" + mCurrentPlayerState);\n\n    mPlayerHandler.clearAllPendingMessages(TAG);\n\n    stopResetReleaseClearCurrentPlayer();\n    setNewViewForPlayback(currentItemMetaData, videoPlayerView);\n    startPlayback(videoPlayerView, videoUrl);\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/manager/SingleVideoPlayerManager.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Use it if you need to add a single message\n */\n", "func_signal": "public void addMessage(Message message)", "code": "{\n\n    if (SHOW_LOGS) Logger.v(TAG, \">> addMessage, lock \" + message);\n    mQueueLock.lock(TAG);\n\n    mPlayerMessagesQueue.add(message);\n    mQueueLock.notify(TAG);\n\n    if (SHOW_LOGS) Logger.v(TAG, \"<< addMessage, unlock \" + message);\n    mQueueLock.unlock(TAG);\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/MessagesHandlerThread.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Use it to animate TextureView content x position\n * @param x\n */\n", "func_signal": "public final void setContentX(float x)", "code": "{\n    mContentX = (int) x - (getMeasuredWidth() - getScaledContentWidth()) / 2;\n    updateMatrixTranslate();\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/ScalableTextureView.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * This method calculates visibility of next item.\n * There are some cases when next item cannot be filled with data:\n *\n * 1. When current data is last item in the list. In this case there is no next data\n * 2. Index of current view cannot be calculated because view was already recycled\n *\n * @param itemsPositionGetter\n * @param currentIem - the item that is active right now\n * @param outNextItemData - out parameter. It will be filled with next item data if the one exists\n */\n", "func_signal": "private void findNextItem(ItemsPositionGetter itemsPositionGetter, ListItemData currentIem, ListItemData outNextItemData)", "code": "{\n    int nextItemVisibilityPercents = 0;\n    int nextItemIndex = currentIem.getIndex() + 1;\n    if(SHOW_LOGS) Logger.v(TAG, \"findNextItem, nextItemIndex \" + nextItemIndex);\n\n    if(nextItemIndex < mListItems.size()){\n        int indexOfCurrentView = itemsPositionGetter.indexOfChild(currentIem.getView());\n        if(SHOW_LOGS) Logger.v(TAG, \"findNextItem, indexOfCurrentView \" + indexOfCurrentView);\n\n        if(indexOfCurrentView >= 0){\n            View nextView = itemsPositionGetter.getChildAt(indexOfCurrentView + 1);\n            if(nextView != null){\n                ListItem next = mListItems.get(nextItemIndex);\n                if(SHOW_LOGS) Logger.v(TAG, \"findNextItem, next \" + next + \", nextView \" + nextView);\n\n                nextItemVisibilityPercents = next.getVisibilityPercents(nextView);\n                outNextItemData.fillWithData(nextItemIndex, nextView);\n\n            } else {\n                if(SHOW_LOGS) Logger.v(TAG, \"findNextItem, nextView null. There is no view next to current\");\n            }\n\n        } else {\n            if(SHOW_LOGS) Logger.v(TAG, \"findNextItem, current view is no longer attached to listView\");\n        }\n    }\n    if(SHOW_LOGS) Logger.v(TAG, \"findNextItem, nextItemVisibilityPercents \" + nextItemVisibilityPercents);\n}", "path": "VideoPlayerManager/list-visibility-utils/src/main/java/com/volokh/danylo/visibility_utils/calculator/SingleListViewItemActiveCalculator.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * @see MediaPlayer#getDuration()\n */\n", "func_signal": "public int getDuration()", "code": "{\n    synchronized (mReadyForPlaybackIndicator) {\n        return mMediaPlayer.getDuration();\n    }\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/VideoPlayerView.java", "commit_date": "2016-01-20 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * This method stops playback if one exists.\n */\n", "func_signal": "@Override\npublic void stopAnyPlayback()", "code": "{\n    if(SHOW_LOGS) Logger.v(TAG, \">> stopAnyPlayback, mCurrentPlayerState \" + mCurrentPlayerState);\n\n    mPlayerHandler.pauseQueueProcessing(TAG);\n    if (SHOW_LOGS) Logger.v(TAG, \"stopAnyPlayback, mCurrentPlayerState \" + mCurrentPlayerState);\n\n    mPlayerHandler.clearAllPendingMessages(TAG);\n    stopResetReleaseClearCurrentPlayer();\n\n    mPlayerHandler.resumeQueueProcessing(TAG);\n\n    if(SHOW_LOGS) Logger.v(TAG, \"<< stopAnyPlayback, mCurrentPlayerState \" + mCurrentPlayerState);\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/manager/SingleVideoPlayerManager.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * This method posts a set of messages to {@link MessagesHandlerThread} in order\n * to start new playback\n *\n * @param videoPlayerView - video player view which should start playing\n * @param videoUrl - a source path\n */\n", "func_signal": "private void startPlayback(VideoPlayerView videoPlayerView, String videoUrl)", "code": "{\n    if(SHOW_LOGS) Logger.v(TAG, \"startPlayback\");\n\n    mPlayerHandler.addMessages(Arrays.asList(\n            new CreateNewPlayerInstance(videoPlayerView, this),\n            new SetUrlDataSourceMessage(videoPlayerView, videoUrl, this),\n            new Prepare(videoPlayerView, this),\n            new Start(videoPlayerView, this)\n    ));\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/manager/SingleVideoPlayerManager.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Use it if you need to add a multiple messages\n */\n", "func_signal": "public void addMessages(List<? extends Message> messages)", "code": "{\n    if (SHOW_LOGS) Logger.v(TAG, \">> addMessages, lock \" + messages);\n    mQueueLock.lock(TAG);\n\n    mPlayerMessagesQueue.addAll(messages);\n    mQueueLock.notify(TAG);\n\n    if (SHOW_LOGS) Logger.v(TAG, \"<< addMessages, unlock \" + messages);\n    mQueueLock.unlock(TAG);\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/MessagesHandlerThread.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Play or resume video. Video will be played as soon as view is available and media player is\n * prepared.\n * <p/>\n * If video is stopped or ended and play() method was called, video will start over.\n */\n", "func_signal": "public void start()", "code": "{\n    if (SHOW_LOGS) Logger.v(TAG, \">> start\");\n\n    synchronized (mState) {\n        if (SHOW_LOGS) Logger.v(TAG, \"start, mState \" + mState);\n\n        switch (mState.get()) {\n            case IDLE:\n            case INITIALIZED:\n            case PREPARING:\n            case STARTED:\n                throw new IllegalStateException(\"start, called from illegal state \" + mState);\n\n            case STOPPED:\n            case PLAYBACK_COMPLETED:\n            case PREPARED:\n            case PAUSED:\n\n                if (SHOW_LOGS) Logger.v(TAG, \"start, video is \" + mState + \", starting playback.\");\n                mMediaPlayer.start();\n                startPositionUpdateNotifier();\n                mState.set(State.STARTED);\n\n                break;\n            case ERROR:\n            case END:\n                throw new IllegalStateException(\"start, called from illegal state \" + mState);\n        }\n    }\n    if (SHOW_LOGS) Logger.v(TAG, \"<< start\");\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/MediaPlayerWrapper.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Use it to animate TextureView content x position\n * @param y\n */\n", "func_signal": "public final void setContentY(float y)", "code": "{\n    mContentY = (int) y - (getMeasuredHeight() - getScaledContentHeight()) / 2;\n    updateMatrixTranslate();\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/ScalableTextureView.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Call it if you have direct url or path to video source\n *\n * The logic is following:\n * 1. Stop queue processing to have consistent state of queue when posting new messages\n * 2. Check if current player is active.\n * 3. If it is active and already playing current video we do nothing\n * 4. If not active then start new playback\n * 5. Resume stopped queue\n *\n * This method is basically a copy-paste of {@link #playNewVideo(MetaData, VideoPlayerView, String)}\n * TODO: define a better interface to divide these two methods\n *\n * @param currentItemMetaData\n * @param videoPlayerView - the actual video player\n * @param assetFileDescriptor - the asset descriptor for source file\n */\n", "func_signal": "@Override\npublic void playNewVideo(MetaData currentItemMetaData, VideoPlayerView videoPlayerView, AssetFileDescriptor assetFileDescriptor)", "code": "{\n    if(SHOW_LOGS) Logger.v(TAG, \">> playNewVideo, videoPlayer \" + videoPlayerView + \", mCurrentPlayer \" + mCurrentPlayer + \", assetFileDescriptor \" + assetFileDescriptor);\n    if(SHOW_LOGS) Logger.v(TAG, \"playNewVideo, currentItemMetaData \" + currentItemMetaData);\n\n    /** 1. */\n    mPlayerHandler.pauseQueueProcessing(TAG);\n\n    boolean currentPlayerIsActive = mCurrentPlayer == videoPlayerView;\n    boolean isAlreadyPlayingTheFile =\n            mCurrentPlayer != null &&\n            mCurrentPlayer.getAssetFileDescriptorDataSource() == assetFileDescriptor;\n\n    if (SHOW_LOGS) Logger.v(TAG, \"playNewVideo, isAlreadyPlayingTheFile \" + isAlreadyPlayingTheFile);\n    if (SHOW_LOGS) Logger.v(TAG, \"playNewVideo, currentPlayerIsActive \" + currentPlayerIsActive);\n    /** 2. */\n    if(currentPlayerIsActive){\n        if(isInPlaybackState() && isAlreadyPlayingTheFile){\n            if(SHOW_LOGS) Logger.v(TAG, \"playNewVideo, videoPlayer \" + videoPlayerView + \" is already in state \" + mCurrentPlayerState);\n            /** 3. */\n        } else {\n            /** 4. */\n            startNewPlayback(currentItemMetaData, videoPlayerView, assetFileDescriptor);\n        }\n    } else {\n        /** 4. */\n        startNewPlayback(currentItemMetaData, videoPlayerView, assetFileDescriptor);\n    }\n\n    /** 5. */\n    mPlayerHandler.resumeQueueProcessing(TAG);\n\n    if(SHOW_LOGS) Logger.v(TAG, \"<< playNewVideo, videoPlayer \" + videoPlayerView + \", assetFileDescriptor \" + assetFileDescriptor);\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/manager/SingleVideoPlayerManager.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * In order to start new playback we have to do few steps in specific order:\n *\n * Before calling this method the queue processing should be stopped\n * 1. Clear all pending messages from the queue\n * 2. Post messages that will Stop, Reset, Release and clear current instance of Video Player\n * \"Clear instance\" means removing instance of {@link android.media.MediaPlayer} and not the {@link VideoPlayerView}\n * 3. Set new view player of which become active.\n * 4. Post messages to start new playback\n *\n * @param currentItemMetaData\n * @param videoPlayerView\n * @param assetFileDescriptor\n */\n", "func_signal": "private void startNewPlayback(MetaData currentItemMetaData, VideoPlayerView videoPlayerView, AssetFileDescriptor assetFileDescriptor)", "code": "{\n    // set listener for new player\n    // TODO: find a place when we can remove this listener.\n    videoPlayerView.addMediaPlayerListener(this);\n    if (SHOW_LOGS) Logger.v(TAG, \"startNewPlayback, mCurrentPlayerState \" + mCurrentPlayerState);\n\n    /** 1. */\n    mPlayerHandler.clearAllPendingMessages(TAG);\n    /** 2. */\n    stopResetReleaseClearCurrentPlayer();\n    /** 3. */\n    setNewViewForPlayback(currentItemMetaData, videoPlayerView);\n    /** 4. */\n    startPlayback(videoPlayerView, assetFileDescriptor);\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/manager/SingleVideoPlayerManager.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * @see MediaPlayer#setDataSource(Context, Uri)\n */\n", "func_signal": "public void setDataSource(String filePath) throws IOException", "code": "{\n    synchronized (mState) {\n        if (SHOW_LOGS) Logger.v(TAG, \"setDataSource, filePath \" + filePath + \", mState \" + mState);\n\n        switch (mState.get()) {\n            case IDLE:\n                mMediaPlayer.setDataSource(filePath);\n                mState.set(State.INITIALIZED);\n                break;\n            case INITIALIZED:\n            case PREPARING:\n            case PREPARED:\n            case STARTED:\n            case PAUSED:\n            case STOPPED:\n            case PLAYBACK_COMPLETED:\n            case END:\n            case ERROR:\n            default:\n                throw new IllegalStateException(\"setDataSource called in state \" + mState);\n        }\n    }\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/MediaPlayerWrapper.java", "commit_date": "2020-05-02 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * This method is called by {@link com.volokh.danylo.video_player_manager.player_messages.PlayerMessage}\n * When video player state changes.\n * @param videoPlayerView - a video player which stated changed\n * @param playerMessageState - new state of player. The state is then used when posting new messages\n */\n", "func_signal": "@Override\npublic void setVideoPlayerState(VideoPlayerView videoPlayerView, PlayerMessageState playerMessageState)", "code": "{\n    if(SHOW_LOGS) Logger.v(TAG, \">> setVideoPlayerState, playerMessageState \" + playerMessageState + \", videoPlayer \" + videoPlayerView);\n\n    mCurrentPlayerState = playerMessageState;\n\n    if(SHOW_LOGS) Logger.v(TAG, \"<< setVideoPlayerState, playerMessageState \" + playerMessageState + \", videoPlayer \" + videoPlayerView);\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/manager/SingleVideoPlayerManager.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Note : this method might be called after {@link #onDetachedFromWindow()}\n * @param surface\n * @return\n */\n", "func_signal": "@Override\npublic boolean onSurfaceTextureDestroyed(SurfaceTexture surface)", "code": "{\n    if (SHOW_LOGS) Logger.v(TAG, \"onSurfaceTextureDestroyed, surface \" + surface);\n\n    if(mLocalSurfaceTextureListener != null){\n        mLocalSurfaceTextureListener.onSurfaceTextureDestroyed(surface);\n    }\n\n    if(isAttachedToWindow()){\n        mViewHandlerBackgroundThread.post(new Runnable() {\n            @Override\n            public void run() {\n\n                synchronized (mReadyForPlaybackIndicator) {\n                    mReadyForPlaybackIndicator.setSurfaceTextureAvailable(false);\n\n                    /** we have to notify a Thread may be in wait() state in {@link VideoPlayerView#start()} method*/\n                    mReadyForPlaybackIndicator.notifyAll();\n                }\n            }\n        });\n    }\n\n    // We have to release this surface manually for better control.\n    // Also we do this because we return false from this method\n    surface.release();\n    return false;\n}", "path": "VideoPlayerManager/video-player-manager/src/main/java/com/volokh/danylo/video_player_manager/ui/VideoPlayerView.java", "commit_date": "2016-01-20 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * This method calculates visibility of previous item.\n * There are some cases when previous item cannot be filled with data:\n *\n * 1. When current data is first item in the list. in this case there is no previous data\n * 2. Index of current view cannot be calculated because view was already recycled\n *\n * @param itemsPositionGetter\n * @param currentIem - the item that is active right now\n * @param outPreviousItemData - out parameter. It will be filled with previous item data if the one exists\n */\n", "func_signal": "private void findPreviousItem(ItemsPositionGetter itemsPositionGetter, ListItemData currentIem, ListItemData outPreviousItemData)", "code": "{\n    int previousItemVisibilityPercents = 0;\n    int previousItemIndex = currentIem.getIndex() -1;\n    if(SHOW_LOGS) Logger.v(TAG, \"findPreviousItem, previousItemIndex \" + previousItemIndex);\n\n    if(previousItemIndex >= 0){\n        int indexOfCurrentView = itemsPositionGetter.indexOfChild(currentIem.getView());\n        if(SHOW_LOGS) Logger.v(TAG, \"findPreviousItem, indexOfCurrentView \" + indexOfCurrentView);\n\n        if(indexOfCurrentView > 0){\n            View previousView = itemsPositionGetter.getChildAt(indexOfCurrentView - 1);\n            ListItem previous = mListItems.get(previousItemIndex);\n            if(SHOW_LOGS) Logger.v(TAG, \"findPreviousItem, previous \" + previous + \", previousView \" + previousView);\n\n            previousItemVisibilityPercents = previous.getVisibilityPercents(previousView);\n            outPreviousItemData.fillWithData(previousItemIndex, previousView);\n\n        } else {\n            if(SHOW_LOGS) Logger.v(TAG, \"findPreviousItem, current view is no longer attached to listView\");\n        }\n    }\n    if(SHOW_LOGS) Logger.v(TAG, \"findPreviousItem, previousItemVisibilityPercents \" + previousItemVisibilityPercents);\n}", "path": "VideoPlayerManager/list-visibility-utils/src/main/java/com/volokh/danylo/visibility_utils/calculator/SingleListViewItemActiveCalculator.java", "commit_date": "2016-01-16 00:00:00", "repo_name": "danylovolokh/VideoPlayerManager", "stars": 3147, "license": "None", "language": "java", "size": 236448}
{"docstring": "/**\n * Initializes the RescanFeeder with required parameters\n * @param ips an array of IP addresses as Strings\n */\n", "func_signal": "private int initAddresses(String ... ips)", "code": "{\n\tif (ips.length == 0)\n\t\tthrow new IllegalArgumentException(\"no IP addresses specified\");\n\t\n\ttry {\n\t\taddresses = new ArrayList<>(ips.length);\n\t\tfor (String s : ips) {\n\t\t\taddresses.add(InetAddress.getByName(s));\n\t\t}\n\t}\n\tcatch (UnknownHostException e) {\n\t\tthrow new FeederException(\"malformedIP\");\n\t}\n\treturn ips.length;\n}", "path": "ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Stores the currently available named list\n */\n", "func_signal": "public void store()", "code": "{\n\tStringBuilder sb = new StringBuilder(32);\n\tfor (Map.Entry<String, Object> e : namedList.entrySet()) {\n\t\tsb.append(e.getKey()).append(\"###\").append(e.getValue()).append(\"###\");\n\t}\n\tif (sb.length() > 3) { \n\t\tsb.delete(sb.length() - 3, sb.length());\n\t}\n\tpreferences.put(preferenceName, sb.toString());\n}", "path": "ipscan/src/net/azib/ipscan/config/NamedListConfig.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Local stateMachine transition listener.\n * Currently used to kill all running threads if user says so.\n */\n", "func_signal": "public void transitionTo(ScanningState state, Transition transition)", "code": "{\n\tif (state == KILLING) {\n\t\t// try to interrupt all threads if we get to killing state\n\t\tthreadGroup.interrupt();\n\t}\n}", "path": "ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * This method initializes displayTab\t\n */\n", "func_signal": "private void createDisplayTab()", "code": "{\n\tRowLayout rowLayout = createRowLayout();\n\tdisplayTab = new Composite(tabFolder, SWT.NONE);\n\tdisplayTab.setLayout(rowLayout);\n\t\n\tGridLayout groupLayout = new GridLayout();\n\tgroupLayout.numColumns = 1;\n\tGroup listGroup = new Group(displayTab, SWT.NONE);\n\tlistGroup.setText(Labels.getLabel(\"preferences.display.list\"));\n\tlistGroup.setLayout(groupLayout);\n\tlistGroup.setLayoutData(new RowData(260, SWT.DEFAULT));\n\tdisplayMethod = new Button[DisplayMethod.values().length];\n\tButton allRadio = new Button(listGroup, SWT.RADIO);\n\tallRadio.setText(Labels.getLabel(\"preferences.display.list\" + '.' + DisplayMethod.ALL));\n\tdisplayMethod[DisplayMethod.ALL.ordinal()] = allRadio;\n\tButton aliveRadio = new Button(listGroup, SWT.RADIO);\n\taliveRadio.setText(Labels.getLabel(\"preferences.display.list\" + '.' + DisplayMethod.ALIVE));\n\tdisplayMethod[DisplayMethod.ALIVE.ordinal()] = aliveRadio;\n\tButton portsRadio = new Button(listGroup, SWT.RADIO);\n\tportsRadio.setText(Labels.getLabel(\"preferences.display.list\" + '.' +  DisplayMethod.PORTS));\n\tdisplayMethod[DisplayMethod.PORTS.ordinal()] = portsRadio;\n\t\n\tgroupLayout = new GridLayout();\n\tgroupLayout.numColumns = 2;\n\tGroup labelsGroup = new Group(displayTab, SWT.NONE);\n\tlabelsGroup.setText(Labels.getLabel(\"preferences.display.labels\"));\n\tlabelsGroup.setLayout(groupLayout);\n\t\n\tGridData gridData = new GridData();\n\tgridData.widthHint = 50;\n\t\n\tLabel label = new Label(labelsGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.display.labels.notAvailable\"));\n\tnotAvailableText = new Text(labelsGroup, SWT.BORDER);\n\tnotAvailableText.setLayoutData(gridData);\n\t\n\tlabel = new Label(labelsGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.display.labels.notScanned\"));\n\tnotScannedText = new Text(labelsGroup, SWT.BORDER);\n\tnotScannedText.setLayoutData(gridData);\n\n\tgroupLayout = new GridLayout();\n\tgroupLayout.numColumns = 1;\n\tGroup showStatsGroup = new Group(displayTab, SWT.NONE);\n\tshowStatsGroup.setLayout(groupLayout);\n\tshowStatsGroup.setText(Labels.getLabel(\"preferences.display.confirmation\"));\n\t\n\taskConfirmationCheckbox = new Button(showStatsGroup, SWT.CHECK);\n\taskConfirmationCheckbox.setText(Labels.getLabel(\"preferences.display.confirmation.newScan\"));\n\tshowInfoCheckbox = new Button(showStatsGroup, SWT.CHECK);\n\tshowInfoCheckbox.setText(Labels.getLabel(\"preferences.display.confirmation.showInfo\"));\n\t\n\tgroupLayout = new GridLayout();\n\tgroupLayout.numColumns = 2;\n\t\n\tGroup languageGroup = new Group(displayTab, SWT.NONE);\n\tlanguageGroup.setLayout(groupLayout);\n\tlanguageGroup.setText(Labels.getLabel(\"preferences.language\"));\n\t\n\tlanguageCombo = new Combo(languageGroup, SWT.DROP_DOWN | SWT.READ_ONLY);\n\tfor (String language : Labels.LANGUAGES) {\n\t\tlanguageCombo.add(Labels.getLabel(\"language.\" + language));\n\t}\n\tlanguageCombo.select(0);\n\n\tlabel = new Label(languageGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.language.someIncomplete\"));\n}", "path": "ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * @return an int from the passed Text control.\n */\n", "func_signal": "private static int parseIntValue(Text text)", "code": "{\n\ttry {\n\t\treturn Integer.parseInt(text.getText());\n\t}\n\tcatch (NumberFormatException e) {\n\t\ttext.forceFocus();\n\t\tthrow e;\n\t}\n}", "path": "ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Opens the specified tab of preferences dialog\n * @param tabIndex\n */\n", "func_signal": "public void openTab(int tabIndex)", "code": "{\n\t// widgets are created on demand\n\tcreateShell();\n\tloadPreferences();\n\ttabFolder.setSelection(tabIndex);\n\t\n\t// select ports text by default if ports tab is opened\n\t// this is needed for PortsFetcher that uses this tab as its preferences\n\tif (tabFolder.getItem(tabIndex) == portsTabItem) {\n\t\tportsText.forceFocus();\n\t}\n\t\n\tsuper.open();\n}", "path": "ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * This method initializes scanningTab\t\n */\n", "func_signal": "private void createScanningTab()", "code": "{\n\tRowLayout rowLayout = createRowLayout();\n\tscanningTab = new Composite(tabFolder, SWT.NONE);\n\tscanningTab.setLayout(rowLayout);\n\t\n\tGridLayout groupLayout = new GridLayout();\n\tgroupLayout.numColumns = 2;\n\tGroup threadsGroup = new Group(scanningTab, SWT.NONE);\n\tthreadsGroup.setText(Labels.getLabel(\"preferences.threads\"));\n\tthreadsGroup.setLayout(groupLayout);\n\n\tGridData gridData = new GridData(80, SWT.DEFAULT);\n\t\n\tLabel label;\n\t\n\tlabel = new Label(threadsGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.threads.delay\"));\n\tthreadDelayText = new Text(threadsGroup, SWT.BORDER);\n\tthreadDelayText.setLayoutData(gridData);\n\n\tlabel = new Label(threadsGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.threads.maxThreads\"));\n\tmaxThreadsText = new Text(threadsGroup, SWT.BORDER);\n\tmaxThreadsText.setLayoutData(gridData);\n\n\tGroup pingingGroup = new Group(scanningTab, SWT.NONE);\n\tpingingGroup.setLayout(groupLayout);\n\tpingingGroup.setText(Labels.getLabel(\"preferences.pinging\"));\n\t\n\tlabel = new Label(pingingGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.pinging.type\"));\n\tpingersCombo = new Combo(pingingGroup, SWT.DROP_DOWN | SWT.READ_ONLY);\n\tpingersCombo.setLayoutData(gridData);\n\tString[] pingerNames = pingerRegistry.getRegisteredNames();\n\tfor (int i = 0; i < pingerNames.length; i++) {\n\t\tpingersCombo.add(Labels.getLabel(pingerNames[i]));\n\t\t// this is used by savePreferences()\n\t\tpingersCombo.setData(Integer.toString(i), pingerNames[i]);\n\t}\n\tpingersCombo.select(0);\n\n\tlabel = new Label(pingingGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.pinging.count\"));\n\tpingingCountText = new Text(pingingGroup, SWT.BORDER);\n\tpingingCountText.setLayoutData(gridData);\n\n\tlabel = new Label(pingingGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.pinging.timeout\"));\n\tpingingTimeoutText = new Text(pingingGroup, SWT.BORDER);\n\tpingingTimeoutText.setLayoutData(gridData);\n\t\n\tGridData gridDataWithSpan = new GridData();\n\tgridDataWithSpan.horizontalSpan = 2;\n\tdeadHostsCheckbox = new Button(pingingGroup, SWT.CHECK);\n\tdeadHostsCheckbox.setText(Labels.getLabel(\"preferences.pinging.deadHosts\"));\n\tdeadHostsCheckbox.setLayoutData(gridDataWithSpan);\n\n\tGroup skippingGroup = new Group(scanningTab, SWT.NONE);\n\tskippingGroup.setLayout(groupLayout);\n\tskippingGroup.setText(Labels.getLabel(\"preferences.skipping\"));\n\t\n\tskipBroadcastsCheckbox = new Button(skippingGroup, SWT.CHECK);\n\tskipBroadcastsCheckbox.setText(Labels.getLabel(\"preferences.skipping.broadcast\"));\n\tGridData gridDataWithSpan2 = new GridData();\n\tgridDataWithSpan2.horizontalSpan = 2;\n\tskipBroadcastsCheckbox.setLayoutData(gridDataWithSpan2);\n}", "path": "ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * This will create threads for the pool\n */\n", "func_signal": "public Thread newThread(Runnable r)", "code": "{\n\t// create IP threads in the specified group\n\treturn new Thread(threadGroup, r) {\n\t\t// IP threads must be daemons, not preventing the JVM to terminate\n\t\t{ setDaemon(true); }\n\n\t\t@Override\n\t\tpublic void interrupt() {\n\t\t\tscanner.interrupt(this);\n\t\t\tsuper.interrupt();\n\t\t}\n\t};\n}", "path": "ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * @return the appropriate ResultsCallback instance, depending on the configured display method.\n */\n", "func_signal": "private ScanningResultCallback createResultsCallback(ScanningState state)", "code": "{\n\t// rescanning must follow the same strategy of displaying all hosts (even the dead ones), because the results are already in the list\n\tif (guiConfig.displayMethod == DisplayMethod.ALL || state == RESTARTING) {\n\t\treturn new ScanningResultCallback() {\n\t\t\tpublic void prepareForResults(ScanningResult result) {\n\t\t\t\tresultTable.addOrUpdateResultRow(result);\n\t\t\t}\n\t\t\tpublic void consumeResults(ScanningResult result) {\n\t\t\t\tresultTable.addOrUpdateResultRow(result);\n\t\t\t}\n\t\t};\n\t}\n\tif (guiConfig.displayMethod == DisplayMethod.ALIVE) {\n\t\treturn new ScanningResultCallback() {\n\t\t\tpublic void prepareForResults(ScanningResult result) {\n\t\t\t}\n\t\t\tpublic void consumeResults(ScanningResult result) {\n\t\t\t\tif (result.getType().ordinal() >= ResultType.ALIVE.ordinal())\n\t\t\t\t\tresultTable.addOrUpdateResultRow(result);\n\t\t\t}\n\t\t};\n\t}\n\tif (guiConfig.displayMethod == DisplayMethod.PORTS) {\n\t\treturn new ScanningResultCallback() {\n\t\t\tpublic void prepareForResults(ScanningResult result) {\n\t\t\t}\n\t\t\tpublic void consumeResults(ScanningResult result) {\n\t\t\t\tif (result.getType() == ResultType.WITH_PORTS)\n\t\t\t\t\tresultTable.addOrUpdateResultRow(result);\n\t\t\t}\n\t\t};\n\t}\n\tthrow new UnsupportedOperationException(guiConfig.displayMethod.toString());\n}", "path": "ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * @param key key\n * @return stored value\n */\n", "func_signal": "public String get(String key)", "code": "{\n\tObject value = namedList.get(key);\n\treturn value != null ? value.toString() : null;\n}", "path": "ipscan/src/net/azib/ipscan/config/NamedListConfig.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Opens the dialog and waits for user to input the data.\n * \n * @return the entered text or null in case of cancel.\n */\n", "func_signal": "public String open(String text, String okButtonText)", "code": "{\n\tokButton.setText(okButtonText);\n\tsetText(text);\n\t// reposition buttons because of changed text\n\tpositionButtonsInFormLayout(okButton, cancelButton, this.text);\n\t// layout the shell\n\tshell.pack();\n\t// time to show!\n\topen();\n\treturn message;\n}", "path": "ipscan/src/net/azib/ipscan/gui/InputDialog.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Loads native library from the jar file (storing it in the temp dir)\n * @param library JNI library name\n */\n", "func_signal": "public static void loadLibrary(String library)", "code": "{\t\t\n\tString filename = System.mapLibraryName(library);\n\tString fullFilename = System.getProperty(\"java.io.tmpdir\") + System.getProperty(\"file.separator\") + filename;\n\ttry {\n\t\t// try to load from the temp dir (in case it is already there)\n\t\tSystem.load(fullFilename);\n\t}\n\tcatch (UnsatisfiedLinkError err2) {\n\t\ttry {\n\t\t\t// try to extract from the jar\n\t\t\tInputStream is = LibraryLoader.class.getClassLoader().getResourceAsStream(filename);\n\t\t\tif (is == null) {\n\t\t\t\tthrow new IOException(filename + \" not found in the jar file (classpath)\");\n\t\t\t}\n\t\t\tbyte[] buffer = new byte[4096];\n\t\t\tOutputStream os = new FileOutputStream(fullFilename);\n\t\t\tint read;\n\t\t\twhile ((read = is.read(buffer)) != -1) {\n\t\t\t\tos.write(buffer, 0, read);\n\t\t\t}\n\t\t\tos.close();\n\t\t\tis.close();\n                new File(fullFilename).setExecutable(true, false);\n\t\t\tSystem.load(fullFilename);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new RuntimeException(\"Unable to extract native library: \" + library, ioe);\n\t\t}\n\t}\n}", "path": "ipscan/src/net/azib/ipscan/core/LibraryLoader.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Called to execute the actual scanning process.\n * @param scanningResults the scanning results, which are available\n * @param filter optional (can be null) - determines results for saving or skipping\n */\n", "func_signal": "public void process(ScanningResultList scanningResults, ScanningResultFilter filter)", "code": "{\n\tFileOutputStream outputStream = null;\n\ttry {\n\t\tif (append) {\n\t\t\t// let the exporter know\n\t\t\texporter.shouldAppendTo(file);\n\t\t}\n\t\toutputStream = new FileOutputStream(file, append);\n\t\t\n\t\texporter.start(outputStream, scanningResults.getFeederInfo());\n\n\t\t// set fetchers\n\t\tList<Fetcher> fetchers = scanningResults.getFetchers();\n\t\tString[] fetcherNames = new String[fetchers.size()];\n\t\tint i = 0;\n\t\tfor (Fetcher fetcher : fetchers) {\n\t\t\tfetcherNames[i++] = fetcher.getName();\n\t\t}\t\t\t\n\t\texporter.setFetchers(fetcherNames);\n\n\t\tint index = 0;\n\t\tfor (ScanningResult scanningResult : scanningResults) {\n\t\t\tif (filter == null || filter.apply(index++, scanningResult)) {\n\t\t\t\texporter.nextAddressResults(scanningResult.getValues().toArray());\n\t\t\t}\n\t\t}\n\t\t\n\t\texporter.end();\n\t}\n\tcatch (ExporterException e) {\n\t\tthrow e;\n\t}\n\tcatch (Exception e) {\n\t\tthrow new ExporterException(\"exporting failed\", e);\n\t}\n\tfinally {\n\t\tif (outputStream != null) {\n\t\t\ttry {\n\t\t\t\toutputStream.close();\n\t\t\t}\n\t\t\tcatch (Exception ignore) {}\n\t\t}\n\t}\n}", "path": "ipscan/src/net/azib/ipscan/exporters/ExportProcessor.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Loads preferences\n */\n", "func_signal": "public void load()", "code": "{\n\tif (preferences == null) {\n\t\treturn;\n\t}\n\t\n\tString[] namedListPrefs = preferences.get(preferenceName, \"\").split(\"###\");\n\tfor (int i = 0; i < namedListPrefs.length; i += 2) {\n\t\tif (namedListPrefs[i].length() > 0) {\n\t\t\tnamedList.put(namedListPrefs[i], serializeValue(namedListPrefs[i+1]));\n\t\t}\n\t}\n}", "path": "ipscan/src/net/azib/ipscan/config/NamedListConfig.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * This method initializes portsTab\t\n */\n", "func_signal": "private void createPortsTab()", "code": "{\n\tRowLayout rowLayout = createRowLayout();\n\tportsTab = new Composite(tabFolder, SWT.NONE);\n\tportsTab.setLayout(rowLayout);\n\t\n\tGridLayout groupLayout = new GridLayout();\n\tgroupLayout.numColumns = 2;\n\tGroup timingGroup = new Group(portsTab, SWT.NONE);\n\ttimingGroup.setText(Labels.getLabel(\"preferences.ports.timing\"));\n\ttimingGroup.setLayout(groupLayout);\n\n\tGridData gridData = new GridData();\n\tgridData.widthHint = 50;\n\t\n\tLabel label = new Label(timingGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.ports.timing.timeout\"));\n\tportTimeoutText = new Text(timingGroup, SWT.BORDER);\n\tportTimeoutText.setLayoutData(gridData);\n\t\n\tGridData gridData1 = new GridData();\n\tgridData1.horizontalSpan = 2;\n\tadaptTimeoutCheckbox = new Button(timingGroup, SWT.CHECK);\n\tadaptTimeoutCheckbox.setText(Labels.getLabel(\"preferences.ports.timing.adaptTimeout\"));\n\tadaptTimeoutCheckbox.setLayoutData(gridData1);\n\tadaptTimeoutCheckbox.addListener(SWT.Selection, event -> minPortTimeoutText.setEnabled(adaptTimeoutCheckbox.getSelection()));\n\n\tlabel = new Label(timingGroup, SWT.NONE);\n\tlabel.setText(Labels.getLabel(\"preferences.ports.timing.minTimeout\"));\n\tminPortTimeoutText = new Text(timingGroup, SWT.BORDER);\n\tminPortTimeoutText.setLayoutData(gridData);\n\n\tRowLayout portsLayout = new RowLayout(SWT.VERTICAL);\n\tportsLayout.fill = true;\n\tportsLayout.marginHeight = 2;\n\tportsLayout.marginWidth = 2;\n\tGroup portsGroup = new Group(portsTab, SWT.NONE);\n\tportsGroup.setText(Labels.getLabel(\"preferences.ports.ports\"));\n\tportsGroup.setLayout(portsLayout);\n\t\n\tlabel = new Label(portsGroup, SWT.WRAP);\n\tlabel.setText(Labels.getLabel(\"preferences.ports.portsDescription\"));\n\t//label.setLayoutData(new RowData(300, SWT.DEFAULT));\n\tportsText = new Text(portsGroup, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);\n\tportsText.setLayoutData(new RowData(SWT.DEFAULT, 60));\n\tportsText.addKeyListener(new PortsTextValidationListener());\n\t\n\taddRequestedPortsCheckbox = new Button(portsGroup, SWT.CHECK);\n\taddRequestedPortsCheckbox.setText(Labels.getLabel(\"preferences.ports.addRequested\"));\n\taddRequestedPortsCheckbox.setToolTipText(Labels.getLabel(\"preferences.ports.addRequested.info\"));\n}", "path": "ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * @return a pre-initialized RowLayout suitable for option tabs.\n */\n", "func_signal": "private RowLayout createRowLayout()", "code": "{\n\tRowLayout rowLayout = new RowLayout();\n\trowLayout.type = org.eclipse.swt.SWT.VERTICAL;\n\trowLayout.spacing = 9;\n\trowLayout.marginHeight = 9;\n\trowLayout.marginWidth = 11;\n\trowLayout.fill = true;\n\treturn rowLayout;\n}", "path": "ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * This method initializes tabFolder\t\n */\n", "func_signal": "private void createTabFolder()", "code": "{\n\ttabFolder = new TabFolder(shell, SWT.NONE);\n\t\n\tcreateScanningTab();\n\tTabItem tabItem = new TabItem(tabFolder, SWT.NONE);\n\ttabItem.setText(Labels.getLabel(\"title.preferences.scanning\"));\n\ttabItem.setControl(scanningTab);\n\tscanningTabItem = tabItem;\n\t\n\tcreatePortsTab();\n\ttabItem = new TabItem(tabFolder, SWT.NONE);\n\ttabItem.setText(Labels.getLabel(\"title.preferences.ports\"));\n\ttabItem.setControl(portsTab);\n\tportsTabItem = tabItem;\n\t\n\tcreateDisplayTab();\t\t\n\ttabItem = new TabItem(tabFolder, SWT.NONE);\n\ttabItem.setText(Labels.getLabel(\"title.preferences.display\"));\n\ttabItem.setControl(displayTab);\t\t\n\n\ttabFolder.pack();\n}", "path": "ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Initializes the RescanFeeder using the old feeder used for the real scan to delegate some calls to.\n * @param oldFeeder\n */\n", "func_signal": "public RescanFeeder(Feeder oldFeeder, String ... ips)", "code": "{\n\tthis.originalFeeder = oldFeeder;\n\tinitAddresses(ips);\n}", "path": "ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Updates the list, retaining only items that are passed in the array.\n * The order of elements will be the same as in the array.\n * \n * @param keys\n */\n", "func_signal": "public void update(String[] keys)", "code": "{\n\t// rebuild the map (to recreate the new order of elements)\n\tMap<String, Object> newList = new LinkedHashMap<>();\n\tfor (String key : keys) {\n\t\tnewList.put(key, namedList.get(key));\n\t}\n\tnamedList = newList;\n}", "path": "ipscan/src/net/azib/ipscan/config/NamedListConfig.java", "commit_date": "2019-07-15 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * Called when scanning button is clicked\n */\n", "func_signal": "public void widgetSelected(SelectionEvent event)", "code": "{\n\t// ask for confirmation before erasing scanning results\n\tif (stateMachine.inState(IDLE)) {\n\t\tif (!preScanChecks())\n\t\t\treturn;\n\t}\n\tstateMachine.transitionToNext();\n}", "path": "ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "angryip/ipscan", "stars": 3793, "license": "gpl-2.0", "language": "java", "size": 117444}
{"docstring": "/**\n * In this we call cal the {@link Func}\n * and check should run it\n *\n * @return T\n */\n", "func_signal": "@Override\npublic T call()", "code": "{\n    // Cleanup reference the pool\n    mPool = null;\n    // Doing\n    return mFunc.call();\n}", "path": "Genius-Android/caprice/kit-handler/src/main/java/net/qiujuer/genius/kit/handler/FuncSyncTask.java", "commit_date": "2016-12-14 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * FORCE the popup window to be removed.\n * You typically calls this when the parent view is being removed from the window to avoid a Window Leak\n */\n", "func_signal": "public void dismissComplete()", "code": "{\n    if (isShowing()) {\n        mShowing = false;\n        try {\n            mWindowManager.removeViewImmediate(mPopupView);\n        } finally {\n            // Do...\n        }\n    }\n}", "path": "Genius-Android/caprice/ui/src/main/java/net/qiujuer/genius/ui/widget/popup/PopupIndicator.java", "commit_date": "2016-01-08 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Get the actual type arguments a child class has used to extend a generic\n * base class.\n * <p>\n * Child class must be the implementation class of base class.\n * Base class must be a generic class.\n *\n * @param baseClass  the base class\n * @param childClass the child class\n * @return a array type of the raw classes for the actual type arguments.\n */\n", "func_signal": "public static <T> Type[] getActualTypeArguments(\n        final Class<T> baseClass, final Class<?> childClass)", "code": "{\n\n    // Create map\n    Map<Type, Type> resolvedTypes;\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {\n        resolvedTypes = new ArrayMap<>();\n    } else {\n        resolvedTypes = new HashMap<>();\n    }\n\n    Type type = childClass;\n    // start walking up the inheritance hierarchy until we hit baseClass\n    while (!getClass(type).equals(baseClass)) {\n        if (type instanceof Class) {\n            // there is no useful information for us in raw types, so just keep going.\n            type = ((Class) type).getGenericSuperclass();\n        } else {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Class<?> rawType = (Class) parameterizedType.getRawType();\n\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = rawType.getTypeParameters();\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                resolvedTypes.put(typeParameters[i], actualTypeArguments[i]);\n            }\n\n            if (!rawType.equals(baseClass)) {\n                type = rawType.getGenericSuperclass();\n            }\n        }\n    }\n\n    // finally, for each actual type argument provided to baseClass, determine (if possible)\n    // the raw class for that type argument.\n    Type[] actualTypeArguments;\n    if (type instanceof Class) {\n        actualTypeArguments = ((Class) type).getTypeParameters();\n    } else {\n        actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n    }\n    // resolve types by chasing down type variables.\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        Type tempType = actualTypeArguments[i];\n\n        // First search really type\n        while (resolvedTypes.containsKey(tempType)) {\n            tempType = resolvedTypes.get(tempType);\n        }\n\n        // If the type instanceof ParameterizedType,\n        // we need replace types by getActualTypeArguments()\n        tempType = replaceTypeActualArgument(tempType, resolvedTypes);\n\n        actualTypeArguments[i] = tempType;\n    }\n    return actualTypeArguments;\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Run to doing something\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    if (!mDone) {\n        synchronized (this) {\n            if (!mDone) {\n                mResult = call();\n                mDone = true;\n                try {\n                    this.notifyAll();\n                } catch (Exception ignored) {\n                }\n            }\n        }\n    }\n}", "path": "Genius-Android/caprice/kit-handler/src/main/java/net/qiujuer/genius/kit/handler/FuncSyncTask.java", "commit_date": "2016-12-14 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Building the bitmap\n *\n * @param original Bitmap\n * @return Bitmap\n */\n", "func_signal": "private static Bitmap checkSource(Bitmap original, int radius)", "code": "{\n    if (radius < 0 || radius > 256) {\n        throw new RuntimeException(\"Blur bitmap radius must >= 1 and <=256.\");\n    }\n\n    // First we should check the original\n    if (original == null) {\n        throw new NullPointerException(\"Blur bitmap original isn't null.\");\n    }\n    if (original.isRecycled()) {\n        throw new RuntimeException(\"Blur bitmap can't blur a recycled bitmap.\");\n    }\n\n    Bitmap.Config config = original.getConfig();\n    if (config != Bitmap.Config.ARGB_8888 && config != Bitmap.Config.RGB_565) {\n        throw new RuntimeException(\"Blur bitmap only supported Bitmap.Config.ARGB_8888 and Bitmap.Config.RGB_565.\");\n    }\n\n    return (original);\n}", "path": "Genius-Android/caprice/graphics/src/main/java/net/qiujuer/genius/graphics/Blur.java", "commit_date": "2016-12-20 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Get current {@link Reflector#obj} fields by create Map\n *\n * @return a map to Reflector-fields\n */\n", "func_signal": "public Map<String, Reflector> fields()", "code": "{\n    Map<String, Reflector> result;\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {\n        result = new ArrayMap<>();\n    } else {\n        result = new HashMap<>();\n    }\n    Class<?> type = type();\n    do {\n        // all field\n        for (Field field : type.getDeclaredFields()) {\n            if (!isClass ^ Modifier.isStatic(field.getModifiers())) {\n                String name = field.getName();\n                // add\n                if (!result.containsKey(name))\n                    result.put(name, field(name));\n            }\n        }\n\n        type = type.getSuperclass();\n    }\n    while (type != null);\n\n    return result;\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * StackBlur By Jni Bitmap\n *\n * @param original Original Image\n * @param radius   Blur radius\n * @return Image Bitmap\n */\n", "func_signal": "public static Bitmap onStackBlur(Bitmap original, int radius)", "code": "{\n    Bitmap bitmap = checkSource(original, radius);\n\n    // Return this none blur\n    if (radius == 1) {\n        return bitmap;\n    }\n\n    //Jni BitMap Blur\n    nativeStackBlurBitmap(bitmap, radius);\n\n    return (bitmap);\n}", "path": "Genius-Android/caprice/graphics/src/main/java/net/qiujuer/genius/graphics/Blur.java", "commit_date": "2016-12-20 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * I'm NOT completely sure how all this bitwise things work...\n *\n * @param curFlags Cur Flags\n * @return Flags\n */\n", "func_signal": "private int computeFlags(int curFlags)", "code": "{\n    curFlags &= ~(\n            WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES |\n                    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |\n                    WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE |\n                    WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH |\n                    WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS |\n                    WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n    curFlags |= WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES;\n    curFlags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;\n    curFlags |= WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n    curFlags |= WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;\n    return curFlags;\n}", "path": "Genius-Android/caprice/ui/src/main/java/net/qiujuer/genius/ui/widget/popup/PopupIndicator.java", "commit_date": "2016-01-08 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Replace {@link ParameterizedType#getActualTypeArguments()} method return value.\n * In this we use {@link ParameterizeTypeActualArgsDelegate} delegate {@link ParameterizedType};\n * Let {@link ParameterizedType#getActualTypeArguments()} return really class type.\n *\n * @param inType        Type\n * @param resolvedTypes a Map<Type, Type>, {@link #getActualTypeArguments(Class, Class)}\n * @return {@link ParameterizeTypeActualArgsDelegate}\n */\n", "func_signal": "private static Type replaceTypeActualArgument(Type inType, final Map<Type, Type> resolvedTypes)", "code": "{\n    Type outType = inType;\n\n    if (inType instanceof ParameterizedType) {\n        final ParameterizedType finalType = ((ParameterizedType) inType);\n        final Type[] actualArgs = ((ParameterizedType) inType).getActualTypeArguments();\n\n        for (int i = 0; i < actualArgs.length; i++) {\n            Type argType = actualArgs[i];\n            while (resolvedTypes.containsKey(argType)) {\n                argType = resolvedTypes.get(argType);\n            }\n\n            // Do replace ActualArgument\n            argType = replaceTypeActualArgument(argType, resolvedTypes);\n\n            actualArgs[i] = argType;\n        }\n\n        outType = new ParameterizeTypeActualArgsDelegate(finalType, actualArgs);\n    }\n    return outType;\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * *********************************************************************************************\n * To parse and load\n * *********************************************************************************************\n */\n", "func_signal": "private String launchPing()", "code": "{\n    long startTime = System.currentTimeMillis();\n    mCommand = new Command(\"/system/bin/ping\",\n            \"-c\", String.valueOf(mCount),\n            \"-s\", String.valueOf(mSize),\n            mTarget);\n    try {\n        String res = Command.command(mCommand);\n        mTotalTime = (System.currentTimeMillis() - startTime);\n        return res;\n    } catch (Exception e) {\n        cancel();\n        return null;\n    } finally {\n        mCommand = null;\n    }\n}", "path": "Genius-Android/caprice/kit-cmd/src/main/java/net/qiujuer/genius/kit/cmd/Ping.java", "commit_date": "2016-04-17 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Un wrap the obj\n * if obj is {@link Reflector} type, we can call Reflector.get()\n *\n * @param object Object\n * @return real obj\n */\n", "func_signal": "private static Object unwrap(Object object)", "code": "{\n    if (object instanceof Reflector) {\n        return ((Reflector) object).get();\n    }\n\n    return object;\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * To specify the IP or domain name to Ping test and return the IP, packet loss,\n * delay parameter to specify the IP or domain name such as Ping test and return the IP,\n * packet loss, delay and other parameters\n *\n * @param count        Packets\n * @param size         Packet size\n * @param target       The target\n * @param isAnalysisIp Whether parsing IP\n */\n", "func_signal": "public Ping(int count, int size, String target, boolean isAnalysisIp)", "code": "{\n    this.isAnalysisIp = isAnalysisIp;\n    this.mCount = count;\n    this.mSize = size;\n    this.mTarget = target;\n}", "path": "Genius-Android/caprice/kit-cmd/src/main/java/net/qiujuer/genius/kit/cmd/Ping.java", "commit_date": "2016-04-17 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Create a dynamic proxy\n * if invoke error try get value by Map when {@link Reflector#obj} instanceof Map\n *\n * @param proxyType proxy type\n * @param <P>       proxy class\n * @return proxy class\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <P> P proxy(Class<P> proxyType)", "code": "{\n    final boolean isMap = (obj instanceof Map);\n    final InvocationHandler handler = new InvocationHandler() {\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            String name = method.getName();\n            try {\n                return with(obj).call(name, args).get();\n            } catch (ReflectException e) {\n                if (isMap) {\n                    Map<String, Object> map = (Map<String, Object>) obj;\n                    int length = (args == null ? 0 : args.length);\n\n                    if (length == 0 && name.startsWith(\"get\")) {\n                        return map.get(toLowerCaseFirstOne(name.substring(3)));\n                    } else if (length == 0 && name.startsWith(\"is\")) {\n                        return map.get(toLowerCaseFirstOne(name.substring(2)));\n                    } else if (length == 1 && name.startsWith(\"set\")) {\n                        map.put(toLowerCaseFirstOne(name.substring(3)), args[0]);\n                        return null;\n                    }\n                }\n\n                throw e;\n            }\n        }\n    };\n\n    return (P) Proxy.newProxyInstance(proxyType.getClassLoader(), new Class[]{proxyType}, handler);\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Get now {@link Reflector} obj class type\n *\n * @return Class\n * @see Object#getClass()\n */\n", "func_signal": "public Class<?> type()", "code": "{\n    if (isClass) {\n        return (Class<?>) obj;\n    } else {\n        return obj.getClass();\n    }\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Get the target field value, and warp to {@link Reflector}\n *\n * @param name target name\n * @return Reflector\n * @throws ReflectException\n */\n", "func_signal": "public Reflector field(String name) throws ReflectException", "code": "{\n    try {\n        Field field = field0(name);\n        return with(field.get(obj));\n    } catch (Exception e) {\n        throw new ReflectException(e);\n    }\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Set the target field value\n *\n * @param name  field name\n * @param value field value\n * @return Reflector\n * @throws ReflectException\n */\n", "func_signal": "public Reflector set(String name, Object value) throws ReflectException", "code": "{\n    try {\n        Field field = field0(name);\n        field.setAccessible(true);\n        field.set(obj, unwrap(value));\n        return this;\n    } catch (Exception e) {\n        throw new ReflectException(e);\n    }\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * StackBlur By Java Bitmap\n *\n * @param original Original Image\n * @param radius   Blur radius\n * @return Image Bitmap\n */\n", "func_signal": "public static Bitmap onStackBlurJava(Bitmap original, int radius)", "code": "{\n    // Stack Blur v1.0 from\n    // http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html\n    //\n    // Java Author: Mario Klingemann <mario at quasimondo.com>\n    // http://incubator.quasimondo.com\n    // created Feburary 29, 2004\n    // Android port : Yahel Bouaziz <yahel at kayenko.com>\n    // http://www.kayenko.com\n    // ported april 5th, 2012\n\n    // This is a compromise between Gaussian Blur and Box blur\n    // It creates much better looking blurs than Box Blur, but is\n    // 7x faster than my Gaussian Blur implementation.\n    //\n    // I called it Stack Blur because this describes best how this\n    // filter works internally: it creates a kind of moving stack\n    // of colors whilst scanning through the image. Thereby it\n    // just has to add one new block of color to the right side\n    // of the stack and remove the leftmost color. The remaining\n    // colors on the topmost layer of the stack are either added on\n    // or reduced by one, depending on if they are on the right or\n    // on the left side of the stack.\n    //\n    // If you are using this algorithm in your code please add\n    // the following line:\n    //\n    // Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>\n\n    Bitmap bitmap = checkSource(original, radius);\n\n    // Return this none blur\n    if (radius == 1) {\n        return bitmap;\n    }\n\n    int w = bitmap.getWidth();\n    int h = bitmap.getHeight();\n\n    int[] pix = new int[w * h];\n    // get array\n    bitmap.getPixels(pix, 0, w, 0, 0, w, h);\n\n    // run Blur\n    int wm = w - 1;\n    int hm = h - 1;\n    int wh = w * h;\n    int div = radius + radius + 1;\n\n    short r[] = new short[wh];\n    short g[] = new short[wh];\n    short b[] = new short[wh];\n    int rSum, gSum, bSum, x, y, i, p, yp, yi, yw;\n    int vMin[] = new int[Math.max(w, h)];\n\n    int divSum = (div + 1) >> 1;\n    divSum *= divSum;\n\n    short dv[] = new short[256 * divSum];\n    for (i = 0; i < 256 * divSum; i++) {\n        dv[i] = (short) (i / divSum);\n    }\n\n    yw = yi = 0;\n\n    int[][] stack = new int[div][3];\n    int stackPointer;\n    int stackStart;\n    int[] sir;\n    int rbs;\n    int r1 = radius + 1;\n    int routSum, goutSum, boutSum;\n    int rinSum, ginSum, binSum;\n\n    for (y = 0; y < h; y++) {\n        rinSum = ginSum = binSum = routSum = goutSum = boutSum = rSum = gSum = bSum = 0;\n        for (i = -radius; i <= radius; i++) {\n            p = pix[yi + Math.min(wm, Math.max(i, 0))];\n            sir = stack[i + radius];\n            sir[0] = (p & 0xff0000) >> 16;\n            sir[1] = (p & 0x00ff00) >> 8;\n            sir[2] = (p & 0x0000ff);\n\n            rbs = r1 - Math.abs(i);\n            rSum += sir[0] * rbs;\n            gSum += sir[1] * rbs;\n            bSum += sir[2] * rbs;\n            if (i > 0) {\n                rinSum += sir[0];\n                ginSum += sir[1];\n                binSum += sir[2];\n            } else {\n                routSum += sir[0];\n                goutSum += sir[1];\n                boutSum += sir[2];\n            }\n        }\n        stackPointer = radius;\n\n        for (x = 0; x < w; x++) {\n\n            r[yi] = dv[rSum];\n            g[yi] = dv[gSum];\n            b[yi] = dv[bSum];\n\n            rSum -= routSum;\n            gSum -= goutSum;\n            bSum -= boutSum;\n\n            stackStart = stackPointer - radius + div;\n            sir = stack[stackStart % div];\n\n            routSum -= sir[0];\n            goutSum -= sir[1];\n            boutSum -= sir[2];\n\n            if (y == 0) {\n                vMin[x] = Math.min(x + radius + 1, wm);\n            }\n            p = pix[yw + vMin[x]];\n\n            sir[0] = (p & 0xff0000) >> 16;\n            sir[1] = (p & 0x00ff00) >> 8;\n            sir[2] = (p & 0x0000ff);\n\n            rinSum += sir[0];\n            ginSum += sir[1];\n            binSum += sir[2];\n\n            rSum += rinSum;\n            gSum += ginSum;\n            bSum += binSum;\n\n            stackPointer = (stackPointer + 1) % div;\n            sir = stack[(stackPointer) % div];\n\n            routSum += sir[0];\n            goutSum += sir[1];\n            boutSum += sir[2];\n\n            rinSum -= sir[0];\n            ginSum -= sir[1];\n            binSum -= sir[2];\n\n            yi++;\n        }\n        yw += w;\n    }\n    for (x = 0; x < w; x++) {\n        rinSum = ginSum = binSum = routSum = goutSum = boutSum = rSum = gSum = bSum = 0;\n        yp = -radius * w;\n        for (i = -radius; i <= radius; i++) {\n            yi = Math.max(0, yp) + x;\n\n            sir = stack[i + radius];\n\n            sir[0] = r[yi];\n            sir[1] = g[yi];\n            sir[2] = b[yi];\n\n            rbs = r1 - Math.abs(i);\n\n            rSum += r[yi] * rbs;\n            gSum += g[yi] * rbs;\n            bSum += b[yi] * rbs;\n\n            if (i > 0) {\n                rinSum += sir[0];\n                ginSum += sir[1];\n                binSum += sir[2];\n            } else {\n                routSum += sir[0];\n                goutSum += sir[1];\n                boutSum += sir[2];\n            }\n\n            if (i < hm) {\n                yp += w;\n            }\n        }\n        yi = x;\n        stackPointer = radius;\n        for (y = 0; y < h; y++) {\n            // Preserve alpha channel: ( 0xff000000 & pix[yi] )\n            pix[yi] = (0xff000000 & pix[yi]) | (dv[rSum] << 16) | (dv[gSum] << 8) | dv[bSum];\n\n            rSum -= routSum;\n            gSum -= goutSum;\n            bSum -= boutSum;\n\n            stackStart = stackPointer - radius + div;\n            sir = stack[stackStart % div];\n\n            routSum -= sir[0];\n            goutSum -= sir[1];\n            boutSum -= sir[2];\n\n            if (x == 0) {\n                vMin[y] = Math.min(y + r1, hm) * w;\n            }\n            p = x + vMin[y];\n\n            sir[0] = r[p];\n            sir[1] = g[p];\n            sir[2] = b[p];\n\n            rinSum += sir[0];\n            ginSum += sir[1];\n            binSum += sir[2];\n\n            rSum += rinSum;\n            gSum += ginSum;\n            bSum += binSum;\n\n            stackPointer = (stackPointer + 1) % div;\n            sir = stack[stackPointer];\n\n            routSum += sir[0];\n            goutSum += sir[1];\n            boutSum += sir[2];\n\n            rinSum -= sir[0];\n            ginSum -= sir[1];\n            binSum -= sir[2];\n\n            yi += w;\n        }\n    }\n\n    // set Bitmap\n    bitmap.setPixels(pix, 0, w, 0, 0, w, h);\n\n    return (bitmap);\n}", "path": "Genius-Android/caprice/graphics/src/main/java/net/qiujuer/genius/graphics/Blur.java", "commit_date": "2016-12-20 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * We can create class by args structural parameters\n *\n * @param args structural parameters\n * @return new structural parameters class\n * @throws ReflectException\n */\n", "func_signal": "public Reflector create(Object... args) throws ReflectException", "code": "{\n    Class<?>[] types = getTypes(args);\n\n    try {\n        Constructor<?> constructor = type().getDeclaredConstructor(types);\n        return with(constructor, args);\n    } catch (NoSuchMethodException e) {\n        for (Constructor<?> constructor : type().getDeclaredConstructors()) {\n            if (match(constructor.getParameterTypes(), types)) {\n                return with(constructor, args);\n            }\n        }\n\n        throw new ReflectException(e);\n    }\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Change string first char to lower case\n *\n * @param string wait change string\n * @return new first lower case string\n */\n", "func_signal": "@SuppressLint(\"DefaultLocale\")\nprivate static String toLowerCaseFirstOne(String string)", "code": "{\n    int length = string.length();\n\n    if (length == 0 || Character.isLowerCase(string.charAt(0))) {\n        return string;\n    } else if (length == 1) {\n        return string.toLowerCase();\n    } else {\n        return (new StringBuilder())\n                .append(Character.toLowerCase(string.charAt(0)))\n                .append(string.substring(1)).toString();\n    }\n}", "path": "Genius-Android/caprice/kit-reflect/src/main/java/net/qiujuer/genius/kit/reflect/Reflector.java", "commit_date": "2016-10-22 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * *********************************************************************************************\n * Public  method\n * *********************************************************************************************\n */\n", "func_signal": "@Override\npublic void start()", "code": "{\n    String res = launchPing();\n    if (res != null && res.length() > 0) {\n        res = res.toLowerCase();\n        if (res.contains(Cmd.PING_UNREACHABLE) && !res.contains(Cmd.PING_EXCEED)) {\n            // Failed\n            mLossRate = 1f;\n            mError = Cmd.HOST_UNREACHABLE_ERROR;\n        } else {\n            // Succeed\n            mLossRate = parseLoss(res);\n            mDelay = parseDelay(res);\n            if (isAnalysisIp)\n                mIp = parseIp(res);\n        }\n    } else {\n        mError = Cmd.DROP_DATA_ERROR;\n    }\n}", "path": "Genius-Android/caprice/kit-cmd/src/main/java/net/qiujuer/genius/kit/cmd/Ping.java", "commit_date": "2016-04-17 00:00:00", "repo_name": "qiujuer/Genius-Android", "stars": 2303, "license": "apache-2.0", "language": "java", "size": 58571}
{"docstring": "/**\n * Taken from {@link org.springframework.test.util.AopTestUtils#getUltimateTargetObject(java.lang.Object)}\n * and copied to provide support for versions earlier then Spring 4.2\n *\n * Get the ultimate <em>target</em> object of the supplied {@code candidate}\n * object, unwrapping not only a top-level proxy but also any number of\n * nested proxies.\n * <p>If the supplied {@code candidate} is a Spring\n * {@linkplain AopUtils#isAopProxy proxy}, the ultimate target of all\n * nested proxies will be returned; otherwise, the {@code candidate}\n * will be returned <em>as is</em>.\n * @param candidate the instance to check (potentially a Spring AOP proxy;\n * never {@code null})\n * @return the target object or the {@code candidate} (never {@code null})\n * @throws IllegalStateException if an error occurs while unwrapping a proxy\n * @see Advised#getTargetSource()\n * @see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass\n */\n", "func_signal": "public static <T> T getUltimateTargetObject(Object candidate)", "code": "{\n  Assert.notNull(candidate, \"Candidate must not be null\");\n  try {\n    if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {\n      Object target = ((Advised) candidate).getTargetSource().getTarget();\n      if (target != null) {\n        return (T) getUltimateTargetObject(target);\n      }\n    }\n  }\n  catch (Throwable ex) {\n    throw new IllegalStateException(\"Failed to unwrap proxied object\", ex);\n  }\n  return (T) candidate;\n}", "path": "spock/spock-spring/src/main/java/org/spockframework/spring/UnwrapAopProxyExtension.java", "commit_date": "2020-07-09 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// for better JUnit compatibility, e.g when a @Rule is used\n", "func_signal": "private void handleMultipleFailures(ErrorInfoCollector errorInfoCollector,  ErrorInfo error)", "code": "{\n  MultipleFailuresError multiFailure = (MultipleFailuresError) error.getException();\n  for (Throwable failure : multiFailure.getFailures())\n    error(errorInfoCollector, new ErrorInfo(error.getMethod(), failure));\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/MasterRunSupervisor.java", "commit_date": "2019-10-31 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Return an unmodifiable map of data variable names to values with the same iteration\n * order as {@link FeatureInfo#getDataVariables} and {@link #getDataValues()}. The returned\n * map is backed by the actual data values array, so updates are reflected in the returned map.\n *\n * @return an unmodifiable map of data variable names to values\n */\n", "func_signal": "public Map<String, Object> getDataVariables()", "code": "{\n  if (dataVariables == null) {\n    dataVariables = new DataVariableMap(getFeature().getDataVariables(), dataValues);\n  }\n  return dataVariables;\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/model/IterationInfo.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// do nothing\n", "func_signal": "@Override\n public void visitSpec(SpecInfo spec)", "code": "{\n   if (spec.getSuperSpec() != null)\n     visitSpec(spec.getSuperSpec());\n\n   for (FeatureInfo feature : spec.getFeatures()) {\n     if(!feature.getFeatureMethod().getReflection().isAnnotationPresent(IgnoreRest.class))\n       feature.skip(\"Not annotated with @IgnoreRest\");\n   }\n }", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/extension/builtin/IgnoreRestExtension.java", "commit_date": "2020-07-09 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// method calls with spread-dot operator are not rewritten, hence this method doesn't have to care about spread-dot\n", "func_signal": "public static void verifyMethodCondition(ErrorCollector errorCollector, @Nullable ValueRecorder recorder, @Nullable String text, int line, int column,\n    @Nullable Object message, Object target, String method, Object[] args, boolean safe, boolean explicit, int lastVariableNum)", "code": "{\n  MatcherCondition matcherCondition = MatcherCondition.parse(target, method, args, safe);\n  if (matcherCondition != null) {\n    matcherCondition.verify(errorCollector, getValues(recorder), text, line, column, messageToString(message));\n    return;\n  }\n\n  if (recorder != null) {\n    recorder.startRecordingValue(lastVariableNum);\n  }\n  Object result = safe ? GroovyRuntimeUtil.invokeMethodNullSafe(target, method, args) :\n      GroovyRuntimeUtil.invokeMethod(target, method, args);\n\n  if (!explicit && result == null && isVoidMethod(target, method, args)) return;\n\n  if (!GroovyRuntimeUtil.isTruthy(result)) {\n    List<Object> values = getValues(recorder);\n    if (values != null) CollectionUtil.setLastElement(values, result);\n    final ConditionNotSatisfiedError conditionNotSatisfiedError = new ConditionNotSatisfiedError(\n        new Condition(values, text, TextPosition.create(line, column), messageToString(message), null, null));\n    errorCollector.collectOrThrow(conditionNotSatisfiedError);\n  }\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/SpockRuntime.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * If the given statement is a valid interaction definition, returns the rewritten statement.\n * If the given statement is not an interaction definition, returns null.\n * If the given statement is an invalid interaction definition, records a compile error\n * and returns null.\n */\n", "func_signal": "@Nullable\npublic ExpressionStatement rewrite(ExpressionStatement stat)", "code": "{\n  try {\n    if (!isInteraction(stat)) return null;\n\n    createBuilder();\n    setCount();\n    setCall();\n    addResponses();\n    build();\n    return register();\n  } catch (InvalidSpecCompileException e) {\n    resources.getErrorReporter().error(e);\n    return null;\n  }\n}", "path": "spock/spock-core/src/main/java/org/spockframework/compiler/InteractionRewriter.java", "commit_date": "2020-08-12 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Invokes this method on the specified target and with the specified arguments.\n * Does <em>not</em> handle interceptors.\n *\n * @param target the target of the method call\n * @param arguments the arguments for the method call\n * @return the return value of the method call\n */\n", "func_signal": "public Object invoke(Object target, Object... arguments) throws Throwable", "code": "{\n  for (int i = 0, argCount = arguments.length; i < argCount; i++) {\n    if (arguments[i] == MISSING_ARGUMENT) {\n      StringJoiner missingArguments = new StringJoiner(\"', '\", \"No argument was provided for parameters: '\", \"'\");\n      List<String> parameterNames = getFeature().getParameterNames();\n      missingArguments.add(parameterNames.get(i));\n      for (int j = i + 1; j < argCount; j++) {\n        if (arguments[j] == MISSING_ARGUMENT) {\n          missingArguments.add(parameterNames.get(j));\n        }\n      }\n      throw new SpockExecutionException(missingArguments.toString());\n    }\n  }\n  return invoker.invoke(target, arguments);\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/model/MethodInfo.java", "commit_date": "2020-04-16 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Creates a new TextPosition instance.\n *\n * @param line the position's line number\n * @param column the position's column number\n * @throws IllegalArgumentException if line or column is less than 1\n */\n", "func_signal": "private TextPosition(int line, int column)", "code": "{\n  this.line = line;\n  this.column = column;\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/model/TextPosition.java", "commit_date": "2017-06-16 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// condition can be null too, but not in the sense of \"not available\"\n", "func_signal": "public static void verifyCondition(ErrorCollector errorCollector, @Nullable ValueRecorder recorder,\n    @Nullable String text, int line, int column, @Nullable Object message, @Nullable Object condition)", "code": "{\n  if (!GroovyRuntimeUtil.isTruthy(condition)) {\n    final ConditionNotSatisfiedError conditionNotSatisfiedError = new ConditionNotSatisfiedError(\n      new Condition(getValues(recorder), text, TextPosition.create(line, column), messageToString(message), null, null));\n    errorCollector.collectOrThrow(conditionNotSatisfiedError);\n  }\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/SpockRuntime.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// in contrast to the three other handleXXX methods, this one includes nodes\n", "func_signal": "private void handleFeatureIncludes(SpecInfo spec, IncludeExcludeCriteria criteria)", "code": "{\n  if (criteria.isEmpty()) return;\n\n  for (FeatureInfo feature : spec.getAllFeatures())\n    if (hasAnyAnnotation(feature.getFeatureMethod(), criteria.annotations))\n      feature.setExcluded(false);\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/extension/builtin/IncludeExcludeExtension.java", "commit_date": "2017-06-16 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * @since 2.0\n */\n", "func_signal": "@Beta\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface DataProcessorMetadata", "code": "{\n  String DATA_VARIABLES = \"dataVariables\";\n\n  String[] dataVariables();\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/model/DataProcessorMetadata.java", "commit_date": "2020-04-15 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// foo([a:1],b) and foo(a:1,b) are currently not distinguishable in Groovy\n// neither are foo([a:1],b) and foo(b,a:1)\n// so we should probably add some heuristics to tell them apart (look at subject's method signatures)\n// same for telling apart last arg (could be blueprint or last constructor arg)\n// current impl is dead stupid:\n// - named args not treated specially\n// - last arg is closure => treat as blueprint\n", "func_signal": "@Override\npublic Object invokeMethod(String name, Object[] args)", "code": "{\n  ISlot slot = findSlot(name, args);\n  if (slot != null) {\n    PojoGestalt gestalt = createGestalt(slot.getType(), args);\n    new Sculpturer().$form(gestalt);\n    slot.write(gestalt.getSubject());\n    return gestalt.getSubject();\n  }\n  if (GroovyRuntimeUtil.getMetaClass(pojo).getMetaMethod(name, args) != null) {\n    return GroovyRuntimeUtil.invokeMethod(pojo, name, args);\n  }\n  throw new RuntimeException(String.format(\"Cannot find a slot named '%s'\", name));\n}", "path": "spock/spock-core/src/main/java/org/spockframework/builder/PojoGestalt.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// enables IDE support (diff dialog)\n", "func_signal": "private Throwable convertToComparisonFailure(Throwable exception)", "code": "{\n  assert isFailedEqualityComparison(exception);\n\n  ConditionNotSatisfiedError conditionNotSatisfiedError = (ConditionNotSatisfiedError) exception;\n  Condition condition = conditionNotSatisfiedError.getCondition();\n  ExpressionInfo expr = condition.getExpression();\n\n  Object actualValue = expr.getChildren().get(0).getValue();\n  ValueWrapper actual = ValueWrapper.create(actualValue, renderValue(actualValue));\n\n  Object expectedValue = expr.getChildren().get(1).getValue();\n  ValueWrapper expected = ValueWrapper.create(expectedValue, renderValue(expectedValue));\n\n  AssertionFailedError failure = new SpockComparisonFailure(condition, expected, actual);\n  failure.setStackTrace(exception.getStackTrace());\n\n  if (conditionNotSatisfiedError.getCause()!=null){\n    failure.initCause(conditionNotSatisfiedError.getCause());\n  }\n\n  return failure;\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/MasterRunSupervisor.java", "commit_date": "2019-10-31 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Returns information about a mock object.\n *\n * @param object a mock object\n *\n * @return information about the mock object\n *\n * @throws IllegalArgumentException if the given object is not a mock object\n */\n", "func_signal": "public IMockObject asMock(Object object)", "code": "{\n  if (!isMock(object)) {\n    throw new IllegalArgumentException(\"Not a mock object: \" + object.toString());\n  }\n\n  ISpockMockObject handle = (ISpockMockObject) object;\n  return handle.$spock_get();\n}", "path": "spock/spock-core/src/main/java/org/spockframework/mock/MockUtil.java", "commit_date": "2017-06-16 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Blocks until a value has been set for this variable, or a timeout expires.\n *\n * @return the variable's value\n *\n * @throws InterruptedException if the calling thread is interrupted\n */\n", "func_signal": "public T get() throws InterruptedException", "code": "{\n  if (!valueReady.await((long) (timeout * 1000), TimeUnit.MILLISECONDS)) {\n    String msg = String.format(\"BlockingVariable.get() timed out after %1.2f seconds\", timeout);\n    throw new SpockTimeoutError(timeout, msg);\n  }\n  return value;\n}", "path": "spock/spock-core/src/main/java/spock/util/concurrent/BlockingVariable.java", "commit_date": "2019-12-31 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Returns the text read from the given reader as a String.\n * Closes the given reader upon return.\n */\n", "func_signal": "public static String getText(Reader reader) throws IOException", "code": "{\n  try(BufferedReader buffered = new BufferedReader(reader)) {\n    StringBuilder source = new StringBuilder();\n\n    String line = buffered.readLine();\n\n    while (line != null) {\n      source.append(line);\n      source.append('\\n');\n      line = buffered.readLine();\n    }\n\n    return source.toString();\n  }\n}", "path": "spock/spock-core/src/main/java/org/spockframework/util/IoUtil.java", "commit_date": "2020-06-26 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "// also handles some numeric types which aren't primitive wrapper types\n", "func_signal": "private Object createEmptyWrapper(Class<?> type)", "code": "{\n  if (Number.class.isAssignableFrom(type)) {\n    Method method = ReflectionUtil.getDeclaredMethodBySignature(type, \"valueOf\", String.class);\n    if (method != null && method.getReturnType() == type) {\n      return ReflectionUtil.invokeMethod(type, method, \"0\");\n    }\n    if (type == BigInteger.class) return BigInteger.ZERO;\n    if (type == BigDecimal.class) return BigDecimal.ZERO;\n    return null;\n  }\n  if (type == Boolean.class) return false;\n  if (type == Character.class) return (char) 0; // better return something else?\n  return null;\n}", "path": "spock/spock-core/src/main/java/org/spockframework/mock/EmptyOrDummyResponse.java", "commit_date": "2020-02-13 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Internal block metadata generated by the compiler for consumption by the runtime.\n *\n * @author Peter Niederwieser\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface BlockMetadata", "code": "{\n  String KIND = \"kind\";\n  String TEXTS = \"texts\";\n\n  BlockKind kind();\n  String[] texts(); // IDEA: rename to \"description(s)\"\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/model/BlockMetadata.java", "commit_date": "2009-04-02 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * @author Peter Niederwieser\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface DataProviderMetadata", "code": "{\n  String LINE = \"line\";\n  String DATA_VARIABLES = \"dataVariables\";\n  String PREVIOUS_DATA_TABLE_VARIABLES = \"previousDataTableVariables\";\n\n  int line();\n  String[] dataVariables();\n  String[] previousDataTableVariables() default { };\n}", "path": "spock/spock-core/src/main/java/org/spockframework/runtime/model/DataProviderMetadata.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/**\n * Sets a value for this variable. Wakes up all threads blocked in <tt>get()</tt>.\n *\n * @param value the value to be set for this variable\n */\n", "func_signal": "public void set(T value)", "code": "{\n  this.value = value;\n  valueReady.countDown();\n}", "path": "spock/spock-core/src/main/java/spock/util/concurrent/BlockingVariable.java", "commit_date": "2019-12-31 00:00:00", "repo_name": "spockframework/spock", "stars": 3476, "license": "apache-2.0", "language": "java", "size": 30052}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see lbms.plugins.mldht.kad.DHTBase#fillBucket(lbms.plugins.mldht.kad.KBucket)\n */\n", "func_signal": "public void fillBucket (Key id, KBucket bucket, Consumer<NodeLookup> configure)", "code": "{\n\tbucket.updateRefreshTimer();\n\tfindNode(id, false, true, serverManager.getRandomActiveServer(true), configure);\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * Copy constructor.\n * @param other KBucketEntry to copy\n * @return\n */\n", "func_signal": "public KBucketEntry (KBucketEntry other)", "code": "{\n\taddr = other.addr;\n\tnodeID = other.nodeID;\n\tlastSeen = other.lastSeen;\n\tfailedQueries = other.failedQueries;\n\ttimeCreated = other.timeCreated;\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/KBucketEntry.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * Initiates a Bootstrap.\n * \n * This function bootstraps with router.bittorrent.com if there are less\n * than 10 Peers in the routing table. If there are more then a lookup on\n * our own ID is initiated. If the either Task is finished than it will try\n * to fill the Buckets.\n */\n", "func_signal": "public synchronized void bootstrap ()", "code": "{\n\tif (!isRunning() || System.currentTimeMillis() - lastBootstrap < DHTConstants.BOOTSTRAP_MIN_INTERVAL) {\n\t\treturn;\n\t}\n\t\n\tif(!bootstrapping.compareAndSet(BootstrapState.NONE, BootstrapState.FILL))\n\t\treturn;\n\t\n\tif (useRouterBootstrapping && node.getNumEntriesInRoutingTable() < DHTConstants.USE_BT_ROUTER_IF_LESS_THAN_X_PEERS) {\n\t\trouterBootstrap();\n\t} else {\n\t\tfillHomeBuckets(Collections.emptyList());\n\t}\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @since 1.6\n */\n", "func_signal": "public static ConnectionResult failure(String message)", "code": "{\n    Objects.requireNonNull(message);\n    return new ConnectionResult(null, null, message);\n}", "path": "bt/bt-core/src/main/java/bt/net/ConnectionResult.java", "commit_date": "2017-11-26 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * Constructor, set the ip, port and key\n * @param addr socket address\n * @param id ID of node\n * @param timestamp the timestamp when this node last responded\n */\n", "func_signal": "public KBucketEntry (InetSocketAddress addr, Key id, long timestamp)", "code": "{\n\tObjects.requireNonNull(addr);\n\tObjects.requireNonNull(id);\n\tlastSeen = timestamp;\n\ttimeCreated = System.currentTimeMillis();\n\tthis.addr = addr;\n\tthis.nodeID = id;\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/KBucketEntry.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @return the scheduler\n */\n", "func_signal": "private static ScheduledExecutorService getDefaultScheduler ()", "code": "{\n\tScheduledExecutorService service = defaultScheduler;\n\tif(service == null) {\n\t\tinitDefaultScheduler();\n\t\tservice = defaultScheduler;\n\t}\n\t\t\n\treturn service;\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/*\n * Subrange creation tests\n */\n", "func_signal": "@Test\npublic void testByteRange_Subrange_OffsetOnly_Negative()", "code": "{\n    ByteRange range = new ByteRange(sequence(10));\n    assertExceptionWithMessage(it -> range.getSubrange(-1), \"Invalid offset: -1, expected 0..9\");\n}", "path": "bt/bt-tests/src/test/java/bt/data/range/ByteRange_ExceptionsTest.java", "commit_date": "2017-09-16 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @since 1.6\n */\n", "func_signal": "public static ConnectionResult failure(String message, Throwable error)", "code": "{\n    Objects.requireNonNull(message);\n    Objects.requireNonNull(error);\n    return new ConnectionResult(null, error, message);\n}", "path": "bt/bt-core/src/main/java/bt/net/ConnectionResult.java", "commit_date": "2017-11-26 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * Constructor, set the ip, port and key\n * @param addr socket address\n * @param id ID of node\n */\n", "func_signal": "public KBucketEntry (InetSocketAddress addr, Key id)", "code": "{\n\tObjects.requireNonNull(addr);\n\tObjects.requireNonNull(id);\n\tlastSeen = System.currentTimeMillis();\n\ttimeCreated = lastSeen;\n\tthis.addr = addr;\n\tthis.nodeID = id;\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/KBucketEntry.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/*\n * Modification tests\n */\n", "func_signal": "@Test\npublic void testByteRange_Modification_PutBytes_TooLarge()", "code": "{\n    ByteRange range = new ByteRange(sequence(10));\n    assertExceptionWithMessage(it -> {range.putBytes(new byte[11]);return null;},\n            \"Data does not fit in this range (expected max 10 bytes, actual: 11)\");\n}", "path": "bt/bt-tests/src/test/java/bt/data/range/ByteRange_ExceptionsTest.java", "commit_date": "2017-09-16 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * \n * @param rtt > 0 in ms. -1 if unknown\n */\n", "func_signal": "public void signalResponse(long rtt)", "code": "{\n\tlastSeen = System.currentTimeMillis();\n\tfailedQueries = 0;\n\tverified = true;\n\tif(rtt > 0)\n\t\tavgRTT.updateAverage(rtt);\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/KBucketEntry.java", "commit_date": "2018-10-02 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see lbms.plugins.mldht.kad.DHTBase#addDHTNode(java.lang.String, int)\n */\n", "func_signal": "public void addDHTNode (String host, int hport)", "code": "{\n\tif (!isRunning()) {\n\t\treturn;\n\t}\n\tInetSocketAddress addr = new InetSocketAddress(host, hport);\n\n\tif (!addr.isUnresolved() && (config.noRouterBootstrap() || !AddressUtils.isBogon(addr))) {\n\t\tif(!type.PREFERRED_ADDRESS_TYPE.isInstance(addr.getAddress()) || node.getNumEntriesInRoutingTable() > DHTConstants.BOOTSTRAP_IF_LESS_THAN_X_PEERS)\n\t\t\treturn;\n\t\tRPCServer srv = serverManager.getRandomActiveServer(true);\n\t\tif(srv != null)\n\t\t\tsrv.ping(addr);\n\t}\n\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @return Optional failure cause, if {@link #isSuccess()} is false\n * @throws IllegalStateException if {@link #isSuccess()} is true\n */\n", "func_signal": "public Optional<Throwable> getError()", "code": "{\n    if (isSuccess()) {\n        throw new IllegalStateException(\"Attempt to retrieve error from successful result\");\n    }\n    return Optional.ofNullable(error);\n}", "path": "bt/bt-core/src/main/java/bt/net/ConnectionResult.java", "commit_date": "2017-11-26 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see lbms.plugins.mldht.kad.DHTBase#start(java.lang.String, int)\n */\n", "func_signal": "public void start (DHTConfiguration config)\n\t\tthrows SocketException", "code": "{\n\tif (running) {\n\t\treturn;\n\t}\n\t\n\tif(this.scheduler == null)\n\t\tthis.scheduler = getDefaultScheduler();\n\tthis.config = config;\n\tuseRouterBootstrapping = !config.noRouterBootstrap();\n\t\n\tif(!Files.isDirectory(config.getStoragePath()))\n\t\tDHT.log(\"Warning: storage path \" + config.getStoragePath() +\" is not a directory. DHT will not be able to persist state\" , LogLevel.Info);\n\t\n\ttable_file = config.getStoragePath().resolve(type.shortName+\"-table.cache\");\n\n\tsetStatus(DHTStatus.Stopped, DHTStatus.Initializing);\n\tstats.resetStartedTimestamp();\n\n\tlogInfo(\"Starting DHT on port \" + getPort());\n\n\t// we need the IPs to filter bootstrap nodes out from the routing table. but don't block startup on DNS resolution\n\tscheduler.execute(this::resolveBootstrapAddresses);\n\t\n\tconnectionManager = new NIOConnectionManager(\"mlDHT \"+type.shortName+\" NIO Selector\");\n\t\n\tpopulate();\n\t\n\tnode.initKey(config);\n\tnode.loadTable(table_file);\n\t\n\n\t// these checks are fairly expensive on large servers (network interface enumeration)\n\t// schedule them separately\n\tscheduledActions.add(scheduler.scheduleWithFixedDelay(serverManager::doBindChecks, 10, 10, TimeUnit.SECONDS));\n\t\n\tscheduledActions.add(scheduler.scheduleWithFixedDelay(() -> {\n\t\t// maintenance that should run all the time, before the first queries\n\t\ttman.dequeue();\n\n\t\tif (running)\n\t\t\tonStatsUpdate();\n\t}, 5000, DHTConstants.DHT_UPDATE_INTERVAL, TimeUnit.MILLISECONDS));\n\n\t// initialize as many RPC servers as we need\n\tserverManager.refresh(System.currentTimeMillis());\n\t\n\tif(serverManager.getServerCount() == 0) {\n\t\tlogError(\"No network interfaces eligible for DHT sockets found during startup.\"\n\t\t\t\t+ \"\\nAddress family: \" + this.getType()\n\t\t\t\t+ \"\\nmultihoming [requires public IP addresses if enabled]: \" + config.allowMultiHoming()\n\t\t\t\t+ \"\\nPublic IP addresses: \" + AddressUtils.getAvailableGloballyRoutableAddrs(getType().PREFERRED_ADDRESS_TYPE)\n\t\t\t\t+ \"\\nDefault route: \" + AddressUtils.getDefaultRoute(getType().PREFERRED_ADDRESS_TYPE));\n\t}\n\t\n\tstarted();\n\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @since 1.6\n */\n", "func_signal": "public static ConnectionResult success(PeerConnection connection)", "code": "{\n    Objects.requireNonNull(connection);\n    return new ConnectionResult(connection, null, null);\n}", "path": "bt/bt-core/src/main/java/bt/net/ConnectionResult.java", "commit_date": "2017-11-26 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @param logLevel the logLevel to set\n */\n", "func_signal": "public static void setLogLevel (LogLevel logLevel)", "code": "{\n\tDHT.logLevel = logLevel;\n\tlogger.log(\"Change LogLevel to: \" + logLevel, LogLevel.Info);\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see lbms.plugins.mldht.kad.DHTBase#update()\n */\n", "func_signal": "public void update ()", "code": "{\n\t\n\tlong now = System.currentTimeMillis();\n\t\n\tserverManager.refresh(now);\n\t\n\tif (!isRunning()) {\n\t\treturn;\n\t}\n\n\tnode.doBucketChecks(now);\n\n\tif (node.getNumEntriesInRoutingTable() < DHTConstants.BOOTSTRAP_IF_LESS_THAN_X_PEERS || now - lastBootstrap > DHTConstants.SELF_LOOKUP_INTERVAL) {\n\t\t//regualary search for our id to update routing table\n\t\tbootstrap();\n\t} else {\n\t\tsetStatus(DHTStatus.Initializing, DHTStatus.Running);\n\t}\n\n\t\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see lbms.plugins.mldht.kad.DHTBase#stop()\n */\n", "func_signal": "public void stop ()", "code": "{\n\tif (!running) {\n\t\treturn;\n\t}\n\n\tlogInfo(\"Initated DHT shutdown\");\n\tStream.concat(Arrays.stream(tman.getActiveTasks()), Arrays.stream(tman.getQueuedTasks())).forEach(Task::kill);\n\t\n\tfor(ScheduledFuture<?> future : scheduledActions) {\n\t\tfuture.cancel(false);\n\t\t// none of the scheduled tasks should experience exceptions, log them if they did\n\t\ttry {\n\t\t\tfuture.get();\n\t\t} catch (ExecutionException e) {\n\t\t\tDHT.log(e.getCause(), LogLevel.Fatal);\n\t\t} catch (InterruptedException e) {\n\t\t\tDHT.log(e, LogLevel.Fatal);\n\t\t} catch (CancellationException e) {\n\t\t\t// do nothing, we just cancelled it\n\t\t}\n\t}\n\t\n\t\n\t\t\n\t// scheduler.getQueue().removeAll(scheduledActions);\n\tscheduledActions.clear();\n\n\tlogInfo(\"stopping servers\");\n\trunning = false;\n\tserverManager.destroy();\n\ttry {\n\t\tlogInfo(\"persisting routing table on shutdown\");\n\t\tnode.saveTable(table_file);\n\t\tlogInfo(\"table persisted\");\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\t\n\tstopped();\n\ttman = null;\n\tdb = null;\n\tnode = null;\n\tcache = null;\n\tserverManager = null;\n\tsetStatus(DHTStatus.Initializing, DHTStatus.Stopped);\n\tsetStatus(DHTStatus.Running, DHTStatus.Stopped);\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/DHT.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @param id\n * @param info_hash\n */\n", "func_signal": "public AbstractLookupRequest (Key target, Method m)", "code": "{\n\tsuper(null, m, Type.REQ_MSG);\n\tthis.target = target;\n}", "path": "bt/bt-dht/the8472/mldht/src/lbms/plugins/mldht/kad/messages/AbstractLookupRequest.java", "commit_date": "2017-07-29 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * @return Connection, if {@link #isSuccess()} is true\n * @throws IllegalStateException if {@link #isSuccess()} is false\n */\n", "func_signal": "public PeerConnection getConnection()", "code": "{\n    if (!isSuccess()) {\n        throw new IllegalStateException(\"Attempt to retrieve connection from unsuccessful result\");\n    }\n    return connection;\n}", "path": "bt/bt-core/src/main/java/bt/net/ConnectionResult.java", "commit_date": "2017-11-26 00:00:00", "repo_name": "atomashpolskiy/bt", "stars": 2361, "license": "apache-2.0", "language": "java", "size": 89375}
{"docstring": "/**\n * Read last record from a ledger.\n *\n * @param streamName\n *          fully qualified stream name (used for logging)\n * @param l\n *          ledger descriptor.\n * @param fence\n *          whether to fence the ledger.\n * @param includeControl\n *          whether to include control record.\n * @param includeEndOfStream\n *          whether to include end of stream.\n * @param scanStartBatchSize\n *          first num entries used for read last record scan\n * @param scanMaxBatchSize\n *          max num entries used for read last record scan\n * @param numRecordsScanned\n *          num of records scanned to get last record\n * @param executorService\n *          executor service used for processing entries\n * @param handleCache\n *          ledger handle cache\n * @return a future with last record.\n */\n", "func_signal": "public static Future<LogRecordWithDLSN> asyncReadLastRecord(\n        final String streamName,\n        final LogSegmentMetadata l,\n        final boolean fence,\n        final boolean includeControl,\n        final boolean includeEndOfStream,\n        final int scanStartBatchSize,\n        final int scanMaxBatchSize,\n        final AtomicInteger numRecordsScanned,\n        final ExecutorService executorService,\n        final LedgerHandleCache handleCache)", "code": "{\n    final LogRecordSelector selector = new LastRecordSelector();\n    return asyncReadRecord(streamName, l, fence, includeControl, includeEndOfStream, scanStartBatchSize,\n                           scanMaxBatchSize, numRecordsScanned, executorService, handleCache,\n                           selector, true /* backward */, 0L);\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/ReadUtils.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Read record from a given range of ledger entries.\n *\n * @param streamName\n *          fully qualified stream name (used for logging)\n * @param ledgerDescriptor\n *          ledger descriptor.\n * @param handleCache\n *          ledger handle cache.\n * @param executorService\n *          executor service used for processing entries\n * @param context\n *          scan context\n * @return a future with the log record.\n */\n", "func_signal": "private static Future<LogRecordWithDLSN> asyncReadRecordFromEntries(\n        final String streamName,\n        final LedgerDescriptor ledgerDescriptor,\n        LedgerHandleCache handleCache,\n        final LogSegmentMetadata metadata,\n        final ExecutorService executorService,\n        final ScanContext context,\n        final LogRecordSelector selector)", "code": "{\n    final Promise<LogRecordWithDLSN> promise = new Promise<LogRecordWithDLSN>();\n    final long startEntryId = context.curStartEntryId.get();\n    final long endEntryId = context.curEndEntryId.get();\n    if (LOG.isDebugEnabled()) {\n        LOG.debug(\"{} reading entries [{} - {}] from {}.\",\n                new Object[] { streamName, startEntryId, endEntryId, ledgerDescriptor });\n    }\n    FutureEventListener<Enumeration<LedgerEntry>> readEntriesListener =\n        new FutureEventListener<Enumeration<LedgerEntry>>() {\n            @Override\n            public void onSuccess(final Enumeration<LedgerEntry> entries) {\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"{} finished reading entries [{} - {}] from {}\",\n                            new Object[]{ streamName, startEntryId, endEntryId, ledgerDescriptor });\n                }\n                LogRecordWithDLSN record = null;\n                while (entries.hasMoreElements()) {\n                    LedgerEntry entry = entries.nextElement();\n                    try {\n                        visitEntryRecords(\n                                streamName, metadata, ledgerDescriptor.getLogSegmentSequenceNo(), entry, context, selector);\n                    } catch (IOException ioe) {\n                        // exception is only thrown due to bad ledger entry, so it might be corrupted\n                        // we shouldn't do anything beyond this point. throw the exception to application\n                        promise.setException(ioe);\n                        return;\n                    }\n                }\n\n                record = selector.result();\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"{} got record from entries [{} - {}] of {} : {}\",\n                            new Object[]{streamName, startEntryId, endEntryId,\n                                    ledgerDescriptor, record});\n                }\n                promise.setValue(record);\n            }\n\n            @Override\n            public void onFailure(final Throwable cause) {\n                String errMsg = \"Error reading entries [\" + startEntryId + \"-\" + endEntryId\n                            + \"] for reading record of \" + streamName;\n                promise.setException(new IOException(errMsg,\n                        BKException.create(FutureUtils.bkResultCode(cause))));\n            }\n        };\n    handleCache.asyncReadEntries(ledgerDescriptor, startEntryId, endEntryId)\n            .addEventListener(FutureEventListenerRunnable.of(readEntriesListener, executorService));\n    return promise;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/ReadUtils.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Set whether this record set is enveloped or not.\n *\n * @param enabled\n *          flag indicates whether this record set is enveloped or not.\n * @return builder\n */\n", "func_signal": "public Builder setEnvelopeEntry(boolean enabled)", "code": "{\n    this.envelopeEntry = enabled;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Client Id used for accessing the namespace\n *\n * @param clientId\n *          client id used for accessing the namespace\n * @return namespace builder.\n */\n", "func_signal": "public DistributedLogNamespaceBuilder clientId(String clientId)", "code": "{\n    this._clientId = clientId;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/namespace/DistributedLogNamespaceBuilder.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Set the record set starts from <code>dlsn</code>.\n *\n * @param dlsn\n *          dlsn to skip to\n * @return builder\n */\n", "func_signal": "public Builder skipTo(@Nullable DLSN dlsn)", "code": "{\n    this.dlsnToSkipTo = Optional.fromNullable(dlsn);\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Namespace Location.\n *\n * @param uri\n *          namespace location uri.\n * @see DistributedLogNamespace\n * @return namespace builder.\n */\n", "func_signal": "public DistributedLogNamespaceBuilder uri(URI uri)", "code": "{\n    this._uri = uri;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/namespace/DistributedLogNamespaceBuilder.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Set the input stream of the serialized bytes data of this record set.\n *\n * @param in\n *          input stream\n * @return builder\n */\n", "func_signal": "public Builder setInputStream(InputStream in)", "code": "{\n    this.in = in;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Region Id used for encoding logs in the namespace. The region id\n * is useful when the namespace is globally spanning over regions.\n *\n * @param regionId\n *          region id.\n * @return namespace builder.\n */\n", "func_signal": "public DistributedLogNamespaceBuilder regionId(int regionId)", "code": "{\n    this._regionId = regionId;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/namespace/DistributedLogNamespaceBuilder.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Read first record from a ledger with a DLSN larger than that given.\n *\n * @param streamName\n *          fully qualified stream name (used for logging)\n * @param l\n *          ledger descriptor.\n * @param scanStartBatchSize\n *          first num entries used for read last record scan\n * @param scanMaxBatchSize\n *          max num entries used for read last record scan\n * @param numRecordsScanned\n *          num of records scanned to get last record\n * @param executorService\n *          executor service used for processing entries\n * @param dlsn\n *          threshold dlsn\n * @return a future with last record.\n */\n", "func_signal": "public static Future<LogRecordWithDLSN> asyncReadFirstUserRecord(\n        final String streamName,\n        final LogSegmentMetadata l,\n        final int scanStartBatchSize,\n        final int scanMaxBatchSize,\n        final AtomicInteger numRecordsScanned,\n        final ExecutorService executorService,\n        final LedgerHandleCache handleCache,\n        final DLSN dlsn)", "code": "{\n    long startEntryId = 0L;\n    if (l.getLogSegmentSequenceNumber() == dlsn.getLogSegmentSequenceNo()) {\n        startEntryId = dlsn.getEntryId();\n    }\n    final LogRecordSelector selector = new FirstDLSNNotLessThanSelector(dlsn);\n    return asyncReadRecord(streamName, l, false, false, false, scanStartBatchSize,\n                           scanMaxBatchSize, numRecordsScanned, executorService, handleCache,\n                           selector, false /* backward */, startEntryId);\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/ReadUtils.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Find the log record whose transaction id is not less than provided <code>transactionId</code> from\n * entries between <code>startEntryId</code> and <code>endEntryId</code>.\n *\n * @param logName\n *          name of the log\n * @param segment\n *          log segment\n * @param transactionId\n *          provided transaction id to search\n * @param executorService\n *          executor service\n * @param handleCache\n *          handle cache\n * @param entriesToSearch\n *          list of entries to search\n * @param nWays\n *          how many entries to search in parallel\n * @param prevFoundRecord\n *          the log record found in previous search\n * @param promise\n *          promise to satisfy the result\n */\n", "func_signal": "private static void getLogRecordNotLessThanTxIdFromEntries(\n        final String logName,\n        final LedgerDescriptor ld,\n        final LogSegmentMetadata segment,\n        final long transactionId,\n        final ExecutorService executorService,\n        final LedgerHandleCache handleCache,\n        final List<Long> entriesToSearch,\n        final int nWays,\n        final Optional<LogRecordWithDLSN> prevFoundRecord,\n        final Promise<Optional<LogRecordWithDLSN>> promise)", "code": "{\n    final List<Future<LogRecordWithDLSN>> searchResults =\n            Lists.newArrayListWithExpectedSize(entriesToSearch.size());\n    for (Long entryId : entriesToSearch) {\n        LogRecordSelector selector = new FirstTxIdNotLessThanSelector(transactionId);\n        Future<LogRecordWithDLSN> searchResult = asyncReadRecordFromEntries(\n                logName,\n                ld,\n                handleCache,\n                segment,\n                executorService,\n                new SingleEntryScanContext(entryId),\n                selector);\n        searchResults.add(searchResult);\n    }\n    FutureEventListener<List<LogRecordWithDLSN>> processSearchResultsListener =\n            new FutureEventListener<List<LogRecordWithDLSN>>() {\n                @Override\n                public void onSuccess(List<LogRecordWithDLSN> resultList) {\n                    processSearchResults(\n                            logName,\n                            ld,\n                            segment,\n                            transactionId,\n                            executorService,\n                            handleCache,\n                            resultList,\n                            nWays,\n                            prevFoundRecord,\n                            promise);\n                }\n\n                @Override\n                public void onFailure(Throwable cause) {\n                    promise.setException(cause);\n                }\n            };\n    Future.collect(searchResults).addEventListener(\n            FutureEventListenerRunnable.of(processSearchResultsListener, executorService));\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/ReadUtils.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Process each record using LogRecordSelector.\n *\n * @param streamName\n *          fully qualified stream name (used for logging)\n * @param logSegmentSeqNo\n *          ledger sequence number\n * @param entry\n *          ledger entry\n * @param context\n *          scan context\n * @return log record with dlsn inside the ledger entry\n * @throws IOException\n */\n", "func_signal": "private static void visitEntryRecords(\n        String streamName,\n        LogSegmentMetadata metadata,\n        long logSegmentSeqNo,\n        LedgerEntry entry,\n        ScanContext context,\n        LogRecordSelector selector) throws IOException", "code": "{\n    Entry.Reader reader = Entry.newBuilder()\n            .setLogSegmentInfo(logSegmentSeqNo, metadata.getStartSequenceId())\n            .setEntryId(entry.getEntryId())\n            .setEnvelopeEntry(metadata.getEnvelopeEntries())\n            .setInputStream(entry.getEntryInputStream())\n            .buildReader();\n    LogRecordWithDLSN nextRecord = reader.nextRecord();\n    while (nextRecord != null) {\n        LogRecordWithDLSN record = nextRecord;\n        nextRecord = reader.nextRecord();\n        context.numRecordsScanned.incrementAndGet();\n        if (!context.includeControl && record.isControl()) {\n            continue;\n        }\n        if (!context.includeEndOfStream && record.isEndOfStream()) {\n            continue;\n        }\n        selector.process(record);\n    }\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/ReadUtils.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Scan entries for the given record.\n *\n * @param streamName\n *          fully qualified stream name (used for logging)\n * @param ledgerDescriptor\n *          ledger descriptor.\n * @param handleCache\n *          ledger handle cache.\n * @param executorService\n *          executor service used for processing entries\n * @param promise\n *          promise to return desired record.\n * @param context\n *          scan context\n */\n", "func_signal": "private static void asyncReadRecordFromEntries(\n        final String streamName,\n        final LedgerDescriptor ledgerDescriptor,\n        final LedgerHandleCache handleCache,\n        final LogSegmentMetadata metadata,\n        final ExecutorService executorService,\n        final Promise<LogRecordWithDLSN> promise,\n        final ScanContext context,\n        final LogRecordSelector selector)", "code": "{\n    FutureEventListener<LogRecordWithDLSN> readEntriesListener =\n        new FutureEventListener<LogRecordWithDLSN>() {\n            @Override\n            public void onSuccess(LogRecordWithDLSN value) {\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"{} read record from [{} - {}] of {} : {}\",\n                            new Object[]{streamName, context.curStartEntryId.get(), context.curEndEntryId.get(),\n                                    ledgerDescriptor, value});\n                }\n                if (null != value) {\n                    promise.setValue(value);\n                    return;\n                }\n                if (!context.moveToNextRange()) {\n                    // no entries to read again\n                    promise.setValue(null);\n                    return;\n                }\n                // scan next range\n                asyncReadRecordFromEntries(streamName,\n                        ledgerDescriptor,\n                        handleCache,\n                        metadata,\n                        executorService,\n                        promise,\n                        context,\n                        selector);\n            }\n\n            @Override\n            public void onFailure(Throwable cause) {\n                promise.setException(cause);\n            }\n        };\n    asyncReadRecordFromEntries(streamName, ledgerDescriptor, handleCache, metadata, executorService, context, selector)\n            .addEventListener(FutureEventListenerRunnable.of(readEntriesListener, executorService));\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/ReadUtils.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * DistributedLog Configuration used for the namespace.\n *\n * @param conf\n *          distributedlog configuration\n * @return namespace builder.\n */\n", "func_signal": "public DistributedLogNamespaceBuilder conf(DistributedLogConfiguration conf)", "code": "{\n    this._conf = conf;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/namespace/DistributedLogNamespaceBuilder.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Stats Logger used for stats collection\n *\n * @param statsLogger\n *          stats logger\n * @return namespace builder.\n */\n", "func_signal": "public DistributedLogNamespaceBuilder statsLogger(StatsLogger statsLogger)", "code": "{\n    this._statsLogger = statsLogger;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/namespace/DistributedLogNamespaceBuilder.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Create reader to iterate over this record set.\n *\n * @return reader to iterate over this record set.\n * @throws IOException if the record set is invalid record set.\n */\n", "func_signal": "public Reader reader() throws IOException", "code": "{\n    InputStream in = new ByteArrayInputStream(data, offset, length);\n    Reader reader = new EnvelopedEntryReader(\n            logSegmentSequenceNumber,\n            entryId,\n            startSequenceId,\n            in,\n            envelopedEntry,\n            deserializeRecordSet,\n            NullStatsLogger.INSTANCE);\n    if (txidToSkipTo.isPresent()) {\n        reader.skipTo(txidToSkipTo.get());\n    }\n    if (dlsnToSkipTo.isPresent()) {\n        reader.skipTo(dlsnToSkipTo.get());\n    }\n    return reader;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Set the entry id of this log record set.\n *\n * @param entryId\n *          entry id assigned for this log record set.\n * @return builder\n */\n", "func_signal": "public Builder setEntryId(long entryId)", "code": "{\n    this.entryId = entryId;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Set the serialized bytes data of this record set.\n *\n * @param data\n *          serialized bytes data of this record set.\n * @param offset\n *          offset of the bytes data\n * @param length\n *          length of the bytes data\n * @return builder\n */\n", "func_signal": "public Builder setData(byte[] data, int offset, int length)", "code": "{\n    this.data = data;\n    this.offset = offset;\n    this.length = length;\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Create a new log record set.\n *\n * @param logName\n *          name of the log\n * @param initialBufferSize\n *          initial buffer size\n * @param envelopeBeforeTransmit\n *          if envelope the buffer before transmit\n * @param codec\n *          compression codec\n * @param statsLogger\n *          stats logger to receive stats\n * @return writer to build a log record set.\n */\n", "func_signal": "public static Writer newEntry(\n        String logName,\n        int initialBufferSize,\n        boolean envelopeBeforeTransmit,\n        CompressionCodec.Type codec,\n        StatsLogger statsLogger)", "code": "{\n    return new EnvelopedEntryWriter(\n            logName,\n            initialBufferSize,\n            envelopeBeforeTransmit,\n            codec,\n            statsLogger);\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Build the namespace.\n *\n * @return the namespace instance.\n * @throws IllegalArgumentException when there is illegal argument provided in the builder\n * @throws NullPointerException when there is null argument provided in the builder\n * @throws IOException when fail to build the backend\n */\n", "func_signal": "public DistributedLogNamespace build()\n        throws IllegalArgumentException, NullPointerException, IOException", "code": "{\n    // Check arguments\n    Preconditions.checkNotNull(_conf, \"No DistributedLog Configuration.\");\n    Preconditions.checkNotNull(_uri, \"No DistributedLog URI\");\n\n    // Validate the uri and load the backend according to scheme\n    String scheme = _uri.getScheme();\n    Preconditions.checkNotNull(scheme, \"Invalid DistributedLog URI : \" + _uri);\n    String[] schemeParts = StringUtils.split(scheme, '-');\n    Preconditions.checkArgument(schemeParts.length > 0,\n            \"Invalid distributedlog scheme found : \" + _uri);\n    Preconditions.checkArgument(Objects.equal(DistributedLogConstants.SCHEME_PREFIX, schemeParts[0].toLowerCase()),\n            \"Unknown distributedlog scheme found : \" + _uri);\n\n    // both distributedlog: & distributedlog-bk: use bookkeeper as the backend\n    // TODO: we could do reflection to load backend in future.\n    //       if we are going to support other backends : e.g. 'distributedlog-mem:'.\n    if (schemeParts.length > 1) {\n        String backendProvider = schemeParts[1];\n        Preconditions.checkArgument(Objects.equal(DistributedLogConstants.BACKEND_BK, backendProvider.toLowerCase()),\n                \"Backend '\" + backendProvider + \"' is not supported yet.\");\n    }\n\n    // Built the feature provider\n    FeatureProvider featureProvider;\n    if (null == _featureProvider) {\n        featureProvider = new SettableFeatureProvider(\"\", 0);\n        logger.info(\"No feature provider is set. All features are disabled now.\");\n    } else {\n        featureProvider = _featureProvider;\n    }\n\n    URI bkUri;\n    try {\n        bkUri = new URI(\n                schemeParts[0],     // remove backend info from bookkeeper backend\n                _uri.getAuthority(),\n                _uri.getPath(),\n                _uri.getQuery(),\n                _uri.getFragment());\n    } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(\"Invalid distributedlog uri found : \" + _uri, e);\n    }\n\n    return BKDistributedLogNamespace.newBuilder()\n            .conf(_conf)\n            .uri(bkUri)\n            .statsLogger(_statsLogger)\n            .featureProvider(featureProvider)\n            .clientId(_clientId)\n            .regionId(_regionId)\n            .build();\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/namespace/DistributedLogNamespaceBuilder.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/**\n * Reset the builder.\n *\n * @return builder\n */\n", "func_signal": "public Builder reset()", "code": "{\n    logSegmentSequenceNumber = -1;\n    entryId = -1;\n    startSequenceId = Long.MIN_VALUE;\n    envelopeEntry = true;\n    // input stream\n    in = null;\n    // or bytes array\n    data = null;\n    offset = -1;\n    length = -1;\n    txidToSkipTo = Optional.absent();\n    dlsnToSkipTo = Optional.absent();\n    return this;\n}", "path": "distributedlog/distributedlog-core/src/main/java/com/twitter/distributedlog/Entry.java", "commit_date": "2016-05-09 00:00:00", "repo_name": "twitter-archive/distributedlog", "stars": 2230, "license": "apache-2.0", "language": "java", "size": 7128}
{"docstring": "/** \u8bbe\u7f6e\u53f3\u8fb9\u6309\u94ae\u6587\u5b57 */\n", "func_signal": "public GlobalDialog setRightBtnText(String str)", "code": "{\n    right.setText(str);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u8bbe\u7f6e\u5185\u5bb9\u6587\u5b57 */\n", "func_signal": "public GlobalDialog setContent(String str)", "code": "{\n    content.setText(str);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u9690\u85cf\u5185\u5bb9\u56fe\u6807 */\n", "func_signal": "public GlobalDialog hideIcon()", "code": "{\n    hideViews(icon);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/**\n * \u751f\u6210ImageView\u5bb9\u5668\u7684\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4f7f\u7528NineGridImageViewWrapper\u7c7b\uff0c\u5373\u70b9\u51fb\u56fe\u7247\u540e\uff0c\u56fe\u7247\u4f1a\u6709\u8499\u677f\u6548\u679c\n * \u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u56fe\u7247\u5c55\u793a\u6548\u679c\uff0c\u91cd\u5199\u6b64\u65b9\u6cd5\u5373\u53ef\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return \u751f\u6210\u7684 ImageView\n */\n", "func_signal": "protected ImageView generateImageView(Context context)", "code": "{\n    NineGridViewWrapper imageView = new NineGridViewWrapper(context);\n    imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n    imageView.setImageResource(R.drawable.ic_default_color);\n    return imageView;\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/NineGridViewAdapter.java", "commit_date": "2016-10-06 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u83b7\u5f97 ImageView \u4fdd\u8bc1\u4e86 ImageView \u7684\u91cd\u7528 */\n", "func_signal": "private ImageView getImageView(final int position)", "code": "{\n    ImageView imageView;\n    if (position < imageViews.size()) {\n        imageView = imageViews.get(position);\n    } else {\n        imageView = mAdapter.generateImageView(getContext());\n        imageView.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                mAdapter.onImageItemClick(getContext(), NineGridView.this, position, mAdapter.getImageInfo());\n            }\n        });\n        imageViews.add(imageView);\n    }\n    return imageView;\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/NineGridView.java", "commit_date": "2017-04-21 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u8fdb\u573a\u52a8\u753b\u8fc7\u7a0b\u76d1\u542c */\n", "func_signal": "private void addIntoListener(ValueAnimator valueAnimator)", "code": "{\n    valueAnimator.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animation) {\n            rootView.setBackgroundColor(0x0);\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n        }\n    });\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/preview/ImagePreviewActivity.java", "commit_date": "2016-06-16 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "//\u5f97\u5230ImageOptions\u5bf9\u8c61\n", "func_signal": "@Override\n    public void onCreate()", "code": "{\n        super.onCreate();\n        ImageLoaderConfiguration config = ImageLoaderConfiguration.createDefault(this);\n\n        OkHttpUtils.init(this);                     //OkHttpUtils\u521d\u59cb\u5316\n        ImageLoader.getInstance().init(config);     //UniversalImageLoader\u521d\u59cb\u5316\n        Fresco.initialize(this);                    //Fresco\u521d\u59cb\u5316\n        x.Ext.init(this);                           //xUtils3\u521d\u59cb\u5316\n    }", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/GApp.java", "commit_date": "2016-10-06 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u8bbe\u7f6e\u53f3\u8fb9\u6309\u94ae\u76d1\u542c */\n", "func_signal": "public GlobalDialog setRightOnclick(android.view.View.OnClickListener listener)", "code": "{\n    right.setOnClickListener(listener);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u663e\u793a\u53f3\u8fb9\u6309\u94ae */\n", "func_signal": "public GlobalDialog showRight()", "code": "{\n    showViews(right);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** Integer \u4f30\u503c\u5668 */\n", "func_signal": "public Integer evaluateInt(float fraction, Integer startValue, Integer endValue)", "code": "{\n    int startInt = startValue;\n    return (int) (startInt + fraction * (endValue - startInt));\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/preview/ImagePreviewActivity.java", "commit_date": "2016-06-16 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u5c55\u793a\u8fc7\u5ea6\u56fe\u7247 */\n", "func_signal": "private void showExcessPic(ImageInfo imageInfo, PhotoView imageView)", "code": "{\n    //\u5148\u83b7\u53d6\u5927\u56fe\u7684\u7f13\u5b58\u56fe\u7247\n    Bitmap cacheImage = NineGridView.getImageLoader().getCacheImage(imageInfo.bigImageUrl);\n    //\u5982\u679c\u5927\u56fe\u7684\u7f13\u5b58\u4e0d\u5b58\u5728,\u5728\u83b7\u53d6\u5c0f\u56fe\u7684\u7f13\u5b58\n    if (cacheImage == null) cacheImage = NineGridView.getImageLoader().getCacheImage(imageInfo.thumbnailUrl);\n    //\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u7f13\u5b58,\u4f7f\u7528\u9ed8\u8ba4\u56fe\u7247,\u5426\u8005\u4f7f\u7528\u7f13\u5b58\n    if (cacheImage == null) {\n        imageView.setImageResource(R.drawable.ic_default_color);\n    } else {\n        imageView.setImageBitmap(cacheImage);\n    }\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/preview/ImagePreviewAdapter.java", "commit_date": "2016-10-06 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u7ed8\u5236\u524d\u5f00\u59cb\u52a8\u753b */\n", "func_signal": "@Override\npublic boolean onPreDraw()", "code": "{\n    rootView.getViewTreeObserver().removeOnPreDrawListener(this);\n    final View view = imagePreviewAdapter.getPrimaryItem();\n    final ImageView imageView = imagePreviewAdapter.getPrimaryImageView();\n    computeImageWidthAndHeight(imageView);\n\n    final ImageInfo imageData = imageInfo.get(currentItem);\n    final float vx = imageData.imageViewWidth * 1.0f / imageWidth;\n    final float vy = imageData.imageViewHeight * 1.0f / imageHeight;\n    ValueAnimator valueAnimator = ValueAnimator.ofFloat(0, 1.0f);\n    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            long duration = animation.getDuration();\n            long playTime = animation.getCurrentPlayTime();\n            float fraction = duration > 0 ? (float) playTime / duration : 1f;\n            if (fraction > 1) fraction = 1;\n            view.setTranslationX(evaluateInt(fraction, imageData.imageViewX + imageData.imageViewWidth / 2 - imageView.getWidth() / 2, 0));\n            view.setTranslationY(evaluateInt(fraction, imageData.imageViewY + imageData.imageViewHeight / 2 - imageView.getHeight() / 2, 0));\n            view.setScaleX(evaluateFloat(fraction, vx, 1));\n            view.setScaleY(evaluateFloat(fraction, vy, 1));\n            view.setAlpha(fraction);\n            rootView.setBackgroundColor(evaluateArgb(fraction, Color.TRANSPARENT, Color.BLACK));\n        }\n    });\n    addIntoListener(valueAnimator);\n    valueAnimator.setDuration(ANIMATE_DURATION);\n    valueAnimator.start();\n    return true;\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/preview/ImagePreviewActivity.java", "commit_date": "2016-06-16 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** activity\u7684\u9000\u573a\u52a8\u753b */\n", "func_signal": "public void finishActivityAnim()", "code": "{\n    final View view = imagePreviewAdapter.getPrimaryItem();\n    final ImageView imageView = imagePreviewAdapter.getPrimaryImageView();\n    computeImageWidthAndHeight(imageView);\n\n    final ImageInfo imageData = imageInfo.get(currentItem);\n    final float vx = imageData.imageViewWidth * 1.0f / imageWidth;\n    final float vy = imageData.imageViewHeight * 1.0f / imageHeight;\n    final ValueAnimator valueAnimator = ValueAnimator.ofFloat(0, 1.0f);\n    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            long duration = animation.getDuration();\n            long playTime = animation.getCurrentPlayTime();\n            float fraction = duration > 0 ? (float) playTime / duration : 1f;\n            if (fraction > 1) fraction = 1;\n            view.setTranslationX(evaluateInt(fraction, 0, imageData.imageViewX + imageData.imageViewWidth / 2 - imageView.getWidth() / 2));\n            view.setTranslationY(evaluateInt(fraction, 0, imageData.imageViewY + imageData.imageViewHeight / 2 - imageView.getHeight() / 2));\n            view.setScaleX(evaluateFloat(fraction, 1, vx));\n            view.setScaleY(evaluateFloat(fraction, 1, vy));\n            view.setAlpha(1 - fraction);\n            rootView.setBackgroundColor(evaluateArgb(fraction, Color.BLACK, Color.TRANSPARENT));\n        }\n    });\n    addOutListener(valueAnimator);\n    valueAnimator.setDuration(ANIMATE_DURATION);\n    valueAnimator.start();\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/preview/ImagePreviewActivity.java", "commit_date": "2016-06-16 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u663e\u793a\u5de6\u8fb9\u6309\u94ae */\n", "func_signal": "public GlobalDialog showLeft()", "code": "{\n    showViews(left);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u8bbe\u7f6e\u5de6\u8fb9\u6309\u94ae\u76d1\u542c */\n", "func_signal": "public GlobalDialog setLeftOnclick(android.view.View.OnClickListener listener)", "code": "{\n    left.setOnClickListener(listener);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/**\n * \u83b7\u5f97\u72b6\u6001\u680f\u7684\u9ad8\u5ea6\n */\n", "func_signal": "public int getStatusHeight(Context context)", "code": "{\n    int statusHeight = -1;\n    try {\n        Class<?> clazz = Class.forName(\"com.android.internal.R$dimen\");\n        Object object = clazz.newInstance();\n        int height = Integer.parseInt(clazz.getField(\"status_bar_height\").get(object).toString());\n        statusHeight = context.getResources().getDimensionPixelSize(height);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return statusHeight;\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/preview/NineGridViewClickAdapter.java", "commit_date": "2016-06-16 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** Float \u4f30\u503c\u5668 */\n", "func_signal": "public Float evaluateFloat(float fraction, Number startValue, Number endValue)", "code": "{\n    float startFloat = startValue.floatValue();\n    return startFloat + fraction * (endValue.floatValue() - startFloat);\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/preview/ImagePreviewActivity.java", "commit_date": "2016-06-16 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u8bbe\u7f6e\u4e2d\u95f4\u6309\u94ae\u76d1\u542c */\n", "func_signal": "public GlobalDialog setMiddleOnclick(android.view.View.OnClickListener listener)", "code": "{\n    middle.setOnClickListener(listener);\n    return this;\n}", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "// dialog\u6309\u94ae\u7ec4\n", "func_signal": "public GlobalDialog(Context context)", "code": "{\n        super(context, R.style.list_dialog);\n        this.setContentView(R.layout.dialog);\n        initViews();// \u521d\u59cb\u5316\u63a7\u4ef6\n        setSizeAndPosition();//\u56fa\u5b9a\u5230\u9ed8\u8ba4\u4f4d\u7f6e  \u5982\u679c\u9700\u8981 \u91cd\u5199\u6b64\u65b9\u6cd5\n    }", "path": "NineGridView/app/src/main/java/com/lzy/ninegridview/utils/GlobalDialog.java", "commit_date": "2016-04-09 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/** \u8bbe\u7f6e\u9002\u914d\u5668 */\n", "func_signal": "public void setAdapter(@NonNull NineGridViewAdapter adapter)", "code": "{\n    mAdapter = adapter;\n    List<ImageInfo> imageInfo = adapter.getImageInfo();\n\n    if (imageInfo == null || imageInfo.isEmpty()) {\n        setVisibility(GONE);\n        return;\n    } else {\n        setVisibility(VISIBLE);\n    }\n\n    int imageCount = imageInfo.size();\n    if (maxImageSize > 0 && imageCount > maxImageSize) {\n        imageInfo = imageInfo.subList(0, maxImageSize);\n        imageCount = imageInfo.size();   //\u518d\u6b21\u83b7\u53d6\u56fe\u7247\u6570\u91cf\n    }\n\n    //\u9ed8\u8ba4\u662f3\u5217\u663e\u793a\uff0c\u884c\u6570\u6839\u636e\u56fe\u7247\u7684\u6570\u91cf\u51b3\u5b9a\n    rowCount = imageCount / 3 + (imageCount % 3 == 0 ? 0 : 1);\n    columnCount = 3;\n    //grid\u6a21\u5f0f\u4e0b\uff0c\u663e\u793a4\u5f20\u4f7f\u75282X2\u6a21\u5f0f\n    if (mode == MODE_GRID) {\n        if (imageCount == 4) {\n            rowCount = 2;\n            columnCount = 2;\n        }\n    }\n\n    //\u4fdd\u8bc1View\u7684\u590d\u7528\uff0c\u907f\u514d\u91cd\u590d\u521b\u5efa\n    if (mImageInfo == null) {\n        for (int i = 0; i < imageCount; i++) {\n            ImageView iv = getImageView(i);\n            if (iv == null) return;\n            addView(iv, generateDefaultLayoutParams());\n        }\n    } else {\n        int oldViewCount = mImageInfo.size();\n        int newViewCount = imageCount;\n        if (oldViewCount > newViewCount) {\n            removeViews(newViewCount, oldViewCount - newViewCount);\n        } else if (oldViewCount < newViewCount) {\n            for (int i = oldViewCount; i < newViewCount; i++) {\n                ImageView iv = getImageView(i);\n                if (iv == null) return;\n                addView(iv, generateDefaultLayoutParams());\n            }\n        }\n    }\n    //\u4fee\u6539\u6700\u540e\u4e00\u4e2a\u6761\u76ee\uff0c\u51b3\u5b9a\u662f\u5426\u663e\u793a\u66f4\u591a\n    if (adapter.getImageInfo().size() > maxImageSize) {\n        View child = getChildAt(maxImageSize - 1);\n        if (child instanceof NineGridViewWrapper) {\n            NineGridViewWrapper imageView = (NineGridViewWrapper) child;\n            imageView.setMoreNum(adapter.getImageInfo().size() - maxImageSize);\n        }\n    }\n    mImageInfo = imageInfo;\n    requestLayout();\n}", "path": "NineGridView/ninegridview/src/main/java/com/lzy/ninegrid/NineGridView.java", "commit_date": "2017-04-21 00:00:00", "repo_name": "jeasonlzy/NineGridView", "stars": 2458, "license": "None", "language": "java", "size": 12075}
{"docstring": "/**\n * Fills data from input table into output table.\n * @param inputTblName input hive table name\n * @param outputTblName output hive table name\n * @param inputDbName input hive database name\n * @param outputDbName output hive database name\n * @param optionalPartitionDMLInfo input hive table's partition's name and value\n * @return Hive query string\n */\n", "func_signal": "public static String generateTableCopy(\n    String inputTblName,\n    String outputTblName,\n    String inputDbName,\n    String outputDbName,\n    Optional<Map<String, String>> optionalPartitionDMLInfo)", "code": "{\n  Preconditions.checkArgument(StringUtils.isNotBlank(inputTblName));\n  Preconditions.checkArgument(StringUtils.isNotBlank(outputTblName));\n  Preconditions.checkArgument(StringUtils.isNotBlank(inputDbName));\n  Preconditions.checkArgument(StringUtils.isNotBlank(outputDbName));\n\n  StringBuilder dmlQuery = new StringBuilder();\n\n  // Insert query\n  dmlQuery.append(String.format(\"INSERT OVERWRITE TABLE `%s`.`%s` %n\", outputDbName, outputTblName));\n\n  if (optionalPartitionDMLInfo.isPresent() && optionalPartitionDMLInfo.get().size() > 0) {\n    // Partition details\n    dmlQuery.append(partitionKeyValues(optionalPartitionDMLInfo));\n  }\n\n  dmlQuery.append(String.format(\"SELECT * FROM `%s`.`%s`\", inputDbName, inputTblName));\n  if (optionalPartitionDMLInfo.isPresent()) {\n    if (optionalPartitionDMLInfo.get().size() > 0) {\n      dmlQuery.append(\" WHERE \");\n      String partitionsAndValues = optionalPartitionDMLInfo.get().entrySet().stream()\n          .map(e -> \"`\" + e.getKey() + \"`='\" + e.getValue() + \"'\")\n          .collect(joining(\" AND \"));\n      dmlQuery.append(partitionsAndValues);\n    }\n  }\n\n  return dmlQuery.toString();\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * It fills partitionsDDLInfo and partitionsDMLInfo with the partition information\n * @param conversionEntity conversion entity to\n * @param partitionsDDLInfo partition type information, to be filled by this method\n * @param partitionsDMLInfo partition key-value pair, to be filled by this method\n */\n", "func_signal": "public static void populatePartitionInfo(HiveProcessingEntity conversionEntity, Map<String, String> partitionsDDLInfo,\n    Map<String, String> partitionsDMLInfo)", "code": "{\n\n  String partitionsInfoString = null;\n  String partitionsTypeString = null;\n\n  if (conversionEntity.getPartition().isPresent()) {\n    partitionsInfoString = conversionEntity.getPartition().get().getName();\n    partitionsTypeString = conversionEntity.getPartition().get().getSchema().getProperty(\"partition_columns.types\");\n  }\n\n  if (StringUtils.isNotBlank(partitionsInfoString) || StringUtils.isNotBlank(partitionsTypeString)) {\n    if (StringUtils.isBlank(partitionsInfoString) || StringUtils.isBlank(partitionsTypeString)) {\n      throw new IllegalArgumentException(\"Both partitions info and partitions must be present, if one is specified\");\n    }\n    List<String> pInfo = Splitter.on(HIVE_PARTITIONS_INFO).omitEmptyStrings().trimResults().splitToList(partitionsInfoString);\n    List<String> pType = Splitter.on(HIVE_PARTITIONS_TYPE).omitEmptyStrings().trimResults().splitToList(partitionsTypeString);\n    log.debug(\"PartitionsInfoString: \" + partitionsInfoString);\n    log.debug(\"PartitionsTypeString: \" + partitionsTypeString);\n\n    if (pInfo.size() != pType.size()) {\n      throw new IllegalArgumentException(\"partitions info and partitions type list should of same size\");\n    }\n    for (int i = 0; i < pInfo.size(); i++) {\n      List<String> partitionInfoParts = Splitter.on(\"=\").omitEmptyStrings().trimResults().splitToList(pInfo.get(i));\n      String partitionType = pType.get(i);\n      if (partitionInfoParts.size() != 2) {\n        throw new IllegalArgumentException(\n            String.format(\"Partition details should be of the format partitionName=partitionValue. Recieved: %s\", pInfo.get(i)));\n      }\n      partitionsDDLInfo.put(partitionInfoParts.get(0), partitionType);\n      partitionsDMLInfo.put(partitionInfoParts.get(0), partitionInfoParts.get(1));\n    }\n  }\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Returns the list of plugins as defined in the system configuration. These are the\n * defined in the PLUGINS_FULL_KEY config option.\n * The list also includes plugins that are automatically added by gobblin.\n * */\n", "func_signal": "public List<GobblinInstancePluginFactory> getDefaultPlugins()", "code": "{\n\n  List<String> pluginNames =\n      ConfigUtils.getStringList(getSysConfig().getConfig(), PLUGINS_FULL_KEY);\n\n  List<GobblinInstancePluginFactory> pluginFactories = Lists.newArrayList();\n\n  // By default email notification plugin is added.\n  if (!ConfigUtils.getBoolean(getSysConfig().getConfig(), EmailNotificationPlugin.EMAIL_NOTIFICATIONS_DISABLED_KEY,\n      EmailNotificationPlugin.EMAIL_NOTIFICATIONS_DISABLED_DEFAULT)) {\n    pluginFactories.add(new EmailNotificationPlugin.Factory());\n  }\n\n  pluginFactories.addAll(Lists.transform(pluginNames, new Function<String, GobblinInstancePluginFactory>() {\n\n    @Override public GobblinInstancePluginFactory apply(String input) {\n      Class<? extends GobblinInstancePluginFactory> factoryClass;\n      try {\n        factoryClass = _aliasResolver.resolveClass(input);\n        return factoryClass.newInstance();\n      } catch (ClassNotFoundException|InstantiationException|IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to instantiate plugin factory \" + input + \": \" + e, e);\n      }\n    }\n  }));\n\n  return pluginFactories;\n}", "path": "gobblin/gobblin-runtime/src/main/java/org/apache/gobblin/runtime/instance/StandardGobblinInstanceDriver.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Get the scheme and authority at which this server is listening.\n */\n", "func_signal": "public URI getListeningURI()", "code": "{\n  try {\n    return new URI(this.serverUri.getScheme(), this.serverUri.getUserInfo(), this.serverUri.getHost(), this.port,\n        null, null, null);\n  } catch (URISyntaxException use) {\n    throw new RuntimeException(\"Invalid URI. This is an error in code.\", use);\n  }\n}", "path": "gobblin/gobblin-restli/gobblin-restli-utils/src/main/java/org/apache/gobblin/restli/EmbeddedRestliServer.java", "commit_date": "2018-06-14 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/** Constructor with a launcher */\n", "func_signal": "public Builder(GobblinInstanceLauncher instanceLauncher)", "code": "{\n  this();\n  withInstanceEnvironment(instanceLauncher);\n}", "path": "gobblin/gobblin-runtime/src/main/java/org/apache/gobblin/runtime/instance/StandardGobblinInstanceDriver.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Generates a CTAS statement to dump the results of a query into a new table.\n * @param outputDbAndTable output db and table where contents should be written.\n * @param sourceQuery query to materialize.\n * @param storageFormat format of output table.\n * @param outputTableLocation location where files of output table should be written.\n */\n", "func_signal": "public static String generateStagingCTASStatement(HiveDatasetFinder.DbAndTable outputDbAndTable,\n    String sourceQuery, StorageFormat storageFormat, String outputTableLocation)", "code": "{\n  Preconditions.checkArgument(!Strings.isNullOrEmpty(outputDbAndTable.getDb()) &&\n      !Strings.isNullOrEmpty(outputDbAndTable.getTable()), \"Invalid output db and table \" + outputDbAndTable);\n\n  return String.format(\"CREATE TEMPORARY TABLE `%s`.`%s` STORED AS %s LOCATION '%s' AS %s\", outputDbAndTable.getDb(),\n      outputDbAndTable.getTable(), storageFormat.getHiveName(), outputTableLocation, sourceQuery);\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Find the lowest {@link MeteredInputStream} in a chain of {@link FilterInputStream}s.\n */\n", "func_signal": "public static Optional<MeteredInputStream> findWrappedMeteredInputStream(InputStream is)", "code": "{\n  if (is instanceof FilterInputStream) {\n    try {\n      Optional<MeteredInputStream> meteredInputStream =\n          findWrappedMeteredInputStream(FilterStreamUnpacker.unpackFilterInputStream((FilterInputStream) is));\n      if (meteredInputStream.isPresent()) {\n        return meteredInputStream;\n      }\n    } catch (IllegalAccessException iae) {\n      log.warn(\"Cannot unpack input stream due to SecurityManager.\", iae);\n      // Do nothing, we can't unpack the FilterInputStream due to security restrictions\n    }\n  }\n  if (is instanceof MeteredInputStream) {\n    return Optional.of((MeteredInputStream) is);\n  }\n  return Optional.absent();\n}", "path": "gobblin/gobblin-utility/src/main/java/org/apache/gobblin/util/io/MeteredInputStream.java", "commit_date": "2017-07-31 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n *\n * @param fsUri FileSystem URI\n * @return true if the scheme of fsUri equals \"file\"\n */\n", "func_signal": "@Override\npublic boolean isUriValid(URI fsUri)", "code": "{\n  String scheme = fsUri.getScheme();\n  if (scheme.equals(LOCAL_FS_SCHEME)) {\n    return true;\n  }\n  return false;\n}", "path": "gobblin/gobblin-service/src/main/java/org/apache/gobblin/service/modules/flowgraph/datanodes/fs/LocalFSDataNode.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Utility method to check whether one URI is the ancestor of the other\n *\n * return true iff both URI's scheme/authority name match and ancestor's path is the prefix of the descendant's path\n * @param descendant: the descendant URI to check\n * @param ancestor  : the ancestor URI to check\n * @return\n */\n", "func_signal": "public static boolean isAncestorOrSame(URI descendant, URI ancestor)", "code": "{\n  Preconditions.checkNotNull(descendant, \"input can not be null\");\n  Preconditions.checkNotNull(ancestor, \"input can not be null\");\n\n  if (!stringSame(descendant.getScheme(), ancestor.getScheme())) {\n    return false;\n  }\n\n  if (!stringSame(descendant.getAuthority(), ancestor.getAuthority())) {\n    return false;\n  }\n\n  return isAncestorOrSame(getConfigKeyPath(descendant.getPath()), getConfigKeyPath(ancestor.getPath()));\n}", "path": "gobblin/gobblin-config-management/gobblin-config-client/src/main/java/org/apache/gobblin/config/client/ConfigClientUtils.java", "commit_date": "2019-08-05 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Determines whether the file system is rate controlled, and if so, returns the allowed rate in operations per\n * second.\n * @param fs {@link FileSystem} to check for rate control.\n * @return {@link Optional#absent} if file system is not rate controlled, otherwise, the rate in operations per second.\n */\n", "func_signal": "public static Optional<Long> getRateIfRateControlled(FileSystem fs)", "code": "{\n  if (fs instanceof Decorator) {\n    List<Object> lineage = DecoratorUtils.getDecoratorLineage(fs);\n    for (Object obj : lineage) {\n      if (obj instanceof RateControlledFileSystem) {\n        return Optional.of(((RateControlledFileSystem) obj).limitPerSecond);\n      }\n    }\n    return Optional.absent();\n  }\n  return Optional.absent();\n}", "path": "gobblin/gobblin-utility/src/main/java/org/apache/gobblin/util/RateControlledFileSystem.java", "commit_date": "2017-11-07 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Creates a staging directory with the permission as in source directory.\n * @param fs filesystem object\n * @param destination staging directory location\n * @param conversionEntity conversion entity used to get source directory permissions\n * @param workUnit workunit\n */\n", "func_signal": "public static void createStagingDirectory(FileSystem fs, String destination, HiveProcessingEntity conversionEntity,\n    WorkUnitState workUnit)", "code": "{\n  /*\n   * Create staging data location with the same permissions as source data location\n   *\n   * Note that hive can also automatically create the non-existing directories but it does not\n   * seem to create it with the desired permissions.\n   * According to hive docs permissions for newly created directories/files can be controlled using uMask like,\n   *\n   * SET hive.warehouse.subdir.inherit.perms=false;\n   * SET fs.permissions.umask-mode=022;\n   * Upon testing, this did not work\n   */\n  Path destinationPath = new Path(destination);\n  try {\n    FsPermission permission;\n    String group = null;\n    if (conversionEntity.getTable().getDataLocation() != null) {\n      FileStatus sourceDataFileStatus = fs.getFileStatus(conversionEntity.getTable().getDataLocation());\n      permission = sourceDataFileStatus.getPermission();\n      group = sourceDataFileStatus.getGroup();\n    } else {\n      permission = FsPermission.getDefault();\n    }\n\n    if (!fs.mkdirs(destinationPath, permission)) {\n      throw new RuntimeException(String.format(\"Failed to create path %s with permissions %s\",\n          destinationPath, permission));\n    } else {\n      fs.setPermission(destinationPath, permission);\n      // Set the same group as source\n      if (group != null && !workUnit.getPropAsBoolean(HIVE_DATASET_DESTINATION_SKIP_SETGROUP, DEFAULT_HIVE_DATASET_DESTINATION_SKIP_SETGROUP)) {\n        fs.setOwner(destinationPath, null, group);\n      }\n      log.info(String.format(\"Created %s with permissions %s and group %s\", destinationPath, permission, group));\n    }\n  } catch (IOException e) {\n    Throwables.propagate(e);\n  }\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Create a work unit to copy a source table to a target table using a staging table in between.\n * @param dataset {@link HiveDataset} for the source table.\n * @param destinationTable {@link StageableTableMetadata} specifying staging and target tables metadata.\n */\n", "func_signal": "public static HiveWorkUnit tableCopyWorkUnit(HiveDataset dataset, StageableTableMetadata destinationTable,\n    @Nullable String partitionName)", "code": "{\n  HiveWorkUnit workUnit = new HiveWorkUnit(dataset);\n  workUnit.setProp(MATERIALIZER_MODE_KEY, MaterializerMode.TABLE_COPY.name());\n  workUnit.setProp(STAGEABLE_TABLE_METADATA_KEY, HiveSource.GENERICS_AWARE_GSON.toJson(destinationTable));\n  if (!Strings.isNullOrEmpty(partitionName)) {\n    workUnit.setPartitionName(partitionName);\n  }\n  TaskUtils.setTaskFactoryClass(workUnit, HiveMaterializerTaskFactory.class);\n  return workUnit;\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/materializer/HiveMaterializer.java", "commit_date": "2017-09-21 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Returns a pair of Hive table and its partitions\n * @param dbName db name\n * @param tableName table name\n * @param props properties\n * @return a pair of Hive table and its partitions\n * @throws DataConversionException\n */\n", "func_signal": "public static Pair<Optional<Table>, Optional<List<Partition>>> getDestinationTableMeta(String dbName,\n    String tableName, Properties props)", "code": "{\n\n  Optional<Table> table = Optional.<Table>absent();\n  Optional<List<Partition>> partitions = Optional.<List<Partition>>absent();\n\n  try {\n    HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(props,\n        Optional.fromNullable(props.getProperty(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n    try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n      table = Optional.of(client.get().getTable(dbName, tableName));\n      if (table.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        if (qlTable.isPartitioned()) {\n          partitions = Optional.of(HiveUtils.getPartitions(client.get(), qlTable, Optional.<String>absent()));\n        }\n      }\n    }\n  } catch (NoSuchObjectException e) {\n    return ImmutablePair.of(table, partitions);\n  } catch (IOException | TException e) {\n    throw new RuntimeException(\"Could not fetch destination table metadata\", e);\n  }\n\n  return ImmutablePair.of(table, partitions);\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/***\n * Generate DDL query to create a duplicate Hive table\n * @param inputDbName source DB name\n * @param inputTblName source table name\n * @param tblName New Hive table name\n * @param tblLocation New hive table location\n * @param optionalDbName Optional DB name, if not specified it defaults to 'default'\n */\n", "func_signal": "public static String generateCreateDuplicateTableDDL(\n    String inputDbName,\n    String inputTblName,\n    String tblName,\n    String tblLocation,\n    Optional<String> optionalDbName)", "code": "{\n\n  Preconditions.checkArgument(StringUtils.isNotBlank(tblName));\n  Preconditions.checkArgument(StringUtils.isNotBlank(tblLocation));\n\n  String dbName = optionalDbName.isPresent() ? optionalDbName.get() : \"default\";\n\n  return String.format(\"CREATE EXTERNAL TABLE IF NOT EXISTS `%s`.`%s` LIKE `%s`.`%s` LOCATION %n  '%s' %n\",\n      dbName, tblName, inputDbName, inputTblName, tblLocation);\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Generates a CTAS statement to dump the contents of a table / partition into a new table.\n * @param outputDbAndTable output db and table where contents should be written.\n * @param sourceEntity source table / partition.\n * @param partitionDMLInfo map of partition values.\n * @param storageFormat format of output table.\n * @param outputTableLocation location where files of output table should be written.\n */\n", "func_signal": "public static String generateStagingCTASStatementFromSelectStar(HiveDatasetFinder.DbAndTable outputDbAndTable,\n    HiveDatasetFinder.DbAndTable sourceEntity, Map<String, String> partitionDMLInfo,\n    StorageFormat storageFormat, String outputTableLocation)", "code": "{\n  StringBuilder sourceQueryBuilder = new StringBuilder(\"SELECT * FROM `\").append(sourceEntity.getDb())\n      .append(\"`.`\").append(sourceEntity.getTable()).append(\"`\");\n  if (partitionDMLInfo != null && !partitionDMLInfo.isEmpty()) {\n    sourceQueryBuilder.append(\" WHERE \");\n    sourceQueryBuilder.append(partitionDMLInfo.entrySet().stream()\n        .map(e -> \"`\" + e.getKey() + \"`='\" + e.getValue() + \"'\")\n        .collect(joining(\" AND \")));\n  }\n  return generateStagingCTASStatement(outputDbAndTable, sourceQueryBuilder.toString(), storageFormat, outputTableLocation);\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Get job dependencies of a given job from its config.\n * @param config of a job.\n * @return a list of dependencies of the job.\n */\n", "func_signal": "private static List<String> getDependencies(Config config)", "code": "{\n  return config.hasPath(ConfigurationKeys.JOB_DEPENDENCIES) ? Arrays\n      .asList(config.getString(ConfigurationKeys.JOB_DEPENDENCIES).split(\",\")) : new ArrayList<>();\n}", "path": "gobblin/gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlanDagFactory.java", "commit_date": "2018-10-11 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Create a work unit to materialize a table / view to a target table using a staging table in between.\n * @param dataset {@link HiveDataset} for the source table.\n * @param storageFormat format in which target table should be written.\n * @param destinationTable {@link StageableTableMetadata} specifying staging and target tables metadata.\n */\n", "func_signal": "public static HiveWorkUnit viewMaterializationWorkUnit(HiveDataset dataset, HiveConverterUtils.StorageFormat storageFormat,\n    StageableTableMetadata destinationTable, @Nullable String partitionName)", "code": "{\n  HiveWorkUnit workUnit = new HiveWorkUnit(dataset);\n  workUnit.setProp(MATERIALIZER_MODE_KEY, MaterializerMode.TABLE_MATERIALIZATION.name());\n  workUnit.setProp(STORAGE_FORMAT_KEY, storageFormat.name());\n  workUnit.setProp(STAGEABLE_TABLE_METADATA_KEY, HiveSource.GENERICS_AWARE_GSON.toJson(destinationTable));\n  if (!Strings.isNullOrEmpty(partitionName)) {\n    workUnit.setPartitionName(partitionName);\n  }\n  TaskUtils.setTaskFactoryClass(workUnit, HiveMaterializerTaskFactory.class);\n  return workUnit;\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/materializer/HiveMaterializer.java", "commit_date": "2017-09-21 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Builds a {@link MeteredInputStream}.\n * @param in The {@link InputStream} to measure.\n * @param meter A {@link Meter} to use for measuring the {@link InputStream}. If null, a new {@link Meter} will be created.\n * @param updateFrequency For performance, {@link MeteredInputStream} will batch {@link Meter} updates to this many bytes.\n */\n", "func_signal": "@Builder\nprivate MeteredInputStream(InputStream in, Meter meter, int updateFrequency)", "code": "{\n  super(in);\n  this.meter = new BatchedMeterDecorator(meter == null ? new Meter() : meter, updateFrequency > 0 ? updateFrequency : 1000);\n}", "path": "gobblin/gobblin-utility/src/main/java/org/apache/gobblin/util/io/MeteredInputStream.java", "commit_date": "2017-07-31 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * Returns the partition data location of a given table and partition\n * @param table Hive table\n * @param state workunit state\n * @param partitionName partition name\n * @return partition data location\n * @throws DataConversionException\n */\n", "func_signal": "public static Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n    String partitionName)\n    throws DataConversionException", "code": "{\n  Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional;\n  if (!table.isPresent()) {\n    return Optional.absent();\n  }\n  try {\n    HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n        Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n    try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n      partitionOptional =\n          Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n    } catch (NoSuchObjectException e) {\n      return Optional.absent();\n    }\n    if (partitionOptional.isPresent()) {\n      org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n      Partition qlPartition =\n          new Partition(qlTable, partitionOptional.get());\n      return Optional.of(qlPartition.getDataLocation());\n    }\n  } catch (IOException | TException | HiveException e) {\n    throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n  }\n  return Optional.absent();\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/***\n * Get the partition directory name of the format: [hourly_][daily_]<partitionSpec1>[partitionSpec ..]\n * @param conversionEntity Conversion entity.\n * @param sourceDataPathIdentifier Hints to look in source partition location to prefix the partition dir name\n *                               such as hourly or daily.\n * @return Partition directory name.\n */\n", "func_signal": "public static String getStagingDataPartitionDirName(HiveProcessingEntity conversionEntity,\n    List<String> sourceDataPathIdentifier)", "code": "{\n\n  if (conversionEntity.getPartition().isPresent()) {\n    StringBuilder dirNamePrefix = new StringBuilder();\n    String sourceHivePartitionLocation = conversionEntity.getPartition().get().getDataLocation().toString();\n    if (null != sourceDataPathIdentifier && null != sourceHivePartitionLocation) {\n      for (String hint : sourceDataPathIdentifier) {\n        if (sourceHivePartitionLocation.toLowerCase().contains(hint.toLowerCase())) {\n          dirNamePrefix.append(hint.toLowerCase()).append(\"_\");\n        }\n      }\n    }\n\n    return dirNamePrefix + conversionEntity.getPartition().get().getName();\n  } else {\n    return StringUtils.EMPTY;\n  }\n}", "path": "gobblin/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java", "commit_date": "2019-12-18 00:00:00", "repo_name": "apache/gobblin", "stars": 2184, "license": "apache-2.0", "language": "java", "size": 132168}
{"docstring": "/**\n * \u83b7\u53d6\u7f13\u5b58\u6587\u4ef6\n * \n * @param key\n * @return value \u7f13\u5b58\u7684\u6587\u4ef6\n */\n", "func_signal": "public File file(String key)", "code": "{\n\tFile f = mCache.newFile(key);\n\tif (f.exists())\n\t\treturn f;\n\treturn null;\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \n * @param key\n *            the file name.\n * @return (InputStream or null) stream previously saved in cache.\n * @throws FileNotFoundException\n *             if the file can not be opened\n */\n", "func_signal": "public InputStream get(String key) throws FileNotFoundException", "code": "{\n\tFile file = mCache.get(key);\n\tif (!file.exists())\n\t\treturn null;\n\treturn new FileInputStream(file);\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u79fb\u9664\u65e7\u7684\u6587\u4ef6\n * \n * @return\n */\n", "func_signal": "private long removeNext()", "code": "{\n\tif (lastUsageDates.isEmpty()) {\n\t\treturn 0;\n\t}\n\n\tLong oldestUsage = null;\n\tFile mostLongUsedFile = null;\n\tSet<Entry<File, Long>> entries = lastUsageDates.entrySet();\n\tsynchronized (lastUsageDates) {\n\t\tfor (Entry<File, Long> entry : entries) {\n\t\t\tif (mostLongUsedFile == null) {\n\t\t\t\tmostLongUsedFile = entry.getKey();\n\t\t\t\toldestUsage = entry.getValue();\n\t\t\t} else {\n\t\t\t\tLong lastValueUsage = entry.getValue();\n\t\t\t\tif (lastValueUsage < oldestUsage) {\n\t\t\t\t\toldestUsage = lastValueUsage;\n\t\t\t\t\tmostLongUsedFile = entry.getKey();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlong fileSize = calculateSize(mostLongUsedFile);\n\tif (mostLongUsedFile.delete()) {\n\t\tlastUsageDates.remove(mostLongUsedFile);\n\t}\n\treturn fileSize;\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u5224\u65ad\u7f13\u5b58\u7684byte\u6570\u636e\u662f\u5426\u5230\u671f\n * \n * @param data\n * @return true\uff1a\u5230\u671f\u4e86 false\uff1a\u8fd8\u6ca1\u6709\u5230\u671f\n */\n", "func_signal": "private static boolean isDue(byte[] data)", "code": "{\n\tString[] strs = getDateInfoFromDate(data);\n\tif (strs != null && strs.length == 2) {\n\t\tString saveTimeStr = strs[0];\n\t\twhile (saveTimeStr.startsWith(\"0\")) {\n\t\t\tsaveTimeStr = saveTimeStr.substring(1, saveTimeStr.length());\n\t\t}\n\t\tlong saveTime = Long.valueOf(saveTimeStr);\n\t\tlong deleteAfter = Long.valueOf(strs[1]);\n\t\tif (System.currentTimeMillis() > saveTime + deleteAfter * 1000) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u4fdd\u5b58 Serializable\u6570\u636e\u5230 \u7f13\u5b58\u4e2d\n * \n * @param key\n *            \u4fdd\u5b58\u7684key\n * @param value\n *            \u4fdd\u5b58\u7684value\n * @param saveTime\n *            \u4fdd\u5b58\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\n */\n", "func_signal": "public void put(String key, Serializable value, int saveTime)", "code": "{\n\tByteArrayOutputStream baos = null;\n\tObjectOutputStream oos = null;\n\ttry {\n\t\tbaos = new ByteArrayOutputStream();\n\t\toos = new ObjectOutputStream(baos);\n\t\toos.writeObject(value);\n\t\tbyte[] data = baos.toByteArray();\n\t\tif (saveTime != -1) {\n\t\t\tput(key, data, saveTime);\n\t\t} else {\n\t\t\tput(key, data);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\toos.close();\n\t\t} catch (IOException e) {\n\t\t}\n\t}\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u8ba1\u7b97 cacheSize\u548ccacheCount\n */\n", "func_signal": "private void calculateCacheSizeAndCacheCount()", "code": "{\n\tnew Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tint size = 0;\n\t\t\tint count = 0;\n\t\t\tFile[] cachedFiles = cacheDir.listFiles();\n\t\t\tif (cachedFiles != null) {\n\t\t\t\tfor (File cachedFile : cachedFiles) {\n\t\t\t\t\tsize += calculateSize(cachedFile);\n\t\t\t\t\tcount += 1;\n\t\t\t\t\tlastUsageDates.put(cachedFile, cachedFile.lastModified());\n\t\t\t\t}\n\t\t\t\tcacheSize.set(size);\n\t\t\t\tcacheCount.set(count);\n\t\t\t}\n\t\t}\n\t}).start();\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u521d\u59cb\u5316\u63a7\u4ef6\n */\n", "func_signal": "private void initView()", "code": "{\n\tmTv_object_original = (TextView) findViewById(R.id.tv_object_original);\n\tmTv_object_res = (TextView) findViewById(R.id.tv_object_res);\n}", "path": "ASimpleCache/AsimpleCacheDemo/src/com/yangfuhai/asimplecachedemo/SaveObjectActivity.java", "commit_date": "2013-08-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/*\n * Bitmap \u2192 byte[]\n */\n", "func_signal": "private static byte[] Bitmap2Bytes(Bitmap bm)", "code": "{\n\tif (bm == null) {\n\t\treturn null;\n\t}\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tbm.compress(Bitmap.CompressFormat.PNG, 100, baos);\n\treturn baos.toByteArray();\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u83b7\u53d6 byte \u6570\u636e\n * \n * @param key\n * @return byte \u6570\u636e\n */\n", "func_signal": "public byte[] getAsBinary(String key)", "code": "{\n\tRandomAccessFile RAFile = null;\n\tboolean removeFile = false;\n\ttry {\n\t\tFile file = mCache.get(key);\n\t\tif (!file.exists())\n\t\t\treturn null;\n\t\tRAFile = new RandomAccessFile(file, \"r\");\n\t\tbyte[] byteArray = new byte[(int) RAFile.length()];\n\t\tRAFile.read(byteArray);\n\t\tif (!Utils.isDue(byteArray)) {\n\t\t\treturn Utils.clearDateInfo(byteArray);\n\t\t} else {\n\t\t\tremoveFile = true;\n\t\t\treturn null;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t} finally {\n\t\tif (RAFile != null) {\n\t\t\ttry {\n\t\t\t\tRAFile.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (removeFile)\n\t\t\tremove(key);\n\t}\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u70b9\u51fbread\u4e8b\u4ef6\n * \n * @param v\n */\n", "func_signal": "public void read(View v)", "code": "{\n\tUserBean testObject = (UserBean) mCache.getAsObject(\"testObject\");\n\tif (testObject == null) {\n\t\tToast.makeText(this, \"Object cache is null ...\", Toast.LENGTH_SHORT)\n\t\t\t\t.show();\n\t\tmTv_object_res.setText(null);\n\t\treturn;\n\t}\n\tmTv_object_res.setText(testObject.toString());\n}", "path": "ASimpleCache/AsimpleCacheDemo/src/com/yangfuhai/asimplecachedemo/SaveObjectActivity.java", "commit_date": "2013-08-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u8bfb\u53d6JSONArray\u6570\u636e\n * \n * @param key\n * @return JSONArray\u6570\u636e\n */\n", "func_signal": "public JSONArray getAsJSONArray(String key)", "code": "{\n\tString JSONString = getAsString(key);\n\ttry {\n\t\tJSONArray obj = new JSONArray(JSONString);\n\t\treturn obj;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u8bfb\u53d6JSONObject\u6570\u636e\n * \n * @param key\n * @return JSONObject\u6570\u636e\n */\n", "func_signal": "public JSONObject getAsJSONObject(String key)", "code": "{\n\tString JSONString = getAsString(key);\n\ttry {\n\t\tJSONObject obj = new JSONObject(JSONString);\n\t\treturn obj;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "// =======================================\n// ============== byte \u6570\u636e \u8bfb\u5199 =============\n// =======================================\n/**\n * \u4fdd\u5b58 byte\u6570\u636e \u5230 \u7f13\u5b58\u4e2d\n * \n * @param key\n *            \u4fdd\u5b58\u7684key\n * @param value\n *            \u4fdd\u5b58\u7684\u6570\u636e\n */\n", "func_signal": "public void put(String key, byte[] value)", "code": "{\n\tFile file = mCache.newFile(key);\n\tFileOutputStream out = null;\n\ttry {\n\t\tout = new FileOutputStream(file);\n\t\tout.write(value);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (out != null) {\n\t\t\ttry {\n\t\t\t\tout.flush();\n\t\t\t\tout.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tmCache.put(file);\n\t}\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/*\n * Drawable \u2192 Bitmap\n */\n", "func_signal": "private static Bitmap drawable2Bitmap(Drawable drawable)", "code": "{\n\tif (drawable == null) {\n\t\treturn null;\n\t}\n\t// \u53d6 drawable \u7684\u957f\u5bbd\n\tint w = drawable.getIntrinsicWidth();\n\tint h = drawable.getIntrinsicHeight();\n\t// \u53d6 drawable \u7684\u989c\u8272\u683c\u5f0f\n\tBitmap.Config config = drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;\n\t// \u5efa\u7acb\u5bf9\u5e94 bitmap\n\tBitmap bitmap = Bitmap.createBitmap(w, h, config);\n\t// \u5efa\u7acb\u5bf9\u5e94 bitmap \u7684\u753b\u5e03\n\tCanvas canvas = new Canvas(bitmap);\n\tdrawable.setBounds(0, 0, w, h);\n\t// \u628a drawable \u5185\u5bb9\u753b\u5230\u753b\u5e03\u4e2d\n\tdrawable.draw(canvas);\n\treturn bitmap;\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u8bfb\u53d6 Serializable\u6570\u636e\n * \n * @param key\n * @return Serializable \u6570\u636e\n */\n", "func_signal": "public Object getAsObject(String key)", "code": "{\n\tbyte[] data = getAsBinary(key);\n\tif (data != null) {\n\t\tByteArrayInputStream bais = null;\n\t\tObjectInputStream ois = null;\n\t\ttry {\n\t\t\tbais = new ByteArrayInputStream(data);\n\t\t\tois = new ObjectInputStream(bais);\n\t\t\tObject reObject = ois.readObject();\n\t\t\treturn reObject;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (bais != null)\n\t\t\t\t\tbais.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (ois != null)\n\t\t\t\t\tois.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u8bfb\u53d6 String\u6570\u636e\n * \n * @param key\n * @return String \u6570\u636e\n */\n", "func_signal": "public String getAsString(String key)", "code": "{\n\tFile file = mCache.get(key);\n\tif (!file.exists())\n\t\treturn null;\n\tboolean removeFile = false;\n\tBufferedReader in = null;\n\ttry {\n\t\tin = new BufferedReader(new FileReader(file));\n\t\tString readString = \"\";\n\t\tString currentLine;\n\t\twhile ((currentLine = in.readLine()) != null) {\n\t\t\treadString += currentLine;\n\t\t}\n\t\tif (!Utils.isDue(readString)) {\n\t\t\treturn Utils.clearDateInfo(readString);\n\t\t} else {\n\t\t\tremoveFile = true;\n\t\t\treturn null;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t} finally {\n\t\tif (in != null) {\n\t\t\ttry {\n\t\t\t\tin.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (removeFile)\n\t\t\tremove(key);\n\t}\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "// =======================================\n// ============ String\u6570\u636e \u8bfb\u5199 ==============\n// =======================================\n/**\n * \u4fdd\u5b58 String\u6570\u636e \u5230 \u7f13\u5b58\u4e2d\n * \n * @param key\n *            \u4fdd\u5b58\u7684key\n * @param value\n *            \u4fdd\u5b58\u7684String\u6570\u636e\n */\n", "func_signal": "public void put(String key, String value)", "code": "{\n\tFile file = mCache.newFile(key);\n\tBufferedWriter out = null;\n\ttry {\n\t\tout = new BufferedWriter(new FileWriter(file), 1024);\n\t\tout.write(value);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (out != null) {\n\t\t\ttry {\n\t\t\t\tout.flush();\n\t\t\t\tout.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tmCache.put(file);\n\t}\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u8bfb\u53d6 Drawable \u6570\u636e\n * \n * @param key\n * @return Drawable \u6570\u636e\n */\n", "func_signal": "public Drawable getAsDrawable(String key)", "code": "{\n\tif (getAsBinary(key) == null) {\n\t\treturn null;\n\t}\n\treturn Utils.bitmap2Drawable(Utils.Bytes2Bimap(getAsBinary(key)));\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/*\n * Bitmap \u2192 Drawable\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\nprivate static Drawable bitmap2Drawable(Bitmap bm)", "code": "{\n\tif (bm == null) {\n\t\treturn null;\n\t}\n\tBitmapDrawable bd=new BitmapDrawable(bm);\n\tbd.setTargetDensity(bm.getDensity());\n\treturn new BitmapDrawable(bm);\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/*\n * byte[] \u2192 Bitmap\n */\n", "func_signal": "private static Bitmap Bytes2Bimap(byte[] b)", "code": "{\n\tif (b.length == 0) {\n\t\treturn null;\n\t}\n\treturn BitmapFactory.decodeByteArray(b, 0, b.length);\n}", "path": "ASimpleCache/AsimpleCacheDemo/ASimpleCache/org/afinal/simplecache/ACache.java", "commit_date": "2014-05-08 00:00:00", "repo_name": "yangfuhai/ASimpleCache", "stars": 3681, "license": "apache-2.0", "language": "java", "size": 719}
{"docstring": "/**\n * \u7b80\u5355\u5904\u7406\u5e38\u7528\u51e0\u79cd Content-Type \u7684 POST \u5185\u5bb9\uff08\u53ef\u81ea\u884c\u6269\u5c55\uff09\n * @throws Exception\n */\n", "func_signal": "private void dealWithContentType() throws Exception", "code": "{\n    String contentType = getContentType();\n    //\u53ef\u4ee5\u4f7f\u7528HttpJsonDecoder\n    if(contentType.equals(\"application/json\")){\n        String jsonStr = fullRequest.content().toString(Charsets.toCharset(CharEncoding.UTF_8));\n        JSONObject obj = JSON.parseObject(jsonStr);\n        for(Map.Entry<String, Object> item : obj.entrySet()){\n            logger.info(item.getKey()+\"=\"+item.getValue().toString());\n        }\n\n    }else if(contentType.equals(\"application/x-www-form-urlencoded\")){\n        //\u65b9\u5f0f\u4e00\uff1a\u4f7f\u7528 QueryStringDecoder\n\t\t\tString jsonStr = fullRequest.content().toString(Charsets.toCharset(CharEncoding.UTF_8));\n\t\t\tQueryStringDecoder queryDecoder = new QueryStringDecoder(jsonStr, false);\n\t\t\tMap<String, List<String>> uriAttributes = queryDecoder.parameters();\n        for (Map.Entry<String, List<String>> attr : uriAttributes.entrySet()) {\n            for (String attrVal : attr.getValue()) {\n                logger.info(attr.getKey() + \"=\" + attrVal);\n            }\n        }\n\n    }else if(contentType.equals(\"multipart/form-data\")){\n        //TODO \u7528\u4e8e\u6587\u4ef6\u4e0a\u4f20\n    }else{\n        //do nothing...\n    }\n}", "path": "netty-learning-example/netty-http/src/main/java/com/sanshengshui/netty/HttpHelloWorldServerHandler.java", "commit_date": "2018-10-11 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u4e1a\u52a1\u903b\u8f91\u5904\u7406\n */\n", "func_signal": "@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception", "code": "{\n    log.info(\"\u7b2c\" + count.get() + \"\u6b21\" + \",\u670d\u52a1\u7aef\u63a5\u53d7\u7684\u6d88\u606f:\" + msg);\n    try {\n        // \u5982\u679c\u662fprotobuf\u7c7b\u578b\u7684\u6570\u636e\n        if (msg instanceof UserMsg.User) {\n            UserMsg.User user = (UserMsg.User) msg;\n            if (user.getState() == 1) {\n                log.info(\"\u5ba2\u6237\u7aef\u4e1a\u52a1\u5904\u7406\u6210\u529f!\");\n            } else if(user.getState() == 2){\n                log.info(\"\u63a5\u53d7\u5230\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u5fc3\u8df3!\");\n            }else{\n                log.info(\"\u672a\u77e5\u547d\u4ee4!\");\n            }\n        } else {\n            log.info(\"\u672a\u77e5\u6570\u636e!\" + msg);\n            return;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        ReferenceCountUtil.release(msg);\n    }\n    count.getAndIncrement();\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/server/NettyServerHandler.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Creates a TreeNode with a given value, and null children.\n *\n * @param val The value of the given node\n */\n", "func_signal": "public TreeNode(T val)", "code": "{\n    this.val = val;\n    this.left = null;\n    this.right = null;\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/bst/TreeNode.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u5efa\u7acb\u8fde\u63a5\u65f6\n */\n", "func_signal": "@Override\npublic void channelActive(ChannelHandlerContext ctx) throws Exception", "code": "{\n    log.info(\"\u5efa\u7acb\u8fde\u63a5\u65f6\uff1a\" + new Date());\n    ctx.fireChannelActive();\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/client/NettyClientHandler.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u4f1a\u8bdd\u5b58\u50a8\u6d4b\u8bd5\n */\n//    @Test\n//    public void GrozaSessionStoreTest(){\n//\n//        SessionStore sessionStore = new SessionStore();\n//        sessionStore.setChannelId(\"20181018163127\");\n//        sessionStore.setCleanSession(true);\n//        sessionStore.setClientId(\"111\");\n//        redisCacheTemplate.opsForValue().set(CACHE_SES + \"20181018163127\",sessionStore);\n//        final SessionStore sessionStore1 = (SessionStore) redisCacheTemplate.opsForValue().get(CACHE_SES + \"20181018163127\");\n//        log.info(\"[\u5bf9\u8c61\u7f13\u5b58\u7ed3\u679c] - [{}]\", sessionStore1.toString());\n//\n//    }\n", "func_signal": "@Test\npublic void GrozaDupPublishMessageStoreTest()", "code": "{\n    DupPublishMessageStore dupPublishMessageStore = new DupPublishMessageStore();\n    dupPublishMessageStore.setClientId(\"20181020112852\");\n    dupPublishMessageStore.setMessageId(123456);\n    dupPublishMessageStore.setMqttQoS(1);\n    dupPublishMessageStore.setTopic(\"test\");\n    dupPublishMessageStore.setMessageBytes(new byte[]{1,2,3,4,5,6});\n    redisCacheTemplate.opsForHash().put(CACHE_DUPPub + \"20181020112852\",123456,dupPublishMessageStore);\n    redisCacheTemplate.opsForHash().put(CACHE_DUPPub + \"20181020112852\",123457,dupPublishMessageStore);\n    redisCacheTemplate.hasKey(CACHE_DUPPub + \"20181020112852\");\n    log.info(redisCacheTemplate.hasKey(CACHE_DUPPub + \"20181020112852\").toString());\n    Map<Object,Object> map1 = redisCacheTemplate.opsForHash().entries(CACHE_DUPPub + \"20181020112852\");\n    if (map1 != null && !map1.isEmpty()) {\n        map1.forEach((k, v) -> {\n            log.info(k.toString());\n             DupPublishMessageStore dupPublishMessageStore1 = (DupPublishMessageStore) v;\n             log.info(dupPublishMessageStore1.getTopic());\n        });\n    }\n    redisCacheTemplate.opsForHash().delete(CACHE_DUPPub + \"20181020112852\",123456);\n    redisCacheTemplate.delete(CACHE_DUPPub + \"20181020112852\");\n\n}", "path": "netty-learning-example/netty-iot/src/test/java/com/sanshengshui/iot/MqttTests.java", "commit_date": "2018-10-23 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u751f\u6210\u79c1\u94a5\u6587\u4ef6\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    System.out.println();\n    System.out.print(\"\u8f93\u5165\u4fdd\u5b58\u5bc6\u94a5\u6587\u4ef6\u7684\u8def\u5f84(\u5982: f:/rsa/): \");\n    Scanner scanner = new Scanner(System.in);\n    String path = scanner.nextLine();\n    KeyPair keyPair = SecureUtil.generateKeyPair(\"RSA\", 512, LocalDateTime.now().toString().getBytes());\n    RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n    String privatePath = path + \"auth-private.key\";\n    IoUtil.writeObjects(FileUtil.getOutputStream(privatePath), true, privateKey);\n}", "path": "netty-learning-example/netty-iot/src/main/java/com/sanshengshui/iot/auth/util/RsaKeyUtil.java", "commit_date": "2018-10-15 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u5fc3\u8df3\u8bf7\u6c42\u5904\u7406 \u6bcf4\u79d2\u53d1\u9001\u4e00\u6b21\u5fc3\u8df3\u8bf7\u6c42;\n *\n */\n", "func_signal": "@Override\npublic void userEventTriggered(ChannelHandlerContext ctx, Object obj) throws Exception", "code": "{\n    log.info(\"\u5faa\u73af\u8bf7\u6c42\u7684\u65f6\u95f4\uff1a\" + new Date() + \"\uff0c\u6b21\u6570\" + fcount.get());\n    if (obj instanceof IdleStateEvent) {\n        IdleStateEvent event = (IdleStateEvent) obj;\n        // \u5982\u679c\u5199\u901a\u9053\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001,\u5c31\u53d1\u9001\u5fc3\u8df3\u547d\u4ee4\n        if (IdleState.WRITER_IDLE.equals(event.state())) {\n            UserMsg.User.Builder userState = UserMsg.User.newBuilder().setState(2);\n            ctx.channel().writeAndFlush(userState);\n            fcount.getAndIncrement();\n        }\n    }\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/client/NettyClientHandler.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u8d85\u65f6\u5904\u7406 \u5982\u679c5\u79d2\u6ca1\u6709\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u5fc3\u8df3\uff0c\u5c31\u89e6\u53d1; \u5982\u679c\u8d85\u8fc7\u4e24\u6b21\uff0c\u5219\u76f4\u63a5\u5173\u95ed;\n */\n", "func_signal": "@Override\npublic void userEventTriggered(ChannelHandlerContext ctx, Object obj) throws Exception", "code": "{\n    if (obj instanceof IdleStateEvent) {\n        IdleStateEvent event = (IdleStateEvent) obj;\n        // \u5982\u679c\u8bfb\u901a\u9053\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u8bf4\u660e\u6ca1\u6709\u63a5\u6536\u5230\u5fc3\u8df3\u547d\u4ee4\n        if (IdleState.READER_IDLE.equals(event.state())) {\n            log.info(\"\u5df2\u7ecf5\u79d2\u6ca1\u6709\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\u4e86\");\n            if (idle_count.get() > 1) {\n                log.info(\"\u5173\u95ed\u8fd9\u4e2a\u4e0d\u6d3b\u8dc3\u7684channel\");\n                ctx.channel().close();\n            }\n            idle_count.getAndIncrement();\n        }\n    } else {\n        super.userEventTriggered(ctx, obj);\n    }\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/server/NettyServerHandler.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u5173\u95ed\u8fde\u63a5\u65f6\n */\n", "func_signal": "@Override\npublic void channelInactive(ChannelHandlerContext ctx) throws Exception", "code": "{\n    log.info(\"\u5173\u95ed\u8fde\u63a5\u65f6\uff1a\" + new Date());\n    final EventLoop eventLoop = ctx.channel().eventLoop();\n    nettyClient.doConnect(new Bootstrap(), eventLoop);\n    super.channelInactive(ctx);\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/client/NettyClientHandler.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Netty\u521b\u5efa\u5168\u90e8\u90fd\u662f\u5b9e\u73b0\u81eaAbstractBootstrap\u3002 \u5ba2\u6237\u7aef\u7684\u662fBootstrap\uff0c\u670d\u52a1\u7aef\u7684\u5219\u662f ServerBootstrap\u3002\n **/\n", "func_signal": "@PostConstruct\npublic void init()", "code": "{\n    group = new NioEventLoopGroup();\n    doConnect(new Bootstrap(), group);\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/client/NettyClient.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Program entry point.\n *\n * @param args command line args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    demonstrateTreasureChestIteratorForType(RING);\n    demonstrateTreasureChestIteratorForType(POTION);\n    demonstrateTreasureChestIteratorForType(WEAPON);\n    demonstrateTreasureChestIteratorForType(ANY);\n\n    demonstrateBstIterator();\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/App.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Add a new Child TreeNode of given value to self. WARNING: This method is destructive (will\n * overwrite existing tree structure, if any), and should be called only by this class's insert()\n * method.\n *\n * @param valToInsert Value of the new TreeNode to be inserted\n */\n", "func_signal": "private void insertNewChild(T valToInsert)", "code": "{\n    if (this.isLessThanOrEqualTo(valToInsert)) {\n        this.setRight(new TreeNode<>(valToInsert));\n    } else {\n        this.setLeft(new TreeNode<>(valToInsert));\n    }\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/bst/TreeNode.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u5efa\u7acb\u8fde\u63a5\u65f6\uff0c\u53d1\u9001\u4e00\u6761\u6d88\u606f\n */\n", "func_signal": "@Override\npublic void channelActive(ChannelHandlerContext ctx) throws Exception", "code": "{\n    log.info(\"\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u5730\u5740:\" + ctx.channel().remoteAddress());\n    UserMsg.User user = UserMsg.User.newBuilder().setId(1).setAge(24).setName(\"\u7a46\u4e66\u4f1f\").setState(0).build();\n    ctx.writeAndFlush(user);\n    super.channelActive(ctx);\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/server/NettyServerHandler.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Returns left or right child of self based on a value that would be inserted; maintaining the\n * integrity of the BST.\n *\n * @param value The value of the TreeNode that would be inserted beneath self\n * @return The child TreeNode of self which represents the subtree where `value` would be inserted\n */\n", "func_signal": "private TreeNode<T> traverseOneLevelDown(T value)", "code": "{\n    if (this.isGreaterThan(value)) {\n        return this.left;\n    }\n    return this.right;\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/bst/TreeNode.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * The instance gets created only when it is called for first time. Lazy-loading\n */\n", "func_signal": "public static synchronized ThreadSafeLazyLoadedMouseDriver getInstance()", "code": "{\n    if (instance == null) {\n        instance = new ThreadSafeLazyLoadedMouseDriver();\n    }\n\n    return instance;\n}", "path": "netty-learning-example/netty-design-patterns-singleton/src/main/java/cn/mushuwei/singleton/type/ThreadSafeLazyLoadedMouseDriver.java", "commit_date": "2020-04-13 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Inserts new TreeNode based on a given value into the subtree represented by self.\n *\n * @param valToInsert The value to insert as a new TreeNode\n */\n", "func_signal": "public void insert(T valToInsert)", "code": "{\n    TreeNode<T> parent = getParentNodeOfValueToBeInserted(valToInsert);\n    parent.insertNewChild(valToInsert);\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/bst/TreeNode.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * This BstIterator manages to use O(h) extra space, where h is the height of the tree It achieves\n * this by maintaining a stack of the nodes to handle (pushing all left nodes first), before\n * handling self or right node.\n *\n * @param node TreeNode that acts as root of the subtree we're interested in.\n */\n", "func_signal": "private void pushPathToNextSmallest(TreeNode<T> node)", "code": "{\n    while (node != null) {\n        pathStack.push(node);\n        node = node.getLeft();\n    }\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/bst/BstIterator.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Gets the next element.\n *\n * @return TreeNode next. The next element according to our in-order traversal of the given BST\n * @throws NoSuchElementException if this iterator does not have a next element\n */\n", "func_signal": "@Override\npublic TreeNode<T> next() throws NoSuchElementException", "code": "{\n    if (pathStack.isEmpty()) {\n        throw new NoSuchElementException();\n    }\n    TreeNode<T> next = pathStack.pop();\n    pushPathToNextSmallest(next.getRight());\n    return next;\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/bst/BstIterator.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * \u4e1a\u52a1\u903b\u8f91\u5904\u7406\n */\n", "func_signal": "@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception", "code": "{\n    // \u5982\u679c\u4e0d\u662fprotobuf\u7c7b\u578b\u7684\u6570\u636e\n    if (!(msg instanceof UserMsg.User)) {\n        log.info(\"\u672a\u77e5\u6570\u636e!\" + msg);\n        return;\n    }\n    try {\n\n        // \u5f97\u5230protobuf\u7684\u6570\u636e\n        UserMsg.User userMsg = (UserMsg.User) msg;\n        // \u8fdb\u884c\u76f8\u5e94\u7684\u4e1a\u52a1\u5904\u7406\u3002\u3002\u3002\n        // \u8fd9\u91cc\u5c31\u4ece\u7b80\u4e86\uff0c\u53ea\u662f\u6253\u5370\u800c\u5df2\n        log.info(\n                \"\u5ba2\u6237\u7aef\u63a5\u53d7\u5230\u7684\u7528\u6237\u4fe1\u606f\u3002\u7f16\u53f7:\" + userMsg.getId() + \",\u59d3\u540d:\" + userMsg.getName() + \",\u5e74\u9f84:\" + userMsg.getAge());\n\n        // \u8fd9\u91cc\u8fd4\u56de\u4e00\u4e2a\u5df2\u7ecf\u63a5\u53d7\u5230\u6570\u636e\u7684\u72b6\u6001\n        UserMsg.User.Builder userState = UserMsg.User.newBuilder().setState(1);\n        ctx.writeAndFlush(userState);\n        log.info(\"\u6210\u529f\u53d1\u9001\u7ed9\u670d\u52a1\u7aef!\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        ReferenceCountUtil.release(msg);\n    }\n}", "path": "netty-learning-example/netty-springboot-protobuf/src/main/java/com/sanshengshui/netty/client/NettyClientHandler.java", "commit_date": "2018-09-22 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Fetch the Parent TreeNode for a given value to insert into the BST.\n *\n * @param valToInsert Value of the new TreeNode to be inserted\n * @return Parent TreeNode of `valToInsert`\n */\n", "func_signal": "private TreeNode<T> getParentNodeOfValueToBeInserted(T valToInsert)", "code": "{\n    TreeNode<T> parent = null;\n    TreeNode<T> curr = this;\n\n    while (curr != null) {\n        parent = curr;\n        curr = curr.traverseOneLevelDown(valToInsert);\n    }\n\n    return parent;\n}", "path": "netty-learning-example/netty-design-patterns-iterator/src/main/java/cn/mushuwei/iterator/bst/TreeNode.java", "commit_date": "2020-04-19 00:00:00", "repo_name": "sanshengshui/netty-learning-example", "stars": 2748, "license": "apache-2.0", "language": "java", "size": 2092}
{"docstring": "/**\n * Return the replacement value for a field value.\n *\n * This does not check for a matching field; the caller must decide if this\n * FieldReplacer should operate on this value by checking getFieldName().\n *\n * The method returns the value with the replacement. If the value returned is\n * not different then eiher the pattern didn't match or the replacement was a\n * no-op.\n *\n * @param value\n * @return\n */\n", "func_signal": "public String replace(String value)", "code": "{\n  if (this.isValid) {\n    return this.pattern.matcher(value).replaceAll(replacement);\n  } else {\n    return value;\n  }\n}", "path": "nutch/src/plugin/index-replace/src/java/org/apache/nutch/indexer/replace/FieldReplacer.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Check a fixed sequence!\n */\n", "func_signal": "@Test\npublic void testEndsWithRedirect() throws Exception", "code": "{\n  // Our test directory\n  Path testDir = new Path(conf.get(\"hadoop.tmp.dir\"), \"merge-\"\n      + System.currentTimeMillis());\n\n  Path segment1 = new Path(testDir, \"00001\");\n  Path segment2 = new Path(testDir, \"00002\");\n\n  createSegment(segment1, CrawlDatum.STATUS_FETCH_SUCCESS, false);\n  createSegment(segment2, CrawlDatum.STATUS_FETCH_SUCCESS, true);\n\n  // Merge the segments and get status\n  Path mergedSegment = merge(testDir, new Path[] { segment1, segment2 });\n  Byte status = Byte.valueOf(status = checkMergedSegment(testDir, mergedSegment));\n\n  Assert.assertEquals(Byte.valueOf(CrawlDatum.STATUS_FETCH_SUCCESS), status);\n}", "path": "nutch/src/test/org/apache/nutch/segment/TestSegmentMergerCrawlDatums.java", "commit_date": "2018-08-11 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Loads the configuration of each exchange.\n *\n * @param conf Nutch's configuration.\n * @return An array with each exchange's configuration.\n */\n", "func_signal": "private ExchangeConfig[] loadConfigurations(Configuration conf)", "code": "{\n  String filename = conf.get(\"exchanges.exchanges.file\",\n      \"exchanges.xml\");\n  InputSource inputSource = new InputSource(\n      conf.getConfResourceAsInputStream(filename));\n\n  final List<ExchangeConfig> configList = new LinkedList<>();\n\n  try {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Element rootElement = builder.parse(inputSource).getDocumentElement();\n    NodeList exchangeList = rootElement.getElementsByTagName(\"exchange\");\n\n    for (int i = 0; i < exchangeList.getLength(); i++) {\n      Element element = (Element) exchangeList.item(i);\n      ExchangeConfig exchangeConfig = ExchangeConfig.getInstance(element);\n\n      if (\"default\".equals(exchangeConfig.getClazz())) {\n        this.defaultExchangeConfig = exchangeConfig;\n        continue;\n      }\n\n      configList.add(exchangeConfig);\n    }\n\n  } catch (SAXException | IOException | ParserConfigurationException e) {\n    LOG.error(e.toString());\n  }\n\n  return configList.toArray(new ExchangeConfig[0]);\n}", "path": "nutch/src/java/org/apache/nutch/exchange/Exchanges.java", "commit_date": "2019-08-28 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * NUTCH-2814 - HttpDateFormat's internal time zone must not change when\n * parsing a date using a different time zone\n */\n", "func_signal": "@Test\npublic void testHttpDateFormatTimeZone() throws ParseException", "code": "{\n  String dateStringPDT = \"Mon, 21 Oct 2019 03:18:16 PDT\";\n  HttpDateFormat.toLong(dateStringPDT); // must not affect internal time zone\n  Assert.assertEquals(dateString, HttpDateFormat.toString(dateMillis));\n}", "path": "nutch/src/test/org/apache/nutch/net/protocols/TestHttpDateFormat.java", "commit_date": "2020-08-07 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Create a segment with the specified status.\n * \n * @param the\n *          segment's paths\n * @param the\n *          status of the record, ignored if redirect is true\n * @param whether\n *          we're doing a redirect as well\n */\n", "func_signal": "protected void createSegment(Path segment, byte status, boolean redirect)\n    throws Exception", "code": "{\n  if (redirect) {\n    createSegment(segment, status, false, true);\n  } else {\n    createSegment(segment, status, true, false);\n  }\n}", "path": "nutch/src/test/org/apache/nutch/segment/TestSegmentMergerCrawlDatums.java", "commit_date": "2018-08-11 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Check a fixed sequence!\n */\n", "func_signal": "@Test\npublic void testFixedSequence() throws Exception", "code": "{\n  // Our test directory\n  Path testDir = new Path(conf.get(\"hadoop.tmp.dir\"), \"merge-\"\n      + System.currentTimeMillis());\n\n  Path segment1 = new Path(testDir, \"00001\");\n  Path segment2 = new Path(testDir, \"00002\");\n  Path segment3 = new Path(testDir, \"00003\");\n\n  createSegment(segment1, CrawlDatum.STATUS_FETCH_GONE, false);\n  createSegment(segment2, CrawlDatum.STATUS_FETCH_GONE, true);\n  createSegment(segment3, CrawlDatum.STATUS_FETCH_SUCCESS, false);\n\n  // Merge the segments and get status\n  Path mergedSegment = merge(testDir, new Path[] { segment1, segment2,\n      segment3 });\n  Byte status = Byte.valueOf(status = checkMergedSegment(testDir, mergedSegment));\n\n  Assert.assertEquals(Byte.valueOf(CrawlDatum.STATUS_FETCH_SUCCESS), status);\n}", "path": "nutch/src/test/org/apache/nutch/segment/TestSegmentMergerCrawlDatums.java", "commit_date": "2018-08-11 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Parses the given expression to a JEXL expression. This supports\n * date parsing.\n *\n * @param expr string JEXL expression\n * @return parsed JEXL expression or null in case of parse error\n */\n", "func_signal": "public static JexlExpression parseExpression(String expr)", "code": "{\n  if (expr == null) return null;\n  \n  try {\n    // Translate any date object into a long. Dates must be in the DATE_PATTERN\n    // format. For example: 2016-03-20T00:00:00Z\n    Matcher matcher = DATE_PATTERN.matcher(expr);\n\n    if (matcher.find()) {\n      String date = matcher.group();\n      \n      // parse the matched substring and get the epoch\n      Date parsedDate = DateUtils.parseDateStrictly(date, new String[] {\"yyyy-MM-dd'T'HH:mm:ss'Z'\"});\n      long time = parsedDate.getTime();\n      \n      // replace the original string date with the numeric value\n      expr = expr.replace(date, Long.toString(time));\n    }\n\n    JexlEngine jexl = new JexlBuilder().silent(true).strict(true).create();\n\n    return jexl.createExpression(expr);\n  } catch (Exception e) {\n    LOG.error(e.getMessage());\n  }\n  \n  return null;\n}", "path": "nutch/src/java/org/apache/nutch/util/JexlUtil.java", "commit_date": "2020-12-17 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Returns all the indexers where the document must be sent to.\n *\n * @param nutchDocument The document to process.\n * @return Indexers.\n */\n", "func_signal": "public String[] indexWriters(final NutchDocument nutchDocument)", "code": "{\n  final Set<String> writersIDs = new HashSet<>();\n\n  exchanges.forEach((id, value) -> {\n    if (value.exchange.match(nutchDocument)) {\n      writersIDs.addAll(Arrays.asList(value.config.getWritersIDs()));\n    }\n  });\n\n  // Using the default exchange if it's activated and there is not index writers for this document yet.\n  if (defaultExchangeConfig != null && writersIDs.isEmpty()) {\n    return defaultExchangeConfig.getWritersIDs();\n  }\n\n  return writersIDs.toArray(new String[0]);\n}", "path": "nutch/src/java/org/apache/nutch/exchange/Exchanges.java", "commit_date": "2019-08-28 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Updates the inlink score in the web graph node databsae into the crawl\n * database.\n * \n * @param crawlDb\n *          The crawl database to update\n * @param webGraphDb\n *          The webgraph database to use.\n * \n * @throws IOException\n *           If an error occurs while updating the scores.\n */\n", "func_signal": "public void update(Path crawlDb, Path webGraphDb) throws IOException,\n    ClassNotFoundException, InterruptedException", "code": "{\n\n  SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  long start = System.currentTimeMillis();\n  LOG.info(\"ScoreUpdater: starting at \" + sdf.format(start));\n\n  Configuration conf = getConf();\n\n  // create a temporary crawldb with the new scores\n  LOG.info(\"Running crawldb update \" + crawlDb);\n  Path nodeDb = new Path(webGraphDb, WebGraph.NODE_DIR);\n  Path crawlDbCurrent = new Path(crawlDb, CrawlDb.CURRENT_NAME);\n  Path newCrawlDb = new Path(crawlDb, Integer.toString(new Random()\n      .nextInt(Integer.MAX_VALUE)));\n\n  // run the updater job outputting to the temp crawl database\n  Job updater = NutchJob.getInstance(conf);\n  updater.setJobName(\"Update CrawlDb from WebGraph\");\n  FileInputFormat.addInputPath(updater, crawlDbCurrent);\n  FileInputFormat.addInputPath(updater, nodeDb);\n  FileOutputFormat.setOutputPath(updater, newCrawlDb);\n  updater.setInputFormatClass(SequenceFileInputFormat.class);\n  updater.setJarByClass(ScoreUpdater.class);\n  updater.setMapperClass(ScoreUpdater.ScoreUpdaterMapper.class);\n  updater.setReducerClass(ScoreUpdater.ScoreUpdaterReducer.class);\n  updater.setMapOutputKeyClass(Text.class);\n  updater.setMapOutputValueClass(ObjectWritable.class);\n  updater.setOutputKeyClass(Text.class);\n  updater.setOutputValueClass(CrawlDatum.class);\n  updater.setOutputFormatClass(MapFileOutputFormat.class);\n\n  try {\n    boolean success = updater.waitForCompletion(true);\n    if (!success) {\n      String message = \"Update CrawlDb from WebGraph job did not succeed, job status:\"\n          + updater.getStatus().getState() + \", reason: \"\n          + updater.getStatus().getFailureInfo();\n      LOG.error(message);\n      // remove the temp crawldb on error\n      FileSystem fs = newCrawlDb.getFileSystem(conf);\n      if (fs.exists(newCrawlDb)) {\n        fs.delete(newCrawlDb, true);\n      }\n      throw new RuntimeException(message);\n    }\n  } catch (IOException | ClassNotFoundException | InterruptedException e) {\n    LOG.error(\"Update CrawlDb from WebGraph:\", e);\n\n    // remove the temp crawldb on error\n    FileSystem fs = newCrawlDb.getFileSystem(conf);\n    if (fs.exists(newCrawlDb)) {\n      fs.delete(newCrawlDb, true);\n    }\n    throw e;\n  }\n\n  // install the temp crawl database\n  LOG.info(\"ScoreUpdater: installing new crawldb \" + crawlDb);\n  CrawlDb.install(updater, crawlDb);\n\n  long end = System.currentTimeMillis();\n  LOG.info(\"ScoreUpdater: finished at \" + sdf.format(end) + \", elapsed: \"\n      + TimingUtil.elapsedTime(start, end));\n}", "path": "nutch/src/java/org/apache/nutch/scoring/webgraph/ScoreUpdater.java", "commit_date": "2020-02-28 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Merge some segments!\n * \n * @param the\n *          test directory\n * @param the\n *          segments to merge\n * @return Path to the merged segment\n */\n", "func_signal": "protected Path merge(Path testDir, Path[] segments) throws Exception", "code": "{\n  // Our merged output directory\n  Path out = new Path(testDir, \"out\");\n\n  // Merge\n  SegmentMerger merger = new SegmentMerger(conf);\n  merger.merge(out, segments, false, false, -1);\n\n  FileStatus[] stats = fs.listStatus(out);\n  Assert.assertEquals(1, stats.length);\n\n  return stats[0].getPath();\n}", "path": "nutch/src/test/org/apache/nutch/segment/TestSegmentMergerCrawlDatums.java", "commit_date": "2018-08-11 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Checks the merged segment and removes the stuff again.\n * \n * @param the\n *          test directory\n * @param the\n *          merged segment\n * @return the final status\n */\n", "func_signal": "protected byte checkMergedSegment(Path testDir, Path mergedSegment)\n    throws Exception", "code": "{\n  // Get a MapFile reader for the <Text,CrawlDatum> pairs\n  MapFile.Reader[] readers = MapFileOutputFormat.getReaders(new Path(\n      mergedSegment, CrawlDatum.FETCH_DIR_NAME), conf);\n\n  Text key = new Text();\n  CrawlDatum value = new CrawlDatum();\n  byte finalStatus = 0x0;\n\n  for (MapFile.Reader reader : readers) {\n    while (reader.next(key, value)) {\n      LOG.info(\"Reading status for: \" + key.toString() + \" > \"\n          + CrawlDatum.getStatusName(value.getStatus()));\n\n      // Only consider fetch status\n      if (CrawlDatum.hasFetchStatus(value)\n          && key.toString().equals(\"http://nutch.apache.org/\")) {\n        finalStatus = value.getStatus();\n      }\n    }\n\n    // Close the reader again\n    reader.close();\n  }\n\n  // Remove the test directory again\n  fs.delete(testDir, true);\n\n  LOG.info(\"Final fetch status for: http://nutch.apache.org/ > \"\n      + CrawlDatum.getStatusName(finalStatus));\n\n  // Return the final status\n  return finalStatus;\n}", "path": "nutch/src/test/org/apache/nutch/segment/TestSegmentMergerCrawlDatums.java", "commit_date": "2018-08-11 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Check a fixed sequence!\n */\n", "func_signal": "@Test\npublic void testRedirFetchInOneSegment() throws Exception", "code": "{\n  // Our test directory\n  Path testDir = new Path(conf.get(\"hadoop.tmp.dir\"), \"merge-\"\n      + System.currentTimeMillis());\n\n  Path segment = new Path(testDir, \"00001\");\n\n  createSegment(segment, CrawlDatum.STATUS_FETCH_SUCCESS, true, true);\n\n  // Merge the segments and get status\n  Path mergedSegment = merge(testDir, new Path[] { segment });\n  Byte status = Byte.valueOf(status = checkMergedSegment(testDir, mergedSegment));\n\n  Assert.assertEquals(Byte.valueOf(CrawlDatum.STATUS_FETCH_SUCCESS), status);\n}", "path": "nutch/src/test/org/apache/nutch/segment/TestSegmentMergerCrawlDatums.java", "commit_date": "2018-08-11 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "// prioritize by smaller values of depth\n", "func_signal": "@Override\npublic float generatorSortValue(Text url, CrawlDatum datum, float initSort)\n    throws ScoringFilterException", "code": "{\n  // boost up by current depth\n  int curDepth, curMaxDepth;\n  IntWritable maxDepth = (IntWritable) datum.getMetaData().get(\n      MAX_DEPTH_KEY_W);\n  if (maxDepth != null) {\n    curMaxDepth = maxDepth.get();\n  } else {\n    curMaxDepth = defaultMaxDepth;\n  }\n  IntWritable depth = (IntWritable) datum.getMetaData().get(DEPTH_KEY_W);\n  if (depth == null) {\n    // penalize\n    curDepth = curMaxDepth;\n  } else {\n    curDepth = depth.get();\n  }\n  int mul = curMaxDepth - curDepth;\n  return initSort * (1 + mul);\n}", "path": "nutch/src/plugin/scoring-depth/src/java/org/apache/nutch/scoring/depth/DepthScoringFilter.java", "commit_date": "2019-10-24 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Testcase for NUTCH-325.\n * \n * @throws URLFilterException\n */\n", "func_signal": "@Test\npublic void testNonExistingUrlFilter() throws URLFilterException", "code": "{\n  Configuration conf = NutchConfiguration.create();\n  String class1 = \"NonExistingFilter\";\n  String class2 = \"org.apache.nutch.urlfilter.prefix.PrefixURLFilter\";\n  conf.set(URLFilters.URLFILTER_ORDER, class1 + \" \" + class2);\n\n  URLFilters normalizers = new URLFilters(conf);\n  normalizers.filter(\"http://someurl/\");\n}", "path": "nutch/src/test/org/apache/nutch/net/TestURLFilters.java", "commit_date": "2015-01-29 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Create a FieldReplacer for a field.\n *\n * Any pattern exceptions are caught within this constructor and the object is\n * marked inValid. The error will be logged. This prevents this caller from\n * attempting invalid replacements.\n *\n * @param fieldName\n *          the name of the source field to operate on. Required.\n * @param toFieldName\n *          the name of the target field. Required.\n * @param pattern\n *          the pattern the field must match. Required.\n * @param replacement\n *          the replacement string\n * @param flags\n *          the Pattern flags value, or null if no flags are needed\n */\n", "func_signal": "public FieldReplacer(String fieldName, String toFieldName, String pattern,\n    String replacement, Integer flags)", "code": "{\n\n  this.isValid = true;\n  // Must have a non-empty field name and pattern.\n  if (fieldName == null || fieldName.trim().length() == 0) {\n    LOG.error(\"Empty fieldName provided, FieldReplacer marked invalid.\");\n    this.isValid = false;\n  }\n  if (pattern == null || pattern.trim().length() == 0) {\n    LOG.error(\"Empty pattern for field \" + fieldName\n        + \"provided, FieldReplacer marked invalid.\");\n    this.isValid = false;\n  }\n\n  if (replacement == null) {\n    this.replacement = \"\";\n  } else {\n    this.replacement = replacement;\n  }\n\n  this.fieldName = fieldName.trim();\n  this.toFieldName = toFieldName.trim();\n\n  if (this.isValid) {\n    LOG.info(\"Compiling pattern \" + pattern + \" for field \" + fieldName);\n    Pattern myPattern = null;\n    try {\n      if (flags != null) {\n        myPattern = Pattern.compile(pattern, flags);\n      } else {\n        myPattern = Pattern.compile(pattern);\n      }\n    } catch (PatternSyntaxException e) {\n      LOG.error(\"Pattern \" + pattern + \" for field \" + fieldName\n          + \" failed to compile: \" + e.toString());\n      this.isValid = false;\n    }\n    this.pattern = myPattern;\n  } else {\n    this.pattern = null;\n  }\n}", "path": "nutch/src/plugin/index-replace/src/java/org/apache/nutch/indexer/replace/FieldReplacer.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Runs the ScoreUpdater tool.\n */\n", "func_signal": "@Override\npublic int run(String[] args) throws Exception", "code": "{\n\n  Options options = new Options();\n  OptionBuilder.withArgName(\"help\");\n  OptionBuilder.withDescription(\"show this help message\");\n  Option helpOpts = OptionBuilder.create(\"help\");\n  options.addOption(helpOpts);\n\n  OptionBuilder.withArgName(\"crawldb\");\n  OptionBuilder.hasArg();\n  OptionBuilder.withDescription(\"the crawldb to use\");\n  Option crawlDbOpts = OptionBuilder.create(\"crawldb\");\n  options.addOption(crawlDbOpts);\n\n  OptionBuilder.withArgName(\"webgraphdb\");\n  OptionBuilder.hasArg();\n  OptionBuilder.withDescription(\"the webgraphdb to use\");\n  Option webGraphOpts = OptionBuilder.create(\"webgraphdb\");\n  options.addOption(webGraphOpts);\n\n  CommandLineParser parser = new GnuParser();\n  try {\n\n    CommandLine line = parser.parse(options, args);\n    if (line.hasOption(\"help\") || !line.hasOption(\"webgraphdb\")\n        || !line.hasOption(\"crawldb\")) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(\"ScoreUpdater\", options);\n      return -1;\n    }\n\n    String crawlDb = line.getOptionValue(\"crawldb\");\n    String webGraphDb = line.getOptionValue(\"webgraphdb\");\n    update(new Path(crawlDb), new Path(webGraphDb));\n    return 0;\n  } catch (Exception e) {\n    LOG.error(\"ScoreUpdater: \" + StringUtils.stringifyException(e));\n    return -1;\n  }\n}", "path": "nutch/src/java/org/apache/nutch/scoring/webgraph/ScoreUpdater.java", "commit_date": "2020-02-28 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Return a replacement value for a field.\n *\n * This is designed to fail fast and trigger a replacement only when\n * necessary. If this method returns null, either the field does not match or\n * the value does not match the pattern (or possibly the pattern is invalid).\n *\n * So only if the method returns a non-null value will you need to replace the\n * value for the field.\n *\n * @param fieldName\n *          the name of the field you are checking\n * @param value\n *          the value of the field you are checking\n * @return a replacement value. If null, either the field does not match or\n *         the value does not match.\n */\n", "func_signal": "public String checkAndReplace(String fieldName, String value)", "code": "{\n  if (this.fieldName.equals(fieldName)) {\n    if (value != null && value.length() > 0) {\n      if (this.isValid) {\n        Matcher m = this.pattern.matcher(value);\n        if (m.find()) {\n          return m.replaceAll(this.replacement);\n        }\n      }\n    }\n  }\n  return null;\n}", "path": "nutch/src/plugin/index-replace/src/java/org/apache/nutch/indexer/replace/FieldReplacer.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Execute a sequence of creating segments, merging them and checking the\n * final output\n * \n * @param status\n *          to start with\n * @param status\n *          to end with\n * @param number\n *          of rounds\n * @param whether\n *          redirects are injected randomly\n * @return the CrawlDatum status\n */\n", "func_signal": "protected byte executeSequence(byte firstStatus, byte lastStatus, int rounds,\n    boolean redirect) throws Exception", "code": "{\n  // Our test directory\n  Path testDir = new Path(conf.get(\"hadoop.tmp.dir\"), \"merge-\"\n      + System.currentTimeMillis());\n\n  // Format for the segments\n  DecimalFormat df = new DecimalFormat(\"0000000\");\n\n  // Create our segment paths\n  Path[] segmentPaths = new Path[rounds];\n  for (int i = 0; i < rounds; i++) {\n    String segmentName = df.format(i);\n    segmentPaths[i] = new Path(testDir, segmentName);\n  }\n\n  // Create the first segment according to the specified status\n  createSegment(segmentPaths[0], firstStatus, false);\n\n  // Create N segments with random status and optionally with randomized\n  // redirect injection\n  for (int i = 1; i < rounds - 1; i++) {\n    // Status, 6 possibilities incremented with 33 hex\n    byte status = (byte) (rnd.nextInt(6) + 0x21);\n\n    // Whether this is going to be a redirect\n    boolean addRedirect = redirect ? rnd.nextBoolean() : false;\n    // If it's a redirect we add a datum resulting from a fetch at random,\n    // if not: always add a fetch datum to avoid empty segments\n    boolean addFetch = addRedirect ? rnd.nextBoolean() : true;\n\n    createSegment(segmentPaths[i], status, addFetch, addRedirect);\n  }\n\n  // Create the last segment according to the specified status\n  // (additionally, add a redirect at random)\n  createSegment(segmentPaths[rounds - 1], lastStatus, true,\n      redirect ? rnd.nextBoolean() : false);\n\n  // Merge the segments!\n  Path mergedSegment = merge(testDir, segmentPaths);\n\n  // Check the status of the final record and return it\n  return checkMergedSegment(testDir, mergedSegment);\n}", "path": "nutch/src/test/org/apache/nutch/segment/TestSegmentMergerCrawlDatums.java", "commit_date": "2018-08-11 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/** Skips over one Outlink in the input. */\n", "func_signal": "public static void skip(DataInput in) throws IOException", "code": "{\n  Text.skip(in); // skip toUrl\n  Text.skip(in); // skip anchor\n  boolean hasMD = in.readBoolean();\n  if (hasMD) {\n    MapWritable metadata = new org.apache.hadoop.io.MapWritable();\n    metadata.readFields(in);\n    ;\n  }\n}", "path": "nutch/src/java/org/apache/nutch/parse/Outlink.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * Opens each configured exchange.\n */\n", "func_signal": "public void open()", "code": "{\n  exchanges.forEach(\n      (id, value) -> value.exchange.open(value.config.getParameters()));\n}", "path": "nutch/src/java/org/apache/nutch/exchange/Exchanges.java", "commit_date": "2019-08-28 00:00:00", "repo_name": "apache/nutch", "stars": 2774, "license": "apache-2.0", "language": "java", "size": 137646}
{"docstring": "/**\n * get result by cluster_id\n *\n * @param clusterId cluster_id\n * @return RDBAnalyzeResult \u4e0d\u5305\u542b cluster_id \u548c scheduleId\n */\n", "func_signal": "private RDBAnalyzeResult selectLatestResultByRID(Long clusterId, Long scheduleId)", "code": "{\n    if (null == clusterId) {\n        return null;\n    }\n    RDBAnalyzeResult result = null;\n    try {\n        result = rdbAnalyzeResultMapper.selectLatestResultByRedisInfoId(clusterId, scheduleId);\n    } catch (Exception e) {\n        LOG.error(\"selectLatestResultByRedisInfoId failed!\", e);\n    }\n    return result;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u63d2\u5165\u6570\u636e\u5e93\uff0c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\n *\n * @param rdbAnalyze\n * @param data\n * @return\n */\n", "func_signal": "@Override\npublic RDBAnalyzeResult reportDataWriteToDb(RDBAnalyze rdbAnalyze, Map<String, String> data)", "code": "{\n    try {\n        Long scheduleId = AppCache.scheduleProcess.get(rdbAnalyze.getId());\n        Long redisClusterId = rdbAnalyze.getClusterId();\n        IAnalyzeDataConverse analyzeDataConverse = null;\n//            Map<String, String> dbResult = new HashMap<>();\n//            for (Map.Entry<String, Set<String>> entry : data.entrySet()) {\n//                System.out.println(\"key:\"+entry.getKey());\n//                analyzeDataConverse = ReportDataConverseFacotry.getReportDataConverse(entry.getKey());\n//                if (null != analyzeDataConverse) {\n//                    dbResult.putAll(analyzeDataConverse.getMapJsonString(entry.getValue()));\n//\n//                }\n//            }\n//            Map<String, String> finalDbResult = combinePrefixKey(dbResult);\n        String result = JSON.toJSONString(data);\n        RDBAnalyzeResult rdbAnalyzeResult = null;\n        rdbAnalyzeResult = rdbAnalyzeResultMapper.selectByRedisIdAndSId(redisClusterId, scheduleId);\n        rdbAnalyzeResult.setResult(result);\n        rdbAnalyzeResult.setDone(true);\n        rdbAnalyzeResultMapper.updateResult(rdbAnalyzeResult);\n        return rdbAnalyzeResult;\n    } catch (Exception e) {\n        LOG.error(\"reportDataWriteToDb write to db error!\", e);\n    }\n    return null;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u4f20\u5165\u4e0d\u540c\u7684 param \u83b7\u53d6\u76f8\u5e94\u7684\u6570\u636e\n *\n * @param nodeInfoParam\n * @return\n */\n", "func_signal": "@Override\npublic List<NodeInfo> getNodeInfoList(NodeInfoParam nodeInfoParam)", "code": "{\n    if (!verifyParam(nodeInfoParam)) {\n        return null;\n    }\n    NodeInfoParam parameterCorrection = parameterCorrection(nodeInfoParam);\n    try {\n        if (!Strings.isNullOrEmpty(parameterCorrection.getInfoItem())) {\n            return nodeInfoDao.selectNodeInfoListWithInfoItem(parameterCorrection);\n        }\n        return nodeInfoDao.selectNodeInfoList(parameterCorrection);\n    } catch (Exception e) {\n        logger.error(\"Get node info failed, \" + parameterCorrection, e);\n        return null;\n    }\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/NodeInfoService.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u53c2\u6570\u7ea0\u6b63\uff0c\u9632\u6b62\u67e5\u8be2\u4e0d\u5230\u6570\u636e\u6216\u6570\u636e\u8fc7\u591a\n *\n * @param nodeInfoParam\n * @return\n */\n", "func_signal": "private NodeInfoParam parameterCorrection(NodeInfoParam nodeInfoParam)", "code": "{\n    Timestamp startTime = nodeInfoParam.getStartTime();\n    Timestamp endTime = nodeInfoParam.getEndTime();\n    if (endTime == null) {\n        endTime = TimeUtil.getCurrentTimestamp();\n        nodeInfoParam.setEndTime(endTime);\n    }\n    if (startTime == null) {\n        startTime = TimeUtil.getDefaultLastTimestamp();\n        nodeInfoParam.setStartTime(startTime);\n    }\n    // endTime <= startTime\n    if (endTime.getTime() - startTime.getTime() <= 0) {\n        endTime = TimeUtil.getCurrentTimestamp();\n        startTime = TimeUtil.getDefaultLastTimestamp();\n        nodeInfoParam.setEndTime(endTime);\n        nodeInfoParam.setStartTime(startTime);\n    }\n    List<String> nodeList = nodeInfoParam.getNodeList();\n    if (nodeList == null || nodeList.isEmpty()) {\n        List<RedisNode> redisNodes = redisNodeDao.selectRedisNodeListByCluster(nodeInfoParam.getClusterId());\n        nodeList = new LinkedList<>();\n        for (RedisNode redisNode : redisNodes) {\n            nodeList.add(RedisUtil.getNodeString(redisNode));\n        }\n        nodeInfoParam.setNodeList(nodeList);\n    }\n    return nodeInfoParam;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/NodeInfoService.java", "commit_date": "2020-04-05 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u83b7\u53d6\u4e0a\u4e00\u6b21\u7684\u6570\u636e\u8f6c\u6362\u4e3aReportData\n *\n * @param clusterId clusterId\n * @return Map\n */\n", "func_signal": "@Override\npublic Map<String, ReportData> getReportDataLatest(Long clusterId, Long scheduleId)", "code": "{\n    if (null == clusterId) {\n        return null;\n    }\n    RDBAnalyzeResult rdbAnalyzeResult = selectLatestResultByRID(clusterId, scheduleId);\n    if (null == rdbAnalyzeResult) {\n        return null;\n    }\n    JSONArray countResult = getJSONArrayFromResultByKey(rdbAnalyzeResult.getResult(), IAnalyzeDataConverse.PREFIX_KEY_BY_COUNT);\n    JSONArray memResult = getJSONArrayFromResultByKey(rdbAnalyzeResult.getResult(), IAnalyzeDataConverse.PREFIX_KEY_BY_MEMORY);\n    return getPrefixReportData(countResult, memResult);\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u6839\u636eID\u5224\u65ad\u662f\u5426\u5206\u6790\u5b8c\u6210\n * \n * @param RDBAnalyze\n *            rdbAnalyze\n * @return\n */\n", "func_signal": "public static boolean isAnalyzeComplete(RDBAnalyze rdbAnalyze)", "code": "{\n\tList<ScheduleDetail> scheduleDetails = scheduleDetailMap.get(rdbAnalyze.getId());\n\tif (scheduleDetails != null && scheduleDetails.size() > 0) {\n\t\tboolean status = true;\n\t\tfor (ScheduleDetail scheduleDetail : scheduleDetails) {\n\t\t\tif (!AnalyzeStatus.DONE.equals(scheduleDetail.getStatus())) {\n\t\t\t\tstatus = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn status;\n\t}\n\treturn false;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/plugin/rct/cache/AppCache.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * get list keyPrefix\n * @param result result\n * @return List<String> keyPrefix\n */\n", "func_signal": "private List<JSONObject> getAllKeyPrefixByResult(String result)", "code": "{\n    List<JSONObject> resultJsonObj = new ArrayList<>(500);\n    if(null == result || \"\".equals(result.trim())) {\n        return resultJsonObj;\n    }\n    JSONArray jsonArray = getJSONArrayFromResultByKey(result, IAnalyzeDataConverse.PREFIX_KEY_BY_COUNT);\n    if(null == jsonArray) {\n        return resultJsonObj;\n    }\n    JSONObject oneRow;\n    JSONObject jsonObject;\n    for(Object obj : jsonArray) {\n        oneRow = (JSONObject) obj;\n        jsonObject = new JSONObject();\n        jsonObject.put(\"value\", oneRow.getString(\"prefixKey\"));\n        jsonObject.put(\"label\", oneRow.getString(\"prefixKey\"));\n        resultJsonObj.add(jsonObject);\n    }\n    return resultJsonObj;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u6839\u636erdbAnalyzeID\u5224\u65ad\u662f\u5426\u9700\u8981\u7ee7\u7eed\u83b7\u53d6\u5206\u6790\u5668\u6267\u884c\u72b6\u6001\n * \n * @param rdbAnalyzeID\n * @return\n */\n", "func_signal": "public static boolean isNeedAnalyzeStastus(Long rdbAnalyzeID)", "code": "{\n\tList<ScheduleDetail> scheduleDetails = scheduleDetailMap.get(rdbAnalyzeID);\n\tif (scheduleDetails != null && scheduleDetails.size() > 0) {\n\t\tboolean status = false;\n\t\tfor (ScheduleDetail scheduleDetail : scheduleDetails) {\n\t\t\tif (!(AnalyzeStatus.DONE.equals(scheduleDetail.getStatus())\n\t\t\t\t\t|| AnalyzeStatus.CANCELED.equals(scheduleDetail.getStatus())\n\t\t\t\t\t\t|| AnalyzeStatus.ERROR.equals(scheduleDetail.getStatus()))) {\n\t\t\t\tstatus = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn status;\n\t}\n\treturn false;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/plugin/rct/cache/AppCache.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u66f4\u65b0\u6240\u6709 redis node \u72b6\u6001\n *\n * @param cluster\n * @return \u5982\u679c\u8282\u70b9\u6709\u95ee\u9898\uff0c\u5219\u6539\u53d8 cluster state \u4e3a WARN\n */\n", "func_signal": "private Cluster.ClusterState updateRedisNodeState(Cluster cluster)", "code": "{\n    Cluster.ClusterState clusterState = Cluster.ClusterState.HEALTH;\n    List<RedisNode> redisNodeList = redisNodeService.getMergedRedisNodeList(cluster.getClusterId());\n    for (RedisNode redisNode : redisNodeList) {\n        boolean runStatus = redisNode.getRunStatus();\n        boolean inCluster = redisNode.getInCluster();\n        String flags = redisNode.getFlags();\n        boolean flagsNormal = Objects.equals(flags, SLAVE.getValue()) || Objects.equals(flags, MASTER.getValue());\n        String linkState = redisNode.getLinkState();\n        NodeRole nodeRole = redisNode.getNodeRole();\n        // \u8282\u70b9\u89d2\u8272\u4e3a UNKNOWN\n        boolean nodeRoleNormal = Objects.equals(nodeRole, MASTER) || Objects.equals(nodeRole, SLAVE);\n        if (!runStatus || !inCluster || !flagsNormal || !Objects.equals(linkState, CONNECTED) || !nodeRoleNormal) {\n            clusterState = Cluster.ClusterState.WARN;\n        }\n        redisNodeService.updateRedisNode(redisNode);\n    }\n    return clusterState;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/schedule/ClusterUpdateSchedule.java", "commit_date": "2020-04-20 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u8fd9\u91cc\u53ef\u80fd\u4e0d\u662f\u7279\u522b\u5408\u7406\uff0c\u53ea\u4e3a\u5b9e\u73b0\u529f\u80fd\n */\n", "func_signal": "private Integer getOperationGroupId(Object[] args)", "code": "{\n    Object arg = args[0];\n    Integer operationGroupId = -1;\n    if (arg instanceof JSONObject){\n        operationGroupId = (Integer)((JSONObject)arg).get(\"groupId\");\n    }else{\n        if (arg instanceof List) {\n            JSONArray argArray = (JSONArray)JSONObject.toJSON(arg);\n            JSONObject jsonObject = (JSONObject)argArray.get(0);\n            operationGroupId = (Integer)jsonObject.get(\"groupId\");\n        }else {\n            if (arg instanceof InstallationParam){\n                InstallationParam installationParam = (InstallationParam)arg;\n                Cluster cluster = installationParam.getCluster();\n                operationGroupId = cluster.getGroupId();\n            }else{\n                JSONObject argJson = (JSONObject)JSONObject.toJSON(arg);\n                operationGroupId = (Integer)argJson.get(\"groupId\");\n            }\n        }\n    }\n\n    return operationGroupId;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/aop/aspect/OperationLogAspect.java", "commit_date": "2019-12-03 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u5c06\u6570\u636e\u4e2d\u7ed3\u679c\u8f6c\u6362\u4e3a \u6298\u7ebf\u56fe\u9700\u8981\u7684\u5bf9\u8c61\n *\n * @param rdbAnalyzeResult\n * @return\n */\n", "func_signal": "private Map<String, JSONObject> getMapJSONByResult(RDBAnalyzeResult rdbAnalyzeResult, JSONArray arrayResult)", "code": "{\n    Map<String, JSONObject> result = new HashMap<>(500);\n    Long scheduleId = rdbAnalyzeResult.getScheduleId();\n    JSONObject object;\n    for (Object obj : arrayResult) {\n        object = (JSONObject) obj;\n        object.put(\"scheduleId\", scheduleId);\n        result.put(object.getString(\"prefixKey\"), object);\n    }\n    JSONObject scheduleIdJson = new JSONObject();\n    scheduleIdJson.put(\"scheduleId\", scheduleId);\n    result.put(\"scheduleId\", scheduleIdJson);\n    return result;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n *\n * @param\n * @return boolean true: has task running false: no task running\n */\n", "func_signal": "@Override\npublic boolean ifRDBAnalyzeIsRunning(Long id)", "code": "{\n    List<ScheduleDetail> scheduleDetail = AppCache.scheduleDetailMap.get(id);\n    // default no task running\n    boolean result = false;\n    if (scheduleDetail != null && scheduleDetail.size() > 0) {\n        for (ScheduleDetail scheduleDetails : scheduleDetail) {\n            AnalyzeStatus status = scheduleDetails.getStatus();\n            if ((!status.equals(AnalyzeStatus.DONE)) && (!status.equals(AnalyzeStatus.CANCELED))\n                    && (!status.equals(AnalyzeStatus.ERROR))) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * Check free memory of machine\n * Check ports\n *\n * @param installationParam\n * @return\n */\n", "func_signal": "public boolean checkInstallationEnv(InstallationParam installationParam)", "code": "{\n    boolean commonCheck = true;\n    String clusterName = installationParam.getCluster().getClusterName();\n    List<Machine> machineList = installationParam.getMachineList();\n    for (Machine machine : machineList) {\n        String host = machine.getHost();\n        Map<String, String> info = null;\n        try {\n            info = LinuxInfoUtil.getLinuxInfo(machine);\n        } catch (Exception e) {\n            String message = \"Get \" + host + \" info failed\";\n            InstallationLogContainer.appendLog(clusterName, message);\n            InstallationLogContainer.appendLog(clusterName, e.getMessage());\n            logger.error(message, e);\n            commonCheck = false;\n        }\n        String memoryFreeStr = info.get(MEMORY_FREE);\n        if (Strings.isNullOrEmpty(memoryFreeStr)) {\n            InstallationLogContainer.appendLog(clusterName, \"Can't get \" + host + \" memory info.\");\n            commonCheck = false;\n        } else {\n            Integer memoryFree = Integer.valueOf(memoryFreeStr);\n            if (memoryFree <= MIN_MEMORY_FREE) {\n                InstallationLogContainer.appendLog(clusterName, host + \" not enough memory, free memory: \" + memoryFree);\n                commonCheck = false;\n            }\n        }\n        // no check\n        commonCheck = true;\n    }\n    return commonCheck && checkEnvironment(installationParam);\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/plugin/install/service/AbstractNodeOperation.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "// \u83b7\u53d6\u6307\u5b9a\u7c7b\u578b\u7684TopKey\u6570\u636e\n", "func_signal": "private JSONArray getTopKeyFromResultByKey(String result, Long type)", "code": "{\n    if (StringUtils.isNotBlank(result)) {\n        JSONObject resultJsonObj = JSONObject.parseObject(result);\n        if(resultJsonObj != null && resultJsonObj.containsKey(IAnalyzeDataConverse.TOP_KEY_ANALYZE)){\n            JSONObject topKeyData = JSONObject.parseObject(resultJsonObj.getString(IAnalyzeDataConverse.TOP_KEY_ANALYZE));\n            return topKeyData.getJSONArray(String.valueOf(type));\n        }\n    }\n    return null;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u6570\u636e\u8f6c\u6362\n *\n * @param arrayResult\n * @return\n */\n", "func_signal": "private Map<String, JSONObject> getMapJsonPrefixByResult(JSONArray arrayResult)", "code": "{\n    Map<String, JSONObject> result = new HashMap<>(500);\n    JSONObject object;\n    if (null != arrayResult && !arrayResult.isEmpty()) {\n        for (Object obj : arrayResult) {\n            object = (JSONObject) obj;\n            result.put(object.getString(\"prefixKey\"), object);\n        }\n    }\n    return result;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * get all keyPrefix by analyzeResultId\n * @param analyzeResultId id\n * @return List<JSONObject>\n */\n", "func_signal": "public List<JSONObject> getAllKeyPrefixById(Long analyzeResultId)", "code": "{\n    RDBAnalyzeResult result = selectResultById(analyzeResultId);\n    return getAllKeyPrefixByResult(result.getResult());\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * consume queue 2 save db\n */\n", "func_signal": "private void saveLogs()", "code": "{\n    while (true) {\n        try {\n            OperationLog log = operationLogs.poll(5, TimeUnit.MILLISECONDS);\n            if (log != null) {\n                operationLogService.insertLog(log);\n            }\n        } catch (Exception e) {\n            logger.error(\"insert operation log to db error\", e);\n        }\n    }\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/aop/aspect/OperationLogAspect.java", "commit_date": "2019-12-03 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * get Redis Id Base\n *\n * @return rdb_analyze.id\n */\n", "func_signal": "@Override\npublic Long getRedisIDBasePID(Long cluster_id)", "code": "{\n    if (null == cluster_id) {\n        return null;\n    }\n    return iRdbAnalyze.getRDBAnalyzeIdByCluster_id(cluster_id);\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * \u6267\u884cRDB\u5206\u6790\u4efb\u52a1\n *\n * @param id\n * @return { status\uff1atrue/false, message:\"....\" }\n */\n", "func_signal": "@Override\npublic JSONObject allocationRDBAnalyzeJob(Long id)", "code": "{\n    RDBAnalyze rdbAnalyze = this.selectById(id);\n    return allocationRDBAnalyzeJob(rdbAnalyze);\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "/**\n * @param prefixKey       \u56fa\u5b9a\u524d\u7f00\n * @param resultObjecList result\n * @param columnName      \u83b7\u53d6\u7684\u5217\n * @param top             top\n * @return\n */\n", "func_signal": "private List<String> getcolumnKeyList(String prefixKey, List<JSONObject> resultObjecList, String columnName,\n                                      int top)", "code": "{\n    List<String> prefixKeyList = new ArrayList<>(10);\n    if (null == prefixKey || \"\".equals(prefixKey)) {\n        if (top == -1) {\n            top = resultObjecList.size();\n        }\n        int i = 0;\n        for (JSONObject tempObj : resultObjecList) {\n            if (i >= top) {\n                break;\n            }\n            prefixKeyList.add(tempObj.getString(columnName));\n            i++;\n        }\n    } else {\n        prefixKeyList.add(prefixKey);\n    }\n    return prefixKeyList;\n}", "path": "redis-manager/redis-manager-dashboard/src/main/java/com/newegg/ec/redis/service/impl/RdbAnalyzeResultService.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "ngbdf/redis-manager", "stars": 2909, "license": "apache-2.0", "language": "java", "size": 119017}
{"docstring": "//\u7528\u4e8e\u6d41\u5f0f\u4f20\u8f93\uff08\u4f8b\u5982tcp\uff09\u60c5\u51b5\u4e0b\uff0c\u5224\u65adbuf\u91cc\u662f\u5426\u83b7\u5f97\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684package\n// \u8fd4\u56de\u503c\uff1a\u5c0f\u4e8e0\u8868\u793a\u683c\u5f0f\u975e\u6cd5  \u7b49\u4e8e0\u8868\u793a\u6ca1\u6709\u6536\u5b8c\u6574\u8fd8\u9700\u8981\u7ee7\u7eed\u63a5\u6536  \u5927\u4e8e0\u8868\u793a\u6536\u5230\u4e86\u5b8c\u6574\u7684\u62a5\u6587\uff0c\u62a5\u6587\u957f\u5ea6\u4f5c\u4e3a\u8fd4\u56de\u503c\n", "func_signal": "static public int isWholePackage(byte[] buf, int offset, int len)", "code": "{\n    if (buf[offset] != 0x28)\n    {\n        return -1;\n    }\n    if (len < 10)\n    {\n        return -1;\n    }\n    byte[] lenBytes = new byte[4];\n    for (int i = 0; i < 4; i++) {\n        lenBytes[i] = buf[offset+1+i];\n    }\n    int headLen = bytes2int(lenBytes);\n    if (headLen < 0) { return -1;}\n\n    for (int i = 0; i < 4; i++) {\n        lenBytes[i] = buf[offset+5+i];\n    }\n    int bodyLen = bytes2int(lenBytes);\n    if (bodyLen < 0) { return -1;}\n\n    if ( ( 2+4+4+headLen+bodyLen) <= len)\n    {\n        return ( 2+4+4+headLen+bodyLen);\n    }\n    else {\n        return 0;\n    }\n\n}", "path": "MSEC/spp_rpc/src/rpc/java/WholePackage.java", "commit_date": "2017-01-06 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u5931\u8d25\u5c31\u8fd4\u56denull\n", "func_signal": "public Connection getConnection()", "code": "{\n     try {\n\n         connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);\n\n     } catch (SQLException e) {\n         e.printStackTrace();\n         return null;\n     }\n     return connection;\n }", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/DBUtil.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u4e3b\u52a8\u7ed3\u675f\u548c\u6570\u636e\u5e93\u7684\u8fde\u63a5\n", "func_signal": "public void releaseConn()", "code": "{\n    if(resultSet != null){\n        try{\n            resultSet.close();\n        }catch(SQLException e){\n            e.printStackTrace();\n        }\n    }\n}", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/DBUtil.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u8fd4\u56de\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c \u4f7f\u7528java\u53cd\u5c04\u673a\u5236\uff0c\u5c06\u8bb0\u5f55\u6620\u5c04\u5230java\u7c7bT\n", "func_signal": "public <T> ArrayList<T> findMoreRefResult(String sql, List<Object> params,\n                                     Class<T> cls )throws Exception", "code": "{\n    ArrayList<T> list = new ArrayList<T>();\n    int index = 1;\n    pstmt = connection.prepareStatement(sql);\n    if(params != null && !params.isEmpty()){\n        for(int i = 0; i<params.size(); i++){\n            pstmt.setObject(index++, params.get(i));\n        }\n    }\n    resultSet = pstmt.executeQuery();\n    ResultSetMetaData metaData  = resultSet.getMetaData();\n    int cols_len = metaData.getColumnCount();\n    while(resultSet.next()){\n        T resultObject = cls.newInstance();\n        for(int i = 0; i<cols_len; i++){\n            String cols_name = metaData.getColumnName(i+1);\n            Object cols_value = resultSet.getObject(cols_name);\n\n            if(cols_value == null){\n                cols_value = \"\";\n            }\n            Field field = cls.getDeclaredField(cols_name);\n            field.setAccessible(true); //\ufffd\ufffdjavabean\ufffd\u0137\ufffd\ufffd\ufffd\u0228\ufffd\ufffd\n            field.set(resultObject, cols_value);\n        }\n        list.add(resultObject);\n    }\n    resultSet.close();\n    pstmt.close();\n    return list;\n}", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/DBUtil.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u53ea\u8fd4\u56de\u4e00\u6761\u8bb0\u5f55\uff0c\u8be5\u8bb0\u5f55\u7684\u5b57\u6bb5\u4fdd\u5b58\u5728Map\u91cc\u8fd4\u56de\uff0c\u5b57\u6bb5\u540d\u4f5c\u4e3akey\uff0c\u5b57\u6bb5\u503c\u4f5c\u4e3avalue\n", "func_signal": "public Map<String, Object> findSimpleResult(String sql, List<Object> params) throws SQLException", "code": "{\n    Map<String, Object> map = new HashMap<String, Object>();\n    int index  = 1;\n    pstmt = connection.prepareStatement(sql);\n    if(params != null && !params.isEmpty()){\n        for(int i=0; i<params.size(); i++){\n            pstmt.setObject(index++, params.get(i));\n        }\n    }\n    resultSet = pstmt.executeQuery();\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    int col_len = metaData.getColumnCount();\n    if (resultSet.next()){\n        for(int i=0; i<col_len; i++ ){\n            String cols_name = metaData.getColumnName(i+1);\n            Object cols_value = resultSet.getObject(cols_name);\n            if(cols_value == null){\n                cols_value = \"\";\n            }\n            map.put(cols_name, cols_value);\n        }\n    }\n    resultSet.close();\n    pstmt.close();\n    return map;\n}", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/DBUtil.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u5206\u53f7\u5206\u5272\u7684\u5b57\u7b26\u4e32\u5206\u5272\u4e3a\u5b57\u7b26\u4e32\u5217\u8868\n", "func_signal": "public static ArrayList<String> splitBySemicolon(String s)", "code": "{\n    ArrayList<String> ret = new ArrayList<String>();\n    int fromIndex = 0;\n    while (true)\n    {\n        int index = s.indexOf(\";\", fromIndex);\n        if (index >= 0)\n        {\n            String sub = s.substring(fromIndex, index);\n            if (sub.length() > 0)\n            {\n                ret.add(sub);\n            }\n            fromIndex = index + 1;\n        }\n        else\n        {\n            if (fromIndex < s.length())\n            {\n                String sub = s.substring(fromIndex);\n                if (sub.length() > 0)\n                {\n                    ret.add(sub);\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n}", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/Tools.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u5931\u8d25\u5c31\u8fd4\u56denull\n", "func_signal": "public Connection getConnection()", "code": "{\n     Logger logger = Logger.getLogger(DBUtil.class);\n     try {\n         connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);\n     } catch (SQLException e) {\n         logger.error(e);\n         return null;\n     }\n     return connection;\n }", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/DBUtil.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u53ea\u8fd4\u56de\u4e00\u6761\u8bb0\u5f55\uff0c \u4f7f\u7528java\u53cd\u5c04\u673a\u5236\uff0c\u5c06\u8bb0\u5f55\u6620\u5c04\u5230java\u7c7bT\n", "func_signal": "public <T> T findSimpleRefResult(String sql, List<Object> params,\n                                 Class<T> cls )throws Exception", "code": "{\n    T resultObject = null;\n    int index = 1;\n    pstmt = connection.prepareStatement(sql);\n    if(params != null && !params.isEmpty()){\n        for(int i = 0; i<params.size(); i++){\n            pstmt.setObject(index++, params.get(i));\n        }\n    }\n    resultSet = pstmt.executeQuery();\n    ResultSetMetaData metaData  = resultSet.getMetaData();\n    int cols_len = metaData.getColumnCount();\n    while(resultSet.next()){\n        resultObject = cls.newInstance();\n        for(int i = 0; i<cols_len; i++){\n            String cols_name = metaData.getColumnName(i+1);\n            Object cols_value = resultSet.getObject(cols_name);\n            if(cols_value == null){\n                cols_value = \"\";\n            }\n            Field field = cls.getDeclaredField(cols_name);\n            field.setAccessible(true);\n            field.set(resultObject, cols_value);\n        }\n    }\n    resultSet.close();\n    pstmt.close();\n    return resultObject;\n\n}", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/DBUtil.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u957f\u5ea6\u6574\u6570\u8f6c\u5316\u4e3a\u5927\u7aef\u56db\u5b57\u8282\u6574\u6570\n", "func_signal": "static public byte[] int2Bytes(int i)", "code": "{\n    byte[] b = new byte[4];\n    int v = 256 * 256 * 256;\n    for (int j = 0; j < 3; j++) {\n        b[j] = (byte)(i / v);\n        i = i % v;\n        v = v / 256;\n    }\n    b[3] = (byte)i;\n\n    return b;\n}", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/Tools.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u53ea\u8fd4\u56de\u4e00\u6761\u8bb0\u5f55\uff0c \u4f7f\u7528java\u53cd\u5c04\u673a\u5236\uff0c\u5c06\u8bb0\u5f55\u6620\u5c04\u5230java\u7c7bT\n", "func_signal": "public <T> T findSimpleRefResult(String sql, List<Object> params,\n                                 Class<T> cls )throws Exception", "code": "{\n    T resultObject = null;\n    int index = 1;\n    pstmt = connection.prepareStatement(sql);\n    if(params != null && !params.isEmpty()){\n        for(int i = 0; i<params.size(); i++){\n            pstmt.setObject(index++, params.get(i));\n        }\n    }\n    resultSet = pstmt.executeQuery();\n    ResultSetMetaData metaData  = resultSet.getMetaData();\n    int cols_len = metaData.getColumnCount();\n    while(resultSet.next()){\n        resultObject = cls.newInstance();\n        for(int i = 0; i<cols_len; i++){\n            String cols_name = metaData.getColumnName(i+1);\n            Object cols_value = resultSet.getObject(cols_name);\n            if(cols_value == null){\n                cols_value = \"\";\n            }\n            Field field = cls.getDeclaredField(cols_name);\n            field.setAccessible(true);\n            field.set(resultObject, cols_value);\n        }\n    }\n    resultSet.close();\n    pstmt.close();\n    return resultObject;\n\n}", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/DBUtil.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u4e3b\u52a8\u7ed3\u675f\u548c\u6570\u636e\u5e93\u7684\u8fde\u63a5\n", "func_signal": "public void releaseConn()", "code": "{\n    Logger logger = Logger.getLogger(DBUtil.class);\n    try {\n        if (resultSet != null) {\n            resultSet.close();\n        }\n        if (connection != null) {\n            connection.close();\n        }\n    }\n    catch(SQLException e){\n        logger.error(e);\n    }\n}", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/DBUtil.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u8fd4\u56de\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c \u4f7f\u7528java\u53cd\u5c04\u673a\u5236\uff0c\u5c06\u8bb0\u5f55\u6620\u5c04\u5230java\u7c7bT\n", "func_signal": "public <T> ArrayList<T> findMoreRefResult(String sql, List<Object> params,\n                                     Class<T> cls )throws Exception", "code": "{\n    ArrayList<T> list = new ArrayList<T>();\n    int index = 1;\n    pstmt = connection.prepareStatement(sql);\n    if(params != null && !params.isEmpty()){\n        for(int i = 0; i<params.size(); i++){\n            pstmt.setObject(index++, params.get(i));\n        }\n    }\n    resultSet = pstmt.executeQuery();\n    ResultSetMetaData metaData  = resultSet.getMetaData();\n    int cols_len = metaData.getColumnCount();\n    while(resultSet.next()){\n        T resultObject = cls.newInstance();\n        for(int i = 0; i<cols_len; i++){\n            String cols_name = metaData.getColumnName(i+1);\n            Object cols_value = resultSet.getObject(cols_name);\n\n            if(cols_value == null){\n                cols_value = \"\";\n            }\n            Field field = cls.getDeclaredField(cols_name);\n            field.setAccessible(true); //\ufffd\ufffdjavabean\ufffd\u0137\ufffd\ufffd\ufffd\u0228\ufffd\ufffd\n            field.set(resultObject, cols_value);\n        }\n        list.add(resultObject);\n    }\n    resultSet.close();\n    pstmt.close();\n    return list;\n}", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/DBUtil.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//fork\u8fdb\u7a0b\u6267\u884c\u547d\u4ee4\n// cmd: \u547d\u4ee4\u6587\u4ef6\n// sb\uff1a \u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u7684\u5185\u5bb9\u4fdd\u5b58\uff0c\u53ef\u4ee5\u4e3anull\n// waitFlag\uff1a\u662f\u5426\u7b49\u5b50\u8fdb\u7a0b\u7ed3\u675f\u518d\u51fd\u6570\u8fd4\u56de\n", "func_signal": "static public int runCommand(String[] cmd, StringBuffer sb, boolean waitflag )", "code": "{\n\n    Process pid = null;\n    ProcessBuilder build = new ProcessBuilder(cmd);\n    build.redirectErrorStream(true);\n    try {\n        pid = build.start();\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n        return -1;\n    }\n    if (sb != null) {\n        //BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(pid.getInputStream()), 1024);\n        InputStream in = pid.getInputStream();\n        byte[] buf = new byte[10240];\n        try {\n            while (true)\n            {\n                int len = in.read(buf);\n                if (len <= 0)\n                {\n                    break;\n                }\n                sb.append(new String(buf, 0, len));\n            }\n        }\n        catch (Exception e)   { }\n\n    }\n    if (waitflag) {\n        try {\n            pid.waitFor();\n            int v = pid.exitValue();\n            pid.destroy();\n            return v;\n        }catch (Exception e ){}\n    }\n    return 0;\n}", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/Tools.java", "commit_date": "2016-12-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u589e\u5220\u6539\u6570\u636e\u5e93\uff0c\u5e76\u8fd4\u56de\u5f71\u54cd\u7684\u8bb0\u5f55\u7684\u6761\u6570\n", "func_signal": "public int updateByPreparedStatement(String sql, List<Object>params)throws SQLException", "code": "{\n     boolean flag = false;\n     int result = -1;\n     pstmt = connection.prepareStatement(sql);\n     int index = 1;\n     if(params != null && !params.isEmpty()){\n         for(int i=0; i<params.size(); i++){\n             pstmt.setObject(index++, params.get(i));\n         }\n     }\n     result = pstmt.executeUpdate();\n     pstmt.close();\n     return result;\n }", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/DBUtil.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u8bb0\u5f55\uff0c\u6bcf\u6761\u8bb0\u5f55\u4fdd\u5b58\u4e00\u4e2amap\uff0c\u5b57\u6bb5\u540d\u4f5c\u4e3akey\uff0c\u5b57\u6bb5\u503c\u4f5c\u4e3avalue\n", "func_signal": "public ArrayList<Map<String, Object>> findModeResult(String sql, List<Object> params) throws SQLException", "code": "{\n    ArrayList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();\n    int index = 1;\n    pstmt = connection.prepareStatement(sql);\n    if(params != null && !params.isEmpty()){\n        for(int i = 0; i<params.size(); i++){\n            pstmt.setObject(index++, params.get(i));\n        }\n    }\n    resultSet = pstmt.executeQuery();\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    int cols_len = metaData.getColumnCount();\n    while(resultSet.next()){\n        Map<String, Object> map = new HashMap<String, Object>();\n        for(int i=0; i<cols_len; i++){\n            String cols_name = metaData.getColumnName(i+1);\n            Object cols_value = resultSet.getObject(cols_name);\n            if(cols_value == null){\n                cols_value = \"\";\n            }\n            map.put(cols_name, cols_value);\n        }\n        list.add(map);\n    }\n    resultSet.close();\n    pstmt.close();\n\n    return list;\n}", "path": "MSEC/monitor/standalone_console/monitor_console/src/msec/org/DBUtil.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u6587\u4ef6\u4f20\u8f93\u7684\u6839\u76ee\u5f55\n", "func_signal": "@Override\n    public void init(javax.servlet.ServletConfig config) throws ServletException", "code": "{\n\n        //System.out.println(\"Log4JInitServlet \u6b63\u5728\u521d\u59cb\u5316 log4j\u65e5\u5fd7\u8bbe\u7f6e\u4fe1\u606f\");\n        String log4jLocation = config.getInitParameter(\"log4j-properties-location\");\n        fileServerRootDir = config.getInitParameter(\"FileServerRootDir\");\n        if (fileServerRootDir == null)\n        {\n            fileServerRootDir = \"/home/files\";\n        }\n\n\n\n        ServletContext sc = config.getServletContext();\n\n        JsTea.context = sc;\n\n        if (log4jLocation == null) {\n            System.err.println(\"*** \u6ca1\u6709 log4j-properties-location \u521d\u59cb\u5316\u7684\u6587\u4ef6, \u6240\u4ee5\u4f7f\u7528 BasicConfigurator\u521d\u59cb\u5316\");\n            BasicConfigurator.configure();\n        } else {\n            String webAppPath = sc.getRealPath(\"/\");\n            String log4jProp = webAppPath + log4jLocation;\n            File yoMamaYesThisSaysYoMama = new File(log4jProp);\n            if (yoMamaYesThisSaysYoMama.exists()) {\n                //System.out.println(\"\u4f7f\u7528: \" + log4jProp+\"\u521d\u59cb\u5316\u65e5\u5fd7\u8bbe\u7f6e\u4fe1\u606f\");\n                PropertyConfigurator.configure(log4jProp);\n            } else {\n                System.err.println(\"*** \" + log4jProp + \" \u6587\u4ef6\u6ca1\u6709\u627e\u5230\uff0c \u6240\u4ee5\u4f7f\u7528 BasicConfigurator\u521d\u59cb\u5316\");\n                BasicConfigurator.configure();\n            }\n        }\n\n\n\n\n\n        super.init(config);\n    }", "path": "MSEC/redis/redis_console/src/msec/org/ServletConfig.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//fork\u8fdb\u7a0b\u6267\u884c\u547d\u4ee4\n// cmd: \u547d\u4ee4\u6587\u4ef6\n// sb\uff1a \u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u7684\u5185\u5bb9\u4fdd\u5b58\uff0c\u53ef\u4ee5\u4e3anull\n// waitFlag\uff1a\u662f\u5426\u7b49\u5b50\u8fdb\u7a0b\u7ed3\u675f\u518d\u51fd\u6570\u8fd4\u56de\n", "func_signal": "static public int runCommand(String[] cmd, StringBuffer sb, boolean waitflag )", "code": "{\n    Logger logger = Logger.getLogger(Tools.class);\n    Process pid = null;\n    ProcessBuilder build = new ProcessBuilder(cmd);\n    build.redirectErrorStream(true);\n    try {\n        pid = build.start();\n    }\n    catch (Exception e)\n    {\n        logger.error(e);\n        return -1;\n    }\n    if (sb != null) {\n        //BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(pid.getInputStream()), 1024);\n        InputStream in = pid.getInputStream();\n        byte[] buf = new byte[10240];\n        try {\n            while (true)\n            {\n                int len = in.read(buf);\n                if (len <= 0)\n                {\n                    break;\n                }\n                sb.append(new String(buf, 0, len));\n            }\n        }\n        catch (Exception e)   { }\n\n    }\n    if (waitflag) {\n        try {\n            pid.waitFor();\n            int v = pid.exitValue();\n            pid.destroy();\n            return v;\n        }catch (Exception e ){}\n    }\n    return 0;\n}", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/Tools.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05bd\ufffdbuf\u05ea\ufffd\ufffd\u03aa\ufffd\ufffd\ufffd\ufffdint\n", "func_signal": "static private int bytes2int(byte[] buf)", "code": "{\n        int v = 0;\n        int b0 = buf[0]; if (b0 < 0) { b0 += 256;}\n        int b1 = buf[1]; if (b1 < 0) { b1 += 256;}\n        int b2 = buf[2]; if (b2 < 0) { b2 += 256;}\n        int b3 = buf[3]; if (b3 < 0) { b3 += 256;}\n        v = b0 * (256*256*256) + b1 * (256*256) + b2*256 + b3;\n        return v;\n    }", "path": "MSEC/spp_rpc/src/rpc/java/WholePackage.java", "commit_date": "2017-01-06 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//safeWrite\u80fd\u591f\u907f\u514d\u56e0\u4e3a\u524d\u7aef\u6d4f\u89c8\u5668\u5173\u95ed\u4e86\u8fde\u63a5\u800c\u5bfc\u81f4\u53d1\u5e03\u6ca1\u6709\u6267\u884c\u4e0b\u53bb\n", "func_signal": "private void safeWrite(String s, ServletOutputStream out)", "code": "{\n    try\n    {\n        out.println(s);\n        out.flush();\n    }\n    catch (Exception e){}\n}", "path": "MSEC/msec_console/src/beans/service/RollbackReleasePlan.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "//\u589e\u5220\u6539\u6570\u636e\u5e93\uff0c\u5e76\u8fd4\u56de\u5f71\u54cd\u7684\u8bb0\u5f55\u7684\u6761\u6570\n", "func_signal": "public int updateByPreparedStatement(String sql, List<Object>params)throws SQLException", "code": "{\n     boolean flag = false;\n     int result = -1;\n     pstmt = connection.prepareStatement(sql);\n     int index = 1;\n     if(params != null && !params.isEmpty()){\n         for(int i=0; i<params.size(); i++){\n             pstmt.setObject(index++, params.get(i));\n         }\n     }\n     result = pstmt.executeUpdate();\n     pstmt.close();\n     return result;\n }", "path": "MSEC/elasticsearch/es_console/src/main/java/msec/org/DBUtil.java", "commit_date": "2017-03-16 00:00:00", "repo_name": "Tencent/MSEC", "stars": 2750, "license": "other", "language": "java", "size": 40131}
{"docstring": "/**\n * Inject a specific string into this terminal. Used for post-login strings\n * and pasting clipboard.\n */\n", "func_signal": "public void injectString(final String string)", "code": "{\n\tif (string == null || string.length() == 0)\n\t\treturn;\n\n\tThread injectStringThread = new Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\ttransport.write(string.getBytes(host.getEncoding()));\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.e(TAG, \"Couldn't inject string to remote host: \", e);\n\t\t\t}\n\t\t}\n\t});\n\tinjectStringThread.setName(\"InjectString\");\n\tinjectStringThread.start();\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Sets the encoding used by the terminal. If the connection is live,\n * then the character set is changed for the next read.\n * @param encoding the canonical name of the character encoding\n */\n", "func_signal": "public void setCharset(String encoding)", "code": "{\n\tif (relay != null)\n\t\trelay.setCharset(encoding);\n\tkeyListener.setCharset(encoding);\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Internal method to request actual PTY terminal once we've finished\n * authentication. If called before authenticated, it will just fail.\n */\n", "func_signal": "public void onConnected()", "code": "{\n\tdisconnected = false;\n\n\t((vt320) buffer).reset();\n\n\t// We no longer need our local output.\n\tlocalOutput.clear();\n\n\t// previously tried vt100 and xterm for emulation modes\n\t// \"screen\" works the best for color and escape codes\n\t((vt320) buffer).setAnswerBack(emulation);\n\n\tif (HostDatabase.DELKEY_BACKSPACE.equals(host.getDelKey()))\n\t\t((vt320) buffer).setBackspace(vt320.DELETE_IS_BACKSPACE);\n\telse\n\t\t((vt320) buffer).setBackspace(vt320.DELETE_IS_DEL);\n\n\tif (isSessionOpen()) {\n\t\t// create thread to relay incoming connection data to buffer\n\t\trelay = new Relay(this, transport, (vt320) buffer, host.getEncoding());\n\t\tThread relayThread = new Thread(relay);\n\t\trelayThread.setDaemon(true);\n\t\trelayThread.setName(\"Relay\");\n\t\trelayThread.start();\n\t}\n\n\t// force font-size to make sure we resizePTY as needed\n\tsetFontSize(fontSizeDp);\n\n\t// finally send any post-login string, if requested\n\tinjectString(host.getPostLogin());\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Disables a port forward member. After calling this method, the port forward should\n * be non-functioning.\n * @param portForward member of our current port forwards list to enable\n * @return true on successful port forward tear-down\n */\n", "func_signal": "public boolean disablePortForward(PortForwardBean portForward)", "code": "{\n\tif (!transport.isConnected()) {\n\t\tLog.i(TAG, \"Attempt to disable port forward while not connected\");\n\t\treturn false;\n\t}\n\n\treturn transport.disablePortForward(portForward);\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Resize terminal to fit [rows]x[cols] in screen of size [width]x[height]\n *\n * @param rows desired number of text rows\n * @param cols desired numbor of text colums\n * @param width width of screen in pixels\n * @param height height of screen in pixels\n */\n", "func_signal": "public synchronized void resizeComputed(int cols, int rows, int width, int height)", "code": "{\n\tfloat sizeDp = 8.0f;\n\tfloat step = 8.0f;\n\tfloat limit = 0.125f;\n\n\tint direction;\n\n\twhile ((direction = fontSizeCompare(sizeDp, cols, rows, width, height)) < 0)\n\t\tsizeDp += step;\n\n\tif (direction == 0) {\n\t\tLog.d(\"fontsize\", String.format(\"Found match at %f\", sizeDp));\n\t\treturn;\n\t}\n\n\tstep /= 2.0f;\n\tsizeDp -= step;\n\n\twhile ((direction = fontSizeCompare(sizeDp, cols, rows, width, height)) != 0\n\t\t\t&& step >= limit) {\n\t\tstep /= 2.0f;\n\t\tif (direction > 0) {\n\t\t\tsizeDp -= step;\n\t\t} else {\n\t\t\tsizeDp += step;\n\t\t}\n\t}\n\n\tif (direction > 0)\n\t\tsizeDp -= step;\n\n\tthis.columns = cols;\n\tthis.rows = rows;\n\tsetFontSize(sizeDp);\n\tforcedSize = true;\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/** write data to our back end */\n", "func_signal": "@Override\npublic void write(byte[] b) throws IOException", "code": "{\n\tif (os != null)\n\t\tos.write(b);\n}", "path": "connectbot/app/src/main/java/org/connectbot/transport/Telnet.java", "commit_date": "2017-02-20 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Ties the {@link TabLayout} to the {@link TerminalViewPager}.\n *\n * <p>This method will:\n * <ul>\n *     <li>Add a {@link TerminalViewPager.OnPageChangeListener} that will forward events to\n *     this TabLayout.</li>\n *     <li>Populate the TabLayout's tabs from the ViewPager's {@link PagerAdapter}.</li>\n *     <li>Set our {@link TabLayout.OnTabSelectedListener} which will forward\n *     selected events to the ViewPager</li>\n * </ul>\n * </p>\n */\n", "func_signal": "public void setupTabLayoutWithViewPager()", "code": "{\n\ttabs.setTabsFromPagerAdapter(adapter);\n\tpager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabs));\n\ttabs.setOnTabSelectedListener(new TabLayout.ViewPagerOnTabSelectedListener(pager));\n\n\tif (adapter.getCount() > 0) {\n\t\tfinal int curItem = pager.getCurrentItem();\n\t\tif (tabs.getSelectedTabPosition() != curItem) {\n\t\t\ttabs.getTabAt(curItem).select();\n\t\t}\n\t}\n}", "path": "connectbot/app/src/main/java/org/connectbot/ConsoleActivity.java", "commit_date": "2018-11-18 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Displays the child in the ViewPager at the requestedIndex and updates the prompts.\n *\n * @param requestedIndex the index of the terminal view to display\n */\n", "func_signal": "private void setDisplayedTerminal(int requestedIndex)", "code": "{\n\tpager.setCurrentItem(requestedIndex);\n\t// set activity title\n\tsetTitle(adapter.getPageTitle(requestedIndex));\n\tonTerminalChanged();\n}", "path": "connectbot/app/src/main/java/org/connectbot/ConsoleActivity.java", "commit_date": "2018-11-18 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Something changed in our parent {@link TerminalView}, maybe it's a new\n * parent, or maybe it's an updated font size. We should recalculate\n * terminal size information and request a PTY resize.\n */\n", "func_signal": "public final synchronized void parentChanged(TerminalView parent)", "code": "{\n\tif (manager != null && !manager.isResizeAllowed()) {\n\t\tLog.d(TAG, \"Resize is not allowed now\");\n\t\treturn;\n\t}\n\n\tthis.parent = parent;\n\tfinal int width = parent.getWidth();\n\tfinal int height = parent.getHeight();\n\n\t// Something has gone wrong with our layout; we're 0 width or height!\n\tif (width <= 0 || height <= 0)\n\t\treturn;\n\n\tClipboardManager clipboard = (ClipboardManager) parent.getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n\tkeyListener.setClipboardManager(clipboard);\n\n\tif (!forcedSize) {\n\t\t// recalculate buffer size\n\t\tint newColumns, newRows;\n\n\t\tnewColumns = width / charWidth;\n\t\tnewRows = height / charHeight;\n\n\t\t// If nothing has changed in the terminal dimensions and not an intial\n\t\t// draw then don't blow away scroll regions and such.\n\t\tif (newColumns == columns && newRows == rows)\n\t\t\treturn;\n\n\t\tcolumns = newColumns;\n\t\trows = newRows;\n\t\trefreshOverlayFontSize();\n\t}\n\n\t// reallocate new bitmap if needed\n\tboolean newBitmap = (bitmap == null);\n\tif (bitmap != null)\n\t\tnewBitmap = (bitmap.getWidth() != width || bitmap.getHeight() != height);\n\n\tif (newBitmap) {\n\t\tdiscardBitmap();\n\t\tbitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);\n\t\tcanvas.setBitmap(bitmap);\n\t}\n\n\t// clear out any old buffer information\n\tdefaultPaint.setColor(Color.BLACK);\n\tcanvas.drawPaint(defaultPaint);\n\n\t// Stroke the border of the terminal if the size is being forced;\n\tif (forcedSize) {\n\t\tint borderX = (columns * charWidth) + 1;\n\t\tint borderY = (rows * charHeight) + 1;\n\n\t\tdefaultPaint.setColor(Color.GRAY);\n\t\tdefaultPaint.setStrokeWidth(0.0f);\n\t\tif (width >= borderX)\n\t\t\tcanvas.drawLine(borderX, 0, borderX, borderY + 1, defaultPaint);\n\t\tif (height >= borderY)\n\t\t\tcanvas.drawLine(0, borderY, borderX + 1, borderY, defaultPaint);\n\t}\n\n\ttry {\n\t\t// request a terminal pty resize\n\t\tsynchronized (buffer) {\n\t\t\tbuffer.setScreenSize(columns, rows, true);\n\t\t}\n\n\t\tif (transport != null)\n\t\t\ttransport.setDimensions(columns, rows, width, height);\n\t} catch (Exception e) {\n\t\tLog.e(TAG, \"Problem while trying to resize screen or PTY\", e);\n\t}\n\n\t// redraw local output if we don't have a sesson to receive our resize request\n\tif (transport == null) {\n\t\tsynchronized (localOutput) {\n\t\t\t((vt320) buffer).reset();\n\n\t\t\tfor (String line : localOutput)\n\t\t\t\t((vt320) buffer).putString(line);\n\t\t}\n\t}\n\n\t// force full redraw with new buffer size\n\tfullRedraw = true;\n\tredraw();\n\n\tparent.notifyUser(String.format(\"%d x %d\", columns, rows));\n\n\tLog.i(TAG, String.format(\"parentChanged() now width=%d, height=%d\", columns, rows));\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * @param bridge\n */\n", "func_signal": "private void closeBridge(final TerminalBridge bridge)", "code": "{\n\tupdateEmptyVisible();\n\tupdatePromptVisible();\n\n\t// If we just closed the last bridge, go back to the previous activity.\n\tif (pager.getChildCount() == 0) {\n\t\tfinish();\n\t}\n}", "path": "connectbot/app/src/main/java/org/connectbot/ConsoleActivity.java", "commit_date": "2018-11-18 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Force disconnection of this terminal bridge.\n */\n", "func_signal": "public void dispatchDisconnect(boolean immediate)", "code": "{\n\t// We don't need to do this multiple times.\n\tsynchronized (this) {\n\t\tif (disconnected && !immediate)\n\t\t\treturn;\n\n\t\tdisconnected = true;\n\t}\n\n\t// Cancel any pending prompts.\n\tpromptHelper.cancelPrompt();\n\n\t// disconnection request hangs if we havent really connected to a host yet\n\t// temporary fix is to just spawn disconnection into a thread\n\tThread disconnectThread = new Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tif (transport != null && transport.isConnected())\n\t\t\t\ttransport.close();\n\t\t}\n\t});\n\tdisconnectThread.setName(\"Disconnect\");\n\tdisconnectThread.start();\n\n\tif (immediate || (host.getQuickDisconnect() && !host.getStayConnected())) {\n\t\tawaitingClose = true;\n\t\ttriggerDisconnectListener();\n\t} else {\n\t\t{\n\t\t\tfinal String line = manager.res.getString(R.string.alert_disconnect_msg);\n\t\t\t((vt320) buffer).putString(\"\\r\\n\" + line + \"\\r\\n\");\n\t\t}\n\t\tif (host.getStayConnected()) {\n\t\t\tmanager.requestReconnect(this);\n\t\t\treturn;\n\t\t}\n\t\tThread disconnectPromptThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tBoolean result = promptHelper.requestBooleanPrompt(null,\n\t\t\t\t\t\tmanager.res.getString(R.string.prompt_host_disconnected));\n\t\t\t\tif (result == null || result) {\n\t\t\t\t\tawaitingClose = true;\n\t\t\t\t\ttriggerDisconnectListener();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tdisconnectPromptThread.setName(\"DisconnectPrompt\");\n\t\tdisconnectPromptThread.setDaemon(true);\n\t\tdisconnectPromptThread.start();\n\t}\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * @param hostdb Handle to HostDatabase\n * @param uri URI to target server\n * @return true when host was found\n */\n", "func_signal": "public static HostBean findHost(HostStorage hostdb, Uri uri)", "code": "{\n\tAbsTransport transport = getTransport(uri.getScheme());\n\n\tMap<String, String> selection = new HashMap<>();\n\n\ttransport.getSelectionArgs(uri, selection);\n\tif (selection.isEmpty()) {\n\t\tLog.e(TAG, String.format(\"Transport %s failed to do something useful with URI=%s\",\n\t\t\t\turi.getScheme(), uri.toString()));\n\t\tthrow new IllegalStateException(\"Failed to get needed selection arguments\");\n\t}\n\n\treturn hostdb.findHost(selection);\n}", "path": "connectbot/app/src/main/java/org/connectbot/transport/TransportFactory.java", "commit_date": "2018-05-27 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * @param protocol\n * @return\n */\n", "func_signal": "public static AbsTransport getTransport(String protocol)", "code": "{\n\tif (SSH.getProtocolName().equals(protocol)) {\n\t\treturn new SSH();\n\t} else if (Telnet.getProtocolName().equals(protocol)) {\n\t\treturn new Telnet();\n\t} else if (Local.getProtocolName().equals(protocol)) {\n\t\treturn new Local();\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "connectbot/app/src/main/java/org/connectbot/transport/TransportFactory.java", "commit_date": "2018-05-27 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Spawn thread to open connection and start login process.\n */\n", "func_signal": "protected void startConnection()", "code": "{\n\ttransport = TransportFactory.getTransport(host.getProtocol());\n\tif (transport == null) {\n\t\tLog.i(TAG, \"No transport found for \" + host.getProtocol());\n\t\treturn;\n\t}\n\n\ttransport.setBridge(this);\n\ttransport.setManager(manager);\n\ttransport.setHost(host);\n\n\t// TODO make this more abstract so we don't litter on AbsTransport\n\ttransport.setCompression(host.getCompression());\n\ttransport.setUseAuthAgent(host.getUseAuthAgent());\n\ttransport.setEmulation(emulation);\n\n\tif (transport.canForwardPorts()) {\n\t\tfor (PortForwardBean portForward : manager.hostdb.getPortForwardsForHost(host))\n\t\t\ttransport.addPortForward(portForward);\n\t}\n\n\toutputLine(manager.res.getString(R.string.terminal_connecting, host.getHostname(), host.getPort(), host.getProtocol()));\n\n\tThread connectionThread = new Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttransport.connect();\n\t\t}\n\t});\n\tconnectionThread.setName(\"Connection\");\n\tconnectionThread.setDaemon(true);\n\tconnectionThread.start();\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/* (non-Javadoc)\n * @see de.mud.terminal.VDUDisplay#setColor(byte, byte, byte, byte)\n */\n", "func_signal": "@Override\npublic void setColor(int index, int red, int green, int blue)", "code": "{\n\t// Don't allow the system colors to be overwritten for now. May violate specs.\n\tif (index < color.length && index >= 16)\n\t\tcolor[index] = 0xff000000 | red << 16 | green << 8 | blue;\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Show any prompts requested by the currently visible {@link TerminalView}.\n */\n", "func_signal": "protected void updatePromptVisible()", "code": "{\n\t// check if our currently-visible terminalbridge is requesting any prompt services\n\tTerminalView view = adapter.getCurrentTerminalView();\n\n\t// Hide all the prompts in case a prompt request was canceled\n\thideAllPrompts();\n\n\tif (view == null) {\n\t\t// we dont have an active view, so hide any prompts\n\t\treturn;\n\t}\n\n\tPromptHelper prompt = view.bridge.promptHelper;\n\tif (String.class.equals(prompt.promptRequested)) {\n\t\thideEmulatedKeys();\n\t\tstringPromptGroup.setVisibility(View.VISIBLE);\n\n\t\tString instructions = prompt.promptInstructions;\n\t\tif (instructions != null && instructions.length() > 0) {\n\t\t\tstringPromptInstructions.setVisibility(View.VISIBLE);\n\t\t\tstringPromptInstructions.setText(instructions);\n\t\t} else\n\t\t\tstringPromptInstructions.setVisibility(View.GONE);\n\t\tstringPrompt.setText(\"\");\n\t\tstringPrompt.setHint(prompt.promptHint);\n\t\tstringPrompt.requestFocus();\n\n\t} else if (Boolean.class.equals(prompt.promptRequested)) {\n\t\thideEmulatedKeys();\n\t\tbooleanPromptGroup.setVisibility(View.VISIBLE);\n\t\tbooleanPrompt.setText(prompt.promptHint);\n\t\tbooleanYes.requestFocus();\n\n\t} else {\n\t\thideAllPrompts();\n\t\tview.requestFocus();\n\t}\n}", "path": "connectbot/app/src/main/java/org/connectbot/ConsoleActivity.java", "commit_date": "2018-11-18 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Somehow our parent {@link TerminalView} was destroyed. Now we don't need\n * to redraw anywhere, and we can recycle our internal bitmap.\n */\n", "func_signal": "public synchronized void parentDestroyed()", "code": "{\n\tparent = null;\n\tdiscardBitmap();\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * @return\n */\n", "func_signal": "public List<String> scanForURLs()", "code": "{\n\tList<String> urls = new ArrayList<>();\n\n\tchar[] visibleBuffer = new char[buffer.height * buffer.width];\n\tfor (int l = 0; l < buffer.height; l++)\n\t\tSystem.arraycopy(buffer.charArray[buffer.windowBase + l], 0,\n\t\t\t\tvisibleBuffer, l * buffer.width, buffer.width);\n\n\tMatcher urlMatcher = PatternHolder.urlPattern.matcher(new String(visibleBuffer));\n\twhile (urlMatcher.find())\n\t\turls.add(urlMatcher.group());\n\n\treturn urls;\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Request a different font size. Will make call to parentChanged() to make\n * sure we resize PTY if needed.\n *\n * @param sizeDp Size of font in dp\n */\n", "func_signal": "private void setFontSize(float sizeDp)", "code": "{\n\tif (sizeDp <= 0.0) {\n\t\treturn;\n\t}\n\n\tfinal int fontSizePx = (int) (sizeDp * displayDensity *\tsystemFontScale + 0.5f);\n\n\tdefaultPaint.setTextSize(fontSizePx);\n\tfontSizeDp = sizeDp;\n\n\t// read new metrics to get exact pixel dimensions\n\tFontMetrics fm = defaultPaint.getFontMetrics();\n\tcharTop = (int) Math.ceil(fm.top);\n\n\tfloat[] widths = new float[1];\n\tdefaultPaint.getTextWidths(\"X\", widths);\n\tcharWidth = (int) Math.ceil(widths[0]);\n\tcharHeight = (int) Math.ceil(fm.descent - fm.top);\n\n\t// refresh any bitmap with new font size\n\tif (parent != null) {\n\t\tparentChanged(parent);\n\t}\n\n\tfor (FontSizeChangedListener ofscl : fontSizeChangedListeners) {\n\t\tofscl.onFontSizeChanged(sizeDp);\n\t}\n\n\thost.setFontSize((int) sizeDp);\n\tmanager.hostdb.saveHost(host);\n\n\tforcedSize = false;\n}", "path": "connectbot/app/src/main/java/org/connectbot/service/TerminalBridge.java", "commit_date": "2018-11-06 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * Called whenever the displayed terminal is changed.\n */\n", "func_signal": "private void onTerminalChanged()", "code": "{\n\tView terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n\tif (terminalNameOverlay != null)\n\t\tterminalNameOverlay.startAnimation(fade_out_delayed);\n\tupdateDefault();\n\tupdatePromptVisible();\n\tActivityCompat.invalidateOptionsMenu(ConsoleActivity.this);\n}", "path": "connectbot/app/src/main/java/org/connectbot/ConsoleActivity.java", "commit_date": "2018-11-18 00:00:00", "repo_name": "connectbot/connectbot", "stars": 2320, "license": "apache-2.0", "language": "java", "size": 8622}
{"docstring": "/**\n * \u8003\u8651\u5230Android 8.0\u5728\u540e\u53f0\u8c03\u7528startService\u65f6\u4f1a\u629b\u51faIllegalStateException\n *\n * @param context\n * @param intent\n */\n", "func_signal": "public static void startServiceSafely(Context context, Intent intent)", "code": "{\n    if (null == context) {\n        return;\n    }\n    try {\n        context.startService(intent);\n    } catch (IllegalStateException ex) {\n        ex.printStackTrace();\n    }\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/utils/ServiceUtils.java", "commit_date": "2018-06-13 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * \u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u4f7f\u7528\u8fdc\u7a0b\u670d\u52a1\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f:\n * 1.\u672c\u5730\u670d\u52a1\u53ea\u80fd\u5728\u672c\u8fdb\u7a0b\u4f7f\u7528\n * 2.\u8fdc\u7a0b\u670d\u52a1\u65e2\u53ef\u4ee5\u5728\u672c\u8fdb\u7a0b\u4f7f\u7528\u4e5f\u53ef\u5728\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u4f7f\u7528\uff0c\u5f53\u5728\u672c\u8fdb\u7a0b\u4f7f\u7528\u65f6\u4f1a\n */\n", "func_signal": "private void useRemoteServiceInSameProcess()", "code": "{\n    //IBinder buyAppleBinder = Andromeda.getInstance().getRemoteService(IBuyApple.class);\n    IBinder buyAppleBinder = Andromeda.with(this).getRemoteService(IBuyApple.class);\n    if (null == buyAppleBinder) {\n        Toast.makeText(RemoteServiceDemo.this, \"buyAppleBinder is null! May be the service has been cancelled!\", Toast.LENGTH_SHORT).show();\n        return;\n    }\n    IBuyApple buyApple = IBuyApple.Stub.asInterface(buyAppleBinder);\n    if (null != buyApple) {\n        try {\n            int appleNum = buyApple.buyAppleInShop(10);\n            Toast.makeText(RemoteServiceDemo.this, \"got remote service in the same process(:apple),appleNum:\" + appleNum, Toast.LENGTH_SHORT).show();\n\n            buyApple.buyAppleOnNet(10, new BaseCallback() {\n                @Override\n                public void onSucceed(Bundle result) {\n                    int appleNum = result.getInt(\"Result\", 0);\n                    Toast.makeText(RemoteServiceDemo.this,\n                            \"got remote service with callback in the same process(:apple),appleNum:\" + appleNum, Toast.LENGTH_SHORT).show();\n                }\n\n                @Override\n                public void onFailed(String reason) {\n                    Toast.makeText(RemoteServiceDemo.this, \"got remote service failed with callback!\", Toast.LENGTH_SHORT).show();\n                }\n            });\n\n        } catch (RemoteException ex) {\n            ex.printStackTrace();\n        }\n    }\n}", "path": "Andromeda/applemodule/src/main/java/wang/imallen/blog/applemodule/remote/RemoteServiceDemo.java", "commit_date": "2018-06-01 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u8003\u8651\u5230\u6df7\u6dc6\uff0c\u76f4\u63a5\u5199\u7c7b\u7684\u5b8c\u6574\u8def\u5f84\u540d\u5bb9\u6613\u5bfc\u81f4\u4e24\u8fb9\u4e0d\u4e00\u81f4\uff0c\u6240\u4ee5\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f!\n", "func_signal": "@Deprecated\npublic static void registerLocalService(String serviceCanonicalName, Object serviceImpl)", "code": "{\n    if (TextUtils.isEmpty(serviceCanonicalName) || null == serviceImpl) {\n        return;\n    }\n    LocalServiceHub.getInstance().registerService(serviceCanonicalName, serviceImpl);\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/Andromeda.java", "commit_date": "2018-06-13 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u4f7f\u7528\u65b9\u5f0f\u4e00:\u53ea\u8981\u5b9e\u73b0BaseCallback\u8fd9\u4e2a\u62bd\u8c61\u7c7b\u5373\u53ef\uff0c\u5728\u4e3b\u7ebf\u7a0b\u56de\u8c03\n", "func_signal": "private void useBuyAppleService()", "code": "{\n    //IBuyApple buyApple = IBuyApple.Stub.asInterface(Andromeda.getInstance().getRemoteService(IBuyApple.class));\n    IBuyApple buyApple = IBuyApple.Stub.asInterface(Andromeda.with(this).getRemoteService(IBuyApple.class));\n    try {\n        //buyApple.buyApple(10, new MyCallback());\n        buyApple.buyAppleOnNet(10, new BaseCallback() {\n            @Override\n            public void onSucceed(Bundle result) {\n                Log.d(TAG, \"BuyApple-->onSuccess,thread:\" + Thread.currentThread().getName() + \",result:\" + result.getInt(\"Result\"));\n            }\n\n            @Override\n            public void onFailed(String reason) {\n                Log.d(TAG, \"BuyApple-->onFail,thread:\" + Thread.currentThread().getName() + \",reason:\" + reason);\n            }\n        });\n\n    } catch (RemoteException ex) {\n        ex.printStackTrace();\n    }\n}", "path": "Andromeda/app/src/main/java/wang/imallen/blog/servicemanager/MainActivity.java", "commit_date": "2018-06-06 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u8fd9\u91cc\u4e0d\u80fd\u6309\u7167serviceCanonicalName\u6765\u533a\u5206\uff0c\u800c\u662f\u8981\u6309\u7167target service\u6765\u5212\u5206\uff0c\u5982\u679ctargetService\u4e00\u6837\uff0c\u90a3\u5c31\u6ca1\u5fc5\u8981\u518d\u7ed1\u5b9a\n", "func_signal": "public synchronized String bindAction(Context context, String serverProcessName)", "code": "{\n    Logger.d(\"ConnectionManager-->bindAction,serverProcessName:\" + serverProcessName);\n    Intent intent = StubServiceMatcher.matchIntent(context, serverProcessName);\n    if (null == intent) {\n        Logger.d(\"match intent is null\");\n        return null;\n    }\n\n    final String commuStubServiceName = getCommuStubServiceName(intent);\n    ConnectionBean bean = connectionCache.get(commuStubServiceName);\n    ConnectionBean waitingBean = waitingFlightConnCache.get(commuStubServiceName);\n    if (null == bean && waitingBean == null) {\n        Logger.d(\"first create ServiceConnectioin for \" + commuStubServiceName);\n        final ServiceConnection connection = new ServiceConnection() {\n            @Override\n            public void onServiceConnected(ComponentName name, IBinder service) {\n                Logger.d(\"onServiceConnected,name:\" + commuStubServiceName);\n                ConnectionBean connectionBean = waitingFlightConnCache.remove(commuStubServiceName);\n                if (connectionBean == null) {\n                    //TODO \u662f\u5426\u8981\u76f4\u63a5throw RuntimeException\u5462?\n                    Logger.e(\"No ConnectionBean in waitingFlightCache!\");\n                } else {\n                    connectionCache.put(commuStubServiceName, connectionBean);\n                }\n            }\n\n            @Override\n            public void onServiceDisconnected(ComponentName name) {\n                Logger.d(\"onServiceDisconnected,name:\" + commuStubServiceName);\n                //\u5982\u679c\u53d1\u751f\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u5c31\u8981\u4ece\u7f13\u5b58\u4e2d\u79fb\u9664\u6389!\n                connectionCache.remove(commuStubServiceName);\n                waitingFlightConnCache.remove(commuStubServiceName);\n            }\n        };\n        bean = new ConnectionBean(connection);\n        waitingFlightConnCache.put(commuStubServiceName, bean);\n        context.bindService(intent, connection, Context.BIND_AUTO_CREATE | Context.BIND_IMPORTANT);\n    } else if (waitingBean != null) {\n        waitingBean.increaseRef();\n    } else {\n        bean.increaseRef();\n    }\n    return commuStubServiceName;\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/remote/ConnectionManager.java", "commit_date": "2018-06-13 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u7ed9\u540c\u8fdb\u7a0b\u7684DispatcherService\u8c03\u7528\u7684\u548c\u8fdc\u7a0b\u8c03\u7528\n", "func_signal": "@Override\npublic synchronized void registerRemoteTransfer(int pid, IBinder transferBinder)", "code": "{\n    if (pid < 0) {\n        return;\n    }\n    eventDispatcher.registerRemoteTransferLocked(pid, transferBinder);\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/dispatcher/Dispatcher.java", "commit_date": "2018-04-28 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * \u63a5\u6536\u5230\u6765\u81eaDispatcher\u7684\u901a\u77e5\uff0c\u5982\u679c\u672c\u5730\u6709\u76f8\u5e94\u7684IBinder,\u5c31\u8981\u6e05\u9664\n *\n * @param serviceCanonicalName\n * @throws RemoteException\n */\n", "func_signal": "@Override\npublic synchronized void unregisterRemoteService(String serviceCanonicalName) throws RemoteException", "code": "{\n    Logger.d(\"RemoteTransfer-->unregisterRemoteServiceLocked,pid:\" + android.os.Process.myPid() + \",serviceName:\" + serviceCanonicalName);\n    serviceTransfer.clearRemoteBinderCacheLocked(serviceCanonicalName);\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/transfer/RemoteTransfer.java", "commit_date": "2018-06-12 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//TODO \u8fd9\u6837\u505a\u6709\u4e2a\u5f0a\u7aef\uff0c\u5c31\u662f\u6ca1\u505a\u5230\u61d2\u52a0\u8f7d\n", "func_signal": "public static void init(Context context)", "code": "{\n    getInstance().setContext(context);\n\n    getInstance().sendRegisterInfo();\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/transfer/RemoteTransfer.java", "commit_date": "2018-06-12 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * \u670d\u52a1\u8fdb\u7a0b\u7684\u540d\u79f0\uff0c\u5982\u679c\u662f\u4e3b\u8fdb\u7a0b\u5c31\u4e0d\u7528bind\u4e86!\n *\n * @param serverProcessName\n * @return\n */\n", "func_signal": "public static Intent matchIntent(Context context, String serverProcessName)", "code": "{\n    //\u5982\u679c\u662f\u5bf9\u65b9\u662f\u4e3b\u8fdb\u7a0b\uff0c\u5219\u4e0d\u9700\u8981bind,\u56e0\u4e3a\u4e0d\u7528\u62c5\u5fc3\u4e3b\u8fdb\u7a0b\u88ab\u6740\u6389\n    if (context.getPackageName().equals(serverProcessName)) {\n        return null;\n    }\n    //\u5982\u679c\u5bf9\u65b9\u8ddf\u5f53\u524d\u8fdb\u7a0b\u662f\u540c\u4e00\u8fdb\u7a0b\uff0c\u4e5f\u4e0d\u9700\u8981\u8fdb\u884cbind\n    String currentProName = ProcessUtils.getProcessName(context);\n    if (null == currentProName || currentProName.equals(serverProcessName)) {\n        return null;\n    }\n    String resultProName = serverProcessName;\n    if (resultProName.startsWith(context.getPackageName())) {\n        int index = resultProName.lastIndexOf(\":\");\n        //\u8981\u8003\u8651\u5230\u6709\u4e9b\u8fdb\u7a0b\u540d\u79f0\u4e0d\u5305\u542b\":\"\n        if (index > 0) {\n            resultProName = resultProName.substring(index);\n        }\n    }\n    Logger.d(\"StubServiceMatcher-->matchIntent(),resultProName:\" + resultProName);\n    Object targetObj = getTargetService(resultProName);\n    if (null == targetObj) {\n        return null;\n    }\n    Class targetServiceClass = (Class) targetObj;\n    return new Intent(context, targetServiceClass);\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/utils/StubServiceMatcher.java", "commit_date": "2018-04-20 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * \u6ce8\u518c\u548c\u53cd\u5411\u6ce8\u518c\n *\n * @param pid\n * @param transterBinder\n */\n", "func_signal": "private void registerAndReverseRegister(int pid, IBinder transterBinder)", "code": "{\n    Logger.d(\"DispatcherService-->registerAndReverseRegister,pid=\" + pid + \",processName:\" + ProcessUtils.getProcessName(pid));\n    IRemoteTransfer remoteTransfer = IRemoteTransfer.Stub.asInterface(transterBinder);\n\n    Dispatcher.getInstance().registerRemoteTransfer(pid, transterBinder);\n\n    if (remoteTransfer != null) {\n        Logger.d(\"now register to RemoteTransfer\");\n        try {\n            remoteTransfer.registerDispatcher(Dispatcher.getInstance().asBinder());\n        } catch (RemoteException ex) {\n            ex.printStackTrace();\n        }\n    } else {\n        Logger.d(\"IdspatcherRegister IBinder is null\");\n    }\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/dispatcher/DispatcherService.java", "commit_date": "2018-04-20 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * Sets a hint for which fragment is our parent which allows fragment to return correct\n * information about its parents before pending fragment transactions have been executed.\n *\n * @param parentFragmentHint\n */\n", "func_signal": "public void setParentFragmentHint(Fragment parentFragmentHint)", "code": "{\n    Logger.d(\"SupportRemoteManagerFragment-->setParentFragmentHint()\");\n    this.parentFragmentHint = parentFragmentHint;\n    if (parentFragmentHint != null && parentFragmentHint.getActivity() != null) {\n        registerFragmentWithRoot(parentFragmentHint.getActivity());\n    }\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/fragment/SupportRemoteManagerFragment.java", "commit_date": "2018-06-01 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "////////////////end of event///////////////////////////\n", "func_signal": "@Override\npublic synchronized void registerDispatcher(IBinder dispatcherBinder) throws RemoteException", "code": "{\n    Logger.d(\"RemoteTransfer-->registerDispatcher\");\n    //\u4e00\u822c\u4ece\u53d1\u51fa\u6ce8\u518c\u4fe1\u606f\u5230\u8fd9\u91cc\u56de\u8c03\u5c316ms\u5de6\u53f3\uff0c\u6240\u4ee5\u7edd\u5927\u90e8\u5206\u65f6\u5019\u8d70\u7684\u90fd\u662f\u8fd9\u4e2a\u903b\u8f91\u3002\n    dispatcherBinder.linkToDeath(new IBinder.DeathRecipient() {\n        @Override\n        public void binderDied() {\n            Logger.d(\"RemoteTransfer-->dispatcherBinder binderDied\");\n            resetDispatcherProxy();\n        }\n    }, 0);\n    dispatcherProxy = IDispatcher.Stub.asInterface(dispatcherBinder);\n    notifyAll();\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/transfer/RemoteTransfer.java", "commit_date": "2018-06-12 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * \u8981\u6ce8\u9500\u672c\u8fdb\u7a0b\u7684\u67d0\u4e2a\u670d\u52a1,\u6ce8\u610f\u5b83\u4e0eunregisterRemoteService()\u7684\u533a\u522b!\n * \u8fd9\u4e2a\u65b9\u6cd5\u8868\u793a\u8981\u6ce8\u9500\u672c\u8fdb\u7a0b\u7684\u67d0\u4e2a\u670d\u52a1\n *\n * @param serviceCanonicalName\n */\n", "func_signal": "@Override\npublic synchronized void unregisterStubService(String serviceCanonicalName)", "code": "{\n    initDispatchProxyLocked();\n    serviceTransfer.unregisterStubServiceLocked(serviceCanonicalName, context, dispatcherProxy);\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/transfer/RemoteTransfer.java", "commit_date": "2018-06-12 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u8003\u8651\u5230\u6df7\u6dc6\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\n", "func_signal": "@Deprecated\npublic static <T extends IBinder> void registerRemoteService(String serviceCanonicalName, T stubBinder)", "code": "{\n    if (TextUtils.isEmpty(serviceCanonicalName) || null == stubBinder) {\n        return;\n    }\n    RemoteTransfer.getInstance().registerStubService(serviceCanonicalName, stubBinder);\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/Andromeda.java", "commit_date": "2018-06-13 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u8ba9ServiceDispatcher\u53cd\u5411\u6ce8\u518c\u5230\u5f53\u524d\u8fdb\u7a0b\n", "func_signal": "private synchronized void sendRegisterInfo()", "code": "{\n    if (dispatcherProxy == null) {\n        //\u540e\u9762\u8003\u8651\u8fd8\u662f\u91c7\u7528\"has-a\"\u7684\u65b9\u5f0f\u4f1a\u66f4\u597d\n        BinderWrapper wrapper = new BinderWrapper(this.asBinder());\n        Intent intent = new Intent(context, DispatcherService.class);\n        intent.setAction(Constants.DISPATCH_REGISTER_SERVICE_ACTION);\n        intent.putExtra(Constants.KEY_REMOTE_TRANSFER_WRAPPER, wrapper);\n        intent.putExtra(Constants.KEY_PID, android.os.Process.myPid());\n        ServiceUtils.startServiceSafely(context, intent);\n    }\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/transfer/RemoteTransfer.java", "commit_date": "2018-06-12 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * \u601d\u8003:\u5176\u5b9e\u662f\u4e0d\u662f\u4e0d\u7528\u8fd9\u4e48\u9ebb\u70e6\uff0c\u76f4\u63a5\u5229\u7528\u4e8b\u4ef6\u901a\u77e5\u673a\u5236\u8fdb\u884c\u901a\u77e5\u5c31\u53ef\u4ee5\u4e86\u5427\uff1f\n * \u53ef\u4ee5\u662f\u53ef\u4ee5\uff0c\u4f46\u662f\u903b\u8f91\u4e0a\u5c31\u4e0d\u90a3\u4e48\u6e05\u6670\u4e86\uff0c\u800c\u4e14\u8981\u5199\u5f88\u591augly\u7684if\u8bed\u53e5\uff0c\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u4e5f\u5dee\u4e86\u3002\n *\n * @param serviceCanonicalName\n * @param context\n * @param dispatcherProxy\n */\n", "func_signal": "public void unregisterStubServiceLocked(String serviceCanonicalName, Context context, IDispatcher dispatcherProxy)", "code": "{\n    //\u7b2c\u4e00\u6b65\uff0c\u6e05\u9664\u672c\u5730\u7684\u7f13\u5b58\n    clearStubBinderCache(serviceCanonicalName);\n    //\u7b2c\u4e8c\u6b65\uff0c\u901a\u77e5Dispatcher,\u7136\u540e\u8ba9Dispatcher\u901a\u77e5\u5404\u8fdb\u7a0b\n    if (null == dispatcherProxy) {\n        Intent intent = new Intent(context, DispatcherService.class);\n        intent.setAction(Constants.DISPATCH_UNREGISTER_SERVICE_ACTION);\n        intent.putExtra(Constants.KEY_SERVICE_NAME, serviceCanonicalName);\n        ServiceUtils.startServiceSafely(context, intent);\n    } else {\n        try {\n            dispatcherProxy.unregisterRemoteService(serviceCanonicalName);\n        } catch (RemoteException ex) {\n            ex.printStackTrace();\n        }\n    }\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/transfer/service/RemoteServiceTransfer.java", "commit_date": "2018-06-12 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * \u8fd9\u662f\u6700\u53ef\u9760\u7684\u4e00\u79cd\u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u540d\u79f0\u7684\u65b9\u5f0f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static String getProcessName(Context context)", "code": "{\n    if (!TextUtils.isEmpty(sProcessName)) {\n        return sProcessName;\n    }\n    int count = 0;\n    do {\n        String processName = getProcessNameImpl(context);\n        if (!TextUtils.isEmpty(processName)) {\n            sProcessName = processName;\n            return processName;\n        }\n    } while (count++ < 3);\n\n    return null;\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/utils/ProcessUtils.java", "commit_date": "2018-04-20 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "/**\n * Sets a hint for which fragment is our parent which allows the fragment to return correct\n * information about its parents before pending fragment transactions have been executed.\n *\n * @param parentFragmentHint\n */\n", "func_signal": "public void setParentFragmentHint(Fragment parentFragmentHint)", "code": "{\n    Logger.d(this.toString() + \"-->setParentFragmentHint()\");\n    this.parentFragmentHint = parentFragmentHint;\n    if (parentFragmentHint != null && parentFragmentHint.getActivity() != null) {\n        registerFragmentWithRoot(parentFragmentHint.getActivity());\n    }\n}", "path": "Andromeda/Andromeda-Lib/src/main/java/org/qiyi/video/svg/fragment/RemoteManagerFragment.java", "commit_date": "2018-06-01 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//TODO \u6ce8\u610f:\u8fd9\u4e2a\u56de\u8c03\u662f\u5728binder\u7ebf\u7a0b\u4e2d!\u540e\u7eed\u7248\u672c\u5f15\u5165\u6307\u5b9a\u7684threadMode!\n", "func_signal": "@Override\npublic void onNotify(Event event)", "code": "{\n    String name = event.getName();\n    ToastUtil.postToast(this, \"get event whose name is \" + name);\n    Logger.d(\"MainActivity-->event name:\" + name);\n    if (event.getData() == null) {\n        return;\n    }\n    String result = event.getData().getString(\"Result\");\n    Logger.d(\"MainActivity-->event result:\" + result);\n}", "path": "Andromeda/app/src/main/java/wang/imallen/blog/servicemanager/MainActivity.java", "commit_date": "2018-06-06 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u5728Fragment\u4e0d\u53ef\u89c1\u65f6\uff0c\u56de\u8c03\u7684\u662fonDestroyView()\u800c\u4e0d\u662fonDestroy()\uff0c\u4e0d\u8fc7\u7531\u4e8e\u5b83\u4ecd\u65e7\u5728\u7f13\u5b58\u4e2d\uff0c\u6240\u4ee5\u6b64\u65f6\u786e\u5b9e\u4e0d\u80fd\u91ca\u653e\u8fde\u63a5\uff0c\u800c\u662f\u8981\u7b49\u5230onDestroy()\u65f6\u518d\u91ca\u653e\n", "func_signal": "@Override\npublic void onDestroyView()", "code": "{\n    Logger.d(TAG + \"-->onDestroyView()\");\n    super.onDestroyView();\n}", "path": "Andromeda/app/src/main/java/wang/imallen/blog/servicemanager/lifecycle/frag/MyPicFrag.java", "commit_date": "2018-04-19 00:00:00", "repo_name": "iqiyi/Andromeda", "stars": 2274, "license": "None", "language": "java", "size": 984}
{"docstring": "//\u901a\u8fc7px\u8bbe\u7f6e\u6c34\u5e73\u95f4\u8ddd\n", "func_signal": "public Builder setHorizontal(float horizontal)", "code": "{\n    this.mHorizontal = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX, horizontal, mResources.getDisplayMetrics());\n    return this;\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/ItemDecoration/GridItemDecoration.java", "commit_date": "2017-03-23 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u8bf7\u4f7f\u7528\u672c\u65b9\u6cd5\u66ff\u4ee3RecyclerView.ViewHolder\u7684getLayoutPosition()\u65b9\u6cd5\n *\n * @param recyclerView\n * @param holder\n * @return\n */\n", "func_signal": "public static int getLayoutPosition(RecyclerView recyclerView, RecyclerView.ViewHolder holder)", "code": "{\n    RecyclerView.Adapter outerAdapter = recyclerView.getAdapter();\n    if (outerAdapter != null && outerAdapter instanceof LuRecyclerViewAdapter) {\n\n        int headerViewCounter = ((LuRecyclerViewAdapter) outerAdapter).getHeaderViewsCount();\n        if (headerViewCounter > 0) {\n            return holder.getLayoutPosition() - headerViewCounter;\n        }\n    }\n\n    return holder.getLayoutPosition();\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/util/LuRecyclerViewUtils.java", "commit_date": "2016-12-27 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u8bbe\u7f6e\u72b6\u6001\n *\n * @param status\n * @param showView \u662f\u5426\u5c55\u793a\u5f53\u524dView\n */\n", "func_signal": "public void setState(State status, boolean showView)", "code": "{\n    if (mState == status) {\n        return;\n    }\n    mState = status;\n\n    switch (status) {\n        case Normal:\n            setOnClickListener(null);\n            if (mLoadingView != null) {\n                mLoadingView.setVisibility(GONE);\n            }\n\n            if (mTheEndView != null) {\n                mTheEndView.setVisibility(GONE);\n            }\n\n            if (mNetworkErrorView != null) {\n                mNetworkErrorView.setVisibility(GONE);\n            }\n\n            break;\n        case Loading:\n            setOnClickListener(null);\n            if (mTheEndView != null) {\n                mTheEndView.setVisibility(GONE);\n            }\n\n            if (mNetworkErrorView != null) {\n                mNetworkErrorView.setVisibility(GONE);\n            }\n\n            if (mLoadingView == null) {\n                ViewStub viewStub = (ViewStub) findViewById(R.id.loading_viewstub);\n                mLoadingView = viewStub.inflate();\n\n                mProgressView = (SimpleViewSwitcher) mLoadingView.findViewById(R.id.loading_progressbar);\n                mLoadingText = (TextView) mLoadingView.findViewById(R.id.loading_text);\n            }\n\n            mLoadingView.setVisibility(showView ? VISIBLE : GONE);\n\n            mProgressView.setVisibility(View.VISIBLE);\n            mProgressView.removeAllViews();\n            mProgressView.addView(initIndicatorView(style));\n\n            mLoadingText.setText(TextUtils.isEmpty(loadingHint) ? getResources().getString(R.string.list_footer_loading) : loadingHint);\n            mLoadingText.setTextColor(ContextCompat.getColor(getContext(), hintColor));\n\n            break;\n        case NoMore:\n            setOnClickListener(null);\n            if (mLoadingView != null) {\n                mLoadingView.setVisibility(GONE);\n            }\n\n            if (mNetworkErrorView != null) {\n                mNetworkErrorView.setVisibility(GONE);\n            }\n\n            if (mTheEndView == null) {\n                ViewStub viewStub = (ViewStub) findViewById(R.id.end_viewstub);\n                mTheEndView = viewStub.inflate();\n\n                mNoMoreText = (TextView) mTheEndView.findViewById(R.id.loading_end_text);\n            } else {\n                mTheEndView.setVisibility(VISIBLE);\n            }\n\n            mTheEndView.setVisibility(showView ? VISIBLE : GONE);\n            mNoMoreText.setText(TextUtils.isEmpty(noMoreHint) ? getResources().getString(R.string.list_footer_end) : noMoreHint);\n            mNoMoreText.setTextColor(ContextCompat.getColor(getContext(), hintColor));\n            break;\n        case NetWorkError:\n            if (mLoadingView != null) {\n                mLoadingView.setVisibility(GONE);\n            }\n\n            if (mTheEndView != null) {\n                mTheEndView.setVisibility(GONE);\n            }\n\n            if (mNetworkErrorView == null) {\n                ViewStub viewStub = (ViewStub) findViewById(R.id.network_error_viewstub);\n                mNetworkErrorView = viewStub.inflate();\n                mNoNetWorkText = (TextView) mNetworkErrorView.findViewById(R.id.network_error_text);\n            } else {\n                mNetworkErrorView.setVisibility(VISIBLE);\n            }\n\n            mNetworkErrorView.setVisibility(showView ? VISIBLE : GONE);\n            mNoNetWorkText.setText(TextUtils.isEmpty(noNetWorkHint) ? getResources().getString(R.string.list_footer_network_error) : noNetWorkHint);\n            mNoNetWorkText.setTextColor(ContextCompat.getColor(getContext(), hintColor));\n            break;\n        default:\n            break;\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/view/LoadingFooter.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * make animation to start or end when target\n * view was be Visible or Gone or Invisible.\n * make animation to cancel when target view\n * be onDetachedFromWindow.\n * @param animStatus\n */\n", "func_signal": "public void setAnimationStatus(AnimStatus animStatus)", "code": "{\n    if (mAnimators==null){\n        return;\n    }\n    int count=mAnimators.size();\n    for (int i = 0; i < count; i++) {\n        Animator animator=mAnimators.get(i);\n        boolean isRunning=animator.isRunning();\n        switch (animStatus){\n            case START:\n                if (!isRunning){\n                    animator.start();\n                }\n                break;\n            case END:\n                if (isRunning){\n                    animator.end();\n                }\n                break;\n            case CANCEL:\n                if (isRunning){\n                    animator.cancel();\n                }\n                break;\n        }\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/progressindicator/indicators/BaseIndicatorController.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u5df2\u52a0\u8f7d\u5168\u90e8\n * @param noMore\n */\n", "func_signal": "public void setNoMore(boolean noMore)", "code": "{\n    mLoadingData = false;\n    isNoMore = noMore;\n    if(isNoMore) {\n        mLoadMoreFooter.onNoMore();\n        mFootView.setVisibility(VISIBLE);\n    } else {\n        mLoadMoreFooter.onComplete();\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/recyclerview/LRecyclerView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u8bbe\u7f6eTextView\u7684\u503c\n */\n", "func_signal": "public RecyclerViewHolder setText(int viewId, String text)", "code": "{\n    TextView tv = findViewById(viewId);\n    tv.setText(text);\n    return this;\n}", "path": "LRecyclerView/app/src/main/java/com/lzx/demo/holder/RecyclerViewHolder.java", "commit_date": "2016-07-31 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u672c\u65b9\u6cd5\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u8bf7\u4f7f\u7528\u81ea\u5b9a\u4e49LoadingFooter\u7684\u65b9\u5f0f\u5b9e\u73b0\n * \u8bbe\u7f6eFooter\u6587\u5b57\u989c\u8272\n * @param indicatorColor\n * @param hintColor\n * @param backgroundColor\n */\n", "func_signal": "@Deprecated\npublic void setFooterViewColor(int indicatorColor, int hintColor, int backgroundColor)", "code": "{\n    if (mLoadMoreFooter instanceof LoadingFooter) {\n        LoadingFooter loadingFooter = ((LoadingFooter) mLoadMoreFooter);\n        loadingFooter.setIndicatorColor(ContextCompat.getColor(getContext(),indicatorColor));\n        loadingFooter.setHintTextColor(hintColor);\n        loadingFooter.setViewBackgroundColor(backgroundColor);\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/recyclerview/LRecyclerView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u8bbe\u7f6eFooterView\n *\n * @param recyclerView\n * @param view\n */\n", "func_signal": "@Deprecated\npublic static void setFooterView(RecyclerView recyclerView, View view)", "code": "{\n    RecyclerView.Adapter outerAdapter = recyclerView.getAdapter();\n\n    if (outerAdapter == null || !(outerAdapter instanceof LuRecyclerViewAdapter)) {\n        return;\n    }\n\n    LuRecyclerViewAdapter luRecyclerViewAdapter = (LuRecyclerViewAdapter) outerAdapter;\n\n    if (luRecyclerViewAdapter.getFooterViewsCount() > 0) {\n        luRecyclerViewAdapter.removeFooterView();\n    }\n    luRecyclerViewAdapter.addFooterView(view);\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/util/LuRecyclerViewUtils.java", "commit_date": "2016-12-27 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u79fb\u9664HeaderView\n *\n * @param recyclerView\n */\n", "func_signal": "public static void removeHeaderView(RecyclerView recyclerView)", "code": "{\n\n    RecyclerView.Adapter outerAdapter = recyclerView.getAdapter();\n\n    if (outerAdapter != null && outerAdapter instanceof LuRecyclerViewAdapter) {\n\n        int headerViewCounter = ((LuRecyclerViewAdapter) outerAdapter).getHeaderViewsCount();\n        if (headerViewCounter > 0) {\n            View headerView = ((LuRecyclerViewAdapter) outerAdapter).getHeaderView();\n            ((LuRecyclerViewAdapter) outerAdapter).removeHeaderView(headerView);\n        }\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/util/LuRecyclerViewUtils.java", "commit_date": "2016-12-27 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * @param parent     RecyclerView\n * @param pos        \u5f53\u524ditem\u7684\u4f4d\u7f6e\n * @param spanCount  \u6bcf\u884c\u663e\u793a\u7684item\u4e2a\u6570\n * @param childCount child\u4e2a\u6570\n */\n", "func_signal": "private boolean isLastRaw(RecyclerView parent, int pos, int spanCount, int childCount)", "code": "{\n    LayoutManager layoutManager = parent.getLayoutManager();\n    LRecyclerViewAdapter adapter = (LRecyclerViewAdapter) parent.getAdapter();\n    if (layoutManager instanceof GridLayoutManager) {\n        int leftCount = childCount - childCount % spanCount;//3\n        //leftCount:\u82e5childCount\u80fd\u88abspan\u6574\u9664\u4e3achildCount\u5426\u5219\u4e3a\u53bb\u6389\u6700\u540e\u4e00\u884c\u7684item\u603b\u6570\n        if ((pos - adapter.getHeaderViews().size() + 1) > leftCount) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/ItemDecoration/GridItemDecoration.java", "commit_date": "2017-03-23 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u5230\u5e95\u52a0\u8f7d\u662f\u5426\u53ef\u7528\n */\n", "func_signal": "public void setLoadMoreEnabled(boolean enabled)", "code": "{\n    if(mWrapAdapter == null){\n        throw new NullPointerException(\"LRecyclerViewAdapter cannot be null, please make sure the variable mWrapAdapter have been initialized.\");\n    }\n    mLoadMoreEnabled = enabled;\n    if (!enabled) {\n        mWrapAdapter.removeFooterView();\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/recyclerview/LRecyclerView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * @param pageSize \u4e00\u9875\u52a0\u8f7d\u7684\u6570\u91cf\n * @param total \u603b\u6570\n */\n", "func_signal": "public void refreshComplete(int pageSize, int total)", "code": "{\n    this.mPageSize = pageSize;\n    if (mRefreshing) {\n        mRefreshing = false;\n        mRefreshHeader.refreshComplete();\n\n        if(mWrapAdapter.getInnerAdapter().getItemCount() < pageSize) {\n            mFootView.setVisibility(GONE);\n            mWrapAdapter.removeFooterView();\n        } else {\n            if (mWrapAdapter.getFooterViewsCount() == 0) {\n                mWrapAdapter.addFooterView(mFootView);\n            }\n        }\n    } else if (mLoadingData) {\n        mLoadingData = false;\n        mLoadMoreFooter.onComplete();\n    }\n    if (pageSize < total) {\n        isNoMore = false;\n    }\n    //\u5904\u7406\u7279\u6b8a\u60c5\u51b5 \u6700\u540e\u4e00\u884c\u663e\u793a\u51fa\u6765\u4e86\u52a0\u8f7d\u66f4\u591a\u7684view\u7684\u4e00\u90e8\u5206\n    if (mWrapAdapter.getInnerAdapter().getItemCount() == mPageSize) {\n        isCritical = true;\n    } else {\n        isCritical = false;\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/recyclerview/LRecyclerView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * Sets the divider colour\n *\n * @param color the colour\n * @return the current instance of the Builder\n */\n", "func_signal": "public Builder setColor(@ColorInt int color)", "code": "{\n    mColour = color;\n    return this;\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/ItemDecoration/GridItemDecoration.java", "commit_date": "2017-03-23 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u6b64\u65b9\u6cd5\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3\u6570\u636e\u4e0d\u6ee1\u4e00\u5c4f\u5e55\u6216\u8005\u6570\u636e\u5c0f\u4e8epageSize\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5426\u663e\u793afootview\n * \u5728\u5206\u9875\u60c5\u51b5\u4e0b\u4f7f\u7528refreshComplete(int pageSize, int total, boolean false)\u5c31\u76f8\u5f53\u4e8erefreshComplete(int pageSize, int total)\n * @param pageSize \u4e00\u9875\u52a0\u8f7d\u7684\u6570\u91cf\n * @param total \u603b\u6570\n * @param isShowFootView  \u662f\u5426\u9700\u8981\u663e\u793afootview\uff08\u524d\u63d0\u6761\u4ef6\u662f\uff1agetItemCount() < pageSize\uff09\n */\n", "func_signal": "public void refreshComplete(int pageSize, int total, boolean isShowFootView)", "code": "{\n    this.mPageSize = pageSize;\n    if (mRefreshing) {\n        mRefreshing = false;\n        mRefreshHeader.refreshComplete();\n        if (isShowFootView) {\n            mFootView.setVisibility(VISIBLE);\n        } else {\n            if(mWrapAdapter.getInnerAdapter().getItemCount() < pageSize) {\n                mFootView.setVisibility(GONE);\n                mWrapAdapter.removeFooterView();\n            } else {\n                if (mWrapAdapter.getFooterViewsCount() == 0) {\n                    mWrapAdapter.addFooterView(mFootView);\n                }\n            }\n        }\n    } else if (mLoadingData) {\n        mLoadingData = false;\n        mLoadMoreFooter.onComplete();\n    }\n    if (pageSize < total) {\n        isNoMore = false;\n    }\n    //\u5904\u7406\u7279\u6b8a\u60c5\u51b5 \u6700\u540e\u4e00\u884c\u663e\u793a\u51fa\u6765\u4e86\u52a0\u8f7d\u66f4\u591a\u7684view\u7684\u4e00\u90e8\u5206\n    if (mWrapAdapter.getInnerAdapter().getItemCount() == mPageSize) {\n        isCritical = true;\n    } else {\n        isCritical = false;\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/recyclerview/LRecyclerView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * Sets the divider colour\n *\n * @param resource the colour resource id\n * @return the current instance of the Builder\n */\n", "func_signal": "public Builder setColorResource(@ColorRes int resource)", "code": "{\n    setColor(ContextCompat.getColor(mContext, resource));\n    return this;\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/ItemDecoration/GridItemDecoration.java", "commit_date": "2017-03-23 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u79fb\u9664FooterView\n *\n * @param recyclerView\n */\n", "func_signal": "public static void removeFooterView(RecyclerView recyclerView)", "code": "{\n\n    RecyclerView.Adapter outerAdapter = recyclerView.getAdapter();\n\n    if (outerAdapter != null && outerAdapter instanceof LuRecyclerViewAdapter) {\n\n        int footerViewCounter = ((LuRecyclerViewAdapter) outerAdapter).getFooterViewsCount();\n        if (footerViewCounter > 0) {\n            ((LuRecyclerViewAdapter) outerAdapter).removeFooterView();\n        }\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/util/LuRecyclerViewUtils.java", "commit_date": "2016-12-27 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u8bf7\u4f7f\u7528\u81ea\u5b9a\u4e49LoadingFooter\u7684\u65b9\u5f0f\u5b9e\u73b0\n * @param loading\n * @param noMore\n * @param noNetWork\n */\n", "func_signal": "@Deprecated\npublic void setFooterViewHint(String loading, String noMore, String noNetWork)", "code": "{\n    if (mLoadMoreFooter instanceof LoadingFooter) {\n        LoadingFooter loadingFooter = ((LoadingFooter) mLoadMoreFooter);\n        loadingFooter.setLoadingHint(loading);\n        loadingFooter.setNoMoreHint(noMore);\n        loadingFooter.setNoNetWorkHint(noNetWork);\n    }\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/recyclerview/LRecyclerView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * \u5173\u4e8e\u4e8b\u4ef6\u7684\n */\n", "func_signal": "public RecyclerViewHolder setOnClickListener(int viewId, View.OnClickListener listener)", "code": "{\n    View view = findViewById(viewId);\n    view.setOnClickListener(listener);\n    return this;\n}", "path": "LRecyclerView/app/src/main/java/com/lzx/demo/holder/RecyclerViewHolder.java", "commit_date": "2016-07-31 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * set view when no content item\n *\n * @param emptyView visiable view when items is empty\n */\n", "func_signal": "public void setEmptyView(View emptyView)", "code": "{\n    this.mEmptyView = emptyView;\n    mDataObserver.onChanged();\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/recyclerview/LRecyclerView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "//\u901a\u8fc7dp\u8bbe\u7f6e\u6c34\u5e73\u95f4\u8ddd\n", "func_signal": "public Builder setHorizontal(@DimenRes int horizontal)", "code": "{\n    this.mHorizontal = mResources.getDimensionPixelSize(horizontal);\n    return this;\n}", "path": "LRecyclerView/LRecyclerview_library/src/main/java/com/github/jdsjlzx/ItemDecoration/GridItemDecoration.java", "commit_date": "2017-03-23 00:00:00", "repo_name": "jdsjlzx/LRecyclerView", "stars": 2469, "license": "apache-2.0", "language": "java", "size": 38365}
{"docstring": "/**\n * @param crawlPath crawlPath is the path of the directory which maintains\n *                  information of this crawler\n * @param autoParse if autoParse is true,BreadthCrawler will auto extract\n *                  links which match regex rules from pag\n */\n", "func_signal": "public DemoAnnotatedManualNewsCrawler(String crawlPath, boolean autoParse)", "code": "{\n    super(crawlPath, autoParse);\n    // add 5 start pages and set their type to \"list\"\n    //\"list\" is not a reserved word, you can use other string instead\n    this.addSeedAndReturn(\"https://blog.github.com/\").type(\"list\");\n    for(int pageIndex = 2; pageIndex <= 5; pageIndex++) {\n        String seedUrl = String.format(\"https://blog.github.com/page/%d/\", pageIndex);\n        this.addSeed(seedUrl, \"list\");\n    }\n\n    setThreads(50);\n    getConf().setTopN(100);\n\n    //enable resumable mode\n    //setResumable(true);\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoAnnotatedManualNewsCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \u6784\u9020\u4e00\u4e2a\u57fa\u4e8e\u4f2f\u514b\u5229DB\u7684\u722c\u866b\n * \u4f2f\u514b\u5229DB\u6587\u4ef6\u5939\u4e3acrawlPath\uff0ccrawlPath\u4e2d\u7ef4\u62a4\u4e86\u5386\u53f2URL\u7b49\u4fe1\u606f\n * \u4e0d\u540c\u4efb\u52a1\u4e0d\u8981\u4f7f\u7528\u76f8\u540c\u7684crawlPath\n * \u4e24\u4e2a\u4f7f\u7528\u76f8\u540ccrawlPath\u7684\u722c\u866b\u5e76\u884c\u722c\u53d6\u4f1a\u4ea7\u751f\u9519\u8bef\n * \n * @param crawlPath \u4f2f\u514b\u5229DB\u4f7f\u7528\u7684\u6587\u4ef6\u5939\n * @param autoParse \u662f\u5426\u6839\u636e\u8bbe\u7f6e\u7684\u6b63\u5219\u81ea\u52a8\u63a2\u6d4b\u65b0URL\n */\n", "func_signal": "public BreadthCrawler(String crawlPath,boolean autoParse)", "code": "{\n  super(autoParse);\n  this.dbManager=new BerkeleyDBManager(crawlPath);\n    }", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/plugin/berkeley/BreadthCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u4e2a\u6b63\u6b63\u5219\u89c4\u5219\n * @param positiveregex\n * @return \u81ea\u8eab\n */\n", "func_signal": "public RegexRule addPositive(String positiveregex)", "code": "{\n    positive.add(positiveregex);\n    return this;\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/util/RegexRule.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \u5f00\u59cb\u722c\u53d6\uff0c\u8fed\u4ee3\u6b21\u6570\u4e3adepth\n *\n * @param depth \u8fed\u4ee3\u6b21\u6570\n * @throws Exception \u5f02\u5e38\n */\n", "func_signal": "public void start(int depth) throws Exception", "code": "{\n\n    LOG.info(this.toString());\n\n    // register conf to all plugins\n    // except [fetcher, generatorFilter]\n    ConfigurationUtils.setTo(this, dbManager, executor, nextFilter);\n    registerOtherConfigurations();\n\n\n    if (!resumable) {\n        if (dbManager.isDBExists()) {\n            dbManager.clear();\n        }\n\n        if (seeds.isEmpty() && forcedSeeds.isEmpty()) {\n            LOG.info(\"error:Please add at least one seed\");\n            return;\n        }\n    }\n    dbManager.open();\n\n    if (!seeds.isEmpty()) {\n        inject();\n    }\n\n    if (!forcedSeeds.isEmpty()) {\n        injectForcedSeeds();\n    }\n\n    status = RUNNING;\n    for (int i = 0; i < depth; i++) {\n        if (status == STOPED) {\n            break;\n        }\n        LOG.info(\"start depth \" + (i + 1));\n        long startTime = System.currentTimeMillis();\n        fetcher = new Fetcher();\n        //register fetcher conf\n        ConfigurationUtils.setTo(this, fetcher);\n\n        fetcher.setDBManager(dbManager);\n        fetcher.setExecutor(executor);\n        fetcher.setNextFilter(nextFilter);\n        fetcher.setThreads(threads);\n        int totalGenerate = fetcher.fetchAll(generatorFilter);\n\n        long endTime = System.currentTimeMillis();\n        long costTime = (endTime - startTime) / 1000;\n\n        LOG.info(\"depth \" + (i + 1) + \" finish: \\n\\ttotal urls:\\t\" + totalGenerate + \"\\n\\ttotal time:\\t\" + costTime + \" seconds\");\n        if (totalGenerate == 0) {\n            break;\n        }\n\n    }\n    dbManager.close();\n    afterStop();\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/crawler/Crawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * construct the Bing Search url by the search keyword and the pageIndex\n * @param keyword\n * @param pageIndex\n * @return the constructed url\n * @throws Exception\n */\n", "func_signal": "public static String createBingUrl(String keyword, int pageIndex) throws Exception", "code": "{\n    int first = pageIndex * 10 - 9;\n    keyword = URLEncoder.encode(keyword, \"utf-8\");\n    return String.format(\"http://cn.bing.com/search?q=%s&first=%s\", keyword, first);\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoBingCrawler.java", "commit_date": "2018-07-24 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u4e2a\u6b63\u5219\u89c4\u5219 \u6b63\u5219\u89c4\u5219\u6709\u4e24\u79cd\uff0c\u6b63\u6b63\u5219\u548c\u53cd\u6b63\u5219 \n * URL\u7b26\u5408\u6b63\u5219\u89c4\u5219\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\uff1a 1.\u81f3\u5c11\u80fd\u5339\u914d\u4e00\u6761\u6b63\u6b63\u5219 2.\u4e0d\u80fd\u548c\u4efb\u4f55\u53cd\u6b63\u5219\u5339\u914d\n * \u6b63\u6b63\u5219\u793a\u4f8b\uff1a+a.*c\u662f\u4e00\u6761\u6b63\u6b63\u5219\uff0c\u6b63\u5219\u7684\u5185\u5bb9\u4e3aa.*c\uff0c\u8d77\u59cb\u52a0\u53f7\u8868\u793a\u6b63\u6b63\u5219\n * \u53cd\u6b63\u5219\u793a\u4f8b\uff1a-a.*c\u65f6\u4e00\u6761\u53cd\u6b63\u5219\uff0c\u6b63\u5219\u7684\u5185\u5bb9\u4e3aa.*c\uff0c\u8d77\u59cb\u51cf\u53f7\u8868\u793a\u53cd\u6b63\u5219\n * \u5982\u679c\u4e00\u4e2a\u89c4\u5219\u7684\u8d77\u59cb\u5b57\u7b26\u4e0d\u4e3a\u52a0\u53f7\u4e14\u4e0d\u4e3a\u51cf\u53f7\uff0c\u5219\u8be5\u6b63\u5219\u4e3a\u6b63\u6b63\u5219\uff0c\u6b63\u5219\u7684\u5185\u5bb9\u4e3a\u81ea\u8eab\n * \u4f8b\u5982a.*c\u662f\u4e00\u6761\u6b63\u6b63\u5219\uff0c\u6b63\u5219\u7684\u5185\u5bb9\u4e3aa.*c\n * @param rule \u6b63\u5219\u89c4\u5219\n * @return \u81ea\u8eab\n */\n", "func_signal": "public RegexRule addRule(String rule)", "code": "{\n    if (rule.length() == 0) {\n        return this;\n    }\n    char pn = rule.charAt(0);\n    String realrule = rule.substring(1);\n    if (pn == '+') {\n        addPositive(realrule);\n    } else if (pn == '-') {\n        addNegative(realrule);\n    } else {\n        addPositive(rule);\n    }\n    return this;\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/util/RegexRule.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/*\n    \u8be5\u4f8b\u5b50\u5229\u7528\u6b63\u5219\u63a7\u5236\u722c\u866b\u7684\u904d\u5386\uff0c\n    \u53e6\u4e00\u79cd\u5e38\u7528\u904d\u5386\u65b9\u6cd5\u53ef\u53c2\u8003DemoTypeCrawler\n*/\n", "func_signal": "public TutorialCrawler(String crawlPath, boolean autoParse)", "code": "{\n    super(crawlPath, autoParse);\n    \n    addSeed(\"https://blog.csdn.net/\");\n    addRegex(\"https://blog.csdn.net/.*/article/details/.*\");\n    addRegex(\"-.*#.*\");\n    \n    //\u9700\u8981\u6293\u53d6\u56fe\u7247\u65f6\u8bbe\u7f6e\u4e3atrue\uff0c\u5e76\u52a0\u5165\u56fe\u7247\u7684\u6b63\u5219\u89c4\u5219\n//        setParseImg(true);\n    \n    //\u8bbe\u7f6e\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6293\u53d6\u95f4\u9694\uff08\u6beb\u79d2\uff09\n//        setExecuteInterval(1000);\n    getConf().setExecuteInterval(1000);\n    \n    //\u8bbe\u7f6e\u7ebf\u7a0b\u6570\n    setThreads(30);\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/TutorialCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/*\n    \u8be5\u4f8b\u5b50\u5229\u7528WebCollector 2.50\u65b0\u7279\u6027NextFilter\u8fc7\u6ee4\u63a2\u6d4b\u5230\u7684URL\n */\n", "func_signal": "public DemoNextFilter(String crawlPath, boolean autoParse)", "code": "{\n    super(crawlPath, autoParse);\n    addSeed(\"https://blog.csdn.net/\");\n    addRegex(\".*\");\n    //\u8bbe\u7f6e\u7ebf\u7a0b\u6570\n    setThreads(30);\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoNextFilter.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * return null if there is no CrawlDatum to generate\n * @return\n */\n", "func_signal": "public CrawlDatum next()", "code": "{\n    int topN = getConf().getTopN();\n    int maxExecuteCount = getConf().getOrDefault(Configuration.KEY_MAX_EXECUTE_COUNT, Integer.MAX_VALUE);\n\n    if(topN > 0 && totalGenerate >= topN){\n        return null;\n    }\n\n    CrawlDatum datum;\n    while (true) {\n        try {\n            datum = nextWithoutFilter();\n            if (datum == null) {\n                return datum;\n            }\n            if(filter == null || (datum = filter.filter(datum))!=null){\n                if (datum.getExecuteCount() > maxExecuteCount) {\n                    continue;\n                }\n                totalGenerate += 1;\n                return datum;\n            }\n\n        } catch (Exception e) {\n            LOG.info(\"Exception when generating\", e);\n            return null;\n        }\n\n    }\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/crawldb/Generator.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/*\n    \u53ef\u4ee5\u5f80next\u4e2d\u6dfb\u52a0\u5e0c\u671b\u540e\u7eed\u722c\u53d6\u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u53ef\u4ee5\u662fURL\u6216\u8005CrawlDatum\n    \u722c\u866b\u4e0d\u4f1a\u91cd\u590d\u722c\u53d6\u4efb\u52a1\uff0c\u4ece2.20\u7248\u4e4b\u540e\uff0c\u722c\u866b\u6839\u636eCrawlDatum\u7684key\u53bb\u91cd\uff0c\u800c\u4e0d\u662fURL\n    \u56e0\u6b64\u5982\u679c\u5e0c\u671b\u91cd\u590d\u722c\u53d6\u67d0\u4e2aURL\uff0c\u53ea\u8981\u5c06CrawlDatum\u7684key\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5386\u53f2\u4e2d\u4e0d\u5b58\u5728\u7684\u503c\u5373\u53ef\n    \u4f8b\u5982\u589e\u91cf\u722c\u53d6\uff0c\u53ef\u4ee5\u4f7f\u7528 \u722c\u53d6\u65f6\u95f4+URL\u4f5c\u4e3akey\u3002\n\n    \u65b0\u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 page.select(css\u9009\u62e9\u5668)\u65b9\u6cd5\u6765\u62bd\u53d6\u7f51\u9875\u4e2d\u7684\u4fe1\u606f\uff0c\u7b49\u4ef7\u4e8e\n    page.getDoc().select(css\u9009\u62e9\u5668)\u65b9\u6cd5\uff0cpage.getDoc()\u83b7\u53d6\u5230\u7684\u662fJsoup\u4e2d\u7684\n    Document\u5bf9\u8c61\uff0c\u7ec6\u8282\u8bf7\u53c2\u8003Jsoup\u6559\u7a0b\n */\n", "func_signal": "@Override\npublic void visit(Page page, CrawlDatums next)", "code": "{\n    if (page.matchType(\"content\")) {\n        String title = page.select(\"h1.title-article\").first().text();\n        String author = page.select(\"p.name>a.text-truncate\").first().text();\n        System.out.println(\"title:\" + title + \"\\tauthor:\" + author);\n    }\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoNextFilter.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \n * \u5047\u8bbe\u6211\u4eec\u8981\u722c\u53d6\u4e09\u4e2a\u94fe\u63a5 1)http://www.A.com/index.php \u9700\u8981POST\uff0c\u5e76\u9700\u8981POST\u8868\u5355\u6570\u636eusername:John\n * 2)http://www.B.com/index.php?age=10 \u9700\u8981POST\uff0c\u6570\u636e\u76f4\u63a5\u5728URL\u4e2d \uff0c\u4e0d\u9700\u8981\u9644\u5e26\u6570\u636e 3)http://www.C.com/\n * \u9700\u8981GET\n */\n", "func_signal": "public DemoPostCrawler(final String crawlPath, boolean autoParse)", "code": "{\n    super(crawlPath, autoParse);\n\n    addSeed(new CrawlDatum(\"http://www.A.com/index.php\")\n            .meta(\"method\", \"POST\")\n            .meta(\"username\", \"John\"));\n    addSeed(new CrawlDatum(\"http://www.B.com/index.php\")\n            .meta(\"method\", \"POST\"));\n    addSeed(new CrawlDatum(\"http://www.C.com/index.php\")\n            .meta(\"method\", \"GET\"));\n\n    setRequester(new OkHttpRequester(){\n        @Override\n        public Request.Builder createRequestBuilder(CrawlDatum crawlDatum) {\n            Request.Builder requestBuilder = super.createRequestBuilder(crawlDatum);\n            String method = crawlDatum.meta(\"method\");\n\n            // \u9ed8\u8ba4\u5c31\u662fGET\u65b9\u5f0f\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u6765\u7684\u5373\u53ef\n            if(method.equals(\"GET\")){\n                return requestBuilder;\n            }\n\n            if(method.equals(\"POST\")){\n                RequestBody requestBody;\n                String username = crawlDatum.meta(\"username\");\n                // \u5982\u679c\u6ca1\u6709\u8868\u5355\u6570\u636eusername\uff0cPOST\u7684\u6570\u636e\u76f4\u63a5\u5728URL\u4e2d\n                if(username == null){\n                    requestBody = RequestBody.create(null, new byte[]{});\n                }else{\n                    // \u6839\u636emeta\u6784\u5efaPOST\u8868\u5355\u6570\u636e\n                    requestBody = new MultipartBody.Builder()\n                            .setType(MultipartBody.FORM)\n                            .addFormDataPart(\"username\", username)\n                            .build();\n                }\n                return requestBuilder.post(requestBody);\n            }\n\n            //\u6267\u884c\u8fd9\u53e5\u4f1a\u629b\u51fa\u5f02\u5e38\n            ExceptionUtils.fail(\"wrong method: \" + method);\n            return null;\n        }\n    });\n\n\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoPostCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \u6839\u636e\u4efb\u52a1\u7ba1\u7406\u5668\u548c\u6267\u884c\u5668\u6784\u9020\u722c\u866b\n *\n * @param dbManager \u4efb\u52a1\u7ba1\u7406\u5668\n * @param executor \u6267\u884c\u5668\n */\n", "func_signal": "public Crawler(DBManager dbManager, Executor executor)", "code": "{\n    this.dbManager = dbManager;\n    this.executor = executor;\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/crawler/Crawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/*\n    \u53ef\u4ee5\u5f80next\u4e2d\u6dfb\u52a0\u5e0c\u671b\u540e\u7eed\u722c\u53d6\u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u53ef\u4ee5\u662fURL\u6216\u8005CrawlDatum\n    \u722c\u866b\u4e0d\u4f1a\u91cd\u590d\u722c\u53d6\u4efb\u52a1\uff0c\u4ece2.20\u7248\u4e4b\u540e\uff0c\u722c\u866b\u6839\u636eCrawlDatum\u7684key\u53bb\u91cd\uff0c\u800c\u4e0d\u662fURL\n    \u56e0\u6b64\u5982\u679c\u5e0c\u671b\u91cd\u590d\u722c\u53d6\u67d0\u4e2aURL\uff0c\u53ea\u8981\u5c06CrawlDatum\u7684key\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5386\u53f2\u4e2d\u4e0d\u5b58\u5728\u7684\u503c\u5373\u53ef\n    \u4f8b\u5982\u589e\u91cf\u722c\u53d6\uff0c\u53ef\u4ee5\u4f7f\u7528 \u722c\u53d6\u65f6\u95f4+URL\u4f5c\u4e3akey\u3002\n\n    \u65b0\u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 page.select(css\u9009\u62e9\u5668)\u65b9\u6cd5\u6765\u62bd\u53d6\u7f51\u9875\u4e2d\u7684\u4fe1\u606f\uff0c\u7b49\u4ef7\u4e8e\n    page.getDoc().select(css\u9009\u62e9\u5668)\u65b9\u6cd5\uff0cpage.getDoc()\u83b7\u53d6\u5230\u7684\u662fJsoup\u4e2d\u7684\n    Document\u5bf9\u8c61\uff0c\u7ec6\u8282\u8bf7\u53c2\u8003Jsoup\u6559\u7a0b\n*/\n", "func_signal": "@Override\npublic void visit(Page page, CrawlDatums next)", "code": "{\n    if (page.matchUrl(\"https://blog.csdn.net/.*/article/details/.*\")) {\n        String title = page.select(\"h1.title-article\").first().text();\n        String author = page.select(\"a#uid\").first().text();\n        System.out.println(\"title:\" + title + \"\\tauthor:\" + author);\n    }\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/TutorialCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n *\n * @param args \u53c2\u6570\n * @throws Exception \u5f02\u5e38\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\n    DemoPostCrawler crawler = new DemoPostCrawler(\"json_crawler\", true);\n    crawler.start(1);\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoPostCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \u5224\u65ad\u8f93\u5165\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u6b63\u5219\u89c4\u5219\n * @param str \u8f93\u5165\u7684\u5b57\u7b26\u4e32\n * @return \u8f93\u5165\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u6b63\u5219\u89c4\u5219\n */\n", "func_signal": "public boolean satisfy(String str)", "code": "{\n\n    int state = 0;\n    for (String nregex : negative) {\n        if (Pattern.matches(nregex, str)) {\n            return false;\n        }\n    }\n\n    int count = 0;\n    for (String pregex : positive) {\n        if (Pattern.matches(pregex, str)) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    } else {\n        return true;\n    }\n\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/util/RegexRule.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/*\n    \u5b9e\u9645\u4f7f\u7528\u65f6\u5efa\u8bae\u6309\u7167DemoTypeCrawler\u7684\u65b9\u5f0f\u64cd\u4f5c\uff0c\u8be5\u6559\u7a0b\u76ee\u7684\u4e3a\u9610\u8ff0meta\u7684\u539f\u7406\n\n    \u53ef\u4ee5\u5f80next\u4e2d\u6dfb\u52a0\u5e0c\u671b\u540e\u7eed\u722c\u53d6\u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u53ef\u4ee5\u662fURL\u6216\u8005CrawlDatum\n    \u722c\u866b\u4e0d\u4f1a\u91cd\u590d\u722c\u53d6\u4efb\u52a1\uff0c\u4ece2.20\u7248\u4e4b\u540e\uff0c\u722c\u866b\u6839\u636eCrawlDatum\u7684key\u53bb\u91cd\uff0c\u800c\u4e0d\u662fURL\n    \u56e0\u6b64\u5982\u679c\u5e0c\u671b\u91cd\u590d\u722c\u53d6\u67d0\u4e2aURL\uff0c\u53ea\u8981\u5c06CrawlDatum\u7684key\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5386\u53f2\u4e2d\u4e0d\u5b58\u5728\u7684\u503c\u5373\u53ef\n    \u4f8b\u5982\u589e\u91cf\u722c\u53d6\uff0c\u53ef\u4ee5\u4f7f\u7528 \u722c\u53d6\u65f6\u95f4+URL\u4f5c\u4e3akey\u3002\n\n    \u65b0\u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 page.select(css\u9009\u62e9\u5668)\u65b9\u6cd5\u6765\u62bd\u53d6\u7f51\u9875\u4e2d\u7684\u4fe1\u606f\uff0c\u7b49\u4ef7\u4e8e\n    page.getDoc().select(css\u9009\u62e9\u5668)\u65b9\u6cd5\uff0cpage.getDoc()\u83b7\u53d6\u5230\u7684\u662fJsoup\u4e2d\u7684\n    Document\u5bf9\u8c61\uff0c\u7ec6\u8282\u8bf7\u53c2\u8003Jsoup\u6559\u7a0b\n\n    \u8be5Demo\u722c\u866b\u9700\u8981\u5e94\u5bf9\u8c46\u74e3\u56fe\u4e66\u7684\u4e09\u79cd\u9875\u9762\uff1a\n    1\uff09\u6807\u7b7e\u9875\uff08taglist\uff0c\u5305\u542b\u56fe\u4e66\u5217\u8868\u9875\u7684\u5165\u53e3\u94fe\u63a5\uff09\n    2\uff09\u5217\u8868\u9875\uff08booklist\uff0c\u5305\u542b\u56fe\u4e66\u8be6\u60c5\u9875\u7684\u5165\u53e3\u94fe\u63a5\uff09\n    3\uff09\u56fe\u4e66\u8be6\u60c5\u9875\uff08content\uff09\n */\n", "func_signal": "@Override\npublic void visit(Page page, CrawlDatums next)", "code": "{\n\n    String type=page.meta(\"type\");\n    //\u5982\u679c\u662f\u5217\u8868\u9875\uff0c\u62bd\u53d6\u5185\u5bb9\u9875\u94fe\u63a5\uff0c\u653e\u5165\u540e\u7eed\u4efb\u52a1\u4e2d\n    if(type.equals(\"taglist\")){\n        //\u53ef\u4ee5\u786e\u5b9a\u62bd\u53d6\u5230\u7684\u94fe\u63a5\u90fd\u6307\u5411\u5185\u5bb9\u9875\n        //\u56e0\u6b64\u4e3a\u8fd9\u4e9b\u94fe\u63a5\u6dfb\u52a0\u9644\u52a0\u4fe1\u606f\uff08meta\uff09\uff1atype=content\n        next.addAndReturn(page.links(\"table.tagCol td>a\")).meta(\"type\", \"booklist\");\n    }else if(type.equals(\"booklist\")){\n        next.addAndReturn(page.links(\"div.info>h2>a\")).meta(\"type\", \"content\");\n    }else if(type.equals(\"content\")){\n        //\u5904\u7406\u5185\u5bb9\u9875\uff0c\u62bd\u53d6\u4e66\u540d\u548c\u8c46\u74e3\u8bc4\u5206\n        String title=page.select(\"h1>span\").first().text();\n        String score=page.select(\"strong.ll.rating_num\").first().text();\n        System.out.println(\"title:\"+title+\"\\tscore:\"+score);\n    }\n\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoMetaCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "//    public static void addParent(Object child, Configured parent){\n//        if(child instanceof Configured){\n//            Configured configuredChild = (Configured) child;\n//            configuredChild.setParent(parent);\n//        }\n//    }\n", "func_signal": "public static void setTo(Configured from, Object... targets)", "code": "{\n        for(Object target:targets){\n            if(target instanceof Configured){\n                Configured configuredTarget = (Configured) target;\n                configuredTarget.setConf(from.getConf());\n            }\n        }\n\n    }", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/util/ConfigurationUtils.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "//    @Override\n//    public Page getResponse(CrawlDatum crawlDatum) throws Exception {\n//        HttpRequest request = new HttpRequest(crawlDatum.url());\n//\n//        request.setMethod(crawlDatum.meta(\"method\"));\n//        String outputData = crawlDatum.meta(\"outputData\");\n//        if (outputData != null) {\n//            request.setOutputData(outputData.getBytes(\"utf-8\"));\n//        }\n//        return request.responsePage();\n//        /*\n//        //\u901a\u8fc7\u4e0b\u9762\u65b9\u5f0f\u53ef\u4ee5\u8bbe\u7f6eCookie\u3001User-Agent\u7b49http\u8bf7\u6c42\u5934\u4fe1\u606f\n//        request.setCookie(\"xxxxxxxxxxxxxx\");\n//        request.setUserAgent(\"WebCollector\");\n//        request.addHeader(\"xxx\", \"xxxxxxxxx\");\n//         */\n//    }\n", "func_signal": "@Override\n    public void visit(Page page, CrawlDatums next)", "code": "{\n        JsonObject jsonObject = page.jsonObject();\n        System.out.println(\"JSON\u4fe1\u606f\uff1a\" + jsonObject);\n    }", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoPostCrawler.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u4e2a\u53cd\u6b63\u5219\u89c4\u5219\n * @param negativeregex\n * @return \u81ea\u8eab\n */\n", "func_signal": "public RegexRule addNegative(String negativeregex)", "code": "{\n    negative.add(negativeregex);\n    return this;\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/util/RegexRule.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/*\n    \u8be5\u4f8b\u5b50\u5229\u7528WebCollector 2.50\u65b0\u7279\u6027NextFilter\u8fc7\u6ee4\u63a2\u6d4b\u5230\u7684URL\n */\n", "func_signal": "public DemoHashSetNextFilter(String crawlPath)", "code": "{\n    super(crawlPath, false);\n    addSeed(\"https://www.csdn.net\");\n\n    //\u8bbe\u7f6e\u7ebf\u7a0b\u6570\n    setThreads(30);\n}", "path": "WebCollector/src/main/java/cn/edu/hfut/dmic/webcollector/example/DemoHashSetNextFilter.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "CrawlScript/WebCollector", "stars": 3031, "license": "gpl-3.0", "language": "java", "size": 272113}
{"docstring": "/**\n * Search for notes with reminder\n *\n * @param filterPastReminders Excludes past reminders\n * @return Notes list\n */\n", "func_signal": "public List<Note> getNotesWithReminder(boolean filterPastReminders)", "code": "{\n  String whereCondition = \" WHERE \" + KEY_REMINDER\n      + (filterPastReminders ? \" >= \" + Calendar.getInstance().getTimeInMillis() : \" IS NOT NULL\")\n      + \" AND \" + KEY_ARCHIVED + \" IS NOT 1\"\n      + \" AND \" + KEY_TRASHED + \" IS NOT 1\";\n  return getNotes(whereCondition, true);\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Get note Category\n */\n", "func_signal": "public Category getCategory(Long id)", "code": "{\n  Category category = null;\n  String sql = \"SELECT \"\n      + KEY_CATEGORY_ID + \",\"\n      + KEY_CATEGORY_NAME + \",\"\n      + KEY_CATEGORY_DESCRIPTION + \",\"\n      + KEY_CATEGORY_COLOR\n      + \" FROM \" + TABLE_CATEGORY\n      + \" WHERE \" + KEY_CATEGORY_ID + \" = \" + id;\n\n  try (Cursor cursor = getDatabase().rawQuery(sql, null)) {\n\n    if (cursor.moveToFirst()) {\n      category = new Category(cursor.getLong(0), cursor.getString(1),\n          cursor.getString(2), cursor.getString(3));\n    }\n\n  }\n  return category;\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Getting single note\n */\n", "func_signal": "public Note getNote(long id)", "code": "{\n  List<Note> notes = getNotes(\" WHERE \" + KEY_ID + \" = \" + id, true);\n  return notes.isEmpty() ? null : notes.get(0);\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Retrieves all notes related to Category it passed as parameter\n *\n * @param categoryId Category integer identifier\n * @return List of notes with requested category\n */\n", "func_signal": "public List<Note> getNotesByCategory(Long categoryId)", "code": "{\n  List<Note> notes;\n  boolean filterArchived = prefs\n      .getBoolean(PREF_FILTER_ARCHIVED_IN_CATEGORIES + categoryId, false);\n  try {\n    String whereCondition = \" WHERE \"\n        + KEY_CATEGORY_ID + \" = \" + categoryId\n        + \" AND \" + KEY_TRASHED + \" IS NOT 1\"\n        + (filterArchived ? \" AND \" + KEY_ARCHIVED + \" IS NOT 1\" : \"\");\n    notes = getNotes(whereCondition, true);\n  } catch (NumberFormatException e) {\n    notes = getAllNotes(true);\n  }\n  return notes;\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Common method for notes retrieval. It accepts a query to perform and returns matching records.\n */\n", "func_signal": "public List<Note> getNotes(String whereCondition, boolean order)", "code": "{\n  List<Note> noteList = new ArrayList<>();\n\n  String sortColumn = \"\";\n  String sortOrder = \"\";\n\n  // Getting sorting criteria from preferences. Reminder screen forces sorting.\n  if (Navigation.checkNavigation(Navigation.REMINDERS)) {\n    sortColumn = KEY_REMINDER;\n  } else {\n    sortColumn = prefs.getString(PREF_SORTING_COLUMN, KEY_TITLE);\n  }\n  if (order) {\n    sortOrder =\n        KEY_TITLE.equals(sortColumn) || KEY_REMINDER.equals(sortColumn) ? \" ASC \" : \" DESC \";\n  }\n\n  // In case of title sorting criteria it must be handled empty title by concatenating content\n  sortColumn = KEY_TITLE.equals(sortColumn) ? KEY_TITLE + \"||\" + KEY_CONTENT : sortColumn;\n\n  // In case of reminder sorting criteria the empty reminder notes must be moved on bottom of results\n  sortColumn = KEY_REMINDER.equals(sortColumn) ? \"IFNULL(\" + KEY_REMINDER + \", \" +\n      \"\" + TIMESTAMP_UNIX_EPOCH + \")\" : sortColumn;\n\n  // Generic query to be specialized with conditions passed as parameter\n  String query = \"SELECT \"\n      + KEY_CREATION + \",\"\n      + KEY_LAST_MODIFICATION + \",\"\n      + KEY_TITLE + \",\"\n      + KEY_CONTENT + \",\"\n      + KEY_ARCHIVED + \",\"\n      + KEY_TRASHED + \",\"\n      + KEY_REMINDER + \",\"\n      + KEY_REMINDER_FIRED + \",\"\n      + KEY_RECURRENCE_RULE + \",\"\n      + KEY_LATITUDE + \",\"\n      + KEY_LONGITUDE + \",\"\n      + KEY_ADDRESS + \",\"\n      + KEY_LOCKED + \",\"\n      + KEY_CHECKLIST + \",\"\n      + KEY_CATEGORY + \",\"\n      + KEY_CATEGORY_NAME + \",\"\n      + KEY_CATEGORY_DESCRIPTION + \",\"\n      + KEY_CATEGORY_COLOR\n      + \" FROM \" + TABLE_NOTES\n      + \" LEFT JOIN \" + TABLE_CATEGORY + \" USING( \" + KEY_CATEGORY + \") \"\n      + whereCondition\n      + (order ? \" ORDER BY \" + sortColumn + \" COLLATE NOCASE \" + sortOrder : \"\");\n\n  LogDelegate.v(\"Query: \" + query);\n\n  try (Cursor cursor = getDatabase().rawQuery(query, null)) {\n\n    if (cursor.moveToFirst()) {\n      do {\n        int i = 0;\n        Note note = new Note();\n        note.setCreation(cursor.getLong(i++));\n        note.setLastModification(cursor.getLong(i++));\n        note.setTitle(cursor.getString(i++));\n        note.setContent(cursor.getString(i++));\n        note.setArchived(\"1\".equals(cursor.getString(i++)));\n        note.setTrashed(\"1\".equals(cursor.getString(i++)));\n        note.setAlarm(cursor.getString(i++));\n        note.setReminderFired(cursor.getInt(i++));\n        note.setRecurrenceRule(cursor.getString(i++));\n        note.setLatitude(cursor.getString(i++));\n        note.setLongitude(cursor.getString(i++));\n        note.setAddress(cursor.getString(i++));\n        note.setLocked(\"1\".equals(cursor.getString(i++)));\n        note.setChecklist(\"1\".equals(cursor.getString(i++)));\n\n        // Eventual decryption of content\n        if (Boolean.TRUE.equals(note.isLocked())) {\n          note.setContent(\n              Security.decrypt(note.getContent(), prefs.getString(PREF_PASSWORD, \"\")));\n        }\n\n        // Set category\n        long categoryId = cursor.getLong(i++);\n        if (categoryId != 0) {\n          Category category = new Category(categoryId, cursor.getString(i++),\n              cursor.getString(i++), cursor.getString(i));\n          note.setCategory(category);\n        }\n\n        // Add eventual attachments uri\n        note.setAttachmentsList(getNoteAttachments(note));\n\n        // Adding note to list\n        noteList.add(note);\n\n      } while (cursor.moveToNext());\n    }\n\n  }\n\n  LogDelegate.v(\"Query: Retrieval finished!\");\n  return noteList;\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Gets notes matching pattern with title or content text\n *\n * @param pattern String to match with\n * @return Notes list\n */\n", "func_signal": "public List<Note> getNotesByPattern(String pattern)", "code": "{\n  String escapedPattern = escapeSql(pattern);\n  int navigation = Navigation.getNavigation();\n  String whereCondition = \" WHERE \"\n      + KEY_TRASHED + (navigation == Navigation.TRASH ? \" IS 1\" : \" IS NOT 1\")\n      + (navigation == Navigation.ARCHIVE ? \" AND \" + KEY_ARCHIVED + \" IS 1\" : \"\")\n      + (navigation == Navigation.CATEGORY ? \" AND \" + KEY_CATEGORY + \" = \" + Navigation\n      .getCategory() : \"\")\n      + (navigation == Navigation.UNCATEGORIZED ? \" AND (\" + KEY_CATEGORY + \" IS NULL OR \"\n      + KEY_CATEGORY_ID\n      + \" == 0) \" : \"\")\n      + (Navigation.checkNavigation(Navigation.REMINDERS) ? \" AND \" + KEY_REMINDER\n      + \" IS NOT NULL\" : \"\")\n      + \" AND (\"\n      + \" ( \" + KEY_LOCKED + \" IS NOT 1 AND (\" + KEY_TITLE + \" LIKE '%\" + escapedPattern\n      + \"%' ESCAPE '\\\\' \" + \" OR \"\n      +\n      KEY_CONTENT + \" LIKE '%\" + escapedPattern + \"%' ESCAPE '\\\\' ))\"\n      + \" OR ( \" + KEY_LOCKED + \" = 1 AND \" + KEY_TITLE + \" LIKE '%\" + escapedPattern\n      + \"%' ESCAPE '\\\\' )\"\n      + \")\";\n  return getNotes(whereCondition, true);\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Notes sharing\n */\n", "func_signal": "public void shareNote(Note note)", "code": "{\n\n  String titleText = note.getTitle();\n\n  String contentText = titleText\n      + System.getProperty(\"line.separator\")\n      + note.getContent();\n\n  Intent shareIntent = new Intent();\n  // Prepare sharing intent with only text\n  if (note.getAttachmentsList().isEmpty()) {\n    shareIntent.setAction(Intent.ACTION_SEND);\n    shareIntent.setType(\"text/plain\");\n\n    // Intent with single image attachment\n  } else if (note.getAttachmentsList().size() == 1) {\n    shareIntent.setAction(Intent.ACTION_SEND);\n    Attachment attachment = note.getAttachmentsList().get(0);\n    shareIntent.setType(attachment.getMime_type());\n    shareIntent.putExtra(Intent.EXTRA_STREAM, FileProviderHelper.getShareableUri(attachment));\n\n    // Intent with multiple images\n  } else if (note.getAttachmentsList().size() > 1) {\n    shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);\n    ArrayList<Uri> uris = new ArrayList<>();\n    // A check to decide the mime type of attachments to share is done here\n    HashMap<String, Boolean> mimeTypes = new HashMap<>();\n    for (Attachment attachment : note.getAttachmentsList()) {\n      uris.add(FileProviderHelper.getShareableUri(attachment));\n      mimeTypes.put(attachment.getMime_type(), true);\n    }\n    // If many mime types are present a general type is assigned to intent\n    if (mimeTypes.size() > 1) {\n      shareIntent.setType(\"*/*\");\n    } else {\n      shareIntent.setType((String) mimeTypes.keySet().toArray()[0]);\n    }\n\n    shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris);\n  }\n  shareIntent.putExtra(Intent.EXTRA_SUBJECT, titleText);\n  shareIntent.putExtra(Intent.EXTRA_TEXT, contentText);\n\n  startActivity(Intent\n      .createChooser(shareIntent, getResources().getString(R.string.share_message_chooser)));\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/MainActivity.java", "commit_date": "2020-12-22 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Finishes multiselection mode started by ListFragment\n */\n", "func_signal": "public void finishActionMode()", "code": "{\n  ListFragment fragment = (ListFragment) getFragmentManagerInstance()\n      .findFragmentByTag(FRAGMENT_LIST_TAG);\n  if (fragment != null) {\n    fragment.finishActionMode();\n  }\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/MainActivity.java", "commit_date": "2020-12-22 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Retrieves all notes related to category it passed as parameter\n */\n", "func_signal": "public List<Note> getNotesByTag(String tag)", "code": "{\n  if (tag.contains(\",\")) {\n    return getNotesByTag(tag.split(\",\"));\n  } else {\n    return getNotesByTag(new String[]{tag});\n  }\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Trashes/restore single note\n */\n", "func_signal": "public void trashNote(Note note, boolean trash)", "code": "{\n  note.setTrashed(trash);\n  updateNote(note, false);\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Checks if passed parameters is the category user is actually navigating in\n */\n", "func_signal": "public static boolean checkNavigationCategory(Category categoryToCheck)", "code": "{\n  Context mContext = OmniNotes.getAppContext();\n  String[] navigationListCodes = mContext.getResources()\n      .getStringArray(R.array.navigation_list_codes);\n  String navigation = mContext.getSharedPreferences(PREFS_NAME, MODE_MULTI_PROCESS).getString(\n      PREF_NAVIGATION, navigationListCodes[0]);\n  return (categoryToCheck != null && navigation.equals(String.valueOf(categoryToCheck.getId())));\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/utils/Navigation.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Updates or insert a new a category\n *\n * @param category Category to be updated or inserted\n * @return Rows affected or new inserted category ID\n */\n", "func_signal": "public Category updateCategory(Category category)", "code": "{\n  ContentValues values = new ContentValues();\n  values.put(KEY_CATEGORY_ID, category.getId() != null ? category.getId() : Calendar.getInstance()\n      .getTimeInMillis());\n  values.put(KEY_CATEGORY_NAME, category.getName());\n  values.put(KEY_CATEGORY_DESCRIPTION, category.getDescription());\n  values.put(KEY_CATEGORY_COLOR, category.getColor());\n  getDatabase(true).insertWithOnConflict(TABLE_CATEGORY, KEY_CATEGORY_ID, values, SQLiteDatabase\n      .CONFLICT_REPLACE);\n  return category;\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Build a formatted time string starting from values obtained by a TimePicker\n */\n", "func_signal": "public static String onTimeSet(int hour, int minute, String format)", "code": "{\n  SimpleDateFormat sdf = new SimpleDateFormat(format);\n  Calendar cal = Calendar.getInstance();\n  cal.set(Calendar.HOUR_OF_DAY, hour);\n  cal.set(Calendar.MINUTE, minute);\n  return sdf.format(cal.getTime());\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/helpers/date/DateHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Build a formatted date string starting from values obtained by a DatePicker\n */\n", "func_signal": "public static String onDateSet(int year, int month, int day, String format)", "code": "{\n  SimpleDateFormat sdf = new SimpleDateFormat(format);\n  Calendar cal = Calendar.getInstance();\n  cal.set(Calendar.YEAR, year);\n  cal.set(Calendar.MONTH, month);\n  cal.set(Calendar.DAY_OF_MONTH, day);\n  return sdf.format(cal.getTime());\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/helpers/date/DateHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Retrieves locked or unlocked notes\n */\n", "func_signal": "public List<Note> getNotesWithLock(boolean locked)", "code": "{\n  String whereCondition = \" WHERE \" + KEY_LOCKED + (locked ? \" = 1 \" : \" IS NOT 1 \");\n  return getNotes(whereCondition, true);\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Checks if allocated fragment is of the required type and then returns it or returns null\n */\n", "func_signal": "private Fragment checkFragmentInstance(int id, Object instanceClass)", "code": "{\n  Fragment result = null;\n  Fragment fragment = getFragmentManagerInstance().findFragmentById(id);\n  if (fragment != null && instanceClass.equals(fragment.getClass())) {\n    result = fragment;\n  }\n  return result;\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/MainActivity.java", "commit_date": "2020-12-22 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Getting All notes\n *\n * @param checkNavigation Tells if navigation status (notes, archived) must be kept in\n *                        consideration or if all notes have to be retrieved\n * @return Notes list\n */\n", "func_signal": "public List<Note> getAllNotes(Boolean checkNavigation)", "code": "{\n  String whereCondition = \"\";\n  if (Boolean.TRUE.equals(checkNavigation)) {\n    int navigation = Navigation.getNavigation();\n    switch (navigation) {\n      case Navigation.NOTES:\n        return getNotesActive();\n      case Navigation.ARCHIVE:\n        return getNotesArchived();\n      case Navigation.REMINDERS:\n        return getNotesWithReminder(prefs.getBoolean(PREF_FILTER_PAST_REMINDERS, false));\n      case Navigation.TRASH:\n        return getNotesTrashed();\n      case Navigation.UNCATEGORIZED:\n        return getNotesUncategorized();\n      case Navigation.CATEGORY:\n        return getNotesByCategory(Navigation.getCategory());\n      default:\n        return getNotes(whereCondition, true);\n    }\n  } else {\n    return getNotes(whereCondition, true);\n  }\n\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Retrieves categories list from database\n *\n * @return List of categories\n */\n", "func_signal": "public ArrayList<Category> getCategories()", "code": "{\n  ArrayList<Category> categoriesList = new ArrayList<>();\n  String sql = \"SELECT \"\n      + KEY_CATEGORY_ID + \",\"\n      + KEY_CATEGORY_NAME + \",\"\n      + KEY_CATEGORY_DESCRIPTION + \",\"\n      + KEY_CATEGORY_COLOR + \",\"\n      + \" COUNT(\" + KEY_ID + \") count\"\n      + \" FROM \" + TABLE_CATEGORY\n      + \" LEFT JOIN (\"\n      + \" SELECT \" + KEY_ID + \", \" + KEY_CATEGORY\n      + \" FROM \" + TABLE_NOTES\n      + \" WHERE \" + KEY_TRASHED + \" IS NOT 1\"\n      + \") USING( \" + KEY_CATEGORY + \") \"\n      + \" GROUP BY \"\n      + KEY_CATEGORY_ID + \",\"\n      + KEY_CATEGORY_NAME + \",\"\n      + KEY_CATEGORY_DESCRIPTION + \",\"\n      + KEY_CATEGORY_COLOR\n      + \" ORDER BY IFNULL(NULLIF(\" + KEY_CATEGORY_NAME + \", ''),'zzzzzzzz') \";\n\n  Cursor cursor = null;\n  try {\n    cursor = getDatabase().rawQuery(sql, null);\n    // Looping through all rows and adding to list\n    if (cursor.moveToFirst()) {\n      do {\n        categoriesList.add(new Category(cursor.getLong(0),\n            cursor.getString(1), cursor.getString(2), cursor\n            .getString(3), cursor.getInt(4)));\n      } while (cursor.moveToNext());\n    }\n\n  } finally {\n    if (cursor != null) {\n      cursor.close();\n    }\n  }\n  return categoriesList;\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/db/DbHelper.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Single note permanent deletion\n *\n * @param note Note to be deleted\n */\n", "func_signal": "public void deleteNote(Note note)", "code": "{\n  new NoteProcessorDelete(Collections.singletonList(note)).process();\n  BaseActivity.notifyAppWidgets(this);\n  LogDelegate.d(\"Deleted permanently note with ID '\" + note.get_id() + \"'\");\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/MainActivity.java", "commit_date": "2020-12-22 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Retrieves category currently shown\n *\n * @return ID of category or null if current navigation is not a category\n */\n", "func_signal": "public static Long getCategory()", "code": "{\n  if (getNavigation() == CATEGORY) {\n    return Long.valueOf(\n        OmniNotes.getAppContext().getSharedPreferences(PREFS_NAME, MODE_MULTI_PROCESS)\n            .getString(PREF_NAVIGATION, \"\"));\n  } else {\n    return null;\n  }\n}", "path": "Omni-Notes/omniNotes/src/main/java/it/feio/android/omninotes/utils/Navigation.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "federicoiosue/Omni-Notes", "stars": 2653, "license": "gpl-3.0", "language": "java", "size": 55120}
{"docstring": "/**\n * Iterative solution to this problem. The complexity order of this algorithm in time and space\n * terms is equivalent to the previous algorithm but the execution time is lower in this version.\n * The key of this algorithm is based on use two pointers, going going two times faster trough\n * the\n * list during the iteration.\n */\n", "func_signal": "public ListNode<Integer> get2(ListNode<Integer> list)", "code": "{\n  validateInput(list);\n\n  ListNode<Integer> currentNode = list;\n  ListNode<Integer> fastNode = list.getNext();\n  while (fastNode != null && fastNode.getNext() != null) {\n    currentNode = currentNode.getNext();\n    fastNode = fastNode.getNext().getNext();\n  }\n  return currentNode;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem64/GetTheElementInTheMiddleOfTheList.java", "commit_date": "2015-01-17 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative algorithm to solve this problem. Two words are anagrams just if contains the same\n * number of letters. Using this property, we are going to sort and compare the letters inside\n * the array.  The complexity order of this algorithm is O(N*Log(N)) where N is the number of\n * letters in the largest word. In space terms, the complexity order of this algorithm is O(N).\n */\n", "func_signal": "public boolean check(String a, String b)", "code": "{\n  if (a == null || b == null) {\n    throw new IllegalArgumentException(\"You can't use null Strings as input.\");\n  }\n  if (a.length() != b.length()) {\n    return false;\n  }\n  char[] charsA = a.toCharArray();\n  Arrays.sort(charsA);\n  char[] charsB = b.toCharArray();\n  Arrays.sort(charsB);\n  return Arrays.equals(charsA, charsB);\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem29/AreAnagrams.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative solution for this algorithm. Using a tree traversal based on two parallel data\n * structures implemented using one Stack. The complexity order of this algorithm is O(N) in time\n * terms, as the previous one. But in space terms, the complexity order of this algorithm is O(N)\n * where N is the number of elements in the smallest tree because we are going to store this\n * elements in the stack.\n */\n", "func_signal": "public boolean areEqualsIterative(BinaryNode<Integer> tree1, BinaryNode<Integer> tree2)", "code": "{\n  validateInput(tree1, tree2);\n\n  boolean equals = true;\n  Stack<BinaryNode> stack1 = new Stack<BinaryNode>();\n  Stack<BinaryNode> stack2 = new Stack<BinaryNode>();\n  stack1.push(tree1);\n  stack2.push(tree2);\n  while (!stack1.isEmpty()) {\n    BinaryNode node1 = stack1.pop();\n    BinaryNode node2 = stack2.pop();\n    if (!node1.equals(node2)) {\n      equals = false;\n      break;\n    }\n    addNodeToStack(stack1, node1.getLeft());\n    addNodeToStack(stack1, node1.getRight());\n    addNodeToStack(stack2, node2.getLeft());\n    addNodeToStack(stack2, node2.getRight());\n  }\n  return equals;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem17/BinaryTreeEquals.java", "commit_date": "2014-12-02 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative solution to this problem. The complexity order in time and space terms is O(N*M)\n * where N and M is the size of the matrix.\n *\n * We are going to use a while to reduce the diameter of the circle iteration by iteration.\n * X and Y variables are going to be used to access to the matrix.\n *\n * Where m == 1 we are in an special case where m and n are odds.\n *\n * Inside the main loop we are going to use fors to move pointers in different 4 directions.\n *\n * At the end of the main loop you'll have to update your x,y pointers and the size of the matrix\n * reduced by 2.\n *\n * The size of the matrix is going to be modified and used as diameter.\n */\n", "func_signal": "public int[] go(int[][] matrix)", "code": "{\n  if (matrix == null) {\n    throw new IllegalArgumentException(\"You can't pass a null insantece as input.\");\n  }\n  if (matrix.length == 0) {\n    return new int[0];\n  }\n\n  //Calculate sizes\n  int m = matrix.length;\n  int n = matrix[0].length;\n  int resultIndex = 0;\n  int[] result = new int[m * n];\n\n  int x = 0;\n  int y = 0;\n\n  //We are going to iterate over m and n subtracting 2 in each iteration.\n  while (m > 0 && n > 0) {\n\n    //If one row/column left, no circle can be formed\n    //Special cases where the size of the matrix is odd\n    if (m == 1) {\n      for (int i = 0; i < n; i++) {\n        result[resultIndex++] = matrix[x][y];\n        y++;\n      }\n      break;\n    } else if (n == 1) {\n      for (int i = 0; i < m; i++) {\n        result[resultIndex++] = matrix[x][y];\n        x++;\n      }\n      break;\n    }\n\n    //Process a circle\n\n    //top - move right. Move n positions -1 to the right\n    for (int i = 0; i < n - 1; i++) {\n      result[resultIndex++] = matrix[x][y];\n      y++;\n    }\n\n    //right - move down. Move n positions -1 to down.\n    for (int i = 0; i < m - 1; i++) {\n      result[resultIndex++] = matrix[x][y];\n      x++;\n    }\n\n    //bottom - move left. Move n positions -1 left\n    for (int i = 0; i < n - 1; i++) {\n      result[resultIndex++] = matrix[x][y];\n      y--;\n    }\n\n    //left - move up. ove n postitions .1 up\n    for (int i = 0; i < m - 1; i++) {\n      result[resultIndex++] = matrix[x][y];\n      x--;\n    }\n\n    //Increment x and y pointers.\n    x++;\n    y++;\n    //Update sizes to reduce the diameter.\n    m = m - 2;\n    n = n - 2;\n  }\n  return result;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem41/GoThroughMatrixInSpiral.java", "commit_date": "2014-12-26 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * This implementation is based on Strings. Transforming an integer into the binary\n * representation we can obtain an String and use it to count the number of elements equals to\n * '1'. This implementation is slow because it's based on transform the parameter into the binary\n * representation which complexity order is O(N) where N is the number of digits in the parameter\n * binary representation.\n *\n * In addition we have to count the number of elements inside the String obtained and the\n * complexity order of that operation is again O(N).\n *\n * In space terms, the complexity order is O(N) where N is the number of digits used to represent\n * the parameter using binary format. This cost is associated to the usage of an auxiliary String\n * to keep the binary result.\n *\n * To get the binary representation we are going to use a static method of Integer class:\n * Integer.toBinaryString.\n */\n", "func_signal": "public int countBitsToOneBasedOnString(int n)", "code": "{\n  int result = 0;\n  String binaryNumber = Integer.toBinaryString(n);\n  for (char c : binaryNumber.toCharArray()) {\n    result += c == '1' ? 1 : 0;\n  }\n  return result;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem1/BitsCounter.java", "commit_date": "2018-12-14 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative algorithm to solve this problem. We don't have access to the head of the list, and\n * the only thing we can do is to move the data from the next node to the current one, the data\n * and the pointer to the next node. This approach doesn't work with the last element in the\n * list, but there is no another valid approach to solve this algorithm without access to the\n * head of the list.\n */\n", "func_signal": "public void delete(ListNode node)", "code": "{\n  validateInputData(node);\n\n  if (node.getNext() == null) {\n    return;\n  }\n  ListNode next = node.getNext();\n  node.setData(next.getData());\n  node.setNext(next.getNext());\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem59/DeleteListNode.java", "commit_date": "2015-01-11 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative algorithm used to find the median of an AVL. This algorithm is based on a property\n * of every AVL tree, you can get a sorted collection containing the elements of this tree using\n * an in order traversal. Using this property we can get a sorted collection of nodes and then\n * find the median. The complexity order of this algorithm is O(N) in time and space terms where\n * N\n * is the number of nodes in the tree.\n */\n", "func_signal": "public double find(BinaryNode<Integer> root)", "code": "{\n  if (root == null) {\n    throw new IllegalArgumentException(\"You can't pass a null binary tree to this method.\");\n  }\n\n  List<BinaryNode<Integer>> sortedElements = binaryTreeInOrder.getIterative(root);\n  double median = 0;\n  if (sortedElements.size() % 2 == 0) {\n    median = (sortedElements.get(sortedElements.size() / 2).getData() + sortedElements.get(\n        sortedElements.size() / 2 - 1).getData()) / 2;\n  } else {\n    median = sortedElements.get(sortedElements.size() / 2).getData();\n  }\n  return median;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem36/AvlTreeMedian.java", "commit_date": "2014-12-21 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * This implementation is based on binary operators. Instead of transform an integer to binary we\n * are going to use \"&\" - AND operator - and \">>\" - BINARY RIGHT SHIFT OPERATOR - to iterate over\n * the integer passed as parameter checking if the bit at the first position is one or zero.\n *\n * With this implementation we are going to reduce the execution time two times compared with the\n * previous solution. The complexity order is still O(N) where N is the number of digits of the\n * parameter using a binary representation but the execution time is now quite shorter.\n *\n * In space terms, O(1) is the complexity order of this algorithm. We are just using an integer\n * to keep the count of digits to one in binary.\n */\n", "func_signal": "public int countBitsToOneBasedOnBinaryOperators(int n)", "code": "{\n  int result = 0;\n  while (n != 0) {\n    result += (n & 1) == 1 ? 1 : 0;\n    n = n >>> 1;\n  }\n  return result;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem1/BitsCounter.java", "commit_date": "2018-12-14 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Recursive solution based on Fibonacci sequence definition. F(N) = F(N-1) + F(N-2).\n *\n * The complexity order of this algorithm is O(2^N) where N is integer used as parameter. In space\n * terms, the complexity order of this algorithm is O(1) because we are not using any auxiliary\n * data structure to solve this problem.\n */\n", "func_signal": "public long getRecursive(long n)", "code": "{\n  validateInput(n);\n  if (n == 1 || n == 2) {\n    return 1;\n  } else {\n    return getRecursive(n - 1) + getRecursive(n - 2);\n  }\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem7/FibonacciNumbers.java", "commit_date": "2016-10-31 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative solution to this algorithm. This algorithm has a complexity order equals to O(N)\n * where N is the billAmount/maxMoneyValue. At the end, linear to the value passed as parameter.\n */\n", "func_signal": "public List<Integer> calculate(int[] moneys, int billAmount)", "code": "{\n  validateInputData(moneys, billAmount);\n\n  List<Integer> change = new LinkedList<Integer>();\n  while (billAmount > 0 && moneys.length > 0) {\n    for (int i = moneys.length - 1; i >= 0; i--) {\n      if (billAmount - moneys[i] >= 0) {\n        change.add(moneys[i]);\n        billAmount -= moneys[i];\n        break;\n      }\n    }\n  }\n  return change;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem47/ReturnChange.java", "commit_date": "2015-01-01 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Recursive implementation for this algorithm. Complexity order in time terms equals to O(N)\n * where N is the number of nodes in the smaller tree. In space terms, the complexity order of\n * this algorithm is O(1) because we are not using any additional data structure to keep nodes\n * information.\n *\n * Related with the execution time of this algorithm is really important take into account the\n * third recursion case where we are going to use \"if\" short circuit to avoid go through the\n * whole\n * tree and stop comparing nodes once we find one different.\n */\n", "func_signal": "public boolean areEqualsRecursive(BinaryNode tree1, BinaryNode tree2)", "code": "{\n  validateInput(tree1, tree2);\n  return areEqualsInner(tree1, tree2);\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem17/BinaryTreeEquals.java", "commit_date": "2014-12-02 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Brian Kernighan's method goes through as many iterations as there are set bits.\n * So if we have a 32-bit word with only the high bit set,\n * then it will only go once through the loop.\n *\n * @param x\n * @return\n */\n", "func_signal": "public static int countNumberOfBitsLogN(int x)", "code": "{\n    int result = 0;\n    while (x != 0) {\n        x &= (x - 1);\n        result++;\n    }\n    return result;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem1/BitsCounter.java", "commit_date": "2018-12-14 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * This version of the recursive algorithm is better in performance terms because we are caching\n * every calculated element to avoid every branch of the recursion the same values. Is faster\n * because one branch is going to take the already calculated value from other branches and when\n * you are going to calculate the 11th value the only thing you have to calculate is to take\n * previous values from the array instead of iterate from nth to 1 and sum every value. I've used\n * a dynamic programming technique.\n *\n * The problem with this algorithm is related with the space complexity which is much bigger than\n * the one used for the previous algorithms. In this case, we have O(N) because we are using an\n * additional data structure to store partial results.\n */\n", "func_signal": "public long getRecursiveWithCaching(int n)", "code": "{\n  validateInput(n);\n\n  if (n <= 2) {\n    return 1;\n  } else if (elements[n - 3] != 0) {\n    return elements[n - 3];\n  }\n  elements[n - 3] = getRecursiveWithCaching(n - 1) + getRecursiveWithCaching(n - 2);\n  return elements[n - 3];\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem7/FibonacciNumbers.java", "commit_date": "2016-10-31 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative approach. The complexity order in this algorithm is O(N) where N is the integer used\n * as parameter. In space terms, the complexity order of this algorithm is again O(1).\n */\n", "func_signal": "public long getIterative(long n)", "code": "{\n  validateInput(n);\n\n  if (n <= 2) {\n    return 1;\n  }\n  long previous = 1;\n  long current = 1;\n  long element = 0;\n  for (long i = 3; i <= n; i++) {\n    element = previous + current;\n    previous = current;\n    current = element;\n  }\n  return element;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem7/FibonacciNumbers.java", "commit_date": "2016-10-31 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Implementation based on Java Sets. To solve this algorithm we have used a Java HashSet and the\n * complexity order of this algorithm in time is O(N) where N is the number of elements in the\n * input array. In space terms, the complexity order of this algorithm is also O(N), because we\n * are using an auxiliary data structure.\n *\n * This implementation is possible in O(N) because the complexity order of HashSets for\n * insertions is O(1).\n */\n", "func_signal": "public Integer[] removeUsingSet(Integer[] numbers)", "code": "{\n  validateArray(numbers);\n\n  Set<Integer> uniqueElements = new HashSet<Integer>();\n  for (int i : numbers) {\n    uniqueElements.add(i);\n  }\n  return uniqueElements.toArray(new Integer[uniqueElements.size()]);\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem10/RemoveDuplicates.java", "commit_date": "2017-11-02 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative solution to this problem. The complexity order of this algorithm is O(N) because we\n * have to use split and is the most expensive operation. In space terms the complexity order is\n * O(N) and related directly to the size of the number in scientific notation.\n */\n", "func_signal": "public long calculate(String number)", "code": "{\n  if (number == null || !number.contains(\"E\")) {\n    throw new IllegalArgumentException(\"Invalid format for number \" + number);\n  }\n  String[] splittedNumber = splitScientificNumber(number);\n  double first = getLeftPart(splittedNumber[0]);\n  int sign = getNumberSign(splittedNumber[1]);\n  int pow = getPow(splittedNumber[1]);\n  Double result = sign * first * Math.pow(10, pow);\n  return result.longValue();\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem30/ScientificNotation.java", "commit_date": "2014-12-14 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Insertion sort is a simple sorting algorithm that is relatively efficient for small lists and\n * mostly sorted lists, and often is used as part of more sophisticated algorithms. It works by\n * taking elements from the list one by one and inserting them in their correct position into a\n * new sorted list. In arrays, the new list and the remaining elements can share the array's\n * space, but insertion is expensive, requiring shifting all following elements over by one.\n */\n", "func_signal": "@Override public void sort(int[] numbers)", "code": "{\n  validateInput(numbers);\n\n  int i;\n  for (i = 1; i < numbers.length; i++) {\n    int tmp = numbers[i];\n    int j = i;\n    while (j > 0 && numbers[j - 1] > tmp) {\n      numbers[j] = numbers[j - 1];\n      j--;\n    }\n    numbers[j] = tmp;\n  }\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem76/InsertionSort.java", "commit_date": "2015-02-02 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Slow implementation for this algorithm. First of all, sort the array using QuickSort algorithm\n * and then, go through the array and add to a list just those consecutive elements that are\n * different.\n *\n * The complexity order of this algorithm in space terms is O(N) where N is the number of\n * elements in the input array. The complexity order in time terms is equals to the sorting\n * algorithm, O( N log(N)).\n */\n", "func_signal": "public Integer[] removeUsingSorting(Integer[] numbers)", "code": "{\n  validateArray(numbers);\n  if (numbers.length == 1 || numbers.length == 0) {\n    return numbers;\n  }\n\n  Collections.sort(Arrays.asList(numbers));\n  List<Integer> result = new LinkedList<Integer>();\n  for (int i = 0; i < numbers.length - 1; i++) {\n    if (!numbers[i].equals(numbers[i + 1])) {\n      result.add(numbers[i]);\n    }\n  }\n  result.add(numbers[numbers.length - 1]);\n  return result.toArray(new Integer[result.size()]);\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem10/RemoveDuplicates.java", "commit_date": "2017-11-02 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative solution to this problem. Using two pointer we are going to iterate over the input\n * array using one of them and other to store the result in a temporal array. The complexity\n * order of this algorithm in time and space terms is O(N) where N is the number of elements in\n * the array.\n */\n", "func_signal": "public void replace(char[] input)", "code": "{\n  validateInput(input);\n\n  char[] result = new char[input.length];\n  for (int i = 0, j = 0; i < input.length && j < input.length; i++, j++) {\n    if (input[i] == ' ') {\n      result[j++] = '%';\n      result[j++] = '2';\n      result[j] = '0';\n    } else {\n      result[j] = input[i];\n    }\n  }\n  copyArray(result, input);\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem52/ReplaceSpaces.java", "commit_date": "2015-01-04 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Iterative solution to this problem. The complexity order of this algorithm in time terms is\n * equals to O(N) where N is the number of elements in the list. In space terms, the complexity\n * order is O(1) because we are not using any auxiliary data structure to solve this problem.\n * This algorithm is based on know the size of the list, but this part of the algorithm is a\n * problem for the execution time.\n */\n", "func_signal": "public ListNode<Integer> get(ListNode<Integer> list)", "code": "{\n  validateInput(list);\n\n  int size = getListSize(list);\n  int middleElementPosition = size % 2 != 0 ? size / 2 : (size / 2) - 1;\n  ListNode middleElement = list;\n  for (int i = 0; i < middleElementPosition; i++) {\n    middleElement = middleElement.getNext();\n  }\n  return middleElement;\n}", "path": "Algorithms/src/main/java/com/github/pedrovgs/problem64/GetTheElementInTheMiddleOfTheList.java", "commit_date": "2015-01-17 00:00:00", "repo_name": "pedrovgs/Algorithms", "stars": 2784, "license": "apache-2.0", "language": "java", "size": 489}
{"docstring": "/**\n * Extracts the first language code from a comma separated list of language\n * codes.\n *\n * @param languageCodes The comma separated list of language codes.\n * @return The primary language code or {@code null}.\n */\n", "func_signal": "public static String getPrimaryLanguageCode(String languageCodes)", "code": "{\n\tif (isBlank(languageCodes)) {\n\t\treturn null;\n\t}\n\tint firstComma = languageCodes.indexOf(\",\");\n\tif (firstComma > 0) {\n\t\treturn languageCodes.substring(0, firstComma);\n\t}\n\treturn null;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Some OpenSubtitle users like VIPs get a different API address with\n * better priority. If such an URL was returned during login, it will be\n * returned {@link URL}. If not, the login {@link URL} will be returned.\n *\n * @return The {@link User}'s {@link URL} or {@code null}.\n */\n", "func_signal": "public URL getURL()", "code": "{\n\tif (user != null && user.getContentLocation() != null) {\n\t\ttry {\n\t\t\treturn user.getContentLocation().toURL();\n\t\t} catch (MalformedURLException e) {\n\t\t\tLOGGER.error(\"OpenSubtitles: Not using user specified API URL: {}\", e.getMessage());\n\t\t\tLOGGER.trace(\"\", e);\n\t\t}\n\t}\n\treturn defaultUrl;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Creates a {@link String} where each file hash in {@code titles} is on its\n * own line and indented with the specified number of spaces. The\n * {@link CheckMovieHashItem}s for each file hash is listed as sub-items\n * with double indentation.\n *\n * @param titles the {@link Map} of [file hash, {@link CheckMovieHashItem}]\n *            pairs to format for logging.\n * @param indent the number of leading spaces for \"one indentation\".\n * @return The log friendly {@link String}.\n */\n", "func_signal": "public static String toLogString(Map<String, List<CheckMovieHashItem>> titles, int indent)", "code": "{\n\tString indentation = indent > 0 ? StringUtil.fillString(' ', indent) : \"\";\n\tif (titles == null) {\n\t\treturn indentation + \"Null\";\n\t}\n\tif (titles.isEmpty()) {\n\t\treturn indentation + \"No matching titles\";\n\t}\n\tStringBuilder sb = new StringBuilder();\n\tfor (Entry<String, List<CheckMovieHashItem>> entry : titles.entrySet()) {\n\t\tsb.append(indentation).append(entry.getKey()).append(\":\\n\");\n\t\tsb.append(toLogStringTitles(entry.getValue(), 2 * indent));\n\t}\n\treturn sb.toString();\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Converts OpenSubtitles' {@code SubFormat} to the corresponding\n * {@link SubtitleType}.\n *\n * @param subFormat the {@code SubFormat} {@link String} to convert.\n * @return The resulting {@link SubtitleType} or {@code null}.\n */\n", "func_signal": "public static SubtitleType subFormatToSubtitleType(String subFormat)", "code": "{\n\tif (subFormat == null) {\n\t\treturn null;\n\t}\n\n\tswitch (subFormat.toLowerCase(Locale.ROOT)) {\n\t\tcase \"sub\":\n\t\t\treturn SubtitleType.MICRODVD;\n\t\tcase \"srt\":\n\t\t\treturn SubtitleType.SUBRIP;\n\t\tcase \"txt\":\n\t\t\treturn SubtitleType.TEXT;\n\t\tcase \"ssa\":\n\t\t\treturn SubtitleType.ASS;\n\t\tcase \"smi\":\n\t\t\treturn SubtitleType.SAMI;\n\t\tcase \"mpl\":\n\t\tcase \"tmp\":\n\t\t\treturn SubtitleType.UNSUPPORTED;\n\t\tcase \"vtt\":\n\t\t\treturn SubtitleType.WEBVTT;\n\t\tdefault:\n\t\t\tLOGGER.warn(\"OpenSubtitles: Warning, unknown subtitles type \\\"{}\\\"\", subFormat);\n\t\t\treturn SubtitleType.UNKNOWN;\n\t}\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic String[] getSupportedExtensions()", "code": "{\n\treturn new String[] {\n\t\t\"pls\",\n\t\t\"m3u\",\n\t\t\"m3u8\",\n\t\t\"cue\",\n\t\t\"ups\"\n\t};\n}", "path": "UniversalMediaServer/src/main/java/net/pms/formats/PLAYLIST.java", "commit_date": "2020-01-05 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Enhances existing metadata attached to this media by querying\n * OpenSubtitles.\n *\n * @param file\n * @param media\n */\n", "func_signal": "public static void backgroundLookupAndAdd(final File file, final DLNAMediaInfo media)", "code": "{\n\tfinal boolean overTheTopLogging = false;\n\tif (!PMS.get().getDatabase().isOpenSubtitlesMetadataExists(file.getAbsolutePath(), file.lastModified())) {\n\t\tRunnable r = () -> {\n\t\t\tString[] metadataFromOpenSubtitles;\n\t\t\ttry {\n\t\t\t\tmetadataFromOpenSubtitles = getInfo(file, file.getName());\n\n\t\t\t\tif (metadataFromOpenSubtitles == null) {\n\t\t\t\t\tLOGGER.trace(\"Failed lookup for \" + file.getName());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tString titleFromFilename = media.getMovieOrShowName();\n\t\t\t\tString yearFromFilename = media.getYear();\n\t\t\t\tString tvSeasonFromFilename = media.getTVSeason();\n\t\t\t\tString tvEpisodeNumberFromFilename = media.getTVEpisodeNumber();\n\n\t\t\t\tString titleFromDatabase;\n\t\t\t\tString titleFromDatabaseSimplified;\n\t\t\t\tString titleFromOpenSubtitlesSimplified;\n\n\t\t\t\tString titleFromOpenSubtitles = metadataFromOpenSubtitles[2];\n\t\t\t\ttitleFromOpenSubtitlesSimplified = FileUtil.getSimplifiedShowName(titleFromOpenSubtitles);\n\t\t\t\tString tvSeasonFromOpenSubtitles = metadataFromOpenSubtitles[3];\n\t\t\t\tString tvEpisodeNumberFromOpenSubtitles = metadataFromOpenSubtitles[4];\n\t\t\t\tif (tvEpisodeNumberFromOpenSubtitles.length() == 1) {\n\t\t\t\t\ttvEpisodeNumberFromOpenSubtitles = \"0\" + tvEpisodeNumberFromOpenSubtitles;\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * We have data from OpenSubtitles, but before storing it in\n\t\t\t\t * our database we validate it against the data extracted\n\t\t\t\t * from the filename. This is because sometimes\n\t\t\t\t * OpenSubtitles reports incorrect data.\n\t\t\t\t */\n\t\t\t\tif (overTheTopLogging) {\n\t\t\t\t\tLOGGER.trace(\"Found \" + file.getName() + \" : \" + titleFromOpenSubtitles);\n\t\t\t\t}\n\n\t\t\t\t// Proceed if the years match, or if there is no year\n\t\t\t\t// then try the movie/show name.\n\t\t\t\tif ((StringUtils.isNotBlank(yearFromFilename) && yearFromFilename.equals(metadataFromOpenSubtitles[5]) &&\n\t\t\t\t\tStringUtils.isNotEmpty(titleFromFilename)) ||\n\t\t\t\t\t(StringUtils.isBlank(yearFromFilename) && StringUtils.isNotEmpty(titleFromFilename))) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Finally, sometimes OpenSubtitles returns the\n\t\t\t\t\t * incorrect season or episode number, so we validate\n\t\t\t\t\t * those as well. This check will pass if either we\n\t\t\t\t\t * don't know what the season and episode numbers are\n\t\t\t\t\t * from the filename, or we do and they match with our\n\t\t\t\t\t * results from OpenSubtitles.\n\t\t\t\t\t */\n\t\t\t\t\tif ((StringUtils.isNotBlank(tvSeasonFromFilename) && StringUtils.isNotBlank(tvSeasonFromOpenSubtitles) &&\n\t\t\t\t\t\ttvSeasonFromFilename.equals(tvSeasonFromOpenSubtitles) && StringUtils.isNotBlank(tvEpisodeNumberFromFilename) &&\n\t\t\t\t\t\tStringUtils.isNotBlank(tvEpisodeNumberFromOpenSubtitles) &&\n\t\t\t\t\t\ttvEpisodeNumberFromFilename.equals(tvEpisodeNumberFromOpenSubtitles)) ||\n\t\t\t\t\t\t(StringUtils.isBlank(tvSeasonFromFilename) && StringUtils.isBlank(tvEpisodeNumberFromFilename))) {\n\t\t\t\t\t\ttitleFromDatabase = PMS.get().getSimilarTVSeriesName(titleFromOpenSubtitles);\n\t\t\t\t\t\ttitleFromDatabaseSimplified = FileUtil.getSimplifiedShowName(titleFromDatabase);\n\t\t\t\t\t\tif (overTheTopLogging) {\n\t\t\t\t\t\t\tLOGGER.trace(\"titleFromDatabase: \" + titleFromDatabase);\n\t\t\t\t\t\t\tLOGGER.trace(\"titleFromOpenSubtitles: \" + titleFromOpenSubtitles);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * If there is a title from the database and it is\n\t\t\t\t\t\t * not exactly the same as the one from\n\t\t\t\t\t\t * OpenSubtitles, continue to see if we want to\n\t\t\t\t\t\t * change that to make them all consistent.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (!\"\".equals(titleFromDatabase) && !titleFromOpenSubtitles.equals(titleFromDatabase) &&\n\t\t\t\t\t\t\ttitleFromOpenSubtitlesSimplified.equals(titleFromDatabaseSimplified)) {\n\t\t\t\t\t\t\t// Replace our close-but-not-exact title in\n\t\t\t\t\t\t\t// the database with the title from\n\t\t\t\t\t\t\t// OpenSubtitles.\n\t\t\t\t\t\t\tPMS.get().getDatabase().updateMovieOrShowName(titleFromDatabase, titleFromOpenSubtitles);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmedia.setIMDbID(metadataFromOpenSubtitles[0]);\n\t\t\t\t\t\tmedia.setMovieOrShowName(titleFromOpenSubtitles);\n\t\t\t\t\t\tmedia.setSimplifiedMovieOrShowName(titleFromOpenSubtitlesSimplified);\n\t\t\t\t\t\tmedia.setYear(metadataFromOpenSubtitles[5]);\n\n\t\t\t\t\t\t// If the filename has indicated this is a TV\n\t\t\t\t\t\t// episode\n\t\t\t\t\t\tif (StringUtils.isNotBlank(tvSeasonFromFilename)) {\n\t\t\t\t\t\t\tmedia.setTVSeason(tvSeasonFromOpenSubtitles);\n\t\t\t\t\t\t\tmedia.setTVEpisodeNumber(tvEpisodeNumberFromOpenSubtitles);\n\t\t\t\t\t\t\tif (StringUtils.isNotBlank(metadataFromOpenSubtitles[1])) {\n\t\t\t\t\t\t\t\tmedia.setTVEpisodeName(metadataFromOpenSubtitles[1]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (overTheTopLogging) {\n\t\t\t\t\t\t\t\tLOGGER.trace(\"Setting is TV episode true for \" + Arrays.toString(metadataFromOpenSubtitles));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmedia.setIsTVEpisode(true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (PMS.get().getConfiguration().getUseCache()) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tPMS.get().getDatabase().insertVideoMetadata(file.getAbsolutePath(), file.lastModified(), media);\n\t\t\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\t\t\tLOGGER.error(\"Could not update the database with information from OpenSubtitles for \\\"{}\\\": {}\",\n\t\t\t\t\t\t\t\t\tfile.getAbsolutePath(), e.getMessage());\n\t\t\t\t\t\t\t\tLOGGER.trace(\"\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (IOException ex) {\n\t\t\t\t// This will happen regularly so just log it in trace\n\t\t\t\t// mode\n\t\t\t\tLOGGER.trace(\"Error in OpenSubtitles parsing:\", ex);\n\t\t\t}\n\t\t};\n\t\tBACKGROUND_EXECUTOR.execute(r);\n\t} else {\n\t\tif (overTheTopLogging) {\n\t\t\tLOGGER.trace(\"Metadata already exists for {}\", file.getName());\n\t\t}\n\t}\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Creates a new instance using the specified values.\n *\n * @param mimeType the {@link MimeType}.\n * @param videoCodec the video codec.\n * @param container the container type.\n * @param title the title\n * @param originalFormat the original medium/format.\n * @param releaseGroup the release group.\n * @param videoResolutionFormat the video resolution format.\n * @param type the {@link VideoClassification}.\n * @param audioCodec the audio codec.\n */\n", "func_signal": "public GuessIt(\n\tMimeType mimeType,\n\tString videoCodec,\n\tString container,\n\tString title,\n\tString originalFormat,\n\tString releaseGroup,\n\tString videoResolutionFormat,\n\tVideoClassification type,\n\tString audioCodec\n)", "code": "{\n\tthis.mimeType = mimeType;\n\tthis.videoCodec = videoCodec;\n\tthis.container = container;\n\tthis.title = title;\n\tthis.originalFormat = originalFormat;\n\tthis.releaseGroup = releaseGroup;\n\tthis.videoResolutionFormat = videoResolutionFormat;\n\tthis.type = type;\n\tthis.audioCodec = audioCodec;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Logs in to OpenSubtitles and stores the result in {@link #token}. Some\n * users might get a different API address in response, which will be\n * reflected in the {@link URL} returned by this method.\n * <p>\n * <b>All access to {@link #token} must be protected by\n * {@link #TOKEN_LOCK}</b>.\n *\n * @param url The API {@link URL} to use for login.\n * @return The URL to use if the login was a success, {@code null}\n *         otherwise.\n */\n", "func_signal": "private static URL login()", "code": "{\n\tTOKEN_LOCK.writeLock().lock();\n\ttry {\n\t\tif (token != null && token.isYoung()) {\n\t\t\treturn token.isValid() ? token.getURL() : null;\n\t\t}\n\t\tLOGGER.debug(\"Trying to log in to OpenSubtitles\");\n\n\t\tCredMgr.Credential credentials = PMS.getCred(\"opensubtitles\");\n\t\tString pword = \"\";\n\t\tString username = \"\";\n\t\tif (credentials != null) {\n\t\t\t// if we got credentials use them\n\t\t\tif (isNotBlank(credentials.password)) {\n\t\t\t\tpword = DigestUtils.md5Hex(credentials.password);\n\t\t\t}\n\t\t\tusername = credentials.username;\n\t\t}\n\n\t\t// Setup connection\n\t\tURL url;\n\t\ttry {\n\t\t\turl = new URL(OPENSUBS_URL);\n\t\t} catch (MalformedURLException e) {\n\t\t\tthrow new AssertionError(\"OpenSubtitles URL \\\"\" + OPENSUBS_URL + \"\\\" is invalid\");\n\t\t}\n\n\t\tURLConnection urlConnection = url.openConnection();\n\t\tif (!(urlConnection instanceof HttpURLConnection)) {\n\t\t\tthrow new OpenSubtitlesException(\"Invalid URL: \" + OPENSUBS_URL);\n\t\t}\n\t\tHttpURLConnection connection = (HttpURLConnection) urlConnection;\n\t\tconnection.setDoInput(true);\n\t\tconnection.setDoOutput(true);\n\t\tconnection.setRequestProperty(\"Content-Type\", \"text/xml;charset=UTF-8\");\n\t\tconnection.setRequestMethod(\"POST\");\n\t\tconnection.setConnectTimeout(2000);\n\n\t\t// Create request\n\t\tParams params = new Params();\n\t\tparams.add(new ValueString(username));\n\t\tparams.add(new ValueString(pword));\n\t\tparams.add(new ValueString(null));\n\t\tparams.add(new ValueString(UA));\n\n\t\t// Send request\n\t\ttry (OutputStream out = LOGGER.isTraceEnabled() ?\n\t\t\t\tnew LoggableOutputStream(connection.getOutputStream(), StandardCharsets.UTF_8) :\n\t\t\t\tconnection.getOutputStream()\n\t\t) {\n\t\t\tXMLStreamWriter writer = createWriter(out);\n\t\t\twriteMethod(writer, \"LogIn\", params);\n\t\t\twriter.flush();\n\t\t\tif (out instanceof LoggableOutputStream) {\n\t\t\t\tLOGGER.trace(\"Sending OpenSubtitles login request:\\n{}\", toLogString((LoggableOutputStream) out));\n\t\t\t}\n\t\t} catch (XMLStreamException | FactoryConfigurationError e) {\n\t\t\tLOGGER.error(\"An error occurred while generating OpenSubtitles login request: {}\", e.getMessage());\n\t\t\tLOGGER.trace(\"\", e);\n\t\t}\n\n\t\t// Parse reply\n\t\tparams = null;\n\t\ttry (InputStream reply = LOGGER.isTraceEnabled() ?\n\t\t\tnew LoggableInputStream(sendXMLStream(connection, 5, 500), StandardCharsets.UTF_8) :\n\t\t\t\tsendXMLStream(connection, 5, 500)\n\t\t) {\n\t\t\tLOGGER.trace(\"Parsing OpenSubtitles login response\");\n\t\t\tXMLStreamReader reader = null;\n\t\t\ttry {\n\t\t\t\treader = createReader(reply);\n\t\t\t\tparams = readMethodResponse(reader);\n\t\t\t} finally {\n\t\t\t\tif (reader != null) {\n\t\t\t\t\treader.close();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (reply instanceof LoggableInputStream) {\n\t\t\t\tLOGGER.trace(\"Received OpenSubtitles login response:\\n{}\", toLogString((LoggableInputStream) reply));\n\t\t\t}\n\t\t}\n\n\t\tif (params == null) {\n\t\t\tLOGGER.error(\"Failed to parse Opensubtitles login response, aborting\");\n\t\t\ttoken = Token.createInvalidToken();\n\t\t\treturn null;\n\t\t}\n\t\tif (params.size() != 1 || !(params.get(0).getValue() instanceof Struct)) {\n\t\t\tLOGGER.error(\"Unexpected reply from OpenSubtitles:\\n{}\", params);\n\t\t\ttoken = Token.createInvalidToken();\n\t\t\treturn null;\n\t\t}\n\n\t\t// Handle status code\n\t\tif (!checkStatus(params)) {\n\t\t\ttoken = Token.createInvalidToken();\n\t\t\tLOGGER.error(\"OpenSubtitles login was aborted\");\n\t\t\treturn null;\n\t\t}\n\n\t\tStruct members = (Struct) params.get(0).getValue();\n\n\t\t// Check token\n\t\tString tokenString;\n\t\tMember<?, ?> member = members.get(\"token\");\n\t\tif (!(member instanceof MemberString) || isBlank(((MemberString) member).getValue())) {\n\t\t\tLOGGER.error(\"Failed to parse OpenSubtitles login token: {}\", member);\n\t\t\ttoken = Token.createInvalidToken();\n\t\t\treturn null;\n\t\t}\n\t\ttokenString = ((MemberString) member).getValue();\n\n\t\t// Parse user\n\t\tUser tokenUser = null;\n\t\tmember = members.get(\"data\");\n\t\tif (member != null) {\n\t\t\ttokenUser = User.createFromStruct((Struct) member.getValue());\n\t\t}\n\n\t\t// Create Token\n\t\ttoken = new Token(tokenString, tokenUser, url);\n\t\tif (!token.isValid()) {\n\t\t\tLOGGER.error(\"Failed to log in to OpenSubtitles\");\n\t\t\treturn null;\n\t\t}\n\t\tif (LOGGER.isDebugEnabled()) {\n\t\t\tif (token.getUser() != null) {\n\t\t\t\t// XXX If log anonymization is ever implemented, hide the\n\t\t\t\t// nickname.\n\t\t\t\tLOGGER.debug(\"Successfully logged in to OpenSubtitles as {}\", token.getUser().getUserNickName());\n\t\t\t} else {\n\t\t\t\tLOGGER.debug(\"Successfully logged in to OpenSubtitles anonymously\");\n\t\t\t}\n\t\t}\n\t\treturn token.getURL();\n\t} catch (XMLStreamException | IOException e) {\n\t\tLOGGER.error(\"An error occurred during OpenSubtitles login: {}\", e.getMessage());\n\t\tLOGGER.trace(\"\", e);\n\t\ttoken = Token.createInvalidToken();\n\t\treturn null;\n\t} finally {\n\t\tTOKEN_LOCK.writeLock().unlock();\n\t}\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Tries to find relevant OpenSubtitles subtitles for the specified\n * {@link DLNAResource} for the specified renderer.\n *\n * @param resource the {@link DLNAResource} for which to find OpenSubtitles\n *            subtitles.\n * @param renderer the {@link RendererConfiguration} or {@code null}.\n * @return The {@link List} of found {@link SubtitleItem}. If none are\n *         found, an empty {@link List} is returned.\n */\n", "func_signal": "public static ArrayList<SubtitleItem> findSubtitles(DLNAResource resource, RendererConfiguration renderer)", "code": "{\n\tArrayList<SubtitleItem> result = new ArrayList<>();\n\tif (resource == null) {\n\t\treturn new ArrayList<>();\n\t}\n\tURL url = login();\n\tif (url == null) {\n\t\tLOGGER.error(\"Couldn't find any live subtitles for {} since OpenSubtitles login failed\", resource.getName());\n\t\treturn new ArrayList<>();\n\t}\n\n\tString languageCodes = getLanguageCodes(renderer);\n\tString primaryLanguageCode = getPrimaryLanguageCode(languageCodes);\n\tString imdbId = null;\n\tFileNamePrettifier prettifier = new FileNamePrettifier(resource);\n\tboolean satisfactory = false;\n\tif (resource instanceof RealFile) {\n\t\tPath file = ((RealFile) resource).getFile().toPath();\n\t\tLOGGER.info(\"Looking for OpenSubtitles subtitles for \\\"{}\\\"\", file);\n\n\t\t// Query by hash\n\t\tlong fileSize;\n\t\ttry {\n\t\t\tfileSize = Files.size(file);\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.error(\n\t\t\t\t\"Can't read the size of \\\"{}\\\", please check that it exists and that read permission is granted\",\n\t\t\t\tfile.toAbsolutePath()\n\t\t\t);\n\t\t\tLOGGER.trace(\"\", e);\n\t\t\tfileSize = 0L;\n\t\t}\n\t\tString fileHash;\n\t\ttry {\n\t\t\tfileHash = getHash(file);\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.error(\"Couldn't calculate OpenSubtitles hash for \\\"{}\\\": {}\", file.getFileName(), e.getMessage());\n\t\t\tLOGGER.trace(\"\", e);\n\t\t\tfileHash = null;\n\t\t}\n\n\t\tif (isNotBlank(fileHash) && fileSize > 0L) {\n\t\t\tresult.addAll(findSubtitlesByFileHash(resource, fileHash, fileSize, languageCodes, prettifier));\n\t\t\tsatisfactory = isSubtitlesSatisfactory(result, primaryLanguageCode);\n\t\t}\n\n\t\tif (!satisfactory && isBlank(imdbId)) {\n\t\t\timdbId = ImdbUtil.extractImdbId(file, true);\n\t\t\tif (isBlank(imdbId)) {\n\t\t\t\timdbId = findImdbIdByFileHash(resource, fileHash, fileSize, prettifier);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!satisfactory) {\n\t\tif (isBlank(imdbId)) {\n\t\t\timdbId = guessImdbIdByFileName(resource, prettifier);\n\t\t}\n\t\tif (isNotBlank(imdbId)) {\n\t\t\t// Query by IMDB id\n\t\t\tresult.addAll(findSubtitlesByImdbId(resource, imdbId, languageCodes, prettifier));\n\t\t\tsatisfactory = isSubtitlesSatisfactory(result, primaryLanguageCode);\n\t\t}\n\t}\n\n\tif (!satisfactory) {\n\t\t// Query by name\n\t\tresult.addAll(findSubtitlesByName(resource, languageCodes, prettifier));\n\t}\n\n\tif (result.size() > 0) {\n\t\tif (LOGGER.isTraceEnabled()) {\n\t\t\tLOGGER.trace(\n\t\t\t\t\"Found {} OpenSubtitles subtitles ({}) for \\\"{}\\\":\\n{}\",\n\t\t\t\tresult.size(),\n\t\t\t\tsatisfactory ? \"satisfied\" : \"unsatisfied\",\n\t\t\t\tresource.getName(),\n\t\t\t\ttoLogString(result, 2)\n\t\t\t);\n\t\t} else {\n\t\t\tLOGGER.info(\"Found {} OpenSubtitles subtitles for \\\"{}\\\"\", result.size(), resource.getName());\n\t\t}\n\t} else {\n\t\tLOGGER.info(\"Couldn't find any OpenSubtitles subtitles for \\\"{}\\\"\", resource.getName());\n\t}\n\n\treturn result;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Downloads the subtitles from the specified {@link URI} to the specified\n * {@link Path}. It the specified {@link Path} is {@code null} a temporary\n * filename is used.\n *\n * @param url the {@link URL} from which to download.\n * @param output the {@link Path} for the target file.\n * @return {@code null} if {@code url} is {@code null} or OpenSubtitles\n *         login fails, otherwise the {@link Path} to the downloaded file.\n * @throws IOException If an error occurs during the operation.\n */\n", "func_signal": "public static Path fetchSubs(URL url, Path output) throws IOException", "code": "{\n\tif (url == null || login() == null) {\n\t\treturn null;\n\t}\n\tif (output == null) {\n\t\toutput = resolveSubtitlesPath(\"TempSub\" + String.valueOf(System.currentTimeMillis()));\n\t}\n\tURLConnection connection = url.openConnection();\n\tconnection.setDoInput(true);\n\tconnection.setDoOutput(true);\n\tInputStream in = connection.getInputStream();\n\ttry (GZIPInputStream gzipInputStream = new GZIPInputStream(in); OutputStream out = Files.newOutputStream(output);) {\n\t\tbyte[] buf = new byte[4096];\n\t\tint len;\n\t\twhile ((len = gzipInputStream.read(buf)) > 0) {\n\t\t\tout.write(buf, 0, len);\n\t\t}\n\t}\n\treturn output.toAbsolutePath();\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Calculates the <a href=\n * \"http://trac.opensubtitles.org/projects/opensubtitles/wiki/HashSourceCodes\"\n * >OpenSubtitles hash</a> for the specified {@link Path}.\n *\n * @param file the {@link Path} for which to calculate the hash.\n * @return The calculated OpenSubtitles hash or {@code null}.\n * @throws IOException If an I/O error occurs during the operation.\n */\n", "func_signal": "public static String computeHash(Path file) throws IOException", "code": "{\n\tif (!Files.isRegularFile(file)) {\n\t\treturn null;\n\t}\n\n\tlong size = Files.size(file);\n\tlong chunkSizeForFile = Math.min(HASH_CHUNK_SIZE, size);\n\n\ttry (FileChannel fileChannel = FileChannel.open(file)) {\n\t\tlong head = computeHashForChunk(fileChannel.map(MapMode.READ_ONLY, 0, chunkSizeForFile));\n\t\tlong tail = computeHashForChunk(fileChannel.map(MapMode.READ_ONLY, Math.max(size - HASH_CHUNK_SIZE, 0), chunkSizeForFile));\n\n\t\treturn String.format(\"%016x\", size + head + tail);\n\t}\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Creates a new instance using the specified values.\n *\n * @param movieName the movie name/title.\n * @param movieYear the release year.\n * @param videoClassification the {@link VideoClassification}.\n * @param imdbId the IMDB ID.\n */\n", "func_signal": "public GuessItem(String movieName, String movieYear, VideoClassification videoClassification, String imdbId)", "code": "{\n\tthis.title = movieName;\n\tthis.year = movieYear;\n\tthis.videoClassification = videoClassification;\n\tthis.imdbId = imdbId;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Queries OpenSubtitles for subtitles matching a file with the specified\n * name.\n *\n * @param resource the {@link DLNAResource} for which subtitles are to be\n *            searched.\n * @param languageCodes the comma separated list of subtitle language codes.\n * @param prettifier the {@link FileNamePrettifier} to use.\n * @return A {@link List} with the found {@link SubtitleItem}s (might be\n *         empty).\n */\n", "func_signal": "protected static ArrayList<SubtitleItem> findSubtitlesByName(\n\tDLNAResource resource,\n\tString languageCodes,\n\tFileNamePrettifier prettifier\n)", "code": "{\n\tif (resource == null) {\n\t\treturn new ArrayList<>();\n\t}\n\tString fileName = null;\n\tif (resource instanceof RealFile) {\n\t\tFile file = ((RealFile) resource).getFile();\n\t\tif (file != null) {\n\t\t\tfileName = file.getName();\n\t\t}\n\t}\n\tif (fileName == null) {\n\t\tfileName = resource.getSystemName();\n\t}\n\n\tArray queryArray = new Array();\n\tif (isNotBlank(fileName)) {\n\t\tStruct queryStruct = new Struct();\n\t\tqueryStruct.put(new MemberString(\"tag\", fileName));\n\t\tif (isNotBlank(languageCodes)) {\n\t\t\tqueryStruct.put(new MemberString(\"sublanguageid\", languageCodes));\n\t\t}\n\t\tif (prettifier != null && prettifier.getSeason() > 0 && prettifier.getEpisode() > 0) {\n\t\t\tqueryStruct.put(new MemberInt(\"season\", prettifier.getSeason()));\n\t\t\tqueryStruct.put(new MemberInt(\"episode\", prettifier.getEpisode()));\n\t\t}\n\t\tqueryArray.add(new ValueStruct(queryStruct));\n\t}\n\tif (prettifier != null && isNotBlank(prettifier.getName())) {\n\t\tStruct queryStruct = new Struct();\n\t\tqueryStruct.put(new MemberString(\"query\", prettifier.getName()));\n\t\tif (isNotBlank(languageCodes)) {\n\t\t\tqueryStruct.put(new MemberString(\"sublanguageid\", languageCodes));\n\t\t}\n\t\tif (prettifier.getSeason() > 0 && prettifier.getEpisode() > 0) {\n\t\t\tqueryStruct.put(new MemberInt(\"season\", prettifier.getSeason()));\n\t\t\tqueryStruct.put(new MemberInt(\"episode\", prettifier.getEpisode()));\n\t\t}\n\t\tqueryArray.add(new ValueStruct(queryStruct));\n\t}\n\n\treturn searchSubtitles(queryArray, resource, prettifier, \"filename\", fileName, -1);\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Creates a {@link String} where each {@link CheckMovieHashItem} in\n * {@code titles} is on its own line and indented with the specified number\n * of spaces.\n *\n * @param titles the {@link Collection} of {@link CheckMovieHashItem}s to\n *            format for logging.\n * @param indent the number of leading spaces on each line.\n * @return The log friendly {@link String}.\n */\n", "func_signal": "public static String toLogStringTitles(Collection<CheckMovieHashItem> titles, int indent)", "code": "{\n\tString indentation = indent > 0 ? StringUtil.fillString(' ', indent) : \"\";\n\tif (titles == null) {\n\t\treturn indentation + \"Null\";\n\t}\n\tif (titles.isEmpty()) {\n\t\treturn indentation + \"No matching titles\";\n\t}\n\tStringBuilder sb = new StringBuilder();\n\tfor (CheckMovieHashItem item : titles) {\n\t\tsb.append(indentation).append(item).append(\"\\n\");\n\t}\n\treturn sb.toString();\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * @return A new array containing the language codes from\n *         {@code UserPreferredLanguages}.\n */\n", "func_signal": "public String[] getUserPreferredLanguages()", "code": "{\n\tString[] result = new String[userPreferredLanguages.length];\n\tSystem.arraycopy(userPreferredLanguages, 0, result, 0, result.length);\n\treturn result;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Queries OpenSubtitles for subtitles matching a file with the specified\n * hash and size.\n *\n * @param resource the {@link DLNAResource} for which subtitles are to be\n *            searched.\n * @param fileHash the file hash.\n * @param fileSize the file size in bytes.\n * @param languageCodes the comma separated list of subtitle language codes.\n * @param prettifier the {@link FileNamePrettifier} to use.\n * @return A {@link List} with the found {@link SubtitleItem}s (might be\n *         empty).\n */\n", "func_signal": "protected static ArrayList<SubtitleItem> findSubtitlesByFileHash(\n\tDLNAResource resource,\n\tString fileHash,\n\tlong fileSize,\n\tString languageCodes,\n\tFileNamePrettifier prettifier\n)", "code": "{\n\tif (resource == null || isBlank(fileHash)) {\n\t\treturn new ArrayList<>();\n\t}\n\n\tStruct queryStruct = new Struct();\n\tqueryStruct.put(new MemberString(\"moviehash\", fileHash));\n\tqueryStruct.put(new MemberString(\"moviebytesize\", Long.toString(fileSize)));\n\tif (isNotBlank(languageCodes)) {\n\t\tqueryStruct.put(new MemberString(\"sublanguageid\", languageCodes));\n\t}\n\tif (prettifier != null && prettifier.getSeason() > 0 && prettifier.getEpisode() > 0) {\n\t\tqueryStruct.put(new MemberInt(\"season\", prettifier.getSeason()));\n\t\tqueryStruct.put(new MemberInt(\"episode\", prettifier.getEpisode()));\n\t}\n\tArray queryArray = new Array();\n\tqueryArray.add(new ValueStruct(queryStruct));\n\n\treturn searchSubtitles(queryArray, resource, prettifier, \"file hash\", fileHash, -1);\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Creates a new instance with the specified parameters.\n *\n * @param score the score for this candidate.\n * @param guessItem the {@link GuessItem} for this candidate.\n */\n", "func_signal": "public GuessCandidate(double score, GuessItem guessItem)", "code": "{\n\tthis.score = score;\n\tthis.guessItem = guessItem;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Creates a new instance using the specified values.\n *\n * @param movieName the movie name/title.\n * @param movieYear the release year.\n * @param videoClassification the video classification.\n * @param imdbId the IMDB ID.\n * @param score the score.\n */\n", "func_signal": "public GuessFromString(String movieName, String movieYear, String videoClassification, String imdbId, String score)", "code": "{\n\tsuper(movieName, movieYear, videoClassification, imdbId);\n\tint tmpScore;\n\ttry {\n\t\ttmpScore = Integer.parseInt(score);\n\t} catch (NumberFormatException e) {\n\t\ttmpScore = -1;\n\t}\n\tthis.score = tmpScore;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Evaluates whether the found set of subtitles are satisfactory or if more\n * searches should be performed.\n *\n * @param subtitleItems the currently found {@link SubtitleItem}s.\n * @param primaryLanguageCode the primary language code.\n * @return {@code true} if the list of subtitles are considered good enough,\n *         {@code false} otherwise.\n */\n", "func_signal": "protected static boolean isSubtitlesSatisfactory(List<SubtitleItem> subtitleItems, String primaryLanguageCode)", "code": "{\n\tif (subtitleItems == null || subtitleItems.isEmpty()) {\n\t\treturn false;\n\t}\n\tif (isBlank(primaryLanguageCode)) {\n\t\treturn true;\n\t}\n\tString languageCode = primaryLanguageCode.trim().toLowerCase(Locale.ROOT);\n\tfor (SubtitleItem item : subtitleItems) {\n\t\tString itemLangaugeCode = item.getLanguageCode();\n\t\tif (isNotBlank(itemLangaugeCode) && languageCode.equals(itemLangaugeCode.trim().toLowerCase(Locale.ROOT))) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * Creates a new instance using the specified values.\n *\n * @param videoClassification the video classification.\n * @param subCount the {@code SubCount}.\n * @param seenCount the {@code SeenCount}.\n * @param imdbId the {@code IMDB ID}.\n * @param movieYear the release year.\n * @param movieHash the video file hash.\n * @param seriesEpisode the episode number or {@code -1} if it doesn't\n *            apply.\n * @param movieName the movie name/title.\n * @param seriesSeason the season number or {@code -1} if it doesn't\n *            apply.\n */\n", "func_signal": "public CheckMovieHashItem(\n\tString videoClassification,\n\tint subCount,\n\tint seenCount,\n\tString imdbId,\n\tString movieYear,\n\tString movieHash,\n\tint seriesEpisode,\n\tString movieName,\n\tint seriesSeason\n)", "code": "{\n\tsuper(movieName, movieYear, videoClassification, imdbId);\n\tthis.subCount = subCount;\n\tthis.seenCount = seenCount;\n\tthis.movieHash = movieHash;\n\tthis.seriesEpisode = seriesEpisode;\n\tthis.seriesSeason = seriesSeason;\n}", "path": "UniversalMediaServer/src/main/java/net/pms/util/OpenSubtitle.java", "commit_date": "2020-12-14 00:00:00", "repo_name": "UniversalMediaServer/UniversalMediaServer", "stars": 2143, "license": "gpl-2.0", "language": "java", "size": 384680}
{"docstring": "/**\n * \u516c\u5171\u65b9\u6cd5\uff1a\u53d1\u9001\u4fe1\u606f\u7ed9\u6240\u6709\u4eba\n */\n", "func_signal": "private static void sendMessageToAll(String msg)", "code": "{\n    onlineSessions.forEach((id, session) -> {\n        try {\n            session.getBasicRemote().sendText(msg);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    });\n}", "path": "springboot-socks/springboot-websocket-chat/src/main/java/com/hehe/chat/WebSocketChatServer.java", "commit_date": "2018-08-18 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "// \u63d0\u4f9bequals\u65b9\u6cd5 \u65b9\u4fbf\u6d4b\u8bd5\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    MyDataSource that = (MyDataSource) o;\n\n    if (url != null ? !url.equals(that.url) : that.url != null) return false;\n    if (username != null ? !username.equals(that.username) : that.username != null) return false;\n    if (password != null ? !password.equals(that.password) : that.password != null) return false;\n    return driverClassName != null ? driverClassName.equals(that.driverClassName) : that.driverClassName == null;\n}", "path": "springboot-socks/springboot-externalized-configuration/src/main/java/com/hehe/config/MyDataSource.java", "commit_date": "2017-10-02 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u6dfb\u52a0\u6458\u8981\u4fe1\u606f(Docket)\n */\n", "func_signal": "@Bean\npublic Docket controllerApi()", "code": "{\n    return new Docket(DocumentationType.SWAGGER_2)\n            .apiInfo(new ApiInfoBuilder()\n                    .title(\"\u6807\u9898\uff1a\u67d0\u516c\u53f8_\u7528\u6237\u4fe1\u606f\u7ba1\u7406\u7cfb\u7edf_\u63a5\u53e3\u6587\u6863\")\n                    .description(\"\u63cf\u8ff0\uff1a\u7528\u4e8e\u7ba1\u7406\u96c6\u56e2\u65d7\u4e0b\u516c\u53f8\u7684\u4eba\u5458\u4fe1\u606f,\u5177\u4f53\u5305\u62ecXXX,XXX\u6a21\u5757...\")\n                    .contact(new Contact(\"\u4e00\u53ea\u889c\u5b50\",null,null))\n                    .version(\"\u7248\u672c\u53f7:1.0\")\n                    .build())\n            .select()\n            .apis(RequestHandlerSelectors.basePackage(\"com.hehe.controller\"))\n            .paths(PathSelectors.any())\n            .build();\n}", "path": "springboot-socks/springboot-swagger2/src/main/java/com/hehe/config/Swagger2Config.java", "commit_date": "2017-10-19 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u4fdd\u5b58\u9519\u8bef/\u5f02\u5e38.\n *\n * @see DispatcherServlet #processHandlerException \u8fdb\u884c\u9009\u4e3eHandlerExceptionResolver\n */\n", "func_signal": "@Override\npublic ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)", "code": "{\n    request.setAttribute(ERROR_NAME, ex);\n    return null;\n}", "path": "springboot-socks/springboot-error-handler/src/main/java/com/hehe/error/ErrorInfoBuilder.java", "commit_date": "2017-10-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * XML\u6d88\u606f\u5904\u7406\u5668\n */\n", "func_signal": "@Bean\npublic MappingJackson2XmlHttpMessageConverter mappingJackson2XmlHttpMessageConverter()", "code": "{\n    MappingJackson2XmlHttpMessageConverter xmlConverter = new MappingJackson2XmlHttpMessageConverter();\n    //\u8bbe\u7f6e\u89e3\u6790XML\u7684\u5de5\u5177\u7c7b\n    XmlMapper xmlMapper = new XmlMapper();\n    //\u8bbe\u7f6e\u89e3\u6790\u65e5\u671f\u7684\u5de5\u5177\u7c7b\n    xmlMapper.setDateFormat(dateFormat);\n    //\u5ffd\u7565\u672a\u77e5\u5c5e\u6027 \u9632\u6b62\u89e3\u6790\u62a5\u9519\n    xmlMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    xmlConverter.setObjectMapper(xmlMapper);\n    return xmlConverter;\n}", "path": "springboot-socks/springboot-date-format/src/main/java/com/hehe/config/GlobalDateFormatConfig.java", "commit_date": "2018-11-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "//\u63d0\u4f9b\u9a8c\u8bc1\u7801\n", "func_signal": "@RequestMapping(\"verifyCode\")\npublic String verifyCode(HttpServletRequest request)", "code": "{\n    request.getSession().setAttribute(\"verifyCode\", \"N7GX\");\n    return request.getSession().getId() + \":\" + request.getSession().getAttribute(\"verifyCode\");\n}", "path": "springboot-socks/springboot-nginx/src/main/java/com/hehe/SpringBootNginxApplication.java", "commit_date": "2017-10-31 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "//\u6839\u636e\u5b9e\u9645\u4e1a\u52a1\u652f\u6301\u5404\u79cd\u590d\u6742\u683c\u5f0f\u7684\u65e5\u671f\u5b57\u7b26\u4e32\u3002\n", "func_signal": "@Override\npublic Date parse(String source)", "code": "{\n    try {\n        return super.parse(source);//\u652f\u6301\u89e3\u6790\u6307\u5b9apattern\u7c7b\u578b\u3002\n    } catch (Exception e) {\n        try {\n            return new StdDateFormat().parse(source);//\u652f\u6301\u89e3\u6790long\u7c7b\u578b\u7684\u65f6\u95f4\u6233\n        } catch (ParseException e1) {\n            throw new RuntimeException(\"\u65e5\u671f\u683c\u5f0f\u975e\u6cd5\uff1a\" + e);\n        }\n    }\n}", "path": "springboot-socks/springboot-date-format/src/main/java/com/hehe/config/GlobalDateFormatConfig.java", "commit_date": "2018-11-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u5f53\u5173\u95ed\u8fde\u63a5\uff1a1.\u79fb\u9664\u4f1a\u8bdd\u5bf9\u8c61 2.\u66f4\u65b0\u5728\u7ebf\u4eba\u6570\n */\n", "func_signal": "@OnClose\npublic void onClose(Session session)", "code": "{\n    onlineSessions.remove(session.getId());\n    sendMessageToAll(Message.jsonStr(Message.QUIT, \"\", \"\", onlineSessions.size()));\n}", "path": "springboot-socks/springboot-websocket-chat/src/main/java/com/hehe/chat/WebSocketChatServer.java", "commit_date": "2018-08-18 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\uff1a1.\u83b7\u53d6\u5b83\u7684\u7528\u6237\u540d\u548c\u6d88\u606f 2.\u53d1\u9001\u6d88\u606f\u7ed9\u6240\u6709\u4eba\n * <p>\n * PS: \u8fd9\u91cc\u7ea6\u5b9a\u4f20\u9012\u7684\u6d88\u606f\u4e3aJSON\u5b57\u7b26\u4e32 \u65b9\u4fbf\u4f20\u9012\u66f4\u591a\u53c2\u6570\uff01\n */\n", "func_signal": "@OnMessage\npublic void onMessage(Session session, String jsonStr)", "code": "{\n    Message message = JSON.parseObject(jsonStr, Message.class);\n    sendMessageToAll(Message.jsonStr(Message.SPEAK, message.getUsername(), message.getMsg(), onlineSessions.size()));\n}", "path": "springboot-socks/springboot-websocket-chat/src/main/java/com/hehe/chat/WebSocketChatServer.java", "commit_date": "2018-08-18 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u83b7\u53d6\u901a\u4fe1\u72b6\u6001(HttpStatus)\n *\n * @see AbstractErrorController #getStatus\n */\n", "func_signal": "public HttpStatus getHttpStatus(HttpServletRequest request)", "code": "{\n    Integer statusCode = (Integer) request.getAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE);\n    try {\n        return statusCode != null ? HttpStatus.valueOf(statusCode) : HttpStatus.INTERNAL_SERVER_ERROR;\n    } catch (Exception ex) {\n        return HttpStatus.INTERNAL_SERVER_ERROR;\n    }\n}", "path": "springboot-socks/springboot-error-handler/src/main/java/com/hehe/error/ErrorInfoBuilder.java", "commit_date": "2017-10-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u8bbe\u7f6e\u5168\u5c40\u8de8\u57df\n */\n", "func_signal": "@Order(Ordered.HIGHEST_PRECEDENCE)\n@Bean\npublic WebMvcConfigurer corsConfigurer()", "code": "{\n    return new WebMvcConfigurer() {\n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            //\u9ed8\u8ba4\u62e6\u622a\u8def\u5f84\n            registry.addMapping(\"/**\")\n\n                    //\u8868\u793a\u5141\u8bb8\u90a3\u4e9b\u539f\u59cb\u57df\u8fdb\u884c\u8de8\u57df\u8bbf\u95ee\uff0c\u8fd9\u91cc\"*\"\u8868\u793a\u5141\u8bb8\u4efb\u610f\u7f51\u7ad9\uff0c\u5b9e\u9645\u5f00\u53d1\u5efa\u8bae\u4fee\u6539\u4e3a\u914d\u7f6e\u9879\u3002\n                    .allowedOrigins(\"*\")\n\n                    //\u8868\u793a\u662f\u5426\u5141\u8bb8\u5ba2\u6237\u7aef\u53d1\u9001Cookie\u7b49\u51ed\u8bc1\u4fe1\u606f\uff0c\u8fd9\u91cc\"true\"\u8868\u793a\u652f\u6301\u53d1\u9001\uff0c\u6d89\u53ca\u767b\u9646\u6b64\u5904\u5fc5\u987b\u5f00\u542f\u3002\n                    .allowCredentials(true)\n\n                    //\u8868\u793a\u5141\u8bb8\u539f\u59cb\u57df\u53d1\u8d77\u54ea\u4e9b\u8bf7\u6c42\u65b9\u5f0f\uff0c\u8fd9\u91cc\"*\"\u8868\u793a\u652f\u6301GET/POST\u7b49\u5168\u90e8\u63d0\u4ea4\u65b9\u5f0f\u3002\n                    .allowedMethods(\"*\")\n\n                    //\u8868\u793a\u5141\u8bb8\u539f\u59cb\u57df\u643a\u5e26\u54ea\u4e9b\u8bf7\u6c42\u5934 \u8fd9\u91cc\"*\"\u8868\u793a\u652f\u6301\u5168\u90e8\u8bf7\u6c42\u5934\n                    .allowedHeaders(\"*\")\n\n                    //\u8868\u793a\u5141\u8bb8\u66b4\u9732\u54ea\u4e9b\u54cd\u5e94\u5934\uff0c\u8fd9\u91cc\u7279\u6307\u90a3\u4e9b\u975e\u7b80\u5355\u7684\u5934\u90e8\u4fe1\u606f\uff0c\u6240\u4ee5\u7528\"*\"\u65e0\u6548\u3002\n                    .exposedHeaders(HttpHeaders.AUTHORIZATION);\n        }\n    };\n}", "path": "springboot-socks/springboot-cross-orgin/target-web/src/main/java/com/hehe/config/GlobalCorsConfig.java", "commit_date": "2018-11-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u6784\u5efa\u9519\u8bef\u4fe1\u606f.(ErrorInfo)\n */\n", "func_signal": "public ErrorInfo getErrorInfo(HttpServletRequest request, Throwable error)", "code": "{\n    ErrorInfo errorInfo = new ErrorInfo();\n    errorInfo.setTime(LocalDateTime.now().toString());\n    errorInfo.setUrl(request.getRequestURL().toString());\n    errorInfo.setError(error.toString());\n    errorInfo.setStatusCode(getHttpStatus(request).value());\n    errorInfo.setReasonPhrase(getHttpStatus(request).getReasonPhrase());\n    errorInfo.setStackTrace(getStackTraceInfo(error, isIncludeStackTrace(request)));\n    return errorInfo;\n}", "path": "springboot-socks/springboot-error-handler/src/main/java/com/hehe/error/ErrorInfoBuilder.java", "commit_date": "2017-10-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u6267\u884c\u5b9a\u65f6\u4efb\u52a1.\n */\n", "func_signal": "@Override\npublic void configureTasks(ScheduledTaskRegistrar taskRegistrar)", "code": "{\n    taskRegistrar.addTriggerTask(\n            //1.\u6dfb\u52a0\u4efb\u52a1\u5185\u5bb9(Runnable)\n            () -> System.out.println(\"\u6267\u884c\u5b9a\u65f6\u4efb\u52a12: \" + LocalDateTime.now().toLocalTime()),\n            //2.\u8bbe\u7f6e\u6267\u884c\u5468\u671f(Trigger)\n            triggerContext -> {\n                //2.1 \u4ece\u6570\u636e\u5e93\u83b7\u53d6\u6267\u884c\u5468\u671f\n                String cron = cronMapper.getCron();\n                //2.2 \u5408\u6cd5\u6027\u6821\u9a8c.\n                if (StringUtils.isEmpty(cron)) {\n                    // Omitted Code ..\n                }\n                //2.3 \u8fd4\u56de\u6267\u884c\u5468\u671f(Date)\n                return new CronTrigger(cron).nextExecutionTime(triggerContext);\n            }\n    );\n}", "path": "springboot-socks/springboot-schedule-task/src/main/java/com/hehe/config/CompleteScheduleConfig.java", "commit_date": "2017-10-23 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u83b7\u53d6\u5806\u6808\u8f68\u8ff9(StackTrace)\n *\n * @see DefaultErrorAttributes  #addStackTrace\n */\n", "func_signal": "public String getStackTraceInfo(Throwable error, boolean flag)", "code": "{\n    if (!flag) {\n        return \"omitted\";\n    }\n    StringWriter stackTrace = new StringWriter();\n    error.printStackTrace(new PrintWriter(stackTrace));\n    stackTrace.flush();\n    return stackTrace.toString();\n}", "path": "springboot-socks/springboot-error-handler/src/main/java/com/hehe/error/ErrorInfoBuilder.java", "commit_date": "2017-10-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * JSON\u6d88\u606f\u5904\u7406\u5668\n */\n", "func_signal": "@Bean\npublic MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter()", "code": "{\n    MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();\n    //\u8bbe\u7f6e\u89e3\u6790JSON\u5de5\u5177\u7c7b\n    ObjectMapper objectMapper = new ObjectMapper();\n    //\u8bbe\u7f6e\u89e3\u6790\u65e5\u671f\u7684\u5de5\u5177\u7c7b\n    objectMapper.setDateFormat(dateFormat);\n    //\u5ffd\u7565\u672a\u77e5\u5c5e\u6027 \u9632\u6b62\u89e3\u6790\u62a5\u9519\n    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    jsonConverter.setObjectMapper(objectMapper);\n    List<MediaType> list = new ArrayList<>();\n    list.add(MediaType.APPLICATION_JSON_UTF8);\n    jsonConverter.setSupportedMediaTypes(list);\n    return jsonConverter;\n}", "path": "springboot-socks/springboot-date-format/src/main/java/com/hehe/config/GlobalDateFormatConfig.java", "commit_date": "2018-11-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u9ed8\u8ba4\u89e3\u6790\u5668 \u5176\u4e2dlocale\u8868\u793a\u9ed8\u8ba4\u8bed\u8a00\n */\n", "func_signal": "@Bean\npublic LocaleResolver localeResolver()", "code": "{\n    SessionLocaleResolver localeResolver = new SessionLocaleResolver();\n    localeResolver.setDefaultLocale(Locale.US);\n    return localeResolver;\n}", "path": "springboot-socks/springboot-locale-i18n/src/main/java/com/hehe/locale/LocaleConfig.java", "commit_date": "2018-10-23 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u83b7\u53d6\u9519\u8bef.(Error/Exception)\n * <p>\n * \u83b7\u53d6\u65b9\u5f0f\uff1a\u901a\u8fc7Request\u5bf9\u8c61\u83b7\u53d6(Key=\"javax.servlet.error.exception\").\n *\n * @see DefaultErrorAttributes #addErrorDetails\n */\n", "func_signal": "public Throwable getError(HttpServletRequest request)", "code": "{\n    //\u6839\u636eHandlerExceptionResolver\u63a5\u53e3\u65b9\u6cd5\u6765\u83b7\u53d6\u9519\u8bef.\n    Throwable error = (Throwable) request.getAttribute(ERROR_NAME);\n    //\u6839\u636eRequest\u5bf9\u8c61\u83b7\u53d6\u9519\u8bef.\n    if (error == null) {\n        error = (Throwable) request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE);\n    }\n    //\u5f53\u83b7\u53d6\u9519\u8bef\u975e\u7a7a,\u53d6\u51faRootCause.\n    if (error != null) {\n        while (error instanceof ServletException && error.getCause() != null) {\n            error = error.getCause();\n        }\n    }//\u5f53\u83b7\u53d6\u9519\u8bef\u4e3anull,\u6b64\u65f6\u6211\u4eec\u8bbe\u7f6e\u9519\u8bef\u4fe1\u606f\u5373\u53ef.\n    else {\n        String message = (String) request.getAttribute(WebUtils.ERROR_MESSAGE_ATTRIBUTE);\n        if (StringUtils.isEmpty(message)) {\n            HttpStatus status = getHttpStatus(request);\n            message = \"Unknown Exception But \" + status.value() + \" \" + status.getReasonPhrase();\n        }\n        error = new Exception(message);\n    }\n    return error;\n}", "path": "springboot-socks/springboot-error-handler/src/main/java/com/hehe/error/ErrorInfoBuilder.java", "commit_date": "2017-10-17 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "//\u5728\u62e6\u622a\u5668\u6253\u5370\u8bbf\u95eeURL\n", "func_signal": "@Bean\npublic WebMvcConfigurer webMvcConfigurer()", "code": "{\n    return new WebMvcConfigurer() {\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n            registry.addInterceptor(new HandlerInterceptor() {\n                @Override\n                public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n                    if(response.getStatus()/100>=4){\n                        System.err.println(\"\u8bbf\u95eeURL:\"+request.getAttribute(WebUtils.ERROR_REQUEST_URI_ATTRIBUTE));\n                    }else {\n                        System.out.println(\"\u8bbf\u95eeURL:\"+request.getRequestURI());\n                    }\n                }\n            });\n        }\n    };\n}", "path": "springboot-socks/springboot-nginx/src/main/java/com/hehe/SpringBootNginxApplication.java", "commit_date": "2017-10-31 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u968f\u673a\u629b\u51fa\u5f02\u5e38.\n */\n", "func_signal": "private void randomException() throws Exception", "code": "{\n    Exception[] exceptions = { //\u5f02\u5e38\u96c6\u5408\n            new NullPointerException(),\n            new ArrayIndexOutOfBoundsException(),\n            new NumberFormatException(),\n            new SQLException()};\n    //\u53d1\u751f\u6982\u7387\n    double probability = 0.75;\n    if (Math.random() < probability) {\n        //\u60c5\u51b51\uff1a\u8981\u4e48\u629b\u51fa\u5f02\u5e38\n        throw exceptions[(int) (Math.random() * exceptions.length)];\n    } else {\n        //\u60c5\u51b52\uff1a\u8981\u4e48\u7ee7\u7eed\u8fd0\u884c\n    }\n\n}", "path": "springboot-socks/springboot-error-handler/src/main/java/com/hehe/ErrorHandlerApplication.java", "commit_date": "2017-10-16 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * \u5f53\u5ba2\u6237\u7aef\u6253\u5f00\u8fde\u63a5\uff1a1.\u6dfb\u52a0\u4f1a\u8bdd\u5bf9\u8c61 2.\u66f4\u65b0\u5728\u7ebf\u4eba\u6570\n */\n", "func_signal": "@OnOpen\npublic void onOpen(Session session)", "code": "{\n    onlineSessions.put(session.getId(), session);\n    sendMessageToAll(Message.jsonStr(Message.ENTER, \"\", \"\", onlineSessions.size()));\n}", "path": "springboot-socks/springboot-websocket-chat/src/main/java/com/hehe/chat/WebSocketChatServer.java", "commit_date": "2018-08-18 00:00:00", "repo_name": "yizhiwazi/springboot-socks", "stars": 2606, "license": "None", "language": "java", "size": 3043}
{"docstring": "/**\n * Check if the time that has been typed so far is completely legal, as is.\n */\n", "func_signal": "private boolean isTypedTimeFullyLegal()", "code": "{\n    if (mIs24HourMode) {\n        // For 24-hour mode, the time is legal if the hours and minutes are each legal. Note:\n        // getEnteredTime() will ONLY call isTypedTimeFullyLegal() when NOT in 24hour mode.\n        int[] values = getEnteredTime(null);\n        return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);\n    } else {\n        // For AM/PM mode, the time is legal if it contains an AM or PM, as those can only be\n        // legally added at specific times based on the tree's algorithm.\n        return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) ||\n                mTypedTimes.contains(getAmOrPmKeyCode(PM)));\n    }\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Get the currently-entered time, as integer values of the hours and minutes typed.\n *\n * @param enteredZeros A size-2 boolean array, which the caller should initialize, and which\n *                     may then be used for the caller to know whether zeros had been explicitly entered as either\n *                     hours of minutes. This is helpful for deciding whether to show the dashes, or actual 0's.\n * @return A size-3 int array. The first value will be the hours, the second value will be the\n * minutes, and the third will be either TimePickerDialog.AM or TimePickerDialog.PM.\n */\n", "func_signal": "private int[] getEnteredTime(Boolean[] enteredZeros)", "code": "{\n    int amOrPm = -1;\n    int startIndex = 1;\n    if (!mIs24HourMode && isTypedTimeFullyLegal()) {\n        int keyCode = mTypedTimes.get(mTypedTimes.size() - 1);\n        if (keyCode == getAmOrPmKeyCode(AM)) {\n            amOrPm = AM;\n        } else if (keyCode == getAmOrPmKeyCode(PM)) {\n            amOrPm = PM;\n        }\n        startIndex = 2;\n    }\n    int minute = -1;\n    int hour = -1;\n    for (int i = startIndex; i <= mTypedTimes.size(); i++) {\n        int val = getValFromKeyCode(mTypedTimes.get(mTypedTimes.size() - i));\n        if (i == startIndex) {\n            minute = val;\n        } else if (i == startIndex + 1) {\n            minute += 10 * val;\n            if (enteredZeros != null && val == 0) {\n                enteredZeros[1] = true;\n            }\n        } else if (i == startIndex + 2) {\n            hour = val;\n        } else if (i == startIndex + 3) {\n            hour += 10 * val;\n            if (enteredZeros != null && val == 0) {\n                enteredZeros[0] = true;\n            }\n        }\n    }\n\n    int[] ret = {hour, minute, amOrPm};\n    return ret;\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * @return Themed context for using in action bar\n */\n", "func_signal": "public Context getSupportActionBarContext()", "code": "{\n    if (mActionBarContext == null) {\n        int theme = ThemeManager.getThemeType(this);\n        if (theme != ThemeManager.LIGHT) {\n            theme = ThemeManager.DARK;\n        }\n        theme = ThemeManager.getThemeResource(theme, false);\n        if (mLastThemeResourceId == theme) {\n            mActionBarContext = this;\n        } else {\n            mActionBarContext = new ContextThemeWrapperPlus(this, theme);\n        }\n    }\n    return mActionBarContext;\n}", "path": "HoloEverywhere/library/src/android/support/v4/app/_HoloActivity.java", "commit_date": "2014-02-05 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Using the trigonometric Unit Circle, calculate the positions that the text will need to be\n * drawn at based on the specified circle radius. Place the values in the textGridHeights and\n * textGridWidths parameters.\n */\n", "func_signal": "private void calculateGridSizes(float numbersRadius, float xCenter, float yCenter,\n                                float textSize, float[] textGridHeights, float[] textGridWidths)", "code": "{\n    /*\n     * The numbers need to be drawn in a 7x7 grid, representing the points on the Unit Circle.\n     */\n    float offset1 = numbersRadius;\n    // cos(30) = a / r => r * cos(30) = a => r * sqrt(3)/2 = a\n    float offset2 = numbersRadius * ((float) Math.sqrt(3)) / 2f;\n    // sin(30) = o / r => r * sin(30) = o => r / 2 = a\n    float offset3 = numbersRadius / 2f;\n    mPaint.setTextSize(textSize);\n    // We'll need yTextBase to be slightly lower to account for the text's baseline.\n    yCenter -= (mPaint.descent() + mPaint.ascent()) / 2;\n\n    textGridHeights[0] = yCenter - offset1;\n    textGridWidths[0] = xCenter - offset1;\n    textGridHeights[1] = yCenter - offset2;\n    textGridWidths[1] = xCenter - offset2;\n    textGridHeights[2] = yCenter - offset3;\n    textGridWidths[2] = xCenter - offset3;\n    textGridHeights[3] = yCenter;\n    textGridWidths[3] = xCenter;\n    textGridHeights[4] = yCenter + offset3;\n    textGridWidths[4] = xCenter + offset3;\n    textGridHeights[5] = yCenter + offset2;\n    textGridWidths[5] = xCenter + offset2;\n    textGridHeights[6] = yCenter + offset1;\n    textGridWidths[6] = xCenter + offset1;\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/RadialTextsView.java", "commit_date": "2014-04-05 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * For keyboard mode, processes key events.\n *\n * @param keyCode the pressed key.\n * @return true if the key was successfully processed, false otherwise.\n */\n", "func_signal": "private boolean processKeyUp(int keyCode)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_ESCAPE || keyCode == KeyEvent.KEYCODE_BACK) {\n        dismiss();\n        return true;\n    } else if (keyCode == KeyEvent.KEYCODE_TAB) {\n        if (mInKbMode) {\n            if (isTypedTimeFullyLegal()) {\n                finishKbMode(true);\n            }\n            return true;\n        }\n    } else if (keyCode == KeyEvent.KEYCODE_ENTER) {\n        if (mInKbMode) {\n            if (!isTypedTimeFullyLegal()) {\n                return true;\n            }\n            finishKbMode(false);\n        }\n        if (mCallback != null) {\n            mCallback.onTimeSet(mTimePicker,\n                    mTimePicker.getHours(), mTimePicker.getMinutes());\n        }\n        dismiss();\n        return true;\n    } else if (keyCode == KeyEvent.KEYCODE_DEL) {\n        if (mInKbMode) {\n            if (!mTypedTimes.isEmpty()) {\n                int deleted = deleteLastTypedKey();\n                String deletedKeyStr;\n                if (deleted == getAmOrPmKeyCode(AM)) {\n                    deletedKeyStr = mAmText;\n                } else if (deleted == getAmOrPmKeyCode(PM)) {\n                    deletedKeyStr = mPmText;\n                } else {\n                    deletedKeyStr = String.format(\"%d\", getValFromKeyCode(deleted));\n                }\n                DateTimePickerUtils.tryAccessibilityAnnounce(mTimePicker,\n                        String.format(mDeletedKeyFormat, deletedKeyStr));\n                updateDisplay(true);\n            }\n        }\n    } else if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1\n            || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3\n            || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5\n            || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7\n            || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9\n            || (!mIs24HourMode &&\n            (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) {\n        if (!mInKbMode) {\n            if (mTimePicker == null) {\n                // Something's wrong, because time picker should definitely not be null.\n                Log.e(TAG, \"Unable to initiate keyboard mode, TimePicker was null.\");\n                return true;\n            }\n            mTypedTimes.clear();\n            tryStartingKbMode(keyCode);\n            return true;\n        }\n        // We're already in keyboard mode.\n        if (addKeyIfLegal(keyCode)) {\n            updateDisplay(false);\n        }\n        return true;\n    }\n    return false;\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Calculates the day that the given x position is in, accounting for week\n * number. Returns a Time referencing that day or null if\n *\n * @param x The x position of the touch event\n * @return A time object for the tapped day or null if the position wasn't\n * in a day\n */\n", "func_signal": "public CalendarDay getDayFromLocation(float x, float y)", "code": "{\n    int dayStart = mPadding;\n    if (x < dayStart || x > mWidth - mPadding) {\n        return null;\n    }\n    // Selection is (x - start) / (pixels/day) == (x -s) * day / pixels\n    int row = (int) (y - MONTH_HEADER_SIZE) / mRowHeight;\n    int column = (int) ((x - dayStart) * mNumDays / (mWidth - dayStart - mPadding));\n\n    int day = column - findDayOffset() + 1;\n    day += row * mNumDays;\n    if (day < 1 || day > mNumCells) {\n        return null;\n    }\n    return new CalendarDay(mYear, mMonth, day);\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/date/SimpleMonthView.java", "commit_date": "2013-11-09 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Update the hours, minutes, and AM/PM displays with the typed times. If the typedTimes is\n * empty, either show an empty display (filled with the placeholder text), or update from the\n * timepicker's values.\n *\n * @param allowEmptyDisplay if true, then if the typedTimes is empty, use the placeholder text.\n *                          Otherwise, revert to the timepicker's values.\n */\n", "func_signal": "private void updateDisplay(boolean allowEmptyDisplay)", "code": "{\n    if (!allowEmptyDisplay && mTypedTimes.isEmpty()) {\n        int hour = mTimePicker.getHours();\n        int minute = mTimePicker.getMinutes();\n        setHour(hour, true);\n        setMinute(minute);\n        if (!mIs24HourMode) {\n            updateAmPmDisplay(hour < 12 ? AM : PM);\n        }\n        setCurrentItemShowing(mTimePicker.getCurrentItemShowing(), true, true, true);\n        mDoneButton.setEnabled(true);\n    } else {\n        Boolean[] enteredZeros = {false, false};\n        int[] values = getEnteredTime(enteredZeros);\n        String hourFormat = enteredZeros[0] ? \"%02d\" : \"%2d\";\n        String minuteFormat = (enteredZeros[1]) ? \"%02d\" : \"%2d\";\n        String hourStr = (values[0] == -1) ? mDoublePlaceholderText :\n                String.format(hourFormat, values[0]).replace(' ', mPlaceholderText);\n        String minuteStr = (values[1] == -1) ? mDoublePlaceholderText :\n                String.format(minuteFormat, values[1]).replace(' ', mPlaceholderText);\n        mHourView.setText(hourStr);\n        mHourSpaceView.setText(hourStr);\n        mHourView.setSelected(false);\n        mMinuteView.setText(minuteStr);\n        mMinuteSpaceView.setText(minuteStr);\n        mMinuteView.setSelected(false);\n        if (!mIs24HourMode) {\n            updateAmPmDisplay(values[2]);\n        }\n    }\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Get the keycode value for AM and PM in the current language.\n */\n", "func_signal": "private int getAmOrPmKeyCode(int amOrPm)", "code": "{\n    // Cache the codes.\n    if (mAmKeyCode == -1 || mPmKeyCode == -1) {\n        // Find the first character in the AM/PM text that is unique.\n        KeyCharacterMap kcm = KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD);\n        char amChar;\n        char pmChar;\n        for (int i = 0; i < Math.max(mAmText.length(), mPmText.length()); i++) {\n            amChar = mAmText.toLowerCase(Locale.getDefault()).charAt(i);\n            pmChar = mPmText.toLowerCase(Locale.getDefault()).charAt(i);\n            if (amChar != pmChar) {\n                KeyEvent[] events = kcm.getEvents(new char[]{amChar, pmChar});\n                // There should be 4 events: a down and up for both AM and PM.\n                if (events != null && events.length == 4) {\n                    mAmKeyCode = events[0].getKeyCode();\n                    mPmKeyCode = events[2].getKeyCode();\n                } else {\n                    Log.e(TAG, \"Unable to find keycodes for AM and PM.\");\n                }\n                break;\n            }\n        }\n    }\n    if (amOrPm == AM) {\n        return mAmKeyCode;\n    } else if (amOrPm == PM) {\n        return mPmKeyCode;\n    }\n\n    return -1;\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Try to start keyboard mode with the specified key, as long as the timepicker is not in the\n * middle of a touch-event.\n *\n * @param keyCode The key to use as the first press. Keyboard mode will not be started if the\n *                key is not legal to start with. Or, pass in -1 to get into keyboard mode without a starting\n *                key.\n */\n", "func_signal": "private void tryStartingKbMode(int keyCode)", "code": "{\n    if (mTimePicker.trySettingInputEnabled(false) &&\n            (keyCode == -1 || addKeyIfLegal(keyCode))) {\n        mInKbMode = true;\n        mDoneButton.setEnabled(false);\n        updateDisplay(false);\n    }\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Used by the animation to move the numbers in and out.\n */\n", "func_signal": "public void setAnimationRadiusMultiplier(float animationRadiusMultiplier)", "code": "{\n    mAnimationRadiusMultiplier = animationRadiusMultiplier;\n    mTextGridValuesDirty = true;\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/RadialTextsView.java", "commit_date": "2014-04-05 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Do not override this method. Use {@link #onPreInit(Holo, Bundle)} and\n * {@link #onPostInit(Holo, Bundle)}\n */\n", "func_signal": "protected void onInit(Holo config, Bundle savedInstanceState)", "code": "{\n    if (mInited) {\n        throw new IllegalStateException(\"This instance was already inited\");\n    }\n    mInited = true;\n    if (config == null) {\n        config = createConfig(savedInstanceState);\n    }\n    if (config == null) {\n        config = Holo.defaultConfig();\n    }\n    onPreInit(config, savedInstanceState);\n    if (!config.ignoreApplicationInstanceCheck && !(getApplication() instanceof Application)) {\n        boolean throwError = true;\n        if (config.allowMockApplicationInstance) {\n            try {\n                throwError = !(getApplication() instanceof MockApplication);\n                if (!throwError) {\n                    Log.w(\"HoloEverywhere\", \"Application instance is MockApplication. Wow. Let's begin tests...\");\n                }\n            } catch (Exception e) {\n            }\n        }\n        if (throwError) {\n            String text = \"Application instance isn't HoloEverywhere.\\n\";\n            if (getApplication().getClass() == android.app.Application.class) {\n                text += \"Put attr 'android:name=\\\"org.holoeverywhere.app.Application\\\"'\" +\n                        \" in <application> tag of AndroidManifest.xml\";\n            } else {\n                text += \"Please sure that you extend \" + getApplication().getClass() +\n                        \" from a org.holoeverywhere.app.Application\";\n            }\n            throw new IllegalStateException(text);\n        }\n    }\n    getLayoutInflater().setFragmentActivity(this);\n    if (this instanceof Activity) {\n        final Activity activity = (Activity) this;\n        ThemeManager.applyTheme(activity, mLastThemeResourceId == 0);\n        if (!config.ignoreThemeCheck && ThemeManager.getThemeType(this) == ThemeManager.INVALID) {\n            throw new HoloThemeException(activity);\n        }\n        TypedArray a = obtainStyledAttributes(new int[]{android.R.attr.windowActionBarOverlay, R.attr.windowActionBarOverlay});\n        if (a.getBoolean(0, false) || a.getBoolean(1, false)) {\n            supportRequestWindowFeature(Window.FEATURE_ACTION_BAR_OVERLAY);\n        }\n        a.recycle();\n        a = obtainStyledAttributes(new int[]{android.R.attr.windowActionModeOverlay, R.attr.windowActionBarOverlay});\n        if (a.getBoolean(0, false) || a.getBoolean(1, false)) {\n            supportRequestWindowFeature(Window.FEATURE_ACTION_MODE_OVERLAY);\n        }\n        a.recycle();\n    }\n    onPostInit(config, savedInstanceState);\n    lockAttaching();\n}", "path": "HoloEverywhere/library/src/android/support/v4/app/_HoloActivity.java", "commit_date": "2014-02-05 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Only for system usage, don't call it!\n */\n", "func_signal": "public final void attach(T object, IAddon parent)", "code": "{\n    if (mObject != null || object == null || mParent != null || parent == null) {\n        throw new IllegalStateException();\n    }\n    mParent = parent;\n    onAttach(mObject = object);\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/addon/IAddonBase.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Create a tree for deciding what keys can legally be typed.\n */\n", "func_signal": "private void generateLegalTimesTree()", "code": "{\n    // Create a quick cache of numbers to their keycodes.\n    int k0 = KeyEvent.KEYCODE_0;\n    int k1 = KeyEvent.KEYCODE_1;\n    int k2 = KeyEvent.KEYCODE_2;\n    int k3 = KeyEvent.KEYCODE_3;\n    int k4 = KeyEvent.KEYCODE_4;\n    int k5 = KeyEvent.KEYCODE_5;\n    int k6 = KeyEvent.KEYCODE_6;\n    int k7 = KeyEvent.KEYCODE_7;\n    int k8 = KeyEvent.KEYCODE_8;\n    int k9 = KeyEvent.KEYCODE_9;\n\n    // The root of the tree doesn't contain any numbers.\n    mLegalTimesTree = new Node();\n    if (mIs24HourMode) {\n        // We'll be re-using these nodes, so we'll save them.\n        Node minuteFirstDigit = new Node(k0, k1, k2, k3, k4, k5);\n        Node minuteSecondDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        // The first digit must be followed by the second digit.\n        minuteFirstDigit.addChild(minuteSecondDigit);\n\n        // The first digit may be 0-1.\n        Node firstDigit = new Node(k0, k1);\n        mLegalTimesTree.addChild(firstDigit);\n\n        // When the first digit is 0-1, the second digit may be 0-5.\n        Node secondDigit = new Node(k0, k1, k2, k3, k4, k5);\n        firstDigit.addChild(secondDigit);\n        // We may now be followed by the first minute digit. E.g. 00:09, 15:58.\n        secondDigit.addChild(minuteFirstDigit);\n\n        // When the first digit is 0-1, and the second digit is 0-5, the third digit may be 6-9.\n        Node thirdDigit = new Node(k6, k7, k8, k9);\n        // The time must now be finished. E.g. 0:55, 1:08.\n        secondDigit.addChild(thirdDigit);\n\n        // When the first digit is 0-1, the second digit may be 6-9.\n        secondDigit = new Node(k6, k7, k8, k9);\n        firstDigit.addChild(secondDigit);\n        // We must now be followed by the first minute digit. E.g. 06:50, 18:20.\n        secondDigit.addChild(minuteFirstDigit);\n\n        // The first digit may be 2.\n        firstDigit = new Node(k2);\n        mLegalTimesTree.addChild(firstDigit);\n\n        // When the first digit is 2, the second digit may be 0-3.\n        secondDigit = new Node(k0, k1, k2, k3);\n        firstDigit.addChild(secondDigit);\n        // We must now be followed by the first minute digit. E.g. 20:50, 23:09.\n        secondDigit.addChild(minuteFirstDigit);\n\n        // When the first digit is 2, the second digit may be 4-5.\n        secondDigit = new Node(k4, k5);\n        firstDigit.addChild(secondDigit);\n        // We must now be followd by the last minute digit. E.g. 2:40, 2:53.\n        secondDigit.addChild(minuteSecondDigit);\n\n        // The first digit may be 3-9.\n        firstDigit = new Node(k3, k4, k5, k6, k7, k8, k9);\n        mLegalTimesTree.addChild(firstDigit);\n        // We must now be followed by the first minute digit. E.g. 3:57, 8:12.\n        firstDigit.addChild(minuteFirstDigit);\n    } else {\n        // We'll need to use the AM/PM node a lot.\n        // Set up AM and PM to respond to \"a\" and \"p\".\n        Node ampm = new Node(getAmOrPmKeyCode(AM), getAmOrPmKeyCode(PM));\n\n        // The first hour digit may be 1.\n        Node firstDigit = new Node(k1);\n        mLegalTimesTree.addChild(firstDigit);\n        // We'll allow quick input of on-the-hour times. E.g. 1pm.\n        firstDigit.addChild(ampm);\n\n        // When the first digit is 1, the second digit may be 0-2.\n        Node secondDigit = new Node(k0, k1, k2);\n        firstDigit.addChild(secondDigit);\n        // Also for quick input of on-the-hour times. E.g. 10pm, 12am.\n        secondDigit.addChild(ampm);\n\n        // When the first digit is 1, and the second digit is 0-2, the third digit may be 0-5.\n        Node thirdDigit = new Node(k0, k1, k2, k3, k4, k5);\n        secondDigit.addChild(thirdDigit);\n        // The time may be finished now. E.g. 1:02pm, 1:25am.\n        thirdDigit.addChild(ampm);\n\n        // When the first digit is 1, the second digit is 0-2, and the third digit is 0-5,\n        // the fourth digit may be 0-9.\n        Node fourthDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        thirdDigit.addChild(fourthDigit);\n        // The time must be finished now. E.g. 10:49am, 12:40pm.\n        fourthDigit.addChild(ampm);\n\n        // When the first digit is 1, and the second digit is 0-2, the third digit may be 6-9.\n        thirdDigit = new Node(k6, k7, k8, k9);\n        secondDigit.addChild(thirdDigit);\n        // The time must be finished now. E.g. 1:08am, 1:26pm.\n        thirdDigit.addChild(ampm);\n\n        // When the first digit is 1, the second digit may be 3-5.\n        secondDigit = new Node(k3, k4, k5);\n        firstDigit.addChild(secondDigit);\n\n        // When the first digit is 1, and the second digit is 3-5, the third digit may be 0-9.\n        thirdDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        secondDigit.addChild(thirdDigit);\n        // The time must be finished now. E.g. 1:39am, 1:50pm.\n        thirdDigit.addChild(ampm);\n\n        // The hour digit may be 2-9.\n        firstDigit = new Node(k2, k3, k4, k5, k6, k7, k8, k9);\n        mLegalTimesTree.addChild(firstDigit);\n        // We'll allow quick input of on-the-hour-times. E.g. 2am, 5pm.\n        firstDigit.addChild(ampm);\n\n        // When the first digit is 2-9, the second digit may be 0-5.\n        secondDigit = new Node(k0, k1, k2, k3, k4, k5);\n        firstDigit.addChild(secondDigit);\n\n        // When the first digit is 2-9, and the second digit is 0-5, the third digit may be 0-9.\n        thirdDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        secondDigit.addChild(thirdDigit);\n        // The time must be finished now. E.g. 2:57am, 9:30pm.\n        thirdDigit.addChild(ampm);\n    }\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Render the animations for appearing and disappearing.\n */\n", "func_signal": "private void renderAnimations()", "code": "{\n    Keyframe kf0, kf1;\n\n    // Set up animator for disappearing.\n    kf0 = Keyframe.ofFloat(0f, 1f);\n    kf1 = Keyframe.ofFloat(1f, 0.8f);\n    PropertyValuesHolder radius = PropertyValuesHolder.ofKeyframe(\n            \"animationRadiusMultiplier\", kf0, kf1);\n\n    kf0 = Keyframe.ofFloat(0f, 1f);\n    kf1 = Keyframe.ofFloat(1f, 0f);\n    PropertyValuesHolder fade = PropertyValuesHolder.ofKeyframe(\"alpha\", kf0, kf1);\n\n    kf0 = Keyframe.ofFloat(0f, 0f);\n    kf1 = Keyframe.ofFloat(1f, 70f);\n    PropertyValuesHolder rotation = PropertyValuesHolder.ofKeyframe(\"rotation\", kf0, kf1);\n\n    mDisappearAnimator = ObjectAnimator.ofPropertyValuesHolder(\n            this, radius, fade, rotation).setDuration(300);\n    mDisappearAnimator.addUpdateListener(mInvalidateUpdateListener);\n\n\n    // Set up animator for reappearing.\n    kf0 = Keyframe.ofFloat(0f, 0.8f);\n    kf1 = Keyframe.ofFloat(1f, 1f);\n    radius = PropertyValuesHolder.ofKeyframe(\n            \"animationRadiusMultiplier\", kf0, kf1);\n\n    kf0 = Keyframe.ofFloat(0f, 0f);\n    kf1 = Keyframe.ofFloat(1f, 1f);\n    fade = PropertyValuesHolder.ofKeyframe(\"alpha\", kf0, kf1);\n\n    kf0 = Keyframe.ofFloat(0f, -70f);\n    kf1 = Keyframe.ofFloat(1f, 0f);\n    rotation = PropertyValuesHolder.ofKeyframe(\"rotation\", kf0, kf1);\n\n    mReappearAnimator = ObjectAnimator.ofPropertyValuesHolder(\n            this, radius, fade, rotation).setDuration(300);\n    mReappearAnimator.addUpdateListener(mInvalidateUpdateListener);\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/RadialTextsView.java", "commit_date": "2014-04-05 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "// Show either Hours or Minutes.\n", "func_signal": "private void setCurrentItemShowing(int index, boolean animateCircle, boolean delayLabelAnimate,\n                                   boolean announce)", "code": "{\n    mTimePicker.setCurrentItemShowing(index, animateCircle);\n\n    TextView labelToAnimate;\n    if (index == HOUR_INDEX) {\n        int hours = mTimePicker.getHours();\n        if (!mIs24HourMode) {\n            hours = hours % 12;\n        }\n        mTimePicker.setContentDescription(mHourPickerDescription + \": \" + hours);\n        if (announce) {\n            DateTimePickerUtils.tryAccessibilityAnnounce(mTimePicker, mSelectHours);\n        }\n        labelToAnimate = mHourView;\n    } else {\n        int minutes = mTimePicker.getMinutes();\n        mTimePicker.setContentDescription(mMinutePickerDescription + \": \" + minutes);\n        if (announce) {\n            DateTimePickerUtils.tryAccessibilityAnnounce(mTimePicker, mSelectMinutes);\n        }\n        labelToAnimate = mMinuteView;\n    }\n\n    mHourView.setSelected(index == HOUR_INDEX);\n    mMinuteView.setSelected(index == MINUTE_INDEX);\n\n    ObjectAnimator pulseAnimator = DateTimePickerUtils.getPulseAnimator(labelToAnimate, 0.85f, 1.1f);\n    if (delayLabelAnimate) {\n        pulseAnimator.setStartDelay(PULSE_ANIMATOR_DELAY);\n    }\n    pulseAnimator.start();\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Called when the user clicks on a day. Handles callbacks to the\n * {@link OnDayClickListener} if one is set.\n *\n * @param day A time object representing the day that was clicked\n */\n", "func_signal": "private void onDayClick(CalendarDay day)", "code": "{\n    if (mOnDayClickListener != null) {\n        mOnDayClickListener.onDayClick(this, day);\n    }\n\n    // This is a no-op if accessibility is turned off.\n    mNodeProvider.sendEventForItem(day, AccessibilityEvent.TYPE_VIEW_CLICKED);\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/date/SimpleMonthView.java", "commit_date": "2013-11-09 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Sets up the text and style properties for painting. Override this if you\n * want to use a different paint.\n */\n", "func_signal": "protected void initView()", "code": "{\n\n    mMonthTitlePaint = new Paint();\n    mMonthTitlePaint.setFakeBoldText(true);\n    mMonthTitlePaint.setAntiAlias(true);\n    mMonthTitlePaint.setTextSize(MONTH_LABEL_TEXT_SIZE);\n    mMonthTitlePaint.setTypeface(FontLoader.ROBOTO_BOLD.getTypeface(getContext()));\n    mMonthTitlePaint.setColor(mMonthTitleColor);\n    mMonthTitlePaint.setTextAlign(Align.CENTER);\n    mMonthTitlePaint.setStyle(Style.FILL);\n\n    mSelectedCirclePaint = new Paint();\n    mSelectedCirclePaint.setFakeBoldText(true);\n    mSelectedCirclePaint.setAntiAlias(true);\n    mSelectedCirclePaint.setColor(mSelectedCircleColor);\n    mSelectedCirclePaint.setTextAlign(Align.CENTER);\n    mSelectedCirclePaint.setStyle(Style.FILL);\n    mSelectedCirclePaint.setAlpha(SELECTED_CIRCLE_ALPHA);\n\n    mMonthDayLabelPaint = new Paint();\n    mMonthDayLabelPaint.setAntiAlias(true);\n    mMonthDayLabelPaint.setTextSize(MONTH_DAY_LABEL_TEXT_SIZE);\n    mMonthDayLabelPaint.setColor(mDayTextColor);\n    mMonthDayLabelPaint.setTypeface(FontLoader.ROBOTO_REGULAR.getTypeface(getContext()));\n    mMonthDayLabelPaint.setStyle(Style.FILL);\n    mMonthDayLabelPaint.setTextAlign(Align.CENTER);\n    mMonthDayLabelPaint.setFakeBoldText(true);\n\n    mMonthNumPaint = new Paint();\n    mMonthNumPaint.setAntiAlias(true);\n    mMonthNumPaint.setTextSize(MINI_DAY_NUMBER_TEXT_SIZE);\n    mMonthNumPaint.setStyle(Style.FILL);\n    mMonthNumPaint.setTextAlign(Align.CENTER);\n    mMonthNumPaint.setFakeBoldText(false);\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/date/SimpleMonthView.java", "commit_date": "2013-11-09 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Generates a description for a given time object. Since this\n * description will be spoken, the components are ordered by descending\n * specificity as DAY MONTH YEAR.\n *\n * @param item The time object to generate a description for\n * @return A description of the time object\n */\n", "func_signal": "private CharSequence getItemDescription(CalendarDay item)", "code": "{\n    if (recycle == null) {\n        recycle = Calendar.getInstance();\n    }\n    recycle.set(item.year, item.month, item.day);\n    CharSequence date = DateFormat.format(\"dd MMMM yyyy\", recycle.getTimeInMillis());\n\n    if (item.day == mSelectedDay) {\n        return getContext().getString(R.string.item_is_selected, date);\n    }\n\n    return date;\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/date/SimpleMonthView.java", "commit_date": "2013-11-09 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Traverse the tree to see if the keys that have been typed so far are legal as is,\n * or may become legal as more keys are typed (excluding backspace).\n */\n", "func_signal": "private boolean isTypedTimeLegalSoFar()", "code": "{\n    Node node = mLegalTimesTree;\n    for (int keyCode : mTypedTimes) {\n        node = node.canReach(keyCode);\n        if (node == null) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/time/TimePickerDialog.java", "commit_date": "2013-11-06 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Sets all the parameters for displaying this week. The only required\n * parameter is the week number. Other parameters have a default value and\n * will only update if a new value is included, except for focus month,\n * which will always default to no focus month if no value is passed in. See\n * {@link #VIEW_PARAMS_HEIGHT} for more info on parameters.\n *\n * @param params A map of the new parameters, see\n *               {@link #VIEW_PARAMS_HEIGHT}\n */\n", "func_signal": "public void setMonthParams(HashMap<String, Integer> params)", "code": "{\n    if (!params.containsKey(VIEW_PARAMS_MONTH) && !params.containsKey(VIEW_PARAMS_YEAR)) {\n        throw new InvalidParameterException(\"You must specify the month and year for this view\");\n    }\n    setTag(params);\n    // We keep the current value for any params not present\n    if (params.containsKey(VIEW_PARAMS_HEIGHT)) {\n        mRowHeight = params.get(VIEW_PARAMS_HEIGHT);\n        if (mRowHeight < MIN_HEIGHT) {\n            mRowHeight = MIN_HEIGHT;\n        }\n    }\n    if (params.containsKey(VIEW_PARAMS_SELECTED_DAY)) {\n        mSelectedDay = params.get(VIEW_PARAMS_SELECTED_DAY);\n    }\n\n    // Allocate space for caching the day numbers and focus values\n    mMonth = params.get(VIEW_PARAMS_MONTH);\n    mYear = params.get(VIEW_PARAMS_YEAR);\n\n    // Figure out what day today is\n    final Time today = new Time(Time.getCurrentTimezone());\n    today.setToNow();\n    mHasToday = false;\n    mToday = -1;\n\n    mCalendar.set(Calendar.MONTH, mMonth);\n    mCalendar.set(Calendar.YEAR, mYear);\n    mCalendar.set(Calendar.DAY_OF_MONTH, 1);\n    mDayOfWeekStart = mCalendar.get(Calendar.DAY_OF_WEEK);\n\n    if (params.containsKey(VIEW_PARAMS_WEEK_START)) {\n        mWeekStart = params.get(VIEW_PARAMS_WEEK_START);\n    } else {\n        mWeekStart = mCalendar.getFirstDayOfWeek();\n    }\n\n    mNumCells = DateTimePickerUtils.getDaysInMonth(mMonth, mYear);\n    for (int i = 0; i < mNumCells; i++) {\n        final int day = i + 1;\n        if (sameDay(day, today)) {\n            mHasToday = true;\n            mToday = day;\n        }\n    }\n    mNumRows = calculateNumRows();\n\n    // Invalidate cached accessibility information.\n    mNodeProvider.invalidateParent();\n}", "path": "HoloEverywhere/library/src/org/holoeverywhere/widget/datetimepicker/date/SimpleMonthView.java", "commit_date": "2013-11-09 00:00:00", "repo_name": "Prototik/HoloEverywhere", "stars": 2176, "license": "mit", "language": "java", "size": 25505}
{"docstring": "/**\n * Tokenizes a {@code CharSequence} into a list of Strings.\n *\n * @param input text to be tokenized\n * @return a list of tokens as String objects\n */\n", "func_signal": "public List<String> tokenizeToStrings(CharSequence input)", "code": "{\n  Preconditions.checkNotNull(input);\n  TwitterTokenStream tokenizer = getDefaultTokenStream();\n  tokenizer.reset(input);\n  return tokenizer.toStringList();\n}", "path": "commons/src/java/com/twitter/common/text/TextTokenizer.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Reset the extractor. User reset(CharSequence input) to update InputCharSequence attribute.\n */\n", "func_signal": "public void reset()", "code": "{\n  CharSequence input = inputCharSequence();\n  Preconditions.checkNotNull(input);\n  updateInputCharSequence(input);\n  clearAttributes();\n\n  if (triggeringChar > 0) {\n    // triggeringChar is specified.\n    boolean foundTriggeringChar = false;\n    for (int i = 0; i < input.length(); i++) {\n      if (triggeringChar == input.charAt(i)) {\n        foundTriggeringChar = true;\n        break;\n      }\n    }\n    if (!foundTriggeringChar) {\n      // No triggering char found. No extraction performed.\n      matcher = null;\n      return;\n    }\n  }\n\n  if (regexPattern != null) {\n    matcher = regexPattern.matcher(input);\n  }\n}", "path": "commons/src/java/com/twitter/common/text/extractor/RegexExtractor.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Construct a Histogram with default arguments except name and precision.\n * @see #Histogram(String, Amount, int, Amount, Precision, double[], Clock, MetricRegistry)\n */\n", "func_signal": "public Histogram(String name, Precision precision)", "code": "{\n  this(name, DEFAULT_WINDOW, DEFAULT_SLICES,\n      null, precision,\n      DEFAULT_QUANTILES,\n      Clock.SYSTEM_CLOCK,\n      null);\n}", "path": "commons/src/java/com/twitter/common/metrics/Histogram.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Construct a Histogram with default arguments except name and maxMemory.\n * @see #Histogram(String, Amount, int, Amount, Precision, double[], Clock, MetricRegistry)\n */\n", "func_signal": "public Histogram(String name, Amount<Long, Data> maxMemory)", "code": "{\n  this(name, DEFAULT_WINDOW, DEFAULT_SLICES,\n      maxMemory, null,\n      DEFAULT_QUANTILES,\n      Clock.SYSTEM_CLOCK,\n      null);\n}", "path": "commons/src/java/com/twitter/common/metrics/Histogram.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Creates a new static asset.\n *\n * @param inputSupplier Supplier of the input stream from which to load the asset.\n * @param contentType HTTP content type of the asset.\n * @param cacheLocally If {@code true} the asset will be loaded once and stored in memory, if\n *    {@code false} it will be loaded on each request.\n */\n", "func_signal": "public StaticAsset(InputSupplier<? extends InputStream> inputSupplier,\n    String contentType, boolean cacheLocally)", "code": "{\n  this.inputSupplier = checkNotNull(inputSupplier);\n  this.contentType = checkNotNull(contentType);\n  this.cacheLocally = cacheLocally;\n}", "path": "commons/src/java/com/twitter/common/net/http/handlers/AssetHandler.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Loads the {@literal @CmdLine} argument configuration data stored in the classpath.\n *\n * @return The {@literal @CmdLine} argument configuration materialized from the classpath.\n * @throws ConfigurationException if any configuration data is malformed.\n * @throws IOException if the configuration data can not be read from the classpath.\n */\n", "func_signal": "public static Configuration load() throws ConfigurationException, IOException", "code": "{\n  Map<String, URL> resources = getLiveResources();\n  if (resources.isEmpty()) {\n    LOG.fine(\"No @CmdLine arg resources found on the classpath\");\n  } else {\n    LOG.fine(\"Loading @CmdLine config for: \" + resources.keySet());\n  }\n  CharSource input = CharSource.concat(Iterables.transform(resources.values(), URL_TO_READER));\n  return input.readLines(new ConfigurationParser());\n}", "path": "commons/src/java/com/twitter/common/args/apt/Configuration.java", "commit_date": "2015-11-21 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Executes the given task using the configured backoff strategy until the task succeeds as\n * indicated by returning a non-null value.\n *\n * @param task the retryable task to execute until success\n * @return the result of the successfully executed task\n * @throws InterruptedException if interrupted while waiting for the task to execute successfully\n * @throws BackoffStoppedException if the backoff stopped unsuccessfully\n * @throws E if the task throws\n */\n", "func_signal": "public <T, E extends Exception> T doUntilResult(ExceptionalSupplier<T, E> task)\n    throws InterruptedException, BackoffStoppedException, E", "code": "{\n  T result = task.get(); // give an immediate try\n  return (result != null) ? result : retryWork(task);\n}", "path": "commons/src/java/com/twitter/common/util/BackoffHelper.java", "commit_date": "2013-05-06 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Creates and exports a new stat that maintains the difference between the tick time\n * and the time since it was last reset.  Upon export, the counter will act as though it were just\n * reset.\n * <br/>\n * @param name Name of stat to export\n * @param granularity Time unit granularity to export.\n * @param ticker Ticker implementation\n */\n", "func_signal": "public Elapsed(String name, final Time granularity, final Ticker ticker)", "code": "{\n MorePreconditions.checkNotBlank(name);\n Preconditions.checkNotNull(granularity);\n this.ticker = Preconditions.checkNotNull(ticker);\n\n reset();\n\n Stats.export(new StatImpl<Long>(name) {\n   @Override public Long read() {\n     return Amount.of(ticker.read() - lastEventNs.get(), Time.NANOSECONDS).as(granularity);\n   }\n });\n  }", "path": "commons/src/java/com/twitter/common/stats/Elapsed.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Construct a Histogram with default arguments except name.\n * @see #Histogram(String, Amount, int, Amount, Precision, double[], Clock, MetricRegistry)\n */\n", "func_signal": "public Histogram(String name)", "code": "{\n  this(name, DEFAULT_WINDOW, DEFAULT_SLICES,\n      DEFAULT_MAX_MEMORY, null,\n      DEFAULT_QUANTILES,\n      Clock.SYSTEM_CLOCK,\n      null);\n}", "path": "commons/src/java/com/twitter/common/metrics/Histogram.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Sets a character that must appear in the input text. If a specified character does not appear\n * in the input text, this {@code RegexExtractor} does not extract entities from the text.\n * Specifying a {@code triggeringChar} may improve the performance by skipping unnecessary pattern\n * matching.\n *\n * @param triggeringChar a character that must appear in the text\n */\n", "func_signal": "protected void setTriggeringChar(char triggeringChar)", "code": "{\n  Preconditions.checkNotNull(triggeringChar);\n  this.triggeringChar = triggeringChar;\n}", "path": "commons/src/java/com/twitter/common/text/extractor/RegexExtractor.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Executes the given task using the configured backoff strategy until the task succeeds as\n * indicated by returning {@code true}.\n *\n * @param task the retryable task to execute until success\n * @throws InterruptedException if interrupted while waiting for the task to execute successfully\n * @throws BackoffStoppedException if the backoff stopped unsuccessfully\n * @throws E if the task throws\n */\n", "func_signal": "public <E extends Exception> void doUntilSuccess(final ExceptionalSupplier<Boolean, E> task)\n    throws InterruptedException, BackoffStoppedException, E", "code": "{\n  doUntilResult(new ExceptionalSupplier<Boolean, E>() {\n    @Override public Boolean get() throws E {\n      Boolean result = task.get();\n      return Boolean.TRUE.equals(result) ? result : null;\n    }\n  });\n}", "path": "commons/src/java/com/twitter/common/util/BackoffHelper.java", "commit_date": "2013-05-06 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Tokenizes a {@code CharSequence}, and returns a {@code TokenizedCharSequence} as a result.\n *\n * @param input text to be tokenized\n * @return {@code TokenizedCharSequence} instance\n */\n", "func_signal": "public TokenizedCharSequence tokenize(CharSequence input)", "code": "{\n  Preconditions.checkNotNull(input);\n  return TokenizedCharSequence.createFrom(input, getDefaultTokenStream());\n}", "path": "commons/src/java/com/twitter/common/text/TextTokenizer.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Default constructor\n * This histogram is composed of a WindowedHistogram with a window duration of {@code window}\n * and decomposed in {@code slices} Histograms (See #WindowedHistogram for more details about\n * that).\n *\n * @param window duration of the window\n * @param slices number of slices in the window\n * @param maxMemory maximum memory used by the whole histogram (can be null if precision isn't)\n * @param precision precision of the whole histogram (can be null if maxMemory isn't)\n * @param quantiles array of quantiles that will be computed\n * @param clock clock used to store elements in the the WindowedHistogram (for testing purposes\n * only)\n */\n", "func_signal": "public Histogram(String name, Amount<Long, Time> window, int slices,\n    @Nullable Amount<Long, Data> maxMemory, @Nullable Precision precision,\n    double[] quantiles,\n    Clock clock)", "code": "{\n  this(name, window, slices,\n      maxMemory, precision,\n      quantiles,\n      clock,\n      null);\n}", "path": "commons/src/java/com/twitter/common/metrics/Histogram.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Construct a Histogram with default arguments except name.\n * @see #Histogram(String, Amount, int, Amount, Precision, double[], Clock, MetricRegistry)\n *\n * 12/11/2013: Remove this method after the next deprecation cycle.\n * @deprecated Prefer registry.createHistogram(String)\n */\n", "func_signal": "@Deprecated\npublic Histogram(String name, MetricRegistry registry)", "code": "{\n  this(name, DEFAULT_WINDOW, DEFAULT_SLICES,\n      DEFAULT_MAX_MEMORY, null,\n      DEFAULT_QUANTILES,\n      Clock.SYSTEM_CLOCK,\n      registry);\n}", "path": "commons/src/java/com/twitter/common/metrics/Histogram.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Sets the regular expression and start/end group ID used in this {@code RegexExtractor}.\n *\n * @param pattern Regex pattern of a substring to be replaced.\n * @param startGroup ID of the group in the pattern that matches the beginning\n *  of the substring being replaced. Set to 0 to match the entire pattern.\n * @param endGroup ID of the group in the pattern that matches the end\n *  of the substring being replaced. Set to 0 to match the entire pattern.\n */\n", "func_signal": "protected void setRegexPattern(Pattern pattern, int startGroup, int endGroup)", "code": "{\n  this.regexPattern = pattern;\n  this.startGroup = startGroup;\n  this.endGroup = endGroup;\n}", "path": "commons/src/java/com/twitter/common/text/extractor/RegexExtractor.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "///etc/hosts\";\n", "func_signal": "@Override\n  public String echo() throws IOException", "code": "{\n    Closer closer = Closer.create();\n    try {\n      Configuration conf = new Configuration();\n      Path p = new Path(FILENAME);\n\n      FileSystem fs = closer.register(p.getFileSystem(conf));\n      FSDataInputStream fsDataInputStream = closer.register(fs.open(p));\n      InputStreamReader inputStreamReader =\n          closer.register(new InputStreamReader(fsDataInputStream));\n      BufferedReader bufferedReader = closer.register(new BufferedReader(inputStreamReader));\n      ByteArrayOutputStream byteArrayOutputStream = closer.register(new ByteArrayOutputStream());\n      String line = bufferedReader.readLine();\n      if (line == null) {\n        throw new RuntimeException(\"Failed reading line from \" + FILENAME);\n      }\n      byteArrayOutputStream.write(line.getBytes());\n      return byteArrayOutputStream.toString();\n    } finally {\n      closer.close();\n    }\n  }", "path": "commons/src/java/com/twitter/common/examples/echo/HadoopEchoer.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Construct a Histogram.\n * This constructor only exists for backward compatibility reasons.\n * See #Histogram(String, Amount<Long, Time>, int, Amount<Long, Data>,\n *   Precision, double[], Clock)\n */\n", "func_signal": "public Histogram(String name, Amount<Long, Time> window, int slices,\n    @Nullable Amount<Long, Data> maxMemory, @Nullable Precision precision,\n    double[] quantiles,\n    Clock clock,\n    @Nullable MetricRegistry registry)", "code": "{\n  Preconditions.checkArgument(precision != null ^ maxMemory != null,\n      \"You must specify either memory or precision constraint but not both!\");\n  Preconditions.checkNotNull(window);\n  Preconditions.checkArgument(0 < slices);\n  for (double q: quantiles) {\n    Preconditions.checkArgument(0.0 <= q && q <= 1.0);\n  }\n  Preconditions.checkNotNull(clock);\n\n  this.name = MorePreconditions.checkNotBlank(name);\n  this.quantiles = Preconditions.checkNotNull(quantiles);\n  if (maxMemory != null) {\n    this.histogram = new WindowedApproxHistogram(window, slices, maxMemory, clock);\n  } else {\n    this.histogram = new WindowedApproxHistogram(window, slices, precision, clock);\n  }\n  this.stats = new WindowedStatistics(window, slices, clock);\n\n  if (registry != null) {\n    registry.registerHistogram(this);\n  }\n}", "path": "commons/src/java/com/twitter/common/metrics/Histogram.java", "commit_date": "2014-05-13 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Gets all relevant resources from our package.\n *\n * This filters classnames that actually exist, to avoid including Configuration\n * for classes that were removed.\n */\n", "func_signal": "private static ImmutableMap<String, URL> getLiveResources() throws IOException", "code": "{\n  ClassLoader classLoader = Configuration.class.getClassLoader();\n  ClassPath classPath = ClassPath.from(classLoader);\n  ImmutableMap.Builder<String, URL> resources = new ImmutableMap.Builder<String, URL>();\n  for (ClassPath.ResourceInfo resourceInfo : classPath.getResources()) {\n    String name = resourceInfo.getResourceName();\n    // Find relevant resource files.\n    if (name.startsWith(DEFAULT_RESOURCE_PREFIX) && name.endsWith(DEFAULT_RESOURCE_SUFFIX)) {\n      String className =\n        name.substring(\n            DEFAULT_RESOURCE_PREFIX.length(),\n            name.length() - DEFAULT_RESOURCE_SUFFIX.length());\n      // Include only those resources for live classes.\n      if (classExists(classLoader, className)) {\n        resources.put(className, resourceInfo.url());\n      }\n    }\n  }\n  return resources.build();\n}", "path": "commons/src/java/com/twitter/common/args/apt/Configuration.java", "commit_date": "2015-11-21 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/**\n * Attempts to join the partition group and claim a slice.  When successful, a predicate is\n * returned that can be used to test whether or not an item belongs to this partition.  The\n * predicate is dynamic such that as the group is further partitioned or partitions merge the\n * predicate will claim a narrower or wider swath of the partition space respectively.  Partition\n * creation and merging is not instantaneous and clients should expect independent partitions to\n * claim ownership of some items when partition membership is in flux.  It is only in the steady\n * state that a client should expect independent partitions to divide the partition space evenly\n * and without overlap.\n *\n * <p>TODO(John Sirois): consider adding a version with a global timeout for the join operation.\n *\n * @return the partition representing the slice of the partition group this member can claim\n * @throws JoinException if there was a problem joining the partition group\n * @throws InterruptedException if interrupted while waiting to join the partition group\n */\n", "func_signal": "public final Partition join() throws JoinException, InterruptedException", "code": "{\n  final Membership membership = group.join();\n  try {\n    group.watch(createGroupChangeListener(membership));\n  } catch (WatchException e) {\n    membership.cancel();\n    throw new JoinException(\"Problem establishing watch on group after joining it\", e);\n  }\n  return new Partition() {\n    @Override public boolean isMember(long value) {\n      return (value % groupSize) == groupIndex;\n    }\n\n    @Override public int getNumPartitions() {\n      return groupSize;\n    }\n\n    @Override public String getGroupPath() {\n      return membership.getGroupPath();\n    }\n\n    @Override public String getMemberId() {\n      return membership.getMemberId();\n    }\n\n    @Override public String getMemberPath() {\n      return membership.getMemberPath();\n    }\n\n    @Override public byte[] updateMemberData() throws UpdateException {\n      return membership.updateMemberData();\n    }\n\n    @Override public void cancel() throws JoinException {\n      membership.cancel();\n    }\n  };\n}", "path": "commons/src/java/com/twitter/common/zookeeper/Partitioner.java", "commit_date": "2012-02-16 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "/** Default constructor. **/\n", "func_signal": "public URLExtractor()", "code": "{\n  setRegexPattern(Regex.VALID_URL, Regex.VALID_URL_GROUP_URL, Regex.VALID_URL_GROUP_URL);\n  setTriggeringChar(':');\n}", "path": "commons/src/java/com/twitter/common/text/extractor/URLExtractor.java", "commit_date": "2011-07-14 00:00:00", "repo_name": "twitter-archive/commons", "stars": 2106, "license": "other", "language": "java", "size": 115523}
{"docstring": "// For CF operations that have no value:\n", "func_signal": "public static void voidr(CompletableFuture<Void> c)", "code": "{\n  try {\n    c.get(); // Returns void\n  } catch(InterruptedException\n          | ExecutionException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "OnJava8-Examples/concurrent/CompletableUtilities.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Produce a sequence [start..end)\n", "func_signal": "public static int[] range(int start, int end)", "code": "{\n  int sz = end - start;\n  int[] result = new int[sz];\n  for(int i = 0; i < sz; i++)\n    result[i] = start + i;\n  return result;\n}", "path": "OnJava8-Examples/onjava/Range.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Gauss's formula\n", "func_signal": "public static void main(String[] args)", "code": "{\n   System.out.println(CHECK);\n   timeTest(\"Sum Stream\", CHECK, () ->\n     LongStream.rangeClosed(0, SZ).sum());\n   timeTest(\"Sum Stream Parallel\", CHECK, () ->\n     LongStream.rangeClosed(0, SZ).parallel().sum());\n   timeTest(\"Sum Iterated\", CHECK, () ->\n     LongStream.iterate(0, i -> i + 1)\n       .limit(SZ+1).sum());\n   // Slower & runs out of memory above 1_000_000:\n   // timeTest(\"Sum Iterated Parallel\", CHECK, () ->\n   //   LongStream.iterate(0, i -> i + 1)\n   //     .parallel()\n   //     .limit(SZ+1).sum());\n }", "path": "OnJava8-Examples/concurrent/Summing.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Change a method:\n", "func_signal": "@Override\npublic void scrub()", "code": "{\n  append(\" Detergent.scrub()\");\n  super.scrub(); // Call base-class version\n}", "path": "OnJava8-Examples/reuse/Detergent.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Make it human-readable:\n", "func_signal": "public static void\nformat(OutputStream os, Document doc)\nthrows Exception", "code": "{\n  Serializer serializer =\n    new Serializer(os,\"ISO-8859-1\");\n  serializer.setIndent(4);\n  serializer.setMaxLength(60);\n  serializer.write(doc);\n  serializer.flush();\n}", "path": "OnJava8-Examples/serialization/APerson.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// This must be the last instance.\n", "func_signal": "@Override\n   public int amount()", "code": "{ // Disallow\n     throw new\n       RuntimeException(\"SHUT_DOWN.amount()\");\n   }", "path": "OnJava8-Examples/enums/Input.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Produce a sequence [0..n)\n", "func_signal": "public static int[] range(int n)", "code": "{\n  int[] result = new int[n];\n  for(int i = 0; i < n; i++)\n    result[i] = i;\n  return result;\n}", "path": "OnJava8-Examples/onjava/Range.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Produce an XML Element from this APerson object:\n", "func_signal": "public Element getXML()", "code": "{\n  Element person = new Element(\"person\");\n  Element firstName = new Element(\"first\");\n  firstName.appendChild(first);\n  Element lastName = new Element(\"last\");\n  lastName.appendChild(last);\n  person.appendChild(firstName);\n  person.appendChild(lastName);\n  return person;\n}", "path": "OnJava8-Examples/serialization/APerson.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Subtract subset from superset:\n", "func_signal": "public static <T> Set<T>\ndifference(Set<T> superset, Set<T> subset)", "code": "{\n  Set<T> result = new HashSet<>(superset);\n  result.removeAll(subset);\n  return result;\n}", "path": "OnJava8-Examples/onjava/Sets.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Support methods:\n", "func_signal": "private void showFullness()", "code": "{\n  assertTrue(queue.full());\n  assertFalse(queue.empty());\n  System.out.println(queue.dump());\n}", "path": "OnJava8-Examples/validating/tests/CircularQueueTest.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Value of i == number of segments\n", "func_signal": "public Worm(int i, char x)", "code": "{\n  System.out.println(\"Worm constructor: \" + i);\n  c = x;\n  if(--i > 0)\n    next = new Worm(i, (char)(x + 1));\n}", "path": "OnJava8-Examples/serialization/Worm.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Test the new class:\n", "func_signal": "public static void main(String[] args)", "code": "{\n  Detergent x = new Detergent();\n  x.dilute();\n  x.apply();\n  x.scrub();\n  x.foam();\n  System.out.println(x);\n  System.out.println(\"Testing base class:\");\n  Cleanser.main(args);\n}", "path": "OnJava8-Examples/reuse/Detergent.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Inversion only works if values are unique:\n", "func_signal": "public static <V, K> Map<V, K>\ninvert(Map<K, V> map)", "code": "{\n  return map.entrySet().stream()\n    .collect(Collectors.toMap(\n      Map.Entry::getValue,\n      Map.Entry::getKey,\n      (v1, v2) -> {\n        throw new IllegalStateException();\n      },\n      LinkedHashMap::new\n    ));\n}", "path": "OnJava8-Examples/onjava/HTMLColors.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Demonstration:\n", "func_signal": "public static void\nmain(String[] args) throws Exception", "code": "{\n  PathMatcher matcher = FileSystems.getDefault()\n    .getPathMatcher(\"glob:**/*.class\");\n  // Walk the entire tree:\n  Files.walk(Paths.get(\".\"))\n    .filter(matcher::matches)\n    .map(p -> {\n        try {\n          return thisClass(Files.readAllBytes(p));\n        } catch(Exception e) {\n          throw new RuntimeException(e);\n        }\n      })\n    .filter(s -> s.startsWith(\"public:\"))\n    // .filter(s -> s.indexOf('$') >= 0)\n    .map(s -> s.split(\":\")[1])\n    .filter(s -> !s.startsWith(\"enums.\"))\n    .filter(s -> s.contains(\".\"))\n    .forEach(System.out::println);\n}", "path": "OnJava8-Examples/onjava/atunit/ClassNameFinder.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Constructor restores a APerson from XML:\n", "func_signal": "public APerson(Element person)", "code": "{\n  first = person\n    .getFirstChildElement(\"first\").getValue();\n  last = person\n    .getFirstChildElement(\"last\").getValue();\n}", "path": "OnJava8-Examples/serialization/APerson.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Get and show value stored in a CF:\n", "func_signal": "public static void showr(CompletableFuture<?> c)", "code": "{\n  try {\n    System.out.println(c.get());\n  } catch(InterruptedException\n          | ExecutionException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "OnJava8-Examples/concurrent/CompletableUtilities.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Value of i == number of segments\n", "func_signal": "public Snake(int i, char x)", "code": "{\n  c = x;\n  if(--i > 0)\n    next = new Snake(i, (char)(x + 1));\n}", "path": "OnJava8-Examples/references/Snake.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Produce sequence [start..end) incrementing by step\n", "func_signal": "public static\nint[] range(int start, int end, int step)", "code": "{\n  int sz = (end - start)/step;\n  int[] result = new int[sz];\n  for(int i = 0; i < sz; i++)\n    result[i] = start + (i * step);\n  return result;\n}", "path": "OnJava8-Examples/onjava/Range.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Template method:\n", "func_signal": "protected final void runAll()", "code": "{\n  while(changeState()) // Customizable\n    currentState.run();\n}", "path": "OnJava8-Examples/patterns/state/StateMachineDemo.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "// Argument must be final or \"effectively final\"\n// to use within the anonymous inner class:\n", "func_signal": "public Destination destination(final String dest)", "code": "{\n  return new Destination() {\n    private String label = dest;\n    @Override\n    public String readLabel() { return label; }\n  };\n}", "path": "OnJava8-Examples/innerclasses/Parcel9.java", "commit_date": "2020-10-07 00:00:00", "repo_name": "BruceEckel/OnJava8-Examples", "stars": 2972, "license": "other", "language": "java", "size": 10935}
{"docstring": "/**\n * Start a fake drag of the pager.\n *\n * <p>A fake drag can be useful if you want to synchronize the motion of the ViewPager\n * with the touch scrolling of another view, while still letting the ViewPager\n * control the snapping motion and fling behavior. (e.g. parallax-scrolling tabs.)\n * Call {@link #fakeDragBy(float)} to simulate the actual drag motion. Call\n * {@link #endFakeDrag()} to complete the fake drag and fling as necessary.\n *\n * <p>During a fake drag the ViewPager will ignore all touch events. If a real drag\n * is already in progress, this method will return false.\n *\n * @return true if the fake drag began successfully, false if it could not be started.\n *\n * @see #fakeDragBy(float)\n * @see #endFakeDrag()\n */\n", "func_signal": "public boolean beginFakeDrag()", "code": "{\n    if (mIsBeingDragged) {\n        return false;\n    }\n    mFakeDragging = true;\n    setScrollState(SCROLL_STATE_DRAGGING);\n    mInitialMotionX = mLastMotionX = 0;\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    } else {\n        mVelocityTracker.clear();\n    }\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n    mFakeDragBeginTime = time;\n    return true;\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Remove a listener that was previously added via\n * {@link #addOnPageChangeListener(OnPageChangeListener)}.\n *\n * @param listener listener to remove\n */\n", "func_signal": "public void removeOnPageChangeListener(OnPageChangeListener listener)", "code": "{\n    if (mOnPageChangeListeners != null) {\n        mOnPageChangeListeners.remove(listener);\n    }\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Remove all listeners that are notified of any changes in scroll state or position.\n */\n", "func_signal": "public void clearOnPageChangeListeners()", "code": "{\n    if (mOnPageChangeListeners != null) {\n        mOnPageChangeListeners.clear();\n    }\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * We only want the current page that is being shown to be focusable.\n */\n", "func_signal": "@Override\npublic void addFocusables(ArrayList<View> views, int direction, int focusableMode)", "code": "{\n    final int focusableCount = views.size();\n\n    final int descendantFocusability = getDescendantFocusability();\n\n    if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {\n        for (int i = 0; i < getChildCount(); i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() == VISIBLE) {\n                ItemInfo ii = infoForChild(child);\n                if (ii != null && ii.position == mCurItem) {\n                    child.addFocusables(views, direction, focusableMode);\n                }\n            }\n        }\n    }\n\n    // we add ourselves (if focusable) in all cases except for when we are\n    // FOCUS_AFTER_DESCENDANTS and there are some descendants focusable.  this is\n    // to avoid the focus search finding layouts when a more precise search\n    // among the focusable children would be more interesting.\n    if (descendantFocusability != FOCUS_AFTER_DESCENDANTS\n            || (focusableCount == views.size())) { // No focusable descendants\n        // Note that we can't call the superclass here, because it will\n        // add all views in.  So we need to do the same thing View does.\n        if (!isFocusable()) {\n            return;\n        }\n        if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE\n                && isInTouchMode() && !isFocusableInTouchMode()) {\n            return;\n        }\n        if (views != null) {\n            views.add(this);\n        }\n    }\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Set a drawable that will be used to fill the margin between pages.\n *\n * @param d Drawable to display between pages\n */\n", "func_signal": "public void setPageMarginDrawable(Drawable d)", "code": "{\n    mMarginDrawable = d;\n    if (d != null) refreshDrawableState();\n    setWillNotDraw(d == null);\n    invalidate();\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * This method will be invoked when the current page is scrolled, either as part\n * of a programmatically initiated smooth scroll or a user initiated touch scroll.\n * If you override this method you must call through to the superclass implementation\n * (e.g. super.onPageScrolled(position, offset, offsetPixels)) before onPageScrolled\n * returns.\n *\n * @param position Position index of the first page currently being displayed.\n *                 Page position+1 will be visible if positionOffset is nonzero.\n * @param offset Value from [0, 1) indicating the offset from the page at position.\n * @param offsetPixels Value in pixels indicating the offset from position.\n */\n", "func_signal": "@CallSuper\nprotected void onPageScrolled(int position, float offset, int offsetPixels)", "code": "{\n    // Offset any decor views if needed - keep them on-screen at all times.\n    if (mDecorChildCount > 0) {\n        final int scrollX = getScrollX();\n        int paddingLeft = getPaddingLeft();\n        int paddingRight = getPaddingRight();\n        final int width = getWidth();\n        final int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = getChildAt(i);\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n            if (!lp.isDecor) continue;\n\n            final int hgrav = lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;\n            int childLeft = 0;\n            switch (hgrav) {\n                default:\n                    childLeft = paddingLeft;\n                    break;\n                case Gravity.LEFT:\n                    childLeft = paddingLeft;\n                    paddingLeft += child.getWidth();\n                    break;\n                case Gravity.CENTER_HORIZONTAL:\n                    childLeft = Math.max((width - child.getMeasuredWidth()) / 2,\n                            paddingLeft);\n                    break;\n                case Gravity.RIGHT:\n                    childLeft = width - paddingRight - child.getMeasuredWidth();\n                    paddingRight += child.getMeasuredWidth();\n                    break;\n            }\n            childLeft += scrollX;\n\n            final int childOffset = childLeft - child.getLeft();\n            if (childOffset != 0) {\n                child.offsetLeftAndRight(childOffset);\n            }\n        }\n    }\n\n    dispatchOnPageScrolled(position, offset, offsetPixels);\n\n    if (mPageTransformer != null) {\n        final int scrollX = getScrollX();\n        final int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = getChildAt(i);\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n            if (lp.isDecor) continue;\n            final float transformPos = (float) (child.getLeft() - scrollX) / getClientWidth();\n            mPageTransformer.transformPage(child, transformPos);\n        }\n    }\n\n    mCalledSuper = true;\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Set the number of pages that should be retained to either side of the\n * current page in the view hierarchy in an idle state. Pages beyond this\n * limit will be recreated from the adapter when needed.\n *\n * <p>This is offered as an optimization. If you know in advance the number\n * of pages you will need to support or have lazy-loading mechanisms in place\n * on your pages, tweaking this setting can have benefits in perceived smoothness\n * of paging animations and interaction. If you have a small number of pages (3-4)\n * that you can keep active all at once, less time will be spent in layout for\n * newly created view subtrees as the user pages back and forth.</p>\n *\n * <p>You should keep this limit low, especially if your pages have complex layouts.\n * This setting defaults to 1.</p>\n *\n * @param limit How many pages will be kept offscreen in an idle state.\n */\n", "func_signal": "public void setOffscreenPageLimit(int limit)", "code": "{\n    if (limit < DEFAULT_OFFSCREEN_PAGES) {\n        Log.w(TAG, \"Requested offscreen page limit \" + limit + \" too small; defaulting to \"\n                + DEFAULT_OFFSCREEN_PAGES);\n        limit = DEFAULT_OFFSCREEN_PAGES;\n    }\n    if (limit != mOffscreenPageLimit) {\n        mOffscreenPageLimit = limit;\n        populate();\n    }\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Handle scrolling in response to a left or right arrow click.\n *\n * @param direction The direction corresponding to the arrow key that was pressed. It should be\n *                  either {@link View#FOCUS_LEFT} or {@link View#FOCUS_RIGHT}.\n * @return Whether the scrolling was handled successfully.\n */\n", "func_signal": "public boolean arrowScroll(int direction)", "code": "{\n    View currentFocused = findFocus();\n    if (currentFocused == this) {\n        currentFocused = null;\n    } else if (currentFocused != null) {\n        boolean isChild = false;\n        for (ViewParent parent = currentFocused.getParent(); parent instanceof ViewGroup;\n             parent = parent.getParent()) {\n            if (parent == this) {\n                isChild = true;\n                break;\n            }\n        }\n        if (!isChild) {\n            // This would cause the focus search down below to fail in fun ways.\n            final StringBuilder sb = new StringBuilder();\n            sb.append(currentFocused.getClass().getSimpleName());\n            for (ViewParent parent = currentFocused.getParent(); parent instanceof ViewGroup;\n                 parent = parent.getParent()) {\n                sb.append(\" => \").append(parent.getClass().getSimpleName());\n            }\n            Log.e(TAG, \"arrowScroll tried to find focus based on non-child \"\n                    + \"current focused view \" + sb.toString());\n            currentFocused = null;\n        }\n    }\n\n    boolean handled = false;\n\n    View nextFocused = FocusFinder.getInstance().findNextFocus(this, currentFocused,\n            direction);\n    if (nextFocused != null && nextFocused != currentFocused) {\n        if (direction == View.FOCUS_LEFT) {\n            // If there is nothing to the left, or this is causing us to\n            // jump to the right, then what we really want to do is page left.\n            final int nextLeft = getChildRectInPagerCoordinates(mTempRect, nextFocused).left;\n            final int currLeft = getChildRectInPagerCoordinates(mTempRect, currentFocused).left;\n            if (currentFocused != null && nextLeft >= currLeft) {\n                handled = pageLeft();\n            } else {\n                handled = nextFocused.requestFocus();\n            }\n        } else if (direction == View.FOCUS_RIGHT) {\n            // If there is nothing to the right, or this is causing us to\n            // jump to the left, then what we really want to do is page right.\n            final int nextLeft = getChildRectInPagerCoordinates(mTempRect, nextFocused).left;\n            final int currLeft = getChildRectInPagerCoordinates(mTempRect, currentFocused).left;\n            if (currentFocused != null && nextLeft <= currLeft) {\n                handled = pageRight();\n            } else {\n                handled = nextFocused.requestFocus();\n            }\n        }\n    } else if (direction == FOCUS_LEFT || direction == FOCUS_BACKWARD) {\n        // Trying to move left and nothing there; try to page.\n        handled = pageLeft();\n    } else if (direction == FOCUS_RIGHT || direction == FOCUS_FORWARD) {\n        // Trying to move right and nothing there; try to page.\n        handled = pageRight();\n    }\n    if (handled) {\n        playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));\n    }\n    return handled;\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Check if this ViewPager can be scrolled horizontally in a certain direction.\n *\n * @param direction Negative to check scrolling left, positive to check scrolling right.\n * @return Whether this ViewPager can be scrolled in the specified direction. It will always\n *         return false if the specified direction is 0.\n */\n", "func_signal": "public boolean canScrollHorizontally(int direction)", "code": "{\n    if (mAdapter == null) {\n        return false;\n    }\n\n    final int width = getClientWidth();\n    final int scrollX = getScrollX();\n    if (direction < 0) {\n        return (scrollX > (int) (width * mFirstOffset));\n    } else if (direction > 0) {\n        return (scrollX < (int) (width * mLastOffset));\n    } else {\n        return false;\n    }\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Set the margin between pages.\n *\n * @param marginPixels Distance between adjacent pages in pixels\n * @see #getPageMargin()\n * @see #setPageMarginDrawable(Drawable)\n * @see #setPageMarginDrawable(int)\n */\n", "func_signal": "public void setPageMargin(int marginPixels)", "code": "{\n    final int oldMargin = mPageMargin;\n    mPageMargin = marginPixels;\n\n    final int width = getWidth();\n    recomputeScrollPosition(width, width, marginPixels, oldMargin);\n\n    requestLayout();\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Set a {@link PageTransformer} that will be called for each attached page whenever\n * the scroll position is changed. This allows the application to apply custom property\n * transformations to each page, overriding the default sliding look and feel.\n *\n * <p><em>Note:</em> Prior to Android 3.0 the property animation APIs did not exist.\n * As a result, setting a PageTransformer prior to Android 3.0 (API 11) will have no effect.</p>\n *\n * @param reverseDrawingOrder true if the supplied PageTransformer requires page views\n *                            to be drawn from last to first instead of first to last.\n * @param transformer PageTransformer that will modify each page's animation properties\n */\n", "func_signal": "public void setPageTransformer(boolean reverseDrawingOrder, PageTransformer transformer)", "code": "{\n    if (Build.VERSION.SDK_INT >= 11) {\n        final boolean hasTransformer = transformer != null;\n        final boolean needsPopulate = hasTransformer != (mPageTransformer != null);\n        mPageTransformer = transformer;\n        setChildrenDrawingOrderEnabledCompat(hasTransformer);\n        if (hasTransformer) {\n            mDrawingOrder = reverseDrawingOrder ? DRAW_ORDER_REVERSE : DRAW_ORDER_FORWARD;\n        } else {\n            mDrawingOrder = DRAW_ORDER_DEFAULT;\n        }\n        if (needsPopulate) populate();\n    }\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Remove a listener that was previously added via\n * {@link #addOnAdapterChangeListener(OnAdapterChangeListener)}.\n *\n * @param listener listener to remove\n */\n", "func_signal": "public void removeOnAdapterChangeListener(@NonNull OnAdapterChangeListener listener)", "code": "{\n    if (mAdapterChangeListeners != null) {\n        mAdapterChangeListeners.remove(listener);\n    }\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Set the currently selected page.\n *\n * @param item Item index to select\n * @param smoothScroll True to smoothly scroll to the new item, false to transition immediately\n */\n", "func_signal": "public void setCurrentItem(int item, boolean smoothScroll)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, smoothScroll, false);\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Set skip button instead of back button\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic void setSkipButtonVisible()", "code": "{\n    backButton.setVisibility(GONE);\n\n    skipButton.setVisibility(View.VISIBLE);\n    skipButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            for (int position = viewPager.getCurrentItem(); position < adapter.getCount(); position++) {\n                if (!adapter.getItem(position).canMoveFurther()) {\n                    viewPager.setCurrentItem(position, true);\n                    showError(adapter.getItem(position).cantMoveFurtherErrorMessage());\n                    return;\n                }\n            }\n            viewPager.setCurrentItem(adapter.getLastItemPosition(), true);\n        }\n    });\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/agency/tango/materialintroscreen/MaterialIntroActivity.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n *\n * @param event The key event to execute.\n * @return Return true if the event was handled, else false.\n */\n", "func_signal": "public boolean executeKeyEvent(KeyEvent event)", "code": "{\n    boolean handled = false;\n    if (event.getAction() == KeyEvent.ACTION_DOWN) {\n        switch (event.getKeyCode()) {\n            case KeyEvent.KEYCODE_DPAD_LEFT:\n                handled = arrowScroll(FOCUS_LEFT);\n                break;\n            case KeyEvent.KEYCODE_DPAD_RIGHT:\n                handled = arrowScroll(FOCUS_RIGHT);\n                break;\n            case KeyEvent.KEYCODE_TAB:\n                if (Build.VERSION.SDK_INT >= 11) {\n                    // The focus finder had a bug handling FOCUS_FORWARD and FOCUS_BACKWARD\n                    // before Android 3.0. Ignore the tab key on those devices.\n                    if (KeyEventCompat.hasNoModifiers(event)) {\n                        handled = arrowScroll(FOCUS_FORWARD);\n                    } else if (KeyEventCompat.hasModifiers(event, KeyEvent.META_SHIFT_ON)) {\n                        handled = arrowScroll(FOCUS_BACKWARD);\n                    }\n                }\n                break;\n        }\n    }\n    return handled;\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Hides any back button\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic void hideBackButton()", "code": "{\n    backButton.setVisibility(View.INVISIBLE);\n    skipButton.setVisibility(View.GONE);\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/agency/tango/materialintroscreen/MaterialIntroActivity.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Fake drag by an offset in pixels. You must have called {@link #beginFakeDrag()} first.\n *\n * @param xOffset Offset in pixels to drag by.\n * @see #beginFakeDrag()\n * @see #endFakeDrag()\n */\n", "func_signal": "public void fakeDragBy(float xOffset)", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    if (mAdapter == null) {\n        return;\n    }\n\n    mLastMotionX += xOffset;\n\n    float oldScrollX = getScrollX();\n    float scrollX = oldScrollX - xOffset;\n    final int width = getClientWidth();\n\n    float leftBound = width * mFirstOffset;\n    float rightBound = width * mLastOffset;\n\n    final ItemInfo firstItem = mItems.get(0);\n    final ItemInfo lastItem = mItems.get(mItems.size() - 1);\n    if (firstItem.position != 0) {\n        leftBound = firstItem.offset * width;\n    }\n    if (lastItem.position != mAdapter.getCount() - 1) {\n        rightBound = lastItem.offset * width;\n    }\n\n    if (scrollX < leftBound) {\n        scrollX = leftBound;\n    } else if (scrollX > rightBound) {\n        scrollX = rightBound;\n    }\n    // Don't lose the rounded component\n    mLastMotionX += scrollX - (int) scrollX;\n    scrollTo((int) scrollX, getScrollY());\n    pageScrolled((int) scrollX);\n\n    // Synthesize an event for the VelocityTracker.\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(mFakeDragBeginTime, time, MotionEvent.ACTION_MOVE,\n            mLastMotionX, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Add a listener that will be invoked whenever the page changes or is incrementally\n * scrolled. See {@link OnPageChangeListener}.\n *\n * <p>Components that add a listener should take care to remove it when finished.\n * Other components that take ownership of a view may call {@link #clearOnPageChangeListeners()}\n * to remove all attached listeners.</p>\n *\n * @param listener listener to add\n */\n", "func_signal": "public void addOnPageChangeListener(OnPageChangeListener listener)", "code": "{\n    if (mOnPageChangeListeners == null) {\n        mOnPageChangeListeners = new ArrayList<>();\n    }\n    mOnPageChangeListeners.add(listener);\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight()\n                    && y + scrollY >= child.getTop() && y + scrollY < child.getBottom()\n                    && canScroll(child, true, dx, x + scrollX - child.getLeft(),\n                    y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && ViewCompat.canScrollHorizontally(v, -dx);\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * End a fake drag of the pager.\n *\n * @see #beginFakeDrag()\n * @see #fakeDragBy(float)\n */\n", "func_signal": "public void endFakeDrag()", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    if (mAdapter != null) {\n        final VelocityTracker velocityTracker = mVelocityTracker;\n        velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);\n        int initialVelocity = (int) VelocityTrackerCompat.getXVelocity(\n                velocityTracker, mActivePointerId);\n        mPopulatePending = true;\n        final int width = getClientWidth();\n        final int scrollX = getScrollX();\n        final ItemInfo ii = infoForCurrentScrollPosition();\n        final int currentPage = ii.position;\n        final float pageOffset = (((float) scrollX / width) - ii.offset) / ii.widthFactor;\n        final int totalDelta = (int) (mLastMotionX - mInitialMotionX);\n        int nextPage = determineTargetPage(currentPage, pageOffset, initialVelocity,\n                totalDelta);\n        setCurrentItemInternal(nextPage, true, true, initialVelocity);\n    }\n    endDrag();\n\n    mFakeDragging = false;\n}", "path": "material-intro-screen/material-intro-screen/src/main/java/android/support/v4/view/CustomViewPager.java", "commit_date": "2016-12-01 00:00:00", "repo_name": "TangoAgency/material-intro-screen", "stars": 2713, "license": "mit", "language": "java", "size": 27796}
{"docstring": "/**\n * \u6839\u636e\u804a\u5929\u6d88\u606f\uff0c\u751f\u6210\u4e00\u6761\u53ef\u4ee5\u80fd\u591f\u4f20\u8f93\u901a\u8baf\u7684\u6d88\u606f\n *\n * @param msgId\n * @param type\n * @param subType\n * @param fromId\n * @param toId\n * @param extend\n * @param content\n * @return\n */\n", "func_signal": "public static AppMessage buildAppMessage(String msgId, int type, int subType, String fromId,\n                                         String toId, String extend, String content)", "code": "{\n    AppMessage message = new AppMessage();\n    Head head = new Head();\n    head.setMsgId(msgId);\n    head.setMsgType(type);\n    head.setMsgContentType(subType);\n    head.setFromId(fromId);\n    head.setToId(toId);\n    head.setExtend(extend);\n    message.setHead(head);\n    message.setBody(content);\n\n    return message;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/im/MessageBuilder.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u83b7\u53d6\u8f83\u7eaf\u51c0\u7684\u624b\u673a\u53f7\u7801<br />\n * \u5220\u9664\u524d\u7f00\u3001\u7a7a\u683c\u7b49\n *\n * @param phone\n * @return\n */\n", "func_signal": "public static String getValidPhoneNumber(String phone)", "code": "{\n\tif (phone == null)\n\t\treturn \"\";\n\tif (phone.startsWith(\"0086\")) {\n\t\tphone = phone.substring(4);\n\t}\n\tif (phone.startsWith(\"+86\")) {\n\t\tphone = phone.substring(3);\n\t}\n\tPhoneNumberUtils.stripSeparators(phone);\n\tphone = phone.replace(\"-\", \"\").replace(\" \", \"\").trim();\n\treturn phone;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u6839\u636e\u804a\u5929\u6d88\u606f\uff0c\u751f\u6210\u4e00\u6761\u53ef\u4ee5\u80fd\u591f\u4f20\u8f93\u901a\u8baf\u7684\u6d88\u606f\n *\n * @param msg\n * @return\n */\n", "func_signal": "public static AppMessage buildAppMessage(ContentMessage msg)", "code": "{\n    AppMessage message = new AppMessage();\n    Head head = new Head();\n    head.setMsgId(msg.getMsgId());\n    head.setMsgType(msg.getMsgType());\n    head.setMsgContentType(msg.getMsgContentType());\n    head.setFromId(msg.getFromId());\n    head.setToId(msg.getToId());\n    head.setTimestamp(msg.getTimestamp());\n    head.setExtend(msg.getExtend());\n    message.setHead(head);\n    message.setBody(msg.getContent());\n\n    return message;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/im/MessageBuilder.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u542f\u52a8\u4e00\u4e2a\u6d88\u8017\u7ebf\u7a0b\uff0c\u5e38\u9a7b\u540e\u53f0\n *\n * @param r\n */\n", "func_signal": "public static void startConsumer(final Runnable r, final String name)", "code": "{\n    runInBackground(new Runnable() {\n        public void run() {\n            new CThreadFactory(name, Thread.NORM_PRIORITY - 3).newThread(r).start();\n        }\n    });\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/CThreadPoolExecutor.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u901a\u8fc7protobuf\u6d88\u606f\u5bf9\u8c61\u83b7\u53d6\u4e1a\u52a1\u6d88\u606f\u5bf9\u8c61\n *\n * @param protobufMessage\n * @return\n */\n", "func_signal": "public static AppMessage getMessageByProtobuf(\n        MessageProtobuf.Msg protobufMessage)", "code": "{\n    AppMessage message = new AppMessage();\n    Head head = new Head();\n    MessageProtobuf.Head protoHead = protobufMessage.getHead();\n    head.setMsgType(protoHead.getMsgType());\n    head.setStatusReport(protoHead.getStatusReport());\n    head.setMsgContentType(protoHead.getMsgContentType());\n    head.setMsgId(protoHead.getMsgId());\n    head.setFromId(protoHead.getFromId());\n    head.setToId(protoHead.getToId());\n    head.setTimestamp(protoHead.getTimestamp());\n    head.setExtend(protoHead.getExtend());\n    message.setHead(head);\n    message.setBody(protobufMessage.getBody());\n    return message;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/im/MessageBuilder.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u5229\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6570\u5b57\n * @param str\n * @return\n */\n", "func_signal": "public static boolean isNumeric(String str)", "code": "{\n\tPattern pattern = Pattern.compile(\"[0-9]*\");\n\tMatcher isNum = pattern.matcher(str);\n\tif( !isNum.matches() ){\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * string to int\n * \n * @param input\n * @return\n */\n", "func_signal": "public static int stringtoint(String input)", "code": "{\n\ttry {\n\t\treturn Integer.parseInt(input);\n\t} catch (Exception e) {\n\t\treturn -1;\n\t}\n\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u53bb\u9664\u7279\u6b8a\u5b57\u7b26\u6216\u5c06\u6240\u6709\u4e2d\u6587\u6807\u53f7\u66ff\u6362\u4e3a\u82f1\u6587\u6807\u53f7\n * \n * @param str\n * @return\n */\n", "func_signal": "public static String stringFilter(String str)", "code": "{\n\tstr = str.replaceAll(\"\u3010\", \"[\").replaceAll(\"\u3011\", \"]\").replaceAll(\"\uff01\", \"!\").replaceAll(\"\uff1a\", \":\");// \u66ff\u6362\u4e2d\u6587\u6807\u53f7\n\tString regEx = \"[\u300e\u300f]\"; // \u6e05\u9664\u6389\u7279\u6b8a\u5b57\u7b26\n\tPattern p = Pattern.compile(regEx);\n\tMatcher m = p.matcher(str);\n\treturn m.replaceAll(\"\").trim();\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\uff08\u5927\u5c0f\u5199\u654f\u611f\uff09\u3002\n *\n * <pre>\n *\n *    StringUtil.equals(null, null)   = true\n *    StringUtil.equals(null, &quot;abc&quot;)  = false\n *    StringUtil.equals(&quot;abc&quot;, null)  = false\n *    StringUtil.equals(&quot;abc&quot;, &quot;abc&quot;) = true\n *    StringUtil.equals(&quot;abc&quot;, &quot;ABC&quot;) = false\n *\n * </pre>\n *\n * @param str1\n *                \u8981\u6bd4\u8f83\u7684\u5b57\u7b26\u4e321\n * @param str2\n *                \u8981\u6bd4\u8f83\u7684\u5b57\u7b26\u4e322\n *\n * @return \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u6216\u8005\u90fd\u662f <code>null</code> \uff0c\u5219\u8fd4\u56de <code>true</code>\n */\n", "func_signal": "public static boolean equals(String str1, String str2)", "code": "{\n\tif ( str1 == null )\n\t{\n\t\treturn str2 == null;\n\t}\n\n\treturn str1.equals(str2);\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u6839\u636e\u804a\u5929\u6d88\u606f\uff0c\u751f\u6210\u4e00\u6761\u53ef\u4ee5\u80fd\u591f\u4f20\u8f93\u901a\u8baf\u7684\u6d88\u606f\n *\n * @param msg\n * @return\n */\n", "func_signal": "public static AppMessage buildAppMessage(BaseMessage msg)", "code": "{\n    AppMessage message = new AppMessage();\n    Head head = new Head();\n    head.setMsgId(msg.getMsgId());\n    head.setMsgType(msg.getMsgType());\n    head.setMsgContentType(msg.getMsgContentType());\n    head.setFromId(msg.getFromId());\n    head.setToId(msg.getToId());\n    head.setExtend(msg.getExtend());\n    head.setTimestamp(msg.getTimestamp());\n    message.setHead(head);\n    message.setBody(msg.getContent());\n\n    return message;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/im/MessageBuilder.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u534a\u89d2\u8f6c\u6362\u4e3a\u5168\u89d2\n * \n * @param input\n * @return\n */\n", "func_signal": "public static String toDBC(String input)", "code": "{\n\tchar[] c = input.toCharArray();\n\tfor (int i = 0; i < c.length; i++) {\n\t\tif (c[i] == 12288) {\n\t\t\tc[i] = (char) 32;\n\t\t\tcontinue;\n\t\t}\n\t\tif (c[i] > 65280 && c[i] < 65375)\n\t\t\tc[i] = (char) (c[i] - 65248);\n\t}\n\treturn new String(c);\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u4ece Future \u4e2d\u83b7\u53d6\u503c\uff0c\u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u6253\u65e5\u5fd7\n *\n * @param future\n * @param tag\n * @param name\n * @return\n */\n", "func_signal": "public static <T> T getFromTask(Future<T> future, String tag, String name)", "code": "{\n    try {\n        return future.get();\n    } catch (Exception e) {\n        Log.e(tag, (name != null ? name + \": \" : \"\") + e.toString());\n    }\n    return null;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/CThreadPoolExecutor.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u5f3a\u5236\u6e05\u7406\u4efb\u52a1\n *\n * @param task\n * @return\n */\n", "func_signal": "public static <T> void cancelTask(Future<T> task)", "code": "{\n    if (task != null) {\n        task.cancel(true);\n    }\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/CThreadPoolExecutor.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * string to long\n * \n * @param input\n * @return\n */\n", "func_signal": "public static long stringtolong(String input)", "code": "{\n\ttry {\n\t\treturn Long.parseLong(input);\n\t} catch (Exception e) {\n\t\treturn 0l;\n\t}\n\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u53bb\u9664\u975e\u6cd5\u5b57\u7b26(\u6362\u884c\u3001\u56de\u8f66...)\n * @author liu_haifang\n * @date 2014-11-7 \u4e0b\u53482:36:48\n * @param str\n * @return\n */\n", "func_signal": "public static String rmUnqualified (String str)", "code": "{\n\tif (!isEmpty(str)) {\n\t\tPattern p = Pattern.compile(\"\\\\s*|\\t|\\r|\\n\");\n\t\tMatcher m = p.matcher(str);\n\t\treturn m.replaceAll(\"\");\n\t}\n\treturn null;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * object to int\n * \n * @date 2014-1-3\u4e0b\u53482:14:39\n * @author hx\n * @param o\n * @return\n */\n", "func_signal": "public static int ObjectToInt(Object o)", "code": "{\n\tif (null == o || o.toString().trim().equals(\"\")) {\n\t\treturn -1;\n\t} else {\n\t\treturn Integer.parseInt(o.toString());\n\t}\n\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u5b57\u7b26\u957f\u5ea6\n * \n * @date 2013-10-24\u4e0b\u53484:20:03\n * @author hx\n * @param o\n * @return\n */\n", "func_signal": "public static int getLength(Object o)", "code": "{\n\tif (null == o || o.toString().trim().equals(\"\")) {\n\t\treturn 0;\n\t} else {\n\t\treturn o.toString().trim().length();\n\t}\n\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u6784\u5efa\u5ba2\u6237\u7aef\u6d88\u606f\u63a5\u6536\u72b6\u6001\u62a5\u544a\n * @param msgId\n * @return\n */\n", "func_signal": "private MessageProtobuf.Msg buildReceivedReportMsg(String msgId)", "code": "{\n    if (StringUtil.isNullOrEmpty(msgId)) {\n        return null;\n    }\n\n    MessageProtobuf.Msg.Builder builder = MessageProtobuf.Msg.newBuilder();\n    MessageProtobuf.Head.Builder headBuilder = MessageProtobuf.Head.newBuilder();\n    headBuilder.setMsgId(UUID.randomUUID().toString());\n    headBuilder.setMsgType(imsClient.getClientReceivedReportMsgType());\n    headBuilder.setTimestamp(System.currentTimeMillis());\n    JSONObject jsonObj = new JSONObject();\n    jsonObj.put(\"msgId\", msgId);\n    headBuilder.setExtend(jsonObj.toString());\n    builder.setHead(headBuilder.build());\n\n    return builder.build();\n}", "path": "NettyChat/im_lib/src/main/java/com/freddy/im/netty/TCPReadHandler.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u6839\u636e\u4e1a\u52a1\u6d88\u606f\u5bf9\u8c61\u83b7\u53d6protoBuf\u6d88\u606f\u5bf9\u5e94\u7684builder\n *\n * @param message\n * @return\n */\n", "func_signal": "public static MessageProtobuf.Msg.Builder getProtoBufMessageBuilderByAppMessage(AppMessage message)", "code": "{\n    MessageProtobuf.Msg.Builder builder = MessageProtobuf.Msg.newBuilder();\n    MessageProtobuf.Head.Builder headBuilder = MessageProtobuf.Head.newBuilder();\n    headBuilder.setMsgType(message.getHead().getMsgType());\n    headBuilder.setStatusReport(message.getHead().getStatusReport());\n    headBuilder.setMsgContentType(message.getHead().getMsgContentType());\n    if (!StringUtil.isEmpty(message.getHead().getMsgId()))\n        headBuilder.setMsgId(message.getHead().getMsgId());\n    if (!StringUtil.isEmpty(message.getHead().getFromId()))\n        headBuilder.setFromId(message.getHead().getFromId());\n    if (!StringUtil.isEmpty(message.getHead().getToId()))\n        headBuilder.setToId(message.getHead().getToId());\n    if (message.getHead().getTimestamp() != 0)\n        headBuilder.setTimestamp(message.getHead().getTimestamp());\n    if (!StringUtil.isEmpty(message.getHead().getExtend()))\n        headBuilder.setExtend(message.getHead().getExtend());\n    if (!StringUtil.isEmpty(message.getBody()))\n        builder.setBody(message.getBody());\n    builder.setHead(headBuilder);\n    return builder;\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/im/MessageBuilder.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * \u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u624b\u673a\u53f7\u7801\n */\n", "func_signal": "public static boolean isPhone(CharSequence phoneNum)", "code": "{\n\tif (isEmpty(phoneNum))\n\t\treturn false;\n\treturn phonePattern.matcher(phoneNum).matches();\n}", "path": "NettyChat/app/src/main/java/com/freddy/chat/utils/StringUtil.java", "commit_date": "2019-04-10 00:00:00", "repo_name": "FreddyChen/NettyChat", "stars": 2247, "license": "apache-2.0", "language": "java", "size": 3951}
{"docstring": "/**\n * Map object coordinates into window coordinates. gluProject transforms the\n * specified object coordinates into window coordinates using model, proj,\n * and view. The result is stored in win.\n * <p>\n * Note that you can use the OES_matrix_get extension, if present, to get\n * the current modelView and projection matrices.\n *\n * @param objX object coordinates X\n * @param objY object coordinates Y\n * @param objZ object coordinates Z\n * @param model the current modelview matrix\n * @param modelOffset the offset into the model array where the modelview\n *        maxtrix data starts.\n * @param project the current projection matrix\n * @param projectOffset the offset into the project array where the project\n *        matrix data starts.\n * @param view the current view, {x, y, width, height}\n * @param viewOffset the offset into the view array where the view vector\n *        data starts.\n * @param win the output vector {winX, winY, winZ}, that returns the\n *        computed window coordinates.\n * @param winOffset the offset into the win array where the win vector data\n *        starts.\n * @return A return value of GL_TRUE indicates success, a return value of\n *         GL_FALSE indicates failure.\n */\n", "func_signal": "public static int gluProject(double objX, double objY, double objZ,\n        double[] model, int modelOffset, double[] project, int projectOffset,\n        int[] view, int viewOffset, double[] win, int winOffset)", "code": "{\n    double[] scratch = sScratch;\n    synchronized(scratch) {\n        final int M_OFFSET = 0; // 0..15\n        final int V_OFFSET = 16; // 16..19\n        final int V2_OFFSET = 20; // 20..23\n        Matrix.multiplyMM(scratch, M_OFFSET, project, projectOffset,\n                model, modelOffset);\n\n        scratch[V_OFFSET + 0] = objX;\n        scratch[V_OFFSET + 1] = objY;\n        scratch[V_OFFSET + 2] = objZ;\n        scratch[V_OFFSET + 3] = 1.0;\n\n        Matrix.multiplyMV(scratch, V2_OFFSET,\n                scratch, M_OFFSET, scratch, V_OFFSET);\n\n        double w = scratch[V2_OFFSET + 3];\n        if (w == 0.0) {\n            return GL10.GL_FALSE;\n        }\n\n        double rw = 1.0 / w;\n\n        win[winOffset] =\n                view[viewOffset] + view[viewOffset + 2]\n                        * (scratch[V2_OFFSET + 0] * rw + 1.0)\n                        * 0.5;\n        win[winOffset + 1] =\n                view[viewOffset + 1] + view[viewOffset + 3]\n                        * (scratch[V2_OFFSET + 1] * rw + 1.0) * 0.5;\n        win[winOffset + 2] = (scratch[V2_OFFSET + 2] * rw + 1.0) * 0.5;\n    }\n\n    return GL10.GL_TRUE;\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/util/GLU.java", "commit_date": "2015-03-23 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/*\n * Set the outer cone angle\n */\n", "func_signal": "public void setCutoffAngle(float cutoffAng)", "code": "{\n\tif(cutoffAng > mMaxCutoffAngle)\n\t\tcutoffAng = mMaxCutoffAngle;\n\tmCutoffAngle = cutoffAng;\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/lights/SpotLight.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Creates a new ATexture instance with the specified texture type\n *\n * @param textureType\n */\n", "func_signal": "public ATexture(TextureType textureType, @NonNull String textureName)", "code": "{\n    this();\n    mTextureType = textureType;\n    mTextureName = textureName;\n    mMipmap = true;\n    mShouldRecycle = false;\n    mWrapType = WrapType.REPEAT;\n    mFilterType = FilterType.LINEAR;\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/materials/textures/ATexture.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Renders the object\n *\n * @param camera        The camera\n * @param vpMatrix      {@link Matrix4} The view-projection matrix\n * @param projMatrix    {@link Matrix4} The projection matrix\n * @param vMatrix       {@link Matrix4} The view matrix\n * @param parentMatrix  {@link Matrix4} This object's parent matrix\n * @param sceneMaterial The scene-wide Material to use, if any.\n */\n", "func_signal": "public void render(Camera camera, final Matrix4 vpMatrix, final Matrix4 projMatrix, final Matrix4 vMatrix,\n                   final Matrix4 parentMatrix, Material sceneMaterial)", "code": "{\n    if (isDestroyed() || (!mIsVisible && !mRenderChildrenAsBatch) || isZeroScale()) {\n        return;\n    }\n\n    if (parentMatrix != null) {\n        if (mParentMatrix == null) {\n            mParentMatrix = new Matrix4();\n        }\n        mParentMatrix.setAll(parentMatrix);\n    }\n\n    Material material = sceneMaterial == null ? mMaterial : sceneMaterial;\n    preRender();\n\n    // -- move view matrix transformation first\n    boolean modelMatrixWasRecalculated = onRecalculateModelMatrix(parentMatrix);\n    // -- calculate model view matrix;\n    mMVMatrix.setAll(vMatrix).multiply(mMMatrix);\n    // -- calculate inverse view matrix;\n    mInverseViewMatrix.setAll(vMatrix).inverse().transpose();\n    //Create MVP Matrix from View-Projection Matrix\n    mMVPMatrix.setAll(vpMatrix).multiply(mMMatrix);\n\n    // Transform the bounding volumes if they exist\n    if (mGeometry.hasBoundingBox()) {\n        getBoundingBox().transform(getModelMatrix());\n    }\n    if (mGeometry.hasBoundingSphere()) {\n        mGeometry.getBoundingSphere().transform(getModelMatrix());\n    }\n\n    mIsInFrustum = true; // only if mFrustrumTest == true it check frustum\n    if (mFrustumTest && mGeometry.hasBoundingBox()) {\n        BoundingBox bbox = getBoundingBox();\n        if (!camera.getFrustum().boundsInFrustum(bbox)) {\n            mIsInFrustum = false;\n        }\n    }\n\n    if (!mIsContainerOnly && mIsInFrustum) {\n        mPMatrix = projMatrix;\n        if (mDoubleSided) {\n            GLES20.glDisable(GLES20.GL_CULL_FACE);\n        } else {\n            GLES20.glEnable(GLES20.GL_CULL_FACE);\n            if (mBackSided) {\n                GLES20.glCullFace(GLES20.GL_FRONT);\n            } else {\n                GLES20.glCullFace(GLES20.GL_BACK);\n                GLES20.glFrontFace(GLES20.GL_CCW);\n            }\n        }\n        if (mEnableBlending) {\n            GLES20.glEnable(GLES20.GL_BLEND);\n            GLES20.glBlendFunc(mBlendFuncSFactor, mBlendFuncDFactor);\n        }\n        if (!mEnableDepthTest) {\n            GLES20.glDisable(GLES20.GL_DEPTH_TEST);\n        } else {\n            GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n            GLES20.glDepthFunc(GLES20.GL_LESS);\n        }\n\n        GLES20.glDepthMask(mEnableDepthMask);\n\n        if (!mIsPartOfBatch) {\n            if (material == null) {\n                RajLog.e(\"[\" + this.getClass().getName()\n                         + \"] This object can't render because there's no material attached to it.\");\n\t\t\t\t\t/*throw new RuntimeException(\n\t\t\t\t\t\t\t\"This object can't render because there's no material attached to it.\");*/\n                if (mEnableBlending) {\n                    GLES20.glDisable(GLES20.GL_BLEND);\n                }\n\n                if (mDoubleSided) {\n                    GLES20.glEnable(GLES20.GL_CULL_FACE);\n                } else if (mBackSided) {\n                    GLES20.glCullFace(GLES20.GL_BACK);\n                }\n                if (!mEnableDepthTest) {\n                    GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n                    GLES20.glDepthFunc(GLES20.GL_LESS);\n                }\n                return;\n            }\n            material.useProgram();\n\n            setShaderParams(camera);\n            material.bindTextures();\n            if (mGeometry.hasTextureCoordinates()) {\n                material.setTextureCoords(mGeometry.getTexCoordBufferInfo());\n            }\n            if (mGeometry.hasNormals()) {\n                material.setNormals(mGeometry.getNormalBufferInfo());\n            }\n            if (mMaterial.usingVertexColors()) {\n                material.setVertexColors(mGeometry.getColorBufferInfo());\n            }\n\n            material.setVertices(mGeometry.getVertexBufferInfo());\n        }\n        material.setCurrentObject(this);\n        if (mOverrideMaterialColor) {\n            material.setColor(mColor);\n        }\n        material.applyParams();\n\n        GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, 0);\n\n        material.setMVPMatrix(mMVPMatrix);\n        material.setModelMatrix(mMMatrix);\n        material.setInverseViewMatrix(mInverseViewMatrix);\n        material.setModelViewMatrix(mMVMatrix);\n\n        if (mIsVisible) {\n            int bufferType = mGeometry.getIndexBufferInfo().bufferType == Geometry3D.BufferType.SHORT_BUFFER\n                             ? GLES20.GL_UNSIGNED_SHORT : GLES20.GL_UNSIGNED_INT;\n            GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER, mGeometry.getIndexBufferInfo().bufferHandle);\n            GLES20.glDrawElements(mDrawingMode, mGeometry.getNumIndices(), bufferType, 0);\n            GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER, 0);\n        }\n        if (!mIsPartOfBatch && !mRenderChildrenAsBatch && sceneMaterial == null) {\n            material.unbindTextures();\n        }\n\n        material.unsetCurrentObject(this);\n\n        if (mEnableBlending) {\n            GLES20.glDisable(GLES20.GL_BLEND);\n        }\n\n        if (mDoubleSided) {\n            GLES20.glEnable(GLES20.GL_CULL_FACE);\n        } else if (mBackSided) {\n            GLES20.glCullFace(GLES20.GL_BACK);\n        }\n        if (!mEnableDepthTest) {\n            GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n            GLES20.glDepthFunc(GLES20.GL_LESS);\n        }\n    }\n\n    if (mShowBoundingVolume) {\n        if (mGeometry.hasBoundingBox()) {\n            getBoundingBox().drawBoundingVolume(camera, vpMatrix, projMatrix, vMatrix, mMMatrix);\n        }\n        if (mGeometry.hasBoundingSphere()) {\n            mGeometry.getBoundingSphere().drawBoundingVolume(camera, vpMatrix, projMatrix, vMatrix, mMMatrix);\n        }\n    }\n    // Draw children without frustum test\n    for (int i = 0, j = mChildren.size(); i < j; i++) {\n        Object3D child = mChildren.get(i);\n        if (mRenderChildrenAsBatch || mIsPartOfBatch) {\n            child.setPartOfBatch(true);\n        }\n        if (modelMatrixWasRecalculated) {\n            child.markModelMatrixDirty();\n        }\n        child.render(camera, vpMatrix, projMatrix, vMatrix, mMMatrix, sceneMaterial);\n    }\n\n    if (mRenderChildrenAsBatch && sceneMaterial == null) {\n        material.unbindTextures();\n    }\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/Object3D.java", "commit_date": "2020-01-26 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * The reload method is called whenever the OpenGL context needs to be re-created. When the OpenGL context was lost,\n * the vertex, uv coord, index etc data needs to be re-uploaded.\n */\n", "func_signal": "public void reload()", "code": "{\n    if (!mIsContainerOnly) {\n        mGeometry.reload();\n    }\n\n    for (int i = 0, j = mChildren.size(); i < j; i++) {\n        mChildren.get(i).reload();\n    }\n\n    if (mGeometry.hasBoundingBox() && getBoundingBox().getVisual() != null) {\n        getBoundingBox().getVisual().reload();\n    }\n    if (mGeometry.hasBoundingSphere() && mGeometry.getBoundingSphere().getVisual() != null) {\n        mGeometry.getBoundingSphere().getVisual().reload();\n    }\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/Object3D.java", "commit_date": "2020-01-26 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Copies every property from another ThreeDcTexture object\n * \n * @param other\n *            another ThreeDcTexture object to copy from\n */\n", "func_signal": "public void setFrom(ThreeDcTexture other)", "code": "{\n\tsuper.setFrom(other);\n\tmThreeDcFormat = other.getThreeDcFormat();\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/materials/textures/ThreeDcTexture.java", "commit_date": "2019-01-13 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Retrieve the number of objects in the object, recursive method\n *\n * @return int the total object count for the object.\n */\n", "func_signal": "public int getNumObjects()", "code": "{\n    int objectCount = 0;\n\n    for (int i = 0, j = getNumChildren(); i < j; i++) {\n        Object3D child = getChildAt(i);\n        if (child.getGeometry() != null && child.getGeometry().getVertices() != null && child.isVisible()) {\n            if (child.getNumChildren() > 0) {\n                objectCount += child.getNumObjects() + 1;\n            } else {\n                objectCount++;\n            }\n        }\n    }\n    return objectCount;\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/Object3D.java", "commit_date": "2020-01-26 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Use this together with the alpha channel when calling BaseObject3D.setColor(): 0xaarrggbb. So for 50% transparent\n * red, set transparent to true and call: * <code>setColor(0x7fff0000);</code>\n *\n * @param value\n */\n", "func_signal": "public void setTransparent(boolean value)", "code": "{\n    mTransparent = value;\n    mEnableBlending = value;\n    setBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);\n    mEnableDepthMask = !value;\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/Object3D.java", "commit_date": "2020-01-26 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Maps the (x,y) coordinates of <code>tileName</code> in <code>atlas</code>\n * to the TextureCoordinates of this BaseObject3D\n *\n * Saves a copy of the original TextureCoordinates in case of future mapping.\n *\n * @param tileName\n * @param atlas\n */\n", "func_signal": "public void setAtlasTile(String tileName, TextureAtlas atlas)", "code": "{\n    Tile tile = atlas.getTileNamed(tileName);\n\n    if(mOriginalTextureCoords == null) {\n        mOriginalTextureCoords = this.getGeometry().getTextureCoords().duplicate();\n    }\n\n    FloatBuffer fb = FloatBuffer.allocate(mOriginalTextureCoords.capacity());\n    for (int i = 0; i < fb.capacity(); i++) {\n        double uvIn = mOriginalTextureCoords.get(i);\n        double uvOut;\n        if (i % 2 == 0) {\n            uvOut = (uvIn * (tile.width / atlas.getWidth())) + tile.x / atlas.getWidth();\n        } else {\n            uvOut = (uvIn * (tile.height / atlas.getHeight())) + tile.y / atlas.getHeight();\n        }\n        fb.put(i, (float) uvOut);\n    }\n    mGeometry.changeBufferData(mGeometry.getTexCoordBufferInfo(), fb, 0);\n\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/Object3D.java", "commit_date": "2020-01-26 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Return an error string from a GL or GLU error code.\n *\n * @param error - a GL or GLU error code.\n * @return the error string for the input error code, or NULL if the input\n *         was not a valid GL or GLU error code.\n */\n", "func_signal": "public static String gluErrorString(int error)", "code": "{\n    switch (error) {\n    case GL10.GL_NO_ERROR:\n        return \"no error\";\n    case GL10.GL_INVALID_ENUM:\n        return \"invalid enum\";\n    case GL10.GL_INVALID_VALUE:\n        return \"invalid value\";\n    case GL10.GL_INVALID_OPERATION:\n        return \"invalid operation\";\n    case GL10.GL_STACK_OVERFLOW:\n        return \"stack overflow\";\n    case GL10.GL_STACK_UNDERFLOW:\n        return \"stack underflow\";\n    case GL10.GL_OUT_OF_MEMORY:\n        return \"out of memory\";\n    default:\n        return null;\n    }\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/util/GLU.java", "commit_date": "2015-03-23 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Sets the world axis values after checking that they are all orthogonal to each other. The check performed\n * is to verify that the cross product between {@code right} and {@code up} is equivilant to {@code forward}\n * withing 1ppm error on each component.\n *\n * @param right {@link Vector3} The desired right vector. Must be normalized.\n * @param up {@link Vector3} The desired up vector. Must be normalized.\n * @param forward {@link Vector3} The desired forward vector. Must be normalized.\n */\n", "func_signal": "public static void setWorldAxes(Vector3 right, Vector3 up, Vector3 forward)", "code": "{\n    TEMP_VECTOR.crossAndSet(right, up);\n    if (!TEMP_VECTOR.equals(forward, 1e-6)) {\n        throw new IllegalArgumentException(\"World axes must be orthogonal.\");\n    }\n    RIGHT_AXIS.setAll(right);\n    NEG_RIGHT_AXIS.setAll(RIGHT_AXIS).inverse();\n    UP_AXIS.setAll(up);\n    NEG_UP_AXIS.setAll(UP_AXIS).inverse();\n    FORWARD_AXIS.setAll(forward);\n    NEG_FORWARD_AXIS.setAll(FORWARD_AXIS).inverse();\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/WorldParameters.java", "commit_date": "2015-03-29 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * @param threeDcFormat\n *            the 3DC Texture Compression format. See {@link ThreeDcFormat}.\n */\n", "func_signal": "public void setThreeDcFormat(ThreeDcFormat mThreeDcFormat)", "code": "{\n\tthis.mThreeDcFormat = mThreeDcFormat;\n\tif(mThreeDcFormat == ThreeDcFormat.X)\n\t\tmCompressionFormat = GLES11Ext.GL_3DC_X_AMD;\n\telse\n\t\tmCompressionFormat = GLES11Ext.GL_3DC_XY_AMD;\t\t\t\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/materials/textures/ThreeDcTexture.java", "commit_date": "2019-01-13 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "// apply joint hierarchy to joint pose frames\n", "func_signal": "private void buildSkeleton(BlockHeader blockHeader, long skelAddr) throws ParsingException", "code": "{\n\tSkeletonJoint[] joints = lookupSkeleton(blockHeader, skelAddr);\n\n\tSkeletalAnimationSequence[] skelAnims =\n\t\tnew SkeletalAnimationSequence[mAnimSet.length];\n\n\tfor(int i = 0; i < mAnimSet.length; i++)\n\t\tskelAnims[i] = (SkeletalAnimationSequence)mAnimSet[i];\n\n\tMatrix4 scratch1 = new Matrix4();\n\tMatrix4 scratch2 = new Matrix4();\n\n\tfor(SkeletalAnimationSequence skelSeq : skelAnims)\n\t{\n\t\tfor(SkeletalAnimationFrame frame : skelSeq.getFrames())\n\t\t{\n\t\t\tSkeletonJoint[] poses = frame.getSkeleton().getJoints();\n\n\t\t\t// apply parent transforms\n\t\t\tfor(int i = 0; i < poses.length; i++)\n\t\t\t{\n\t\t\t\t// matrix and index already set, need parent & other attribs\n\t\t\t\tposes[i].setParentIndex(joints[i].getParentIndex());\n\n\t\t\t\tif(poses[i].getParentIndex() >= 0) // has parent joint\n\t\t        {\n\t\t            SkeletonJoint parentPose = poses[poses[i].getParentIndex()];\n\n\t\t\t\t\tscratch1.setAll(parentPose.getMatrix())\n\t\t\t\t\t\t.multiply(scratch2.setAll(poses[i].getMatrix()));\n\n\t\t\t\t\tposes[i].setMatrix(scratch1.getDoubleValues());\n\t\t        }\n\t\t\t\telse\n\t\t\t\t\tscratch1.setAll(poses[i].getMatrix());\n\n\t\t\t\t// assign pos + rot from final matrix\n\t\t\t\tscratch1.getTranslation(poses[i].getPosition());\n\t\t\t\tposes[i].getOrientation().fromMatrix(scratch1);\n\t\t\t\tposes[i].getOrientation().computeW();\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(int i = 0; i < mTargets.length; i++)\n\t{\n\t\tSkeletalAnimationObject3D obj =\n\t\t\t(SkeletalAnimationObject3D)mTargets[i];\n\n\t\t// assigns INVBP, builds BP, sets joints\n\t\tobj.setJointsWithInverseBindPoseMatrices(joints);\n\n\t\tfor(int j = 0; j < obj.getNumChildren(); j++)\n\t\t{\n\t\t\tSkeletalAnimationChildObject3D child =\n\t\t\t\t(SkeletalAnimationChildObject3D)obj.getChildAt(j);\n\n\t\t\tSkeletalAnimationMaterialPlugin\n\t\t\t\tplugin = new SkeletalAnimationMaterialPlugin\n\t\t\t\t\t(child.getNumJoints(), child.getMaxBoneWeightsPerVertex());\n\n\t\t\tchild.getMaterial().addPlugin(plugin);\n\t\t}\n\n\t\tobj.setAnimationSequences(skelAnims);\n\t\tobj.setAnimationSequence(mActive);\n\n\t\tif(mAutoPlay)\n\t\t\tobj.play(true);\n\t}\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/loader/awd/BlockAnimator.java", "commit_date": "2015-04-08 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Creates a cube primitive.\n * \n * @param size\t\t\t\t\t\tThe size of the cube.\n * @param isSkybox\t\t\t\t\tA boolean that indicates whether this is a skybox or not. If set to true the normals will \n * \t\t\t\t\t\t\t\t\tbe inverted.\n * @param hasCubemapTexture\t\t\tA boolean that indicates a cube map texture will be used (6 textures) or a regular \n * \t\t\t\t\t\t\t\t\tsingle texture.\n * @param createTextureCoordinates\tA boolean that indicates whether the texture coordinates should be calculated or not.\n * @param createVertexColorBuffer\tA boolean that indicates whether a vertex color buffer should be created or not.\n     * @param createVBOs                A boolean that indicates whether the VBOs should be created immediately.\n */\n", "func_signal": "public Cube(float size, boolean isSkybox, boolean hasCubemapTexture, boolean createTextureCoordinates,\n\t\tboolean createVertexColorBuffer, boolean createVBOs)", "code": "{\n\tsuper();\n\tmIsSkybox = isSkybox;\n\tmSize = size;\n\tmHasCubemapTexture = hasCubemapTexture;\n\tmCreateTextureCoords = createTextureCoordinates;\n\tmCreateVertexColorBuffer = createVertexColorBuffer;\n\tinit(createVBOs);\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/primitives/Cube.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/*\n * (non-Javadoc)\n * @see rajawali.scenegraph.IGraphNodeMember#getBoundingVolume()\n */\n", "func_signal": "@Override\npublic IBoundingVolume getTransformedBoundingVolume()", "code": "{\n    IBoundingVolume volume = null;\n    volume = getBoundingBox();\n    calculateModelMatrix(null);\n    volume.transform(mMMatrix);\n    return volume;\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/Object3D.java", "commit_date": "2020-01-26 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/*\n * (non-Javadoc)\n * @see rajawali.ATransformable3D#getTransformedBoundingVolume()\n */\n", "func_signal": "@Override\npublic IBoundingVolume getTransformedBoundingVolume()", "code": "{\n\tsynchronized (mFrustumLock) {\n\t\t// TODO create an actual bounding box\n\t\treturn mBoundingBox;\n\t}\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/cameras/Camera.java", "commit_date": "2016-08-25 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * End guarded members\n */\n", "func_signal": "public Camera()", "code": "{\n\tsuper();\n\tmLocalOrientation = Quaternion.getIdentity();\n\tmIsCamera = true;\n\tmFrustum = new Frustum();\n\tmFrustumCorners = new Vector3[8];\n        for(int i=0; i<8; i++) {\n            mFrustumCorners[i] = new Vector3();\n        }\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/cameras/Camera.java", "commit_date": "2016-08-25 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Creates a cylinder primitive.\n *\n * @param length\n *\t\t\tThe length of the cylinder\n * @param radius\n *\t\t\tThe radius of the cylinder\n * @param segmentsL\n *\t\t\tThe number of length segments\n * @param segmentsC\n *\t\t\tThe number of circle segments\n * @param createTextureCoordinates\n *\t\t\tA boolean that indicates whether the texture coordinates should be calculated or not.\n * @param createVertexColorBuffer\n *\t\t\tA boolean that indicates whether a vertex color buffer should be created or not.\n * @param createVBOs\n *\t\t\tA boolean that indicates whether the VBOs should be created immediately.\n */\n", "func_signal": "public Cylinder(float length, float radius, int segmentsL, int segmentsC, boolean createTextureCoordinates,\n\t\t\t\tboolean createVertexColorBuffer, boolean createVBOs)", "code": "{\n\tsuper();\n\tmLength = length;\n\tmRadius = radius;\n\tmSegmentsL = segmentsL;\n\tmSegmentsC = segmentsC;\n\tmCreateTextureCoords = createTextureCoordinates;\n\tmCreateVertexColorBuffer = createVertexColorBuffer;\n\tinit(createVBOs);\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/primitives/Cylinder.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Define a viewing transformation in terms of an eye point, a center of\n * view, and an up vector.\n *\n * @param gl a GL10 interface\n * @param eyeX eye point X\n * @param eyeY eye point Y\n * @param eyeZ eye point Z\n * @param centerX center of view X\n * @param centerY center of view Y\n * @param centerZ center of view Z\n * @param upX up vector X\n * @param upY up vector Y\n * @param upZ up vector Z\n */\n", "func_signal": "public static void gluLookAt(GL10 gl, double eyeX, double eyeY, double eyeZ,\n        double centerX, double centerY, double centerZ, double upX, double upY,\n        double upZ)", "code": "{\n\n    double[] scratch = sScratch;\n    synchronized(scratch) {\n        Matrix.setLookAtM(scratch, 0, eyeX, eyeY, eyeZ, centerX, centerY, centerZ,\n                upX, upY, upZ);\n        gl.glMultMatrixf(ArrayUtils.convertDoublesToFloats(scratch, sTempFloats), 0);\n    }\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/util/GLU.java", "commit_date": "2015-03-23 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * Copies every property from another ACompressedTexture object\n * \n * @param other\n *            another ACompressedTexture object to copy from\n */\n", "func_signal": "public void setFrom(ACompressedTexture other)", "code": "{\n\tsuper.setFrom(other);\n\tmCompressionType = other.getCompressionType();\n\tmCompressionFormat = other.getCompressionFormat();\n}", "path": "Rajawali/rajawali/src/main/java/org/rajawali3d/materials/textures/ACompressedTexture.java", "commit_date": "2019-01-30 00:00:00", "repo_name": "Rajawali/Rajawali", "stars": 2311, "license": "other", "language": "java", "size": 84677}
{"docstring": "/**\n * \u5bf9\u8c61\u8f6cmap\n * @param obj\n * @return\n */\n", "func_signal": "public static Map<String, String> buildMap(Object obj)", "code": "{\n    Map<String, String> map = new HashMap<>();\n\n    try {\n        Class<?> clazz = obj.getClass();\n        for (Field field : clazz.getDeclaredFields()) {\n            field.setAccessible(true);\n            String fieldName = field.getName();\n\n            //\u5982\u679c element \u6ce8\u89e3 name \u5b57\u6bb5\u8bbe\u7f6e\u4e86\u5185\u5bb9, \u4f7f\u7528\u5176\u5f53\u6210\u5b57\u6bb5\u540d\n            Element element = field.getAnnotation(Element.class);\n            if (element != null && StringUtils.isNotEmpty(element.name())) {\n                fieldName = element.name();\n            }\n\n            String value = field.get(obj) == null ? \"\" : String.valueOf(field.get(obj));\n            map.put(fieldName, value);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return map;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u7b7e\u540dfor App\n * https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12&index=2\n * @param params\n * @param signKey\n * @return\n */\n", "func_signal": "public static String signForApp(Map<String, String> params, String signKey)", "code": "{\n    SortedMap<String, String> sortedMap = new TreeMap<>(params);\n\n    StringBuilder toSign = new StringBuilder();\n    for (String key : sortedMap.keySet()) {\n        String value = params.get(key);\n        if (StringUtils.isNotEmpty(value) && !\"sign\".equals(key) && !\"key\".equals(key)) {\n            toSign.append(key.toLowerCase()).append(\"=\").append(value).append(\"&\");\n        }\n    }\n\n    toSign.append(\"key=\").append(signKey);\n    return DigestUtils.md5Hex(toSign.toString()).toUpperCase();\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPaySignature.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * map\u8f6curl \u6392\u5e8f\u540e\u8f6c\n * @param map\n * @return\n */\n", "func_signal": "public static String toUrlWithSort(Map<String, String> map)", "code": "{\n    List<String> keys = new ArrayList<>(map.keySet());\n    Collections.sort(keys);\n\n    String prestr = \"\";\n    for (int i = 0; i < keys.size(); i++) {\n        String key = keys.get(i);\n        String value = map.get(key);\n\n        if (i == keys.size() - 1) {//\u62fc\u63a5\u65f6\uff0c\u4e0d\u5305\u62ec\u6700\u540e\u4e00\u4e2a&\u5b57\u7b26\n            prestr = prestr + key + \"=\" + value;\n        } else {\n            prestr = prestr + key + \"=\" + value + \"&\";\n        }\n    }\n    return prestr;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n *\n * @param params   \u53c2\u6570map\n * @param privateKey        \u5546\u6237\u79c1\u94a5\n * @return\n */\n", "func_signal": "public static String sign(Map<String, String> params, String privateKey)", "code": "{\n    String signType = params.get(\"sign_type\");\n    String signContent = getSignContent(params);\n    log.info(\"sign content: {}\",signContent);\n    if(AliPayConstants.SIGN_TYPE_RSA.equals(signType)) {\n        return rsaSign(signContent,privateKey);\n    } else if (AliPayConstants.SIGN_TYPE_RSA2.equals(signType)) {\n        return rsa256Sign(signContent, privateKey);\n    }\n    throw new RuntimeException(\"\u652f\u4ed8\u5b9d\u7b7e\u540d\u65b9\u5f0f\u6709\u8bef\");\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPaySignature.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * map\u8f6curl \u6392\u5e8f\u540e\u8f6c\n * @param map\n * @return\n */\n", "func_signal": "public static String toUrlWithSortAndEncode(Map<String, String> map)", "code": "{\n    List<String> keys = new ArrayList<>(map.keySet());\n    Collections.sort(keys);\n\n    String prestr = \"\";\n    for (int i = 0; i < keys.size(); i++) {\n        String key = keys.get(i);\n        String value = map.get(key);\n        if (value == null) {\n            break;\n        }\n        if (i == keys.size() - 1) {//\u62fc\u63a5\u65f6\uff0c\u4e0d\u5305\u62ec\u6700\u540e\u4e00\u4e2a&\u5b57\u7b26\n            prestr = prestr + key + \"=\" + URLEncoder.encode(value);\n        } else {\n            prestr = prestr + key + \"=\" + URLEncoder.encode(value) + \"&\";\n        }\n    }\n    return prestr;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n *  xml \u8f6c map\n *\n * @param strXML XML\u5b57\u7b26\u4e32\n * @return XML\u6570\u636e\u8f6c\u6362\u540e\u7684Map\n * @throws Exception\n */\n", "func_signal": "public static Map<String, String> toMap(String strXML)", "code": "{\n    try {\n        Map<String, String> data = new HashMap<>();\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        InputStream stream = new ByteArrayInputStream(strXML.getBytes(\"UTF-8\"));\n        org.w3c.dom.Document doc = documentBuilder.parse(stream);\n        doc.getDocumentElement().normalize();\n        NodeList nodeList = doc.getDocumentElement().getChildNodes();\n        for (int idx = 0; idx < nodeList.getLength(); ++idx) {\n            Node node = nodeList.item(idx);\n            if (node.getNodeType() == Node.ELEMENT_NODE) {\n                org.w3c.dom.Element element = (org.w3c.dom.Element) node;\n                data.put(element.getNodeName(), element.getTextContent());\n            }\n        }\n        try {\n            stream.close();\n        } catch (Exception ex) {\n            // do nothing\n        }\n        return data;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/XmlUtil.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u8868\u5355\u5b57\u7b26\u4e32\u8f6c\u5316\u6210 hashMap\uff0c\u5c06\u5177\u6709\u4e0b\u5212\u7ebf\u7684key\u8f6c\u6362\u4e3a\u5c0f\u9a7c\u5cf0\n * @param orderinfo,\n * @return\n */\n", "func_signal": "public static HashMap<String, String> form2MapWithCamelCase( String orderinfo)", "code": "{\n    String listinfo[];\n    HashMap<String, String> map = new HashMap<String, String>();\n    listinfo = orderinfo.split(\"&\");\n    for(String s : listinfo)\n    {\n        String list[]  = s.split(\"=\");\n        if(list.length>1)\n        {\n            map.put(CamelCaseUtil.toCamelCase(list[0]),list[1]);\n        }\n    }\n    return map;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * sha256WithRsa \u52a0\u7b7e\n *\n * @param content\n * @param privateKey\n * @return\n * @throws RuntimeException\n */\n", "func_signal": "public static String rsa256Sign(String content, String privateKey)", "code": "{\n\n    try {\n        PrivateKey priKey = getPrivateKeyFromPKCS8(AliPayConstants.SIGN_TYPE_RSA,\n                new ByteArrayInputStream(privateKey.getBytes()));\n\n        Signature signature = java.security.Signature\n                .getInstance(AliPayConstants.SIGN_SHA256RSA_ALGORITHMS);\n\n        signature.initSign(priKey);\n        signature.update(content.getBytes(AliPayConstants.CHARSET_UTF8));\n        byte[] signed = signature.sign();\n\n        return new String(Base64.encodeBase64(signed));\n    } catch (Exception e) {\n        throw new RuntimeException(\"RSAcontent = \" + content + \"; charset = utf-8\", e);\n    }\n\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPaySignature.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u5c06yyyy-mm-dd HH:mm:ss\u683c\u5f0f\u7684\u65e5\u671f\u8f6c\u6362\u4e3aDate\u683c\u5f0f\n * @param dateString\n * @return\n * @throws Exception\n */\n", "func_signal": "public static Date toDate(String dateString) throws Exception", "code": "{\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    return sdf.parse(dateString);\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/DateUtil.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u8868\u5355\u5b57\u7b26\u4e32\u8f6c\u5316\u6210 hashMap\n * @param orderinfo\n * @return\n */\n", "func_signal": "public static HashMap<String, String> form2Map( String orderinfo)", "code": "{\n    String[] listinfo;\n    HashMap<String, String> map = new HashMap<>();\n    listinfo = orderinfo.split(\"&\");\n    for(String s : listinfo)\n    {\n        String[] list = s.split(\"=\", 2);\n        if(list.length > 1)\n        {\n            map.put(list[0], list[1]);\n        }\n    }\n    return map;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u79fb\u9664map\u4e2d\u7a7a\u7684key\u548cvalue\n * @param map\n * @return\n */\n", "func_signal": "public static Map<String, String> removeEmptyKeyAndValue(Map<String, String> map)", "code": "{\n\n    Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\n    while (it.hasNext()){\n        Map.Entry<String, String> entry = it.next();\n        String key = entry.getKey();\n        String value = entry.getValue();\n\n        if (StringUtils.isBlank(key) || StringUtils.isBlank(value)) {\n            it.remove();\n        }\n    }\n\n    return map;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u5bf9\u8c61\u8f6cmap,\u5c06\u5b57\u6bb5\u8f6c\u6362\u4e3a\u4e0b\u5212\u7ebf\u5f62\u5f0f\n * @param obj\n * @return\n */\n", "func_signal": "public static Map<String, String> object2MapWithUnderline(Object obj)", "code": "{\n    Map<String, String> map = new HashMap<>();\n    try {\n        Class<?> clazz = obj.getClass();\n        for (Field field : clazz.getDeclaredFields()) {\n            field.setAccessible(true);\n            String fieldName = field.getName();\n            fieldName = CamelCaseUtil.toUnderlineName(fieldName);\n            String value = field.get(obj) == null ? \"\" : String.valueOf(field.get(obj));\n            map.put(fieldName, value);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return map;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u53bb\u9664\u4e0d\u53c2\u4e0e\u7b7e\u540d\u7684\u53c2\u6570\n * \u652f\u4ed8\u5b9d\u4e2d\u662f\u53bb\u9664sign\u548csign_type\n * @param map\n * @return\n */\n", "func_signal": "public static Map<String, String> removeParamsForAlipaySign(Map<String, String> map)", "code": "{\n    map.remove(\"sign\");\n    map.remove(\"sign_type\");\n\n    return map;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n *  xml\u8f6c\u5bf9\u8c61\n * @param xml\n * @param objClass\n * @return\n */\n", "func_signal": "public static Object toObject(String xml, Class objClass)", "code": "{\n    Serializer serializer = new Persister();\n    try {\n        return serializer.read(objClass, xml);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/XmlUtil.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * map\u8f6c\u4e3aurl\n * \u7ed3\u679c\u7c7b\u4f3c token=abccdssx&sign=ccsacccss\n * @return\n */\n", "func_signal": "public static String toUrl(Map<String, String> map)", "code": "{\n\n    String url = \"\";\n    for(Map.Entry<String, String> entry : map.entrySet()){\n        url += entry.getKey() + \"=\" + entry.getValue() + \"&\";\n    }\n\n    //\u79fb\u9664\u6700\u540e\u4e00\u4e2a&\n    url = StringUtils.substringBeforeLast(url, \"&\");\n\n    return url;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u7b7e\u540d\n * @param params\n * @param signKey\n * @return\n */\n", "func_signal": "public static String sign(Map<String, String> params, String signKey)", "code": "{\n    SortedMap<String, String> sortedMap = new TreeMap<>(params);\n\n    StringBuilder toSign = new StringBuilder();\n    for (String key : sortedMap.keySet()) {\n        String value = params.get(key);\n        if (StringUtils.isNotEmpty(value) && !\"sign\".equals(key) && !\"key\".equals(key)) {\n            toSign.append(key).append(\"=\").append(value).append(\"&\");\n        }\n    }\n\n    toSign.append(\"key=\").append(signKey);\n    return DigestUtils.md5Hex(toSign.toString()).toUpperCase();\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPaySignature.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u5c06map\u4e2d\u7684key\u8f6c\u6362\u6210\u5c0f\u5199\n * @param map\n * @return\n */\n", "func_signal": "public static Map<String, String> keyToLowerCase(Map<String, String> map)", "code": "{\n    Map<String, String> responseMap = new HashMap<>();\n\n    Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\n    while (it.hasNext()){\n        Map.Entry<String, String> entry = it.next();\n        String key = entry.getKey();\n        String value = entry.getValue();\n\n        responseMap.put(key.toLowerCase(), value);\n    }\n\n    return responseMap;\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/utils/MapUtil.java", "commit_date": "2020-09-22 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u5f02\u6b65\u901a\u77e5\n *\n * @param notifyData\n * @return\n */\n", "func_signal": "@Override\npublic PayResponse asyncNotify(String notifyData)", "code": "{\n    try {\n        notifyData = URLDecoder.decode(notifyData, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n    }\n    //\u7b7e\u540d\u6821\u9a8c\n    if (!AliPaySignature.verify(MapUtil.form2Map(notifyData), aliPayConfig.getAliPayPublicKey())) {\n        log.error(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25, response={}\", notifyData);\n        throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25\");\n    }\n    HashMap<String, String> params = MapUtil.form2MapWithCamelCase(notifyData);\n    AliPayAsyncResponse response = MapUtil.mapToObject(params, AliPayAsyncResponse.class);\n    String tradeStatus = response.getTradeStatus();\n    if (!tradeStatus.equals(AliPayConstants.TRADE_FINISHED) &&\n            !tradeStatus.equals(AliPayConstants.TRADE_SUCCESS)) {\n        throw new RuntimeException(\"\u3010\u652f\u4ed8\u5b9d\u652f\u4ed8\u5f02\u6b65\u901a\u77e5\u3011\u53d1\u8d77\u652f\u4ed8, trade_status != SUCCESS | FINISHED\");\n    }\n    return buildPayResponse(response);\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPayServiceImpl.java", "commit_date": "2020-10-17 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * \u6821\u9a8c\u7b7e\u540d\n * @param params\n * @param privateKey\n * @return\n */\n", "func_signal": "public static Boolean verify(Map<String, String> params,  String privateKey)", "code": "{\n    String sign = sign(params, privateKey);\n    return sign.equals(params.get(\"sign\"));\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/WxPaySignature.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * sha1WithRsa \u52a0\u7b7e\n *\n * @param content\n * @param privateKey\n * @return\n * @throws RuntimeException\n */\n", "func_signal": "public static String rsaSign(String content, String privateKey)", "code": "{\n    try {\n        PrivateKey priKey = getPrivateKeyFromPKCS8(AliPayConstants.SIGN_TYPE_RSA,\n                new ByteArrayInputStream(privateKey.getBytes()));\n\n        Signature signature = java.security.Signature\n                .getInstance(AliPayConstants.SIGN_ALGORITHMS);\n\n        signature.initSign(priKey);\n        signature.update(content.getBytes(AliPayConstants.CHARSET_UTF8));\n        byte[] signed = signature.sign();\n\n        return new String(Base64.encodeBase64(signed));\n    } catch (InvalidKeySpecException ie) {\n        throw new RuntimeException(\"RSA\u79c1\u94a5\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u8bf7\u68c0\u67e5\u662f\u5426\u6b63\u786e\u914d\u7f6e\u4e86PKCS8\u683c\u5f0f\u7684\u79c1\u94a5\", ie);\n    } catch (Exception e) {\n        throw new RuntimeException(\"RSAcontent = \" + content + \"; charset = utf-8\" , e);\n    }\n}", "path": "best-pay-sdk/src/main/java/com/lly835/bestpay/service/impl/alipay/AliPaySignature.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "Pay-Group/best-pay-sdk", "stars": 2884, "license": "None", "language": "java", "size": 616}
{"docstring": "/**\n * Replace with the new condition value.\n *\n * @param copy Replace Base\n * @param whenCondition WhenCondition to replace, if Base does not have an item, insert it directly.\n * @param thenCondition ThenCondition to replace, if Base has no items, then insert directly.\n * @return RouteUtils after replacement\n */\n", "func_signal": "public static RouteUtils copyWithReplace(RouteUtils copy, Map<String, MatchPair> whenCondition, Map<String, MatchPair> thenCondition)", "code": "{\n    if (null == copy) {\n        throw new NullPointerException(\"Argument copy is null!\");\n    }\n\n    Map<String, MatchPair> when = new HashMap<String, MatchPair>();\n    when.putAll(copy.getWhenCondition());\n    if (whenCondition != null) {\n        when.putAll(whenCondition);\n    }\n\n    Map<String, MatchPair> then = new HashMap<String, MatchPair>();\n    then.putAll(copy.getThenCondition());\n    if (thenCondition != null) {\n        then.putAll(thenCondition);\n    }\n\n    return new RouteUtils(when, then);\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Call duboo provider and return {@link CompletableFuture}\n *\n * @return java.util.concurrent.CompletableFuture<java.lang.Object>\n * @param: address\n * @param: interfaceName\n * @param: methodName\n * @param: async  Whether the provider is asynchronous is to directly return the {@link CompletableFuture}\n * returned by the provider, not to wrap it as {@link CompletableFuture}\n * @param: paramTypes\n * @param: paramValues\n */\n", "func_signal": "public static CompletableFuture<Object> invoke(String address, String interfaceName,\n                                               String methodName, boolean async, String[] paramTypes,\n                                               Object[] paramValues)", "code": "{\n    CompletableFuture future = null;\n    ReferenceConfig<GenericService> reference = getReferenceConfig(address, interfaceName);\n    if (null != reference) {\n        GenericService genericService = reference.get();\n        if (null != genericService) {\n            if (async) {\n                future = genericService.$invokeAsync(methodName, paramTypes, paramValues);\n            } else {\n                future = CompletableFuture.supplyAsync(() -> genericService.$invoke(methodName, paramTypes, paramValues), EXECUTOR);\n            }\n        }\n        future.exceptionally(ex -> {\n            if (StringUtils.contains(ex.toString(), \"Failed to invoke remote method\")) {\n                removeReferenceConfig(address, interfaceName);\n            }\n            return ex;\n        });\n    }\n    return future;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/utils/ApiDocsDubboGenericUtil.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Convert provider list to ServiceDTO list\n *\n * @param providers list of providers\n * @return ServiceDTO list of front page\n */\n", "func_signal": "public Set<ServiceDTO> convertProviders2DTO(List<Provider> providers)", "code": "{\n    Set<ServiceDTO> result = new TreeSet<>();\n    for (Provider provider : providers) {\n        String app = provider.getApplication();\n        String service = provider.getService();\n        String group = Tool.getGroup(service);\n        String version = Tool.getVersion(service);\n        String interfaze = Tool.getInterface(service);\n        ServiceDTO s = new ServiceDTO();\n        s.setAppName(app);\n        s.setService(interfaze);\n        s.setGroup(group);\n        s.setVersion(version);\n        result.add(s);\n    }\n    return result;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/service/impl/ProviderServiceImpl.java", "commit_date": "2020-07-03 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Whether to match Glob mode. Glob mode is the expression to be interpolated. Glob pattern has more than one, as long as matching a pattern, that match is successful.\n *\n * @param patternsNeedInterpolate Multiple Glob patterns to interpolate\n\u00a0\u00a0\u00a0\u00a0\u00a0* @param interpolateParams Set of variables used for interpolation\n\u00a0\u00a0\u00a0\u00a0\u00a0* @param value Glob mode value\n */\n", "func_signal": "public static boolean isMatchGlobPatternsNeedInterpolate(\n    Collection<String> patternsNeedInterpolate,\n    Map<String, String> interpolateParams, String value)", "code": "{\n    if (patternsNeedInterpolate != null && !patternsNeedInterpolate.isEmpty()) {\n        for (String patternNeedItp : patternsNeedInterpolate) {\n            if (StringUtils.isEmpty(patternNeedItp)) {\n                continue;\n            }\n            // FIXME ERROR!! The original implementation, here and only the first non-blank pattern comparison, return the corresponding result!\n            // FIXME ERROR!! Should be confirmed with Liang Fei!!\n            String pattern = interpolate(patternNeedItp, interpolateParams);\n            if (isMatchGlobPattern(pattern, value)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java", "commit_date": "2019-02-02 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "// Notification of of any service with any type (override\u3001subcribe\u3001route\u3001provider) is full.\n", "func_signal": "@Override\npublic void notify(List<URL> urls)", "code": "{\n    if (urls == null || urls.isEmpty()) {\n        return;\n    }\n    // Map<category, Map<servicename, Map<Long, URL>>>\n    final Map<String, Map<String, Map<String, URL>>> categories = new HashMap<>();\n    String interfaceName = null;\n    for (URL url : urls) {\n        String category = url.getParameter(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY);\n        // NOTE: group and version in empty protocol is *\n        if (Constants.EMPTY_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {\n            ConcurrentMap<String, Map<String, URL>> services = registryCache.get(category);\n            if (services != null) {\n                String group = url.getParameter(Constants.GROUP_KEY);\n                String version = url.getParameter(Constants.VERSION_KEY);\n                // NOTE: group and version in empty protocol is *\n                if (!Constants.ANY_VALUE.equals(group) && !Constants.ANY_VALUE.equals(version)) {\n                    services.remove(url.getServiceKey());\n                } else {\n                    for (Map.Entry<String, Map<String, URL>> serviceEntry : services.entrySet()) {\n                        String service = serviceEntry.getKey();\n                        if (Tool.getInterface(service).equals(url.getServiceInterface())\n                                && (Constants.ANY_VALUE.equals(group) || StringUtils.isEquals(group, Tool.getGroup(service)))\n                                && (Constants.ANY_VALUE.equals(version) || StringUtils.isEquals(version, Tool.getVersion(service)))) {\n                            services.remove(service);\n                        }\n                    }\n                }\n            }\n        } else {\n            if (StringUtils.isEmpty(interfaceName)) {\n                interfaceName = url.getServiceInterface();\n            }\n            Map<String, Map<String, URL>> services = categories.get(category);\n            if (services == null) {\n                services = new HashMap<>();\n                categories.put(category, services);\n            }\n            String service = url.getServiceKey();\n            Map<String, URL> ids = services.get(service);\n            if (ids == null) {\n                ids = new HashMap<>();\n                services.put(service, ids);\n            }\n\n            // Make sure we use the same ID for the same URL\n            if (URL_IDS_MAPPER.containsKey(url.toFullString())) {\n                ids.put(URL_IDS_MAPPER.get(url.toFullString()), url);\n            } else {\n                String md5 = CoderUtil.MD5_16bit(url.toFullString());\n                ids.put(md5, url);\n                URL_IDS_MAPPER.putIfAbsent(url.toFullString(), md5);\n            }\n        }\n    }\n    if (categories.size() == 0) {\n        return;\n    }\n    for (Map.Entry<String, Map<String, Map<String, URL>>> categoryEntry : categories.entrySet()) {\n        String category = categoryEntry.getKey();\n        ConcurrentMap<String, Map<String, URL>> services = registryCache.get(category);\n        if (services == null) {\n            services = new ConcurrentHashMap<String, Map<String, URL>>();\n            registryCache.put(category, services);\n        } else {// Fix map can not be cleared when service is unregistered: when a unique \u201cgroup/service:version\u201d service is unregistered, but we still have the same services with different version or group, so empty protocols can not be invoked.\n            Set<String> keys = new HashSet<String>(services.keySet());\n            for (String key : keys) {\n                if (Tool.getInterface(key).equals(interfaceName) && !categoryEntry.getValue().entrySet().contains(key)) {\n                    services.remove(key);\n                }\n            }\n        }\n        services.putAll(categoryEntry.getValue());\n    }\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/service/RegistryServerSync.java", "commit_date": "2019-05-16 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Find the string that matches the Glob pattern. Multiple patterns, as long as a match pattern, it returns this string.\n */\n", "func_signal": "public static Set<String> filterByGlobPattern(Collection<String> patterns, Collection<String> values)", "code": "{\n    Set<String> ret = new HashSet<String>();\n    if (null == patterns || values == null || patterns.isEmpty() || values.isEmpty()) {\n        return ret;\n    }\n\n    for (String p : patterns) {\n        for (String v : values) {\n            if (isMatchGlobPattern(p, v)) {\n                ret.add(v);\n            }\n        }\n    }\n    return ret;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java", "commit_date": "2019-02-02 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Replace the value of the url parameter.\n */\n", "func_signal": "public static String replaceParameter(String query, String key, String value)", "code": "{\n    if (query == null || query.length() == 0) {\n        return key + \"=\" + value;\n    }\n    if (query.indexOf(key + \"=\") == -1) {\n        return query + \"&\" + key + \"=\" + value;\n    }\n    Pattern pattern = REPLACE_PARAMETER_PATTERNS.get(key);\n    if (pattern == null) {\n        pattern = Pattern.compile(key.replaceAll(\"([^(_0-9A-Za-z)])\", \"\\\\\\\\$0\") + \"=[^&]+\");\n    }\n    Matcher matcher = pattern.matcher(query);\n    StringBuffer sb = new StringBuffer();\n    while (matcher.find()) {\n        matcher.appendReplacement(sb, (key + \"=\" + value).replace(\"$\", \"\\\\$\"));\n    }\n    matcher.appendTail(sb);\n    return sb.toString();\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java", "commit_date": "2019-02-02 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * @see #parse(String)\n * @throws RuntimeException This is an wrapper exception for the {@link ParseException} thrown by the {@link #parse (String)} method.\n */\n", "func_signal": "public static RouteUtils parseQuitely(Route conditionRoute)", "code": "{\n    try {\n        return parse(conditionRoute);\n    } catch (ParseException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Whether the sample passed the conditions.\n * <p>\n * If there is a Key in the KV for the sample, there is a corresponding MatchPair, and Value does not pass through MatchPair; {@code false} is returned; otherwise, {@code true} is returned.\n *\n * @see MatchPair#pass(String)\n */\n", "func_signal": "public static boolean matchCondition(Map<String, String> sample,\n                                     Map<String, MatchPair> condition)", "code": "{\n    for (Map.Entry<String, String> entry : sample.entrySet()) {\n        String key = entry.getKey();\n\n        MatchPair pair = condition.get(key);\n        if (pair != null && !pair.pass(entry.getValue())) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Match Glob mode. The current implementation only supports <code>*</ code> and supports only one. Does not support <code>?</ Code>.\n * @return For code or value of <code> null </ code>, return <code> false </ code> directly.\n */\n", "func_signal": "public static boolean isMatchGlobPattern(String pattern, String value)", "code": "{\n    if (\"*\".equals(pattern))\n        return true;\n    if ((pattern == null || pattern.length() == 0)\n            && (value == null || value.length() == 0))\n        return true;\n    if ((pattern == null || pattern.length() == 0)\n            || (value == null || value.length() == 0))\n        return false;\n\n    int i = pattern.lastIndexOf('*');\n    // No asterisk found\n    if (i == -1) {\n        return value.equals(pattern);\n    }\n    // Asterisk at the end\n    else if (i == pattern.length() - 1) {\n        return value.startsWith(pattern.substring(0, i));\n    }\n    // Asterisk at the beginning\n    else if (i == 0) {\n        return value.endsWith(pattern.substring(i + 1));\n    }\n    // Asterisk in the middle of the string\n    else {\n        String prefix = pattern.substring(0, i);\n        String suffix = pattern.substring(i + 1);\n        return value.startsWith(prefix) && value.endsWith(suffix);\n    }\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java", "commit_date": "2019-02-02 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Whether a given value is matched by the {@link MatchPair}.\n * return {@code false}, if\n * <ol>\n * <li>value is in unmatches\n * <li>matches is not null, but value is not in matches.\n * </ol>\n * otherwise, return<code>true</code>\u3002\n */\n", "func_signal": "public boolean pass(String sample)", "code": "{\n    if (unmatches.contains(sample)) return false;\n    if (matches.isEmpty()) return true;\n    return matches.contains(sample);\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "// Automatic generation with Eclipse\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((matches == null) ? 0 : matches.hashCode());\n    result = prime * result + ((unmatches == null) ? 0 : unmatches.hashCode());\n    return result;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "// FIXME Remove such method calls\n", "func_signal": "public static String join(Set<String> valueSet)", "code": "{\n    StringBuilder sb = new StringBuilder(128);\n    join(sb, valueSet);\n    return sb.toString();\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * remove cached proxy object.\n * @param address\n * @param interfaceName\n * @return void\n */\n", "func_signal": "private static void removeReferenceConfig(String address, String interfaceName)", "code": "{\n    removeRegistryConfig(address);\n    referenceCache.remove(address + \"/\" + interfaceName);\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/utils/ApiDocsDubboGenericUtil.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Parse Query String into Map. For strings that have only Key, key3 = </ code> is ignored.\n *\n * @param keyPrefix In the output of the Map Key plus a unified prefix.\n * @param query Query String\uff0cFor example: <code>key1=value1&key2=value2</code>\n * @return When Query String is <code>key1=value1&key2=value2</code>, and prefix is <code>pre.</code>,\n *         then <code>Map{pre.key1=value1, pre.key=value2}</code> will be returned.\n */\n// FIXME Is it reasonable to throw an IllegalStateException??\n", "func_signal": "public static Map<String, String> parseQuery(String keyPrefix, String query)", "code": "{\n    if (query == null)\n        return new HashMap<String, String>();\n    if (keyPrefix == null)\n        keyPrefix = \"\";\n\n    Matcher matcher = QUERY_PATTERN.matcher(query);\n    Map<String, String> routeQuery = new HashMap<String, String>();\n    String key = null;\n    while (matcher.find()) { // Match one by one\n        String separator = matcher.group(1);\n        String content = matcher.group(2);\n        if (separator == null || separator.length() == 0\n                || \"&\".equals(separator)) {\n            if (key != null)\n                throw new IllegalStateException(\"Illegal query string \\\"\"\n                        + query + \"\\\", The error char '\" + separator\n                        + \"' at index \" + matcher.start() + \" before \\\"\"\n                        + content + \"\\\".\");\n            key = content;\n        } else if (\"=\".equals(separator)) {\n            if (key == null)\n                throw new IllegalStateException(\"Illegal query string \\\"\"\n                        + query + \"\\\", The error char '\" + separator\n                        + \"' at index \" + matcher.start() + \" before \\\"\"\n                        + content + \"\\\".\");\n            routeQuery.put(keyPrefix + key, content);\n            key = null;\n        } else {\n            if (key == null)\n                throw new IllegalStateException(\"Illegal query string \\\"\"\n                        + query + \"\\\", The error char '\" + separator\n                        + \"' at index \" + matcher.start() + \" before \\\"\"\n                        + content + \"\\\".\");\n        }\n    }\n    /*if (key != null)\n    throw new IllegalStateException(\"Illegal route rule \\\"\" + query\n            + \"\\\", The error in the end char: \" + key);*/\n    return routeQuery;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/ParseUtils.java", "commit_date": "2019-02-02 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Parse the RouteUtils as a string into an object.\n *\n * @throws ParseException RouteUtils string format is wrong. The following input conditions, RouteUtils are illegal.\n * <ul> <li> input is <code>null</code>\u3002\n * <li> input is \"\" or \" \"\u3002\n * <li> input Rule doesn't have a When Condition\n * <li> input Rule doesn't have a Then Condition\n * </ul>\n */\n", "func_signal": "public static RouteUtils parse(Route conditionRoute) throws ParseException", "code": "{\n    if (conditionRoute == null)\n        throw new ParseException(\"null conditionRoute!\", 0);\n\n    if (conditionRoute.getMatchRule() == null && conditionRoute.getFilterRule() == null) {\n        return parse(conditionRoute.getRule());\n    }\n\n    return parse(conditionRoute == null ? null : conditionRoute.getMatchRule(), conditionRoute == null ? null : conditionRoute.getFilterRule());\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Get registry information.\n *\n * @param address Address of Registration Center\n * @return org.apache.dubbo.config.RegistryConfig\n */\n", "func_signal": "private static RegistryConfig getRegistryConfig(String address)", "code": "{\n    RegistryConfig registryConfig = registryConfigCache.get(address);\n    if (null == registryConfig) {\n        registryConfig = new RegistryConfig();\n        registryConfig.setAddress(address);\n        registryConfig.setRegister(false);\n        registryConfigCache.put(address, registryConfig);\n    }\n    return registryConfig;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/utils/ApiDocsDubboGenericUtil.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "// TODO At present, the multiple Key of Condition is in disorder. Should we sort it?\n", "func_signal": "public static void contidionToString(StringBuilder sb, Map<String, MatchPair> condition)", "code": "{\n    boolean isFirst = true;\n    for (Entry<String, MatchPair> entry : condition.entrySet()) {\n        String keyName = entry.getKey();\n        MatchPair p = entry.getValue();\n\n        @SuppressWarnings(\"unchecked\")\n        Set<String>[] setArray = new Set[]{p.matches, p.unmatches};\n        String[] opArray = {\" = \", \" != \"};\n\n        for (int i = 0; i < setArray.length; ++i) {\n            if (setArray[i].isEmpty()) {\n                continue;\n            }\n            if (isFirst) {\n                isFirst = false;\n            } else {\n                sb.append(\" & \");\n            }\n\n            sb.append(keyName);\n            sb.append(opArray[i]);\n            join(sb, setArray[i]);\n        }\n    }\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "// Automatic generation with Eclipse\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((thenCondition == null) ? 0 : thenCondition.hashCode());\n    result = prime * result + ((whenCondition == null) ? 0 : whenCondition.hashCode());\n    return result;\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/RouteUtils.java", "commit_date": "2019-05-10 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "// Map<category, Map<servicename, Map<Long, URL>>>\n", "func_signal": "public static <SM extends Map<String, Map<String, URL>>> Map<String, URL> filterFromCategory(Map<String, SM> urls, Map<String, String> filter)", "code": "{\n    String c = (String) filter.get(Constants.CATEGORY_KEY);\n    if (c == null) throw new IllegalArgumentException(\"no category\");\n\n    filter.remove(Constants.CATEGORY_KEY);\n    return filterFromService(urls.get(c), filter);\n}", "path": "dubbo-admin/dubbo-admin-server/src/main/java/org/apache/dubbo/admin/common/util/SyncUtils.java", "commit_date": "2019-08-19 00:00:00", "repo_name": "apache/dubbo-admin", "stars": 3943, "license": "apache-2.0", "language": "java", "size": 14286}
{"docstring": "/**\n * Attaches it to the content view with specified LayoutParams.\n * @param layoutParams\n */\n", "func_signal": "public void attach(ViewGroup.LayoutParams layoutParams)", "code": "{\n    if(systemOverlay) {\n        try {\n            getWindowManager().addView(this, layoutParams);\n        }\n        catch(SecurityException e) {\n            throw new SecurityException(\"Your application must have SYSTEM_ALERT_WINDOW \" +\n                    \"permission to create a system window.\");\n        }\n    }\n    else {\n        ((ViewGroup) getActivityContentView()).addView(this, layoutParams);\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionButton.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Adds a sub action view that is already alive, but not added to a parent View.\n * @param subActionView a view for the menu\n * @return the builder object itself\n */\n", "func_signal": "public Builder addSubActionView(View subActionView)", "code": "{\n    if(systemOverlay) {\n        throw new RuntimeException(\"Sub action views cannot be added without \" +\n                \"definite width and height. Please use \" +\n                \"other methods named addSubActionView\");\n    }\n    return this.addSubActionView(subActionView, 0, 0);\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Finds and returns the main content view from the Activity context.\n * @return the main content view\n */\n", "func_signal": "public View getActivityContentView()", "code": "{\n    try {\n        return ((Activity) mainActionView.getContext()).getWindow().getDecorView().findViewById(android.R.id.content);\n    }\n    catch(ClassCastException e) {\n        throw new ClassCastException(\"Please provide an Activity context for this FloatingActionMenu.\");\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Detaches it from the container view.\n */\n", "func_signal": "public void detach()", "code": "{\n    if(systemOverlay) {\n        getWindowManager().removeView(this);\n    }\n    else {\n        ((ViewGroup) getActivityContentView()).removeView(this);\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionButton.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Sets a content view that will be displayed inside this FloatingActionButton.\n * @param contentView\n */\n", "func_signal": "public void setContentView(View contentView, FrameLayout.LayoutParams contentParams)", "code": "{\n    this.contentView = contentView;\n    FrameLayout.LayoutParams params;\n    if(contentParams == null ){\n        params = new FrameLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.CENTER);\n        final int margin = getResources().getDimensionPixelSize(R.dimen.action_button_content_margin);\n        params.setMargins(margin, margin, margin, margin);\n    }\n    else {\n        params = contentParams;\n    }\n    params.gravity = Gravity.CENTER;\n\n    contentView.setClickable(false);\n    this.addView(contentView, params);\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionButton.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Attaches the whole menu around a main action view, usually a button.\n * All the calculations are made according to this action view.\n * @param actionView\n * @return the builder object itself\n */\n", "func_signal": "public Builder attachTo(View actionView)", "code": "{\n    this.actionView = actionView;\n    return this;\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Retrieves the screen size from the Activity context\n * @return the screen size as a Point object\n */\n", "func_signal": "private Point getScreenSize()", "code": "{\n    Point size = new Point();\n    getWindowManager().getDefaultDisplay().getSize(size);\n    return size;\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Sets the current animation handler to the specified MenuAnimationHandler child\n * @param animationHandler a MenuAnimationHandler child\n * @return the builder object itself\n */\n", "func_signal": "public Builder setAnimationHandler(MenuAnimationHandler animationHandler)", "code": "{\n    this.animationHandler = animationHandler;\n    return this;\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Constructor that takes parameters collected using {@link FloatingActionMenu.Builder}\n * @param context a reference to the current context\n * @param layoutParams\n * @param theme\n * @param backgroundDrawable\n * @param position\n * @param contentView\n * @param contentParams\n */\n", "func_signal": "public FloatingActionButton(Context context, ViewGroup.LayoutParams layoutParams, int theme,\n                            Drawable backgroundDrawable, int position, View contentView,\n                            FrameLayout.LayoutParams contentParams,\n                            boolean systemOverlay)", "code": "{\n    super(context);\n    this.systemOverlay = systemOverlay;\n\n    if(!systemOverlay && !(context instanceof Activity)) {\n        throw new RuntimeException(\"Given context must be an instance of Activity, \"\n                +\"since this FAB is not a systemOverlay.\");\n    }\n\n    setPosition(position, layoutParams);\n\n    // If no custom backgroundDrawable is specified, use the background drawable of the theme.\n    if(backgroundDrawable == null) {\n        if(theme == THEME_LIGHT)\n            backgroundDrawable = context.getResources().getDrawable(R.drawable.button_action_selector);\n        else\n            backgroundDrawable = context.getResources().getDrawable(R.drawable.button_action_dark_selector);\n    }\n    setBackgroundResource(backgroundDrawable);\n    if(contentView != null) {\n        setContentView(contentView, contentParams);\n    }\n    setClickable(true);\n\n    attach(layoutParams);\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionButton.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Finds and returns the main content view from the Activity context.\n * @return the main content view\n */\n", "func_signal": "public View getActivityContentView()", "code": "{\n    try {\n        return ((Activity) getContext()).getWindow().getDecorView().findViewById(android.R.id.content);\n    }\n    catch(ClassCastException e) {\n        throw new ClassCastException(\"Please provide an Activity context for this FloatingActionButton.\");\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionButton.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Calculates the desired positions of all items.\n * @return getActionViewCenter()\n */\n", "func_signal": "private Point calculateItemPositions()", "code": "{\n    // Create an arc that starts from startAngle and ends at endAngle\n    // in an area that is as large as 4*radius^2\n    final Point center = getActionViewCenter();\n    RectF area = new RectF(center.x - radius, center.y - radius, center.x + radius, center.y + radius);\n\n    Path orbit = new Path();\n    orbit.addArc(area, startAngle, endAngle - startAngle);\n\n    PathMeasure measure = new PathMeasure(orbit, false);\n\n    // Prevent overlapping when it is a full circle\n    int divisor;\n    if(Math.abs(endAngle - startAngle) >= 360 || subActionItems.size() <= 1) {\n        divisor = subActionItems.size();\n    }\n    else {\n        divisor = subActionItems.size() -1;\n    }\n\n    // Measure this path, in order to find points that have the same distance between each other\n    for(int i=0; i<subActionItems.size(); i++) {\n        float[] coords = new float[] {0f, 0f};\n        measure.getPosTan((i) * measure.getLength() / divisor, coords, null);\n        // get the x and y values of these points and set them to each of sub action items.\n        subActionItems.get(i).x = (int) coords[0] - subActionItems.get(i).width / 2;\n        subActionItems.get(i).y = (int) coords[1] - subActionItems.get(i).height / 2;\n    }\n    return center;\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Recalculates the positions of each sub action item on demand.\n */\n", "func_signal": "public void updateItemPositions()", "code": "{\n    // Only update if the menu is currently open\n    if(!isOpen()) {\n        return;\n    }\n    // recalculate x,y coordinates of Items\n    calculateItemPositions();\n\n    // Simply update layout params for each item\n    for (int i = 0; i < subActionItems.size(); i++) {\n        // This is currently done by giving them large margins\n        final FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(subActionItems.get(i).width, subActionItems.get(i).height, Gravity.TOP | Gravity.LEFT);\n        params.setMargins(subActionItems.get(i).x, subActionItems.get(i).y, 0, 0);\n        subActionItems.get(i).view.setLayoutParams(params);\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Sets a content view with custom LayoutParams that will be displayed inside this SubActionButton.\n * @param contentView\n * @param params\n */\n", "func_signal": "public void setContentView(View contentView, FrameLayout.LayoutParams params)", "code": "{\n    if(params == null) {\n        params = new FrameLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.CENTER);\n        final int margin = getResources().getDimensionPixelSize(R.dimen.sub_action_button_content_margin);\n        params.setMargins(margin, margin, margin, margin);\n    }\n\n    contentView.setClickable(false);\n    this.addView(contentView, params);\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/SubActionButton.java", "commit_date": "2014-12-25 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Simply opens the menu by doing necessary calculations.\n * @param animated if true, this action is executed by the current {@link MenuAnimationHandler}\n */\n", "func_signal": "public void open(boolean animated)", "code": "{\n\n    // Get the center of the action view from the following function for efficiency\n    // populate destination x,y coordinates of Items\n    Point center = calculateItemPositions();\n\n    WindowManager.LayoutParams overlayParams = null;\n\n    if(systemOverlay) {\n        // If this is a system overlay menu, use the overlay container and place it behind\n        // the main action button so that all the views will be added into it.\n        attachOverlayContainer();\n\n        overlayParams = (WindowManager.LayoutParams) overlayContainer.getLayoutParams();\n    }\n\n    if(animated && animationHandler != null) {\n        // If animations are enabled and we have a MenuAnimationHandler, let it do the heavy work\n        if(animationHandler.isAnimating()) {\n            // Do not proceed if there is an animation currently going on.\n            return;\n        }\n\n        for (int i = 0; i < subActionItems.size(); i++) {\n            // It is required that these Item views are not currently added to any parent\n            // Because they are supposed to be added to the Activity content view,\n            // just before the animation starts\n            if (subActionItems.get(i).view.getParent() != null) {\n                throw new RuntimeException(\"All of the sub action items have to be independent from a parent.\");\n            }\n\n            // Initially, place all items right at the center of the main action view\n            // Because they are supposed to start animating from that point.\n            final FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(subActionItems.get(i).width, subActionItems.get(i).height, Gravity.TOP | Gravity.LEFT);\n\n            if(systemOverlay) {\n                params.setMargins(center.x - overlayParams.x - subActionItems.get(i).width / 2, center.y - overlayParams.y - subActionItems.get(i).height / 2, 0, 0);\n            }\n            else {\n                params.setMargins(center.x - subActionItems.get(i).width / 2, center.y - subActionItems.get(i).height / 2, 0, 0);\n            }\n            addViewToCurrentContainer(subActionItems.get(i).view, params);\n        }\n        // Tell the current MenuAnimationHandler to animate from the center\n        animationHandler.animateMenuOpening(center);\n    }\n    else {\n        // If animations are disabled, just place each of the items to their calculated destination positions.\n        for (int i = 0; i < subActionItems.size(); i++) {\n            // This is currently done by giving them large margins\n\n            final FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(subActionItems.get(i).width, subActionItems.get(i).height, Gravity.TOP | Gravity.LEFT);\n            if(systemOverlay) {\n                params.setMargins(subActionItems.get(i).x - overlayParams.x, subActionItems.get(i).y - overlayParams.y, 0, 0);\n                subActionItems.get(i).view.setLayoutParams(params);\n            }\n            else {\n                params.setMargins(subActionItems.get(i).x, subActionItems.get(i).y, 0, 0);\n                subActionItems.get(i).view.setLayoutParams(params);\n                // Because they are placed into the main content view of the Activity,\n                // which is itself a FrameLayout\n            }\n            addViewToCurrentContainer(subActionItems.get(i).view, params);\n        }\n    }\n    // do not forget to specify that the menu is open.\n    open = true;\n\n    if(stateChangeListener != null) {\n        stateChangeListener.onMenuOpened(this);\n    }\n\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Gets the coordinates of the main action view\n * This method should only be called after the main layout of the Activity is drawn,\n * such as when a user clicks the action button.\n * @return a Point containing x and y coordinates of the top left corner of action view\n */\n", "func_signal": "private Point getActionViewCoordinates()", "code": "{\n    int[] coords = new int[2];\n    // This method returns a x and y values that can be larger than the dimensions of the device screen.\n    mainActionView.getLocationOnScreen(coords);\n\n    // So, we need to deduce the offsets.\n    if(systemOverlay) {\n        coords[1] -= getStatusBarHeight();\n    }\n    else {\n        Rect activityFrame = new Rect();\n        getActivityContentView().getWindowVisibleDisplayFrame(activityFrame);\n        coords[0] -= (getScreenSize().x - getActivityContentView().getMeasuredWidth());\n        coords[1] -= (activityFrame.height() + activityFrame.top - getActivityContentView().getMeasuredHeight());\n    }\n    return new Point(coords[0], coords[1]);\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Sets the position of the button by calculating its Gravity from the position parameter\n * @param position one of 8 specified positions.\n * @param layoutParams should be either FrameLayout.LayoutParams or WindowManager.LayoutParams\n */\n", "func_signal": "public void setPosition(int position, ViewGroup.LayoutParams layoutParams)", "code": "{\n\n    boolean setDefaultMargin = false;\n\n    int gravity;\n    switch (position) {\n        case POSITION_TOP_CENTER:\n            gravity = Gravity.TOP | Gravity.CENTER_HORIZONTAL;\n            break;\n        case POSITION_TOP_RIGHT:\n            gravity = Gravity.TOP | Gravity.RIGHT;\n            break;\n        case POSITION_RIGHT_CENTER:\n            gravity = Gravity.RIGHT | Gravity.CENTER_VERTICAL;\n            break;\n        case POSITION_BOTTOM_CENTER:\n            gravity = Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;\n            break;\n        case POSITION_BOTTOM_LEFT:\n            gravity = Gravity.BOTTOM | Gravity.LEFT;\n            break;\n        case POSITION_LEFT_CENTER:\n            gravity = Gravity.LEFT | Gravity.CENTER_VERTICAL;\n            break;\n        case POSITION_TOP_LEFT:\n            gravity = Gravity.TOP | Gravity.LEFT;\n            break;\n        case POSITION_BOTTOM_RIGHT:\n        default:\n            setDefaultMargin = true;\n            gravity = Gravity.BOTTOM | Gravity.RIGHT;\n            break;\n    }\n    if(!systemOverlay) {\n        try {\n            FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) layoutParams;\n            lp.gravity = gravity;\n            setLayoutParams(lp);\n        } catch (ClassCastException e) {\n            throw new ClassCastException(\"layoutParams must be an instance of \" +\n                    \"FrameLayout.LayoutParams, since this FAB is not a systemOverlay\");\n        }\n    }\n    else {\n        try {\n            WindowManager.LayoutParams lp = (WindowManager.LayoutParams) layoutParams;\n            lp.gravity = gravity;\n            if(setDefaultMargin) {\n                int margin =  getContext().getResources().getDimensionPixelSize(R.dimen.action_button_margin);\n                lp.x = margin;\n                lp.y = margin;\n            }\n            setLayoutParams(lp);\n        } catch(ClassCastException e) {\n            throw new ClassCastException(\"layoutParams must be an instance of \" +\n                    \"WindowManager.LayoutParams, since this FAB is a systemOverlay\");\n        }\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionButton.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Closes the menu.\n * @param animated if true, this action is executed by the current {@link MenuAnimationHandler}\n */\n", "func_signal": "public void close(boolean animated)", "code": "{\n    // If animations are enabled and we have a MenuAnimationHandler, let it do the heavy work\n    if(animated && animationHandler != null) {\n        if(animationHandler.isAnimating()) {\n            // Do not proceed if there is an animation currently going on.\n            return;\n        }\n        animationHandler.animateMenuClosing(getActionViewCenter());\n    }\n    else {\n        // If animations are disabled, just detach each of the Item views from the Activity content view.\n        for (int i = 0; i < subActionItems.size(); i++) {\n            removeViewFromCurrentContainer(subActionItems.get(i).view);\n        }\n        detachOverlayContainer();\n    }\n    // do not forget to specify that the menu is now closed.\n    open = false;\n\n    if(stateChangeListener != null) {\n        stateChangeListener.onMenuClosed(this);\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Inflates a new view from the specified resource id and adds it as a sub action view.\n * @param resId the resource id reference for the view\n * @param context a valid context\n * @return the builder object itself\n */\n", "func_signal": "public Builder addSubActionView(int resId, Context context)", "code": "{\n    LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    View view = inflater.inflate(resId, null, false);\n    view.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);\n    return this.addSubActionView(view, view.getMeasuredWidth(), view.getMeasuredHeight());\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Constructor that takes the parameters collected using {@link FloatingActionMenu.Builder}\n * @param mainActionView\n * @param startAngle\n * @param endAngle\n * @param radius\n * @param subActionItems\n * @param animationHandler\n * @param animated\n */\n", "func_signal": "public FloatingActionMenu(final View mainActionView,\n                          int startAngle,\n                          int endAngle,\n                          int radius,\n                          List<Item> subActionItems,\n                          MenuAnimationHandler animationHandler,\n                          boolean animated,\n                          MenuStateChangeListener stateChangeListener,\n                          final boolean systemOverlay)", "code": "{\n    this.mainActionView = mainActionView;\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    this.radius = radius;\n    this.subActionItems = subActionItems;\n    this.animationHandler = animationHandler;\n    this.animated = animated;\n    this.systemOverlay = systemOverlay;\n    // The menu is initially closed.\n    this.open = false;\n\n    this.stateChangeListener = stateChangeListener;\n\n    // Listen click events on the main action view\n    // In the future, touch and drag events could be listened to offer an alternative behaviour\n    this.mainActionView.setClickable(true);\n    this.mainActionView.setOnClickListener(new ActionViewClickListener());\n\n    // Do not forget to set the menu as self to our customizable animation handler\n    if(animationHandler != null) {\n        animationHandler.setMenu(this);\n    }\n\n    if(systemOverlay) {\n        overlayContainer = new FrameLayout(mainActionView.getContext());\n    }\n    else {\n        overlayContainer = null; // beware NullPointerExceptions!\n    }\n\n    // Find items with undefined sizes\n    for(final Item item : subActionItems) {\n        if(item.width == 0 || item.height == 0) {\n            if(systemOverlay) {\n                throw new RuntimeException(\"Sub action views cannot be added without \" +\n                        \"definite width and height.\");\n            }\n            // Figure out the size by temporarily adding it to the Activity content view hierarchy\n            // and ask the size from the system\n            addViewToCurrentContainer(item.view);\n            // Make item view invisible, just in case\n            item.view.setAlpha(0);\n            // Wait for the right time\n            item.view.post(new ItemViewQueueListener(item));\n        }\n    }\n\n    if(systemOverlay) {\n        orientationListener = new OrientationEventListener(mainActionView.getContext(), SensorManager.SENSOR_DELAY_UI) {\n            private int lastState = -1;\n\n            public void onOrientationChanged(int orientation) {\n\n                Display display = getWindowManager().getDefaultDisplay();\n                if(display.getRotation() != lastState) {\n                    lastState = display.getRotation();\n\n                    //\n                    if(isOpen()) {\n                        close(false);\n                    }\n                }\n            }\n        };\n        orientationListener.enable();\n    }\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Returns the center point of the main action view\n * @return the action view center point\n */\n", "func_signal": "public Point getActionViewCenter()", "code": "{\n    Point point = getActionViewCoordinates();\n    point.x += mainActionView.getMeasuredWidth() / 2;\n    point.y += mainActionView.getMeasuredHeight() / 2;\n    return point;\n}", "path": "CircularFloatingActionMenu/library/src/main/java/com/oguzdev/circularfloatingactionmenu/library/FloatingActionMenu.java", "commit_date": "2014-12-29 00:00:00", "repo_name": "oguzbilgener/CircularFloatingActionMenu", "stars": 2746, "license": "mit", "language": "java", "size": 3127}
{"docstring": "/**\n * Inserts item x at position k, maintaining heap invariant by promoting x\n * up the tree until it is greater than or equal to its parent, or is the\n * root.\n * <p/>\n * To simplify and speed up coercions and comparisons. the Comparable and\n * Comparator versions are separated into different methods that are\n * otherwise identical. (Similarly for siftDown.)\n *\n * @param k the position to fill\n * @param x the item to insert\n */\n", "func_signal": "private void siftUp(int k, E x)", "code": "{\n    Comparable<? super E> key = (Comparable<? super E>) x;\n    while (k > 0) {\n        int parent = (k - 1) >>> 1;\n        Object e = queue[parent];\n        if (key.compareTo((E) e) >= 0)\n            break;\n        queue[k] = e;\n        k = parent;\n    }\n    queue[k] = key;\n}", "path": "http-kit/src/java/org/httpkit/PriorityQueue.java", "commit_date": "2013-04-25 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// like javascript's encodeURI\n// https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURI\n", "func_signal": "public static String encodeURI(String url)", "code": "{\n    byte[] bytes = url.getBytes(UTF_8);\n    DynamicBytes buffer = new DynamicBytes(bytes.length * 2);\n    boolean e = true;\n    for (byte b : bytes) {\n        int c = b < 0 ? b + 256 : b;\n        if (c < '!' || c > '~') {\n            e = true;\n        } else {\n            switch (c) {\n                case '\"':\n                    // https://github.com/http-kit/http-kit/issues/70\n//                    case '%':\n                case '<':\n                case '>':\n                case '\\\\':\n                case '^':\n                case '`':\n                case '{':\n                case '}':\n                case '|':\n                    e = true;\n                    break;\n                default:\n                    e = false;\n            }\n        }\n        if (e) {\n            buffer.append((byte) '%');\n            buffer.append(ALPHAS[c / 16]);\n            buffer.append(ALPHAS[c % 16]);\n        } else {\n            buffer.append(b);\n        }\n    }\n    return new String(buffer.get(), 0, buffer.length(), UTF_8);\n}", "path": "http-kit/src/java/org/httpkit/HttpUtils.java", "commit_date": "2020-08-22 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// unit test in utils-test.clj\n", "func_signal": "public static Charset detectCharset(Map<String, Object> headers, DynamicBytes body)", "code": "{\n    // 1. first from http header: Content-Type: text/html; charset=utf8\n    Charset result = parseCharset(getStringValue(headers, CONTENT_TYPE));\n    if (result == null) {\n        // 2. decode a little to find charset=???\n        String s = new String(body.get(), 0, min(512, body.length()), ASCII);\n        // content=\"text/html;charset=gb2312\"\n        result = guess(s, CHARSET);\n        if (result == null) {\n            // for xml\n            Matcher matcher = ENCODING.matcher(s);\n            if (matcher.find()) {\n                try {\n                    result = Charset.forName(matcher.group(2));\n                } catch (Exception ignore) {\n                }\n            }\n        }\n    }\n    // default utf8\n    return result == null ? UTF_8 : result;\n}", "path": "http-kit/src/java/org/httpkit/HttpUtils.java", "commit_date": "2020-08-22 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// request + request sent to server, wait for 2 server responses\n", "func_signal": "public static String get2(String url) throws URISyntaxException, IOException", "code": "{\n    URI uri = new URI(url);\n    InetSocketAddress addr = HttpUtils.getServerAddr(uri);\n\n    Socket s = new Socket();\n    s.connect(addr);\n    OutputStream os = s.getOutputStream();\n\n    String request = \"GET \" + HttpUtils.getPath(uri)\n            + \" HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\";\n\n    os.write((request + request).getBytes());\n    os.flush();\n\n    InputStream is = s.getInputStream();\n\n    byte[] buffer = new byte[8096];\n    int read = is.read(buffer);\n    s.close();\n    return new String(buffer, 0, read);\n}", "path": "http-kit/test/java/org/httpkit/SpecialHttpClient.java", "commit_date": "2013-08-17 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/**\n * Increases the capacity of the array.\n *\n * @param minCapacity the desired minimum capacity\n */\n", "func_signal": "private void grow(int minCapacity)", "code": "{\n    int oldCapacity = queue.length;\n    // Double size if small; else grow by 50%\n    int newCapacity = oldCapacity\n            + ((oldCapacity < 64) ? (oldCapacity + 2) : (oldCapacity >> 1));\n    // overflow-conscious code\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    queue = Arrays.copyOf(queue, newCapacity);\n}", "path": "http-kit/src/java/org/httpkit/PriorityQueue.java", "commit_date": "2013-04-25 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/**\n * Removes a single instance of the specified element from this queue, if it\n * is present. More formally, removes an element {@code e} such that\n * {@code o.equals(e)}, if this queue contains one or more such elements.\n * Returns {@code true} if and only if this queue contained the specified\n * element (or equivalently, if this queue changed as a result of the call).\n *\n * @param o element to be removed from this queue, if present\n * @return Element removed\n */\n", "func_signal": "public E remove(Object o)", "code": "{\n    for (int i = 0; i < size; i++) {\n        if (queue[i].equals(o)) {\n            E e = (E) queue[i];\n            removeAt(i);\n            return e;\n        }\n    }\n    return null;\n}", "path": "http-kit/src/java/org/httpkit/PriorityQueue.java", "commit_date": "2013-04-25 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/**\n * Inserts the specified element into this priority queue.\n *\n * @return {@code true} (as specified by {@link Queue#offer})\n * @throws ClassCastException   if the specified element cannot be compared with elements\n *                              currently in this priority queue according to the priority\n *                              queue's ordering\n * @throws NullPointerException if the specified element is null\n */\n", "func_signal": "public boolean offer(E e)", "code": "{\n    if (e == null)\n        throw new NullPointerException();\n    int i = size;\n    if (i >= queue.length)\n        grow(i + 1);\n    size = i + 1;\n    if (i == 0)\n        queue[0] = e;\n    else\n        siftUp(i, e);\n    return true;\n}", "path": "http-kit/src/java/org/httpkit/PriorityQueue.java", "commit_date": "2013-04-25 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// content-type => Content-Type\n", "func_signal": "public static String camelCase(String key)", "code": "{\n    StringBuilder sb = new StringBuilder(key.length());\n    boolean upper = true;\n    for (int i = 0; i < key.length(); i++) {\n        char c = key.charAt(i);\n        if (upper) {\n            sb.append(Character.toUpperCase(c));\n        } else {\n            sb.append(Character.toLowerCase(c));\n        }\n        upper = c == '-';\n    }\n    return sb.toString();\n}", "path": "http-kit/src/java/org/httpkit/HttpUtils.java", "commit_date": "2020-08-22 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// Write first HTTP header and [first chunk data]? to client\n", "func_signal": "private void firstWrite(Object data, boolean close) throws IOException", "code": "{\n    ByteBuffer buffers[];\n    int status = 200;\n    Object body = data;\n    HeaderMap headers;\n    if (data instanceof Map) {\n        Map<Keyword, Object> resp = (Map<Keyword, Object>) data;\n        headers = HeaderMap.camelCase((Map) resp.get(HEADERS));\n        status = getStatus(resp);\n        body = resp.get(BODY);\n    } else {\n        headers = new HeaderMap();\n    }\n\n    if (headers.isEmpty()) { // default 200 and text/html\n        headers.put(\"Content-Type\", \"text/html; charset=utf-8\");\n    }\n\n    if (request.isKeepAlive && request.version == HttpVersion.HTTP_1_0) {\n        headers.put(\"Connection\", \"Keep-Alive\");\n    }\n\n    if (close) { // normal response, Content-Length. Every http client understand it\n        buffers = HttpEncode(status, headers, body, server.serverHeader);\n    } else {\n        if (request.version == HttpVersion.HTTP_1_1) {\n            headers.put(\"Transfer-Encoding\", \"chunked\"); // first chunk\n        }\n        ByteBuffer[] bb = HttpEncode(status, headers, body, server.serverHeader);\n        if (body == null) {\n            buffers = bb;\n        } else {\n            buffers = new ByteBuffer[]{\n                    bb[0], // header\n                    chunkSize(bb[1].remaining()), // chunk size\n                    bb[1], // chunk data\n                    ByteBuffer.wrap(newLineBytes) // terminating CRLF sequence\n            };\n        }\n    }\n    if (close) {\n        onClose(0);\n    }\n    server.tryWrite(key, !close, buffers);\n}", "path": "http-kit/src/java/org/httpkit/server/AsyncChannel.java", "commit_date": "2020-09-06 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// public void submit()\n", "func_signal": "public void coseAndwait() throws InterruptedException", "code": "{\n    closed = true;\n    for (Worker w : workers) {\n        w.t.interrupt();\n    }\n    latch.await();\n}", "path": "http-kit/test/java/org/httpkit/server/ThreadPool3.java", "commit_date": "2013-02-18 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// public void submit()\n", "func_signal": "public void coseAndwait() throws InterruptedException", "code": "{\n    closed = true;\n    for (Worker w : workers) {\n        w.t.interrupt();\n    }\n    latch.await();\n}", "path": "http-kit/test/java/org/httpkit/server/ThreadPool2.java", "commit_date": "2013-02-18 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// sent request one byte at a time\n", "func_signal": "public static String slowGet(String url) throws URISyntaxException,\n        IOException, InterruptedException", "code": "{\n\n    URI uri = new URI(url);\n    InetSocketAddress addr = HttpUtils.getServerAddr(uri);\n    Socket s = new Socket();\n    s.setTcpNoDelay(false);\n    s.connect(addr);\n\n    String request = \"GET \" + HttpUtils.getPath(uri) + \" HTTP/1.1\\r\\n\";\n    request += \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n\";\n    request += \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.52 Safari/537.17\\r\\n\";\n    request += \"Connection: close\\n\";\n    request += \"\\r\\n\";\n\n    byte[] bytes = request.getBytes();\n    InputStream is = s.getInputStream();\n    OutputStream os = s.getOutputStream();\n\n    for (byte b : bytes) {\n        os.write(b);\n        if (Math.random() > 0.6) {\n            Thread.sleep(1);\n        }\n        os.flush();\n    }\n\n    byte[] buffer = new byte[8096];\n    int read = is.read(buffer);\n    s.close();\n    return new String(buffer, 0, read);\n}", "path": "http-kit/test/java/org/httpkit/SpecialHttpClient.java", "commit_date": "2013-08-17 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/**\n * Retrieves and removes the head of this queue, or returns null if this\n * queue is empty.\n */\n", "func_signal": "public E poll()", "code": "{\n    if (size == 0)\n        return null;\n    int s = --size;\n    E result = (E) queue[0];\n    E x = (E) queue[s];\n    queue[s] = null;\n    if (s != 0)\n        siftDown(0, x);\n    return result;\n}", "path": "http-kit/src/java/org/httpkit/PriorityQueue.java", "commit_date": "2013-04-25 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/**\n * Removes the ith element from queue.\n * <p/>\n * Normally this method leaves the elements at up to i-1, inclusive,\n * untouched. Under these circumstances, it returns null. Occasionally, in\n * order to maintain the heap invariant, it must swap a later element of the\n * list with one earlier than i. Under these circumstances, this method\n * returns the element that was previously at the end of the list and is now\n * at some position before i. This fact is used by iterator.remove so as to\n * avoid missing traversing elements.\n */\n", "func_signal": "private E removeAt(int i)", "code": "{\n    assert i >= 0 && i < size;\n    int s = --size;\n    if (s == i) // removed last element\n        queue[i] = null;\n    else {\n        E moved = (E) queue[s];\n        queue[s] = null;\n        siftDown(i, moved);\n        if (queue[i] == moved) {\n            siftUp(i, moved);\n            if (queue[i] != moved)\n                return moved;\n        }\n    }\n    return null;\n}", "path": "http-kit/src/java/org/httpkit/PriorityQueue.java", "commit_date": "2013-04-25 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/**\n * http-kit think all connections are keep-alived (since some say it is, but\n * actually is not). but, some are not, http-kit pick them out after the fact\n * <ol>\n * <li>The connection is reused</li>\n * <li>No data received</li>\n * </ol>\n */\n", "func_signal": "private boolean cleanAndRetryIfBroken(SelectionKey key, Request req)", "code": "{\n    closeQuietly(key);\n    keepalives.remove(key);\n    // keep-alived connection, remote server close it without sending byte\n    if (req.isReuseConn && req.decoder.state == READ_INITIAL) {\n        for (ByteBuffer b : req.request) {\n            b.position(0); // reset for retry\n        }\n        req.isReuseConn = false;\n        requests.remove(req); // remove from timeout queue\n        pending.offer(req); // queue for retry\n        selector.wakeup();\n        return true; // retry: re-open a connection to server, sent the request again\n    }\n    return false;\n}", "path": "http-kit/src/java/org/httpkit/client/HttpClient.java", "commit_date": "2020-08-22 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// private volatile int c = 0;\n", "func_signal": "public void submit(Runnable task)", "code": "{\n    if (!workers[task.hashCode() % size].queue.offer(task)) {\n        // System.out.println(\"oveload\");\n    }\n}", "path": "http-kit/test/java/org/httpkit/server/ThreadPool2.java", "commit_date": "2013-02-18 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// a special websocket client to test the robustness of the Decoder\n// sent a byte at a time\n", "func_signal": "public static boolean slowWebSocketClient(String url)", "code": "{\n    try {\n        URI uri = new URI(url);\n        InetSocketAddress addr = HttpUtils.getServerAddr(uri);\n\n        Socket s = new Socket();\n        s.connect(addr);\n        OutputStream os = s.getOutputStream();\n        InputStream is = s.getInputStream();\n\n        byte[] buffer = new byte[8096];\n        String request = \"GET \" + HttpUtils.getPath(uri)\n                + \" HTTP/1.1\\r\\nHost: localhost\\r\\nUpgrade: websocket\\r\\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\\r\\n\\r\\n\";\n        os.write(request.getBytes());\n        int read = is.read(buffer);\n        if (!new String(buffer, 0, read).contains(\"websocket\")) {\n            return false;\n        }\n\n        String msg = \"this is a test; this is a test; this is a test\";\n        for (int i = 0; i < 2; i++) {\n            wsRequest(os, is, msg);\n            msg += (msg + msg + msg + msg);\n        }\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n\n}", "path": "http-kit/test/java/org/httpkit/SpecialHttpClient.java", "commit_date": "2013-08-17 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// future time this request timeout, ms\n", "func_signal": "public Request(InetSocketAddress addr, ByteBuffer[] request, IRespListener handler,\n                  PriorityQueue<Request> clients, RequestConfig config)", "code": "{\n       this.cfg = config;\n       this.decoder = new Decoder(handler, config.method);\n       this.request = request;\n       this.clients = clients;\n       this.addr = addr;\n       this.timeoutTs = config.connTimeout + System.currentTimeMillis();\n   }", "path": "http-kit/src/java/org/httpkit/client/Request.java", "commit_date": "2017-04-16 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/*----------------charset--------------------*/\n", "func_signal": "public static Charset parseCharset(String type)", "code": "{\n    if (type != null) {\n        try {\n            type = type.toLowerCase();\n            int i = type.indexOf(CHARSET);\n            if (i != -1) {\n                String charset = type.substring(i + CHARSET.length()).trim();\n                return Charset.forName(charset);\n            }\n        } catch (Exception ignore) {\n        }\n    }\n    return null;\n}", "path": "http-kit/src/java/org/httpkit/HttpUtils.java", "commit_date": "2020-08-22 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "// for streaming, send a chunk of data to client\n", "func_signal": "private void writeChunk(Object body, boolean close) throws IOException", "code": "{\n    if (body instanceof Map) { // only get body if a map\n        body = ((Map<Keyword, Object>) body).get(BODY);\n    }\n    if (body != null) { // null is ignored\n        ByteBuffer t = bodyBuffer(body);\n        if (t.hasRemaining()) {\n            ByteBuffer[] buffers = new ByteBuffer[]{\n                    chunkSize(t.remaining()),\n                    t,  // actual data\n                    ByteBuffer.wrap(newLineBytes) // terminating CRLF sequence\n            };\n            server.tryWrite(key, !close, buffers);\n        }\n    }\n    if (close) {\n        serverClose(0);\n    }\n}", "path": "http-kit/src/java/org/httpkit/server/AsyncChannel.java", "commit_date": "2020-09-06 00:00:00", "repo_name": "http-kit/http-kit", "stars": 2406, "license": "apache-2.0", "language": "java", "size": 2395}
{"docstring": "/**\n * WARNING: Drops all table on Upgrade! Use only during development.\n * Convenience method using a {@link DevOpenHelper}.\n */\n", "func_signal": "public static DaoSession newDevSession(Context context, String name)", "code": "{\n    Database db = new DevOpenHelper(context, name).getWritableDb();\n    DaoMaster daoMaster = new DaoMaster(db);\n    return daoMaster.newSession();\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/core/dao/DaoMaster.java", "commit_date": "2018-03-09 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Click view\n *\n * @param content Content to view\n */\n", "func_signal": "protected void clickView(String content)", "code": "{\n    onView(withText(content))\n            .check(matches(isDisplayed()))\n            .perform(click());\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Click view\n *\n * @param viewId IdRes to view\n */\n", "func_signal": "protected void clickView(@IdRes int viewId)", "code": "{\n    onView(withId(viewId))\n            .check(matches(isDisplayed()))\n            .perform(click());\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Pull to refresh layout\n *\n * @param refreshLayoutId IdRes to refresh layout / recyclerView\n */\n", "func_signal": "protected void pullToSmartRefresh(@IdRes int refreshLayoutId)", "code": "{\n    onView(allOf(withId(refreshLayoutId), hasFocus()))\n            .check(matches(isDisplayed()))\n            .perform(swipeDown());\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Show alertDialog\n *\n * @param mActivity activity instance\n * @param content show content\n * @param btnContent ok btn content\n * @param neContent negative btn content\n * @param onPoClickListener ok btn onClickListener\n * @param onNeClickListener negative btn onClickListener\n */\n", "func_signal": "public void showDialog(Activity mActivity, String content, String btnContent, String neContent,\n                       final View.OnClickListener onPoClickListener,\n                       final View.OnClickListener onNeClickListener)", "code": "{\n    if (mActivity == null) {\n        return;\n    }\n    if (alertDialog == null) {\n        alertDialog = new AlertDialog.Builder(mActivity, R.style.myCorDialog).create();\n    }\n    if (!alertDialog.isShowing()) {\n        alertDialog.show();\n    }\n    alertDialog.setCanceledOnTouchOutside(false);\n    Window window = alertDialog.getWindow();\n    if (window != null) {\n        window.setContentView(R.layout.common_alert_dialog);\n        TextView contentTv = (TextView) window.findViewById(R.id.dialog_content);\n        contentTv.setText(content);\n        Button mOkBtn = (Button) window.findViewById(R.id.dialog_btn);\n        mOkBtn.setText(btnContent);\n        mOkBtn.setOnClickListener(onPoClickListener);\n        View btnDivider = window.findViewById(R.id.dialog_btn_divider);\n        btnDivider.setVisibility(View.VISIBLE);\n        Button mNeBtn = (Button) window.findViewById(R.id.dialog_negative_btn);\n        mNeBtn.setText(neContent);\n        mNeBtn.setVisibility(View.VISIBLE);\n        mNeBtn.setOnClickListener(onNeClickListener);\n    }\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/utils/CommonAlertDialog.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Swipe Down recyclerView to specify position\n *\n * @param recyclerViewId IdRes to recyclerView\n * @param position specify position\n */\n", "func_signal": "protected void swipeDownRecyclerViewToPosition(@IdRes int recyclerViewId, int position)", "code": "{\n    onView(allOf(withId(recyclerViewId), hasFocus()))\n            .check(matches(isDisplayed()))\n            .perform(scrollToPosition(position))\n            .perform(swipeDown());\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * \u663e\u793aview\n *\n * @param view View\n * @param viewPropertyAnimatorListener ViewPropertyAnimatorListener\n */\n", "func_signal": "public static void scaleShow(View view, ViewPropertyAnimatorListener viewPropertyAnimatorListener)", "code": "{\n    view.setVisibility(View.VISIBLE);\n    ViewCompat.animate(view)\n            .scaleX(1.0f)\n            .scaleY(1.0f)\n            .alpha(1.0f)\n            .setDuration(800)\n            .setListener(viewPropertyAnimatorListener)\n            .setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR)\n            .start();\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/widget/behavior/AnimatorUtil.java", "commit_date": "2018-03-09 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Show alertDialog\n *\n * @param mActivity activity instance\n * @param content show content\n * @param btnContent btn content\n */\n", "func_signal": "public void showDialog(Activity mActivity, String content, String btnContent)", "code": "{\n    if (mActivity == null) {\n        return;\n    }\n    if (alertDialog == null) {\n        alertDialog = new AlertDialog.Builder(mActivity, R.style.myCorDialog).create();\n    }\n    if (!alertDialog.isShowing()) {\n        alertDialog.show();\n    }\n    alertDialog.setCanceledOnTouchOutside(false);\n    Window window = alertDialog.getWindow();\n    if (window != null) {\n        window.setContentView(R.layout.common_alert_dialog);\n        TextView contentTv = (TextView) window.findViewById(R.id.dialog_content);\n        contentTv.setText(content);\n        Button mOkBtn = (Button) window.findViewById(R.id.dialog_btn);\n        mOkBtn.setText(btnContent);\n        mOkBtn.setOnClickListener(v -> {\n            if (alertDialog != null) {\n                alertDialog.cancel();\n                alertDialog = null;\n            }\n        });\n        View btnDivider = window.findViewById(R.id.dialog_btn_divider);\n        btnDivider.setVisibility(View.GONE);\n        Button mNeBtn = (Button) window.findViewById(R.id.dialog_negative_btn);\n        mNeBtn.setVisibility(View.GONE);\n    }\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/utils/CommonAlertDialog.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Scroll recyclerView to specify position\n *\n * @param recyclerViewId IdRes to recyclerView\n * @param position specify position\n */\n", "func_signal": "protected void scrollRecyclerViewToPosition(@IdRes int recyclerViewId, int position)", "code": "{\n    onView(allOf(withId(recyclerViewId), hasFocus()))\n            .check(matches(isDisplayed()))\n            .perform(scrollToPosition(position));\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Show alertDialog\n *\n * @param mActivity activity instance\n * @param content show content\n * @param btnContent btn content\n * @param onClickListener btn onClickListener\n */\n", "func_signal": "public void showDialog(Activity mActivity, String content, String btnContent, final View.OnClickListener onClickListener)", "code": "{\n    if (mActivity == null) {\n        return;\n    }\n    if (alertDialog == null) {\n        alertDialog = new AlertDialog.Builder(mActivity, R.style.myCorDialog).create();\n    }\n    if (!alertDialog.isShowing()) {\n        alertDialog.show();\n    }\n    alertDialog.setCanceledOnTouchOutside(false);\n    Window window = alertDialog.getWindow();\n    if (window != null) {\n        window.setContentView(R.layout.common_alert_dialog);\n        TextView contentTv = (TextView) window.findViewById(R.id.dialog_content);\n        contentTv.setText(content);\n        Button mOkBtn = (Button) window.findViewById(R.id.dialog_btn);\n        mOkBtn.setText(btnContent);\n        mOkBtn.setOnClickListener(onClickListener);\n        View btnDivider = window.findViewById(R.id.dialog_btn_divider);\n        btnDivider.setVisibility(View.GONE);\n        Button mNeBtn = (Button) window.findViewById(R.id.dialog_negative_btn);\n        mNeBtn.setVisibility(View.GONE);\n    }\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/utils/CommonAlertDialog.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * \u9690\u85cfview\n *\n * @param view View\n * @param viewPropertyAnimatorListener ViewPropertyAnimatorListener\n */\n", "func_signal": "public static void translateHide(View view, ViewPropertyAnimatorListener viewPropertyAnimatorListener)", "code": "{\n    view.setVisibility(View.VISIBLE);\n    ViewCompat.animate(view)\n            .translationY(350)\n            .setDuration(400)\n            .setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR)\n            .setListener(viewPropertyAnimatorListener)\n            .start();\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/widget/behavior/AnimatorUtil.java", "commit_date": "2018-03-09 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Check view visible\n *\n * @param viewId IdRes to View\n */\n", "func_signal": "protected void checkVisible(@IdRes int viewId)", "code": "{\n    onView(withId(viewId))\n            .check(matches(isDisplayed()));\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Click the item child view of the recyclerView\n *\n * @param recyclerViewId IdRes to recyclerView\n * @param itemPosition Recycler item position\n * @param itemChildViewId IdRes to item child view of the RecyclerView\n */\n", "func_signal": "protected void clickRecyclerViewItemChildView(@IdRes int recyclerViewId,\n                                              int itemPosition,\n                                              @IdRes int itemChildViewId)", "code": "{\n    onView(TestUtils.withRecyclerView(recyclerViewId)\n            .atPositionOnView(itemPosition, itemChildViewId))\n            .perform(click());\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * \u663e\u793aview\n *\n * @param view View\n * @param viewPropertyAnimatorListener ViewPropertyAnimatorListener\n */\n", "func_signal": "public static void translateShow(View view, ViewPropertyAnimatorListener viewPropertyAnimatorListener)", "code": "{\n    view.setVisibility(View.VISIBLE);\n    ViewCompat.animate(view)\n            .translationY(0)\n            .setDuration(400)\n            .setListener(viewPropertyAnimatorListener)\n            .setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR)\n            .start();\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/widget/behavior/AnimatorUtil.java", "commit_date": "2018-03-09 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n* \u6307\u5b9a\u4e00\u4e2a\u767d\u540d\u5355, \u5728\u767d\u540d\u5355\u7684\u6761\u76ee\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u5c55\u793a\u963b\u585e\u4fe1\u606f\u7684UI\u4e2d\n*\n* @return return null if you don't need white-list filter.\n*/\n", "func_signal": "@Override\npublic List<String> provideWhiteList()", "code": "{\n    LinkedList<String> whiteList = new LinkedList<>();\n    whiteList.add(\"org.chromium\");\n    return whiteList;\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/app/AppBlockCanaryContext.java", "commit_date": "2020-02-25 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * \u9690\u85cfview\n *\n * @param view View\n * @param viewPropertyAnimatorListener ViewPropertyAnimatorListener\n */\n", "func_signal": "public static void scaleHide(View view, ViewPropertyAnimatorListener viewPropertyAnimatorListener)", "code": "{\n    ViewCompat.animate(view)\n            .scaleX(0.0f)\n            .scaleY(0.0f)\n            .alpha(0.0f)\n            .setDuration(800)\n            .setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR)\n            .setListener(viewPropertyAnimatorListener)\n            .start();\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/widget/behavior/AnimatorUtil.java", "commit_date": "2018-03-09 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Cancel alertDialog\n */\n", "func_signal": "public void cancelDialog(boolean isAdd)", "code": "{\n    if (isAdd && alertDialog != null && alertDialog.isShowing()) {\n        alertDialog.dismiss();\n        alertDialog = null;\n    }\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/utils/CommonAlertDialog.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Click the item of the recyclerView\n *\n * @param recyclerViewId IdRes to recyclerView\n * @param itemPosition RecyclerView item position\n */\n", "func_signal": "protected void clickRecyclerViewItem(@IdRes int recyclerViewId, int itemPosition)", "code": "{\n    onView(allOf(withId(recyclerViewId), hasFocus()))\n            .check(matches(isDisplayed()))\n            .perform(actionOnItemAtPosition(itemPosition, click()));\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * \u8ba9\u83dc\u5355\u540c\u65f6\u663e\u793a\u56fe\u6807\u548c\u6587\u5b57\n *\n * @param featureId Feature id\n * @param menu Menu\n * @return menu if opened\n */\n", "func_signal": "@Override\npublic boolean onMenuOpened(int featureId, Menu menu)", "code": "{\n    if (menu != null) {\n        if (Constants.MENU_BUILDER.equalsIgnoreCase(menu.getClass().getSimpleName())) {\n            try {\n                @SuppressLint(\"PrivateApi\")\n                Method method = menu.getClass().getDeclaredMethod(\"setOptionalIconsVisible\", Boolean.TYPE);\n                method.setAccessible(true);\n                method.invoke(menu, true);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return super.onMenuOpened(featureId, menu);\n}", "path": "Awesome-WanAndroid/app/src/main/java/json/chao/com/wanandroid/ui/main/activity/ArticleDetailActivity.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * Swipe up recyclerView to specify position\n *\n * @param recyclerViewId IdRes to recyclerView\n * @param position specify position\n */\n", "func_signal": "protected void swipeUpRecyclerViewToPosition(@IdRes int recyclerViewId, int position)", "code": "{\n    onView(allOf(withId(recyclerViewId), hasFocus()))\n            .check(matches(isDisplayed()))\n            .perform(scrollToPosition(position))\n            .perform(swipeUp());\n}", "path": "Awesome-WanAndroid/app/src/androidTest/java/json/chao/com/wanandroid/BasePageTest.java", "commit_date": "2018-07-02 00:00:00", "repo_name": "JsonChao/Awesome-WanAndroid", "stars": 2724, "license": "apache-2.0", "language": "java", "size": 207546}
{"docstring": "/**\n * \u521d\u59cb\u5316,\u8bbe\u7f6e\u8be5CrashHandler\u4e3a\u7a0b\u5e8f\u7684\u9ed8\u8ba4\u5904\u7406\u5668\n */\n", "func_signal": "public static void init(CrashHandler crashHandler)", "code": "{\n    defaultHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(crashHandler);\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/component/CrashHandler.java", "commit_date": "2016-09-04 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u6839\u636e\u591a\u4e2ajs\u94fe\u63a5\u751f\u6210Script\u6807\u7b7e\n *\n * @param urls List<String>\n * @return String\n */\n", "func_signal": "public static String createJsTag(List<String> urls)", "code": "{\n\n    final StringBuilder sb = new StringBuilder();\n    for (String url : urls)\n    {\n        sb.append(createJsTag(url));\n    }\n    return sb.toString();\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/HtmlUtil.java", "commit_date": "2016-08-14 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * Provide white list, entry in white list will not be shown in ui list.\n *\n * @return return null if you don't need white-list filter.\n */\n", "func_signal": "public List<String> provideWhiteList()", "code": "{\n    LinkedList<String> whiteList = new LinkedList<>();\n    whiteList.add(\"org.chromium\");\n    return whiteList;\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/widget/AppBlockCanaryContext.java", "commit_date": "2016-09-06 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u4ece\u6307\u5b9aView\u5f00\u59cb\u5411\u56db\u5468\u4f38\u5f20(\u4f38\u5f20\u989c\u8272\u6216\u56fe\u7247\u4e3acolorOrImageRes), \u7136\u540e\u8fdb\u5165\u53e6\u4e00\u4e2aActivity,\n * \u8fd4\u56de\u81f3 @thisActivity \u540e\u663e\u793a\u6536\u7f29\u52a8\u753b\u3002\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static void startActivityForResult(\n        final Activity thisActivity, final Intent intent, final Integer requestCode, final Bundle bundle,\n        final View triggerView, int colorOrImageRes, long durationMills)", "code": "{\n\n    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {\n        thisActivity.startActivity(intent);\n        return;\n    }\n\n    int[] location = new int[2];\n    triggerView.getLocationInWindow(location);\n    final int cx = location[0] + triggerView.getWidth() / 2;\n    final int cy = location[1] + triggerView.getHeight() / 2;\n    final ImageView view = new ImageView(thisActivity);\n    view.setScaleType(ImageView.ScaleType.CENTER_CROP);\n    view.setImageResource(colorOrImageRes);\n    final ViewGroup decorView = (ViewGroup) thisActivity.getWindow().getDecorView();\n    int w = decorView.getWidth();\n    int h = decorView.getHeight();\n    decorView.addView(view, w, h);\n\n    // \u8ba1\u7b97\u4e2d\u5fc3\u70b9\u81f3view\u8fb9\u754c\u7684\u6700\u5927\u8ddd\u79bb\n    int maxW = Math.max(cx, w - cx);\n    int maxH = Math.max(cy, h - cy);\n    final int finalRadius = (int) Math.sqrt(maxW * maxW + maxH * maxH) + 1;\n    Animator\n            anim = ViewAnimationUtils.createCircularReveal(view, cx, cy, 0, finalRadius);\n    int maxRadius = (int) Math.sqrt(w * w + h * h) + 1;\n    // \u82e5\u4f7f\u7528\u9ed8\u8ba4\u65f6\u957f\uff0c\u5219\u9700\u8981\u6839\u636e\u6c34\u6ce2\u6269\u6563\u7684\u8ddd\u79bb\u6765\u8ba1\u7b97\u5b9e\u9645\u65f6\u95f4\n    if (durationMills == PERFECT_MILLS) {\n        // \u7b97\u51fa\u5b9e\u9645\u8fb9\u8ddd\u4e0e\u6700\u5927\u8fb9\u8ddd\u7684\u6bd4\u7387\n        double rate = 1d * finalRadius / maxRadius;\n        // \u6c34\u6ce2\u6269\u6563\u7684\u8ddd\u79bb\u4e0e\u6269\u6563\u65f6\u95f4\u6210\u6b63\u6bd4\n        durationMills = (long) (PERFECT_MILLS * rate);\n    }\n    final long finalDuration = durationMills;\n    anim.setDuration(finalDuration);\n    anim.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            super.onAnimationEnd(animation);\n\n            if (requestCode == null)\n                thisActivity.startActivity(intent);\n            else if (bundle == null)\n                thisActivity.startActivityForResult(intent, requestCode);\n            else\n                thisActivity.startActivityForResult(intent, requestCode, bundle);\n\n            // \u9ed8\u8ba4\u6e10\u9690\u8fc7\u6e21\u52a8\u753b.\n            thisActivity.overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);\n\n            // \u9ed8\u8ba4\u663e\u793a\u8fd4\u56de\u81f3\u5f53\u524dActivity\u7684\u52a8\u753b.\n            triggerView.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    Animator anim =\n                            ViewAnimationUtils.createCircularReveal(view, cx, cy, finalRadius, 0);\n                    anim.setDuration(finalDuration);\n                    anim.addListener(new AnimatorListenerAdapter() {\n                        @Override\n                        public void onAnimationEnd(Animator animation) {\n                            super.onAnimationEnd(animation);\n                            try {\n                                decorView.removeView(view);\n                            } catch (Exception e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                    anim.start();\n                }\n            }, 1000);\n\n        }\n    });\n    anim.start();\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/CircularAnimUtil.java", "commit_date": "2016-08-13 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u7edf\u4e00\u8fd4\u56de\u7ed3\u679c\u5904\u7406\n * @param <T>\n * @return\n */\n", "func_signal": "public static <T> FlowableTransformer<GankHttpResponse<T>, T> handleResult()", "code": "{   //compose\u5224\u65ad\u7ed3\u679c\n    return new FlowableTransformer<GankHttpResponse<T>, T>() {\n        @Override\n        public Flowable<T> apply(Flowable<GankHttpResponse<T>> httpResponseFlowable) {\n            return httpResponseFlowable.flatMap(new Function<GankHttpResponse<T>, Flowable<T>>() {\n                @Override\n                public Flowable<T> apply(GankHttpResponse<T> tGankHttpResponse) {\n                    if(!tGankHttpResponse.getError()) {\n                        return createData(tGankHttpResponse.getResults());\n                    } else {\n                        return Flowable.error(new ApiException(\"\u670d\u52a1\u5668\u8fd4\u56deerror\"));\n                    }\n                }\n            });\n        }\n    };\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/RxUtil.java", "commit_date": "2017-05-11 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u7531\u6ee1\u5411\u4e2d\u95f4\u6536\u7f29\uff0c\u76f4\u5230\u9690\u85cf\u3002\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static void hide(final View myView, float endRadius, long durationMills)", "code": "{\n    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {\n        myView.setVisibility(View.INVISIBLE);\n        return;\n    }\n\n    int cx = (myView.getLeft() + myView.getRight()) / 2;\n    int cy = (myView.getTop() + myView.getBottom()) / 2;\n    int w = myView.getWidth();\n    int h = myView.getHeight();\n\n    // \u52fe\u80a1\u5b9a\u7406 & \u8fdb\u4e00\u6cd5\n    int initialRadius = (int) Math.sqrt(w * w + h * h) + 1;\n\n    Animator anim =\n            ViewAnimationUtils.createCircularReveal(myView, cx, cy, initialRadius, endRadius);\n    anim.setDuration(durationMills);\n    anim.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            super.onAnimationEnd(animation);\n            myView.setVisibility(View.INVISIBLE);\n        }\n    });\n\n    anim.start();\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/CircularAnimUtil.java", "commit_date": "2016-08-13 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u5411\u56db\u5468\u4f38\u5f20\uff0c\u76f4\u5230\u5b8c\u6210\u663e\u793a\u3002\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static void show(View myView, float startRadius, long durationMills)", "code": "{\n    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {\n        myView.setVisibility(View.VISIBLE);\n        return;\n    }\n\n    int cx = (myView.getLeft() + myView.getRight()) / 2;\n    int cy = (myView.getTop() + myView.getBottom()) / 2;\n\n    int w = myView.getWidth();\n    int h = myView.getHeight();\n\n    // \u52fe\u80a1\u5b9a\u7406 & \u8fdb\u4e00\u6cd5\n    int finalRadius = (int) Math.sqrt(w * w + h * h) + 1;\n\n    Animator anim =\n            ViewAnimationUtils.createCircularReveal(myView, cx, cy, startRadius, finalRadius);\n    myView.setVisibility(View.VISIBLE);\n    anim.setDuration(durationMills);\n    anim.start();\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/CircularAnimUtil.java", "commit_date": "2016-08-13 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u5f53\u5929\u6570\u636e\n * @param info\n */\n", "func_signal": "@Override\npublic void showContent(DailyListBean info)", "code": "{\n    if(swipeRefresh.isRefreshing()) {\n        swipeRefresh.setRefreshing(false);\n    }\n    stateMain();\n    mList = info.getStories();\n    currentDate = String.valueOf(Integer.valueOf(info.getDate()) + 1);\n    mAdapter.addDailyDate(info);\n    isDataReady = true;\n    mPresenter.startInterval();\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/ui/zhihu/fragment/DailyFragment.java", "commit_date": "2017-05-10 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u7531\u4e8erecreate \u9700\u8981\u7279\u6b8a\u5904\u7406\u591c\u95f4\u6a21\u5f0f\n * @param savedInstanceState\n */\n", "func_signal": "@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    if (savedInstanceState == null) {\n        mPresenter.setNightModeState(false);\n    } else {\n        showFragment = mPresenter.getCurrentItem();\n        hideFragment = Constants.TYPE_ZHIHU;\n        showHideFragment(getTargetFragment(showFragment), getTargetFragment(hideFragment));\n        mNavigationView.getMenu().findItem(R.id.drawer_zhihu).setChecked(false);\n        mToolbar.setTitle(mNavigationView.getMenu().findItem(getCurrentItem(showFragment)).getTitle().toString());\n        hideFragment = showFragment;\n    }\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/ui/main/activity/MainActivity.java", "commit_date": "2017-04-22 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u7edf\u4e00\u7ebf\u7a0b\u5904\u7406\n * @param <T>\n * @return\n */\n", "func_signal": "public static <T> FlowableTransformer<T, T> rxSchedulerHelper()", "code": "{    //compose\u7b80\u5316\u7ebf\u7a0b\n    return new FlowableTransformer<T, T>() {\n        @Override\n        public Flowable<T> apply(Flowable<T> observable) {\n            return observable.subscribeOn(Schedulers.io())\n                    .observeOn(AndroidSchedulers.mainThread());\n        }\n    };\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/RxUtil.java", "commit_date": "2017-05-11 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u5f97\u5230\u7a0b\u5e8f\u5d29\u6e83\u7684\u8be6\u7ec6\u4fe1\u606f\n */\n", "func_signal": "public String getCrashInfo(Throwable ex)", "code": "{\n    Writer result = new StringWriter();\n    PrintWriter printWriter = new PrintWriter(result);\n    ex.setStackTrace(ex.getStackTrace());\n    ex.printStackTrace(printWriter);\n    return result.toString();\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/component/CrashHandler.java", "commit_date": "2016-09-04 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u6536\u96c6\u7a0b\u5e8f\u5d29\u6e83\u7684\u8bbe\u5907\u4fe1\u606f\n */\n", "func_signal": "public String collectCrashDeviceInfo()", "code": "{\n    try {\n        PackageManager pm = context.getPackageManager();\n        PackageInfo pi = pm.getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES);\n        String versionName = pi.versionName;\n        String model = android.os.Build.MODEL;\n        String androidVersion = android.os.Build.VERSION.RELEASE;\n        String manufacturer = android.os.Build.MANUFACTURER;\n        return versionName + \"  \" + model + \"  \" + androidVersion + \"  \" + manufacturer;\n    } catch (PackageManager.NameNotFoundException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/component/CrashHandler.java", "commit_date": "2016-09-04 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "//\u5728onMeasure\u91cc\uff0c\u6d4b\u91cf\u6240\u6709\u5b50View\u7684\u5bbd\u9ad8\uff0c\u4ee5\u53ca\u786e\u5b9aViewgroup\u81ea\u5df1\u7684\u5bbd\u9ad8\u3002\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    //\u83b7\u53d6\u7cfb\u7edf\u4f20\u9012\u8fc7\u6765\u6d4b\u91cf\u51fa\u7684\u5bbd\u5ea6 \u9ad8\u5ea6\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u6d4b\u91cf\u6a21\u5f0f\u3002\n    //\u5982\u679c\u6d4b\u91cf\u6a21\u5f0f\u4e3a EXACTLY( \u786e\u5b9a\u7684dp\u503c\uff0cmatch_parent)\uff0c\u5219\u53ef\u4ee5\u8c03\u7528setMeasuredDimension()\u8bbe\u7f6e\uff0c\n    //\u5982\u679c\u6d4b\u91cf\u6a21\u5f0f\u4e3a AT_MOST(wrap_content),\u5219\u9700\u8981\u7ecf\u8fc7\u8ba1\u7b97\u518d\u53bb\u8c03\u7528setMeasuredDimension()\u8bbe\u7f6e\n    int widthMeasure = MeasureSpec.getSize(widthMeasureSpec);\n    int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n    int heightMeasure = MeasureSpec.getSize(heightMeasureSpec);\n    int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n    //\u8ba1\u7b97\u5bbd\u5ea6 \u9ad8\u5ea6 //wrap_content\u6d4b\u91cf\u6a21\u5f0f\u4e0b\u4f1a\u4f7f\u7528\u5230:\n    //\u5b58\u50a8\u6700\u540e\u8ba1\u7b97\u51fa\u7684\u5bbd\u5ea6\uff0c\n    int maxLineWidth = 0;\n    //\u5b58\u50a8\u6700\u540e\u8ba1\u7b97\u51fa\u7684\u9ad8\u5ea6\n    int totalHeight = 0;\n    //\u5b58\u50a8\u5f53\u524d\u884c\u7684\u5bbd\u5ea6\n    int curLineWidth = 0;\n    //\u5b58\u50a8\u5f53\u524d\u884c\u7684\u9ad8\u5ea6\n    int curLineHeight = 0;\n\n    // \u5f97\u5230\u5185\u90e8\u5143\u7d20\u7684\u4e2a\u6570\n    int count = getChildCount();\n\n    //\u5b58\u50a8\u5b50View\n    View child =null;\n    //\u5b58\u50a8\u5b50View\u7684LayoutParams\n    MarginLayoutParams params =null;\n    //\u5b50View Layout\u9700\u8981\u7684\u5bbd\u9ad8(\u5305\u542bmargin)\uff0c\u7528\u4e8e\u8ba1\u7b97\u662f\u5426\u8d8a\u754c\n    int childWidth;\n    int childHeight;\n\n    //\u904d\u5386\u5b50View \u8ba1\u7b97\u7236\u63a7\u4ef6\u5bbd\u9ad8\n    for (int i = 0; i < count; i++) {\n        child = getChildAt(i);\n        //\u5982\u679cgone\uff0c\u4e0d\u6d4b\u91cf\u4e86\n        if (View.GONE == child.getVisibility()) {\n            continue;\n        }\n        //\u5148\u6d4b\u91cf\u5b50View\n        measureChild(child, widthMeasureSpec, heightMeasureSpec);\n\n        //\u83b7\u53d6\u5b50View\u7684LayoutParams\uff0c(\u5b50View\u7684LayoutParams\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u53d6\u51b3\u4e8e\u5176ViewGroup\u7684generateLayoutParams()\u65b9\u6cd5\u7684\u8fd4\u56de\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u8fd9\u91cc\u8fd4\u56de\u7684\u662fMarginLayoutParams)\n        if (child.getLayoutParams() instanceof MarginLayoutParams) {\n            params = (MarginLayoutParams) child.getLayoutParams();\n            //\u5b50View\u9700\u8981\u7684\u5bbd\u5ea6 \u4e3a \u5b50View \u672c\u8eab\u5bbd\u5ea6+marginLeft + marginRight\n            childWidth = child.getMeasuredWidth() + params.leftMargin + params.rightMargin;\n            childHeight = child.getMeasuredHeight() + params.topMargin + params.bottomMargin;\n        } else {\n            childWidth = child.getMeasuredWidth();\n            childHeight = child.getMeasuredHeight();\n        }\n        Log.i(TAG, \"\u5b50View Layout\u9700\u8981\u7684\u5bbd\u9ad8(\u5305\u542bmargin)\uff1achildWidth:\" + childWidth + \"   ,childHeight:\" + childHeight);\n\n        //\u5982\u679c\u5f53\u524d\u7684\u884c\u5bbd\u5ea6\u5927\u4e8e \u7236\u63a7\u4ef6\u5141\u8bb8\u7684\u6700\u5927\u5bbd\u5ea6 \u5219\u8981\u6362\u884c\n        //\u7236\u63a7\u4ef6\u5141\u8bb8\u7684\u6700\u5927\u5bbd\u5ea6 \u5982\u679c\u8981\u9002\u914d padding \u8fd9\u91cc\u8981- getPaddingLeft() - getPaddingRight()\n        //\u5373\u4e3a\u6d4b\u91cf\u51fa\u7684\u5bbd\u5ea6\u51cf\u53bb\u7236\u63a7\u4ef6\u7684\u5de6\u53f3\u8fb9\u8ddd\n        if (curLineWidth + childWidth > widthMeasure - getPaddingLeft() - getPaddingRight()) {\n            //\u901a\u8fc7\u6bd4\u8f83 \u5f53\u524d\u884c\u5bbd \u548c\u4ee5\u524d\u5b58\u50a8\u7684\u6700\u5927\u884c\u5bbd,\u5f97\u5230\u6700\u65b0\u7684\u6700\u5927\u884c\u5bbd,\u7528\u4e8e\u8bbe\u7f6e\u7236\u63a7\u4ef6\u7684\u5bbd\u5ea6\n            maxLineWidth = Math.max(maxLineWidth, curLineWidth);\n            //\u7236\u63a7\u4ef6\u7684\u9ad8\u5ea6\u589e\u52a0\u4e86\uff0c\u4e3a\u5f53\u524d\u9ad8\u5ea6+\u5f53\u524d\u884c\u7684\u9ad8\u5ea6\n            totalHeight += curLineHeight;\n            //\u6362\u884c\u540e \u5237\u65b0 \u5f53\u524d\u884c \u5bbd\u9ad8\u6570\u636e\uff1a \u56e0\u4e3a\u65b0\u7684\u4e00\u884c\u5c31\u8fd9\u4e00\u4e2aView\uff0c\u6240\u4ee5\u4e3a\u5f53\u524d\u8fd9\u4e2aview\u5360\u7528\u7684\u5bbd\u9ad8(\u8981\u52a0\u4e0aView \u7684 margin)\n            curLineWidth = childWidth;\n            curLineHeight = childHeight;\n        } else {\n            //\u4e0d\u6362\u884c\uff1a\u53e0\u52a0\u5f53\u524d\u884c\u5bbd \u548c \u6bd4\u8f83\u5f53\u524d\u884c\u9ad8:\n            curLineWidth += childWidth;\n            curLineHeight = Math.max(curLineHeight, childHeight);\n        }\n        //\u5982\u679c\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2aView,\u8981\u6bd4\u8f83\u5f53\u524d\u884c\u7684 \u5bbd\u5ea6\u548c\u6700\u5927\u5bbd\u5ea6\uff0c\u53e0\u52a0\u4e00\u5171\u7684\u9ad8\u5ea6\n        if (i == count - 1) {\n            maxLineWidth = Math.max(maxLineWidth, curLineWidth);\n            totalHeight += childHeight;\n        }\n    }\n\n    Log.i(TAG, \"\u7cfb\u7edf\u6d4b\u91cf\u5141\u8bb8\u7684\u5c3a\u5bf8\u6700\u5927\u503c\uff1awidthMeasure:\" + widthMeasure + \"   ,heightMeasure:\" + heightMeasure);\n    Log.i(TAG, \"\u7ecf\u8fc7\u6211\u4eec\u6d4b\u91cf\u5b9e\u9645\u7684\u5c3a\u5bf8(\u4e0d\u5305\u62ec\u7236\u63a7\u4ef6\u7684padding)\uff1amaxLineWidth:\" + maxLineWidth + \"   ,totalHeight:\" + totalHeight);\n    Log.i(TAG, \"heightMode == MeasureSpec.AT_MOST:\" +(heightMode == MeasureSpec.AT_MOST));\n    Log.i(TAG, \"heightMode == MeasureSpec.EXACTLY:\" +(heightMode == MeasureSpec.EXACTLY));\n    Log.i(TAG, \"heightMode == MeasureSpec.UNSPECIFIED:\" +(heightMode == MeasureSpec.UNSPECIFIED));\n\n    //\u9002\u914dpadding,\u5982\u679c\u662fwrap_content,\u5219\u9664\u4e86\u5b50\u63a7\u4ef6\u672c\u8eab\u5360\u636e\u7684\u63a7\u4ef6\uff0c\u8fd8\u8981\u5728\u52a0\u4e0a\u7236\u63a7\u4ef6\u7684padding\n    setMeasuredDimension(\n            widthMode != MeasureSpec.EXACTLY ? maxLineWidth + getPaddingLeft() + getPaddingRight() : widthMeasure,\n            heightMode != MeasureSpec.EXACTLY ? totalHeight + getPaddingTop() + getPaddingBottom() : heightMeasure);//fix by zhangxutong \u6709\u4e9b\u9875\u9762\u592a\u957f\u4e86\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/widget/FlowLayout.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u8fc7\u5f80\u6570\u636e\n * @param date\n * @param info\n */\n", "func_signal": "@Override\npublic void showMoreContent(String date,DailyBeforeListBean info)", "code": "{\n    if(swipeRefresh.isRefreshing()) {\n        swipeRefresh.setRefreshing(false);\n    }\n    stateMain();\n    isDataReady = false;\n    mPresenter.stopInterval();\n    mList = info.getStories();\n    currentDate = String.valueOf(Integer.valueOf(info.getDate()));\n    mAdapter.addDailyBeforeDate(info);\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/ui/zhihu/fragment/DailyFragment.java", "commit_date": "2017-05-10 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u7edf\u4e00\u8fd4\u56de\u7ed3\u679c\u5904\u7406\n * @param <T>\n * @return\n */\n", "func_signal": "public static <T> FlowableTransformer<MyHttpResponse<T>, T> handleMyResult()", "code": "{   //compose\u5224\u65ad\u7ed3\u679c\n    return new FlowableTransformer<MyHttpResponse<T>, T>() {\n        @Override\n        public Flowable<T> apply(Flowable<MyHttpResponse<T>> httpResponseFlowable) {\n            return httpResponseFlowable.flatMap(new Function<MyHttpResponse<T>, Flowable<T>>() {\n                @Override\n                public Flowable<T> apply(MyHttpResponse<T> tMyHttpResponse) {\n                    if(tMyHttpResponse.getCode() == 200) {\n                        return createData(tMyHttpResponse.getData());\n                    } else {\n                        return Flowable.error(new ApiException(tMyHttpResponse.getMessage(), tMyHttpResponse.getCode()));\n                    }\n                }\n            });\n        }\n    };\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/RxUtil.java", "commit_date": "2017-05-11 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u6839\u636e\u6837\u5f0f\u6807\u7b7e,html\u5b57\u7b26\u4e32,js\u6807\u7b7e\n * \u751f\u6210\u5b8c\u6574\u7684HTML\u6587\u6863\n */\n", "func_signal": "public static String createHtmlData(String html, List<String> cssList, List<String> jsList)", "code": "{\n    final String css = HtmlUtil.createCssTag(cssList);\n    final String js = HtmlUtil.createJsTag(jsList);\n    return css.concat(HIDE_HEADER_STYLE).concat(html).concat(js);\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/HtmlUtil.java", "commit_date": "2016-08-14 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u6839\u636e\u591a\u4e2acss\u94fe\u63a5\u751f\u6210Link\u6807\u7b7e\n *\n * @param urls List<String>\n * @return String\n */\n", "func_signal": "public static String createCssTag(List<String> urls)", "code": "{\n\n    final StringBuilder sb = new StringBuilder();\n    for (String url : urls)\n    {\n        sb.append(createCssTag(url));\n    }\n    return sb.toString();\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/HtmlUtil.java", "commit_date": "2016-08-14 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u7edf\u4e00\u8fd4\u56de\u7ed3\u679c\u5904\u7406\n * @param <T>\n * @return\n */\n", "func_signal": "public static <T> FlowableTransformer<GoldHttpResponse<T>, T> handleGoldResult()", "code": "{   //compose\u5224\u65ad\u7ed3\u679c\n    return new FlowableTransformer<GoldHttpResponse<T>, T>() {\n        @Override\n        public Flowable<T> apply(Flowable<GoldHttpResponse<T>> httpResponseFlowable) {\n            return httpResponseFlowable.flatMap(new Function<GoldHttpResponse<T>, Flowable<T>>() {\n                @Override\n                public Flowable<T> apply(GoldHttpResponse<T> tGoldHttpResponse) {\n                    if(tGoldHttpResponse.getResults() != null) {\n                        return createData(tGoldHttpResponse.getResults());\n                    } else {\n                        return Flowable.error(new ApiException(\"\u670d\u52a1\u5668\u8fd4\u56deerror\"));\n                    }\n                }\n            });\n        }\n    };\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/RxUtil.java", "commit_date": "2017-05-11 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u751f\u6210Flowable\n * @param <T>\n * @return\n */\n", "func_signal": "public static <T> Flowable<T> createData(final T t)", "code": "{\n    return Flowable.create(new FlowableOnSubscribe<T>() {\n        @Override\n        public void subscribe(FlowableEmitter<T> emitter) throws Exception {\n            try {\n                emitter.onNext(t);\n                emitter.onComplete();\n            } catch (Exception e) {\n                emitter.onError(e);\n            }\n        }\n    }, BackpressureStrategy.BUFFER);\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/RxUtil.java", "commit_date": "2017-05-11 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * \u7edf\u4e00\u8fd4\u56de\u7ed3\u679c\u5904\u7406\n * @param <T>\n * @return\n */\n", "func_signal": "public static <T> FlowableTransformer<WXHttpResponse<T>, T> handleWXResult()", "code": "{   //compose\u5224\u65ad\u7ed3\u679c\n    return new FlowableTransformer<WXHttpResponse<T>, T>() {\n        @Override\n        public Flowable<T> apply(Flowable<WXHttpResponse<T>> httpResponseFlowable) {\n            return httpResponseFlowable.flatMap(new Function<WXHttpResponse<T>, Flowable<T>>() {\n                @Override\n                public Flowable<T> apply(WXHttpResponse<T> tWXHttpResponse) {\n                    if(tWXHttpResponse.getCode() == 200) {\n                        return createData(tWXHttpResponse.getNewslist());\n                    } else {\n                        return Flowable.error(new ApiException(tWXHttpResponse.getMsg(), tWXHttpResponse.getCode()));\n                    }\n                }\n            });\n        }\n    };\n}", "path": "GeekNews/app/src/main/java/com/codeest/geeknews/util/RxUtil.java", "commit_date": "2017-05-11 00:00:00", "repo_name": "codeestX/GeekNews", "stars": 3491, "license": "None", "language": "java", "size": 83845}
{"docstring": "/**\n * @author liyuepeng\n * @date 2018-09-28.\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\n@Documented\npublic @interface EruptField", "code": "{\n\n    @Comment(\"\u8868\u683c\u5217\u914d\u7f6e\")\n    View[] views() default {};\n\n    @Comment(\"\u7f16\u8f91\u7ec4\u4ef6\u914d\u7f6e\")\n    Edit edit() default @Edit(title = \"\");\n\n    @Transient\n    @Comment(\"\u663e\u793a\u987a\u5e8f\uff0c\u9ed8\u8ba4\u6309\u7167\u5b57\u6bb5\u6392\u5217\u987a\u5e8f\u6392\u5e8f\")\n    int sort() default 1000;\n\n    @ToMap(key = \"key\")\n    @Comment(\"\u81ea\u5b9a\u4e49\u6269\u5c55\u53c2\u6570\")\n    KV[] params() default {};\n}", "path": "erupt/erupt-annotation/src/main/java/xyz/erupt/annotation/EruptField.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//@ManyToOne\u6570\u636e\u5904\u7406\n", "func_signal": "private void jpaManyToOneConvert(EruptModel eruptModel, Object object) throws NoSuchFieldException, IllegalAccessException", "code": "{\n    for (EruptFieldModel fieldModel : eruptModel.getEruptFieldModels()) {\n        if (fieldModel.getEruptField().edit().type() == EditType.TAB_TABLE_ADD) {\n            Field field = object.getClass().getDeclaredField(fieldModel.getFieldName());\n            field.setAccessible(true);\n            Collection collection = (Collection) field.get(object);\n            if (null != collection) {\n                for (Object o : collection) {\n                    //\u5220\u9664\u4e3b\u952eID\n                    //TODO \u5f3a\u5236\u5220\u9664id\u7684\u5904\u7406\u65b9\u5f0f\u5e76\u4e0d\u597d\n                    Field pk = ReflectUtil.findClassField(o.getClass(), EruptCoreService\n                            .getErupt(fieldModel.getFieldReturnName()).getErupt().primaryKeyCol());\n                    pk.set(o, null);\n                }\n            }\n        }\n    }\n}", "path": "erupt/erupt-data/erupt-jpa/src/main/java/xyz/erupt/jpa/service/EruptDataServiceDbImpl.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * @author liyuepeng\n * @date 2018-09-28.\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\npublic @interface Erupt", "code": "{\n\n    @Comment(\"\u4e3b\u952e\u5217\u540d\")\n    String primaryKeyCol() default \"id\";\n\n    @Transient\n    @Comment(\"\u529f\u80fd\u540d\u79f0\")\n    String name();\n\n    @Transient\n    @Comment(\"\u529f\u80fd\u63cf\u8ff0\")\n    String desc() default \"\";\n\n    @Transient\n    @Comment(\"\u8bbf\u95ee\u8be5\u529f\u80fd\u662f\u5426\u8fdb\u884c\u6821\u9a8c\u6743\u9650\")\n    boolean authVerify() default true;\n\n    @Transient\n    @Comment(\"\u64cd\u4f5c\u6743\u9650\u914d\u7f6e\")\n    Power power() default @Power;\n\n    @ToMap(key = \"code\")\n    @Comment(\"\u81ea\u5b9a\u4e49\u529f\u80fd\u6309\u94ae\")\n    RowOperation[] rowOperation() default {};\n\n    @ToMap(key = \"code\")\n    @Comment(\"\u6570\u636e\u94bb\u53d6\u529f\u80fd\")\n    Drill[] drills() default {};\n\n    @Transient\n    @Comment(\"\u6570\u636e\u8fc7\u6ee4\u8868\u8fbe\u5f0f\")\n    Filter[] filter() default {};\n\n    @Transient\n    @Comment(\"\u6392\u5e8f\u8868\u8fbe\u5f0f\")\n    String orderBy() default \"\";\n\n    @Transient\n    @Comment(\"\u6570\u636e\u884c\u4e3a\u4ee3\u7406\u63a5\u53e3\uff0c\u5bf9\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u7b49\u884c\u4e3a\u505a\u903b\u8f91\u5904\u7406\")\n    Class<? extends DataProxy<?>>[] dataProxy() default {};\n\n    @Comment(\"\u6811\u8282\u70b9\u914d\u7f6e\")\n    Tree tree() default @Tree;\n\n    @Match(\"value.field()\")\n    @Comment(\"\u5de6\u6811\u53f3\u8868\u914d\u7f6e\u9879\")\n    LinkTree linkTree() default @LinkTree(field = \"\");\n\n    @ToMap(key = \"key\")\n    @Comment(\"\u81ea\u5b9a\u4e49\u6269\u5c55\u53c2\u6570\")\n    KV[] param() default {};\n\n    @Deprecated\n    Class<? extends Annotation> extra() default Annotation.class;\n}", "path": "erupt/erupt-annotation/src/main/java/xyz/erupt/annotation/Erupt.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "// xss\u8de8\u7ad9\u811a\u672c\u68c0\u6d4b\n", "func_signal": "public static boolean xssInspect(String value)", "code": "{\n    if (StringUtils.isNotBlank(value)) {\n        // \u907f\u514dscript \u6807\u7b7e\n        Pattern scriptPattern = Pattern.compile(\"<script>(.*?)</script>\", Pattern.CASE_INSENSITIVE);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514dsrc\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"src[\\r\\n]*=[\\r\\n]*\\\\\\'(.*?)\\\\\\'\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        scriptPattern = Pattern.compile(\"src[\\r\\n]*=[\\r\\n]*\\\\\\\"(.*?)\\\\\\\"\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u5220\u9664\u5355\u4e2a\u7684 </script> \u6807\u7b7e\n        scriptPattern = Pattern.compile(\"</script>\", Pattern.CASE_INSENSITIVE);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u5220\u9664\u5355\u4e2a\u7684<script ...> \u6807\u7b7e\n        scriptPattern = Pattern.compile(\"<script(.*?)>\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d eval(...) \u5f62\u5f0f\u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"eval\\\\((.*?)\\\\)\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d e\u00adxpression(...) \u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"e\u00adxpression\\\\((.*?)\\\\)\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d javascript: \u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"javascript:\", Pattern.CASE_INSENSITIVE);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d vbscript:\u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"vbscript:\", Pattern.CASE_INSENSITIVE);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d onload= \u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"onload(.*?)=\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d onmouseover= \u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"onmouseover(.*?)=\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d onfocus= \u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"onfocus(.*?)=\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n        // \u907f\u514d onerror= \u8868\u8fbe\u5f0f\n        scriptPattern = Pattern.compile(\"onerror(.*?)=\", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n        if (scriptPattern.matcher(value).matches()) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/SecurityUtil.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * @author liyuepeng\n * @date 2018-10-09.\n */\n", "func_signal": "public interface DataProxy<@Comment(\"Erupt\u7c7b\u5bf9\u8c61\") MODEL>", "code": "{\n\n    @Comment(\"\u589e\u52a0\u524d\")\n    default void beforeAdd(MODEL model) {\n    }\n\n    @Comment(\"\u589e\u52a0\u540e\")\n    default void afterAdd(MODEL model) {\n    }\n\n    @Comment(\"\u4fee\u6539\u524d\")\n    default void beforeUpdate(MODEL model) {\n    }\n\n    @Comment(\"\u4fee\u6539\u540e\")\n    default void afterUpdate(MODEL model) {\n    }\n\n    @Comment(\"\u5220\u9664\u524d\")\n    default void beforeDelete(MODEL model) {\n    }\n\n    @Comment(\"\u5220\u9664\u540e\")\n    default void afterDelete(MODEL model) {\n    }\n\n    @Comment(\"\u67e5\u8be2\u524d\uff0c\u8fd4\u56de\u503c\u4e3a\uff1a\u81ea\u5b9a\u4e49\u67e5\u8be2\u6761\u4ef6\")\n    default String beforeFetch() {\n        return null;\n    }\n\n    @Comment(\"\u67e5\u8be2\u540e\u7ed3\u679c\u5904\u7406\")\n    default void afterFetch(@Comment(\"\u67e5\u8be2\u7ed3\u679c\") Collection<Map<String, Object>> list) {\n    }\n\n\n    @Comment(\"\u6570\u636e\u65b0\u589e\u884c\u4e3a\uff0c\u53ef\u5bf9\u6570\u636e\u505a\u521d\u59cb\u5316\u7b49\u64cd\u4f5c\")\n    default void addBehavior(MODEL model) {\n    }\n\n    @Comment(\"\u6570\u636e\u7f16\u8f91\u884c\u4e3a\uff0c\u5bf9\u5f85\u7f16\u8f91\u7684\u6570\u636e\u505a\u9884\u5904\u7406\")\n    default void editBehavior(MODEL model) {\n    }\n\n    @Comment(\"excel\u5bfc\u51fa\")\n    default void excelExport(@Comment(\"POI\u6587\u6863\u5bf9\u8c61\") Workbook wb) {\n    }\n\n    @Comment(\"excel\u5bfc\u5165\")\n    default void excelImport(MODEL model) {\n    }\n\n}", "path": "erupt/erupt-annotation/src/main/java/xyz/erupt/annotation/fun/DataProxy.java", "commit_date": "2020-12-23 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * \u6309\u7167\u76f8\u5bf9\u5e94\u7684\u89c4\u5219\u67e5\u627e\u6240\u6709\u5339\u914d\u7c7b\n *\n * @param packages    \u5305\u540d\n * @param typeFilters \u5339\u914d\u89c4\u5219\n * @param consumer    consumer lambda\n */\n", "func_signal": "public static void scannerPackage(String[] packages, TypeFilter[] typeFilters, Consumer<Class<?>> consumer)", "code": "{\n    ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n    for (TypeFilter filter : typeFilters) {\n        scanner.addIncludeFilter(filter);\n    }\n    for (String pack : packages) {\n        for (BeanDefinition bd : scanner.findCandidateComponents(pack)) {\n            try {\n                Class<?> clazz = Class.forName(bd.getBeanClassName());\n                consumer.accept(clazz);\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/EruptSpringUtil.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * \u6839\u636e\u5217\u83b7\u53d6\u76f8\u5173\u6570\u636e\n *\n * @param eruptModel eruptModel\n * @param columns    \u5217\n * @param query      \u67e5\u8be2\u5bf9\u8c61\n * @return\n */\n", "func_signal": "@Override\npublic Collection<Map<String, Object>> queryColumn(EruptModel eruptModel, List<Column> columns, EruptQuery query)", "code": "{\n    StringBuilder hql = new StringBuilder();\n    List<String> columnStrList = new ArrayList<>();\n    for (Column column : columns) {\n        columnStrList.add(EruptJpaUtils.completeHqlPath(eruptModel.getEruptName(), column.getName()) + \" as \" + column.getAlias());\n    }\n    hql.append(\"select new map(\").append(String.join(\", \", columnStrList))\n            .append(\") from \").append(eruptModel.getEruptName()).append(\" as \").append(eruptModel.getEruptName());\n    ReflectUtil.findClassAllFields(eruptModel.getClazz(), field -> {\n        if (null != field.getAnnotation(ManyToOne.class) || null != field.getAnnotation(OneToOne.class)) {\n            hql.append(\" left outer join \").append(eruptModel.getEruptName()).append(\".\")\n                    .append(field.getName()).append(\" as \").append(field.getName());\n        }\n    });\n    hql.append(\" where 1 = 1 \");\n    if (null != query.getConditions()) {\n        for (Condition condition : query.getConditions()) {\n            hql.append(EruptJpaUtils.AND).append(condition.getKey()).append('=').append(condition.getValue());\n        }\n    }\n    if (null != query.getConditionStrings()) {\n        for (String condition : query.getConditionStrings()) {\n            hql.append(EruptJpaUtils.AND).append(condition);\n        }\n    }\n    for (Filter filter : eruptModel.getErupt().filter()) {\n        String filterStr = AnnotationUtil.switchFilterConditionToStr(filter);\n        if (StringUtils.isNotBlank(filterStr)) {\n            hql.append(EruptJpaUtils.AND).append(filterStr);\n        }\n    }\n    if (StringUtils.isNotBlank(query.getOrderBy())) {\n        hql.append(\" order by \").append(query.getOrderBy());\n    }\n    EntityManager entityManager = entityManagerService.getEntityManager(eruptModel.getClazz());\n    List list = entityManager.createQuery(hql.toString()).getResultList();\n    if (entityManager.isOpen()) {\n        entityManager.close();\n    }\n    return list;\n}", "path": "erupt/erupt-data/erupt-jpa/src/main/java/xyz/erupt/jpa/service/EruptDataServiceDbImpl.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * @author liyuepeng\n * @date 2019-05-27.\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@Deprecated\npublic @interface SerializeBy", "code": "{\n    String method();\n\n    String value();\n}", "path": "erupt/erupt-annotation/src/main/java/xyz/erupt/annotation/config/SerializeBy.java", "commit_date": "2020-12-23 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//\u5185\u5b58\u8ba1\u7b97\u7684\u65b9\u5f0f\u751f\u6210\u6811\u7ed3\u6784\n", "func_signal": "public static List<TreeModel> treeModelToTree(List<TreeModel> treeModels)", "code": "{\n    List<TreeModel> resultTreeModels = new ArrayList<>();\n    List<TreeModel> tempTreeModels = new LinkedList<>();\n    tempTreeModels.addAll(treeModels);\n    for (TreeModel treeModel : treeModels) {\n        if (treeModel.isRoot()) {\n            resultTreeModels.add(treeModel);\n            tempTreeModels.remove(treeModel);\n        }\n    }\n    for (TreeModel treeModel : resultTreeModels) {\n        recursionTree(tempTreeModels, treeModel);\n    }\n    return resultTreeModels;\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/DataHandlerUtil.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//\u9012\u5f52\u67e5\u627e\u7c7b\u5b57\u6bb5\n", "func_signal": "public static Field findClassField(Class<?> clazz, String fieldName)", "code": "{\n    Field field = null;\n    while (clazz != null) {\n        try {\n            field = clazz.getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field;\n        } catch (NoSuchFieldException e) {\n            if (Object.class.equals(clazz = clazz.getSuperclass())) {\n                break;\n            }\n        }\n    }\n    return field;\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/ReflectUtil.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//\u4f18\u5316\u5f02\u5e38\u63d0\u793a\u7c7b\n", "func_signal": "private void handlerException(Exception e, EruptModel eruptModel)", "code": "{\n    if (e instanceof DataIntegrityViolationException) {\n        if (e.getMessage().contains(\"ConstraintViolationException\")) {\n            throw new EruptWebApiRuntimeException(gcRepeatHint(eruptModel));\n        } else if (e.getMessage().contains(\"DataException\")) {\n            throw new EruptWebApiRuntimeException(\"\u5185\u5bb9\u8d85\u51fa\u6570\u636e\u5e93\u9650\u5236\u957f\u5ea6\uff01\");\n        } else {\n            throw new EruptWebApiRuntimeException(e.getMessage());\n        }\n    } else {\n        throw new EruptWebApiRuntimeException(e.getMessage());\n    }\n}", "path": "erupt/erupt-data/erupt-jpa/src/main/java/xyz/erupt/jpa/service/EruptDataServiceDbImpl.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//\u68c0\u6d4b \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\n", "func_signal": "public static boolean csrfInspect(HttpServletRequest request, HttpServletResponse response)", "code": "{\n    String origin = request.getHeader(\"Origin\");\n    if (null != origin && !origin.contains(request.getHeader(\"Host\"))) {\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"text/plain; charset=utf-8\");\n        try (PrintWriter out = response.getWriter()) {\n            out.append(\"\u975e\u6cd5\u8de8\u7ad9\u8bf7\u6c42!\");\n            throw new EruptWebApiRuntimeException(\"\u975e\u6cd5\u8de8\u7ad9\u8bf7\u6c42!\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n    return false;\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/SecurityUtil.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * \u6839\u636e\u8981\u7d20\u751f\u6210\u6811\u7ed3\u6784\n *\n * @param eruptModel eruptModel\n * @param id         id\n * @param label      label\n * @param pid        parent id\n * @param query      \u67e5\u8be2\u5bf9\u8c61\n * @return \u6811\u5bf9\u8c61\n */\n", "func_signal": "public Collection<TreeModel> geneTree(EruptModel eruptModel, String id, String label, String pid, Expr rootId, EruptQuery query)", "code": "{\n    List<Column> columns = new ArrayList<>();\n    columns.add(new Column(id, AnnotationConst.ID));\n    columns.add(new Column(label, AnnotationConst.LABEL));\n    if (!AnnotationConst.EMPTY_STR.equals(pid)) {\n        columns.add(new Column(pid, AnnotationConst.PID));\n    }\n    Collection<Map<String, Object>> result = this.createColumnQuery(eruptModel, columns, query);\n    String root = AnnotationUtil.getExpr(rootId);\n    List<TreeModel> treeModels = new ArrayList<>();\n    for (Map<String, Object> map : result) {\n        TreeModel treeModel = new TreeModel(map.get(AnnotationConst.ID), map.get(AnnotationConst.LABEL), map.get(AnnotationConst.PID), root);\n        treeModels.add(treeModel);\n    }\n    if (StringUtils.isBlank(pid)) {\n        return treeModels;\n    } else {\n        return DataHandlerUtil.treeModelToTree(treeModels);\n    }\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/service/PreEruptDataService.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * @author liyuepeng\n * @date 2018-10-09.\n */\n", "func_signal": "public interface OperationHandler<@Comment(\"\u884c\u6570\u636e\u7c7b\u578b\") Target, @Comment(\"\u8868\u5355\u8f93\u5165\u5bf9\u8c61\u7c7b\u578b\") EruptObjParam>", "code": "{\n\n    @Comment(\"\u6309\u94ae\u4e8b\u4ef6\u89e6\u53d1\u7c7b\")\n    void exec(@Comment(\"\u884c\u6570\u636e\") List<Target> data,\n              @Comment(\"\u8868\u5355\u8f93\u5165\u6570\u636e\") EruptObjParam eruptObjParam,\n              @Comment(\"\u6ce8\u89e3\u56de\u4f20\u53c2\u6570\") String[] param);\n\n}", "path": "erupt/erupt-annotation/src/main/java/xyz/erupt/annotation/fun/OperationHandler.java", "commit_date": "2020-12-23 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * \u5982\u679c\u4f7f\u7528\u4e86@EruptDataSource\u591a\u6570\u636e\u6e90\uff0c\u8c03\u7528\u6b64\u65b9\u6cd5\u5fc5\u987b\u624b\u52a8\u5173\u95ed, close()\n *\n * @param eruptClass\n * @return\n */\n", "func_signal": "public EntityManager getEntityManager(Class<?> eruptClass)", "code": "{\n    EruptDataSource eruptDataSource = eruptClass.getAnnotation(EruptDataSource.class);\n    if (null == eruptDataSource) {\n        return entityManager;\n    } else {\n        return entityManagerMap.get(eruptDataSource.value()).createEntityManager();\n    }\n}", "path": "erupt/erupt-data/erupt-jpa/src/main/java/xyz/erupt/jpa/service/EntityManagerService.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//\u901a\u8fc7class\u83b7\u53d6Bean.\n", "func_signal": "@SneakyThrows\npublic static <T> T getBean(Class<T> clazz)", "code": "{\n    if (null != clazz.getDeclaredAnnotation(Component.class)\n            || null != clazz.getDeclaredAnnotation(Service.class)\n            || null != clazz.getDeclaredAnnotation(Repository.class)\n            || null != clazz.getDeclaredAnnotation(RestController.class)\n            || null != clazz.getDeclaredAnnotation(Controller.class)) {\n        return getApplicationContext().getBean(clazz);\n    } else {\n        return clazz.newInstance();\n    }\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/EruptSpringUtil.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * @author liyuepeng\n * @date 2020-05-18\n */\n", "func_signal": "@Comment(\"\u81ea\u5b9a\u4e49\u9644\u4ef6\u4e0a\u4f20\u7b56\u7565\")\npublic interface AttachmentProxy", "code": "{\n\n    @Comment(\"\u9644\u4ef6\u4e0a\u4f20\")\n    void upLoad(@Comment(\"\u6570\u636e\u6d41\") InputStream inputStream, @Comment(\"\u4e0a\u4f20\u4f4d\u7f6e\") String path);\n\n    @Comment(\"\u9644\u4ef6\u6240\u5728\u57df\u540d\")\n    String fileDomain();\n\n    @Comment(\"\u662f\u5426\u540c\u65f6\u4fdd\u5b58\u5230\u672c\u5730\u670d\u52a1\u5668\")\n    default boolean isLocalSave() {\n        return true;\n    }\n}", "path": "erupt/erupt-annotation/src/main/java/xyz/erupt/annotation/fun/AttachmentProxy.java", "commit_date": "2020-12-23 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * @param projectName \u6807\u8bc6\u540d\n * @param first       bool\u56de\u8c03\uff0c\u8868\u793a\u51fd\u6570\u662f\u5426\u4e3a\u7b2c\u4e00\u6b21\u8c03\u7528\n */\n", "func_signal": "public void projectStartLoaded(String projectName, Consumer<Boolean> first)", "code": "{\n    String userDir = System.getProperty(\"user.dir\");\n    File dirFile = new File(userDir, EruptConst.ERUPT_DIR);\n    String warnTxt = \"\u9879\u76ee\u52a0\u8f7d\u6807\u8bc6\u6587\u4ef6\u65e0\u6cd5\u521b\u5efa\uff0c\u53ef\u80fd\u9020\u6210\u6570\u636e\u591a\u6b21\u52a0\u8f7d\u7b49\u95ee\u9898\";\n    if (!dirFile.exists()) {\n        if (!dirFile.mkdirs()) {\n            log.warn(dirFile.toString() + warnTxt);\n        }\n    }\n    File file = new File(dirFile.getPath(), projectName + LOADED_EXT);\n    if (file.exists()) {\n        first.accept(false);\n    } else {\n        try {\n            first.accept(true);\n            if (!file.createNewFile()) {\n                log.warn(dirFile.toString() + warnTxt);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/ProjectUtil.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//\u83b7\u53d6\u5b57\u6bb5\u6cdb\u578b\u540d\n", "func_signal": "public static List<String> getFieldGenericName(Field field)", "code": "{\n    List<String> names = new ArrayList<>();\n    Type gType = field.getGenericType();\n    if (gType instanceof ParameterizedType) {\n        Type[] typeArguments = ((ParameterizedType) gType).getActualTypeArguments();\n        for (Type typeArgument : typeArguments) {\n            String[] gArray = typeArgument.getTypeName().split(\"\\\\.\");\n            names.add(gArray[gArray.length - 1]);\n        }\n    }\n    return names;\n}", "path": "erupt/erupt-core/src/main/java/xyz/erupt/core/util/ReflectUtil.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "//\u751f\u6210\u6570\u636e\u91cd\u590d\u7684\u63d0\u793a\u5b57\u7b26\u4e32\n", "func_signal": "private String gcRepeatHint(EruptModel eruptModel)", "code": "{\n    StringBuilder str = new StringBuilder();\n    for (UniqueConstraint uniqueConstraint : eruptModel.getClazz().getAnnotation(Table.class).uniqueConstraints()) {\n        for (String columnName : uniqueConstraint.columnNames()) {\n            EruptFieldModel eruptFieldModel = eruptModel.getEruptFieldMap().get(columnName);\n            if (null != eruptFieldModel) {\n                str.append(eruptFieldModel.getEruptField().views()[0].title()).append(\"\u3001\");\n            }\n        }\n    }\n    String repeatTxt = \"\u6570\u636e\u91cd\u590d\";\n    if (StringUtils.isNotBlank(str)) {\n        return str.substring(0, str.length() - 1) + repeatTxt;\n    } else {\n        return repeatTxt;\n    }\n}", "path": "erupt/erupt-data/erupt-jpa/src/main/java/xyz/erupt/jpa/service/EruptDataServiceDbImpl.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "erupts/erupt", "stars": 2345, "license": "apache-2.0", "language": "java", "size": 158826}
{"docstring": "/**\n * Call this method after you handle a keypress so that the meta state will be reset to\n * unshifted (if it is not still down) or primed to be reset to unshifted (once it is released).\n * Takes the current state, returns the new state.\n */\n", "func_signal": "public static long adjustMetaAfterKeypress(long state)", "code": "{\n    state = adjust(state, META_SHIFT_ON, META_SHIFT_MASK);\n    state = adjust(state, META_ALT_ON, META_ALT_MASK);\n    state = adjust(state, META_SYM_ON, META_SYM_MASK);\n    return state;\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/physical/MyMetaKeyKeyListener.java", "commit_date": "2020-06-20 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "// write out all current attributes\n", "func_signal": "private void writeAttributes() throws IOException", "code": "{\n    this.writer.write(this.attrs.toString());\n    this.attrs.setLength(0);\n    this.empty = false;\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/XmlWriter.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** This will ensure that password extra rows are not shown over a symbols keyboard. */\n", "func_signal": "@KeyboardRowModeId\nprivate static int filterPasswordMode(@KeyboardRowModeId int mode)", "code": "{\n    if (mode == KEYBOARD_ROW_MODE_PASSWORD) {\n        return KEYBOARD_ROW_MODE_NORMAL;\n    } else {\n        return mode;\n    }\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/GenericKeyboard.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** Output body text. Any xml characters are escaped. */\n", "func_signal": "public XmlWriter writeText(String text) throws IOException", "code": "{\n    closeOpeningTag(false);\n    this.empty = false;\n    this.justWroteText = true;\n    this.writer.write(escapeXml(text));\n    return this;\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/XmlWriter.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "// close off the opening tag\n", "func_signal": "private void closeOpeningTag(final boolean newLine) throws IOException", "code": "{\n    if (!this.closed) {\n        writeAttributes();\n        this.closed = true;\n        this.writer.write(\">\");\n        if (newLine) this.writer.write(\"\\n\");\n    }\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/XmlWriter.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** Switches to Voice IME. */\n", "func_signal": "@Override\npublic void startVoiceRecognition(String language)", "code": "{\n    InputMethodManager inputMethodManager = getInputMethodManager(mInputMethodService);\n\n    InputMethodInfo inputMethodInfo = getVoiceImeInputMethodInfo(inputMethodManager);\n\n    if (inputMethodInfo == null) {\n        return;\n    }\n\n    inputMethodManager.setInputMethodAndSubtype(\n            mInputMethodService.getWindow().getWindow().getAttributes().token,\n            inputMethodInfo.getId(),\n            getVoiceImeSubtype(inputMethodManager, inputMethodInfo));\n}", "path": "AnySoftKeyboard/ime/voiceime/src/main/java/com/google/android/voiceime/ImeTrigger.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * Gets the state of the meta keys.\n *\n * @param state the current meta state bits.\n * @return an integer in which each bit set to one represents a pressed or locked meta key.\n */\n", "func_signal": "public static int getMetaState(long state)", "code": "{\n    return getActive(state, META_SHIFT_ON, META_SHIFT_ON, META_CAP_LOCKED)\n            | getActive(state, META_ALT_ON, META_ALT_ON, META_ALT_LOCKED)\n            | getActive(state, META_SYM_ON, META_SYM_ON, META_SYM_LOCKED);\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/physical/MyMetaKeyKeyListener.java", "commit_date": "2020-06-20 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** Returns true if an implementation of Voice IME is installed. */\n", "func_signal": "public static boolean isInstalled(InputMethodService inputMethodService)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n        return false;\n    }\n\n    InputMethodInfo inputMethodInfo =\n            getVoiceImeInputMethodInfo(getInputMethodManager(inputMethodService));\n\n    if (inputMethodInfo == null) {\n        return false;\n    }\n\n    return inputMethodInfo.getSubtypeCount() > 0;\n}", "path": "AnySoftKeyboard/ime/voiceime/src/main/java/com/google/android/voiceime/ImeTrigger.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * Close this writer. It does not close the underlying writer, but does throw an exception if\n * there are as yet unclosed tags.\n *\n * @throws IOException\n */\n", "func_signal": "public void close() throws IOException", "code": "{\n    if (!this.stack.empty()) {\n        throw new InvalidObjectException(\n                \"Tags are not all closed. \"\n                        + \"Possibly, \"\n                        + this.stack.pop()\n                        + \" is unclosed. \");\n    }\n    if (thisIsWriterOwner) {\n        this.writer.flush();\n        this.writer.close();\n    }\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/XmlWriter.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "// from XmlW\n", "func_signal": "public static String escapeXml(String str)", "code": "{\n    str = replaceString(str, \"&\", \"&amp;\");\n    str = replaceString(str, \"<\", \"&lt;\");\n    str = replaceString(str, \">\", \"&gt;\");\n    str = replaceString(str, \"\\\"\", \"&quot;\");\n    str = replaceString(str, \"'\", \"&apos;\");\n    return str;\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/XmlWriter.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** Solves https://github.com/AnySoftKeyboard/AnySoftKeyboard/issues/719 */\n", "func_signal": "@Test\npublic void testInvalidateCachedLayoutsWhenInputModeChanges()", "code": "{\n    mAnySoftKeyboardUnderTest.onFinishInputView(true);\n    mAnySoftKeyboardUnderTest.onFinishInput();\n\n    EditorInfo editorInfo =\n            TestableAnySoftKeyboard.createEditorInfo(\n                    EditorInfo.IME_ACTION_NONE,\n                    EditorInfo.TYPE_CLASS_TEXT + EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);\n    mAnySoftKeyboardUnderTest.onStartInput(editorInfo, false);\n    mAnySoftKeyboardUnderTest.onStartInputView(editorInfo, false);\n\n    Assert.assertEquals(\n            \"c7535083-4fe6-49dc-81aa-c5438a1a343a\",\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardId());\n    Assert.assertEquals(\n            Keyboard.KEYBOARD_ROW_MODE_EMAIL,\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardMode());\n\n    mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.MODE_SYMOBLS);\n\n    Assert.assertEquals(\n            \"symbols_keyboard\",\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardId());\n    Assert.assertEquals(\n            Keyboard.KEYBOARD_ROW_MODE_EMAIL,\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardMode());\n\n    mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.MODE_ALPHABET);\n\n    Assert.assertEquals(\n            \"c7535083-4fe6-49dc-81aa-c5438a1a343a\",\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardId());\n    Assert.assertEquals(\n            Keyboard.KEYBOARD_ROW_MODE_EMAIL,\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardMode());\n\n    // switching input types\n    mAnySoftKeyboardUnderTest.onFinishInputView(true);\n    mAnySoftKeyboardUnderTest.onFinishInput();\n\n    editorInfo =\n            TestableAnySoftKeyboard.createEditorInfo(\n                    EditorInfo.IME_ACTION_NONE,\n                    EditorInfo.TYPE_CLASS_TEXT + EditorInfo.TYPE_TEXT_VARIATION_URI);\n    mAnySoftKeyboardUnderTest.onStartInput(editorInfo, false);\n    mAnySoftKeyboardUnderTest.onStartInputView(editorInfo, false);\n\n    Assert.assertEquals(\n            \"c7535083-4fe6-49dc-81aa-c5438a1a343a\",\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardId());\n    Assert.assertEquals(\n            Keyboard.KEYBOARD_ROW_MODE_URL,\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardMode());\n\n    mAnySoftKeyboardUnderTest.simulateKeyPress(KeyCodes.MODE_SYMOBLS);\n\n    Assert.assertEquals(\n            \"symbols_keyboard\",\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardId());\n    Assert.assertEquals(\n            Keyboard.KEYBOARD_ROW_MODE_URL,\n            mAnySoftKeyboardUnderTest.getCurrentKeyboardForTests().getKeyboardMode());\n}", "path": "AnySoftKeyboard/ime/app/src/test/java/com/anysoftkeyboard/ime/AnySoftKeyboardKeyboardSwitchingTest.java", "commit_date": "2020-03-20 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * Setup what's to display in the suggestions strip\n *\n * @param suggestions the list of words to show\n * @param typedWordValid the typed word (word at index 0) is a valid word\n * @param haveMinimalSuggestion the list of suggestions contains a valid word. So, either\n *     highlight the first word (typedWordValid == true), or highlight the second word\n *     (typedWordValid != true)\n */\n", "func_signal": "public void setSuggestions(\n        @NonNull List<? extends CharSequence> suggestions,\n        boolean typedWordValid,\n        boolean haveMinimalSuggestion)", "code": "{\n    clear();\n    int insertCount = Math.min(suggestions.size(), MAX_SUGGESTIONS);\n    for (CharSequence suggestion : suggestions) {\n        mSuggestions.add(suggestion);\n        if (--insertCount == 0) {\n            break;\n        }\n    }\n\n    mTypedWordValid = typedWordValid;\n    scrollTo(0, getScrollY());\n    mTargetScrollX = 0;\n    mHaveMinimalSuggestion = haveMinimalSuggestion;\n    // re-drawing required.\n    invalidate();\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/views/CandidateView.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * Will apply a ColorFilter on-top of the edge-effect drawables. Call this method after\n * inflating a view (e.g., ListView, ScrollView) which you want to brand\n *\n * @param activity The application's Context\n * @param brandColor The color you wish to apply.\n */\n", "func_signal": "public static void brandGlowEffect(@NonNull Activity activity, int brandColor)", "code": "{\n    try {\n        // glow\n        int glowDrawableId =\n                activity.getResources().getIdentifier(\"overscroll_glow\", \"drawable\", \"android\");\n        if (glowDrawableId != 0) {\n            Drawable androidGlow =\n                    ResourcesCompat.getDrawable(\n                            activity.getResources(), glowDrawableId, activity.getTheme());\n            assert androidGlow\n                    != null; // I know it can be null, since there is an Identifier with the\n            // type and name\n            androidGlow.setColorFilter(brandColor, PorterDuff.Mode.SRC_IN);\n        }\n        // edge\n        int edgeDrawableId =\n                activity.getResources().getIdentifier(\"overscroll_edge\", \"drawable\", \"android\");\n        if (edgeDrawableId != 0) {\n            Drawable androidEdge =\n                    ResourcesCompat.getDrawable(\n                            activity.getResources(), edgeDrawableId, activity.getTheme());\n            assert androidEdge\n                    != null; // I know it can be null, since there is an Identifier with the\n            // type and name\n            androidEdge.setColorFilter(brandColor, PorterDuff.Mode.SRC_IN);\n        }\n    } catch (Exception e) {\n        Logger.w(\"EdgeEffectHacker\", \"Failed to set brandGlowEffect!\", e);\n    }\n}", "path": "AnySoftKeyboard/ime/pixel/src/main/java/net/evendanan/pixel/EdgeEffectHacker.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * Download the emoji list from https://unicode.org/Public/emoji/11.0/emoji-test.txt\n *\n * @param sourceUnicodeEmojiListFile path to the file saved from\n *     http://unicode.org/emoji/charts/full-emoji-list.html\n * @param targetResourceFolder the app's resources folder\n */\n", "func_signal": "public EmojiKeyboardsExtractor(File sourceUnicodeEmojiListFile, File targetResourceFolder)", "code": "{\n    mSourceHtmlFile = sourceUnicodeEmojiListFile;\n    mXmlResourceFolder = targetResourceFolder;\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/emoji/EmojiKeyboardsExtractor.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** Construct a CandidateView for showing suggested words for completion. */\n", "func_signal": "public CandidateView(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super(context, attrs, defStyle);\n    mSelectionHighlight =\n            ContextCompat.getDrawable(context, R.drawable.list_selector_background_pressed);\n\n    mAddToDictionaryHint = context.getString(R.string.hint_add_to_dictionary);\n\n    mPaint = new Paint();\n    mTextPaint = new TextPaint(mPaint);\n    final int minTouchableWidth =\n            context.getResources()\n                    .getDimensionPixelOffset(R.dimen.candidate_min_touchable_width);\n    mGestureDetector =\n            new GestureDetector(context, new CandidateStripGestureListener(minTouchableWidth));\n\n    setWillNotDraw(false);\n    setHorizontalScrollBarEnabled(false);\n    setVerticalScrollBarEnabled(false);\n    scrollTo(0, getScrollY());\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/views/CandidateView.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * Write an attribute out for the current entity. Any xml characters in the value are escaped.\n * Currently it does not actually throw the exception, but the api is set that way for future\n * changes.\n *\n * @param attr name of attribute.\n * @param value value of attribute.\n */\n", "func_signal": "public XmlWriter writeAttribute(String attr, String value)", "code": "{\n    this.attrs.append(\" \");\n    this.attrs.append(attr);\n    this.attrs.append(\"=\\\"\");\n    this.attrs.append(escapeXml(value));\n    this.attrs.append(\"\\\"\");\n    return this;\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/XmlWriter.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** Handles presses of the meta keys. */\n", "func_signal": "public static long handleKeyDown(long state, int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {\n        return press(state, META_SHIFT_ON, META_SHIFT_MASK);\n    }\n\n    if (keyCode == KeyEvent.KEYCODE_ALT_LEFT\n            || keyCode == KeyEvent.KEYCODE_ALT_RIGHT\n            || keyCode == KeyEvent.KEYCODE_NUM) {\n        return press(state, META_ALT_ON, META_ALT_MASK);\n    }\n\n    if (keyCode == KeyEvent.KEYCODE_SYM) {\n        return press(state, META_SYM_ON, META_SYM_MASK);\n    }\n\n    return state;\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/physical/MyMetaKeyKeyListener.java", "commit_date": "2020-06-20 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/** Handles release of the meta keys. */\n", "func_signal": "public static long handleKeyUp(long state, int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {\n        return release(state, META_SHIFT_ON, META_SHIFT_MASK);\n    }\n\n    if (keyCode == KeyEvent.KEYCODE_ALT_LEFT\n            || keyCode == KeyEvent.KEYCODE_ALT_RIGHT\n            || keyCode == KeyEvent.KEYCODE_NUM) {\n        return release(state, META_ALT_ON, META_ALT_MASK);\n    }\n\n    if (keyCode == KeyEvent.KEYCODE_SYM) {\n        return release(state, META_SYM_ON, META_SYM_MASK);\n    }\n\n    return state;\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/physical/MyMetaKeyKeyListener.java", "commit_date": "2020-06-20 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * End the current entity. This will throw an exception if it is called when there is not a\n * currently open entity.\n *\n * @throws IOException\n */\n", "func_signal": "public XmlWriter endEntity() throws IOException", "code": "{\n    if (this.stack.empty()) {\n        throw new InvalidObjectException(\"Called endEntity too many times. \");\n    }\n    String name = this.stack.pop();\n    if (name != null) {\n        if (this.empty) {\n            writeAttributes();\n            this.writer.write(\"/>\\n\");\n        } else {\n            if (!this.justWroteText) {\n                for (int tabIndex = 0; tabIndex < stack.size() + indentingOffset; tabIndex++)\n                    this.writer.write(INDENT_STRING);\n            }\n            this.writer.write(\"</\");\n            this.writer.write(name);\n            this.writer.write(\">\\n\");\n        }\n        this.empty = false;\n        this.closed = true;\n        this.justWroteText = false;\n    }\n    return this;\n}", "path": "AnySoftKeyboard/buildSrc/src/main/java/XmlWriter.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * If the canvas is null, then only touch calculations are performed to pick the target\n * candidate.\n */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n    if (canvas != null) {\n        super.onDraw(canvas);\n    }\n    mTotalWidth = 0;\n\n    final int height = getHeight();\n    if (mBgPadding == null) {\n        mBgPadding = new Rect(0, 0, 0, 0);\n        if (getBackground() != null) {\n            getBackground().getPadding(mBgPadding);\n        }\n        mDivider.setBounds(0, 0, mDivider.getIntrinsicWidth(), mDivider.getIntrinsicHeight());\n    }\n\n    final int dividerYOffset = (height - mDivider.getMinimumHeight()) / 2;\n    final int count = mSuggestions.size();\n    final Rect bgPadding = mBgPadding;\n    final Paint paint = mPaint;\n    final int touchX = mTouchX;\n    final int scrollX = getScrollX();\n    final boolean scrolled = mScrolled;\n    final boolean typedWordValid = mTypedWordValid;\n\n    final ThemeResourcesHolder themeResources = mThemeOverlayCombiner.getThemeResources();\n    int x = 0;\n    for (int i = 0; i < count; i++) {\n        CharSequence suggestion = mSuggestions.get(i);\n        if (suggestion == null) {\n            continue;\n        }\n        final int wordLength = suggestion.length();\n\n        paint.setColor(themeResources.getNameTextColor());\n        if (mHaveMinimalSuggestion\n                && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {\n            paint.setTypeface(Typeface.DEFAULT_BOLD);\n            paint.setColor(themeResources.getKeyTextColor().getDefaultColor());\n            // existsAutoCompletion = true;\n        } else if (i != 0 || (wordLength == 1 && count > 1)) {\n            // HACK: even if i == 0, we use mColorOther when this\n            // suggestion's length is 1 and\n            // there are multiple suggestions, such as the default\n            // punctuation list.\n            paint.setColor(themeResources.getHintTextColor());\n        }\n\n        // now that we set the typeFace, we can measure\n        int wordWidth;\n        if ((wordWidth = mWordWidth[i]) == 0) {\n            float textWidth = paint.measureText(suggestion, 0, wordLength);\n            // wordWidth = Math.max(0, (int) textWidth + X_GAP * 2);\n            wordWidth = (int) (textWidth + mHorizontalGap * 2);\n            mWordWidth[i] = wordWidth;\n        }\n\n        mWordX[i] = x;\n\n        if (touchX != OUT_OF_BOUNDS_X_CORD\n                && !scrolled\n                && touchX + scrollX >= x\n                && touchX + scrollX < x + wordWidth) {\n            if (canvas != null && !mShowingAddToDictionary) {\n                canvas.translate(x, 0);\n                mSelectionHighlight.setBounds(0, bgPadding.top, wordWidth, height);\n                mSelectionHighlight.draw(canvas);\n                canvas.translate(-x, 0);\n            }\n            mSelectedString = suggestion;\n            mSelectedIndex = i;\n        }\n\n        if (canvas != null) {\n            // (+)This is the trick to get RTL/LTR text correct\n            if (mAlwaysUseDrawText) {\n                final int y = (int) (height + paint.getTextSize() - paint.descent()) / 2;\n                canvas.drawText(suggestion, 0, wordLength, x + wordWidth / 2, y, paint);\n            } else {\n                final int y = (int) (height - paint.getTextSize() + paint.descent()) / 2;\n                // no matter what: StaticLayout\n                float textX = x + (wordWidth / 2) - mHorizontalGap;\n                float textY = y - bgPadding.bottom - bgPadding.top;\n\n                canvas.translate(textX, textY);\n                mTextPaint.setTypeface(paint.getTypeface());\n                mTextPaint.setColor(paint.getColor());\n\n                StaticLayout suggestionText =\n                        new StaticLayout(\n                                suggestion,\n                                mTextPaint,\n                                wordWidth,\n                                Alignment.ALIGN_CENTER,\n                                1.0f,\n                                0.0f,\n                                false);\n                suggestionText.draw(canvas);\n\n                canvas.translate(-textX, -textY);\n            }\n            // (-)\n            paint.setColor(themeResources.getHintTextColor());\n            canvas.translate(x + wordWidth, 0);\n            // Draw a divider unless it's after the hint\n            // or the last suggested word\n            if (count > 1 && !mShowingAddToDictionary && i != (count - 1)) {\n                canvas.translate(0, dividerYOffset);\n                mDivider.draw(canvas);\n                canvas.translate(0, -dividerYOffset);\n            }\n            canvas.translate(-x - wordWidth, 0);\n        }\n        paint.setTypeface(Typeface.DEFAULT);\n        x += wordWidth;\n    }\n    mTotalWidth = x;\n    if (mTargetScrollX != scrollX) {\n        scrollToTarget();\n    }\n}", "path": "AnySoftKeyboard/ime/app/src/main/java/com/anysoftkeyboard/keyboards/views/CandidateView.java", "commit_date": "2020-01-30 00:00:00", "repo_name": "AnySoftKeyboard/AnySoftKeyboard", "stars": 2713, "license": "apache-2.0", "language": "java", "size": 276438}
{"docstring": "/**\n * Automatically creates activity options with all of the transition views within view.\n */\n", "func_signal": "public static ActivityOptionsCompat getActivityOptions(Activity activity, View view, boolean\n    includeSystemUi)", "code": "{\n  List<Pair<View, String>> transitionViews = new ArrayList<>();\n\n  if (VERSION.SDK_INT >= TARGET_API) {\n    ViewUtils.findTransitionViews(view, transitionViews);\n    if (includeSystemUi) {\n      addSystemUi(activity, transitionViews);\n    }\n  }\n\n  //noinspection unchecked\n  return ActivityOptionsCompat.makeSceneTransitionAnimation(activity, transitionViews.toArray\n      (new Pair[transitionViews.size()]));\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/AutoSharedElementCallback.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Automatically configure the activity options. This will walk the Activity view hierarchy and\n * look for any potential transition views. It will then throw out any transition views with the\n * same type but a different id.\n */\n", "func_signal": "public static ActivityOptionsCompat getActivityOptions(Activity activity, String type, long id)", "code": "{\n  List<Pair<View, String>> transitionViews = new ArrayList<>();\n  ViewUtils.findTransitionViews(activity.getWindow().getDecorView(), transitionViews);\n\n  Iterator<Pair<View, String>> it = transitionViews.iterator();\n  while (it.hasNext()) {\n    Pair<View, String> tv = it.next();\n    String transitionName = ViewCompat.getTransitionName(tv.first);\n    TransitionName tn = TransitionName.parse(transitionName);\n    // If a transition view has the same type but a different ID then remove it.\n    if (tn.id() != id && tn.type().equals(type)) {\n      it.remove();\n    }\n  }\n\n  //noinspection unchecked\n  return ActivityOptionsCompat.makeSceneTransitionAnimation(activity, transitionViews.toArray\n      (new Pair[transitionViews.size()]));\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/AutoSharedElementCallback.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Returns the percentage of rect1 that is inside rect2.\n */\n", "func_signal": "public static float getRectOverlapPercentage(Rect rect1, Rect rect2)", "code": "{\n  float intersectionSurfaceArea =\n      Math.max(0, Math.min(rect1.right, rect2.right) - Math.max(rect1.left, rect2.left)) *\n          Math.max(0, Math.min(rect1.bottom, rect2.bottom) - Math.max(rect1.top, rect2.top));\n  float surfaceArea1 = rect1.width() * rect1.height();\n  return intersectionSurfaceArea / surfaceArea1;\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Clears and populates partialMatches with all views from transitionViews that is a partial match\n * with the supplied transition name.\n */\n", "func_signal": "private void findAllPartialMatches(TransitionName tn, List<Pair<View, String>> transitionViews,\n    List<View> partialMatches)", "code": "{\n  partialMatches.clear();\n  for (Pair<View, String> p : transitionViews) {\n    TransitionName tn2 = TransitionName.parse(p.second /* transition name */);\n    // If there is no views that perfectly matches the transition name but there is one that is\n    // a partial match, we will automatically\n    // map it. This will commonly occur when the user is viewing pictures and swipes to a\n    // different one.\n    if (tn.partialEquals(tn2)) {\n      // Partial match\n      partialMatches.add(p.first);\n    }\n  }\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/AutoSharedElementCallback.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/* This is a slightly modified View/ViewGroup#findNamedViews().\n * findNamedViews() is used by the framework to traverse all children and create a map\n * of all children with transition names. However, that method is @hide. Thanks Google.\n * However, we can actually create a slightly more efficient version where we can start\n * with a specific child, look for a specific transition name, and just return that.\n * This works better in cases where you are only looking for a single view, not an arbitrary\n * number of transition views.\n */\n  /*@Nullable*/\n", "func_signal": "public static View findTransitionView(View view, String transitionName)", "code": "{\n  if (transitionName.equals(ViewCompat.getTransitionName(view))) {\n    return view;\n  }\n\n  if (view instanceof ViewGroup) {\n    ViewGroup vg = (ViewGroup) view;\n    for (int i = vg.getChildCount() - 1; i >= 0; i--) {\n      View transitionView = findTransitionView(vg.getChildAt(i), transitionName);\n      if (transitionView != null) {\n        return transitionView;\n      }\n    }\n  }\n\n  return null;\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "// NOTE(lmr):\n// The problem we have now is that we don't know when a \"default\" is different\n// than the system default, so those properties start off out of sync...\n", "func_signal": "public void reconcileNavigationProperties(\n    ReactInterface component,\n    ReactToolbar toolbar,\n    ActionBar bar,\n    ReadableMap prev,\n    ReadableMap next,\n    boolean firstCall\n)", "code": "{\n  Log.d(TAG, \"reconcileNavigationProperties\");\n\n  Integer foregroundColor = defaults.foregroundColor;\n\n  if (next.hasKey(\"foregroundColor\")) {\n    foregroundColor = next.getInt(\"foregroundColor\");\n  }\n\n  if (stringHasChanged(\"title\", prev, next)) {\n    if (next.hasKey(\"title\")) {\n      String title = next.getString(\"title\");\n      toolbar.setTitle(title);\n    } else {\n      toolbar.setTitle(null);\n    }\n  }\n\n  if (firstCall || numberHasChanged(\"titleColor\", prev, next)) {\n    if (next.hasKey(\"titleColor\")) {\n      Integer titleColor = next.getInt(\"titleColor\");\n      toolbar.setTitleTextColor(titleColor);\n    } else {\n      toolbar.setTitleTextColor(foregroundColor);\n    }\n  }\n\n  if (stringHasChanged(\"subtitle\", prev, next)) {\n    if (next.hasKey(\"subtitle\")) {\n      String subtitle = next.getString(\"subtitle\");\n      toolbar.setSubtitle(subtitle);\n    } else {\n      toolbar.setSubtitle(null);\n    }\n  }\n\n  if (firstCall || numberHasChanged(\"subtitleColor\", prev, next)) {\n    if (next.hasKey(\"subtitleColor\")) {\n      Integer subtitleColor = next.getInt(\"subtitleColor\");\n      toolbar.setSubtitleTextColor(subtitleColor);\n    } else {\n      toolbar.setSubtitleTextColor(foregroundColor);\n    }\n  }\n\n  if (stringHasChanged(\"windowTitle\", prev, next)) {\n    if (next.hasKey(\"windowTitle\")) {\n      String windowTitle = next.getString(\"windowTitle\");\n      bar.setWindowTitle(windowTitle);\n    } else {\n      bar.setWindowTitle(null);\n    }\n  }\n\n  if (firstCall || numberHasChanged(\"screenColor\", prev, next)) {\n    if (next.hasKey(\"screenColor\")) {\n      // this is the screen background color\n      Integer screenColor = next.getInt(\"screenColor\");\n      component.getReactRootView().setBackgroundColor(screenColor);\n    } else {\n      component.getReactRootView().setBackgroundColor(defaults.screenColor);\n    }\n  }\n\n  if (firstCall || numberHasChanged(\"backgroundColor\", prev, next)) {\n    if (next.hasKey(\"backgroundColor\")) {\n      Integer backgroundColor = next.getInt(\"backgroundColor\");\n      toolbar.setBackgroundColor(backgroundColor);\n    } else {\n      toolbar.setBackgroundColor(defaults.backgroundColor);\n    }\n  }\n\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    if (firstCall || numberHasChanged(\"elevation\", prev, next)) {\n      if (next.hasKey(\"elevation\")) {\n        Double elevation = next.getDouble(\"elevation\");\n          toolbar.setElevation(elevation.floatValue());\n      } else {\n        toolbar.setElevation(defaults.elevation);\n      }\n    }\n  }\n\n  if (firstCall || numberHasChanged(\"alpha\", prev, next)) {\n    if (next.hasKey(\"alpha\")) {\n      Double alpha = next.getDouble(\"alpha\");\n      toolbar.setAlpha(alpha.floatValue());\n    } else {\n      toolbar.setAlpha(defaults.alpha);\n    }\n  }\n\n  if (firstCall || mapHasChanged(\"navIcon\", prev, next)) {\n    if (next.hasKey(\"navIcon\")) {\n      toolbar.setNavIconSource(next.getMap(\"navIcon\"));\n    } else {\n//        toolbar.setNavigationIcon(android.R.drawable.ic_launchaer/*R.drawable.abc_ic_ab_back_mtrl_am_alpha*/);\n    }\n  }\n\n  if (firstCall || mapHasChanged(\"logo\", prev, next)) {\n    if (next.hasKey(\"logo\")) {\n      toolbar.setLogoSource(next.getMap(\"logo\"));\n    } else {\n\n    }\n  }\n\n  if (firstCall || mapHasChanged(\"overflowIcon\", prev, next)) {\n    if (next.hasKey(\"overflowIcon\")) {\n      toolbar.setOverflowIconSource(next.getMap(\"overflowIcon\"));\n    } else {\n\n    }\n  }\n\n  if (bar != null) {\n\n    // ActionBar only properties...\n\n    if (firstCall || boolHasChanged(\"hidden\", prev, next)) {\n      boolean hidden = false;\n\n      if (next.hasKey(\"hidden\")) {\n        hidden = next.getBoolean(\"hidden\");\n      }\n\n      if (hidden && bar.isShowing()) {\n        bar.hide();\n      } else if (!hidden && !bar.isShowing()) {\n        bar.show();\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"displayHomeAsUp\", prev, next)) {\n      if (next.hasKey(\"displayHomeAsUp\")) {\n        boolean displayHomeAsUp = next.getBoolean(\"displayHomeAsUp\");\n        bar.setDisplayHomeAsUpEnabled(displayHomeAsUp);\n      } else {\n        bar.setDisplayHomeAsUpEnabled(defaults.displayHomeAsUp);\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"homeButtonEnabled\", prev, next)) {\n      if (next.hasKey(\"homeButtonEnabled\")) {\n        boolean homeButtonEnabled = next.getBoolean(\"homeButtonEnabled\");\n        bar.setHomeButtonEnabled(homeButtonEnabled);\n      } else {\n\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"showHome\", prev, next)) {\n      if (next.hasKey(\"showHome\")) {\n        boolean showHome = next.getBoolean(\"showHome\");\n        bar.setDisplayShowHomeEnabled(showHome);\n      } else {\n        bar.setDisplayShowHomeEnabled(defaults.showHome);\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"showTitle\", prev, next)) {\n      if (next.hasKey(\"showTitle\")) {\n        boolean showTitle = next.getBoolean(\"showTitle\");\n        bar.setDisplayShowTitleEnabled(showTitle);\n      } else {\n        bar.setDisplayShowTitleEnabled(defaults.showTitle);\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"showCustom\", prev, next)) {\n      if (next.hasKey(\"showCustom\")) {\n        boolean showCustom = next.getBoolean(\"showCustom\");\n        bar.setDisplayShowCustomEnabled(showCustom);\n      } else {\n        bar.setDisplayShowCustomEnabled(defaults.showCustom);\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"useLogo\", prev, next)) {\n      if (next.hasKey(\"useLogo\")) {\n        boolean useLogo = next.getBoolean(\"useLogo\");\n        bar.setDisplayUseLogoEnabled(useLogo);\n      } else {\n        bar.setDisplayUseLogoEnabled(defaults.useLogo);\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"useShowHideAnimation\", prev, next)) {\n      if (next.hasKey(\"useShowHideAnimation\")) {\n        boolean useShowHideAnimation = next.getBoolean(\"useShowHideAnimation\");\n        bar.setShowHideAnimationEnabled(useShowHideAnimation);\n      } else {\n        bar.setShowHideAnimationEnabled(defaults.useShowHideAnimation);\n      }\n    }\n\n    if (firstCall || boolHasChanged(\"hideOnScroll\", prev, next)) {\n      if (next.hasKey(\"hideOnScroll\")) {\n        boolean hideOnScroll = next.getBoolean(\"hideOnScroll\");\n        bar.setHideOnContentScrollEnabled(hideOnScroll);\n      } else {\n        bar.setHideOnContentScrollEnabled(defaults.hideOnScroll);\n      }\n    }\n\n    if (firstCall || numberHasChanged(\"hideOffset\", prev, next)) {\n      if (next.hasKey(\"hideOffset\")) {\n        int hideOffset = next.getInt(\"hideOffset\");\n        bar.setHideOffset(hideOffset);\n      } else {\n        bar.setHideOffset(defaults.hideOffset);\n      }\n    }\n  }\n\n  reconcileStatusBarStyle(\n    component.getActivity(),\n    prev,\n    next,\n    firstCall\n  );\n\n  // TODO(lmr): this doesnt appear to work like i think it should.\n//    if (firstCall || stringHasChanged(\"textAlign\", prev, next)) {\n//      if (next.hasKey(\"textAlign\")) {\n//        String textAlign = next.getString(\"textAlign\");\n//        int alignment = TextAlignmentFromString(textAlign);\n//        toolbar.setTextAlignment(alignment);\n//      } else {\n//        toolbar.setTextAlignment(defaults.textAlignment);\n//      }\n//    }\n\n//    bar.setHomeAsUpIndicator(drawable); // TODO\n//    toolbar.setForeground(drawable);\n//    toolbar.setCameraDistance(0.1);\n//    toolbar.setBackgroundTintMode(PorterDuff.Mode.CLEAR);\n//    toolbar.setForegroundTintMode(PorterDuff.Mode.DARKEN);\n\n  // we are just going to *always* invalidate this menu when we\n  // reconcile, and handle everything in `prepareOptionsMenu`.\n  component.getActivity().supportInvalidateOptionsMenu();\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/DefaultNavigationImplementation.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Returns the result_code from the ReadableMap payload or RESULT_OK if none found. <p> Throws\n * IllegalArgumentException if the resultCode is not a number.\n */\n", "func_signal": "private static int getResultCodeFromPayload(ReadableMap payload)", "code": "{\n  if (payload == null) {\n    return Activity.RESULT_OK;\n  }\n  if (!payload.hasKey(RESULT_CODE)) {\n    return Activity.RESULT_OK;\n  }\n  if (payload.getType(RESULT_CODE) != ReadableType.Number) {\n    throw new IllegalArgumentException(\"Found non-integer resultCode.\");\n  }\n  return payload.getInt(RESULT_CODE);\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/NavigatorModule.java", "commit_date": "2017-08-25 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Sets up the {@link SharedElementCallback} for the given activity.\n *\n * However, some views may not be available immediately such as views inside of a RecyclerView or\n * in a toolbar. Use asyncTransitionViews to postpone the shared element transition until all\n * async views are ready.\n *\n * However, it will only look for type, id, and subtype and will instead do a crossfade if the\n * subid doesn't match.\n */\n", "func_signal": "public AutoSharedElementCallback(AppCompatActivity activity, TransitionName...\n    asyncTransitionViews)", "code": "{\n  this.activity = activity;\n  if (VERSION.SDK_INT >= TARGET_API) {\n    // Using Arrays.asList() by itself doesn't support iterator.remove().\n    this.asyncTransitionViews = new LinkedList<>(Arrays.asList(asyncTransitionViews));\n    activity.supportPostponeEnterTransition();\n    startPostponedTransitionsIfReady();\n\n    checkForAsyncViewsRunnable = new Runnable() {\n      @Override public void run() {\n        startPostponedTransitionsIfReady();\n      }\n    };\n    cancelAsyncViewsRunnable = new Runnable() {\n      @Override public void run() {\n        if (AutoSharedElementCallback.this.hasActivityStopped()) {\n          return;\n        }\n        AutoSharedElementCallback.this.scheduleStartPostponedTransition();\n        Log.w(TAG, \"Timed out waiting for async views to load!\");\n      }\n    };\n\n    startPostponedTransitionsIfReady();\n    getDecorView().postDelayed(cancelAsyncViewsRunnable, ASYNC_VIEWS_TIMEOUT_MS);\n  } else {\n    checkForAsyncViewsRunnable = null;\n    cancelAsyncViewsRunnable = null;\n    this.asyncTransitionViews = null;\n  }\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/AutoSharedElementCallback.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Use empty string instead of null of subtype is not applicabale.\n */\n", "func_signal": "public static String toString(\n    @NonNull String type, long id, @NonNull String subtype, long subId)", "code": "{\n  if (type.indexOf(DELIMETER) != -1) {\n    throw new IllegalArgumentException(\"Invalid type \" + type + \". Delimeter is \" + DELIMETER);\n  } else if (subtype.indexOf(DELIMETER) != -1) {\n    throw new IllegalArgumentException(\n        \"Invalid subtype \" + subtype + \". Delimeter is \" + DELIMETER);\n  }\n\n  return type + DELIMETER + id + DELIMETER + subtype + DELIMETER + subId;\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/TransitionName.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Iterates through all shared elements and all mapp shared elements. If there is a mapped shared\n * element that is only a partial match with its shared element then we will cross fade from the\n * shared element to the shared element snapshot which is a bitmap created by Activity A that\n * represents the appearance of the view that the shared element is transitioning back to.\n */\n", "func_signal": "private void crossFadePartialMatchImageViews(List<String> sharedElementNames, List<View>\n    sharedElements, List<View> sharedElementSnapshots, int duration)", "code": "{\n  // Fixes a crash in which sharedElementNames and sharedElementSnapshots are different lengths.\n  // According to the javadocs, these should be 1:1 but for some reason they are not sometimes.\n  // I have no idea why or what it means when they are\n  // different. However, the crossfading relies on the assumption that they are so we'll just\n  // ignore that case.\n  // https://bugsnag.com/airbnb/android-1/errors/563d370d8203f6a6502fe8fc?filters[event\n  // .file][]=AutoSharedElementCallback.java&filters[event.since][]=7d\n  // Also, either of these lists can be null \u00af\\_(\u30c4)_/\u00af\n  if (sharedElementNames == null || sharedElementSnapshots == null ||\n      sharedElementNames.size() != sharedElementSnapshots.size()) {\n    return;\n  }\n\n  for (int i = sharedElementNames.size() - 1; i >= 0; i--) {\n    View snapshotView = sharedElementSnapshots.get(i);\n    if (snapshotView == null || !(snapshotView instanceof ImageView)) {\n      continue;\n    }\n\n    TransitionName tn1 = TransitionName.parse(sharedElementNames.get(i));\n    for (View se : sharedElements) {\n      // We need to be able to get the drawable from the ImageView to do the crossfade so if\n      // it's not an ImageView then there isn't much we can do.\n      if (!(se instanceof ImageView)) {\n        continue;\n      }\n\n      String transitionName = ViewCompat.getTransitionName(se);\n      TransitionName tn2 = TransitionName.parse(transitionName);\n      if (tn1.partialEquals(tn2) && tn1.subId() != tn2.subId()) {\n        // If The views are the same except for the subId then we can attempt to crossfade them.\n        Drawable sharedElementDrawable = ((ImageView) se).getDrawable();\n        if (sharedElementDrawable == null) {\n          sharedElementDrawable = new ColorDrawable(Color.TRANSPARENT);\n        }\n        Drawable sharedElementSnapshotDrawable = ((ImageView) snapshotView).getDrawable();\n        if (sharedElementSnapshotDrawable == null) {\n          sharedElementSnapshotDrawable = new ColorDrawable(Color.TRANSPARENT);\n        }\n        TransitionDrawable transitionDrawable =\n            new TransitionDrawable(new Drawable[]{sharedElementDrawable,\n                sharedElementSnapshotDrawable});\n        ((ImageView) se).setImageDrawable(transitionDrawable);\n        transitionDrawable.startTransition(duration);\n      }\n    }\n  }\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/AutoSharedElementCallback.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Walks the given view group and adds all view with a set transition name to the fragment\n * transaction.\n */\n", "func_signal": "public static void addSharedElementsToFragmentTransaction(\n        FragmentTransaction ft, ViewGroup viewGroup)", "code": "{\n  List<Pair<View, String>> transitionViews = new ArrayList<>();\n  ViewUtils.findTransitionViews(viewGroup, transitionViews);\n\n  for (Pair<View, String> tv : transitionViews) {\n    ft.addSharedElement(tv.first, tv.second);\n  }\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/AutoSharedElementCallback.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Trim a CharSequence (consisting of characters) in the same matter as {@link String#trim()}\n */\n", "func_signal": "public static CharSequence trim(CharSequence input)", "code": "{\n  int start = 0;\n  int end = input.length() - 1;\n\n  while (start <= end && input.charAt(start) <= ' ') {\n    start++;\n  }\n\n  while (end >= start && input.charAt(end) <= ' ') {\n    end--;\n  }\n\n  if (start > end) {\n    return \"\";\n  }\n\n  return input.subSequence(start, end + 1);\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Sets an icon for a specific icon source. If the uri indicates an icon\n * to be somewhere remote (http/https) or on the local filesystem, it uses fresco to load it.\n * Otherwise it loads the Drawable from the Resources and directly returns it via a callback\n */\n", "func_signal": "private void setIconSource(ReadableMap source, IconControllerListener controllerListener, DraweeHolder holder)", "code": "{\n\n  String uri = source != null ? source.getString(PROP_ICON_URI) : null;\n\n  if (uri == null) {\n    controllerListener.setIconImageInfo(null);\n    controllerListener.setDrawable(null);\n  } else if (uri.startsWith(\"http://\") || uri.startsWith(\"https://\") || uri.startsWith(\"file://\")) {\n    controllerListener.setIconImageInfo(getIconImageInfo(source));\n    DraweeController controller = Fresco.newDraweeControllerBuilder()\n        .setUri(Uri.parse(uri))\n        .setControllerListener(controllerListener)\n        .setOldController(holder.getController())\n        .build();\n    holder.setController(controller);\n    holder.getTopLevelDrawable().setVisible(true, true);\n  } else {\n    controllerListener.setDrawable(getDrawableByName(uri));\n  }\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ReactBottomNavigation.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Scans all transition views for a partial match with all remaining async transition views.\n */\n", "func_signal": "private void startPostponedTransitionsIfReady()", "code": "{\n  List<Pair<View, String>> transitionViewPairs = new ArrayList<>();\n  ViewUtils.findTransitionViews(getDecorView(), transitionViewPairs);\n\n  for (Pair<View, String> p : transitionViewPairs) {\n    if (p.first.getParent() == null) {\n      // Attempt to fix https://app.bugsnag\n      // .com/airbnb/android-1/errors/57ed9a742f7103a1e02c9225?filters%5Berror\n      // .status%5D%5B%5D=in%20progress&filters%5Bevent.since%5D%5B%5D=7d&filters%5Bevent\n      // .severity%5D%5B%5D=error&filters%5Berror.assigned_to%5D%5B%5D=me\n      return;\n    }\n  }\n\n  for (Iterator<TransitionName> it = asyncTransitionViews.iterator(); it.hasNext(); ) {\n    TransitionName tn = it.next();\n\n    for (Pair<View, String> p : transitionViewPairs) {\n      // We only look for a partial match which doesn't match on subid because we can crossfade\n      // views that match everything\n      // except for subid.\n      if (tn.partialEquals(TransitionName.parse(ViewCompat.getTransitionName(p.first)))) {\n        it.remove();\n        break;\n      }\n    }\n  }\n\n  if (asyncTransitionViews.isEmpty()) {\n    getDecorView().removeCallbacks(checkForAsyncViewsRunnable);\n    getDecorView().removeCallbacks(cancelAsyncViewsRunnable);\n    scheduleStartPostponedTransition();\n  } else {\n    getDecorView().postDelayed(checkForAsyncViewsRunnable, ASYNC_VIEW_POLL_MS);\n  }\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/AutoSharedElementCallback.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Gets the screen bounds of a view. This should be more accurate than\n * getScreenLocationMinusStatusBar since it doesn't need to estimate the status bar height. Try to\n * use this method if possible.\n *\n * @return Rect the view Rect(top, left, width, height) bounds on screen\n */\n", "func_signal": "public static Rect getViewBounds(View view)", "code": "{\n  Rect loc = new Rect();\n  int[] coords = new int[2];\n  view.getLocationOnScreen(coords);\n  loc.set(coords[0], coords[1], coords[0] + view.getWidth(), coords[1] + view.getHeight());\n  return loc;\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * @return the asset for `selectableItemBackgroundBorderlessResource` from the app theme\n */\n", "func_signal": "public static int getSelectableItemBackgroundBorderlessResource(Context context)", "code": "{\n  TypedValue outValue = new TypedValue();\n  context.getTheme().resolveAttribute(R.attr.selectableItemBackgroundBorderless, outValue, true);\n  return outValue.resourceId;\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * http://stackoverflow.com/questions/15746709/get-battery-level-only-once-using-android-sdk\n */\n  /*@FloatRange(from=0f, to=100f)*/\n", "func_signal": "public static float getBatteryLevel(Context context)", "code": "{\n  Intent batteryIntent =\n      context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n  if (batteryIntent == null) {\n    return 50.0f;\n  }\n  int level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);\n  int scale = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);\n\n  // Just in case.\n  if (level == -1 || scale == -1 || scale == 0f) {\n    return 50.0f;\n  }\n\n  return ((float) level / (float) scale) * 100.0f;\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * https://developer.android.com/training/monitoring-device-state/battery-monitoring.html\n */\n", "func_signal": "public static int getBatteryState(Context context)", "code": "{\n  IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\n  Intent batteryStatus = context.registerReceiver(null, ifilter);\n  if (batteryStatus == null) {\n    return BatteryManager.BATTERY_STATUS_UNKNOWN;\n  }\n  return batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/**\n * Returns a result Intent to be forwarded to the next Activity via onActivityResult(). Only set\n * EXTRA_IS_DISMISS to true if this Activity is not a modal, since they work as a navigation\n * boundary. That means a Navigation.dismiss call will finish all activities up to a modal,\n * including the modal.\n */\n", "func_signal": "private Intent getResultIntent(Intent data)", "code": "{\n  return new Intent()\n          .putExtras(data.getExtras())\n          .putExtra(ReactNativeIntents.EXTRA_IS_DISMISS, component.isDismissible());\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ReactInterfaceManager.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/*@Nullable*/\n", "func_signal": "public static View getMostVisibleView(List<View> views)", "code": "{\n  // If there are multiple partial matches, we will map the one that is the most visible.\n  View bestMatch = null;\n  float bestMatchPercentageOnScreen = 0;\n  if (!views.isEmpty()) {\n    for (View pm : views) {\n      float percentageOnScreen = ViewUtils.getViewPercentageOnScreen(pm);\n      if (percentageOnScreen > bestMatchPercentageOnScreen) {\n        bestMatchPercentageOnScreen = percentageOnScreen;\n        bestMatch = pm;\n      }\n    }\n    return bestMatch;\n  }\n  return null;\n}", "path": "native-navigation/lib/android/src/main/java/com/airbnb/android/react/navigation/ViewUtils.java", "commit_date": "2017-03-12 00:00:00", "repo_name": "airbnb/native-navigation", "stars": 3128, "license": "mit", "language": "java", "size": 1679}
{"docstring": "/** Stub the contents of a file in Firebase Storage. */\n", "func_signal": "private void stubFirebaseStorageContents(StorageReference reference, String contents)", "code": "{\n    Task<byte[]> completed = (Task<byte[]>) mock(Task.class);\n    when(completed.isComplete()).thenReturn(true);\n    when(completed.isSuccessful()).thenReturn(true);\n    when(completed.getResult()).thenReturn(contents.getBytes());\n\n    when(reference.getBytes(anyLong())).thenReturn(completed);\n}", "path": "santa-tracker-android/tracker/src/test/java/com/google/android/apps/santatracker/tracker/api/FirebaseStorageFetcherTest.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Stub the last updated time of a file in Firebase Storage */\n", "func_signal": "public void stubFirebaseStorageUpdatedTime(StorageReference reference, long time)", "code": "{\n    StorageMetadata metadata = mock(StorageMetadata.class);\n    when(metadata.getUpdatedTimeMillis()).thenReturn(time);\n\n    when(reference.getMetadata()).thenReturn(Tasks.forResult(metadata));\n}", "path": "santa-tracker-android/tracker/src/test/java/com/google/android/apps/santatracker/tracker/api/FirebaseStorageFetcherTest.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/**\n * Set the best star count for a game type. NOTE: It's expected for the client to figure out if\n * it is the best star count.\n */\n", "func_signal": "public void setBestStarCount(GameType gameType, int count)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        gameObject.put(BEST_STAR_COUNT_KEY, count);\n        history.put(gameType.toString(), gameObject);\n    } catch (JSONException e) {\n        SantaLog.e(TAG, \"error setting place\", e);\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Returns arbitrary JSONObject a game might want. Null if no value has been given yet. */\n", "func_signal": "public JSONObject getArbitraryData(GameType gameType)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        return gameObject.getJSONObject(ARBITRARY_DATA_KEY);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/**\n * Set the best distance for a game type. NOTE: it's expected for the client to figure out if it\n * is the best distance since some will want bigger and some will want smaller numbers.\n */\n", "func_signal": "public void setBestDistance(GameType gameType, double distanceInMeters)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        gameObject.put(BEST_DISTANCE_METERS_KEY, distanceInMeters);\n        history.put(gameType.toString(), gameObject);\n    } catch (JSONException e) {\n        SantaLog.e(TAG, \"error setting distance\", e);\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Returns the best distance so far. Null if no value has been given yet. */\n", "func_signal": "public Double getBestDistance(GameType gameType)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        return gameObject.getDouble(BEST_DISTANCE_METERS_KEY);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Returns the best star count so far. Null if no value has been given yet. */\n", "func_signal": "public Integer getBestStarCount(GameType gameType)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        return gameObject.getInt(BEST_STAR_COUNT_KEY);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Sets an arbitrary jsonObject a game might want. */\n", "func_signal": "public void setArbitraryData(GameType gameType, JSONObject data)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        gameObject.put(ARBITRARY_DATA_KEY, data);\n        history.put(gameType.toString(), gameObject);\n    } catch (JSONException e) {\n        SantaLog.e(TAG, \"error setting distance\", e);\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/**\n * Constructs a new Present Quest launch (marker).\n *\n * @param context The application (Santa) context\n */\n", "func_signal": "public LaunchPresentQuest(SantaContext context, LauncherDataChangedCallback adapter)", "code": "{\n    super(\n            context,\n            adapter,\n            R.string.present_quest,\n            R.drawable.android_game_cards_present_quest);\n}", "path": "santa-tracker-android/santa-tracker/src/main/java/com/google/android/apps/santatracker/launch/LaunchPresentQuest.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Get a mocked storage reference for a file path. */\n", "func_signal": "private StorageReference getMockStorageReference(String path)", "code": "{\n    StorageReference reference = mock(StorageReference.class);\n    when(mStorage.getReference(path)).thenReturn(reference);\n\n    return reference;\n}", "path": "santa-tracker-android/tracker/src/test/java/com/google/android/apps/santatracker/tracker/api/FirebaseStorageFetcherTest.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Make getBytes() calls on a file immediate invoke failure listeners. */\n", "func_signal": "private void stubFirebaseStorageError(StorageReference reference, Exception exception)", "code": "{\n    final Task<byte[]> task = (Task<byte[]>) mock(Task.class);\n    when(task.isComplete()).thenReturn(true);\n    when(task.isSuccessful()).thenReturn(false);\n    when(task.getException()).thenReturn(exception);\n\n    when(task.addOnFailureListener(any(OnFailureListener.class)))\n            .thenAnswer(\n                    new Answer<Task<byte[]>>() {\n                        @Override\n                        public Task<byte[]> answer(InvocationOnMock invocation)\n                                throws Throwable {\n                            OnFailureListener listener =\n                                    (OnFailureListener) invocation.getArguments()[0];\n                            listener.onFailure(task.getException());\n\n                            return task;\n                        }\n                    });\n\n    when(reference.getBytes(anyLong())).thenReturn(task);\n}", "path": "santa-tracker-android/tracker/src/test/java/com/google/android/apps/santatracker/tracker/api/FirebaseStorageFetcherTest.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Wait for a task to be complete, avoids Tasks.await() main thread complaints. */\n", "func_signal": "private <T> Task<T> waitForTask(final Task<T> task) throws Exception", "code": "{\n    final long startTime = System.currentTimeMillis();\n    Thread thread =\n            new Thread(\n                    new Runnable() {\n                        @Override\n                        public void run() {\n                            while (!task.isComplete()) {\n                                if (System.currentTimeMillis() - startTime > TASK_TIMEOUT_MS) {\n                                    throw new RuntimeException(\"Timed out waiting for task.\");\n                                }\n\n                                try {\n                                    Thread.sleep(100);\n                                } catch (InterruptedException e) {\n                                    fail(\"Error waiting for task: \" + e.getLocalizedMessage());\n                                }\n                            }\n                        }\n                    });\n\n    thread.run();\n    thread.join();\n\n    return task;\n}", "path": "santa-tracker-android/tracker/src/test/java/com/google/android/apps/santatracker/tracker/api/FirebaseStorageFetcherTest.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/**\n * Set the best place (1st, 2nd, 3rd) for a game type. NOTE: It's expected for the client to\n * figure out if it is the best place.\n */\n", "func_signal": "public void setBestPlace(GameType gameType, int place)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        gameObject.put(BEST_PLACE_KEY, place);\n        history.put(gameType.toString(), gameObject);\n    } catch (JSONException e) {\n        SantaLog.e(TAG, \"error setting place\", e);\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Returns the best score so far. Null if no value has been given yet. */\n", "func_signal": "public Double getBestScore(GameType gameType)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        return gameObject.getDouble(BEST_SCORE_KEY);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Returns the best time so far. Null if no value has been given yet. */\n", "func_signal": "public Long getBestTime(GameType gameType)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        return gameObject.getLong(BEST_TIME_MILLISECONDS_KEY);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "// Initialize level parts that need to happen in UI thread.\n", "func_signal": "private void initializeLevelUiThread(final SwimmingModel newLevel)", "code": "{\n    if (isDestroyed) {\n        return;\n    }\n    scoreView.updateCurrentScore(\n            AndroidUtils.getText(\n                    context.getResources(),\n                    com.google.android.apps.santatracker.common.R.string.swimming_score,\n                    0),\n            false);\n    pauseView.showPauseButton();\n    diveView.show();\n    newLevel.vibrator = (Vibrator) getActivity().getSystemService(Activity.VIBRATOR_SERVICE);\n}", "path": "santa-tracker-android/penguinswim/src/main/java/com/google/android/apps/santatracker/doodles/penguinswim/SwimmingFragment.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/**\n * Reads all bytes from an input stream into a byte array. Does not close the stream.\n *\n * @param in the input stream to read from\n * @return a byte array containing all the bytes from the stream\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "public static byte[] toByteArray(InputStream in) throws IOException", "code": "{\n    // Presize the ByteArrayOutputStream since we know how large it will need\n    // to be, unless that value is less than the default ByteArrayOutputStream\n    // size (32).\n    ByteArrayOutputStream out = new ByteArrayOutputStream(Math.max(32, in.available()));\n    copy(in, out);\n    return out.toByteArray();\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/AndroidUtils.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Returns the best place so far. Null if no value has been given yet. */\n", "func_signal": "public Integer getBestPlace(GameType gameType)", "code": "{\n    try {\n        JSONObject gameObject = getGameObject(gameType);\n        return gameObject.getInt(BEST_PLACE_KEY);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Gets the json object for a particular game type. */\n", "func_signal": "private JSONObject getGameObject(GameType gameType) throws JSONException", "code": "{\n    if (history == null) {\n        throw new JSONException(\"null history\");\n    }\n    JSONObject gameObject = history.optJSONObject(gameType.toString());\n    if (gameObject == null) {\n        gameObject = new JSONObject();\n    }\n    return gameObject;\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/HistoryManager.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/** Handles loading text from our resources, including interpreting <b> and <i> tags. */\n", "func_signal": "public static CharSequence getText(Resources res, int id, Object... formatArgs)", "code": "{\n    try {\n        return Html.fromHtml(res.getString(id, formatArgs));\n    } catch (java.util.MissingFormatArgumentException e) {\n        SantaLog.e(TAG, \"unable to format string id: \" + id, e);\n    }\n    return \"\";\n}", "path": "santa-tracker-android/doodles-lib/src/main/java/com/google/android/apps/santatracker/doodles/shared/AndroidUtils.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "google/santa-tracker-android", "stars": 2081, "license": "other", "language": "java", "size": 149461}
{"docstring": "/**\n * Calls the specified consumer if the {@code applicationName} is different on the\n * original source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifApplicationNameChanged(ProjectDescription current, BiConsumer<String, String> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getApplicationName(), current.getApplicationName())) {\n\t\tconsumer.accept(this.original.getApplicationName(), current.getApplicationName());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Return a {@link Build} repository from a {@link Repository repository metadata}.\n * @param id the repository id\n * @param repository a repository metadata\n * @return an equivalent build repository\n */\n", "func_signal": "public static io.spring.initializr.generator.buildsystem.MavenRepository toRepository(String id,\n\t\tRepository repository)", "code": "{\n\tif (repository == null) {\n\t\treturn null;\n\t}\n\treturn io.spring.initializr.generator.buildsystem.MavenRepository\n\t\t\t.withIdAndUrl(id, repository.getUrl().toExternalForm()).name(repository.getName())\n\t\t\t.snapshotsEnabled(repository.isSnapshotsEnabled()).build();\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/support/MetadataBuildItemMapper.java", "commit_date": "2020-03-17 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code baseDirectory} is different on the\n * original source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifBaseDirectoryChanged(ProjectDescription current, BiConsumer<String, String> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getBaseDirectory(), current.getBaseDirectory())) {\n\t\tconsumer.accept(this.original.getBaseDirectory(), current.getBaseDirectory());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Format this version to the specified {@link Format}.\n * @param format the format to use\n * @return a version compliant with the specified format.\n */\n", "func_signal": "public Version format(Format format)", "code": "{\n\tAssert.notNull(format, () -> \"Format must not be null\");\n\tif (this.format == format) {\n\t\treturn this;\n\t}\n\tQualifier qualifier = (format == Format.V1) ? formatQualifier(\".\", this::toV1Qualifier)\n\t\t\t: formatQualifier(\"-\", this::toV2Qualifier);\n\treturn new Version(this.major, this.minor, this.patch, qualifier);\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/version/Version.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code version} is different on the original\n * source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifVersionChanged(ProjectDescription current, BiConsumer<String, String> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getVersion(), current.getVersion())) {\n\t\tconsumer.accept(this.original.getVersion(), current.getVersion());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code name} is different on the original\n * source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifNameChanged(ProjectDescription current, BiConsumer<String, String> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getName(), current.getName())) {\n\t\tconsumer.accept(this.original.getName(), current.getName());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code packageName} is different on the\n * original source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifPackageNameChanged(ProjectDescription current, BiConsumer<String, String> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getPackageName(), current.getPackageName())) {\n\t\tconsumer.accept(this.original.getPackageName(), current.getPackageName());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code packaging} is different on the original\n * source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifPackagingChanged(ProjectDescription current, BiConsumer<Packaging, Packaging> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getPackaging(), current.getPackaging())) {\n\t\tconsumer.accept(this.original.getPackaging(), current.getPackaging());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Expand the link using the specified parameters.\n * @param parameters the parameters value\n * @return an URI where all variables have been expanded\n */\n", "func_signal": "public URI expand(Map<String, String> parameters)", "code": "{\n\tAtomicReference<String> result = new AtomicReference<>(this.href);\n\tthis.templateVariables.forEach((var) -> {\n\t\tObject value = parameters.get(var);\n\t\tif (value == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Could not expand \" + this.href + \", missing value for '\" + var + \"'\");\n\t\t}\n\t\tresult.set(result.get().replace(\"{\" + var + \"}\", value.toString()));\n\t});\n\ttry {\n\t\treturn new URI(result.get());\n\t}\n\tcatch (URISyntaxException ex) {\n\t\tthrow new IllegalStateException(\"Invalid URL\", ex);\n\t}\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/Link.java", "commit_date": "2019-06-12 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code description} is different on the\n * original source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifDescriptionChanged(ProjectDescription current, BiConsumer<String, String> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getDescription(), current.getDescription())) {\n\t\tconsumer.accept(this.original.getDescription(), current.getDescription());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code platformVersion} is different on the\n * original source project description than the specified project description.\n * @param current the project description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifPlatformVersionChanged(ProjectDescription current, BiConsumer<Version, Version> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getPlatformVersion(), current.getPlatformVersion())) {\n\t\tconsumer.accept(this.original.getPlatformVersion(), current.getPlatformVersion());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Specify if this dependency is available for the specified Spring Boot version.\n * @param version the version the check\n * @return of the version matches\n */\n", "func_signal": "public boolean match(Version version)", "code": "{\n\tif (this.range != null) {\n\t\treturn this.range.match(version);\n\t}\n\treturn true;\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/Dependency.java", "commit_date": "2020-11-30 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Generate an id using the groupId and artifactId.\n * @return the generated ID\n */\n", "func_signal": "public String generateId()", "code": "{\n\tif (this.groupId == null || this.artifactId == null) {\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Could not generate id for \" + this + \": at least groupId and artifactId must be set.\");\n\t}\n\tsetId(this.groupId + \":\" + this.artifactId);\n\treturn getId();\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/Dependency.java", "commit_date": "2020-11-30 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Lookup the item with the specified {@code id} and register it to this container.\n * @param id the id of an item\n */\n", "func_signal": "public void add(I id)", "code": "{\n\tV item = this.itemResolver.apply(id);\n\tif (item == null) {\n\t\tthrow new IllegalArgumentException(\"No such value with id '\" + id + \"'\");\n\t}\n\tadd(id, item);\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/BuildItemContainer.java", "commit_date": "2019-03-20 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Return an {@link Build} dependency from a {@link Dependency dependency metadata}.\n * @param dependency a dependency metadata\n * @return an equivalent build dependency\n */\n", "func_signal": "public static io.spring.initializr.generator.buildsystem.Dependency toDependency(Dependency dependency)", "code": "{\n\tif (dependency == null) {\n\t\treturn null;\n\t}\n\tVersionReference versionReference = (dependency.getVersion() != null)\n\t\t\t? VersionReference.ofValue(dependency.getVersion()) : null;\n\treturn io.spring.initializr.generator.buildsystem.Dependency\n\t\t\t.withCoordinates(dependency.getGroupId(), dependency.getArtifactId()).version(versionReference)\n\t\t\t.scope(toDependencyScope(dependency.getScope())).classifier(dependency.getClassifier())\n\t\t\t.type(dependency.getType()).build();\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/support/MetadataBuildItemMapper.java", "commit_date": "2020-03-17 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code buildSystem} is different on the\n * original source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifBuildSystemChanged(ProjectDescription current, BiConsumer<BuildSystem, BuildSystem> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getBuildSystem(), current.getBuildSystem())) {\n\t\tconsumer.accept(this.original.getBuildSystem(), current.getBuildSystem());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Resolve this instance according to the specified Spring Boot {@link Version}.\n * Return a {@link Dependency} instance that has its state resolved against the\n * specified version.\n * @param bootVersion the Spring Boot version\n * @return this instance\n */\n", "func_signal": "public Dependency resolve(Version bootVersion)", "code": "{\n\tfor (Mapping mapping : this.mappings) {\n\t\tif (mapping.range.match(bootVersion)) {\n\t\t\tDependency dependency = new Dependency(this);\n\t\t\tdependency.groupId = (mapping.groupId != null) ? mapping.groupId : this.groupId;\n\t\t\tdependency.artifactId = (mapping.artifactId != null) ? mapping.artifactId : this.artifactId;\n\t\t\tdependency.version = (mapping.version != null) ? mapping.version : this.version;\n\t\t\tdependency.starter = (mapping.starter != null) ? mapping.starter : this.starter;\n\t\t\tdependency.bom = (mapping.bom != null) ? mapping.bom : this.bom;\n\t\t\tdependency.repository = (mapping.repository != null) ? mapping.repository : this.repository;\n\t\t\tdependency.versionRequirement = mapping.range.toString();\n\t\t\tdependency.mappings = null;\n\t\t\treturn dependency;\n\t\t}\n\t}\n\treturn this;\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/Dependency.java", "commit_date": "2020-11-30 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Return a {@link Build} bom from a {@link BillOfMaterials bom metadata}.\n * @param bom a metadata bom\n * @return an equivalent build bom\n */\n", "func_signal": "public static io.spring.initializr.generator.buildsystem.BillOfMaterials toBom(BillOfMaterials bom)", "code": "{\n\tif (bom == null) {\n\t\treturn null;\n\t}\n\tVersionReference version = (bom.getVersionProperty() != null)\n\t\t\t? VersionReference.ofProperty(bom.getVersionProperty()) : VersionReference.ofValue(bom.getVersion());\n\treturn io.spring.initializr.generator.buildsystem.BillOfMaterials\n\t\t\t.withCoordinates(bom.getGroupId(), bom.getArtifactId()).version(version).order(bom.getOrder()).build();\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/support/MetadataBuildItemMapper.java", "commit_date": "2020-03-17 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Validate the dependency and complete its state based on the available information.\n */\n", "func_signal": "public void resolve()", "code": "{\n\tif (getId() == null) {\n\t\tif (!hasCoordinates()) {\n\t\t\tthrow new InvalidInitializrMetadataException(\n\t\t\t\t\t\"Invalid dependency, should have at least an id or a groupId/artifactId pair.\");\n\t\t}\n\t\tgenerateId();\n\t}\n\telse if (!hasCoordinates()) {\n\t\t// Let\"s build the coordinates from the id\n\t\tStringTokenizer st = new StringTokenizer(getId(), \":\");\n\t\tif (st.countTokens() == 1) { // assume spring-boot-starter\n\t\t\tasSpringBootStarter(getId());\n\t\t}\n\t\telse if (st.countTokens() == 2 || st.countTokens() == 3) {\n\t\t\tthis.groupId = st.nextToken();\n\t\t\tthis.artifactId = st.nextToken();\n\t\t\tif (st.hasMoreTokens()) {\n\t\t\t\tthis.version = st.nextToken();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new InvalidInitializrMetadataException(\n\t\t\t\t\t\"Invalid dependency, id should have the form groupId:artifactId[:version] but got \" + getId());\n\t\t}\n\t}\n\tthis.links.forEach(Link::resolve);\n\tupdateCompatibilityRange(VersionParser.DEFAULT);\n}", "path": "initializr/initializr-metadata/src/main/java/io/spring/initializr/metadata/Dependency.java", "commit_date": "2020-11-30 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/**\n * Calls the specified consumer if the {@code artifactId} is different on the original\n * source project description than the specified project description.\n * @param current the description to test against\n * @param consumer to call if the property has changed\n */\n", "func_signal": "public void ifArtifactIdChanged(ProjectDescription current, BiConsumer<String, String> consumer)", "code": "{\n\tif (!Objects.equals(this.original.getArtifactId(), current.getArtifactId())) {\n\t\tconsumer.accept(this.original.getArtifactId(), current.getArtifactId());\n\t}\n}", "path": "initializr/initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionDiff.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "spring-io/initializr", "stars": 3322, "license": "apache-2.0", "language": "java", "size": 10628}
{"docstring": "/** set divider height(ListView divider\u9ad8\u5ea6) */\n", "func_signal": "public NormalListDialog dividerHeight(float dividerHeight_DP)", "code": "{\n    mDividerHeight = dividerHeight_DP;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set title textcolor(\u8bbe\u7f6e\u6807\u9898\u5b57\u4f53\u989c\u8272) */\n", "func_signal": "public NormalListDialog titleTextColor(int titleTextColor)", "code": "{\n    mTitleTextColor = titleTextColor;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set item press color(item\u6309\u4f4f\u989c\u8272) */\n", "func_signal": "public NormalListDialog itemPressColor(int itemPressColor)", "code": "{\n    mItemPressColor = itemPressColor;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set duration for inner com.flyco.animation of mAnimateView(\u8bbe\u7f6eanimateView\u5185\u7f6e\u52a8\u753b\u65f6\u957f) */\n", "func_signal": "public T innerAnimDuration(long innerAnimDuration)", "code": "{\n    mInnerAnimDuration = innerAnimDuration;\n    return (T) this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/base/BottomTopBaseDialog.java", "commit_date": "2016-01-07 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set layoutAnimation(\u8bbe\u7f6elayout\u52a8\u753b ,\u4f20\u5165null\u5c06\u4e0d\u663e\u793alayout\u52a8\u753b) */\n", "func_signal": "public NormalListDialog layoutAnimation(LayoutAnimationController lac)", "code": "{\n    mLac = lac;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set divider color(ListView divider\u989c\u8272) */\n", "func_signal": "public NormalListDialog dividerColor(int dividerColor)", "code": "{\n    mDividerColor = dividerColor;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/**\n * set ListView item selector with corner drawable for the last position\n * (ListView\u7684item\u70b9\u51fb\u6548\u679c,\u53ea\u5904\u7406\u6700\u540e\u4e00\u9879\u5706\u89d2\u5904\u7406)\n */\n", "func_signal": "public static StateListDrawable listItemSelector(float radius, int normalColor, int pressColor, boolean isLastPostion)", "code": "{\n    StateListDrawable bg = new StateListDrawable();\n    Drawable normal = null;\n    Drawable pressed = null;\n\n    if (!isLastPostion) {\n        normal = new ColorDrawable(normalColor);\n        pressed = new ColorDrawable(pressColor);\n    } else {\n        normal = cornerDrawable(normalColor, new float[]{0, 0, 0, 0, radius, radius, radius, radius});\n        pressed = cornerDrawable(pressColor, new float[]{0, 0, 0, 0, radius, radius, radius, radius});\n    }\n\n    bg.addState(new int[]{-android.R.attr.state_pressed}, normal);\n    bg.addState(new int[]{android.R.attr.state_pressed}, pressed);\n    return bg;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/utils/CornerUtils.java", "commit_date": "2015-09-25 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set item height(item\u9ad8\u5ea6) */\n", "func_signal": "public NormalListDialog setItemExtraPadding(int itemLeft, int itemTop, int itemRight, int itemBottom)", "code": "{\n    mItemExtraLeft = dp2px(itemLeft);\n    mItemExtraTop = dp2px(itemTop);\n    mItemExtraRight = dp2px(itemRight);\n    mItemExtraBottom = dp2px(itemBottom);\n\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** align center of pop and anchorView(\u5f39\u7a97\u4e0eanchorView\u4e2d\u5fc3\u5bf9\u9f50) */\n", "func_signal": "public T alignCenter(boolean alignCenter)", "code": "{\n    mAlignCenter = alignCenter;\n    return (T) this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/popup/base/BasePopup.java", "commit_date": "2016-05-21 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/*** enable title show(\u8bbe\u7f6e\u6807\u9898\u662f\u5426\u663e\u793a) */\n", "func_signal": "public NormalListDialog isTitleShow(boolean isTitleShow)", "code": "{\n    mIsTitleShow = isTitleShow;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** dimiss dialog and mAnimateView with inner dismiss com.flyco.animation(\u8bbe\u7f6edialog\u548canimateView\u6d88\u5931\u52a8\u753b) */\n", "func_signal": "protected void dismissWithAnim()", "code": "{\n    if (mInnerDismissAnim != null) {\n        mInnerDismissAnim.setDuration(mInnerAnimDuration);\n        mInnerDismissAnim.setAnimationListener(new AnimationListener() {\n            @Override\n            public void onAnimationStart(Animation animation) {\n                mIsInnerDismissAnim = true;\n            }\n\n            @Override\n            public void onAnimationRepeat(Animation animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animation animation) {\n                mIsInnerDismissAnim = false;\n                superDismiss();\n            }\n        });\n\n        mLlControlHeight.startAnimation(mInnerDismissAnim);\n    } else {\n        superDismiss();\n    }\n\n    if (mAnimateView != null) {\n        if (getWindowOutAs() != null) {\n            mWindowOutAs = getWindowOutAs();\n        }\n        mWindowOutAs.duration(mInnerAnimDuration).playOn(mAnimateView);\n    }\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/base/BottomTopBaseDialog.java", "commit_date": "2016-01-07 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set item textsize(item\u5b57\u4f53\u5927\u5c0f) */\n", "func_signal": "public NormalListDialog itemTextSize(float itemTextSize_SP)", "code": "{\n    mItemTextSize = itemTextSize_SP;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set title textsize(\u8bbe\u7f6e\u6807\u9898\u5b57\u4f53\u5927\u5c0f) */\n", "func_signal": "public NormalListDialog titleTextSize_SP(float titleTextSize_SP)", "code": "{\n    mTitleTextSize = titleTextSize_SP;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set title underline height(\u8bbe\u7f6e\u6807\u9898\u4e0b\u5212\u7ebf\u9ad8\u5ea6) */\n", "func_signal": "public NormalDialog titleLineHeight(float titleLineHeight_DP)", "code": "{\n    this.mTitleLineHeight = titleLineHeight_DP;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalDialog.java", "commit_date": "2015-12-19 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/**\n * set ListView item selector with corner drawable for the first and the last position\n * (ListView\u7684item\u70b9\u51fb\u6548\u679c,\u7b2c\u4e00\u9879\u548c\u6700\u540e\u4e00\u9879\u5706\u89d2\u5904\u7406)\n */\n", "func_signal": "public static StateListDrawable listItemSelector(float radius, int normalColor, int pressColor, int itemTotalSize,\n                                                 int itemPosition)", "code": "{\n    StateListDrawable bg = new StateListDrawable();\n    Drawable normal = null;\n    Drawable pressed = null;\n\n    if (itemPosition == 0 && itemPosition == itemTotalSize - 1) {// \u53ea\u6709\u4e00\u9879\n        normal = cornerDrawable(normalColor, new float[]{radius, radius, radius, radius, radius, radius, radius,\n                radius});\n        pressed = cornerDrawable(pressColor, new float[]{radius, radius, radius, radius, radius, radius, radius,\n                radius});\n    } else if (itemPosition == 0) {\n        normal = cornerDrawable(normalColor, new float[]{radius, radius, radius, radius, 0, 0, 0, 0,});\n        pressed = cornerDrawable(pressColor, new float[]{radius, radius, radius, radius, 0, 0, 0, 0});\n    } else if (itemPosition == itemTotalSize - 1) {\n        normal = cornerDrawable(normalColor, new float[]{0, 0, 0, 0, radius, radius, radius, radius});\n        pressed = cornerDrawable(pressColor, new float[]{0, 0, 0, 0, radius, radius, radius, radius});\n    } else {\n        normal = new ColorDrawable(normalColor);\n        pressed = new ColorDrawable(pressColor);\n    }\n\n    bg.addState(new int[]{-android.R.attr.state_pressed}, normal);\n    bg.addState(new int[]{android.R.attr.state_pressed}, pressed);\n    return bg;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/utils/CornerUtils.java", "commit_date": "2015-09-25 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** show dialog and mAnimateView with inner show com.flyco.animation(\u8bbe\u7f6edialog\u548canimateView\u663e\u793a\u52a8\u753b) */\n", "func_signal": "protected void showWithAnim()", "code": "{\n    if (mInnerShowAnim != null) {\n        mInnerShowAnim.setDuration(mInnerAnimDuration);\n        mInnerShowAnim.setAnimationListener(new AnimationListener() {\n            @Override\n            public void onAnimationStart(Animation animation) {\n                mIsInnerShowAnim = true;\n            }\n\n            @Override\n            public void onAnimationRepeat(Animation animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animation animation) {\n                mIsInnerShowAnim = false;\n            }\n        });\n        mLlControlHeight.startAnimation(mInnerShowAnim);\n    }\n\n    if (mAnimateView != null) {\n        if (getWindowInAs() != null) {\n            mWindowInAs = getWindowInAs();\n        }\n        mWindowInAs.duration(mInnerAnimDuration).playOn(mAnimateView);\n    }\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/base/BottomTopBaseDialog.java", "commit_date": "2016-01-07 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/**\n * set btn selector with corner drawable for special position\n */\n", "func_signal": "public static StateListDrawable btnSelector(float radius, int normalColor, int pressColor, int postion)", "code": "{\n    StateListDrawable bg = new StateListDrawable();\n    Drawable normal = null;\n    Drawable pressed = null;\n\n    if (postion == 0) {// left btn\n        normal = cornerDrawable(normalColor, new float[]{0, 0, 0, 0, 0, 0, radius, radius});\n        pressed = cornerDrawable(pressColor, new float[]{0, 0, 0, 0, 0, 0, radius, radius});\n    } else if (postion == 1) {// right btn\n        normal = cornerDrawable(normalColor, new float[]{0, 0, 0, 0, radius, radius, 0, 0});\n        pressed = cornerDrawable(pressColor, new float[]{0, 0, 0, 0, radius, radius, 0, 0});\n    } else if (postion == -1) {// only one btn\n        normal = cornerDrawable(normalColor, new float[]{0, 0, 0, 0, radius, radius, radius, radius});\n        pressed = cornerDrawable(pressColor, new float[]{0, 0, 0, 0, radius, radius, radius, radius});\n    } else if (postion == -2) {// for material dialog\n        normal = cornerDrawable(normalColor, radius);\n        pressed = cornerDrawable(pressColor, radius);\n    }\n\n    bg.addState(new int[]{-android.R.attr.state_pressed}, normal);\n    bg.addState(new int[]{android.R.attr.state_pressed}, pressed);\n    return bg;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/utils/CornerUtils.java", "commit_date": "2015-09-25 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set title text(\u8bbe\u7f6e\u6807\u9898\u5185\u5bb9) */\n", "func_signal": "public NormalListDialog title(String title)", "code": "{\n    mTitle = title;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set ListView background color(\u8bbe\u7f6eListView\u80cc\u666f) */\n", "func_signal": "public NormalListDialog lvBgColor(int lvBgColor)", "code": "{\n    mLvBgColor = lvBgColor;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalListDialog.java", "commit_date": "2015-12-23 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/** set title underline color(\u8bbe\u7f6e\u6807\u9898\u4e0b\u5212\u7ebf\u989c\u8272) */\n", "func_signal": "public NormalDialog titleLineColor(int titleLineColor)", "code": "{\n    this.mTitleLineColor = titleLineColor;\n    return this;\n}", "path": "FlycoDialog_Master/FlycoDialog_Lib/src/main/java/com/flyco/dialog/widget/NormalDialog.java", "commit_date": "2015-12-19 00:00:00", "repo_name": "H07000223/FlycoDialog_Master", "stars": 2284, "license": "mit", "language": "java", "size": 11093}
{"docstring": "/**\n * Answers the receiver after sending aBinaryMessage to my channel with\n * aRoutingKey. This is a producer ignorance way to use an exchange\n * without requiring it to pass the exchange name. By answering\n * myself I allow for sending message bursts.\n * @param aRoutingKey the String routing key\n * @param aBinaryMessage the byte[] binary message to send\n * @param aMessageParameters the MessageParameters\n * @return MessageProducer\n */\n", "func_signal": "public MessageProducer send(\n        String aRoutingKey,\n        byte[] aBinaryMessage,\n        MessageParameters aMessageParameters)", "code": "{\n\n    this.check(aMessageParameters);\n\n    try {\n        this.brokerChannel().channel().basicPublish(\n                this.brokerChannel().exchangeName(),\n                aRoutingKey,\n                this.binaryDurability(),\n                aBinaryMessage);\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to send message to channel.\", e);\n    }\n    return this;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Sets my hostName.\n * @param aHostName the String to set as my hostName\n */\n", "func_signal": "private void setHostName(String aHostName)", "code": "{\n    this.assertArgumentNotEmpty(aHostName, \"Host name must be provided.\");\n\n    this.hostName = aHostName;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/ConnectionSettings.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Constructs my default state.\n */\n", "func_signal": "public ExchangeListener()", "code": "{\n    super();\n\n    this.attachToQueue();\n\n    this.registerConsumer();\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/ExchangeListener.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Constructs my default state.\n * @param aBrokerChannel the BrokerChannel to which I send messages\n */\n", "func_signal": "protected MessageProducer(BrokerChannel aBrokerChannel)", "code": "{\n    super();\n    this.setBrokerChannel(aBrokerChannel);\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Attaches to the queues I listen to for messages.\n */\n", "func_signal": "private void attachToQueue()", "code": "{\n    Exchange exchange =\n            Exchange.fanOutInstance(\n                    ConnectionSettings.instance(),\n                    this.exchangeName(),\n                    true);\n\n    this.queue =\n            Queue.individualExchangeSubscriberInstance(\n                    exchange,\n                    this.exchangeName() + \".\" + this.queueName());\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/ExchangeListener.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Constructs my default state.\n * @param aHostName the String name of the host server\n * @param aPort the int port number on the host server, or -1\n * @param aVirtualHost the String name of the virtual host\n * @param aUsername the String name of the user, or null\n * @param aPassword the String password of the user, or null\n */\n", "func_signal": "protected ConnectionSettings(\n        String aHostName,\n        int aPort,\n        String aVirtualHost,\n        String aUsername,\n        String aPassword)", "code": "{\n\n    super();\n\n    this.setHostName(aHostName);\n    this.setPassword(aPassword);\n    this.setPort(aPort);\n    this.setUsername(aUsername);\n    this.setVirtualHost(aVirtualHost);\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/ConnectionSettings.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the receiver after sending aBinaryMessage to my channel.\n * This is a producer ignorance way to use either an exchange or\n * a queue channel without requiring it to pass specific parameters.\n * By answering myself I allow for sending message bursts.\n * @param aBinaryMessage the byte[] binary message to send\n * @param aMessageParameters the MessageParameters\n * @return MessageProducer\n */\n", "func_signal": "public MessageProducer send(\n        byte[] aBinaryMessage,\n        MessageParameters aMessageParameters)", "code": "{\n\n    this.check(aMessageParameters);\n\n    try {\n        this.brokerChannel().channel().basicPublish(\n                this.brokerChannel().exchangeName(),\n                this.brokerChannel().queueName(),\n                this.binaryDurability(),\n                aBinaryMessage);\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to send message to channel.\", e);\n    }\n    return this;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the text durability BasicProperties according\n * to the brokerChannel's durability.\n * @return BasicProperties\n */\n", "func_signal": "private BasicProperties textDurability()", "code": "{\n    BasicProperties durability = null;\n    if (this.brokerChannel().isDurable()) {\n        durability = MessageProperties.PERSISTENT_TEXT_PLAIN;\n    }\n    return durability;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Ensure an equalization of message distribution\n * across all consumers of this queue.\n */\n", "func_signal": "public void equalizeMessageDistribution()", "code": "{\n    try {\n        this.queue().channel().basicQos(1);\n    } catch (IOException e) {\n        throw new MessageException(\"Cannot equalize distribution.\", e);\n    }\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageConsumer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Registers my listener for queue messages and dispatching.\n */\n", "func_signal": "private void registerConsumer()", "code": "{\n    this.messageConsumer = MessageConsumer.instance(this.queue(), false);\n\n    this.messageConsumer.receiveOnly(\n            this.listensTo(),\n            new MessageListener(MessageListener.Type.TEXT) {\n\n        @Override\n        public void handleMessage(\n                String aType,\n                String aMessageId,\n                Date aTimestamp,\n                String aTextMessage,\n                long aDeliveryTag,\n                boolean isRedelivery)\n        throws Exception {\n            filteredDispatch(aType, aTextMessage);\n        }\n    });\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/ExchangeListener.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the receiver after sending aTextMessage to my channel\n * with anExchange and aRoutingKey. By answering myself I allow\n * for sending message bursts.\n * @param anExchange the String name of the exchange\n * @param aRoutingKey the String routing key\n * @param aTextMessage the String text message to send\n * @param aMessageParameters the MessageParameters\n * @return MessageProducer\n */\n", "func_signal": "public MessageProducer send(\n        String anExchange,\n        String aRoutingKey,\n        String aTextMessage,\n        MessageParameters aMessageParameters)", "code": "{\n\n    this.check(aMessageParameters);\n\n    try {\n        this.brokerChannel().channel().basicPublish(\n                anExchange,\n                aRoutingKey,\n                aMessageParameters.properties(),\n                aTextMessage.getBytes());\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to send message to channel.\", e);\n    }\n    return this;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Constructs my default state.\n * @param aQueue the Queue from which I receive messages\n * @param isAutoAcknowledged the boolean indicating whether or not auto-acknowledgment is used\n */\n", "func_signal": "protected MessageConsumer(\n        Queue aQueue,\n        boolean isAutoAcknowledged)", "code": "{\n\n    super();\n\n    this.setMessageTypes(new HashSet<String>(Arrays.asList(new String[0])));\n\n    this.setQueue(aQueue);\n\n    this.setAutoAcknowledged(isAutoAcknowledged);\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageConsumer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the binary durability BasicProperties according\n * to the brokerChannel's durability.\n * @return BasicProperties\n */\n", "func_signal": "private BasicProperties binaryDurability()", "code": "{\n    BasicProperties durability = null;\n    if (this.brokerChannel().isDurable()) {\n        durability = MessageProperties.PERSISTENT_BASIC;\n    }\n    return durability;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the receiver after sending aBinaryMessage to my channel.\n * This is a producer ignorance way to use either an exchange or\n * a queue channel without requiring it to pass specific parameters.\n * By answering myself I allow for sending message bursts.\n * @param aBinaryMessage the byte[] binary message to send\n * @return MessageProducer\n */\n", "func_signal": "public MessageProducer send(byte[] aBinaryMessage)", "code": "{\n    try {\n        this.brokerChannel().channel().basicPublish(\n                this.brokerChannel().exchangeName(),\n                this.brokerChannel().queueName(),\n                this.binaryDurability(),\n                aBinaryMessage);\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to send message to channel.\", e);\n    }\n    return this;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Registers aMessageListener with the channel indirectly using\n * a DispatchingConsumer.\n * @param aMessageListener the MessageListener\n */\n", "func_signal": "private void receiveFor(MessageListener aMessageListener)", "code": "{\n    Queue queue = this.queue();\n    Channel channel = queue.channel();\n\n    try {\n        String tag =\n            channel.basicConsume(\n                    queue.name(),\n                    this.isAutoAcknowledged(),\n                    new DispatchingConsumer(channel, aMessageListener));\n\n        this.setTag(tag);\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to initiate consumer.\", e);\n    }\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageConsumer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the receiver after sending aBinaryMessage to my channel\n * with anExchange and aRoutingKey. By answering myself I allow\n * for sending message bursts.\n * @param anExchange the String name of the exchange\n * @param aRoutingKey the String routing key\n * @param aBinaryMessage the byte[] binary message to send\n * @param aMessageParameters the MessageParameters\n * @return MessageProducer\n */\n", "func_signal": "public MessageProducer send(\n        String anExchange,\n        String aRoutingKey,\n        byte[] aBinaryMessage,\n        MessageParameters aMessageParameters)", "code": "{\n\n    this.check(aMessageParameters);\n\n    try {\n        this.brokerChannel().channel().basicPublish(\n                anExchange,\n                aRoutingKey,\n                this.binaryDurability(),\n                aBinaryMessage);\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to send message to channel.\", e);\n    }\n    return this;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Constructs my default state.\n * @param aHostName the String name of the host server\n * @param aPort the int port number on the host server, or -1\n * @param aVirtualHost the String name of the virtual host\n * @param aUsername the String name of the user, or null\n * @param aPassword the String password of the user, or null\n */\n", "func_signal": "public static ConnectionSettings instance(\n        String aHostName,\n        int aPort,\n        String aVirtualHost,\n        String aUsername,\n        String aPassword)", "code": "{\n    return new ConnectionSettings(\n            aHostName, aPort, aVirtualHost, aUsername, aPassword);\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/ConnectionSettings.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Receives only messages of types included in aMessageTypes\n * on a separate thread and dispatches them to aMessageListener\n * until I am closed or until the broker is shut down. The type\n * must be included in the message's basic properties. If the\n * message's type is null, the message is filtered out.\n * @param aMessageTypes the String[] indicating filtered message types\n * @param aMessageListener the MessageListener that handles messages\n */\n", "func_signal": "public void receiveOnly(\n        final String[] aMessageTypes,\n        final MessageListener aMessageListener)", "code": "{\n    String[] filterOutAllBut = aMessageTypes;\n\n    if (filterOutAllBut == null) {\n        filterOutAllBut = new String[0];\n    }\n    this.setMessageTypes(new HashSet<String>(Arrays.asList(filterOutAllBut)));\n\n    this.receiveFor(aMessageListener);\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageConsumer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the receiver after sending aTextMessage to my channel\n * with aMessageParameters as the message basic properties.\n * This is a producer ignorance way to use either an exchange or\n * a queue channel without requiring it to pass specific parameters.\n * By answering myself I allow for sending message bursts.\n * @param aTextMessage the String text message to send\n * @param aMessageParameters the MessageParameters\n * @return MessageProducer\n */\n", "func_signal": "public MessageProducer send(\n        String aTextMessage,\n        MessageParameters aMessageParameters)", "code": "{\n\n    this.check(aMessageParameters);\n\n    try {\n        this.brokerChannel().channel().basicPublish(\n                this.brokerChannel().exchangeName(),\n                this.brokerChannel().queueName(),\n                aMessageParameters.properties(),\n                aTextMessage.getBytes());\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to send message to channel.\", e);\n    }\n    return this;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * Answers the receiver after sending aTextMessage to my channel.\n * This is a producer ignorance way to use either an exchange or\n * a queue channel without requiring it to pass specific parameters.\n * By answering myself I allow for sending message bursts.\n * @param aTextMessage the String text message to send\n * @return MessageProducer\n */\n", "func_signal": "public MessageProducer send(String aTextMessage)", "code": "{\n    try {\n        this.brokerChannel().channel().basicPublish(\n                this.brokerChannel().exchangeName(),\n                this.brokerChannel().queueName(),\n                this.textDurability(),\n                aTextMessage.getBytes());\n\n    } catch (IOException e) {\n        throw new MessageException(\"Failed to send message to channel.\", e);\n    }\n    return this;\n}", "path": "IDDD_Samples/iddd_common/src/main/java/com/saasovation/common/port/adapter/messaging/rabbitmq/MessageProducer.java", "commit_date": "2013-04-08 00:00:00", "repo_name": "VaughnVernon/IDDD_Samples", "stars": 3622, "license": "other", "language": "java", "size": 546}
{"docstring": "/**\n * @param solverFactory never null, the {@link SolverFactory} of which you want to test the constraints.\n * @param expectedScoreClass never null, used to fail fast if a {@link SolverFactory} with another {@link Score} type is\n *        used.\n */\n", "func_signal": "public AbstractScoreVerifier(SolverFactory<Solution_> solverFactory, Class<? extends Score<?>> expectedScoreClass)", "code": "{\n    if (solverFactory == null) {\n        throw new IllegalStateException(\"The solverFactory (\" + solverFactory + \") cannot be null.\");\n    }\n    scoreDirectorFactory = ((DefaultSolverFactory<Solution_>) solverFactory).getScoreDirectorFactory();\n    SolutionDescriptor<Solution_> solutionDescriptor = scoreDirectorFactory.getSolutionDescriptor();\n    Class<? extends Score<?>> scoreClass = solutionDescriptor.getScoreDefinition().getScoreClass();\n    if (expectedScoreClass != scoreClass) {\n        throw new IllegalStateException(\"The solution's scoreClass (\" + scoreClass\n                + \") differs from the test's expectedScoreClass (\" + expectedScoreClass + \").\");\n    }\n}", "path": "incubator-kie-optaplanner/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/AbstractScoreVerifier.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// Write methods\n// ************************************************************************\n", "func_signal": "@Override\npublic void writeGraphFiles(BenchmarkReport benchmarkReport)", "code": "{\n    List<Map<String, XYIntervalSeries>> moveTypeToSeriesMapList = new ArrayList<>(BenchmarkReport.CHARTED_SCORE_LEVEL_SIZE);\n    for (PickedMoveTypeBestScoreDiffStatisticPoint point : getPointList()) {\n        long timeMillisSpent = point.getTimeMillisSpent();\n        String moveType = point.getMoveType();\n        double[] levelValues = ScoreUtils.extractLevelDoubles(point.getBestScoreDiff());\n        for (int i = 0; i < levelValues.length && i < BenchmarkReport.CHARTED_SCORE_LEVEL_SIZE; i++) {\n            if (i >= moveTypeToSeriesMapList.size()) {\n                moveTypeToSeriesMapList.add(new LinkedHashMap<>());\n            }\n            Map<String, XYIntervalSeries> moveTypeToSeriesMap = moveTypeToSeriesMapList.get(i);\n            XYIntervalSeries series = moveTypeToSeriesMap.computeIfAbsent(moveType,\n                    k -> new XYIntervalSeries(moveType));\n            double yValue = levelValues[i];\n            // In an XYInterval the yLow must be lower than yHigh\n            series.add(timeMillisSpent, timeMillisSpent, timeMillisSpent,\n                    yValue, (yValue > 0.0) ? 0.0 : yValue, (yValue > 0.0) ? yValue : 0.0);\n        }\n    }\n    graphFileList = new ArrayList<>(moveTypeToSeriesMapList.size());\n    for (int scoreLevelIndex = 0; scoreLevelIndex < moveTypeToSeriesMapList.size(); scoreLevelIndex++) {\n        XYPlot plot = createPlot(benchmarkReport, scoreLevelIndex);\n        XYItemRenderer renderer = new YIntervalRenderer();\n        plot.setRenderer(renderer);\n        XYIntervalSeriesCollection seriesCollection = new XYIntervalSeriesCollection();\n        for (XYIntervalSeries series : moveTypeToSeriesMapList.get(scoreLevelIndex).values()) {\n            seriesCollection.addSeries(series);\n        }\n        plot.setDataset(seriesCollection);\n        String scoreLevelLabel = subSingleBenchmarkResult.getSingleBenchmarkResult().getProblemBenchmarkResult()\n                .findScoreLevelLabel(scoreLevelIndex);\n        JFreeChart chart = new JFreeChart(subSingleBenchmarkResult.getName()\n                + \" picked move type best \" + scoreLevelLabel + \" diff statistic\",\n                JFreeChart.DEFAULT_TITLE_FONT, plot, true);\n        graphFileList.add(writeChartToImageFile(chart,\n                \"PickedMoveTypeBestScoreDiffStatisticLevel\" + scoreLevelIndex));\n    }\n}", "path": "incubator-kie-optaplanner/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/statistic/subsingle/pickedmovetypebestscore/PickedMoveTypeBestScoreDiffSubSingleStatistic.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * @return a positive number, the distance multiplied by 1000 to avoid floating point arithmetic rounding errors\n */\n", "func_signal": "public long getDistanceFromPreviousStandstill()", "code": "{\n    if (previousStandstill == null) {\n        throw new IllegalStateException(\"This method must not be called when the previousStandstill (\"\n                + previousStandstill + \") is not initialized yet.\");\n    }\n    return getDistanceFrom(previousStandstill);\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/vehiclerouting/domain/Customer.java", "commit_date": "2020-05-01 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * @param consumedTime in minutes, just like {@link Task#getStartTime()}\n */\n", "func_signal": "public void consumeUpTo(final int consumedTime)", "code": "{\n    taskOverviewPanel.setConsumedDuration(consumedTime);\n    if (consumedTime <= previousConsumedTime) {\n        // Occurs due to rounding down of consumedTimeInSeconds\n        return;\n    }\n    logger.debug(\"Scheduling consumption of all tasks up to {} minutes.\", consumedTime);\n    previousConsumedTime = consumedTime;\n    doProblemFactChange(scoreDirector -> {\n        TaskAssigningSolution solution = scoreDirector.getWorkingSolution();\n        solution.setFrozenCutoff(consumedTime);\n        for (Task task : solution.getTaskList()) {\n            if (!task.isPinned()) {\n                if (task.getStartTime() != null && task.getStartTime() < consumedTime) {\n                    scoreDirector.beforeProblemPropertyChanged(task);\n                    task.setPinned(true);\n                    scoreDirector.afterProblemPropertyChanged(task);\n                    logger.trace(\"Consumed task ({}).\", task);\n                } else if (task.getReadyTime() < consumedTime) {\n                    // Prevent a non-pinned task from being assigned retroactively\n                    scoreDirector.beforeProblemPropertyChanged(task);\n                    task.setReadyTime(consumedTime);\n                    scoreDirector.afterProblemPropertyChanged(task);\n                }\n            }\n        }\n        scoreDirector.triggerVariableListeners();\n    });\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/taskassigning/swingui/TaskAssigningPanel.java", "commit_date": "2020-05-06 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// With methods\n// ************************************************************************\n", "func_signal": "public Room withId(long id)", "code": "{\n    this.setId(id);\n    return this;\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/domain/Room.java", "commit_date": "2020-06-11 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// Write methods\n// ************************************************************************\n", "func_signal": "@Override\npublic void writeGraphFiles(BenchmarkReport benchmarkReport)", "code": "{\n    XYPlot plot = createPlot(benchmarkReport);\n    int seriesIndex = 0;\n    for (SingleBenchmarkResult singleBenchmarkResult : problemBenchmarkResult.getSingleBenchmarkResultList()) {\n        XYIntervalSeries series = new XYIntervalSeries(\n                singleBenchmarkResult.getSolverBenchmarkResult().getNameWithFavoriteSuffix());\n        XYItemRenderer renderer = new YIntervalRenderer();\n        if (singleBenchmarkResult.hasAllSuccess()) {\n            BestSolutionMutationSubSingleStatistic subSingleStatistic =\n                    (BestSolutionMutationSubSingleStatistic) singleBenchmarkResult\n                            .getSubSingleStatistic(problemStatisticType);\n            List<BestSolutionMutationStatisticPoint> points = subSingleStatistic.getPointList();\n            for (BestSolutionMutationStatisticPoint point : points) {\n                long timeMillisSpent = point.getTimeMillisSpent();\n                long mutationCount = point.getMutationCount();\n                double yValue = mutationCount;\n                // In an XYInterval the yLow must be lower than yHigh\n                series.add(timeMillisSpent, timeMillisSpent, timeMillisSpent,\n                        yValue, (yValue > 0.0) ? 0.0 : yValue, (yValue > 0.0) ? yValue : 0.0);\n            }\n        }\n        XYIntervalSeriesCollection dataset = new XYIntervalSeriesCollection();\n        dataset.addSeries(series);\n        plot.setDataset(seriesIndex, dataset);\n\n        if (singleBenchmarkResult.getSolverBenchmarkResult().isFavorite()) {\n            // Make the favorite more obvious\n            renderer.setSeriesStroke(0, new BasicStroke(2.0f));\n        }\n        plot.setRenderer(seriesIndex, renderer);\n        seriesIndex++;\n    }\n    JFreeChart chart = new JFreeChart(problemBenchmarkResult.getName() + \" best solution mutation statistic\",\n            JFreeChart.DEFAULT_TITLE_FONT, plot, true);\n    graphFile = writeChartToImageFile(chart, problemBenchmarkResult.getName() + \"BestSolutionMutationStatistic\");\n}", "path": "incubator-kie-optaplanner/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/statistic/bestsolutionmutation/BestSolutionMutationProblemStatistic.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * @param scoreDirector never null\n * @param allocation never null\n * @return true if the startDate changed\n */\n", "func_signal": "protected boolean updatePredecessorsDoneDate(ScoreDirector<Schedule> scoreDirector, Allocation allocation)", "code": "{\n    // For the source the doneDate must be 0.\n    Integer doneDate = 0;\n    for (Allocation predecessorAllocation : allocation.getPredecessorAllocationList()) {\n        int endDate = predecessorAllocation.getEndDate();\n        doneDate = Math.max(doneDate, endDate);\n    }\n    if (Objects.equals(doneDate, allocation.getPredecessorsDoneDate())) {\n        return false;\n    }\n    scoreDirector.beforeVariableChanged(allocation, \"predecessorsDoneDate\");\n    allocation.setPredecessorsDoneDate(doneDate);\n    scoreDirector.afterVariableChanged(allocation, \"predecessorsDoneDate\");\n    return true;\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/projectjobscheduling/domain/solver/PredecessorsDoneDateUpdatingVariableListener.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// Write methods\n// ************************************************************************\n", "func_signal": "@Override\npublic void writeGraphFiles(BenchmarkReport benchmarkReport)", "code": "{\n    Locale locale = benchmarkReport.getLocale();\n    NumberAxis xAxis = new NumberAxis(\"Time spent\");\n    xAxis.setNumberFormatOverride(new MillisecondsSpentNumberFormat(locale));\n    NumberAxis yAxis = new NumberAxis(\"Accepted/selected moves per step\");\n    yAxis.setNumberFormatOverride(NumberFormat.getInstance(locale));\n    XYPlot plot = new XYPlot(null, xAxis, yAxis, null);\n    DrawingSupplier drawingSupplier = new DefaultDrawingSupplier();\n    plot.setOrientation(PlotOrientation.VERTICAL);\n\n    int seriesIndex = 0;\n    for (SingleBenchmarkResult singleBenchmarkResult : problemBenchmarkResult.getSingleBenchmarkResultList()) {\n        XYSeries acceptedSeries = new XYSeries(\n                singleBenchmarkResult.getSolverBenchmarkResult().getNameWithFavoriteSuffix() + \" accepted\");\n        XYSeries selectedSeries = new XYSeries(\n                singleBenchmarkResult.getSolverBenchmarkResult().getNameWithFavoriteSuffix() + \" selected\");\n        XYItemRenderer renderer = new XYLineAndShapeRenderer(true, false);\n        if (singleBenchmarkResult.hasAllSuccess()) {\n            MoveCountPerStepSubSingleStatistic subSingleStatistic =\n                    (MoveCountPerStepSubSingleStatistic) singleBenchmarkResult.getSubSingleStatistic(problemStatisticType);\n            List<MoveCountPerStepStatisticPoint> list = subSingleStatistic.getPointList();\n            for (MoveCountPerStepStatisticPoint point : list) {\n                long timeMillisSpent = point.getTimeMillisSpent();\n                long acceptedMoveCount = point.getMoveCountPerStepMeasurement().getAcceptedMoveCount();\n                long selectedMoveCount = point.getMoveCountPerStepMeasurement().getSelectedMoveCount();\n                acceptedSeries.add(timeMillisSpent, acceptedMoveCount);\n                selectedSeries.add(timeMillisSpent, selectedMoveCount);\n            }\n        }\n        XYSeriesCollection seriesCollection = new XYSeriesCollection();\n        seriesCollection.addSeries(acceptedSeries);\n        seriesCollection.addSeries(selectedSeries);\n        plot.setDataset(seriesIndex, seriesCollection);\n\n        if (singleBenchmarkResult.getSolverBenchmarkResult().isFavorite()) {\n            // Make the favorite more obvious\n            renderer.setSeriesStroke(0, new BasicStroke(2.0f));\n            // Dashed line for selected move count\n            renderer.setSeriesStroke(1, new BasicStroke(\n                    2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 1.0f, new float[] { 2.0f, 6.0f }, 0.0f));\n        } else {\n            // Dashed line for selected move count\n            renderer.setSeriesStroke(1, new BasicStroke(\n                    1.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 1.0f, new float[] { 2.0f, 6.0f }, 0.0f));\n        }\n        // Render both lines in the same color\n        Paint linePaint = drawingSupplier.getNextPaint();\n        renderer.setSeriesPaint(0, linePaint);\n        renderer.setSeriesPaint(1, linePaint);\n        plot.setRenderer(seriesIndex, renderer);\n        seriesIndex++;\n    }\n\n    JFreeChart chart = new JFreeChart(problemBenchmarkResult.getName() + \" move count per step statistic\",\n            JFreeChart.DEFAULT_TITLE_FONT, plot, true);\n    graphFile = writeChartToImageFile(chart, problemBenchmarkResult.getName() + \"MoveCountPerStepStatistic\");\n}", "path": "incubator-kie-optaplanner/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/statistic/movecountperstep/MoveCountPerStepProblemStatistic.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// in gigabyte per hour\n", "func_signal": "public static void main(String[] args)", "code": "{\n       CloudBalancingGenerator generator = new CloudBalancingGenerator();\n       generator.writeCloudBalance(2, 6);\n       generator.writeCloudBalance(3, 9);\n       generator.writeCloudBalance(4, 12);\n       //        generator.writeCloudBalance(5, 15);\n       //        generator.writeCloudBalance(6, 18);\n       //        generator.writeCloudBalance(7, 21);\n       //        generator.writeCloudBalance(8, 24);\n       //        generator.writeCloudBalance(9, 27);\n       //        generator.writeCloudBalance(10, 30);\n       //        generator.writeCloudBalance(11, 33);\n       //        generator.writeCloudBalance(12, 36);\n       //        generator.writeCloudBalance(13, 39);\n       //        generator.writeCloudBalance(14, 42);\n       //        generator.writeCloudBalance(15, 45);\n       //        generator.writeCloudBalance(16, 48);\n       //        generator.writeCloudBalance(17, 51);\n       //        generator.writeCloudBalance(18, 54);\n       //        generator.writeCloudBalance(19, 57);\n       //        generator.writeCloudBalance(20, 60);\n       generator.writeCloudBalance(100, 300);\n       generator.writeCloudBalance(200, 600);\n       generator.writeCloudBalance(400, 1200);\n       generator.writeCloudBalance(800, 2400);\n       generator.writeCloudBalance(1600, 4800);\n   }", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/cloudbalancing/persistence/CloudBalancingGenerator.java", "commit_date": "2020-05-01 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * Escape illegal HTML element id characters, such as a dot.\n * <p>\n * This escape function guarantees that 2 distinct strings will result into 2 distinct escape strings\n * (presuming that both have been escaped by this method).\n *\n * @param rawHtmlId never null\n * @return never null\n */\n", "func_signal": "public static String escapeHtmlId(String rawHtmlId)", "code": "{\n    // Uses unicode numbers to escape, see http://unicode-table.com\n    // Uses '-' as the escape character\n    return rawHtmlId\n            .replaceAll(\" \", \"-0020\")\n            .replaceAll(\"!\", \"-0021\")\n            .replaceAll(\"#\", \"-0023\")\n            .replaceAll(\"\\\\$\", \"-0024\")\n            .replaceAll(\",\", \"-002C\")\n            .replaceAll(\"-\", \"-002D\")\n            .replaceAll(\"\\\\.\", \"-002E\")\n            .replaceAll(\"\\\\(\", \"-0028\")\n            .replaceAll(\"\\\\)\", \"-0029\")\n            .replaceAll(\":\", \"-003A\")\n            .replaceAll(\";\", \"-003B\")\n            .replaceAll(\"\\\\?\", \"-003F\");\n}", "path": "incubator-kie-optaplanner/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/report/ReportHelper.java", "commit_date": "2020-05-01 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * Assert that the constraint of {@link PlanningSolution} has the expected weight for that score level.\n *\n * @param constraintPackage sometimes null.\n *        When null, {@code constraintName} for the {@code scoreLevel} must be unique.\n * @param scoreLevel at least 0\n * @param constraintName never null, the name of the constraint\n * @param expectedWeight never null, the total weight for all matches of that 1 constraint\n * @param solution never null\n */\n", "func_signal": "protected void assertWeight(String constraintPackage, String constraintName, int scoreLevel, Number expectedWeight,\n        Solution_ solution)", "code": "{\n    ConstraintMatchTotal<?> matchTotal;\n    try (InnerScoreDirector<Solution_, ?> scoreDirector = scoreDirectorFactory.buildScoreDirector()) {\n        scoreDirector.setWorkingSolution(solution);\n        scoreDirector.calculateScore();\n        matchTotal = findConstraintMatchTotal(constraintPackage, constraintName, scoreDirector);\n    }\n    // A matchTotal is null if the constraint did match now and never matched in a previous incremental calculation\n    // (including those that are undone).\n    // To avoid user pitfalls, the expectedWeight cannot be null and a matchTotal of null is treated as zero.\n    if (expectedWeight == null) {\n        throw new IllegalArgumentException(\"The expectedWeight (\" + expectedWeight + \") cannot be null,\"\n                + \" regardless of the matchTotal (\" + matchTotal + \").\");\n    }\n    if (matchTotal == null) {\n        if (expectedWeight instanceof Byte) {\n            assertEquals(expectedWeight, (byte) 0);\n        } else if (expectedWeight instanceof Short) {\n            assertEquals(expectedWeight, (short) 0);\n        } else if (expectedWeight instanceof Integer) {\n            assertEquals(expectedWeight, 0);\n        } else if (expectedWeight instanceof Long) {\n            assertEquals(expectedWeight, 0L);\n        } else if (expectedWeight instanceof Float) {\n            assertEquals(expectedWeight, 0F);\n        } else if (expectedWeight instanceof Double) {\n            assertEquals(expectedWeight, 0D);\n        } else if (expectedWeight instanceof BigInteger) {\n            assertEquals(expectedWeight, BigInteger.ZERO);\n        } else if (expectedWeight instanceof BigDecimal) {\n            assertEquals(expectedWeight, BigDecimal.ZERO);\n        } else {\n            throw new IllegalStateException(\"Unsupported \" + Number.class.getSimpleName()\n                    + \" type (\" + expectedWeight.getClass() + \") for expectedWeight (\" + expectedWeight + \").\");\n        }\n    } else {\n        assertEquals(expectedWeight, matchTotal.getScore().toLevelNumbers()[scoreLevel]);\n    }\n}", "path": "incubator-kie-optaplanner/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/AbstractScoreVerifier.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// With methods\n// ************************************************************************\n", "func_signal": "public RoomPenalty withId(long id)", "code": "{\n    this.setId(id);\n    return this;\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/domain/RoomPenalty.java", "commit_date": "2020-06-11 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// Write methods\n// ************************************************************************\n", "func_signal": "@Override\npublic void writeGraphFiles(BenchmarkReport benchmarkReport)", "code": "{\n    List<Map<String, XYIntervalSeries>> moveTypeToSeriesMapList = new ArrayList<>(BenchmarkReport.CHARTED_SCORE_LEVEL_SIZE);\n    List<PickedMoveTypeStepScoreDiffStatisticPoint> points = getPointList();\n    for (PickedMoveTypeStepScoreDiffStatisticPoint point : points) {\n        long timeMillisSpent = point.getTimeMillisSpent();\n        String moveType = point.getMoveType();\n        double[] levelValues = ScoreUtils.extractLevelDoubles(point.getStepScoreDiff());\n        for (int i = 0; i < levelValues.length && i < BenchmarkReport.CHARTED_SCORE_LEVEL_SIZE; i++) {\n            if (i >= moveTypeToSeriesMapList.size()) {\n                moveTypeToSeriesMapList.add(new LinkedHashMap<>());\n            }\n            Map<String, XYIntervalSeries> moveTypeToSeriesMap = moveTypeToSeriesMapList.get(i);\n            XYIntervalSeries series = moveTypeToSeriesMap.computeIfAbsent(moveType,\n                    k -> new XYIntervalSeries(moveType));\n            double yValue = levelValues[i];\n            // In an XYInterval the yLow must be lower than yHigh\n            series.add(timeMillisSpent, timeMillisSpent, timeMillisSpent,\n                    yValue, (yValue > 0.0) ? 0.0 : yValue, (yValue > 0.0) ? yValue : 0.0);\n        }\n    }\n    graphFileList = new ArrayList<>(moveTypeToSeriesMapList.size());\n    for (int scoreLevelIndex = 0; scoreLevelIndex < moveTypeToSeriesMapList.size(); scoreLevelIndex++) {\n        XYPlot plot = createPlot(benchmarkReport, scoreLevelIndex);\n        XYItemRenderer renderer = new YIntervalRenderer();\n        plot.setRenderer(renderer);\n        XYIntervalSeriesCollection seriesCollection = new XYIntervalSeriesCollection();\n        for (XYIntervalSeries series : moveTypeToSeriesMapList.get(scoreLevelIndex).values()) {\n            seriesCollection.addSeries(series);\n        }\n        plot.setDataset(seriesCollection);\n        String scoreLevelLabel = subSingleBenchmarkResult.getSingleBenchmarkResult().getProblemBenchmarkResult()\n                .findScoreLevelLabel(scoreLevelIndex);\n        JFreeChart chart = new JFreeChart(subSingleBenchmarkResult.getName()\n                + \" picked move type step \" + scoreLevelLabel + \" diff statistic\",\n                JFreeChart.DEFAULT_TITLE_FONT, plot, true);\n        graphFileList.add(writeChartToImageFile(chart,\n                \"PickedMoveTypeStepScoreDiffStatisticLevel\" + scoreLevelIndex));\n    }\n}", "path": "incubator-kie-optaplanner/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/statistic/subsingle/pickedmovetypestepscore/PickedMoveTypeStepScoreDiffSubSingleStatistic.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// With methods\n// ************************************************************************\n", "func_signal": "public Speaker withUnavailableTimeslotSet(Set<Timeslot> unavailableTimeslotTest)", "code": "{\n    this.unavailableTimeslotSet = unavailableTimeslotTest;\n    return this;\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/conferencescheduling/domain/Speaker.java", "commit_date": "2018-01-22 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * Supported system properties: {@link CommonApp#DATA_DIR_SYSTEM_PROPERTY}.\n *\n * @param args never null\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    CommonApp.prepareSwingEnvironment();\n    OptaPlannerExamplesApp optaPlannerExamplesApp = new OptaPlannerExamplesApp();\n    optaPlannerExamplesApp.pack();\n    optaPlannerExamplesApp.setLocationRelativeTo(null);\n    optaPlannerExamplesApp.setVisible(true);\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/app/OptaPlannerExamplesApp.java", "commit_date": "2020-10-05 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * As described by <a href=\"https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering\">Floyd-Steinberg\n * dithering</a>.\n */\n", "func_signal": "private void floydSteinbergDithering()", "code": "{\n    tspSolution.setDistanceType(DistanceType.AIR_DISTANCE);\n    tspSolution.setDistanceUnitOfMeasurement(\"distance\");\n    int width = image.getWidth();\n    int height = image.getHeight();\n    double[][] errorDiffusion = new double[width][height];\n    List<Location> locationList = new ArrayList<>(1000);\n    long id = 0L;\n    for (int y = 0; y < height; y++) {\n        for (int x = 0; x < width; x++) {\n            int rgb = image.getRGB(x, y);\n            int r = (rgb) & 0xFF;\n            int g = (rgb >> 8) & 0xFF;\n            int b = (rgb >> 16) & 0xFF;\n            double originalGray = (r + g + b) / GRAY_MAXIMUM;\n            double diffusedGray = originalGray + errorDiffusion[x][y];\n            double error;\n            if (diffusedGray <= 0.5) {\n                Location location = new AirLocation();\n                location.setId(id);\n                id++;\n                location.setLatitude(-y);\n                location.setLongitude(x);\n                locationList.add(location);\n                error = diffusedGray;\n            } else {\n                error = diffusedGray - 1.0;\n            }\n            if (x + 1 < width) {\n                errorDiffusion[x + 1][y] += error * 7.0 / 16.0;\n            }\n            if (y + 1 < height) {\n                if (x - 1 >= 0) {\n                    errorDiffusion[x - 1][y + 1] += error * 3.0 / 16.0;\n                }\n                errorDiffusion[x][y + 1] += error * 5.0 / 16.0;\n                if (x + 1 < width) {\n                    errorDiffusion[x + 1][y + 1] += error * 1.0 / 16.0;\n                }\n            }\n        }\n    }\n    tspSolution.setLocationList(locationList);\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/persistence/TspImageStipplerImporter.java", "commit_date": "2020-05-01 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * @return never null, the relative path from {@link PlannerBenchmarkResult#getBenchmarkReportDirectory()}.\n */\n", "func_signal": "public String getRelativeCsvFilePath()", "code": "{\n    SingleBenchmarkResult singleBenchmarkResult = subSingleBenchmarkResult.getSingleBenchmarkResult();\n    return singleBenchmarkResult.getProblemBenchmarkResult().getProblemReportDirectoryName() + \"/\"\n            + singleBenchmarkResult.getResultDirectoryName() + \"/\"\n            + subSingleBenchmarkResult.getResultDirectoryName() + \"/\"\n            + getCsvFileName();\n}", "path": "incubator-kie-optaplanner/optaplanner-benchmark/src/main/java/org/optaplanner/benchmark/impl/statistic/SubSingleStatistic.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * @param producedTime in minutes, just like {@link Task#getStartTime()}\n */\n", "func_signal": "public void produceUpTo(final int producedTime)", "code": "{\n    if (producedTime <= previousProducedTime) {\n        // Occurs due to rounding down of producedDurationInSeconds\n        return;\n    }\n    final int baseDurationBudgetPerEmployee = (producedTime - previousProducedTime);\n    final int newTaskCount = getSolution().getEmployeeList().size() * baseDurationBudgetPerEmployee / BASE_DURATION_AVERAGE;\n    if (newTaskCount <= 0) {\n        // Do not change previousProducedDuration\n        return;\n    }\n    logger.debug(\"Scheduling production of {} new tasks.\", newTaskCount);\n    previousProducedTime = producedTime;\n    final int readyTime = previousConsumedTime;\n    doProblemFactChange(scoreDirector -> {\n        TaskAssigningSolution solution = scoreDirector.getWorkingSolution();\n        List<TaskType> taskTypeList = solution.getTaskTypeList();\n        List<Customer> customerList = solution.getCustomerList();\n        Priority[] priorities = Priority.values();\n        List<Task> taskList = solution.getTaskList();\n        for (int i = 0; i < newTaskCount; i++) {\n            Task task = new Task();\n            TaskType taskType = taskTypeList.get(producingRandom.nextInt(taskTypeList.size()));\n            long nextTaskId = 0L;\n            int nextIndexInTaskType = 0;\n            for (Task other : taskList) {\n                if (nextTaskId <= other.getId()) {\n                    nextTaskId = other.getId() + 1L;\n                }\n                if (taskType == other.getTaskType()) {\n                    if (nextIndexInTaskType <= other.getIndexInTaskType()) {\n                        nextIndexInTaskType = other.getIndexInTaskType() + 1;\n                    }\n                }\n            }\n            task.setId(nextTaskId);\n            task.setTaskType(taskType);\n            task.setIndexInTaskType(nextIndexInTaskType);\n            task.setCustomer(customerList.get(producingRandom.nextInt(customerList.size())));\n            // Prevent the new task from being assigned retroactively\n            task.setReadyTime(readyTime);\n            task.setPriority(priorities[producingRandom.nextInt(priorities.length)]);\n\n            scoreDirector.beforeEntityAdded(task);\n            taskList.add(task);\n            scoreDirector.afterEntityAdded(task);\n        }\n        scoreDirector.triggerVariableListeners();\n    });\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/taskassigning/swingui/TaskAssigningPanel.java", "commit_date": "2020-05-06 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "/**\n * @param constraintPackage sometimes null.\n *        When null, {@code constraintName} for the {@code scoreLevel} must be unique.\n * @param constraintName never null, the name of the constraint\n * @param scoreDirector never null\n * @return null if there is no constraint matched or the constraint doesn't exist\n */\n", "func_signal": "private ConstraintMatchTotal<?> findConstraintMatchTotal(String constraintPackage, String constraintName,\n        InnerScoreDirector<Solution_, ?> scoreDirector)", "code": "{\n    if (constraintPackage != null) {\n        String constraintId = ConstraintMatchTotal.composeConstraintId(constraintPackage, constraintName);\n        return scoreDirector.getConstraintMatchTotalMap().get(constraintId);\n    }\n    ConstraintMatchTotal<?> matchTotal = null;\n    for (ConstraintMatchTotal<?> selectedMatchTotal : scoreDirector.getConstraintMatchTotalMap().values()) {\n        if (selectedMatchTotal.getConstraintName().equals(constraintName)) {\n            if (matchTotal != null) {\n                throw new IllegalArgumentException(\"The constraintName (\" + constraintName\n                        + \") is used by 2 different constraintMatches (\" + matchTotal.getConstraintId()\n                        + \" and \" + selectedMatchTotal.getConstraintId() + \").\");\n            }\n            matchTotal = selectedMatchTotal;\n        }\n    }\n    return matchTotal;\n}", "path": "incubator-kie-optaplanner/optaplanner-test/src/main/java/org/optaplanner/test/impl/score/AbstractScoreVerifier.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// ************************************************************************\n// With methods\n// ************************************************************************\n", "func_signal": "public FollowingExam withId(long id)", "code": "{\n    this.setId(id);\n    return this;\n}", "path": "incubator-kie-optaplanner/optaplanner-examples/src/main/java/org/optaplanner/examples/examination/domain/FollowingExam.java", "commit_date": "2020-06-11 00:00:00", "repo_name": "apache/incubator-kie-optaplanner", "stars": 3238, "license": "apache-2.0", "language": "java", "size": 244766}
{"docstring": "// The background part of the installation process on Q (reading APKs etc)\n// that must be executed on another thread\n// Put them in background to avoid stalling the UI thread\n", "func_signal": "private void doInstallPackageQ(Uri baseUri, String[] split_apks, PackageInstaller.Session session, Runnable callback)", "code": "{\n    ArrayList<Uri> uris = new ArrayList<>();\n    uris.add(baseUri);\n    if (split_apks != null && split_apks.length > 0) {\n        for (String apk : split_apks) {\n            uris.add(Uri.fromFile(new File(apk)));\n        }\n    }\n\n    new Thread(() -> {\n        for (Uri uri : uris) {\n            try (InputStream is = getContentResolver().openInputStream(uri);\n                 OutputStream os = session.openWrite(UUID.randomUUID().toString(), 0, is.available())\n            ) {\n                Utility.pipe(is, os);\n                session.fsync(os);\n            } catch (IOException e) {\n\n            }\n        }\n\n        runOnUiThread(callback);\n    }).start();\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/ui/DummyActivity.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Read and apply the enabled state of the cross profile file chooser\n", "func_signal": "public void applyCrossProfileFileChooser()", "code": "{\n    boolean enabled = mStorage.getBoolean(LocalStorageManager.PREF_CROSS_PROFILE_FILE_CHOOSER);\n    mContext.getPackageManager().setComponentEnabledSetting(\n            new ComponentName(mContext, CrossProfileDocumentsProvider.class),\n            enabled ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,\n            PackageManager.DONT_KILL_APP);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/SettingsManager.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Convenience method to call getActivity().runOnUiThread()\n// without bothering about NPEs\n", "func_signal": "protected void runOnUiThread(Runnable task)", "code": "{\n    if (getActivity() == null) return;\n    getActivity().runOnUiThread(task);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/ui/BaseFragment.java", "commit_date": "2018-11-21 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Get file's extension name\n", "func_signal": "public static String getFileExtension(String filePath)", "code": "{\n    int index = filePath.lastIndexOf(\".\");\n    if (index > 0) {\n        return filePath.substring(index + 1);\n    } else {\n        return null;\n    }\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/Utility.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Read and apply the enabled state of the camera proxy\n", "func_signal": "public void applyCameraProxy()", "code": "{\n    boolean enabled = mStorage.getBoolean(LocalStorageManager.PREF_CAMERA_PROXY);\n    mContext.getPackageManager().setComponentEnabledSetting(\n            new ComponentName(mContext, CameraProxyActivity.class),\n            enabled ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,\n            PackageManager.DONT_KILL_APP);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/SettingsManager.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Delete apps that no longer exist from the auto freeze list\n", "func_signal": "public static void deleteMissingApps(String pref, List<ApplicationInfoWrapper> apps)", "code": "{\n    List<String> list = new ArrayList<>(\n            Arrays.asList(LocalStorageManager.getInstance().getStringList(pref)));\n    list.removeIf((it) -> apps.stream().noneMatch((x) -> x.getPackageName().equals(it)));\n    LocalStorageManager.getInstance().setStringList(pref, list.toArray(new String[]{}));\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/Utility.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Set the delay for auto freeze service (in seconds)\n", "func_signal": "public void setAutoFreezeDelay(int seconds)", "code": "{\n    mStorage.setInt(LocalStorageManager.PREF_AUTO_FREEZE_DELAY, seconds);\n    syncSettingsToProfileInt(LocalStorageManager.PREF_AUTO_FREEZE_DELAY, seconds);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/SettingsManager.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// From <https://stackoverflow.com/questions/3035692/how-to-convert-a-drawable-to-a-bitmap>\n", "func_signal": "public static Bitmap drawableToBitmap(Drawable drawable)", "code": "{\n    if (drawable instanceof BitmapDrawable) {\n        return ((BitmapDrawable)drawable).getBitmap();\n    }\n\n    int width = drawable.getIntrinsicWidth();\n    width = width > 0 ? width : 1;\n    int height = drawable.getIntrinsicHeight();\n    height = height > 0 ? height : 1;\n\n    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(bitmap);\n    drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());\n    drawable.draw(canvas);\n\n    return bitmap;\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/Utility.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Detect if the device is MIUI\n", "func_signal": "public static boolean isMIUI()", "code": "{\n    try {\n        Process proc = Runtime.getRuntime().exec(\"getprop ro.miui.ui.version.name\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n        String line = reader.readLine().trim();\n        return !line.isEmpty();\n    } catch (Exception e) {\n        return false;\n    }\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/Utility.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Set the blocked state of cross-profile contacts searching\n", "func_signal": "public void setBlockContactsSearchingEnabled(boolean enabled)", "code": "{\n    mStorage.setBoolean(LocalStorageManager.PREF_BLOCK_CONTACTS_SEARCHING, enabled);\n    syncSettingsToProfileBool(LocalStorageManager.PREF_BLOCK_CONTACTS_SEARCHING, enabled);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/SettingsManager.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Create a listener from an activity, and show a progress dialog for the sessionId\n// Only cares about the one sessionId provided here.\n// The caller is responsible for registering the callback;\n// however, this class will remove itself once the session has been finished.\n", "func_signal": "public InstallationProgressListener(Activity activity, PackageInstaller pi, int sessionId)", "code": "{\n    mPi = pi;\n\n    ViewGroup layout = (ViewGroup) LayoutInflater.from(activity)\n            .inflate(R.layout.progress_dialog, (ViewGroup) activity.getWindow().getDecorView(), false);\n    mProgress = layout.findViewById(R.id.progress);\n\n    mDialog = new AlertDialog.Builder(activity)\n            .setCancelable(false)\n            .setTitle(R.string.app_installing)\n            .setView(layout)\n            .create();\n    mDialog.show();\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/InstallationProgressListener.java", "commit_date": "2020-06-22 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Call this on ACTUAL data set change and/or search query change\n", "func_signal": "private void notifyChange()", "code": "{\n    mList.clear();\n    if (mSearchQuery == null) {\n        // No search query, do not filter\n        mList.addAll(mOrigList);\n    } else {\n        // Filter by search query\n        mList.addAll(mOrigList.stream()\n                .filter((app) ->\n                        app.getPackageName().toLowerCase().contains(mSearchQuery)\n                                || app.getLabel().toLowerCase().contains(mSearchQuery))\n                .collect(Collectors.toList()));\n    }\n    notifyDataSetChanged();\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/ui/AppListAdapter.java", "commit_date": "2019-02-26 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Check special access permission through AppOps\n", "func_signal": "public static boolean checkSpecialAccessPermission(Context context, String name)", "code": "{\n    AppOpsManager appops = context.getSystemService(AppOpsManager.class);\n    int mode = appops.checkOpNoThrow(name, android.os.Process.myUid(), context.getPackageName());\n    return mode == AppOpsManager.MODE_ALLOWED;\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/Utility.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Functions to load scaled down version of Bitmap\n// from <https://developer.android.com/topic/performance/graphics/load-bitmap?hl=es#java>\n", "func_signal": "public static int calculateInSampleSize(\n        BitmapFactory.Options options, int reqWidth, int reqHeight)", "code": "{\n    // Raw height and width of image\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height > reqHeight || width > reqWidth) {\n\n        final int halfHeight = height / 2;\n        final int halfWidth = width / 2;\n\n        // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n        // height and width larger than the requested height and width.\n        while ((halfHeight / inSampleSize) >= reqHeight\n                && (halfWidth / inSampleSize) >= reqWidth) {\n            inSampleSize *= 2;\n        }\n    }\n\n    return inSampleSize;\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/Utility.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Set the enabled state of \"skip foreground\"\n", "func_signal": "public void setSkipForegroundEnabled(boolean enabled)", "code": "{\n    mStorage.setBoolean(LocalStorageManager.PREF_DONT_FREEZE_FOREGROUND, enabled);\n    syncSettingsToProfileBool(LocalStorageManager.PREF_DONT_FREEZE_FOREGROUND, enabled);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/SettingsManager.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Fallback method for thumbnail loading: just load from disk, but load a scaled down version\n", "func_signal": "private ParcelFileDescriptor loadBitmapThumbnail(String path, Point sizeHint)", "code": "{\n    Bitmap bmp = Utility.decodeSampledBitmap(path, sizeHint.x, sizeHint.y);\n\n    if (bmp == null) {\n        return null;\n    }\n\n    return bitmapToFd(bmp);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/services/FileShuttleService.java", "commit_date": "2019-02-26 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// On Android Q, ACTION_INSTALL_PACKAGE has been deprecated.\n// We have to switch to using PackageInstaller for the job, which isn't quite\n// as elegant because now we really need to read the entire apk and write to it\n// Keep this case only for Q for now.\n", "func_signal": "private void actionInstallPackageQ(Uri uri, String[] split_apks) throws IOException", "code": "{\n    PackageInstaller pi = getPackageManager().getPackageInstaller();\n    PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(\n            PackageInstaller.SessionParams.MODE_FULL_INSTALL);\n    int sessionId = pi.createSession(params);\n\n    // Show the progress dialog first\n    pi.registerSessionCallback(new InstallationProgressListener(this, pi, sessionId));\n\n    PackageInstaller.Session session = pi.openSession(sessionId);\n    doInstallPackageQ(uri, split_apks, session, () -> {\n        // We have finished piping the streams, show the progress as 10%\n        session.setStagingProgress(0.1f);\n\n        // Commit the session\n        Intent intent = new Intent(this, DummyActivity.class);\n        intent.setAction(PACKAGEINSTALLER_CALLBACK);\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,\n                intent, PendingIntent.FLAG_UPDATE_CURRENT);\n        session.commit(pendingIntent.getIntentSender());\n    });\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/ui/DummyActivity.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Get the delay for auto freeze service\n", "func_signal": "public int getAutoFreezeDelay()", "code": "{\n    int ret = mStorage.getInt(LocalStorageManager.PREF_AUTO_FREEZE_DELAY);\n    if (ret == Integer.MIN_VALUE) {\n        // Default delay is 0 seconds\n        ret = 0;\n    }\n    return ret;\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/SettingsManager.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Polyfill for String.join\n", "func_signal": "public static String stringJoin(String delimiter, String[] list)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        return String.join(delimiter, list);\n    } else {\n        if (list.length == 0) return \"\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < list.length - 1; i++) {\n            sb.append(list[i]).append(delimiter);\n        }\n        sb.append(list[list.length - 1]);\n        return sb.toString();\n    }\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/Utility.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "// Set the enabled state of the cross profile file chooser\n", "func_signal": "public void setCameraProxyEnabled(boolean enabled)", "code": "{\n    mStorage.setBoolean(LocalStorageManager.PREF_CAMERA_PROXY, enabled);\n    applyCameraProxy();\n    syncSettingsToProfileBool(LocalStorageManager.PREF_CAMERA_PROXY, enabled);\n}", "path": "Shelter/app/src/main/java/net/typeblog/shelter/util/SettingsManager.java", "commit_date": "2020-09-16 00:00:00", "repo_name": "PeterCxy/Shelter", "stars": 2050, "license": "gpl-3.0", "language": "java", "size": 1301}
{"docstring": "/**\n * Realize an smooth slide to an slide offset passed as argument. This method is the base of\n * maximize, minimize and close methods.\n *\n * @param slideOffset to apply\n * @return true if the view is slided.\n */\n", "func_signal": "private boolean smoothSlideTo(float slideOffset)", "code": "{\n  final int topBound = getPaddingTop();\n  int x = (int) (slideOffset * (getWidth() - transformer.getMinWidthPlusMarginRight()));\n  int y = (int) (topBound + slideOffset * getVerticalDragRange());\n  if (viewDragHelper.smoothSlideViewTo(dragView, x, y)) {\n    ViewCompat.postInvalidateOnAnimation(this);\n    return true;\n  }\n  return false;\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Override method to dispatch touch event to the dragged view.\n *\n * @param ev captured.\n * @return true if the touch event is realized over the drag or second view.\n */\n", "func_signal": "@Override public boolean onTouchEvent(MotionEvent ev)", "code": "{\n  int actionMasked = MotionEventCompat.getActionMasked(ev);\n  if ((actionMasked & MotionEventCompat.ACTION_MASK) == MotionEvent.ACTION_DOWN) {\n    activePointerId = MotionEventCompat.getPointerId(ev, actionMasked);\n  }\n  if (activePointerId == INVALID_POINTER) {\n    return false;\n  }\n  viewDragHelper.processTouchEvent(ev);\n  if (isClosed()) {\n    return false;\n  }\n  boolean isDragViewHit = isViewHit(dragView, (int) ev.getX(), (int) ev.getY());\n  boolean isSecondViewHit = isViewHit(secondView, (int) ev.getX(), (int) ev.getY());\n  analyzeTouchToMaximizeIfNeeded(ev, isDragViewHit);\n  if (isMaximized()) {\n    dragView.dispatchTouchEvent(ev);\n  } else {\n    dragView.dispatchTouchEvent(cloneMotionEventWithAction(ev, MotionEvent.ACTION_CANCEL));\n  }\n  return isDragViewHit || isSecondViewHit;\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Initialize Transformer with a scalable or change width/height implementation.\n */\n", "func_signal": "private void initializeTransformer()", "code": "{\n  TransformerFactory transformerFactory = new TransformerFactory();\n  transformer = transformerFactory.getTransformer(topViewResize, dragView, this);\n  transformer.setViewHeight(topViewHeight);\n  transformer.setXScaleFactor(scaleFactorX);\n  transformer.setYScaleFactor(scaleFactorY);\n  transformer.setMarginRight(marginRight);\n  transformer.setMarginBottom(marginBottom);\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Notify te view is closed to the right to the DraggableListener\n */\n", "func_signal": "private void notifyCloseToRightListener()", "code": "{\n  if (listener != null) {\n    listener.onClosedToRight();\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Calculate if one position is above any view.\n *\n * @param view to analyze.\n * @param x position.\n * @param y position.\n * @return true if x and y positions are below the view.\n */\n", "func_signal": "private boolean isViewHit(View view, int x, int y)", "code": "{\n  int[] viewLocation = new int[2];\n  view.getLocationOnScreen(viewLocation);\n  int[] parentLocation = new int[2];\n  this.getLocationOnScreen(parentLocation);\n  int screenX = parentLocation[0] + x;\n  int screenY = parentLocation[1] + y;\n  return screenX >= viewLocation[0]\n      && screenX < viewLocation[0] + view.getWidth()\n      && screenY >= viewLocation[1]\n      && screenY < viewLocation[1] + view.getHeight();\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Notify te view is closed to the left to the DraggableListener\n */\n", "func_signal": "private void notifyCloseToLeftListener()", "code": "{\n  if (listener != null) {\n    listener.onClosedToLeft();\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Configure DraggableView to resize top view instead of scale it.\n */\n", "func_signal": "public void setTopViewResize(boolean topViewResize)", "code": "{\n  this.topViewResize = topViewResize;\n  initializeTransformer();\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Override method to map dragged view, secondView to view objects, to configure dragged\n * view height and to initialize DragViewHelper.\n */\n", "func_signal": "@Override protected void onFinishInflate()", "code": "{\n  super.onFinishInflate();\n  if (!isInEditMode()) {\n    mapGUI();\n    initializeTransformer();\n    initializeViewDragHelper();\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Minimize the custom view applying an animation to put the top fragment on the bottom right\n * corner of the screen.\n */\n", "func_signal": "public void minimize()", "code": "{\n  smoothSlideTo(SLIDE_BOTTOM);\n  notifyMinimizeToListener();\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Override method to configure the dragged view and secondView layout properly.\n */\n", "func_signal": "@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "code": "{\n  if (isInEditMode())\n    super.onLayout(changed, left, top, right, bottom);\n  else if (isDragViewAtTop()) {\n    dragView.layout(left, top, right, transformer.getOriginalHeight());\n    secondView.layout(left, transformer.getOriginalHeight(), right, bottom);\n    ViewHelper.setY(dragView, top);\n    ViewHelper.setY(secondView, transformer.getOriginalHeight());\n  } else {\n    secondView.layout(left, transformer.getOriginalHeight(), right, bottom);\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * To ensure the animation is going to work this method has been override to call\n * postInvalidateOnAnimation if the view is not settled yet.\n */\n", "func_signal": "@Override public void computeScroll()", "code": "{\n  if (!isInEditMode() && viewDragHelper.continueSettling(true)) {\n    ViewCompat.postInvalidateOnAnimation(this);\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Close the custom view applying an animation to close the view to the right side of the screen.\n */\n", "func_signal": "public void closeToRight()", "code": "{\n  if (viewDragHelper.smoothSlideViewTo(dragView, transformer.getOriginalWidth(),\n      getHeight() - transformer.getMinHeightPlusMargin())) {\n    ViewCompat.postInvalidateOnAnimation(this);\n    notifyCloseToRightListener();\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Maximize the custom view applying an animation to return the view to the initial position.\n */\n", "func_signal": "public void maximize()", "code": "{\n  smoothSlideTo(SLIDE_TOP);\n  notifyMaximizeToListener();\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Initialize XML attributes.\n *\n * @param attrs to be analyzed.\n */\n", "func_signal": "private void initializeAttributes(AttributeSet attrs)", "code": "{\n  TypedArray attributes = getContext().obtainStyledAttributes(attrs, R.styleable.draggable_view);\n  this.enableHorizontalAlphaEffect =\n      attributes.getBoolean(R.styleable.draggable_view_enable_minimized_horizontal_alpha_effect,\n          DEFAULT_ENABLE_HORIZONTAL_ALPHA_EFFECT);\n  this.enableClickToMaximize =\n      attributes.getBoolean(R.styleable.draggable_view_enable_click_to_maximize_view,\n          DEFAULT_ENABLE_CLICK_TO_MAXIMIZE);\n  this.enableClickToMinimize =\n      attributes.getBoolean(R.styleable.draggable_view_enable_click_to_minimize_view,\n          DEFAULT_ENABLE_CLICK_TO_MINIMIZE);\n  this.topViewResize =\n          attributes.getBoolean(R.styleable.draggable_view_top_view_resize, DEFAULT_TOP_VIEW_RESIZE);\n  this.topViewHeight = attributes.getDimensionPixelSize(R.styleable.draggable_view_top_view_height,\n          DEFAULT_TOP_VIEW_HEIGHT);\n  this.scaleFactorX = attributes.getFloat(R.styleable.draggable_view_top_view_x_scale_factor,\n          DEFAULT_SCALE_FACTOR);\n  this.scaleFactorY = attributes.getFloat(R.styleable.draggable_view_top_view_y_scale_factor,\n          DEFAULT_SCALE_FACTOR);\n  this.marginBottom = attributes.getDimensionPixelSize(R.styleable.draggable_view_top_view_margin_bottom,\n          DEFAULT_TOP_VIEW_MARGIN);\n  this.marginRight = attributes.getDimensionPixelSize(R.styleable.draggable_view_top_view_margin_right,\n          DEFAULT_TOP_VIEW_MARGIN);\n  this.dragViewId =\n          attributes.getResourceId(R.styleable.draggable_view_top_view_id, R.id.drag_view);\n  this.secondViewId =\n          attributes.getResourceId(R.styleable.draggable_view_bottom_view_id, R.id.second_view);\n  attributes.recycle();\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Notify te view is maximized to the DraggableListener\n */\n", "func_signal": "private void notifyMaximizeToListener()", "code": "{\n  if (listener != null) {\n    listener.onMaximized();\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Clone given motion event and set specified action. This method is useful, when we want to\n * cancel event propagation in child views by sending event with {@link\n * android.view.MotionEvent#ACTION_CANCEL}\n * action.\n *\n * @param event event to clone\n * @param action new action\n * @return cloned motion event\n */\n", "func_signal": "private MotionEvent cloneMotionEventWithAction(MotionEvent event, int action)", "code": "{\n  return MotionEvent.obtain(event.getDownTime(), event.getEventTime(), action, event.getX(),\n      event.getY(), event.getMetaState());\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Slide the view based on scroll of the nav drawer.\n * \"setEnableTouch\" user prevents click to expand while the drawer is moving, it will be\n * set to false when the @slideOffset is bigger than MIN_SLIDE_OFFSET.\n * When the slideOffset is bigger than 0.1 and dragView isn't close, set the dragView\n * to minimized.\n * It's only possible to maximize the view when @slideOffset is equals to 0.0,\n * in other words, closed.\n *\n * @param slideOffset Value between 0 and 1, represent the value of slide:\n * 0.0 is equal to close drawer and 1.0 equals open drawer.\n * @param drawerPosition Represent the position of nav drawer on X axis.\n * @param width Width of nav drawer\n */\n", "func_signal": "public void slideHorizontally(float slideOffset, float drawerPosition, int width)", "code": "{\n  if (slideOffset > MIN_SLIDE_OFFSET && !isClosed() && isMaximized()) {\n    minimize();\n  }\n  setTouchEnabled(slideOffset <= MIN_SLIDE_OFFSET);\n  ViewHelper.setX(this, width - Math.abs(drawerPosition));\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Notify te view is minimized to the DraggableListener\n */\n", "func_signal": "private void notifyMinimizeToListener()", "code": "{\n  if (listener != null) {\n    listener.onMinimized();\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Override method to intercept only touch events over the drag view and to cancel the drag when\n * the action associated to the MotionEvent is equals to ACTION_CANCEL or ACTION_UP.\n *\n * @param ev captured.\n * @return true if the view is going to process the touch event or false if not.\n */\n", "func_signal": "@Override public boolean onInterceptTouchEvent(MotionEvent ev)", "code": "{\n  if (!isEnabled()) {\n    return false;\n  }\n  switch (MotionEventCompat.getActionMasked(ev) & MotionEventCompat.ACTION_MASK) {\n    case MotionEvent.ACTION_CANCEL:\n    case MotionEvent.ACTION_UP:\n      viewDragHelper.cancel();\n      return false;\n    case MotionEvent.ACTION_DOWN:\n      int index = MotionEventCompat.getActionIndex(ev);\n      activePointerId = MotionEventCompat.getPointerId(ev, index);\n      if (activePointerId == INVALID_POINTER) {\n        return false;\n      }\n      break;\n    default:\n      break;\n  }\n  boolean interceptTap = viewDragHelper.isViewUnder(dragView, (int) ev.getX(), (int) ev.getY());\n  return viewDragHelper.shouldInterceptTouchEvent(ev) || interceptTap;\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Close the custom view applying an animation to close the view to the left side of the screen.\n */\n", "func_signal": "public void closeToLeft()", "code": "{\n  if (viewDragHelper.smoothSlideViewTo(dragView, -transformer.getOriginalWidth(),\n      getHeight() - transformer.getMinHeightPlusMargin())) {\n    ViewCompat.postInvalidateOnAnimation(this);\n    notifyCloseToLeftListener();\n  }\n}", "path": "DraggablePanel/draggablepanel/src/main/java/com/github/pedrovgs/DraggableView.java", "commit_date": "2015-11-10 00:00:00", "repo_name": "pedrovgs/DraggablePanel", "stars": 2989, "license": "apache-2.0", "language": "java", "size": 107837}
{"docstring": "/**\n * Defines the time that must pass between app crashes to determine that we are not\n * in a crash loop. If a crash has occurred less that this time ago,\n * the error activity will not be launched and the system crash screen will be invoked.\n * The default is 3000.\n */\n", "func_signal": "@NonNull\npublic Builder minTimeBetweenCrashesMs(int minTimeBetweenCrashesMs)", "code": "{\n    config.minTimeBetweenCrashesMs = minTimeBetweenCrashesMs;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Sets an event listener to be called when events occur, so they can be reported\n * by the app as, for example, Google Analytics events.\n * If not set or set to null, no events will be reported.\n *\n * @param eventListener The event listener.\n * @throws IllegalArgumentException if the eventListener is an inner or anonymous class\n */\n", "func_signal": "@NonNull\npublic Builder eventListener(@Nullable CustomActivityOnCrash.EventListener eventListener)", "code": "{\n    if (eventListener != null && eventListener.getClass().getEnclosingClass() != null && !Modifier.isStatic(eventListener.getClass().getModifiers())) {\n        throw new IllegalArgumentException(\"The event listener cannot be an inner or anonymous class, because it will need to be serialized. Change it to a class of its own, or make it a static inner class.\");\n    } else {\n        config.eventListener = eventListener;\n    }\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Sets the error activity class to launch when a crash occurs.\n * If null, the default error activity will be used.\n */\n", "func_signal": "@NonNull\npublic Builder errorActivity(@Nullable Class<? extends Activity> errorActivityClass)", "code": "{\n    config.errorActivityClass = errorActivityClass;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method that returns the build date of the current APK as a string, or null if unable to determine it.\n *\n * @param context    A valid context. Must not be null.\n * @param dateFormat DateFormat to use to convert from Date to String\n * @return The formatted date, or \"Unknown\" if unable to determine it.\n */\n", "func_signal": "@Nullable\nprivate static String getBuildDateAsString(@NonNull Context context, @NonNull DateFormat dateFormat)", "code": "{\n    long buildDate;\n    try {\n        ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(), 0);\n        ZipFile zf = new ZipFile(ai.sourceDir);\n\n        //If this failed, try with the old zip method\n        ZipEntry ze = zf.getEntry(\"classes.dex\");\n        buildDate = ze.getTime();\n\n\n        zf.close();\n    } catch (Exception e) {\n        buildDate = 0;\n    }\n\n    if (buildDate > 312764400000L) {\n        return dateFormat.format(new Date(buildDate));\n    } else {\n        return null;\n    }\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method that returns the device model name with correct capitalization.\n * Taken from: http://stackoverflow.com/a/12707479/1254846\n *\n * @return The device model name (i.e., \"LGE Nexus 5\")\n */\n", "func_signal": "@NonNull\nprivate static String getDeviceModelName()", "code": "{\n    String manufacturer = Build.MANUFACTURER;\n    String model = Build.MODEL;\n    if (model.startsWith(manufacturer)) {\n        return capitalize(model);\n    } else {\n        return capitalize(manufacturer) + \" \" + model;\n    }\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method that returns the version name of the current app, or null if unable to determine it.\n *\n * @param context A valid context. Must not be null.\n * @return The version name, or \"Unknown if unable to determine it.\n */\n", "func_signal": "@NonNull\nprivate static String getVersionName(Context context)", "code": "{\n    try {\n        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n        return packageInfo.versionName;\n    } catch (Exception e) {\n        return \"Unknown\";\n    }\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method used to get the first activity with an intent-filter <action android:name=\"cat.ereza.customactivityoncrash.ERROR\" />,\n * If there is no activity with that intent filter, this returns null.\n *\n * @param context A valid context. Must not be null.\n * @return A valid activity class, or null if no suitable one is found\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Nullable\nprivate static Class<? extends Activity> getErrorActivityClassWithIntentFilter(@NonNull Context context)", "code": "{\n    Intent searchedIntent = new Intent().setAction(INTENT_ACTION_ERROR_ACTIVITY).setPackage(context.getPackageName());\n    List<ResolveInfo> resolveInfos = context.getPackageManager().queryIntentActivities(searchedIntent,\n            PackageManager.GET_RESOLVED_FILTER);\n\n    if (resolveInfos.size() > 0) {\n        ResolveInfo resolveInfo = resolveInfos.get(0);\n        try {\n            return (Class<? extends Activity>) Class.forName(resolveInfo.activityInfo.name);\n        } catch (ClassNotFoundException e) {\n            //Should not happen, print it to the log!\n            Log.e(TAG, \"Failed when resolving the error activity class via intent filter, stack trace follows!\", e);\n        }\n    }\n\n    return null;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Given an Intent, returns several error details including the stack trace extra from the intent.\n *\n * @param context A valid context. Must not be null.\n * @param intent  The Intent. Must not be null.\n * @return The full error details.\n */\n", "func_signal": "@NonNull\npublic static String getAllErrorDetailsFromIntent(@NonNull Context context, @NonNull Intent intent)", "code": "{\n    //I don't think that this needs localization because it's a development string...\n\n    Date currentDate = new Date();\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.US);\n\n    //Get build date\n    String buildDateAsString = getBuildDateAsString(context, dateFormat);\n\n    //Get app version\n    String versionName = getVersionName(context);\n\n    String errorDetails = \"\";\n\n    errorDetails += \"Build version: \" + versionName + \" \\n\";\n    if (buildDateAsString != null) {\n        errorDetails += \"Build date: \" + buildDateAsString + \" \\n\";\n    }\n    errorDetails += \"Current date: \" + dateFormat.format(currentDate) + \" \\n\";\n    //Added a space between line feeds to fix #18.\n    //Ideally, we should not use this method at all... It is only formatted this way because of coupling with the default error activity.\n    //We should move it to a method that returns a bean, and let anyone format it as they wish.\n    errorDetails += \"Device: \" + getDeviceModelName() + \" \\n\";\n    errorDetails += \"OS version: Android \" + Build.VERSION.RELEASE + \" (SDK \" + Build.VERSION.SDK_INT + \") \\n \\n\";\n    errorDetails += \"Stack trace:  \\n\";\n    errorDetails += getStackTraceFromIntent(intent);\n\n    String activityLog = getActivityLogFromIntent(intent);\n\n    if (activityLog != null) {\n        errorDetails += \"\\nUser actions: \\n\";\n        errorDetails += activityLog;\n    }\n\n    String customTrace = getCustomCrashDataFromIntent(intent);\n    if (customTrace != null) {\n        errorDetails += \"\\nCustom trace: \\n\";\n        errorDetails += customTrace;\n    }\n\n    return errorDetails;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Defines if CustomActivityOnCrash crash interception mechanism is enabled.\n * Set it to true if you want CustomActivityOnCrash to intercept crashes,\n * false if you want them to be treated as if the library was not installed.\n * The default is true.\n */\n", "func_signal": "@NonNull\npublic Builder enabled(boolean enabled)", "code": "{\n    config.enabled = enabled;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Defines if the activities visited by the user should be tracked\n * so they are reported when an error occurs.\n * The default is false.\n */\n", "func_signal": "@NonNull\npublic Builder trackActivities(boolean trackActivities)", "code": "{\n    config.trackActivities = trackActivities;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Defines if the error activity must shown the error details button.\n * Set it to true if you want to show the full stack trace and device info,\n * false if you want it to be hidden.\n * The default is true.\n */\n", "func_signal": "@NonNull\npublic Builder showErrorDetails(boolean showErrorDetails)", "code": "{\n    config.showErrorDetails = showErrorDetails;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method that kills the current process.\n * It is used after restarting or killing the app.\n */\n", "func_signal": "private static void killCurrentProcess()", "code": "{\n    android.os.Process.killProcess(android.os.Process.myPid());\n    System.exit(10);\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Defines which drawable to use in the default error activity image.\n * Set this if you want to use an image other than the default one.\n * The default is R.drawable.customactivityoncrash_error_image (a cute upside-down bug).\n */\n", "func_signal": "@NonNull\npublic Builder errorDrawable(@Nullable @DrawableRes Integer errorDrawable)", "code": "{\n    config.errorDrawable = errorDrawable;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method used to get the default launcher activity for the app.\n * If there is no launchable activity, this returns null.\n *\n * @param context A valid context. Must not be null.\n * @return A valid activity class, or null if no suitable one is found\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Nullable\nprivate static Class<? extends Activity> getLauncherActivity(@NonNull Context context)", "code": "{\n    Intent intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());\n    if (intent != null && intent.getComponent() != null) {\n        try {\n            return (Class<? extends Activity>) Class.forName(intent.getComponent().getClassName());\n        } catch (ClassNotFoundException e) {\n            //Should not happen, print it to the log!\n            Log.e(TAG, \"Failed when resolving the restart activity class via getLaunchIntentForPackage, stack trace follows!\", e);\n        }\n    }\n\n    return null;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Sets the main activity class that the error activity must launch when a crash occurs.\n * If not set or set to null, the default launch activity will be used.\n * If your app has no launch activities and this is not set, the default error activity will close instead.\n */\n", "func_signal": "@NonNull\npublic Builder restartActivity(@Nullable Class<? extends Activity> restartActivityClass)", "code": "{\n    config.restartActivityClass = restartActivityClass;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Defines if the error activity must be launched when the app is on background.\n * BackgroundMode.BACKGROUND_MODE_SHOW_CUSTOM: launch the error activity when the app is in background,\n * BackgroundMode.BACKGROUND_MODE_CRASH: launch the default system error when the app is in background,\n * BackgroundMode.BACKGROUND_MODE_SILENT: crash silently when the app is in background,\n * The default is BackgroundMode.BACKGROUND_MODE_SHOW_CUSTOM (the app will be brought to front when a crash occurs).\n */\n", "func_signal": "@NonNull\npublic Builder backgroundMode(@BackgroundMode int backgroundMode)", "code": "{\n    config.backgroundMode = backgroundMode;\n    return this;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/config/CaocConfig.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method used to get the first activity with an intent-filter <action android:name=\"cat.ereza.customactivityoncrash.RESTART\" />,\n * If there is no activity with that intent filter, this returns null.\n *\n * @param context A valid context. Must not be null.\n * @return A valid activity class, or null if no suitable one is found\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Nullable\nprivate static Class<? extends Activity> getRestartActivityClassWithIntentFilter(@NonNull Context context)", "code": "{\n    Intent searchedIntent = new Intent().setAction(INTENT_ACTION_RESTART_ACTIVITY).setPackage(context.getPackageName());\n    List<ResolveInfo> resolveInfos = context.getPackageManager().queryIntentActivities(searchedIntent,\n            PackageManager.GET_RESOLVED_FILTER);\n\n    if (resolveInfos.size() > 0) {\n        ResolveInfo resolveInfo = resolveInfos.get(0);\n        try {\n            return (Class<? extends Activity>) Class.forName(resolveInfo.activityInfo.name);\n        } catch (ClassNotFoundException e) {\n            //Should not happen, print it to the log!\n            Log.e(TAG, \"Failed when resolving the restart activity class via intent filter, stack trace follows!\", e);\n        }\n    }\n\n    return null;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Closes the app.\n * If an event listener is provided, the close app event is invoked.\n * Must only be used from your error activity.\n *\n * @param activity The current error activity. Must not be null.\n * @param config   The config object as obtained by calling getConfigFromIntent.\n */\n", "func_signal": "public static void closeApplication(@NonNull Activity activity, @NonNull CaocConfig config)", "code": "{\n    if (config.getEventListener() != null) {\n        config.getEventListener().onCloseAppFromErrorActivity();\n    }\n    activity.finish();\n    killCurrentProcess();\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * Given an Intent, restarts the app and launches a startActivity to that intent.\n * The flags NEW_TASK and CLEAR_TASK are set if the Intent does not have them, to ensure\n * the app stack is fully cleared.\n * If an event listener is provided, the restart app event is invoked.\n * Must only be used from your error activity.\n *\n * @param activity The current error activity. Must not be null.\n * @param intent   The Intent. Must not be null.\n * @param config   The config object as obtained by calling getConfigFromIntent.\n */\n", "func_signal": "public static void restartApplicationWithIntent(@NonNull Activity activity, @NonNull Intent intent, @NonNull CaocConfig config)", "code": "{\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n    if (intent.getComponent() != null) {\n        //If the class name has been set, we force it to simulate a Launcher launch.\n        //If we don't do this, if you restart from the error activity, then press home,\n        //and then launch the activity from the launcher, the main activity appears twice on the backstack.\n        //This will most likely not have any detrimental effect because if you set the Intent component,\n        //if will always be launched regardless of the actions specified here.\n        intent.setAction(Intent.ACTION_MAIN);\n        intent.addCategory(Intent.CATEGORY_LAUNCHER);\n    }\n    if (config.getEventListener() != null) {\n        config.getEventListener().onRestartAppFromErrorActivity();\n    }\n    activity.finish();\n    activity.startActivity(intent);\n    killCurrentProcess();\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "/**\n * INTERNAL method that checks if the stack trace that just crashed is conflictive. This is true in the following scenarios:\n * - The application has crashed while initializing (handleBindApplication is in the stack)\n * - The crash occurred inside the \"error_activity\" process\n *\n * @param throwable     The throwable from which the stack trace will be checked\n * @param activityClass The activity class to launch when the app crashes\n * @return true if this stack trace is conflictive and the activity must not be launched, false otherwise\n */\n", "func_signal": "private static boolean isStackTraceLikelyConflictive(@NonNull Throwable throwable, @NonNull Class<? extends Activity> activityClass)", "code": "{\n    String process;\n    try {\n        BufferedReader br = new BufferedReader(new FileReader(\"/proc/self/cmdline\"));\n        process = br.readLine().trim();\n        br.close();\n    } catch (IOException e) {\n        process = null;\n    }\n\n    if (process != null && process.endsWith(\":error_activity\")) {\n        //Error happened in the error activity process - conflictive, so use default handler\n        return true;\n    }\n\n    do {\n        StackTraceElement[] stackTrace = throwable.getStackTrace();\n        for (StackTraceElement element : stackTrace) {\n            if (element.getClassName().equals(\"android.app.ActivityThread\") && element.getMethodName().equals(\"handleBindApplication\")) {\n                return true;\n            }\n        }\n    } while ((throwable = throwable.getCause()) != null);\n    return false;\n}", "path": "CustomActivityOnCrash/library/src/main/java/cat/ereza/customactivityoncrash/CustomActivityOnCrash.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "Ereza/CustomActivityOnCrash", "stars": 3700, "license": "apache-2.0", "language": "java", "size": 622}
{"docstring": "// convert\n", "func_signal": "public static PointLocationEntity convert(int pointLocation, boolean isLeft)", "code": "{\n\n    PointLocationEntity pl = new PointLocationEntity();\n    pl.pointLocation = pointLocation;\n    pl.isLeft = isLeft;\n    return pl;\n\n}", "path": "C-OCR/Common/src/main/java/util/ConvertUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n    switch(fieldId) {\n        case 1: // STRING_FEATURES\n            return STRING_FEATURES;\n        case 2: // FLOAT_FEATURES\n            return FLOAT_FEATURES;\n        case 3: // DENSE_FEATURES\n            return DENSE_FEATURES;\n        default:\n            return null;\n    }\n}", "path": "C-OCR/Recognition/main/java/Feature/FeatureVector.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public FeatureVector(FeatureVector other)", "code": "{\n    if (other.isSetStringFeatures()) {\n        Map<String,Set<String>> __this__stringFeatures = new HashMap<String,Set<String>>(other.stringFeatures.size());\n        for (Map.Entry<String, Set<String>> other_element : other.stringFeatures.entrySet()) {\n\n            String other_element_key = other_element.getKey();\n            Set<String> other_element_value = other_element.getValue();\n\n            String __this__stringFeatures_copy_key = other_element_key;\n\n            Set<String> __this__stringFeatures_copy_value = new HashSet<String>(other_element_value);\n\n            __this__stringFeatures.put(__this__stringFeatures_copy_key, __this__stringFeatures_copy_value);\n        }\n        this.stringFeatures = __this__stringFeatures;\n    }\n    if (other.isSetFloatFeatures()) {\n        Map<String,Map<String,Double>> __this__floatFeatures = new HashMap<String,Map<String,Double>>(other.floatFeatures.size());\n        for (Map.Entry<String, Map<String,Double>> other_element : other.floatFeatures.entrySet()) {\n\n            String other_element_key = other_element.getKey();\n            Map<String,Double> other_element_value = other_element.getValue();\n\n            String __this__floatFeatures_copy_key = other_element_key;\n\n            Map<String,Double> __this__floatFeatures_copy_value = new HashMap<String,Double>(other_element_value);\n\n            __this__floatFeatures.put(__this__floatFeatures_copy_key, __this__floatFeatures_copy_value);\n        }\n        this.floatFeatures = __this__floatFeatures;\n    }\n    if (other.isSetDenseFeatures()) {\n        Map<String,List<Double>> __this__denseFeatures = new HashMap<String,List<Double>>(other.denseFeatures.size());\n        for (Map.Entry<String, List<Double>> other_element : other.denseFeatures.entrySet()) {\n\n            String other_element_key = other_element.getKey();\n            List<Double> other_element_value = other_element.getValue();\n\n            String __this__denseFeatures_copy_key = other_element_key;\n\n            List<Double> __this__denseFeatures_copy_value = new ArrayList<Double>(other_element_value);\n\n            __this__denseFeatures.put(__this__denseFeatures_copy_key, __this__denseFeatures_copy_value);\n        }\n        this.denseFeatures = __this__denseFeatures;\n    }\n}", "path": "C-OCR/Recognition/main/java/Feature/FeatureVector.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// update  \u53bb\u9664\u566a\u58f0\u533a\u57df\uff0c\u5408\u5e76\u5185\u5305\u542b\u77e9\u5f62\n", "func_signal": "public static void  updateBinaryPoints(BinaryPointsEntity bp,int newStartIndex,int newEndIndex,int width,int height,double whMaxRadio,double whMinRadio,int dt,boolean isTie)", "code": "{\n\n    PointsCoreEntity pc = bp.getPointsCore();\n    List<PointEntity> points = bp.getPoints();\n    List<PointEntity> newPoints = new ArrayList<>();\n    if(points!=null && points.size()>0){\n        int pointsLen = newEndIndex-newStartIndex+1;\n        PointEntity pStart = points.get(newStartIndex);\n        int xLeftMin = pStart.getxLeft(),xRightMax = 0, maxWidth = 0,minWidth = pStart.getWidth();\n        int yTopMin =  pStart.getyTop(),yTopMax = 0,yButtonMin = pStart.getyButton(),yButtonMax = 0,maxHeight = 0,minHeight = pStart.getHeight();\n        double sumWidth = 0,sumHeight = 0;\n        double yTopSum = 0,yButtonSum = 0;\n        int goodWordCount = 0, inputGoodCount = pc.getGoodWordCount();\n        int goodYTopMin = pc.getGoodYTopMin(),goodYButtonMax = pc.getGoodYButtonMax();\n        int newGoodYTopMin = height, newGoodYButtonMax =0;\n        double goodSumWidth=0, goodSumHeight = 0,goodYTopSum=0,goodYButtonSum=0;\n        double spaceSum = 0,badSpaceSum =0;\n        int spaceCount = 0,badSpaceCount = 0;\n        int minSpace = width,maxSpace = 0;\n        double hAvg = pc.getAvgHeight();\n        double wAvg = pc.getAvgDiff();\n//            double radioAvg = hAvg>0 ? wAvg/hAvg:0;\n        double yTopAvg = pc.getyTopAvg();\n        double yButtonAvg = pc.getyButtonAvg();\n        if(pointsLen>=1){\n            for(int i =newStartIndex;i<=newEndIndex;i++){\n                PointEntity p = points.get(i);\n                int x1 = p.getxLeft(), x2 = p.getxRight();\n                int y1 =  p.getyTop(), y2 =  p.getyButton();\n                int w = p.getWidth(), h = p.getHeight();\n                double radio = p.getWhRadio();\n                int xr1 = 0, wr = 0, hr = 0,yr1 =0,yr2=0;\n                if(i+1<=newEndIndex){\n                    PointEntity pr = points.get(i+1);\n                    xr1 =  pr.getxLeft();\n                    wr = pr.getWidth();\n                    hr = pr.getHeight();\n                    yr1 = pr.getyTop();\n                    yr2 = pr.getyButton();\n                }\n                boolean isBadWidthOne  = w>5.08*hAvg && i+1<=newEndIndex && xr1<x1+2*hAvg && (y1>yr2 || y2<yr1);\n                boolean isBadWidthTwo = w>0.528*width  && h<0.568*height;\n                if(isBadWidthOne || isBadWidthTwo){\n                    continue;\n                }\n                boolean isBadStartOne = inputGoodCount> 0  && ((y1>goodYButtonMax || y2<goodYTopMin &&  h<0.528*hAvg) || ((y1>yButtonAvg || y2<yTopAvg) && h<0.368*hAvg  && xr1<=x2 ));\n                dt = Math.min(3,dt);\n                boolean isPoint = w*h<=dt*dt || ((w<1 || h<=1 ) && w*h<=dt*dt+dt ) || ( (w<=2*dt || h<=2*dt) &&  ((y1>yButtonAvg-0.1*hAvg && y2<yButtonAvg )|| (y2<yTopAvg-0.1*hAvg && y1>yTopAvg)) && w*h<3*dt*dt);\n                boolean isBadUpper = i+1<=newEndIndex && w*h<3*dt*dt && w<=dt && xr1-x2<=dt && wr>0.868*wAvg && hr>0.868*hAvg && yr1-y2>0.898*hAvg;\n                boolean isBadUpperOrLowerPoint = (y2<yTopAvg-0.138*hAvg || y1>yButtonAvg+0.138*hAvg) && (w*h<=4*dt*dt || w*h<7);\n                boolean isBadUpperOrLowerPointOne = (y2<yTopAvg-0.298*hAvg || y1>yButtonAvg+0.298*hAvg) && w*h<=9 && h<=3;\n                if(isBadStartOne || isPoint || isBadUpper || isBadUpperOrLowerPoint || isBadUpperOrLowerPointOne){\n                    continue;\n                }\n                int continueEnd = i;\n                // region x direction merge\n                List<PointEntity> overlappingList = new ArrayList<>();\n                if(i+1<=newEndIndex){\n                    continueEnd = findXMaxOverlapping(points,i,newEndIndex,x2,wAvg);\n                    overlappingList = overlappingAreaRecut(points,newPoints,i, continueEnd, newEndIndex, yTopAvg, yButtonAvg, hAvg, wAvg, goodYTopMin, goodYButtonMax,6);\n                }else {\n                    overlappingList.add(p);\n                }\n                // endregion\n                if(overlappingList.size()<1){\n                    i = continueEnd;\n                    continue;\n                }\n                // region add overlapping info\n                boolean isCheck = true;\n                for(int k =0;k<overlappingList.size();k++){\n                    PointEntity item = overlappingList.get(k);\n                    x1 = item.getxLeft(); x2 = item.getxRight();y1 = item.getyTop();y2= item.getyButton();\n                    radio = item.getWhRadio();h = item.getHeight();w = item.getWidth();\n                    // region y check\n                    if( isTie && (h<1.08*hAvg || (h<hAvg+1 && h<1.126*hAvg)) ){\n                        if(h<0.658*hAvg){\n                            y1 = Math.max(0,y1-(int)Math.round(0.628*(y1-goodYTopMin)));\n                            y2 = Math.min(height-1,y2+ (int) Math.round(0.628*(goodYButtonMax-y2)));\n                        }else if(h>=1.08*hAvg){\n                            y1 = Math.max(0,y1-1);\n                        } else{\n                            y1 = Math.max(0,y1-3);\n                            y2 = Math.min(y2+3,height-1);\n                        }\n                        h = y2-y1+1;\n                        item.setyTop(y1);\n                        item.setyButton(y2);\n                        item.setHeight(h);\n                        isCheck = false;\n                    }\n                    // endregion\n                    if(k+1<overlappingList.size()){\n                        xr1 =  overlappingList.get(k+1).getxLeft();\n                    }\n                    int tempRightSpace = xr1 - x2+1;\n                    int spaceDiff = 0;\n                    if(newPoints.size()>0){\n                        PointEntity pl = newPoints.get(newPoints.size()-1);\n                        int xl2 = pl.getxRight();\n                        // region x check\n                        if( isTie &&  w<0.708*wAvg ){\n                            if(tempRightSpace>0.398*wAvg && spaceDiff>0.398*wAvg){\n                                isCheck = false;\n                                if(w<6 && tempRightSpace>(6-w)/2){\n                                    int temp = (int) Math.round((6-w)*0.5);\n                                    x1 = x1-temp;\n                                    x2 = x2+temp;\n                                }else {\n                                    x2 = x2+Math.max(1,(int)Math.round(0.198*tempRightSpace));\n                                    x1 = x1-Math.max(1,(int)Math.round(0.198*spaceDiff));\n                                }\n                                w= x2-x1+1;\n                                item.setxLeft(x1);\n                                item.setxRight(x2);\n                                item.setWidth(w);\n                            } else if(tempRightSpace>0.398*wAvg && tempRightSpace>spaceDiff){\n                                isCheck = false;\n                                x2 = x2+Math.max(1,(int)Math.round(0.298*tempRightSpace));\n                                w= x2-x1+1;\n                                if(w<6 && tempRightSpace>0.568*wAvg){\n                                    if(spaceDiff>6-w){\n                                        x1 = x1-6+w;\n                                    }else{\n                                        x2 = x2+6-w;\n                                    }\n                                    w= x2-x1+1;\n                                }\n                                item.setxRight(x2);\n                                item.setWidth(w);\n                            }else if(spaceDiff>0.398*wAvg){\n                                isCheck = false;\n                                x1 = x1-Math.max(1,(int)Math.round(0.328*spaceDiff));\n                                w = x2-x1+1;\n                                if(w<6 && spaceDiff>0.568*wAvg ){\n                                    if(x2+6-w<width){\n                                        x2 = x2+6-w;\n                                        item.setxRight(x2);\n                                    }else {\n                                        x1 = x1-6+w;\n                                    }\n                                    w = x2-x1+1;\n                                }\n                                item.setxLeft(x1);\n                                item.setWidth(w);\n                            }\n                        }\n                        // endregion\n                        spaceDiff = x1-xl2-1;\n                        minSpace = Math.min(minSpace,spaceDiff);\n                        maxSpace = Math.max(maxSpace,spaceDiff);\n                        if(spaceDiff>0 && spaceDiff<0.5*(wAvg+hAvg)){\n                            spaceSum += spaceDiff;\n                            spaceCount++;\n                        }else {\n                            badSpaceSum++;\n                            badSpaceCount++;\n                        }\n                    }\n                    radio = (double)w/h;\n                    item.setWhRadio(radio);\n                    xLeftMin = Math.min(xLeftMin,x1);\n                    xRightMax = Math.max(xRightMax,x2);\n                    yTopMin = Math.min(yTopMin,y1);\n                    yTopMax = Math.max(yTopMax,y1);\n                    yButtonMax = Math.max(yButtonMax,y2);\n                    yButtonMin = Math.min(yButtonMin,y2);\n                    maxWidth = Math.max(maxWidth,w);\n                    minWidth = Math.min(minWidth,w);\n                    maxHeight = Math.max(maxHeight,h);\n                    minHeight = Math.min(minHeight,h);\n                    boolean isGood = (h>0.469*hAvg && hAvg>0 || (h>0.1*height && hAvg<=0));\n                    if(radio<whMaxRadio && radio>whMinRadio && isGood ){\n                        newGoodYTopMin = Math.min(newGoodYTopMin,y1);\n                        newGoodYButtonMax = Math.max(newGoodYButtonMax,y2);\n                        goodSumWidth += w;\n                        goodSumHeight +=h;\n                        goodYTopSum +=y1;\n                        goodYButtonSum +=y2;\n                        goodWordCount++;\n                        boolean isGoodPoint = isCheck && Math.abs(h-hAvg)<0.178*hAvg && Math.abs(w-wAvg)<0.178*wAvg && spaceDiff>=0.168*wAvg && spaceDiff<0.419*wAvg;\n                        item.setGood(isGoodPoint);\n                    }\n\n                    sumHeight += h;\n                    sumWidth += w;\n                    yTopSum += y1;\n                    yButtonSum += y2;\n                    newPoints.add(item);\n                }\n                // endregion\n                i = continueEnd;\n            }\n\n            // region get core info\n            hAvg = sumHeight/pointsLen;\n            wAvg = sumWidth/pointsLen;\n            yTopAvg = yTopSum/pointsLen;\n            yButtonAvg = yButtonSum/pointsLen;\n            double spaceAvg =1;\n            if(spaceCount>0){\n                spaceAvg = spaceSum/spaceCount;\n            }else if(badSpaceCount>0){\n                spaceAvg = badSpaceSum/badSpaceCount;\n            }\n            pointsLen = newPoints.size();\n            if(goodWordCount>0){\n                hAvg = goodSumHeight/goodWordCount;\n                wAvg = goodSumWidth/goodWordCount;\n                yTopAvg = goodYTopSum/goodWordCount;\n                yButtonAvg = goodYButtonSum/goodWordCount;\n            }\n            else if( pointsLen>5 ){\n                hAvg = (sumHeight-minHeight-maxHeight)/(pointsLen-2);\n                wAvg =  (sumWidth-minWidth-maxWidth)/(pointsLen-2);\n                yTopAvg = (yTopSum-yTopMin-yTopMax)/(pointsLen-2);\n                yButtonAvg = (yButtonSum-yButtonMax - yButtonMin)/(pointsLen-2);\n            }\n            // endregion\n            pc = new PointsCoreEntity(pointsLen,spaceCount, maxWidth, minWidth,wAvg, spaceAvg,maxSpace,minSpace,badSpaceCount,badSpaceSum, xLeftMin, xRightMax, hAvg,\n                    yTopAvg, yButtonAvg, yTopMin, yButtonMax, goodWordCount, sumWidth, sumHeight, minHeight, maxHeight,newGoodYTopMin,newGoodYButtonMax,false);\n        }\n    }\n    bp.setPoints(newPoints);\n    bp.setPointsCore(pc);\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// \u6c42\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u70b9\n", "func_signal": "public static int[] preSeparation(int[] bwProjection, int start, int end, int dt)", "code": "{\n    int[] result = new int[] { start, end };\n    int len = end - start + 1;\n    boolean fistFlag = true;\n    boolean lastFlag = true;\n    if (len >= 6)\n    {\n        int firstSum = bwProjection[start];\n        int secondSum = bwProjection[start+1];\n        int threeSum = bwProjection[start+2];\n        int fourSum = 0;\n        int fiveSum = 0;\n\n        int lastfirstSum = bwProjection[end];\n        int lastsecondSum = bwProjection[end-1];\n        int lastthreeSum = bwProjection[end-2];\n        int lastfourSum = 0;\n        int lastfiveSum = 0;\n        int th = dt - 1;\n        if (th < 0)\n        {\n            th = 0;\n        }\n\n        boolean blOne = firstSum > dt && secondSum >= dt && threeSum >= th && (secondSum>0 || firstSum>=5);\n\n        boolean blTwo = lastfirstSum > dt && lastsecondSum >= dt && lastthreeSum >= th && (lastsecondSum>0 && lastfirstSum>=5);\n\n        int k = 0;\n        for (int i = start; i <=end; i++)\n        {\n            if (bwProjection[i] > 0 && fistFlag)\n            {\n                if (blOne && i<=2)\n                {\n                    result[0] = 0;\n                    fistFlag = false;\n                }\n                else if(i+4<len-1)\n                {\n                    firstSum = bwProjection[i];\n                    secondSum = bwProjection[i + 1];\n                    threeSum = bwProjection[i + 2];\n                    fourSum = bwProjection[i + 3];\n                    fiveSum = bwProjection[i + 4];\n                    boolean bone = firstSum >= dt && secondSum >= 1 && threeSum >= 1 && fourSum >= 1 && fiveSum >= 1;\n                    boolean btwo = firstSum >= dt + 6 && secondSum >= dt + 6;\n                    boolean bthree = firstSum >= dt && secondSum >= dt && threeSum >=dt && secondSum>0;\n                    boolean bfour = firstSum > dt && secondSum >= dt && threeSum >= th && secondSum>0;\n                    boolean bfive = firstSum > dt && secondSum>=dt && i>5;\n                    boolean bsix = i > len / 3 && bwProjection[i] > 0 && i+1<end && bwProjection[i+1] > 0;\n                    boolean bseven = Math.min(firstSum,secondSum)>0 && Math.max(firstSum,secondSum)>9 && Math.max(firstSum,secondSum)>6*dt;\n                    if (bone || btwo || bthree || bfour || bfive || bsix || bseven)\n                    {\n                        result[0] = i;\n                        fistFlag = false;\n                    }\n                }else if(i+4>=len-1 && i+1<=len-1){\n                    if(bwProjection[i] > 0){\n                        result[0] = i;\n                        fistFlag = false;\n                    }\n                }\n\n            }\n            if ((bwProjection[end - k] >0) && lastFlag)\n            {\n\n                if (blTwo && k <= 2)\n                {\n                    result[1] = end - k;\n                    lastFlag = false;\n                }\n                else if (i + 4 <= len - 1)\n                {\n                    lastfirstSum = bwProjection[end - k];\n                    lastsecondSum = bwProjection[end - k-1];\n                    lastthreeSum = bwProjection[end - k - 2];\n                    lastfourSum = bwProjection[end - k - 3];\n                    lastfiveSum = bwProjection[end - k-4];\n                    boolean bone = lastfirstSum >= dt && lastsecondSum >= 1 && lastthreeSum >= 1 && lastfourSum >= 1 && lastfiveSum >= 1;\n                    boolean btwo = lastfirstSum >= dt + 6 && lastsecondSum >= dt + 6;\n                    boolean bthree = lastfirstSum >= dt && lastsecondSum >= dt && lastthreeSum >= dt && lastsecondSum>0;\n                    boolean bfour = lastfirstSum > dt && lastsecondSum >= dt && lastthreeSum >= th  && lastsecondSum>0;\n                    boolean bfive = lastfirstSum > dt && lastsecondSum >= dt && k > 5;\n                    boolean bsix = k > len / 3 && bwProjection[end-k] > 0 && end - k - 1 > 0 && bwProjection[end - k-1] > 0;\n                    boolean bseven =  Math.min(lastfirstSum,lastsecondSum)>0 && Math.max(lastfirstSum,lastsecondSum)>9 && Math.max(lastfirstSum,lastsecondSum)>6*dt;\n                    if (bone || btwo || bthree || bfour || bfive || bsix || bseven)\n                    {\n                        result[1] = end - k;\n                        lastFlag = false;\n                    }\n                }else if(i+4>len-1 && i+2<=len-1){\n                    if(bwProjection[end-k] > 0){\n                        result[1] = end - k;\n                        lastFlag = false;\n                    }\n                }\n\n            }\n            k++;\n            if (!lastFlag && !fistFlag) break;\n\n        }\n    }\n    return result;\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// find min result\n", "func_signal": "public static int[] findMinSepatation(int[] bwProjection, int start, int end,int height)", "code": "{\n    int[] result = new int[] { end, height };\n\n    if (bwProjection != null && bwProjection.length > 3)\n    {\n        int min = end;\n        int minTwo = 4 * height;\n        int tempMin = height;\n        int minIndex = start;\n        int len = bwProjection.length;\n        if (end >= len)\n        {\n            end = len - 1;\n        }\n        for (int i = start; i <= end; i++)\n        {\n            if (i <= end - 3 && end - 3 >= 0)\n            {\n                tempMin = bwProjection[i] + bwProjection[i + 1] + bwProjection[i + 2] + bwProjection[i + 3];\n            }\n            if (tempMin < minTwo && i < end - 4)\n            {\n                minTwo = tempMin;\n                min = bwProjection[i];\n                minIndex = i;\n                for (int j = 1; j < 4; j++)\n                {\n                    if (bwProjection[i + j] <= min)\n                    {\n                        min = bwProjection[i + j];\n                        minIndex = i + j;\n                    }\n                }\n\n            }\n        }\n\n        result[0] = minIndex;\n        result[1] = min;\n    }\n\n    return result;\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u50cf\u4e8c\u503c\u7279\u5f81byte[]\n */\n", "func_signal": "public static  byte[]  getBinaryByteArr(Mat binaryImg)", "code": "{\n    int h =binaryImg.rows();\n    int w = binaryImg.cols();\n    int[][] bp01Int = new int[h][w];\n    int flag = 0;\n    int count = 0;\n    StringBuilder letterImgSb = new StringBuilder();\n    StringBuilder sb = new StringBuilder();\n    byte[] letterimage = new byte[h*w/8];\n    for(int i=0;i<h;i++){\n        for(int j=0;j<w;j++){\n            if(binaryImg.get(i,j)[0] == 0xff) {\n                bp01Int[i][j] = 0;\n                sb.append(0);\n            }\n            else{\n                bp01Int[i][j] = 1;\n                sb.append(1);\n            }\n            letterimage[flag] = (byte)((letterimage[flag] << 1) + bp01Int[i][j] );\n            count++;\n            if (count == 8)\n            {\n                int val =  (int)letterimage[flag] ;\n                letterImgSb.append(val).append(\" \");\n                flag++;\n                count = 0;\n            }\n        }\n        sb.append(\"\\n\");\n    }\n\n    return letterimage;\n}", "path": "C-OCR/Recognition/main/java/compare/XorCompare.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n * \u56fe\u83b7\u53d6\u56fe\u50cf\u4e8c\u503c\u56fe\u50cf\n */\n", "func_signal": "public static Mat getBinaryImg(Mat img, int width, int height)", "code": "{\n    Imgproc.resize(img,img,new Size(width,height));\n    Mat binaryImg = img.clone();\n    Mat binaryImg1 = img.clone();\n    Imgproc.cvtColor(img,binaryImg,Imgproc.COLOR_RGB2GRAY);\n    int h = img.height();\n    if(img.height() % 2 !=1){\n        h = img.height() - 1;\n    }\n    int w = img.width();\n    if(img.width()%2 !=1){\n        w= img.width()-1;\n    }\n    int blockSize = Math.max(w,h);\n    double stdevVal = (double) blockSize / 6;\n    Imgproc.adaptiveThreshold(binaryImg,binaryImg1,255,Imgproc.ADAPTIVE_THRESH_MEAN_C,Imgproc.THRESH_BINARY_INV,blockSize,stdevVal);\n    return binaryImg1;\n}", "path": "C-OCR/Recognition/main/java/compare/XorCompare.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n    if (field == null) {\n        throw new IllegalArgumentException();\n    }\n\n    switch (field) {\n        case STRING_FEATURES:\n            return isSetStringFeatures();\n        case FLOAT_FEATURES:\n            return isSetFloatFeatures();\n        case DENSE_FEATURES:\n            return isSetDenseFeatures();\n    }\n    throw new IllegalStateException();\n}", "path": "C-OCR/Recognition/main/java/Feature/FeatureVector.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// \u83b7\u53d6X\u65b9\u5411\u91cd\u53e0\u533a\u57df\u6700\u5927\u70b9\n", "func_signal": "public static int findXMaxOverlapping(List<PointEntity> points, int startIndex, int newEndIndex, int xt2,double wAvg )", "code": "{\n\n    int result = startIndex;\n    for(int j = startIndex+1;j<=newEndIndex;j++){\n        PointEntity pt = points.get(j);\n        int w = pt.getWidth();\n        double whRadio = pt.getWhRadio();\n        int xt1 = pt.getxLeft();\n        int offset =1;\n        if(xt1-xt2<=3 && whRadio<0.598 && w<wAvg && wAvg>3.98*(xt1-xt2)){\n            offset =2;\n        }\n        if(xt1>xt2+offset){\n            break;\n        }\n        int rtx2 = pt.getxRight();\n        xt2 = Math.max(rtx2,xt2);\n        result = j;\n    }\n    return result;\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// Returns a 'binary string' (like. 001010111011100010) which is easy to do\n// a hamming distance on.\n", "func_signal": "public String getHash(InputStream is) throws Exception", "code": "{\n    BufferedImage img = ImageIO.read(is);\n\n    /*\n     * 1. Reduce size. Like Average Hash, pHash starts with a small image.\n     * However, the image is larger than 8x8; 32x32 is a good size. This is\n     * really done to simplify the DCT computation and not because it is\n     * needed to reduce the high frequencies.\n     */\n    img = resize(img, size, size);\n\n    /*\n     * 2. Reduce color. The image is reduced to a grayscale just to further\n     * simplify the number of computations.\n     */\n    img = grayscale(img);\n\n    double[][] vals = new double[size][size];\n\n    for (int x = 0; x < img.getWidth(); x++) {\n        for (int y = 0; y < img.getHeight(); y++) {\n            vals[x][y] = getBlue(img, x, y);\n        }\n    }\n\n    /*\n     * 3. Compute the DCT. The DCT separates the image into a collection of\n     * frequencies and scalars. While JPEG uses an 8x8 DCT, this algorithm\n     * uses a 32x32 DCT.\n     */\n    long start = System.currentTimeMillis();\n    double[][] dctVals = applyDCT(vals);\n    System.out.println(\"DCT: \" + (System.currentTimeMillis() - start));\n\n    /*\n     * 4. Reduce the DCT. This is the magic step. While the DCT is 32x32,\n     * just keep the top-left 8x8. Those represent the lowest frequencies in\n     * the picture.\n     */\n    /*\n     * 5. Compute the average value. Like the Average Hash, compute the mean\n     * DCT value (using only the 8x8 DCT low-frequency values and excluding\n     * the first term since the DC coefficient can be significantly\n     * different from the other values and will throw off the average).\n     */\n    double total = 0;\n\n    for (int x = 0; x < smallerSize; x++) {\n        for (int y = 0; y < smallerSize; y++) {\n            total += dctVals[x][y];\n        }\n    }\n    total -= dctVals[0][0];\n\n    double avg = total / (double) ((smallerSize * smallerSize) - 1);\n\n    /*\n     * 6. Further reduce the DCT. This is the magic step. Set the 64 hash\n     * bits to 0 or 1 depending on whether each of the 64 DCT values is\n     * above or below the average value. The result doesn't tell us the\n     * actual low frequencies; it just tells us the very-rough relative\n     * scale of the frequencies to the mean. The result will not vary as\n     * long as the overall structure of the image remains the same; this can\n     * survive gamma and color histogram adjustments without a problem.\n     */\n    String hash = \"\";\n\n    for (int x = 0; x < smallerSize; x++) {\n        for (int y = 0; y < smallerSize; y++) {\n            if (x != 0 && y != 0) {\n                hash += (dctVals[x][y] > avg ? \"1\" : \"0\");\n            }\n        }\n    }\n\n    return hash;\n}", "path": "C-OCR/Recognition/main/java/compare/HanmiCompare.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n * \u83b7\u53d6\u8fb9\u7f18\u8f6e\u5ed3\u4fe1\u606f\n *\n * @param origin \u539f\u56fe\n * @return \u8fb9\u7f18\u63d0\u53d6\u7ed3\u679c\n */\n", "func_signal": "public static LogParameter logEdge(Mat origin )throws Exception", "code": "{\n    double log_white_sum = 0;\n    double [][] kernel = new double[][]{{5.57299566975e-05,0.000100511394989,0.000200890689778,0.000368574223248,0.000573337079345,0.000744509718837,0.000811157771381,0.000744509718837,0.000573337079345,0.000368574223248,0.000200890689778,0.000100511394989,5.57299566975e-05},{0.000100511394989,0.000238089107237,0.000525021356347,0.000960218526853,0.00143059145259,0.00177523254835,0.0018973159046,0.00177523254835,0.00143059145259,0.000960218526853,0.000525021356347,0.000238089107237,0.000100511394989},{0.000200890689778,0.000525021356347,0.00113142495554,0.0018973159046,0.00249061698669,0.00271458056651,0.00273398136096,0.00271458056651,0.00249061698669,0.0018973159046,0.00113142495554,0.000525021356347,0.000200890689778},{0.000368574223248,0.000960218526853,0.0018973159046,0.00266248877795,0.0024894667083,0.00146392942387,0.000845048980312,0.00146392942387,0.0024894667083,0.00266248877795,0.0018973159046,0.000960218526853,0.000368574223248},{0.000573337079345,0.00143059145259,0.00249061698669,0.0024894667083,3.60483852992e-05,-0.00396540108172,-0.00600959997947,-0.00396540108172,3.60483852992e-05,0.0024894667083,0.00249061698669,0.00143059145259,0.000573337079345},{0.000744509718837,0.00177523254835,0.00271458056651,0.00146392942387,-0.00396540108172,-0.0116081008558,-0.0153575929312,-0.0116081008558,-0.00396540108172,0.00146392942387,0.00271458056651,0.00177523254835,0.000744509718837},{0.000811157771381,0.0018973159046,0.00273398136096,0.000845048980312,-0.00600959997947,-0.0153575929312,-0.019899129723,-0.0153575929312,-0.00600959997947,0.000845048980312,0.00273398136096,0.0018973159046,0.000811157771381},{0.000744509718837,0.00177523254835,0.00271458056651,0.00146392942387,-0.00396540108172,-0.0116081008558,-0.0153575929312,-0.0116081008558,-0.00396540108172,0.00146392942387,0.00271458056651,0.00177523254835,0.000744509718837},{0.000573337079345,0.00143059145259,0.00249061698669,0.0024894667083,3.60483852992e-05,-0.00396540108172,-0.00600959997947,-0.00396540108172,3.60483852992e-05,0.0024894667083,0.00249061698669,0.00143059145259,0.000573337079345},{0.000368574223248,0.000960218526853,0.0018973159046,0.00266248877795,0.0024894667083,0.00146392942387,0.000845048980312,0.00146392942387,0.0024894667083,0.00266248877795,0.0018973159046,0.000960218526853,0.000368574223248},{0.000200890689778,0.000525021356347,0.00113142495554,0.0018973159046,0.00249061698669,0.00271458056651,0.00273398136096,0.00271458056651,0.00249061698669,0.0018973159046,0.00113142495554,0.000525021356347,0.000200890689778},{0.000100511394989,0.000238089107237,0.000525021356347,0.000960218526853,0.00143059145259,0.00177523254835,0.0018973159046,0.00177523254835,0.00143059145259,0.000960218526853,0.000525021356347,0.000238089107237,0.000100511394989},{5.57299566975e-05,0.000100511394989,0.000200890689778,0.000368574223248,0.000573337079345,0.000744509718837,0.000811157771381,0.000744509718837,0.000573337079345,0.000368574223248,0.000200890689778,0.000100511394989,5.57299566975e-05}};\n    //        Mat origin = Imgcodecs.imread(\"D:\\\\ocr\\\\cccNew\\\\3.png\");\n    Imgproc.cvtColor(origin,origin,Imgproc.COLOR_RGB2GRAY);\n    //        Mat gray = Mat.zeros(origin.size(),CV_8UC1);\n    Mat filter = Mat.zeros(origin.size(),CV_32F);\n    int K = 13,half = 6;\n    double thre = 0.012;\n    for(int i = 0;i < origin.rows();i++){\n        for(int j = 0;j < origin.cols();j++){\n            double sum = 0;\n            for(int l = -half;l <= half;l++){\n                for(int m = -half;m <= half;m++){\n                    int y = l + i,x = m + j;\n                    if(y < 0){\n                        y = 0;\n                    }else if(y > origin.rows() - 1){\n                        y = origin.rows() - 1;\n                    }\n                    if(x < 0){\n                        x = 0;\n                    }else if(x > origin.cols() - 1){\n                        x = origin.cols() - 1;\n                    }\n                    sum += origin.get(y,x)[0]*kernel[l+half][m+half];\n                }\n            }\n            filter.put(i,j,sum/255);\n        }\n    }\n    Mat log = Mat.zeros(filter.size(),CV_8UC1);\n    for(int i = 1;i < filter.rows() - 1;i++){\n        for(int j = 1;j < filter.cols() - 1;j++){\n            if(Math.abs(filter.get(i,j)[0]-filter.get(i,j+1)[0]) > thre && filter.get(i,j)[0]*filter.get(i,j+1)[0] < 0){\n                log.put(i,j,0xff);\n            }\n            if(Math.abs(filter.get(i,j)[0]-filter.get(i+1,j)[0]) > thre && filter.get(i,j)[0]*filter.get(i+1,j)[0] < 0){\n                log.put(i,j,0xff);\n            }\n        }\n    }\n    for(int i = 0;i < filter.rows();i++){\n        for(int j = 0;j < filter.cols();j++){\n            if(log.get(i,j)[0] == 0){\n                if(j > 0 && j < filter.cols() - 1 && Math.abs(filter.get(i,j-1)[0]-filter.get(i,j+1)[0]) > 2* thre &&\n                        filter.get(i,j-1)[0]*filter.get(i,j+1)[0] < 0){\n                    log.put(i,j,0xff);\n                }\n                if(i > 0 && i < filter.rows() - 1 && Math.abs(filter.get(i+1,j)[0]-filter.get(i-1,j)[0]) > 2* thre &&\n                        filter.get(i-1,j)[0]*filter.get(i+1,j)[0] < 0){\n                    log.put(i,j,0xff);\n                }\n            }\n        }\n    }\n    LogParameter logParameter = getLogWhiteSum(log);\n    return logParameter;\n}", "path": "C-OCR/RefuseRecognition/main/java/util/RejectUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n * \u83b7\u53d6\u4e8c\u503c\u5316\u7ed3\u679c\n *\n * @param origin \u539f\u56fe\n * @return \u4e8c\u503c\u5316\u56fe\n */\n", "func_signal": "public static Mat getGray(Mat origin,int h,int w)", "code": "{\n\n    Mat gray = Mat.zeros(origin.size(),CV_8UC1);\n    for(int i = 0;i < h;i++) {\n        for (int j = 0; j < w; j++) {\n            double [] bgr = origin.get(i,j);\n            gray.put(i,j,0.2989 * bgr[2] + 0.5870 * bgr[1] + 0.1140 * bgr[0]);\n        }\n    }\n    return gray;\n\n}", "path": "C-OCR/RefuseRecognition/main/java/util/RejectUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// \u6839\u636e\u4e8c\u503c\u5316\u5206\u9694\n", "func_signal": "public static SeparationPointEntity separaionByBinary(BinaryProjectionEntity projection, int start, int end, int dt, double stdAvg, int maxXorY, String type, boolean isXProjection)", "code": "{\n\n    SeparationPointEntity sp = new SeparationPointEntity();\n\n    List<PointLocationEntity> list = new ArrayList<>();\n    List<Integer> listDiff = new ArrayList<>();\n    PointLocationEntity pointLocation = new PointLocationEntity();\n    int[] bwProjection;\n    if(isXProjection){\n        bwProjection = projection.bwProjectionX;\n    } else {\n        bwProjection = projection.bwProjectionY;\n    }\n\n    pointLocation.isLeft = true;\n    pointLocation.pointLocation = start;\n    list.add(pointLocation);\n    int diff = 0;\n    int brightSum = 0;\n    double whiteLen = 0;\n    double blackLen = 0;\n    int whiteCout = 0;\n    int blackCout = 0;\n    int bwLen = bwProjection.length;\n    if (bwLen == end)\n    {\n        end = end - 1;\n    }\n    int maxDiff = 0;\n    int minDiff = end - start + 1;\n    int maxDiffEndIndex = 0;\n    int minDiffEndIndex = end;\n    int maxBalckDiff = 0;\n    int maxBlackDiffIndex = 0;\n    int minBalckDiff =end - start + 1;\n    int minBlackDiffIndex = 0;\n\n    double whiteSum = 0;\n\n    int k=0;\n    for (int i = start + 1; i <= end; i++)\n    {\n        brightSum = brightSum + bwProjection[i];\n\n\n        boolean right = false;\n        boolean left = false;\n\n        if (i + 1 <= end && end < bwLen)\n        {\n            left = (bwProjection[i] <= 2 && bwProjection[i + 1] > 2 && i >= dt + start + 1 && i < end - dt - 1);\n            right = (bwProjection[i + 1] <= 2 && bwProjection[i] > 2 && i >= dt + start + 1 && i < end - dt - 1);\n        }\n        else if (i == end)\n        {\n            right = bwProjection[end] > 0 && bwProjection[end - 1] > 0;\n        }\n        int listCount = list.size();\n        if ( listCount>=1 && (left && !list.get(listCount-1).isLeft) || (right && list.get(listCount-1).isLeft))\n        {\n            k = k + 1;\n            pointLocation = new PointLocationEntity();\n\n            if (left)\n            {\n                pointLocation.pointLocation = i + 1;\n\n            }\n            else\n            {\n                pointLocation.pointLocation = i;\n            }\n\n            pointLocation.isLeft = left;\n            list.add(pointLocation);\n\n            if ( k > 0 && list.size() > 1 && k < list.size())\n            {\n                diff = list.get(k).pointLocation -  list.get(k-1).pointLocation + 1;\n                if (list.get(k).isLeft && k > 1)\n                {\n                    diff = diff - 2;\n                    blackLen = blackLen + diff;\n                    blackCout += 1;\n                    if ( diff > maxBalckDiff)\n                    {\n                        maxBalckDiff = diff;\n                        maxBlackDiffIndex = k;\n                    }\n                    if(diff<minBalckDiff){\n                        minBalckDiff = diff;\n                        minBlackDiffIndex = k;\n                    }\n                }else if(!list.get(k).isLeft){\n                    whiteLen = whiteLen + diff;\n                    whiteCout += 1;\n                    whiteSum = whiteSum + diff;\n                    listDiff.add(diff);\n                    if (diff >= maxDiff )\n                    {\n                        maxDiff = diff;\n                        maxDiffEndIndex = k;\n                    }\n                    if (diff < minDiff)\n                    {\n                        minDiff = diff;\n                        minDiffEndIndex = k;\n                    }\n                }\n            }\n\n        }\n    }\n\n    sp.binaryProjection = projection;\n    sp.pointLocations = list;\n    sp.listDiff = listDiff;\n    sp.brightSum = brightSum;\n    sp.whiteCount = whiteCout;\n    sp.whiteLen = whiteLen;\n    sp.blackCount  = blackCout;\n    sp.blackLen = blackLen;\n    sp.maxDiff = maxDiff;\n    sp.maxDiffEndIndex = maxDiffEndIndex;\n    sp.minDiff = minDiff;\n    sp.minDiffEndIndex = minDiffEndIndex;\n    sp.blackMaxDiff = maxBalckDiff;\n    sp.blackMaxDiffEndIndex = maxBlackDiffIndex;\n    sp.blackMinDiff = minBalckDiff;\n    sp.blackMinDiffEndIndex = minBlackDiffIndex;\n\n    return sp;\n\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// get best bw\n", "func_signal": "public static Mat getBestBinary(Mat origin,double bwRadio,Point offset, double whMaxRadio, double whMinRadio,boolean isNo, int minArea)", "code": "{\n\n    Mat bw = BinaryUtil.otsuNew(origin);\n    BinaryPointsEntity bp =   ContoursUtil.getBinaryBaseInfoByFindContours(bw, Imgproc.RETR_EXTERNAL , Imgproc.CHAIN_APPROX_SIMPLE, offset, whMaxRadio, whMinRadio,minArea);\n    boolean isGood = isGoodBinary(bp,isNo);\n    if(!isGood){\n        bw = BinaryUtil.getBinaryImg(origin,bwRadio);\n    }\n    return bw;\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// get bounding points\n", "func_signal": "public static BinaryPointsEntity getBoundingPoints(Mat origin, Point offset, double whMaxRadio, double whMinRadio, int dtX, boolean isTie,boolean isNo,int minArea)", "code": "{\n\n    BinaryPointsEntity bp = new BinaryPointsEntity();\n    int width = origin.width();\n    int height = origin.height();\n    double radio = (double) width/(height);\n    double bwRadio =getBwRadio(radio);\n    Mat bw = getBestBinary( origin, bwRadio,offset,  whMaxRadio,  whMinRadio,isNo,minArea);\n    // \u4e2d\u503c\u6ee4\u6ce2\n    Imgproc.medianBlur(bw,bw,3);\n    bp =   ContoursUtil.getBinaryBaseInfoByFindContours(bw, Imgproc.RETR_EXTERNAL , Imgproc.CHAIN_APPROX_SIMPLE, offset, whMaxRadio, whMinRadio,minArea);\n    List<PointEntity> points = bp.getPoints();\n    points = SortUtil.reorder(points,true,false);\n    if(points.size()>1){\n        bp.setPoints(points);\n        updateBinaryPoints( bp,0, points.size()-1,width,height, whMaxRadio, whMinRadio,dtX,isTie);\n    }\n    if(bp!=null){\n        bp.setImage(origin);\n    }\n    return bp;\n\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// get binary info\n", "func_signal": "public static BinaryPointsEntity getBinaryInfo(Mat sub, double whMaxRadio, double whMinRadio, int dtX, boolean isNo,int minArea)", "code": "{\n\n    BinaryPointsEntity bp = null;\n    if(sub!=null && sub.height()>0){\n        bp = SeparationUtil.getBoundingPoints(sub,new Point(0,0),whMaxRadio, whMinRadio,dtX,false,isNo, minArea);\n        bp.setImage(sub);\n    }\n    return bp;\n}", "path": "C-OCR/Common/src/main/java/util/LayoutAnalysisUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// \u83b7\u53d6x\u548c\u4e5f\u65b9\u5411\u6295\u5f71\u5e76\u7ed1\u7d27\u56fe\u50cf\n", "func_signal": "public static BinaryProjectionEntity getProjection(Mat origin,int dtX,int dtY)", "code": "{\n    BinaryProjectionEntity binaryProjection = new BinaryProjectionEntity();\n\n    int width = origin.width();\n    int height = origin.height();\n    double radio = (double) width/(height);\n    Mat bw = BinaryUtil.otsuNew(origin);\n//        if(radio<8.568){\n//            bw = otsu(origin);\n//        } else{\n//            bw = sauvola(origin);\n//        }\n    // \u4e2d\u503c\u6ee4\u6ce2\n    Imgproc.medianBlur(bw,bw,3);\n\n    int xStart = 0;\n    int xEnd = width - 1;\n    int yStart = 0;\n    int yEnd = height - 1;\n    int[] bwProjectionY = binaryProjection(bw, 0, width, 0, height, false,0xff);\n    int[] bwProjectionX = binaryProjection(bw, 0, width, 0, height, true,0xff);\n    // \u521d\u6b65\u6c42\u51fa\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u5206\u9694\u70b9\n    int[] preCutY = preSeparation(bwProjectionY, yStart, yEnd, dtY);\n    int[] preCutX = preSeparation(bwProjectionX, xStart, xEnd, dtX);\n    if (preCutX != null && preCutX.length == 2)\n    {\n        xStart = preCutX[0];\n        xEnd = preCutX[1];\n    }\n    if (preCutY != null && preCutY.length == 2)\n    {\n        yStart = preCutY[0];\n        yEnd = preCutY[1];\n    }\n\n    int newWidth = xEnd - xStart + 1;\n    int newHeight = yEnd - yStart + 1;\n\n    PointResultEntity pointResult = new PointResultEntity();\n    pointResult.xStart = xStart;\n    pointResult.xEnd = xEnd;\n    pointResult.yStart = yStart;\n    pointResult.yEnd = yEnd;\n    pointResult.width = newWidth;\n    pointResult.height = newHeight;\n\n    binaryProjection.pointResult = pointResult;\n    binaryProjection.bwProjectionX = bwProjectionX;\n    binaryProjection.bwProjectionY = bwProjectionY;\n    binaryProjection.bwImage = bw;\n\n    return binaryProjection;\n\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n *\u5f02\u6216\u6bd4\u8f83\n * java \u7a0b\u5e8f\u4f5c\u51fa\u7684byte\u6570\u636e\u548cC#\u91cc\u9762\u7684 \u6a21\u677f \u8fdb\u884c \u6bd4\u8f83\u4f1a\u6709\u95ee\u9898\n * java\u91cc\u4e00\u4e2abyte\u53d6\u503c\u8303\u56f4\u662f-128~127, \u800cC#\u91cc\u4e00\u4e2abyte\u662f0~255.\n * **/\n", "func_signal": "public static int DoXorCompare(byte[] img1,byte[] img2)", "code": "{\n    int relations = 0;\n    try {\n        int len = Math.min(img1.length,img2.length);\n        for(int i=0;i<len;i++){\n            byte r = (byte)(img1[i] ^ img2[i]);\n            relations +=  Onetable[r & 0xFF];\n        }\n    }\n    catch (Exception ex){\n        System.out.print(ex.toString());\n    }\n    return relations;\n}", "path": "C-OCR/Recognition/main/java/compare/XorCompare.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "// \u5bf9X\u65b9\u5411\u91cd\u53e0\u533a\u57df\u518d\u5206\u5272\n", "func_signal": "public static List<PointEntity>  overlappingAreaRecut(List<PointEntity> points,List<PointEntity> newPoints,int startIndex,int endIndex,int newEndIndex,double yTopAvg,double yButtonAvg,double hAvg,double wAvg,int goodYTopMin,int goodYButtonMax,int maxCount)", "code": "{\n\n    List<PointEntity> list = new ArrayList<>();\n    PointEntity pc = points.get(startIndex);\n    int xl2 = 0;\n    int xEnd1 = 0;\n    int x1 = pc.getxLeft(),x2 = pc.getxRight(),y1 = pc.getyTop(),y2 = pc.getyButton(),h = pc.getHeight(),w = pc.getWidth();\n    double whRadio = pc.getWhRadio();\n//        int endIndex = findXMaxOverlapping(points,startIndex,newEndIndex,x2);\n    double dt = (yTopAvg-goodYTopMin +goodYButtonMax-yButtonAvg)/2;\n    if(endIndex+1<=newEndIndex){\n        xEnd1 = points.get(endIndex+1).getxLeft();\n    }\n    int npCount = newPoints.size();\n    if(npCount>0){\n        xl2 = newPoints.get(npCount-1).getxRight();\n    }\n    int diffCount = newEndIndex-endIndex-(startIndex-npCount);\n    if(endIndex>startIndex){\n        // region get near  topAvg and buttonAvg and spaceAvg\n        int nearCount = 0,spaceCount =0,leftCount =0,rightCount =0;\n        boolean isGoodMaxCount = false;\n        double nearYTopAvg =0,nearYButtonAvg = 0,spaceAvg =0;\n        int k = npCount-1;\n        int j = endIndex+1;\n        for(int i=0;i<=newEndIndex;i++){\n            // region left get avg\n            if(k>=0){\n                PointEntity p = newPoints.get(k);\n                int tempY1 = p.getyTop(), tempY2 = p.getyButton(),tempX1 = p.getxLeft(),tempH = p.getHeight();\n                if( tempY1>=goodYTopMin && tempY1<yTopAvg+dt  && tempY2<=goodYButtonMax && tempY2>yButtonAvg-dt  && tempH>0.568*hAvg){\n                    nearYTopAvg +=tempY1;\n                    nearYButtonAvg +=tempY2;\n                    leftCount++;\n                    if( k-1>=0){\n                        int lx2 = newPoints.get(k-1).getxRight();\n                        int spaceDiff  = tempX1 - lx2-1;\n                        if(spaceDiff>0 && spaceAvg<0.5*(wAvg+hAvg)){\n                            spaceAvg +=spaceDiff;\n                            spaceCount ++;\n                        }\n                    }\n                }\n            }\n            // endregion  a\n            // region right get avg\n            if(j<=newEndIndex){\n                PointEntity p = points.get(j);\n                int cy1 = p.getyTop(),cy2 = p.getyButton(),cx2 = p.getxRight(),ch = p.getHeight();\n                if( cy1>=goodYTopMin && cy1<yTopAvg+dt && cy2<=goodYButtonMax && cy2>=yButtonAvg-dt && ch>0.5268*hAvg ){\n                    nearYTopAvg +=cy1;\n                    nearYButtonAvg +=cy2;\n                    rightCount++;\n                    if( j+1<=newEndIndex){\n                        int rx1= points.get(j+1).getxLeft();\n                        int spaceDiff  = rx1 - cx2-1;\n                        if(spaceDiff>0 && spaceAvg<0.5*(wAvg+hAvg)){\n                            spaceAvg +=spaceDiff;\n                            spaceCount ++;\n                        }\n                    }\n                }\n            }\n            // endregion\n            nearCount = rightCount+leftCount;\n            if(!isGoodMaxCount && ((j>=newEndIndex && rightCount<1) || (k<1 && leftCount<1)) ){\n                maxCount = Math.max(3,maxCount-2);\n                isGoodMaxCount = true;\n            }\n            if(nearCount>=maxCount || (k<1  && j>=newEndIndex)){\n                break;\n            }\n            k--;\n            j++;\n        }\n        if(nearCount>0){\n            nearYTopAvg = nearYTopAvg/nearCount;\n            nearYButtonAvg = nearYButtonAvg/nearCount;\n        }else {\n            nearYTopAvg = yTopAvg;\n            nearYButtonAvg = yButtonAvg;\n        }\n        if(spaceCount>0){\n            spaceAvg = spaceAvg/spaceCount;\n        }\n        // endregion\n        // region find good point\n        boolean isContinue = false;\n        double diffRadio = 0.318;\n        double maxDiffRadio = 0.3508;\n        for(int i=startIndex+1;i<=endIndex;i++ ){\n            PointEntity pt = points.get(i);\n            PointEntity pr = null;\n            PointEntity po = null;\n            if(list.size()>0){\n                xl2 = list.get(list.size()-1).getxRight();\n            }\n            int cr = 0;\n            if(i+1<=newEndIndex){\n                cr = points.get(i+1).getxLeft();\n            }\n            int tx1 = pt.getxLeft(),tx2 = pt.getxRight(),ty1 = pt.getyTop(),ty2 = pt.getyButton(),th = pt.getHeight(),tw = pt.getWidth();\n            int maxX2 = Math.max(tx2,x2);\n            boolean isRight = i+1<=endIndex;\n            int rx1 = 0;\n            if(isRight){\n                pr =  points.get(i+1);\n                rx1 = pr.getxLeft();\n                xEnd1 = rx1;\n            }\n            boolean isBadRight = ( (ty1>nearYButtonAvg-0.2*hAvg && ty2>nearYButtonAvg+0.15*hAvg )|| (ty2<nearYTopAvg+0.2*hAvg && ty1<nearYTopAvg-0.15*hAvg) );\n            boolean isBadRightPoint =  (( (ty1>nearYButtonAvg-0.368*hAvg && ty2>nearYButtonAvg+0.1*hAvg) || (ty2<nearYTopAvg+0.368*hAvg  && ty1<nearYTopAvg-0.1*hAvg)) && (th<0.398*hAvg || w<0.368*wAvg)) || (th*tw<7 && (y2<nearYTopAvg+0.1*hAvg || y1>nearYButtonAvg-0.1*hAvg));\n            double topDiffTwo = Math.abs(ty1-nearYTopAvg), buttonDiffTwo = Math.abs(ty2-nearYButtonAvg);\n            boolean isGoodDiffTwo = ( topDiffTwo<diffRadio*hAvg && buttonDiffTwo<diffRadio*hAvg ) || (topDiffTwo+buttonDiffTwo<2*diffRadio*hAvg && buttonDiffTwo<maxDiffRadio*hAvg  && buttonDiffTwo<maxDiffRadio*hAvg );\n            boolean isBadTwo = ( !isGoodDiffTwo && (isBadRight || isBadRightPoint)) || (th*tw<=6 && tw<=2);\n            if(isContinue){\n                if(!isRight || (isRight && rx1>tx2)){\n                    if(!isBadTwo){\n                        list.add(pt);\n                    }\n                }else if(rx1<=tx2){\n                    pc = pt;\n                    x1 = tx1; x2 = tx2;y1= ty1;y2 = ty2; h=th;\n                    isContinue = false;\n                }\n                continue;\n            }\n            boolean isContinueOne = isRight && rx1<=x2;\n            boolean isContinueTwo = isRight && rx1<=tx2;\n            boolean isGoodCurrentRange =  y1>nearYTopAvg-0.15* hAvg &&  y2<=nearYButtonAvg+0.15*hAvg;\n            boolean isGoodRightRange =  ty1>nearYTopAvg-0.15* hAvg &&  ty2<=nearYButtonAvg+0.15*hAvg;\n            boolean isBadCurrent = (y1>nearYButtonAvg-0.2*hAvg || y2<nearYTopAvg+0.2*hAvg);\n            boolean isBadCurrentPoint =  (((y1>nearYButtonAvg-0.368*hAvg && y2>nearYButtonAvg+0.1*hAvg )|| (y2<nearYTopAvg+0.368*hAvg && y1<nearYTopAvg-0.1*hAvg)) && (h<0.398*hAvg || w<0.368*wAvg)) || (th*tw<7 && (y2<nearYTopAvg+0.1*hAvg || y1>nearYButtonAvg-0.1*hAvg) ) ;\n            boolean isBadCurrentOne = (y1>nearYButtonAvg+dt || y2<nearYTopAvg-dt);\n            boolean isBadRightOne = (ty1>nearYButtonAvg+dt || ty2<nearYTopAvg-dt);\n            if(isBadRightOne || isBadCurrentOne){\n                diffRadio = 0.409;\n            }\n            double topDiffOne = Math.abs(y1-nearYTopAvg), buttonDiffOne = Math.abs(y2-nearYButtonAvg);\n            if(topDiffOne<0.1*hAvg && y2<=goodYButtonMax && tx1>=x2-3 && h<1.451*hAvg && w>0.808*wAvg){\n                maxDiffRadio = 0.409;\n            }\n            boolean isUpAndDown = isGoodCurrentRange && isGoodRightRange  && maxX2-x1<1.298*wAvg ;\n            boolean isUpperOrButtonPoint = h>0.978*hAvg && ty1>nearYButtonAvg+2*dt || ty2<nearYTopAvg-2*dt && th*tw<7;\n            boolean isGoodTop = h>1.5*th && Math.abs(h-hAvg)<0.25*hAvg && topDiffOne<0.469*hAvg && buttonDiffOne<0.469*hAvg;\n            boolean isBadButton = ty1>nearYButtonAvg+0.469*hAvg;\n            boolean isGoodDiffOne = ( topDiffOne<diffRadio*hAvg && buttonDiffOne<diffRadio*hAvg ) || (topDiffOne+buttonDiffOne<2*diffRadio*hAvg && topDiffOne<maxDiffRadio*hAvg && buttonDiffOne<maxDiffRadio*hAvg );\n            boolean isGoodOne =  (isBadRight || isBadRightPoint ) && (isGoodDiffOne || (isGoodTop && isBadButton) )&& (!isUpAndDown || isUpperOrButtonPoint);\n            boolean isGoodTwo =  (isBadCurrent || isBadCurrentPoint) && isGoodDiffTwo && !isUpAndDown;\n            boolean isBadOne = !isGoodDiffOne && (isBadCurrent || isBadCurrentPoint);\n            boolean isBadThree = (diffCount<=3 && maxX2-x1<=0.368*wAvg && cr-xl2<2.98*spaceAvg) || ( cr-xl2>0 && cr-xl2<1.678*spaceAvg ) || (maxX2-x1<0.5*spaceAvg && maxX2-x1<0.268*wAvg);\n            boolean isBad = ((ty1>nearYButtonAvg || ty2<nearYTopAvg) &&  (y1>nearYButtonAvg || y2<nearYTopAvg) && ( xl2>0 && xEnd1>0 && xEnd1-xl2<0.568*wAvg ) || (isBadOne && isBadTwo && isBadThree));\n            boolean isMergeGood = tx1>=x2-2 && tx1<=x2 && w>0.868*wAvg && th>0.828*wAvg && isGoodDiffOne && isGoodDiffTwo;\n\n            if(isGoodOne){\n                if(!isContinueOne ){\n                    list.add(pc);\n                    isContinue = true;\n                }\n            }else if(isGoodTwo){\n                if( !isContinueTwo){\n                    list.add(pt);\n                    isContinue = true;\n                }\n                pc = pt;\n                x1 = tx1; x2 = tx2;y1=ty1;y2 = ty2; h=th;\n            }else if(isBad){\n                isContinue = true;\n            }else if(isMergeGood){\n                if(tw>w && tx1==tx2){\n                    if(tw>1.108*wAvg){\n                        tx1 = tx1+Math.min(4,Math.max((int)(th-1.218*wAvg),2));\n                    }else{\n                        tx1 = tx1+1;\n                    }\n                }else if(tw<w || tx1<tx2){\n                    if( w>1.108*wAvg){\n                        x2 = x2-Math.min(4,Math.max((int)(h-1.218*wAvg),2));\n                    }else{\n                        x2 = x2-1;\n                    }\n                    x2 = Math.min(tx1-1,x2);\n                    pc.setxRight(x2);\n                    pc.setWidth(x2-x1+1);\n                    pc.setWhRadio((double)(x2-x1+1)/h);\n                }\n                list.add(pc);\n                x1 = tx1; x2 = tx2; y1 = ty1; y2 = ty2;w = tw; h = th;\n                pc =  new PointEntity( x1, y1,x2,y2,w,h,whRadio);\n                if(!isRight && !isBadTwo){\n                    list.add(pc);\n                }\n            } else{\n                x2 = maxX2;\n                y1 = Math.min(ty1,y1);\n                y2 = Math.max(ty2,y2);\n                if(y1>nearYTopAvg+0.15*nearYButtonAvg){\n                    y1 = (int)Math.floor(nearYTopAvg);\n                }\n                if(y2<nearYButtonAvg-0.15*hAvg){\n                    y2 = (int) Math.ceil(nearYButtonAvg);\n                }\n                w = x2-x1+1;\n                h = y2-y1+1;\n                whRadio = (double) w/h;\n                pc = new PointEntity( x1, y1,x2,y2,w,h,whRadio);\n                if(!(isContinueOne || isContinueTwo)){\n                    list.add(pc);\n                    isContinue = true;\n                }\n            }\n        }\n        // endregion\n    }else {\n        boolean isBad =  (y1>goodYButtonMax || y2<goodYTopMin) && ( xl2>0 && xEnd1>0 && xEnd1-xl2<0.568*wAvg ) ;\n        if(!isBad){\n            list.add(pc);\n        }\n    }\n    return list;\n}", "path": "C-OCR/Common/src/main/java/util/SeparationUtil.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "ctripcorp/C-OCR", "stars": 2339, "license": "None", "language": "java", "size": 1987}
{"docstring": "/**\n * \u8bbe\u7f6e\u65cb\u8f6c\u540e\u662f\u5426\u66ff\u6362\u539f\u56fe\n * @param rotateReplaceSource\n * @return\n */\n", "func_signal": "public Builder setRotateReplaceSource(boolean rotateReplaceSource)", "code": "{\n    this.rotateReplaceSource = rotateReplaceSource;\n    return this;\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/FunctionConfig.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00\u7f16\u8f91\n * @param requestCode\n * @param config\n * @param photoPath\n * @param callback\n */\n", "func_signal": "public static void openEdit(int requestCode, FunctionConfig config, String photoPath, OnHanlderResultCallback callback)", "code": "{\n    if ( mCoreConfig.getImageLoader() == null ) {\n        ILogger.e(\"Please init GalleryFinal.\");\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if ( config == null && mGlobalFunctionConfig == null) {\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if (!DeviceUtils.existSDCard()) {\n        Toast.makeText(mCoreConfig.getContext(), R.string.empty_sdcard, Toast.LENGTH_SHORT).show();\n        return;\n    }\n\n    if ( config == null || StringUtils.isEmpty(photoPath) || !new File(photoPath).exists()) {\n        ILogger.d(\"config\u4e3a\u7a7a\u6216\u6587\u4ef6\u4e0d\u5b58\u5728\");\n        return;\n    }\n    mRequestCode = requestCode;\n    mCallback = callback;\n\n    config.mutiSelect = false;//\u62cd\u7167\u4e3a\u5355\u9009\n\n    mCurrentFunctionConfig = config;\n    ArrayList<PhotoInfo> map = new ArrayList<>();\n    PhotoInfo photoInfo = new PhotoInfo();\n    photoInfo.setPhotoPath(photoPath);\n    photoInfo.setPhotoId(Utils.getRandom(10000, 99999));\n    map.add(photoInfo);\n    Intent intent = new Intent(mCoreConfig.getContext(), PhotoEditActivity.class);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.putExtra(PhotoEditActivity.EDIT_PHOTO_ACTION, true);\n    intent.putExtra(PhotoEditActivity.SELECT_MAP, map);\n    mCoreConfig.getContext().startActivity(intent);\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u83b7\u53d6\u6240\u6709\u56fe\u7247\n */\n", "func_signal": "@AfterPermissionGranted(GalleryFinal.PERMISSIONS_CODE_GALLERY)\nprivate void requestGalleryPermission()", "code": "{\n    if (EasyPermissions.hasPermissions(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {\n        getPhotos();\n    } else {\n        // Ask for one permission\n        EasyPermissions.requestPermissions(this, getString(R.string.permissions_tips_gallery),\n                GalleryFinal.PERMISSIONS_CODE_GALLERY, Manifest.permission.READ_EXTERNAL_STORAGE);\n    }\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/PhotoSelectActivity.java", "commit_date": "2016-02-18 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "//\u6253\u5f00\u76f8\u673a\u52a8\u4f5c\n", "func_signal": "@Override\n    protected void onSaveInstanceState(Bundle outState)", "code": "{\n        super.onSaveInstanceState(outState);\n        outState.putParcelable(\"takePhotoUri\", mTakePhotoUri);\n        outState.putString(\"photoTargetFolder\", mPhotoTargetFolder);\n    }", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/PhotoBaseActivity.java", "commit_date": "2016-02-01 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u5f3a\u5236\u88c1\u526a\u540e\u662f\u5426\u53ef\u4ee5\u5bf9\u56fe\u7247\u7f16\u8f91\uff0c\u9ed8\u8ba4\u4e0d\u53ef\u7f16\u8f91\n * @param forceCropEdit\n * @return\n */\n", "func_signal": "public Builder setForceCropEdit(boolean forceCropEdit)", "code": "{\n    this.forceCropEdit = forceCropEdit;\n    return this;\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/FunctionConfig.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u89e3\u51b3\u57285.0\u624b\u673a\u4e0a\u5237\u65b0Gallery\u95ee\u9898\uff0c\u4ecestartActivityForResult\u56de\u5230Activity\u628a\u6570\u636e\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\u7136\u540e\u7406\u89e3\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u9875\u9762\uff0c\n * adapter\u7684getCount\u4e0elist.size\u4e0d\u4e00\u81f4\uff0c\u6240\u4ee5\u6211\u8fd9\u91cc\u7528\u4e86\u5ef6\u8fdf\u5237\u65b0\u6570\u636e\n * @param photoInfo\n */\n", "func_signal": "private void takeRefreshGallery(PhotoInfo photoInfo)", "code": "{\n    mCurPhotoList.add(0, photoInfo);\n    mPhotoListAdapter.notifyDataSetChanged();\n\n    //\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n    List<PhotoInfo> photoInfoList = mAllPhotoFolderList.get(0).getPhotoList();\n    if (photoInfoList == null) {\n        photoInfoList = new ArrayList<>();\n    }\n    photoInfoList.add(0, photoInfo);\n    mAllPhotoFolderList.get(0).setPhotoList(photoInfoList);\n\n    if ( mFolderListAdapter.getSelectFolder() != null ) {\n        PhotoFolderInfo photoFolderInfo = mFolderListAdapter.getSelectFolder();\n        List<PhotoInfo> list = photoFolderInfo.getPhotoList();\n        if ( list == null ) {\n            list = new ArrayList<>();\n        }\n        list.add(0, photoInfo);\n        if ( list.size() == 1 ) {\n            photoFolderInfo.setCoverPhoto(photoInfo);\n        }\n        mFolderListAdapter.getSelectFolder().setPhotoList(list);\n    } else {\n        String folderA = new File(photoInfo.getPhotoPath()).getParent();\n        for (int i = 1; i < mAllPhotoFolderList.size(); i++) {\n            PhotoFolderInfo folderInfo = mAllPhotoFolderList.get(i);\n            String folderB = null;\n            if (!StringUtils.isEmpty(photoInfo.getPhotoPath())) {\n                folderB = new File(photoInfo.getPhotoPath()).getParent();\n            }\n            if (TextUtils.equals(folderA, folderB)) {\n                List<PhotoInfo> list = folderInfo.getPhotoList();\n                if (list == null) {\n                    list = new ArrayList<>();\n                }\n                list.add(0, photoInfo);\n                folderInfo.setPhotoList(list);\n                if ( list.size() == 1 ) {\n                    folderInfo.setCoverPhoto(photoInfo);\n                }\n            }\n        }\n    }\n\n    mFolderListAdapter.notifyDataSetChanged();\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/PhotoSelectActivity.java", "commit_date": "2016-02-18 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6e05\u695a\u7f13\u5b58\u6587\u4ef6\n */\n", "func_signal": "public static void cleanCacheFile()", "code": "{\n    if (mCurrentFunctionConfig != null && mCoreConfig.getEditPhotoCacheFolder() != null) {\n        //\u6e05\u695a\u88c1\u526a\u5197\u4f59\u56fe\u7247\n        new Thread() {\n            @Override\n            public void run() {\n                super.run();\n                try {\n                    FileUtils.deleteDirectory(mCoreConfig.getEditPhotoCacheFolder());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }.start();\n    }\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "//\u7f16\u8f91\u56fe\u7247\u52a8\u4f5c\n", "func_signal": "@Override\n    protected void onSaveInstanceState(Bundle outState)", "code": "{\n        super.onSaveInstanceState(outState);\n        outState.putSerializable(\"selectPhotoMap\", mSelectPhotoList);\n        outState.putSerializable(\"editPhotoCacheFile\", mEditPhotoCacheFile);\n        outState.putSerializable(\"photoTempMap\", mPhotoTempMap);\n\n        outState.putInt(\"selectIndex\", mSelectIndex);\n        outState.putBoolean(\"cropState\", mCropState);\n        outState.putBoolean(\"rotating\", mRotating);\n\n        outState.putBoolean(\"takePhotoAction\", mTakePhotoAction);\n        outState.putBoolean(\"cropPhotoAction\", mCropPhotoAction);\n        outState.putBoolean(\"editPhotoAction\", mEditPhotoAction);\n\n    }", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/PhotoEditActivity.java", "commit_date": "2016-02-18 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00Gallery-\n * @param requestCode\n * @param maxSize\n * @param callback\n */\n", "func_signal": "public static void openGalleryMuti(int requestCode, int maxSize, OnHanlderResultCallback callback)", "code": "{\n    FunctionConfig config = copyGlobalFuncationConfig();\n    if (config != null) {\n        config.maxSize = maxSize;\n        openGalleryMuti(requestCode, config, callback);\n    } else {\n        if(callback != null) {\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        ILogger.e(\"Please init GalleryFinal.\");\n    }\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00\u76f8\u673a\n * @param requestCode\n * @param callback\n */\n", "func_signal": "public static void openCamera(int requestCode, OnHanlderResultCallback callback)", "code": "{\n    FunctionConfig config = copyGlobalFuncationConfig();\n    if (config != null) {\n        openCamera(requestCode, config, callback);\n    } else {\n        if(callback != null) {\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        ILogger.e(\"Please init GalleryFinal.\");\n    }\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u5f3a\u5236\u88c1\u526a\n * @param forceCrop\n * @return\n */\n", "func_signal": "public Builder setForceCrop(boolean forceCrop)", "code": "{\n    this.forceCrop = forceCrop;\n    return this;\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/FunctionConfig.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u662f\u5426\u5f00\u542f\u9884\u89c8\u529f\u80fd\n * @param preview\n * @return\n */\n", "func_signal": "public Builder setEnablePreview(boolean preview)", "code": "{\n    this.preview = preview;\n    return this;\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/FunctionConfig.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u8bbe\u7f6e\u88c1\u526a\u540e\u662f\u5426\u66ff\u6362\u539f\u56fe\n * @param cropReplaceSource\n * @return\n */\n", "func_signal": "public Builder setCropReplaceSource(boolean cropReplaceSource)", "code": "{\n    this.cropReplaceSource = cropReplaceSource;\n    return this;\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/FunctionConfig.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00Gallery-\u5355\u9009\n * @param requestCode\n * @param callback\n */\n", "func_signal": "public static void openGallerySingle(int requestCode, OnHanlderResultCallback callback)", "code": "{\n    FunctionConfig config = copyGlobalFuncationConfig();\n    if (config != null) {\n        openGallerySingle(requestCode, config, callback);\n    } else {\n        if(callback != null) {\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        ILogger.e(\"FunctionConfig null\");\n    }\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00\u76f8\u673a\n * @param config\n * @param callback\n */\n", "func_signal": "public static void openCamera(int requestCode, FunctionConfig config, OnHanlderResultCallback callback)", "code": "{\n    if ( mCoreConfig.getImageLoader() == null ) {\n        ILogger.e(\"Please init GalleryFinal.\");\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if ( config == null && mGlobalFunctionConfig == null) {\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if (!DeviceUtils.existSDCard()) {\n        Toast.makeText(mCoreConfig.getContext(), R.string.empty_sdcard, Toast.LENGTH_SHORT).show();\n        return;\n    }\n\n    mRequestCode = requestCode;\n    mCallback = callback;\n\n    config.mutiSelect = false;//\u62cd\u7167\u4e3a\u5355\u9009\n    mCurrentFunctionConfig = config;\n\n    Intent intent = new Intent(mCoreConfig.getContext(), PhotoEditActivity.class);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.putExtra(PhotoEditActivity.TAKE_PHOTO_ACTION, true);\n    mCoreConfig.getContext().startActivity(intent);\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00Gallery-\u5355\u9009\n * @param requestCode\n * @param config\n * @param callback\n */\n", "func_signal": "public static void openGallerySingle(int requestCode, FunctionConfig config, OnHanlderResultCallback callback)", "code": "{\n    if ( mCoreConfig.getImageLoader() == null ) {\n        ILogger.e(\"Please init GalleryFinal.\");\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if ( config == null && mGlobalFunctionConfig == null) {\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if (!DeviceUtils.existSDCard()) {\n        Toast.makeText(mCoreConfig.getContext(), R.string.empty_sdcard, Toast.LENGTH_SHORT).show();\n        return;\n    }\n    config.mutiSelect = false;\n    mRequestCode = requestCode;\n    mCallback = callback;\n    mCurrentFunctionConfig = config;\n\n    Intent intent = new Intent(mCoreConfig.getContext(), PhotoSelectActivity.class);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    mCoreConfig.getContext().startActivity(intent);\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00Gallery-\u591a\u9009\n * @param requestCode\n * @param config\n * @param callback\n */\n", "func_signal": "public static void openGalleryMuti(int requestCode, FunctionConfig config, OnHanlderResultCallback callback)", "code": "{\n    if ( mCoreConfig.getImageLoader() == null ) {\n        ILogger.e(\"Please init GalleryFinal.\");\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if ( config == null && mGlobalFunctionConfig == null) {\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        return;\n    }\n\n    if ( config.getMaxSize() <= 0) {\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.maxsize_zero_tip));\n        }\n        return;\n    }\n\n    if (config.getSelectedList() != null && config.getSelectedList().size() > config.getMaxSize()) {\n        if(callback != null){\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.select_max_tips));\n        }\n        return;\n    }\n\n    if (!DeviceUtils.existSDCard()) {\n        Toast.makeText(mCoreConfig.getContext(), R.string.empty_sdcard, Toast.LENGTH_SHORT).show();\n        return;\n    }\n\n    mRequestCode = requestCode;\n    mCallback = callback;\n    mCurrentFunctionConfig = config;\n\n    config.mutiSelect = true;\n\n    Intent intent = new Intent(mCoreConfig.getContext(), PhotoSelectActivity.class);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    mCoreConfig.getContext().startActivity(intent);\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00\u7f16\u8f91\n * @param requestCode\n * @param photoPath\n * @param callback\n */\n", "func_signal": "public static void openEdit(int requestCode, String photoPath, OnHanlderResultCallback callback)", "code": "{\n    FunctionConfig config = copyGlobalFuncationConfig();\n    if (config != null) {\n        openEdit(requestCode, config, photoPath, callback);\n    } else {\n        if(callback != null) {\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        ILogger.e(\"Please init GalleryFinal.\");\n    }\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "/**\n * \u6253\u5f00\u88c1\u526a\n * @param requestCode\n * @param photoPath\n * @param callback\n */\n", "func_signal": "public static void openCrop(int requestCode, String photoPath, OnHanlderResultCallback callback)", "code": "{\n    FunctionConfig config = copyGlobalFuncationConfig();\n    if (config != null) {\n        openCrop(requestCode, config, photoPath, callback);\n    } else {\n        if(callback != null) {\n            callback.onHanlderFailure(requestCode, mCoreConfig.getContext().getString(R.string.open_gallery_fail));\n        }\n        ILogger.e(\"Please init GalleryFinal.\");\n    }\n}", "path": "GalleryFinal/galleryfinal/src/main/java/cn/finalteam/galleryfinal/GalleryFinal.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "//    @Override\n//    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n//        super.onActivityResult(requestCode, resultCode, data);\n//        if (requestCode == GalleryFinal.GALLERY_REQUEST_CODE) {\n//            if (resultCode == GalleryFinal.GALLERY_RESULT_SUCCESS) {\n//                List<PhotoInfo> photoInfoList = (List<PhotoInfo>) data.getSerializableExtra(GalleryFinal.GALLERY_RESULT_LIST_DATA);\n//                if (photoInfoList != null) {\n//                    mPhotoList.addAll(photoInfoList);\n//                    mChoosePhotoListAdapter.notifyDataSetChanged();\n//                }\n//            }\n//        }\n//    }\n", "func_signal": "private void initImageLoader(Context context)", "code": "{\n        // This configuration tuning is custom. You can tune every option, you may tune some of them,\n        // or you can create default configuration by\n        //  ImageLoaderConfiguration.createDefault(this);\n        // method.\n        ImageLoaderConfiguration.Builder config = new ImageLoaderConfiguration.Builder(context);\n        config.threadPriority(Thread.NORM_PRIORITY - 2);\n        config.denyCacheImageMultipleSizesInMemory();\n        config.diskCacheFileNameGenerator(new Md5FileNameGenerator());\n        config.diskCacheSize(50 * 1024 * 1024); // 50 MiB\n        config.tasksProcessingOrder(QueueProcessingType.LIFO);\n        config.writeDebugLogs(); // Remove for release app\n\n        // Initialize ImageLoader with configuration.\n        ImageLoader.getInstance().init(config.build());\n    }", "path": "GalleryFinal/app/src/main/java/cn/finalteam/galleryfinal/sample/MainActivity.java", "commit_date": "2016-02-14 00:00:00", "repo_name": "pengjianbo/GalleryFinal", "stars": 3225, "license": "apache-2.0", "language": "java", "size": 55339}
{"docstring": "// Helper methods\n", "func_signal": "private void setProgress(String text, int progress, int max)", "code": "{\n\t// Set up the progress bar\n\tif (mProgressWidth == 0) {\n\t\tfinal View vProgressEmpty = (View) findViewById(R.id.vProgressEmpty);\n\t\tmProgressWidth = vProgressEmpty.getMeasuredWidth();\n\t}\n\t// Display stuff\n\tTextView tvState = (TextView) findViewById(R.id.tvState);\n\tif (text != null)\n\t\ttvState.setText(text);\n\tif (max == 0)\n\t\tmax = 1;\n\tmProgress = (int) ((float) mProgressWidth) * progress / max;\n\n\tView vProgressFull = (View) findViewById(R.id.vProgressFull);\n\tvProgressFull.getLayoutParams().width = mProgress;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/ActivityMain.java", "commit_date": "2015-05-24 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "/**\n * Reload the settings from file if they have changed.\n */\n", "func_signal": "public void reload()", "code": "{\n\tsynchronized (this) {\n\t\tif (hasFileChanged())\n\t\t\tstartLoadFromDisk();\n\t}\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/SharedPreferencesEx.java", "commit_date": "2014-01-30 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// @formatter:on\n", "func_signal": "public static List<XHook> getInstances()", "code": "{\n\tList<XHook> listHook = new ArrayList<XHook>();\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cInternet, \"inet\"));\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cInternet, \"inet_admin\"));\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cInternet, \"inet_bw\"));\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cInternet, \"inet_vpn\"));\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cInternet, \"inet_mesh\"));\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cStorage, \"media\"));\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cStorage, \"sdcard\"));\n\tlistHook.add(new XProcess(Methods.startViaZygote, PrivacyManager.cStorage, \"mtp\"));\n\treturn listHook;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XProcess.java", "commit_date": "2014-12-15 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Helper methods\n", "func_signal": "private OnDemandResult onDemandDialog(final Hook hook, final PRestriction restriction, final PRestriction result)", "code": "{\n\tfinal OnDemandResult oResult = new OnDemandResult();\n\ttry {\n\t\tint userId = Util.getUserId(restriction.uid);\n\n\t\t// Check if application\n\t\tif (!PrivacyManager.isApplication(restriction.uid))\n\t\t\tif (!getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false))\n\t\t\t\treturn oResult;\n\n\t\t// Check for exceptions\n\t\tif (hook != null && !hook.canOnDemand())\n\t\t\treturn oResult;\n\t\tif (!PrivacyManager.canRestrict(restriction.uid, getXUid(), restriction.restrictionName,\n\t\t\t\trestriction.methodName, false))\n\t\t\treturn oResult;\n\n\t\t// Check if enabled\n\t\tif (!getSettingBool(userId, PrivacyManager.cSettingOnDemand, true))\n\t\t\treturn oResult;\n\t\tif (!getSettingBool(restriction.uid, PrivacyManager.cSettingOnDemand, false))\n\t\t\treturn oResult;\n\n\t\t// Check version\n\t\tString version = getSetting(new PSetting(userId, \"\", PrivacyManager.cSettingVersion, \"0.0\")).value;\n\t\tif (new Version(version).compareTo(new Version(\"2.1.5\")) < 0)\n\t\t\treturn oResult;\n\n\t\t// Get activity manager context\n\t\tfinal Context context = getContext();\n\t\tif (context == null)\n\t\t\treturn oResult;\n\n\t\tlong token = 0;\n\t\ttry {\n\t\t\ttoken = Binder.clearCallingIdentity();\n\n\t\t\t// Get application info\n\t\t\tfinal ApplicationInfoEx appInfo = new ApplicationInfoEx(context, restriction.uid);\n\n\t\t\t// Check for system application\n\t\t\tif (appInfo.isSystem())\n\t\t\t\tif (new Version(version).compareTo(new Version(\"2.0.38\")) < 0)\n\t\t\t\t\treturn oResult;\n\n\t\t\t// Check if activity manager agrees\n\t\t\tif (!XActivityManagerService.canOnDemand())\n\t\t\t\treturn oResult;\n\n\t\t\t// Check if activity manager locked\n\t\t\tif (isAMLocked(restriction.uid)) {\n\t\t\t\tUtil.log(null, Log.WARN, \"On demand locked \" + restriction);\n\t\t\t\treturn oResult;\n\t\t\t}\n\n\t\t\t// Go ask\n\t\t\tUtil.log(null, Log.WARN, \"On demand \" + restriction);\n\t\t\tmOndemandSemaphore.acquireUninterruptibly();\n\t\t\ttry {\n\t\t\t\t// Check if activity manager still agrees\n\t\t\t\tif (!XActivityManagerService.canOnDemand())\n\t\t\t\t\treturn oResult;\n\n\t\t\t\t// Check if activity manager locked now\n\t\t\t\tif (isAMLocked(restriction.uid)) {\n\t\t\t\t\tUtil.log(null, Log.WARN, \"On demand acquired locked \" + restriction);\n\t\t\t\t\treturn oResult;\n\t\t\t\t}\n\n\t\t\t\tUtil.log(null, Log.WARN, \"On demanding \" + restriction);\n\n\t\t\t\t// Check if method not asked before\n\t\t\t\tCRestriction mkey = new CRestriction(restriction, null);\n\t\t\t\tsynchronized (mRestrictionCache) {\n\t\t\t\t\tif (mRestrictionCache.containsKey(mkey)) {\n\t\t\t\t\t\tCRestriction mrestriction = mRestrictionCache.get(mkey);\n\t\t\t\t\t\tif (mrestriction.asked) {\n\t\t\t\t\t\t\tUtil.log(null, Log.WARN, \"Already asked \" + restriction);\n\t\t\t\t\t\t\tresult.restricted = mrestriction.restricted;\n\t\t\t\t\t\t\tresult.asked = true;\n\t\t\t\t\t\t\treturn oResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check if category not asked before (once)\n\t\t\t\tCRestriction ckey = new CRestriction(restriction, null);\n\t\t\t\tckey.setMethodName(null);\n\t\t\t\tsynchronized (mAskedOnceCache) {\n\t\t\t\t\tif (mAskedOnceCache.containsKey(ckey)) {\n\t\t\t\t\t\tCRestriction carestriction = mAskedOnceCache.get(ckey);\n\t\t\t\t\t\tif (!carestriction.isExpired()) {\n\t\t\t\t\t\t\tUtil.log(null, Log.WARN, \"Already asked once category \" + restriction);\n\t\t\t\t\t\t\tresult.restricted = carestriction.restricted;\n\t\t\t\t\t\t\tresult.asked = true;\n\t\t\t\t\t\t\treturn oResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check if method not asked before once\n\t\t\t\tsynchronized (mAskedOnceCache) {\n\t\t\t\t\tif (mAskedOnceCache.containsKey(mkey)) {\n\t\t\t\t\t\tCRestriction marestriction = mAskedOnceCache.get(mkey);\n\t\t\t\t\t\tif (!marestriction.isExpired()) {\n\t\t\t\t\t\t\tUtil.log(null, Log.WARN, \"Already asked once method \" + restriction);\n\t\t\t\t\t\t\tresult.restricted = marestriction.restricted;\n\t\t\t\t\t\t\tresult.asked = true;\n\t\t\t\t\t\t\treturn oResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check if whitelist not asked before\n\t\t\t\tif (restriction.extra != null && hook != null && hook.whitelist() != null) {\n\t\t\t\t\tCSetting skey = new CSetting(restriction.uid, hook.whitelist(), restriction.extra);\n\t\t\t\t\tsynchronized (mSettingCache) {\n\t\t\t\t\t\tif (mSettingCache.containsKey(skey)) {\n\t\t\t\t\t\t\tString value = mSettingCache.get(skey).getValue();\n\t\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\t\tUtil.log(null, Log.WARN, \"Already asked whitelist \" + skey);\n\t\t\t\t\t\t\t\tresult.restricted = Boolean.parseBoolean(value);\n\t\t\t\t\t\t\t\tresult.asked = true;\n\t\t\t\t\t\t\t\treturn oResult;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (String xextra : getXExtra(restriction, hook)) {\n\t\t\t\t\t\t\tCSetting xkey = new CSetting(restriction.uid, hook.whitelist(), xextra);\n\t\t\t\t\t\t\tif (mSettingCache.containsKey(xkey)) {\n\t\t\t\t\t\t\t\tString value = mSettingCache.get(xkey).getValue();\n\t\t\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\t\t\tUtil.log(null, Log.WARN, \"Already asked whitelist \" + xkey);\n\t\t\t\t\t\t\t\t\tresult.restricted = Boolean.parseBoolean(value);\n\t\t\t\t\t\t\t\t\tresult.asked = true;\n\t\t\t\t\t\t\t\t\treturn oResult;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfinal OnDemandDialogHolder holder = new OnDemandDialogHolder();\n\n\t\t\t\t// Build dialog parameters\n\t\t\t\tfinal WindowManager.LayoutParams params = new WindowManager.LayoutParams();\n\t\t\t\tparams.type = WindowManager.LayoutParams.TYPE_PHONE;\n\t\t\t\tparams.flags = WindowManager.LayoutParams.FLAG_DIM_BEHIND;\n\t\t\t\tparams.systemUiVisibility = View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\t\t\t\tparams.dimAmount = 0.85f;\n\t\t\t\tparams.width = WindowManager.LayoutParams.WRAP_CONTENT;\n\t\t\t\tparams.height = WindowManager.LayoutParams.WRAP_CONTENT;\n\t\t\t\tparams.format = PixelFormat.TRANSLUCENT;\n\t\t\t\tparams.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN;\n\t\t\t\tparams.gravity = Gravity.CENTER;\n\n\t\t\t\t// Get window manager\n\t\t\t\tfinal WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n\n\t\t\t\t// Show dialog\n\t\t\t\tmHandler.post(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Build dialog\n\t\t\t\t\t\t\tholder.dialog = getOnDemandView(restriction, hook, appInfo, result, context, holder,\n\t\t\t\t\t\t\t\t\toResult);\n\n\t\t\t\t\t\t\t// Handle reset button\n\t\t\t\t\t\t\t((Button) holder.dialog.findViewById(R.id.btnReset))\n\t\t\t\t\t\t\t\t\t.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\t\t\t\t\t\t\t((ProgressBar) holder.dialog.findViewById(R.id.pbProgress))\n\t\t\t\t\t\t\t\t\t\t\t\t\t.setProgress(cMaxOnDemandDialog * 20);\n\t\t\t\t\t\t\t\t\t\t\tholder.reset = true;\n\t\t\t\t\t\t\t\t\t\t\tholder.latch.countDown();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// Make dialog visible\n\t\t\t\t\t\t\twm.addView(holder.dialog, params);\n\n\t\t\t\t\t\t\t// Update progress bar\n\t\t\t\t\t\t\tRunnable runProgress = new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\tif (holder.dialog != null && holder.dialog.isShown()) {\n\t\t\t\t\t\t\t\t\t\t// Update progress bar\n\t\t\t\t\t\t\t\t\t\tProgressBar progressBar = (ProgressBar) holder.dialog\n\t\t\t\t\t\t\t\t\t\t\t\t.findViewById(R.id.pbProgress);\n\t\t\t\t\t\t\t\t\t\tif (progressBar.getProgress() > 0) {\n\t\t\t\t\t\t\t\t\t\t\tprogressBar.incrementProgressBy(-1);\n\t\t\t\t\t\t\t\t\t\t\tmHandler.postDelayed(this, 50);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Check if activity manager locked\n\t\t\t\t\t\t\t\t\t\tif (isAMLocked(restriction.uid)) {\n\t\t\t\t\t\t\t\t\t\t\tUtil.log(null, Log.WARN, \"On demand dialog locked \" + restriction);\n\t\t\t\t\t\t\t\t\t\t\t((Button) holder.dialog.findViewById(R.id.btnDontKnow)).callOnClick();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tmHandler.postDelayed(runProgress, 50);\n\n\t\t\t\t\t\t\t// Enabled buttons after one second\n\t\t\t\t\t\t\tboolean repeat = (SystemClock.elapsedRealtime() - mOnDemandLastAnswer < 1000);\n\t\t\t\t\t\t\tmHandler.postDelayed(new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\tif (holder.dialog != null && holder.dialog.isShown()) {\n\t\t\t\t\t\t\t\t\t\tholder.dialog.findViewById(R.id.btnAllow).setEnabled(true);\n\t\t\t\t\t\t\t\t\t\tholder.dialog.findViewById(R.id.btnDontKnow).setEnabled(true);\n\t\t\t\t\t\t\t\t\t\tholder.dialog.findViewById(R.id.btnDeny).setEnabled(true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, repeat ? 0 : 1000);\n\n\t\t\t\t\t\t} catch (NameNotFoundException ex) {\n\t\t\t\t\t\t\tUtil.log(null, Log.WARN, ex.toString());\n\t\t\t\t\t\t} catch (Throwable ex) {\n\t\t\t\t\t\t\tUtil.bug(null, ex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Wait for choice, reset or timeout\n\t\t\t\tdo {\n\t\t\t\t\tholder.reset = false;\n\t\t\t\t\tboolean choice = holder.latch.await(cMaxOnDemandDialog, TimeUnit.SECONDS);\n\t\t\t\t\tif (holder.reset) {\n\t\t\t\t\t\tholder.latch = new CountDownLatch(1);\n\t\t\t\t\t\tUtil.log(null, Log.WARN, \"On demand reset \" + restriction);\n\t\t\t\t\t} else if (choice)\n\t\t\t\t\t\toResult.ondemand = true;\n\t\t\t\t\telse\n\t\t\t\t\t\tUtil.log(null, Log.WARN, \"On demand timeout \" + restriction);\n\t\t\t\t} while (holder.reset);\n\t\t\t\tmOnDemandLastAnswer = SystemClock.elapsedRealtime();\n\n\t\t\t\t// Dismiss dialog\n\t\t\t\tmHandler.post(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tView dialog = holder.dialog;\n\t\t\t\t\t\tif (dialog != null)\n\t\t\t\t\t\t\twm.removeView(dialog);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t} finally {\n\t\t\t\tmOndemandSemaphore.release();\n\t\t\t}\n\t\t} finally {\n\t\t\tBinder.restoreCallingIdentity(token);\n\t\t}\n\t} catch (Throwable ex) {\n\t\tUtil.bug(null, ex);\n\t}\n\n\treturn oResult;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyService.java", "commit_date": "2015-07-01 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// @formatter:on\n", "func_signal": "private XBinder(Methods method, String restrictionName)", "code": "{\n\tsuper(restrictionName, method.name(), null);\n\tmMethod = method;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XBinder.java", "commit_date": "2015-07-01 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// @formatter:on\n", "func_signal": "public static List<XHook> getInstances(boolean server)", "code": "{\n\tList<XHook> listHook = new ArrayList<XHook>();\n\tif (server) {\n\t\tlistHook.add(new XSmsManager(Methods.Srv_getAllMessagesFromIccEf, PrivacyManager.cMessages));\n\t\tlistHook.add(new XSmsManager(Methods.Srv_sendData, PrivacyManager.cCalling));\n\t\tlistHook.add(new XSmsManager(Methods.Srv_sendMultipartText, PrivacyManager.cCalling));\n\t\tlistHook.add(new XSmsManager(Methods.Srv_sendText, PrivacyManager.cCalling));\n\t} else {\n\t\tlistHook.add(new XSmsManager(Methods.getAllMessagesFromIcc, PrivacyManager.cMessages));\n\t\tlistHook.add(new XSmsManager(Methods.getCarrierConfigValues, PrivacyManager.cMessages));\n\t\tlistHook.add(new XSmsManager(Methods.sendDataMessage, PrivacyManager.cCalling));\n\t\tlistHook.add(new XSmsManager(Methods.sendMultimediaMessage, PrivacyManager.cCalling));\n\t\tlistHook.add(new XSmsManager(Methods.sendMultipartTextMessage, PrivacyManager.cCalling));\n\t\tlistHook.add(new XSmsManager(Methods.sendTextMessage, PrivacyManager.cCalling));\n\t}\n\treturn listHook;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XSmsManager.java", "commit_date": "2015-05-23 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Definitions\n", "func_signal": "public Hook to(int sdk)", "code": "{\n\tmSdkTo = sdk;\n\treturn this;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/Hook.java", "commit_date": "2015-05-25 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Usage\n", "func_signal": "@Override\npublic long getUsage(List<PRestriction> listRestriction) throws RemoteException", "code": "{\n\tlong lastUsage = 0;\n\ttry {\n\t\tint uid = -1;\n\t\tfor (PRestriction restriction : listRestriction)\n\t\t\tif (uid < 0)\n\t\t\t\tuid = restriction.uid;\n\t\t\telse if (uid != restriction.uid)\n\t\t\t\tthrow new SecurityException();\n\t\tenforcePermission(uid);\n\t\tSQLiteDatabase dbUsage = getDbUsage();\n\n\t\t// Precompile statement when needed\n\t\tif (stmtGetUsageRestriction == null) {\n\t\t\tString sql = \"SELECT MAX(time) FROM \" + cTableUsage + \" WHERE uid=? AND restriction=?\";\n\t\t\tstmtGetUsageRestriction = dbUsage.compileStatement(sql);\n\t\t}\n\t\tif (stmtGetUsageMethod == null) {\n\t\t\tString sql = \"SELECT MAX(time) FROM \" + cTableUsage + \" WHERE uid=? AND restriction=? AND method=?\";\n\t\t\tstmtGetUsageMethod = dbUsage.compileStatement(sql);\n\t\t}\n\n\t\tmLockUsage.readLock().lock();\n\t\ttry {\n\t\t\tdbUsage.beginTransaction();\n\t\t\ttry {\n\t\t\t\tfor (PRestriction restriction : listRestriction) {\n\t\t\t\t\tif (restriction.methodName == null)\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsynchronized (stmtGetUsageRestriction) {\n\t\t\t\t\t\t\t\tstmtGetUsageRestriction.clearBindings();\n\t\t\t\t\t\t\t\tstmtGetUsageRestriction.bindLong(1, restriction.uid);\n\t\t\t\t\t\t\t\tstmtGetUsageRestriction.bindString(2, restriction.restrictionName);\n\t\t\t\t\t\t\t\tlastUsage = Math.max(lastUsage, stmtGetUsageRestriction.simpleQueryForLong());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (SQLiteDoneException ignored) {\n\t\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsynchronized (stmtGetUsageMethod) {\n\t\t\t\t\t\t\t\tstmtGetUsageMethod.clearBindings();\n\t\t\t\t\t\t\t\tstmtGetUsageMethod.bindLong(1, restriction.uid);\n\t\t\t\t\t\t\t\tstmtGetUsageMethod.bindString(2, restriction.restrictionName);\n\t\t\t\t\t\t\t\tstmtGetUsageMethod.bindString(3, restriction.methodName);\n\t\t\t\t\t\t\t\tlastUsage = Math.max(lastUsage, stmtGetUsageMethod.simpleQueryForLong());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (SQLiteDoneException ignored) {\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdbUsage.setTransactionSuccessful();\n\t\t\t} finally {\n\t\t\t\tdbUsage.endTransaction();\n\t\t\t}\n\t\t} finally {\n\t\t\tmLockUsage.readLock().unlock();\n\t\t}\n\t} catch (Throwable ex) {\n\t\tUtil.bug(null, ex);\n\t\tthrow new RemoteException(ex.toString());\n\t}\n\treturn lastUsage;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyService.java", "commit_date": "2015-07-01 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// @formatter:on\n", "func_signal": "public static List<XHook> getInstances(boolean server)", "code": "{\n\tList<XHook> listHook = new ArrayList<XHook>();\n\tif (server) {\n\t\tlistHook.add(new XUsageStatsManager(Methods.Srv_queryConfigurationStats, PrivacyManager.cSystem));\n\t\tlistHook.add(new XUsageStatsManager(Methods.Srv_queryEvents, PrivacyManager.cSystem));\n\t\tlistHook.add(new XUsageStatsManager(Methods.Srv_queryUsageStats, PrivacyManager.cSystem));\n\t} else {\n\t\tlistHook.add(new XUsageStatsManager(Methods.queryAndAggregateUsageStats, PrivacyManager.cSystem));\n\t\tlistHook.add(new XUsageStatsManager(Methods.queryConfigurations, PrivacyManager.cSystem));\n\t\tlistHook.add(new XUsageStatsManager(Methods.queryEvents, PrivacyManager.cSystem));\n\t\tlistHook.add(new XUsageStatsManager(Methods.queryUsageStats, PrivacyManager.cSystem));\n\t}\n\treturn listHook;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XUsageStatsManager.java", "commit_date": "2015-05-23 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// http://www.doubleencore.com/2014/03/android-external-storage/\n// http://www.chainfire.eu/articles/113/Is_Google_blocking_apps_writing_to_SD_cards_/\n// https://android.googlesource.com/platform/system/core/+/dfe0cba\n// https://android.googlesource.com/platform/system/core/+/master/sdcard/sdcard.c\n", "func_signal": "@Override\nprotected void before(XParam param) throws Throwable", "code": "{\n\tswitch (mMethod) {\n\tcase startViaZygote:\n\t\tif (param.args.length >= 5 && param.args[2] instanceof Integer && param.args[4] instanceof int[]) {\n\t\t\t// Get IDs\n\t\t\tint uid = (Integer) param.args[2];\n\t\t\tint[] gids = (int[]) param.args[4];\n\n\t\t\t// Build list of modified gids\n\t\t\tList<Integer> listGids = new ArrayList<Integer>();\n\t\t\tfor (int i = 0; i < gids.length; i++) {\n\t\t\t\tif (gids[i] == media_rw)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cStorage) && mAction.equals(\"media\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking media uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse if (gids[i] == sdcard_r || gids[i] == sdcard_rw || gids[i] == sdcard_all\n\t\t\t\t\t\t|| gids[i] == sdcard_pics || gids[i] == sdcard_av)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cStorage) && mAction.equals(\"sdcard\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking sdcard uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse if (gids[i] == mtp)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cStorage) && mAction.equals(\"mtp\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking mtp uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse if (gids[i] == inet || gids[i] == inet_raw)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cInternet) && mAction.equals(\"inet\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking inet uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse if (gids[i] == inet_admin)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cInternet) && mAction.equals(\"inet_admin\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking inet_admin uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse if (gids[i] == inet_bw_stats || gids[i] == inet_bw_acct)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cInternet) && mAction.equals(\"inet_bw\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking inet_bw uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse if (gids[i] == inet_vpn)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cInternet) && mAction.equals(\"inet_vpn\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking inet_vpn uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse if (gids[i] == inet_mesh)\n\t\t\t\t\tif (mRestrictionName.equals(PrivacyManager.cInternet) && mAction.equals(\"inet_mesh\")\n\t\t\t\t\t\t\t&& getRestricted(uid, mAction))\n\t\t\t\t\t\tUtil.log(this, Log.INFO, \"Revoking inet_mesh uid=\" + uid);\n\t\t\t\t\telse\n\t\t\t\t\t\tlistGids.add(gids[i]);\n\n\t\t\t\telse\n\t\t\t\t\tlistGids.add(gids[i]);\n\t\t\t}\n\n\t\t\t// Proces list of modified gids\n\t\t\tint[] mGids = new int[listGids.size()];\n\t\t\tfor (int i = 0; i < listGids.size(); i++)\n\t\t\t\tmGids[i] = listGids.get(i);\n\n\t\t\tparam.args[4] = (mGids.length == 0 ? null : mGids);\n\t\t}\n\t\tbreak;\n\t}\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XProcess.java", "commit_date": "2014-12-15 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Entry point from android_util_Binder.cpp's onTransact\n", "func_signal": "private void checkIPC(XParam param) throws Throwable", "code": "{\n\t// Allow management transactions\n\tint code = (Integer) param.args[0];\n\tif (isManagementTransaction(code))\n\t\treturn;\n\n\t// Only for applications\n\tint uid = Binder.getCallingUid();\n\tif (!PrivacyManager.isApplication(uid))\n\t\treturn;\n\n\t// Check interface name\n\tIBinder binder = (IBinder) param.thisObject;\n\tString descriptor = (binder == null ? null : binder.getInterfaceDescriptor());\n\tif (!cServiceDescriptor.contains(descriptor))\n\t\treturn;\n\n\t// Get token\n\tint flags = (Integer) param.args[3];\n\tlong token = (flags >> BITS_TOKEN) & MASK_TOKEN;\n\tflags &= FLAG_ALL;\n\tparam.args[3] = flags;\n\n\t// Check token\n\tif (token != mToken) {\n\t\tString[] name = descriptor.split(\"\\\\.\");\n\t\tString interfaceName = name[name.length - 1];\n\n\t\t// Get transaction code name\n\t\tString codeName;\n\t\tsynchronized (mMapCodeName) {\n\t\t\tif (!mMapCodeName.containsKey(descriptor)) {\n\t\t\t\tSparseArray<String> sa = new SparseArray<String>();\n\t\t\t\tmMapCodeName.put(descriptor, sa);\n\n\t\t\t\tList<Class<?>> listClass = new ArrayList<Class<?>>();\n\t\t\t\tif (param.thisObject.getClass().getSuperclass() != null)\n\t\t\t\t\tlistClass.add(param.thisObject.getClass().getSuperclass());\n\t\t\t\ttry {\n\t\t\t\t\tlistClass.add(Class.forName(descriptor));\n\t\t\t\t} catch (ClassNotFoundException ignored) {\n\t\t\t\t}\n\n\t\t\t\tfor (Class<?> clazz : listClass)\n\t\t\t\t\tfor (Field field : clazz.getDeclaredFields())\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (field.getName().startsWith(\"TRANSACTION_\")\n\t\t\t\t\t\t\t\t\t|| field.getName().endsWith(\"_TRANSACTION\")) {\n\t\t\t\t\t\t\t\tfield.setAccessible(true);\n\t\t\t\t\t\t\t\tInteger txCode = (Integer) field.get(null);\n\t\t\t\t\t\t\t\tString txName = field.getName().replace(\"TRANSACTION_\", \"\")\n\t\t\t\t\t\t\t\t\t\t.replace(\"_TRANSACTION\", \"\");\n\t\t\t\t\t\t\t\tsa.put(txCode, txName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (Throwable ignore) {\n\t\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tcodeName = mMapCodeName.get(descriptor).get(code);\n\t\t}\n\t\tif (codeName == null) {\n\t\t\tcodeName = Integer.toString(code);\n\t\t\tUtil.log(this, Log.WARN, \"Unknown transaction=\" + descriptor + \":\" + code + \" class=\"\n\t\t\t\t\t+ param.thisObject.getClass() + \" uid=\" + Binder.getCallingUid());\n\t\t\tUtil.logStack(this, Log.INFO);\n\t\t}\n\n\t\tUtil.log(this, Log.INFO, \"can restrict transaction=\" + interfaceName + \":\" + codeName + \" flags=\" + flags\n\t\t\t\t+ \" uid=\" + uid + \" my=\" + Process.myUid());\n\n\t\tif (isRestrictedExtra(uid, PrivacyManager.cIPC, \"Binder\", interfaceName + \":\" + codeName)) {\n\t\t\tUtil.log(this, Log.WARN, \"Restricting \" + interfaceName + \":\" + codeName + \" code=\" + code);\n\t\t\t// Get reply parcel\n\t\t\tParcel reply = null;\n\t\t\ttry {\n\t\t\t\t// static protected final Parcel obtain(int obj)\n\t\t\t\t// frameworks/base/core/java/android/os/Parcel.java\n\t\t\t\tMethod methodObtain = Parcel.class.getDeclaredMethod(\"obtain\",\n\t\t\t\t\t\tBuild.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP ? int.class : long.class);\n\t\t\t\tmethodObtain.setAccessible(true);\n\t\t\t\treply = (Parcel) methodObtain.invoke(null, param.args[2]);\n\t\t\t} catch (NoSuchMethodException ex) {\n\t\t\t\tUtil.bug(this, ex);\n\t\t\t}\n\n\t\t\t// Block IPC\n\t\t\tif (reply == null)\n\t\t\t\tUtil.log(this, Log.ERROR, \"reply is null uid=\" + uid);\n\t\t\telse {\n\t\t\t\treply.setDataPosition(0);\n\t\t\t\treply.writeException(new SecurityException(\"XPrivacy\"));\n\t\t\t}\n\t\t\tparam.setResult(true);\n\t\t}\n\t}\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XBinder.java", "commit_date": "2015-07-01 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// @formatter:on\n", "func_signal": "public static List<XHook> getInstances()", "code": "{\n\tList<XHook> listHook = new ArrayList<XHook>();\n\n\tlistHook.add(new XActivityThread(Methods.next));\n\tlistHook.add(new XActivityThread(Methods.handleReceiver));\n\n\treturn listHook;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XActivityThread.java", "commit_date": "2014-12-13 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Options\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n\tMenuInflater inflater = getMenuInflater();\n\tif (inflater != null && PrivacyService.checkClient()) {\n\t\t// Inflate menu\n\t\tinflater.inflate(R.menu.main, menu);\n\n\t\t// Searchable\n\t\tSearchView searchView = (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.menu_search));\n\t\tif (searchView != null) {\n\t\t\tsearchView.setIconifiedByDefault(false);\n\n\t\t\tsearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onQueryTextChange(String newText) {\n\t\t\t\t\tsearchQuery = newText;\n\t\t\t\t\tapplyFilter();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onQueryTextSubmit(String query) {\n\t\t\t\t\tsearchQuery = query;\n\t\t\t\t\tapplyFilter();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tsearchView.setOnCloseListener(new SearchView.OnCloseListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onClose() {\n\t\t\t\t\tsearchQuery = \"\";\n\t\t\t\t\tapplyFilter();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn true;\n\t} else\n\t\treturn false;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/ActivityMain.java", "commit_date": "2015-05-24 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Restrictions\n", "func_signal": "@Override\npublic void setRestriction(PRestriction restriction) throws RemoteException", "code": "{\n\ttry {\n\t\tenforcePermission(restriction.uid);\n\t\tsetRestrictionInternal(restriction);\n\t} catch (Throwable ex) {\n\t\tUtil.bug(null, ex);\n\t\tthrow new RemoteException(ex.toString());\n\t}\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyService.java", "commit_date": "2015-07-01 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// The following methods are used as fallback, when:\n// - there is no context (Java threads)\n// - the content provider cannot be queried (PackageManagerService)\n", "func_signal": "public static boolean getRestrictedFallback(XHook hook, int uid, String restrictionName, String methodName)", "code": "{\n\ttry {\n\t\tlong now = new Date().getTime();\n\t\tFile file = new File(getPrefFileName(PREF_RESTRICTION, uid));\n\t\tif (!file.exists())\n\t\t\tUtil.log(null, Log.INFO, \"Not found file=\" + file.getAbsolutePath());\n\n\t\tsynchronized (mFallbackRestrictionLock) {\n\t\t\tif (mFallbackRestrictions == null || mFallbackRestrictionsUid != uid) {\n\t\t\t\t// Initial load\n\t\t\t\tmFallbackRestrictions = new SharedPreferencesEx(file);\n\t\t\t\tmFallbackRestrictionsUid = uid;\n\t\t\t\tmFallbackRestrictionsTime = now;\n\t\t\t\tlong ms = System.currentTimeMillis() - now;\n\t\t\t\tUtil.log(null, Log.INFO, \"Load fallback restrictions uid=\" + uid + \"/\" + mFallbackRestrictionsUid\n\t\t\t\t\t\t+ \" \" + ms + \" ms\");\n\t\t\t} else if (mFallbackRestrictionsTime + PrivacyManager.cRestrictionCacheTimeoutMs < now) {\n\t\t\t\t// Check update\n\t\t\t\tmFallbackRestrictions.reload();\n\t\t\t\tmFallbackRestrictionsUid = uid;\n\t\t\t\tmFallbackRestrictionsTime = now;\n\t\t\t\tlong ms = System.currentTimeMillis() - now;\n\t\t\t\tUtil.log(null, Log.INFO, \"Reload fallback restrictions uid=\" + uid + \" \" + ms + \" ms\");\n\t\t\t}\n\t\t}\n\n\t\treturn getRestricted(restrictionName, methodName, mFallbackRestrictions);\n\t} catch (Throwable ex) {\n\t\tUtil.bug(hook, ex);\n\t\treturn false;\n\t}\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyProvider.java", "commit_date": "2014-08-18 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Settings\n", "func_signal": "@Override\npublic void setSetting(PSetting setting) throws RemoteException", "code": "{\n\ttry {\n\t\tenforcePermission(setting.uid);\n\t\tsetSettingInternal(setting);\n\t} catch (Throwable ex) {\n\t\tUtil.bug(null, ex);\n\t\tthrow new RemoteException(ex.toString());\n\t}\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyService.java", "commit_date": "2015-07-01 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Helper methods\n", "func_signal": "private void enforcePermission() throws SecurityException", "code": "{\n\tif (Binder.getCallingUid() != Process.myUid())\n\t\tthrow new SecurityException();\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyProvider.java", "commit_date": "2014-08-18 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Management\n", "func_signal": "@Override\npublic int getVersion() throws RemoteException", "code": "{\n\tenforcePermission(-1);\n\treturn cCurrentVersion;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyService.java", "commit_date": "2015-07-01 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// Migration\n", "func_signal": "public static void migrateLegacy(Context context) throws IOException", "code": "{\n\tconvertSettings(context);\n\tconvertRestrictions(context);\n\tsplitSettings(context);\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/PrivacyProvider.java", "commit_date": "2014-08-18 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "// NfcManager.getDefaultAdapter calls NfcAdapter.getNfcAdapter\n// http://developer.android.com/reference/android/nfc/NfcManager.html\n", "func_signal": "public static List<XHook> getInstances()", "code": "{\n\tList<XHook> listHook = new ArrayList<XHook>();\n\tlistHook.add(new XNfcAdapter(Methods.getDefaultAdapter, PrivacyManager.cNfc));\n\tlistHook.add(new XNfcAdapter(Methods.getNfcAdapter, PrivacyManager.cNfc));\n\treturn listHook;\n}", "path": "XPrivacy/src/biz/bokhorst/xprivacy/XNfcAdapter.java", "commit_date": "2014-02-20 00:00:00", "repo_name": "M66B/XPrivacy", "stars": 2071, "license": "gpl-3.0", "language": "java", "size": 43526}
{"docstring": "/**\n * Returns prettyfied usage report.\n */\n", "func_signal": "public void getUsageReport(final OnResultListener1<String> listener)", "code": "{\n    new GetRequest(mContext, mUrl, GetRequest.URI_REPORT, mApiKey, null, result -> {\n        JsonElement json = new JsonParser().parse(result);\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n        listener.onResult(gson.toJson(json));\n    });\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * This is only used for new folder creation, see {@link FolderActivity}.\n */\n", "func_signal": "public void createFolder(Folder folder)", "code": "{\n    synchronized (mConfigLock) {\n        // Add the new folder to the model.\n        mConfig.folders.add(folder);\n        // Send model changes to syncthing, does not require a restart.\n        sendConfig();\n    }\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Get file name from content uri (content://).\n */\n", "func_signal": "private String getDisplayNameFromContentResolver(Uri uri)", "code": "{\n    String displayName = null;\n    String mimeType = getContentResolver().getType(uri);\n    if (mimeType != null) {\n        String displayNameColumn;\n        if (mimeType.startsWith(\"image/\")) {\n            displayNameColumn = MediaStore.Images.ImageColumns.DISPLAY_NAME;\n        } else if (mimeType.startsWith(\"video/\")) {\n            displayNameColumn = MediaStore.Video.VideoColumns.DISPLAY_NAME;\n\n        } else if (mimeType.startsWith(\"audio/\")) {\n            displayNameColumn = MediaStore.Audio.AudioColumns.DISPLAY_NAME;\n\n        } else {\n            displayNameColumn = MediaStore.Files.FileColumns.DISPLAY_NAME;\n        }\n\n        Cursor cursor = getContentResolver().query(\n                uri,\n                new String[]{displayNameColumn},\n                null,\n                null,\n                null\n        );\n        if (cursor != null) {\n            cursor.moveToFirst();\n            displayName = cursor.getString(cursor.getColumnIndex(displayNameColumn));\n        }\n        if (cursor != null) {\n            cursor.close();\n        }\n    }\n    return displayName;\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/activities/ShareActivity.java", "commit_date": "2019-06-04 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Get the previously selected sub directory for the currently selected Syncthing folder.\n */\n", "func_signal": "private String getSavedSubDirectory()", "code": "{\n    Folder selectedFolder = (Folder) mFoldersSpinner.getSelectedItem();\n    String savedSubDirectory = \"\";\n\n    if (selectedFolder != null) {\n        savedSubDirectory = PreferenceManager.getDefaultSharedPreferences(this)\n                .getString(PREF_FOLDER_SAVED_SUBDIRECTORY + selectedFolder.id, \"\");\n    }\n\n    return savedSubDirectory;\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/activities/ShareActivity.java", "commit_date": "2019-06-04 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Permanently ignore a folder share request.\n * Ignored folders will not trigger the \"FolderRejected\" event\n * in {@link EventProcessor#onEvent}.\n */\n", "func_signal": "public void ignoreFolder(String deviceId, String folderId)", "code": "{\n    synchronized (mConfigLock) {\n        for (Device device : mConfig.devices) {\n            if (deviceId.equals(device.deviceID)) {\n                /**\n                 * Check if the folder has already been ignored.\n                 */\n                for (IgnoredFolder ignoredFolder : device.ignoredFolders) {\n                    if (folderId.equals(ignoredFolder.id)) {\n                        // Folder already ignored.\n                        Log.d(TAG, \"Folder [\" + folderId + \"] already ignored on device [\" + deviceId + \"]\");\n                        return;\n                    }\n                }\n\n                /**\n                 * Ignore folder by moving its corresponding \"pendingFolder\" entry to\n                 * a newly created \"ignoredFolder\" entry.\n                 */\n                IgnoredFolder ignoredFolder = new IgnoredFolder();\n                ignoredFolder.id = folderId;\n                Iterator<PendingFolder> it = device.pendingFolders.iterator();\n                while (it.hasNext()) {\n                    PendingFolder pendingFolder = it.next();\n                    if (folderId.equals(pendingFolder.id)) {\n                        // Move over information stored in the \"pendingFolder\" entry.\n                        ignoredFolder.label = pendingFolder.label;\n                        ignoredFolder.time = pendingFolder.time;\n                        it.remove();\n                        break;\n                    }\n                }\n                device.ignoredFolders.add(ignoredFolder);\n                if (BuildConfig.DEBUG) {\n                    Log.v(TAG, \"device.pendingFolders = \" + new Gson().toJson(device.pendingFolders));\n                    Log.v(TAG, \"device.ignoredFolders = \" + new Gson().toJson(device.ignoredFolders));\n                }\n                sendConfig();\n                Log.d(TAG, \"Ignored folder [\" + folderId + \"] announced by device [\" + deviceId + \"]\");\n\n                // Given deviceId handled.\n                break;\n            }\n        }\n    }\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Get file name from uri.\n */\n", "func_signal": "private String getDisplayNameForUri(Uri uri)", "code": "{\n    String displayName;\n\n    if (!ContentResolver.SCHEME_CONTENT.equals(uri.getScheme())) {\n        displayName = uri.getLastPathSegment();\n    } else {\n        displayName = getDisplayNameFromContentResolver(uri);\n        if (displayName == null) {\n            // last chance to have a name\n            displayName = uri.getLastPathSegment().replaceAll(\"\\\\s\", \"\");\n        }\n\n        // Add best possible extension\n        int index = displayName.lastIndexOf(\".\");\n        if (index == -1 || MimeTypeMap.getSingleton()\n                .getMimeTypeFromExtension(displayName.substring(index + 1)) == null) {\n            String mimeType = this.getContentResolver().getType(uri);\n            String extension = MimeTypeMap.getSingleton()\n                    .getExtensionFromMimeType(mimeType);\n            if (extension != null) {\n                displayName += \".\" + extension;\n            }\n        }\n    }\n\n    // Replace path separator characters to avoid inconsistent paths\n    return displayName != null ? displayName.replaceAll(\"/\", \"-\") : null;\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/activities/ShareActivity.java", "commit_date": "2019-06-04 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Refreshes ListView by updating devices and info.\n *\n * Also creates adapter if it doesn't exist yet.\n */\n", "func_signal": "private void updateList()", "code": "{\n    SyncthingActivity activity = (SyncthingActivity) getActivity();\n    if (activity == null || getView() == null || activity.isFinishing()) {\n        return;\n    }\n    RestApi restApi = activity.getApi();\n    if (restApi == null || !restApi.isConfigLoaded()) {\n        return;\n    }\n    List<Device> devices = restApi.getDevices(false);\n    if (devices == null) {\n        return;\n    }\n    if (mAdapter == null) {\n        mAdapter = new DevicesAdapter(activity);\n        setListAdapter(mAdapter);\n    }\n\n    // Prevent scroll position reset due to list update from clear().\n    mAdapter.setNotifyOnChange(false);\n    mAdapter.clear();\n    Collections.sort(devices, DEVICES_COMPARATOR);\n    mAdapter.addAll(devices);\n    mAdapter.updateConnections(restApi);\n    mAdapter.notifyDataSetChanged();\n    setListShown(true);\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/fragments/DeviceListFragment.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Override folder changes. This is the same as hitting\n * the \"override changes\" button from the web UI.\n */\n", "func_signal": "public void overrideChanges(String folderId)", "code": "{\n    Log.d(TAG, \"overrideChanges '\" + folderId + \"'\");\n    new PostRequest(mContext, mUrl, PostRequest.URI_DB_OVERRIDE, mApiKey,\n        ImmutableMap.of(\"folder\", folderId), null);\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Retrieves the events that have accumulated since the given event id.\n *\n * The OnReceiveEventListeners onEvent method is called for each event.\n */\n", "func_signal": "public final void getEvents(final long sinceId, final long limit, final OnReceiveEventListener listener)", "code": "{\n    Map<String, String> params =\n            ImmutableMap.of(\"since\", String.valueOf(sinceId), \"limit\", String.valueOf(limit));\n    new GetRequest(mContext, mUrl, GetRequest.URI_EVENTS, mApiKey, params, result -> {\n        JsonArray jsonEvents = new JsonParser().parse(result).getAsJsonArray();\n        long lastId = 0;\n\n        for (int i = 0; i < jsonEvents.size(); i++) {\n            JsonElement json = jsonEvents.get(i);\n            Event event = new Gson().fromJson(json, Event.class);\n\n            if (lastId < event.id)\n                lastId = event.id;\n\n            listener.onEvent(event);\n        }\n\n        listener.onDone(lastId);\n    });\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Requests new connection info for all devices visible in listView.\n */\n", "func_signal": "public void updateConnections(RestApi api)", "code": "{\n    for (int i = 0; i < getCount(); i++) {\n        api.getConnections(this::onReceiveConnections);\n    }\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/views/DevicesAdapter.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Normalizes a given device ID.\n */\n", "func_signal": "private void normalizeDeviceId(String id, OnResultListener1<String> listener,\n                               OnResultListener1<String> errorListener)", "code": "{\n    new GetRequest(mContext, mUrl, GetRequest.URI_DEVICEID, mApiKey,\n            ImmutableMap.of(\"id\", id), result -> {\n        JsonObject json = new JsonParser().parse(result).getAsJsonObject();\n        JsonElement normalizedId = json.get(\"id\");\n        JsonElement error = json.get(\"error\");\n        if (normalizedId != null)\n            listener.onResult(normalizedId.getAsString());\n        if (error != null)\n            errorListener.onResult(error.getAsString());\n    });\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Returns a list of all existing devices.\n *\n * @param includeLocal True if the local device should be included in the result.\n */\n", "func_signal": "public List<Device> getDevices(boolean includeLocal)", "code": "{\n    List<Device> devices;\n    synchronized (mConfigLock) {\n        devices = deepCopy(mConfig.devices, new TypeToken<List<Device>>(){}.getType());\n    }\n\n    Iterator<Device> it = devices.iterator();\n    while (it.hasNext()) {\n        Device device = it.next();\n        boolean isLocalDevice = Objects.equal(mLocalDeviceId, device.deviceID);\n        if (!includeLocal && isLocalDevice) {\n            it.remove();\n            break;\n        }\n    }\n    return devices;\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Requests and parses information about current system status and resource usage.\n */\n", "func_signal": "public void getSystemInfo(OnResultListener1<SystemInfo> listener)", "code": "{\n    new GetRequest(mContext, mUrl, GetRequest.URI_SYSTEM, mApiKey, null, result ->\n            listener.onResult(new Gson().fromJson(result, SystemInfo.class)));\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Returns status information about the folder with the given id.\n */\n", "func_signal": "public void getFolderStatus(final String folderId, final OnResultListener2<String, FolderStatus> listener)", "code": "{\n    new GetRequest(mContext, mUrl, GetRequest.URI_STATUS, mApiKey,\n                ImmutableMap.of(\"folder\", folderId), result -> {\n        FolderStatus m = new Gson().fromJson(result, FolderStatus.class);\n        mCachedFolderStatuses.put(folderId, m);\n        listener.onResult(folderId, m);\n    });\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Generate file name for new file.\n */\n", "func_signal": "private String generateDisplayName()", "code": "{\n    Date date = new Date(System.currentTimeMillis());\n    DateFormat df = DateFormat.getDateTimeInstance();\n    return String.format(getResources().getString(R.string.file_name_template),\n            df.format(date));\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/activities/ShareActivity.java", "commit_date": "2019-06-04 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Returns a deep copy of object.\n *\n * This method uses Gson and only works with objects that can be converted with Gson.\n */\n", "func_signal": "private <T> T deepCopy(T object, Type type)", "code": "{\n    Gson gson = new Gson();\n    return gson.fromJson(gson.toJson(object, type), type);\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Returns connection info for the local device and all connected devices.\n */\n", "func_signal": "public void getConnections(final OnResultListener1<Connections> listener)", "code": "{\n    new GetRequest(mContext, mUrl, GetRequest.URI_CONNECTIONS, mApiKey, null, result -> {\n        Long now = System.currentTimeMillis();\n        Long msElapsed = now - mPreviousConnectionTime;\n        if (msElapsed < Constants.GUI_UPDATE_INTERVAL) {\n            listener.onResult(deepCopy(mPreviousConnections.get(), Connections.class));\n            return;\n        }\n\n        mPreviousConnectionTime = now;\n        Connections connections = new Gson().fromJson(result, Connections.class);\n        for (Map.Entry<String, Connections.Connection> e : connections.connections.entrySet()) {\n            e.getValue().completion = mCompletion.getDeviceCompletion(e.getKey());\n\n            Connections.Connection prev =\n                    (mPreviousConnections.isPresent() && mPreviousConnections.get().connections.containsKey(e.getKey()))\n                            ? mPreviousConnections.get().connections.get(e.getKey())\n                            : new Connections.Connection();\n            e.getValue().setTransferRate(prev, msElapsed);\n        }\n        Connections.Connection prev =\n                mPreviousConnections.transform(c -> c.total).or(new Connections.Connection());\n        connections.total.setTransferRate(prev, msElapsed);\n        mPreviousConnections = Optional.of(connections);\n        listener.onResult(deepCopy(connections, Connections.class));\n    });\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Sends current config to Syncthing.\n * Will result in a \"ConfigSaved\" event.\n * EventProcessor will trigger this.reloadConfig().\n */\n", "func_signal": "private void sendConfig()", "code": "{\n    String jsonConfig;\n    synchronized (mConfigLock) {\n        jsonConfig = new Gson().toJson(mConfig);\n    }\n    new PostConfigRequest(mContext, mUrl, mApiKey, jsonConfig, null);\n    mOnConfigChangedListener.onConfigChanged();\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Initialize Log.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.activity_log);\n    setTitle(R.string.syncthing_log_title);\n\n    if (savedInstanceState != null) {\n        mSyncthingLog = savedInstanceState.getBoolean(\"syncthingLog\");\n        invalidateOptionsMenu();\n    }\n\n    mLog = findViewById(R.id.log);\n    mScrollView = findViewById(R.id.scroller);\n\n    updateLog();\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/activities/LogActivity.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * Undo ignoring devices and folders.\n */\n", "func_signal": "public void undoIgnoredDevicesAndFolders()", "code": "{\n    Log.d(TAG, \"Undo ignoring devices and folders ...\");\n    synchronized (mConfigLock) {\n        mConfig.remoteIgnoredDevices.clear();\n        for (Device device : mConfig.devices) {\n            device.ignoredFolders.clear();\n        }\n    }\n}", "path": "syncthing-android/app/src/main/java/com/nutomic/syncthingandroid/service/RestApi.java", "commit_date": "2018-10-03 00:00:00", "repo_name": "syncthing/syncthing-android", "stars": 2925, "license": "mpl-2.0", "language": "java", "size": 22625}
{"docstring": "/**\n * 2\u05aen\n * \n * @param otherCluster\n *            \u023d\u03f5\u0134\n * @param n\n *            \u0131\u07f5\u013f\n * @return\n */\n", "func_signal": "public ArrayList<int[]> calNearestEdge(Cluster otherCluster, int n)", "code": "{\n\tint count = 0;\n\tdouble distance = 0;\n\tdouble minDistance = Integer.MAX_VALUE;\n\tPoint point1 = null;\n\tPoint point2 = null;\n\tArrayList<int[]> edgeList = new ArrayList<>();\n\tArrayList<Point> pointList1 = (ArrayList<Point>) points.clone();\n\tArrayList<Point> pointList2 = null;\n\tCluster c2 = null;\n\t\n\ttry {\n\t\tc2 = (Cluster) otherCluster.clone();\n\t\tpointList2 = c2.points;\n\t} catch (CloneNotSupportedException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\n\tint[] tempEdge;\n\t// \u046d\u00ff\u03b5\n\twhile (count < n) {\n\t\ttempEdge = new int[2];\n\t\tminDistance = Integer.MAX_VALUE;\n\t\t\n\t\tfor (Point p1 : pointList1) {\n\t\t\tfor (Point p2 :  pointList2) {\n\t\t\t\tdistance = p1.ouDistance(p2);\n\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\tpoint1 = p1;\n\t\t\t\t\tpoint2 = p2;\n\t\t\t\t\ttempEdge[0] = p1.id;\n\t\t\t\t\ttempEdge[1] = p2.id;\n\n\t\t\t\t\tminDistance = distance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpointList1.remove(point1);\n\t\tpointList2.remove(point2);\n\t\tedgeList.add(tempEdge);\n\t\tcount++;\n\t}\n\n\treturn edgeList;\n}", "path": "DataMiningAlgorithm/Others/DataMining_Chameleon/Cluster.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0421\n * \n * @param stack\n *            \u013d\u06b5id\u057b\n * @param currentPosition\n *            \u01f0\u0435\u0132\u03a3\u04b5\u0135\u06bc\n * @param next\n *            \u052a\u04bb\u07f5\u0135\u02b1\u02b6\n */\n", "func_signal": "private void dfsSearch(Stack<Integer> stack, int currentPosition, int next)", "code": "{\n\tif (currentPosition >= edgeSeqs.size()) {\n\t\tstack.pop();\n\t\t// \u023d\u03f5\uda9f\udd7b\n\t\treturn;\n\t}\n\n\twhile (!stack.isEmpty()) {\n\t\tint x = stack.pop();\n\t\tfor (int i = 0; i < graph.edgeNexts.get(x).size(); i++) {\n\t\t\t// \u04f4id\u06b5\u04f5\u0135\u0461\u02211\u03aa\u04bb\n\t\t\tint y = graph.edgeNexts.get(x).get(i);\n\t\t\t// 2\u0275\u0131\u047e\u00f9\n\t\t\tif (f[x][y] || f[y][x]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// y\u03b4\u00f9\n\t\t\tif (g2s[y] < 0) {\n\t\t\t\t// \u00bd\u052a\n\t\t\t\tEdge e = new Edge(g2s[x], next, graph.nodeLabels.get(x),\n\t\t\t\t\t\tgraph.edgeLabels.get(x).get(i),\n\t\t\t\t\t\tgraph.nodeLabels.get(y));\n\n\t\t\t\t// \u04e6\u03bb\u00f5\u0131\u023d\u03e3\u0421\u02a7\n\t\t\t\tint compareResult = e.compareWith(edgeSeqs\n\t\t\t\t\t\t.get(currentPosition));\n\t\t\t\tif (compareResult == Edge.EDGE_SMALLER) {\n\t\t\t\t\tisMin = false;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (compareResult == Edge.EDGE_LARGER) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// \n\t\t\t\tg2s[y] = next;\n\t\t\t\tf[x][y] = true;\n\t\t\t\tf[y][x] = true;\n\t\t\t\tstack.push(y);\n\t\t\t\tdfsSearch(stack, currentPosition + 1, next + 1);\n\t\t\t\tif (!isMin) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tf[x][y] = false;\n\t\t\t\tf[y][x] = false;\n\t\t\t\tg2s[y] = -1;\n\t\t\t} else {\n\t\t\t\t// \u047e\u00f9\u02b1\uda4e\udf32\u04aa\u052aid\u02b6\n\t\t\t\t// \u00bd\u052a\n\t\t\t\tEdge e = new Edge(g2s[x], g2s[y], graph.nodeLabels.get(x),\n\t\t\t\t\t\tgraph.edgeLabels.get(x).get(i),\n\t\t\t\t\t\tgraph.nodeLabels.get(y));\n\n\t\t\t\t// \u04e6\u03bb\u00f5\u0131\u023d\u03e3\u0421\u02a7\n\t\t\t\tint compareResult = e.compareWith(edgeSeqs\n\t\t\t\t\t\t.get(currentPosition));\n\t\t\t\tif (compareResult == Edge.EDGE_SMALLER) {\n\t\t\t\t\tisMin = false;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (compareResult == Edge.EDGE_LARGER) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// \n\t\t\t\tg2s[y] = next;\n\t\t\t\tf[x][y] = true;\n\t\t\t\tf[y][x] = true;\n\t\t\t\tstack.push(y);\n\t\t\t\tdfsSearch(stack, currentPosition + 1, next);\n\t\t\t\tif (!isMin) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tf[x][y] = false;\n\t\t\t\tf[y][x] = false;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "DataMiningAlgorithm/GraphMining/DataMining_GSpan/DFSCodeTraveler.java", "commit_date": "2015-02-23 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u05b5\n * \n * @param codeArray\n */\n", "func_signal": "private int calCodeAdaptiveValue(int[] codeArray)", "code": "{\n\tint result = 0;\n\tint x1 = 0;\n\tint x2 = 0;\n\tint[] array1 = new int[codeNum];\n\tint[] array2 = new int[codeNum];\n\n\tfor (int i = 0, k = 0; i < codeArray.length; i++, k++) {\n\t\tif (k < codeNum) {\n\t\t\tarray1[k] = codeArray[i];\n\t\t} else {\n\t\t\tarray2[k - codeNum] = codeArray[i];\n\t\t}\n\t}\n\n\t// \u05b5\u0135\n\tx1 = binaryArrayToNum(array1);\n\tx2 = binaryArrayToNum(array2);\n\tresult = x1 * x1 + x2 * x2;\n\n\treturn result;\n}", "path": "DataMiningAlgorithm/Others/DataMining_GA/GATool.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0461\u05b5\u03f8\u07f5\u0138\u0174\u04bb\n * \n * @param initCodes\n *            \u02bc\n * @return\n */\n", "func_signal": "private ArrayList<int[]> selectOperate(ArrayList<int[]> initCodes)", "code": "{\n\tdouble randomNum = 0;\n\tdouble sumAdaptiveValue = 0;\n\tArrayList<int[]> resultCodes = new ArrayList<>();\n\tdouble[] adaptiveValue = new double[initSetsNum];\n\n\tfor (int i = 0; i < initSetsNum; i++) {\n\t\tadaptiveValue[i] = calCodeAdaptiveValue(initCodes.get(i));\n\t\tsumAdaptiveValue += adaptiveValue[i];\n\t}\n\n\t// \u05ea\u0278\u02b5\u02bd\u04bb\n\tfor (int i = 0; i < initSetsNum; i++) {\n\t\tadaptiveValue[i] = adaptiveValue[i] / sumAdaptiveValue;\n\t}\n\n\tfor (int i = 0; i < initSetsNum; i++) {\n\t\trandomNum = random.nextInt(100) + 1;\n\t\trandomNum = randomNum / 100;\n\t\t//\u03aa1.0\u07b7\u0436\u03f5\u0123,\u073a\u037b\u07bd\u04fd1.0\u0221\u03aa0.99\u0436\n\t\tif(randomNum == 1){\n\t\t\trandomNum = randomNum - 0.01;\n\t\t}\n\n\t\tsumAdaptiveValue = 0;\n\t\t// \u0237\n\t\tfor (int j = 0; j < initSetsNum; j++) {\n\t\t\tif (randomNum > sumAdaptiveValue\n\t\t\t\t\t&& randomNum <= sumAdaptiveValue + adaptiveValue[j]) {\n\t\t\t\t//\u00ff\u0137\u02bd\u0638\n\t\t\t\tresultCodes.add(initCodes.get(j).clone());\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tsumAdaptiveValue += adaptiveValue[j];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn resultCodes;\n}", "path": "DataMiningAlgorithm/Others/DataMining_GA/GATool.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u077c\u00bc\u0537\u05b8\ued7d\n */\n", "func_signal": "private void recordSpiltToCollection()", "code": "{\n\tString attrName;\n\tArrayList<String> attrList;\n\tArrayList<Record> recordList;\n\tHashMap<String, String> collectionAttrValues;\n\tRecordCollection collection;\n\tcollectionList = new ArrayList<>();\n\n\tfor (Map.Entry entry : conditionAttr.entrySet()) {\n\t\tattrName = (String) entry.getKey();\n\t\tattrList = (ArrayList<String>) entry.getValue();\n\n\t\tfor (String s : attrList) {\n\t\t\trecordList = new ArrayList<>();\n\t\t\t// \u0470\u03aas\u077c\u00bc\ubd7d\n\t\t\tfor (Record record : totalRecords) {\n\t\t\t\tif (record.isContainedAttr(s)) {\n\t\t\t\t\trecordList.add(record);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcollectionAttrValues = new HashMap<>();\n\t\t\tcollectionAttrValues.put(attrName, s);\n\t\t\tcollection = new RecordCollection(collectionAttrValues,\n\t\t\t\t\trecordList);\n\n\t\t\tcollectionList.add(collection);\n\t\t}\n\t}\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \n * \n * @param crossCodes\n *            \u013d\n * @return\n */\n", "func_signal": "private ArrayList<int[]> variationOperate(ArrayList<int[]> crossCodes)", "code": "{\n\t// \n\tint variationPoint = 0;\n\tArrayList<int[]> resultCodes = new ArrayList<>();\n\n\tfor (int[] array : crossCodes) {\n\t\tvariationPoint = random.nextInt(codeNum * 2);\n\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t// \u0431\n\t\t\tif (i == variationPoint) {\n\t\t\t\tarray[i] = (array[i] == 0 ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tresultCodes.add(array);\n\t}\n\n\treturn resultCodes;\n}", "path": "DataMiningAlgorithm/Others/DataMining_GA/GATool.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0461\u04bb\u00b5\u013c\n * \n * @return\n */\n", "func_signal": "private RecordCollection[] selectTheSameClassRC()", "code": "{\n\tRecordCollection[] resultRc = new RecordCollection[2];\n\tresultRc[0] = new RecordCollection();\n\tresultRc[1] = new RecordCollection();\n\tString attrValue;\n\n\t// \u04b3\u04bb\u00bc\u013e\u03aa\u04bb\n\tattrValue = totalRecords.get(0).getRecordDecisionClass();\n\tfor (Record r : totalRecords) {\n\t\tif (attrValue.equals(r.getRecordDecisionClass())) {\n\t\t\tresultRc[0].getRecord().add(r);\n\t\t}else{\n\t\t\tresultRc[1].getRecord().add(r);\n\t\t}\n\t}\n\n\treturn resultRc;\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \n * \n * @param selectedCodes\n *            \u03f2\u0461\u0131\n * @return\n */\n", "func_signal": "private ArrayList<int[]> crossOperate(ArrayList<int[]> selectedCodes)", "code": "{\n\tint randomNum = 0;\n\t// \n\tint crossPoint = 0;\n\tArrayList<int[]> resultCodes = new ArrayList<>();\n\t// \u0423\n\tArrayList<int[]> randomCodeSeqs = new ArrayList<>();\n\n\t// \n\twhile (selectedCodes.size() > 0) {\n\t\trandomNum = random.nextInt(selectedCodes.size());\n\n\t\trandomCodeSeqs.add(selectedCodes.get(randomNum));\n\t\tselectedCodes.remove(randomNum);\n\t}\n\n\tint temp = 0;\n\tint[] array1;\n\tint[] array2;\n\t// \n\tfor (int i = 1; i < randomCodeSeqs.size(); i++) {\n\t\tif (i % 2 == 1) {\n\t\t\tarray1 = randomCodeSeqs.get(i - 1);\n\t\t\tarray2 = randomCodeSeqs.get(i);\n\t\t\tcrossPoint = random.nextInt(2 * codeNum - 1) + 1;\n\n\t\t\t// \u043d\u03bb\u00fa\u0131\n\t\t\tfor (int j = 0; j < 2 * codeNum; j++) {\n\t\t\t\tif (j >= crossPoint) {\n\t\t\t\t\ttemp = array1[j];\n\t\t\t\t\tarray1[j] = array2[j];\n\t\t\t\t\tarray2[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// \ubd7d\n\t\t\tresultCodes.add(array1);\n\t\t\tresultCodes.add(array2);\n\t\t}\n\t}\n\n\treturn resultCodes;\n}", "path": "DataMiningAlgorithm/Others/DataMining_GA/GATool.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u00bc\n * \n * @param rcList\n *            \u00bc\n */\n", "func_signal": "public void printRecordCollectionList(ArrayList<RecordCollection> rcList)", "code": "{\n\tfor (RecordCollection rc : rcList) {\n\t\tSystem.out.print(\"{\");\n\t\tfor (Record r : rc.getRecord()) {\n\t\t\tSystem.out.print(r.getName() + \", \");\n\t\t}\n\t\tSystem.out.println(\"}\");\n\t}\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0779\u0435\u05aa\u02b6\u03f5\u0373\u0368\u043c\u03f5\u013d\n * \n * @param ksCollection\n *            \u047e\u05aa\u02b6\u03f5\u0373\u013c\n * @param map\n *            \u03b4\u0439\u013c\n * @param preCollection\n *            \u01f0\u047e\u0368\u013c\n */\n", "func_signal": "private void recurrenceComputeKS(ArrayList<RecordCollection> ksCollections,\n\t\tHashMap<String, ArrayList<RecordCollection>> map,\n\t\tRecordCollection preCollection)", "code": "{\n\tString attrName = null;\n\tRecordCollection tempCollection;\n\tArrayList<RecordCollection> cList = null;\n\tHashMap<String, ArrayList<RecordCollection>> mapCopy = new HashMap<>();\n\t\n\t//\u047e\u00fb\u02e3\u05b1\n\tif(map.size() == 0){\n\t\tksCollections.add(preCollection);\n\t\treturn;\n\t}\n\n\tfor (Map.Entry entry : map.entrySet()) {\n\t\tcList = (ArrayList<RecordCollection>) entry.getValue();\n\t\tmapCopy.put((String) entry.getKey(), cList);\n\t}\n\n\t// \u02211\n\tfor (Map.Entry entry : map.entrySet()) {\n\t\tattrName = (String) entry.getKey();\n\t\tcList = (ArrayList<RecordCollection>) entry.getValue();\n\t\tbreak;\n\t}\n\n\tmapCopy.remove(attrName);\n\tfor (RecordCollection rc : cList) {\n\t\t// \u0461\u0535\u04bb\u03fd\u043d\u38ec\u023b\u0674\u03b5\u0779\n\t\ttempCollection = preCollection.overlapCalculate(rc);\n\n\t\tif (tempCollection == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// map\u047e\u00fb,\u02f5\u0779\u9d7d\u0377\n\t\tif (mapCopy.size() == 0) {\n\t\t\tksCollections.add(tempCollection);\n\t\t} else {\n\t\t\trecurrenceComputeKS(ksCollections, mapCopy, tempCollection);\n\t\t}\n\t}\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0779\u053c\n * \n * @param resultAttr\n *            \u047e\u053c\n * @param reductAttr\n *            \u04aa\u053c\n * @param remainAttr\n *            \u02a3\n * @param sameClassRc\n *            \u00bd\u01bc\u03f5\u036c\u0f2f\n */\n", "func_signal": "private void recurrenceFindingReduct(\n\t\tArrayList<ArrayList<String>> resultAttr,\n\t\tArrayList<String> reductAttr, ArrayList<String> remainAttr,\n\t\tRecordCollection[] sameClassRc)", "code": "{\n\tKnowledgeSystem ks;\n\tArrayList<RecordCollection> ksCollections;\n\tArrayList<String> copyRemainAttr;\n\tArrayList<String> copyReductAttr;\n\tHashMap<String, ArrayList<RecordCollection>> collectionMap;\n\tRecordCollection upRc1;\n\tRecordCollection downRc1;\n\tRecordCollection upRc2;\n\tRecordCollection downRc2;\n\n\tcollectionMap = constructCollectionMap(reductAttr);\n\tksCollections = computeKnowledgeSystem(collectionMap);\n\tks = new KnowledgeSystem(ksCollections);\n\t\n\tdownRc1 = ks.getDownSimilarRC(sameClassRc[0]);\n\tupRc1 = ks.getUpSimilarRC(sameClassRc[0]);\n\tdownRc2 = ks.getDownSimilarRC(sameClassRc[1]);\n\tupRc2 = ks.getUpSimilarRC(sameClassRc[1]);\n\n\t// \u00bd\u00fb\u022b\u052d\u03aa\u0532\u0731\u053c\n\tif (!upRc1.isCollectionSame(sameClassRc[0])\n\t\t\t|| !downRc1.isCollectionSame(sameClassRc[0])) {\n\t\treturn;\n\t}\n\t//\u0378\u0dbc\u023d\n\tif (!upRc2.isCollectionSame(sameClassRc[1])\n\t\t\t|| !downRc2.isCollectionSame(sameClassRc[1])) {\n\t\treturn;\n\t}\n\n\t// \ubd7d\n\tresultAttr.add(reductAttr);\n\t//\u05bb\u02a31\u0532\u053c\n\tif (remainAttr.size() == 1) {\n\t\treturn;\n\t}\n\n\tfor (String s : remainAttr) {\n\t\tcopyRemainAttr = (ArrayList<String>) remainAttr.clone();\n\t\tcopyReductAttr = (ArrayList<String>) reductAttr.clone();\n\t\tcopyRemainAttr.remove(s);\n\t\tcopyReductAttr.add(s);\n\t\trecurrenceFindingReduct(resultAttr, copyReductAttr, copyRemainAttr,\n\t\t\t\tsameClassRc);\n\t}\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u07f9\n * @param reductAttrArray\n * \u053c\n */\n", "func_signal": "public void printRules(ArrayList<ArrayList<String>> reductAttrArray)", "code": "{\n\t//\u047e\u0139\uda4e\udf31\u0638\n\tArrayList<String> rulesArray;\n\tString rule;\n\t\n\tfor(ArrayList<String> ra: reductAttrArray){\n\t\trulesArray = new ArrayList<>();\n\t\tSystem.out.print(\"\u053c\u0523\");\n\t\tfor(String s: ra){\n\t\t\tSystem.out.print(s + \",\");\n\t\t}\n\t\tSystem.out.println();\n\t\t\n\t\tfor(Record r: totalRecords){\n\t\t\trule = r.getDecisionRule(ra);\n\t\t\tif(!rulesArray.contains(rule)){\n\t\t\t\trulesArray.add(rule);\n\t\t\t\tSystem.out.println(rule);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t} \n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u06b5\u01f0\u037c\u0470\u0237\u037c\n * \n * @param currentPosition\n *            \u01f0\u04b5\u03bb\n */\n", "func_signal": "public void dfsSearchEdge(int currentPosition)", "code": "{\n\tint rmPosition = 0;\n\t// \u04b5\u02e3\u06b5\u01f0\u037c\u00b7\u0470\u04bf\u0735\u0131\n\tif (currentPosition >= edgeSeq.size()) {\n\t\trmPosition = 0;\n\t\twhile (rmPosition >= 0) {\n\t\t\tint gId = s2g[rmPosition];\n\t\t\t// \u06b4\u02f5\u3e3d\u0470\u04bf\u0735\u0131\n\t\t\tfor (int i = 0; i < graph.edgeNexts.get(gId).size(); i++) {\n\t\t\t\tint gId2 = graph.edgeNexts.get(gId).get(i);\n\t\t\t\t// \u047e\u00f9\n\t\t\t\tif (f[gId][gId2] || f[gId][gId2]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// \u00b7\u04f1\u07f7\u03aa2\u04bb\u03aa\u04bd\u06b5\u04e3\u06b6\u03aa\u00b7 \u0135\n\t\t\t\t// \u04b5\u0135\u00fb\u0431\u00f9\u053d\u0431\u07f5\u0579\n\t\t\t\tif (g2s[gId2] < 0) {\n\t\t\t\t\tg2s[gId2] = next;\n\t\t\t\t\tEdge e = new Edge(g2s[gId], g2s[gId2],\n\t\t\t\t\t\t\tgraph.nodeLabels.get(gId), graph.edgeLabels\n\t\t\t\t\t\t\t\t\t.get(gId).get(i),\n\t\t\t\t\t\t\tgraph.nodeLabels.get(gId2));\n\t\t\t\t\t// \u00bd\u04f1\u07fc\ubf2f\n\t\t\t\t\tchildEdge.add(e);\n\t\t\t\t} else {\n\t\t\t\t\tboolean flag = true;\n\t\t\t\t\t// \u047e\u06a3\u0436\u01f2\u04b5\u0135\n\t\t\t\t\tfor (int j = 0; j < graph.edgeNexts.get(gId2).size(); j++) {\n\t\t\t\t\t\tint tempId = graph.edgeNexts.get(gId2).get(j);\n\t\t\t\t\t\tif (g2s[gId2] < g2s[tempId]) {\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (flag) {\n\t\t\t\t\t\tEdge e = new Edge(g2s[gId], g2s[gId2],\n\t\t\t\t\t\t\t\tgraph.nodeLabels.get(gId), graph.edgeLabels\n\t\t\t\t\t\t\t\t\t\t.get(gId).get(i),\n\t\t\t\t\t\t\t\tgraph.nodeLabels.get(gId2));\n\t\t\t\t\t\t// \u00bd\u04f1\u07fc\ubf2f\n\t\t\t\t\t\tchildEdge.add(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// \u04bb\u00b7\u03f5\ua8ec\u04bb\n\t\t\trmPosition = rm[rmPosition];\n\t\t}\n\t\treturn;\n\t}\n\n\tEdge e = edgeSeq.get(currentPosition);\n\t// \u04f5\u0135\n\tint y = e.y;\n\t// \u04f5\u0131\u07f1\n\tint a = e.a;\n\tint gId1 = s2g[e.ix];\n\tint gId2 = 0;\n\n\tfor (int i = 0; i < graph.edgeLabels.get(gId1).size(); i++) {\n\t\t// \u0436\u04f5\u0131\u07f6\u04e6\u0131\n\t\tif (graph.edgeLabels.get(gId1).get(i) != a) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// \u0436\u04f5\u0135\u0131\n\t\tint tempId = graph.edgeNexts.get(gId1).get(i);\n\t\tif (graph.nodeLabels.get(tempId) != y) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tgId2 = tempId;\n\t\t// \u00fb\u00f9\n\t\tif (g2s[gId2] == -1 && s2g[e.iy] == -1) {\n\t\t\tg2s[gId2] = e.iy;\n\t\t\ts2g[e.iy] = gId2;\n\t\t\tf[gId1][gId2] = true;\n\t\t\tf[gId2][gId1] = true;\n\t\t\tdfsSearchEdge(currentPosition + 1);\n\t\t\tf[gId1][gId2] = false;\n\t\t\tf[gId2][gId1] = false;\n\t\t\tg2s[gId2] = -1;\n\t\t\ts2g[e.iy] = -1;\n\t\t} else {\n\t\t\tif (g2s[gId2] != e.iy) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (s2g[e.iy] != gId2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tf[gId1][gId2] = true;\n\t\t\tf[gId2][gId1] = true;\n\t\t\tdfsSearchEdge(currentPosition);\n\t\t\tf[gId1][gId2] = false;\n\t\t\tf[gId2][gId1] = false;\n\t\t}\n\t}\n\n}", "path": "DataMiningAlgorithm/GraphMining/DataMining_GSpan/SubChildTraveler.java", "commit_date": "2015-02-23 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u06f4\u0635\u06b2\u0131\u0228\u063a\n * \n * @return\n */\n", "func_signal": "public double calEC()", "code": "{\n\tint id1 = 0;\n\tint id2 = 0;\n\tweightSum = 0;\n\t\n\tfor (Point p1 : points) {\n\t\tfor (Point p2 : points) {\n\t\t\tid1 = p1.id;\n\t\t\tid2 = p2.id;\n\n\t\t\t// \u03aa\u02f1\u0638\u38ec\u0221id1\u0421\u0136\u04e6\n\t\t\tif (id1 < id2 && ChameleonTool.edges[id1][id2] == 1) {\n\t\t\t\tweightSum += ChameleonTool.weights[id1][id2];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn weightSum;\n}", "path": "DataMiningAlgorithm/Others/DataMining_Chameleon/Cluster.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u05ea\u03aa\u02bd\n * \n * @param binaryArray\n *            \u05ea\u0136\u02bd\n * @param num\n *            \u05ea\n */\n", "func_signal": "private void numToBinaryArray(int[] binaryArray, int num)", "code": "{\n\tint index = 0;\n\tint temp = 0;\n\twhile (num != 0) {\n\t\tbinaryArray[index] = num % 2;\n\t\tindex++;\n\t\tnum /= 2;\n\t}\n\t\n\t//\u01f0\u03b2\u0135\n\tfor(int i=0; i<binaryArray.length/2; i++){\n\t\ttemp = binaryArray[i];\n\t\tbinaryArray[i] = binaryArray[binaryArray.length - 1 - i];\n\t\tbinaryArray[binaryArray.length - 1 - i] = temp;\n\t}\n}", "path": "DataMiningAlgorithm/Others/DataMining_GA/GATool.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u053c\u037c\n * \n * @param reductAttr\n *            \u04aa\u053c\n * @return\n */\n", "func_signal": "private HashMap<String, ArrayList<RecordCollection>> constructCollectionMap(\n\t\tArrayList<String> reductAttr)", "code": "{\n\tString currentAtttrName;\n\tArrayList<RecordCollection> cList;\n\t// \u0536\u04e6\u037c\n\tHashMap<String, ArrayList<RecordCollection>> collectionMap = new HashMap<>();\n\n\t// \u0221\u0532\n\tfor (int i = 1; i < attrNames.length - 1; i++) {\n\t\tcurrentAtttrName = attrNames[i];\n\n\t\t// \u0436\u03f4\u01f7\u04aa\u053c\n\t\tif (reductAttr != null && reductAttr.contains(currentAtttrName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tcList = new ArrayList<>();\n\n\t\tfor (RecordCollection c : collectionList) {\n\t\t\tif (c.isContainedAttrName(currentAtttrName)) {\n\t\t\t\tcList.add(c);\n\t\t\t}\n\t\t}\n\n\t\tcollectionMap.put(currentAtttrName, cList);\n\t}\n\n\treturn collectionMap;\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0131\ubf2f\n * \n * @param finalCodes\n *            \u013d\n */\n", "func_signal": "private void printFinalCodes(ArrayList<int[]> finalCodes)", "code": "{\n\tint j = 0;\n\n\tfor (int[] array : finalCodes) {\n\t\tSystem.out.print(\"\" + (j + 1) + \":\");\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tSystem.out.print(array[i]);\n\t\t}\n\t\tSystem.out.println();\n\t\tj++;\n\t}\n}", "path": "DataMiningAlgorithm/Others/DataMining_GA/GATool.java", "commit_date": "2015-03-26 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0435\u0137\u047c\u03fc\u05aa\u02b6\u03f5\u0373\n */\n", "func_signal": "private ArrayList<RecordCollection> computeKnowledgeSystem(\n\t\tHashMap<String, ArrayList<RecordCollection>> collectionMap)", "code": "{\n\tString attrName = null;\n\tArrayList<RecordCollection> cList = null;\n\t// \u05aa\u02b6\u03f5\u0373\n\tArrayList<RecordCollection> ksCollections;\n\n\tksCollections = new ArrayList<>();\n\n\t// \u02211\n\tfor (Map.Entry entry : collectionMap.entrySet()) {\n\t\tattrName = (String) entry.getKey();\n\t\tcList = (ArrayList<RecordCollection>) entry.getValue();\n\t\tbreak;\n\t}\n\tcollectionMap.remove(attrName);\n\n\tfor (RecordCollection rc : cList) {\n\t\trecurrenceComputeKS(ksCollections, collectionMap, rc);\n\t}\n\n\treturn ksCollections;\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0777pageRank\u05b5\n */\n", "func_signal": "public void printPageRankValue()", "code": "{\n\ttransferMatrix();\n\t// \u03f5\n\tdouble damp = 0.5;\n\t// \u04f8\u02be\n\tdouble[][] A = new double[pageNum][pageNum];\n\tdouble[][] e = new double[pageNum][pageNum];\n\n\t// \u00f9\u02bdA=d*q+(1-d)*e/mm\u03aa\u04b3\u0738,ddamp\n\tdouble temp = (1 - damp) / pageNum;\n\tfor (int i = 0; i < e.length; i++) {\n\t\tfor (int j = 0; j < e[0].length; j++) {\n\t\t\te[i][j] = temp;\n\t\t}\n\t}\n\n\tfor (int i = 0; i < pageNum; i++) {\n\t\tfor (int j = 0; j < pageNum; j++) {\n\t\t\ttemp = damp * linkMatrix[i][j] + e[i][j];\n\t\t\tA[i][j] = temp;\n\n\t\t}\n\t}\n\n\t// \u05b5\u03aa\u0436\u05fc\n\tdouble errorValue = Integer.MAX_VALUE;\n\tdouble[] newPRVector = new double[pageNum];\n\t// \u01bd\u00ffPR\u05b5\u04210.001\u02b1\ufd7d\n\twhile (errorValue > 0.001 * pageNum) {\n\t\tSystem.out.println(\"**********\");\n\t\tfor (int i = 0; i < pageNum; i++) {\n\t\t\ttemp = 0;\n\t\t\t// A*pageRankVector,\u0777,\u05b1pageRankVector\u05b5\n\t\t\tfor (int j = 0; j < pageNum; j++) {\n\t\t\t\t// temp\u00ff\u04b3i\u04b3pageRank\u05b5\n\t\t\t\ttemp += A[i][j] * pageRankVecor[j];\n\t\t\t}\n\n\t\t\t// tempi\u04b3PageRank\u05b5\n\t\t\tnewPRVector[i] = temp;\n\t\t\tSystem.out.println(temp);\n\t\t}\n\n\t\terrorValue = 0;\n\t\tfor (int i = 0; i < pageNum; i++) {\n\t\t\terrorValue += Math.abs(pageRankVecor[i] - newPRVector[i]);\n\t\t\t// \u00b5\u0275\n\t\t\tpageRankVecor[i] = newPRVector[i];\n\t\t}\n\t}\n\n\tString name = null;\n\ttemp = 0;\n\tSystem.out.println(\"--------------------\");\n\tfor (int i = 0; i < pageNum; i++) {\n\t\tSystem.out.println(MessageFormat.format(\"\u04b3{0}pageRank\u05b5{1}\",\n\t\t\t\tpageClass.get(i), pageRankVecor[i]));\n\t\tif (pageRankVecor[i] > temp) {\n\t\t\ttemp = pageRankVecor[i];\n\t\t\tname = pageClass.get(i);\n\t\t}\n\t}\n\tSystem.out.println(MessageFormat.format(\"\u023c\u07f5\u04b3\u03aa{0}\", name));\n}", "path": "DataMiningAlgorithm/LinkMining/DataMining_PageRank/PageRankTool.java", "commit_date": "2015-01-29 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u0434\u05b2\u06bc\u053c\u3de8\n */\n", "func_signal": "public void findingReduct()", "code": "{\n\tRecordCollection[] sameClassRcs;\n\tKnowledgeSystem ks;\n\tArrayList<RecordCollection> ksCollections;\n\t// \u053c\n\tArrayList<String> reductAttr = null;\n\tArrayList<String> attrNameList;\n\t// \u057f\u053c\n\tArrayList<ArrayList<String>> canReductAttrs;\n\tHashMap<String, ArrayList<RecordCollection>> collectionMap;\n\n\tsameClassRcs = selectTheSameClassRC();\n\t// \uff72\u0770\u0578\u0421\u053b9\n\trecordSpiltToCollection();\n\n\tcollectionMap = constructCollectionMap(reductAttr);\n\tksCollections = computeKnowledgeSystem(collectionMap);\n\tks = new KnowledgeSystem(ksCollections);\n\tSystem.out.println(\"\u052d\u02bc\u03f7\u00bd\u01bc\");\n\tks.getDownSimilarRC(sameClassRcs[0]).printRc();\n\tks.getUpSimilarRC(sameClassRcs[0]).printRc();\n\tks.getDownSimilarRC(sameClassRcs[1]).printRc();\n\tks.getUpSimilarRC(sameClassRcs[1]).printRc();\n\n\tattrNameList = new ArrayList<>();\n\tfor (int i = 1; i < attrNames.length - 1; i++) {\n\t\tattrNameList.add(attrNames[i]);\n\t}\n\n\tArrayList<String> remainAttr;\n\tcanReductAttrs = new ArrayList<>();\n\treductAttr = new ArrayList<>();\n\t// \u0535\u0135\u0779\u053c\n\tfor (String s : attrNameList) {\n\t\tremainAttr = (ArrayList<String>) attrNameList.clone();\n\t\tremainAttr.remove(s);\n\t\treductAttr = new ArrayList<>();\n\t\treductAttr.add(s);\n\t\trecurrenceFindingReduct(canReductAttrs, reductAttr, remainAttr,\n\t\t\t\tsameClassRcs);\n\t}\n\t\n\tprintRules(canReductAttrs);\n}", "path": "DataMiningAlgorithm/RoughSets/DataMining_RoughSets/RoughSetsTool.java", "commit_date": "2015-02-16 00:00:00", "repo_name": "linyiqun/DataMiningAlgorithm", "stars": 3798, "license": "None", "language": "java", "size": 535}
{"docstring": "/**\n * \u83b7\u53d6\u6d88\u606f\u52a0\u5de5\u5668\n *\n * @return IMsgMaker\n */\n", "func_signal": "public static IMsgMaker getMsgMaker()", "code": "{\n    IMsgMaker iMsgMaker = null;\n    switch (App.config.getMsgType()) {\n        case MessageTypeEnum.MP_TEMPLATE_CODE:\n            iMsgMaker = new WxMpTemplateMsgMaker();\n            break;\n        case MessageTypeEnum.MA_SUBSCRIBE_CODE:\n            iMsgMaker = new WxMaSubscribeMsgMaker();\n            break;\n        case MessageTypeEnum.KEFU_CODE:\n            iMsgMaker = new WxKefuMsgMaker();\n            break;\n        case MessageTypeEnum.ALI_YUN_CODE:\n            iMsgMaker = new AliyunMsgMaker();\n            break;\n        case MessageTypeEnum.TX_YUN_CODE:\n            iMsgMaker = new TxYunMsgMaker();\n            break;\n        case MessageTypeEnum.HW_YUN_CODE:\n            iMsgMaker = new HwYunMsgMaker();\n            break;\n        case MessageTypeEnum.YUN_PIAN_CODE:\n            iMsgMaker = new YunPianMsgMaker();\n            break;\n        case MessageTypeEnum.EMAIL_CODE:\n            iMsgMaker = new MailMsgMaker();\n            break;\n        case MessageTypeEnum.WX_CP_CODE:\n            iMsgMaker = new WxCpMsgMaker();\n            break;\n        case MessageTypeEnum.HTTP_CODE:\n            iMsgMaker = new HttpMsgMaker();\n            break;\n        case MessageTypeEnum.DING_CODE:\n            iMsgMaker = new DingMsgMaker();\n            break;\n        case MessageTypeEnum.BD_YUN_CODE:\n            iMsgMaker = new BdYunMsgMaker();\n            break;\n        case MessageTypeEnum.UP_YUN_CODE:\n            iMsgMaker = new UpYunMsgMaker();\n            break;\n        case MessageTypeEnum.QI_NIU_YUN_CODE:\n            iMsgMaker = new QiNiuYunMsgMaker();\n            break;\n        default:\n    }\n    return iMsgMaker;\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/logic/msgmaker/MsgMakerFactory.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u7ec4\u7ec7\u4e03\u725b\u4e91\u77ed\u4fe1\u6d88\u606f\n *\n * @param msgData \u6d88\u606f\u4fe1\u606f\n * @return String[]\n */\n", "func_signal": "@Override\npublic Map<String, String> makeMsg(String[] msgData)", "code": "{\n\n    VelocityContext velocityContext = getVelocityContext(msgData);\n    for (Map.Entry<String, String> entry : paramMap.entrySet()) {\n        entry.setValue(TemplateUtil.evaluate(entry.getValue(), velocityContext));\n    }\n    return paramMap;\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/logic/msgmaker/QiNiuYunMsgMaker.java", "commit_date": "2019-09-15 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6a21\u677f\u6d88\u606f\u6570\u636etable\n */\n", "func_signal": "public static void initTemplateDataTable()", "code": "{\n    JTable msgDataTable = getInstance().getTemplateMsgDataTable();\n    String[] headerNames = {\"\u6a21\u677f\u53c2\u6570\", \"\u53c2\u6570\u5bf9\u5e94\u7684\u503c\", \"\u64cd\u4f5c\"};\n    DefaultTableModel model = new DefaultTableModel(null, headerNames);\n    msgDataTable.setModel(model);\n    msgDataTable.updateUI();\n    DefaultTableCellRenderer hr = (DefaultTableCellRenderer) msgDataTable.getTableHeader().getDefaultRenderer();\n    // \u8868\u5934\u5217\u540d\u5c45\u5de6\n    hr.setHorizontalAlignment(DefaultTableCellRenderer.LEFT);\n\n    TableColumnModel tableColumnModel = msgDataTable.getColumnModel();\n    tableColumnModel.getColumn(headerNames.length - 1).\n            setCellRenderer(new TableInCellButtonColumn(msgDataTable, headerNames.length - 1));\n    tableColumnModel.getColumn(headerNames.length - 1).\n            setCellEditor(new TableInCellButtonColumn(msgDataTable, headerNames.length - 1));\n\n    // \u8bbe\u7f6e\u5217\u5bbd\n    tableColumnModel.getColumn(2).setPreferredWidth(46);\n    tableColumnModel.getColumn(2).setMaxWidth(46);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/msg/TxYunMsgForm.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6d88\u606ftab\n */\n", "func_signal": "public static void init(String selectedMsgName)", "code": "{\n    messageEditForm = getInstance();\n    // \u8bbe\u7f6e\u6eda\u52a8\u6761\u901f\u5ea6\n    messageEditForm.getMsgEditScrollPane().getVerticalScrollBar().setUnitIncrement(15);\n    messageEditForm.getMsgEditScrollPane().getVerticalScrollBar().setDoubleBuffered(true);\n\n    MsgFormFactory.getMsgForm().init(selectedMsgName);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/MessageEditForm.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u6e05\u7a7a\u6240\u6709\u754c\u9762\u5b57\u6bb5\n */\n", "func_signal": "public static void clearAllField()", "code": "{\n    getInstance().getMailTitleTextField().setText(\"\");\n    getInstance().getMailCcTextField().setText(\"\");\n    getInstance().getMailFilesTextField().setText(\"\");\n    getInstance().getMailContentPane().setText(\"\");\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/msg/MailMsgForm.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u6e05\u7a7a\u6240\u6709\u754c\u9762\u5b57\u6bb5\n */\n", "func_signal": "public static void clearAllField()", "code": "{\n    getInstance().getMsgTemplateIdTextField().setText(\"\");\n    getInstance().getTemplateDataNameTextField().setText(\"\");\n    getInstance().getTemplateDataValueTextField().setText(\"\");\n    initTemplateDataTable();\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/msg/TxYunMsgForm.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * @noinspection ALL\n */\n", "func_signal": "private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont)", "code": "{\n    if (currentFont == null) return null;\n    String resultName;\n    if (fontName == null) {\n        resultName = currentFont.getName();\n    } else {\n        Font testFont = new Font(fontName, Font.PLAIN, 10);\n        if (testFont.canDisplay('a') && testFont.canDisplay('1')) {\n            resultName = fontName;\n        } else {\n            resultName = currentFont.getName();\n        }\n    }\n    Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());\n    boolean isMac = System.getProperty(\"os.name\", \"\").toLowerCase(Locale.ENGLISH).startsWith(\"mac\");\n    Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());\n    return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/msg/TxYunMsgForm.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    mailPanel = new JPanel();\n    mailPanel.setLayout(new GridLayoutManager(5, 3, new Insets(8, 8, 8, 8), -1, -1));\n    mailPanel.setMinimumSize(new Dimension(-1, -1));\n    final JLabel label1 = new JLabel();\n    label1.setText(\"\u90ae\u4ef6\u6807\u9898\");\n    mailPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    final JLabel label2 = new JLabel();\n    label2.setText(\"\u9644\u4ef6\");\n    mailPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    mailTitleTextField = new JTextField();\n    mailPanel.add(mailTitleTextField, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    mailContentPane = new JEditorPane();\n    mailContentPane.setBackground(new Color(-12236470));\n    mailContentPane.setContentType(\"text/html\");\n    mailContentPane.setText(\"<html>\\r\\n  <head>\\r\\n    \\r\\n  </head>\\r\\n  <body>\\r\\n  </body>\\r\\n</html>\\r\\n\");\n    mailPanel.add(mailContentPane, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));\n    final JLabel label3 = new JLabel();\n    label3.setText(\"\u90ae\u4ef6\u6b63\u6587(HTML)\");\n    mailPanel.add(label3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    uEditorLabel = new JLabel();\n    uEditorLabel.setText(\"<html><a href=\\\"https://ueditor.baidu.com/website/onlinedemo.html\\\">\u4f7f\u7528UEditor\u7f16\u8f91HTML</a></html>\");\n    mailPanel.add(uEditorLabel, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    fileExploreButton = new JButton();\n    fileExploreButton.setHorizontalAlignment(0);\n    fileExploreButton.setText(\"\u6d4f\u89c8\");\n    mailPanel.add(fileExploreButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    mailFilesTextField = new JTextField();\n    mailPanel.add(mailFilesTextField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    mailCcTextField = new JTextField();\n    mailPanel.add(mailCcTextField, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    final JLabel label4 = new JLabel();\n    label4.setText(\"\u6284\u9001\");\n    mailPanel.add(label4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/msg/MailMsgForm.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    final JPanel panel1 = new JPanel();\n    panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n    templateMsgPanel = new JPanel();\n    templateMsgPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 5, 0, 0), -1, -1));\n    panel1.add(templateMsgPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    templateMsgPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), \"\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, Font.BOLD, -1, templateMsgPanel.getFont()), null));\n    templateMsgDataPanel = new JPanel();\n    templateMsgDataPanel.setLayout(new GridLayoutManager(3, 3, new Insets(10, 0, 0, 0), -1, -1));\n    templateMsgPanel.add(templateMsgDataPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    templateMsgDataPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), \"\u77ed\u4fe1\u6a21\u677f\u53d8\u91cf\uff08\u53ef\u4f7f\u7528\\\"${ENTER}\\\"\u4f5c\u4e3a\u6362\u884c\u7b26\uff09\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, Font.BOLD, -1, templateMsgDataPanel.getFont()), null));\n    templateDataNameTextField = new JTextField();\n    templateDataNameTextField.setToolTipText(\"\u5f53\u6d88\u606f\u7c7b\u578b\u662f\u6a21\u677f\u6d88\u606f\u65f6\u7684\u793a\u4f8b\uff1afirst\u6216\u8005keyword1\u6216\u8005remark\u4e4b\u7c7b\u7684\");\n    templateMsgDataPanel.add(templateDataNameTextField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    templateDataValueTextField = new JTextField();\n    templateMsgDataPanel.add(templateDataValueTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    templateMsgDataAddButton = new JButton();\n    templateMsgDataAddButton.setIcon(new ImageIcon(getClass().getResource(\"/icon/add.png\")));\n    templateMsgDataAddButton.setText(\"\");\n    templateMsgDataPanel.add(templateMsgDataAddButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    templateMsgDataTable = new JTable();\n    templateMsgDataTable.setAutoCreateColumnsFromModel(true);\n    templateMsgDataTable.setAutoCreateRowSorter(true);\n    templateMsgDataTable.setGridColor(new Color(-12236470));\n    templateMsgDataTable.setRowHeight(36);\n    templateMsgDataPanel.add(templateMsgDataTable, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    templateMsgNameLabel = new JLabel();\n    templateMsgNameLabel.setText(\"\u6a21\u677f\u53c2\u6570\");\n    templateMsgNameLabel.setToolTipText(\"\u5f53\u6d88\u606f\u7c7b\u578b\u662f\u6a21\u677f\u6d88\u606f\u65f6\u7684\u793a\u4f8b\uff1afirst\u6216\u8005keyword1\u6216\u8005remark\u4e4b\u7c7b\u7684\");\n    templateMsgDataPanel.add(templateMsgNameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    templateMsgValueLabel = new JLabel();\n    templateMsgValueLabel.setText(\"\u53c2\u6570\u5bf9\u5e94\u7684\u503c\");\n    templateMsgDataPanel.add(templateMsgValueLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    final JPanel panel2 = new JPanel();\n    panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 5, 10, 5), -1, -1));\n    templateMsgPanel.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    templateIdLabel = new JLabel();\n    templateIdLabel.setText(\"\u77ed\u4fe1\u6a21\u677fID *\");\n    panel2.add(templateIdLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    msgTemplateIdTextField = new JTextField();\n    panel2.add(msgTemplateIdTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    templateMsgNameLabel.setLabelFor(templateDataNameTextField);\n    templateMsgValueLabel.setLabelFor(templateDataValueTextField);\n    templateIdLabel.setLabelFor(msgTemplateIdTextField);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/msg/TxYunMsgForm.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u521d\u59cb\u5316\u591a\u8d26\u53f7\u5207\u6362\n */\n", "func_signal": "public static void initSwitchMultiAccount()", "code": "{\n    messageManageForm = getInstance();\n    int msgType = App.config.getMsgType();\n    messageManageForm.getAccountSwitchComboBox().removeAllItems();\n\n    switch (msgType) {\n        case MessageTypeEnum.MP_TEMPLATE_CODE:\n        case MessageTypeEnum.KEFU_CODE:\n        case MessageTypeEnum.KEFU_PRIORITY_CODE:\n            // \u591a\u8d26\u53f7\u5207\u6362-\u516c\u4f17\u53f7\n            List<TWxAccount> wxAccountList = wxAccountMapper.selectByAccountType(UiConsts.WX_ACCOUNT_TYPE_MP);\n            accountSwitchComboBoxListenIgnore = true;\n            for (TWxAccount tWxAccount : wxAccountList) {\n                messageManageForm.getAccountSwitchComboBox().addItem(tWxAccount.getAccountName());\n            }\n            messageManageForm.getAccountSwitchComboBox().setSelectedItem(App.config.getWechatMpName());\n            accountSwitchComboBoxListenIgnore = false;\n            break;\n\n        case MessageTypeEnum.MA_SUBSCRIBE_CODE:\n        case MessageTypeEnum.MA_TEMPLATE_CODE:\n        case MessageTypeEnum.WX_UNIFORM_MESSAGE_CODE:\n            // \u591a\u8d26\u53f7\u5207\u6362-\u5c0f\u7a0b\u5e8f\n            wxAccountList = wxAccountMapper.selectByAccountType(UiConsts.WX_ACCOUNT_TYPE_MA);\n            accountSwitchComboBoxListenIgnore = true;\n            for (TWxAccount tWxAccount : wxAccountList) {\n                messageManageForm.getAccountSwitchComboBox().addItem(tWxAccount.getAccountName());\n            }\n            messageManageForm.getAccountSwitchComboBox().setSelectedItem(App.config.getMiniAppName());\n            accountSwitchComboBoxListenIgnore = false;\n            break;\n        default:\n            break;\n    }\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/MessageManageForm.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6d88\u606f\u5217\u8868\n */\n", "func_signal": "public static void init()", "code": "{\n    messageManageForm = getInstance();\n\n    initSwitchMultiAccount();\n\n    initMessageList();\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/MessageManageForm.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    contentPane = new JPanel();\n    contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 10, 0), -1, -1));\n    final JPanel panel1 = new JPanel();\n    panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n    contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));\n    final Spacer spacer1 = new Spacer();\n    panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));\n    final JPanel panel2 = new JPanel();\n    panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n    panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    buttonOK = new JButton();\n    buttonOK.setText(\"\u77e5\u9053\u4e86\");\n    panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    final Spacer spacer2 = new Spacer();\n    panel1.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));\n    final JPanel panel3 = new JPanel();\n    panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n    contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    final JScrollPane scrollPane1 = new JScrollPane();\n    panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    textPane1 = new JTextPane();\n    textPane1.setEditable(false);\n    textPane1.setMargin(new Insets(80, 28, 3, 28));\n    scrollPane1.setViewportView(textPane1);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/dialog/CommonTipsDialog.java", "commit_date": "2019-08-11 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    contentPane = new JPanel();\n    contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));\n    final JPanel panel1 = new JPanel();\n    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));\n    contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));\n    final Spacer spacer1 = new Spacer();\n    panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));\n    final JPanel panel2 = new JPanel();\n    panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));\n    panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    buttonOK = new JButton();\n    buttonOK.setText(\"\u53d1\u9001\");\n    panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    buttonCancel = new JButton();\n    buttonCancel.setText(\"\u53d6\u6d88\");\n    panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    final JPanel panel3 = new JPanel();\n    panel3.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));\n    contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    final JLabel label1 = new JLabel();\n    label1.setText(\"\u8bf7\u8f93\u5165\u63a5\u6536\u6d4b\u8bd5\u90ae\u4ef6\u7684\u90ae\u7bb1\u5730\u5740\uff1a\");\n    panel3.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    final Spacer spacer2 = new Spacer();\n    panel3.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    final Spacer spacer3 = new Spacer();\n    panel3.add(spacer3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    mailToTextField = new JTextField();\n    panel3.add(mailToTextField, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/dialog/MailTestDialog.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u51c6\u5907(\u754c\u9762\u5b57\u6bb5\u7b49)\n */\n", "func_signal": "@Override\npublic void prepare()", "code": "{\n    templateId = QiNiuYunMsgForm.getInstance().getMsgTemplateIdTextField().getText();\n\n    if (QiNiuYunMsgForm.getInstance().getTemplateMsgDataTable().getModel().getRowCount() == 0) {\n        QiNiuYunMsgForm.initTemplateDataTable();\n    }\n\n    DefaultTableModel tableModel = (DefaultTableModel) QiNiuYunMsgForm.getInstance().getTemplateMsgDataTable().getModel();\n    int rowCount = tableModel.getRowCount();\n    paramMap = Maps.newHashMap();\n    for (int i = 0; i < rowCount; i++) {\n        String key = ((String) tableModel.getValueAt(i, 0));\n        String value = ((String) tableModel.getValueAt(i, 1));\n        paramMap.put(key, value);\n    }\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/logic/msgmaker/QiNiuYunMsgMaker.java", "commit_date": "2019-09-15 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * @noinspection ALL\n */\n", "func_signal": "private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont)", "code": "{\n    if (currentFont == null) return null;\n    String resultName;\n    if (fontName == null) {\n        resultName = currentFont.getName();\n    } else {\n        Font testFont = new Font(fontName, Font.PLAIN, 10);\n        if (testFont.canDisplay('a') && testFont.canDisplay('1')) {\n            resultName = fontName;\n        } else {\n            resultName = currentFont.getName();\n        }\n    }\n    Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());\n    boolean isMac = System.getProperty(\"os.name\", \"\").toLowerCase(Locale.ENGLISH).startsWith(\"mac\");\n    Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());\n    return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/MessageEditForm.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    contentPane = new JPanel();\n    contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 10, 0), -1, -1));\n    final JPanel panel1 = new JPanel();\n    panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n    contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));\n    final Spacer spacer1 = new Spacer();\n    panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));\n    final JPanel panel2 = new JPanel();\n    panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));\n    panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    buttonOK = new JButton();\n    buttonOK.setText(\"\u7acb\u5373\u4e0b\u8f7d\");\n    panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    buttonCancel = new JButton();\n    buttonCancel.setText(\"\u53d6\u6d88\");\n    panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    final Spacer spacer2 = new Spacer();\n    panel1.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));\n    final JPanel panel3 = new JPanel();\n    panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n    contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    final JScrollPane scrollPane1 = new JScrollPane();\n    panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    textPane1 = new JTextPane();\n    textPane1.setEditable(false);\n    textPane1.setMargin(new Insets(80, 28, 3, 28));\n    textPane1.setText(\"\");\n    scrollPane1.setViewportView(textPane1);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/dialog/UpdateInfoDialog.java", "commit_date": "2019-10-20 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u4fdd\u5b58\u6d88\u606f\u7c7b\u578b\n */\n", "func_signal": "private static void saveType()", "code": "{\n    App.config.save();\n    MessageTypeForm.init();\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/listener/MessageTypeListener.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    final JPanel panel1 = new JPanel();\n    panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n    messageManagePanel = new JPanel();\n    messageManagePanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));\n    messageManagePanel.setMaximumSize(new Dimension(-1, -1));\n    messageManagePanel.setMinimumSize(new Dimension(-1, -1));\n    messageManagePanel.setPreferredSize(new Dimension(280, -1));\n    panel1.add(messageManagePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    final JScrollPane scrollPane1 = new JScrollPane();\n    messageManagePanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    msgHistable = new JTable();\n    msgHistable.setGridColor(new Color(-12236470));\n    msgHistable.setRowHeight(36);\n    msgHistable.setShowVerticalLines(false);\n    scrollPane1.setViewportView(msgHistable);\n    final JPanel panel2 = new JPanel();\n    panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 5, 5, 0), -1, -1));\n    messageManagePanel.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    msgHisTableDeleteButton = new JButton();\n    msgHisTableDeleteButton.setIcon(new ImageIcon(getClass().getResource(\"/icon/remove.png\")));\n    msgHisTableDeleteButton.setText(\"\u5220\u9664\");\n    panel2.add(msgHisTableDeleteButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    final Spacer spacer1 = new Spacer();\n    panel2.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));\n    createMsgButton = new JButton();\n    createMsgButton.setEnabled(true);\n    createMsgButton.setIcon(new ImageIcon(getClass().getResource(\"/icon/add.png\")));\n    createMsgButton.setText(\"\u65b0\u5efa\");\n    panel2.add(createMsgButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    accountSwitchPanel = new JPanel();\n    accountSwitchPanel.setLayout(new GridLayoutManager(1, 1, new Insets(5, 0, 0, 0), -1, -1));\n    messageManagePanel.add(accountSwitchPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    accountSwitchComboBox = new JComboBox();\n    accountSwitchPanel.add(accountSwitchComboBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/MessageManageForm.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * \u6839\u636e\u6d88\u606f\u7c7b\u578b\u8f6c\u6362\u754c\u9762\u663e\u793a\n *\n * @param msgType\n */\n", "func_signal": "public static void switchMsgType(int msgType)", "code": "{\n    messageEditForm = getInstance();\n    messageEditForm.getMsgEditorPanel().removeAll();\n    GridConstraints gridConstraintsRow0 = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false);\n    GridConstraints gridConstraintsRow1 = new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false);\n\n    MsgFormFactory.getMsgForm().init(null);\n    switch (msgType) {\n        case MessageTypeEnum.MP_TEMPLATE_CODE:\n            messageEditForm.getMsgEditorPanel().add(MpTemplateMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.MA_TEMPLATE_CODE:\n        case MessageTypeEnum.MA_SUBSCRIBE_CODE:\n            messageEditForm.getMsgEditorPanel().add(MaSubscribeMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.KEFU_CODE:\n            messageEditForm.getMsgEditorPanel().add(KefuMsgForm.getInstance().getKefuMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.KEFU_PRIORITY_CODE:\n            messageEditForm.getMsgEditorPanel().setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n            messageEditForm.getMsgEditorPanel().add(KefuMsgForm.getInstance().getKefuMsgPanel(), gridConstraintsRow0);\n            messageEditForm.getMsgEditorPanel().add(MpTemplateMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow1);\n            break;\n        case MessageTypeEnum.WX_UNIFORM_MESSAGE_CODE:\n            messageEditForm.getMsgEditorPanel().setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));\n            messageEditForm.getMsgEditorPanel().add(MaSubscribeMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            messageEditForm.getMsgEditorPanel().add(MpTemplateMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow1);\n            break;\n        case MessageTypeEnum.ALI_YUN_CODE:\n            messageEditForm.getMsgEditorPanel().add(AliYunMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.TX_YUN_CODE:\n            messageEditForm.getMsgEditorPanel().add(TxYunMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.QI_NIU_YUN_CODE:\n            messageEditForm.getMsgEditorPanel().add(QiNiuYunMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.UP_YUN_CODE:\n            messageEditForm.getMsgEditorPanel().add(UpYunMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.HW_YUN_CODE:\n            messageEditForm.getMsgEditorPanel().add(HwYunMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.YUN_PIAN_CODE:\n            messageEditForm.getMsgEditorPanel().add(YunpianMsgForm.getInstance().getYunpianMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.EMAIL_CODE:\n            messageEditForm.getMsgEditorPanel().add(MailMsgForm.getInstance().getMailPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.WX_CP_CODE:\n            messageEditForm.getMsgEditorPanel().add(WxCpMsgForm.getInstance().getWxCpMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.HTTP_CODE:\n            messageEditForm.getMsgEditorPanel().add(HttpMsgForm.getInstance().getHttpPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.DING_CODE:\n            messageEditForm.getMsgEditorPanel().add(DingMsgForm.getInstance().getDingMsgPanel(), gridConstraintsRow0);\n            break;\n        case MessageTypeEnum.BD_YUN_CODE:\n            messageEditForm.getMsgEditorPanel().add(BdYunMsgForm.getInstance().getTemplateMsgPanel(), gridConstraintsRow0);\n            break;\n        default:\n            break;\n    }\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/MessageEditForm.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    final JPanel panel1 = new JPanel();\n    panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));\n    messageEditPanel = new JPanel();\n    messageEditPanel.setLayout(new GridLayoutManager(3, 1, new Insets(6, 2, 0, 5), -1, -1));\n    messageEditPanel.setMaximumSize(new Dimension(-1, -1));\n    messageEditPanel.setMinimumSize(new Dimension(-1, -1));\n    messageEditPanel.setPreferredSize(new Dimension(-1, -1));\n    panel1.add(messageEditPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    final JPanel panel2 = new JPanel();\n    panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 5, 10, 5), -1, -1));\n    messageEditPanel.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    final JPanel panel3 = new JPanel();\n    panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 10, 0), -1, -1));\n    panel2.add(panel3, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    msgTypeName = new JLabel();\n    Font msgTypeNameFont = this.$$$getFont$$$(null, -1, 28, msgTypeName.getFont());\n    if (msgTypeNameFont != null) msgTypeName.setFont(msgTypeNameFont);\n    msgTypeName.setForeground(new Color(-276358));\n    msgTypeName.setText(\"\u6d88\u606f\u7c7b\u578b\");\n    panel3.add(msgTypeName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    msgNameLabel = new JLabel();\n    Font msgNameLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, msgNameLabel.getFont());\n    if (msgNameLabelFont != null) msgNameLabel.setFont(msgNameLabelFont);\n    msgNameLabel.setText(\"\u6d88\u606f\u540d\u79f0 *\");\n    msgNameLabel.setToolTipText(\"\u7ed9\u672c\u6b21\u63a8\u9001\u4efb\u52a1\u8d77\u4e2a\u540d\u5b57\");\n    panel2.add(msgNameLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    msgNameField = new JTextField();\n    msgNameField.setToolTipText(\"\u7ed9\u672c\u6b21\u63a8\u9001\u4efb\u52a1\u8d77\u4e2a\u540d\u5b57\");\n    panel2.add(msgNameField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    final JPanel panel4 = new JPanel();\n    panel4.setLayout(new GridLayoutManager(1, 5, new Insets(0, 5, 5, 5), -1, -1));\n    messageEditPanel.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));\n    previewMemberLabel = new JLabel();\n    previewMemberLabel.setText(\"\u9884\u89c8\u7528\u6237\");\n    previewMemberLabel.setToolTipText(\"\u591a\u4e2a\u4ee5\u534a\u89d2\u5206\u53f7\u5206\u9694\");\n    panel4.add(previewMemberLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    previewUserField = new JTextField();\n    previewUserField.setToolTipText(\"\u591a\u4e2a\u4ee5\u534a\u89d2\u5206\u53f7\u5206\u9694\");\n    panel4.add(previewUserField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));\n    previewMsgButton = new JButton();\n    previewMsgButton.setIcon(new ImageIcon(getClass().getResource(\"/icon/send.png\")));\n    previewMsgButton.setText(\"\u9884\u89c8\");\n    panel4.add(previewMsgButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    msgSaveButton = new JButton();\n    msgSaveButton.setIcon(new ImageIcon(getClass().getResource(\"/icon/menu-saveall_dark.png\")));\n    msgSaveButton.setText(\"\u4fdd\u5b58\");\n    panel4.add(msgSaveButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    previewUserHelpLabel = new JLabel();\n    previewUserHelpLabel.setIcon(new ImageIcon(getClass().getResource(\"/icon/helpButton.png\")));\n    previewUserHelpLabel.setText(\"\");\n    panel4.add(previewUserHelpLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n    msgEditScrollPane = new JScrollPane();\n    messageEditPanel.add(msgEditScrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));\n    msgEditorPanel = new JPanel();\n    msgEditorPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1, true, false));\n    msgEditScrollPane.setViewportView(msgEditorPanel);\n    msgNameLabel.setLabelFor(msgNameField);\n    previewMemberLabel.setLabelFor(previewUserField);\n}", "path": "WePush/src/main/java/com/fangxuele/tool/push/ui/form/MessageEditForm.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "rememberber/WePush", "stars": 3899, "license": "mit", "language": "java", "size": 45759}
{"docstring": "/**\n * In the test, we're just going to invoke the batch execution and wait for completion. To validate the test\n * expected behaviour we need to query +javax.batch.operations.JobOperator#getStepExecutions+ and the\n * +javax.batch.runtime.Metric+ object available in the step execution.\n *\n * @throws Exception an exception if the batch could not complete successfully.\n */\n", "func_signal": "@Test\npublic void testBatchDecision() throws Exception", "code": "{\n    JobOperator jobOperator = getJobOperator();\n    Long executionId = jobOperator.start(\"myJob\", new Properties());\n    JobExecution jobExecution = jobOperator.getJobExecution(executionId);\n    \n    jobExecution = BatchTestHelper.keepTestAlive(jobExecution);\n\n    List<StepExecution> stepExecutions = jobOperator.getStepExecutions(executionId);\n    List<String> executedSteps = new ArrayList<>();\n    for (StepExecution stepExecution : stepExecutions) {\n        executedSteps.add(stepExecution.getStepName());\n    }\n\n    // <1> Make sure that only two steps were executed.\n    assertEquals(2, stepExecutions.size());\n    \n    // <2> Make sure that only the expected steps were executed an in order.\n    assertArrayEquals(new String[] { \"step1\", \"step3\" }, executedSteps.toArray());\n    \n    // <3> Make sure that this step was never executed.\n    assertFalse(executedSteps.contains(\"step2\"));\n    \n    // <4> Job should be completed.\n    assertEquals(COMPLETED, jobExecution.getBatchStatus());\n}", "path": "javaee7-samples/batch/decision/src/test/java/org/javaee7/batch/decision/BatchDecisionTest.java", "commit_date": "2017-06-11 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * We're just going to deploy the application as a +web archive+. Note the inclusion of the following files:\n *\n * [source,file]\n * ----\n * /META-INF/batch-jobs/myJob.xml\n * ----\n *\n * The +myJob.xml+ file is needed for running the batch definition.\n */\n", "func_signal": "@Deployment\npublic static WebArchive createDeployment()", "code": "{\n    WebArchive war = ShrinkWrap.create(WebArchive.class)\n        .addClass(BatchTestHelper.class)\n        .addPackage(\"org.javaee7.batch.decision\")\n        .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n        .addAsResource(\"META-INF/batch-jobs/myJob.xml\");\n    System.out.println(war.toString(true));\n    return war;\n}", "path": "javaee7-samples/batch/decision/src/test/java/org/javaee7/batch/decision/BatchDecisionTest.java", "commit_date": "2017-06-11 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * In this test case we verify that the subscription is really created upon deployment\n * and thus messages are waiting for the job even before the first run of it.\n *\n * The subscription is not deleted even after the application is undeployed, because\n * the physical topic and its subscription in the message broker still exist,\n * even after the application scoped managed objects are deleted.\n *\n * Following method is used to generate the payload:\n *\n * include::JmsItemReaderTest#sendMessages[]\n *\n * So we send 10 random numbers, and verify that summing integers works exactly the\n * same way on both ends. Or that the job really picked up all the numbers submitted\n * for the computation.\n */\n", "func_signal": "@InSequence(1)\n@Test\npublic void worksAfterDeployment() throws InterruptedException", "code": "{\n    int sum = sendMessages(10);\n    runJob();\n    assertEquals(10, collector.getLastItemCount());\n    assertEquals(sum, collector.getLastSum());\n    assertEquals(1, collector.getNumberOfJobs());\n}", "path": "javaee7-samples/jms/jms-batch/src/test/java/org/javaee7/jms/batch/JmsItemReaderTest.java", "commit_date": "2015-02-13 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Test of getItems method, of class CartBean\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void shouldBeEmpty() throws Exception", "code": "{\n    // given\n\n    // when\n    final List<String> actual = sut.getItems();\n\n    // then\n    assertThat(actual.isEmpty(), is(true));\n}", "path": "javaee7-samples/ejb/stateful/src/test/java/org/javaee7/ejb/stateful/CartBeanWithInterfaceTest.java", "commit_date": "2017-05-29 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Processes requests for HTTP <code>GET</code>\n *\n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException", "code": "{\n    String requestedUpgrade = request.getHeader(\"Upgrade\");\n    if (\"echo\".equals(requestedUpgrade)) {\n        response.setStatus(SC_SWITCHING_PROTOCOLS);\n        response.setHeader(\"Connection\", \"Upgrade\");\n        response.setHeader(\"Upgrade\", \"echo\");\n        request.upgrade(MyProtocolHandler.class);\n\n        System.out.println(\"Request upgraded to MyProtocolHandler\");\n    } else {\n        response.sendError(SC_BAD_REQUEST, \"unknown upgrade \" + requestedUpgrade);\n    }\n}", "path": "javaee7-samples/servlet/protocol-handler/src/main/java/org/javaee7/servlet/protocolhandler/UpgradeServlet.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * A small variation on the testProtectedServletWithLoginCallingEJB that tests if for authentication that happened for\n * public resources the security context also propagates to EJB.\n * \n */\n", "func_signal": "@Test\npublic void publicServletCallingProtectedEJB() throws IOException, SAXException", "code": "{\n\n    String response = getFromServerPath(\"public/servlet-protected-ejb?doLogin=true\");\n\n    // Both the web (HttpServletRequest) and EJB (EJBContext) should see the same\n    // user name.\n    assertTrue(\n        \"User should have been authenticated in the web layer and given name \\\"test\\\", \" + \n        \" but does not appear to have this name\",\n        response.contains(\"web username: test\")\n    );\n    assertTrue(\n        \"Web has user principal set, but EJB not.\", \n        response.contains(\"EJB username: test\")\n    );\n\n    // Both the web (HttpServletRequest) and EJB (EJBContext) should see that the\n    // user has the role \"architect\".\n    assertTrue(response.contains(\"web user has role \\\"architect\\\": true\"));\n    assertTrue(\"Web user principal has role \\\"architect\\\", but one in EJB doesn't.\",\n        response.contains(\"EJB user has role \\\"architect\\\": true\"));\n}", "path": "javaee7-samples/jaspic/ejb-propagation/src/test/java/org/javaee7/jaspic/ejbpropagation/ProtectedEJBPropagationTest.java", "commit_date": "2015-11-13 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Test of removeItem method, of class CartBean\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void shouldRemoveOneItem() throws Exception", "code": "{\n    // given\n    final List<String> items = Arrays.asList(\"apple\", \"banana\", \"mango\", \"kiwi\", \"passion fruit\");\n    for (final String item : items) {\n        sut.addItem(item);\n    }\n\n    // when\n    sut.removeItem(\"banana\");\n\n    // then\n    assertThat(sut.getItems(), not(hasItem(\"banana\")));\n}", "path": "javaee7-samples/ejb/stateful/src/test/java/org/javaee7/ejb/stateful/CartBeanWithInterfaceTest.java", "commit_date": "2017-05-29 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Test of addItem method, of class CartBean\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void shouldAddOneItem() throws Exception", "code": "{\n    // given\n\n    // when\n    sut.addItem(\"apple\");\n\n    // then\n    assertThat(sut.getItems(), hasItem(\"apple\"));\n}", "path": "javaee7-samples/ejb/stateful/src/test/java/org/javaee7/ejb/stateful/CartBeanWithInterfaceTest.java", "commit_date": "2017-05-29 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Processes requests for both HTTP <code>GET</code> and <code>POST</code>\n * methods.\n *\n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException", "code": "{\n    response.setContentType(\"text/html;charset=UTF-8\");\n    try (PrintWriter out = response.getWriter()) {\n        out.println(\"<!DOCTYPE html>\");\n        out.println(\"<html>\");\n        out.println(\"<head>\");\n        out.println(\"<title>File Upload Servlet</title>\");\n        out.println(\"</head>\");\n        out.println(\"<body>\");\n        out.println(\"<h1>File Upload Servlet</h1>\");\n        out.println(\"Receiving the uploaded file ...<br>\");\n        out.println(\"Received \" + request.getParts().size() + \" parts ...<br>\");\n        String fileName = \"\";\n        for (Part part : request.getParts()) {\n            fileName = part.getSubmittedFileName();\n            out.println(\"... writing \" + fileName + \" part<br>\");\n            part.write(fileName);\n            out.println(\"... written<br>\");\n        }\n        out.println(\"... uploaded to: /tmp/\" + fileName);\n        out.println(\"</body>\");\n        out.println(\"</html>\");\n    }\n}", "path": "javaee7-samples/servlet/file-upload/src/main/java/org/javaee7/servlet/file/upload/TestServlet.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Processes requests for both HTTP\n * <code>GET</code> and\n * <code>POST</code> methods.\n *\n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException", "code": "{\n    try (PrintWriter out = response.getWriter()) {\n        out.println(\"<b>Request-scoped bean</b>\");\n        out.println(\"<br><br>(1): \" + requestBean.getID());\n        out.println(\"<br>(2): \" + requestBean2.getID());\n        out.println(\"<br><br><b>Session-scoped bean</b>\");\n        out.println(\"<br><br>(1): \" + sessionBean.getID());\n        out.println(\"<br>(2): \" + sessionBean2.getID());\n        out.println(\"<br><br><b>Application-scoped bean</b>: \" + applicationBean.getID());\n        out.println(\"<br><br><b>Singleton-scoped bean</b>: \" + singletonBean.getID());\n    }\n}", "path": "javaee7-samples/cdi/scopes/src/main/java/org/javaee7/cdi/bean/scopes/ServerServlet.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Processes requests for both HTTP\n * <code>GET</code> and\n * <code>POST</code> methods.\n *\n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException", "code": "{\n    response.setContentType(\"text/html;charset=UTF-8\");\n    try (PrintWriter out = response.getWriter()) {\n        out.println(\"<!DOCTYPE html>\");\n        out.println(\"<html>\");\n        out.println(\"<head>\");\n        out.println(\"<title>Schedule using Callable after 5 seconds</title>\");\n        out.println(\"</head>\");\n        out.println(\"<body>\");\n        out.println(\"<h1>Schedule using Callable after 5 seconds</h1>\");\n        out.println(\"<h2>Scheduling tasks using Callable</h2>\");\n        ScheduledFuture<Product> future = executor.schedule(new MyCallableTask(5), 5, TimeUnit.SECONDS);\n        while (true) {\n            if (future.isDone()) {\n                break;\n            } else {\n                System.out.println(\"Checking Callable Future, waiting for 1 sec\");\n                Thread.sleep(1000);\n            }\n        }\n        out.println(\"Callable Task completed: \" + future.get().getId());\n\n        out.println(\"<h2>Scheduling tasks using Runnable</h2>\");\n        ScheduledFuture<?> f = executor.schedule(new MyRunnableTask(10), 5, TimeUnit.SECONDS);\n        while (true) {\n            if (f.isDone()) {\n                break;\n            } else {\n                System.out.println(\"Checking Runnable Future, waiting for 1 sec\");\n                Thread.sleep(1000);\n            }\n        }\n        out.println(\"Runnable Task completed: \" + future.get().getId());\n        out.println(\"<br><br>Check server.log for output\");\n        out.println(\"</body>\");\n        out.println(\"</html>\");\n    } catch (InterruptedException | ExecutionException ex) {\n        Logger.getLogger(ScheduleServlet.class.getName()).log(Level.SEVERE, null, ex);\n    }\n}", "path": "javaee7-samples/concurrency/managedscheduledexecutor/src/main/java/org/javaee7/concurrency/managedscheduledexecutor/ScheduleServlet.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "//    @Resource(name = \"DefaultManagedThreadFactory\")\n//    ManagedThreadFactory threadFactory;\n", "func_signal": "@GET\npublic void getList(@Suspended final AsyncResponse ar) throws NamingException", "code": "{\n    ar.setTimeoutHandler(new TimeoutHandler() {\n\n        @Override\n        public void handleTimeout(AsyncResponse ar) {\n            ar.resume(\"Operation timed out\");\n        }\n    });\n    ar.setTimeout(4000, TimeUnit.MILLISECONDS);\n\n    ar.register(new MyCompletionCallback());\n    ar.register(new MyConnectionCallback());\n\n    ManagedThreadFactory threadFactory = (ManagedThreadFactory) new InitialContext()\n        .lookup(\"java:comp/DefaultManagedThreadFactory\");\n\n    Executors.newSingleThreadExecutor(threadFactory).submit(new Runnable() {\n\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(3000);\n                ar.resume(response[0]);\n            } catch (InterruptedException ex) {\n\n            }\n        }\n\n    });\n}", "path": "javaee7-samples/jaxrs/async-server/src/main/java/org/javaee7/jaxrs/asyncserver/MyResource.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Processes requests for both HTTP\n * <code>GET</code> and\n * <code>POST</code> methods.\n *\n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException", "code": "{\n    response.setContentType(\"text/html;charset=UTF-8\");\n    try (PrintWriter out = response.getWriter()) {\n        out.println(\"<!DOCTYPE html>\");\n        out.println(\"<html>\");\n        out.println(\"<head>\");\n        out.println(\"<title>Servlet TestServlet</title>\");\n        out.println(\"</head>\");\n        out.println(\"<body>\");\n        out.println(\"<h1>Servlet TestServlet at \" + request.getContextPath() + \"</h1>\");\n        out.println(greeting.greet(\"Duke\"));\n        out.println(\"<br><br>Check for output in server.log\");\n        out.println(\"</body>\");\n        out.println(\"</html>\");\n    }\n}", "path": "javaee7-samples/cdi/built-in/src/main/java/org/javaee7/cdi/built/in/TestServlet.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Processes requests for both HTTP <code>GET</code> and <code>POST</code>\n * methods.\n *\n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException", "code": "{\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    out.println(\"<!DOCTYPE html>\");\n    out.println(\"<html>\");\n    out.println(\"<head>\");\n    out.println(\"<title>Stateless Bean (with Interface)</title>\");\n    out.println(\"</head>\");\n    out.println(\"<body>\");\n    out.println(\"<h1>Stateless Bean (with Interface)</h1>\");\n    out.println(\"<h2>Withdraw and Deposit</h2>\");\n    out.println(bean.deposit((float) 5.0));\n    out.println(bean.withdraw((float) 5.0));\n    out.println(\"</body>\");\n    out.println(\"</html>\");\n}", "path": "javaee7-samples/ejb/stateless/src/main/java/org/javaee7/ejb/stateless/remote/TestServlet.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Test of addItem method, of class CartBean\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void shouldAddManyItems() throws Exception", "code": "{\n    // given\n    final List<String> items = Arrays.asList(\"apple\", \"banana\", \"mango\", \"kiwi\", \"passion fruit\");\n\n    // when\n    for (final String item : items) {\n        sut.addItem(item);\n    }\n\n    // then\n    assertThat(sut.getItems(), is(items));\n}", "path": "javaee7-samples/ejb/stateful/src/test/java/org/javaee7/ejb/stateful/CartBeanWithInterfaceTest.java", "commit_date": "2017-05-29 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "//@Test\n", "func_signal": "public void testJSFwithCDIIncludeViaPublicResource() throws IOException, SAXException", "code": "{\n\n    String response = getFromServerPath(\"public/servlet?dispatch=include&tech=jsfcdi\");\n    \n    assertTrue(\n        \"Response did not contain output from JSF view that SAM included.\", \n        response.contains(\"response from JSF include - Called from CDI\")\n    );\n    \n    assertTrue(\n        \"Response did not contain output from target Servlet after included JSF view.\", \n        response.contains(\"Resource invoked\")\n    );\n    \n    assertTrue(\n        \"Output from included JSF view and target Servlet in wrong order.\",\n        response.indexOf(\"response from JSF include - Called from CDI\") < response.indexOf(\"Resource invoked\")\n    );\n}", "path": "javaee7-samples/jaspic/dispatching-jsf-cdi/src/test/java/org/javaee7/jaspictest/dispatching/JSFCDIIncludeTest.java", "commit_date": "2017-05-23 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Upon deployment a topic and connection factory for durable subscription are created:\n *\n * include::Resources[]\n *\n * Then the subscription itself is created by means of +@Singleton+ +@Startup+ EJB\n * +SubscriptionCreator+.\n *\n * include::SubscriptionCreator#createSubscription[]\n *\n * The job itself computes sum and count of random numbers that are send on the topic.\n * Note that at time of sending there is no active consumer listening on the topic.\n */\n", "func_signal": "@Deployment\npublic static WebArchive deployment()", "code": "{\n    return ShrinkWrap.create(WebArchive.class)\n        .addAsWebInfResource(EmptyAsset.INSTANCE, ArchivePaths.create(\"beans.xml\"))\n        .addClass(BatchTestHelper.class)\n        .addPackage(JmsItemReader.class.getPackage())\n        .addAsResource(\"META-INF/batch-jobs/jms-job.xml\");\n}", "path": "javaee7-samples/jms/jms-batch/src/test/java/org/javaee7/jms/batch/JmsItemReaderTest.java", "commit_date": "2015-02-13 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n *  To verify that the durable subscription really collects messages we do few\n *  more runs.\n */\n", "func_signal": "@InSequence(2)\n@Test\npublic void worksInMultipleRuns() throws InterruptedException", "code": "{\n    int sum = sendMessages(14);\n    runJob();\n    assertEquals(14, collector.getLastItemCount());\n    assertEquals(sum, collector.getLastSum());\n    assertEquals(2, collector.getNumberOfJobs());\n    sum = sendMessages(8); // <1> Sending messages from separate connections makes no difference\n    sum += sendMessages(4);\n    runJob();\n    assertEquals(12, collector.getLastItemCount());\n    assertEquals(sum, collector.getLastSum());\n    assertEquals(3, collector.getNumberOfJobs());\n}", "path": "javaee7-samples/jms/jms-batch/src/test/java/org/javaee7/jms/batch/JmsItemReaderTest.java", "commit_date": "2015-02-13 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * Processes requests for both HTTP\n * <code>GET</code> and\n * <code>POST</code> methods.\n *\n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException", "code": "{\n    response.setContentType(\"text/html;charset=UTF-8\");\n    try (PrintWriter out = response.getWriter()) {\n        out.println(\"<html>\");\n        out.println(\"<head>\");\n        out.println(\"<title>Creating contextual proxy</title>\");\n        out.println(\"</head>\");\n        out.println(\"<body>\");\n        out.println(\"<h1>Creating contextual proxy</h1>\");\n\n        Runnable proxy = service.createContextualProxy(new MyRunnable(), Runnable.class);\n        out.println(\"Creating Java SE style ExecutorService<br>\");\n        ExecutorService executor = Executors.newFixedThreadPool(10, factory);\n        out.println(\"Submitting the task<br>\");\n        Future f = executor.submit(proxy);\n        out.println(\"done\");\n        out.println(\"<br><br>Check server.log for output from the task.\");\n        out.println(\"</body>\");\n        out.println(\"</html>\");\n    }\n}", "path": "javaee7-samples/concurrency/dynamicproxy/src/main/java/org/javaee7/concurrency/dynamicproxy/TestServlet.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "// Both process and process2 are valid method signatures\n", "func_signal": "public void process(ComponentSystemEvent event) throws AbortProcessingException", "code": "{\n    System.out.println(\"process called\");\n    name = name.toUpperCase();\n}", "path": "javaee7-samples/jsf/http-get/src/main/java/org/javaee7/jsf/http/get/User.java", "commit_date": "2015-08-19 00:00:00", "repo_name": "javaee-samples/javaee7-samples", "stars": 2508, "license": "other", "language": "java", "size": 4333}
{"docstring": "/**\n * @return Returns a list of all the unique sleep values which were executed within\n * all simulations.\n */\n", "func_signal": "public List<Double> getPercentiles()", "code": "{\n\tList<Double> res = new ArrayList<Double>();\n\tfor (double percentile : new double[] { 10, 20, 30, 40, 50, 60, 70, 80, 90 }) {\n\t\tres.add(getPercentile(percentile / 100));\n\t}\n\treturn res;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetrySimulation.java", "commit_date": "2019-03-26 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Do not pause between attempts, retry immediately.\n * @return this\n * @see NoBackOffPolicy\n */\n", "func_signal": "public RetryTemplateBuilder noBackoff()", "code": "{\n\tAssert.isNull(this.backOffPolicy, \"You have already selected backoff policy\");\n\tthis.backOffPolicy = new NoBackOffPolicy();\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * You can provide your own {@link BackOffPolicy} via this method.\n * @param backOffPolicy will be directly set to resulting {@link RetryTemplate}\n * @return this\n */\n", "func_signal": "public RetryTemplateBuilder customBackoff(BackOffPolicy backOffPolicy)", "code": "{\n\tAssert.isNull(this.backOffPolicy, \"You have already selected backoff policy\");\n\tAssert.notNull(backOffPolicy, \"You should provide non null custom policy\");\n\tthis.backOffPolicy = backOffPolicy;\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Allows retry if there is no more than {@code timeout} millis since first attempt.\n * <p>\n * Invocation of this method does not discard default exception classification rule,\n * that is \"retry only on {@link Exception} and it's subclasses\".\n * @param timeout whole execution timeout in milliseconds\n * @return this\n * @see TimeoutRetryPolicy\n */\n", "func_signal": "public RetryTemplateBuilder withinMillis(long timeout)", "code": "{\n\tAssert.isTrue(timeout > 0, \"Timeout should be positive\");\n\tAssert.isNull(this.baseRetryPolicy, \"You have already selected another retry policy\");\n\tTimeoutRetryPolicy timeoutRetryPolicy = new TimeoutRetryPolicy();\n\ttimeoutRetryPolicy.setTimeout(timeout);\n\tthis.baseRetryPolicy = timeoutRetryPolicy;\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * @return the longest total time slept by a retry sequence.\n */\n", "func_signal": "public SleepSequence getLongestTotalSleepSequence()", "code": "{\n\tSleepSequence longest = null;\n\tfor (SleepSequence sequence : sleepSequences) {\n\t\tif (longest == null || sequence.getTotalSleep() > longest.getTotalSleep()) {\n\t\t\tlongest = sequence;\n\t\t}\n\t}\n\treturn longest;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetrySimulation.java", "commit_date": "2019-03-26 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * If flexibility of this builder is not enough for you, you can provide your own\n * {@link RetryPolicy} via this method.\n * <p>\n * Invocation of this method does not discard default exception classification rule,\n * that is \"retry only on {@link Exception} and it's subclasses\".\n * @param policy will be directly set to resulting {@link RetryTemplate}\n * @return this\n */\n", "func_signal": "public RetryTemplateBuilder customPolicy(RetryPolicy policy)", "code": "{\n\tAssert.notNull(policy, \"Policy should not be null\");\n\tAssert.isNull(this.baseRetryPolicy, \"You have already selected another retry policy\");\n\tthis.baseRetryPolicy = policy;\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Use exponential backoff policy. The formula of backoff period (without randomness):\n * <p>\n * {@code currentInterval = Math.min(initialInterval * Math.pow(multiplier, retryNum), maxInterval)}\n * <p>\n * (for first attempt retryNum = 0)\n * @param initialInterval in milliseconds\n * @param multiplier see the formula above\n * @param maxInterval in milliseconds\n * @param withRandom adds some randomness to backoff intervals. For details, see\n * {@link ExponentialRandomBackOffPolicy}\n * @return this\n * @see ExponentialBackOffPolicy\n * @see ExponentialRandomBackOffPolicy\n */\n", "func_signal": "public RetryTemplateBuilder exponentialBackoff(long initialInterval, double multiplier, long maxInterval,\n\t\tboolean withRandom)", "code": "{\n\tAssert.isNull(this.backOffPolicy, \"You have already selected backoff policy\");\n\tAssert.isTrue(initialInterval >= 1, \"Initial interval should be >= 1\");\n\tAssert.isTrue(multiplier > 1, \"Multiplier should be > 1\");\n\tAssert.isTrue(maxInterval > initialInterval, \"Max interval should be > than initial interval\");\n\tExponentialBackOffPolicy policy = withRandom ? new ExponentialRandomBackOffPolicy()\n\t\t\t: new ExponentialBackOffPolicy();\n\tpolicy.setInitialInterval(initialInterval);\n\tpolicy.setMultiplier(multiplier);\n\tpolicy.setMaxInterval(maxInterval);\n\tthis.backOffPolicy = policy;\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * @param defaultCapacity the default capacity\n */\n", "func_signal": "public MapRetryContextCache(int defaultCapacity)", "code": "{\n\tsuper();\n\tthis.capacity = defaultCapacity;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/policy/MapRetryContextCache.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Perform each retry after fixed amount of time.\n * @param interval fixed interval in milliseconds\n * @return this\n * @see FixedBackOffPolicy\n */\n", "func_signal": "public RetryTemplateBuilder fixedBackoff(long interval)", "code": "{\n\tAssert.isNull(this.backOffPolicy, \"You have already selected backoff policy\");\n\tAssert.isTrue(interval >= 1, \"Interval should be >= 1\");\n\tFixedBackOffPolicy policy = new FixedBackOffPolicy();\n\tpolicy.setBackOffPeriod(interval);\n\tthis.backOffPolicy = policy;\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Add a throwable to the black list of retryable exceptions.\n * <p>\n * Warn: touching this method drops default {@code retryOn(Exception.class)} and you\n * should configure whole classifier from scratch.\n * <p>\n * You should select the way you want to configure exception classifier: white list or\n * black list. If you choose black list - use this method, if white - use\n * {@link #retryOn(Class)}\n * @param throwable to be not retryable (with it's subclasses)\n * @return this\n * @see BinaryExceptionClassifierBuilder#notRetryOn\n * @see BinaryExceptionClassifier\n */\n", "func_signal": "public RetryTemplateBuilder notRetryOn(Class<? extends Throwable> throwable)", "code": "{\n\tclassifierBuilder().notRetryOn(throwable);\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Suppose throwing a {@code new MyLogicException(new IOException())}. This template\n * will not retry on it: <pre>{@code\n * RetryTemplate.builder()\n *          .retryOn(IOException.class)\n *          .build()\n * }</pre> but this will retry: <pre>{@code\n * RetryTemplate.builder()\n *          .retryOn(IOException.class)\n *          .traversingCauses()\n *          .build()\n * }</pre>\n * @return this\n * @see BinaryExceptionClassifier\n */\n", "func_signal": "public RetryTemplateBuilder traversingCauses()", "code": "{\n\tclassifierBuilder().traversingCauses();\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Use {@link UniformRandomBackOffPolicy}, see it's doc for details.\n * @param minInterval in milliseconds\n * @param maxInterval in milliseconds\n * @return this\n * @see UniformRandomBackOffPolicy\n */\n", "func_signal": "public RetryTemplateBuilder uniformRandomBackoff(long minInterval, long maxInterval)", "code": "{\n\tAssert.isNull(this.backOffPolicy, \"You have already selected backoff policy\");\n\tAssert.isTrue(minInterval >= 1, \"Min interval should be >= 1\");\n\tAssert.isTrue(maxInterval >= 1, \"Max interval should be >= 1\");\n\tAssert.isTrue(maxInterval > minInterval, \"Max interval should be > than min interval\");\n\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\tpolicy.setMinBackOffPeriod(minInterval);\n\tpolicy.setMaxBackOffPeriod(maxInterval);\n\tthis.backOffPolicy = policy;\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Appends provided {@code listener} to {@link RetryTemplate}'s listener list.\n * @param listener to be appended\n * @return this\n * @see RetryTemplate\n * @see RetryListener\n */\n", "func_signal": "public RetryTemplateBuilder withListener(RetryListener listener)", "code": "{\n\tAssert.notNull(listener, \"Listener should not be null\");\n\tlistenersList().add(listener);\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Allows infinite retry, do not limit attempts by number or time.\n * <p>\n * Invocation of this method does not discard default exception classification rule,\n * that is \"retry only on {@link Exception} and it's subclasses\".\n * @return this\n * @see TimeoutRetryPolicy\n */\n", "func_signal": "public RetryTemplateBuilder infiniteRetry()", "code": "{\n\tAssert.isNull(this.baseRetryPolicy, \"You have already selected another retry policy\");\n\tthis.baseRetryPolicy = new AlwaysRetryPolicy();\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Limits maximum number of attempts to provided value.\n * <p>\n * Invocation of this method does not discard default exception classification rule,\n * that is \"retry only on {@link Exception} and it's subclasses\".\n * @param maxAttempts includes initial attempt and all retries. E.g: maxAttempts = 3\n * means one initial attempt and two retries.\n * @return this\n * @see MaxAttemptsRetryPolicy\n */\n", "func_signal": "public RetryTemplateBuilder maxAttempts(int maxAttempts)", "code": "{\n\tAssert.isTrue(maxAttempts > 0, \"Number of attempts should be positive\");\n\tAssert.isNull(this.baseRetryPolicy, \"You have already selected another retry policy\");\n\tthis.baseRetryPolicy = new MaxAttemptsRetryPolicy(maxAttempts);\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Add a throwable to the while list of retryable exceptions.\n * <p>\n * Warn: touching this method drops default {@code retryOn(Exception.class)} and you\n * should configure whole classifier from scratch.\n * <p>\n * You should select the way you want to configure exception classifier: white list or\n * black list. If you choose white list - use this method, if black - use\n * {@link #notRetryOn(Class)}\n * @param throwable to be retryable (with it's subclasses)\n * @return this\n * @see BinaryExceptionClassifierBuilder#retryOn\n * @see BinaryExceptionClassifier\n */\n", "func_signal": "public RetryTemplateBuilder retryOn(Class<? extends Throwable> throwable)", "code": "{\n\tclassifierBuilder().retryOn(throwable);\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Set up a classifier with input to the router and output from the matcher.\n * @param router see {@link #setRouterDelegate(Object)}\n * @param matcher see {@link #setMatcherMap(Map)}\n */\n", "func_signal": "public BackToBackPatternClassifier(Classifier<C, String> router, Classifier<String, T> matcher)", "code": "{\n\tsuper();\n\tthis.router = router;\n\tthis.matcher = matcher;\n}", "path": "spring-retry/src/main/java/org/springframework/classify/BackToBackPatternClassifier.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Finish configuration and build resulting {@link RetryTemplate}. For default\n * behaviour and concurrency note see class-level doc of {@link RetryTemplateBuilder}.\n * The {@code retryPolicy} of the returned {@link RetryTemplate} is always an instance\n * of {@link CompositeRetryPolicy}, that consists of one base policy, and of\n * {@link BinaryExceptionClassifierRetryPolicy}. The motivation is: whatever base\n * policy we use, exception classification is extremely recommended.\n * @return new instance of {@link RetryTemplate}\n */\n", "func_signal": "public RetryTemplate build()", "code": "{\n\tRetryTemplate retryTemplate = new RetryTemplate();\n\n\t// Exception classifier\n\n\tBinaryExceptionClassifier exceptionClassifier = this.classifierBuilder != null ? this.classifierBuilder.build()\n\t\t\t: BinaryExceptionClassifier.defaultClassifier();\n\n\t// Retry policy\n\n\tif (this.baseRetryPolicy == null) {\n\t\tthis.baseRetryPolicy = new MaxAttemptsRetryPolicy();\n\t}\n\n\tCompositeRetryPolicy finalPolicy = new CompositeRetryPolicy();\n\tfinalPolicy.setPolicies(new RetryPolicy[] { this.baseRetryPolicy,\n\t\t\tnew BinaryExceptionClassifierRetryPolicy(exceptionClassifier) });\n\tretryTemplate.setRetryPolicy(finalPolicy);\n\n\t// Backoff policy\n\n\tif (this.backOffPolicy == null) {\n\t\tthis.backOffPolicy = new NoBackOffPolicy();\n\t}\n\tretryTemplate.setBackOffPolicy(this.backOffPolicy);\n\n\t// Listeners\n\n\tif (this.listeners != null) {\n\t\tretryTemplate.setListeners(this.listeners.toArray(new RetryListener[0]));\n\t}\n\n\treturn retryTemplate;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Appends all provided {@code listeners} to {@link RetryTemplate}'s listener list.\n * @param listeners to be appended\n * @return this\n * @see RetryTemplate\n * @see RetryListener\n */\n", "func_signal": "public RetryTemplateBuilder withListeners(List<RetryListener> listeners)", "code": "{\n\tfor (final RetryListener listener : listeners) {\n\t\tAssert.notNull(listener, \"Listener should not be null\");\n\t}\n\tlistenersList().addAll(listeners);\n\treturn this;\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * Add a sequence of sleeps to the simulation.\n * @param sleeps the times to be created as a {@link SleepSequence}\n */\n", "func_signal": "public void addSequence(List<Long> sleeps)", "code": "{\n\tsleepHistogram.addAll(sleeps);\n\tsleepSequences.add(new SleepSequence(sleeps));\n}", "path": "spring-retry/src/main/java/org/springframework/retry/support/RetrySimulation.java", "commit_date": "2019-03-26 00:00:00", "repo_name": "spring-projects/spring-retry", "stars": 2075, "license": "None", "language": "java", "size": 1211}
{"docstring": "/**\n * \u516c\u94a5\u89e3\u5bc6\n *\n * @param data      \u5df2\u52a0\u5bc6\u6570\u636e\n * @param publicKey \u516c\u94a5(BASE64\u7f16\u7801)\n * @return \u89e3\u5bc6\u540e\u7684\u503c\n * @throws Exception Exception\n */\n", "func_signal": "public static byte[] decryptByPublicKey(byte[] data, String publicKey) throws Exception", "code": "{\n    PublicKey key = decodePublicKey(publicKey);\n    Cipher cipher = Cipher.getInstance(KEY_ALGORITHM_PADDING);\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    return doFinal(cipher, data, MAX_DECRYPT_BLOCK);\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u6821\u9a8c\u6570\u5b57\u7b7e\u540d\n *\n * @param data      \u5df2\u52a0\u5bc6\u6570\u636e\n * @param publicKey \u516c\u94a5(BASE64\u7f16\u7801)\n * @param sign      \u6570\u5b57\u7b7e\u540d\n * @return \u662f\u5426\u901a\u8fc7\u6821\u9a8c\n * @throws Exception Exception\n */\n", "func_signal": "public static boolean verify(byte[] data, String publicKey, String sign) throws Exception", "code": "{\n    Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);\n    signature.initVerify(decodePublicKey(publicKey));\n    signature.update(data);\n    return signature.verify(Base64Utils.decode(sign));\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u4ece\u5b57\u7b26\u4e32\u89e3\u7801\u516c\u94a5\n *\n * @param publicKey \u516c\u94a5\n * @return \u516c\u94a5\n * @throws Exception Exception\n */\n", "func_signal": "public static PublicKey decodePublicKey(String publicKey) throws Exception", "code": "{\n    byte[] keyBytes = Base64Utils.decode(publicKey);\n    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);\n    KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n    return keyFactory.generatePublic(x509KeySpec);\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u751f\u6210\u516c\u94a5\u548c\u79c1\u94a5\n *\n * @param rsaKeySize key size\n *\n * @return \u516c\u94a5\u548c\u79c1\u94a5\n */\n", "func_signal": "public static Pair<RSAPublicKey, RSAPrivateKey> genKeyPair(int rsaKeySize)", "code": "{\n    try {\n        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);\n        keyPairGen.initialize(rsaKeySize);\n        KeyPair keyPair = keyPairGen.generateKeyPair();\n        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\n        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n        return Pair.of(publicKey, privateKey);\n    } catch (NoSuchAlgorithmException e) {\n        LOGGER.error(\"getKeys ex \", e);\n    }\n    return null;\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u79c1\u94a5\u89e3\u5bc6\n *\n * @param data       \u5df2\u52a0\u5bc6\u6570\u636e\n * @param privateKey \u79c1\u94a5(BASE64\u7f16\u7801)\n * @return \u89e3\u5bc6\u540e\u7684\u503c\n * @throws Exception Exception\n */\n", "func_signal": "public static byte[] decryptByPrivateKey(byte[] data, String privateKey) throws Exception", "code": "{\n    PrivateKey key = decodePrivateKey(privateKey);\n    Cipher cipher = Cipher.getInstance(KEY_ALGORITHM_PADDING);\n    cipher.init(Cipher.DECRYPT_MODE, key);\n    return doFinal(cipher, data, MAX_DECRYPT_BLOCK);\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u83b7\u53d6\u5916\u7f51IP\u5730\u5740\n *\n * @return \u5916\u7f51IP\u5730\u5740\n */\n", "func_signal": "public static String getPublicIp()", "code": "{\n\n    if (CC.mp.net.public_ip.length() > 0) {\n        return CC.mp.net.public_ip;\n    }\n\n    String localIp = getLocalIp();\n\n    String remoteIp = public_ip_mapping.getString(localIp);\n\n    if (remoteIp == null) {\n        remoteIp = Utils.lookupExtranetIp();\n    }\n\n    return remoteIp == null ? localIp : remoteIp;\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/config/ConfigTools.java", "commit_date": "2017-07-16 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u6ce8\u610f\uff1aRSA\u52a0\u5bc6\u660e\u6587\u6700\u5927\u957f\u5ea6117\u5b57\u8282\uff0c\n * \u89e3\u5bc6\u8981\u6c42\u5bc6\u6587\u6700\u5927\u957f\u5ea6\u4e3a128\u5b57\u8282\uff0c\n * \u6240\u4ee5\u5728\u52a0\u5bc6\u548c\u89e3\u5bc6\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u5206\u5757\u8fdb\u884c\u3002\n *\n * @param cipher \u5bc6\u94a5\n * @param data   \u5f85\u5904\u7406\u7684\u6570\u636e\n * @return \u5904\u7406\u540e\u7684\u503c\n * @throws BadPaddingException\n * @throws IllegalBlockSizeException\n */\n", "func_signal": "private static byte[] doFinal(Cipher cipher, byte[] data, int key_len) throws BadPaddingException, IllegalBlockSizeException", "code": "{\n    int inputLen = data.length, offset = 0;\n    byte[] tmp;\n    ByteArrayOutputStream out = new ByteArrayOutputStream(getTmpArrayLength(inputLen));\n    while (inputLen > 0) {\n        tmp = cipher.doFinal(data, offset, Math.min(key_len, inputLen));\n        out.write(tmp, 0, tmp.length);\n        offset += key_len;\n        inputLen -= key_len;\n    }\n    return out.toByteArray();\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u79c1\u94a5\u52a0\u5bc6\n *\n * @param data       \u6e90\u6570\u636e\n * @param privateKey \u79c1\u94a5(BASE64\u7f16\u7801)\n * @return \u52a0\u5bc6\u540e\u7684\u503c\n * @throws Exception Exception\n */\n", "func_signal": "public static byte[] encryptByPrivateKey(byte[] data, String privateKey) throws Exception", "code": "{\n    PrivateKey key = decodePrivateKey(privateKey);\n    Cipher cipher = Cipher.getInstance(KEY_ALGORITHM_PADDING);\n    cipher.init(Cipher.ENCRYPT_MODE, key);\n    return doFinal(cipher, data, MAX_ENCRYPT_BLOCK);\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u83b7\u53d6\u5185\u7f51IP\u5730\u5740\n *\n * @return \u5185\u7f51IP\u5730\u5740\n */\n", "func_signal": "public static String getLocalIp()", "code": "{\n    if (CC.mp.net.local_ip.length() > 0) {\n        return CC.mp.net.local_ip;\n    }\n    return Utils.lookupLocalIp();\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/config/ConfigTools.java", "commit_date": "2017-07-16 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u6ce8\u518c\u7528\u6237\u548c\u94fe\u63a5\n *\n * @param userId\n * @param connection\n * @return\n */\n", "func_signal": "public boolean register(String userId, Connection connection)", "code": "{\n    ClientLocation location = ClientLocation\n            .from(connection)\n            .setHost(mPushServer.getGatewayServerNode().getHost())\n            .setPort(mPushServer.getGatewayServerNode().getPort());\n\n    LocalRouter localRouter = new LocalRouter(connection);\n    RemoteRouter remoteRouter = new RemoteRouter(location);\n\n    LocalRouter oldLocalRouter = null;\n    RemoteRouter oldRemoteRouter = null;\n    try {\n        oldLocalRouter = localRouterManager.register(userId, localRouter);\n        oldRemoteRouter = remoteRouterManager.register(userId, remoteRouter);\n    } catch (Exception e) {\n        LOGGER.error(\"register router ex, userId={}, connection={}\", userId, connection, e);\n    }\n\n    if (oldLocalRouter != null) {\n        EventBus.post(new RouterChangeEvent(userId, oldLocalRouter));\n        LOGGER.info(\"register router success, find old local router={}, userId={}\", oldLocalRouter, userId);\n    }\n\n    if (oldRemoteRouter != null && oldRemoteRouter.isOnline()) {\n        EventBus.post(new RouterChangeEvent(userId, oldRemoteRouter));\n        LOGGER.info(\"register router success, find old remote router={}, userId={}\", oldRemoteRouter, userId);\n    }\n    return true;\n}", "path": "mpush/mpush-core/src/main/java/com/mpush/core/router/RouterCenter.java", "commit_date": "2018-06-09 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u68c0\u67e5\u672c\u5730\u8def\u7531\uff0c\u5982\u679c\u5b58\u5728\u5e76\u4e14\u94fe\u63a5\u53ef\u7528\u76f4\u63a5\u63a8\u9001\n * \u5426\u5219\u8981\u68c0\u67e5\u4e0b\u8fdc\u7a0b\u8def\u7531\n *\n * @param message message\n * @return true/false true:success\n */\n", "func_signal": "private boolean checkLocal(IPushMessage message)", "code": "{\n    String userId = message.getUserId();\n    int clientType = message.getClientType();\n    LocalRouter localRouter = mPushServer.getRouterCenter().getLocalRouterManager().lookup(userId, clientType);\n\n    //1.\u5982\u679c\u672c\u673a\u4e0d\u5b58\u5728\uff0c\u518d\u67e5\u4e0b\u8fdc\u7a0b\uff0c\u770b\u7528\u6237\u662f\u5426\u767b\u9646\u5230\u5176\u4ed6\u673a\u5668\n    if (localRouter == null) return false;\n\n    Connection connection = localRouter.getRouteValue();\n\n    //2.\u5982\u679c\u94fe\u63a5\u5931\u6548\uff0c\u5148\u5220\u9664\u672c\u5730\u5931\u6548\u7684\u8def\u7531\uff0c\u518d\u67e5\u4e0b\u8fdc\u7a0b\u8def\u7531\uff0c\u770b\u7528\u6237\u662f\u5426\u767b\u9646\u5230\u5176\u4ed6\u673a\u5668\n    if (!connection.isConnected()) {\n\n        Logs.PUSH.warn(\"[SingleUserPush] find local router but conn disconnected, message={}, conn={}\", message, connection);\n\n        //\u5220\u9664\u5df2\u7ecf\u5931\u6548\u7684\u672c\u5730\u8def\u7531\n        mPushServer.getRouterCenter().getLocalRouterManager().unRegister(userId, clientType);\n\n        return false;\n    }\n\n    //3.\u68c0\u6d4bTCP\u7f13\u51b2\u533a\u662f\u5426\u5df2\u6ee1\u4e14\u5199\u961f\u5217\u8d85\u8fc7\u6700\u9ad8\u9600\u503c\n    if (!connection.getChannel().isWritable()) {\n        mPushServer.getPushCenter().getPushListener().onFailure(message, timeLine.failureEnd().getTimePoints());\n\n        Logs.PUSH.error(\"[SingleUserPush] push message to client failure, tcp sender too busy, message={}, conn={}\", message, connection);\n        return true;\n    }\n\n    //4. \u68c0\u6d4bqps, \u662f\u5426\u8d85\u8fc7\u6d41\u63a7\u9650\u5236\uff0c\u5982\u679c\u8d85\u8fc7\u5219\u8fdb\u961f\u5217\u5ef6\u540e\u53d1\u9001\n    if (flowControl.checkQps()) {\n        timeLine.addTimePoint(\"before-send\");\n        //5.\u94fe\u63a5\u53ef\u7528\uff0c\u76f4\u63a5\u4e0b\u53d1\u6d88\u606f\u5230\u624b\u673a\u5ba2\u6237\u7aef\n        PushMessage pushMessage = PushMessage.build(connection).setContent(message.getContent());\n        pushMessage.getPacket().addFlag(message.getFlags());\n        messageId = pushMessage.getSessionId();\n        pushMessage.send(this);\n    } else {//\u8d85\u8fc7\u6d41\u63a7\u9650\u5236, \u8fdb\u961f\u5217\u5ef6\u540e\u53d1\u9001\n        mPushServer.getPushCenter().delayTask(flowControl.getDelay(), this);\n    }\n    return true;\n}", "path": "mpush/mpush-core/src/main/java/com/mpush/core/push/SingleUserPushTask.java", "commit_date": "2017-07-16 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u4f7f\u7528\u6a21\u548c\u6307\u6570\u751f\u6210RSA\u516c\u94a5\n * \u6ce8\u610f\uff1a\u3010\u6b64\u4ee3\u7801\u7528\u4e86\u9ed8\u8ba4\u8865\u4f4d\u65b9\u5f0f\uff0c\u4e3aRSA/None/PKCS1Padding\uff0c\n * \u4e0d\u540cJDK\u9ed8\u8ba4\u7684\u8865\u4f4d\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c\uff0c\u5982Android\u9ed8\u8ba4\u662fRSA\n * /None/NoPadding\u3011\n *\n * @param modulus  \u6a21\n * @param exponent \u6307\u6570\n * @return \u516c\u94a5\n */\n", "func_signal": "public static RSAPublicKey getPublicKey(String modulus, String exponent)", "code": "{\n    try {\n        BigInteger b1 = new BigInteger(modulus);\n        BigInteger b2 = new BigInteger(exponent);\n        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(b1, b2);\n        return (RSAPublicKey) keyFactory.generatePublic(keySpec);\n    } catch (Exception e) {\n        LOGGER.error(\"getPublicKey ex modulus={}, exponent={}\", modulus, exponent, e);\n        throw new CryptoException(\"Get PublicKey ex\", e);\n    }\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u4f7f\u7528\u6a21\u548c\u6307\u6570\u751f\u6210RSA\u79c1\u94a5\n * \u6ce8\u610f\uff1a\u3010\u6b64\u4ee3\u7801\u7528\u4e86\u9ed8\u8ba4\u8865\u4f4d\u65b9\u5f0f\uff0c\u4e3aRSA/None/PKCS1Padding\uff0c\n * \u4e0d\u540cJDK\u9ed8\u8ba4\u7684\u8865\u4f4d\u65b9\u5f0f\u53ef\u80fd\u4e0d\u540c\uff0c\u5982Android\u9ed8\u8ba4\u662fRSA\n * /None/NoPadding\u3011\n *\n * @param modulus  \u6a21\n * @param exponent \u6307\u6570\n * @return \u79c1\u94a5\n */\n", "func_signal": "public static RSAPrivateKey getPrivateKey(String modulus, String exponent)", "code": "{\n    try {\n        BigInteger b1 = new BigInteger(modulus);\n        BigInteger b2 = new BigInteger(exponent);\n        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n        RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(b1, b2);\n        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);\n    } catch (Exception e) {\n        LOGGER.error(\"getPrivateKey ex modulus={}, exponent={}\", modulus, exponent, e);\n        throw new CryptoException(\"Get PrivateKey ex\", e);\n    }\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u68c0\u6d4b\u8fdc\u7a0b\u8def\u7531\uff0c\n * \u5982\u679c\u4e0d\u5b58\u5728\u76f4\u63a5\u8fd4\u56de\u7528\u6237\u5df2\u7ecf\u4e0b\u7ebf\n * \u5982\u679c\u662f\u672c\u673a\u76f4\u63a5\u5220\u9664\u8def\u7531\u4fe1\u606f\n * \u5982\u679c\u662f\u5176\u4ed6\u673a\u5668\u8ba9PushClient\u91cd\u63a8\n *\n * @param message message\n */\n", "func_signal": "private void checkRemote(IPushMessage message)", "code": "{\n    String userId = message.getUserId();\n    int clientType = message.getClientType();\n    RemoteRouter remoteRouter = mPushServer.getRouterCenter().getRemoteRouterManager().lookup(userId, clientType);\n\n    // 1.\u5982\u679c\u8fdc\u7a0b\u8def\u7531\u4fe1\u606f\u4e5f\u4e0d\u5b58\u5728, \u8bf4\u660e\u7528\u6237\u6b64\u65f6\u4e0d\u5728\u7ebf\uff0c\n    if (remoteRouter == null || remoteRouter.isOffline()) {\n\n        mPushServer.getPushCenter().getPushListener().onOffline(message, timeLine.end(\"offline-end\").getTimePoints());\n\n        Logs.PUSH.info(\"[SingleUserPush] remote router not exists user offline, message={}\", message);\n\n        return;\n    }\n\n    //2.\u5982\u679c\u67e5\u51fa\u7684\u8fdc\u7a0b\u673a\u5668\u662f\u5f53\u524d\u673a\u5668\uff0c\u8bf4\u660e\u8def\u7531\u5df2\u7ecf\u5931\u6548\uff0c\u6b64\u65f6\u7528\u6237\u5df2\u4e0b\u7ebf\uff0c\u9700\u8981\u5220\u9664\u5931\u6548\u7684\u7f13\u5b58\n    if (remoteRouter.getRouteValue().isThisMachine(mPushServer.getGatewayServerNode().getHost(), mPushServer.getGatewayServerNode().getPort())) {\n\n        mPushServer.getPushCenter().getPushListener().onOffline(message, timeLine.end(\"offline-end\").getTimePoints());\n\n        //\u5220\u9664\u5931\u6548\u7684\u8fdc\u7a0b\u7f13\u5b58\n        mPushServer.getRouterCenter().getRemoteRouterManager().unRegister(userId, clientType);\n\n        Logs.PUSH.info(\"[SingleUserPush] find remote router in this pc, but local router not exists, userId={}, clientType={}, router={}\"\n                , userId, clientType, remoteRouter);\n\n        return;\n    }\n\n    //3.\u5426\u5219\u8bf4\u660e\u7528\u6237\u5df2\u7ecf\u8dd1\u5230\u53e6\u5916\u4e00\u53f0\u673a\u5668\u4e0a\u4e86\uff1b\u8def\u7531\u4fe1\u606f\u53d1\u751f\u66f4\u6539\uff0c\u8ba9PushClient\u91cd\u63a8\n    mPushServer.getPushCenter().getPushListener().onRedirect(message, timeLine.end(\"redirect-end\").getTimePoints());\n\n    Logs.PUSH.info(\"[SingleUserPush] find router in another pc, userId={}, clientType={}, router={}\", userId, clientType, remoteRouter);\n\n}", "path": "mpush/mpush-core/src/main/java/com/mpush/core/push/SingleUserPushTask.java", "commit_date": "2017-07-16 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u7528\u79c1\u94a5\u5bf9\u4fe1\u606f\u751f\u6210\u6570\u5b57\u7b7e\u540d\n *\n * @param data       \u5df2\u52a0\u5bc6\u6570\u636e\n * @param privateKey \u79c1\u94a5(BASE64\u7f16\u7801)\n * @return \u79c1\u94a5\n * @throws Exception Exception\n */\n", "func_signal": "public static String sign(byte[] data, String privateKey) throws Exception", "code": "{\n    Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);\n    signature.initSign(decodePrivateKey(privateKey));\n    signature.update(data);\n    return Base64Utils.encode(signature.sign());\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u4ece\u5b57\u7b26\u4e32\u89e3\u7801\u79c1\u94a5\n *\n * @param key \u5bc6\u94a5\n * @return base64\u540e\u7684\u5b57\u7b26\u4e32\n * @throws Exception Exception\n */\n", "func_signal": "public static PrivateKey decodePrivateKey(String key) throws Exception", "code": "{\n    byte[] keyBytes = Base64Utils.decode(key);\n    PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);\n    KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n    return keyFactory.generatePrivate(pkcs8KeySpec);\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u516c\u94a5\u52a0\u5bc6\n *\n * @param data      \u5f85\u52a0\u5bc6\u6570\u636e\n * @param publicKey \u516c\u94a5\n * @return \u52a0\u5bc6\u540e\u7684\u503c\n */\n", "func_signal": "public static byte[] encryptByPublicKey(byte[] data, RSAPublicKey publicKey)", "code": "{\n    try {\n        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM_PADDING);\n        cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n        // \u6a21\u957f\n        int key_len = publicKey.getModulus().bitLength() / 8;\n        // \u52a0\u5bc6\u6570\u636e\u957f\u5ea6 <= \u6a21\u957f-11\n        //\u5982\u679c\u660e\u6587\u957f\u5ea6\u5927\u4e8e\u6a21\u957f-11\u5219\u8981\u5206\u7ec4\u52a0\u5bc6\n        return doFinal(cipher, data, key_len - 11);\n    } catch (Exception e) {\n        LOGGER.error(\"encryptByPublicKey ex\", e);\n        throw new CryptoException(\"RSA encrypt ex\", e);\n    }\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u5904\u7406PushClient\u53d1\u9001\u8fc7\u6765\u7684Push\u63a8\u9001\u8bf7\u6c42\n * <p>\n * \u67e5\u5bfb\u8def\u7531\u7b56\u7565\uff0c\u5148\u67e5\u672c\u5730\u8def\u7531\uff0c\u672c\u5730\u4e0d\u5b58\u5728\uff0c\u67e5\u8fdc\u7a0b\uff0c\uff08\u6ce8\u610f\uff1a\u6709\u53ef\u80fd\u8fdc\u7a0b\u67e5\u5230\u4e5f\u662f\u672c\u673aIP\uff09\n * <p>\n * \u6b63\u5e38\u60c5\u51b5\u672c\u5730\u8def\u7531\u5e94\u8be5\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u6216\u94fe\u63a5\u5931\u6548\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n * <p>\n * 1.\u5ba2\u6237\u7aef\u91cd\u8fde\uff0c\u5e76\u4e14\u94fe\u63a5\u5230\u4e86\u5176\u4ed6\u673a\u5668\n * 2.\u5ba2\u6237\u7aef\u4e0b\u7ebf\uff0c\u672c\u5730\u8def\u7531\u5931\u6548\uff0c\u8fdc\u7a0b\u8def\u7531\u8fd8\u672a\u6e05\u9664\n * 3.PushClient\u4f7f\u7528\u4e86\u672c\u5730\u7f13\u5b58\uff0c\u4f46\u7f13\u5b58\u6570\u636e\u5df2\u7ecf\u548c\u5b9e\u9645\u60c5\u51b5\u4e0d\u4e00\u81f4\u4e86\n * <p>\n * \u5bf9\u4e8e\u4e09\u79cd\u60c5\u51b5\u7684\u5904\u7406\u65b9\u5f0f\u662f, \u518d\u91cd\u65b0\u67e5\u5bfb\u4e0b\u8fdc\u7a0b\u8def\u7531\uff1a\n * 1.\u5982\u679c\u53d1\u73b0\u8fdc\u7a0b\u8def\u7531\u662f\u672c\u673a\uff0c\u76f4\u63a5\u5220\u9664\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684\u8def\u7531\u5df2\u5931\u6548 (\u89e3\u51b3\u573a\u666f2)\n * 2.\u5982\u679c\u7528\u6237\u771f\u5728\u53e6\u4e00\u53f0\u673a\u5668\uff0c\u8ba9PushClient\u6e05\u7406\u4e0b\u672c\u5730\u7f13\u5b58\u540e\uff0c\u91cd\u65b0\u63a8\u9001 (\u89e3\u51b3\u573a\u666f1,3)\n * <p>\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    if (checkTimeout()) return;// \u8d85\u65f6\n\n    if (checkLocal(message)) return;// \u672c\u5730\u8fde\u63a5\u5b58\u5728\n\n    checkRemote(message);//\u672c\u5730\u8fde\u63a5\u4e0d\u5b58\u5728\uff0c\u68c0\u6d4b\u8fdc\u7a0b\u8def\u7531\n}", "path": "mpush/mpush-core/src/main/java/com/mpush/core/push/SingleUserPushTask.java", "commit_date": "2017-07-16 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u6dfb\u52a0ACK\u4efb\u52a1\u5230\u961f\u5217, \u7b49\u5f85\u5ba2\u6237\u7aef\u54cd\u5e94\n *\n * @param messageId \u4e0b\u53d1\u5230\u5ba2\u6237\u7aef\u5f85ack\u7684\u6d88\u606f\u7684sessionId\n */\n", "func_signal": "private void addAckTask(int messageId)", "code": "{\n    timeLine.addTimePoint(\"waiting-ack\");\n\n    //\u56e0\u4e3a\u8981\u8fdb\u961f\u5217\uff0c\u53ef\u4ee5\u63d0\u524d\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5360\u7528\u5185\u5b58\u7684\u5b57\u6bb5\uff0c\u4fbf\u4e8e\u5783\u573e\u56de\u6536\n    message.finalized();\n\n    AckTask task = AckTask\n            .from(messageId)\n            .setCallback(new PushAckCallback(message, timeLine, mPushServer.getPushCenter()));\n\n    mPushServer.getPushCenter().getAckTaskQueue().add(task, message.getTimeoutMills() - (int) (System.currentTimeMillis() - start));\n}", "path": "mpush/mpush-core/src/main/java/com/mpush/core/push/SingleUserPushTask.java", "commit_date": "2017-07-16 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * \u79c1\u94a5\u89e3\u5bc6\n *\n * @param data       \u5f85\u52a0\u5bc6\u6570\u636e\n * @param privateKey \u79c1\u94a5\n * @return \u89e3\u5bc6\u540e\u7684\u503c\n */\n", "func_signal": "public static byte[] decryptByPrivateKey(byte[] data, RSAPrivateKey privateKey)", "code": "{\n    try {\n        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM_PADDING);\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\n        //\u6a21\u957f\n        int key_len = privateKey.getModulus().bitLength() / 8;\n        //\u5982\u679c\u5bc6\u6587\u957f\u5ea6\u5927\u4e8e\u6a21\u957f\u5219\u8981\u5206\u7ec4\u89e3\u5bc6\n        return doFinal(cipher, data, key_len);\n    } catch (Exception e) {\n        LOGGER.error(\"decryptByPrivateKey ex\", e);\n        throw new CryptoException(\"RSA decrypt ex\", e);\n    }\n}", "path": "mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/RSAUtils.java", "commit_date": "2017-01-02 00:00:00", "repo_name": "mpusher/mpush", "stars": 3717, "license": "apache-2.0", "language": "java", "size": 2595}
{"docstring": "/**\n * Creates a new action object.\n *\n * @param graph Graph where the selection happens.\n * @param node Node that provides the selected content.\n */\n", "func_signal": "public CSelectNodesWithSelection(final ZyGraph graph, final NaviNode node)", "code": "{\n  super(\"Select nodes with selection\");\n\n  Preconditions.checkNotNull(graph, \"IE00944: Graph argument can not be null\");\n\n  Preconditions.checkNotNull(node, \"IE00945: Node argument can not be null\");\n\n  m_graph = graph;\n  m_node = node;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/ZyGraph/Menus/Actions/CSelectNodesWithSelection.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Creates a new action object.\n *\n * @param graph The graph whose node selection is expanded up.\n */\n", "func_signal": "public CActionExpandSelectionUp(final ZyGraph graph)", "code": "{\n  super(\"Expand Selection Up\");\n\n  m_graph = graph;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/Gui/GraphWindows/Actions/CActionExpandSelectionUp.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Creates a new REIL register object.\n * \n * @param register Name of the register\n * @param size Size of the register\n * @param value Value of the register\n */\n", "func_signal": "public ReilRegister(final String register, final OperandSize size, final BigInteger value)", "code": "{\n  this.register = Preconditions.checkNotNull(register, \"Error: Argument register can't be null\");\n  this.size = Preconditions.checkNotNull(size, \"Error: Argument size can't be null\");\n  this.value = value;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/reil/interpreter/ReilRegister.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Creates a new action object.\n *\n * @param treeNode The operand to display.\n */\n", "func_signal": "public CDisplayOperandAction(final COperandTreeNode treeNode,\n    final OperandDisplayStyle displayStyle, final String displayName)", "code": "{\n  super(displayName);\n  this.treeNode = treeNode;\n  this.displayStyle = displayStyle;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/ZyGraph/Menus/Actions/CDisplayOperandAction.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Creates a new remote file browser.\n *\n * @param parent Parent window of the dialog.\n * @param debugger Debugger that provides information about the remote file system.\n * @param fileSystem Remote file system object that contains information about the remote file\n *        system.\n */\n", "func_signal": "public CRemoteFileBrowser(final Window parent, final IDebugger debugger,\n    final RemoteFileSystem fileSystem)", "code": "{\n  super(new CRemoteFileSystemView(fileSystem));\n  this.parent = Preconditions.checkNotNull(parent, \"IE01494: Parent argument can not be null\");\n  this.debugger =\n      Preconditions.checkNotNull(debugger, \"IE01495: Debugger argument can not be null\");\n\n  setFileView(new CRemoteFileView());\n  final String lastDir = ConfigManager.instance().getGeneralSettings().getLastDirectory();\n  if (!lastDir.isEmpty()) {\n    setCurrentDirectory(new CRemoteFile(lastDir, true /* is directory */));\n  }\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/Gui/Debug/RemoteBrowser/FileBrowser/CRemoteFileBrowser.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Iterates over all visible nodes in the graph.\n * \n * @param callback Callback object that is invoked once for each visible node in the graph.\n */\n", "func_signal": "public static <NodeType extends ZyGraphNode<?> & ISelectableNode & IViewableNode & IYNode & IRawNodeAccessible> void iterateVisible(\n    final AbstractZyGraph<NodeType, ?> graph, final INodeCallback<NodeType> callback)", "code": "{\n  Preconditions.checkNotNull(callback, \"Error: Callback argument can't be null\");\n\n  graph.iterate(new INodeCallback<NodeType>() {\n    @Override\n    public IterationMode next(final NodeType node) {\n      if (!node.isVisible()) {\n        return IterationMode.CONTINUE;\n      }\n\n      return callback.next(node);\n    }\n  });\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/zylib/gui/zygraph/functions/IteratorFunctions.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Returns the bookmark at the given address.\n *\n * @param address The address of the bookmark to search for.\n *\n * @return The bookmark at the given address or null if there is no such bookmark.\n */\n", "func_signal": "public CBookmark getBookmark(final IAddress address)", "code": "{\n  Preconditions.checkNotNull(address, \"IE00384: Bookmark address can not be null\");\n\n  for (final CBookmark bookmark : m_bookmarks) {\n    if (bookmark.getAddress().equals(address)) {\n      return bookmark;\n    }\n  }\n\n  return null;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/models/Bookmarks/memory/BookmarkManager.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Removes the bookmark at the given index.\n *\n * @param bookmark The bookmark to remove.\n */\n", "func_signal": "public void removeBookmark(final CBookmark bookmark)", "code": "{\n  Preconditions.checkNotNull(bookmark, \"IE00385: Bookmark can not be null\");\n  Preconditions.checkArgument(\n      m_bookmarks.remove(bookmark), \"IE00386: Bookmark is not managed by this manager\");\n\n  for (final IBookmarkManagerListener listener : m_listeners) {\n    try {\n      listener.removedBookmark(this, bookmark);\n    } catch (final Exception exception) {\n      CUtilityFunctions.logException(exception);\n    }\n  }\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/models/Bookmarks/memory/BookmarkManager.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Generates code for the Below condition.\n * \n * @param environment A valid translation environment\n * @param offset Next usable REIL offset\n * \n * @throws InternalTranslationException if the argument environment is null or the argument offset\n *         is less than 0.\n * \n * @return The result of the translation including the generated code and the register that holds\n *         the result of the condition.\n */\n", "func_signal": "@Override\npublic Pair<OperandSize, String> generate(final ITranslationEnvironment environment,\n    final long offset, final List<ReilInstruction> instructions)\n    throws InternalTranslationException", "code": "{\n  Preconditions.checkNotNull(environment, \"Error: Argument environment can't be null\");\n  Preconditions.checkNotNull(instructions, \"Error: Argument instructions can't be null\");\n  Preconditions.checkArgument(offset >= 0, \"Error: Argument offset can't be less than 0\");\n\n  // Below: CF\n  return new Pair<OperandSize, String>(OperandSize.BYTE, Helpers.CARRY_FLAG);\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/reil/translators/x86/BelowGenerator.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "// / @cond INTERNAL\n/**\n * Converts an internal operand type value into an API operand type value.\n *\n * @param type The operand type value to convert.\n *\n * @return The converted operand type value.\n */\n// / @endcond\n", "func_signal": "public static OperandType valueOf(final com.google.security.zynamics.reil.OperandType type)", "code": "{\n  switch (type) {\n    case EMPTY:\n      return EMPTY;\n    case INTEGER_LITERAL:\n      return INTEGER_LITERAL;\n    case REGISTER:\n      return REGISTER;\n    case SUB_ADDRESS:\n      return SUB_ADDRESS;\n    default:\n      throw new IllegalArgumentException(\"Error: Unknown type\");\n  }\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/API/reil/OperandType.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Adds a hint icon to a component.\n * \n * @param component The component the hint icon is added to.\n * @param message The message shown by the hint icon when the cursor hovers over it.\n * \n * @return The new component that contains both the passed component and the hint icon.\n */\n", "func_signal": "public static Component createHintPanel(final Component component, final String message)", "code": "{\n  Preconditions.checkNotNull(component, \"IE01256: Component argument can not be null\");\n\n  Preconditions.checkNotNull(message, \"IE01257: Message argument can not be null\");\n\n  final JPanel panel = new JPanel(new BorderLayout());\n\n  panel.add(component, BorderLayout.CENTER);\n\n  final JHintIcon hintPopup = new JHintIcon(message);\n  hintPopup.setBorder(new EmptyBorder(0, 3, 0, 0));\n  panel.add(hintPopup, BorderLayout.EAST);\n\n  return panel;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/Gui/SettingsDialog/CHintCreator.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Creates a new action object.\n *\n * @param tree Tree where the criterium is inserted.\n * @param parent Parent node of the new criterium node.\n */\n", "func_signal": "public CAppendNotOperatorAction(final CCriteriumTree tree, final CCriteriumTreeNode parent)", "code": "{\n  super(\"Append NOT\");\n\n  m_tree = tree;\n  m_parent = parent;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/Gui/CriteriaDialog/ExpressionTree/Actions/CAppendNotOperatorAction.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Iterates over all invisible nodes in the graph.\n * \n * @param callback Callback object that is invoked once for each invisible node in the graph.\n */\n", "func_signal": "public static <NodeType extends ZyGraphNode<?> & ISelectableNode & IViewableNode & IYNode & IRawNodeAccessible> void iterateInvisible(\n    final AbstractZyGraph<NodeType, ?> graph, final INodeCallback<NodeType> callback)", "code": "{\n  Preconditions.checkNotNull(callback, \"Error: Callback argument can't be null\");\n\n  graph.iterate(new INodeCallback<NodeType>() {\n    @Override\n    public IterationMode next(final NodeType node) {\n      if (node.isVisible()) {\n        return IterationMode.CONTINUE;\n      }\n\n      return callback.next(node);\n    }\n  });\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/zylib/gui/zygraph/functions/IteratorFunctions.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Adds a bookmark to the list of active bookmarks.\n *\n * @param bookmark The bookmark to add to the list.\n */\n", "func_signal": "public void addBookmark(final CBookmark bookmark)", "code": "{\n  Preconditions.checkNotNull(bookmark, \"IE00382: Bookmark can not be null\");\n  Preconditions.checkArgument(getBookmark(bookmark.getAddress()) == null,\n      \"IE00383: Bookmark already exists at offset %s\", bookmark.getAddress().toHexString());\n\n  m_bookmarks.add(bookmark);\n\n  for (final IBookmarkManagerListener listener : m_listeners) {\n    try {\n      listener.addedBookmark(this, bookmark);\n    } catch (final Exception exception) {\n      CUtilityFunctions.logException(exception);\n    }\n  }\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/models/Bookmarks/memory/BookmarkManager.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Returns the string that is currently stored in the system clipboard.\n *\n * @return The string from the system clipboard or null if there is no string currently stored in\n *         the clipboard.\n */\n", "func_signal": "public static String getClipboardString()", "code": "{\n\n  final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n  final Transferable contents = clipboard.getContents(null);\n\n  final boolean hasTransferableText =\n      (contents != null) && contents.isDataFlavorSupported(DataFlavor.stringFlavor);\n  if (!hasTransferableText) {\n    return null;\n  }\n\n  try {\n    return (String) contents.getTransferData(DataFlavor.stringFlavor);\n  } catch (UnsupportedFlavorException | IOException ex) {\n    // Eat, cannot happen as we're checking above\n  }\n\n  return null;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/zylib/general/ClipboardHelpers.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Creates a new action object.\n *\n * @param parent Window where the new view is shown.\n * @param view View to be cloned.\n * @param container Container where the new view is stored.\n */\n", "func_signal": "public CActionClone(\n    final CGraphWindow parent, final INaviView view, final IViewContainer container)", "code": "{\n  super(\"Clone View\");\n\n  m_parent = Preconditions.checkNotNull(parent, \"IE01641: Parent can't be null\");\n  m_view = Preconditions.checkNotNull(view, \"IE01642: View argument can not be null\");\n  m_container =\n      Preconditions.checkNotNull(container, \"IE01643: Container argument can not be null\");\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/Gui/GraphWindows/Actions/CActionClone.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Iterates over all selected nodes in the graph.\n * \n * @param callback Callback object that is invoked once for each selected node in the graph.\n */\n", "func_signal": "public static <NodeType extends ZyGraphNode<?> & ISelectableNode & IViewableNode & IYNode & IRawNodeAccessible> void iterateSelected(\n    final AbstractZyGraph<NodeType, ?> graph, final INodeCallback<NodeType> callback)", "code": "{\n  Preconditions.checkNotNull(callback, \"Error: Callback argument can't be null\");\n\n  graph.iterate(new INodeCallback<NodeType>() {\n    @Override\n    public IterationMode next(final NodeType node) {\n      if (!node.isSelected()) {\n        return IterationMode.CONTINUE;\n      }\n\n      return callback.next(node);\n    }\n  });\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/zylib/gui/zygraph/functions/IteratorFunctions.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Copies a string to the system clipboard.\n *\n * @param string The string to be copied to the system clipboard.\n */\n", "func_signal": "public static void copyToClipboard(final String string)", "code": "{\n  Preconditions.checkNotNull(string, \"Error: String argument can not be null\");\n\n  final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n\n  clipboard.setContents(new StringSelection(string), new ClipboardOwner() {\n    @Override\n    public void lostOwnership(final Clipboard clipboard, final Transferable contents) {}\n  });\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/zylib/general/ClipboardHelpers.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * QDSUB{<cond>} <Rd>, <Rm>, <Rn>\n * \n * Operation:\n * \n * if ConditionPassed(cond) then Rd = SignedSat(Rm - SignedSat(Rn*2, 32), 32)\n * if SignedDoesSat(Rm - SignedSat(Rn*2, 32), 32) or SignedDoesSat(Rn*2, 32)\n * then Q Flag = 1\n */\n", "func_signal": "@Override\npublic void translate(final ITranslationEnvironment environment, final IInstruction instruction,\n    final List<ReilInstruction> instructions) throws InternalTranslationException", "code": "{\n  TranslationHelpers.checkTranslationArguments(environment, instruction, instructions, \"QDSUB\");\n  translateAll(environment, instruction, \"QDSUB\", instructions);\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/reil/translators/arm/ARMQdsubTranslator.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "// ! Finds an instruction with a given address.\n/**\n * Returns the instruction of a flow graph that starts at a given address. Since addresses do not\n * uniquely identify instructions it is possible that there is more than one instruction with the\n * given address in the graph. In case of multiple instructions that start at the given address it\n * is undefined exactly which of those instructions is returned.\n * \n * This function is guaranteed to work in O(m + n) where m is the number of nodes in the graph and\n * n is the number of instructions in the graph.\n * \n * @param flowgraph The graph to search through.\n * @param address The address to search for.\n * \n * @return The instruction that starts at the given address or null if there is no such\n *         instruction.\n */\n", "func_signal": "public static Instruction getInstruction(final FlowGraph flowgraph, final Address address)", "code": "{\n  Preconditions.checkNotNull(flowgraph, \"Error: Graph argument can not be null\");\n  Preconditions.checkNotNull(address, \"Error: Address argument can not be null\");\n\n  for (final BasicBlock node : flowgraph) {\n    for (final Instruction instruction : node.getInstructions()) {\n      if (instruction.getAddress().equals(address)) {\n        return instruction;\n      }\n    }\n  }\n\n  return null;\n}", "path": "binnavi/src/main/java/com/google/security/zynamics/binnavi/API/disassembly/FlowGraphHelpers.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "google/binnavi", "stars": 2861, "license": "apache-2.0", "language": "java", "size": 136495}
{"docstring": "/**\n * Calling a {@code InterfaceMethodref} constant pool entry with {@code invokestatic}\n * is not allowed in Java 7 bytecode. It'll fail at class loading time with\n * \"VerifyError: Illegal type at constant pool entry\"\n */\n", "func_signal": "@Test\npublic void calling_static_methods_of_library_interfaces__new_interface()", "code": "{\n    assumeThat(SystemUtils.JAVA_VERSION_FLOAT, is(lessThan(1.8f)));\n\n    thrown.expect(NoClassDefFoundError.class);\n    thrown.expectMessage(\"java/util/stream/Stream\");\n    // We don't want this call to prevent loading this whole test class,\n    // it should only fail when this line is executed\n    Stream.of(1, 2, 3);\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/InterfaceStaticMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// Inheriting & Overriding\n", "func_signal": "@Test\npublic void default_method_inherited_from_interface()", "code": "{\n    DefaultMethods obj = new DefaultMethods() {\n    };\n    assertThat(obj.foo(), is(\"original\"));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * Backporting default methods should not interact badly with backporting lambdas.\n */\n", "func_signal": "@Test\npublic void lambdas_with_default_methods()", "code": "{\n    CallOtherMethods lambda = () -> 2;\n    assertThat(lambda.foo(), is(2));\n    assertThat(lambda.callsFoo(), is(12));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * We're unable to backport default methods if we cannot modify the interface,\n * e.g. if it's part of the standard library or a third-party library.\n */\n", "func_signal": "@Test\npublic void default_methods_of_library_interfaces_are_ignored_silently() throws Exception", "code": "{\n    @SuppressWarnings(\"unchecked\") Iterator<String> dummy = mock(Iterator.class);\n\n    // the Iterable interface has default methods in Java 8, but that\n    // should not prevent us from using it in previous Java versions\n    Iterable<String> it = new Iterable<String>() {\n        @Override\n        public Iterator<String> iterator() {\n            return dummy;\n        }\n    };\n\n    assertThat(\"interface should work as usual\", it.iterator(), is(dummy));\n    assertThat(\"should not copy default methods from library interfaces\",\n            it.getClass().getDeclaredMethods(), arrayWithSize(1));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * Because the constructor is private, an access method must be generated for it\n * and also the NEW instruction must be done inside the access method.\n */\n", "func_signal": "@Test\npublic void method_references_to_private_constructors() throws Exception", "code": "{\n    Callable<HasPrivateConstructor> factory = HasPrivateConstructor.factory();\n    assertThat(factory.call(), is(instanceOf(HasPrivateConstructor.class)));\n\n    HasPrivateConstructorWithArgs.Factory factoryArgs = HasPrivateConstructorWithArgs.factory();\n    assertThat(factoryArgs.create(\"args\"), is(instanceOf(HasPrivateConstructorWithArgs.class)));\n    assertThat(factoryArgs.create(\"args\").args, is(\"args\"));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/LambdaTest.java", "commit_date": "2020-01-23 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * Lambdas which capture this in default methods will generate the lambda implementation\n * method as a private <em>instance</em> method. We must avoid copying those methods to\n * the interface implementers as if they were default methods.\n */\n", "func_signal": "@Test\npublic void default_methods_with_lambdas_in_another_package() throws Exception", "code": "{\n    assumeThat(SystemUtils.JAVA_VERSION_FLOAT, is(lessThan(1.8f)));\n\n    UsesLambdasInAnotherPackage obj = new UsesLambdasInAnotherPackage() {\n    };\n    assertThat(obj.stateless().call(), is(\"foo\"));\n    assertThat(obj.captureThis().call(), is(\"foo\"));\n    assertThat(\"should contain only delegates to the two default methods\",\n            obj.getClass().getDeclaredMethods(), arrayWithSize(2));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// Bridge Methods\n", "func_signal": "@Test\npublic void default_method_type_refined_in_child_interface()", "code": "{\n    RefineChild child = new RefineChild() {\n        @Override\n        public String foo() {\n            return \"refined\";\n        }\n    };\n    assertThat(\"direct call\", child.foo(), is(\"refined\"));\n    assertThat(\"bridged call\", ((RefineParent) child).foo(), is((Object) \"refined\"));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * A naive method for removing method bodies would easily also remove their annotations,\n * because in ASM method annotations are expressed as calls on the MethodVisitor.\n */\n", "func_signal": "@Test\n@SuppressWarnings(\"unchecked\")\npublic void keeps_annotations_on_interface_methods() throws Exception", "code": "{\n    assertThat(\"interface\", AnnotatedInterface.class.getAnnotations(),\n            arrayContaining(someAnnotation(1)));\n\n    assertThat(\"abstract method\", AnnotatedInterface.class.getMethod(\"annotatedAbstractMethod\").getAnnotations(),\n            arrayContaining(someAnnotation(2)));\n\n    assertThat(\"default method\", AnnotatedInterface.class.getMethod(\"annotatedDefaultMethod\").getAnnotations(),\n            arrayContaining(someAnnotation(3)));\n\n    assumeThat(SystemUtils.JAVA_VERSION_FLOAT, is(lessThan(1.8f)));\n    assertThat(\"static method\", companionOf(AnnotatedInterface.class).getMethod(\"annotatedStaticMethod\").getAnnotations(),\n            arrayContaining(someAnnotation(4)));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// Method relocations\n", "func_signal": "@Test\npublic void abstract_methods_on_interfaces_are_not_relocated()", "code": "{\n    analyze(InterfaceMethodTypes.class);\n\n    MethodRef source = new MethodRef(H_INVOKEINTERFACE, InterfaceMethodTypes.class, \"abstractMethod\", voidMethod());\n    MethodRef target = analyzer.getMethodCallTarget(source);\n\n    assertThat(target, is(source));\n}", "path": "retrolambda/retrolambda/src/test/java/net/orfjackal/retrolambda/ClassAnalyzerTest.java", "commit_date": "2018-08-12 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// Calling Super\n", "func_signal": "@Test\npublic void default_methods_calling_super()", "code": "{\n    SuperCallChild child = new SuperCallChild() {\n    };\n    assertThat(child.callSuper(), is(11));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// Default method implementations\n", "func_signal": "@Test\npublic void abstract_methods_have_no_implementation()", "code": "{\n    analyze(HasDefaultMethods.class);\n\n    MethodRef method = new MethodRef(H_INVOKEINTERFACE, HasDefaultMethods.class, \"abstractMethod\", voidMethod());\n    MethodRef impl = analyzer.getMethodDefaultImplementation(method);\n\n    assertThat(impl, is(nullValue()));\n}", "path": "retrolambda/retrolambda/src/test/java/net/orfjackal/retrolambda/ClassAnalyzerTest.java", "commit_date": "2018-08-12 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// Primitive Types & Void\n", "func_signal": "@Test\npublic void default_methods_of_primitive_type()", "code": "{\n    Primitives p = new Primitives() {\n    };\n    assertThat(\"boolean\", p.getBoolean(), is(true));\n    assertThat(\"byte\", p.getByte(), is((byte) 2));\n    assertThat(\"short\", p.getShort(), is((short) 3));\n    assertThat(\"int\", p.getInt(), is(4));\n    assertThat(\"long\", p.getLong(), is(5L));\n    assertThat(\"float\", p.getFloat(), is(6.0f));\n    assertThat(\"double\", p.getDouble(), is(7.0));\n    assertThat(\"char\", p.getChar(), is('a'));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// other helpers\n", "func_signal": "private static String voidMethod(Class<?>... argumentTypes)", "code": "{\n    return Type.getMethodDescriptor(Type.VOID_TYPE,\n            Stream.of(argumentTypes)\n                    .map(Type::getType)\n                    .toArray(Type[]::new));\n}", "path": "retrolambda/retrolambda/src/test/java/net/orfjackal/retrolambda/ClassAnalyzerTest.java", "commit_date": "2018-08-12 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * If the lambda impl method is generated as a private instance method,\n * we cannot just make it package-private for the lambda class to call them,\n * because a subclass may override the lambda by overriding its enclosing method\n * and declaring another lambda expression there.\n */\n", "func_signal": "@Test\npublic void will_not_cause_lambda_expressions_to_be_overridable()", "code": "{\n    List<String> spy = new ArrayList<>();\n    class Parent {\n        @SuppressWarnings(\"unused\")\n        private int i;\n\n        public void foo() {\n            Runnable lambda = () -> { // generates a private \"lambda$foo$0\" method\n                i++; // causes this lambda to be generated as an instance method\n                spy.add(\"parent\");\n            };\n            lambda.run();\n        }\n    }\n    class Child extends Parent {\n        @SuppressWarnings(\"unused\")\n        private int i;\n\n        @Override\n        public void foo() {\n            super.foo();\n            Runnable lambda = () -> { // generates a private \"lambda$foo$0\" method\n                i++; // causes this lambda to be generated as an instance method\n                spy.add(\"child\");\n            };\n            lambda.run();\n        }\n    }\n\n    Child c = new Child();\n    c.foo();\n\n    assertThat(spy, is(Arrays.asList(\"parent\", \"child\")));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/LambdaTest.java", "commit_date": "2020-01-23 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * Based on the example in <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.4.1\">JLS \u00a79.4.1</a>\n * (Interfaces - Inheritance and Overriding)\n */\n", "func_signal": "@Test\npublic void inheriting_same_default_methods_through_many_parent_interfaces()", "code": "{\n    assertThat(new InheritsOriginal() {\n    }.foo(), is(\"original\"));\n\n    assertThat(new InheritsOverridden() {\n    }.foo(), is(\"overridden\"));\n\n    assertThat(new InheritsOverriddenAndOriginal() {\n    }.foo(), is(\"overridden\"));\n\n    assertThat(new InheritsOriginalAndOverridden() {\n    }.foo(), is(\"overridden\"));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * We cannot just make the private methods package-private for the\n * lambda class to call them, because that may cause a method in subclass\n * to override them.\n */\n", "func_signal": "@Test\npublic void will_not_cause_private_methods_to_be_overridable() throws Exception", "code": "{\n    class Parent {\n        private String privateMethod() {\n            return \"parent version\";\n        }\n\n        Callable<String> parentRef() {\n            return this::privateMethod;\n        }\n    }\n    class Child extends Parent {\n        private String privateMethod() { // would override if were not private\n            return \"child version\";\n        }\n\n        Callable<String> childRef() {\n            return this::privateMethod;\n        }\n    }\n\n    Child child = new Child();\n\n    // Our test assumes that there exists a private method with\n    // the same name and signature in super and sub classes.\n    String name = \"privateMethod\";\n    assertThat(child.getClass().getDeclaredMethod(name), is(notNullValue()));\n    assertThat(child.getClass().getSuperclass().getDeclaredMethod(name), is(notNullValue()));\n\n    assertThat(child.privateMethod(), is(\"child version\"));\n    assertThat(child.childRef().call(), is(\"child version\"));\n\n    assertThat(((Parent) child).privateMethod(), is(\"parent version\"));\n    assertThat(child.parentRef().call(), is(\"parent version\"));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/LambdaTest.java", "commit_date": "2020-01-23 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * Though we use {@link InMainSources}, because the Retrolambda Maven plugin\n * processes the main sources separately from the test sources, the effect is\n * the same as if they were in another module.\n */\n", "func_signal": "@Test\npublic void calling_default_methods_from_another_module_through_interface()", "code": "{\n    InMainSources.Interface implementer = new InMainSources.Implementer();\n    assertThat(implementer.defaultMethod(), is(\"default\"));\n\n    InMainSources.Interface overrider = new InMainSources.Overrider();\n    assertThat(overrider.defaultMethod(), is(\"overridden\"));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/DefaultMethodsTest.java", "commit_date": "2015-12-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * JDK 8 adds a bridge method to an interface when it overrides a method\n * from the parent interface and refines its return type. This uses Java 8's\n * default methods feature, which won't work on Java 7 and below, so we have\n * to remove it for it - this makes the bytecode same as what JDK 7 produces.\n */\n", "func_signal": "@Test\n@SuppressWarnings(\"Convert2Lambda\")\npublic void will_remove_bridge_methods_from_interfaces()", "code": "{\n    BridgeChild child = new BridgeChild() {\n        @Override\n        public String foo() {\n            return \"foo\";\n        }\n    };\n    assertThat(\"direct call\", child.foo(), is(\"foo\"));\n    assertThat(\"bridged call\", ((BridgeParent) child).foo(), is((Object) \"foo\"));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/InterfaceBridgeMethodsTest.java", "commit_date": "2014-11-15 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * We could make private lambda implementation methods package-private,\n * so that the lambda class may call them, but we should not make any\n * more methods non-private than is absolutely necessary.\n */\n", "func_signal": "@Test\npublic void will_not_change_the_visibility_of_unrelated_methods() throws Exception", "code": "{\n    assertThat(unrelatedPrivateMethod(), is(\"foo\"));\n\n    Method method = getClass().getDeclaredMethod(\"unrelatedPrivateMethod\");\n    int modifiers = method.getModifiers();\n\n    assertTrue(\"expected \" + method.getName() + \" to be private, but modifiers were: \" + Modifier.toString(modifiers),\n            Modifier.isPrivate(modifiers));\n}", "path": "retrolambda/end-to-end-tests/src/test/java/net/orfjackal/retrolambda/test/LambdaTest.java", "commit_date": "2020-01-23 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "// Method inheritance\n", "func_signal": "@Test\npublic void abstract_interface_method_inherited_and_implemented()", "code": "{\n    analyze(Interface.class,\n            ChildInterface.class,\n            InterfaceImplementer.class);\n\n    assertThat(\"original\", analyzer.getMethods(Type.getType(Interface.class)),\n            hasItem(new MethodInfo(\"abstractMethod\", \"()V\", Interface.class, new MethodKind.Abstract())));\n\n    assertThat(\"inherits unchanged\", analyzer.getMethods(Type.getType(ChildInterface.class)),\n            hasItem(new MethodInfo(\"abstractMethod\", \"()V\", Interface.class, new MethodKind.Abstract())));\n\n    assertThat(\"implements\", analyzer.getMethods(Type.getType(InterfaceImplementer.class)),\n            hasItem(new MethodInfo(\"abstractMethod\", \"()V\", InterfaceImplementer.class, new MethodKind.Implemented())));\n}", "path": "retrolambda/retrolambda/src/test/java/net/orfjackal/retrolambda/ClassAnalyzerTest.java", "commit_date": "2018-08-12 00:00:00", "repo_name": "luontola/retrolambda", "stars": 3540, "license": "apache-2.0", "language": "java", "size": 1063}
{"docstring": "/**\n * Return thread pool metrics\n * @return thread pool metrics map\n */\n", "func_signal": "@Override\npublic Map<String, Metric> getMetrics()", "code": "{\n    final Map<String, Metric> gauges = new HashMap<>();\n    gauges.put(\"pool-size\", (Gauge<Integer>) executor::getPoolSize);\n    gauges.put(\"queued\", (Gauge<Integer>) executor.getQueue()::size);\n    gauges.put(\"active\", (Gauge<Integer>) executor::getActiveCount);\n    gauges.put(\"completed\", (Gauge<Long>) executor::getCompletedTaskCount);\n    return gauges;\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/ThreadPoolMetricSet.java", "commit_date": "2019-07-30 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Checks if a string is whitespace, empty (\"\") or null.\n *\n * Strings.isBlank(null)      = true\n * Strings.isBlank(\"\")        = true\n * Strings.isBlank(\" \")       = true\n * Strings.isBlank(\"bob\")     = false\n * Strings.isBlank(\"  bob  \") = false\n */\n", "func_signal": "public static boolean isBlank(final String str)", "code": "{\n    final int strLen;\n    if (str != null && (strLen = str.length()) != 0) {\n        for (int i = 0; i < strLen; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "path": "sofa-jraft/jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Strings.java", "commit_date": "2019-03-20 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Destroy the file.\n */\n", "func_signal": "public void destroy()", "code": "{\n    this.writeLock.lock();\n    try {\n        shutdown();\n        FileUtils.deleteQuietly(new File(this.path));\n        LOG.info(\"Deleted segment file {}.\", this.path);\n    } finally {\n        this.writeLock.unlock();\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/storage/log/SegmentFile.java", "commit_date": "2020-10-27 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Truncate data from wrotePos(inclusive) to the file end and set lastLogIndex=logIndex.\n * @param wrotePos the wrote position(inclusive)\n * @param logIndex the log index\n * @param sync whether to call fsync\n */\n", "func_signal": "public void truncateSuffix(final int wrotePos, final long logIndex, final boolean sync)", "code": "{\n    this.writeLock.lock();\n    try {\n        if (wrotePos >= this.wrotePos) {\n            return;\n        }\n        swapInIfNeed();\n        final int oldPos = this.wrotePos;\n        clear(wrotePos, sync);\n        this.wrotePos = wrotePos;\n        this.lastLogIndex = logIndex;\n        this.buffer.position(wrotePos);\n        LOG.info(\n            \"Segment file {} truncate suffix from pos={}, then set lastLogIndex={}, oldWrotePos={}, newWrotePos={}\",\n            this.path, wrotePos, logIndex, oldPos, this.wrotePos);\n    } finally {\n        this.writeLock.unlock();\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/storage/log/SegmentFile.java", "commit_date": "2020-10-27 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Ensures the truth of an expression involving one or more parameters\n * to the calling method.\n *\n * @param expression a boolean expression\n * @param fmt        the exception message with format string\n * @param args       arguments referenced by the format specifiers in the format\n *                   string\n * @throws IllegalArgumentException if {@code expression} is false\n */\n", "func_signal": "public static void requireTrue(boolean expression, String fmt, Object... args)", "code": "{\n    if (!expression) {\n        throw new IllegalArgumentException(String.format(fmt, args));\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/Requires.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Create a peer from a string in the form of \"host:port[:idx]\",\n * returns a empty peer when string is blank.\n */\n", "func_signal": "public static PeerId getPeerId(final String s)", "code": "{\n    final PeerId peer = new PeerId();\n    if (StringUtils.isBlank(s)) {\n        return peer;\n    }\n    if (peer.parse(s)) {\n        return peer;\n    }\n    throw new IllegalArgumentException(\"Invalid peer str:\" + s);\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java", "commit_date": "2020-06-15 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Read data from the position.\n *\n * @param logIndex the log index\n * @param pos      the position to read\n * @return read data\n */\n", "func_signal": "public byte[] read(final long logIndex, final int pos) throws IOException", "code": "{\n    assert (pos >= HEADER_SIZE);\n    swapInIfNeed();\n    this.readLock.lock();\n    try {\n        if (logIndex < this.header.firstLogIndex || logIndex > this.lastLogIndex) {\n            LOG.warn(\n                \"Try to read data from segment file {} out of range, logIndex={}, readPos={}, firstLogIndex={}, lastLogIndex={}.\",\n                this.path, logIndex, pos, this.header.firstLogIndex, this.lastLogIndex);\n            return null;\n        }\n        if (pos >= this.committedPos) {\n            LOG.warn(\n                \"Try to read data from segment file {} out of comitted position, logIndex={}, readPos={}, wrotePos={}, this.committedPos={}.\",\n                this.path, logIndex, pos, this.wrotePos, this.committedPos);\n            return null;\n        }\n        final ByteBuffer readBuffer = this.buffer.asReadOnlyBuffer();\n        readBuffer.position(pos);\n        if (readBuffer.remaining() < RECORD_MAGIC_BYTES_SIZE) {\n            throw new IOException(\"Missing magic buffer.\");\n        }\n        readBuffer.position(pos + RECORD_MAGIC_BYTES_SIZE);\n        final int dataLen = readBuffer.getInt();\n        //TODO(boyan) reuse data array?\n        final byte[] data = new byte[dataLen];\n        readBuffer.get(data);\n        return data;\n    } finally {\n        this.readLock.unlock();\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/storage/log/SegmentFile.java", "commit_date": "2020-10-27 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Returns true when the segment file contains the log index.\n *\n * @param logIndex the log index\n * @return true if the segment file contains the log index, otherwise return false\n */\n", "func_signal": "public boolean contains(final long logIndex)", "code": "{\n    this.readLock.lock();\n    try {\n        return logIndex >= this.header.firstLogIndex && logIndex <= this.lastLogIndex;\n    } finally {\n        this.readLock.unlock();\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/storage/log/SegmentFile.java", "commit_date": "2020-10-27 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Write the data and return it's wrote position.\n *\n * @param logIndex the log index\n * @param data     data to write\n * @return the wrote position\n */\n", "func_signal": "@SuppressWarnings(\"NonAtomicOperationOnVolatileField\")\npublic int write(final long logIndex, final byte[] data, final WriteContext ctx)", "code": "{\n    int pos = -1;\n    MappedByteBuffer buf = null;\n    this.writeLock.lock();\n    try {\n        assert (this.wrotePos == this.buffer.position());\n        buf = this.buffer;\n        pos = this.wrotePos;\n        this.wrotePos += RECORD_MAGIC_BYTES_SIZE + RECORD_DATA_LENGTH_SIZE + data.length;\n        this.buffer.position(this.wrotePos);\n        // Update log index.\n        if (isBlank() || pos == HEADER_SIZE) {\n            this.header.firstLogIndex = logIndex;\n            // we don't need to call fsync header here, the new header will be flushed with this wrote.\n            saveHeader(false);\n        }\n        this.lastLogIndex = logIndex;\n        return pos;\n    } finally {\n        this.writeLock.unlock();\n        final int wroteIndex = pos;\n        final MappedByteBuffer buffer = buf;\n        this.writeExecutor.execute(() -> {\n            try {\n                put(buffer, wroteIndex, RECORD_MAGIC_BYTES);\n                putInt(buffer, wroteIndex + RECORD_MAGIC_BYTES_SIZE, data.length);\n                put(buffer, wroteIndex + RECORD_MAGIC_BYTES_SIZE + RECORD_DATA_LENGTH_SIZE, data);\n            } catch (final Exception e) {\n                ctx.setError(e);\n            } finally {\n                ctx.finishJob();\n            }\n        });\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/storage/log/SegmentFile.java", "commit_date": "2020-10-27 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Bootstrap a non-empty raft node.\n *\n * @param opts options of bootstrap\n * @return true if bootstrap success\n */\n", "func_signal": "public static boolean bootstrap(final BootstrapOptions opts) throws InterruptedException", "code": "{\n    final NodeImpl node = new NodeImpl();\n    final boolean ret = node.bootstrap(opts);\n    node.shutdown();\n    node.join();\n    return ret;\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java", "commit_date": "2020-06-15 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Splits the provided text into an array, separator specified,\n * if {@code} true, preserving all tokens, including empty tokens created\n * by adjacent separators.\n *\n * A null input String returns null.\n *\n * Strings.split(null, *, true)         = null\n * Strings.split(\"\", *, true)           = []\n * Strings.split(\"a.b.c\", '.', true)    = [\"a\", \"b\", \"c\"]\n * Strings.split(\"a..b.c\", '.', true)   = [\"a\", \"\", \"b\", \"c\"]\n * Strings.split(\"a:b:c\", '.', true)    = [\"a:b:c\"]\n * Strings.split(\"a b c\", ' ', true)    = [\"a\", \"b\", \"c\"]\n * Strings.split(\"a b c \", ' ', true)   = [\"a\", \"b\", \"c\", \"\"]\n * Strings.split(\"a b c  \", ' ', true)  = [\"a\", \"b\", \"c\", \"\", \"\"]\n * Strings.split(\" a b c\", ' ', true)   = [\"\", a\", \"b\", \"c\"]\n * Strings.split(\"  a b c\", ' ', true)  = [\"\", \"\", a\", \"b\", \"c\"]\n * Strings.split(\" a b c \", ' ', true)  = [\"\", a\", \"b\", \"c\", \"\"]\n */\n", "func_signal": "public static String[] split(final String str, final char separator, final boolean preserveAllTokens)", "code": "{\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len == 0) {\n        return EMPTY_STRING_ARRAY;\n    }\n    final List<String> list = Lists.newArrayList();\n    int i = 0, start = 0;\n    boolean match = false;\n    while (i < len) {\n        if (str.charAt(i) == separator) {\n            if (match || preserveAllTokens) {\n                list.add(str.substring(start, i));\n                match = false;\n            }\n            start = ++i;\n            continue;\n        }\n        match = true;\n        i++;\n    }\n    if (match || preserveAllTokens) {\n        list.add(str.substring(start, i));\n    }\n    return list.toArray(new String[0]);\n}", "path": "sofa-jraft/jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Strings.java", "commit_date": "2019-03-20 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Ensures the truth of an expression involving one or more parameters\n * to the calling method.\n *\n * @param expression a boolean expression\n * @throws IllegalArgumentException if {@code expression} is false\n */\n", "func_signal": "public static void requireTrue(boolean expression)", "code": "{\n    if (!expression) {\n        throw new IllegalArgumentException();\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/Requires.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Create a Endpoint instance from  a string in the form of \"host:port\",\n * returns null when string is blank.\n */\n", "func_signal": "public static Endpoint getEndPoint(final String s)", "code": "{\n    if (StringUtils.isBlank(s)) {\n        return null;\n    }\n    final String[] tmps = StringUtils.split(s, ':');\n    if (tmps.length != 2) {\n        throw new IllegalArgumentException(\"Invalid endpoint string: \" + s);\n    }\n    return new Endpoint(tmps[0], Integer.parseInt(tmps[1]));\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java", "commit_date": "2020-06-15 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Clear data in [startPos, startPos+64).\n *\n * @param startPos the start position(inclusive)\n */\n", "func_signal": "public void clear(final int startPos, final boolean sync)", "code": "{\n    this.writeLock.lock();\n    try {\n        if (startPos < 0 || startPos > this.size) {\n            return;\n        }\n        final int endPos = Math.min(this.size, startPos + BLANK_HOLE_SIZE);\n        for (int i = startPos; i < endPos; i++) {\n            this.buffer.put(i, (byte) 0);\n        }\n        if (sync) {\n            fsync(this.buffer);\n        }\n        LOG.info(\"Segment file {} cleared data in [{}, {}).\", this.path, startPos, endPos);\n    } finally {\n        this.writeLock.unlock();\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/storage/log/SegmentFile.java", "commit_date": "2020-10-27 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Checks that the specified object reference is not {@code null} and\n * throws a customized {@link NullPointerException} if it is.\n *\n * @param obj     the object reference to check for nullity\n * @param message detail message to be used in the event that a {@code\n *                NullPointerException} is thrown\n * @param <T>     the type of the reference\n * @return {@code obj} if not {@code null}\n * @throws NullPointerException if {@code obj} is {@code null}\n */\n", "func_signal": "public static <T> T requireNonNull(T obj, String message)", "code": "{\n    if (obj == null) {\n        throw new NullPointerException(message);\n    }\n    return obj;\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/Requires.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Create a configuration from a string in the form of \"host1:port1[:idx],host2:port2[:idx]......\",\n * returns a empty configuration when string is blank.\n */\n", "func_signal": "public static Configuration getConfiguration(final String s)", "code": "{\n    final Configuration conf = new Configuration();\n    if (StringUtils.isBlank(s)) {\n        return conf;\n    }\n    if (conf.parse(s)) {\n        return conf;\n    }\n    throw new IllegalArgumentException(\"Invalid conf str:\" + s);\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java", "commit_date": "2020-06-15 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Ensures the truth of an expression involving one or more parameters\n * to the calling method.\n *\n * @param expression a boolean expression\n * @param message    the exception message to use if the check fails;\n *                   will be converted to a string using\n *                   {@link String#valueOf(Object)}\n * @throws IllegalArgumentException if {@code expression} is false\n */\n", "func_signal": "public static void requireTrue(boolean expression, Object message)", "code": "{\n    if (!expression) {\n        throw new IllegalArgumentException(String.valueOf(message));\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/Requires.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Set error code, if it tryLock success, run the onError callback\n * with code immediately, else add it into pending errors and will\n * be called before unlock.\n *\n * @param errorCode error code\n */\n", "func_signal": "public void setError(final int errorCode)", "code": "{\n    if (this.destroyed) {\n        return;\n    }\n    if (this.lock.tryLock()) {\n        if (this.destroyed) {\n            this.lock.unlock();\n            return;\n        }\n        if (this.onError != null) {\n            // The lock will be unlocked in onError.\n            this.onError.onError(this, this.data, errorCode);\n        }\n    } else {\n        this.pendingErrors.add(errorCode);\n    }\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/ThreadId.java", "commit_date": "2019-08-27 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Registers user signal handlers.\n *\n * @param signalName a signal name\n * @param handlers   user signal handlers\n * @return true if support on current platform\n */\n", "func_signal": "public static boolean addSignal(final String signalName, final List<JRaftSignalHandler> handlers)", "code": "{\n    if (SIGNAL_ACCESSOR != null) {\n        SIGNAL_ACCESSOR.addSignal(signalName, handlers);\n        return true;\n    }\n    return false;\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/SignalHelper.java", "commit_date": "2019-07-29 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Checks that the specified object reference is not {@code null}.\n *\n * @param obj the object reference to check for nullity\n * @param <T> the type of the reference\n * @return {@code obj} if not {@code null}\n * @throws NullPointerException if {@code obj} is {@code null}\n */\n", "func_signal": "public static <T> T requireNonNull(T obj)", "code": "{\n    if (obj == null) {\n        throw new NullPointerException();\n    }\n    return obj;\n}", "path": "sofa-jraft/jraft-core/src/main/java/com/alipay/sofa/jraft/util/Requires.java", "commit_date": "2019-03-04 00:00:00", "repo_name": "sofastack/sofa-jraft", "stars": 3434, "license": "apache-2.0", "language": "java", "size": 3545}
{"docstring": "/**\n * Updates the display name of the {@link Team}.\n *\n * @param displayName The new display name\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder updateTeamDisplayName(JsonMessage displayName)", "code": "{\n    this.team.updateTeamDisplayName(displayName);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Changes the {@link CollisionRule} of the {@link Team} without an update packet.\n * <br><br>\n * <b>Warning: </b> If you do not call {@link #updateTeamPacket()}, this is only changed of the <b>server side</b>.\n *\n * @param rule The new rule\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder collisionRule(CollisionRule rule)", "code": "{\n    this.team.setCollisionRule(rule);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Updates the color of the {@link Team}.\n *\n * @param color The new color\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder updateTeamColor(ChatColor color)", "code": "{\n    this.team.updateTeamColor(color);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Caches an advancement.\n *\n * @param identifier  the identifier of the advancement\n * @param advancement the advancement\n * @param parent      the parent of this advancement, only null for the root advancement\n */\n", "func_signal": "private void cacheAdvancement(@NotNull String identifier, @NotNull Advancement advancement, @Nullable Advancement parent)", "code": "{\n    Check.stateCondition(advancement.getTab() != null,\n            \"You tried to add an advancement already linked to a tab\");\n    advancement.setTab(this);\n    advancement.setIdentifier(identifier);\n    advancement.setParent(parent);\n    advancement.updateCriteria();\n    this.advancementMap.put(advancement, parent);\n}", "path": "Minestom/src/main/java/net/minestom/server/advancements/AdvancementTab.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Creates a new empty tag\n */\n", "func_signal": "public Tag(NamespaceID name)", "code": "{\n    this.name = name;\n    values = new HashSet<>();\n    lockValues();\n}", "path": "Minestom/src/main/java/net/minestom/server/gamedata/tags/Tag.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Creates an team builder.\n *\n * @param team        The new team\n * @param teamManager The manager for the team\n */\n", "func_signal": "private TeamBuilder(Team team, TeamManager teamManager)", "code": "{\n    this.team = team;\n    this.teamManager = teamManager;\n    this.updateTeam = false;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Create a DoNothing goal\n *\n * @param entityCreature the entity\n * @param time           the time in milliseconds where nothing happen\n * @param chance         the chance to do nothing (0-1)\n */\n", "func_signal": "public DoNothingGoal(EntityCreature entityCreature, long time, float chance)", "code": "{\n    super(entityCreature);\n    this.time = time;\n    this.chance = MathUtils.clampFloat(chance, 0, 1);\n}", "path": "Minestom/src/main/java/net/minestom/server/entity/ai/goal/DoNothingGoal.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Writes data into the {@link BinaryWriter}\n *\n * @param writer The writer to writes\n */\n", "func_signal": "@Override\npublic void write(@NotNull BinaryWriter writer)", "code": "{\n    writer.writeSizedString(this.teamName);\n    writer.writeByte((byte) this.action.ordinal());\n\n    switch (action) {\n        case CREATE_TEAM:\n        case UPDATE_TEAM_INFO:\n            writer.writeSizedString(this.teamDisplayName.toString());\n            writer.writeByte(this.friendlyFlags);\n            writer.writeSizedString(this.nameTagVisibility.getIdentifier());\n            writer.writeSizedString(this.collisionRule.getIdentifier());\n            writer.writeVarInt(this.teamColor);\n            writer.writeSizedString(this.teamPrefix.toString());\n            writer.writeSizedString(this.teamSuffix.toString());\n            break;\n        case REMOVE_TEAM:\n\n            break;\n    }\n\n    if (action == Action.CREATE_TEAM || action == Action.ADD_PLAYERS_TEAM || action == Action.REMOVE_PLAYERS_TEAM) {\n        writer.writeStringArray(entities);\n    }\n\n}", "path": "Minestom/src/main/java/net/minestom/server/network/packet/server/play/TeamsPacket.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Creates a new modifier.\n *\n * @param id        the id of this modifier\n * @param name      the name of this modifier\n * @param amount    the value of this modifier\n * @param operation the operation to apply this modifier with\n */\n", "func_signal": "public AttributeModifier(@NotNull UUID id, @NotNull String name, float amount, @NotNull AttributeOperation operation)", "code": "{\n    this.id = id;\n    this.name = name;\n    this.amount = amount;\n    this.operation = operation;\n}", "path": "Minestom/src/main/java/net/minestom/server/attribute/AttributeModifier.java", "commit_date": "2020-11-17 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Gets if two instances share the same chunks.\n *\n * @param instance1 the first instance\n * @param instance2 the second instance\n * @return true if the two instances share the same chunks\n */\n", "func_signal": "public static boolean areLinked(Instance instance1, Instance instance2)", "code": "{\n    // SharedInstance check\n    if (instance1 instanceof InstanceContainer && instance2 instanceof SharedInstance) {\n        return ((SharedInstance) instance2).getInstanceContainer().equals(instance1);\n    } else if (instance2 instanceof InstanceContainer && instance1 instanceof SharedInstance) {\n        return ((SharedInstance) instance1).getInstanceContainer().equals(instance2);\n    } else if (instance1 instanceof SharedInstance && instance2 instanceof SharedInstance) {\n        final InstanceContainer container1 = ((SharedInstance) instance1).getInstanceContainer();\n        final InstanceContainer container2 = ((SharedInstance) instance2).getInstanceContainer();\n        return container1.equals(container2);\n    }\n\n    // InstanceContainer check (copied from)\n    if (instance1 instanceof InstanceContainer && instance2 instanceof InstanceContainer) {\n        final InstanceContainer container1 = (InstanceContainer) instance1;\n        final InstanceContainer container2 = (InstanceContainer) instance2;\n\n        if (container1.getSrcInstance() != null) {\n            return container1.getSrcInstance().equals(container2)\n                    && container1.getLastBlockChangeTime() == container2.getLastBlockChangeTime();\n        } else if (container2.getSrcInstance() != null) {\n            return container2.getSrcInstance().equals(container1)\n                    && container2.getLastBlockChangeTime() == container1.getLastBlockChangeTime();\n        }\n    }\n\n\n    return false;\n}", "path": "Minestom/src/main/java/net/minestom/server/utils/instance/InstanceUtils.java", "commit_date": "2020-10-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Changes the friendly flags of the {@link Team} without an update packet.\n * <br><br>\n * <b>Warning: </b> If you do not call {@link #updateTeamPacket()}, this is only changed of the <b>server side</b>.\n *\n * @param flag The new flag\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder friendlyFlags(byte flag)", "code": "{\n    this.team.setFriendlyFlags(flag);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Changes the suffix of the {@link Team} without an update packet.\n * <br><br>\n * <b>Warning: </b> If you do not call {@link #updateTeamPacket()}, this is only changed of the <b>server side</b>.\n *\n * @param suffix The new suffix\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder suffix(JsonMessage suffix)", "code": "{\n    this.team.setSuffix(suffix);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Allows to send an update packet when the team is built.\n *\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder updateTeamPacket()", "code": "{\n    this.updateTeam = true;\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Executes an optional {@link Runnable}.\n *\n * @param callback the optional runnable, can be null\n */\n", "func_signal": "public static void execute(@Nullable Runnable callback)", "code": "{\n    if (callback != null) {\n        callback.run();\n    }\n}", "path": "Minestom/src/main/java/net/minestom/server/utils/callback/OptionalCallback.java", "commit_date": "2020-10-25 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Adds the tab to the player set.\n *\n * @param player the player\n */\n", "func_signal": "private void addPlayer(@NotNull Player player)", "code": "{\n    Set<AdvancementTab> tabs = PLAYER_TAB_MAP.computeIfAbsent(player.getUuid(), p -> new HashSet<>());\n    tabs.add(this);\n}", "path": "Minestom/src/main/java/net/minestom/server/advancements/AdvancementTab.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Updates the suffix of the {@link Team}.\n *\n * @param suffix The new suffix\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder updateSuffix(JsonMessage suffix)", "code": "{\n    this.team.updateSuffix(suffix);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Builds the packet which build the whole advancement tab.\n *\n * @return the packet adding this advancement tab and all its advancements\n */\n", "func_signal": "@NotNull\nprotected AdvancementsPacket createPacket()", "code": "{\n    AdvancementsPacket advancementsPacket = new AdvancementsPacket();\n    advancementsPacket.resetAdvancements = false;\n\n    List<AdvancementsPacket.AdvancementMapping> mappings = new ArrayList<>();\n    List<AdvancementsPacket.ProgressMapping> progressMappings = new ArrayList<>();\n\n    for (Advancement advancement : advancementMap.keySet()) {\n        mappings.add(advancement.toMapping());\n        progressMappings.add(advancement.toProgressMapping());\n    }\n\n    advancementsPacket.identifiersToRemove = new String[]{};\n    advancementsPacket.advancementMappings = mappings.toArray(new AdvancementsPacket.AdvancementMapping[0]);\n    advancementsPacket.progressMappings = progressMappings.toArray(new AdvancementsPacket.ProgressMapping[0]);\n\n    return advancementsPacket;\n}", "path": "Minestom/src/main/java/net/minestom/server/advancements/AdvancementTab.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Finds a target based on the entity {@link TargetSelector}.\n *\n * @return the target entity, null if not found\n */\n", "func_signal": "@Nullable\npublic Entity findTarget()", "code": "{\n    for (TargetSelector targetSelector : entityCreature.getTargetSelectors()) {\n        final Entity entity = targetSelector.findTarget();\n        if (entity != null) {\n            return entity;\n        }\n    }\n    return null;\n}", "path": "Minestom/src/main/java/net/minestom/server/entity/ai/GoalSelector.java", "commit_date": "2020-12-01 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Updates the prefix of the {@link Team}.\n *\n * @param prefix The new prefix\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder updatePrefix(JsonMessage prefix)", "code": "{\n    this.team.updatePrefix(prefix);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "/**\n * Updates the {@link CollisionRule} of the {@link Team}.\n *\n * @param rule The new rule\n * @return this builder, for chaining\n */\n", "func_signal": "public TeamBuilder updateCollisionRule(CollisionRule rule)", "code": "{\n    this.team.updateCollisionRule(rule);\n    return this;\n}", "path": "Minestom/src/main/java/net/minestom/server/scoreboard/TeamBuilder.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "Minestom/Minestom", "stars": 2048, "license": "apache-2.0", "language": "java", "size": 196776}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected void onLongPress(@NonNull MotionEvent event)", "code": "{\n       if (settings.isEnabled()) {\n           targetView.performLongClick();\n\n           if (gestureListener != null) {\n               gestureListener.onLongPress(event);\n           }\n       }\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected boolean onSingleTapUp(@NonNull MotionEvent event)", "code": "{\n       // If double tap is not enabled then it should be safe to propagate click event from here\n       if (!settings.isDoubleTapEnabled()) {\n           targetView.performClick();\n       }\n       return gestureListener != null && gestureListener.onSingleTapUp(event);\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// -------------------\n//  Gestures handling\n// -------------------\n", "func_signal": "public boolean onInterceptTouch(@NonNull View view, @NonNull MotionEvent event)", "code": "{\n    isInterceptTouchCalled = true;\n    return onTouchInternal(view, event);\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected boolean onRotate(RotationGestureDetector detector)", "code": "{\n       if (!settings.isRotationEnabled() || isAnimatingState()) {\n           return false;\n       }\n\n       boolean rotateConsumed = exitController.onRotate();\n       if (rotateConsumed) {\n           return true;\n       }\n\n       pivotX = detector.getFocusX();\n       pivotY = detector.getFocusY();\n       state.rotateBy(detector.getRotationDelta(), pivotX, pivotY);\n       isStateChangedDuringTouch = true;\n\n       return true;\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected void notifyStateUpdated()", "code": "{\n       prevState.set(state);\n       for (OnStateChangeListener listener : stateListeners) {\n           listener.onStateChanged(state);\n       }\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API\n", "func_signal": "public void stopStateAnimation()", "code": "{\n       if (isAnimatingState()) {\n           stateScroller.forceFinished();\n           onStateAnimationFinished(true);\n       }\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * State changes listener.\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic interface OnStateChangeListener", "code": "{\n    void onStateChanged(State state);\n\n    void onStateReset(State oldState, State newState);\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected void notifyStateReset()", "code": "{\n       exitController.stopDetection();\n       for (OnStateChangeListener listener : stateListeners) {\n           listener.onStateReset(prevState, state);\n       }\n       notifyStateUpdated();\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * Resets to initial state (default position, min zoom level) and notifies\n * {@link OnStateChangeListener} listeners.\n * <p>\n * Should be called when image size is changed.\n * <p>\n * See {@link Settings#setImage(int, int)}.\n */\n", "func_signal": "public void resetState()", "code": "{\n    stopAllAnimations();\n    boolean reset = stateController.resetState(state);\n    if (reset) {\n        notifyStateReset();\n    } else {\n        notifyStateUpdated();\n    }\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected void onStateAnimationFinished(boolean forced)", "code": "{\n       isAnimatingInBounds = false;\n       pivotX = Float.NaN;\n       pivotY = Float.NaN;\n       endPivotX = Float.NaN;\n       endPivotY = Float.NaN;\n       notifyStateSourceChanged();\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * Scale detector is a little buggy when first time scale is occurred.\n * So we will feed it with fake motion event to warm it up.\n */\n", "func_signal": "private void warmUpScaleDetector()", "code": "{\n    long time = System.currentTimeMillis();\n    MotionEvent event = MotionEvent.obtain(time, time, MotionEvent.ACTION_CANCEL, 0f, 0f, 0);\n    onTouchEvent(event);\n    event.recycle();\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/internal/detectors/ScaleGestureDetectorFixed.java", "commit_date": "2018-12-03 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected boolean onFlingScroll(int dx, int dy)", "code": "{\n       float prevX = state.getX();\n       float prevY = state.getY();\n       float toX = prevX + dx;\n       float toY = prevY + dy;\n\n       if (settings.isRestrictBounds()) {\n           flingBounds.restrict(toX, toY, tmpPointF);\n           toX = tmpPointF.x;\n           toY = tmpPointF.y;\n       }\n\n       state.translateTo(toX, toY);\n       return !State.equals(prevX, toX) || !State.equals(prevY, toY);\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected void onScaleEnd(ScaleGestureDetector detector)", "code": "{\n       if (isScaleDetected) {\n           exitController.onScaleEnd();\n       }\n       isScaleDetected = false;\n       isRestrictZoomRequested = true;\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API\n", "func_signal": "public void stopFlingAnimation()", "code": "{\n       if (isAnimatingFling()) {\n           flingScroller.forceFinished(true);\n           onFlingAnimationFinished(true);\n       }\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// Public API (can be overridden)\n", "func_signal": "protected boolean onScale(ScaleGestureDetector detector)", "code": "{\n       if (!settings.isZoomEnabled() || isAnimatingState()) {\n           return false; // Ignoring scroll if animation is in progress\n       }\n\n       final float scaleFactor = detector.getScaleFactor();\n\n       boolean scaleConsumed = exitController.onScale(scaleFactor);\n       if (scaleConsumed) {\n           return true;\n       }\n\n       pivotX = detector.getFocusX();\n       pivotY = detector.getFocusY();\n       state.zoomBy(scaleFactor, pivotX, pivotY);\n       isStateChangedDuringTouch = true;\n\n       return true;\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * Applies state restrictions and notifies {@link OnStateChangeListener} listeners.\n */\n", "func_signal": "public void updateState()", "code": "{\n    // Applying zoom patch (needed in case if image size is changed)\n    stateController.applyZoomPatch(state);\n    stateController.applyZoomPatch(prevState);\n    stateController.applyZoomPatch(stateStart);\n    stateController.applyZoomPatch(stateEnd);\n    exitController.applyZoomPatch();\n\n    boolean reset = stateController.updateState(state);\n    if (reset) {\n        notifyStateReset();\n    } else {\n        notifyStateUpdated();\n    }\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * Interpolates from start rect to the end rect by given factor (from 0 to 1),\n * storing result into out rect.\n *\n * @param out Interpolated rectangle (output)\n * @param start Start rectangle\n * @param end End rectangle\n * @param factor Factor\n */\n", "func_signal": "public static void interpolate(\n        @NonNull RectF out,\n        @NonNull RectF start,\n        @NonNull RectF end,\n        float factor\n)", "code": "{\n    out.left = interpolate(start.left, end.left, factor);\n    out.top = interpolate(start.top, end.top, factor);\n    out.right = interpolate(start.right, end.right, factor);\n    out.bottom = interpolate(start.bottom, end.bottom, factor);\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/utils/MathUtils.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * Interpolates from start state to end state by given factor (from 0 to 1),\n * storing result into out state. All operations (translation, zoom, rotation) will be\n * performed within specified pivot points, assuming start and end pivot points represent\n * same physical point on the image.\n *\n * @param out Interpolated state (output)\n * @param start Start state\n * @param startPivotX Pivot point's X coordinate in start state coordinates\n * @param startPivotY Pivot point's Y coordinate in start state coordinates\n * @param end End state\n * @param endPivotX Pivot point's X coordinate in end state coordinates\n * @param endPivotY Pivot point's Y coordinate in end state coordinates\n * @param factor Factor\n */\n", "func_signal": "public static void interpolate(\n        @NonNull State out,\n        @NonNull State start,\n        float startPivotX,\n        float startPivotY,\n        @NonNull State end,\n        float endPivotX,\n        float endPivotY,\n        float factor\n)", "code": "{\n    out.set(start);\n\n    if (!State.equals(start.getZoom(), end.getZoom())) {\n        float zoom = interpolate(start.getZoom(), end.getZoom(), factor);\n        out.zoomTo(zoom, startPivotX, startPivotY);\n    }\n\n    // Getting rotations\n    float startRotation = start.getRotation();\n    float endRotation = end.getRotation();\n\n    float rotation = Float.NaN;\n\n    // Choosing shortest path to interpolate\n    if (Math.abs(startRotation - endRotation) <= 180f) {\n        if (!State.equals(startRotation, endRotation)) {\n            rotation = interpolate(startRotation, endRotation, factor);\n        }\n    } else {\n        // Keeping rotation positive\n        float startRotationPositive = startRotation < 0f ? startRotation + 360f : startRotation;\n        float endRotationPositive = endRotation < 0f ? endRotation + 360f : endRotation;\n\n        if (!State.equals(startRotationPositive, endRotationPositive)) {\n            rotation = interpolate(startRotationPositive, endRotationPositive, factor);\n        }\n    }\n\n    if (!Float.isNaN(rotation)) {\n        out.rotateTo(rotation, startPivotX, startPivotY);\n    }\n\n    float dx = interpolate(0f, endPivotX - startPivotX, factor);\n    float dy = interpolate(0f, endPivotY - startPivotY, factor);\n    out.translateBy(dx, dy);\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/utils/MathUtils.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "// performClick is called in gestures callbacks\n", "func_signal": "@Override\n   public boolean onTouch(@NonNull View view, @NonNull MotionEvent event)", "code": "{\n       if (!isInterceptTouchCalled) { // Preventing duplicate events\n           onTouchInternal(view, event);\n       }\n       isInterceptTouchCalled = false;\n       return settings.isEnabled();\n   }", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * Sets pivot point for zooming when keeping image in bounds.\n *\n * @param pivotX Pivot point's X coordinate\n * @param pivotY Pivot point's Y coordinate\n * @see #animateKeepInBounds()\n * @see #animateStateTo(State)\n */\n", "func_signal": "public void setPivot(float pivotX, float pivotY)", "code": "{\n    this.pivotX = pivotX;\n    this.pivotY = pivotY;\n}", "path": "GestureViews/library/src/main/java/com/alexvasilkov/gestures/GestureController.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "alexvasilkov/GestureViews", "stars": 2354, "license": "apache-2.0", "language": "java", "size": 21288}
{"docstring": "/**\n * Set the colors used in the progress animation. The first\n * color will also be the color of the bar that grows in response to a user\n * swipe gesture.\n *\n * @param colors\n */\n", "func_signal": "public void setColorSchemeColors(int... colors)", "code": "{\n    mColors = colors;\n    if (mProgressDrawable != null) {\n        mProgressDrawable.setColorSchemeColors(colors);\n    }\n}", "path": "SwipeToLoadLayout/app/src/main/java/com/aspsine/swipetoloadlayout/demo/view/GoogleCircleProgressView.java", "commit_date": "2015-11-07 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * on not active finger up\n *\n * @param ev\n */\n", "func_signal": "private void onSecondaryPointerUp(MotionEvent ev)", "code": "{\n    final int pointerIndex = MotionEventCompat.getActionIndex(ev);\n    final int pointerId = MotionEventCompat.getPointerId(ev, pointerIndex);\n    if (pointerId == mActivePointerId) {\n        // This was our active pointer going up. Choose a new\n        // active pointer and adjust accordingly.\n        final int newPointerIndex = pointerIndex == 0 ? 1 : 0;\n        mActivePointerId = MotionEventCompat.getPointerId(ev, newPointerIndex);\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * auto loading more or cancel\n *\n * @param loadingMore\n */\n", "func_signal": "public void setLoadingMore(boolean loadingMore)", "code": "{\n    if (!isLoadMoreEnabled() || mFooterView == null) {\n        return;\n    }\n    this.mAutoLoading = loadingMore;\n    if (loadingMore) {\n        if (STATUS.isStatusDefault(mStatus)) {\n            setStatus(STATUS.STATUS_SWIPING_TO_LOAD_MORE);\n            scrollDefaultToLoadingMore();\n        }\n    } else {\n        if (STATUS.isLoadingMore(mStatus)) {\n            mLoadMoreCallback.onComplete();\n            postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    scrollLoadingMoreToDefault();\n                }\n            }, mLoadMoreCompleteDelayDuration);\n        }\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * Process the scrolling(auto or physical) and append the diff values to mTargetOffset\n * I think it's the most busy and core method. :) a ha ha ha ha...\n *\n * @param yScrolled\n */\n", "func_signal": "private void updateScroll(final float yScrolled)", "code": "{\n    if (yScrolled == 0) {\n        return;\n    }\n    mTargetOffset += yScrolled;\n\n    if (STATUS.isRefreshStatus(mStatus)) {\n        mHeaderOffset = mTargetOffset;\n        mFooterOffset = 0;\n    } else if (STATUS.isLoadMoreStatus(mStatus)) {\n        mFooterOffset = mTargetOffset;\n        mHeaderOffset = 0;\n    }\n\n    if (mDebug) {\n        Log.i(TAG, \"mTargetOffset = \" + mTargetOffset);\n    }\n    layoutChildren();\n    invalidate();\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * @see #onLayout(boolean, int, int, int, int)\n */\n", "func_signal": "private void layoutChildren()", "code": "{\n    final int width = getMeasuredWidth();\n    final int height = getMeasuredHeight();\n\n    final int paddingLeft = getPaddingLeft();\n    final int paddingTop = getPaddingTop();\n    final int paddingRight = getPaddingRight();\n    final int paddingBottom = getPaddingBottom();\n\n    if (mTargetView == null) {\n        return;\n    }\n\n    // layout header\n    if (mHeaderView != null) {\n        final View headerView = mHeaderView;\n        MarginLayoutParams lp = (MarginLayoutParams) headerView.getLayoutParams();\n        final int headerLeft = paddingLeft + lp.leftMargin;\n        final int headerTop;\n        switch (mStyle) {\n            case STYLE.CLASSIC:\n                // classic\n                headerTop = paddingTop + lp.topMargin - mHeaderHeight + mHeaderOffset;\n                break;\n            case STYLE.ABOVE:\n                // classic\n                headerTop = paddingTop + lp.topMargin - mHeaderHeight + mHeaderOffset;\n                break;\n            case STYLE.BLEW:\n                // blew\n                headerTop = paddingTop + lp.topMargin;\n                break;\n            case STYLE.SCALE:\n                // scale\n                headerTop = paddingTop + lp.topMargin - mHeaderHeight / 2 + mHeaderOffset / 2;\n                break;\n            default:\n                // classic\n                headerTop = paddingTop + lp.topMargin - mHeaderHeight + mHeaderOffset;\n                break;\n        }\n        final int headerRight = headerLeft + headerView.getMeasuredWidth();\n        final int headerBottom = headerTop + headerView.getMeasuredHeight();\n        headerView.layout(headerLeft, headerTop, headerRight, headerBottom);\n    }\n\n\n    // layout target\n    if (mTargetView != null) {\n        final View targetView = mTargetView;\n        MarginLayoutParams lp = (MarginLayoutParams) targetView.getLayoutParams();\n        final int targetLeft = paddingLeft + lp.leftMargin;\n        final int targetTop;\n\n        switch (mStyle) {\n            case STYLE.CLASSIC:\n                // classic\n                targetTop = paddingTop + lp.topMargin + mTargetOffset;\n                break;\n            case STYLE.ABOVE:\n                // above\n                targetTop = paddingTop + lp.topMargin;\n                break;\n            case STYLE.BLEW:\n                // classic\n                targetTop = paddingTop + lp.topMargin + mTargetOffset;\n                break;\n            case STYLE.SCALE:\n                // classic\n                targetTop = paddingTop + lp.topMargin + mTargetOffset;\n                break;\n            default:\n                // classic\n                targetTop = paddingTop + lp.topMargin + mTargetOffset;\n                break;\n        }\n        final int targetRight = targetLeft + targetView.getMeasuredWidth();\n        final int targetBottom = targetTop + targetView.getMeasuredHeight();\n        targetView.layout(targetLeft, targetTop, targetRight, targetBottom);\n    }\n\n    // layout footer\n    if (mFooterView != null) {\n        final View footerView = mFooterView;\n        MarginLayoutParams lp = (MarginLayoutParams) footerView.getLayoutParams();\n        final int footerLeft = paddingLeft + lp.leftMargin;\n        final int footerBottom;\n        switch (mStyle) {\n            case STYLE.CLASSIC:\n                // classic\n                footerBottom = height - paddingBottom - lp.bottomMargin + mFooterHeight + mFooterOffset;\n                break;\n            case STYLE.ABOVE:\n                // classic\n                footerBottom = height - paddingBottom - lp.bottomMargin + mFooterHeight + mFooterOffset;\n                break;\n            case STYLE.BLEW:\n                // blew\n                footerBottom = height - paddingBottom - lp.bottomMargin;\n                break;\n            case STYLE.SCALE:\n                // scale\n                footerBottom = height - paddingBottom - lp.bottomMargin + mFooterHeight / 2 + mFooterOffset / 2;\n                break;\n            default:\n                // classic\n                footerBottom = height - paddingBottom - lp.bottomMargin + mFooterHeight + mFooterOffset;\n                break;\n        }\n        final int footerTop = footerBottom - footerView.getMeasuredHeight();\n        final int footerRight = footerLeft + footerView.getMeasuredWidth();\n\n        footerView.layout(footerLeft, footerTop, footerRight, footerBottom);\n    }\n\n    if (mStyle == STYLE.CLASSIC\n            || mStyle == STYLE.ABOVE) {\n        if (mHeaderView != null) {\n            mHeaderView.bringToFront();\n        }\n        if (mFooterView != null) {\n            mFooterView.bringToFront();\n        }\n    } else if (mStyle == STYLE.BLEW || mStyle == STYLE.SCALE) {\n        if (mTargetView != null) {\n            mTargetView.bringToFront();\n        }\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * Set the color resources used in the progress animation from color resources.\n * The first color will also be the color of the bar that grows in response\n * to a user swipe gesture.\n *\n * @param colorResIds\n */\n", "func_signal": "public void setColorSchemeResources(int... colorResIds)", "code": "{\n    final Resources res = getResources();\n    int[] colorRes = new int[colorResIds.length];\n    for (int i = 0; i < colorResIds.length; i++) {\n        colorRes[i] = res.getColor(colorResIds[i]);\n    }\n    setColorSchemeColors(colorRes);\n}", "path": "SwipeToLoadLayout/app/src/main/java/com/aspsine/swipetoloadlayout/demo/view/GoogleCircleProgressView.java", "commit_date": "2015-11-07 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * Update the background color of the mBgCircle image view.\n */\n", "func_signal": "public void setBackgroundColor(@ColorRes int colorRes)", "code": "{\n    if (getBackground() instanceof ShapeDrawable) {\n        final Resources res = getResources();\n        ((ShapeDrawable) getBackground()).getPaint().setColor(res.getColor(colorRes));\n    }\n}", "path": "SwipeToLoadLayout/app/src/main/java/com/aspsine/swipetoloadlayout/demo/view/GoogleCircleProgressView.java", "commit_date": "2015-11-07 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * Use this factory method to create a new instance of\n * this fragment using the provided parameters.\n */\n", "func_signal": "public static BaseNavigationFragment newInstance()", "code": "{\n    NavJDFragment fragment = new NavJDFragment();\n    return fragment;\n}", "path": "SwipeToLoadLayout/app/src/main/java/com/aspsine/swipetoloadlayout/demo/fragment/NavJDFragment.java", "commit_date": "2015-11-05 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * copy from {@link android.support.v4.widget.SwipeRefreshLayout#canChildScrollUp()}\n *\n * @return Whether it is possible for the child view of this layout to\n * scroll up. Override this if the child view is a custom view.\n */\n", "func_signal": "protected boolean canChildScrollUp()", "code": "{\n    if (android.os.Build.VERSION.SDK_INT < 14) {\n        if (mTargetView instanceof AbsListView) {\n            final AbsListView absListView = (AbsListView) mTargetView;\n            return absListView.getChildCount() > 0\n                    && (absListView.getFirstVisiblePosition() > 0 || absListView.getChildAt(0)\n                    .getTop() < absListView.getPaddingTop());\n        } else {\n            return ViewCompat.canScrollVertically(mTargetView, -1) || mTargetView.getScrollY() > 0;\n        }\n    } else {\n        return ViewCompat.canScrollVertically(mTargetView, -1);\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * on active finger up\n */\n", "func_signal": "private void onActivePointerUp()", "code": "{\n    if (STATUS.isSwipingToRefresh(mStatus)) {\n        // simply return\n        scrollSwipingToRefreshToDefault();\n\n    } else if (STATUS.isSwipingToLoadMore(mStatus)) {\n        // simply return\n        scrollSwipingToLoadMoreToDefault();\n\n    } else if (STATUS.isReleaseToRefresh(mStatus)) {\n        // return to header height and perform refresh\n        mRefreshCallback.onRelease();\n        scrollReleaseToRefreshToRefreshing();\n\n    } else if (STATUS.isReleaseToLoadMore(mStatus)) {\n        // return to footer height and perform loadMore\n        mLoadMoreCallback.onRelease();\n        scrollReleaseToLoadMoreToLoadingMore();\n\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * Set the current status for better control\n *\n * @param status\n */\n", "func_signal": "private void setStatus(int status)", "code": "{\n    mStatus = status;\n    if (mDebug) {\n        STATUS.printStatus(status);\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * set the style of the refresh header\n *\n * @param style\n */\n", "func_signal": "public void setSwipeStyle(int style)", "code": "{\n    this.mStyle = style;\n    requestLayout();\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * The param yScrolled here isn't final pos of y.\n * It's just like the yScrolled param in the\n * {@link #updateScroll(float yScrolled)}\n *\n * @param yScrolled\n * @param duration\n */\n", "func_signal": "private void autoScroll(int yScrolled, int duration)", "code": "{\n    removeCallbacks(this);\n    mmLastY = 0;\n    if (!mScroller.isFinished()) {\n        mScroller.forceFinished(true);\n    }\n    mScroller.startScroll(0, 0, 0, yScrolled, duration);\n    post(this);\n    mRunning = true;\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * invoke when {@link AutoScroller#finish()} is automatic\n */\n", "func_signal": "private void autoScrollFinished()", "code": "{\n    int mLastStatus = mStatus;\n\n    if (STATUS.isReleaseToRefresh(mStatus)) {\n        setStatus(STATUS.STATUS_REFRESHING);\n        fixCurrentStatusLayout();\n        mRefreshCallback.onRefresh();\n\n    } else if (STATUS.isRefreshing(mStatus)) {\n        setStatus(STATUS.STATUS_DEFAULT);\n        fixCurrentStatusLayout();\n        mRefreshCallback.onReset();\n\n    } else if (STATUS.isSwipingToRefresh(mStatus)) {\n        if (mAutoLoading) {\n            mAutoLoading = false;\n            setStatus(STATUS.STATUS_REFRESHING);\n            fixCurrentStatusLayout();\n            mRefreshCallback.onRefresh();\n        } else {\n            setStatus(STATUS.STATUS_DEFAULT);\n            fixCurrentStatusLayout();\n            mRefreshCallback.onReset();\n        }\n    } else if (STATUS.isStatusDefault(mStatus)) {\n\n    } else if (STATUS.isSwipingToLoadMore(mStatus)) {\n        if (mAutoLoading) {\n            mAutoLoading = false;\n            setStatus(STATUS.STATUS_LOADING_MORE);\n            fixCurrentStatusLayout();\n            mLoadMoreCallback.onLoadMore();\n        } else {\n            setStatus(STATUS.STATUS_DEFAULT);\n            fixCurrentStatusLayout();\n            mLoadMoreCallback.onReset();\n        }\n    } else if (STATUS.isLoadingMore(mStatus)) {\n        setStatus(STATUS.STATUS_DEFAULT);\n        fixCurrentStatusLayout();\n        mLoadMoreCallback.onReset();\n    } else if (STATUS.isReleaseToLoadMore(mStatus)) {\n        setStatus(STATUS.STATUS_LOADING_MORE);\n        fixCurrentStatusLayout();\n        mLoadMoreCallback.onLoadMore();\n    } else {\n        throw new IllegalStateException(\"illegal state: \" + STATUS.getStatus(mStatus));\n    }\n\n    if (mDebug) {\n        Log.i(TAG, STATUS.getStatus(mLastStatus) + \" -> \" + STATUS.getStatus(mStatus));\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * set refresh header view, the view must at lease be an implement of {@code SwipeRefreshTrigger}.\n * the view can also implement {@code SwipeTrigger} for more extension functions\n *\n * @param view\n */\n", "func_signal": "public void setRefreshHeaderView(View view)", "code": "{\n    if (view instanceof SwipeRefreshTrigger) {\n        if (mHeaderView != null && mHeaderView != view) {\n            removeView(mHeaderView);\n        }\n        if (mHeaderView != view) {\n            this.mHeaderView = view;\n            addView(view);\n        }\n    } else {\n        Log.e(TAG, \"Refresh header view must be an implement of SwipeRefreshTrigger\");\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * oh shit! An indicator view is badly needed!\n * this shit have no animation at all.\n */\n", "func_signal": "private void initIndicators()", "code": "{\n    if (mIndicators.getChildCount() != mHeroes.size() && mHeroes.size() > 1) {\n        mIndicators.removeAllViews();\n        Resources res = mIndicators.getResources();\n        int size = res.getDimensionPixelOffset(R.dimen.indicator_size);\n        int margin = res.getDimensionPixelOffset(R.dimen.indicator_margin);\n        for (int i = 0; i < getPagerCount(); i++) {\n            ImageView indicator = new ImageView(mIndicators.getContext());\n            indicator.setAlpha(180);\n            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(size, size);\n            lp.setMargins(margin, 0, 0, 0);\n            lp.gravity = Gravity.CENTER;\n            indicator.setLayoutParams(lp);\n            Drawable drawable = res.getDrawable(R.drawable.selector_indicator);\n            indicator.setImageDrawable(drawable);\n            mIndicators.addView(indicator);\n        }\n    }\n}", "path": "SwipeToLoadLayout/app/src/main/java/com/aspsine/swipetoloadlayout/demo/adapter/LoopViewPagerAdapter.java", "commit_date": "2016-08-09 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * start loop\n */\n", "func_signal": "public void start()", "code": "{\n    if (!mRunning) {\n        post();\n        mRunning = true;\n    }\n}", "path": "SwipeToLoadLayout/app/src/main/java/com/aspsine/swipetoloadlayout/demo/adapter/BaseLoopPagerAdapter.java", "commit_date": "2015-09-15 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * scrolling by physical touch with your fingers\n *\n * @param yDiff\n */\n", "func_signal": "private void fingerScroll(final float yDiff)", "code": "{\n    float ratio = mDragRatio;\n    float yScrolled = yDiff * ratio;\n\n    // make sure (targetOffset>0 -> targetOffset=0 -> default status)\n    // or (targetOffset<0 -> targetOffset=0 -> default status)\n    // forbidden fling (targetOffset>0 -> targetOffset=0 ->targetOffset<0 -> default status)\n    // or (targetOffset<0 -> targetOffset=0 ->targetOffset>0 -> default status)\n    // I am so smart :)\n\n    float tmpTargetOffset = yScrolled + mTargetOffset;\n    if ((tmpTargetOffset > 0 && mTargetOffset < 0)\n            || (tmpTargetOffset < 0 && mTargetOffset > 0)) {\n        yScrolled = -mTargetOffset;\n    }\n\n\n    if (mRefreshFinalDragOffset >= mRefreshTriggerOffset && tmpTargetOffset > mRefreshFinalDragOffset) {\n        yScrolled = mRefreshFinalDragOffset - mTargetOffset;\n    } else if (mLoadMoreFinalDragOffset >= mLoadMoreTriggerOffset && -tmpTargetOffset > mLoadMoreFinalDragOffset) {\n        yScrolled = -mLoadMoreFinalDragOffset - mTargetOffset;\n    }\n\n    if (STATUS.isRefreshStatus(mStatus)) {\n        mRefreshCallback.onMove(mTargetOffset, false, false);\n    } else if (STATUS.isLoadMoreStatus(mStatus)) {\n        mLoadMoreCallback.onMove(mTargetOffset, false, false);\n    }\n    updateScroll(yScrolled);\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * auto refresh or cancel\n *\n * @param refreshing\n */\n", "func_signal": "public void setRefreshing(boolean refreshing)", "code": "{\n    if (!isRefreshEnabled() || mHeaderView == null) {\n        return;\n    }\n    this.mAutoLoading = refreshing;\n    if (refreshing) {\n        if (STATUS.isStatusDefault(mStatus)) {\n            setStatus(STATUS.STATUS_SWIPING_TO_REFRESH);\n            scrollDefaultToRefreshing();\n        }\n    } else {\n        if (STATUS.isRefreshing(mStatus)) {\n            mRefreshCallback.onComplete();\n            postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    scrollRefreshingToDefault();\n                }\n            }, mRefreshCompleteDelayDuration);\n        }\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * abort scroll if it is scrolling\n */\n", "func_signal": "public void abortIfRunning()", "code": "{\n    if (mRunning) {\n        if (!mScroller.isFinished()) {\n            mAbort = true;\n            mScroller.forceFinished(true);\n        }\n        finish();\n        mAbort = false;\n    }\n}", "path": "SwipeToLoadLayout/library/src/main/java/com/aspsine/swipetoloadlayout/SwipeToLoadLayout.java", "commit_date": "2017-01-03 00:00:00", "repo_name": "Aspsine/SwipeToLoadLayout", "stars": 2101, "license": "None", "language": "java", "size": 18269}
{"docstring": "/**\n * This brute force solution will throw exceed time limit exceeded exception on LeetCode.\n */\n", "func_signal": "public int numOfSubarrays(int[] arr)", "code": "{\n    long oddCount = 0;\n    for (int i = 0; i < arr.length; i++) {\n        long subTotal = 0;\n        for (int j = i; j < arr.length; j++) {\n            subTotal += arr[j];\n            if (subTotal % 2 != 0) {\n                oddCount++;\n            }\n        }\n    }\n    return (int) oddCount % 1000000007;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_1524.java", "commit_date": "2020-07-25 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * no-brainer, used O(n) space\n */\n", "func_signal": "public int findDuplicate(int[] nums)", "code": "{\n    Set<Integer> set = new HashSet<>();\n    int dup = 0;\n    for (int i = 0; i < nums.length; i++) {\n        if (!set.add(nums[i])) {\n            dup = nums[i];\n            break;\n        }\n    }\n    return dup;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_287.java", "commit_date": "2020-05-28 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "// Encodes a tree to a single string.\n", "func_signal": "public String serialize(TreeNode root)", "code": "{\n    if (root == null) {\n        return null;\n    }\n    StringBuilder stringBuilder = new StringBuilder();\n    return serialize(root, stringBuilder);\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_449.java", "commit_date": "2020-07-11 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * https://discuss.leetcode.com/topic/3296/my-recursive-java-code-with-o-n-time-and-o-n-space\n * Note: the last element of postorder array is the root!\n * The idea is to take the last element in postorder as the root; find the position of the root\n * in the inorder array; then locate the range for left sub-tree and right sub-tree and do\n * recursion, use a hashmap to record the index of root in the inorder array.\n */\n", "func_signal": "public TreeNode buildTree(int[] inorder, int[] postorder)", "code": "{\n    if (inorder == null || postorder == null || inorder.length != postorder.length) {\n        return null;\n    }\n    HashMap<Integer, Integer> inorderMap = new HashMap<>();\n    for (int i = 0; i < inorder.length; i++) {\n        inorderMap.put(inorder[i], i);\n    }\n    /**At the beginning, both start from 0 to nums.length-1*/\n    return buildTreeRecursively(inorderMap, 0, inorder.length - 1, postorder, 0,\n            postorder.length - 1);\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_106.java", "commit_date": "2020-05-09 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "// Decodes your encoded data to tree.\n", "func_signal": "public TreeNode deserialize(String data)", "code": "{\n    if (data == null || data.length() == 0) {\n        return null;\n    }\n    String[] values = data.split(\" \");\n    int[] index = new int[]{0};/**TODO: Why must use an int array, instead of just an int?*/\n    return deserialize(values, index, Integer.MAX_VALUE);\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_449.java", "commit_date": "2020-07-11 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * credit: https://discuss.leetcode.com/topic/28719/short-java-solution-using-dp-o-n-log-n\n * The idea is that as you iterate the sequence,\n * you keep track of the minimum value a subsequence of given length might end with,\n * for all so far possible subsequence lengths.\n * So dp[i] is the minimum value a subsequence of length i+1 might end with.\n * Having this info, for each new number we iterate to,\n * we can determine the longest subsequence where it can be appended using binary search.\n * The final answer is the length of the longest subsequence we found so far.\n */\n", "func_signal": "public int lengthOfLIS(int[] nums)", "code": "{\n    int[] dp = new int[nums.length];\n    int len = 0;\n    for (int x : nums) {\n        /**Java Doc of this binarySearch API:\n         * @return index of the search key, if it is contained in the array\n         *         within the specified range;\n         *         otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The\n         *         <i>insertion point</i> is defined as the point at which the\n         *         key would be inserted into the array: the index of the first\n         *         element in the range greater than the key,\n         *         or <tt>toIndex</tt> if all\n         *         elements in the range are less than the specified key.  Note\n         *         that this guarantees that the return value will be &gt;= 0 if\n         *         and only if the key is found.*/\n        int index = Arrays.binarySearch(dp, 0, len, x);\n        if (index < 0) {\n            index = -(index + 1);\n        }\n        dp[index] = x;\n        if (index == len) {\n            len++;\n        }\n    }\n    return len;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_300.java", "commit_date": "2020-05-28 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "// Decodes your encoded data to tree.\n", "func_signal": "public TreeNode deserialize(String data)", "code": "{\n    if (data == null || data.length() == 0) {\n        return null;\n    }\n    String[] nodes = data.split(\" \");\n    TreeNode root = new TreeNode(Integer.valueOf(nodes[0]));\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n    for (int i = 1; i < nodes.length; i++) {\n        TreeNode curr = queue.poll();\n        if (!nodes[i].equals(\"#\")) {\n            curr.left = new TreeNode(Integer.valueOf(nodes[i]));\n            queue.offer(curr.left);\n        }\n        if (!nodes[++i].equals(\"#\")) {\n            curr.right = new TreeNode(Integer.valueOf(nodes[i]));\n            queue.offer(curr.right);\n        }\n    }\n    return root;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_449.java", "commit_date": "2020-07-11 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * reference: https://discuss.leetcode.com/topic/28308/java-ac-solution-using-bfs\n */\n", "func_signal": "public String alienOrder(String[] words)", "code": "{\n    Map<Character, Set<Character>> map = new HashMap();\n    Map<Character, Integer> degree = new HashMap<>();\n    String result = \"\";\n    if (words == null || words.length == 0) {\n        return result;\n    }\n    for (String s : words) {\n        for (char c : s.toCharArray()) {\n            degree.put(c, 0);//keeps overwriting it, the purpose is to create one entry\n            //for each letter in the degree map\n        }\n    }\n    for (int i = 0; i < words.length - 1; i++) {\n        String cur = words[i];\n        String next = words[i + 1];\n        int length = Math.min(cur.length(), next.length());\n        for (int j = 0; j < length; j++) {\n            char c1 = cur.charAt(j);\n            char c2 = next.charAt(j);\n            if (c1 != c2) {\n                Set<Character> set = new HashSet<>();\n                if (map.containsKey(c1)) {\n                    set = map.get(c1);\n                }\n                if (!set.contains(c2)) {\n                    set.add(c2);\n                    map.put(c1, set);\n                    degree.put(c2, degree.get(c2) + 1);\n                }\n                break;\n            }\n        }\n    }\n    Queue<Character> queue = new LinkedList<>();\n    for (char c : degree.keySet()) {\n        if (degree.get(c) == 0) {\n            queue.add(c);\n        }\n    }\n    while (!queue.isEmpty()) {\n        char c = queue.remove();\n        result += c;\n        if (map.containsKey(c)) {\n            for (char c2 : map.get(c)) {\n                degree.put(c2, degree.get(c2) - 1);\n                if (degree.get(c2) == 0) {\n                    queue.add(c2);\n                }\n            }\n        }\n    }\n    if (result.length() != degree.size()) {\n        return \"\";\n    }\n    return result;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_269.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * Postorder\n * Reference: https://discuss.leetcode.com/topic/97922/pre-or-post-order-with-only-keeping-one-bound-beat-98-and-95\n */\n", "func_signal": "public String serialize(TreeNode root)", "code": "{\n    if (root == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder();\n    return serialize(root, sb);\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_449.java", "commit_date": "2020-07-11 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * O(1) space\n */\n", "func_signal": "public int findDuplicate(int[] nums)", "code": "{\n    int slow = 0;\n    int fast = 0;\n    int finder = 0;\n    while (true) {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n\n        if (slow == fast) {\n            break;\n        }\n    }\n\n    while (true) {\n        slow = nums[slow];\n        finder = nums[finder];\n        if (slow == finder) {\n            return slow;\n        }\n    }\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_287.java", "commit_date": "2020-05-28 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "// Decodes your encoded data to tree.\n", "func_signal": "public TreeNode deserialize(String data)", "code": "{\n    if (data == null || data.length() == 0) {\n        return null;\n    }\n    String[] values = data.split(\" \");\n    int[] index = new int[]{values.length - 1};/**TODO: This is not just one element any more like in the preorder solution above*/\n    return deserialize(values, index, Integer.MIN_VALUE);\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_449.java", "commit_date": "2020-07-11 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "//use the most regular method to get it AC'ed first\n", "func_signal": "public int[] countBits(int num)", "code": "{\n    int[] ones = new int[num + 1];\n    for (int i = 0; i <= num; i++) {\n        ones[i] = countOnes(i);\n    }\n    return ones;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_338.java", "commit_date": "2020-05-28 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * credit: https://discuss.leetcode.com/topic/89282/java-o-n-time-o-1-space\n * Use start and end to keep track of the minimum subarray nums[start...end] which must be sorted for the entire array nums.\n * If start < end < 0 at the end of the for loop, then the array is already fully sorted.\n * <p>\n * Time: O(n)\n * Space: O(1)\n */\n", "func_signal": "public int findUnsortedSubarray(int[] nums)", "code": "{\n    int n = nums.length;\n    int start = -1;\n    int end = -2;\n    int min = nums[n - 1];\n    int max = nums[0];\n    for (int i = 1; i < n; i++) {\n        max = Math.max(max, nums[i]);\n        min = Math.min(min, nums[n - 1 - i]);\n        if (nums[i] < max) {\n            end = i;\n        }\n        if (nums[n - 1 - i] > min) {\n            start = n - 1 - i;\n        }\n    }\n    return end - start + 1;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_581.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "// Encodes a tree to a single string.\n", "func_signal": "public String serialize(TreeNode root)", "code": "{\n    Queue<TreeNode> queue = new LinkedList<>();\n    StringBuilder stringBuilder = new StringBuilder();\n    if (root == null) {\n        return stringBuilder.toString();\n    }\n    queue.offer(root);\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        for (int i = 0; i < size; i++) {\n            TreeNode curr = queue.poll();\n            if (curr == null) {\n                stringBuilder.append(\"# \");\n            } else {\n                stringBuilder.append(curr.val + \" \");\n                queue.offer(curr.left);\n                queue.offer(curr.right);\n            }\n        }\n    }\n    return stringBuilder.toString();\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_449.java", "commit_date": "2020-07-11 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * lixx2100's post is cool:https://discuss.leetcode.com/topic/40162/three-line-java-solution\n * An easy recurrence for this problem is f[i] = f[i / 2] + i % 2\n * and then we'll use bit manipulation to express the above recursion function\n * right shift by 1 means to divide by 2\n * AND with 1 means to modulo 2\n * this is so cool!\n */\n", "func_signal": "public int[] countBits(int num)", "code": "{\n    int[] ones = new int[num + 1];\n    for (int i = 1; i <= num; i++) {\n        ones[i] = ones[i >> 1] + (i & 1);\n    }\n    return ones;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_338.java", "commit_date": "2020-05-28 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * This brute force solution will result in TLE as soon as n = 10 and k = 4.\n */\n", "func_signal": "public int[] constructArray(int n, int k)", "code": "{\n    List<List<Integer>> allPermutaions = findAllPermutations(n);\n    int[] result = new int[n];\n    for (List<Integer> perm : allPermutaions) {\n        if (isBeautifulArrangement(perm, k)) {\n            convertListToArray(result, perm);\n            break;\n        }\n    }\n    return result;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_667.java", "commit_date": "2020-07-18 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * Time: O(nlogn)\n * Space: O(n)\n */\n", "func_signal": "public int findUnsortedSubarray(int[] nums)", "code": "{\n    int[] clones = nums.clone();\n    Arrays.sort(clones);\n    int start = nums.length;\n    int end = 0;\n    for (int i = 0; i < nums.length; i++) {\n        if (clones[i] != nums[i]) {\n            start = Math.min(start, i);\n            end = Math.max(end, i);\n        }\n    }\n    return (end - start > 0) ? end - start + 1 : 0;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_581.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**TODO: this one is not AC'ed. fix this one.*/\n", "func_signal": "public List<Integer> findSubstring(String s, String[] words)", "code": "{\n  Map<String, Integer> map = new HashMap<>();\n  for (String word : words) {\n    map.put(word, 1);\n  }\n  List<Integer> result = new ArrayList<>();\n  int startIndex = 0;\n  int wordLen = words.length;\n  for (int i = 0; i < s.length(); i++) {\n    startIndex = i;\n    Map<String, Integer> clone = new HashMap<>(map);\n    int matchedWord = 0;\n    for (int j = i + 1; j < s.length(); j++) {\n      String word = s.substring(i, j);\n      if (clone.containsKey(word) && clone.get(word) == 1) {\n        clone.put(word, 0);\n        i = j;\n        matchedWord++;\n      }\n      if (matchedWord == wordLen) {\n        boolean all = true;\n        for (String key : clone.keySet()) {\n          if (clone.get(key) != 0) {\n            all = false;\n            break;\n          }\n        }\n        if (all) {\n          result.add(startIndex);\n        }\n        matchedWord = 0;\n      }\n    }\n  }\n  return result;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_30.java", "commit_date": "2020-04-28 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * This is a very smart solution:\n * First, we can see that the max value k could reach is n-1 which\n * comes from a sequence like this:\n * when n = 8, k = 5, one possible sequence is:\n * 1, 8, 2, 7, 3, 4, 5, 6\n * absolute diffs are:\n * 7, 6, 5, 4, 1, 1, 1\n * so, there are total 5 distinct integers.\n * <p>\n * So, we can just form such a sequence by putting the first part first and\n * decrement k along the way, when k becomes 1, we just put the rest numbers in order.\n */\n", "func_signal": "public int[] constructArray(int n, int k)", "code": "{\n    int[] result = new int[n];\n    int left = 1;\n    int right = n;\n    for (int i = 0; i < n && left <= right; i++) {\n        if (k > 1) {\n            result[i] = k-- % 2 != 0 ? left++ : right--;\n        } else {\n            result[i] = k % 2 != 0 ? left++ : right--;\n        }\n    }\n    return result;\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_667.java", "commit_date": "2020-07-18 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * The gotcha point of this question is:\n * 1. if a and b are identical, then there will be no common subsequence, return -1\n * 2. else if a and b are of equal length, then any one of them will be a subsequence of the other string\n * 3. else if a and b are of different length, then the longer one is a required subsequence because the longer string cannot be a subsequence of the shorter one\n * Or in other words, when a.length() != b.length(), no subsequence of b will be equal to a, so return Math.max(a.length(), b.length())\n */\n", "func_signal": "public int findLUSlength(String a, String b)", "code": "{\n    if (a.equals(b)) {\n        return -1;\n    }\n    return Math.max(a.length(), b.length());\n}", "path": "Leetcode/src/main/java/com/fishercoder/solutions/_521.java", "commit_date": "2020-07-15 00:00:00", "repo_name": "fishercoder1534/Leetcode", "stars": 3668, "license": "apache-2.0", "language": "java", "size": 9058}
{"docstring": "/**\n * Checks connectivity with the Internet. This operation is performed only once.\n *\n * @param strategy for observing Internet connectivity\n * @param host for checking Internet connectivity\n * @param port for checking Internet connectivity\n * @param timeoutInMs for pinging remote host in milliseconds\n * @param httpResponse expected HTTP response code indicating that connection is established\n * @param errorHandler for handling errors during connectivity check\n * @return RxJava Single with Boolean - true, when we have connection with host and false if\n * not\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.INTERNET)\nprotected static Single<Boolean> checkInternetConnectivity(\n    final InternetObservingStrategy strategy,\n    final String host, final int port, final int timeoutInMs, final int httpResponse,\n    final ErrorHandler errorHandler)", "code": "{\n  checkStrategyIsNotNull(strategy);\n  return strategy.checkInternetConnectivity(host, port, timeoutInMs, httpResponse, errorHandler);\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets ping interval in milliseconds\n *\n * @param interval in milliseconds\n * @return Builder\n */\n", "func_signal": "public Builder interval(int interval)", "code": "{\n  this.interval = interval;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "// networkCallback cannot be initialized here\n", "func_signal": "public MarshmallowNetworkObservingStrategy()", "code": "{\n   this.idleReceiver = createIdleBroadcastReceiver();\n   this.connectivitySubject = PublishSubject.<Connectivity>create().toSerialized();\n }", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/MarshmallowNetworkObservingStrategy.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Observes network connectivity. Information about network state, type and typeName are contained\n * in observed Connectivity object. Moreover, allows you to define NetworkObservingStrategy.\n *\n * @param context Context of the activity or an application\n * @param strategy NetworkObserving strategy to be applied - you can use one of the existing\n * strategies {@link PreLollipopNetworkObservingStrategy},\n * {@link LollipopNetworkObservingStrategy} or create your own custom strategy\n * @return RxJava Observable with Connectivity class containing information about network state,\n * type and typeName\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)\npublic static Observable<Connectivity> observeNetworkConnectivity(final Context context,\n    final NetworkObservingStrategy strategy)", "code": "{\n  Preconditions.checkNotNull(context, \"context == null\");\n  Preconditions.checkNotNull(strategy, \"strategy == null\");\n  return strategy.observeNetworkConnectivity(context);\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets HTTP response code indicating that connection is established\n *\n * @param httpResponse as integer\n * @return Builder\n */\n", "func_signal": "public Builder httpResponse(final int httpResponse)", "code": "{\n  this.httpResponse = httpResponse;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Observes connectivity with the Internet with default settings. It pings remote host\n * (www.google.com) at port 80 every 2 seconds with 2 seconds of timeout. This operation is used\n * for determining if device is connected to the Internet or not. Please note that this method is\n * less efficient than {@link #observeNetworkConnectivity(Context)} method and consumes data\n * transfer, but it gives you actual information if device is connected to the Internet or not.\n *\n * @return RxJava Observable with Boolean - true, when we have an access to the Internet\n * and false if not\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.INTERNET)\npublic static Observable<Boolean> observeInternetConnectivity()", "code": "{\n  InternetObservingSettings settings = InternetObservingSettings.create();\n  return observeInternetConnectivity(settings.strategy(), settings.initialInterval(),\n      settings.interval(), settings.host(), settings.port(),\n      settings.timeout(), settings.httpResponse(), settings.errorHandler());\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets internet observing strategy\n *\n * @param strategy for observing and internet connection\n * @return Builder\n */\n", "func_signal": "public Builder strategy(InternetObservingStrategy strategy)", "code": "{\n  this.strategy = strategy;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Checks connectivity with the Internet. This operation is performed only once.\n *\n * @return RxJava Single with Boolean - true, when we have an access to the Internet\n * and false if not\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.INTERNET)\npublic static Single<Boolean> checkInternetConnectivity()", "code": "{\n  InternetObservingSettings settings = InternetObservingSettings.create();\n  return checkInternetConnectivity(settings.strategy(), settings.host(), settings.port(),\n      settings.timeout(), settings.httpResponse(), settings.errorHandler());\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Checks connectivity with the Internet. This operation is performed only once.\n *\n * @param settings Internet Observing Settings created via Builder pattern\n * @return RxJava Single with Boolean - true, when we have connection with host and false if\n * not\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.INTERNET)\npublic static Single<Boolean> checkInternetConnectivity(InternetObservingSettings settings)", "code": "{\n  return checkInternetConnectivity(settings.strategy(), settings.host(), settings.port(),\n      settings.timeout(), settings.httpResponse(), settings.errorHandler());\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Observes connectivity with the Internet in a given time interval.\n *\n * @param strategy for observing Internet connectivity\n * @param initialIntervalInMs in milliseconds determining the delay of the first connectivity\n * check\n * @param intervalInMs in milliseconds determining how often we want to check connectivity\n * @param host for checking Internet connectivity\n * @param port for checking Internet connectivity\n * @param timeoutInMs for pinging remote host in milliseconds\n * @param httpResponse expected HTTP response code indicating that connection is established\n * @param errorHandler for handling errors during connectivity check\n * @return RxJava Observable with Boolean - true, when we have connection with host and false if\n * not\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.INTERNET)\nprotected static Observable<Boolean> observeInternetConnectivity(\n    final InternetObservingStrategy strategy, final int initialIntervalInMs,\n    final int intervalInMs, final String host, final int port, final int timeoutInMs,\n    final int httpResponse, final ErrorHandler errorHandler)", "code": "{\n  checkStrategyIsNotNull(strategy);\n  return strategy.observeInternetConnectivity(initialIntervalInMs, intervalInMs, host, port,\n      timeoutInMs, httpResponse, errorHandler);\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Returns network types from the input with additional unknown type,\n * what helps during connections filtering when device\n * is being disconnected from a specific network\n *\n * @param types of the network as an array of ints\n * @return types of the network with unknown type as an array of ints\n */\n", "func_signal": "protected static int[] appendUnknownNetworkTypeToTypes(int[] types)", "code": "{\n  int i = 0;\n  final int[] extendedTypes = new int[types.length + 1];\n  for (int type : types) {\n    extendedTypes[i] = type;\n    i++;\n  }\n  extendedTypes[i] = Connectivity.UNKNOWN_TYPE;\n  return extendedTypes;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ConnectivityPredicate.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets error handler for pings and connections\n *\n * @return Builder\n */\n", "func_signal": "public Builder errorHandler(ErrorHandler errorHandler)", "code": "{\n  this.errorHandler = errorHandler;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets initial ping interval in milliseconds\n *\n * @param initialInterval in milliseconds\n * @return Builder\n */\n", "func_signal": "public Builder initialInterval(int initialInterval)", "code": "{\n  this.initialInterval = initialInterval;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets ping host\n *\n * @return Builder\n */\n", "func_signal": "public Builder host(String host)", "code": "{\n  this.host = host;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Observes network connectivity. Information about network state, type and typeName are contained\n * in\n * observed Connectivity object.\n *\n * @param context Context of the activity or an application\n * @return RxJava Observable with Connectivity class containing information about network state,\n * type and typeName\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)\npublic static Observable<Connectivity> observeNetworkConnectivity(final Context context)", "code": "{\n  final NetworkObservingStrategy strategy;\n\n  if (Preconditions.isAtLeastAndroidMarshmallow()) {\n    strategy = new MarshmallowNetworkObservingStrategy();\n  } else if (Preconditions.isAtLeastAndroidLollipop()) {\n    strategy = new LollipopNetworkObservingStrategy();\n  } else {\n    strategy = new PreLollipopNetworkObservingStrategy();\n  }\n\n  return observeNetworkConnectivity(context, strategy);\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Filter, which returns true if at least one given type occurred\n *\n * @param types int, which can have one or more types\n * @return true if at least one given type occurred\n */\n", "func_signal": "public static Predicate<Connectivity> hasType(final int... types)", "code": "{\n  final int[] extendedTypes = appendUnknownNetworkTypeToTypes(types);\n  return new Predicate<Connectivity>() {\n    @Override public boolean test(@NonNull Connectivity connectivity) throws Exception {\n      for (int type : extendedTypes) {\n        if (connectivity.type() == type) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ConnectivityPredicate.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Filter, which returns true if at least one given state occurred\n *\n * @param states NetworkInfo.State, which can have one or more states\n * @return true if at least one given state occurred\n */\n", "func_signal": "public static Predicate<Connectivity> hasState(final NetworkInfo.State... states)", "code": "{\n  return new Predicate<Connectivity>() {\n    @Override public boolean test(@NonNull Connectivity connectivity) throws Exception {\n      for (NetworkInfo.State state : states) {\n        if (connectivity.state() == state) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ConnectivityPredicate.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * Observes connectivity with the Internet in a given time interval.\n *\n * @param settings Internet Observing Settings created via Builder pattern\n * @return RxJava Observable with Boolean - true, when we have connection with host and false if\n * not\n */\n", "func_signal": "@RequiresPermission(Manifest.permission.INTERNET)\npublic static Observable<Boolean> observeInternetConnectivity(\n    InternetObservingSettings settings)", "code": "{\n  return observeInternetConnectivity(settings.strategy(), settings.initialInterval(),\n      settings.interval(), settings.host(), settings.port(),\n      settings.timeout(), settings.httpResponse(), settings.errorHandler());\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/ReactiveNetwork.java", "commit_date": "2019-08-06 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets ping timeout in milliseconds\n *\n * @param timeout in milliseconds\n * @return Builder\n */\n", "func_signal": "public Builder timeout(int timeout)", "code": "{\n  this.timeout = timeout;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n * sets ping port\n *\n * @return Builder\n */\n", "func_signal": "public Builder port(int port)", "code": "{\n  this.port = port;\n  return this;\n}", "path": "ReactiveNetwork/library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/InternetObservingSettings.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "pwittchen/ReactiveNetwork", "stars": 2528, "license": "apache-2.0", "language": "java", "size": 1706}
{"docstring": "/**\n *\n * Cleans Disposes of TNode in separate Atomic CAS operation per\n * http://bravenewgeek.com/breaking-and-entering-lose-the-lock-while-embracing-concurrency/\n *\n * We roughly follow this theory above, but we allow CNode with no Subscriptions to linger (for now).\n *\n *\n * @param inode inode that handle to the tomb node.\n * @param iParent inode parent.\n * @return REPEAT if the this methods wasn't successful or OK.\n */\n", "func_signal": "private Action cleanTomb(INode inode, INode iParent)", "code": "{\n    CNode updatedCnode = iParent.mainNode().copy();\n    updatedCnode.remove(inode);\n    return iParent.compareAndSet(iParent.mainNode(), updatedCnode) ? Action.OK : Action.REPEAT;\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/subscriptions/CTrie.java", "commit_date": "2018-11-24 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "// 0 - none, 1 - initialized, 2 - destroyed\n", "func_signal": "public AutoFlushHandler(long writerIdleTime, TimeUnit unit)", "code": "{\n       if (unit == null) {\n           throw new NullPointerException(\"unit\");\n       }\n       writerIdleTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);\n   }", "path": "moquette/broker/src/main/java/io/moquette/broker/AutoFlushHandler.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "// 0 - none, 1 - initialized, 2 - destroyed\n", "func_signal": "public InflightResender(long writerIdleTime, TimeUnit unit)", "code": "{\n       if (unit == null) {\n           throw new NullPointerException(\"unit\");\n       }\n       resenderTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);\n   }", "path": "moquette/broker/src/main/java/io/moquette/broker/InflightResender.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Parse the configuration from file.\n *\n * @param file\n *            to parse\n * @return the collector of authorizations form reader passed into.\n * @throws ParseException\n *             if the format is not compliant.\n */\n", "func_signal": "public static AuthorizationsCollector parse(File file) throws ParseException", "code": "{\n    if (file == null) {\n        LOG.warn(\"parsing NULL file, so fallback on default configuration!\");\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n    if (!file.exists()) {\n        LOG.warn(\n                String.format(\n                        \"parsing not existing file %s, so fallback on default configuration!\",\n                        file.getAbsolutePath()));\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n    try {\n        Reader reader = Files.newBufferedReader(file.toPath(), UTF_8);\n        return parse(reader);\n    } catch (IOException fex) {\n        LOG.warn(\n                String.format(\n                        \"parsing not existing file %s, so fallback on default configuration!\",\n                        file.getAbsolutePath()),\n                fex);\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/security/ACLFileParser.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Connect subscribe to topic and publish on the same topic\n */\n", "func_signal": "private IMqttClient subscribeAndPublish(String topic) throws Exception", "code": "{\n    IMqttClient client = new MqttClient(\"tcp://localhost:1883\", \"SubPub\");\n    MessageCollector collector = new MessageCollector();\n    client.setCallback(collector);\n    client.connect();\n    client.subscribe(topic, 1);\n    client.publish(topic, \"Hello world MQTT!!\".getBytes(UTF_8), 0, false);\n    MqttMessage msg = collector.waitMessage(1);\n    assertEquals(\"Hello world MQTT!!\", new String(msg.getPayload(), UTF_8));\n    return client;\n}", "path": "moquette/broker/src/test/java/io/moquette/integration/ServerIntegrationRestartTest.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "//Copy constructor\n", "func_signal": "private CNode(Token token, List<INode> children, Set<Subscription> subscriptions)", "code": "{\n    this.token = token; // keep reference, root comparison in directory logic relies on it for now.\n    this.subscriptions = new HashSet<>(subscriptions);\n    this.children = new ArrayList<>(children);\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/subscriptions/CNode.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Verify if the 2 topics matching respecting the rules of MQTT Appendix A\n *\n * @param subscriptionTopic\n *            the topic filter of the subscription\n * @return true if the two topics match.\n */\n// TODO reimplement with iterators or with queues\n", "func_signal": "public boolean match(Topic subscriptionTopic)", "code": "{\n    List<Token> msgTokens = getTokens();\n    List<Token> subscriptionTokens = subscriptionTopic.getTokens();\n    int i = 0;\n    for (; i < subscriptionTokens.size(); i++) {\n        Token subToken = subscriptionTokens.get(i);\n        if (!Token.MULTI.equals(subToken) && !Token.SINGLE.equals(subToken)) {\n            if (i >= msgTokens.size()) {\n                return false;\n            }\n            Token msgToken = msgTokens.get(i);\n            if (!msgToken.equals(subToken)) {\n                return false;\n            }\n        } else {\n            if (Token.MULTI.equals(subToken)) {\n                return true;\n            }\n//                if (Token.SINGLE.equals(subToken)) {\n//                    // skip a step forward\n//                }\n        }\n    }\n    return i == msgTokens.size();\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/subscriptions/Topic.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * subscriber A connect and subscribe on \"a/b\" QoS 1 subscriber B connect and subscribe on \"a/+\"\n * BUT with QoS 2 publisher connects and send a message \"hello\" on \"a/b\" subscriber A must\n * receive a notification with QoS1 subscriber B must receive a notification with QoS2\n */\n", "func_signal": "@Test\npublic void checkSubscribersGetCorrectQosNotifications() throws Exception", "code": "{\n    LOG.info(\"*** checkSubscribersGetCorrectQosNotifications ***\");\n\n    MqttClientPersistence dsSubscriberA = new MqttDefaultFilePersistence(tempFolder.newFolder(\"subscriberA\").getAbsolutePath());\n\n    MqttClient subscriberA = new MqttClient(\"tcp://localhost:1883\", \"SubscriberA\", dsSubscriberA);\n    MessageCollector cbSubscriberA = new MessageCollector();\n    subscriberA.setCallback(cbSubscriberA);\n    subscriberA.connect();\n    subscriberA.subscribe(\"a/b\", 1);\n\n    MqttClientPersistence dsSubscriberB = new MqttDefaultFilePersistence(tempFolder.newFolder(\"subscriberB\").getAbsolutePath());\n\n    MqttClient subscriberB = new MqttClient(\"tcp://localhost:1883\", \"SubscriberB\", dsSubscriberB);\n    MessageCollector cbSubscriberB = new MessageCollector();\n    subscriberB.setCallback(cbSubscriberB);\n    subscriberB.connect();\n    subscriberB.subscribe(\"a/+\", 2);\n\n    m_client.connect();\n    m_client.publish(\"a/b\", \"Hello world MQTT!!\".getBytes(UTF_8), 2, false);\n\n    MqttMessage messageOnA = cbSubscriberA.waitMessage(1);\n    assertEquals(\"Hello world MQTT!!\", new String(messageOnA.getPayload(), UTF_8));\n    assertEquals(1, messageOnA.getQos());\n    subscriberA.disconnect();\n\n    MqttMessage messageOnB = cbSubscriberB.waitMessage(1);\n    assertNotNull(\"MUST be a received message\", messageOnB);\n    assertEquals(\"Hello world MQTT!!\", new String(messageOnB.getPayload(), UTF_8));\n    assertEquals(2, messageOnB.getQos());\n    subscriberB.disconnect();\n}", "path": "moquette/broker/src/test/java/io/moquette/integration/ServerIntegrationPahoTest.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Return the IoBuffer with string encoded as MSB, LSB and bytes array content.\n */\n", "func_signal": "public static ByteBuf encodeFixedLengthContent(byte[] content)", "code": "{\n    ByteBuf out = Unpooled.buffer(2);\n    out.writeShort(content.length);\n    out.writeBytes(content);\n    return out;\n}", "path": "moquette/broker/src/test/java/io/moquette/Utils.java", "commit_date": "2018-04-27 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "//TODO this is equivalent to negate(containsOnly(clientId))\n", "func_signal": "public boolean contains(String clientId)", "code": "{\n    for (Subscription sub : this.subscriptions) {\n        if (sub.clientId.equals(clientId)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/subscriptions/CNode.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "// aka testPublishWithQoS1_notCleanSession\n", "func_signal": "@Test\npublic void forwardQoS1PublishesWhenNotCleanSessionReconnects()", "code": "{\n    connection.processConnect(ConnectionTestUtils.buildConnectNotClean(FAKE_CLIENT_ID));\n    ConnectionTestUtils.assertConnectAccepted(channel);\n    subscribe(connection, NEWS_TOPIC, AT_LEAST_ONCE);\n    connection.processDisconnect(null);\n\n    // publish a QoS 1 message from another client publish a message on the topic\n    EmbeddedChannel pubChannel = new EmbeddedChannel();\n    MQTTConnection pubConn = createMQTTConnection(ALLOW_ANONYMOUS_AND_ZERO_BYTES_CLID, pubChannel);\n    pubConn.processConnect(ConnectionTestUtils.buildConnect(PUBLISHER_ID));\n    ConnectionTestUtils.assertConnectAccepted(pubChannel);\n\n    final ByteBuf anyPayload = Unpooled.copiedBuffer(\"Any payload\", Charset.defaultCharset());\n    sut.receivedPublishQos1(pubConn, new Topic(NEWS_TOPIC), TEST_USER, anyPayload, 1, true,\n        MqttMessageBuilders.publish()\n            .payload(anyPayload.retainedDuplicate())\n            .qos(MqttQoS.AT_LEAST_ONCE)\n            .topicName(NEWS_TOPIC).build());\n\n    // simulate a reconnection from the other client\n    connection = createMQTTConnection(ALLOW_ANONYMOUS_AND_ZERO_BYTES_CLID);\n    connectMessage = ConnectionTestUtils.buildConnectNotClean(FAKE_CLIENT_ID);\n    connection.processConnect(connectMessage);\n    ConnectionTestUtils.assertConnectAccepted(channel);\n\n    // Verify\n    ConnectionTestUtils.verifyPublishIsReceived(channel, AT_LEAST_ONCE, \"Any payload\");\n}", "path": "moquette/broker/src/test/java/io/moquette/broker/PostOfficePublishTest.java", "commit_date": "2019-03-17 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Check that after a client has connected with clean session false, subscribed to some topic\n * and exited, if it reconnects with clean session true, the broker correctly cleanup every\n * previous subscription\n */\n", "func_signal": "@Test\npublic void testCleanSession_correctlyClientSubscriptions()", "code": "{\n    connection.processConnect(connectMessage);\n    ConnectionTestUtils.assertConnectAccepted(channel);\n    assertEquals(\"After CONNECT subscription MUST be empty\", 0, subscriptions.size());\n\n    //subscribe(channel, NEWS_TOPIC, AT_MOST_ONCE);\n    final MqttSubscribeMessage subscribeMsg = MqttMessageBuilders\n        .subscribe()\n        .addSubscription(AT_MOST_ONCE, NEWS_TOPIC)\n        .messageId(1)\n        .build();\n    connection.processSubscribe(subscribeMsg);\n    assertEquals(\"Subscribe MUST contain one subscription\", 1, subscriptions.size());\n\n    connection.processDisconnect(null);\n    assertEquals(\"Disconnection MUSTN'T clear subscriptions\", 1, subscriptions.size());\n\n    connectMessage = MqttMessageBuilders.connect()\n        .clientId(FAKE_CLIENT_ID)\n        .cleanSession(true)\n        .build();\n    channel = new EmbeddedChannel();\n    connection = createMQTTConnection(CONFIG, channel);\n    connection.processConnect(connectMessage);\n    ConnectionTestUtils.assertConnectAccepted(channel);\n    assertEquals(\"After CONNECT with clean, subscription MUST be empty\", 0, subscriptions.size());\n\n    // publish on /news\n    final ByteBuf payload = Unpooled.copiedBuffer(\"Hello world!\", Charset.defaultCharset());\n    sut.receivedPublishQos0(new Topic(NEWS_TOPIC), TEST_USER, TEST_PWD, payload, false,\n        MqttMessageBuilders.publish()\n            .payload(payload)\n            .qos(MqttQoS.AT_MOST_ONCE)\n            .retained(false)\n            .topicName(NEWS_TOPIC).build());\n\n    // verify no publish is fired\n    ConnectionTestUtils.verifyNoPublishIsReceived(channel);\n}", "path": "moquette/broker/src/test/java/io/moquette/broker/PostOfficeSubscribeTest.java", "commit_date": "2019-03-17 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * provide authenticator from SQL database\n *\n * @param driver\n *            : jdbc driver class like : \"org.postgresql.Driver\"\n * @param jdbcUrl\n *            : jdbc url like : \"jdbc:postgresql://host:port/dbname\"\n * @param sqlQuery\n *            : sql query like : \"SELECT PASSWORD FROM USER WHERE LOGIN=?\"\n * @param digestMethod\n *            : password encoding algorithm : \"MD5\", \"SHA-1\", \"SHA-256\"\n */\n", "func_signal": "public DBAuthenticator(String driver, String jdbcUrl, String sqlQuery, String digestMethod)", "code": "{\n    this.sqlQuery = sqlQuery;\n    this.dataSource = new HikariDataSource();\n    this.dataSource.setJdbcUrl(jdbcUrl);\n\n    try {\n        this.messageDigest = MessageDigest.getInstance(digestMethod);\n    } catch (NoSuchAlgorithmException nsaex) {\n        LOG.error(String.format(\"Can't find %s for password encoding\", digestMethod), nsaex);\n        throw new RuntimeException(nsaex);\n    }\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/security/DBAuthenticator.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Return the IoBuffer with string encoded as MSB, LSB and UTF-8 encoded string content.\n */\n", "func_signal": "public static ByteBuf encodeString(String str)", "code": "{\n    byte[] raw;\n    try {\n        raw = str.getBytes(\"UTF-8\");\n        // NB every Java platform has got UTF-8 encoding by default, so this\n        // exception are never raised.\n    } catch (UnsupportedEncodingException ex) {\n        LoggerFactory.getLogger(Utils.class).error(null, ex);\n        return null;\n    }\n    return encodeFixedLengthContent(raw);\n}", "path": "moquette/broker/src/test/java/io/moquette/Utils.java", "commit_date": "2018-04-27 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Parse the ACL configuration file\n *\n * @param reader\n *            to parse\n * @return the collector of authorizations form reader passed into.\n * @throws ParseException\n *             if the format is not compliant.\n */\n", "func_signal": "public static AuthorizationsCollector parse(Reader reader) throws ParseException", "code": "{\n    if (reader == null) {\n        // just log and return default properties\n        LOG.warn(\"parsing NULL reader, so fallback on default configuration!\");\n        return AuthorizationsCollector.emptyImmutableCollector();\n    }\n\n    BufferedReader br = new BufferedReader(reader);\n    String line;\n    AuthorizationsCollector collector = new AuthorizationsCollector();\n\n    Pattern emptyLine = Pattern.compile(\"^\\\\s*$\");\n    Pattern commentLine = Pattern.compile(\"^#.*\"); // As spec, comment lines should start with '#'\n    Pattern invalidCommentLine = Pattern.compile(\"^\\\\s*#.*\");\n    // This pattern has a dependency on filtering `commentLine`.\n    Pattern endLineComment = Pattern.compile(\"^([\\\\w\\\\s\\\\/\\\\+]+#?)(\\\\s*#.*)$\");\n    Matcher endLineCommentMatcher;\n\n    try {\n        while ((line = br.readLine()) != null) {\n            if (line.isEmpty() || emptyLine.matcher(line).matches() || commentLine.matcher(line).matches()) {\n                // skip it's a black line or comment\n                continue;\n            } else if (invalidCommentLine.matcher(line).matches()) {\n                // it's a malformed comment\n                int commentMarker = line.indexOf('#');\n                throw new ParseException(line, commentMarker);\n            }\n\n            endLineCommentMatcher = endLineComment.matcher(line);\n            if (endLineCommentMatcher.matches()) {\n                line = endLineCommentMatcher.group(1);\n            }\n\n            collector.parse(line);\n        }\n    } catch (IOException ex) {\n        throw new ParseException(\"Failed to read\", 1);\n    }\n    return collector;\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/security/ACLFileParser.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Write just String bytes not length\n */\n", "func_signal": "public RawClient write(String str)", "code": "{\n    ByteBuf out = Unpooled.buffer(str.length());\n    byte[] raw;\n    try {\n        raw = str.getBytes(\"UTF-8\");\n        // NB every Java platform has got UTF-8 encoding by default, so this\n        // exception are never raised.\n    } catch (UnsupportedEncodingException ex) {\n        throw new IllegalStateException(ex);\n    }\n    out.writeBytes(raw);\n    m_channel.write(out).addListener(CLOSE_ON_FAILURE);\n    return this;\n}", "path": "moquette/broker/src/test/java/io/moquette/testclient/RawClient.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Is called when the write timeout expire.\n *\n * @param ctx the channel context.\n */\n", "func_signal": "private void channelIdle(ChannelHandlerContext ctx)", "code": "{\n    // ctx.fireUserEventTriggered(evt);\n    if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Flushing idle Netty channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n    }\n    ctx.channel().flush();\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/AutoFlushHandler.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * @return a new Topic corresponding to this less than the head token\n * */\n", "func_signal": "public Topic exceptHeadToken()", "code": "{\n    List<Token> tokens = getTokens();\n    if (tokens.isEmpty()) {\n        return new Topic(Collections.emptyList());\n    }\n    List<Token> tokensCopy = new ArrayList<>(tokens);\n    tokensCopy.remove(0);\n    return new Topic(tokensCopy);\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/subscriptions/Topic.java", "commit_date": "2018-11-11 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Removes subscription from CTrie, adds TNode when the last client unsubscribes, then calls for cleanTomb in a\n * separate atomic CAS operation.\n *\n * @param topic the subscription's topic to remove.\n * @param clientID the Id of client owning the subscription.\n */\n", "func_signal": "@Override\npublic void removeSubscription(Topic topic, String clientID)", "code": "{\n    ctrie.removeFromTree(topic, clientID);\n    this.subscriptionsRepository.removeSubscription(topic.toString(), clientID);\n}", "path": "moquette/broker/src/main/java/io/moquette/broker/subscriptions/CTrieSubscriptionDirectory.java", "commit_date": "2018-11-24 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "// TODO move this functional test into unit/integration\n", "func_signal": "@Test\npublic void shouldNotInternalPublishOnReadBlockedSubscriptionTopic() throws Exception", "code": "{\n    LOG.info(\"*** shouldNotInternalPublishOnReadBlockedSubscriptionTopic ***\");\n\n    MqttConnectOptions options = new MqttConnectOptions();\n    options.setCleanSession(false);\n    m_client.connect(options);\n    m_client.subscribe(\"/topic\", 0);\n\n    // Exercise\n    MqttPublishMessage message = MqttMessageBuilders.publish()\n        .topicName(\"/topic\")\n        .retained(true)\n        .qos(MqttQoS.AT_MOST_ONCE)\n        .payload(Unpooled.copiedBuffer(\"Hello World!!\".getBytes(UTF_8)))\n        .build();\n\n    m_server.internalPublish(message, \"INTRLPUB\");\n\n    final MqttMessage mqttMessage = m_messagesCollector.waitMessage(1);\n    assertNotNull(mqttMessage);\n\n    m_client.disconnect();\n    // switch the authorizator\n    canRead = false;\n\n    // Exercise 2\n    m_client.connect(options);\n    try {\n        m_client.subscribe(\"/topic\", 0);\n        fail();\n    } catch (MqttException mex) {\n        // it's OK, the subscribed should fail with error code 128\n    }\n\n    m_server.internalPublish(message, \"INTRLPUB\");\n\n    // verify the message is not published\n    final MqttMessage mqttMessage2 = m_messagesCollector.waitMessage(1);\n    assertNull(\"No message MUST be received\", mqttMessage2);\n}", "path": "moquette/broker/src/test/java/io/moquette/integration/ServerIntegrationPahoCanPublishOnReadBlockedTopicTest.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "moquette-io/moquette", "stars": 2226, "license": "apache-2.0", "language": "java", "size": 6127}
{"docstring": "/**\n * Compare two char arrays in constant time, so as to protect against timing attacks. (NB:\n * \"Constant time\" means that the method execution time does not depend on the contents of the\n * buffer \u2014\u00a0it's not a comment about the time complexity.  (The method is obviously O(n).)\n *\n * This is interesting because normal comparisons (Arrays.equals(), eg) short-circuit as soon as a\n * difference is found. This leaks information about the underlying data, and so is inappropriate\n * for comparing secrets.  For more information, see:\n *\n * <ul>\n *   <li><a href=\"http://emerose.com/timing-attacks-explained\">this Square Security Awareness\n *     note</a></li>\n *   <li><a href=\"http://codahale.com/a-lesson-in-timing-attacks/\">a discussion of Java 6's\n *     MessageDigest.isEqual()</a></li>\n *   <li><a href=\"http://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf\">a paper on the\n *     practical exploitability of network-based timing attacks</a></li>\n * </ul>\n *\n * @param a first value\n * @param b second value\n * @return true iff a == b\n */\n", "func_signal": "public static boolean secureCompare(final char[] a, final char[] b)", "code": "{\n  if (a.length != b.length) {\n    return false;\n  }\n\n  int match = 0;\n  for (int i = 0; i < a.length; i++) {\n    match = match | a[i] ^ b[i];\n  }\n\n  return (match == 0); // true if match\n}", "path": "keywhiz/server/src/main/java/keywhiz/auth/Subtles.java", "commit_date": "2015-03-27 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Static factory method used by Jackson for deserialization\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\n@JsonCreator public static GroupDetailResponseV2 fromParts(\n    @JsonProperty(\"name\") String name,\n    @JsonProperty(\"description\") String description,\n    @JsonProperty(\"createdAtSeconds\") long createdAtSeconds,\n    @JsonProperty(\"updatedAtSeconds\") long updatedAtSeconds,\n    @JsonProperty(\"createdBy\") String createdBy,\n    @JsonProperty(\"updatedBy\") String updatedBy,\n    @JsonProperty(\"secrets\") Iterable<String> secrets,\n    @JsonProperty(\"clients\") Iterable<String> clients,\n    @JsonProperty(\"metadata\") @Nullable Map<String, String> metadata)", "code": "{\n  return builder()\n      .name(name)\n      .description(description)\n      .createdAtSeconds(createdAtSeconds)\n      .updatedAtSeconds(updatedAtSeconds)\n      .createdBy(createdBy)\n      .updatedBy(updatedBy)\n      .secrets(secrets)\n      .clients(clients)\n      .metadata(metadata == null ? ImmutableMap.of() : ImmutableMap.copyOf(metadata))\n      .build();\n}", "path": "keywhiz/api/src/main/java/keywhiz/api/automation/v2/GroupDetailResponseV2.java", "commit_date": "2020-08-17 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "// prevent sub-classing\n", "func_signal": "public static Builder builder()", "code": "{\n   return new AutoValue_ModifyGroupsRequestV2.Builder()\n       .addGroups()\n       .removeGroups();\n }", "path": "keywhiz/api/src/main/java/keywhiz/api/automation/v2/ModifyGroupsRequestV2.java", "commit_date": "2015-10-09 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "// Sets the evaluated password and URL before calling the parent's create method.\n", "func_signal": "@Override public ManagedDataSource build(MetricRegistry metricRegistry, String name)", "code": "{\n  setUrl(getUrl());\n  setPassword(getPassword());\n  return super.build(metricRegistry, name);\n}", "path": "keywhiz/server/src/main/java/keywhiz/KeywhizConfig.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Compare two byte arrays in constant time, so as to protect against timing attacks. (NB:\n * \"Constant time\" means that the method execution time does not depend on the contents of the\n * buffer \u2014\u00a0it's not a comment about the time complexity.  (The method is obviously O(n).)\n *\n * This is interesting because normal comparisons (Arrays.equals(), eg) short-circuit as soon as a\n * difference is found. This leaks information about the underlying data, and so is inappropriate\n * for comparing secrets.  For more information, see:\n *\n * <ul>\n *   <li><a href=\"http://emerose.com/timing-attacks-explained\">this Square Security Awareness\n *     note</a></li>\n *   <li><a href=\"http://codahale.com/a-lesson-in-timing-attacks/\">a discussion of Java 6's\n *     MessageDigest.isEqual()</a></li>\n *   <li><a href=\"http://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf\">a paper on the\n *     practical exploitability of network-based timing attacks</a></li>\n * </ul>\n *\n * @param a first value\n * @param b second value\n * @return true iff a == b\n */\n", "func_signal": "public static boolean secureCompare(final byte[] a, final byte[] b)", "code": "{\n  if (a.length != b.length) {\n    return false;\n  }\n\n  int match = 0;\n  for (int i = 0; i < a.length; i++) {\n    match = match | a[i] ^ b[i];\n  }\n\n  return (match == 0); // true if match\n}", "path": "keywhiz/server/src/main/java/keywhiz/auth/Subtles.java", "commit_date": "2015-03-27 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "// For declaration of these passwords see file server/src/main/java/keywhiz/commands/DbSeedCommand.java\n// DbSeedCommand is invoked via MigrationRule\n// TODO(michael): refactor how we test\n", "func_signal": "@Before\npublic void setUp() throws Exception", "code": "{\n    client = TestClients.mutualSslClient();\n    keywhizClient = TestClients.keywhizClient();\n    generalPassword = new Secret(0, \"General_Password\", null, () -> \"YXNkZGFz\", \"\",\n            ApiDate.parse(\"2011-09-29T15:46:00Z\"), null,\n            ApiDate.parse(\"2011-09-29T15:46:00Z\"), null, null, \"upload\",\n            null, 0, 1L, ApiDate.parse(\"2011-09-29T15:46:00Z\"), null);\n\n    databasePassword = new Secret(1, \"Database_Password\", null, () -> \"MTIzNDU=\", \"\",\n            ApiDate.parse(\"2011-09-29T15:46:00.232Z\"), null,\n            ApiDate.parse(\"2011-09-29T15:46:00.232Z\"), null,\n            null, null, null, 0, 2L,\n            ApiDate.parse(\"2011-09-29T15:46:00.312Z\"), null);\n}", "path": "keywhiz/server/src/test/java/keywhiz/service/resources/BatchSecretDeliveryResourceIntegrationTest.java", "commit_date": "2020-07-09 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * PERMANENTLY REMOVE database records from `secrets_contents` which are associated with the given\n * list of SECRETS IDs.  (Does not affect the `secrets` table.)\n *\n * @param ids IDs in the `secrets` table; `secrets_contents` records linked to these by\n * `secrets_content.secretid` will be PERMANENTLY REMOVED\n * @return the number of records which were removed\n */\n", "func_signal": "public long dangerPermanentlyRemoveRecordsForGivenSecretsIDs(List<Long> ids)", "code": "{\n  return dslContext.deleteFrom(SECRETS_CONTENT)\n      .where(SECRETS_CONTENT.SECRETID.in(ids))\n      .execute();\n}", "path": "keywhiz/server/src/main/java/keywhiz/service/daos/SecretContentDAO.java", "commit_date": "2019-09-06 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Retrieve Group by a specified name, or all Groups if no name given\n *\n * @param user the admin user performing this operation\n * @param name the name of the Group to retrieve, if provided\n * @return the named group, or all groups if no name was given\n *\n * description Returns a single Group or a set of all Groups for this user.\n * Used by Keywhiz CLI and the web ui.\n * responseMessage 200 Found and retrieved Group(s)\n * responseMessage 404 Group with given name not found (if name provided)\n */\n", "func_signal": "@Timed @ExceptionMetered\n@GET\npublic Response findGroups(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "code": "{\n  if (name.isEmpty()) {\n    return Response.ok().entity(listGroups(user)).build();\n  }\n  return Response.ok().entity(getGroupByName(user, name)).build();\n}", "path": "keywhiz/server/src/main/java/keywhiz/service/resources/admin/GroupsResource.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Customizes the database config when requested. If the username for the database is not set, the\n * current user is set as the username.\n *\n * @return DatabaseConfiguration for read/write database.\n */\n", "func_signal": "public DataSourceFactory getDataSourceFactory()", "code": "{\n  if (database.getUser() == null) {\n    database.setUser(USER_NAME.value());\n  }\n  return database;\n}", "path": "keywhiz/server/src/main/java/keywhiz/KeywhizConfig.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Customized ObjectMapper for common settings.\n *\n * @return customized object mapper\n */\n", "func_signal": "private static ObjectMapper customizeObjectMapper()", "code": "{\n  ObjectMapper mapper = new ObjectMapper();\n  mapper.registerModule(new Jdk8Module());\n  mapper.registerModule(new GuavaModule());\n  mapper.registerModule(new GuavaExtrasModule());\n  mapper.registerModule(new FuzzyEnumModule());\n  mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());\n  mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());\n  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n  return mapper;\n}", "path": "keywhiz/testing/src/main/java/keywhiz/testing/JsonHelpers.java", "commit_date": "2018-10-30 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Retrieve listing of client names\n * <p>\n * responseMessage 200 List of client names\n */\n", "func_signal": "@Timed @ExceptionMetered\n@GET\n@Produces(APPLICATION_JSON)\npublic Iterable<String> clientListing(@Auth AutomationClient automationClient)", "code": "{\n  return clientDAOReadOnly.getClients().stream()\n      .map(Client::getName)\n      .collect(toSet());\n}", "path": "keywhiz/server/src/main/java/keywhiz/service/resources/automation/v2/ClientResource.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Create Client\n *\n * @param automationClient the client with automation access performing this operation\n * @param clientRequest the JSON client request used to formulate the Client\n * @return information about the created client on success\n *\n * description Creates a Client with the name from a valid client request\n * responseMessage 200 Successfully created Client\n * responseMessage 409 Client with given name already exists\n */\n", "func_signal": "@Timed @ExceptionMetered\n@POST\n@Consumes(APPLICATION_JSON)\npublic ClientDetailResponse createClient(\n    @Auth AutomationClient automationClient,\n    @Valid CreateClientRequest clientRequest)", "code": "{\n\n  Optional<Client> client = clientDAO.getClientByName(clientRequest.name);\n  if (client.isPresent()) {\n    logger.info(\"Automation ({}) - Client {} already exists\", automationClient.getName(),\n        clientRequest.name);\n    throw new ConflictException(\"Client name already exists.\");\n  }\n\n  long id = clientDAO.createClient(clientRequest.name, automationClient.getName(), \"\", null);\n  client = clientDAO.getClientById(id);\n\n  if (client.isPresent()) {\n    Map<String, String> extraInfo = new HashMap<>();\n    extraInfo.put(\"deprecated\", \"true\");\n    auditLog.recordEvent(\n        new Event(Instant.now(), EventTag.CLIENT_CREATE, automationClient.getName(),\n            client.get().getName(), extraInfo));\n  }\n\n  return ClientDetailResponse.fromClient(client.get(), ImmutableList.of(), ImmutableList.of());\n}", "path": "keywhiz/server/src/main/java/keywhiz/service/resources/automation/AutomationClientResource.java", "commit_date": "2020-06-26 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Retrieve Client by a specified name, or all Clients if no name given\n *\n * @param automationClient the client with automation access performing this operation\n * @param name the name of the Client to retrieve, if provided\n * @return the specified client if found, or all clients if name omitted\n *\n * optionalParams name\n * description Returns a single Client or a set of all Clients\n * responseMessage 200 Found and retrieved Client(s)\n * responseMessage 404 Client with given name not found (if name provided)\n */\n", "func_signal": "@Timed @ExceptionMetered\n@GET\npublic Response findClient(\n    @Auth AutomationClient automationClient,\n    @QueryParam(\"name\") Optional<String> name)", "code": "{\n  logger.info(\"Automation ({}) - Looking up a name {}\", automationClient.getName(), name);\n\n  if (name.isPresent()) {\n    Client client = clientDAO.getClientByName(name.get()).orElseThrow(NotFoundException::new);\n    ImmutableList<Group> groups = ImmutableList.copyOf(aclDAO.getGroupsFor(client));\n    return Response.ok()\n        .entity(ClientDetailResponse.fromClient(client, groups, ImmutableList.of()))\n        .build();\n  }\n\n  List<ClientDetailResponse> clients = clientDAO.getClients().stream()\n      .map(c -> ClientDetailResponse.fromClient(c, ImmutableList.copyOf(aclDAO.getGroupsFor(c)),\n          ImmutableList.of()))\n      .collect(toList());\n  return Response.ok().entity(clients).build();\n}", "path": "keywhiz/server/src/main/java/keywhiz/service/resources/automation/AutomationClientResource.java", "commit_date": "2020-06-26 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Build a matching representation of a secret, but without sensitive content.\n *\n * @param secret secret model to build from\n * @return content of secret model, but without sensitive content\n */\n", "func_signal": "public static SanitizedSecret fromSecret(Secret secret)", "code": "{\n  checkNotNull(secret);\n  return SanitizedSecret.of(\n      secret.getId(),\n      secret.getName(),\n      secret.getDescription(),\n      secret.getChecksum(),\n      secret.getCreatedAt(),\n      secret.getCreatedBy(),\n      secret.getUpdatedAt(),\n      secret.getUpdatedBy(),\n      secret.getMetadata(),\n      secret.getType().orElse(null),\n      secret.getGenerationOptions(),\n      secret.getExpiry(),\n      secret.getVersion().orElse(null),\n      secret.getContentCreatedAt().orElse(null),\n      secret.getContentCreatedBy());\n}", "path": "keywhiz/api/src/main/java/keywhiz/api/model/SanitizedSecret.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Load cookies from the specified file from JSON to a name to value mapping.\n *\n * @param path Location of serialized cookies to load.\n * @return list of cookies that were read\n * @throws IOException\n */\n", "func_signal": "public static List<HttpCookie> loadCookies(Path path) throws IOException", "code": "{\n  TypeReference<List<JsonCookie>> cookiesType = new TypeReference<>() {};\n  try (BufferedReader reader = Files.newBufferedReader(path)) {\n    List<JsonCookie> jsonCookies = mapper.readValue(reader, cookiesType);\n    return jsonCookies.stream()\n        .map(JsonCookie::toHttpCookie)\n        .collect(toList());\n  }\n}", "path": "keywhiz/cli/src/main/java/keywhiz/cli/ClientUtils.java", "commit_date": "2020-07-07 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Create Group\n *\n * @param user the admin user performing this operation\n * @param request the JSON client request used to formulate the Group\n * @return 200 if the group was created, 409 if the name already existed\n *\n * description Creates a Group with the name from a valid group request.\n * Used by Keywhiz CLI and the web ui.\n * responseMessage 200 Successfully created Group\n * responseMessage 400 Group with given name already exists\n */\n", "func_signal": "@Timed @ExceptionMetered\n@POST\n@Consumes(APPLICATION_JSON)\npublic Response createGroup(@Auth User user, @Valid CreateGroupRequestV2 request)", "code": "{\n\n  logger.info(\"User '{}' creating group.\", user);\n  if (groupDAO.getGroup(request.name()).isPresent()) {\n    throw new BadRequestException(\"Group already exists.\");\n  }\n\n  long groupId = groupDAO.createGroup(request.name(), user.getName(),\n      nullToEmpty(request.description()), request.metadata());\n  URI uri = UriBuilder.fromResource(GroupsResource.class).build(groupId);\n  Response response = Response\n      .created(uri)\n      .entity(groupDetailResponseFromId(groupId))\n      .build();\n\n  if (response.getStatus() == HttpStatus.SC_CREATED) {\n    Map<String, String> extraInfo = new HashMap<>();\n    if (request.description() != null) {\n      extraInfo.put(\"description\", request.description());\n    }\n    if (request.metadata() != null) {\n      extraInfo.put(\"metadata\", request.metadata().toString());\n    }\n    auditLog.recordEvent(new Event(Instant.now(), EventTag.GROUP_CREATE, user.getName(), request.name(), extraInfo));\n  }\n  return response;\n}", "path": "keywhiz/server/src/main/java/keywhiz/service/resources/admin/GroupsResource.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Serialize the cookies to JSON from the given CookieManager to a file at the specified path.\n * Output file will have 660 permissions (owner-read, owner-write).\n *\n * @param cookieManager CookieManager that contains cookies to be serialized.\n * @param path Location to serialize cookies to file.\n */\n", "func_signal": "@VisibleForTesting\npublic static void saveCookies(CookieManager cookieManager, Path path)", "code": "{\n  List<HttpCookie> cookies = cookieManager.getCookieStore().getCookies();\n  List<JsonCookie> jsonCookies = cookies.stream()\n      .map(JsonCookie::fromHttpCookie)\n      .collect(toList());\n\n  try (BufferedWriter writer = Files.newBufferedWriter(path, CREATE)) {\n    Files.setPosixFilePermissions(path, ImmutableSet.of(OWNER_READ, OWNER_WRITE));\n    writer.write(mapper.writeValueAsString(jsonCookies));\n  } catch (IOException e) {\n    throw Throwables.propagate(e);\n  }\n}", "path": "keywhiz/cli/src/main/java/keywhiz/cli/ClientUtils.java", "commit_date": "2020-07-07 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Creates a client and assigns to given groups\n *\n * @param request JSON request to create a client\n * @return 200 if the client is created successfully, 409 if it already exists\n * <p>\n * responseMessage 201 Created client and assigned to given groups\n * <p>\n * responseMessage 409 Client already exists\n */\n", "func_signal": "@Timed @ExceptionMetered\n@POST\n@Consumes(APPLICATION_JSON)\npublic Response createClient(@Auth AutomationClient automationClient,\n    @Valid CreateClientRequestV2 request)", "code": "{\n  String creator = automationClient.getName();\n  String client = request.name();\n\n  clientDAOReadWrite.getClientByName(client).ifPresent((c) -> {\n    logger.info(\"Automation ({}) - Client {} already exists\", creator, client);\n    throw new ConflictException(\"Client name already exists.\");\n  });\n\n  // Creates new client record\n  long clientId;\n  try {\n    clientId = clientDAOReadWrite.createClient(client, creator, request.description(),\n        new URI(request.spiffeId()));\n  } catch (URISyntaxException e) {\n    logger.info(format(\"Automation (%s) - Client %s could not be created because of invalid SPIFFE ID %s\",\n        creator, client, request.spiffeId()), e);\n    throw new BadRequestException(\"Invalid SPIFFE ID provided (not a URI)\");\n  }\n  auditLog.recordEvent(new Event(Instant.now(), EventTag.CLIENT_CREATE, creator, client));\n\n  // Enrolls client in any requested groups\n  groupsToGroupIds(request.groups())\n      .forEach((maybeGroupId) -> maybeGroupId.ifPresent(\n          (groupId) -> aclDAOReadWrite.findAndEnrollClient(clientId, groupId, auditLog, creator,\n              new HashMap<>())));\n\n  URI uri = UriBuilder.fromResource(ClientResource.class).path(client).build();\n  return Response.created(uri).build();\n}", "path": "keywhiz/server/src/main/java/keywhiz/service/resources/automation/v2/ClientResource.java", "commit_date": "2020-06-30 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Creates a {@link OkHttpClient} to start a TLS connection.\n *\n * @param devTrustStore if not null, uses the provided TrustStore instead of whatever is\n *                      configured in the JVM. This is a convenient way to allow developers to\n *                      start playing with Keywhiz right away. This option should not be used in\n *                      production systems.\n * @param cookies list of cookies to include in the client.\n * @return new http client.\n */\n", "func_signal": "public static OkHttpClient sslOkHttpClient(@Nullable KeyStore devTrustStore,\n    List<HttpCookie> cookies)", "code": "{\n  checkNotNull(cookies);\n\n  SSLContext sslContext;\n  X509TrustManager trustManager;\n  try {\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory\n        .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n\n    trustManagerFactory.init(devTrustStore);\n\n    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n    trustManager = (X509TrustManager) trustManagers[0];\n\n    sslContext = SSLContext.getInstance(\"TLSv1.2\");\n    sslContext.init(new KeyManager[0], trustManagers, new SecureRandom());\n  } catch (NoSuchAlgorithmException | KeyManagementException | KeyStoreException e) {\n    throw Throwables.propagate(e);\n  }\n\n  SSLSocketFactory socketFactory = sslContext.getSocketFactory();\n\n  OkHttpClient.Builder client = new OkHttpClient().newBuilder()\n      .sslSocketFactory(socketFactory, trustManager)\n      .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS))\n      .followSslRedirects(false);\n\n  client.retryOnConnectionFailure(false);\n\n  cookies.forEach(c -> getCookieManager().getCookieStore().add(null, c));\n  client.cookieJar(new JavaNetCookieJar(getCookieManager()));\n  return client.build();\n}", "path": "keywhiz/cli/src/main/java/keywhiz/cli/ClientUtils.java", "commit_date": "2020-07-07 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * Customizes the database config when requested. If the username for the database is not set, the\n * current user is set as the username.\n *\n * @return DatabaseConfiguration for readonly database.\n */\n", "func_signal": "public DataSourceFactory getReadonlyDataSourceFactory()", "code": "{\n  if (readonlyDatabase.getUser() == null) {\n    readonlyDatabase.setUser(USER_NAME.value());\n  }\n  return readonlyDatabase;\n}", "path": "keywhiz/server/src/main/java/keywhiz/KeywhizConfig.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "square/keywhiz", "stars": 2613, "license": "apache-2.0", "language": "java", "size": 5957}
{"docstring": "/**\n * <code>bool is_active = 2;</code>\n * @param value The isActive to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setIsActive(boolean value)", "code": "{\n  \n  isActive_ = value;\n  onChanged();\n  return this;\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * @see https://github.com/confluentinc/schema-registry/issues/405\n */\n", "func_signal": "public void testNestedUnion()", "code": "{\n    // Cannot use AllowNull to generate schema\n    // because Avro 1.7.7 will throw org.apache.avro.AvroRuntimeException: Nested union\n    // Schema myAvroObjectSchema = AllowNull.get().getSchema(MyObjectToPersist.class);\n\n    // Here is a schema generated by Avro 1.8.1\n    Schema myAvroObjectSchema = new Parser().parse(\n       \"{\"\n       + \"  \\\"type\\\" : \\\"record\\\",\"\n       + \"  \\\"name\\\" : \\\"MyObjectToPersist\\\",\"\n       + \"  \\\"namespace\\\" : \\\"io.confluent.connect.avro.AdditionalAvroDataTest\\\",\"\n       + \"  \\\"fields\\\" : [ {\"\n       + \"    \\\"name\\\" : \\\"obj\\\",\"\n       + \"    \\\"type\\\" : [ \\\"null\\\", {\"\n       + \"      \\\"type\\\" : \\\"record\\\",\"\n       + \"      \\\"name\\\" : \\\"MyImpl1\\\",\"\n       + \"      \\\"fields\\\" : [ {\"\n       + \"        \\\"name\\\" : \\\"data\\\",\"\n       + \"        \\\"type\\\" : [ \\\"null\\\", \\\"string\\\" ],\"\n       + \"        \\\"default\\\" : null\"\n       + \"      } ]\"\n       + \"    }, {\"\n       + \"      \\\"type\\\" : \\\"record\\\",\"\n       + \"      \\\"name\\\" : \\\"MyImpl2\\\",\"\n       + \"      \\\"fields\\\" : [ {\"\n       + \"        \\\"name\\\" : \\\"data\\\",\"\n       + \"        \\\"type\\\" : [ \\\"null\\\", \\\"string\\\" ],\"\n       + \"        \\\"default\\\" : null\"\n       + \"      } ]\"\n       + \"    } ],\"\n       + \"    \\\"default\\\" : null\"\n       + \"  } ]\"\n       + \"}\");\n    Schema myImpl1Schema = ReflectData.AllowNull.get().getSchema(MyImpl1.class);\n    GenericData.Record nestedRecord = new GenericRecordBuilder(myImpl1Schema).set(\"data\", \"mydata\").build();\n    GenericData.Record obj = new GenericRecordBuilder(myAvroObjectSchema).set(\"obj\", nestedRecord).build();\n\n    org.apache.kafka.connect.data.Schema connectSchema = avroData.toConnectSchema(myAvroObjectSchema);\n    SchemaAndValue schemaAndValue = avroData.toConnectData(myAvroObjectSchema, obj);\n    Object o = avroData.fromConnectData(schemaAndValue.schema(), schemaAndValue.value());\n    Assert.assertEquals(obj ,o);\n    avroData.fromConnectSchema(connectSchema);\n}", "path": "schema-registry/avro-data/src/test/java/io/confluent/connect/avro/AdditionalAvroDataTest.java", "commit_date": "2020-09-24 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * <code>string ref_id = 1;</code>\n * @param value The bytes for refId to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setRefIdBytes(\n    com.google.protobuf.ByteString value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  \n  refId_ = value;\n  onChanged();\n  return this;\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * <code>bool is_active = 2;</code>\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder clearIsActive()", "code": "{\n  \n  isActive_ = false;\n  onChanged();\n  return this;\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * For testing purposes only.\n */\n", "func_signal": "public KafkaProtobufSerde(final SchemaRegistryClient client)", "code": "{\n  if (client == null) {\n    throw new IllegalArgumentException(\"schema registry client must not be null\");\n  }\n  inner = Serdes.serdeFrom(new KafkaProtobufSerializer<>(client),\n      new KafkaProtobufDeserializer<>(client));\n}", "path": "schema-registry/protobuf-serde/src/main/java/io/confluent/kafka/streams/serdes/protobuf/KafkaProtobufSerde.java", "commit_date": "2020-01-24 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Enables the use of Specific Avro.\n *\n * @param config the serializer/deserializer/serde configuration\n * @return a copy of the configuration where the use of specific Avro is enabled\n */\n", "func_signal": "public static Map<String, Object> withSpecificAvroEnabled(final Map<String, ?> config)", "code": "{\n  Map<String, Object> specificAvroEnabledConfig =\n      config == null ? new HashMap<String, Object>() : new HashMap<>(config);\n  specificAvroEnabledConfig.put(KafkaAvroDeserializerConfig.SPECIFIC_AVRO_READER_CONFIG, true);\n  return specificAvroEnabledConfig;\n}", "path": "schema-registry/avro-serde/src/main/java/io/confluent/kafka/streams/serdes/avro/ConfigurationUtils.java", "commit_date": "2019-09-16 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Helper method which checks the number of versions registered under the given subject.\n */\n", "func_signal": "public static void checkNumberOfVersions(RestService restService, int expected, String subject)\n    throws IOException, RestClientException", "code": "{\n  List<Integer> versions = restService.getAllVersions(subject);\n  assertEquals(\"Expected \" + expected + \" registered versions under subject \" + subject +\n               \", but found \" + versions.size(),\n               expected, versions.size());\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/schemaregistry/utils/TestUtils.java", "commit_date": "2020-06-12 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Register a new schema and verify that it can be found on the expected version.\n */\n", "func_signal": "public static void registerAndVerifySchema(RestService restService, String schemaString,\n                                           int expectedId, String subject)\n    throws IOException, RestClientException", "code": "{\n  int registeredId = restService.registerSchema(schemaString, subject);\n  assertEquals(\"Registering a new schema should succeed\", expectedId, registeredId);\n\n  // the newly registered schema should be immediately readable on the leader\n  assertEquals(\"Registered schema should be found\",\n          schemaString,\n          restService.getId(expectedId).getSchemaString());\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/schemaregistry/utils/TestUtils.java", "commit_date": "2020-06-12 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * <code>string ref_id = 1;</code>\n * @return The bytes for refId.\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getRefIdBytes()", "code": "{\n  java.lang.Object ref = refId_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    refId_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * <code>string ref_id = 1;</code>\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder clearRefId()", "code": "{\n  \n  refId_ = getDefaultInstance().getRefId();\n  onChanged();\n  return this;\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * <code>string ref_id = 1;</code>\n * @return The bytes for refId.\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getRefIdBytes()", "code": "{\n  java.lang.Object ref = refId_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    refId_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Enables the use of Avro Reflection.\n *\n * @param config the serializer/deserializer/serde configuration\n * @return a copy of the configuration where the use of Avro Reflection is enabled\n */\n", "func_signal": "public static Map<String, Object> withReflectionAvroEnabled(final Map<String, ?> config)", "code": "{\n  Map<String, Object> reflectionAvroEnabledConfig =\n          config == null ? new HashMap<String, Object>() : new HashMap<>(config);\n  reflectionAvroEnabledConfig.put(KafkaAvroDeserializerConfig.SCHEMA_REFLECTION_CONFIG, true);\n  return reflectionAvroEnabledConfig;\n}", "path": "schema-registry/avro-serde/src/main/java/io/confluent/kafka/streams/serdes/avro/ConfigurationUtils.java", "commit_date": "2019-09-16 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * <code>string ref_id = 1;</code>\n * @return The refId.\n */\n", "func_signal": "public java.lang.String getRefId()", "code": "{\n  java.lang.Object ref = refId_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String) ref;\n  } else {\n    com.google.protobuf.ByteString bs = \n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    refId_ = s;\n    return s;\n  }\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Create a temporary directory\n */\n", "func_signal": "public static File tempDir(String namePrefix)", "code": "{\n  final File f = new File(IoTmpDir, namePrefix + \"-\" + random.nextInt(1000000));\n  f.mkdirs();\n  f.deleteOnExit();\n\n  Runtime.getRuntime().addShutdownHook(new Thread() {\n    @Override\n    public void run() {\n      rm(f);\n    }\n  });\n  return f;\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/schemaregistry/utils/TestUtils.java", "commit_date": "2020-06-12 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Wait until a callable returns true or the timeout is reached.\n */\n", "func_signal": "public static void waitUntilTrue(Callable<Boolean> callable, long timeoutMs, String errorMsg)", "code": "{\n  try {\n    long startTime = System.currentTimeMillis();\n    Boolean state = false;\n    do {\n      state = callable.call();\n      if (System.currentTimeMillis() > startTime + timeoutMs) {\n        fail(errorMsg);\n      }\n      Thread.sleep(50);\n    } while (!state);\n  } catch (Exception e) {\n    fail(\"Unexpected exception: \" + e);\n  }\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/schemaregistry/utils/TestUtils.java", "commit_date": "2020-06-12 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "// TODO currently don't have a way to store extra metadata such as version\n", "func_signal": "public void testVersionMaintained()", "code": "{\n   // Version info provided from the Copycat schema should be maintained. This should be true\n   // regardless of any underlying schema registry versioning since the versions are explicitly\n   // specified by the connector.\n\n   // Use newer schema first\n   Schema newerSchema = SchemaBuilder.struct()\n       .version(2)\n       .field(\"orig\", Schema.OPTIONAL_INT16_SCHEMA)\n       .field(\"new\", Schema.OPTIONAL_INT16_SCHEMA)\n       .build();\n   SchemaAndValue newer = new SchemaAndValue(newerSchema, new Struct(newerSchema));\n   byte[] newerSerialized = converter.fromConnectData(TOPIC, newer.schema(), newer.value());\n\n   Schema olderSchema = SchemaBuilder.struct()\n       .version(1)\n       .field(\"orig\", Schema.OPTIONAL_INT16_SCHEMA)\n       .build();\n   SchemaAndValue older = new SchemaAndValue(olderSchema, new Struct(olderSchema));\n   byte[] olderSerialized = converter.fromConnectData(TOPIC, older.schema(), older.value());\n\n   assertEquals(2L, (long) converter.toConnectData(TOPIC, newerSerialized).schema().version());\n   assertEquals(1L, (long) converter.toConnectData(TOPIC, olderSerialized).schema().version());\n }", "path": "schema-registry/protobuf-converter/src/test/java/io/confluent/connect/protobuf/ProtobufConverterTest.java", "commit_date": "2020-08-20 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Initialize the coordination manager.\n */\n", "func_signal": "public SchemaRegistryCoordinator(\n        LogContext logContext,\n        ConsumerNetworkClient client,\n        String groupId,\n        int rebalanceTimeoutMs,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        SchemaRegistryIdentity identity,\n        SchemaRegistryRebalanceListener listener,\n        SchemaRegistryMetric nodeCountMetric)", "code": "{\n  super(\n      new GroupRebalanceConfig(\n          sessionTimeoutMs,\n          rebalanceTimeoutMs,\n          heartbeatIntervalMs,\n          groupId,\n          Optional.empty(),\n          retryBackoffMs,\n          true\n      ),\n      logContext,\n      client,\n      metrics,\n      metricGrpPrefix,\n      time\n  );\n  this.identity = identity;\n  this.assignmentSnapshot = null;\n  this.listener = listener;\n  this.nodeCountMetric = nodeCountMetric;\n}", "path": "schema-registry/core/src/main/java/io/confluent/kafka/schemaregistry/leaderelector/kafka/SchemaRegistryCoordinator.java", "commit_date": "2020-06-12 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * <code>string ref_id = 1;</code>\n * @param value The refId to set.\n * @return This builder for chaining.\n */\n", "func_signal": "public Builder setRefId(\n    java.lang.String value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  \n  refId_ = value;\n  onChanged();\n  return this;\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/serializers/protobuf/test/Ref.java", "commit_date": "2020-04-27 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Use a strategy that validates that a schema can be read by existing\n * schema(s) according to the JSON default schema resolution.\n */\n", "func_signal": "public SchemaValidatorBuilder canBeReadStrategy()", "code": "{\n  this.strategy = (toValidate, existing) -> existing.isBackwardCompatible(toValidate);\n  return this;\n}", "path": "schema-registry/client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidatorBuilder.java", "commit_date": "2020-09-09 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
{"docstring": "/**\n * Recursively deleteSchemaVersion the given file/directory and any subfiles (if any exist)\n *\n * @param file The root file at which to begin deleting\n */\n", "func_signal": "public static void rm(File file)", "code": "{\n  if (file == null) {\n    return;\n  } else if (file.isDirectory()) {\n    File[] files = file.listFiles();\n    if (files != null) {\n      for (File f : files) {\n        rm(f);\n      }\n    }\n  } else {\n    file.delete();\n  }\n}", "path": "schema-registry/core/src/test/java/io/confluent/kafka/schemaregistry/utils/TestUtils.java", "commit_date": "2020-06-12 00:00:00", "repo_name": "confluentinc/schema-registry", "stars": 2112, "license": "other", "language": "java", "size": 107867}
