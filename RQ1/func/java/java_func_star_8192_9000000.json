{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n  Options opt = new OptionsBuilder()\n    .include(\".*\" + ProtoCodecBenchmarks.class.getSimpleName())\n    .addProfiler(\"gc\")\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/codec/ProtoCodecBenchmarks.java", "commit_date": "2020-07-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/**\n * Before calling this, call {@link CollectorMetrics#incrementMessages()}, and {@link\n * CollectorMetrics#incrementBytes(int)}. Do not call any other metrics callbacks as those are\n * handled internal to this method.\n *\n * @param serialized not empty message\n */\n", "func_signal": "public void acceptSpans(byte[] serialized, Callback<Void> callback)", "code": "{\n  BytesDecoder<Span> decoder;\n  try {\n    decoder = SpanBytesDecoderDetector.decoderForListMessage(serialized);\n  } catch (RuntimeException | Error e) {\n    handleDecodeError(e, callback);\n    return;\n  }\n  acceptSpans(serialized, decoder, callback);\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .include(\".*\" + WriteBufferBenchmarks.class.getSimpleName() + \".*\")\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/internal/WriteBufferBenchmarks.java", "commit_date": "2019-06-13 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/** Sets {@link {@link CollectorComponent.Builder#metrics(CollectorMetrics)}} */\n", "func_signal": "public Builder metrics(CollectorMetrics metrics)", "code": "{\n  if (metrics == null) throw new NullPointerException(\"metrics == null\");\n  this.metrics = metrics;\n  return this;\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .addProfiler(\"gc\")\n    .include(\".*\" + EndpointBenchmarks.class.getSimpleName())\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/EndpointBenchmarks.java", "commit_date": "2019-06-13 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .include(\".*\" + CodecBenchmarks.class.getSimpleName() +\".*read.*Span_.*\")\n    .addProfiler(\"gc\")\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/codec/CodecBenchmarks.java", "commit_date": "2020-07-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/**\n * Calls to get the storage component could be blocking. This ensures requests that block\n * callers (such as http or gRPC) do not add additional load during such events.\n *\n * @param executor the executor used to enqueue the storage request.\n */\n", "func_signal": "public void accept(List<Span> spans, Callback<Void> callback, Executor executor)", "code": "{\n  if (spans.isEmpty()) {\n    callback.onSuccess(null);\n    return;\n  }\n  metrics.incrementSpans(spans.size());\n\n  List<Span> sampledSpans = sample(spans);\n  if (sampledSpans.isEmpty()) {\n    callback.onSuccess(null);\n    return;\n  }\n\n  // In order to ensure callers are not blocked, we swap callbacks when we get to the storage\n  // phase of this process. Here, we create a callback whose sole purpose is classifying later\n  // errors on this bundle of spans in the same log category. This allows people to only turn on\n  // debug logging in one place.\n  try {\n    executor.execute(new StoreSpans(sampledSpans));\n    callback.onSuccess(null);\n  } catch (Throwable unexpected) { // ensure if a future is supplied we always set value or error\n    callback.onError(unexpected);\n    throw unexpected;\n  }\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/** Count of concurrent message listeners on the queue. Defaults to 1 */\n", "func_signal": "public Builder concurrency(int concurrency)", "code": "{\n  if (concurrency < 1) throw new IllegalArgumentException(\"concurrency < 1\");\n  this.concurrency = concurrency;\n  return this;\n}", "path": "zipkin/zipkin-collector/activemq/src/main/java/zipkin2/collector/activemq/ActiveMQCollector.java", "commit_date": "2019-09-18 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/** Sets {@link {@link CollectorComponent.Builder#storage(StorageComponent)}} */\n", "func_signal": "public Builder storage(StorageComponent storage)", "code": "{\n  if (storage == null) throw new NullPointerException(\"storage == null\");\n  this.storage = storage;\n  return this;\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/** Like {@link #acceptSpans(byte[], BytesDecoder, Callback)}, except using a byte buffer. */\n", "func_signal": "public void acceptSpans(ByteBuffer encoded, SpanBytesDecoder decoder, Callback<Void> callback,\n  Executor executor)", "code": "{\n  List<Span> spans;\n  try {\n    spans = decoder.decodeList(encoded);\n  } catch (RuntimeException | Error e) {\n    handleDecodeError(e, callback);\n    return;\n  }\n  accept(spans, callback, executor);\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .addProfiler(\"gc\")\n    .include(\".*\" + BulkRequestBenchmarks.class.getSimpleName() + \".*\")\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/elasticsearch/internal/BulkRequestBenchmarks.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/** Queue zipkin spans will be consumed from. Defaults to \"zipkin\". */\n", "func_signal": "public Builder queue(String queue)", "code": "{\n  if (queue == null) throw new NullPointerException(\"queue == null\");\n  this.queue = queue;\n  return this;\n}", "path": "zipkin/zipkin-collector/activemq/src/main/java/zipkin2/collector/activemq/ActiveMQCollector.java", "commit_date": "2019-09-18 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/**\n * Before calling this, call {@link CollectorMetrics#incrementMessages()}, and {@link\n * CollectorMetrics#incrementBytes(int)}. Do not call any other metrics callbacks as those are\n * handled internal to this method.\n *\n * @param serializedSpans not empty message\n */\n", "func_signal": "public void acceptSpans(\n  byte[] serializedSpans, BytesDecoder<Span> decoder, Callback<Void> callback)", "code": "{\n  List<Span> spans;\n  try {\n    spans = decodeList(decoder, serializedSpans);\n  } catch (RuntimeException | Error e) {\n    handleDecodeError(e, callback);\n    return;\n  }\n  accept(spans, callback);\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/** Needed to scope this to the correct logging category */\n", "func_signal": "public static Builder newBuilder(Class<?> loggingClass)", "code": "{\n  if (loggingClass == null) throw new NullPointerException(\"loggingClass == null\");\n  return new Builder(LoggerFactory.getLogger(loggingClass.getName()));\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .include(\".*\" + ReadBufferBenchmarks.class.getSimpleName() + \".*\")\n    .addProfiler(\"gc\")\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/internal/ReadBufferBenchmarks.java", "commit_date": "2019-06-13 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .include(\".*\" + SpanBenchmarks.class.getSimpleName() + \".*\")\n    .addProfiler(\"gc\")\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/SpanBenchmarks.java", "commit_date": "2019-06-13 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .addProfiler(\"gc\")\n    .include(\".*\" + DelayLimiterBenchmarks.class.getSimpleName() + \".*\")\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/internal/DelayLimiterBenchmarks.java", "commit_date": "2020-07-05 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// https://github.com/square/wire/issues/958\n", "func_signal": "private static String readHexString(ProtoReader input) throws IOException", "code": "{\n  ByteString bytes = input.readBytes();\n  int length = bytes.size() * 2;\n\n  // All our hex fields are at most 32 characters.\n  if (length > 32) {\n    throw new AssertionError(\"hex field greater than 32 chars long: \" + length);\n  }\n\n  char[] result = RecyclableBuffers.shortStringBuffer();\n\n  for (int i = 0; i < bytes.size(); i ++) {\n    byte b = bytes.getByte(i);\n    result[2 * i] = HEX_DIGITS[(b >> 4) & 0xf];\n    result[2 * i + 1] = HEX_DIGITS[b & 0xf];\n  }\n\n  return new String(result, 0, length);\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/codec/WireSpanDecoder.java", "commit_date": "2020-09-29 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "/** Sets {@link {@link CollectorComponent.Builder#sampler(CollectorSampler)}} */\n", "func_signal": "public Builder sampler(CollectorSampler sampler)", "code": "{\n  if (sampler == null) throw new NullPointerException(\"sampler == null\");\n  this.sampler = sampler;\n  return this;\n}", "path": "zipkin/zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java", "commit_date": "2020-06-04 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// Convenience main entry-point\n", "func_signal": "public static void main(String[] args) throws RunnerException", "code": "{\n  Options opt = new OptionsBuilder()\n    .addProfiler(\"gc\")\n    .include(\".*\" + ThrottledCallBenchmarks.class.getSimpleName())\n    .build();\n\n  new Runner(opt).run();\n}", "path": "zipkin/benchmarks/src/main/java/zipkin2/server/internal/throttle/ThrottledCallBenchmarks.java", "commit_date": "2019-08-09 00:00:00", "repo_name": "openzipkin/zipkin", "stars": 16627, "license": "apache-2.0", "language": "java", "size": 73817}
{"docstring": "// TODO: dispose of this once collection is encapsulated.\n", "func_signal": "@Override\nprotected Collection<E> resetContainer(Collection<E> newContents)", "code": "{\n  collection = super.resetContainer(newContents);\n  return collection;\n}", "path": "guava/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package. Replace with a simple call\n * to Unsafe.getUnsafe when integrating into a jdk.\n *\n * @return a sun.misc.Unsafe\n */\n", "func_signal": "private static sun.misc.Unsafe getUnsafe()", "code": "{\n  try {\n    return sun.misc.Unsafe.getUnsafe();\n  } catch (SecurityException tryReflectionInstead) {\n  }\n  try {\n    return java.security.AccessController.doPrivileged(\n        new java.security.PrivilegedExceptionAction<sun.misc.Unsafe>() {\n          @Override\n          public sun.misc.Unsafe run() throws Exception {\n            Class<sun.misc.Unsafe> k = sun.misc.Unsafe.class;\n            for (java.lang.reflect.Field f : k.getDeclaredFields()) {\n              f.setAccessible(true);\n              Object x = f.get(null);\n              if (k.isInstance(x)) return k.cast(x);\n            }\n            throw new NoSuchFieldError(\"the Unsafe\");\n          }\n        });\n  } catch (java.security.PrivilegedActionException e) {\n    throw new RuntimeException(\"Could not initialize intrinsics\", e.getCause());\n  }\n}", "path": "guava/android/guava/src/com/google/common/cache/Striped64.java", "commit_date": "2019-02-26 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA}\n * and {@code streamB}. If one stream is longer than the other, the extra elements are silently\n * ignored. Elements passed to the consumer are guaranteed to come from the same position in their\n * respective source streams. For example:\n *\n * <pre>{@code\n * Streams.forEachPair(\n *   Stream.of(\"foo1\", \"foo2\", \"foo3\"),\n *   Stream.of(\"bar1\", \"bar2\"),\n *   (arg1, arg2) -> System.out.println(arg1 + \":\" + arg2)\n * }</pre>\n *\n * <p>will print:\n *\n * <pre>{@code\n * foo1:bar1\n * foo2:bar2\n * }</pre>\n *\n * <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence\n * between elements will be made, but the order in which those pairs of elements are passed to the\n * consumer is <i>not</i> defined.\n *\n * <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}.\n * This method behaves equivalently to {@linkplain #zip zipping} the stream elements into\n * temporary pair objects and then using {@link Stream#forEach} on that stream.\n *\n * @since 22.0\n */\n", "func_signal": "@Beta\npublic static <A, B> void forEachPair(\n    Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A, ? super B> consumer)", "code": "{\n  checkNotNull(consumer);\n\n  if (streamA.isParallel() || streamB.isParallel()) {\n    zip(streamA, streamB, TemporaryPair::new).forEach(pair -> consumer.accept(pair.a, pair.b));\n  } else {\n    Iterator<A> iterA = streamA.iterator();\n    Iterator<B> iterB = streamB.iterator();\n    while (iterA.hasNext() && iterB.hasNext()) {\n      consumer.accept(iterA.next(), iterB.next());\n    }\n  }\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a stream consisting of the results of applying the given function to the elements of\n * {@code stream} and their indices in the stream. For example,\n *\n * <pre>{@code\n * mapWithIndex(\n *     Stream.of(\"a\", \"b\", \"c\"),\n *     (str, index) -> str + \":\" + index)\n * }</pre>\n *\n * <p>would return {@code Stream.of(\"a:0\", \"b:1\", \"c:2\")}.\n *\n * <p>The resulting stream is <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n * comes from a data structure supporting efficient indexed random access, typically an array or\n * list.\n *\n * <p>The order of the resulting stream is defined if and only if the order of the original stream\n * was defined.\n */\n", "func_signal": "@Beta\npublic static <T, R> Stream<R> mapWithIndex(\n    Stream<T> stream, FunctionWithIndex<? super T, ? extends R> function)", "code": "{\n  checkNotNull(stream);\n  checkNotNull(function);\n  boolean isParallel = stream.isParallel();\n  Spliterator<T> fromSpliterator = stream.spliterator();\n\n  if (!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n    Iterator<T> fromIterator = Spliterators.iterator(fromSpliterator);\n    return StreamSupport.stream(\n            new AbstractSpliterator<R>(\n                fromSpliterator.estimateSize(),\n                fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n              long index = 0;\n\n              @Override\n              public boolean tryAdvance(Consumer<? super R> action) {\n                if (fromIterator.hasNext()) {\n                  action.accept(function.apply(fromIterator.next(), index++));\n                  return true;\n                }\n                return false;\n              }\n            },\n            isParallel)\n        .onClose(stream::close);\n  }\n  class Splitr extends MapWithIndexSpliterator<Spliterator<T>, R, Splitr> implements Consumer<T> {\n    @Nullable T holder;\n\n    Splitr(Spliterator<T> splitr, long index) {\n      super(splitr, index);\n    }\n\n    @Override\n    public void accept(@Nullable T t) {\n      this.holder = t;\n    }\n\n    @Override\n    public boolean tryAdvance(Consumer<? super R> action) {\n      if (fromSpliterator.tryAdvance(this)) {\n        try {\n          action.accept(function.apply(holder, index++));\n          return true;\n        } finally {\n          holder = null;\n        }\n      }\n      return false;\n    }\n\n    @Override\n    Splitr createSplit(Spliterator<T> from, long i) {\n      return new Splitr(from, i);\n    }\n  }\n  return StreamSupport.stream(new Splitr(fromSpliterator, 0), isParallel).onClose(stream::close);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/** @return an array of the proper size with {@code null} inserted into the middle element. */\n", "func_signal": "protected E[] createArrayWithNullElement()", "code": "{\n  E[] array = createSamplesArray();\n  array[getNullLocation()] = null;\n  return array;\n}", "path": "guava/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Equivalent to {@link #expectMissing(Object[]) expectMissing}{@code (null)} except that the call\n * to {@code contains(null)} is permitted to throw a {@code NullPointerException}.\n *\n * @param message message to use upon assertion failure\n */\n", "func_signal": "protected void expectNullMissingWhenNullUnsupported(String message)", "code": "{\n  try {\n    assertFalse(message, actualContents().contains(null));\n  } catch (NullPointerException tolerated) {\n    // Tolerated\n  }\n}", "path": "guava/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java", "commit_date": "2018-01-09 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a stream consisting of the results of applying the given function to the elements of\n * {@code stream} and their indexes in the stream. For example,\n *\n * <pre>{@code\n * mapWithIndex(\n *     DoubleStream.of(0, 1, 2),\n *     (x, index) -> x + \":\" + index)\n * }</pre>\n *\n * <p>...would return {@code Stream.of(\"0.0:0\", \"1.0:1\", \"2.0:2\")}.\n *\n * <p>The resulting stream is <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n * comes from a data structure supporting efficient indexed random access, typically an array or\n * list.\n *\n * <p>The order of the resulting stream is defined if and only if the order of the original stream\n * was defined.\n */\n", "func_signal": "@Beta\npublic static <R> Stream<R> mapWithIndex(\n    DoubleStream stream, DoubleFunctionWithIndex<R> function)", "code": "{\n  checkNotNull(stream);\n  checkNotNull(function);\n  boolean isParallel = stream.isParallel();\n  Spliterator.OfDouble fromSpliterator = stream.spliterator();\n\n  if (!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n    PrimitiveIterator.OfDouble fromIterator = Spliterators.iterator(fromSpliterator);\n    return StreamSupport.stream(\n            new AbstractSpliterator<R>(\n                fromSpliterator.estimateSize(),\n                fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n              long index = 0;\n\n              @Override\n              public boolean tryAdvance(Consumer<? super R> action) {\n                if (fromIterator.hasNext()) {\n                  action.accept(function.apply(fromIterator.nextDouble(), index++));\n                  return true;\n                }\n                return false;\n              }\n            },\n            isParallel)\n        .onClose(stream::close);\n  }\n  class Splitr extends MapWithIndexSpliterator<Spliterator.OfDouble, R, Splitr>\n      implements DoubleConsumer, Spliterator<R> {\n    double holder;\n\n    Splitr(Spliterator.OfDouble splitr, long index) {\n      super(splitr, index);\n    }\n\n    @Override\n    public void accept(double t) {\n      this.holder = t;\n    }\n\n    @Override\n    public boolean tryAdvance(Consumer<? super R> action) {\n      if (fromSpliterator.tryAdvance(this)) {\n        action.accept(function.apply(holder, index++));\n        return true;\n      }\n      return false;\n    }\n\n    @Override\n    Splitr createSplit(Spliterator.OfDouble from, long i) {\n      return new Splitr(from, i);\n    }\n  }\n  return StreamSupport.stream(new Splitr(fromSpliterator, 0), isParallel).onClose(stream::close);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a stream consisting of the results of applying the given function to the elements of\n * {@code stream} and their indexes in the stream. For example,\n *\n * <pre>{@code\n * mapWithIndex(\n *     LongStream.of(0, 1, 2),\n *     (i, index) -> i + \":\" + index)\n * }</pre>\n *\n * <p>...would return {@code Stream.of(\"0:0\", \"1:1\", \"2:2\")}.\n *\n * <p>The resulting stream is <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n * comes from a data structure supporting efficient indexed random access, typically an array or\n * list.\n *\n * <p>The order of the resulting stream is defined if and only if the order of the original stream\n * was defined.\n */\n", "func_signal": "@Beta\npublic static <R> Stream<R> mapWithIndex(LongStream stream, LongFunctionWithIndex<R> function)", "code": "{\n  checkNotNull(stream);\n  checkNotNull(function);\n  boolean isParallel = stream.isParallel();\n  Spliterator.OfLong fromSpliterator = stream.spliterator();\n\n  if (!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n    PrimitiveIterator.OfLong fromIterator = Spliterators.iterator(fromSpliterator);\n    return StreamSupport.stream(\n            new AbstractSpliterator<R>(\n                fromSpliterator.estimateSize(),\n                fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n              long index = 0;\n\n              @Override\n              public boolean tryAdvance(Consumer<? super R> action) {\n                if (fromIterator.hasNext()) {\n                  action.accept(function.apply(fromIterator.nextLong(), index++));\n                  return true;\n                }\n                return false;\n              }\n            },\n            isParallel)\n        .onClose(stream::close);\n  }\n  class Splitr extends MapWithIndexSpliterator<Spliterator.OfLong, R, Splitr>\n      implements LongConsumer, Spliterator<R> {\n    long holder;\n\n    Splitr(Spliterator.OfLong splitr, long index) {\n      super(splitr, index);\n    }\n\n    @Override\n    public void accept(long t) {\n      this.holder = t;\n    }\n\n    @Override\n    public boolean tryAdvance(Consumer<? super R> action) {\n      if (fromSpliterator.tryAdvance(this)) {\n        action.accept(function.apply(holder, index++));\n        return true;\n      }\n      return false;\n    }\n\n    @Override\n    Splitr createSplit(Spliterator.OfLong from, long i) {\n      return new Splitr(from, i);\n    }\n  }\n  return StreamSupport.stream(new Splitr(fromSpliterator, 0), isParallel).onClose(stream::close);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a {@link LongStream} containing the elements of the first stream, followed by the\n * elements of the second stream, and so on.\n *\n * <p>This is equivalent to {@code Stream.of(streams).flatMapToLong(stream -> stream)}, but the\n * returned stream may perform better.\n *\n * @see LongStream#concat(LongStream, LongStream)\n */\n", "func_signal": "public static LongStream concat(LongStream... streams)", "code": "{\n  boolean isParallel = false;\n  int characteristics = Spliterator.ORDERED | Spliterator.SIZED | Spliterator.NONNULL;\n  long estimatedSize = 0L;\n  ImmutableList.Builder<Spliterator.OfLong> splitrsBuilder =\n      new ImmutableList.Builder<>(streams.length);\n  for (LongStream stream : streams) {\n    isParallel |= stream.isParallel();\n    Spliterator.OfLong splitr = stream.spliterator();\n    splitrsBuilder.add(splitr);\n    characteristics &= splitr.characteristics();\n    estimatedSize = LongMath.saturatedAdd(estimatedSize, splitr.estimateSize());\n  }\n  return StreamSupport.longStream(\n          CollectSpliterators.flatMapToLong(\n              splitrsBuilder.build().spliterator(),\n              splitr -> splitr,\n              characteristics,\n              estimatedSize),\n          isParallel)\n      .onClose(() -> closeAll(streams));\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns an {@link IntStream} containing the elements of the first stream, followed by the\n * elements of the second stream, and so on.\n *\n * <p>This is equivalent to {@code Stream.of(streams).flatMapToInt(stream -> stream)}, but the\n * returned stream may perform better.\n *\n * @see IntStream#concat(IntStream, IntStream)\n */\n", "func_signal": "public static IntStream concat(IntStream... streams)", "code": "{\n  boolean isParallel = false;\n  int characteristics = Spliterator.ORDERED | Spliterator.SIZED | Spliterator.NONNULL;\n  long estimatedSize = 0L;\n  ImmutableList.Builder<Spliterator.OfInt> splitrsBuilder =\n      new ImmutableList.Builder<>(streams.length);\n  for (IntStream stream : streams) {\n    isParallel |= stream.isParallel();\n    Spliterator.OfInt splitr = stream.spliterator();\n    splitrsBuilder.add(splitr);\n    characteristics &= splitr.characteristics();\n    estimatedSize = LongMath.saturatedAdd(estimatedSize, splitr.estimateSize());\n  }\n  return StreamSupport.intStream(\n          CollectSpliterators.flatMapToInt(\n              splitrsBuilder.build().spliterator(),\n              splitr -> splitr,\n              characteristics,\n              estimatedSize),\n          isParallel)\n      .onClose(() -> closeAll(streams));\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a sequential {@link Stream} of the contents of {@code iterable}, delegating to {@link\n * Collection#stream} if possible.\n */\n", "func_signal": "public static <T> Stream<T> stream(Iterable<T> iterable)", "code": "{\n  return (iterable instanceof Collection)\n      ? ((Collection<T>) iterable).stream()\n      : StreamSupport.stream(iterable.spliterator(), false);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream\n * is empty.\n *\n * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This\n * method's runtime will be between O(log n) and O(n), performing better on <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * streams.\n *\n * @see DoubleStream#findFirst()\n * @throws NullPointerException if the last element of the stream is null\n */\n", "func_signal": "@Beta\npublic static OptionalDouble findLast(DoubleStream stream)", "code": "{\n  // findLast(Stream) does some allocation, so we might as well box some more\n  java.util.Optional<Double> boxedLast = findLast(stream.boxed());\n  return boxedLast.map(OptionalDouble::of).orElseGet(OptionalDouble::empty);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "// TODO: replace with version in common.reflect if and when it's open-sourced\n", "func_signal": "private static <T> T newProxy(Class<T> interfaceType, InvocationHandler handler)", "code": "{\n  Object object =\n      Proxy.newProxyInstance(\n          interfaceType.getClassLoader(), new Class<?>[] {interfaceType}, handler);\n  return interfaceType.cast(object);\n}", "path": "guava/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java", "commit_date": "2019-06-06 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a stream consisting of the results of applying the given function to the elements of\n * {@code stream} and their indexes in the stream. For example,\n *\n * <pre>{@code\n * mapWithIndex(\n *     IntStream.of(0, 1, 2),\n *     (i, index) -> i + \":\" + index)\n * }</pre>\n *\n * <p>...would return {@code Stream.of(\"0:0\", \"1:1\", \"2:2\")}.\n *\n * <p>The resulting stream is <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * if and only if {@code stream} was efficiently splittable and its underlying spliterator\n * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream\n * comes from a data structure supporting efficient indexed random access, typically an array or\n * list.\n *\n * <p>The order of the resulting stream is defined if and only if the order of the original stream\n * was defined.\n */\n", "func_signal": "@Beta\npublic static <R> Stream<R> mapWithIndex(IntStream stream, IntFunctionWithIndex<R> function)", "code": "{\n  checkNotNull(stream);\n  checkNotNull(function);\n  boolean isParallel = stream.isParallel();\n  Spliterator.OfInt fromSpliterator = stream.spliterator();\n\n  if (!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n    PrimitiveIterator.OfInt fromIterator = Spliterators.iterator(fromSpliterator);\n    return StreamSupport.stream(\n            new AbstractSpliterator<R>(\n                fromSpliterator.estimateSize(),\n                fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n              long index = 0;\n\n              @Override\n              public boolean tryAdvance(Consumer<? super R> action) {\n                if (fromIterator.hasNext()) {\n                  action.accept(function.apply(fromIterator.nextInt(), index++));\n                  return true;\n                }\n                return false;\n              }\n            },\n            isParallel)\n        .onClose(stream::close);\n  }\n  class Splitr extends MapWithIndexSpliterator<Spliterator.OfInt, R, Splitr>\n      implements IntConsumer, Spliterator<R> {\n    int holder;\n\n    Splitr(Spliterator.OfInt splitr, long index) {\n      super(splitr, index);\n    }\n\n    @Override\n    public void accept(int t) {\n      this.holder = t;\n    }\n\n    @Override\n    public boolean tryAdvance(Consumer<? super R> action) {\n      if (fromSpliterator.tryAdvance(this)) {\n        action.accept(function.apply(holder, index++));\n        return true;\n      }\n      return false;\n    }\n\n    @Override\n    Splitr createSplit(Spliterator.OfInt from, long i) {\n      return new Splitr(from, i);\n    }\n  }\n  return StreamSupport.stream(new Splitr(fromSpliterator, 0), isParallel).onClose(stream::close);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream\n * is empty.\n *\n * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This\n * method's runtime will be between O(log n) and O(n), performing better on <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * streams.\n *\n * @see LongStream#findFirst()\n * @throws NullPointerException if the last element of the stream is null\n */\n", "func_signal": "@Beta\npublic static OptionalLong findLast(LongStream stream)", "code": "{\n  // findLast(Stream) does some allocation, so we might as well box some more\n  java.util.Optional<Long> boxedLast = findLast(stream.boxed());\n  return boxedLast.map(OptionalLong::of).orElseGet(OptionalLong::empty);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is\n * empty.\n *\n * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This\n * method's runtime will be between O(log n) and O(n), performing better on <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * streams.\n *\n * @see IntStream#findFirst()\n * @throws NullPointerException if the last element of the stream is null\n */\n", "func_signal": "@Beta\npublic static OptionalInt findLast(IntStream stream)", "code": "{\n  // findLast(Stream) does some allocation, so we might as well box some more\n  java.util.Optional<Integer> boxedLast = findLast(stream.boxed());\n  return boxedLast.map(OptionalInt::of).orElseGet(OptionalInt::empty);\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a {@link Stream} containing the elements of the first stream, followed by the elements\n * of the second stream, and so on.\n *\n * <p>This is equivalent to {@code Stream.of(streams).flatMap(stream -> stream)}, but the returned\n * stream may perform better.\n *\n * @see Stream#concat(Stream, Stream)\n */\n", "func_signal": "@SafeVarargs\npublic static <T> Stream<T> concat(Stream<? extends T>... streams)", "code": "{\n  // TODO(lowasser): consider an implementation that can support SUBSIZED\n  boolean isParallel = false;\n  int characteristics = Spliterator.ORDERED | Spliterator.SIZED | Spliterator.NONNULL;\n  long estimatedSize = 0L;\n  ImmutableList.Builder<Spliterator<? extends T>> splitrsBuilder =\n      new ImmutableList.Builder<>(streams.length);\n  for (Stream<? extends T> stream : streams) {\n    isParallel |= stream.isParallel();\n    Spliterator<? extends T> splitr = stream.spliterator();\n    splitrsBuilder.add(splitr);\n    characteristics &= splitr.characteristics();\n    estimatedSize = LongMath.saturatedAdd(estimatedSize, splitr.estimateSize());\n  }\n  return StreamSupport.stream(\n          CollectSpliterators.flatMap(\n              splitrsBuilder.build().spliterator(),\n              splitr -> (Spliterator<T>) splitr,\n              characteristics,\n              estimatedSize),\n          isParallel)\n      .onClose(() -> closeAll(streams));\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns a {@link DoubleStream} containing the elements of the first stream, followed by the\n * elements of the second stream, and so on.\n *\n * <p>This is equivalent to {@code Stream.of(streams).flatMapToDouble(stream -> stream)}, but the\n * returned stream may perform better.\n *\n * @see DoubleStream#concat(DoubleStream, DoubleStream)\n */\n", "func_signal": "public static DoubleStream concat(DoubleStream... streams)", "code": "{\n  boolean isParallel = false;\n  int characteristics = Spliterator.ORDERED | Spliterator.SIZED | Spliterator.NONNULL;\n  long estimatedSize = 0L;\n  ImmutableList.Builder<Spliterator.OfDouble> splitrsBuilder =\n      new ImmutableList.Builder<>(streams.length);\n  for (DoubleStream stream : streams) {\n    isParallel |= stream.isParallel();\n    Spliterator.OfDouble splitr = stream.spliterator();\n    splitrsBuilder.add(splitr);\n    characteristics &= splitr.characteristics();\n    estimatedSize = LongMath.saturatedAdd(estimatedSize, splitr.estimateSize());\n  }\n  return StreamSupport.doubleStream(\n          CollectSpliterators.flatMapToDouble(\n              splitrsBuilder.build().spliterator(),\n              splitr -> splitr,\n              characteristics,\n              estimatedSize),\n          isParallel)\n      .onClose(() -> closeAll(streams));\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Returns the last element of the specified stream, or {@link java.util.Optional#empty} if the\n * stream is empty.\n *\n * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This\n * method's runtime will be between O(log n) and O(n), performing better on <a\n * href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">efficiently splittable</a>\n * streams.\n *\n * <p>If the stream has nondeterministic order, this has equivalent semantics to {@link\n * Stream#findAny} (which you might as well use).\n *\n * @see Stream#findFirst()\n * @throws NullPointerException if the last element of the stream is null\n */\n", "func_signal": "@Beta\npublic static <T> java.util.Optional<T> findLast(Stream<T> stream)", "code": "{\n  class OptionalState {\n    boolean set = false;\n    T value = null;\n\n    void set(@Nullable T value) {\n      this.set = true;\n      this.value = value;\n    }\n\n    T get() {\n      checkState(set);\n      return value;\n    }\n  }\n  OptionalState state = new OptionalState();\n\n  Deque<Spliterator<T>> splits = new ArrayDeque<>();\n  splits.addLast(stream.spliterator());\n\n  while (!splits.isEmpty()) {\n    Spliterator<T> spliterator = splits.removeLast();\n\n    if (spliterator.getExactSizeIfKnown() == 0) {\n      continue; // drop this split\n    }\n\n    // Many spliterators will have trySplits that are SUBSIZED even if they are not themselves\n    // SUBSIZED.\n    if (spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n      // we can drill down to exactly the smallest nonempty spliterator\n      while (true) {\n        Spliterator<T> prefix = spliterator.trySplit();\n        if (prefix == null || prefix.getExactSizeIfKnown() == 0) {\n          break;\n        } else if (spliterator.getExactSizeIfKnown() == 0) {\n          spliterator = prefix;\n          break;\n        }\n      }\n\n      // spliterator is known to be nonempty now\n      spliterator.forEachRemaining(state::set);\n      return java.util.Optional.of(state.get());\n    }\n\n    Spliterator<T> prefix = spliterator.trySplit();\n    if (prefix == null || prefix.getExactSizeIfKnown() == 0) {\n      // we can't split this any further\n      spliterator.forEachRemaining(state::set);\n      if (state.set) {\n        return java.util.Optional.of(state.get());\n      }\n      // fall back to the last split\n      continue;\n    }\n    splits.addLast(prefix);\n    splits.addLast(spliterator);\n  }\n  return java.util.Optional.empty();\n}", "path": "guava/guava/src/com/google/common/collect/Streams.java", "commit_date": "2020-12-30 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Creates a new {@code HashMultiset} containing the specified elements.\n *\n * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.\n *\n * @param elements the elements that the multiset should contain\n */\n", "func_signal": "public static <E> HashMultiset<E> create(Iterable<? extends E> elements)", "code": "{\n  HashMultiset<E> multiset = create(Multisets.inferDistinctElements(elements));\n  Iterables.addAll(multiset, elements);\n  return multiset;\n}", "path": "guava/android/guava/src/com/google/common/collect/HashMultiset.java", "commit_date": "2019-02-26 00:00:00", "repo_name": "google/guava", "stars": 49174, "license": "apache-2.0", "language": "java", "size": 456217}
{"docstring": "/**\n * Draw the progress spinner\n */\n", "func_signal": "public void draw(Canvas c, Rect bounds)", "code": "{\n\n    mCirclePaint.setColor(mBackgroundColor);\n    mCirclePaint.setAlpha(mAlpha);\n\n    c.drawCircle(bounds.exactCenterX(), bounds.exactCenterY(), bounds.width() / 2, mCirclePaint);\n\n    final RectF arcBounds = mTempBounds;\n    arcBounds.set(bounds);\n    arcBounds.inset(mStrokeInset, mStrokeInset);\n    final float startAngle = (mStartTrim + mRotation) * 360;\n    final float endAngle = (mEndTrim + mRotation) * 360;\n    float sweepAngle = endAngle - startAngle;\n    mArcPaint.setColor(mColors[mColorIndex]);\n    mArcPaint.setAlpha(mAlpha);\n    c.drawArc(arcBounds, startAngle, sweepAngle, false, mArcPaint);\n    drawTriangle(c, startAngle, sweepAngle, bounds);\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Set the dimensions of the arrowhead.\n *\n * @param width  Width of the hypotenuse of the arrow head\n * @param height Height of the arrow point\n */\n", "func_signal": "public void setArrowDimensions(float width, float height)", "code": "{\n    mArrowWidth = (int) width;\n    mArrowHeight = (int) height;\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Reset the progress spinner to default rotation, start and end angles.\n */\n", "func_signal": "public void resetOriginals()", "code": "{\n    mStartingStartTrim = 0;\n    mStartingEndTrim = 0;\n    mStartingRotation = 0;\n    setStartTrim(0);\n    setEndTrim(0);\n    setRotation(0);\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * @param scale Set the scale of the arrowhead for the spinner.\n */\n", "func_signal": "public void setArrowScale(float scale)", "code": "{\n    if (scale != mArrowScale) {\n        mArrowScale = scale;\n        invalidateSelf();\n    }\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * @param show Set to true to show the arrow head on the progress spinner.\n */\n", "func_signal": "public void setShowArrow(boolean show)", "code": "{\n    if (mShowArrow != show) {\n        mShowArrow = show;\n        invalidateSelf();\n    }\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * When the content view has reached top and refresh has been completed, view will be reset.\n *\n * @param frame\n */\n", "func_signal": "@Override\npublic void onUIReset(PtrFrameLayout frame)", "code": "{\n    mScale = 1f;\n    mDrawable.stop();\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialHeader.java", "commit_date": "2015-02-12 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Specify the last update time by this key string\n *\n * @param key\n */\n", "func_signal": "public void setLastUpdateTimeKey(String key)", "code": "{\n    if (TextUtils.isEmpty(key)) {\n        return;\n    }\n    mLastUpdateTimeKey = key;\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/PtrClassicDefaultHeader.java", "commit_date": "2015-09-19 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Set the overall size for the progress spinner. This updates the radius\n * and stroke width of the ring.\n *\n * @param size One of {@link MaterialProgressDrawable#LARGE} or\n *             {@link MaterialProgressDrawable#DEFAULT}\n */\n", "func_signal": "public void updateSizes(int size)", "code": "{\n    if (size == LARGE) {\n        setSizeParameters(CIRCLE_DIAMETER_LARGE, CIRCLE_DIAMETER_LARGE, CENTER_RADIUS_LARGE,\n                STROKE_WIDTH_LARGE, ARROW_WIDTH_LARGE, ARROW_HEIGHT_LARGE);\n    } else {\n        setSizeParameters(CIRCLE_DIAMETER, CIRCLE_DIAMETER, CENTER_RADIUS, STROKE_WIDTH,\n                ARROW_WIDTH, ARROW_HEIGHT);\n    }\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Using an object to specify the last update time.\n *\n * @param object\n */\n", "func_signal": "public void setLastUpdateTimeRelateObject(Object object)", "code": "{\n    if (mPtrClassicHeader != null) {\n        mPtrClassicHeader.setLastUpdateTimeRelateObject(object);\n    }\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/PtrClassicFrameLayout.java", "commit_date": "2015-02-12 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Update current position before update the UI\n */\n", "func_signal": "public final void setCurrentPos(int current)", "code": "{\n    mLastPos = mCurrentPos;\n    mCurrentPos = current;\n    onUpdatePos(current, mLastPos);\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/indicator/PtrIndicator.java", "commit_date": "2015-06-02 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * perform refreshing UI\n *\n * @param frame\n */\n", "func_signal": "@Override\npublic void onUIRefreshBegin(PtrFrameLayout frame)", "code": "{\n    mDrawable.setAlpha(255);\n    mDrawable.start();\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialHeader.java", "commit_date": "2015-02-12 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Set the colors the progress spinner alternates between.\n *\n * @param colors Array of integers describing the colors. Must be non-<code>null</code>.\n */\n", "func_signal": "public void setColors(int[] colors)", "code": "{\n    mColors = colors;\n    // if colors are reset, make sure to reset the color index as well\n    setColorIndex(0);\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * @param str\n * @param scale\n * @param gapBetweenLetter\n * @return ArrayList of float[] {x1, y1, x2, y2}\n */\n", "func_signal": "public static ArrayList<float[]> getPath(String str, float scale, int gapBetweenLetter)", "code": "{\n    ArrayList<float[]> list = new ArrayList<float[]>();\n    float offsetForWidth = 0;\n    for (int i = 0; i < str.length(); i++) {\n        int pos = str.charAt(i);\n        int key = sPointList.indexOfKey(pos);\n        if (key == -1) {\n            continue;\n        }\n        float[] points = sPointList.get(pos);\n        int pointCount = points.length / 4;\n\n        for (int j = 0; j < pointCount; j++) {\n            float[] line = new float[4];\n            for (int k = 0; k < 4; k++) {\n                float l = points[j * 4 + k];\n                // x\n                if (k % 2 == 0) {\n                    line[k] = (l + offsetForWidth) * scale;\n                }\n                // y\n                else {\n                    line[k] = l * scale;\n                }\n            }\n            list.add(line);\n        }\n        offsetForWidth += 57 + gapBetweenLetter;\n    }\n    return list;\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/StoreHousePath.java", "commit_date": "2014-11-30 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * If the start / end trim are offset to begin with, store them so that\n * animation starts from that offset.\n */\n", "func_signal": "public void storeOriginals()", "code": "{\n    mStartingStartTrim = mStartTrim;\n    mStartingEndTrim = mEndTrim;\n    mStartingRotation = mRotation;\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Set the start and end trim for the progress spinner arc.\n *\n * @param startAngle start angle\n * @param endAngle   end angle\n */\n", "func_signal": "public void setStartEndTrim(float startAngle, float endAngle)", "code": "{\n    mRing.setStartTrim(startAngle);\n    mRing.setEndTrim(endAngle);\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Set the colors used in the progress animation from color resources.\n * The first color will also be the color of the bar that grows in response\n * to a user swipe gesture.\n *\n * @param colors\n */\n", "func_signal": "public void setColorSchemeColors(int... colors)", "code": "{\n    mRing.setColors(colors);\n    mRing.setColorIndex(0);\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * create a view from resource Xml file, and hold the view that may be used in displaying data.\n *\n * @param layoutInflater\n */\n", "func_signal": "@Override\npublic View createView(LayoutInflater layoutInflater)", "code": "{\n    View view = layoutInflater.inflate(R.layout.with_long_press_list_view_item, null);\n    mImageView = (CubeImageView) view.findViewById(R.id.with_long_press_list_image);\n    return view;\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-demo/src/in/srain/cube/views/ptr/demo/ui/WithLongPressFragment.java", "commit_date": "2015-06-09 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Specify the last update time by this key string\n *\n * @param key\n */\n", "func_signal": "public void setLastUpdateTimeKey(String key)", "code": "{\n    if (mPtrClassicHeader != null) {\n        mPtrClassicHeader.setLastUpdateTimeKey(key);\n    }\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/PtrClassicFrameLayout.java", "commit_date": "2015-02-12 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * @param strokeWidth Set the stroke width of the progress spinner in pixels.\n */\n", "func_signal": "public void setStrokeWidth(float strokeWidth)", "code": "{\n    mStrokeWidth = strokeWidth;\n    mArcPaint.setStrokeWidth(strokeWidth);\n    invalidateSelf();\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Update the background color of the circle image view.\n */\n", "func_signal": "public void setBackgroundColor(int color)", "code": "{\n    mBackgroundColor = color;\n    mRing.setBackgroundColor(color);\n}", "path": "android-Ultra-Pull-To-Refresh/ptr-lib/src/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java", "commit_date": "2015-03-28 00:00:00", "repo_name": "liaohuqiu/android-Ultra-Pull-To-Refresh", "stars": 9596, "license": "mit", "language": "java", "size": 3474}
{"docstring": "/**\n * Assert that the given text does not contain the given substring.\n * <pre class=\"code\">Assert.doesNotContain(name, \"rod\");</pre>\n * @param textToSearch the text to search\n * @param substring the substring to find within the text\n */\n", "func_signal": "public static void doesNotContain(String textToSearch, String substring)", "code": "{\n    doesNotContain(textToSearch, substring,\n                   \"[Assertion failed] - this String argument must not contain the substring [\" + substring + \"]\");\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert a boolean expression, throwing <code>IllegalArgumentException</code>\n * if the test result is <code>false</code>.\n * <pre class=\"code\">Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\n * @param expression a boolean expression\n * @param message the exception message to use if the assertion fails\n * @throws IllegalArgumentException if expression is <code>false</code>\n */\n", "func_signal": "public static void isTrue(boolean expression, String message)", "code": "{\n    if (!expression) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * @since 0.10.0\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <T> T invokeStatic(String fqcn, String methodName, Class[] argTypes, Object... args)", "code": "{\n    try {\n        Class clazz = Classes.forName(fqcn);\n        Method method = clazz.getDeclaredMethod(methodName, argTypes);\n        method.setAccessible(true);\n        return(T)method.invoke(null, args);\n    } catch (Exception e) {\n        String msg = \"Unable to invoke class method \" + fqcn + \"#\" + methodName + \".  Ensure the necessary \" +\n            \"implementation is in the runtime classpath.\";\n        throw new IllegalStateException(msg, e);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Classes.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that the given String has valid text content; that is, it must not\n * be <code>null</code> and must contain at least one non-whitespace character.\n * <pre class=\"code\">Assert.hasText(name, \"'name' must not be empty\");</pre>\n * @param text the String to check\n * @see Strings#hasText\n */\n", "func_signal": "public static void hasText(String text)", "code": "{\n    hasText(text,\n            \"[Assertion failed] - this String argument must have text; it must not be null, empty, or blank\");\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that the given text does not contain the given substring.\n * <pre class=\"code\">Assert.doesNotContain(name, \"rod\", \"Name must not contain 'rod'\");</pre>\n * @param textToSearch the text to search\n * @param substring the substring to find within the text\n * @param message the exception message to use if the assertion fails\n */\n", "func_signal": "public static void doesNotContain(String textToSearch, String substring, String message)", "code": "{\n    if (Strings.hasLength(textToSearch) && Strings.hasLength(substring) &&\n        textToSearch.indexOf(substring) != -1) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Attempts to load the specified class name from the current thread's\n * {@link Thread#getContextClassLoader() context class loader}, then the\n * current ClassLoader (<code>Classes.class.getClassLoader()</code>), then the system/application\n * ClassLoader (<code>ClassLoader.getSystemClassLoader()</code>, in that order.  If any of them cannot locate\n * the specified class, an <code>UnknownClassException</code> is thrown (our RuntimeException equivalent of\n * the JRE's <code>ClassNotFoundException</code>.\n *\n * @param fqcn the fully qualified class name to load\n * @return the located class\n * @throws UnknownClassException if the class cannot be found.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <T> Class<T> forName(String fqcn) throws UnknownClassException", "code": "{\n\n    Class clazz = THREAD_CL_ACCESSOR.loadClass(fqcn);\n\n    if (clazz == null) {\n        clazz = CLASS_CL_ACCESSOR.loadClass(fqcn);\n    }\n\n    if (clazz == null) {\n        clazz = SYSTEM_CL_ACCESSOR.loadClass(fqcn);\n    }\n\n    if (clazz == null) {\n        String msg = \"Unable to load class named [\" + fqcn + \"] from the thread context, current, or \" +\n                \"system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.\";\n\n        if (fqcn != null && fqcn.startsWith(\"io.jsonwebtoken.impl\")) {\n            msg += \"  Have you remembered to include the jjwt-impl.jar in your runtime classpath?\";\n        }\n\n        throw new UnknownClassException(msg);\n    }\n\n    return clazz;\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Classes.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that an array has no null elements.\n * Note: Does not complain if the array is empty!\n * <pre class=\"code\">Assert.noNullElements(array, \"The array must have non-null elements\");</pre>\n * @param array the array to check\n * @param message the exception message to use if the assertion fails\n * @throws IllegalArgumentException if the object array contains a <code>null</code> element\n */\n", "func_signal": "public static void noNullElements(Object[] array, String message)", "code": "{\n    if (array != null) {\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == null) {\n                throw new IllegalArgumentException(message);\n            }\n        }\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that a collection has elements; that is, it must not be\n * <code>null</code> and must have at least one element.\n * <pre class=\"code\">Assert.notEmpty(collection, \"Collection must have elements\");</pre>\n * @param collection the collection to check\n * @throws IllegalArgumentException if the collection is <code>null</code> or has no elements\n */\n", "func_signal": "public static void notEmpty(Collection collection)", "code": "{\n    notEmpty(collection,\n             \"[Assertion failed] - this collection must not be empty: it must contain at least 1 element\");\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that the given String has valid text content; that is, it must not\n * be <code>null</code> and must contain at least one non-whitespace character.\n * <pre class=\"code\">Assert.hasText(name, \"'name' must not be empty\");</pre>\n * @param text the String to check\n * @param message the exception message to use if the assertion fails\n * @see Strings#hasText\n */\n", "func_signal": "public static void hasText(String text, String message)", "code": "{\n    if (!Strings.hasText(text)) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert a boolean expression, throwing <code>IllegalStateException</code>\n * if the test result is <code>false</code>. Call isTrue if you wish to\n * throw IllegalArgumentException on an assertion failure.\n * <pre class=\"code\">Assert.state(id == null, \"The id property must not already be initialized\");</pre>\n * @param expression a boolean expression\n * @param message the exception message to use if the assertion fails\n * @throws IllegalStateException if expression is <code>false</code>\n */\n", "func_signal": "public static void state(boolean expression, String message)", "code": "{\n    if (!expression) {\n        throw new IllegalStateException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that a Map has entries; that is, it must not be <code>null</code>\n * and must have at least one entry.\n * <pre class=\"code\">Assert.notEmpty(map, \"Map must have entries\");</pre>\n * @param map the map to check\n * @param message the exception message to use if the assertion fails\n * @throws IllegalArgumentException if the map is <code>null</code> or has no entries\n */\n", "func_signal": "public static void notEmpty(Map map, String message)", "code": "{\n    if (Collections.isEmpty(map)) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that an object is <code>null</code> .\n * <pre class=\"code\">Assert.isNull(value, \"The value must be null\");</pre>\n * @param object the object to check\n * @param message the exception message to use if the assertion fails\n * @throws IllegalArgumentException if the object is not <code>null</code>\n */\n", "func_signal": "public static void isNull(Object object, String message)", "code": "{\n    if (object != null) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that a collection has elements; that is, it must not be\n * <code>null</code> and must have at least one element.\n * <pre class=\"code\">Assert.notEmpty(collection, \"Collection must have elements\");</pre>\n * @param collection the collection to check\n * @param message the exception message to use if the assertion fails\n * @throws IllegalArgumentException if the collection is <code>null</code> or has no elements\n */\n", "func_signal": "public static void notEmpty(Collection collection, String message)", "code": "{\n    if (Collections.isEmpty(collection)) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that <code>superType.isAssignableFrom(subType)</code> is <code>true</code>.\n * <pre class=\"code\">Assert.isAssignable(Number.class, myClass);</pre>\n * @param superType the super type to check against\n * @param subType the sub type to check\n * @param message a message which will be prepended to the message produced by\n * the function itself, and which may be used to provide context. It should\n * normally end in a \": \" or \". \" so that the function generate message looks\n * ok when prepended to it.\n * @throws IllegalArgumentException if the classes are not assignable\n */\n", "func_signal": "public static void isAssignable(Class superType, Class subType, String message)", "code": "{\n    notNull(superType, \"Type to check against must not be null\");\n    if (subType == null || !superType.isAssignableFrom(subType)) {\n        throw new IllegalArgumentException(message + subType + \" is not assignable to \" + superType);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that the given String is not empty; that is,\n * it must not be <code>null</code> and not the empty String.\n * <pre class=\"code\">Assert.hasLength(name, \"Name must not be empty\");</pre>\n * @param text the String to check\n * @param message the exception message to use if the assertion fails\n * @see Strings#hasLength\n */\n", "func_signal": "public static void hasLength(String text, String message)", "code": "{\n    if (!Strings.hasLength(text)) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Returns the specified resource by checking the current thread's\n * {@link Thread#getContextClassLoader() context class loader}, then the\n * current ClassLoader (<code>Classes.class.getClassLoader()</code>), then the system/application\n * ClassLoader (<code>ClassLoader.getSystemClassLoader()</code>, in that order, using\n * {@link ClassLoader#getResourceAsStream(String) getResourceAsStream(name)}.\n *\n * @param name the name of the resource to acquire from the classloader(s).\n * @return the InputStream of the resource found, or <code>null</code> if the resource cannot be found from any\n * of the three mentioned ClassLoaders.\n * @since 0.8\n */\n", "func_signal": "public static InputStream getResourceAsStream(String name)", "code": "{\n\n    InputStream is = THREAD_CL_ACCESSOR.getResourceStream(name);\n\n    if (is == null) {\n        is = CLASS_CL_ACCESSOR.getResourceStream(name);\n    }\n\n    if (is == null) {\n        is = SYSTEM_CL_ACCESSOR.getResourceStream(name);\n    }\n\n    return is;\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Classes.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that an object is not <code>null</code> .\n * <pre class=\"code\">Assert.notNull(clazz, \"The class must not be null\");</pre>\n * @param object the object to check\n * @param message the exception message to use if the assertion fails\n * @throws IllegalArgumentException if the object is <code>null</code>\n */\n", "func_signal": "public static void notNull(Object object, String message)", "code": "{\n    if (object == null) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that an array has elements; that is, it must not be\n * <code>null</code> and must have at least one element.\n * <pre class=\"code\">Assert.notEmpty(array, \"The array must have elements\");</pre>\n * @param array the array to check\n * @param message the exception message to use if the assertion fails\n * @throws IllegalArgumentException if the object array is <code>null</code> or has no elements\n */\n", "func_signal": "public static void notEmpty(Object[] array, String message)", "code": "{\n    if (Objects.isEmpty(array)) {\n        throw new IllegalArgumentException(message);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that the provided object is an instance of the provided class.\n * <pre class=\"code\">Assert.instanceOf(Foo.class, foo);</pre>\n * @param type the type to check against\n * @param obj the object to check\n * @param message a message which will be prepended to the message produced by\n * the function itself, and which may be used to provide context. It should\n * normally end in a \": \" or \". \" so that the function generate message looks\n * ok when prepended to it.\n * @throws IllegalArgumentException if the object is not an instance of clazz\n * @see Class#isInstance\n */\n", "func_signal": "public static void isInstanceOf(Class type, Object obj, String message)", "code": "{\n    notNull(type, \"Type to check against must not be null\");\n    if (!type.isInstance(obj)) {\n        throw new IllegalArgumentException(message +\n                                           \"Object of class [\" + (obj != null ? obj.getClass().getName() : \"null\") +\n                                           \"] must be an instance of \" + type);\n    }\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Assert that the given String is not empty; that is,\n * it must not be <code>null</code> and not the empty String.\n * <pre class=\"code\">Assert.hasLength(name);</pre>\n * @param text the String to check\n * @see Strings#hasLength\n */\n", "func_signal": "public static void hasLength(String text)", "code": "{\n    hasLength(text,\n              \"[Assertion failed] - this String argument must have length; it must not be null or empty\");\n}", "path": "jjwt/api/src/main/java/io/jsonwebtoken/lang/Assert.java", "commit_date": "2018-07-20 00:00:00", "repo_name": "jwtk/jjwt", "stars": 9718, "license": "apache-2.0", "language": "java", "size": 3354}
{"docstring": "/**\n * Set listener for callback immediately when user select or unselect something.\n * <p>\n * It's a redundant API with {@link Matisse#obtainResult(Intent)},\n * we only suggest you to use this API when you need to do something immediately.\n *\n * @param listener {@link OnSelectedListener}\n * @return {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "@NonNull\npublic SelectionCreator setOnSelectedListener(@Nullable OnSelectedListener listener)", "code": "{\n    mSelectionSpec.onSelectedListener = listener;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Get the value of the data column for this Uri. This is useful for\n * MediaStore Uris, and other file-based ContentProviders.\n *\n * @param context       The context.\n * @param uri           The Uri to query.\n * @param selection     (Optional) Filter used in the query.\n * @param selectionArgs (Optional) Selection arguments used in the query.\n * @return The value of the _data column, which is typically a file path.\n */\n", "func_signal": "public static String getDataColumn(Context context, Uri uri, String selection,\n                                   String[] selectionArgs)", "code": "{\n\n    Cursor cursor = null;\n    final String column = \"_data\";\n    final String[] projection = {\n            column\n    };\n\n    try {\n        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);\n        if (cursor != null && cursor.moveToFirst()) {\n            final int columnIndex = cursor.getColumnIndexOrThrow(column);\n            return cursor.getString(columnIndex);\n        }\n    } finally {\n        if (cursor != null)\n            cursor.close();\n    }\n    return null;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/internal/utils/PathUtils.java", "commit_date": "2017-05-29 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Determine whether there will be conflict media types. A user can only select images and videos at the same time\n * while {@link SelectionSpec#mediaTypeExclusive} is set to false.\n */\n", "func_signal": "public boolean typeConflict(Item item)", "code": "{\n    return SelectionSpec.getInstance().mediaTypeExclusive\n            && ((item.isImage() && (mCollectionType == COLLECTION_VIDEO || mCollectionType == COLLECTION_MIXED))\n            || (item.isVideo() && (mCollectionType == COLLECTION_IMAGE || mCollectionType == COLLECTION_MIXED)));\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/internal/model/SelectedItemCollection.java", "commit_date": "2018-07-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "// only for video, in ms\n", "func_signal": "private Item(long id, String mimeType, long size, long duration)", "code": "{\n       this.id = id;\n       this.mimeType = mimeType;\n       Uri contentUri;\n       if (isImage()) {\n           contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n       } else if (isVideo()) {\n           contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n       } else {\n           // ?\n           contentUri = MediaStore.Files.getContentUri(\"external\");\n       }\n       this.uri = ContentUris.withAppendedId(contentUri, id);\n       this.size = size;\n       this.duration = duration;\n   }", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/internal/entity/Item.java", "commit_date": "2019-07-17 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Theme for media selecting Activity.\n * <p>\n * There are two built-in themes:\n * 1. com.zhihu.matisse.R.style.Matisse_Zhihu;\n * 2. com.zhihu.matisse.R.style.Matisse_Dracula\n * you can define a custom theme derived from the above ones or other themes.\n *\n * @param themeId theme resource id. Default value is com.zhihu.matisse.R.style.Matisse_Zhihu.\n * @return {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "public SelectionCreator theme(@StyleRes int themeId)", "code": "{\n    mSelectionSpec.themeId = themeId;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Capture strategy provided for the location to save photos including internal and external\n * storage and also a authority for {@link androidx.core.content.FileProvider}.\n *\n * @param captureStrategy {@link CaptureStrategy}, needed only when capturing is enabled.\n * @return {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "public SelectionCreator captureStrategy(CaptureStrategy captureStrategy)", "code": "{\n    mSelectionSpec.captureStrategy = captureStrategy;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Set the desired orientation of this activity.\n *\n * @param orientation An orientation constant as used in {@link ScreenOrientation}.\n *                    Default value is {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.\n * @return {@link SelectionCreator} for fluent API.\n * @see Activity#setRequestedOrientation(int)\n */\n", "func_signal": "public SelectionCreator restrictOrientation(@ScreenOrientation int orientation)", "code": "{\n    mSelectionSpec.orientation = orientation;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Only useful when {@link SelectionSpec#mediaTypeExclusive} set true and you want to set different maximum\n * selectable files for image and video media types.\n *\n * @param maxImageSelectable Maximum selectable count for image.\n * @param maxVideoSelectable Maximum selectable count for video.\n * @return  {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "public SelectionCreator maxSelectablePerMediaType(int maxImageSelectable, int maxVideoSelectable)", "code": "{\n    if (maxImageSelectable < 1 || maxVideoSelectable < 1)\n        throw new IllegalArgumentException((\"max selectable must be greater than or equal to one\"));\n    mSelectionSpec.maxSelectable = -1;\n    mSelectionSpec.maxImageSelectable = maxImageSelectable;\n    mSelectionSpec.maxVideoSelectable = maxVideoSelectable;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Determines Whether to hide top and bottom toolbar in PreView mode ,when user tap the picture\n * @param enable\n * @return {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "public SelectionCreator autoHideToolbarOnSingleTap(boolean enable)", "code": "{\n    mSelectionSpec.autoHideToobar = enable;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Show a auto-increased number or a check mark when user select media.\n *\n * @param countable true for a auto-increased number from 1, false for a check mark. Default\n *                  value is false.\n * @return {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "public SelectionCreator countable(boolean countable)", "code": "{\n    mSelectionSpec.countable = countable;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Checks whether the device has a camera feature or not.\n *\n * @param context a context to check for camera feature.\n * @return true if the device has a camera feature. false otherwise.\n */\n", "func_signal": "public static boolean hasCameraFeature(Context context)", "code": "{\n    PackageManager pm = context.getApplicationContext().getPackageManager();\n    return pm.hasSystemFeature(PackageManager.FEATURE_CAMERA);\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/internal/utils/MediaStoreCompat.java", "commit_date": "2019-07-17 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Provide an image engine.\n * <p>\n * There are two built-in image engines:\n * 1. {@link com.zhihu.matisse.engine.impl.GlideEngine}\n * 2. {@link com.zhihu.matisse.engine.impl.PicassoEngine}\n * And you can implement your own image engine.\n *\n * @param imageEngine {@link ImageEngine}\n * @return {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "public SelectionCreator imageEngine(ImageEngine imageEngine)", "code": "{\n    mSelectionSpec.imageEngine = imageEngine;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Whether to show only one media type if choosing medias are only images or videos.\n *\n * @param showSingleMediaType whether to show only one media type, either images or videos.\n * @return {@link SelectionCreator} for fluent API.\n * @see SelectionSpec#onlyShowImages()\n * @see SelectionSpec#onlyShowVideos()\n */\n", "func_signal": "public SelectionCreator showSingleMediaType(boolean showSingleMediaType)", "code": "{\n    mSelectionSpec.showSingleMediaType = showSingleMediaType;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "// </editor-fold>\n", "func_signal": "private void startAction(View v)", "code": "{\n    switch (v.getId()) {\n        case R.id.zhihu:\n            Matisse.from(SampleActivity.this)\n                    .choose(MimeType.ofImage(), false)\n                    .countable(true)\n                    .capture(true)\n                    .captureStrategy(\n                            new CaptureStrategy(true, \"com.zhihu.matisse.sample.fileprovider\", \"test\"))\n                    .maxSelectable(9)\n                    .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))\n                    .gridExpectedSize(\n                            getResources().getDimensionPixelSize(R.dimen.grid_expected_size))\n                    .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)\n                    .thumbnailScale(0.85f)\n                    .imageEngine(new GlideEngine())\n                    .setOnSelectedListener((uriList, pathList) -> {\n                        Log.e(\"onSelected\", \"onSelected: pathList=\" + pathList);\n                    })\n                    .showSingleMediaType(true)\n                    .originalEnable(true)\n                    .maxOriginalSize(10)\n                    .autoHideToolbarOnSingleTap(true)\n                    .setOnCheckedListener(isChecked -> {\n                        Log.e(\"isChecked\", \"onCheck: isChecked=\" + isChecked);\n                    })\n                    .forResult(REQUEST_CODE_CHOOSE);\n            break;\n        case R.id.dracula:\n            Matisse.from(SampleActivity.this)\n                    .choose(MimeType.ofImage())\n                    .theme(R.style.Matisse_Dracula)\n                    .countable(false)\n                    .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))\n                    .maxSelectable(9)\n                    .originalEnable(true)\n                    .maxOriginalSize(10)\n                    .imageEngine(new PicassoEngine())\n                    .forResult(REQUEST_CODE_CHOOSE);\n            break;\n        case R.id.only_gif:\n            Matisse.from(SampleActivity.this)\n                    .choose(MimeType.of(MimeType.GIF), false)\n                    .countable(true)\n                    .maxSelectable(9)\n                    .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))\n                    .gridExpectedSize(\n                            getResources().getDimensionPixelSize(R.dimen.grid_expected_size))\n                    .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)\n                    .thumbnailScale(0.85f)\n                    .imageEngine(new GlideEngine())\n                    .showSingleMediaType(true)\n                    .originalEnable(true)\n                    .maxOriginalSize(10)\n                    .autoHideToolbarOnSingleTap(true)\n                    .forResult(REQUEST_CODE_CHOOSE);\n            break;\n        default:\n            break;\n    }\n    mAdapter.setData(null, null);\n}", "path": "Matisse/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"onClick\">\n", "func_signal": "@SuppressLint(\"CheckResult\")\n@Override\npublic void onClick(final View v)", "code": "{\n    RxPermissions rxPermissions = new RxPermissions(this);\n    rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)\n            .subscribe(aBoolean -> {\n                if (aBoolean) {\n                    startAction(v);\n                } else {\n                    Toast.makeText(SampleActivity.this, R.string.permission_request_denied, Toast.LENGTH_LONG)\n                            .show();\n                }\n            }, Throwable::printStackTrace);\n}", "path": "Matisse/sample/src/main/java/com/zhihu/matisse/sample/SampleActivity.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "// rect for drawing checked number or mark\n", "func_signal": "private Rect getCheckRect()", "code": "{\n    if (mCheckRect == null) {\n        int rectPadding = (int) (SIZE * mDensity / 2 - CONTENT_SIZE * mDensity / 2);\n        mCheckRect = new Rect(rectPadding, rectPadding,\n                (int) (SIZE * mDensity - rectPadding), (int) (SIZE * mDensity - rectPadding));\n    }\n\n    return mCheckRect;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/internal/ui/widget/CheckView.java", "commit_date": "2019-07-17 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Maximum selectable count.\n *\n * @param maxSelectable Maximum selectable count. Default value is 1.\n * @return {@link SelectionCreator} for fluent API.\n */\n", "func_signal": "public SelectionCreator maxSelectable(int maxSelectable)", "code": "{\n    if (maxSelectable < 1)\n        throw new IllegalArgumentException(\"maxSelectable must be greater than or equal to one\");\n    if (mSelectionSpec.maxImageSelectable > 0 || mSelectionSpec.maxVideoSelectable > 0)\n        throw new IllegalStateException(\"already set maxImageSelectable and maxVideoSelectable\");\n    mSelectionSpec.maxSelectable = maxSelectable;\n    return this;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/SelectionCreator.java", "commit_date": "2019-10-11 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Image loader interface. There are predefined {@link com.zhihu.matisse.engine.impl.GlideEngine}\n * and {@link com.zhihu.matisse.engine.impl.PicassoEngine}.\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic interface ImageEngine", "code": "{\n\n    /**\n     * Load thumbnail of a static image resource.\n     *\n     * @param context     Context\n     * @param resize      Desired size of the origin image\n     * @param placeholder Placeholder drawable when image is not loaded yet\n     * @param imageView   ImageView widget\n     * @param uri         Uri of the loaded image\n     */\n    void loadThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView, Uri uri);\n\n    /**\n     * Load thumbnail of a gif image resource. You don't have to load an animated gif when it's only\n     * a thumbnail tile.\n     *\n     * @param context     Context\n     * @param resize      Desired size of the origin image\n     * @param placeholder Placeholder drawable when image is not loaded yet\n     * @param imageView   ImageView widget\n     * @param uri         Uri of the loaded image\n     */\n    void loadGifThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView, Uri uri);\n\n    /**\n     * Load a static image resource.\n     *\n     * @param context   Context\n     * @param resizeX   Desired x-size of the origin image\n     * @param resizeY   Desired y-size of the origin image\n     * @param imageView ImageView widget\n     * @param uri       Uri of the loaded image\n     */\n    void loadImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri);\n\n    /**\n     * Load a gif image resource.\n     *\n     * @param context   Context\n     * @param resizeX   Desired x-size of the origin image\n     * @param resizeY   Desired y-size of the origin image\n     * @param imageView ImageView widget\n     * @param uri       Uri of the loaded image\n     */\n    void loadGifImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri);\n\n    /**\n     * Whether this implementation supports animated gif.\n     * Just knowledge of it, convenient for users.\n     *\n     * @return true support animated gif, false do not support animated gif.\n     */\n    boolean supportAnimatedGif();\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/engine/ImageEngine.java", "commit_date": "2017-05-08 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Read exif info and get orientation value of the photo.\n *\n * @param filepath to get exif.\n * @return exif orientation value\n */\n", "func_signal": "public static int getExifOrientation(String filepath)", "code": "{\n    ExifInterface exif;\n    try {\n        // ExifInterface does not check whether file path is null or not,\n        // so passing null file path argument to its constructor causing SIGSEGV.\n        // We should avoid such a situation by checking file path string.\n        exif = newInstance(filepath);\n    } catch (IOException ex) {\n        Log.e(TAG, \"cannot read exif\", ex);\n        return EXIF_DEGREE_FALLBACK_VALUE;\n    }\n\n    int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, EXIF_DEGREE_FALLBACK_VALUE);\n    if (orientation == EXIF_DEGREE_FALLBACK_VALUE) {\n        return 0;\n    }\n    // We only recognize a subset of orientation tag values.\n    switch (orientation) {\n        case ExifInterface.ORIENTATION_ROTATE_90:\n            return 90;\n        case ExifInterface.ORIENTATION_ROTATE_180:\n            return 180;\n        case ExifInterface.ORIENTATION_ROTATE_270:\n            return 270;\n        default:\n            return 0;\n    }\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/internal/utils/ExifInterfaceCompat.java", "commit_date": "2017-05-07 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * Get a file path from a Uri. This will get the the path for Storage Access\n * Framework Documents, as well as the _data field for the MediaStore and\n * other file-based ContentProviders.\n *\n * @param context The context.\n * @param uri     The Uri to query.\n * @author paulburke\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.KITKAT)\npublic static String getPath(final Context context, final Uri uri)", "code": "{\n    // DocumentProvider\n    if (Platform.hasKitKat() && DocumentsContract.isDocumentUri(context, uri)) {\n        // ExternalStorageProvider\n        if (isExternalStorageDocument(uri)) {\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            if (\"primary\".equalsIgnoreCase(type)) {\n                return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n            }\n\n            // TODO handle non-primary volumes\n        } else if (isDownloadsDocument(uri)) { // DownloadsProvider\n\n            final String id = DocumentsContract.getDocumentId(uri);\n            final Uri contentUri = ContentUris.withAppendedId(\n                    Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n\n            return getDataColumn(context, contentUri, null, null);\n        } else if (isMediaDocument(uri)) { // MediaProvider\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            Uri contentUri = null;\n            if (\"image\".equals(type)) {\n                contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"video\".equals(type)) {\n                contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"audio\".equals(type)) {\n                contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n            }\n\n            final String selection = \"_id=?\";\n            final String[] selectionArgs = new String[]{\n                    split[1]\n            };\n\n            return getDataColumn(context, contentUri, selection, selectionArgs);\n        }\n    } else if (\"content\".equalsIgnoreCase(uri.getScheme())) { // MediaStore (and general)\n        return getDataColumn(context, uri, null, null);\n    } else if (\"file\".equalsIgnoreCase(uri.getScheme())) { // File\n        return uri.getPath();\n    }\n\n    return null;\n}", "path": "Matisse/matisse/src/main/java/com/zhihu/matisse/internal/utils/PathUtils.java", "commit_date": "2017-05-29 00:00:00", "repo_name": "zhihu/Matisse", "stars": 12479, "license": "apache-2.0", "language": "java", "size": 1991}
{"docstring": "/**\n * covert the collection to array\n **/\n", "func_signal": "private CoordinatorLogEntry[] getCoordinatorLogEntries()", "code": "{\n    Collection<CoordinatorLogEntry> allCoordinatorLogEntries = fileRepository.getAllCoordinatorLogEntries();\n    if (allCoordinatorLogEntries == null) {\n        return new CoordinatorLogEntry[0];\n    }\n    if (allCoordinatorLogEntries.size() == 0) {\n        return new CoordinatorLogEntry[0];\n    }\n    return allCoordinatorLogEntries.toArray(new CoordinatorLogEntry[allCoordinatorLogEntries.size()]);\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "//XA recovery log check\n", "func_signal": "private void performXARecoveryLog(CoordinatorLogEntry[] coordinatorLogEntries)", "code": "{\n    //fetch the recovery log\n    for (int i = 0; i < coordinatorLogEntries.length; i++) {\n        CoordinatorLogEntry coordinatorLogEntry = coordinatorLogEntries[i];\n        boolean needRollback = false;\n        boolean hasCommit = false;\n        //\u68c0\u67e5xa\u4e8b\u52a1\u662f\u5426\u5b8c\u6210 ,\u5904\u4e8e\u90e8\u5206commit \u6216\u8005\u90e8\u5206prepare\u4e2d\n        for (int j = 0; j < coordinatorLogEntry.participants.length; j++) {\n            ParticipantLogEntry participantLogEntry = coordinatorLogEntry.participants[j];\n            if (participantLogEntry.txState == TxState.TX_PREPARED_STATE || participantLogEntry.txState == TxState.TX_STARTED_STATE) {\n                needRollback = true;\n            }\n            if (participantLogEntry.txState == TxState.TX_COMMITED_STATE) {\n            \thasCommit = true;\n            }\n        }\n        //\u8865\u5145\u63d0\u4ea4 prepare \u72b6\u6001\u7684\u63d0\u4ea4, xa commit or xa rollback\n        if (needRollback) {\n            //1 can rollback\n        \tif(!hasCommit) {\n                for (int j = 0; j < coordinatorLogEntry.participants.length; j++) {\n                    ParticipantLogEntry participantLogEntry = coordinatorLogEntry.participants[j];\n                    if (participantLogEntry.txState == TxState.TX_COMMITED_STATE || participantLogEntry.txState == TxState.TX_ROLLBACKED_STATE) {\n                        continue;\n                    }                         //XA rollback\n                    String xacmd = \"XA ROLLBACK \" + coordinatorLogEntry.id  +\",'\"+ participantLogEntry.resourceName+\"'\" + ';';\n                    LOGGER.debug(\"send xaCmd : {}\", xacmd);\n                    OneRawSQLQueryResultHandler resultHandler = new OneRawSQLQueryResultHandler(new String[0], new XARollbackCallback(coordinatorLogEntry.id,\n                            participantLogEntry\n                    ));\n                    //xa cmd send\n                    sendXaCmd(participantLogEntry, xacmd, resultHandler);\n                }\n        \t}  else {\n                LOGGER.debug( \"some has commit in {}\",coordinatorLogEntry);\n                for (int j = 0; j < coordinatorLogEntry.participants.length; j++) {\n                    ParticipantLogEntry participantLogEntry = coordinatorLogEntry.participants[j];\n                    if (participantLogEntry.txState == TxState.TX_COMMITED_STATE || participantLogEntry.txState == TxState.TX_ROLLBACKED_STATE) {\n                        continue;\n                    }\n                    //XA commit\n                    String xacmd = \"XA COMMIT \" + coordinatorLogEntry.id  +\",'\"+ participantLogEntry.resourceName+\"'\" + ';';\n                    LOGGER.debug(\"send xaCmd : {}\", xacmd);\n                    OneRawSQLQueryResultHandler resultHandler = new OneRawSQLQueryResultHandler(new String[0], new XACommitCallback(coordinatorLogEntry.id,\n                            participantLogEntry\n                    ));\n                    //xa cmd send\n                    sendXaCmd(participantLogEntry, xacmd, resultHandler);\n                }\n        \t}      \t\n        }\n    }\n   }", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * save cur datanode index to properties file\n *\n * @param\n * @param curIndex\n */\n", "func_signal": "public synchronized void saveDataHostIndex(String dataHost, int curIndex)", "code": "{\n    File file = new File(SystemConfig.getHomePath(), \"conf\" + File.separator + \"dnindex.properties\");\n    FileOutputStream fileOut = null;\n    try {\n        String oldIndex = dnIndexProperties.getProperty(dataHost);\n        String newIndex = String.valueOf(curIndex);\n        if (newIndex.equals(oldIndex)) {\n            return;\n        }\n\n        dnIndexProperties.setProperty(dataHost, newIndex);\n        LOGGER.info(\"save DataHost index  \" + dataHost + \" cur index \" + curIndex);\n\n        File parent = file.getParentFile();\n        if (parent != null && !parent.exists()) {\n            parent.mkdirs();\n        }\n\n        fileOut = new FileOutputStream(file);\n        dnIndexProperties.store(fileOut, \"update\");\n\n//\t\t\tif(isUseZkSwitch()) {\n//\t\t\t\t// save to  zk\n//\t\t\t\ttry {\n//\t\t\t\t\tdnindexLock.acquire(30,TimeUnit.SECONDS)   ;\n//\t\t\t\t\tString path = ZKUtils.getZKBasePath() + \"bindata/dnindex.properties\";\n//\t\t\t\t\tCuratorFramework zk = ZKUtils.getConnection();\n//\t\t\t\t\tif(zk.checkExists().forPath(path)==null) {\n//\t\t\t\t\t\tzk.create().creatingParentsIfNeeded().forPath(path, Files.toByteArray(file));\n//\t\t\t\t\t} else{\n//\t\t\t\t\t\tbyte[] data=\tzk.getData().forPath(path);\n//\t\t\t\t\t\tByteArrayOutputStream out=new ByteArrayOutputStream();\n//\t\t\t\t\t\tProperties properties=new Properties();\n//\t\t\t\t\t\tproperties.load(new ByteArrayInputStream(data));\n//\t\t\t\t\t\t if(!String.valueOf(curIndex).equals(properties.getProperty(dataHost))) {\n//\t\t\t\t\t\t\t properties.setProperty(dataHost, String.valueOf(curIndex));\n//\t\t\t\t\t\t\t properties.store(out, \"update\");\n//\t\t\t\t\t\t\t zk.setData().forPath(path, out.toByteArray());\n//\t\t\t\t\t\t }\n//\t\t\t\t\t}\n//\n//\t\t\t\t}finally {\n//\t\t\t\t dnindexLock.release();\n//\t\t\t\t}\n//\t\t\t}\n    } catch (Exception e) {\n        LOGGER.warn(\"saveDataNodeIndex err:\", e);\n    } finally {\n        if (fileOut != null) {\n            try {\n                fileOut.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * get next AsynchronousChannel ,first is exclude if multi\n * AsynchronousChannelGroups\n *\n * @return\n */\n", "func_signal": "public AsynchronousChannelGroup getNextAsyncChannelGroup()", "code": "{\n    if (asyncChannelGroups.length == 1) {\n        return asyncChannelGroups[0];\n    } else {\n        int index = (++channelIndex) % asyncChannelGroups.length;\n        if (index == 0) {\n            ++channelIndex;\n            return asyncChannelGroups[1];\n        } else {\n            return asyncChannelGroups[index];\n        }\n\n    }\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * \u6e05\u7406 reload @@config_all \u540e\uff0c\u8001\u7684 connection \u8fde\u63a5\n *\n * @return\n */\n", "func_signal": "private Runnable dataSourceOldConsClear()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            timerExecutor.execute(new Runnable() {\n                @Override\n                public void run() {\n\n                    long sqlTimeout = MycatServer.getInstance().getConfig().getSystem().getSqlExecuteTimeout() * 1000L;\n\n                    //\u6839\u636e lastTime \u786e\u8ba4\u4e8b\u52a1\u7684\u6267\u884c\uff0c \u8d85\u8fc7 sqlExecuteTimeout \u9600\u503c close connection\n                    long currentTime = TimeUtil.currentTimeMillis();\n                    Iterator<BackendConnection> iter = NIOProcessor.backends_old.iterator();\n                    while (iter.hasNext()) {\n                        BackendConnection con = iter.next();\n                        long lastTime = con.getLastTime();\n                        if (currentTime - lastTime > sqlTimeout) {\n                            con.close(\"clear old backend connection ...\");\n                            iter.remove();\n                        }\n                    }\n                }\n            });\n        }\n\n        ;\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "//by kaiz : \u5b9a\u65f6\u8ba1\u7b97datanode active connection\n", "func_signal": "private Runnable dataNodeCalcActiveCons()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            timerExecutor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    Map<String, PhysicalDBPool> nodes = config.getDataHosts();\n                    for (PhysicalDBPool node : nodes.values()) {\n                        Collection<PhysicalDatasource> dataSources = node.getAllDataSources();\n                        for(PhysicalDatasource ds : dataSources) {\n                            ds.calcTotalCount();\n                        }\n                    }\n                }\n            });\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "//\u5b9a\u65f6\u6e05\u7406xa\u4efb\u52a1 \u5bf9\u8d85\u8fc7\u9608\u503c\u7684xa\u4efb\u52a1\u56de\u6eda\u6216\u8005\u63d0\u4ea4\n", "func_signal": "private Runnable xaTaskCheck()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            Collection<CoordinatorLogEntry> coordinatorLogEntries = MultiNodeCoordinator.inMemoryRepository.getAllCoordinatorLogEntries();\n            long sqlTimeout = MycatServer.getInstance().getConfig().getSystem().getSqlExecuteTimeout() * 1000L;\n\n            List<CoordinatorLogEntry> CoordinatorLogEntryList = null;\n            long currentTime = TimeUtil.currentTimeMillis();\n            for(CoordinatorLogEntry coordinatorLogEntry : coordinatorLogEntries) {\n                //\u8d85\u8fc7\u6267\u884c\u65f6\u95f420\u79d2 \u8fdb\u884c\u91cd\u8bd5\n                if(currentTime >  sqlTimeout + 20 * 1000 + coordinatorLogEntry.createTime){\n                    if(CoordinatorLogEntryList == null) {\n                        CoordinatorLogEntryList = new ArrayList<CoordinatorLogEntry>();\n                    }\n                    CoordinatorLogEntryList.add(coordinatorLogEntry);\n                }\n            }\n            if(CoordinatorLogEntryList != null) {\n                performXARecoveryLog((CoordinatorLogEntry[])CoordinatorLogEntryList.toArray());\n            }\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "//public SQLSelectQuery query()\n//{\n//    parseTop();\n//    return super.query();\n//}\n", "func_signal": "public void parseTop()", "code": "{\n        if (lexer.token() == Token.TOP)\n        {\n            lexer.nextToken();\n\n            boolean paren = false;\n            if (lexer.token() == Token.LPAREN)\n            {\n                paren = true;\n                lexer.nextToken();\n            }\n\n            if (paren)\n            {\n                accept(Token.RPAREN);\n            }\n\n            if (lexer.token() == Token.LITERAL_INT)\n            {\n                lexer.mark();\n                lexer.nextToken();\n            }\n            if (lexer.token() == Token.IDENTIFIER)\n            {\n                lexer.nextToken();\n\n            }\n            if (lexer.token() == Token.EQ||lexer.token() == Token.DOT)\n            {\n                lexer.nextToken();\n            } else  if(lexer.token() != Token.STAR)\n            {\n                lexer.reset();\n            }\n            if (lexer.token() == Token.PERCENT)\n            {\n                lexer.nextToken();\n            }\n\n\n        }\n\n\n    }", "path": "Mycat-Server/src/main/java/io/mycat/route/parser/druid/MycatSelectParser.java", "commit_date": "2016-03-28 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "//\u5b9a\u65f6\u6e05\u7406\u4fdd\u5b58SqlStat\u4e2d\u7684\u6570\u636e\n", "func_signal": "private Runnable recycleSqlStat()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            Map<String, UserStat> statMap = UserStatAnalyzer.getInstance().getUserStatMap();\n            for (UserStat userStat : statMap.values()) {\n                userStat.getSqlLastStat().recycle();\n                userStat.getSqlRecorder().recycle();\n                userStat.getSqlHigh().recycle();\n                userStat.getSqlLargeRowStat().recycle();\n            }\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * \u5728bufferpool\u4f7f\u7528\u7387\u5927\u4e8e\u4f7f\u7528\u7387\u9608\u503c\u65f6\u4e0d\u6e05\u7406\n * \u5728bufferpool\u4f7f\u7528\u7387\u5c0f\u4e8e\u4f7f\u7528\u7387\u9608\u503c\u65f6\u6e05\u7406\u5927\u7ed3\u679c\u96c6\u6e05\u5355\u5185\u5bb9\n */\n", "func_signal": "private Runnable resultSetMapClear()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            try {\n                BufferPool bufferPool = getBufferPool();\n                long bufferSize = bufferPool.size();\n                long bufferCapacity = bufferPool.capacity();\n                long bufferUsagePercent = (bufferCapacity - bufferSize) * 100 / bufferCapacity;\n                if (bufferUsagePercent < config.getSystem().getBufferUsagePercent()) {\n                    Map<String, UserStat> map = UserStatAnalyzer.getInstance().getUserStatMap();\n                    Set<String> userSet = config.getUsers().keySet();\n                    for (String user : userSet) {\n                        UserStat userStat = map.get(user);\n                        if (userStat != null) {\n                            SqlResultSizeRecorder recorder = userStat.getSqlResultSizeRecorder();\n                            //System.out.println(recorder.getSqlResultSet().size());\n                            recorder.clearSqlResultSet();\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.warn(\"resultSetMapClear err \" + e);\n            }\n        }\n\n        ;\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * \u6d4b\u8bd5\u53d1\u9001COM_STMT_RESET\u547d\u4ee4\n */\n", "func_signal": "public static void testComStmtRest()", "code": "{\n\tConnection conn = null;\n\tPreparedStatement pstmt = null;\n\ttry {\n\t\t\tconn = DriverManager.getConnection(DB_URL,USER,PASS);\n\t\t\tpstmt = conn.prepareStatement(\"insert into hotnews(id, title, content) values(?,?,?)\");\n\t\t\tpstmt.setInt(1, 1314);\n\t\t\tpstmt.setString(2, \"hotnew\");\n\t\t\tpstmt.setBinaryStream(3, new ByteArrayInputStream(\"this is a content of hotnew\".getBytes(\"UTF-8\")));\n\t\t\tpstmt.execute();\n\t\t\tpstmt.clearParameters();\n\t\t\tpstmt.setInt(1, 1315);\n\t\t\tpstmt.setString(2, \"hotnew\");\n\t\t\tpstmt.setBinaryStream(3, new ByteArrayInputStream(\"this is a new content of hotnew\".getBytes(\"UTF-8\")));\n\t\t\tpstmt.execute();\n\t\t\tpstmt.close();\n\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif(conn != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconn.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}", "path": "Mycat-Server/src/test/java/io/mycat/sqlexecute/ServerPrepareTest.java", "commit_date": "2016-09-10 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "//  \u5168\u5c40\u8868\u4e00\u81f4\u6027\u68c0\u67e5\u4efb\u52a1\n", "func_signal": "private Runnable glableTableConsistencyCheck()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            timerExecutor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    GlobalTableUtil.consistencyCheck();\n                }\n            });\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "// \u6570\u636e\u8282\u70b9\u5b9a\u65f6\u5fc3\u8df3\u4efb\u52a1\n", "func_signal": "private Runnable dataNodeHeartbeat()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            timerExecutor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    Map<String, PhysicalDBPool> nodes = config.getDataHosts();\n                    for (PhysicalDBPool node : nodes.values()) {\n                        node.doHeartbeat();\n                    }\n                }\n            });\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "// \u7cfb\u7edf\u65f6\u95f4\u5b9a\u65f6\u66f4\u65b0\u4efb\u52a1\n", "func_signal": "private Runnable updateTime()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            TimeUtil.update();\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "// \u5904\u7406\u5668\u5b9a\u65f6\u68c0\u67e5\u4efb\u52a1\n", "func_signal": "private Runnable processorCheck()", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            timerExecutor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        for (NIOProcessor p : processors) {\n                            p.checkBackendCons();\n                        }\n                    } catch (Exception e) {\n                        LOGGER.warn(\"checkBackendCons caught err:\" + e);\n                    }\n\n                }\n            });\n            timerExecutor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        for (NIOProcessor p : processors) {\n                            p.checkFrontCons();\n                        }\n                    } catch (Exception e) {\n                        LOGGER.warn(\"checkFrontCons caught err:\" + e);\n                    }\n                }\n            });\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * \u6d4b\u8bd5\u53d1\u9001COM_STMT_SEND_LONG_DATA\u547d\u4ee4\n * @throws IOException \n */\n", "func_signal": "public static void testComStmtSendLondData() throws IOException", "code": "{\n\tConnection conn = null;\n\tPreparedStatement pstmt = null;\n\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t// \u83b7\u53d6\u5f85\u5b58\u50a8\u56fe\u7247\u8f93\u5165\u6d41\n\tInputStream image0In = classLoader.getResourceAsStream(\"blob/image0.jpg\");\n\tInputStream image1In = classLoader.getResourceAsStream(\"blob/image1.png\");\n\tInputStream image2In = classLoader.getResourceAsStream(\"blob/image2.png\");\n\tInputStream image3In = classLoader.getResourceAsStream(\"blob/image3.png\");\n\t\n\t// \u4fdd\u5b58\u56fe\u7247\u5b57\u8282\u6570\u636e,\u5f85\u540e\u9762\u53d6\u56de\u6570\u636e\u8fdb\u884c\u6821\u9a8c\n\tbyte[] image0Bytes = getBytes(image0In);\n\tbyte[] image1Bytes = getBytes(image1In);\n\tbyte[] image2Bytes = getBytes(image2In);\n\tbyte[] image3Bytes = getBytes(image3In);\n\t\n\ttry {\n\t\t\tconn = DriverManager.getConnection(DB_URL,USER,PASS);\n\t\t\tpstmt = conn.prepareStatement(\"insert into hotnews(id, title, content, image0, image1, image2, image3) values(?,?,?,?,?,?,?)\");\n\t\t\tpstmt.setInt(1, 1314);\n\t\t\tpstmt.setString(2, \"hotnew\");\n\t\t\t// text\u5b57\u6bb5\u8bbe\u7f6e\n\t\t\tpstmt.setBinaryStream(3, new ByteArrayInputStream(\"this is a content of hotnew\".getBytes(\"UTF-8\")));\n\t\t\t// blob\u5b57\u6bb5\u6784\u9020\n\t\t\tBlob image0Blob = conn.createBlob();\n\t\t\tBlob image1Blob = conn.createBlob();\n\t\t\tBlob image2Blob = conn.createBlob();\n\t\t\tBlob image3Blob = conn.createBlob();\n\t\t\timage0Blob.setBytes(1, image0Bytes);\n\t\t\timage1Blob.setBytes(1, image1Bytes);\n\t\t\timage2Blob.setBytes(1, image2Bytes);\n\t\t\timage3Blob.setBytes(1, image3Bytes);\n\t\t\t// blob\u5b57\u6bb5\u8bbe\u7f6e\n\t\t\tpstmt.setBlob(4, image0Blob);\n\t\t\tpstmt.setBlob(5, image1Blob);\n\t\t\tpstmt.setBlob(6, image2Blob);\n\t\t\tpstmt.setBlob(7, image3Blob);\n\t\t\t// \u6267\u884c\n\t\t\tpstmt.execute();\n\t\t\t\n\t\t\t// \u4ece\u8868\u91cc\u9762\u62ff\u51fa\u521a\u63d2\u5165\u7684\u6570\u636e, \u5bf9blob\u5b57\u6bb5\u8fdb\u884c\u6821\u9a8c\n\t\t\tpstmt = conn.prepareStatement(\"select image0, image1, image2, image3 from hotnews where id = ?\");\n\t\t\tpstmt.setInt(1, 1314);\n\t\t\tResultSet rs = pstmt.executeQuery();\n\t\t\tif(rs.next()) {\n\t\t\t\tInputStream _image0In = rs.getBlob(1).getBinaryStream();\n\t\t\t\tInputStream _image1In = rs.getBlob(2).getBinaryStream();\n\t\t\t\tInputStream _image2In = rs.getBlob(3).getBinaryStream();\n\t\t\t\tInputStream _image3In = rs.getBlob(4).getBinaryStream();\n\t\t\t\t// \u65ad\u8a00\u4ece\u6570\u636e\u5e93\u53d6\u51fa\u6765\u7684\u6570\u636e,\u4e0e\u4e4b\u524d\u53d1\u9001\u7684\u6570\u636e\u662f\u4e00\u81f4\u7684(\u5b57\u8282\u6570\u7ec4\u5185\u5bb9\u6bd4\u8f83)\n\t\t\t\tAssert.assertArrayEquals(image0Bytes, getBytes(_image0In));\n\t\t\t\tAssert.assertArrayEquals(image1Bytes, getBytes(_image1In));\n\t\t\t\tAssert.assertArrayEquals(image2Bytes, getBytes(_image2In));\n\t\t\t\tAssert.assertArrayEquals(image3Bytes, getBytes(_image3In));\n\t\t\t}\n\t\t\t\n\t\t\tpstmt.close();\n\t\t\t\n\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif(conn != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconn.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}", "path": "Mycat-Server/src/test/java/io/mycat/sqlexecute/ServerPrepareTest.java", "commit_date": "2016-09-10 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "// \u6570\u636e\u8282\u70b9\u5b9a\u65f6\u8fde\u63a5\u7a7a\u95f2\u8d85\u65f6\u68c0\u67e5\u4efb\u52a1\n", "func_signal": "private Runnable dataNodeConHeartBeatCheck(final long heartPeriod)", "code": "{\n    return new Runnable() {\n        @Override\n        public void run() {\n            timerExecutor.execute(new Runnable() {\n                @Override\n                public void run() {\n\n                    Map<String, PhysicalDBPool> nodes = config.getDataHosts();\n                    for (PhysicalDBPool node : nodes.values()) {\n                        node.heartbeatCheck(heartPeriod);\n                    }\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tMap<String, PhysicalDBPool> _nodes = config.getBackupDataHosts();\n\t\t\t\t\t\tif (_nodes != null) {\n\t\t\t\t\t\t\tfor (PhysicalDBPool node : _nodes.values()) {\n\t\t\t\t\t\t\t\tnode.heartbeatCheck(heartPeriod);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}*/\n                }\n            });\n        }\n    };\n}", "path": "Mycat-Server/src/main/java/io/mycat/MycatServer.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * create the log base dir\n * @param baseDir\n */\n", "func_signal": "public void createBaseDir(String baseDir)", "code": "{\n    File baseDirFolder = new File (baseDir);\n    if (!baseDirFolder.exists()){\n            baseDirFolder.mkdirs();\n    }\n}", "path": "Mycat-Server/src/main/java/io/mycat/backend/mysql/xa/recovery/impl/FileSystemRepository.java", "commit_date": "2019-01-03 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * check inner column exist or not\n */\n//0\n", "func_signal": "public void checkInnerColumnExist()", "code": "{\n\t// [\"db3\",\"db2\",\"db1\"]\n\tthis.jobCount.set(0);\n\tbeginTime = new Date().getTime();\n\tString dbName = dbNode.getDatabase();\n    \tMySQLConsistencyHelper detector = new MySQLConsistencyHelper(this, null, 1);\n    \tOneRawSQLQueryResultHandler resultHandler = \n    \t\t\tnew OneRawSQLQueryResultHandler(new String[] {GlobalTableUtil.INNER_COLUMN}, detector);\n    \tString db = \" and table_schema='\" + dbName + \"'\";\n    \tSQLJob sqlJob = new SQLJob(this.columnExistSQL + db , dbName, resultHandler, source);\n    \tdetector.setSqlJob(sqlJob);//table_schema='db1'\n    this.jobCount.incrementAndGet();\n    \tsqlJob.run();\n\n}", "path": "Mycat-Server/src/main/java/io/mycat/backend/heartbeat/MySQLConsistencyCheckerHandler.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * \u968f\u673a\u6307\u5b9a\u8303\u56f4\u5185N\u4e2a\u4e0d\u91cd\u590d\u7684\u6570\n * \u6700\u7b80\u5355\u6700\u57fa\u672c\u7684\u65b9\u6cd5\n * @param min \u6307\u5b9a\u8303\u56f4\u6700\u5c0f\u503c\uff08\u5305\u542b\uff09\n * @param max \u6307\u5b9a\u8303\u56f4\u6700\u5927\u503c(\u4e0d\u5305\u542b)\n * @param n \u968f\u673a\u6570\u4e2a\u6570\n */\n", "func_signal": "public static int[] getNRandom(int min, int max, int n)", "code": "{\n    if (n > (max - min + 1) || max < min) {\n        return null;\n    }\n    int[] result = new int[n];\n    for(int i = 0 ; i < n ; i++){\n        result[i] = -9999;\n    }\n    int count = 0;\n    while(count < n) {\n        int num = (int) ((Math.random() * (max - min)) + min);\n        boolean flag = true;\n        for (int j = 0; j < n; j++) {\n            if(num == result[j]){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result[count] = num;\n            count++;\n        }\n    }\n    return result;\n}", "path": "Mycat-Server/src/main/java/io/mycat/util/RandomUtil.java", "commit_date": "2020-11-01 00:00:00", "repo_name": "MyCATApache/Mycat-Server", "stars": 9457, "license": "gpl-2.0", "language": "java", "size": 19570}
{"docstring": "/**\n * \u5220\u9664\u6307\u5b9a\u884c\u7684\u6307\u5b9a\u5217\n *\n * @param tableName  \u8868\u540d\n * @param rowKey     \u552f\u4e00\u6807\u8bc6\n * @param familyName \u5217\u65cf\n * @param qualifier  \u5217\u6807\u8bc6\n */\n", "func_signal": "public static boolean deleteColumn(String tableName, String rowKey, String familyName,\n                                      String qualifier)", "code": "{\n    try {\n        Table table = connection.getTable(TableName.valueOf(tableName));\n        Delete delete = new Delete(Bytes.toBytes(rowKey));\n        delete.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(qualifier));\n        table.delete(delete);\n        table.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return true;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u67e5\u770b\u6587\u4ef6\u5185\u5bb9\n */\n", "func_signal": "@Test\npublic void readToString() throws Exception", "code": "{\n    FSDataInputStream inputStream = fileSystem.open(new Path(\"/hdfs-api/test/a.txt\"));\n    String context = inputStreamToString(inputStream, \"utf-8\");\n    System.out.println(context);\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u68c0\u7d22\u8868\u4e2d\u6307\u5b9a\u6570\u636e\n *\n * @param tableName  \u8868\u540d\n * @param filterList \u8fc7\u6ee4\u5668\n */\n", "func_signal": "public static ResultScanner getScanner(String tableName, FilterList filterList)", "code": "{\n    try {\n        Table table = connection.getTable(TableName.valueOf(tableName));\n        Scan scan = new Scan();\n        scan.setFilter(filterList);\n        return table.getScanner(scan);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u67e5\u770b\u6587\u4ef6\u5757\u4fe1\u606f\n */\n", "func_signal": "@Test\npublic void getFileBlockLocations() throws Exception", "code": "{\n\n    FileStatus fileStatus = fileSystem.getFileStatus(new Path(\"/hdfs-api/test/kafka.tgz\"));\n    BlockLocation[] blocks = fileSystem.getFileBlockLocations(fileStatus, 0, fileStatus.getLen());\n    for (BlockLocation block : blocks) {\n        System.out.println(block);\n    }\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u4e0a\u4f20\u6587\u4ef6\u5230HDFS\n */\n", "func_signal": "@Test\npublic void copyFromLocalFile() throws Exception", "code": "{\n    // \u5982\u679c\u6307\u5b9a\u7684\u662f\u76ee\u5f55\uff0c\u5219\u4f1a\u628a\u76ee\u5f55\u53ca\u5176\u4e2d\u7684\u6587\u4ef6\u90fd\u590d\u5236\u5230\u6307\u5b9a\u76ee\u5f55\u4e0b\n    Path src = new Path(\"D:\\\\BigData-Notes\\\\notes\\\\installation\");\n    Path dst = new Path(\"/hdfs-api/test/\");\n    fileSystem.copyFromLocalFile(src, dst);\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n */\n", "func_signal": "@Test\npublic void exist() throws Exception", "code": "{\n    boolean exists = fileSystem.exists(new Path(\"/hdfs-api/test/a.txt\"));\n    System.out.println(exists);\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u5220\u9664\u6307\u5b9a\u884c\u8bb0\u5f55\n *\n * @param tableName \u8868\u540d\n * @param rowKey    \u552f\u4e00\u6807\u8bc6\n */\n", "func_signal": "public static boolean deleteRow(String tableName, String rowKey)", "code": "{\n    try {\n        Table table = connection.getTable(TableName.valueOf(tableName));\n        Delete delete = new Delete(Bytes.toBytes(rowKey));\n        table.delete(delete);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return true;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u4eceHDFS\u4e0a\u4e0b\u8f7d\u6587\u4ef6\n */\n", "func_signal": "@Test\npublic void copyToLocalFile() throws Exception", "code": "{\n    Path src = new Path(\"/hdfs-api/test/kafka.tgz\");\n    Path dst = new Path(\"D:\\\\app\\\\\");\n    /*\n     * \u7b2c\u4e00\u4e2a\u53c2\u6570\u63a7\u5236\u4e0b\u8f7d\u5b8c\u6210\u540e\u662f\u5426\u5220\u9664\u6e90\u6587\u4ef6,\u9ed8\u8ba4\u662ftrue,\u5373\u5220\u9664;\n     * \u6700\u540e\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u662f\u5426\u5c06RawLocalFileSystem\u7528\u4f5c\u672c\u5730\u6587\u4ef6\u7cfb\u7edf;\n     * RawLocalFileSystem\u9ed8\u8ba4\u4e3afalse,\u901a\u5e38\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4e0d\u8bbe\u7f6e,\n     * \u4f46\u5982\u679c\u4f60\u5728\u6267\u884c\u65f6\u5019\u629b\u51faNullPointerException\u5f02\u5e38,\u5219\u4ee3\u8868\u4f60\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0e\u7a0b\u5e8f\u53ef\u80fd\u5b58\u5728\u4e0d\u517c\u5bb9\u7684\u60c5\u51b5(window\u4e0b\u5e38\u89c1),\n     * \u6b64\u65f6\u53ef\u4ee5\u5c06RawLocalFileSystem\u8bbe\u7f6e\u4e3atrue\n     */\n    fileSystem.copyToLocalFile(false, src, dst, true);\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u83b7\u53d6\u6307\u5b9a\u884c\u6307\u5b9a\u5217(cell)\u7684\u6700\u65b0\u7248\u672c\u7684\u6570\u636e\n *\n * @param tableName    \u8868\u540d\n * @param rowKey       \u552f\u4e00\u6807\u8bc6\n * @param columnFamily \u5217\u65cf\n * @param qualifier    \u5217\u6807\u8bc6\n */\n", "func_signal": "public static String getCell(String tableName, String rowKey, String columnFamily, String qualifier)", "code": "{\n    try {\n        Table table = connection.getTable(TableName.valueOf(tableName));\n        Get get = new Get(Bytes.toBytes(rowKey));\n        if (!get.isCheckExistenceOnly()) {\n            get.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(qualifier));\n            Result result = table.get(get);\n            byte[] resultValue = result.getValue(Bytes.toBytes(columnFamily), Bytes.toBytes(qualifier));\n            return Bytes.toString(resultValue);\n        } else {\n            return null;\n        }\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u521b\u5efaHBase\u8868\n *\n * @param tableName      \u8868\u540d\n * @param columnFamilies \u5217\u65cf\u7684\u6570\u7ec4\n */\n", "func_signal": "public static boolean createTable(String tableName, List<String> columnFamilies)", "code": "{\n    try {\n        HBaseAdmin admin = (HBaseAdmin) connection.getAdmin();\n        if (admin.tableExists(tableName)) {\n            return false;\n        }\n        HTableDescriptor tableDescriptor = new HTableDescriptor(TableName.valueOf(tableName));\n        columnFamilies.forEach(columnFamily -> {\n            HColumnDescriptor columnDescriptor = new HColumnDescriptor(columnFamily);\n            columnDescriptor.setMaxVersions(1);\n            tableDescriptor.addFamily(columnDescriptor);\n        });\n        admin.createTable(tableDescriptor);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return true;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u65b0\u5efa\u8282\u70b9\u5e76\u8d4b\u4e88\u6743\u9650\n */\n", "func_signal": "@Test\npublic void createNodesWithAcl() throws Exception", "code": "{\n    List<ACL> aclList = new ArrayList<>();\n    // \u5bf9\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\n    String digest1 = DigestAuthenticationProvider.generateDigest(\"heibai:123456\");\n    String digest2 = DigestAuthenticationProvider.generateDigest(\"ying:123456\");\n    Id user01 = new Id(\"digest\", digest1);\n    Id user02 = new Id(\"digest\", digest2);\n    // \u6307\u5b9a\u6240\u6709\u6743\u9650\n    aclList.add(new ACL(Perms.ALL, user01));\n    // \u5982\u679c\u60f3\u8981\u6307\u5b9a\u6743\u9650\u7684\u7ec4\u5408\uff0c\u4e2d\u95f4\u9700\u8981\u4f7f\u7528 | ,\u8fd9\u91cc\u7684|\u4ee3\u8868\u7684\u662f\u4f4d\u8fd0\u7b97\u4e2d\u7684 \u6309\u4f4d\u6216\n    aclList.add(new ACL(Perms.DELETE | Perms.CREATE, user02));\n\n    // \u521b\u5efa\u8282\u70b9\n    byte[] data = \"abc\".getBytes();\n    client.create().creatingParentsIfNeeded()\n            .withMode(CreateMode.PERSISTENT)\n            .withACL(aclList, true)\n            .forPath(nodePath, data);\n}", "path": "BigData-Notes/code/Zookeeper/curator/src/main/java/com/heibaiying/AclOperation.java", "commit_date": "2019-05-25 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u9012\u5f52\u67e5\u770b\u6307\u5b9a\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u4fe1\u606f\n */\n", "func_signal": "@Test\npublic void listFilesRecursive() throws Exception", "code": "{\n    RemoteIterator<LocatedFileStatus> files = fileSystem.listFiles(new Path(\"/hbase\"), true);\n    while (files.hasNext()) {\n        System.out.println(files.next());\n    }\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u63d2\u5165\u6570\u636e\n *\n * @param tableName        \u8868\u540d\n * @param rowKey           \u552f\u4e00\u6807\u8bc6\n * @param columnFamilyName \u5217\u65cf\u540d\n * @param qualifier        \u5217\u6807\u8bc6\n * @param value            \u6570\u636e\n */\n", "func_signal": "public static boolean putRow(String tableName, String rowKey, String columnFamilyName, String qualifier,\n                             String value)", "code": "{\n    try {\n        Table table = connection.getTable(TableName.valueOf(tableName));\n        Put put = new Put(Bytes.toBytes(rowKey));\n        put.addColumn(Bytes.toBytes(columnFamilyName), Bytes.toBytes(qualifier), Bytes.toBytes(value));\n        table.put(put);\n        table.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return true;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u83b7\u53d6fileSystem\n */\n", "func_signal": "@Before\npublic void prepare()", "code": "{\n    try {\n        Configuration configuration = new Configuration();\n        // \u8fd9\u91cc\u6211\u542f\u52a8\u7684\u662f\u5355\u8282\u70b9\u7684Hadoop,\u526f\u672c\u7cfb\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a1,\u4e0d\u8bbe\u7f6e\u7684\u8bdd\u9ed8\u8ba4\u503c\u4e3a3\n        configuration.set(\"dfs.replication\", \"1\");\n        fileSystem = FileSystem.get(new URI(HDFS_PATH), configuration, HDFS_USER);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    } catch (URISyntaxException e) {\n        e.printStackTrace();\n    }\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u67e5\u770b\u6307\u5b9a\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u4fe1\u606f\n */\n", "func_signal": "@Test\npublic void listFiles() throws Exception", "code": "{\n    FileStatus[] statuses = fileSystem.listStatus(new Path(\"/hdfs-api\"));\n    for (FileStatus fileStatus : statuses) {\n        //fileStatus\u7684toString\u65b9\u6cd5\u88ab\u91cd\u5199\u8fc7\uff0c\u76f4\u63a5\u6253\u5370\u53ef\u4ee5\u770b\u5230\u6240\u6709\u4fe1\u606f\n        System.out.println(fileStatus.toString());\n    }\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u628a\u8f93\u5165\u6d41\u8f6c\u6362\u4e3a\u6307\u5b9a\u7f16\u7801\u7684\u5b57\u7b26\n *\n * @param inputStream \u8f93\u5165\u6d41\n * @param encode      \u6307\u5b9a\u7f16\u7801\u7c7b\u578b\n */\n", "func_signal": "private static String inputStreamToString(InputStream inputStream, String encode)", "code": "{\n    try {\n        if (encode == null || (\"\".equals(encode))) {\n            encode = \"utf-8\";\n        }\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, encode));\n        StringBuilder builder = new StringBuilder();\n        String str = \"\";\n        while ((str = reader.readLine()) != null) {\n            builder.append(str).append(\"\\n\");\n        }\n        return builder.toString();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u63d2\u5165\u6570\u636e\n *\n * @param tableName        \u8868\u540d\n * @param rowKey           \u552f\u4e00\u6807\u8bc6\n * @param columnFamilyName \u5217\u65cf\u540d\n * @param pairList         \u5217\u6807\u8bc6\u548c\u503c\u7684\u96c6\u5408\n */\n", "func_signal": "public static boolean putRow(String tableName, String rowKey, String columnFamilyName, List<Pair<String, String>> pairList)", "code": "{\n    try {\n        Table table = connection.getTable(TableName.valueOf(tableName));\n        Put put = new Put(Bytes.toBytes(rowKey));\n        pairList.forEach(pair -> put.addColumn(Bytes.toBytes(columnFamilyName), Bytes.toBytes(pair.getKey()), Bytes.toBytes(pair.getValue())));\n        table.put(put);\n        table.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return true;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u521b\u5efa\u6587\u4ef6,\u5e76\u5199\u5165\u5185\u5bb9\n */\n", "func_signal": "@Test\npublic void create() throws Exception", "code": "{\n    // \u5982\u679c\u6587\u4ef6\u5b58\u5728\uff0c\u9ed8\u8ba4\u4f1a\u8986\u76d6, \u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8fdb\u884c\u63a7\u5236\u3002\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ef\u4ee5\u63a7\u5236\u4f7f\u7528\u7f13\u51b2\u533a\u7684\u5927\u5c0f\n    FSDataOutputStream out = fileSystem.create(new Path(\"/hdfs-api/test/a.txt\"),\n            true, 4096);\n    out.write(\"hello hadoop!\".getBytes());\n    out.write(\"hello spark!\".getBytes());\n    out.write(\"hello flink!\".getBytes());\n    // \u5f3a\u5236\u5c06\u7f13\u51b2\u533a\u4e2d\u5185\u5bb9\u5237\u51fa\n    out.flush();\n    out.close();\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u5220\u9664hBase\u8868\n *\n * @param tableName \u8868\u540d\n */\n", "func_signal": "public static boolean deleteTable(String tableName)", "code": "{\n    try {\n        HBaseAdmin admin = (HBaseAdmin) connection.getAdmin();\n        // \u5220\u9664\u8868\u524d\u9700\u8981\u5148\u7981\u7528\u8868\n        admin.disableTable(tableName);\n        admin.deleteTable(tableName);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return true;\n}", "path": "BigData-Notes/code/Hbase/hbase-java-api-1.x/src/main/java/com/heibaiying/HBaseUtils.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u6587\u4ef6\u91cd\u547d\u540d\n */\n", "func_signal": "@Test\npublic void rename() throws Exception", "code": "{\n    Path oldPath = new Path(\"/hdfs-api/test/a.txt\");\n    Path newPath = new Path(\"/hdfs-api/test/b.txt\");\n    boolean result = fileSystem.rename(oldPath, newPath);\n    System.out.println(result);\n}", "path": "BigData-Notes/code/Hadoop/hdfs-java-api/src/test/java/HdfsTest.java", "commit_date": "2019-05-01 00:00:00", "repo_name": "heibaiying/BigData-Notes", "stars": 15058, "license": "None", "language": "java", "size": 24052}
{"docstring": "/**\n * \u83b7\u53d6JDBC\u8fde\u63a5\uff0c\u8f7b\u91cf\u7ea7\u8fde\u63a5\uff0c\u4f7f\u7528\u5b8c\u540e\u5fc5\u987b\u663e\u5f0fclose\n */\n", "func_signal": "public static Connection getThinClientConnection(String connStr)", "code": "{\n    LOG.debug(\"Connecting to QueryServer [\" + connStr + \"] ...\");\n    Connection conn;\n    try {\n        Class.forName(CONNECT_DRIVER_STRING);\n        conn = DriverManager.getConnection(connStr);\n        conn.setAutoCommit(false);\n    } catch (Throwable e) {\n        throw DataXException.asDataXException(HBase20xSQLWriterErrorCode.GET_QUERYSERVER_CONNECTION_ERROR,\n                \"\u65e0\u6cd5\u8fde\u63a5QueryServer\uff0c\u914d\u7f6e\u4e0d\u6b63\u786e\u6216\u670d\u52a1\u672a\u542f\u52a8\uff0c\u8bf7\u68c0\u67e5\u914d\u7f6e\u548c\u670d\u52a1\u72b6\u6001\u6216\u8005\u8054\u7cfbHBase\u7ba1\u7406\u5458.\", e);\n    }\n    LOG.debug(\"Connected to QueryServer successfully.\");\n    return conn;\n}", "path": "DataX/hbase20xsqlwriter/src/main/java/com/alibaba/datax/plugin/writer/hbase20xsqlwriter/HBase20xSQLHelper.java", "commit_date": "2019-03-11 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u89e3\u5bc6<br>\n * @param data \u5df2\u7ecf\u7ecf\u8fc7base64\u52a0\u5bc6\u7684\u5bc6\u6587\n * @param key  \u5df2\u7ecf\u7ecf\u8fc7base64\u52a0\u5bc6\u79c1\u94a5(RSA)\u6216\u8005\u88f8\u5bc6\u94a5(3DES)\n * */\n", "func_signal": "public static String decrypt(String data, String key, String method)", "code": "{\n    if (SecretUtil.KEY_ALGORITHM_RSA.equals(method)) {\n        return SecretUtil.decryptRSA(data, key);\n    } else if (SecretUtil.KEY_ALGORITHM_3DES.equals(method)) {\n        return SecretUtil.decrypt3DES(data, key);\n    } else {\n        throw DataXException.asDataXException(\n                FrameworkErrorCode.SECRET_ERROR,\n                String.format(\"\u7cfb\u7edf\u7f16\u7a0b\u9519\u8bef,\u4e0d\u652f\u6301\u7684\u52a0\u5bc6\u7c7b\u578b\", method));\n    }\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u6784\u5efa\u503c\u4e3atime(java.sql.Time)\u7684DateColumn\uff0c\u4f7f\u7528Date\u5b50\u7c7b\u578b\u4e3aTIME\uff0c\u53ea\u6709\u65f6\u95f4\uff0c\u6ca1\u6709\u65e5\u671f\n * */\n", "func_signal": "public DateColumn(final java.sql.Time time)", "code": "{\n\tthis(time == null ? null : time.getTime());\n\tthis.setSubType(DateType.TIME);\n}", "path": "DataX/common/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u6784\u5efa\u503c\u4e3ats(java.sql.Timestamp)\u7684DateColumn\uff0c\u4f7f\u7528Date\u5b50\u7c7b\u578b\u4e3aDATETIME\n * */\n", "func_signal": "public DateColumn(final java.sql.Timestamp ts)", "code": "{\n\tthis(ts == null ? null : ts.getTime());\n\tthis.setSubType(DateType.DATETIME);\n}", "path": "DataX/common/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u6784\u5efa\u503c\u4e3adate(java.sql.Date)\u7684DateColumn\uff0c\u4f7f\u7528Date\u5b50\u7c7b\u578b\u4e3aDATE\uff0c\u53ea\u6709\u65e5\u671f\uff0c\u6ca1\u6709\u65f6\u95f4\n * */\n", "func_signal": "public DateColumn(final java.sql.Date date)", "code": "{\n\tthis(date == null ? null : date.getTime());\n\tthis.setSubType(DateType.DATE);\n}", "path": "DataX/common/src/main/java/com/alibaba/datax/common/element/DateColumn.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u751f\u6210sql\u6a21\u677f\uff0c\u5e76\u6839\u636e\u6a21\u677f\u521b\u5efaPreparedStatement\n */\n", "func_signal": "private PreparedStatement createPreparedStatement() throws SQLException", "code": "{\n    // \u751f\u6210\u5217\u540d\u96c6\u5408\uff0c\u5217\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\uff1a col1,col2,col3,...\n    StringBuilder columnNamesBuilder = new StringBuilder();\n    if (cfg.isThinClient()) {\n        for (String col : cfg.getColumns()) {\n            // thin \u5ba2\u6237\u7aef\u4e0d\u4f7f\u7528\u53cc\u5f15\u53f7\n            columnNamesBuilder.append(col);\n            columnNamesBuilder.append(\",\");\n        }\n    } else {\n        for (String col : cfg.getColumns()) {\n            // \u5217\u540d\u4f7f\u7528\u53cc\u5f15\u53f7\uff0c\u5219\u4e0d\u81ea\u52a8\u8f6c\u6362\u4e3a\u5168\u5927\u5199\uff0c\u800c\u662f\u4fdd\u7559\u7528\u6237\u914d\u7f6e\u7684\u5927\u5c0f\u5199\n            columnNamesBuilder.append(\"\\\"\");\n            columnNamesBuilder.append(col);\n            columnNamesBuilder.append(\"\\\"\");\n            columnNamesBuilder.append(\",\");\n        }\n    }\n    columnNamesBuilder.setLength(columnNamesBuilder.length() - 1);   // \u79fb\u9664\u672b\u5c3e\u591a\u4f59\u7684\u9017\u53f7\n    String columnNames = columnNamesBuilder.toString();\n    numberOfColumnsToWrite = cfg.getColumns().size();\n    numberOfColumnsToRead = numberOfColumnsToWrite;   // \u5f00\u59cb\u7684\u65f6\u5019\uff0c\u8981\u8bfb\u7684\u5217\u6570\u5a31\u8981\u5199\u7684\u5217\u6570\u76f8\u7b49\n\n    // \u751f\u6210UPSERT\u6a21\u677f\n    String tableName = cfg.getTableName();\n    StringBuilder upsertBuilder = null;\n    if (cfg.isThinClient()) {\n        upsertBuilder = new StringBuilder(\"upsert into \" + tableName + \" (\" + columnNames + \" ) values (\");\n    } else {\n        // \u8868\u540d\u4f7f\u7528\u53cc\u5f15\u53f7\uff0c\u5219\u4e0d\u81ea\u52a8\u8f6c\u6362\u4e3a\u5168\u5927\u5199\uff0c\u800c\u662f\u4fdd\u7559\u7528\u6237\u914d\u7f6e\u7684\u5927\u5c0f\u5199\n        upsertBuilder = new StringBuilder(\"upsert into \\\"\" + tableName + \"\\\" (\" + columnNames + \" ) values (\");\n    }\n    for (int i = 0; i < cfg.getColumns().size(); i++) {\n        upsertBuilder.append(\"?,\");\n    }\n    upsertBuilder.setLength(upsertBuilder.length() - 1);  // \u79fb\u9664\u672b\u5c3e\u591a\u4f59\u7684\u9017\u53f7\n    upsertBuilder.append(\")\");\n\n    String sql = upsertBuilder.toString();\n    PreparedStatement ps = connection.prepareStatement(sql);\n    LOG.debug(\"SQL template generated: \" + sql);\n    return ps;\n}", "path": "DataX/hbase11xsqlwriter/src/main/java/com/alibaba/datax/plugin/writer/hbase11xsqlwriter/HbaseSQLWriterTask.java", "commit_date": "2019-05-29 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u6307\u5b9aJob\u914d\u7f6e\u8def\u5f84\uff0cConfigParser\u4f1a\u89e3\u6790Job\u3001Plugin\u3001Core\u5168\u90e8\u4fe1\u606f\uff0c\u5e76\u4ee5Configuration\u8fd4\u56de\n */\n", "func_signal": "public static Configuration parse(final String jobPath)", "code": "{\n    Configuration configuration = ConfigParser.parseJobConfig(jobPath);\n\n    configuration.merge(\n            ConfigParser.parseCoreConfig(CoreConstant.DATAX_CONF_PATH),\n            false);\n    // todo config\u4f18\u5316\uff0c\u53ea\u6355\u83b7\u9700\u8981\u7684plugin\n    String readerPluginName = configuration.getString(\n            CoreConstant.DATAX_JOB_CONTENT_READER_NAME);\n    String writerPluginName = configuration.getString(\n            CoreConstant.DATAX_JOB_CONTENT_WRITER_NAME);\n\n    String preHandlerName = configuration.getString(\n            CoreConstant.DATAX_JOB_PREHANDLER_PLUGINNAME);\n\n    String postHandlerName = configuration.getString(\n            CoreConstant.DATAX_JOB_POSTHANDLER_PLUGINNAME);\n\n    Set<String> pluginList = new HashSet<String>();\n    pluginList.add(readerPluginName);\n    pluginList.add(writerPluginName);\n\n    if(StringUtils.isNotEmpty(preHandlerName)) {\n        pluginList.add(preHandlerName);\n    }\n    if(StringUtils.isNotEmpty(postHandlerName)) {\n        pluginList.add(postHandlerName);\n    }\n    try {\n        configuration.merge(parsePluginConfig(new ArrayList<String>(pluginList)), false);\n    }catch (Exception e){\n        //\u541e\u6389\u5f02\u5e38\uff0c\u4fdd\u6301log\u5e72\u51c0\u3002\u8fd9\u91ccmessage\u8db3\u591f\u3002\n        LOG.warn(String.format(\"\u63d2\u4ef6[%s,%s]\u52a0\u8f7d\u5931\u8d25\uff0c1s\u540e\u91cd\u8bd5... Exception:%s \", readerPluginName, writerPluginName, e.getMessage()));\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e1) {\n            //\n        }\n        configuration.merge(parsePluginConfig(new ArrayList<String>(pluginList)), false);\n    }\n\n    return configuration;\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/ConfigParser.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "// \u6839\u636e\u7528\u6237\u6307\u5b9a\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u5c06\u6307\u5b9a\u7684\u6587\u4ef6\u7c7b\u578b\u7684\u8def\u5f84\u52a0\u5165sourceHDFSAllFilesList\n", "func_signal": "private void addSourceFileByType(String filePath)", "code": "{\n    // \u68c0\u67e5file\u7684\u7c7b\u578b\u548c\u7528\u6237\u914d\u7f6e\u7684fileType\u7c7b\u578b\u662f\u5426\u4e00\u81f4\n    boolean isMatchedFileType = checkHdfsFileType(filePath, this.specifiedFileType);\n\n    if (isMatchedFileType) {\n        LOG.info(String.format(\"[%s]\u662f[%s]\u7c7b\u578b\u7684\u6587\u4ef6, \u5c06\u8be5\u6587\u4ef6\u52a0\u5165source files\u5217\u8868\", filePath, this.specifiedFileType));\n        sourceHDFSAllFilesList.add(filePath);\n    } else {\n        String message = String.format(\"\u6587\u4ef6[%s]\u7684\u7c7b\u578b\u4e0e\u7528\u6237\u914d\u7f6e\u7684fileType\u7c7b\u578b\u4e0d\u4e00\u81f4\uff0c\" +\n                        \"\u8bf7\u786e\u8ba4\u60a8\u914d\u7f6e\u7684\u76ee\u5f55\u4e0b\u9762\u6240\u6709\u6587\u4ef6\u7684\u7c7b\u578b\u5747\u4e3a[%s]\"\n                , filePath, this.specifiedFileType);\n        LOG.error(message);\n        throw DataXException.asDataXException(\n                HdfsReaderErrorCode.FILE_TYPE_UNSUPPORT, message);\n    }\n}", "path": "DataX/hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/DFSUtil.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u6279\u91cf\u63d0\u4ea4\u4e00\u7ec4\u6570\u636e\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u5c1d\u8bd5\u4e00\u884c\u884c\u63d0\u4ea4\uff0c\u5982\u679c\u4ecd\u7136\u5931\u8d25\uff0c\u629b\u9519\u7ed9\u7528\u6237\n */\n", "func_signal": "private void doBatchUpsert(List<Record> records) throws SQLException", "code": "{\n    try {\n        // \u5c06\u6240\u6709record\u63d0\u4ea4\u5230connection\u7f13\u5b58\n        for (Record r : records) {\n            setupStatement(r);\n            ps.executeUpdate();\n        }\n\n        // \u5c06\u7f13\u5b58\u7684\u6570\u636e\u63d0\u4ea4\u5230hbase\n        connection.commit();\n    } catch (SQLException e) {\n        LOG.error(\"Failed batch committing \" + records.size() + \" records\", e);\n\n        // \u6279\u91cf\u63d0\u4ea4\u5931\u8d25\uff0c\u5219\u4e00\u884c\u884c\u91cd\u8bd5\uff0c\u4ee5\u786e\u5b9a\u90a3\u4e00\u884c\u51fa\u9519\n        connection.rollback();\n        doSingleUpsert(records);\n    } catch (Exception e) {\n        throw DataXException.asDataXException(HbaseSQLWriterErrorCode.PUT_HBASE_ERROR, e);\n    }\n}", "path": "DataX/hbase11xsqlwriter/src/main/java/com/alibaba/datax/plugin/writer/hbase11xsqlwriter/HbaseSQLWriterTask.java", "commit_date": "2019-05-29 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u9a8c\u8bc1\u914d\u7f6e\u53c2\u6570\u662f\u5426\u6b63\u786e\n */\n", "func_signal": "public static void validateParameter(com.alibaba.datax.common.util.Configuration originalConfig)", "code": "{\n    // \u8868\u540d\u548cqueryserver\u5730\u5740\u5fc5\u987b\u914d\u7f6e\uff0c\u5426\u5219\u629b\u5f02\u5e38\n    String tableName = originalConfig.getNecessaryValue(Key.TABLE, HBase20xSQLWriterErrorCode.REQUIRED_VALUE);\n    String queryServerAddress = originalConfig.getNecessaryValue(Key.QUERYSERVER_ADDRESS, HBase20xSQLWriterErrorCode.REQUIRED_VALUE);\n\n    // \u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u53ef\u4e0d\u914d\u7f6e\uff0c\u9ed8\u8ba4PROTOBUF\n    String serialization = originalConfig.getString(Key.SERIALIZATION_NAME, Constant.DEFAULT_SERIALIZATION);\n\n    String connStr = getConnectionUrl(queryServerAddress, serialization);\n    // \u6821\u9a8cjdbc\u8fde\u63a5\u662f\u5426\u6b63\u5e38\n    Connection conn = getThinClientConnection(connStr);\n\n    List<String> columnNames = originalConfig.getList(Key.COLUMN, String.class);\n    if (columnNames == null || columnNames.isEmpty()) {\n        throw DataXException.asDataXException(\n                HBase20xSQLWriterErrorCode.ILLEGAL_VALUE, \"HBase\u7684columns\u914d\u7f6e\u4e0d\u80fd\u4e3a\u7a7a,\u8bf7\u6dfb\u52a0\u76ee\u6807\u8868\u7684\u5217\u540d\u914d\u7f6e.\");\n    }\n    String schema = originalConfig.getString(Key.SCHEMA);\n    // \u68c0\u67e5\u8868\u4ee5\u53ca\u914d\u7f6e\u5217\u662f\u5426\u5b58\u5728\n    checkTable(conn, schema, tableName, columnNames);\n}", "path": "DataX/hbase20xsqlwriter/src/main/java/com/alibaba/datax/plugin/writer/hbase20xsqlwriter/HBase20xSQLHelper.java", "commit_date": "2019-03-11 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "// \u5224\u65adfile\u662f\u5426\u662fRC file\n", "func_signal": "private boolean isRCFile(String filepath, FSDataInputStream in)", "code": "{\n\n    // The first version of RCFile used the sequence file header.\n    final byte[] ORIGINAL_MAGIC = new byte[]{(byte) 'S', (byte) 'E', (byte) 'Q'};\n    // The 'magic' bytes at the beginning of the RCFile\n    final byte[] RC_MAGIC = new byte[]{(byte) 'R', (byte) 'C', (byte) 'F'};\n    // the version that was included with the original magic, which is mapped\n    // into ORIGINAL_VERSION\n    final byte ORIGINAL_MAGIC_VERSION_WITH_METADATA = 6;\n    // All of the versions should be place in this list.\n    final int ORIGINAL_VERSION = 0;  // version with SEQ\n    final int NEW_MAGIC_VERSION = 1; // version with RCF\n    final int CURRENT_VERSION = NEW_MAGIC_VERSION;\n    byte version;\n\n    byte[] magic = new byte[RC_MAGIC.length];\n    try {\n        in.seek(0);\n        in.readFully(magic);\n\n        if (Arrays.equals(magic, ORIGINAL_MAGIC)) {\n            byte vers = in.readByte();\n            if (vers != ORIGINAL_MAGIC_VERSION_WITH_METADATA) {\n                return false;\n            }\n            version = ORIGINAL_VERSION;\n        } else {\n            if (!Arrays.equals(magic, RC_MAGIC)) {\n                return false;\n            }\n\n            // Set 'version'\n            version = in.readByte();\n            if (version > CURRENT_VERSION) {\n                return false;\n            }\n        }\n\n        if (version == ORIGINAL_VERSION) {\n            try {\n                Class<?> keyCls = hadoopConf.getClassByName(Text.readString(in));\n                Class<?> valCls = hadoopConf.getClassByName(Text.readString(in));\n                if (!keyCls.equals(RCFile.KeyBuffer.class)\n                        || !valCls.equals(RCFile.ValueBuffer.class)) {\n                    return false;\n                }\n            } catch (ClassNotFoundException e) {\n                return false;\n            }\n        }\n        boolean decompress = in.readBoolean(); // is compressed?\n        if (version == ORIGINAL_VERSION) {\n            // is block-compressed? it should be always false.\n            boolean blkCompressed = in.readBoolean();\n            if (blkCompressed) {\n                return false;\n            }\n        }\n        return true;\n    } catch (IOException e) {\n        LOG.info(String.format(\"\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b: [%s] \u4e0d\u662fRC File.\", filepath));\n    }\n    return false;\n}", "path": "DataX/hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/DFSUtil.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "// \u5224\u65adfile\u662f\u5426\u662fSequence file\n", "func_signal": "private boolean isSequenceFile(String filepath, FSDataInputStream in)", "code": "{\n    byte[] SEQ_MAGIC = new byte[]{(byte) 'S', (byte) 'E', (byte) 'Q'};\n    byte[] magic = new byte[SEQ_MAGIC.length];\n    try {\n        in.seek(0);\n        in.readFully(magic);\n        if (Arrays.equals(magic, SEQ_MAGIC)) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (IOException e) {\n        LOG.info(String.format(\"\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b: [%s] \u4e0d\u662fSequence File.\", filepath));\n    }\n    return false;\n}", "path": "DataX/hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/DFSUtil.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u52a0\u5bc6<br>\n * @param data \u88f8\u7684\u539f\u59cb\u6570\u636e\n * @param key  \u7ecf\u8fc7base64\u52a0\u5bc6\u7684\u516c\u94a5(RSA)\u6216\u8005\u88f8\u5bc6\u94a5(3DES)\n * */\n", "func_signal": "public static String encrypt(String data, String key, String method)", "code": "{\n    if (SecretUtil.KEY_ALGORITHM_RSA.equals(method)) {\n        return SecretUtil.encryptRSA(data, key);\n    } else if (SecretUtil.KEY_ALGORITHM_3DES.equals(method)) {\n        return SecretUtil.encrypt3DES(data, key);\n    } else {\n        throw DataXException.asDataXException(\n                FrameworkErrorCode.SECRET_ERROR,\n                String.format(\"\u7cfb\u7edf\u7f16\u7a0b\u9519\u8bef,\u4e0d\u652f\u6301\u7684\u52a0\u5bc6\u7c7b\u578b\", method));\n    }\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u6839\u636e\u5b57\u7b26\u4e32\u751f\u6210\u5bc6\u94a5\u5b57\u8282\u6570\u7ec4\n * \n * @param keyStr\n *            \u5bc6\u94a5\u5b57\u7b26\u4e32\n * @return key \u7b26\u5408DESede\u6807\u51c6\u768424byte\u6570\u7ec4\n */\n", "func_signal": "private static byte[] build3DesKey(String keyStr)", "code": "{\n    try {\n        // \u58f0\u660e\u4e00\u4e2a24\u4f4d\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u9ed8\u8ba4\u91cc\u9762\u90fd\u662f0\uff0cwarn: \u5b57\u7b26\u4e320(48)\u548c\u6570\u7ec4\u9ed8\u8ba4\u503c0\u4e0d\u4e00\u6837\uff0c\u7edf\u4e00\u5b57\u7b26\u4e320(48)\n        byte[] key = \"000000000000000000000000\".getBytes(ENCODING);\n        byte[] temp = keyStr.getBytes(ENCODING);\n        if (key.length > temp.length) {\n            // \u5982\u679ctemp\u4e0d\u591f24\u4f4d\uff0c\u5219\u62f7\u8d1dtemp\u6570\u7ec4\u6574\u4e2a\u957f\u5ea6\u7684\u5185\u5bb9\u5230key\u6570\u7ec4\u4e2d\n            System.arraycopy(temp, 0, key, 0, temp.length);\n        } else {\n            // \u5982\u679ctemp\u5927\u4e8e24\u4f4d\uff0c\u5219\u62f7\u8d1dtemp\u6570\u7ec424\u4e2a\u957f\u5ea6\u7684\u5185\u5bb9\u5230key\u6570\u7ec4\u4e2d\n            System.arraycopy(temp, 0, key, 0, key.length);\n        }\n        return key;\n    } catch (Exception e) {\n        throw DataXException.asDataXException(\n                FrameworkErrorCode.SECRET_ERROR, \"\u6784\u5efa\u4e09\u91cdDES\u5bc6\u5319\u51fa\u9519\", e);\n    }\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u521d\u59cb\u5316\u5bc6\u94a5 for RSA ALGORITHM\n *\n * @return\n * @throws Exception\n */\n", "func_signal": "public static String[] initKey() throws Exception", "code": "{\n    KeyPairGenerator keyPairGen = KeyPairGenerator\n            .getInstance(KEY_ALGORITHM_RSA);\n    keyPairGen.initialize(1024);\n\n    KeyPair keyPair = keyPairGen.generateKeyPair();\n\n    // \u516c\u94a5\n    RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\n\n    // \u79c1\u94a5\n    RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n\n    String[] publicAndPrivateKey = {\n            encryptBASE64(publicKey.getEncoded()),\n            encryptBASE64(privateKey.getEncoded())};\n\n    return publicAndPrivateKey;\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u52a0\u5bc6 DESede<br>\n * \u7528\u5bc6\u94a5\u52a0\u5bc6\n *\n * @param data \u88f8\u7684\u539f\u59cb\u6570\u636e\n * @param key  \u52a0\u5bc6\u7684\u5bc6\u94a5\n * @return \u7ed3\u679c\u4e5f\u91c7\u7528base64\u52a0\u5bc6\n * @throws Exception\n */\n", "func_signal": "public static String encrypt3DES(String data, String key)", "code": "{\n    try {\n        // \u751f\u6210\u5bc6\u94a5\n        SecretKey desKey = new SecretKeySpec(build3DesKey(key),\n                KEY_ALGORITHM_3DES);\n        // \u5bf9\u6570\u636e\u52a0\u5bc6\n        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM_3DES);\n        cipher.init(Cipher.ENCRYPT_MODE, desKey);\n        return encryptBASE64(cipher.doFinal(data.getBytes(ENCODING)));\n    } catch (Exception e) {\n        throw DataXException.asDataXException(\n                FrameworkErrorCode.SECRET_ERROR, \"3\u91cdDES\u52a0\u5bc6\u51fa\u9519\", e);\n    }\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "// \u5224\u65adfile\u662f\u5426\u662fORC File\n", "func_signal": "private boolean isORCFile(Path file, FileSystem fs, FSDataInputStream in)", "code": "{\n    try {\n        // figure out the size of the file using the option or filesystem\n        long size = fs.getFileStatus(file).getLen();\n\n        //read last bytes into buffer to get PostScript\n        int readSize = (int) Math.min(size, DIRECTORY_SIZE_GUESS);\n        in.seek(size - readSize);\n        ByteBuffer buffer = ByteBuffer.allocate(readSize);\n        in.readFully(buffer.array(), buffer.arrayOffset() + buffer.position(),\n                buffer.remaining());\n\n        //read the PostScript\n        //get length of PostScript\n        int psLen = buffer.get(readSize - 1) & 0xff;\n        int len = OrcFile.MAGIC.length();\n        if (psLen < len + 1) {\n            return false;\n        }\n        int offset = buffer.arrayOffset() + buffer.position() + buffer.limit() - 1\n                - len;\n        byte[] array = buffer.array();\n        // now look for the magic string at the end of the postscript.\n        if (Text.decode(array, offset, len).equals(OrcFile.MAGIC)) {\n            return true;\n        } else {\n            // If it isn't there, this may be the 0.11.0 version of ORC.\n            // Read the first 3 bytes of the file to check for the header\n            in.seek(0);\n            byte[] header = new byte[len];\n            in.readFully(header, 0, len);\n            // if it isn't there, this isn't an ORC file\n            if (Text.decode(header, 0, len).equals(OrcFile.MAGIC)) {\n                return true;\n            }\n        }\n    } catch (IOException e) {\n        LOG.info(String.format(\"\u68c0\u67e5\u6587\u4ef6\u7c7b\u578b: [%s] \u4e0d\u662fORC File.\", file.toString()));\n    }\n    return false;\n}", "path": "DataX/hdfsreader/src/main/java/com/alibaba/datax/plugin/reader/hdfsreader/DFSUtil.java", "commit_date": "2019-01-22 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u901a\u8fc7 \"Framework-143\" \u6765\u6807\u793a \u4efb\u52a1\u662f Killed \u72b6\u6001\n */\n", "func_signal": "public int toExitValue()", "code": "{\n    if (this == FrameworkErrorCode.KILLED_EXIT_VALUE) {\n        return 143;\n    } else {\n        return 1;\n    }\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/FrameworkErrorCode.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u89e3\u5bc6<br>\n * \u7528\u79c1\u94a5\u89e3\u5bc6\n *\n * @param data \u5df2\u7ecf\u7ecf\u8fc7base64\u52a0\u5bc6\u7684\u5bc6\u6587\n * @param key  \u5df2\u7ecf\u7ecf\u8fc7base64\u52a0\u5bc6\u79c1\u94a5\n * @return\n * @throws Exception\n */\n", "func_signal": "public static String decryptRSA(String data, String key)", "code": "{\n    try {\n        // \u5bf9\u5bc6\u94a5\u89e3\u5bc6\n        byte[] keyBytes = decryptBASE64(key);\n\n        // \u53d6\u5f97\u79c1\u94a5\n        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);\n        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM_RSA);\n        Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);\n\n        // \u5bf9\u6570\u636e\u89e3\u5bc6\n        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\n\n        return new String(cipher.doFinal(decryptBASE64(data)), ENCODING);\n    } catch (Exception e) {\n        throw DataXException.asDataXException(\n                FrameworkErrorCode.SECRET_ERROR, \"rsa\u89e3\u5bc6\u51fa\u9519\", e);\n    }\n}", "path": "DataX/core/src/main/java/com/alibaba/datax/core/util/SecretUtil.java", "commit_date": "2018-01-31 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "/**\n * \u6839\u636e\u7c7b\u578b\u83b7\u53d6\"\u7a7a\u503c\"\n * \u503c\u7c7b\u578b\u7684\u7a7a\u503c\u90fd\u662f0\uff0cbool\u662ffalse\uff0cString\u662f\u7a7a\u5b57\u7b26\u4e32\n * @param sqlType sql\u6570\u636e\u7c7b\u578b\uff0c\u5b9a\u4e49\u4e8e{@link Types}\n */\n", "func_signal": "private Object getEmptyValue(int sqlType)", "code": "{\n    switch (sqlType) {\n        case Types.VARCHAR:\n            return \"\";\n\n        case Types.BOOLEAN:\n            return false;\n\n        case Types.TINYINT:\n        case Constant.TYPE_UNSIGNED_TINYINT:\n            return (byte) 0;\n\n        case Types.SMALLINT:\n        case Constant.TYPE_UNSIGNED_SMALLINT:\n            return (short) 0;\n\n        case Types.INTEGER:\n        case Constant.TYPE_UNSIGNED_INTEGER:\n            return (int) 0;\n\n        case Types.BIGINT:\n        case Constant.TYPE_UNSIGNED_LONG:\n            return (long) 0;\n\n        case Types.FLOAT:\n            return (float) 0.0;\n\n        case Types.DOUBLE:\n            return (double) 0.0;\n\n        case Types.DECIMAL:\n            return new BigDecimal(0);\n\n        case Types.DATE:\n        case Constant.TYPE_UNSIGNED_DATE:\n            return new java.sql.Date(0);\n\n        case Types.TIME:\n        case Constant.TYPE_UNSIGNED_TIME:\n            return new java.sql.Time(0);\n\n        case Types.TIMESTAMP:\n        case Constant.TYPE_UNSIGNED_TIMESTAMP:\n            return new java.sql.Timestamp(0);\n\n        case Types.BINARY:\n        case Types.VARBINARY:\n            return new byte[0];\n\n        default:\n            throw DataXException.asDataXException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                    \"\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u5217\u7c7b\u578b:\" + sqlType + \", \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e \u6216\u8005 \u8054\u7cfb Hbase \u7ba1\u7406\u5458.\");\n    }\n}", "path": "DataX/hbase11xsqlwriter/src/main/java/com/alibaba/datax/plugin/writer/hbase11xsqlwriter/HbaseSQLWriterTask.java", "commit_date": "2019-05-29 00:00:00", "repo_name": "alibaba/DataX", "stars": 14896, "license": "other", "language": "java", "size": 22774}
{"docstring": "//cleanup entitymanager in case some of the rollback tests left it in an open state\n", "func_signal": "@Override\npublic final void tearDown()", "code": "{\n  injector.getInstance(UnitOfWork.class).end();\n  injector.getInstance(EntityManagerFactory.class).close();\n}", "path": "guice/extensions/persist/test/com/google/inject/persist/jpa/JoiningLocalTransactionsTest.java", "commit_date": "2016-09-13 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "// In some sense, we're really just compressing the outer class since the legend is going to\n// only refer to the outer class.\n", "func_signal": "@Test\npublic void testInnerClassesKeepOuterClassNameToo()", "code": "{\n  String input = \"Something is wrong with foo.bar.baz.Foo.Bar.Baz class!\";\n  String expectedOutput =\n      \"Something is wrong with Foo.Bar.Baz class!\"\n          + LEGEND_HEADER\n          + \"Foo: \\\"foo.bar.baz.Foo\\\"\\n\"\n          + LEGEND_FOOTER;\n  assertThat(PackageNameCompressor.compressPackagesInMessage(input)).isEqualTo(expectedOutput);\n}", "path": "guice/core/test/com/google/inject/internal/PackageNameCompressorTest.java", "commit_date": "2020-10-09 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "// If relying on conflicts by inserting into the map, an extra conflict on c.Foo may result in\n// uneven renaming because when the first two conflict on c.Foo they may make room for the next\n// conflict to just take over what had previously been a conflict. Make sure that this unevenness\n// doesn't happen.\n", "func_signal": "@Test\npublic void testThreeMultiLevelConflicts()", "code": "{\n  String input = \"Something is wrong with z.a.c.Foo, z.b.c.Foo, and z.c.c.Foo class!\";\n  String expectedOutput =\n      \"Something is wrong with a.c.Foo, b.c.Foo, and c.c.Foo class!\"\n          + LEGEND_HEADER\n          + \"a.c.Foo: \\\"z.a.c.Foo\\\"\\n\"\n          + \"b.c.Foo: \\\"z.b.c.Foo\\\"\\n\"\n          + \"c.c.Foo: \\\"z.c.c.Foo\\\"\\n\"\n          + LEGEND_FOOTER;\n  assertThat(PackageNameCompressor.compressPackagesInMessage(input)).isEqualTo(expectedOutput);\n}", "path": "guice/core/test/com/google/inject/internal/PackageNameCompressorTest.java", "commit_date": "2020-10-09 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/** Returns the URLs in the system class path. */\n// TODO(user): Use a common API once that's available.\n", "func_signal": "public static URL[] getClassPathUrls()", "code": "{\n  if (Asserts.class.getClassLoader() instanceof URLClassLoader) {\n    return ((URLClassLoader) Asserts.class.getClassLoader()).getURLs();\n  }\n  ImmutableList.Builder<URL> urls = ImmutableList.builder();\n  for (String entry : Splitter.on(PATH_SEPARATOR.value()).split(JAVA_CLASS_PATH.value())) {\n    try {\n      try {\n        urls.add(new File(entry).toURI().toURL());\n      } catch (SecurityException e) { // File.toURI checks to see if the file is a directory\n        urls.add(new URL(\"file\", null, new File(entry).getAbsolutePath()));\n      }\n    } catch (MalformedURLException e) {\n      AssertionError error = new AssertionError(\"malformed class path entry: \" + entry);\n      error.initCause(e);\n      throw error;\n    }\n  }\n  return urls.build().toArray(new URL[0]);\n}", "path": "guice/core/test/com/google/inject/Asserts.java", "commit_date": "2020-10-16 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Constructs a new key. Derives the type from this class's type parameter.\n *\n * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the\n * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n *\n * <p>Example usage for a binding of type {@code Foo}:\n *\n * <p>{@code new Key<Foo>() {}}.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected Key()", "code": "{\n  this.annotationStrategy = NullAnnotationStrategy.INSTANCE;\n  this.typeLiteral =\n      MoreTypes.canonicalizeForKey(\n          (TypeLiteral<T>) TypeLiteral.fromSuperclassTypeParameter(getClass()));\n  this.hashCode = computeHashCode();\n}", "path": "guice/core/src/com/google/inject/Key.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/** Fails unless {@code object} has the same toString value when reserialized. */\n", "func_signal": "public static void assertSimilarWhenReserialized(Object object) throws IOException", "code": "{\n  Object reserialized = reserialize(object);\n  assertThat(reserialized.toString()).isEqualTo(object.toString());\n}", "path": "guice/core/test/com/google/inject/Asserts.java", "commit_date": "2020-10-16 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "// Memoizer pattern.\n", "func_signal": "private String computePath()", "code": "{\n  if (!isPathComputed()) {\n    String servletPath = super.getServletPath();\n    path = patternMatcher.extractPath(servletPath);\n    pathComputed = true;\n\n    if (null == path) {\n      path = servletPath;\n    }\n  }\n\n  return path;\n}", "path": "guice/extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "// NOTE(user): These two are a bit of a hack to help ensure that request dispatcher-sent\n// requests don't use the same path info that was memoized for the original request.\n// NOTE(user): I don't think this is possible, since the dispatcher-sent request would\n// perform its own wrapping.\n", "func_signal": "private boolean isPathInfoComputed()", "code": "{\n  return pathInfoComputed\n      && servletRequest.getAttribute(REQUEST_DISPATCHER_REQUEST) == null;\n}", "path": "guice/extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Returns the source file appears in error messages based on {@link\n * #getIncludeStackTraceOption()} value.\n */\n", "func_signal": "public static String getDeclaringSourcePart(Class<?> clazz)", "code": "{\n  if (getIncludeStackTraceOption() == IncludeStackTraceOption.OFF) {\n    return \".configure(Unknown Source\";\n  }\n  return \".configure(\" + clazz.getSimpleName() + \".java:\";\n}", "path": "guice/core/test/com/google/inject/Asserts.java", "commit_date": "2020-10-16 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Creates a constant binding to {@code @Named(key)} for each property. This method binds all\n * properties including those inherited from {@link Properties#defaults defaults}.\n */\n", "func_signal": "public static void bindProperties(Binder binder, Properties properties)", "code": "{\n  binder = binder.skipSources(Names.class);\n\n  // use enumeration to include the default properties\n  for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\n    String propertyName = (String) e.nextElement();\n    String value = properties.getProperty(propertyName);\n    binder.bind(Key.get(String.class, new NamedImpl(propertyName))).toInstance(value);\n  }\n}", "path": "guice/core/src/com/google/inject/name/Names.java", "commit_date": "2016-09-13 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "// Parent class uses raw type.\n", "func_signal": "public Object buildBean(Class clazz, Map<String, Object> extraContext)", "code": "{\n   if (strutsInjector == null) {\n     synchronized (this) {\n       if (strutsInjector == null) {\n         createInjector();\n       }\n     }\n   }\n   return strutsInjector.getInstance(clazz);\n }", "path": "guice/extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Constructs a new key. Derives the type from this class's type parameter.\n *\n * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the\n * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n *\n * <p>Example usage for a binding of type {@code Foo} annotated with {@code @Bar}:\n *\n * <p>{@code new Key<Foo>(Bar.class) {}}.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected Key(Class<? extends Annotation> annotationType)", "code": "{\n  this.annotationStrategy = strategyFor(annotationType);\n  this.typeLiteral =\n      MoreTypes.canonicalizeForKey(\n          (TypeLiteral<T>) TypeLiteral.fromSuperclassTypeParameter(getClass()));\n  this.hashCode = computeHashCode();\n}", "path": "guice/core/src/com/google/inject/Key.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/** Unsafe. Constructs a key from a manually specified type. */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate Key(Type type, AnnotationStrategy annotationStrategy)", "code": "{\n  this.annotationStrategy = annotationStrategy;\n  this.typeLiteral = MoreTypes.canonicalizeForKey((TypeLiteral<T>) TypeLiteral.get(type));\n  this.hashCode = computeHashCode();\n}", "path": "guice/core/src/com/google/inject/Key.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/** Creates a constant binding to {@code @Named(key)} for each entry in {@code properties}. */\n", "func_signal": "public static void bindProperties(Binder binder, Map<String, String> properties)", "code": "{\n  binder = binder.skipSources(Names.class);\n  for (Map.Entry<String, String> entry : properties.entrySet()) {\n    String key = entry.getKey();\n    String value = entry.getValue();\n    binder.bind(Key.get(String.class, new NamedImpl(key))).toInstance(value);\n  }\n}", "path": "guice/core/src/com/google/inject/name/Names.java", "commit_date": "2016-09-13 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Constructs a new key. Derives the type from this class's type parameter.\n *\n * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the\n * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n *\n * <p>Example usage for a binding of type {@code Foo} annotated with {@code @Bar}:\n *\n * <p>{@code new Key<Foo>(new Bar()) {}}.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected Key(Annotation annotation)", "code": "{\n  // no usages, not test-covered\n  this.annotationStrategy = strategyFor(annotation);\n  this.typeLiteral =\n      MoreTypes.canonicalizeForKey(\n          (TypeLiteral<T>) TypeLiteral.fromSuperclassTypeParameter(getClass()));\n  this.hashCode = computeHashCode();\n}", "path": "guice/core/src/com/google/inject/Key.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/** Returns true if the given class has a scope annotation. */\n", "func_signal": "private static boolean hasScope(Class<? extends Interceptor> interceptorClass)", "code": "{\n  for (Annotation annotation : interceptorClass.getAnnotations()) {\n    if (Annotations.isScopeAnnotation(annotation.annotationType())) {\n      return true;\n    }\n  }\n  return false;\n}", "path": "guice/extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Fails unless {@code text} includes all {@code substrings}, in order, and optionally {@code\n * allowDuplicates}.\n */\n", "func_signal": "public static void assertContains(String text, boolean allowDuplicates, String... substrings)", "code": "{\n  /*if[NO_AOP]\n  // when we strip out bytecode manipulation, we lose the ability to generate some source lines.\n  if (text.contains(\"(Unknown Source)\")) {\n    return;\n  }\n  end[NO_AOP]*/\n\n  int startingFrom = 0;\n  for (String substring : substrings) {\n    int index = text.indexOf(substring, startingFrom);\n    assertTrue(\n        String.format(\"Expected \\\"%s\\\" to contain substring \\\"%s\\\"\", text, substring),\n        index >= startingFrom);\n    startingFrom = index + substring.length();\n  }\n\n  if (!allowDuplicates) {\n    String lastSubstring = substrings[substrings.length - 1];\n    assertTrue(\n        String.format(\n            \"Expected \\\"%s\\\" to contain substring \\\"%s\\\" only once),\", text, lastSubstring),\n        text.indexOf(lastSubstring, startingFrom) == -1);\n  }\n}", "path": "guice/core/test/com/google/inject/Asserts.java", "commit_date": "2020-10-16 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/** Constructs a key from a manually specified type. */\n", "func_signal": "private Key(TypeLiteral<T> typeLiteral, AnnotationStrategy annotationStrategy)", "code": "{\n  this.annotationStrategy = annotationStrategy;\n  this.typeLiteral = MoreTypes.canonicalizeForKey(typeLiteral);\n  this.hashCode = computeHashCode();\n}", "path": "guice/core/src/com/google/inject/Key.java", "commit_date": "2020-05-27 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Wrapper around the service chain to ensure a servlet is servicing what it must and provides it\n * with a wrapped request.\n *\n * @return Returns true if this servlet triggered for the given request. Or false if guice-servlet\n *     should continue dispatching down the servlet pipeline.\n * @throws IOException If thrown by underlying servlet\n * @throws ServletException If thrown by underlying servlet\n */\n", "func_signal": "public boolean service(ServletRequest servletRequest, ServletResponse servletResponse)\n    throws IOException, ServletException", "code": "{\n\n  final HttpServletRequest request = (HttpServletRequest) servletRequest;\n  final String path = ServletUtils.getContextRelativePath(request);\n\n  final boolean serve = shouldServe(path);\n\n  //invocations of the chain end at the first matched servlet\n  if (serve) {\n    doService(servletRequest, servletResponse);\n  }\n\n  //return false if no servlet matched (so we can proceed down to the web.xml servlets)\n  return serve;\n}", "path": "guice/extensions/servlet/src/com/google/inject/servlet/ServletDefinition.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/**\n * Fails unless {@code expected.equals(actual)}, {@code actual.equals(expected)} and their hash\n * codes are equal. This is useful for testing the equals method itself.\n */\n", "func_signal": "public static void assertEqualsBothWays(Object expected, Object actual)", "code": "{\n  assertNotNull(expected);\n  assertNotNull(actual);\n  assertEquals(\"expected.equals(actual)\", actual, expected);\n  assertEquals(\"actual.equals(expected)\", expected, actual);\n  assertEquals(\"hashCode\", expected.hashCode(), actual.hashCode());\n}", "path": "guice/core/test/com/google/inject/Asserts.java", "commit_date": "2020-10-16 00:00:00", "repo_name": "google/guice", "stars": 12311, "license": "apache-2.0", "language": "java", "size": 123251}
{"docstring": "/** @return a {@code KeyData} containing a {@code HmacKey}. */\n", "func_signal": "public static KeyData createHmacKeyData(byte[] keyValue, int tagSize) throws Exception", "code": "{\n  return createKeyData(\n      createHmacKey(keyValue, tagSize),\n      MacConfig.HMAC_TYPE_URL,\n      KeyData.KeyMaterialType.SYMMETRIC);\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * Uses a z test on the given byte string, expecting all bits to be uniformly set with probability\n * 1/2. Returns non ok status if the z test fails by more than 10 standard deviations.\n *\n * <p>With less statistics jargon: This counts the number of bits set and expects the number to be\n * roughly half of the length of the string. The law of large numbers suggests that we can assume\n * that the longer the string is, the more accurate that estimate becomes for a random string.\n * This test is useful to detect things like strings that are entirely zero.\n *\n * <p>Note: By itself, this is a very weak test for randomness.\n *\n * @throws GeneralSecurityException if uniformity error is detected, otherwise returns normally.\n */\n", "func_signal": "public static void ztestUniformString(byte[] string) throws GeneralSecurityException", "code": "{\n  final double minAcceptableStdDevs = 10.0;\n  double totalBits = string.length * 8;\n  double expected = totalBits / 2.0;\n  double stddev = Math.sqrt(totalBits / 4.0);\n\n  // This test is very limited at low string lengths. Below a certain threshold it tests nothing.\n  if (expected < stddev * minAcceptableStdDevs) {\n    throw new GeneralSecurityException(\n        \"Test will always succeed with strings of the given length \"\n            + string.length\n            + \". Use more bytes.\");\n  }\n\n  long numSetBits = 0;\n  for (byte b : string) {\n    int unsignedInt = toUnsignedInt(b);\n    // Counting the number of bits set in byte:\n    while (unsignedInt != 0) {\n      numSetBits++;\n      unsignedInt = (unsignedInt & (unsignedInt - 1));\n    }\n  }\n  // Check that the number of bits is within 10 stddevs.\n  if (Math.abs((double) numSetBits - expected) < minAcceptableStdDevs * stddev) {\n    return;\n  }\n  throw new GeneralSecurityException(\n      \"Z test for uniformly distributed variable out of bounds; \"\n          + \"Actual number of set bits was \"\n          + numSetBits\n          + \" expected was \"\n          + expected\n          + \" 10 * standard deviation is 10 * \"\n          + stddev\n          + \" = \"\n          + 10.0 * stddev);\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return a keyset from a list of keys. The first key is primary. */\n", "func_signal": "public static Keyset createKeyset(Key primary, Key... keys) throws Exception", "code": "{\n  Keyset.Builder builder = Keyset.newBuilder();\n  builder.addKey(primary).setPrimaryKeyId(primary.getKeyId());\n  for (Key key : keys) {\n    builder.addKey(key);\n  }\n  return builder.build();\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * @return a {@code RsaSsaPkcs1PublicKey} constructed from {@code modulus}, {@code exponent} and\n *     {@code hashType}.\n */\n", "func_signal": "public static RsaSsaPkcs1PublicKey createRsaSsaPkcs1PubKey(\n    byte[] modulus, byte[] exponent, HashType hashType) throws Exception", "code": "{\n  final int version = 0;\n  RsaSsaPkcs1Params params = RsaSsaPkcs1Params.newBuilder().setHashType(hashType).build();\n\n  return RsaSsaPkcs1PublicKey.newBuilder()\n      .setVersion(version)\n      .setParams(params)\n      .setN(ByteString.copyFrom(modulus))\n      .setE(ByteString.copyFrom(exponent))\n      .build();\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return a {@code KeyData} containing a {@code AesEaxKey}. */\n", "func_signal": "public static KeyData createAesEaxKeyData(byte[] keyValue, int ivSizeInBytes) throws Exception", "code": "{\n  AesEaxKey keyProto =\n      AesEaxKey.newBuilder()\n          .setKeyValue(ByteString.copyFrom(keyValue))\n          .setParams(AesEaxParams.newBuilder().setIvSize(ivSizeInBytes).build())\n          .build();\n  return createKeyData(keyProto, AeadConfig.AES_EAX_TYPE_URL, KeyData.KeyMaterialType.SYMMETRIC);\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** Asserts that {@code key} is generated from {@code keyTemplate}. */\n", "func_signal": "public static void assertHmacKey(KeyTemplate keyTemplate, Keyset.Key key) throws Exception", "code": "{\n  assertThat(key.getKeyId()).isGreaterThan(0);\n  assertThat(key.getStatus()).isEqualTo(KeyStatusType.ENABLED);\n  assertThat(key.getOutputPrefixType()).isEqualTo(OutputPrefixType.TINK);\n  assertThat(key.hasKeyData()).isTrue();\n  assertThat(key.getKeyData().getTypeUrl()).isEqualTo(keyTemplate.getTypeUrl());\n\n  HmacKeyFormat hmacKeyFormat =\n      HmacKeyFormat.parseFrom(keyTemplate.getValue(), ExtensionRegistryLite.getEmptyRegistry());\n  HmacKey hmacKey =\n      HmacKey.parseFrom(key.getKeyData().getValue(), ExtensionRegistryLite.getEmptyRegistry());\n  assertThat(hmacKey.getParams()).isEqualTo(hmacKeyFormat.getParams());\n  assertThat(hmacKey.getKeyValue().size()).isEqualTo(hmacKeyFormat.getKeySize());\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * Generates mutations of {@code bytes}, e.g., flipping bits and truncating.\n *\n * @return a list of pairs of mutated value and mutation description.\n */\n", "func_signal": "public static List<BytesMutation> generateMutations(byte[] bytes)", "code": "{\n  List<BytesMutation> res = new ArrayList<BytesMutation>();\n\n  // Flip bits.\n  for (int i = 0; i < bytes.length; i++) {\n    for (int j = 0; j < 8; j++) {\n      byte[] modifiedBytes = Arrays.copyOf(bytes, bytes.length);\n      modifiedBytes[i] = (byte) (modifiedBytes[i] ^ (1 << j));\n      res.add(new BytesMutation(modifiedBytes, String.format(\"Flip bit %d of data\", i)));\n    }\n  }\n\n  // Truncate bytes.\n  for (int i = 0; i < bytes.length; i++) {\n    byte[] modifiedBytes = Arrays.copyOf(bytes, i);\n    res.add(new BytesMutation(modifiedBytes, String.format(\"Truncate upto %d bytes of data\", i)));\n  }\n\n  // Append an extra byte.\n  res.add(new BytesMutation(Arrays.copyOf(bytes, bytes.length + 1), \"Append an extra zero byte\"));\n  return res;\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * Generates the prefix of all cryptographic outputs (ciphertexts, signatures, MACs, ...) produced\n * by the specified {@code key}. The prefix can be either empty (for RAW-type prefix), or consists\n * of a 1-byte indicator of the type of the prefix, followed by 4 bytes of {@code key.key_id} in\n * Big Endian encoding.\n *\n * @throws GeneralSecurityException if the prefix type of {@code key} is unknown.\n * @return a prefix.\n */\n", "func_signal": "public static byte[] getOutputPrefix(Key key) throws GeneralSecurityException", "code": "{\n  switch (key.getOutputPrefixType()) {\n    case LEGACY: // fall through\n    case CRUNCHY:\n      return ByteBuffer.allocate(LEGACY_PREFIX_SIZE) // BIG_ENDIAN by default\n          .put(LEGACY_START_BYTE)\n          .putInt(key.getKeyId())\n          .array();\n    case TINK:\n      return ByteBuffer.allocate(TINK_PREFIX_SIZE) // BIG_ENDIAN by default\n          .put(TINK_START_BYTE)\n          .putInt(key.getKeyId())\n          .array();\n    case RAW:\n      return RAW_PREFIX;\n    default:\n      throw new GeneralSecurityException(\"unknown output prefix type\");\n  }\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/CryptoFormat.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * @return a {@code EcdsaPrivateKey} constructed from {@code EllipticCurveType} and {@code\n *     HashType}.\n */\n", "func_signal": "public static EcdsaPrivateKey generateEcdsaPrivKey(\n    EllipticCurveType curve, HashType hashType, EcdsaSignatureEncoding encoding)\n    throws Exception", "code": "{\n  ECParameterSpec ecParams;\n  switch (curve) {\n    case NIST_P256:\n      ecParams = EllipticCurves.getNistP256Params();\n      break;\n    case NIST_P384:\n      ecParams = EllipticCurves.getNistP384Params();\n      break;\n    case NIST_P521:\n      ecParams = EllipticCurves.getNistP521Params();\n      break;\n    default:\n      throw new NoSuchAlgorithmException(\"Curve not implemented:\" + curve);\n  }\n  KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"EC\");\n  keyGen.initialize(ecParams);\n  KeyPair keyPair = keyGen.generateKeyPair();\n  ECPublicKey pubKey = (ECPublicKey) keyPair.getPublic();\n  ECPrivateKey privKey = (ECPrivateKey) keyPair.getPrivate();\n  ECPoint w = pubKey.getW();\n  EcdsaPublicKey ecdsaPubKey =\n      createEcdsaPubKey(\n          hashType, curve, encoding, w.getAffineX().toByteArray(), w.getAffineY().toByteArray());\n\n  return createEcdsaPrivKey(ecdsaPubKey, privKey.getS().toByteArray());\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * Tests that the crosscorrelation of two strings of equal length points to independent and\n * uniformly distributed strings. Returns non ok status if the z test fails by more than 10\n * standard deviations.\n *\n * <p>With less statistics jargon: This xors two strings and then performs the ZTestUniformString\n * on the result. If the two strings are independent and uniformly distributed, the xor'ed string\n * is as well. A cross correlation test will find whether two strings overlap more or less than it\n * would be expected.\n *\n * <p>Note: Having a correlation of zero is only a necessary but not sufficient condition for\n * independence.\n *\n * @throws GeneralSecurityException if uniformity error is detected, otherwise returns normally.\n */\n", "func_signal": "public static void ztestCrossCorrelationUniformStrings(byte[] string1, byte[] string2)\n    throws GeneralSecurityException", "code": "{\n  if (string1.length != string2.length) {\n    throw new GeneralSecurityException(\"Strings are not of equal length\");\n  }\n  byte[] crossed = new byte[string1.length];\n  for (int i = 0; i < string1.length; i++) {\n    crossed[i] = (byte) (string1[i] ^ string2[i]);\n  }\n  ztestUniformString(crossed);\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return true iff two arrays are equal. */\n", "func_signal": "public static boolean arrayEquals(byte[] a, byte[] b)", "code": "{\n  if (a.length != b.length) {\n    return false;\n  }\n  byte res = 0;\n  for (int i = 0; i < a.length; i++) {\n    res |= (byte) (a[i] ^ b[i]);\n  }\n  return res == 0;\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return a {@code HmacKey}. */\n", "func_signal": "public static HmacKey createHmacKey(byte[] keyValue, int tagSize) throws Exception", "code": "{\n  HmacParams params =\n      HmacParams.newBuilder().setHash(HashType.SHA256).setTagSize(tagSize).build();\n\n  return HmacKey.newBuilder()\n      .setParams(params)\n      .setKeyValue(ByteString.copyFrom(keyValue))\n      .build();\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return a {@code KeyData} containing a {@code AesGcmKey}. */\n", "func_signal": "public static KeyData createAesGcmKeyData(byte[] keyValue) throws Exception", "code": "{\n  AesGcmKey keyProto = AesGcmKey.newBuilder().setKeyValue(ByteString.copyFrom(keyValue)).build();\n  return createKeyData(keyProto, AeadConfig.AES_GCM_TYPE_URL, KeyData.KeyMaterialType.SYMMETRIC);\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * Reads a single key from {@code reader}.\n *\n * @return a {@link Key} or null if the reader doesn't contain a valid PEM.\n */\n", "func_signal": "public Key readKey(BufferedReader reader) throws IOException", "code": "{\n  String line = reader.readLine();\n  while (line != null && !line.startsWith(BEGIN)) {\n    line = reader.readLine();\n  }\n  if (line == null) {\n    return null;\n  }\n\n  line = line.trim().substring(BEGIN.length());\n  int index = line.indexOf(MARKER);\n  if (index < 0) {\n    return null;\n  }\n  String type = line.substring(0, index);\n  String endMarker = END + type + MARKER;\n  StringBuilder base64key = new StringBuilder();\n\n  while ((line = reader.readLine()) != null) {\n    if (line.indexOf(\":\") > 0) {\n      // header, ignore\n      continue;\n    }\n    if (line.contains(endMarker)) {\n      break;\n    }\n    base64key.append(line);\n  }\n  try {\n    byte[] key = Base64.decode(base64key.toString(), Base64.DEFAULT);\n    if (type.contains(PUBLIC_KEY)) {\n      return getPublicKey(key);\n    } else if (type.contains(PRIVATE_KEY)) {\n      return getPrivateKey(key);\n    }\n  } catch (GeneralSecurityException | IllegalArgumentException ex) {\n    return null;\n  }\n  return null;\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/subtle/PemKeyType.java", "commit_date": "2020-04-15 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return a {@code KeyData} from a specified key. */\n", "func_signal": "public static KeyData createKeyData(MessageLite key, String typeUrl, KeyData.KeyMaterialType type)\n    throws Exception", "code": "{\n  return KeyData.newBuilder()\n      .setValue(key.toByteString())\n      .setTypeUrl(typeUrl)\n      .setKeyMaterialType(type)\n      .build();\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return a key with some specified properties. */\n", "func_signal": "public static Key createKey(\n    KeyData keyData, int keyId, KeyStatusType status, OutputPrefixType prefixType)\n    throws Exception", "code": "{\n  return Key.newBuilder()\n      .setKeyData(keyData)\n      .setStatus(status)\n      .setKeyId(keyId)\n      .setOutputPrefixType(prefixType)\n      .build();\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** Verifies that the given entry has the specified contents. */\n", "func_signal": "public static void verifyConfigEntry(\n    KeyTypeEntry entry,\n    String catalogueName,\n    String primitiveName,\n    String typeUrl,\n    Boolean newKeyAllowed,\n    int keyManagerVersion)", "code": "{\n  assertEquals(catalogueName, entry.getCatalogueName());\n  assertEquals(primitiveName, entry.getPrimitiveName());\n  assertEquals(typeUrl, entry.getTypeUrl());\n  assertEquals(newKeyAllowed, entry.getNewKeyAllowed());\n  assertEquals(keyManagerVersion, entry.getKeyManagerVersion());\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/** @return a KMS key URI in a format defined by Google Cloud KMS. */\n", "func_signal": "public static String createGcpKmsKeyUri(\n    String projectId, String location, String ringId, String keyId)", "code": "{\n  return String.format(\n      \"projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s\", projectId, location, ringId, keyId);\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/testing/TestUtil.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * @return a StreamingAead primitive from a {@code keysetHandle}.\n * @throws GeneralSecurityException\n */\n", "func_signal": "public static StreamingAead getPrimitive(KeysetHandle keysetHandle)\n    throws GeneralSecurityException", "code": "{\n  Registry.registerPrimitiveWrapper(new StreamingAeadWrapper());\n  return keysetHandle.getPrimitive(StreamingAead.class);\n}", "path": "tink/java_src/src/main/java/com/google/crypto/tink/streamingaead/StreamingAeadFactory.java", "commit_date": "2020-10-30 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * Read the plaintext from the channel. This implementation assumes that the channel is blocking\n * and throws an AssertionError if an attempt to read plaintext from the channel is incomplete.\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n  try {\n    // Just an arbitrary prime to get the plaintext sizes.\n    int p = 28657;\n    for (int i = 0; i < count; i++) {\n      // All sizes are used once when count > maxPlaintextSize.\n      int size = i * p % (maxPlaintextSize + 1);\n      int aadSize = (i / 2) * p % (maxPlaintextSize + 1);\n      byte[] plaintext = new byte[size];\n      byte[] aad = new byte[aadSize];\n      byte[] ciphertext = cipher.encrypt(plaintext, aad);\n      byte[] decrypted = cipher.decrypt(ciphertext, aad);\n      TestUtil.assertByteArrayEquals(\"Incorrect decryption\", plaintext, decrypted);\n    }\n  } catch (Exception ex) {\n    getUncaughtExceptionHandler().uncaughtException(this, ex);\n  }\n}", "path": "tink/java_src/src/test/java/com/google/crypto/tink/subtle/AeadThreadSafetyTest.java", "commit_date": "2020-06-05 00:00:00", "repo_name": "tink-crypto/tink", "stars": 13434, "license": "apache-2.0", "language": "java", "size": 58337}
{"docstring": "/**\n * \u6a21\u62df\u4e24\u4e2a\u7528\u6237\n *\n * @return List<User>\n */\n", "func_signal": "private static List<User> users()", "code": "{\n    List<User> users = new ArrayList<>();\n    // \u6a21\u62df\u4e24\u4e2a\u7528\u6237\uff1a\n    // 1. \u7528\u6237\u540d admin\uff0c\u5bc6\u7801 123456\uff0c\u89d2\u8272 admin\uff08\u7ba1\u7406\u5458\uff09\uff0c\u6743\u9650 \"user:add\"\uff0c\"user:view\"\n    // 1. \u7528\u6237\u540d scott\uff0c\u5bc6\u7801 123456\uff0c\u89d2\u8272 regist\uff08\u6ce8\u518c\u7528\u6237\uff09\uff0c\u6743\u9650 \"user:view\"\n    users.add(new User(\n            \"admin\",\n            \"bfc62b3f67a4c3e57df84dad8cc48a3b\",\n            new HashSet<>(Collections.singletonList(\"admin\")),\n            new HashSet<>(Arrays.asList(\"user:add\", \"user:view\"))));\n    users.add(new User(\n            \"scott\",\n            \"11bd73355c7bbbac151e4e4f943e59be\",\n            new HashSet<>(Collections.singletonList(\"regist\")),\n            new HashSet<>(Collections.singletonList(\"user:view\"))));\n    return users;\n}", "path": "SpringAll/62.Spring-Boot-Shiro-JWT/src/main/java/com/example/demo/utils/SystemUtils.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// \u5c06\u4efb\u52a1\u8f6c\u6362\u4e3a\u7279\u6b8a\u7684\u6b65\u9aa4\n", "func_signal": "private Step childJobTwoStep()", "code": "{\n    return new JobStepBuilder(new StepBuilder(\"childJobTwoStep\"))\n            .job(childJobTwo())\n            .launcher(jobLauncher)\n            .repository(jobRepository)\n            .transactionManager(platformTransactionManager)\n            .build();\n}", "path": "SpringAll/67.spring-batch-start/src/main/java/cc/mrbird/batch/job/NestedJobDemo.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u83b7\u53d6\u7528\u6237\n *\n * @param username \u7528\u6237\u540d\n * @return \u7528\u6237\n */\n", "func_signal": "public static User getUser(String username)", "code": "{\n    List<User> users = SystemUtils.users();\n    return users.stream().filter(user -> StringUtils.equalsIgnoreCase(username, user.getUsername())).findFirst().orElse(null);\n}", "path": "SpringAll/62.Spring-Boot-Shiro-JWT/src/main/java/com/example/demo/utils/SystemUtils.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u751f\u6210\u524d\u7aef\u9700\u8981\u7684\u7528\u6237\u4fe1\u606f\uff0c\u5305\u62ec\uff1a\n * 1. token\n * 2. user\n *\n * @param token token\n * @param user  \u7528\u6237\u4fe1\u606f\n * @return UserInfo\n */\n", "func_signal": "private Map<String, Object> generateUserInfo(String token, User user)", "code": "{\n    String username = user.getUsername();\n    Map<String, Object> userInfo = new HashMap<>();\n    userInfo.put(\"token\", token);\n\n    user.setPassword(\"it's a secret\");\n    userInfo.put(\"user\", user);\n    return userInfo;\n}", "path": "SpringAll/62.Spring-Boot-Shiro-JWT/src/main/java/com/example/demo/controller/LoginController.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u65b0\u589e\u548c\u4fee\u6539\u90fd\u662f save\u65b9\u6cd5\uff0c\n * id \u5b58\u5728\u4e3a\u4fee\u6539\uff0cid \u4e0d\u5b58\u5728\u4e3a\u65b0\u589e\n */\n", "func_signal": "public User createUser(User user)", "code": "{\n    user.setId(null);\n    return userDao.save(user);\n}", "path": "SpringAll/56.Spring-Boot-MongoDB-crud/src/main/java/com/example/mongodb/service/UserService.java", "commit_date": "2019-04-04 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u751f\u6210 token\n *\n * @param username \u7528\u6237\u540d\n * @param secret   \u7528\u6237\u7684\u5bc6\u7801\n * @return token\n */\n", "func_signal": "public static String sign(String username, String secret)", "code": "{\n    try {\n        username = StringUtils.lowerCase(username);\n        Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME);\n        Algorithm algorithm = Algorithm.HMAC256(secret);\n        return JWT.create()\n                .withClaim(\"username\", username)\n                .withExpiresAt(date)\n                .sign(algorithm);\n    } catch (Exception e) {\n        log.error(\"error\uff1a{}\", e);\n        return null;\n    }\n}", "path": "SpringAll/62.Spring-Boot-Shiro-JWT/src/main/java/com/example/demo/authentication/JWTUtil.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u6821\u9a8c token\u662f\u5426\u6b63\u786e\n *\n * @param token  \u5bc6\u94a5\n * @param secret \u7528\u6237\u7684\u5bc6\u7801\n * @return \u662f\u5426\u6b63\u786e\n */\n", "func_signal": "public static boolean verify(String token, String username, String secret)", "code": "{\n    try {\n        Algorithm algorithm = Algorithm.HMAC256(secret);\n        JWTVerifier verifier = JWT.require(algorithm)\n                .withClaim(\"username\", username)\n                .build();\n        verifier.verify(token);\n        log.info(\"token is valid\");\n        return true;\n    } catch (Exception e) {\n        log.info(\"token is invalid{}\", e.getMessage());\n        return false;\n    }\n}", "path": "SpringAll/62.Spring-Boot-Shiro-JWT/src/main/java/com/example/demo/authentication/JWTUtil.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u83b7\u53d6\u7528\u6237\u89d2\u8272\u548c\u6743\u9650\n */\n", "func_signal": "@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal)", "code": "{\n\tUser user = (User) SecurityUtils.getSubject().getPrincipal();\n\tString userName = user.getUserName();\n\n\tSystem.out.println(\"\u7528\u6237\" + userName + \"\u83b7\u53d6\u6743\u9650-----ShiroRealm.doGetAuthorizationInfo\");\n\tSimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();\n\n\t// \u83b7\u53d6\u7528\u6237\u89d2\u8272\u96c6\n\tList<Role> roleList = userRoleMapper.findByUserName(userName);\n\tSet<String> roleSet = new HashSet<String>();\n\tfor (Role r : roleList) {\n\t\troleSet.add(r.getName());\n\t}\n\tsimpleAuthorizationInfo.setRoles(roleSet);\n\n\t// \u83b7\u53d6\u7528\u6237\u6743\u9650\u96c6\n\tList<Permission> permissionList = userPermissionMapper.findByUserName(userName);\n\tSet<String> permissionSet = new HashSet<String>();\n\tfor (Permission p : permissionList) {\n\t\tpermissionSet.add(p.getName());\n\t}\n\tsimpleAuthorizationInfo.setStringPermissions(permissionSet);\n\treturn simpleAuthorizationInfo;\n}", "path": "SpringAll/13.Spring-Boot-Shiro-Authorization/src/main/java/com/springboot/shiro/ShiroRealm.java", "commit_date": "2018-11-16 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// \u7f13\u5b58\u7ba1\u7406\u5668\n", "func_signal": "@Bean\npublic CacheManager cacheManager(@SuppressWarnings(\"rawtypes\") RedisTemplate redisTemplate)", "code": "{\n\tRedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n\t// \u8bbe\u7f6e\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\n\tcacheManager.setDefaultExpiration(10000);\n\treturn cacheManager;\n}", "path": "SpringAll/09.Spring-Boot-Redis-Cache/src/main/java/com/springboot/config/RedisConfig.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u83b7\u53d6\u7528\u6237\u89d2\u8272\u548c\u6743\u9650\n */\n", "func_signal": "@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal)", "code": "{\n\tUser user = (User) SecurityUtils.getSubject().getPrincipal();\n\tString userName = user.getUserName();\n\n\tSystem.out.println(\"\u7528\u6237\" + userName + \"\u83b7\u53d6\u6743\u9650-----ShiroRealm.doGetAuthorizationInfo\");\n\tSimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();\n\n\t// \u83b7\u53d6\u7528\u6237\u89d2\u8272\u96c6\n\tList<Role> roleList = userRoleMapper.findByUserName(userName);\n\tSet<String> roleSet = new HashSet<String>();\n\tfor (Role r : roleList) {\n\t\troleSet.add(r.getName());\n\t}\n\tsimpleAuthorizationInfo.setRoles(roleSet);\n\n\t// \u83b7\u53d6\u7528\u6237\u6743\u9650\u96c6\n\tList<Permission> permissionList = userPermissionMapper.findByUserName(userName);\n\tSet<String> permissionSet = new HashSet<String>();\n\tfor (Permission p : permissionList) {\n\t\tpermissionSet.add(p.getName());\n\t}\n\tsimpleAuthorizationInfo.setStringPermissions(permissionSet);\n\treturn simpleAuthorizationInfo;\n}", "path": "SpringAll/15.Spring-Boot-Shiro-Ehcache/src/main/java/com/springboot/shiro/ShiroRealm.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u83b7\u53d6\u7528\u6237\u89d2\u8272\u548c\u6743\u9650\n */\n", "func_signal": "@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal)", "code": "{\n\tUser user = (User) SecurityUtils.getSubject().getPrincipal();\n\tString userName = user.getUserName();\n\n\tSystem.out.println(\"\u7528\u6237\" + userName + \"\u83b7\u53d6\u6743\u9650-----ShiroRealm.doGetAuthorizationInfo\");\n\tSimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();\n\n\t// \u83b7\u53d6\u7528\u6237\u89d2\u8272\u96c6\n\tList<Role> roleList = userRoleMapper.findByUserName(userName);\n\tSet<String> roleSet = new HashSet<String>();\n\tfor (Role r : roleList) {\n\t\troleSet.add(r.getName());\n\t}\n\tsimpleAuthorizationInfo.setRoles(roleSet);\n\n\t// \u83b7\u53d6\u7528\u6237\u6743\u9650\u96c6\n\tList<Permission> permissionList = userPermissionMapper.findByUserName(userName);\n\tSet<String> permissionSet = new HashSet<String>();\n\tfor (Permission p : permissionList) {\n\t\tpermissionSet.add(p.getName());\n\t}\n\tsimpleAuthorizationInfo.setStringPermissions(permissionSet);\n\treturn simpleAuthorizationInfo;\n}", "path": "SpringAll/16.Spring-Boot-Shiro-Thymeleaf-Tag/src/main/java/com/springboot/shiro/ShiroRealm.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u4ece token\u4e2d\u83b7\u53d6\u7528\u6237\u540d\n *\n * @return token\u4e2d\u5305\u542b\u7684\u7528\u6237\u540d\n */\n", "func_signal": "public static String getUsername(String token)", "code": "{\n    try {\n        DecodedJWT jwt = JWT.decode(token);\n        return jwt.getClaim(\"username\").asString();\n    } catch (JWTDecodeException e) {\n        log.error(\"error\uff1a{}\", e.getMessage());\n        return null;\n    }\n}", "path": "SpringAll/62.Spring-Boot-Shiro-JWT/src/main/java/com/example/demo/authentication/JWTUtil.java", "commit_date": "2019-06-18 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// \u81ea\u5b9a\u4e49\u7f13\u5b58key\u751f\u6210\u7b56\u7565\n", "func_signal": "@Bean\npublic KeyGenerator keyGenerator()", "code": "{\n\treturn new KeyGenerator() {\n\t\t@Override\n\t\tpublic Object generate(Object target, java.lang.reflect.Method method, Object... params) {\n\t\t\tStringBuffer sb = new StringBuffer();\n\t\t\tsb.append(target.getClass().getName());\n\t\t\tsb.append(method.getName());\n\t\t\tfor (Object obj : params) {\n\t\t\t\tsb.append(obj.toString());\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\t};\n}", "path": "SpringAll/09.Spring-Boot-Redis-Cache/src/main/java/com/springboot/config/RedisConfig.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u6ce8\u518cJobRegistryBeanPostProcessor bean\n * \u7528\u4e8e\u5c06\u4efb\u52a1\u540d\u79f0\u548c\u5b9e\u9645\u7684\u4efb\u52a1\u5173\u8054\u8d77\u6765\n */\n", "func_signal": "@Bean\npublic JobRegistryBeanPostProcessor processor(JobRegistry jobRegistry, ApplicationContext applicationContext)", "code": "{\n    JobRegistryBeanPostProcessor postProcessor = new JobRegistryBeanPostProcessor();\n    postProcessor.setJobRegistry(jobRegistry);\n    postProcessor.setBeanFactory(applicationContext.getAutowireCapableBeanFactory());\n    return postProcessor;\n}", "path": "SpringAll/73.spring-batch-launcher/src/main/java/cc/mrbird/batch/configure/JobConfigure.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// @Async\n", "func_signal": "public Future<String> asyncMethod()", "code": "{\n    sleep();\n    logger.info(\"\u5f02\u6b65\u65b9\u6cd5\u5185\u90e8\u7ebf\u7a0b\u540d\u79f0\uff1a{}\", Thread.currentThread().getName());\n    return new AsyncResult<>(\"hello async\");\n}", "path": "SpringAll/49.Spring-Boot-Async/src/main/java/com/example/demo/service/TestService.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// @Override\n// public void addCorsMappings(CorsRegistry registry) {\n//     registry.addMapping(\"/**\")\n//             .allowedOrigins(\"*\")\n//             .allowedMethods(\"GET\");\n// }\n", "func_signal": "@Bean\npublic FilterRegistrationBean corsFilter()", "code": "{\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    CorsConfiguration config = new CorsConfiguration();\n    config.setAllowCredentials(true);\n    config.addAllowedOrigin(\"*\");\n    source.registerCorsConfiguration(\"/**\", config);\n    FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source));\n    bean.setOrder(0);\n    return bean;\n}", "path": "SpringAll/48.Spring-Boot-CORS-Support/src/main/java/com/example/demo/config/WebConfigurer.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// \u5c06\u4efb\u52a1\u8f6c\u6362\u4e3a\u7279\u6b8a\u7684\u6b65\u9aa4\n", "func_signal": "private Step childJobOneStep()", "code": "{\n    return new JobStepBuilder(new StepBuilder(\"childJobOneStep\"))\n            .job(childJobOne())\n            .launcher(jobLauncher)\n            .repository(jobRepository)\n            .transactionManager(platformTransactionManager)\n            .build();\n}", "path": "SpringAll/67.spring-batch-start/src/main/java/cc/mrbird/batch/job/NestedJobDemo.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// CompositeItemProcessor\u7ec4\u5408\u591a\u79cd\u4e2d\u95f4\u5904\u7406\u5668\n", "func_signal": "private CompositeItemProcessor<TestData, TestData> compositeItemProcessor()", "code": "{\n    CompositeItemProcessor<TestData, TestData> processor = new CompositeItemProcessor<>();\n    List<ItemProcessor<TestData, TestData>> processors = Arrays.asList(testDataFilterItemProcessor, testDataTransformItemPorcessor);\n    // \u4ee3\u7406\u4e24\u4e2aprocessor\n    processor.setDelegates(processors);\n    return processor;\n}", "path": "SpringAll/70.spring-batch-itemprocessor/src/main/java/cc/mrbird/batch/entity/job/CompositeItemProcessorDemo.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * \u83b7\u53d6\u7528\u6237\u89d2\u8272\u548c\u6743\u9650\n */\n", "func_signal": "@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal)", "code": "{\n\tUser user = (User) SecurityUtils.getSubject().getPrincipal();\n\tString userName = user.getUserName();\n\n\tSystem.out.println(\"\u7528\u6237\" + userName + \"\u83b7\u53d6\u6743\u9650-----ShiroRealm.doGetAuthorizationInfo\");\n\tSimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();\n\n\t// \u83b7\u53d6\u7528\u6237\u89d2\u8272\u96c6\n\tList<Role> roleList = userRoleMapper.findByUserName(userName);\n\tSet<String> roleSet = new HashSet<String>();\n\tfor (Role r : roleList) {\n\t\troleSet.add(r.getName());\n\t}\n\tsimpleAuthorizationInfo.setRoles(roleSet);\n\n\t// \u83b7\u53d6\u7528\u6237\u6743\u9650\u96c6\n\tList<Permission> permissionList = userPermissionMapper.findByUserName(userName);\n\tSet<String> permissionSet = new HashSet<String>();\n\tfor (Permission p : permissionList) {\n\t\tpermissionSet.add(p.getName());\n\t}\n\tsimpleAuthorizationInfo.setStringPermissions(permissionSet);\n\treturn simpleAuthorizationInfo;\n}", "path": "SpringAll/14.Spring-Boot-Shiro-Redis/src/main/java/com/springboot/shiro/ShiroRealm.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "// \u8f93\u51fa\u6570\u636e\u5230\u591a\u4e2a\u6587\u4ef6\n", "func_signal": "private CompositeItemWriter<TestData> multiFileItemWriter()", "code": "{\n    // \u4f7f\u7528CompositeItemWriter\u4ee3\u7406\n    CompositeItemWriter<TestData> writer = new CompositeItemWriter<>();\n    // \u8bbe\u7f6e\u5177\u4f53\u5199\u4ee3\u7406\n    writer.setDelegates(Arrays.asList(fileItemWriter, xmlFileItemWriter));\n    return writer;\n}", "path": "SpringAll/69.spring-batch-itemwriter/src/main/java/cc/mrbird/batch/job/MultiFileItemWriteDemo.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "wuyouzhuguli/SpringAll", "stars": 27560, "license": "mit", "language": "java", "size": 1069}
{"docstring": "/**\n * Perform a {@link #put(Object, Object)} of all key/value pairs in <var>map</var>\n * @param map The map whose contents are to be retrieved.\n */\n", "func_signal": "@Override\npublic void putAll(Map<? extends K, ? extends V> map)", "code": "{\n    ensureCapacity(mSize + map.size());\n    for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n        put(entry.getKey(), entry.getValue());\n    }\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArrayMap.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * java.io thinks that a read at EOF is an error and should return -1, contrary to traditional\n * Unix practice where you'd read until you got 0 bytes (and any future read would return -1).\n */\n", "func_signal": "public static int read(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws IOException", "code": "{\n    ArrayUtils.checkOffsetAndCount(bytes.length, byteOffset, byteCount);\n    if (byteCount == 0) {\n        return 0;\n    }\n    try {\n        int readCount = Os.read(fd, bytes, byteOffset, byteCount);\n        if (readCount == 0) {\n            return -1;\n        }\n        return readCount;\n    } catch (ErrnoException errnoException) {\n        if (errnoException.errno == OsConstants.EAGAIN) {\n            // We return 0 rather than throw if we try to read from an empty non-blocking pipe.\n            return 0;\n        }\n        throw new IOException(errnoException);\n    }\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/installer/FileBridge.java", "commit_date": "2017-01-29 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Puts a key/value pair into the array, optimizing for the case where\n * the key is greater than all existing keys in the array.\n */\n", "func_signal": "public void append(int key, E value)", "code": "{\n    if (mSize != 0 && key <= mKeys[mSize - 1]) {\n        put(key, value);\n        return;\n    }\n\n    if (mGarbage && mSize >= mKeys.length) {\n        gc();\n    }\n\n    int pos = mSize;\n    if (pos >= mKeys.length) {\n        int n =  ContainerHelpers.idealIntArraySize(pos + 1);\n\n        int[] nkeys = new int[n];\n        Object[] nvalues = new Object[n];\n\n        // Log.e(\"SparseArray\", \"grow \" + mKeys.length + \" to \" + n);\n        System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);\n        System.arraycopy(mValues, 0, nvalues, 0, mValues.length);\n\n        mKeys = nkeys;\n        mValues = nvalues;\n    }\n\n    mKeys[pos] = key;\n    mValues[pos] = value;\n    mSize = pos + 1;\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Given an index in the range <code>0...size()-1</code>, returns\n * the key from the <code>index</code>th key-value mapping that this\n * SparseArray stores.\n */\n", "func_signal": "public int keyAt(int index)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    return mKeys[index];\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Returns the index for which {@link #keyAt} would return the\n * specified key, or a negative number if the specified\n * key is not mapped.\n */\n", "func_signal": "public int indexOfKey(int key)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    return  ContainerHelpers.binarySearch(mKeys, mSize, key);\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Creates a new SparseArray containing no mappings that will not\n * require any additional memory allocation to store the specified\n * number of mappings.  If you supply an initial capacity of 0, the\n * sparse array will be initialized with a light-weight representation\n * not requiring any additional array allocations.\n */\n", "func_signal": "public SparseArray(int initialCapacity)", "code": "{\n    if (initialCapacity == 0) {\n        mKeys =  ContainerHelpers.EMPTY_INTS;\n        mValues =  ContainerHelpers.EMPTY_OBJECTS;\n    } else {\n        initialCapacity =  ContainerHelpers.idealIntArraySize(initialCapacity);\n        mKeys = new int[initialCapacity];\n        mValues = new Object[initialCapacity];\n    }\n    mSize = 0;\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Given an index in the range <code>0...size()-1</code>, sets a new\n * value for the <code>index</code>th key-value mapping that this\n * SparseArray stores.\n */\n", "func_signal": "public void setValueAt(int index, E value)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    mValues[index] = value;\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * \u62c6\u5165\u6362\u884c\u7b26\uff0c\u89e3\u51b3\u4e2d\u82f1\u6587\u7684\u6362\u884c\u95ee\u9898\n *\n * @param text  \u5185\u5bb9\n * @param paint \u753b\u7b14\n * @return \u8c03\u6574\u540e\u7684\u5185\u5bb9\n */\n", "func_signal": "public CharSequence getLineBreaks(\n        CharSequence text, TextPaint paint)", "code": "{\n    int width = textView.getTextWidth();\n    boolean keepWord = textView.isKeepWord();\n    if (width <= 0 || keepWord)\n        return text;\n    int length = text.length();\n    int start = 0, end = 1;\n\n    SpannableStringBuilder ssb = new SpannableStringBuilder();\n    while (end <= length) {\n        CharSequence c = text.subSequence(end - 1, end);\n//            char c = text.charAt(end - 1);// cs\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n//            boolean needCheck = false;\n        if (TextUtils.equals(c, \"\\n\")) {// \u5df2\u7ecf\u6362\u884c\n            ssb.append(text, start, end);\n            start = end;\n//                needCheck = true;\n        } else {\n            float lw = paint.measureText(text, start, end);\n            if (lw > width) {// \u8d85\u51fa\u5bbd\u5ea6\uff0c\u9000\u56de\u4e00\u4e2a\u4f4d\u7f6e\n                ssb.append(text, start, end - 1);\n                start = end - 1;\n                if (end < length) {\n                    CharSequence c2 = text.subSequence(end - 1, end);\n                    if (!TextUtils.equals(c2, \"\\n\"))\n                        ssb.append('\\n');\n                }\n//                    needCheck = true;\n            } else if (lw == width) {\n                ssb.append(text, start, end);\n                start = end;\n                if (end < length) {\n                    CharSequence c2 = text.subSequence(end, end + 1);\n                    if (!TextUtils.equals(c2, \"\\n\"))\n                        ssb.append('\\n');\n                }\n//                    needCheck = true;\n            } else if (end == length) {\n                // \u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n                ssb.append(text, start, end);\n                start = end;\n            }\n        }\n        end++;\n    }\n    return ssb;\n}", "path": "VirtualXposed/VirtualApp/app/src/main/java/io/virtualapp/widgets/fittext/FitTextHelper.java", "commit_date": "2017-09-05 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Validate if our internal table has some wrong value.\n *\n * @return true when the table looks correct.\n */\n", "func_signal": "private static boolean doSelfValidation()", "code": "{\n    char lastChar = UNIHANS[0];\n    String lastString = Character.toString(lastChar);\n    for (char c : UNIHANS) {\n        if (lastChar == c) {\n            continue;\n        }\n        final String curString = Character.toString(c);\n        int cmp = COLLATOR.compare(lastString, curString);\n        if (cmp >= 0) {\n            Log.e(TAG, \"Internal error in Unihan table. \" + \"The last string \\\"\" + lastString\n                    + \"\\\" is greater than current string \\\"\" + curString + \"\\\".\");\n            return false;\n        }\n        lastString = curString;\n    }\n    return true;\n}", "path": "VirtualXposed/VirtualApp/app/src/main/java/io/virtualapp/utils/HanziToPinyin.java", "commit_date": "2018-06-06 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Removes the mapping from the specified key, if there was any.\n */\n", "func_signal": "public void delete(int key)", "code": "{\n    int i =  ContainerHelpers.binarySearch(mKeys, mSize, key);\n\n    if (i >= 0) {\n        if (mValues[i] != DELETED) {\n            mValues[i] = DELETED;\n            mGarbage = true;\n        }\n    }\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Returns an index for which {@link #valueAt} would return the\n * specified key, or a negative number if no keys map to the\n * specified value.\n * <p>Beware that this is a linear search, unlike lookups by key,\n * and that multiple keys can map to the same value and this will\n * find only one of them.\n * <p>Note also that unlike most collections' {@code indexOf} methods,\n * this method compares values using {@code ==} rather than {@code equals}.\n */\n", "func_signal": "public int indexOfValue(E value)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    for (int i = 0; i < mSize; i++)\n        if (mValues[i] == value)\n            return i;\n\n    return -1;\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>This implementation composes a string by iterating over its mappings. If\n * this map contains itself as a value, the string \"(this Map)\"\n * will appear in its place.\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    if (size() <= 0) {\n        return \"{}\";\n    }\n\n    StringBuilder buffer = new StringBuilder(mSize * 28);\n    buffer.append('{');\n    for (int i=0; i<mSize; i++) {\n        if (i > 0) {\n            buffer.append(\", \");\n        }\n        int key = keyAt(i);\n        buffer.append(key);\n        buffer.append('=');\n        Object value = valueAt(i);\n        if (value != this) {\n            buffer.append(value);\n        } else {\n            buffer.append(\"(this Map)\");\n        }\n    }\n    buffer.append('}');\n    return buffer.toString();\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Adds a mapping from the specified key to the specified value,\n * replacing the previous mapping from the specified key if there\n * was one.\n */\n", "func_signal": "public void put(int key, E value)", "code": "{\n    int i =  ContainerHelpers.binarySearch(mKeys, mSize, key);\n\n    if (i >= 0) {\n        mValues[i] = value;\n    } else {\n        i = ~i;\n\n        if (i < mSize && mValues[i] == DELETED) {\n            mKeys[i] = key;\n            mValues[i] = value;\n            return;\n        }\n\n        if (mGarbage && mSize >= mKeys.length) {\n            gc();\n\n            // Search again because indices may have changed.\n            i = ~ ContainerHelpers.binarySearch(mKeys, mSize, key);\n        }\n\n        if (mSize >= mKeys.length) {\n            int n =  ContainerHelpers.idealIntArraySize(mSize + 1);\n\n            int[] nkeys = new int[n];\n            Object[] nvalues = new Object[n];\n\n            // Log.e(\"SparseArray\", \"grow \" + mKeys.length + \" to \" + n);\n            System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);\n            System.arraycopy(mValues, 0, nvalues, 0, mValues.length);\n\n            mKeys = nkeys;\n            mValues = nvalues;\n        }\n\n        if (mSize - i != 0) {\n            // Log.e(\"SparseArray\", \"move \" + (mSize - i));\n            System.arraycopy(mKeys, i, mKeys, i + 1, mSize - i);\n            System.arraycopy(mValues, i, mValues, i + 1, mSize - i);\n        }\n\n        mKeys[i] = key;\n        mValues[i] = value;\n        mSize++;\n    }\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/***\n * \u83b7\u53d6\u6587\u672c\u6846\u7684\u5e03\u5c40\n *\n * @param textView\n * @return\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\npublic static Layout.Alignment getLayoutAlignment(TextView textView)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        return Layout.Alignment.ALIGN_NORMAL;\n    }\n\n    Layout.Alignment alignment;\n    switch (textView.getTextAlignment()) {\n        case TextView.TEXT_ALIGNMENT_GRAVITY:\n            switch (textView.getGravity() & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) {\n                case Gravity.START:\n                    alignment = Layout.Alignment.ALIGN_NORMAL;\n                    break;\n                case Gravity.END:\n                    alignment = Layout.Alignment.ALIGN_OPPOSITE;\n                    break;\n                case Gravity.LEFT:\n                    alignment = (textView.getLayoutDirection() == TextView.LAYOUT_DIRECTION_RTL) ? Layout.Alignment.ALIGN_OPPOSITE\n                            : Layout.Alignment.ALIGN_NORMAL;\n                    break;\n                case Gravity.RIGHT:\n                    alignment = (textView.getLayoutDirection() == TextView.LAYOUT_DIRECTION_RTL) ? Layout.Alignment.ALIGN_NORMAL\n                            : Layout.Alignment.ALIGN_OPPOSITE;\n                    break;\n                case Gravity.CENTER_HORIZONTAL:\n                    alignment = Layout.Alignment.ALIGN_CENTER;\n                    break;\n                default:\n                    alignment = Layout.Alignment.ALIGN_NORMAL;\n                    break;\n            }\n            break;\n        case TextView.TEXT_ALIGNMENT_TEXT_START:\n            alignment = Layout.Alignment.ALIGN_NORMAL;\n            break;\n        case TextView.TEXT_ALIGNMENT_TEXT_END:\n            alignment = Layout.Alignment.ALIGN_OPPOSITE;\n            break;\n        case TextView.TEXT_ALIGNMENT_CENTER:\n            alignment = Layout.Alignment.ALIGN_CENTER;\n            break;\n        case TextView.TEXT_ALIGNMENT_VIEW_START:\n            alignment = Layout.Alignment.ALIGN_NORMAL;\n            break;\n        case TextView.TEXT_ALIGNMENT_VIEW_END:\n            alignment = Layout.Alignment.ALIGN_OPPOSITE;\n            break;\n        case TextView.TEXT_ALIGNMENT_INHERIT:\n            //\n        default:\n            alignment = Layout.Alignment.ALIGN_NORMAL;\n            break;\n    }\n    return alignment;\n}", "path": "VirtualXposed/VirtualApp/app/src/main/java/io/virtualapp/widgets/fittext/FitTextHelper.java", "commit_date": "2017-09-05 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * \u786e\u5b9aView\u5bbd\u5ea6\u5927\u5c0f\n */\n", "func_signal": "private int measureWidth(int widthMeasureSpec)", "code": "{\n    int result;\n    int specMode = MeasureSpec.getMode(widthMeasureSpec);\n    int specSize = MeasureSpec.getSize(widthMeasureSpec);\n    if (specMode == MeasureSpec.EXACTLY) {//\u5927\u5c0f\u786e\u5b9a\u76f4\u63a5\u4f7f\u7528\n        result = specSize;\n    } else {\n        int padding = getPaddingLeft() + getPaddingRight();\n        mTextPaint.setColor(mTextColor);\n        mTextPaint.setTextSize(mTextSize);\n        float textWidth = mTextPaint.measureText(mTextContent + \"\");\n        result = (int) ((padding + (int) textWidth) * Math.sqrt(2));\n        //\u5982\u679c\u7236\u89c6\u56fe\u7684\u6d4b\u91cf\u8981\u6c42\u4e3aAT_MOST,\u5373\u9650\u5b9a\u4e86\u4e00\u4e2a\u6700\u5927\u503c,\u5219\u518d\u4ece\u7cfb\u7edf\u5efa\u8bae\u503c\u548c\u81ea\u5df1\u8ba1\u7b97\u503c\u4e2d\u53bb\u4e00\u4e2a\u8f83\u5c0f\u503c\n        if (specMode == MeasureSpec.AT_MOST) {\n            result = Math.min(result, specSize);\n        }\n\n        result = Math.max((int) mMinSize, result);\n    }\n\n    return result;\n}", "path": "VirtualXposed/VirtualApp/app/src/main/java/io/virtualapp/widgets/LabelView.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * java.io always writes every byte it's asked to, or fails with an error. (That is, unlike\n * Unix it never just writes as many bytes as happens to be convenient.)\n */\n", "func_signal": "public static void write(FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws IOException", "code": "{\n    ArrayUtils.checkOffsetAndCount(bytes.length, byteOffset, byteCount);\n    if (byteCount == 0) {\n        return;\n    }\n    try {\n        while (byteCount > 0) {\n            int bytesWritten = Os.write(fd, bytes, byteOffset, byteCount);\n            byteCount -= bytesWritten;\n            byteOffset += bytesWritten;\n        }\n    } catch (ErrnoException errnoException) {\n        throw new IOException(errnoException);\n    }\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/installer/FileBridge.java", "commit_date": "2017-01-29 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * @return \u6587\u672c\u6846\u7684\u5f53\u524d\u6700\u5927\u884c\u6570\n */\n", "func_signal": "protected int getMaxLineCount()", "code": "{\n    float vspace = textView.getTextLineHeight();\n    float height = textView.getTextHeight();\n    return (int) (height / vspace);\n}", "path": "VirtualXposed/VirtualApp/app/src/main/java/io/virtualapp/widgets/fittext/FitTextHelper.java", "commit_date": "2017-09-05 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * @hide\n * Removes the mapping from the specified key, if there was any, returning the old value.\n */\n", "func_signal": "public E removeReturnOld(int key)", "code": "{\n    int i = ContainerHelpers.binarySearch(mKeys, mSize, key);\n\n    if (i >= 0) {\n        if (mValues[i] != DELETED) {\n            final E old = (E) mValues[i];\n            mValues[i] = DELETED;\n            mGarbage = true;\n            return old;\n        }\n    }\n    return null;\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Returns the number of key-value mappings that this SparseArray\n * currently stores.\n */\n", "func_signal": "public int size()", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    return mSize;\n}", "path": "VirtualXposed/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/***\n * @param textView textview\n * @return \u662f\u5426\u662f\u5355\u884c\n */\n", "func_signal": "public static boolean isSingleLine(TextView textView)", "code": "{\n    if (textView == null) return false;\n    if (textView instanceof BaseTextView) {\n        return ((BaseTextView) textView).isSingleLine();\n    }\n    if (textView == null) {\n        return false;\n    }\n    int type = textView.getInputType();\n    return (type & EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE) == EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE;\n}", "path": "VirtualXposed/VirtualApp/app/src/main/java/io/virtualapp/widgets/fittext/FitTextHelper.java", "commit_date": "2017-09-05 00:00:00", "repo_name": "android-hacker/VirtualXposed", "stars": 14959, "license": "gpl-3.0", "language": "java", "size": 49794}
{"docstring": "/**\n * Obtains new FileAsyncHttpResponseHandler against context with target being temporary file\n *\n * @param context Context, must not be null\n */\n", "func_signal": "public FileAsyncHttpResponseHandler(Context context)", "code": "{\n    super();\n    this.file = getTemporaryFile(context);\n    this.append = false;\n    this.renameIfExists = false;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Creates new JsonHttpResponseHandler with JSON String encoding UTF-8 and given RFC5179CompatibilityMode\n *\n * @param useRFC5179CompatibilityMode Boolean mode to use RFC5179 or latest\n */\n", "func_signal": "public JsonHttpResponseHandler(boolean useRFC5179CompatibilityMode)", "code": "{\n    super(DEFAULT_CHARSET);\n    this.useRFC5179CompatibilityMode = useRFC5179CompatibilityMode;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Obtains new FileAsyncHttpResponseHandler and stores response in passed file\n *\n * @param file                     File to store response within, must not be null\n * @param append                   whether data should be appended to existing file\n * @param renameTargetFileIfExists whether target file should be renamed if it already exists\n * @param usePoolThread Whether to use the pool's thread to fire callbacks\n */\n", "func_signal": "public FileAsyncHttpResponseHandler(File file, boolean append, boolean renameTargetFileIfExists,boolean usePoolThread)", "code": "{\n    super(usePoolThread);\n    Utils.asserts(file != null, \"File passed into FileAsyncHttpResponseHandler constructor must not be null\");\n    if (!file.isDirectory() && !file.getParentFile().isDirectory()) {\n        Utils.asserts(file.getParentFile().mkdirs(), \"Cannot create parent directories for requested File location\");\n    }\n    if (file.isDirectory()) {\n        if (!file.mkdirs()) {\n            AsyncHttpClient.log.d(LOG_TAG, \"Cannot create directories for requested Directory location, might not be a problem\");\n        }\n    }\n    this.file = file;\n    this.append = append;\n    this.renameIfExists = renameTargetFileIfExists;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Will return File instance for file representing last URL segment in given folder.\n * If file already exists and renameTargetFileIfExists was set as true, will try to find file\n * which doesn't exist, naming template for such cases is \"filename.ext\" =&gt; \"filename (%d).ext\",\n * or without extension \"filename\" =&gt; \"filename (%d)\"\n *\n * @return File in given directory constructed by last segment of request URL\n */\n", "func_signal": "protected File getTargetFileByParsingURL()", "code": "{\n    Utils.asserts(getOriginalFile().isDirectory(), \"Target file is not a directory, cannot proceed\");\n    Utils.asserts(getRequestURI() != null, \"RequestURI is null, cannot proceed\");\n    String requestURL = getRequestURI().toString();\n    String filename = requestURL.substring(requestURL.lastIndexOf('/') + 1, requestURL.length());\n    File targetFileRtn = new File(getOriginalFile(), filename);\n    if (targetFileRtn.exists() && renameIfExists) {\n        String format;\n        if (!filename.contains(\".\")) {\n            format = filename + \" (%d)\";\n        } else {\n            format = filename.substring(0, filename.lastIndexOf('.')) + \" (%d)\" + filename.substring(filename.lastIndexOf('.'), filename.length());\n        }\n        int index = 0;\n        while (true) {\n            targetFileRtn = new File(getOriginalFile(), String.format(format, index));\n            if (!targetFileRtn.exists())\n                return targetFileRtn;\n            index++;\n        }\n    }\n    return targetFileRtn;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Converts hex values from strings to byte arra\n *\n * @param hexString string of hex-encoded values\n * @return decoded byte array\n */\n", "func_signal": "protected byte[] hexStringToByteArray(String hexString)", "code": "{\n    int len = hexString.length();\n    byte[] data = new byte[len / 2];\n    for (int i = 0; i < len; i += 2) {\n        data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i + 1), 16));\n    }\n    return data;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Helper method to send runnable into local handler loop\n *\n * @param runnable runnable instance, can be null\n */\n", "func_signal": "protected void postRunnable(Runnable runnable)", "code": "{\n    if (runnable != null) {\n        if (getUseSynchronousMode() || handler == null) {\n            // This response handler is synchronous, run on current thread\n            runnable.run();\n        } else {\n            // Otherwise, run on provided handler\n            handler.post(runnable);\n        }\n    }\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Serializes Cookie object into String\n *\n * @param cookie cookie to be encoded, can be null\n * @return cookie encoded as String\n */\n", "func_signal": "protected String encodeCookie(SerializableCookie cookie)", "code": "{\n    if (cookie == null)\n        return null;\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    try {\n        ObjectOutputStream outputStream = new ObjectOutputStream(os);\n        outputStream.writeObject(cookie);\n    } catch (IOException e) {\n        AsyncHttpClient.log.d(LOG_TAG, \"IOException in encodeCookie\", e);\n        return null;\n    }\n\n    return byteArrayToHexString(os.toByteArray());\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Construct a persistent cookie store.\n *\n * @param context Context to attach cookie store to\n */\n", "func_signal": "public PersistentCookieStore(Context context)", "code": "{\n    cookiePrefs = context.getSharedPreferences(COOKIE_PREFS, 0);\n    cookies = new ConcurrentHashMap<String, Cookie>();\n\n    // Load any previously stored cookies into the store\n    String storedCookieNames = cookiePrefs.getString(COOKIE_NAME_STORE, null);\n    if (storedCookieNames != null) {\n        String[] cookieNames = TextUtils.split(storedCookieNames, \",\");\n        for (String name : cookieNames) {\n            String encodedCookie = cookiePrefs.getString(COOKIE_NAME_PREFIX + name, null);\n            if (encodedCookie != null) {\n                Cookie decodedCookie = decodeCookie(encodedCookie);\n                if (decodedCookie != null) {\n                    cookies.put(name, decodedCookie);\n                }\n            }\n        }\n\n        // Clear out expired cookies\n        clearExpired(new Date());\n    }\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Deconstructs response into given content handler\n *\n * @param entity returned HttpEntity\n * @return deconstructed response\n * @throws java.io.IOException if there is problem assembling SAX response from stream\n * @see cz.msebera.android.httpclient.HttpEntity\n */\n", "func_signal": "@Override\nprotected byte[] getResponseData(HttpEntity entity) throws IOException", "code": "{\n    if (entity != null) {\n        InputStream instream = entity.getContent();\n        InputStreamReader inputStreamReader = null;\n        if (instream != null) {\n            try {\n                SAXParserFactory sfactory = SAXParserFactory.newInstance();\n                SAXParser sparser = sfactory.newSAXParser();\n                XMLReader rssReader = sparser.getXMLReader();\n                rssReader.setContentHandler(handler);\n                inputStreamReader = new InputStreamReader(instream, getCharset());\n                rssReader.parse(new InputSource(inputStreamReader));\n            } catch (SAXException e) {\n                AsyncHttpClient.log.e(LOG_TAG, \"getResponseData exception\", e);\n            } catch (ParserConfigurationException e) {\n                AsyncHttpClient.log.e(LOG_TAG, \"getResponseData exception\", e);\n            } finally {\n                AsyncHttpClient.silentCloseInputStream(instream);\n                if (inputStreamReader != null) {\n                    try {\n                        inputStreamReader.close();\n                    } catch (IOException e) { /*ignore*/ }\n                }\n            }\n        }\n    }\n    return null;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Retrieves File which represents response final location after possible renaming\n *\n * @return File final target file\n */\n", "func_signal": "public File getTargetFile()", "code": "{\n    if (frontendFile == null) {\n        frontendFile = getOriginalFile().isDirectory() ? getTargetFileByParsingURL() : getOriginalFile();\n    }\n    return frontendFile;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Non-standard helper method, to delete cookie\n *\n * @param cookie cookie to be removed\n */\n", "func_signal": "public void deleteCookie(Cookie cookie)", "code": "{\n    String name = cookie.getName() + cookie.getDomain();\n    cookies.remove(name);\n    SharedPreferences.Editor prefsWriter = cookiePrefs.edit();\n    prefsWriter.remove(COOKIE_NAME_PREFIX + name);\n    prefsWriter.apply();\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Using some super basic byte array &lt;-&gt; hex conversions so we don't have to rely on any\n * large Base64 libraries. Can be overridden if you like!\n *\n * @param bytes byte array to be converted\n * @return string containing hex values\n */\n", "func_signal": "protected String byteArrayToHexString(byte[] bytes)", "code": "{\n    StringBuilder sb = new StringBuilder(bytes.length * 2);\n    for (byte element : bytes) {\n        int v = element & 0xff;\n        if (v < 16) {\n            sb.append('0');\n        }\n        sb.append(Integer.toHexString(v));\n    }\n    return sb.toString().toUpperCase(Locale.US);\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Will throw AssertionError, if expression is not true\n *\n * @param expression    result of your asserted condition\n * @param failedMessage message to be included in error log\n * @throws java.lang.AssertionError\n */\n", "func_signal": "public static void asserts(final boolean expression, final String failedMessage)", "code": "{\n    if (!expression) {\n        throw new AssertionError(failedMessage);\n    }\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/Utils.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Used when there is no file to be used when calling constructor\n *\n * @param context Context, must not be null\n * @return temporary file or null if creating file failed\n */\n", "func_signal": "protected File getTemporaryFile(Context context)", "code": "{\n    Utils.asserts(context != null, \"Tried creating temporary file without having Context\");\n    try {\n        return File.createTempFile(\"temp_\", \"_handled\", context.getCacheDir());\n    } catch (IOException e) {\n        AsyncHttpClient.log.e(LOG_TAG, \"Cannot create temporary file\", e);\n    }\n    return null;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "// Methods which emulate android's Handler and Message methods\n", "func_signal": "protected void handleMessage(Message message)", "code": "{\n    Object[] response;\n\n    try {\n        switch (message.what) {\n            case SUCCESS_MESSAGE:\n                response = (Object[]) message.obj;\n                if (response != null && response.length >= 3) {\n                    onSuccess((Integer) response[0], (Header[]) response[1], (byte[]) response[2]);\n                } else {\n                    AsyncHttpClient.log.e(LOG_TAG, \"SUCCESS_MESSAGE didn't got enough params\");\n                }\n                break;\n            case FAILURE_MESSAGE:\n                response = (Object[]) message.obj;\n                if (response != null && response.length >= 4) {\n                    onFailure((Integer) response[0], (Header[]) response[1], (byte[]) response[2], (Throwable) response[3]);\n                } else {\n                    AsyncHttpClient.log.e(LOG_TAG, \"FAILURE_MESSAGE didn't got enough params\");\n                }\n                break;\n            case START_MESSAGE:\n                onStart();\n                break;\n            case FINISH_MESSAGE:\n                onFinish();\n                break;\n            case PROGRESS_MESSAGE:\n                response = (Object[]) message.obj;\n                if (response != null && response.length >= 2) {\n                    try {\n                        onProgress((Long) response[0], (Long) response[1]);\n                    } catch (Throwable t) {\n                        AsyncHttpClient.log.e(LOG_TAG, \"custom onProgress contains an error\", t);\n                    }\n                } else {\n                    AsyncHttpClient.log.e(LOG_TAG, \"PROGRESS_MESSAGE didn't got enough params\");\n                }\n                break;\n            case RETRY_MESSAGE:\n                response = (Object[]) message.obj;\n                if (response != null && response.length == 1) {\n                    onRetry((Integer) response[0]);\n                } else {\n                    AsyncHttpClient.log.e(LOG_TAG, \"RETRY_MESSAGE didn't get enough params\");\n                }\n                break;\n            case CANCEL_MESSAGE:\n                onCancel();\n                break;\n        }\n    } catch (Throwable error) {\n        onUserException(error);\n    }\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Retrieves File object in which the response is stored\n *\n * @return File file in which the response was to be stored\n */\n", "func_signal": "protected File getOriginalFile()", "code": "{\n    Utils.asserts(file != null, \"Target file is null, fatal!\");\n    return file;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Returns Object of type {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer, Long,\n * Double or {@link JSONObject#NULL}, see {@link org.json.JSONTokener#nextValue()}\n *\n * @param responseBody response bytes to be assembled in String and parsed as JSON\n * @return Object parsedResponse\n * @throws org.json.JSONException exception if thrown while parsing JSON\n */\n", "func_signal": "protected Object parseResponse(byte[] responseBody) throws JSONException", "code": "{\n    if (null == responseBody)\n        return null;\n    Object result = null;\n    //trim the string to prevent start with blank, and test if the string is valid JSON, because the parser don't do this :(. If JSON is not valid this will return null\n    String jsonString = getResponseString(responseBody, getCharset());\n    if (jsonString != null) {\n        jsonString = jsonString.trim();\n        if (useRFC5179CompatibilityMode) {\n            if (jsonString.startsWith(\"{\") || jsonString.startsWith(\"[\")) {\n                result = new JSONTokener(jsonString).nextValue();\n            }\n        } else {\n            // Check if the string is an JSONObject style {} or JSONArray style []\n            // If not we consider this as a string\n            if ((jsonString.startsWith(\"{\") && jsonString.endsWith(\"}\"))\n                    || jsonString.startsWith(\"[\") && jsonString.endsWith(\"]\")) {\n                result = new JSONTokener(jsonString).nextValue();\n            }\n            // Check if this is a String \"my String value\" and remove quote\n            // Other value type (numerical, boolean) should be without quote\n            else if (jsonString.startsWith(\"\\\"\") && jsonString.endsWith(\"\\\"\")) {\n                result = jsonString.substring(1, jsonString.length() - 1);\n            }\n        }\n    }\n    if (result == null) {\n        result = jsonString;\n    }\n    return result;\n}\n\npublic boolean isUseRFC5179CompatibilityMode() {\n    return useRFC5179CompatibilityMode;\n}\n\npublic void setUseRFC5179CompatibilityMode(boolean useRFC5179CompatibilityMode) {\n    this.useRFC5179CompatibilityMode = useRFC5179CompatibilityMode;\n}\n\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Creates new JsonHttpResponseHandler with given JSON String encoding and RFC5179CompatibilityMode\n *\n * @param encoding                    String encoding to be used when parsing JSON\n * @param useRFC5179CompatibilityMode Boolean mode to use RFC5179 or latest\n */\n", "func_signal": "public JsonHttpResponseHandler(String encoding, boolean useRFC5179CompatibilityMode)", "code": "{\n    super(encoding);\n    this.useRFC5179CompatibilityMode = useRFC5179CompatibilityMode;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Will throw IllegalArgumentException if provided object is null on runtime\n *\n * @param argument object that should be asserted as not null\n * @param name     name of the object asserted\n * @throws java.lang.IllegalArgumentException\n */\n", "func_signal": "public static <T> T notNull(final T argument, final String name)", "code": "{\n    if (argument == null) {\n        throw new IllegalArgumentException(name + \" should not be null!\");\n    }\n    return argument;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/Utils.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * Returns cookie decoded from cookie string\n *\n * @param cookieString string of cookie as returned from http request\n * @return decoded cookie or null if exception occured\n */\n", "func_signal": "protected Cookie decodeCookie(String cookieString)", "code": "{\n    byte[] bytes = hexStringToByteArray(cookieString);\n    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n    Cookie cookie = null;\n    try {\n        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);\n        cookie = ((SerializableCookie) objectInputStream.readObject()).getCookie();\n    } catch (IOException e) {\n        AsyncHttpClient.log.d(LOG_TAG, \"IOException in decodeCookie\", e);\n    } catch (ClassNotFoundException e) {\n        AsyncHttpClient.log.d(LOG_TAG, \"ClassNotFoundException in decodeCookie\", e);\n    }\n\n    return cookie;\n}", "path": "android-async-http/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java", "commit_date": "2019-07-22 00:00:00", "repo_name": "android-async-http/android-async-http", "stars": 10641, "license": "apache-2.0", "language": "java", "size": 3063}
{"docstring": "/**\n * @param columnName      \u5217\u540d\n * @param columnType      \u5217\u7684\u6570\u636e\u7c7b\u578b\n * @param isPrimary       \u662f\u5426\u4e3a\u4e3b\u952e\n * @param isNotNull       \u662f\u5426\u4e0d\u80fd\u4e3a\u7a7a\n * @param isAutoincrement \u662f\u5426\u81ea\u589e\n */\n", "func_signal": "public ColumnEntity(String columnName, String columnType, boolean isPrimary, boolean isNotNull, boolean isAutoincrement)", "code": "{\n    this.columnName = columnName;\n    this.columnType = columnType;\n    this.isPrimary = isPrimary;\n    this.isNotNull = isNotNull;\n    this.isAutoincrement = isAutoincrement;\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/db/ColumnEntity.java", "commit_date": "2017-05-31 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u4f20\u5165 -1 \u8868\u793a\u6c38\u4e45\u6709\u6548,\u9ed8\u8ba4\u503c\u5373\u4e3a -1 */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic R cacheTime(long cacheTime)", "code": "{\n    if (cacheTime <= -1) cacheTime = CacheEntity.CACHE_NEVER_EXPIRE;\n    this.cacheTime = cacheTime;\n    return (R) this;\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/request/base/Request.java", "commit_date": "2017-07-12 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/**\n * \u8bf7\u6c42\u6210\u529f\u540e\u6839\u636e\u7f13\u5b58\u6a21\u5f0f\uff0c\u66f4\u65b0\u7f13\u5b58\u6570\u636e\n *\n * @param headers \u54cd\u5e94\u5934\n * @param data    \u54cd\u5e94\u6570\u636e\n */\n", "func_signal": "private void saveCache(Headers headers, T data)", "code": "{\n    if (request.getCacheMode() == CacheMode.NO_CACHE) return;    //\u4e0d\u9700\u8981\u7f13\u5b58,\u76f4\u63a5\u8fd4\u56de\n    if (data instanceof Bitmap) return;             //Bitmap\u6ca1\u6709\u5b9e\u73b0Serializable,\u4e0d\u80fd\u7f13\u5b58\n\n    CacheEntity<T> cache = HeaderParser.createCacheEntity(headers, data, request.getCacheMode(), request.getCacheKey());\n    if (cache == null) {\n        //\u670d\u52a1\u5668\u4e0d\u9700\u8981\u7f13\u5b58\uff0c\u79fb\u9664\u672c\u5730\u7f13\u5b58\n        CacheManager.getInstance().remove(request.getCacheKey());\n    } else {\n        //\u7f13\u5b58\u547d\u4e2d\uff0c\u66f4\u65b0\u7f13\u5b58\n        CacheManager.getInstance().replace(request.getCacheKey(), cache);\n    }\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/cache/policy/BaseCachePolicy.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** Rx\u652f\u6301,\u83b7\u53d6\u540c\u6b65call\u5bf9\u8c61 */\n", "func_signal": "public <E> E adapt(AdapterParam param, CallAdapter<T, E> adapter)", "code": "{\n    Call<T> innerCall = call;\n    if (innerCall == null) {\n        innerCall = new CacheCall<>(this);\n    }\n    return adapter.adapt(innerCall, param);\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/request/base/Request.java", "commit_date": "2017-07-12 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u83b7\u53d6okhttp\u7684\u540c\u6b65call\u5bf9\u8c61 */\n", "func_signal": "public okhttp3.Call getRawCall()", "code": "{\n    //\u6784\u5efa\u8bf7\u6c42\u4f53\uff0c\u8fd4\u56decall\u5bf9\u8c61\n    RequestBody requestBody = generateRequestBody();\n    if (requestBody != null) {\n        ProgressRequestBody<T> progressRequestBody = new ProgressRequestBody<>(requestBody, callback);\n        progressRequestBody.setInterceptor(uploadInterceptor);\n        mRequest = generateRequest(progressRequestBody);\n    } else {\n        mRequest = generateRequest(null);\n    }\n    if (client == null) client = OkGo.getInstance().getOkHttpClient();\n    return client.newCall(mRequest);\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/request/base/Request.java", "commit_date": "2017-07-12 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u83b7\u53d6\u6df1\u4e3b\u9898\u8272 */\n", "func_signal": "public int getDarkColorPrimary()", "code": "{\n    TypedValue typedValue = new TypedValue();\n    getTheme().resolveAttribute(R.attr.colorPrimaryDark, typedValue, true);\n    return typedValue.data;\n}", "path": "okhttp-OkGo/demo/src/main/java/com/lzy/demo/base/BaseActivity.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u9ed8\u8ba4\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570 */\n", "func_signal": "public HttpParams.FileWrapper getFileParam(String key)", "code": "{\n    List<HttpParams.FileWrapper> values = params.fileParamsMap.get(key);\n    if (values != null && values.size() > 0) return values.get(0);\n    return null;\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/request/base/Request.java", "commit_date": "2017-07-12 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272 */\n", "func_signal": "protected void initSystemBarTint()", "code": "{\n    Window window = getWindow();\n    if (translucentStatusBar()) {\n        // \u8bbe\u7f6e\u72b6\u6001\u680f\u5168\u900f\u660e\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n            window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n            window.setStatusBarColor(Color.TRANSPARENT);\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        }\n        return;\n    }\n    // \u6c89\u6d78\u5f0f\u72b6\u6001\u680f\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        //5.0\u4ee5\u4e0a\u4f7f\u7528\u539f\u751f\u65b9\u6cd5\n        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n        window.setStatusBarColor(setStatusBarColor());\n    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        //4.4-5.0\u4f7f\u7528\u4e09\u65b9\u5de5\u5177\u7c7b\uff0c\u6709\u4e9b4.4\u7684\u624b\u673a\u6709\u95ee\u9898\uff0c\u8fd9\u91cc\u4e3a\u6f14\u793a\u65b9\u4fbf\uff0c\u4e0d\u4f7f\u7528\u6c89\u6d78\u5f0f\n//            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        SystemBarTintManager tintManager = new SystemBarTintManager(this);\n        tintManager.setStatusBarTintEnabled(true);\n        tintManager.setStatusBarTintColor(setStatusBarColor());\n    }\n}", "path": "okhttp-OkGo/demo/src/main/java/com/lzy/demo/base/BaseActivity.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/**\n * \u83b7\u53d6\u5b57\u7b26\u4e32\u7684 MD5\n */\n", "func_signal": "public static String encode(String str)", "code": "{\n    try {\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.update(str.getBytes(\"UTF-8\"));\n        byte messageDigest[] = md5.digest();\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : messageDigest) {\n            hexString.append(String.format(\"%02X\", b));\n        }\n        return hexString.toString().toLowerCase();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return \"\";\n}", "path": "okhttp-OkGo/demo/src/main/java/com/lzy/demo/utils/MD5Utils.java", "commit_date": "2017-05-27 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u83b7\u53d6\u4e3b\u9898\u8272 */\n", "func_signal": "public int getColorPrimary()", "code": "{\n    TypedValue typedValue = new TypedValue();\n    getTheme().resolveAttribute(R.attr.colorPrimary, typedValue, true);\n    return typedValue.data;\n}", "path": "okhttp-OkGo/demo/src/main/java/com/lzy/demo/base/BaseActivity.java", "commit_date": "2017-06-05 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/**\n * \u8be5\u65b9\u6cd5\u662f\u5b50\u7ebf\u7a0b\u5904\u7406\uff0c\u4e0d\u80fd\u505aui\u76f8\u5173\u7684\u5de5\u4f5c\n * \u4e3b\u8981\u4f5c\u7528\u662f\u89e3\u6790\u7f51\u7edc\u8fd4\u56de\u7684 response \u5bf9\u8c61\uff0c\u751f\u6210onSuccess\u56de\u8c03\u4e2d\u9700\u8981\u7684\u6570\u636e\u5bf9\u8c61\n * \u8fd9\u91cc\u7684\u89e3\u6790\u5de5\u4f5c\u4e0d\u540c\u7684\u4e1a\u52a1\u903b\u8f91\u57fa\u672c\u90fd\u4e0d\u4e00\u6837,\u6240\u4ee5\u9700\u8981\u81ea\u5df1\u5b9e\u73b0,\u4ee5\u4e0b\u7ed9\u51fa\u7684\u65f6\u6a21\u677f\u4ee3\u7801,\u5b9e\u9645\u4f7f\u7528\u6839\u636e\u9700\u8981\u4fee\u6539\n */\n", "func_signal": "@Override\npublic T convertResponse(Response response) throws Throwable", "code": "{\n\n    // \u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff0c\u4e0d\u540c\u7684\u4e1a\u52a1\uff0c\u8fd9\u91cc\u7684\u4ee3\u7801\u903b\u8f91\u90fd\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u4f60\u4e0d\u4fee\u6539\uff0c\u90a3\u4e48\u57fa\u672c\u4e0d\u53ef\u7528\n    // \u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff0c\u4e0d\u540c\u7684\u4e1a\u52a1\uff0c\u8fd9\u91cc\u7684\u4ee3\u7801\u903b\u8f91\u90fd\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u4f60\u4e0d\u4fee\u6539\uff0c\u90a3\u4e48\u57fa\u672c\u4e0d\u53ef\u7528\n    // \u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff0c\u4e0d\u540c\u7684\u4e1a\u52a1\uff0c\u8fd9\u91cc\u7684\u4ee3\u7801\u903b\u8f91\u90fd\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u4f60\u4e0d\u4fee\u6539\uff0c\u90a3\u4e48\u57fa\u672c\u4e0d\u53ef\u7528\n\n    // \u5982\u679c\u4f60\u5bf9\u8fd9\u91cc\u7684\u4ee3\u7801\u539f\u7406\u4e0d\u6e05\u695a\uff0c\u53ef\u4ee5\u770b\u8fd9\u91cc\u7684\u8be6\u7ec6\u539f\u7406\u8bf4\u660e: https://github.com/jeasonlzy/okhttp-OkGo/wiki/JsonCallback\n    // \u5982\u679c\u4f60\u5bf9\u8fd9\u91cc\u7684\u4ee3\u7801\u539f\u7406\u4e0d\u6e05\u695a\uff0c\u53ef\u4ee5\u770b\u8fd9\u91cc\u7684\u8be6\u7ec6\u539f\u7406\u8bf4\u660e: https://github.com/jeasonlzy/okhttp-OkGo/wiki/JsonCallback\n    // \u5982\u679c\u4f60\u5bf9\u8fd9\u91cc\u7684\u4ee3\u7801\u539f\u7406\u4e0d\u6e05\u695a\uff0c\u53ef\u4ee5\u770b\u8fd9\u91cc\u7684\u8be6\u7ec6\u539f\u7406\u8bf4\u660e: https://github.com/jeasonlzy/okhttp-OkGo/wiki/JsonCallback\n\n    if (type == null) {\n        if (clazz == null) {\n            // \u5982\u679c\u6ca1\u6709\u901a\u8fc7\u6784\u9020\u51fd\u6570\u4f20\u8fdb\u6765\uff0c\u5c31\u81ea\u52a8\u89e3\u6790\u7236\u7c7b\u6cdb\u578b\u7684\u771f\u5b9e\u7c7b\u578b\uff08\u6709\u5c40\u9650\u6027\uff0c\u7ee7\u627f\u540e\u5c31\u65e0\u6cd5\u89e3\u6790\u5230\uff09\n            Type genType = getClass().getGenericSuperclass();\n            type = ((ParameterizedType) genType).getActualTypeArguments()[0];\n        } else {\n            return parseClass(response, clazz);\n        }\n    }\n\n    if (type instanceof ParameterizedType) {\n        return parseParameterizedType(response, (ParameterizedType) type);\n    } else if (type instanceof Class) {\n        return parseClass(response, (Class<?>) type);\n    } else {\n        return parseType(response, type);\n    }\n}", "path": "okhttp-OkGo/demo/src/main/java/com/lzy/demo/callback/JsonConvert.java", "commit_date": "2017-06-14 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** Rx\u652f\u6301,\u83b7\u53d6\u540c\u6b65call\u5bf9\u8c61 */\n", "func_signal": "public <E> E adapt(CallAdapter<T, E> adapter)", "code": "{\n    Call<T> innerCall = call;\n    if (innerCall == null) {\n        innerCall = new CacheCall<>(this);\n    }\n    return adapter.adapt(innerCall, null);\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/request/base/Request.java", "commit_date": "2017-07-12 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/**\n * User-Agent: Mozilla/5.0 (Linux; U; Android 5.0.2; zh-cn; Redmi Note 3 Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36\n */\n", "func_signal": "public static String getUserAgent()", "code": "{\n    if (TextUtils.isEmpty(userAgent)) {\n        String webUserAgent = null;\n        try {\n            Class<?> sysResCls = Class.forName(\"com.android.internal.R$string\");\n            Field webUserAgentField = sysResCls.getDeclaredField(\"web_user_agent\");\n            Integer resId = (Integer) webUserAgentField.get(null);\n            webUserAgent = OkGo.getInstance().getContext().getString(resId);\n        } catch (Exception e) {\n            // We have nothing to do\n        }\n        if (TextUtils.isEmpty(webUserAgent)) {\n            webUserAgent = \"okhttp-okgo/jeasonlzy\";\n        }\n\n        Locale locale = Locale.getDefault();\n        StringBuffer buffer = new StringBuffer();\n        // Add version\n        final String version = Build.VERSION.RELEASE;\n        if (version.length() > 0) {\n            buffer.append(version);\n        } else {\n            // default to \"1.0\"\n            buffer.append(\"1.0\");\n        }\n        buffer.append(\"; \");\n        final String language = locale.getLanguage();\n        if (language != null) {\n            buffer.append(language.toLowerCase(locale));\n            final String country = locale.getCountry();\n            if (!TextUtils.isEmpty(country)) {\n                buffer.append(\"-\");\n                buffer.append(country.toLowerCase(locale));\n            }\n        } else {\n            // default to \"en\"\n            buffer.append(\"en\");\n        }\n        // add the model for the release build\n        if (\"REL\".equals(Build.VERSION.CODENAME)) {\n            final String model = Build.MODEL;\n            if (model.length() > 0) {\n                buffer.append(\"; \");\n                buffer.append(model);\n            }\n        }\n        final String id = Build.ID;\n        if (id.length() > 0) {\n            buffer.append(\" Build/\");\n            buffer.append(id);\n        }\n        userAgent = String.format(webUserAgent, buffer, \"Mobile \");\n        return userAgent;\n    }\n    return userAgent;\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/model/HttpHeaders.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u7684 MD5\n */\n", "func_signal": "public static String encode(File file)", "code": "{\n    try {\n        MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n        FileInputStream inputStream = new FileInputStream(file);\n        DigestInputStream digestInputStream = new DigestInputStream(inputStream, messageDigest);\n        //\u5fc5\u987b\u628a\u6587\u4ef6\u8bfb\u53d6\u5b8c\u6bd5\u624d\u80fd\u62ff\u5230md5\n        byte[] buffer = new byte[4096];\n        while (digestInputStream.read(buffer) > -1) {\n        }\n        MessageDigest digest = digestInputStream.getMessageDigest();\n        digestInputStream.close();\n        byte[] md5 = digest.digest();\n        StringBuilder sb = new StringBuilder();\n        for (byte b : md5) {\n            sb.append(String.format(\"%02X\", b));\n        }\n        return sb.toString().toLowerCase();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "okhttp-OkGo/demo/src/main/java/com/lzy/demo/utils/MD5Utils.java", "commit_date": "2017-05-27 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u5e73\u6ed1\u7f51\u901f\uff0c\u907f\u514d\u6296\u52a8\u8fc7\u5927 */\n", "func_signal": "private long bufferSpeed(long speed)", "code": "{\n    speedBuffer.add(speed);\n    if (speedBuffer.size() > 10) {\n        speedBuffer.remove(0);\n    }\n    long sum = 0;\n    for (float speedTemp : speedBuffer) {\n        sum += speedTemp;\n    }\n    return sum / speedBuffer.size();\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/model/Progress.java", "commit_date": "2017-06-21 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/**\n * Accept-Language: zh-CN,zh;q=0.8\n */\n", "func_signal": "public static String getAcceptLanguage()", "code": "{\n    if (TextUtils.isEmpty(acceptLanguage)) {\n        Locale locale = Locale.getDefault();\n        String language = locale.getLanguage();\n        String country = locale.getCountry();\n        StringBuilder acceptLanguageBuilder = new StringBuilder(language);\n        if (!TextUtils.isEmpty(country)) acceptLanguageBuilder.append('-').append(country).append(',').append(language).append(\";q=0.8\");\n        acceptLanguage = acceptLanguageBuilder.toString();\n        return acceptLanguage;\n    }\n    return acceptLanguage;\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/model/HttpHeaders.java", "commit_date": "2017-06-08 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u9ed8\u8ba4\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570 */\n", "func_signal": "public String getUrlParam(String key)", "code": "{\n    List<String> values = params.urlParamsMap.get(key);\n    if (values != null && values.size() > 0) return values.get(0);\n    return null;\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/request/base/Request.java", "commit_date": "2017-07-12 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "//\u7f51\u901f\u505a\u5e73\u6ed1\u7684\u7f13\u5b58\uff0c\u907f\u514d\u6296\u52a8\u8fc7\u5feb\n", "func_signal": "public Progress()", "code": "{\n lastRefreshTime = SystemClock.elapsedRealtime();\n totalSize = -1;\n priority = Priority.DEFAULT;\n date = System.currentTimeMillis();\n speedBuffer = new ArrayList<>();\n    }", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/model/Progress.java", "commit_date": "2017-06-21 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** Rx\u652f\u6301\uff0c\u83b7\u53d6\u540c\u6b65call\u5bf9\u8c61 */\n", "func_signal": "public Call<T> adapt()", "code": "{\n    if (call == null) {\n        return new CacheCall<>(this);\n    } else {\n        return call;\n    }\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/request/base/Request.java", "commit_date": "2017-07-12 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/** \u8f6c\u6362\u8fdb\u5ea6\u4fe1\u606f */\n", "func_signal": "public void from(Progress progress)", "code": "{\n    totalSize = progress.totalSize;\n    currentSize = progress.currentSize;\n    fraction = progress.fraction;\n    speed = progress.speed;\n    lastRefreshTime = progress.lastRefreshTime;\n    tempSize = progress.tempSize;\n}", "path": "okhttp-OkGo/okgo/src/main/java/com/lzy/okgo/model/Progress.java", "commit_date": "2017-06-21 00:00:00", "repo_name": "jeasonlzy/okhttp-OkGo", "stars": 10586, "license": "apache-2.0", "language": "java", "size": 84860}
{"docstring": "/**\n * Get an attribute's value by case-insensitive key\n * @param key the attribute name\n * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).\n */\n", "func_signal": "public String getIgnoreCase(String key)", "code": "{\n    int i = indexOfKeyIgnoreCase(key);\n    return i == NotFound ? EmptyString : checkNotNull(vals[i]);\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Pulls the next run of whitespace characters of the queue.\n * @return Whether consuming whitespace or not\n */\n", "func_signal": "public boolean consumeWhitespace()", "code": "{\n    boolean seen = false;\n    while (matchesWhitespace()) {\n        pos++;\n        seen = true;\n    }\n    return seen;\n}", "path": "jsoup/src/main/java/org/jsoup/parser/TokenQueue.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Check if these attributes contain an attribute with a value for this key.\n * @param key case-insensitive key to check for\n * @return true if key exists, and it has a value\n */\n", "func_signal": "public boolean hasDeclaredValueForKeyIgnoreCase(String key)", "code": "{\n    int i = indexOfKeyIgnoreCase(key);\n    return i != NotFound && vals[i] != null;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Adds a new attribute. Will produce duplicates if the key already exists.\n * @see Attributes#put(String, String)\n */\n", "func_signal": "public Attributes add(String key, @Nullable String value)", "code": "{\n    checkCapacity(size + 1);\n    keys[size] = key;\n    vals[size] = value;\n    size++;\n    return this;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Set a new attribute, or replace an existing one by key.\n * @param key case sensitive attribute key (not null)\n * @param value attribute value (may be null, to set a boolean attribute)\n * @return these attributes, for chaining\n */\n", "func_signal": "public Attributes put(String key, String value)", "code": "{\n    Validate.notNull(key);\n    int i = indexOfKey(key);\n    if (i != NotFound)\n        vals[i] = value;\n    else\n        add(key, value);\n    return this;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Check if these attributes contain an attribute with a value for this key.\n * @param key key to check for\n * @return true if key exists, and it has a value\n */\n", "func_signal": "public boolean hasDeclaredValueForKey(String key)", "code": "{\n    int i = indexOfKey(key);\n    return i != NotFound && vals[i] != null;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.\n * @param seq String to end on (and not include in return, but leave on queue). <b>Case sensitive.</b>\n * @return The matched data consumed from queue.\n */\n", "func_signal": "public String consumeTo(String seq)", "code": "{\n    int offset = queue.indexOf(seq, pos);\n    if (offset != -1) {\n        String consumed = queue.substring(pos, offset);\n        pos += consumed.length();\n        return consumed;\n    } else {\n        return remainder();\n    }\n}", "path": "jsoup/src/main/java/org/jsoup/parser/TokenQueue.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n Consume an attribute key off the queue (letter, digit, -, _, :\")\n @return attribute key\n */\n", "func_signal": "public String consumeAttributeKey()", "code": "{\n    int start = pos;\n    while (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':')))\n        pos++;\n    \n    return queue.substring(start, pos);\n}", "path": "jsoup/src/main/java/org/jsoup/parser/TokenQueue.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).\n * <p>\n * If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go\n * isEmpty() == true).\n * @param seq String to match up to, and not include in return, and to pull off queue. <b>Case sensitive.</b>\n * @return Data matched from queue.\n */\n", "func_signal": "public String chompTo(String seq)", "code": "{\n    String data = consumeTo(seq);\n    matchChomp(seq);\n    return data;\n}", "path": "jsoup/src/main/java/org/jsoup/parser/TokenQueue.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Set a new boolean attribute, remove attribute if value is false.\n * @param key case <b>insensitive</b> attribute key\n * @param value attribute value\n * @return these attributes, for chaining\n */\n", "func_signal": "public Attributes put(String key, boolean value)", "code": "{\n    if (value)\n        putIgnoreCase(key, null);\n    else\n        remove(key);\n    return this;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _)\n http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier\n @return identifier\n */\n", "func_signal": "public String consumeCssIdentifier()", "code": "{\n    int start = pos;\n    while (!isEmpty() && (matchesWord() || matchesAny('-', '_')))\n        pos++;\n\n    return queue.substring(start, pos);\n}", "path": "jsoup/src/main/java/org/jsoup/parser/TokenQueue.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Consume an tag name off the queue (word or :, _, -)\n * \n * @return tag name\n */\n", "func_signal": "public String consumeTagName()", "code": "{\n    int start = pos;\n    while (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))\n        pos++;\n    \n    return queue.substring(start, pos);\n}", "path": "jsoup/src/main/java/org/jsoup/parser/TokenQueue.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Internal method. Removes duplicate attribute by name. Settings for case sensitivity of key names.\n * @param settings case sensitivity\n * @return number of removed dupes\n */\n", "func_signal": "public int deduplicate(ParseSettings settings)", "code": "{\n    if (isEmpty())\n        return 0;\n    boolean preserve = settings.preserveAttributeCase();\n    int dupes = 0;\n    OUTER: for (int i = 0; i < keys.length; i++) {\n        for (int j = i + 1; j < keys.length; j++) {\n            if (keys[j] == null)\n                continue OUTER; // keys.length doesn't shrink when removing, so re-test\n            if ((preserve && keys[i].equals(keys[j])) || (!preserve && keys[i].equalsIgnoreCase(keys[j]))) {\n                dupes++;\n                remove(j);\n                j--;\n            }\n        }\n    }\n    return dupes;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n Remove an attribute by key. <b>Case sensitive.</b>\n @param key attribute key to remove\n */\n", "func_signal": "public void remove(String key)", "code": "{\n    int i = indexOfKey(key);\n    if (i != NotFound)\n        remove(i);\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n Get the attributes as a List, for iteration.\n @return an view of the attributes as an unmodifiable List.\n */\n", "func_signal": "public List<Attribute> asList()", "code": "{\n    ArrayList<Attribute> list = new ArrayList<>(size);\n    for (int i = 0; i < size; i++) {\n        if (isInternalKey(keys[i]))\n            continue; // skip internal keys\n        Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);\n        list.add(attr);\n    }\n    return Collections.unmodifiableList(list);\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n Set a new attribute, or replace an existing one by key.\n @param attribute attribute with case sensitive key\n @return these attributes, for chaining\n */\n", "func_signal": "public Attributes put(Attribute attribute)", "code": "{\n    Validate.notNull(attribute);\n    put(attribute.getKey(), attribute.getValue());\n    attribute.parent = this;\n    return this;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "// Note: NodeTraversor.traverse(new NodeVisitor) is tested in\n// ElementsTest#traverse()\n", "func_signal": "@Test\npublic void filterVisit()", "code": "{\n    Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n    final StringBuilder accum = new StringBuilder();\n    NodeTraversor.filter(new NodeFilter() {\n        @Override\n        public FilterResult head(Node node, int depth) {\n            accum.append(\"<\").append(node.nodeName()).append(\">\");\n            return FilterResult.CONTINUE;\n        }\n\n        @Override\n        public FilterResult tail(Node node, int depth) {\n            accum.append(\"</\").append(node.nodeName()).append(\">\");\n            return FilterResult.CONTINUE;\n        }\n    }, doc.select(\"div\"));\n    assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n}", "path": "jsoup/src/test/java/org/jsoup/select/TraversorTest.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the\n * queue.\n * @param seq String to search for, and if found, remove from queue.\n * @return true if found and removed, false if not found.\n */\n", "func_signal": "public boolean matchChomp(String seq)", "code": "{\n    if (matches(seq)) {\n        pos += seq.length();\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "jsoup/src/main/java/org/jsoup/parser/TokenQueue.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "/**\n * Internal method. Lowercases all keys.\n */\n", "func_signal": "public void normalize()", "code": "{\n    for (int i = 0; i < size; i++) {\n        keys[i] = lowerCase(keys[i]);\n    }\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "// removes and shifts up\n", "func_signal": "@SuppressWarnings(\"AssignmentToNull\")\nprivate void remove(int index)", "code": "{\n    Validate.isFalse(index >= size);\n    int shifted = size - index - 1;\n    if (shifted > 0) {\n        System.arraycopy(keys, index + 1, keys, index, shifted);\n        System.arraycopy(vals, index + 1, vals, index, shifted);\n    }\n    size--;\n    keys[size] = null; // release hold\n    vals[size] = null;\n}", "path": "jsoup/src/main/java/org/jsoup/nodes/Attributes.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "jhy/jsoup", "stars": 10528, "license": "mit", "language": "java", "size": 5023}
{"docstring": "// *************************************************************************\n//     PROGRAM\n// *************************************************************************\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\n    final ParameterTool params = ParameterTool.fromArgs(args);\n\n    final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n    if (!params.has(\"customer\")\n            && !params.has(\"orders\")\n            && !params.has(\"lineitem\")\n            && !params.has(\"nation\")) {\n        System.err.println(\n                \"  This program expects data from the TPC-H benchmark as input data.\");\n        System.err.println(\"  Due to legal restrictions, we can not ship generated data.\");\n        System.err.println(\n                \"  You can find the TPC-H data generator at http://www.tpc.org/tpch/.\");\n        System.err.println(\n                \"  Usage: TPCHQuery10 --customer <path> --orders <path> --lineitem <path> --nation <path> [--output <path>]\");\n        return;\n    }\n\n    // get customer data set: (custkey, name, address, nationkey, acctbal)\n    DataSet<Tuple5<Integer, String, String, Integer, Double>> customers =\n            getCustomerDataSet(env, params.get(\"customer\"));\n    // get orders data set: (orderkey, custkey, orderdate)\n    DataSet<Tuple3<Integer, Integer, String>> orders =\n            getOrdersDataSet(env, params.get(\"orders\"));\n    // get lineitem data set: (orderkey, extendedprice, discount, returnflag)\n    DataSet<Tuple4<Integer, Double, Double, String>> lineitems =\n            getLineitemDataSet(env, params.get(\"lineitem\"));\n    // get nation data set: (nationkey, name)\n    DataSet<Tuple2<Integer, String>> nations = getNationsDataSet(env, params.get(\"nation\"));\n\n    // orders filtered by year: (orderkey, custkey)\n    DataSet<Tuple2<Integer, Integer>> ordersFilteredByYear =\n            // filter by year\n            orders.filter(order -> Integer.parseInt(order.f2.substring(0, 4)) > 1990)\n                    // project fields out that are no longer required\n                    .project(0, 1);\n\n    // lineitems filtered by flag: (orderkey, revenue)\n    DataSet<Tuple2<Integer, Double>> lineitemsFilteredByFlag =\n            // filter by flag\n            lineitems\n                    .filter(lineitem -> lineitem.f3.equals(\"R\"))\n                    // compute revenue and project out return flag\n                    // revenue per item = l_extendedprice * (1 - l_discount)\n                    .map(lineitem -> new Tuple2<>(lineitem.f0, lineitem.f1 * (1 - lineitem.f2)))\n                    .returns(Types.TUPLE(Types.INT, Types.DOUBLE)); // for lambda with generics\n\n    // join orders with lineitems: (custkey, revenue)\n    DataSet<Tuple2<Integer, Double>> revenueByCustomer =\n            ordersFilteredByYear\n                    .joinWithHuge(lineitemsFilteredByFlag)\n                    .where(0)\n                    .equalTo(0)\n                    .projectFirst(1)\n                    .projectSecond(1);\n\n    revenueByCustomer = revenueByCustomer.groupBy(0).aggregate(Aggregations.SUM, 1);\n\n    // join customer with nation (custkey, name, address, nationname, acctbal)\n    DataSet<Tuple5<Integer, String, String, String, Double>> customerWithNation =\n            customers\n                    .joinWithTiny(nations)\n                    .where(3)\n                    .equalTo(0)\n                    .projectFirst(0, 1, 2)\n                    .projectSecond(1)\n                    .projectFirst(4);\n\n    // join customer (with nation) with revenue (custkey, name, address, nationname, acctbal,\n    // revenue)\n    DataSet<Tuple6<Integer, String, String, String, Double, Double>> result =\n            customerWithNation\n                    .join(revenueByCustomer)\n                    .where(0)\n                    .equalTo(0)\n                    .projectFirst(0, 1, 2, 3, 4)\n                    .projectSecond(1);\n\n    // emit result\n    if (params.has(\"output\")) {\n        result.writeAsCsv(params.get(\"output\"), \"\\n\", \"|\");\n        // execute program\n        env.execute(\"TPCH Query 10 Example\");\n    } else {\n        System.out.println(\"Printing result to stdout. Use --output to specify output path.\");\n        result.print();\n    }\n}", "path": "flink/flink-examples/flink-examples-batch/src/main/java/org/apache/flink/examples/java/relational/TPCHQuery10.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "// ------------------------------------------------------------------------\n//  setup utils\n// ------------------------------------------------------------------------\n", "func_signal": "private static CompletedCheckpointStorageLocation createSavepointWithOperatorState(\n        final long checkpointId, final OperatorState state) throws IOException", "code": "{\n\n    final CheckpointMetadata savepoint =\n            new CheckpointMetadata(\n                    checkpointId, Collections.singletonList(state), Collections.emptyList());\n    final StreamStateHandle serializedMetadata;\n\n    try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {\n        Checkpoints.storeCheckpointMetadata(savepoint, os);\n        serializedMetadata = new ByteStreamStateHandle(\"checkpoint\", os.toByteArray());\n    }\n\n    return new TestCompletedCheckpointStorageLocation(serializedMetadata, \"dummy/pointer\");\n}", "path": "flink/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointMetadataLoadingTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Tests that savepoint loading succeeds when there is non-restored state and it is not allowed.\n */\n", "func_signal": "@Test\npublic void testNonRestoredStateWhenAllowed() throws Exception", "code": "{\n    final OperatorID operatorId = new OperatorID();\n    final int parallelism = 9;\n\n    final CompletedCheckpointStorageLocation testSavepoint =\n            createSavepointWithOperatorSubtaskState(242L, operatorId, parallelism);\n    final Map<JobVertexID, ExecutionJobVertex> tasks = Collections.emptyMap();\n\n    final CompletedCheckpoint loaded =\n            Checkpoints.loadAndValidateCheckpoint(new JobID(), tasks, testSavepoint, cl, true);\n\n    assertTrue(loaded.getOperatorStates().isEmpty());\n}", "path": "flink/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointMetadataLoadingTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Create the handler used by the {@link KvStateServerImpl}.\n *\n * @param server the {@link KvStateServerImpl} using the handler.\n * @param kvStateRegistry registry to query.\n * @param serializer the {@link MessageSerializer} used to (de-) serialize the different\n *     messages.\n * @param stats server statistics collector.\n */\n", "func_signal": "public KvStateServerHandler(\n        final KvStateServerImpl server,\n        final KvStateRegistry kvStateRegistry,\n        final MessageSerializer<KvStateInternalRequest, KvStateResponse> serializer,\n        final KvStateRequestStats stats)", "code": "{\n\n    super(server, serializer, stats);\n    this.registry = Preconditions.checkNotNull(kvStateRegistry);\n}", "path": "flink/flink-queryable-state/flink-queryable-state-runtime/src/main/java/org/apache/flink/queryablestate/server/KvStateServerHandler.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "// ------------------------------------------------------------------------------------------------\n//  Test utilities\n// ------------------------------------------------------------------------------------------------\n", "func_signal": "private static PojoSerializerSnapshot<TestPojo> buildTestSnapshot(\n        List<TestPojoField> fieldsToContainInSnapshot)", "code": "{\n\n    int numFields = fieldsToContainInSnapshot.size();\n    ArrayList<Field> fields = new ArrayList<>(numFields);\n    ArrayList<TypeSerializerSnapshot<?>> fieldSerializerSnapshots = new ArrayList<>(numFields);\n    fieldsToContainInSnapshot.forEach(\n            testPojoField -> {\n                fields.add(testPojoField.field);\n                fieldSerializerSnapshots.add(testPojoField.serializerSnapshot);\n            });\n\n    return new PojoSerializerSnapshot<>(\n            TestPojo.class,\n            fields.toArray(new Field[numFields]),\n            fieldSerializerSnapshots.toArray(new TypeSerializerSnapshot[numFields]),\n            new LinkedHashMap<>(),\n            new LinkedHashMap<>());\n}", "path": "flink/flink-core/src/test/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/** Tests correct savepoint loading. */\n", "func_signal": "@Test\npublic void testAllStateRestored() throws Exception", "code": "{\n    final JobID jobId = new JobID();\n    final OperatorID operatorId = new OperatorID();\n    final long checkpointId = Integer.MAX_VALUE + 123123L;\n    final int parallelism = 128128;\n\n    final CompletedCheckpointStorageLocation testSavepoint =\n            createSavepointWithOperatorSubtaskState(checkpointId, operatorId, parallelism);\n    final Map<JobVertexID, ExecutionJobVertex> tasks =\n            createTasks(operatorId, parallelism, parallelism);\n\n    final CompletedCheckpoint loaded =\n            Checkpoints.loadAndValidateCheckpoint(jobId, tasks, testSavepoint, cl, false);\n\n    assertEquals(jobId, loaded.getJobId());\n    assertEquals(checkpointId, loaded.getCheckpointID());\n}", "path": "flink/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointMetadataLoadingTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Pre-computes and stores the timestamps for timely events in this session in a list (ordered).\n *\n * @param minTimestamp the minimum event time in the session\n * @param onTimeEventCountInSession the number of timestamps to generate\n */\n", "func_signal": "private void generateOrderedTimelyTimestamps(long minTimestamp, int onTimeEventCountInSession)", "code": "{\n    long generatedTimestamp = minTimestamp;\n\n    for (int i = 1; i < onTimeEventCountInSession; ++i) {\n        orderedTimelyTimestamps.add(generatedTimestamp);\n        generatedTimestamp += randomGenerator.randomLongBetween(0, getGap() - 1);\n    }\n\n    orderedTimelyTimestamps.add(generatedTimestamp);\n}", "path": "flink/flink-tests/src/test/java/org/apache/flink/test/windowing/sessionwindows/SessionEventGeneratorImpl.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "// *************************************************************************\n//     UTIL METHODS\n// *************************************************************************\n", "func_signal": "private static DataSet<Tuple5<Integer, String, String, Integer, Double>> getCustomerDataSet(\n        ExecutionEnvironment env, String customerPath)", "code": "{\n    return env.readCsvFile(customerPath)\n            .fieldDelimiter(\"|\")\n            .includeFields(\"11110100\")\n            .types(Integer.class, String.class, String.class, Integer.class, Double.class);\n}", "path": "flink/flink-examples/flink-examples-batch/src/main/java/org/apache/flink/examples/java/relational/TPCHQuery10.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/** @see EventGenerator */\n", "func_signal": "@Override\npublic EventGenerator<K, E> getNextGenerator(long globalWatermark)", "code": "{\n    GeneratorConfiguration generatorConfiguration = configuration.getGeneratorConfiguration();\n    SessionConfiguration<K, E> sessionConfiguration = configuration.getSessionConfiguration();\n\n    // compute the start timestamp for the next session\n    long maxAdditionalGap = generatorConfiguration.getMaxAdditionalSessionGap();\n    long nextStartTime =\n            Math.max(\n                    getAfterLatenessTimestamp()\n                            + randomGenerator.randomLongBetween(0, maxAdditionalGap),\n                    globalWatermark);\n\n    sessionConfiguration = sessionConfiguration.getFollowupSessionConfiguration(nextStartTime);\n    SessionGeneratorConfiguration<K, E> sessionGeneratorConfiguration =\n            new SessionGeneratorConfiguration<>(sessionConfiguration, generatorConfiguration);\n\n    return new SessionEventGeneratorImpl<>(sessionGeneratorConfiguration, randomGenerator);\n}", "path": "flink/flink-tests/src/test/java/org/apache/flink/test/windowing/sessionwindows/SessionEventGeneratorImpl.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Creates a BoundedBlockingSubpartition that stores the partition data in a file and memory\n * maps that file for reading. Data is eagerly spilled (written to disk) and then mapped into\n * memory. The main difference to the {@link #createWithMemoryMappedFile(int, ResultPartition,\n * File)} variant is that no I/O is necessary when pages from the memory mapped file are\n * evicted.\n */\n", "func_signal": "public static BoundedBlockingSubpartition createWithFileAndMemoryMappedReader(\n        int index, ResultPartition parent, File tempFile) throws IOException", "code": "{\n\n    final FileChannelMemoryMappedBoundedData bd =\n            FileChannelMemoryMappedBoundedData.create(tempFile.toPath());\n    return new BoundedBlockingSubpartition(index, parent, bd, false);\n}", "path": "flink/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/BoundedBlockingSubpartition.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/** @see EventGenerator */\n", "func_signal": "@Override\npublic E generateEvent(long globalWatermark)", "code": "{\n    if (hasMoreEvents()) {\n        ++producedEventsCount;\n        E event = timingAwareEventGenerator.generateEvent(globalWatermark);\n\n        while (!timingAwareEventGenerator.hasMoreEvents()) {\n            timingAwareEventGenerator =\n                    timingAwareEventGenerator.getNextGenerator(globalWatermark);\n        }\n\n        return event;\n    } else {\n        throw new IllegalStateException(\"All events exhausted\");\n    }\n}", "path": "flink/flink-tests/src/test/java/org/apache/flink/test/windowing/sessionwindows/SessionEventGeneratorImpl.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Returns the full options modified by the given consumer {@code optionModifier}.\n *\n * @param optionModifier Consumer to modify the options\n */\n", "func_signal": "private Map<String, String> getModifiedOptions(Consumer<Map<String, String>> optionModifier)", "code": "{\n    Map<String, String> options = getAllOptions();\n    optionModifier.accept(options);\n    return options;\n}", "path": "flink/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactoryTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Tests that savepoint loading fails when there is non-restored coordinator state only, and\n * non-restored state is not allowed.\n */\n", "func_signal": "@Test\npublic void testUnmatchedCoordinatorOnlyStateFails() throws Exception", "code": "{\n    final OperatorID operatorID = new OperatorID();\n    final int maxParallelism = 1234;\n\n    final OperatorState state =\n            new OperatorState(operatorID, maxParallelism / 2, maxParallelism);\n    state.setCoordinatorState(new ByteStreamStateHandle(\"coordinatorState\", new byte[0]));\n\n    final CompletedCheckpointStorageLocation testSavepoint =\n            createSavepointWithOperatorState(42L, state);\n    final Map<JobVertexID, ExecutionJobVertex> tasks = Collections.emptyMap();\n\n    try {\n        Checkpoints.loadAndValidateCheckpoint(new JobID(), tasks, testSavepoint, cl, false);\n        fail(\"Did not throw expected Exception\");\n    } catch (IllegalStateException expected) {\n        assertTrue(expected.getMessage().contains(\"allowNonRestoredState\"));\n    }\n}", "path": "flink/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointMetadataLoadingTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/** Tests that savepoint loading fails when there is a max-parallelism mismatch. */\n", "func_signal": "@Test\npublic void testMaxParallelismMismatch() throws Exception", "code": "{\n    final OperatorID operatorId = new OperatorID();\n    final int parallelism = 128128;\n\n    final CompletedCheckpointStorageLocation testSavepoint =\n            createSavepointWithOperatorSubtaskState(242L, operatorId, parallelism);\n    final Map<JobVertexID, ExecutionJobVertex> tasks =\n            createTasks(operatorId, parallelism, parallelism + 1);\n\n    try {\n        Checkpoints.loadAndValidateCheckpoint(new JobID(), tasks, testSavepoint, cl, false);\n        fail(\"Did not throw expected Exception\");\n    } catch (IllegalStateException expected) {\n        assertTrue(expected.getMessage().contains(\"Max parallelism mismatch\"));\n    }\n}", "path": "flink/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointMetadataLoadingTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Creates a BoundedBlockingSubpartition that stores the partition data in memory mapped file.\n * Data is written to and read from the mapped memory region. Disk spilling happens lazily, when\n * the OS swaps out the pages from the memory mapped file.\n */\n", "func_signal": "public static BoundedBlockingSubpartition createWithMemoryMappedFile(\n        int index, ResultPartition parent, File tempFile) throws IOException", "code": "{\n\n    final MemoryMappedBoundedData bd = MemoryMappedBoundedData.create(tempFile.toPath());\n    return new BoundedBlockingSubpartition(index, parent, bd, false);\n}", "path": "flink/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/BoundedBlockingSubpartition.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/** @return a timestamp in the session that is timely */\n", "func_signal": "private long generateTimelyInSessionTimestamp()", "code": "{\n    int chosenTimestampIndex = randomGenerator.choseRandomIndex(orderedTimelyTimestamps);\n    // performance: consider that remove is an O(n) operation here, with n being the number of\n    // timely events but\n    // this should not matter too much for a IT case\n    return orderedTimelyTimestamps.remove(chosenTimestampIndex);\n}", "path": "flink/flink-tests/src/test/java/org/apache/flink/test/windowing/sessionwindows/SessionEventGeneratorImpl.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Tests that savepoint loading fails when there is non-restored state, but it is not allowed.\n */\n", "func_signal": "@Test\npublic void testNonRestoredStateWhenDisallowed() throws Exception", "code": "{\n    final OperatorID operatorId = new OperatorID();\n    final int parallelism = 9;\n\n    final CompletedCheckpointStorageLocation testSavepoint =\n            createSavepointWithOperatorSubtaskState(242L, operatorId, parallelism);\n    final Map<JobVertexID, ExecutionJobVertex> tasks = Collections.emptyMap();\n\n    try {\n        Checkpoints.loadAndValidateCheckpoint(new JobID(), tasks, testSavepoint, cl, false);\n        fail(\"Did not throw expected Exception\");\n    } catch (IllegalStateException expected) {\n        assertTrue(expected.getMessage().contains(\"allowNonRestoredState\"));\n    }\n}", "path": "flink/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointMetadataLoadingTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "// ------------------------------------------------------------------------------------------------\n//  Tests for PojoSerializerSnapshot#resolveSchemaCompatibility\n// ------------------------------------------------------------------------------------------------\n", "func_signal": "@Test\npublic void testResolveSchemaCompatibilityWithSameFields()", "code": "{\n    final PojoSerializerSnapshot<TestPojo> testSnapshot =\n            buildTestSnapshot(Arrays.asList(ID_FIELD, NAME_FIELD, HEIGHT_FIELD));\n\n    final PojoSerializer<TestPojo> newPojoSerializer =\n            buildTestNewPojoSerializer(Arrays.asList(ID_FIELD, NAME_FIELD, HEIGHT_FIELD));\n\n    final TypeSerializerSchemaCompatibility<TestPojo> resultCompatibility =\n            testSnapshot.resolveSchemaCompatibility(newPojoSerializer);\n\n    assertTrue(resultCompatibility.isCompatibleAsIs());\n}", "path": "flink/flink-core/src/test/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotTest.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * @param configuration session generator configuration\n * @param randomGenerator random engine for the event generation\n */\n", "func_signal": "public SessionEventGeneratorImpl(\n        SessionGeneratorConfiguration<K, E> configuration,\n        LongRandomGenerator randomGenerator)", "code": "{\n    Preconditions.checkNotNull(configuration);\n    Preconditions.checkNotNull(randomGenerator);\n\n    this.producedEventsCount = 0;\n    this.configuration = configuration;\n    this.randomGenerator = randomGenerator;\n\n    // pre-compute and store all timestamps for the timely events in this session\n    final int timelyEventsInSessionCount =\n            configuration.getSessionConfiguration().getNumberOfTimelyEvents();\n    this.orderedTimelyTimestamps = new ArrayList<>(timelyEventsInSessionCount);\n    this.minTimestamp = configuration.getSessionConfiguration().getMinEventTimestamp();\n    generateOrderedTimelyTimestamps(minTimestamp, timelyEventsInSessionCount);\n    this.maxTimestamp = orderedTimelyTimestamps.get(orderedTimelyTimestamps.size() - 1);\n    this.timingAwareEventGenerator = new TimelyGenerator();\n}", "path": "flink/flink-tests/src/test/java/org/apache/flink/test/windowing/sessionwindows/SessionEventGeneratorImpl.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * Creates a BoundedBlockingSubpartition that simply stores the partition data in a file. Data\n * is eagerly spilled (written to disk) and readers directly read from the file.\n */\n", "func_signal": "public static BoundedBlockingSubpartition createWithFileChannel(\n        int index,\n        ResultPartition parent,\n        File tempFile,\n        int readBufferSize,\n        boolean sslEnabled)\n        throws IOException", "code": "{\n\n    final FileChannelBoundedData bd =\n            FileChannelBoundedData.create(tempFile.toPath(), readBufferSize);\n    return new BoundedBlockingSubpartition(index, parent, bd, !sslEnabled);\n}", "path": "flink/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/BoundedBlockingSubpartition.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "apache/flink", "stars": 22910, "license": "apache-2.0", "language": "java", "size": 486478}
{"docstring": "/**\n * when string is null return blank,where the string is not null it return string.trim\n *\n * @param string\n * @return String\n */\n", "func_signal": "public static String trim(final String string)", "code": "{\n    String result = null;\n    if (string == null) {\n        result = BLANK;\n    } else {\n        result = string.trim();\n    }\n    return result;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * This patch method is fast ,but using more memory.\n * Memory size = oldBuf + diffBuf + newBuf\n *\n */\n", "func_signal": "public static int patchFast(File oldFile, File newFile, File diffFile, int extLen) throws IOException", "code": "{\n    if (oldFile == null || oldFile.length() <= 0) {\n        return RETURN_OLD_FILE_ERR;\n    }\n    if (newFile == null) {\n        return RETURN_NEW_FILE_ERR;\n    }\n    if (diffFile == null || diffFile.length() <= 0) {\n        return RETURN_DIFF_FILE_ERR;\n    }\n\n    InputStream oldInputStream = new BufferedInputStream(new FileInputStream(oldFile));\n    byte[] diffBytes = new byte[(int) diffFile.length()];\n    InputStream diffInputStream = new FileInputStream(diffFile);\n    try {\n        BSUtil.readFromStream(diffInputStream, diffBytes, 0, diffBytes.length);\n    } finally {\n        diffInputStream.close();\n    }\n\n    byte[] newBytes = patchFast(oldInputStream, (int) oldFile.length(), diffBytes, extLen);\n\n    OutputStream newOutputStream = new FileOutputStream(newFile);\n    try {\n        newOutputStream.write(newBytes);\n    } finally {\n        newOutputStream.close();\n    }\n    return RETURN_SUCCESS;\n}", "path": "tinker/third-party/bsdiff-util/src/main/java/com/tencent/tinker/bsdiff/BSPatch.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * get raw name\n *\n * @param sanitizeName\n * @return String\n */\n", "func_signal": "public String getRawName(RType rType, String sanitizeName)", "code": "{\n    if (!sanitizeTypeMap.containsKey(rType)) {\n        return null;\n    }\n    return this.sanitizeTypeMap.get(rType).get(sanitizeName);\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptResourceCollector.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * BSPatch using less memory size.\n * Memory size = diffFile size + max block size\n *\n */\n", "func_signal": "public static int patchLessMemory(RandomAccessFile oldFile, File newFile, File diffFile, int extLen) throws IOException", "code": "{\n    if (oldFile == null || oldFile.length() <= 0) {\n        return RETURN_OLD_FILE_ERR;\n    }\n    if (newFile == null) {\n        return RETURN_NEW_FILE_ERR;\n    }\n    if (diffFile == null || diffFile.length() <= 0) {\n        return RETURN_DIFF_FILE_ERR;\n    }\n\n    byte[] diffBytes = new byte[(int) diffFile.length()];\n    InputStream diffInputStream = new FileInputStream(diffFile);\n    try {\n        BSUtil.readFromStream(diffInputStream, diffBytes, 0, diffBytes.length);\n    } finally {\n        diffInputStream.close();\n    }\n    return patchLessMemory(oldFile, (int) oldFile.length(), diffBytes, diffBytes.length, newFile, extLen);\n}", "path": "tinker/third-party/bsdiff-util/src/main/java/com/tencent/tinker/bsdiff/BSPatch.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * you can restart your process through service or broadcast\n */\n", "func_signal": "private void restartProcess()", "code": "{\n    TinkerLog.i(TAG, \"app is background now, i can kill quietly\");\n    //you can send service or broadcast intent to restart your process\n    android.os.Process.killProcess(android.os.Process.myPid());\n}", "path": "tinker/tinker-sample-android/app/src/main/java/tinker/sample/android/service/SampleResultService.java", "commit_date": "2017-04-11 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * byte to hex string\n *\n * @param byteArray\n * @return String\n */\n", "func_signal": "public static String byteToHexString(byte[] byteArray)", "code": "{\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < byteArray.length; i++) {\n        int byteCode = byteArray[i] & 0xFF;\n        if (byteCode < 0x10) {\n            builder.append(0);\n        }\n        builder.append(Integer.toHexString(byteCode));\n    }\n    return builder.toString();\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * when string[] is null return blank array\n *\n * @param stringArray\n * @return String[]{} length==0\n */\n", "func_signal": "public static String[] nullToBlank(final String[] stringArray)", "code": "{\n    String[] result = stringArray;\n    if (stringArray == null) {\n        result = new String[]{};\n    }\n    return result;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * This patch method is fast ,but using more memory.\n * Memory size = oldBuf + diffBuf + newBuf\n */\n", "func_signal": "public static byte[] patchFast(InputStream oldInputStream, int oldsize, byte[] diffBytes, int extLen) throws IOException", "code": "{\n    // Read in old file (file to be patched) to oldBuf\n    byte[] oldBuf = new byte[oldsize];\n    BSUtil.readFromStream(oldInputStream, oldBuf, 0, oldsize);\n    oldInputStream.close();\n\n    return BSPatch.patchFast(oldBuf, oldsize, diffBytes, diffBytes.length, extLen);\n}", "path": "tinker/third-party/bsdiff-util/src/main/java/com/tencent/tinker/bsdiff/BSPatch.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * compare stringArray1 and stringArray2 return the different in str1\n *\n * @param stringArray1\n * @param stringArray2\n * @return String[]\n */\n", "func_signal": "public static String[] compareString(final String[] stringArray1, final String[] stringArray2)", "code": "{\n    String[] differentString = null;\n    if (stringArray1 != null && stringArray2 != null) {\n        List<String> list = new ArrayList<String>();\n        for (int i = 0; i < stringArray1.length; i++) {\n            boolean sign = false;\n            for (int j = 0; j < stringArray2.length; j++) {\n                if (stringArray1[i].equals(stringArray2[j])) {\n                    sign = true;\n                    break;\n                }\n            }\n            if (!sign) {\n                list.add(stringArray1[i]);\n            }\n        }\n        differentString = new String[list.size()];\n        differentString = list.toArray(differentString);\n    }\n    return differentString;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "// TODO needs to support rest type of components.\n", "func_signal": "public static ResolveInfo resolveIntent(Intent intent)", "code": "{\n    ensureInitialized();\n\n    int maxPriority = -1;\n    String bestComponentName = null;\n    IntentFilter respFilter = null;\n    int bestMatchRes = 0;\n\n    final ComponentName component = intent.getComponent();\n    if (component != null) {\n        final String compName = component.getClassName();\n        if (CLASS_NAME_TO_ACTIVITY_INFO_MAP.containsKey(compName)) {\n            bestComponentName = compName;\n            maxPriority = 0;\n        }\n    } else {\n        for (Map.Entry<String, IntentFilter> item : CLASS_NAME_TO_INTENT_FILTER_MAP.entrySet()) {\n            final String componentName = item.getKey();\n            final IntentFilter intentFilter = item.getValue();\n            final int matchRes = intentFilter.match(intent.getAction(), intent.getType(),\n                    intent.getScheme(), intent.getData(), intent.getCategories(), TAG);\n            final boolean matches = (matchRes != IntentFilter.NO_MATCH_ACTION)\n                    && (matchRes != IntentFilter.NO_MATCH_CATEGORY)\n                    && (matchRes != IntentFilter.NO_MATCH_DATA)\n                    && (matchRes != IntentFilter.NO_MATCH_TYPE);\n            final int priority = intentFilter.getPriority();\n            if (matches && priority > maxPriority) {\n                maxPriority = priority;\n                bestComponentName = componentName;\n                respFilter = intentFilter;\n                bestMatchRes = matchRes;\n            }\n        }\n    }\n    if (bestComponentName != null) {\n        final ResolveInfo result = new ResolveInfo();\n        result.activityInfo = CLASS_NAME_TO_ACTIVITY_INFO_MAP.get(bestComponentName);\n        result.filter = respFilter;\n        result.match = bestMatchRes;\n        result.priority = maxPriority;\n        result.resolvePackageName = sPackageName;\n        result.icon = result.activityInfo.icon;\n        result.labelRes = result.activityInfo.labelRes;\n        return result;\n    } else {\n        return null;\n    }\n}", "path": "tinker/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/hotplug/IncrementComponentManager.java", "commit_date": "2020-06-16 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * hex string to byte\n *\n * @param source\n * @return byte\n */\n", "func_signal": "public static byte[] hexStringToByte(final String source)", "code": "{\n    byte[] bytes = null;\n    if (source != null) {\n        bytes = new byte[source.length() / 2];\n        int i = 0;\n        while (i < bytes.length) {\n            bytes[i] = (byte) (Integer.parseInt(source.substring(i * 2, (i + 1) * 2), 16));\n            i++;\n        }\n    }\n    return bytes;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * is contain resource\n *\n * @param rType\n * @param idType\n * @param name\n * @return boolean\n */\n", "func_signal": "public boolean isContainResource(RType rType, IdType idType, String name)", "code": "{\n    boolean result = false;\n    if (this.rTypeResourceMap.containsKey(rType)) {\n        Set<RDotTxtEntry> resourceSet = this.rTypeResourceMap.get(rType);\n        if (resourceSet.contains(new RDotTxtEntry(idType, rType, name, \"0x7f000000\"))) {\n            result = true;\n        }\n    }\n    return result;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptResourceCollector.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * <p>Method:only for '*' match pattern,return true of false</p>\n *\n * @param string\n * @param patternString\n * @return boolean\n */\n", "func_signal": "public static boolean isMatchPattern(final String string, final String patternString)", "code": "{\n    boolean result = false;\n    if (string != null && patternString != null) {\n        if (patternString.indexOf(METCH_PATTERN) >= 0) {\n            String matchPattern = Constant.Symbol.XOR + patternString.replaceAll(METCH_PATTERN_REGEX, METCH_PATTERN_REPLACEMENT) + Constant.Symbol.DOLLAR;\n            result = isMatchRegex(string, matchPattern);\n        } else {\n            if (string.equals(patternString)) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * add service cache\n *\n * @param context\n * @return boolean\n */\n", "func_signal": "public static boolean isInTinkerPatchServiceProcess(Context context)", "code": "{\n    String process = getProcessName(context);\n\n    String service = TinkerServiceInternals.getTinkerPatchServiceName(context);\n    if (service == null || service.length() == 0) {\n        return false;\n    }\n    return process.equals(service);\n}", "path": "tinker/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/util/TinkerServiceInternals.java", "commit_date": "2020-06-16 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * This patch method is fast ,but using more memory.\n * Memory size = oldBuf + diffBuf + newBuf\n *\n */\n", "func_signal": "public static int patchFast(InputStream oldInputStream, InputStream diffInputStream, File newFile) throws IOException", "code": "{\n    if (oldInputStream == null) {\n        return RETURN_OLD_FILE_ERR;\n    }\n    if (newFile == null) {\n        return RETURN_NEW_FILE_ERR;\n    }\n    if (diffInputStream == null) {\n        return RETURN_DIFF_FILE_ERR;\n    }\n\n    byte[] oldBytes = BSUtil.inputStreamToByte(oldInputStream);\n    byte[] diffBytes = BSUtil.inputStreamToByte(diffInputStream);\n\n    byte[] newBytes = patchFast(oldBytes, oldBytes.length, diffBytes, diffBytes.length, 0);\n\n    OutputStream newOutputStream = new FileOutputStream(newFile);\n    try {\n        newOutputStream.write(newBytes);\n    } finally {\n        newOutputStream.close();\n    }\n    return RETURN_SUCCESS;\n}", "path": "tinker/third-party/bsdiff-util/src/main/java/com/tencent/tinker/bsdiff/BSPatch.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n * <p/>\n * <pre>\n * StringUtils.isBlank(null)      = true\n * StringUtils.isBlank(\"\")        = true\n * StringUtils.isBlank(\" \")       = true\n * StringUtils.isBlank(\"bob\")     = false\n * StringUtils.isBlank(\"  bob  \") = false\n * </pre>\n *\n * @param string the String to check, may be null\n * @return <code>true</code> if the String is null, empty or whitespace\n */\n", "func_signal": "public static boolean isBlank(final String string)", "code": "{\n    boolean result = false;\n    int strLen;\n    if (string == null || (strLen = string.length()) == 0) {\n        result = true;\n    } else {\n        for (int i = 0; i < strLen; i++) {\n            if (!Character.isWhitespace(string.charAt(i))) {\n                result = false;\n                break;\n            }\n        }\n    }\n    return result;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "// verify the signature of the Apk\n", "func_signal": "private boolean check(File path, Certificate[] certs)", "code": "{\n    if (certs.length > 0) {\n        for (int i = certs.length - 1; i >= 0; i--) {\n            try {\n                if (mPublicKeyMd5.equals(SharePatchFileUtil.getMD5(certs[i].getEncoded()))) {\n                    return true;\n                }\n            } catch (Exception e) {\n                ShareTinkerLog.e(TAG, path.getAbsolutePath(), e);\n            }\n        }\n    }\n    return false;\n}", "path": "tinker/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareSecurityCheck.java", "commit_date": "2020-06-16 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * <p>\n * Method: check the string match the regex or not and return the match\n * field value\n * like {xxxx} can find xxxx\n * </p>\n *\n * @param string\n * @param regex\n * @param firstRegex\n * @param firstRegexReplace\n * @param lastRegexStringLength like {xxxx},last regex string is \"}\" so last regex string length equals 1\n * @return List<String>\n */\n", "func_signal": "public static List<String> parseStringGroup(final String string, final String regex, final String firstRegex, final String firstRegexReplace, final int lastRegexStringLength)", "code": "{\n    List<String> list = null;\n    if (string != null) {\n        list = new ArrayList<String>();\n        int lastRegexLength = lastRegexStringLength < 0 ? 0 : lastRegexStringLength;\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(string);\n        String group = null;\n        int start = 0;\n        while (matcher.find(start)) {\n            start = matcher.end();\n            group = matcher.group();\n            group = group.replaceFirst(firstRegex, firstRegexReplace);\n            group = group.substring(0, group.length() - lastRegexLength);\n            list.add(group);\n        }\n    }\n    return list;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * add resource\n *\n * @param rType\n * @param idType\n * @param name\n * @param idValue\n */\n", "func_signal": "public void addResource(RType rType, IdType idType, String name, String idValue)", "code": "{\n    Set<RDotTxtEntry> resourceSet = null;\n    if (this.rTypeResourceMap.containsKey(rType)) {\n        resourceSet = this.rTypeResourceMap.get(rType);\n    } else {\n        resourceSet = new HashSet<RDotTxtEntry>();\n        this.rTypeResourceMap.put(rType, resourceSet);\n    }\n    RDotTxtEntry rDotTxtEntry = new RDotTxtEntry(idType, rType, name, idValue);\n    boolean increaseResource = false;\n    if (!resourceSet.contains(rDotTxtEntry)) {\n        if (this.originalResourceMap.containsKey(rDotTxtEntry)) {\n            this.rTypeEnumeratorMap.get(rType).previous();\n            rDotTxtEntry = this.originalResourceMap.get(rDotTxtEntry);\n        } else {\n            increaseResource = true;\n        }\n        resourceSet.add(rDotTxtEntry);\n    }\n    Set<RDotTxtEntry> increaseResourceSet = null;\n    //new r dot txt entry\n    if (this.rTypeIncreaseResourceMap.containsKey(rType)) {\n        increaseResourceSet = this.rTypeIncreaseResourceMap.get(rType);\n    } else {\n        increaseResourceSet = new HashSet<RDotTxtEntry>();\n        this.rTypeIncreaseResourceMap.put(rType, increaseResourceSet);\n    }\n    if (increaseResource) {\n        increaseResourceSet.add(rDotTxtEntry);\n        // addResourceDirectory(rType, name, resourceDirectory);\n    }\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptResourceCollector.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * <p>Method:only for regex,parse regex group when regex include group</p>\n *\n * @param string\n * @param regex\n * @return List<String>\n */\n", "func_signal": "public static List<String> parseRegexGroup(final String string, final String regex)", "code": "{\n    List<String> groupList = null;\n    if (string != null && regex != null) {\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(string);\n        int groupCount = matcher.groupCount();\n        int count = 1;\n        groupList = new ArrayList<String>();\n        if (matcher.find()) {\n            while (count <= groupCount) {\n                groupList.add(matcher.group(count));\n                count++;\n            }\n        }\n    }\n    return groupList;\n}", "path": "tinker/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/StringUtil.java", "commit_date": "2016-09-21 00:00:00", "repo_name": "Tencent/tinker", "stars": 17005, "license": "other", "language": "java", "size": 7018}
{"docstring": "/**\n * Return the path of /storage/emulated/0.\n *\n * @return the path of /storage/emulated/0\n */\n", "func_signal": "public static String getExternalStoragePath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStorageDirectory());\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Notifications.\n *\n * @return the path of /storage/emulated/0/Notifications\n */\n", "func_signal": "public static String getExternalNotificationsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_NOTIFICATIONS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files\n */\n", "func_signal": "public static String getExternalAppFilesPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(null));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files/DCIM.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files/DCIM\n */\n", "func_signal": "public static String getExternalAppDcimPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(Environment.DIRECTORY_DCIM));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/DCIM.\n *\n * @return the path of /storage/emulated/0/DCIM\n */\n", "func_signal": "public static String getExternalDcimPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files/Podcasts.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files/Podcasts\n */\n", "func_signal": "public static String getExternalAppPodcastsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(Environment.DIRECTORY_PODCASTS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /data/data/package/no_backup.\n *\n * @return the path of /data/data/package/no_backup\n */\n", "func_signal": "public static String getInternalAppNoBackupFilesPath()", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n        return Utils.getApp().getApplicationInfo().dataDir + \"/no_backup\";\n    }\n    return getAbsolutePath(Utils.getApp().getNoBackupFilesDir());\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Documents.\n *\n * @return the path of /storage/emulated/0/Documents\n */\n", "func_signal": "public static String getExternalDocumentsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n        return getAbsolutePath(Environment.getExternalStorageDirectory()) + \"/Documents\";\n    }\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Music.\n *\n * @return the path of /storage/emulated/0/Music\n */\n", "func_signal": "public static String getExternalMusicPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files/Notifications.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files/Notifications\n */\n", "func_signal": "public static String getExternalAppNotificationsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(Environment.DIRECTORY_NOTIFICATIONS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Download.\n *\n * @return the path of /storage/emulated/0/Download\n */\n", "func_signal": "public static String getExternalDownloadsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Pictures.\n *\n * @return the path of /storage/emulated/0/Pictures\n */\n", "func_signal": "public static String getExternalPicturesPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/cache.\n *\n * @return the path of /storage/emulated/0/Android/data/package/cache\n */\n", "func_signal": "public static String getExternalAppCachePath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalCacheDir());\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files/Alarms.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files/Alarms\n */\n", "func_signal": "public static String getExternalAppAlarmsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(Environment.DIRECTORY_ALARMS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Alarms.\n *\n * @return the path of /storage/emulated/0/Alarms\n */\n", "func_signal": "public static String getExternalAlarmsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_ALARMS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /data/data/package/code_cache.\n *\n * @return the path of /data/data/package/code_cache\n */\n", "func_signal": "public static String getInternalAppCodeCacheDir()", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n        return Utils.getApp().getApplicationInfo().dataDir + \"/code_cache\";\n    }\n    return getAbsolutePath(Utils.getApp().getCodeCacheDir());\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files/Ringtones.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files/Ringtones\n */\n", "func_signal": "public static String getExternalAppRingtonesPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(Environment.DIRECTORY_RINGTONES));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files/Download.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files/Download\n */\n", "func_signal": "public static String getExternalAppDownloadPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Podcasts.\n *\n * @return the path of /storage/emulated/0/Podcasts\n */\n", "func_signal": "public static String getExternalPodcastsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    return getAbsolutePath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PODCASTS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Return the path of /storage/emulated/0/Android/data/package/files/Documents.\n *\n * @return the path of /storage/emulated/0/Android/data/package/files/Documents\n */\n", "func_signal": "public static String getExternalAppDocumentsPath()", "code": "{\n    if (!UtilsBridge.isSDCardEnableByEnvironment()) return \"\";\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n        return getAbsolutePath(Utils.getApp().getExternalFilesDir(null)) + \"/Documents\";\n    }\n    return getAbsolutePath(Utils.getApp().getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS));\n}", "path": "AndroidUtilCode/lib/utilcode/src/main/java/com/blankj/utilcode/util/PathUtils.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "Blankj/AndroidUtilCode", "stars": 32842, "license": "apache-2.0", "language": "java", "size": 47327}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(android.content.ContentResolver, android.net.Uri)}\n *\n * @param uri             data source\n * @param contentResolver resolver used to query {@code uri}\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(ContentResolver contentResolver, Uri uri)", "code": "{\n    mInputSource = new InputSource.UriSource(contentResolver, uri);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Sets the content of this GifImageView to the specified Uri.\n * If uri destination is not a GIF then {@link android.widget.ImageView#setImageURI(android.net.Uri)}\n * is called as fallback.\n * For supported URI schemes see: {@link android.content.ContentResolver#openAssetFileDescriptor(android.net.Uri, String)}.\n *\n * @param uri The Uri of an image\n */\n", "func_signal": "@Override\npublic void setImageURI(Uri uri)", "code": "{\n\tif (!GifViewUtils.setGifImageUri(this, uri)) {\n\t\tsuper.setImageURI(uri);\n\t}\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageButton.java", "commit_date": "2018-11-03 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Sets whether rendering of the next frame is scheduled after drawing current one (so animation\n * will be paused if drawing does not happen) or just after rendering frame (no matter if it is\n * drawn or not). However animation will never run if drawable is set to not visible. See\n * {@link GifDrawable#isVisible()} for more information about drawable visibility.\n * By default this option is enabled. Note that drawing does not happen if view containing\n * drawable is obscured. Disabling this option will prevent that however battery draining will be\n * higher.\n *\n * @param isRenderingTriggeredOnDraw whether rendering of the next frame is scheduled after drawing (default)\n *                                   current one or just after it is rendered\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T renderingTriggeredOnDraw(boolean isRenderingTriggeredOnDraw)", "code": "{\n    mIsRenderingTriggeredOnDraw = isRenderingTriggeredOnDraw;\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * See {@link GifDrawable#recycle()}. Decoder thread is stopped automatically.\n */\n", "func_signal": "public void recycle()", "code": "{\n\tif (mGifInfoHandle != null) {\n\t\tmGifInfoHandle.recycle();\n\t}\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifTexImage2D.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(java.io.FileDescriptor)}\n *\n * @param fileDescriptor data source\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(FileDescriptor fileDescriptor)", "code": "{\n    mInputSource = new InputSource.FileDescriptorSource(fileDescriptor);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(java.io.File)}\n *\n * @param file data source\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(File file)", "code": "{\n    mInputSource = new InputSource.FileSource(file);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(java.nio.ByteBuffer)}\n *\n * @param byteBuffer data source\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(ByteBuffer byteBuffer)", "code": "{\n    mInputSource = new InputSource.DirectByteBufferSource(byteBuffer);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(java.io.InputStream)}\n *\n * @param inputStream data source\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(InputStream inputStream)", "code": "{\n    mInputSource = new InputSource.InputStreamSource(inputStream);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Like equivalent from superclass but also try to interpret src and background\n * attributes as GIFs.\n *\n * @param context\n * @param attrs\n * @param defStyle\n * @param defStyleRes\n * @see ImageView#ImageView(Context, AttributeSet, int, int)\n */\n", "func_signal": "@RequiresApi(Build.VERSION_CODES.LOLLIPOP)\npublic GifImageView(Context context, AttributeSet attrs, int defStyle, int defStyleRes)", "code": "{\n\tsuper(context, attrs, defStyle, defStyleRes);\n\tpostInit(GifViewUtils.initImageView(this, attrs, defStyle, defStyleRes));\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageView.java", "commit_date": "2018-11-03 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(android.content.res.Resources, int)}\n *\n * @param resources  Resources to read from\n * @param resourceId resource id (data source)\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(Resources resources, int resourceId)", "code": "{\n    mInputSource = new InputSource.ResourcesSource(resources, resourceId);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Appropriate constructor wrapper. Must be preceded by on of {@code from()} calls.\n *\n * @return new drawable instance\n * @throws IOException when creation fails\n */\n", "func_signal": "public GifDrawable build() throws IOException", "code": "{\n    if (mInputSource == null) {\n        throw new NullPointerException(\"Source is not set\");\n    }\n    return mInputSource.createGifDrawable(mOldDrawable, mExecutor, mIsRenderingTriggeredOnDraw, mOptions);\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Sets or resets executor for rendering tasks.\n * Warning: value set by {@link #threadPoolSize(int)} will not be taken into account after setting executor\n *\n * @param executor executor to be used or null for default (each drawable instance has its own executor)\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T taskExecutor(ScheduledThreadPoolExecutor executor)", "code": "{\n    mExecutor = executor;\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Sets thread pool size for rendering tasks.\n * Warning: custom executor set by {@link #taskExecutor(java.util.concurrent.ScheduledThreadPoolExecutor)}\n * will be overwritten after setting pool size\n *\n * @param threadPoolSize size of the pool\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T threadPoolSize(int threadPoolSize)", "code": "{\n    mExecutor = new ScheduledThreadPoolExecutor(threadPoolSize);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Indicates whether the content of this source is opaque. GIF that is known to be opaque can\n * take a faster drawing case than non-opaque one. See {@link GifTextureView#setOpaque(boolean)}\n * for more information.<br>\n * Currently it is used only by {@link GifTextureView}, not by {@link GifDrawable}.\n * <p>\n * Note that this call will overwrite sample size set previously by {@link #sampleSize(int)}\n *\n * @param options null-ok; options controlling parameters like subsampling and opacity\n * @return this builder instance, to chain calls\n */\n", "func_signal": "@Beta\npublic T options(@Nullable GifOptions options)", "code": "{\n    mOptions.setFrom(options);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Like equivalent from superclass but also try to interpret src and background\n * attributes as GIFs.\n *\n * @param context\n * @param attrs\n * @param defStyle\n * @see ImageView#ImageView(Context, AttributeSet, int)\n */\n", "func_signal": "public GifImageView(Context context, AttributeSet attrs, int defStyle)", "code": "{\n\tsuper(context, attrs, defStyle);\n\tpostInit(GifViewUtils.initImageView(this, attrs, defStyle, 0));\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageView.java", "commit_date": "2018-11-03 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(java.lang.String)}\n *\n * @param filePath data source\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(String filePath)", "code": "{\n    mInputSource = new InputSource.FileSource(filePath);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Associates given {@link Callback}. If callback has been already added, nothing happens.\n *\n * @param callback Callback to be associated\n */\n", "func_signal": "public void addView(final Callback callback)", "code": "{\n\tfor (int i = 0; i < mCallbacks.size(); i++) {\n\t\tfinal CallbackWeakReference reference = mCallbacks.get(i);\n\t\tfinal Callback item = reference.get();\n\t\tif (item == null) {\n\t\t\t// Always remove null references to reduce list size\n\t\t\tmCallbacks.remove(reference);\n\t\t}\n\t}\n\tmCallbacks.addIfAbsent(new CallbackWeakReference(callback));\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/MultiCallback.java", "commit_date": "2018-11-03 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(android.content.res.AssetManager, java.lang.String)}\n *\n * @param assetManager assets source\n * @param assetName    asset file name\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(AssetManager assetManager, String assetName)", "code": "{\n    mInputSource = new InputSource.AssetSource(assetManager, assetName);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Wrapper of {@link pl.droidsonroids.gif.GifDrawable#GifDrawable(android.content.res.AssetFileDescriptor)}\n *\n * @param assetFileDescriptor data source\n * @return this builder instance, to chain calls\n */\n", "func_signal": "public T from(AssetFileDescriptor assetFileDescriptor)", "code": "{\n    mInputSource = new InputSource.AssetFileDescriptorSource(assetFileDescriptor);\n    return self();\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableInit.java", "commit_date": "2020-04-23 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Like equivalent from superclass but also try to interpret src and background\n * attributes as GIFs.\n *\n * @param context\n * @param attrs\n * @param defStyle\n * @see ImageButton#ImageButton(Context, AttributeSet, int)\n */\n", "func_signal": "public GifImageButton(Context context, AttributeSet attrs, int defStyle)", "code": "{\n\tsuper(context, attrs, defStyle);\n\tpostInit(GifViewUtils.initImageView(this, attrs, defStyle, 0));\n}", "path": "android-gif-drawable/android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageButton.java", "commit_date": "2018-11-03 00:00:00", "repo_name": "koral--/android-gif-drawable", "stars": 9486, "license": "other", "language": "java", "size": 6025}
{"docstring": "/**\n * Constructor called from {@link LockPatternView#onSaveInstanceState()}\n */\n", "func_signal": "private SavedState(Parcelable superState, String serializedPattern, int displayMode,\n        boolean inputEnabled, boolean inStealthMode, boolean tactileFeedbackEnabled)", "code": "{\n    super(superState);\n    mSerializedPattern = serializedPattern;\n    mDisplayMode = displayMode;\n    mInputEnabled = inputEnabled;\n    mInStealthMode = inStealthMode;\n    mTactileFeedbackEnabled = tactileFeedbackEnabled;\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Set each button checked or not according to category.\n *\n * @param category target category\n */\n", "func_signal": "public void setCategory(int category)", "code": "{\n    mDoujinshi.setChecked(!NumberUtils.int2boolean(category & EhConfig.DOUJINSHI), false);\n    mManga.setChecked(!NumberUtils.int2boolean(category & EhConfig.MANGA), false);\n    mArtistCG.setChecked(!NumberUtils.int2boolean(category & EhConfig.ARTIST_CG), false);\n    mGameCG.setChecked(!NumberUtils.int2boolean(category & EhConfig.GAME_CG), false);\n    mWestern.setChecked(!NumberUtils.int2boolean(category & EhConfig.WESTERN), false);\n    mNonH.setChecked(!NumberUtils.int2boolean(category & EhConfig.NON_H), false);\n    mImageSets.setChecked(!NumberUtils.int2boolean(category & EhConfig.IMAGE_SET), false);\n    mCosplay.setChecked(!NumberUtils.int2boolean(category & EhConfig.COSPLAY), false);\n    mAsianPorn.setChecked(!NumberUtils.int2boolean(category & EhConfig.ASIAN_PORN), false);\n    mMisc.setChecked(!NumberUtils.int2boolean(category & EhConfig.MISC), false);\n}", "path": "EhViewer/app/src/main/java/com/hippo/ehviewer/widget/CategoryTable.java", "commit_date": "2019-08-07 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Reduces the length of the history table, to prevent it from growing too large.\n *\n * @param maxEntries Max entries to leave in the table. 0 means remove all entries.\n */\n", "func_signal": "protected void truncateHistory(int maxEntries)", "code": "{\n    if (maxEntries < 0) {\n        throw new IllegalArgumentException();\n    }\n\n    try {\n        // null means \"delete all\".  otherwise \"delete but leave n newest\"\n        String selection = null;\n        if (maxEntries > 0) {\n            selection = \"_id IN \" +\n                    \"(SELECT _id FROM \" + TABLE_SUGGESTIONS +\n                    \" ORDER BY \" + COLUMN_DATE + \" DESC\" +\n                    \" LIMIT -1 OFFSET \" + String.valueOf(maxEntries) + \")\";\n        }\n        mDatabase.delete(TABLE_SUGGESTIONS, selection, null);\n    } catch (RuntimeException e) {\n        Log.e(TAG, \"truncateHistory\", e);\n    }\n}", "path": "EhViewer/app/src/main/java/com/hippo/ehviewer/widget/SearchDatabase.java", "commit_date": "2019-01-16 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Helper method to find the row that y falls into.\n * @param y The y coordinate\n * @return The row that y falls in, or -1 if it falls in no row.\n */\n", "func_signal": "private int getRowHit(float y)", "code": "{\n\n    final float squareHeight = mSquareHeight;\n    float hitSize = squareHeight * mHitFactor;\n\n    float offset = getPaddingTop() + (squareHeight - hitSize) / 2f;\n    for (int i = 0; i < 3; i++) {\n\n        final float hitTop = offset + squareHeight * i;\n        if (y >= hitTop && y <= hitTop + hitSize) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Clear the pattern lookup table.\n */\n", "func_signal": "private void clearPatternDrawLookup()", "code": "{\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            mPatternDrawLookup[i][j] = false;\n        }\n    }\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * @param partOfPattern Whether this circle is part of the pattern.\n */\n", "func_signal": "private void drawCircle(Canvas canvas, float centerX, float centerY, float size,\n        boolean partOfPattern, float alpha)", "code": "{\n    mPaint.setColor(getCurrentColor(partOfPattern));\n    mPaint.setAlpha((int) (alpha * 255));\n    canvas.drawCircle(centerX, centerY, size/2, mPaint);\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * @param context used to get the configuration for the drawable from\n */\n", "func_signal": "public DrawerArrowDrawable(Context context, int color)", "code": "{\n    Resources resources = context.getResources();\n\n    mPaint.setAntiAlias(true);\n    mPaint.setColor(color);\n    mSize = resources.getDimensionPixelSize(R.dimen.dad_drawable_size);\n    // round this because having this floating may cause bad measurements\n    mBarSize = Math.round(resources.getDimension(R.dimen.dad_bar_size));\n    // round this because having this floating may cause bad measurements\n    mTopBottomArrowSize = Math.round(resources.getDimension(R.dimen.dad_top_bottom_bar_arrow_size));\n    mBarThickness = resources.getDimension(R.dimen.dad_thickness);\n    // round this because having this floating may cause bad measurements\n    mBarGap = Math.round(resources.getDimension(R.dimen.dad_gap_between_bars));\n    mSpin = resources.getBoolean(R.bool.dad_spin_bars);\n    mMiddleArrowSize = resources.getDimension(R.dimen.dad_middle_bar_arrow_size);\n\n    mPaint.setStyle(Paint.Style.STROKE);\n    mPaint.setStrokeJoin(Paint.Join.MITER);\n    mPaint.setStrokeCap(Paint.Cap.BUTT);\n    mPaint.setStrokeWidth(mBarThickness);\n\n    mMaxCutForBarSize = (float) (mBarThickness / 2 * Math.cos(ARROW_HEAD_ANGLE));\n}", "path": "EhViewer/app/src/main/java/com/hippo/drawable/DrawerArrowDrawable.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Constructor called from {@link #CREATOR}\n */\n", "func_signal": "@SuppressLint(\"ParcelClassLoader\")\nprivate SavedState(Parcel in)", "code": "{\n    super(in);\n    mSerializedPattern = in.readString();\n    mDisplayMode = in.readInt();\n    mInputEnabled = (Boolean) in.readValue(null);\n    mInStealthMode = (Boolean) in.readValue(null);\n    mTactileFeedbackEnabled = (Boolean) in.readValue(null);\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Get category according to button.\n * @return the category of this view\n */\n", "func_signal": "public int getCategory()", "code": "{\n    int category = 0;\n    if (!mDoujinshi.isChecked()) category |= EhConfig.DOUJINSHI;\n    if (!mManga.isChecked()) category |= EhConfig.MANGA;\n    if (!mArtistCG.isChecked()) category |= EhConfig.ARTIST_CG;\n    if (!mGameCG.isChecked()) category |= EhConfig.GAME_CG;\n    if (!mWestern.isChecked()) category |= EhConfig.WESTERN;\n    if (!mNonH.isChecked()) category |= EhConfig.NON_H;\n    if (!mImageSets.isChecked()) category |= EhConfig.IMAGE_SET;\n    if (!mCosplay.isChecked()) category |= EhConfig.COSPLAY;\n    if (!mAsianPorn.isChecked()) category |= EhConfig.ASIAN_PORN;\n    if (!mMisc.isChecked()) category |= EhConfig.MISC;\n    return category;\n}", "path": "EhViewer/app/src/main/java/com/hippo/ehviewer/widget/CategoryTable.java", "commit_date": "2019-08-07 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Determines whether the point x, y will add a new point to the current\n * pattern (in addition to finding the cell, also makes heuristic choices\n * such as filling in gaps based on current pattern).\n * @param x The x coordinate.\n * @param y The y coordinate.\n */\n", "func_signal": "private Cell detectAndAddHit(float x, float y)", "code": "{\n    final Cell cell = checkForNewHit(x, y);\n    if (cell != null) {\n\n        // check for gaps in existing pattern\n        Cell fillInGapCell = null;\n        final ArrayList<Cell> pattern = mPattern;\n        if (!pattern.isEmpty()) {\n            final Cell lastCell = pattern.get(pattern.size() - 1);\n            int dRow = cell.row - lastCell.row;\n            int dColumn = cell.column - lastCell.column;\n\n            int fillInRow = lastCell.row;\n            int fillInColumn = lastCell.column;\n\n            if (Math.abs(dRow) == 2 && Math.abs(dColumn) != 1) {\n                fillInRow = lastCell.row + ((dRow > 0) ? 1 : -1);\n            }\n\n            if (Math.abs(dColumn) == 2 && Math.abs(dRow) != 1) {\n                fillInColumn = lastCell.column + ((dColumn > 0) ? 1 : -1);\n            }\n\n            fillInGapCell = Cell.of(fillInRow, fillInColumn);\n        }\n\n        if (fillInGapCell != null &&\n                !mPatternDrawLookup[fillInGapCell.row][fillInGapCell.column]) {\n            addCellToPattern(fillInGapCell);\n        }\n        addCellToPattern(cell);\n        if (mEnableHapticFeedback) {\n            performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,\n                    HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING\n                    | HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n        }\n        return cell;\n    }\n    return null;\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * @param row The row of the cell.\n * @param column The column of the cell.\n */\n", "func_signal": "public static synchronized Cell of(int row, int column)", "code": "{\n    checkRange(row, column);\n    return sCells[row][column];\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * <pre>{@code\n * args[0].hashCode()*31^(n-1) + args[1].hashCode()*31^(n-2) + ... + args[n-1].hashCode()\n * }</pre>\n * Returns 0 if {@code args == null}.\n */\n", "func_signal": "public static int hashCode(Object... args)", "code": "{\n  if (args == null) {\n    return 0;\n  }\n  int hash = 0;\n  for (Object o: args) {\n    hash = X * hash + (o != null ? o.hashCode() : 0);\n  }\n  return hash;\n}", "path": "EhViewer/app/src/main/java/com/hippo/util/HashCodeUtils.java", "commit_date": "2017-09-06 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Helper method to find the column x fallis into.\n * @param x The x coordinate.\n * @return The column that x falls in, or -1 if it falls in no column.\n */\n", "func_signal": "private int getColumnHit(float x)", "code": "{\n    final float squareWidth = mSquareWidth;\n    float hitSize = squareWidth * mHitFactor;\n\n    float offset = getPaddingLeft() + (squareWidth - hitSize) / 2f;\n    for (int i = 0; i < 3; i++) {\n\n        final float hitLeft = offset + squareWidth * i;\n        if (x >= hitLeft && x <= hitLeft + hitSize) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Set the pattern explicitely (rather than waiting for the user to input\n * a pattern).\n * @param displayMode How to display the pattern.\n * @param pattern The pattern.\n */\n", "func_signal": "public void setPattern(DisplayMode displayMode, List<Cell> pattern)", "code": "{\n    mPattern.clear();\n    mPattern.addAll(pattern);\n    clearPatternDrawLookup();\n    for (Cell cell : pattern) {\n        mPatternDrawLookup[cell.getRow()][cell.getColumn()] = true;\n    }\n\n    setDisplayMode(displayMode);\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Selects either one of {@link #getFormat12Hour()} or {@link #getFormat24Hour()}\n * depending on whether the user has selected 24-hour format.\n *\n * @param handleTicker true if calling this method should schedule/unschedule the\n *                     time ticker, false otherwise\n */\n", "func_signal": "private void chooseFormat(boolean handleTicker)", "code": "{\n    final boolean format24Requested = is24HourModeEnabled();\n\n    if (format24Requested) {\n        mFormat = mFormat24;\n    } else {\n        mFormat = mFormat12;\n    }\n\n    boolean hadSeconds = mHasSeconds;\n    mHasSeconds = DateUtils.hasSeconds(mFormat);\n\n    if (handleTicker && mAttached && hadSeconds != mHasSeconds) {\n        if (hadSeconds) getHandler().removeCallbacks(mTicker);\n        else mTicker.run();\n    }\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/TextClock.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * @param row The row of the cell.\n * @param column The column of the cell.\n */\n", "func_signal": "private Cell(int row, int column)", "code": "{\n    checkRange(row, column);\n    this.row = row;\n    this.column = column;\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Set the display mode of the current pattern.  This can be useful, for\n * instance, after detecting a pattern to tell this view whether change the\n * in progress result to correct or wrong.\n * @param displayMode The display mode.\n */\n", "func_signal": "public void setDisplayMode(DisplayMode displayMode)", "code": "{\n    mPatternDisplayMode = displayMode;\n    if (displayMode == DisplayMode.Animate) {\n        if (mPattern.size() == 0) {\n            throw new IllegalStateException(\"you must have a pattern to \"\n                    + \"animate if you want to set the display mode to animate\");\n        }\n        mAnimatingPeriodStart = SystemClock.elapsedRealtime();\n        final Cell first = mPattern.get(0);\n        mInProgressX = getCenterXForColumn(first.getColumn());\n        mInProgressY = getCenterYForRow(first.getRow());\n        clearPatternDrawLookup();\n    }\n    invalidate();\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * mkdirs and get\n */\n", "func_signal": "@Nullable\npublic static File getDirInExternalAppDir(String filename)", "code": "{\n    File appFolder = getExternalAppDir();\n    if (appFolder != null) {\n        File dir = new File(appFolder, filename);\n        return FileUtils.ensureDirectory(dir) ? dir : null;\n    }\n    return null;\n}", "path": "EhViewer/app/src/main/java/com/hippo/ehviewer/AppConfig.java", "commit_date": "2019-02-11 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "// Remember to notify\n", "func_signal": "private void updateLazyList()", "code": "{\n    LazyList<HistoryInfo> lazyList = EhDB.getHistoryLazyList();\n    if (mLazyList != null) {\n        mLazyList.close();\n    }\n    mLazyList = lazyList;\n}", "path": "EhViewer/app/src/main/java/com/hippo/ehviewer/ui/scene/HistoryScene.java", "commit_date": "2019-04-16 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * Reset all pattern state.\n */\n", "func_signal": "private void resetPattern()", "code": "{\n    mPattern.clear();\n    clearPatternDrawLookup();\n    mPatternDisplayMode = DisplayMode.Correct;\n    invalidate();\n}", "path": "EhViewer/app/src/main/java/com/hippo/widget/lockpattern/LockPatternView.java", "commit_date": "2019-02-09 00:00:00", "repo_name": "seven332/EhViewer", "stars": 8415, "license": "apache-2.0", "language": "java", "size": 111228}
{"docstring": "/**\n * \u63cf\u753b\u3055\u308c\u3066\u304b\u3089 {@link WaveView#mMaxDropHeight} \u3092\u66f4\u65b0\u3059\u308b\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean onPreDraw()", "code": "{\n    final View thisView = this;\n    thisView.getViewTreeObserver().removeOnPreDrawListener(this);\n    if (mDropHeightUpdated) {\n        updateMaxDropHeight(mUpdateMaxDropHeight);\n    }\n    return false;\n}", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/waveswipe/WaveView.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/*\n * Set the amount of rotation to apply to the progress spinner.\n *\n * @param rotation Rotation is from [0..1]\n */\n", "func_signal": "public void setProgressRotation(float rotation)", "code": "{\n    mRing.mRotation = (rotation);\n    final Drawable thisDrawable = this;\n    thisDrawable.invalidateSelf();\n}", "path": "SmartRefreshLayout/refresh-header-material/src/main/java/com/scwang/smart/refresh/header/material/MaterialProgressDrawable.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/*\n * @param scale Set the scale of the arrowhead for the spinner.\n */\n", "func_signal": "public void setArrowScale(float scale)", "code": "{\n    if (mRing.mArrowScale != scale) {\n        mRing.mArrowScale = scale;\n        final Drawable thisDrawable = this;\n        thisDrawable.invalidateSelf();\n    }\n}", "path": "SmartRefreshLayout/refresh-header-material/src/main/java/com/scwang/smart/refresh/header/material/MaterialProgressDrawable.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/**\n * WaveView is colored by given color (including alpha)\n *\n * @param color ARGB color. WaveView will be colored by Black if rgb color is provided.\n * @see Paint#setColor(int)\n */\n", "func_signal": "public void setWaveColor(@ColorInt int color)", "code": "{\n    mPaint.setColor(color);\n    final View thisView = this;\n    thisView.invalidate();\n}", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/waveswipe/WaveView.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//<editor-fold desc=\"RefreshHeader\">\n", "func_signal": "@Override\npublic void onInitialized(@NonNull RefreshKernel kernel, int height, int maxDragHeight)", "code": "{\n    mKernel = kernel;\n    mHeaderHeight = height;\n    kernel.requestDrawBackgroundFor(this, mBackgroundColor);\n    final int sideLength = generateSideLength();\n    mDrawable1.setBounds(0, 0, sideLength, sideLength);\n    mDrawable2.setBounds(0, 0, sideLength, sideLength);\n    mDrawable3.setBounds(0, 0, sideLength, sideLength);\n}", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/DropBoxHeader.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//            @Override\n//            public void onFooterPulling(@NonNull RefreshFooter footer, float percent, int offset, int footerHeight, int maxDragHeight) {\n//                mFooterPulling = String.format(Locale.CHINA, \"%s\\npercent=%.02f\\noffset=%03d height=%03d\\nextend=%03d\",\n//                        FORMAT.format(new Date()),\n//                        percent,offset,footerHeight,maxDragHeight);\n//                updateContent();\n//            }\n//\n//            @Override\n//            public void onFooterReleasing(@NonNull RefreshFooter footer, float percent, int offset, int footerHeight, int maxDragHeight) {\n//                mFooterReleasing = String.format(Locale.CHINA, \"%s\\npercent=%.02f\\noffset=%03d height=%03d\\nextend=%03d\",\n//                        FORMAT.format(new Date()),\n//                        percent,offset,footerHeight,maxDragHeight);\n//                updateContent();\n//            }\n", "func_signal": "@Override\n            public void onFooterStartAnimator(@NonNull RefreshFooter footer, int footerHeight, int maxDragHeight)", "code": "{\n                mFooterStartAnimator = String.format(Locale.CHINA, \"%s\\nheight=%03d extend=%03d\",\n                        FORMAT.format(new Date()),\n                        footerHeight,maxDragHeight);\n                updateContent();\n            }", "path": "SmartRefreshLayout/app/src/main/java/com/scwang/refreshlayout/activity/example/ListenerExampleActivity.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//</editor-fold>\n", "func_signal": "public void setPrimaryColor(@ColorInt int color)", "code": "{\n//        private int COLOR_BACKGROUND = 0xFF7ECEC9;\n//        private int COLOR_MOUNTAIN_1 = 0xFF86DAD7;\n//        private int COLOR_MOUNTAIN_2 = 0xFF3C929C;\n//        private int COLOR_MOUNTAIN_3 = 0xFF3E5F73;\n//        private int COLOR_TREE_1_BRANCH = 0xFF1F7177;\n//        private int COLOR_TREE_1_BRINK = 0xFF0C3E48;\n//        private int COLOR_TREE_2_BRANCH = 0xFF34888F;\n//        private int COLOR_TREE_2_BRINK = 0xFF1B6169;\n//        private int COLOR_TREE_3_BRANCH = 0xFF57B1AE;\n//        private int COLOR_TREE_3_BRINK = 0xFF62A4AD;\n    COLOR_BACKGROUND = color;\n    COLOR_MOUNTAIN_1 = ColorUtils.compositeColors(0x99ffffff,color);\n    COLOR_MOUNTAIN_2 = ColorUtils.compositeColors(0x993C929C,color);\n    COLOR_MOUNTAIN_3 = ColorUtils.compositeColors(0xCC3E5F73,color);\n    COLOR_TREE_1_BRANCH = ColorUtils.compositeColors(0x551F7177,color);\n    COLOR_TREE_1_BRINK = ColorUtils.compositeColors(0xCC0C3E48,color);\n    COLOR_TREE_2_BRANCH = ColorUtils.compositeColors(0x5534888F,color);\n    COLOR_TREE_2_BRINK = ColorUtils.compositeColors(0xCC1B6169,color);\n    COLOR_TREE_3_BRANCH = ColorUtils.compositeColors(0x5557B1AE,color);\n    COLOR_TREE_3_BRINK = ColorUtils.compositeColors(0xCC62A4AD,color);\n}", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/flyrefresh/MountainSceneView.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/**\n * @param colors \u5bf9\u5e94Xml\u4e2d\u914d\u7f6e\u7684 srlPrimaryColor srlAccentColor\n * @deprecated \u8bf7\u4f7f\u7528 {@link RefreshLayout#setPrimaryColorsId(int...)}\n */\n", "func_signal": "@Override@Deprecated\npublic void setPrimaryColors(@ColorInt int ... colors)", "code": "{\n    if (colors.length > 0) {\n        mBackgroundColor = colors[0];\n        if (mKernel != null) {\n            mKernel.requestDrawBackgroundFor(this, mBackgroundColor);\n        }\n        if (colors.length > 1) {\n            mAccentColor = colors[1];\n        }\n    }\n}", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/DropBoxHeader.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//</editor-fold>\n", "func_signal": "@Override\nprotected void dispatchDraw(Canvas canvas)", "code": "{\n    final View thisView = this;\n    final int width = thisView.getWidth();\n    final int height = thisView.getHeight();\n    float radius = (Math.min(width, height) - mCircleSpacing * 2) / 6;\n    float x = width / 2f - (radius * 2 + mCircleSpacing);\n    float y = height / 2f;\n\n    final long now = System.currentTimeMillis();\n\n    for (int i = 0; i < 3; i++) {\n\n        long time = now - mStartTime - 120 * (i + 1);\n        float percent = time > 0 ? ((time%750)/750f) : 0;\n        percent = mInterpolator.getInterpolation(percent);\n\n        canvas.save();\n\n        float translateX = x + (radius * 2) * i + mCircleSpacing * i;\n        canvas.translate(translateX, y);\n\n        if (percent < 0.5) {\n            float scale = 1 - percent * 2 * 0.7f;\n            canvas.scale(scale, scale);\n        } else {\n            float scale = percent * 2 * 0.7f - 0.4f;\n            canvas.scale(scale, scale);\n        }\n\n        canvas.drawCircle(0, 0, radius, mPaint);\n        canvas.restore();\n    }\n\n    super.dispatchDraw(canvas);\n\n    if (mIsStarted) {\n        thisView.invalidate();\n    }\n}", "path": "SmartRefreshLayout/refresh-footer-ball/src/main/java/com/scwang/smart/refresh/footer/BallPulseFooter.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/**\n * Constructor\n * {@inheritDoc}\n */\n", "func_signal": "public WaveView(Context context)", "code": "{\n    super(context);\n//        setUpPaint();\n    final View thisView = this;\n    float density = thisView.getResources().getDisplayMetrics().density;\n    mPaint = new Paint();\n    mPaint.setColor(0xff2196F3);\n    mPaint.setAntiAlias(true);\n    mPaint.setStyle(Paint.Style.FILL);\n    mPaint.setShadowLayer((int) (0.5f + 2.0f * density), 0f, 0f, SHADOW_COLOR);\n\n//        setUpPath();\n    mWavePath = new Path();\n    mDropTangentPath = new Path();\n    mDropCirclePath = new Path();\n    mShadowPath = new Path();\n\n    resetAnimator();\n\n    mDropRect = new RectF();\n    thisView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n    thisView.getViewTreeObserver().addOnPreDrawListener(this);\n}", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/waveswipe/WaveView.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/*\n * @param index Index into the color array of the color to display in\n *            the progress spinner.\n */\n", "func_signal": "public void setColorIndex(int index)", "code": "{\n    mColorIndex = index;\n    mCurrentColor = mColors[mColorIndex];\n}", "path": "SmartRefreshLayout/refresh-header-material/src/main/java/com/scwang/smart/refresh/header/material/MaterialProgressDrawable.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//    protected void setUpPaint() {\n//        float density = getResources().getDisplayMetrics().density;\n//        mPaint = new Paint();\n//        mPaint.setColor(0xff2196F3);\n//        mPaint.setAntiAlias(true);\n//        mPaint.setStyle(Paint.Style.FILL);\n//        mPaint.setShadowLayer((int) (0.5f + 2.0f * density), 0f, 0f, SHADOW_COLOR);\n//\n////    float density = getResources().getDisplayMetrics().density;\n////    mShadowPaint = new Paint();\n////    mShadowPaint.setAntiAlias(true);\n////    mShadowPaint.setShadowLayer((int) (0.5f + 2.0f * density), 0f, 0f, SHADOW_COLOR);\n//    }\n//\n//    protected void setUpPath() {\n//        mWavePath = new Path();\n//        mDropTangentPath = new Path();\n//        mDropCirclePath = new Path();\n//        mShadowPath = new Path();\n//    }\n", "func_signal": "protected void resetAnimator()", "code": "{\n        mDropVertexAnimator = ValueAnimator.ofFloat(0.f, 0.f);\n        mDropBounceVerticalAnimator = ValueAnimator.ofFloat(0.f, 0.f);\n        mDropBounceHorizontalAnimator = ValueAnimator.ofFloat(0.f, 0.f);\n        mDropCircleAnimator = ValueAnimator.ofFloat(-1000.f, -1000.f);\n        mDropCircleAnimator.start();\n        mDisappearCircleAnimator = ValueAnimator.ofFloat(1.f, 1.f);\n        mDisappearCircleAnimator.setDuration(1); // immediately finish animation cycle\n        mDisappearCircleAnimator.start();\n    }", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/waveswipe/WaveView.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/*\n * Draw the progress spinner\n */\n", "func_signal": "public void draw(Canvas c, Rect bounds)", "code": "{\n    final RectF arcBounds = mTempBounds;\n    arcBounds.set(bounds);\n    arcBounds.inset(mStrokeInset, mStrokeInset);\n\n    final float startAngle = (mStartTrim + mRotation) * 360;\n    final float endAngle = (mEndTrim + mRotation) * 360;\n    float sweepAngle = endAngle - startAngle;\n\n    if (sweepAngle != 0) {\n        mPaint.setColor(mCurrentColor);\n        c.drawArc(arcBounds, startAngle, sweepAngle, false, mPaint);\n    }\n\n    drawTriangle(c, startAngle, sweepAngle, bounds);\n\n//            if (mAlpha < 255) {\n//                mCirclePaint.setColor(mBackgroundColor);\n//                mCirclePaint.setAlpha(255 - mAlpha);\n//                c.drawCircle(bounds.exactCenterX(), bounds.exactCenterY(), bounds.width() / 2f,\n//                        mCirclePaint);\n//            }\n}", "path": "SmartRefreshLayout/refresh-header-material/src/main/java/com/scwang/smart/refresh/header/material/MaterialProgressDrawable.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/*\n * @param show Set to true to display the arrowhead on the progress spinner.\n */\n", "func_signal": "public void showArrow(boolean show)", "code": "{\n    if (mRing.mShowArrow != show) {\n        mRing.mShowArrow = show;\n        final Drawable thisDrawable = this;\n        thisDrawable.invalidateSelf();\n    }\n}", "path": "SmartRefreshLayout/refresh-header-material/src/main/java/com/scwang/smart/refresh/header/material/MaterialProgressDrawable.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/**\n * View\u306e\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u305f\u3089 {@link WaveView#mWidth} \u306b\u6a2a\u5e45\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n    mWidth = w;\n    mDropCircleRadius = w / 14.4f;\n    final View thisView = this;\n    updateMaxDropHeight((int) Math.min(Math.min(w, h), thisView.getHeight() - mDropCircleRadius));\n    super.onSizeChanged(w, h, oldw, oldh);\n}", "path": "SmartRefreshLayout/refresh-header/src/main/java/com/scwang/smart/refresh/header/waveswipe/WaveView.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/*\n * Set the overall size for the progress spinner. This updates the radius\n * and stroke width of the ring.\n */\n", "func_signal": "public void updateSizes(@ProgressDrawableSize int size)", "code": "{\n    if (size == LARGE) {\n        setSizeParameters(CIRCLE_DIAMETER_LARGE, CIRCLE_DIAMETER_LARGE, CENTER_RADIUS_LARGE,\n                STROKE_WIDTH_LARGE, ARROW_WIDTH_LARGE, ARROW_HEIGHT_LARGE);\n    } else {\n        setSizeParameters(CIRCLE_DIAMETER, CIRCLE_DIAMETER, CENTER_RADIUS, STROKE_WIDTH,\n                ARROW_WIDTH, ARROW_HEIGHT);\n    }\n}", "path": "SmartRefreshLayout/refresh-header-material/src/main/java/com/scwang/smart/refresh/header/material/MaterialProgressDrawable.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//<editor-fold desc=\"RefreshHeader\">\n", "func_signal": "@Override\npublic void onReleased(@NonNull RefreshLayout layout, int height, int maxDragHeight)", "code": "{\n    if (mRefreshKernel != null) {\n        /*\n         * 2020-3-15 BUG\u4fee\u590d\n         * https://github.com/scwang90/SmartRefreshLayout/issues/1018\n         * \u5f3a\u5316\u4e86 closeHeaderOrFooter \u7684\u5173\u95ed\u903b\u8f91\uff0c\u5e2e\u52a9 Header \u53d6\u6d88\u5237\u65b0\n         * FalsifyHeader \u662f\u4e0d\u80fd\u89e6\u53d1\u5237\u65b0\u7684\n         */\n        layout.closeHeaderOrFooter();\n//            mRefreshKernel.setState(RefreshState.None);\n//            //onReleased \u7684\u65f6\u5019 \u8c03\u7528 setState(RefreshState.None); \u5e76\u4e0d\u4f1a\u7acb\u523b\u6539\u53d8\u6210 None\n//            //\u800c\u662f\u5148\u6267\u884c\u4e00\u4e2a\u56de\u5f39\u52a8\u753b\uff0cRefreshFinish \u662f\u4ecb\u4e8e Refreshing \u548c None \u4e4b\u95f4\u7684\u72b6\u6001\n//            //RefreshFinish \u7528\u4e8e\u5728\u56de\u5f39\u52a8\u753b\u7ed3\u675f\u65f6\u5019\u80fd\u987a\u5229\u6539\u53d8\u4e3a None\n//            mRefreshKernel.setState(RefreshState.RefreshFinish);\n    }\n}", "path": "SmartRefreshLayout/refresh-header-falsify/src/main/java/com/scwang/smart/refresh/header/FalsifyHeader.java", "commit_date": "2020-03-18 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//<editor-fold desc=\"\u5f00\u653e\u63a5\u53e3 - API\">\n", "func_signal": "public BallPulseFooter setSpinnerStyle(SpinnerStyle mSpinnerStyle)", "code": "{\n    this.mSpinnerStyle = mSpinnerStyle;\n    return this;\n}", "path": "SmartRefreshLayout/refresh-footer-ball/src/main/java/com/scwang/smart/refresh/footer/BallPulseFooter.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "/*\n * Set the colors used in the progress animation from color resources.\n * The first color will also be the color of the bar that grows in response\n * to a user swipe gesture.\n *\n * @param colors\n */\n", "func_signal": "public void setColorSchemeColors(@ColorInt int... colors)", "code": "{\n    mRing.mColors = (colors);\n    mRing.setColorIndex(0);\n}", "path": "SmartRefreshLayout/refresh-header-material/src/main/java/com/scwang/smart/refresh/header/material/MaterialProgressDrawable.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "//            @Override\n//            public void onHeaderPulling(@NonNull RefreshHeader header, float percent, int offset, int headerHeight, int maxDragHeight) {\n//                mHeaderPulling = String.format(Locale.CHINA, \"%s\\npercent=%.02f offset=%03d\\nheight=%03d extend=%03d\",\n//                        FORMAT.format(new Date()),\n//                        percent,offset,headerHeight,maxDragHeight);\n//                updateContent();\n//            }\n//\n//            @Override\n//            public void onHeaderReleasing(@NonNull RefreshHeader header, float percent, int offset, int headerHeight, int maxDragHeight) {\n//                mHeaderReleasing = String.format(Locale.CHINA, \"%s\\npercent=%.02f offset=%03d\\nheight=%03d extend=%03d\",\n//                        FORMAT.format(new Date()),\n//                        percent,offset,headerHeight,maxDragHeight);\n//                updateContent();\n//            }\n", "func_signal": "@Override\n            public void onHeaderStartAnimator(@NonNull RefreshHeader header, int headerHeight, int maxDragHeight)", "code": "{\n                mHeaderStartAnimator = String.format(Locale.CHINA, \"%s\\nheight=%03d extend=%03d\",\n                        FORMAT.format(new Date()),\n                        headerHeight,maxDragHeight);\n                updateContent();\n            }", "path": "SmartRefreshLayout/app/src/main/java/com/scwang/refreshlayout/activity/example/ListenerExampleActivity.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "scwang90/SmartRefreshLayout", "stars": 24608, "license": "apache-2.0", "language": "java", "size": 273653}
{"docstring": "// ------------------------------------------------------------------------\n// Interop with traditional Java containers.  Not as efficient as using\n// specialized collection APIs.\n// ------------------------------------------------------------------------\n", "func_signal": "private MapCollections<E, E> getCollection()", "code": "{\n    if (mCollections == null) {\n        mCollections = new MapCollections<E, E>() {\n            @Override\n            protected int colGetSize() {\n                return mSize;\n            }\n\n            @Override\n            protected Object colGetEntry(int index, int offset) {\n                return mArray[index];\n            }\n\n            @Override\n            protected int colIndexOfKey(Object key) {\n                return indexOf(key);\n            }\n\n            @Override\n            protected int colIndexOfValue(Object value) {\n                return indexOf(value);\n            }\n\n            @Override\n            protected Map<E, E> colGetMap() {\n                throw new UnsupportedOperationException(\"not a map\");\n            }\n\n            @Override\n            protected void colPut(E key, E value) {\n                add(key);\n            }\n\n            @Override\n            protected E colSetValue(int index, E value) {\n                throw new UnsupportedOperationException(\"not a map\");\n            }\n\n            @Override\n            protected void colRemoveAt(int index) {\n                removeAt(index);\n            }\n\n            @Override\n            protected void colClear() {\n                clear();\n            }\n        };\n    }\n    return mCollections;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Ensure the array map can hold at least <var>minimumCapacity</var>\n * items.\n */\n", "func_signal": "public void ensureCapacity(int minimumCapacity)", "code": "{\n    if (mHashes.length < minimumCapacity) {\n        final int[] ohashes = mHashes;\n        final Object[] oarray = mArray;\n        allocArrays(minimumCapacity);\n        if (mSize > 0) {\n            System.arraycopy(ohashes, 0, mHashes, 0, mSize);\n            System.arraycopy(oarray, 0, mArray, 0, mSize);\n        }\n        freeArrays(ohashes, oarray, mSize);\n    }\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Determine if the array set contains all of the values in the given collection.\n * @param collection The collection whose contents are to be checked against.\n * @return Returns true if this array set contains a value for every entry\n * in <var>collection</var>, else returns false.\n */\n", "func_signal": "@Override\npublic boolean containsAll(Collection<?> collection)", "code": "{\n    Iterator<?> it = collection.iterator();\n    while (it.hasNext()) {\n        if (!contains(it.next())) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>This implementation returns false if the object is not a set, or\n * if the sets have different sizes.  Otherwise, for each value in this\n * set, it checks to make sure the value also exists in the other set.\n * If any value doesn't exist, the method returns false; otherwise, it\n * returns true.\n */\n", "func_signal": "@Override\npublic boolean equals(Object object)", "code": "{\n    if (this == object) {\n        return true;\n    }\n    if (object instanceof Set) {\n        Set<?> set = (Set<?>) object;\n        if (size() != set.size()) {\n            return false;\n        }\n\n        try {\n            for (int i=0; i<mSize; i++) {\n                E mine = valueAt(i);\n                if (!set.contains(mine)) {\n                    return false;\n                }\n            }\n        } catch (NullPointerException ignored) {\n            return false;\n        } catch (ClassCastException ignored) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Create a new empty ArraySet.  The default capacity of an array map is 0, and\n * will grow once items are added to it.\n */\n", "func_signal": "public ArraySet()", "code": "{\n    mHashes = ContainerHelpers.EMPTY_INTS;\n    mArray = ContainerHelpers.EMPTY_OBJECTS;\n    mSize = 0;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Remove all values in the array set that do <b>not</b> exist in the given collection.\n * @param collection The collection whose contents are to be used to determine which\n * values to keep.\n * @return Returns true if any values were removed from the array set, else false.\n */\n", "func_signal": "@Override\npublic boolean retainAll(Collection<?> collection)", "code": "{\n    boolean removed = false;\n    for (int i=mSize-1; i>=0; i--) {\n        if (!collection.contains(mArray[i])) {\n            removeAt(i);\n            removed = true;\n        }\n    }\n    return removed;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Make the array map empty.  All storage is released.\n */\n", "func_signal": "@Override\npublic void clear()", "code": "{\n    if (mSize != 0) {\n        freeArrays(mHashes, mArray, mSize);\n        mHashes = ContainerHelpers.EMPTY_INTS;\n        mArray = ContainerHelpers.EMPTY_OBJECTS;\n        mSize = 0;\n    }\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Perform an {@link #add(Object)} of all values in <var>collection</var>\n * @param collection The collection whose contents are to be retrieved.\n */\n", "func_signal": "@Override\npublic boolean addAll(Collection<? extends E> collection)", "code": "{\n    ensureCapacity(mSize + collection.size());\n    boolean added = false;\n    for (E value : collection) {\n        added |= add(value);\n    }\n    return added;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Remove the key/value mapping at the given index.\n * @param index The desired index, must be between 0 and {@link #size()}-1.\n * @return Returns the value that was stored at this index.\n */\n", "func_signal": "public E removeAt(int index)", "code": "{\n    final Object old = mArray[index];\n    if (mSize <= 1) {\n        // Now empty.\n        if (DEBUG) Log.d(TAG, \"remove: shrink from \" + mHashes.length + \" to 0\");\n        freeArrays(mHashes, mArray, mSize);\n        mHashes = ContainerHelpers.EMPTY_INTS;\n        mArray = ContainerHelpers.EMPTY_OBJECTS;\n        mSize = 0;\n    } else {\n        if (mHashes.length > (BASE_SIZE*2) && mSize < mHashes.length/3) {\n            // Shrunk enough to reduce size of arrays.  We don't allow it to\n            // shrink smaller than (BASE_SIZE*2) to avoid flapping between\n            // that and BASE_SIZE.\n            final int n = mSize > (BASE_SIZE*2) ? (mSize + (mSize>>1)) : (BASE_SIZE*2);\n\n            if (DEBUG) Log.d(TAG, \"remove: shrink from \" + mHashes.length + \" to \" + n);\n\n            final int[] ohashes = mHashes;\n            final Object[] oarray = mArray;\n            allocArrays(n);\n\n            mSize--;\n            if (index > 0) {\n                if (DEBUG) Log.d(TAG, \"remove: copy from 0-\" + index + \" to 0\");\n                System.arraycopy(ohashes, 0, mHashes, 0, index);\n                System.arraycopy(oarray, 0, mArray, 0, index);\n            }\n            if (index < mSize) {\n                if (DEBUG) Log.d(TAG, \"remove: copy from \" + (index+1) + \"-\" + mSize\n                        + \" to \" + index);\n                System.arraycopy(ohashes, index + 1, mHashes, index, mSize - index);\n                System.arraycopy(oarray, index + 1, mArray, index, mSize - index);\n            }\n        } else {\n            mSize--;\n            if (index < mSize) {\n                if (DEBUG) Log.d(TAG, \"remove: move \" + (index+1) + \"-\" + mSize\n                        + \" to \" + index);\n                System.arraycopy(mHashes, index + 1, mHashes, index, mSize - index);\n                System.arraycopy(mArray, index + 1, mArray, index, mSize - index);\n            }\n            mArray[mSize] = null;\n        }\n    }\n    return (E)old;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Create a new ArraySet with a given initial capacity.\n */\n", "func_signal": "public ArraySet(int capacity)", "code": "{\n    if (capacity == 0) {\n        mHashes = ContainerHelpers.EMPTY_INTS;\n        mArray = ContainerHelpers.EMPTY_OBJECTS;\n    } else {\n        allocArrays(capacity);\n    }\n    mSize = 0;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * emui 3.0\n */\n", "func_signal": "private int getEMUINotificationWidth(Context context, int width, int height)", "code": "{\n    try {\n        Context systemUi = context.createPackageContext(NotificationCompat.SYSTEM_UI_PKG,\n                Context.CONTEXT_IGNORE_SECURITY | Context.CONTEXT_INCLUDE_CODE);\n        int layoutId = getSystemId(systemUi, \"time_axis\", \"layout\");\n        if (layoutId != 0) {\n            ViewGroup viewGroup = createViewGroup(systemUi, layoutId);\n            layout(viewGroup, width, height);\n            int lid = getSystemId(systemUi, \"content_view_group\", \"id\");\n            if (lid != 0) {\n                View child = viewGroup.findViewById(lid);\n                return width - child.getLeft() - child.getPaddingLeft() - child.getPaddingRight();\n            } else {\n                int count = viewGroup.getChildCount();\n                for (int i = 0; i < count; i++) {\n                    View child = viewGroup.getChildAt(i);\n                    if (LinearLayout.class.isInstance(child)) {\n                        // (LinearLayout)child;\n                        return width - child.getLeft() - child.getPaddingLeft() - child.getPaddingRight();\n                    }\n                }\n            }\n        }\n    } catch (Exception e) {\n        // ignore\n    }\n    return width;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/server/notification/WidthCompat.java", "commit_date": "2017-02-24 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Removes the specified object from this set.\n *\n * @param object the object to remove.\n * @return {@code true} if this set was modified, {@code false} otherwise.\n */\n", "func_signal": "@Override\npublic boolean remove(Object object)", "code": "{\n    final int index = indexOf(object);\n    if (index >= 0) {\n        removeAt(index);\n        return true;\n    }\n    return false;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>This implementation composes a string by iterating over its values. If\n * this set contains itself as a value, the string \"(this Set)\"\n * will appear in its place.\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    if (isEmpty()) {\n        return \"{}\";\n    }\n\n    StringBuilder buffer = new StringBuilder(mSize * 14);\n    buffer.append('{');\n    for (int i=0; i<mSize; i++) {\n        if (i > 0) {\n            buffer.append(\", \");\n        }\n        Object value = valueAt(i);\n        if (value != this) {\n            buffer.append(value);\n        } else {\n            buffer.append(\"(this Set)\");\n        }\n    }\n    buffer.append('}');\n    return buffer.toString();\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/** {@hide} */\n", "func_signal": "public ArraySet(Collection<E> set)", "code": "{\n    this();\n    if (set != null) {\n        addAll(set);\n    }\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Write this to another Parcel. Note that this discards the internal Parcel\n * and should not be used anymore. This is so we can pass this to a Binder\n * where we won't have a chance to call recycle on this.\n */\n", "func_signal": "@Override\npublic void writeToParcel(Parcel dest, int flags)", "code": "{\n\tfinal int N = mList.size();\n\tfinal int callFlags = flags;\n\tdest.writeInt(N);\n\tif (DEBUG)\n\t\tLog.d(TAG, \"Writing \" + N + \" items\");\n\tif (N > 0) {\n\t\tfinal Class<?> listElementClass = mList.get(0).getClass();\n\t\t// dest.writeParcelableCreator(mList.get(0));\n\t\tint i = 0;\n\t\twhile (i < N && dest.dataSize() < MAX_FIRST_IPC_SIZE) {\n\t\t\tdest.writeInt(1);\n\n\t\t\tfinal T parcelable = mList.get(i);\n\t\t\tverifySameType(listElementClass, parcelable.getClass());\n\t\t\t// parcelable.writeToParcel(dest, callFlags);\n\t\t\tdest.writeParcelable(parcelable, callFlags);\n\n\t\t\tif (DEBUG)\n\t\t\t\tLog.d(TAG, \"Wrote inline #\" + i + \": \" + mList.get(i));\n\t\t\ti++;\n\t\t}\n\t\tif (i < N) {\n\t\t\tdest.writeInt(0);\n\t\t\tBinder retriever = new Binder() {\n\t\t\t\t@Override\n\t\t\t\tprotected boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n\t\t\t\t\t\tthrows RemoteException {\n\t\t\t\t\tif (code != FIRST_CALL_TRANSACTION) {\n\t\t\t\t\t\treturn super.onTransact(code, data, reply, flags);\n\t\t\t\t\t}\n\t\t\t\t\tint i = data.readInt();\n\t\t\t\t\tif (DEBUG)\n\t\t\t\t\t\tLog.d(TAG, \"Writing more @\" + i + \" of \" + N);\n\t\t\t\t\twhile (i < N && reply.dataSize() < MAX_IPC_SIZE) {\n\t\t\t\t\t\treply.writeInt(1);\n\n\t\t\t\t\t\tfinal T parcelable = mList.get(i);\n\t\t\t\t\t\tverifySameType(listElementClass, parcelable.getClass());\n\t\t\t\t\t\t// parcelable.writeToParcel(reply, callFlags);\n\t\t\t\t\t\treply.writeParcelable(parcelable, callFlags);\n\n\t\t\t\t\t\tif (DEBUG)\n\t\t\t\t\t\t\tLog.d(TAG, \"Wrote extra #\" + i + \": \" + mList.get(i));\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\tif (i < N) {\n\t\t\t\t\t\tif (DEBUG)\n\t\t\t\t\t\t\tLog.d(TAG, \"Breaking @\" + i + \" of \" + N);\n\t\t\t\t\t\treply.writeInt(0);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (DEBUG)\n\t\t\t\tLog.d(TAG, \"Breaking @\" + i + \" of \" + N + \": retriever=\" + retriever);\n\t\t\tdest.writeStrongBinder(retriever);\n\t\t}\n\t}\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/remote/VParceledListSlice.java", "commit_date": "2017-02-26 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Create a new ArraySet with the mappings from the given ArraySet.\n */\n", "func_signal": "public ArraySet(ArraySet<E> set)", "code": "{\n    this();\n    if (set != null) {\n        addAll(set);\n    }\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    final int[] hashes = mHashes;\n    int result = 0;\n    for (int i = 0, s = mSize; i < s; i++) {\n        result += hashes[i];\n    }\n    return result;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Perform a {@link #add(Object)} of all values in <var>array</var>\n * @param array The array whose contents are to be retrieved.\n */\n", "func_signal": "public void addAll(ArraySet<? extends E> array)", "code": "{\n    final int N = array.mSize;\n    ensureCapacity(mSize + N);\n    if (mSize == 0) {\n        if (N > 0) {\n            System.arraycopy(array.mHashes, 0, mHashes, 0, N);\n            System.arraycopy(array.mArray, 0, mArray, 0, N);\n            mSize = N;\n        }\n    } else {\n        for (int i=0; i<N; i++) {\n            add(array.valueAt(i));\n        }\n    }\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Adds the specified object to this set. The set is not modified if it\n * already contains the object.\n *\n * @param value the object to add.\n * @return {@code true} if this set is modified, {@code false} otherwise.\n * @throws ClassCastException\n *             when the class of the object is inappropriate for this set.\n */\n", "func_signal": "@Override\npublic boolean add(E value)", "code": "{\n    final int hash;\n    int index;\n    if (value == null) {\n        hash = 0;\n        index = indexOfNull();\n    } else {\n        hash = value.hashCode();\n        index = indexOf(value, hash);\n    }\n    if (index >= 0) {\n        return false;\n    }\n\n    index = ~index;\n    if (mSize >= mHashes.length) {\n        final int n = mSize >= (BASE_SIZE*2) ? (mSize+(mSize>>1))\n                : (mSize >= BASE_SIZE ? (BASE_SIZE*2) : BASE_SIZE);\n\n        if (DEBUG) Log.d(TAG, \"add: grow from \" + mHashes.length + \" to \" + n);\n\n        final int[] ohashes = mHashes;\n        final Object[] oarray = mArray;\n        allocArrays(n);\n\n        if (mHashes.length > 0) {\n            if (DEBUG) Log.d(TAG, \"add: copy 0-\" + mSize + \" to 0\");\n            System.arraycopy(ohashes, 0, mHashes, 0, ohashes.length);\n            System.arraycopy(oarray, 0, mArray, 0, oarray.length);\n        }\n\n        freeArrays(ohashes, oarray, mSize);\n    }\n\n    if (index < mSize) {\n        if (DEBUG) Log.d(TAG, \"add: move \" + index + \"-\" + (mSize-index)\n                + \" to \" + (index+1));\n        System.arraycopy(mHashes, index, mHashes, index + 1, mSize - index);\n        System.arraycopy(mArray, index, mArray, index + 1, mSize - index);\n    }\n\n    mHashes[index] = hash;\n    mArray[index] = value;\n    mSize++;\n    return true;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "/**\n * Perform a {@link #remove(Object)} of all values in <var>array</var>\n * @param array The array whose contents are to be removed.\n */\n", "func_signal": "public boolean removeAll(ArraySet<? extends E> array)", "code": "{\n    // TODO: If array is sufficiently large, a marking approach might be beneficial. In a first\n    //       pass, use the property that the sets are sorted by hash to make this linear passes\n    //       (except for hash collisions, which means worst case still n*m), then do one\n    //       collection pass into a new array. This avoids binary searches and excessive memcpy.\n    final int N = array.mSize;\n\n    // Note: ArraySet does not make thread-safety guarantees. So instead of OR-ing together all\n    //       the single results, compare size before and after.\n    final int originalSize = mSize;\n    for (int i = 0; i < N; i++) {\n        remove(array.valueAt(i));\n    }\n    return originalSize != mSize;\n}", "path": "VirtualApp/VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArraySet.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "asLody/VirtualApp", "stars": 9790, "license": "None", "language": "java", "size": 35247}
{"docstring": "// Returns a copy of what is remaining in the src buffer from the current position to capacity.\n", "func_signal": "private static byte[] copyByteBufferToArray(ByteBuffer src)", "code": "{\n  if (src == null) {\n    return null;\n  }\n  byte[] copy = new byte[src.remaining()];\n  int index = 0;\n  while (src.hasRemaining()) {\n    copy[index++] = src.get();\n  }\n  return copy;\n}", "path": "ExoPlayer/extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java", "commit_date": "2020-12-23 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param resetPosition Whether the position should be reset.\n * @param mediaSources The media sources to populate the playlist with.\n */\n", "func_signal": "public SetMediaItemsResetPosition(\n    String tag, boolean resetPosition, MediaSource... mediaSources)", "code": "{\n  super(tag, \"SetMediaItems\");\n  this.resetPosition = resetPosition;\n  this.mediaSources = mediaSources;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "// Helper methods.\n", "func_signal": "private void mockStatusResponse()", "code": "{\n  doAnswer(\n          invocation -> {\n            UrlRequest.StatusListener statusListener =\n                (UrlRequest.StatusListener) invocation.getArguments()[0];\n            statusListener.onStatus(TEST_CONNECTION_STATUS);\n            return null;\n          })\n      .when(mockUrlRequest)\n      .getStatus(any(UrlRequest.StatusListener.class));\n}", "path": "ExoPlayer/extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java", "commit_date": "2020-12-23 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param audioAttributes The attributes to use for audio playback.\n * @param handleAudioFocus True if the player should handle audio focus, false otherwise.\n */\n", "func_signal": "public SetAudioAttributes(\n    String tag, AudioAttributes audioAttributes, boolean handleAudioFocus)", "code": "{\n  super(tag, \"SetAudioAttributes\");\n  this.audioAttributes = audioAttributes;\n  this.handleAudioFocus = handleAudioFocus;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * Creates a set playback parameters action instance.\n *\n * @param tag A tag to use for logging.\n * @param playbackParameters The playback parameters.\n */\n", "func_signal": "public SetPlaybackParameters(String tag, PlaybackParameters playbackParameters)", "code": "{\n  super(tag, \"SetPlaybackParameters:\" + playbackParameters);\n  this.playbackParameters = playbackParameters;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * Creates action waiting for a timeline change for a given reason.\n *\n * @param tag A tag to use for logging.\n * @param expectedTimeline The expected timeline or {@code null} if any timeline change is\n *     relevant.\n * @param expectedReason The expected timeline change reason.\n */\n", "func_signal": "public WaitForTimelineChanged(\n    String tag,\n    @Nullable Timeline expectedTimeline,\n    @Player.TimelineChangeReason int expectedReason)", "code": "{\n  super(tag, \"WaitForTimelineChanged\");\n  this.expectedTimeline = expectedTimeline != null ? new NoUidTimeline(expectedTimeline) : null;\n  this.ignoreExpectedReason = false;\n  this.expectedReason = expectedReason;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param playWhenReady The playWhenReady value to wait for.\n */\n", "func_signal": "public WaitForPlayWhenReady(String tag, boolean playWhenReady)", "code": "{\n  super(tag, \"WaitForPlayWhenReady\");\n  targetPlayWhenReady = playWhenReady;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/** @param tag A tag to use for logging. */\n", "func_signal": "public ExecuteRunnable(String tag, Runnable runnable)", "code": "{\n  super(tag, \"ExecuteRunnable\");\n  this.runnable = runnable;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * Creates action waiting for any timeline change for any reason.\n *\n * @param tag A tag to use for logging.\n */\n", "func_signal": "public WaitForTimelineChanged(String tag)", "code": "{\n  super(tag, \"WaitForTimelineChanged\");\n  this.expectedTimeline = null;\n  this.ignoreExpectedReason = true;\n  this.expectedReason = Player.TIMELINE_CHANGE_REASON_PLAYLIST_CHANGED;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param targetPlaybackState The playback state to wait for.\n */\n", "func_signal": "public WaitForPlaybackState(String tag, @Player.State int targetPlaybackState)", "code": "{\n  super(tag, \"WaitForPlaybackState\");\n  this.targetPlaybackState = targetPlaybackState;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/** Blocks until the manager is idle. */\n", "func_signal": "public void blockUntilIdle() throws InterruptedException", "code": "{\n  idleCondition.close();\n  // If the manager is already idle the condition will be opened by the code immediately below.\n  // Else it will be opened by onIdle().\n  ConditionVariable checkedOnMainThread = createRobolectricConditionVariable();\n  new Handler(downloadManager.getApplicationLooper())\n      .post(\n          () -> {\n            if (downloadManager.isIdle()) {\n              idleCondition.open();\n            }\n            checkedOnMainThread.open();\n          });\n  assertThat(checkedOnMainThread.block(TIMEOUT_MS)).isTrue();\n  assertThat(idleCondition.block(TIMEOUT_MS)).isTrue();\n}", "path": "ExoPlayer/robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestDownloadManagerListener.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param targetIsLoading The loading state to wait for.\n */\n", "func_signal": "public WaitForIsLoading(String tag, boolean targetIsLoading)", "code": "{\n  super(tag, \"WaitForIsLoading\");\n  this.targetIsLoading = targetIsLoading;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param windowIndex The window index to start playback from.\n * @param positionMs The position in milliseconds to start playback from.\n * @param mediaSources The media sources to populate the playlist with.\n */\n", "func_signal": "public SetMediaItems(\n    String tag, int windowIndex, long positionMs, MediaSource... mediaSources)", "code": "{\n  super(tag, \"SetMediaItems\");\n  this.windowIndex = windowIndex;\n  this.positionMs = positionMs;\n  this.mediaSources = mediaSources;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param description A description to be logged when the action is executed, or null if no\n *     logging is required.\n */\n", "func_signal": "public Action(String tag, @Nullable String description)", "code": "{\n  this.tag = tag;\n  this.description = description;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "// Internal logic.\n", "func_signal": "private void assertStateInternal(String id, int expectedState)", "code": "{\n  while (true) {\n    @Nullable Integer state = null;\n    try {\n      state = getStateQueue(id).poll(TIMEOUT_MS, MILLISECONDS);\n    } catch (InterruptedException e) {\n      fail(\"Interrupted: \" + e.getMessage());\n    }\n    if (state != null) {\n      if (expectedState == state) {\n        return;\n      }\n    } else {\n      fail(\"Didn't receive expected state: \" + expectedState);\n    }\n  }\n}", "path": "ExoPlayer/robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestDownloadManagerListener.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * Called by {@link #doActionAndScheduleNext(SimpleExoPlayer, DefaultTrackSelector, Surface,\n * HandlerWrapper, ActionNode)} to perform the action and to schedule the next action node.\n *\n * @param player The player to which the action should be applied.\n * @param trackSelector The track selector to which the action should be applied.\n * @param surface The surface to use when applying actions, or {@code null} if no surface is\n *     needed.\n * @param handler The handler to use to pass to the next action.\n * @param nextAction The next action to schedule immediately after this action finished, or {@code\n *     null} if there's no next action.\n */\n", "func_signal": "protected void doActionAndScheduleNextImpl(\n    SimpleExoPlayer player,\n    DefaultTrackSelector trackSelector,\n    @Nullable Surface surface,\n    HandlerWrapper handler,\n    @Nullable ActionNode nextAction)", "code": "{\n  doActionImpl(player, trackSelector, surface);\n  if (nextAction != null) {\n    nextAction.schedule(player, trackSelector, surface, handler);\n  }\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * Converts a text size to a CSS px value.\n *\n * <p>First converts to Android px using {@link SubtitleViewUtils#resolveTextSize(int, float, int,\n * int)}.\n *\n * <p>Then divides by {@link DisplayMetrics#density} to convert from Android px to dp because\n * WebView treats one CSS px as one Android dp.\n */\n", "func_signal": "private String convertTextSizeToCss(@Cue.TextSizeType int type, float size)", "code": "{\n  float sizePx =\n      SubtitleViewUtils.resolveTextSize(\n          type, size, getHeight(), getHeight() - getPaddingTop() - getPaddingBottom());\n  if (sizePx == Cue.DIMEN_UNSET) {\n    return \"unset\";\n  }\n  float sizeDp = sizePx / getContext().getResources().getDisplayMetrics().density;\n  return Util.formatInvariant(\"%.2fpx\", sizeDp);\n}", "path": "ExoPlayer/library/ui/src/main/java/com/google/android/exoplayer2/ui/WebViewSubtitleOutput.java", "commit_date": "2020-11-18 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param windowIndex The window index at which the player should be paused again.\n * @param positionMs The position in that window at which the player should be paused again.\n */\n", "func_signal": "public PlayUntilPosition(String tag, int windowIndex, long positionMs)", "code": "{\n  super(tag, \"PlayUntilPosition:\" + windowIndex + \":\" + positionMs);\n  this.windowIndex = windowIndex;\n  this.positionMs = positionMs;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * @param tag A tag to use for logging.\n * @param fromIndex The start if the range of media items to remove.\n * @param toIndex The end of the range of media items to remove (exclusive).\n */\n", "func_signal": "public RemoveMediaItems(String tag, int fromIndex, int toIndex)", "code": "{\n  super(tag, \"RemoveMediaItem\");\n  this.fromIndex = fromIndex;\n  this.toIndex = toIndex;\n}", "path": "ExoPlayer/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/** Blocks until the manager is idle and throws if any of the downloads failed. */\n", "func_signal": "public void blockUntilIdleAndThrowAnyFailure() throws Exception", "code": "{\n  blockUntilIdle();\n  if (failureReason != Download.FAILURE_REASON_NONE) {\n    throw new Exception(\"Failure reason: \" + failureReason);\n  }\n}", "path": "ExoPlayer/robolectricutils/src/main/java/com/google/android/exoplayer2/robolectric/TestDownloadManagerListener.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "google/ExoPlayer", "stars": 21384, "license": "apache-2.0", "language": "java", "size": 423610}
{"docstring": "/**\n * 3.scanKey\n *\n * @return\n */\n", "func_signal": "public TaskFlowStatusEnum slotAnalysis()", "code": "{\n    DiagnosticTaskRecord record = new DiagnosticTaskRecord();\n    record.setAppId(appId);\n    record.setAuditId(auditId);\n    String hostPost = host + \":\" + port;\n    record.setNode(hostPost);\n    record.setTaskId(taskId);\n    record.setParentTaskId(parentTaskId);\n    record.setType(DiagnosticTypeEnum.SLOT_ANALYSIS.getType());\n    record.setStatus(0);\n    diagnosticTaskRecordDao.insertDiagnosticTaskRecord(record);\n    long recordId = record.getId();\n\n    /**\n     * \u626b\u63cf\u5220\u9664\uff0c\u8ba1\u65f6\u5f00\u59cb*/\n    long startTime = System.currentTimeMillis();\n    Jedis jedis = null;\n    try {\n        jedis = redisCenter.getJedis(appId, host, port);\n        long dbSize = jedis.dbSize();\n        if (dbSize == 0) {\n            logger.info(marker, \"{} {}:{} dbsize is {}\", appId, host, port, dbSize);\n            diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, \"\", 1, System.currentTimeMillis() - startTime);\n            return TaskFlowStatusEnum.SUCCESS;\n        }\n        logger.info(marker, \"{} {}:{} total key is {} \", appId, host, port, dbSize);\n\n\n        Map<String, String> result = new HashMap<>();\n\n        Pipeline pipeline = jedis.pipelined();\n        InstanceSlotModel instanceSlotModel = (InstanceSlotModel) MapUtils.getObject(redisCenter.getClusterSlotsMap(appId), hostPost);\n        if (instanceSlotModel != null) {\n            List<Integer> slotList = instanceSlotModel.getSlotList();\n            //set benchmark\n            long benchmark = 0l;\n            for (Integer slot : slotList) {\n                benchmark = jedis.clusterCountKeysInSlot(slot);\n                if (benchmark > 0) {\n                    break;\n                }\n            }\n\n            slotList.stream().forEach(slot -> pipeline.clusterCountKeysInSlot(slot));\n            List<Object> objectList = new ArrayList<>();\n            try {\n                objectList = pipeline.syncAndReturnAll();\n            } catch (JedisRedirectionException e) {\n                logger.error(marker, \"redisSlotAnalysis appId {} {}:{}  JedisRedirectionException:\" + e.getMessage(), appId, host, port, e);\n            }\n\n            List<Object> countObjectList = objectList;\n            long finalBenchmark = benchmark;\n            result = IntStream.range(0, slotList.size())\n                    .filter(i -> (countObjectList.get(i) != null) && (countObjectList.get(i) instanceof Long))\n                    .mapToObj(i -> new Pair<>(String.valueOf(slotList.get(i)), getCountAndError((Long) countObjectList.get(i), finalBenchmark)))\n                    .collect(Collectors.toMap(Pair::getKey, Pair::getValue));\n        }\n\n        //\u7ed3\u679c\u5b58redis\n        String redisSlotAnalysis = ConstUtils.getInstanceSlotAnalysis(taskId, hostPost);\n        assistRedisService.del(redisSlotAnalysis);\n        assistRedisService.hmset(redisSlotAnalysis, result);\n        long cost = System.currentTimeMillis() - startTime;\n        /**\n         * \u8ba1\u65f6\u7ed3\u675f*/\n        //\u66f4\u65b0\u8bb0\u5f55\n        diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, redisSlotAnalysis, 1, cost);\n\n        logger.info(marker, \"{} {}:{} redisSlotAnalysis successfully, cost time is {} ms\", appId, host, port, cost);\n        return TaskFlowStatusEnum.SUCCESS;\n    } catch (RuntimeException e) {\n        diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, \"\", 2, 0);\n        throw e;\n    } catch (Exception e) {\n        logger.error(marker, \"redis-cli -h {} -p {} admin auth error\", host, port);\n        logger.error(marker, \"redisSlotAnalysis appId {} {}:{}  error:\" + e.getMessage(), appId, host, port, e);\n        diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, \"\", 2, 0);\n        return TaskFlowStatusEnum.ABORT;\n    } finally {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/task/tasks/diagnosticTask/InstanceSlotAnalysisTask.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * \u67e5\u770b\u7528\u6237\u5bf9\u4e8eapp\u64cd\u4f5c\u7684\u6743\u9650\n *\n * @param request\n * @param appId\n * @return\n */\n", "func_signal": "protected boolean checkAppUserProvilege(HttpServletRequest request, long appId)", "code": "{\n    // \u5f53\u524d\u7528\u6237\n    AppUser currentUser = getUserInfo(request);\n    if (currentUser == null) {\n        logger.error(\"currentUser is empty\");\n        return false;\n    }\n\n    if (AppUserTypeEnum.ADMIN_USER.value().equals(currentUser.getType())) {\n        return true;\n    }\n\n    // \u5e94\u7528\u7528\u6237\u5217\u8868\n    List<AppToUser> appToUsers = appService.getAppToUserList(appId);\n    if (CollectionUtils.isEmpty(appToUsers)) {\n        logger.error(\"appId {} userList is empty\", appId);\n        return false;\n    }\n\n    // \u5e94\u7528\u4e0b\u7528\u6237id\u96c6\u5408\n    Set<Long> appUserIdSet = new HashSet<Long>();\n    for (AppToUser appToUser : appToUsers) {\n        appUserIdSet.add(appToUser.getUserId());\n    }\n\n    //\u6700\u7ec8\u5224\u65ad\n    if (!appUserIdSet.contains(currentUser.getId())) {\n        logger.error(\"currentUser {} hasn't previlege in appId {}\", currentUser.getId(), appId);\n        return false;\n    }\n    return true;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/controller/BaseController.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * \u8fd4\u56de\u7528\u6237\u57fa\u672c\u4fe1\u606f\n *\n * @param request\n * @return\n */\n", "func_signal": "public AppUser getUserInfo(HttpServletRequest request)", "code": "{\n    String userName = userLoginStatusService.getUserNameFromLoginStatus(request);\n    return userService.getByName(userName);\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/controller/BaseController.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * \u5b9e\u4f8b\u7edf\u8ba1\u4fe1\u606f\n *\n * @param appId\n * @param model\n */\n", "func_signal": "protected void fillAppInstanceStats(Long appId, Model model)", "code": "{\n    // \u5b9e\u4f8b\u5217\u8868\n    List<InstanceInfo> instanceList = appService.getAppInstanceInfo(appId);\n    model.addAttribute(\"instanceList\", instanceList);\n    Map<Integer, List<InstanceInfo>> instanceListMap = instanceGroupByMaster(instanceList);\n    model.addAttribute(\"instanceListMap\", instanceListMap);\n\n\n    // \u5b9e\u4f8bMap\n    Map<Integer, InstanceInfo> instanceInfoMap = new HashMap<Integer, InstanceInfo>();\n    for (InstanceInfo instanceInfo : instanceList) {\n        instanceInfoMap.put(instanceInfo.getId(), instanceInfo);\n    }\n    model.addAttribute(\"instanceInfoMap\", instanceInfoMap);\n\n    // \u5b9e\u4f8b\u7edf\u8ba1\n    List<InstanceStats> appInstanceStats = appService.getAppInstanceStats(appId);\n    Map<String, InstanceStats> instanceStatsMap = new HashMap<String, InstanceStats>();\n    for (InstanceStats instanceStats : appInstanceStats) {\n        instanceStatsMap.put(instanceStats.getIp() + \":\" + instanceStats.getPort(), instanceStats);\n    }\n    model.addAttribute(\"instanceStatsMap\", instanceStatsMap);\n\n    //slot\u5206\u5e03\n    Map<String, InstanceSlotModel> clusterSlotsMap = redisCenter.getClusterSlotsMap(appId);\n    model.addAttribute(\"clusterSlotsMap\", clusterSlotsMap);\n\n    //\u673a\u5668\u5217\u8868\n    long startTime = System.currentTimeMillis();\n    List<MachineStats> machineList = machineCenter.getMachineStats(null, null, null, null, null, null, null);\n    Map<String, MachineStats> machineMap = machineList.stream().collect(Collectors.toMap(MachineStats::getIp, machineStats -> machineStats));\n    model.addAttribute(\"machineMap\", machineMap);\n    logger.info(\"getMachineStats cost: {}, appId: {}\", System.currentTimeMillis() - startTime, appId);\n\n    Map<String, Integer> machineInstanceCountMap = machineCenter.getMachineInstanceCountMap();\n    model.addAttribute(\"machineInstanceCountMap\", machineInstanceCountMap);\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/controller/BaseController.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * @param response\n * @param result\n */\n", "func_signal": "protected void write(HttpServletResponse response, String result)", "code": "{\n    try {\n        response.setContentType(\"text/javascript\");\n        response.getWriter().print(result);\n        response.getWriter().flush();\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/controller/BaseController.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * 2.\u68c0\u67e5run\u4ee5\u53caslave\n *\n * @return\n */\n", "func_signal": "public TaskFlowStatusEnum checkIsRun()", "code": "{\n    if (!redisCenter.isRun(appId, host, port)) {\n        logger.error(marker, \"{} {}:{} is not run\", appId, host, port);\n        return TaskFlowStatusEnum.ABORT;\n    }\n    return TaskFlowStatusEnum.SUCCESS;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/task/tasks/diagnosticTask/InstanceScanKeyTask.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * \u53d1\u9001json\u6d88\u606f\n *\n * @param response\n * @param message\n */\n", "func_signal": "public void sendMessage(HttpServletResponse response, String message)", "code": "{\n    response.reset();\n    response.setContentType(\"application/json;charset=UTF-8\");\n    PrintWriter printWriter = null;\n    try {\n        printWriter = response.getWriter();\n        printWriter.write(message);\n    } catch (IOException e) {\n        logger.error(ExceptionUtils.getFullStackTrace(e));\n    } finally {\n        if (printWriter != null) {\n            printWriter.flush();\n            printWriter.close();\n        }\n    }\n\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/controller/BaseController.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * 1.\u521d\u59cb\u5316\u53c2\u6570\n */\n", "func_signal": "@Override\npublic TaskFlowStatusEnum init()", "code": "{\n    super.init();\n    appId = MapUtils.getLongValue(paramMap, TaskConstants.APPID_KEY);\n    if (appId <= 0) {\n        logger.error(marker, \"task {} appId {} is wrong\", taskId, appId);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    auditId = MapUtils.getLongValue(paramMap, TaskConstants.AUDIT_ID_KEY);\n    if (auditId <= 0) {\n        logger.error(marker, \"task {} auditId {} is wrong\", taskId, auditId);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    host = MapUtils.getString(paramMap, TaskConstants.HOST_KEY);\n    if (StringUtils.isBlank(host)) {\n        logger.error(marker, \"task {} host is empty\", taskId);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    port = MapUtils.getIntValue(paramMap, TaskConstants.PORT_KEY);\n    if (port <= 0) {\n        logger.error(marker, \"task {} port {} is wrong\", taskId, port);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    pattern = MapUtils.getString(paramMap, \"pattern\");\n    if (StringUtils.isBlank(pattern)) {\n        logger.info(marker, \"task {} pattern is empty\", taskId);\n    }\n\n    size = MapUtils.getIntValue(paramMap, \"size\");\n    if (size <= 0) {\n        logger.error(marker, \"task {} size {} is wrong\", taskId, size);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    parentTaskId = MapUtils.getLongValue(paramMap, \"parentTaskId\");\n\n    return TaskFlowStatusEnum.SUCCESS;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/task/tasks/diagnosticTask/InstanceScanKeyTask.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "// \u5224\u65ad\u5bc6\u7801\u662f\u5426\u5339\u914d\n", "func_signal": "private boolean checkAuthNodes(List<Jedis> nodes, String passwordMD5)", "code": "{\n    for (Jedis jedis : nodes) {\n        try {\n            String auth = jedis.auth(passwordMD5);\n            if (!auth.equals(\"OK\")) {\n                return false;\n            }\n        } catch (JedisDataException e) {\n            //\u5ffd\u7565\u65e0\u5bc6\u7801\u8bbe\u7f6e\u5f02\u5e38\n            if (e.getMessage().contains(\"no password is set\")) {\n                logger.info(\"ignore ERR Client sent AUTH, but no password is set\");\n            } else {\n                logger.error(e.getMessage(), e);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"node-auth-failed: node={} password={} error={}\", jedis.getClient().getHostPort(),\n                    passwordMD5, e.getMessage());\n            logger.error(e.getMessage(), e);\n            return false;\n        }\n    }\n    return true;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/redis/impl/RedisDeployCenterImpl.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * markdown to html\n */\n", "func_signal": "public String markdown2html(String filename, String suffix) throws Exception", "code": "{\n    String templatePath = \"static/\" + filename + suffix;\n    InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(templatePath);\n    if (inputStream == null) {\n        return null;\n    }\n    String markdown = new String(read(inputStream), Charset.forName(\"UTF-8\"));\n    MutableDataSet options = new MutableDataSet();\n    options.setFrom(ParserEmulationProfile.MARKDOWN);\n    options.set(Parser.EXTENSIONS, Arrays.asList(new Extension[]{TablesExtension.create()}));\n    Document document = Parser.builder(options).build().parse(markdown);\n    String html = HtmlRenderer.builder(options).build().render(document);\n    return html;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/controller/BaseController.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * 3.scanKey\n *\n * @return\n */\n", "func_signal": "public TaskFlowStatusEnum scanKey()", "code": "{\n    DiagnosticTaskRecord record = new DiagnosticTaskRecord();\n    record.setAppId(appId);\n    record.setAuditId(auditId);\n    String hostPost = host + \":\" + port;\n    record.setNode(hostPost);\n    String condition = MessageFormat.format(CONDITION_TEMPLATE, pattern, size);\n    record.setDiagnosticCondition(condition);\n    record.setTaskId(taskId);\n    record.setParentTaskId(parentTaskId);\n    record.setType(DiagnosticTypeEnum.SCAN_KEY.getType());\n    record.setStatus(0);\n    diagnosticTaskRecordDao.insertDiagnosticTaskRecord(record);\n    long recordId = record.getId();\n\n    long startTime = System.currentTimeMillis();\n    Jedis jedis = null;\n    try {\n        jedis = redisCenter.getJedis(appId, host, port);\n\n        long dbSize = jedis.dbSize();\n        if (dbSize == 0) {\n            logger.info(marker, \"{} {}:{} dbsize is {}\", appId, host, port, dbSize);\n            diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, \"\", 1, System.currentTimeMillis() - startTime);\n            return TaskFlowStatusEnum.SUCCESS;\n        }\n        logger.info(marker, \"{} {}:{} total key is {} \", appId, host, port, dbSize);\n\n        // scan\u53c2\u6570\n        byte[] cursor = \"0\".getBytes(Charset.forName(\"UTF-8\"));\n        ScanParams scanParams = StringUtil.isBlank(pattern) ?\n                new ScanParams().count(Math.min(SCAN_COUNT, size)) :\n                new ScanParams().match(pattern).count(Math.min(SCAN_COUNT, size));\n\n        long count = 0;\n        int totalSplit = 10;\n        int curSplit = 1;\n\n        List<String> result = new ArrayList<>();\n        while (true) {\n            try {\n                ScanResult<byte[]> scanResult = jedis.scan(cursor, scanParams);\n                cursor = scanResult.getCursorAsBytes();\n                List<byte[]> keyList = scanResult.getResult();\n\n                if (CollectionUtils.isNotEmpty(keyList)) {\n                    result.addAll(keyList.stream().map(byteKey -> new String(byteKey)).collect(Collectors.toList()));\n                }\n                count += keyList.size();\n                if (count > dbSize / totalSplit * curSplit) {\n                    logger.info(marker, \"{} {}:{} has already scan {}% {} key \", appId, host, port, curSplit * 10, count);\n                    curSplit++;\n                }\n                // @TODO\u6682\u65f6\u5199\u6b7b\n                TimeUnit.MILLISECONDS.sleep(10);\n            } catch (Exception e) {\n                logger.error(marker, e.getMessage(), e);\n            } finally {\n                //\u9632\u6b62\u65e0\u9650\u5faa\u73af\n                if (result.size() >= size || Arrays.equals(\"0\".getBytes(Charset.forName(\"UTF-8\")), cursor)) {\n                    break;\n                }\n            }\n        }\n        //\u7ed3\u679c\u5b58redis\n        String redisScanKey = ConstUtils.getInstanceScanKey(taskId, hostPost);\n        assistRedisService.del(redisScanKey);\n        assistRedisService.rpushList(redisScanKey, result);\n        //\u66f4\u65b0\u8bb0\u5f55\n        long cost = System.currentTimeMillis() - startTime;\n        diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, redisScanKey, 1, cost);\n\n        logger.info(marker, \"{} {}:{} scan key successfully, cost time is {} ms, total key is {}\", appId, host, port, cost, count);\n        return TaskFlowStatusEnum.SUCCESS;\n    } catch (RuntimeException e) {\n        diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, \"\", 2, 0);\n        throw e;\n    } catch (Exception e) {\n        logger.error(marker, \"redis-cli -h {} -p {} admin auth error\", host, port);\n        logger.error(marker, \"scan key appId {} {}:{}  error:\" + e.getMessage(), appId, host, port, e);\n        diagnosticTaskRecordDao.updateDiagnosticStatus(recordId, \"\", 2, 0);\n        return TaskFlowStatusEnum.ABORT;\n    } finally {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/task/tasks/diagnosticTask/InstanceScanKeyTask.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * 1. \u88abforget\u7684\u8282\u70b9\u5fc5\u987b\u5728\u7ebf(\u8fd9\u4e2a\u6761\u4ef6\u6709\u5f85\u9a8c\u8bc1)\n * 2. \u88abforget\u7684\u8282\u70b9\u4e0d\u80fd\u6709\u4ece\u8282\u70b9\n * 3. \u88abforget\u7684\u8282\u70b9\u4e0d\u80fd\u6709slots\n */\n", "func_signal": "@Override\npublic ClusterOperateResult checkClusterForget(Long appId, int forgetInstanceId)", "code": "{\n    // 0.\u5404\u79cd\u9a8c\u8bc1\n    Assert.isTrue(appId > 0);\n    Assert.isTrue(forgetInstanceId > 0);\n    AppDesc appDesc = appDao.getAppDescById(appId);\n    Assert.isTrue(appDesc != null);\n    int type = appDesc.getType();\n    if (!TypeUtil.isRedisCluster(type)) {\n        logger.error(\"{} is not redis cluster type\", appDesc);\n        return ClusterOperateResult.fail(String.format(\"instanceId: %s must be cluster type\", forgetInstanceId));\n    }\n    InstanceInfo instanceInfo = instanceDao.getInstanceInfoById(forgetInstanceId);\n    Assert.isTrue(instanceInfo != null);\n    String forgetHost = instanceInfo.getIp();\n    int forgetPort = instanceInfo.getPort();\n    // 1.\u662f\u5426\u5728\u7ebf\n    boolean isRun = redisCenter.isRun(appId, forgetHost, forgetPort);\n    if (!isRun) {\n        logger.warn(\"{}:{} is not run\", forgetHost, forgetPort);\n        return ClusterOperateResult.fail(String.format(\"\u88abforget\u7684\u8282\u70b9(%s:%s)\u5fc5\u987b\u5728\u7ebf\", forgetHost, forgetPort));\n    }\n    // 2.\u88abforget\u7684\u8282\u70b9\u4e0d\u80fd\u6709\u4ece\u8282\u70b9\n    BooleanEnum hasSlaves = redisCenter.hasSlaves(appId, forgetHost, forgetPort);\n//        if (hasSlaves == null || hasSlaves) {\n//            logger.warn(\"{}:{} has slave\", forgetHost, forgetPort);\n//            return ClusterOperateResult.fail(String.format(\"\u88abforget\u7684\u8282\u70b9(%s:%s)\u4e0d\u80fd\u6709\u4ece\u8282\u70b9\", forgetHost, forgetPort));\n//        }\n    if (hasSlaves == BooleanEnum.OTHER || hasSlaves == BooleanEnum.TRUE) {\n        logger.warn(\"{}:{} has slave\", forgetHost, forgetPort);\n        return ClusterOperateResult.fail(String.format(\"\u88abforget\u7684\u8282\u70b9(%s:%s)\u4e0d\u80fd\u6709\u4ece\u8282\u70b9\", forgetHost, forgetPort));\n    }\n\n    // 3.\u88abforget\u7684\u8282\u70b9\u4e0d\u80fd\u6709slots\n    Map<String, InstanceSlotModel> clusterSlotsMap = redisCenter.getClusterSlotsMap(appId);\n    InstanceSlotModel instanceSlotModel = clusterSlotsMap.get(instanceInfo.getHostPort());\n    if (instanceSlotModel != null && instanceSlotModel.getSlotList() != null\n            && instanceSlotModel.getSlotList().size() > 0) {\n        logger.warn(\"{}:{} has slots\", forgetHost, forgetPort);\n        return ClusterOperateResult.fail(String.format(\"\u88abforget\u7684\u8282\u70b9(%s:%s)\u4e0d\u80fd\u6301\u6709slot\", forgetHost, forgetPort));\n    }\n\n    return ClusterOperateResult.success();\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/redis/impl/RedisDeployCenterImpl.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * 2.\u68c0\u67e5run\u4ee5\u53caslave\n *\n * @return\n */\n", "func_signal": "public TaskFlowStatusEnum checkIsRun()", "code": "{\n    if (!redisCenter.isRun(appId, host, port)) {\n        logger.error(marker, \"{} {}:{} is not run\", appId, host, port);\n        return TaskFlowStatusEnum.ABORT;\n    }\n    return TaskFlowStatusEnum.SUCCESS;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/task/tasks/diagnosticTask/InstanceSlotAnalysisTask.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * 1. \u4e3b\u4ece\u4e0d\u540c\u673a\u5668\n * 2. \u7aef\u53e3\u4ece\u8d77\u59cb\u7aef\u53e3\u5f00\u59cb\u81ea\u589e1\n */\n", "func_signal": "@Override\npublic List<RedisServerNode> generateRedisServerNodeList(long appId, List<String> redisServerMachineList,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t int masterPerMachine, int maxMemory)", "code": "{\n\n        // \u6700\u7ec8\u7ed3\u679c\n        List<RedisServerNode> redisServerNodeList = new ArrayList<RedisServerNode>();\n        // \u8d77\u59cb\u8282\u70b9\n        int masterPort = (int) (ConstUtils.REDIS_SERVER_BASE_PORT + (appId % 10) * 10);\n\n        // \u8bb0\u5f55\u672c\u6b21\u6bcf\u4e2a\u673a\u5668\u5206\u914d\u7684port\n        Map<String, Set<Integer>> ipPortSetMap = new HashMap<String, Set<Integer>>();\n\n        for (int i = 0; i < redisServerMachineList.size(); i++) {\n\n            String masterHost = redisServerMachineList.get(i);\n            String slaveHost = redisServerMachineList.get((i + 1) % redisServerMachineList.size());\n\n            for (int j = 0; j < masterPerMachine; j++) {\n                // master node\n                //\u5982\u679c\u7aef\u53e3\u5b58\u5728\u5c31\u81ea\u589e\n                while (checkHostPortExist(ipPortSetMap, masterHost, masterPort)) {\n                    masterPort++;\n                }\n                redisServerNodeList.add(new RedisServerNode(masterHost, masterPort, InstanceRoleEnum.MASTER.getRole(),\n                        maxMemory, \"\", 0));\n\n                // slave node\n                int slavePort = masterPort + ConstUtils.SLAVE_PORT_INCREASE;\n                //\u5982\u679c\u7aef\u53e3\u5b58\u5728\u5c31\u81ea\u589e\n                while (checkHostPortExist(ipPortSetMap, slaveHost, slavePort)) {\n                    slavePort++;\n                }\n                redisServerNodeList.add(new RedisServerNode(slaveHost, slavePort, InstanceRoleEnum.SLAVE.getRole(),\n                        maxMemory, masterHost, masterPort));\n\n                masterPort += 1;\n            }\n        }\n\n        return redisServerNodeList;\n    }", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/service/impl/InstancePortServiceImpl.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * 1.\u521d\u59cb\u5316\u53c2\u6570\n */\n", "func_signal": "@Override\npublic TaskFlowStatusEnum init()", "code": "{\n    super.init();\n    appId = MapUtils.getLongValue(paramMap, TaskConstants.APPID_KEY);\n    if (appId <= 0) {\n        logger.error(marker, \"task {} appId {} is wrong\", taskId, appId);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    auditId = MapUtils.getLongValue(paramMap, TaskConstants.AUDIT_ID_KEY);\n    if (auditId <= 0) {\n        logger.error(marker, \"task {} auditId {} is wrong\", taskId, auditId);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    host = MapUtils.getString(paramMap, TaskConstants.HOST_KEY);\n    if (StringUtils.isBlank(host)) {\n        logger.error(marker, \"task {} host is empty\", taskId);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    port = MapUtils.getIntValue(paramMap, TaskConstants.PORT_KEY);\n    if (port <= 0) {\n        logger.error(marker, \"task {} port {} is wrong\", taskId, port);\n        return TaskFlowStatusEnum.ABORT;\n    }\n\n    parentTaskId = MapUtils.getLongValue(paramMap, \"parentTaskId\");\n\n    return TaskFlowStatusEnum.SUCCESS;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/task/tasks/diagnosticTask/InstanceSlotAnalysisTask.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/*@Override\npublic List<RedisPortNode> generateRedisPortNodeList(long sourceAppId, long targetAppId,\n\t\tList<InstanceInfo> slaveInstanceInfoList, List<InstanceInfo> proxyInstanceInfoList) {\n\t\n\tList<RedisPortNode> redisPortNodeList = new ArrayList<RedisPortNode>();\n\t\n\tfor (int i = 0; i < slaveInstanceInfoList.size(); i++) {\n\t\t//proxy\u7d22\u5f15\n\t\tint index = i % proxyInstanceInfoList.size();\n\t\t\n\t\tInstanceInfo proxyInstanceInfo = proxyInstanceInfoList.get(index);\n\t\tInstanceInfo slaveInstanceInfo  = slaveInstanceInfoList.get(i);\n\t\t\n\t\tString redisPortHost = slaveInstanceInfo.getIp();\n\t\tint redisPortPort = slaveInstanceInfoList.get(i).getPort() + ConstUtils.REDIS_PORT_PORT_INCREASE;\n\t\tString sourceHost = slaveInstanceInfo.getIp();\n\t\tint sourcePort = slaveInstanceInfo.getPort();\n\t\tString targetHost = proxyInstanceInfo.getIp();\n\t\tint targetPort = proxyInstanceInfo.getPort();\n\t\n\t\twhile (checkRedisPortExist(redisPortHost, redisPortPort, sourceHost, sourcePort, targetHost, targetPort)) {\n\t\t\tredisPortPort++;\n\t\t}\n\t\t\n\t\tRedisPortNode redisPortNode = new RedisPortNode();\n\t\tredisPortNode.setIp(redisPortHost);\n\t\tredisPortNode.setPort(redisPortPort);\n\t\tredisPortNode.setSourceInstanceId(slaveInstanceInfo.getId());\n\t\tredisPortNode.setSourceIp(sourceHost);\n\t\tredisPortNode.setSourcePort(sourcePort);\n\t\tredisPortNode.setTargetInstanceId(proxyInstanceInfo.getId());\n\t\tredisPortNode.setTargetIp(targetHost);\n\t\tredisPortNode.setTargetPort(targetPort);\n\t\t\n\t\tredisPortNodeList.add(redisPortNode);\n\t}\n\t\n\treturn redisPortNodeList;\n}*/\n", "func_signal": "@Override\n    public RedisServerNode generateRedisServerNode(long appId, String host, int maxMemory, InstanceRoleEnum instanceRoleEnum)", "code": "{\n        synchronized (host.intern()) {\n            try {\n                //\u9632\u6b62\u7aef\u53e3\u91cd\u590d @TODO\u4e5f\u53ef\u4ee5\u7528\u672c\u5730\u7f13\u5b58\u505a\u7aef\u53e3\u9650\u5236\n                TimeUnit.SECONDS.sleep(3);\n                int port = (int) (ConstUtils.REDIS_SERVER_BASE_PORT + (appId % 10) * 10);\n                if (InstanceRoleEnum.SLAVE.equals(instanceRoleEnum)) {\n                    port += ConstUtils.SLAVE_PORT_INCREASE;\n                }\n                while (checkHostPortExist(host, port)) {\n                    logger.info(BaseTask.marker, \"appId {} host {} port is {}\", appId, host, port);\n                    port++;\n                }\n                logger.info(BaseTask.marker, \"final appId {} host {} port is {}\", appId, host, port);\n                return new RedisServerNode(host, port, maxMemory);\n            } catch (Exception e) {\n                logger.error(BaseTask.marker, e.getMessage(), e);\n                return null;\n            }\n        }\n    }", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/service/impl/InstancePortServiceImpl.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/*@Override\npublic List<CodisDashboardNode> generateCodisDashboardList(long appId, List<String> codisDashboardMachineList) {\n\t// \u6700\u7ec8\u7ed3\u679c\n\tList<CodisDashboardNode> codisDashboardNodeList = new ArrayList<CodisDashboardNode>();\n\tint port = ConstUtils.CODIS_DASHBOARD_BASE_PORT;\n\tfor (String ip : codisDashboardMachineList) {\n\t\t// \u5982\u679c\u7aef\u53e3\u5b58\u5728\u5c31\u81ea\u589e\n\t\twhile (checkDashboardHostPortExist(ip, port)) {\n\t\t\tport++;\n\t\t}\n\t\tcodisDashboardNodeList.add(new CodisDashboardNode(ip, port));\n\t\tport++;\n\t}\n\treturn codisDashboardNodeList;\n}*/\n", "func_signal": "@Override\n    public boolean checkHostPortExist(String ip, int port)", "code": "{\n        InstanceInfo instanceInfo = instanceDao.getAllInstByIpAndPort(ip, port);\n        if (instanceInfo != null) {\n            return true;\n        }\n        //\u53ea\u68c0\u6d4b\u4e00\u6b21\n        boolean isRedisRun = redisCenter.isRun(ip, port, 1);\n        if (isRedisRun) {\n            appWechatUtil.noticeWildInstance(ip, port);\n            logger.warn(BaseTask.marker, \"{}:{} process is not in instance_info table\", ip, port);\n            return true;\n        }\n        return false;\n    }", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/service/impl/InstancePortServiceImpl.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * \u83b7\u53d6redis \u57fa\u7840\u914d\u7f6e\n *\n * @param port\n * @param maxMemory\n * @return\n */\n", "func_signal": "public List<String> handleCommonConfig(String host, int port, int maxMemory, int versionId)", "code": "{\n    List<String> configs = null;\n    try {\n        configs = redisConfigTemplateService.handleCommonConfig(host, port, maxMemory, versionId);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    if (CollectionUtils.isEmpty(configs)) {\n        configs = redisConfigTemplateService.handleCommonDefaultConfig(port, maxMemory);\n    }\n    return configs;\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/redis/impl/RedisDeployCenterImpl.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * \u62f7\u8d1dredis\u914d\u7f6e\n *\n * @param sourceHost\n * @param sourcePort\n * @param targetHost\n * @param targetPort\n * @return\n */\n", "func_signal": "private boolean copyCommonConfig(long appId, String sourceHost, int sourcePort, String targetHost, int targetPort)", "code": "{\n    String[] compareConfigs = new String[]{\"maxmemory-policy\", \"maxmemory\", \"cluster-node-timeout\",\n            \"cluster-require-full-coverage\", \"repl-backlog-size\", \"appendonly\", \"hash-max-ziplist-entries\",\n            \"hash-max-ziplist-value\", \"list-max-ziplist-entries\", \"list-max-ziplist-value\",\n            \"set-max-intset-entries\",\n            \"zset-max-ziplist-entries\", \"zset-max-ziplist-value\", \"timeout\", \"tcp-keepalive\"};\n    try {\n        for (String config : compareConfigs) {\n            String sourceValue = getConfigValue(appId, sourceHost, sourcePort, config);\n            if (StringUtils.isBlank(sourceValue)) {\n                continue;\n            }\n            String targetValue = getConfigValue(appId, targetHost, targetPort, config);\n            /**\n             * todo chenshi\n             * \u4e0a\u9762\u53c2\u6570\u914d\u7f6e\u662f\u6309\u7167redis3.0\u7248\u672c\u914d\u7f6e\uff0c\u9ad8\u7248\u672credis 3.2\u7684\u53c2\u6570\u914d\u7f6e\u6709\u53d8\u5316(\u9700\u8981\u505a\u6620\u5c04\u6216\u9ed8\u8ba4\u914d\u7f6e)\n             * 3.0.7 : list-max-ziplist-entries   list-max-ziplist-value\n             * 3.2.10: \u65e0\u4e0a\u9762\u4e24\u4e2a\u53c2\u6570\u914d\u7f6elist-max-ziplist-size list-compress-depth\n             */\n            if (StringUtils.isNotBlank(targetValue)) {\n                if (!targetValue.equals(sourceValue)) {\n                    this.modifyInstanceConfig(appId, targetHost, targetPort, config, sourceValue);\n                }\n            }\n        }\n        return true;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return false;\n    }\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/redis/impl/RedisDeployCenterImpl.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * \u5e94\u7528\u673a\u5668\u5b9e\u4f8b\u5206\u5e03\u56fe\n *\n * @param appId\n * @param model\n */\n", "func_signal": "protected void fillAppMachineInstanceTopology(Long appId, Model model)", "code": "{\n    List<InstanceInfo> instanceList = appService.getAppInstanceInfo(appId);\n    int groupId = 1;\n    // 1.\u5206\u7ec4\uff0c\u540c\u4e00\u4e2a\u4e3b\u4ece\u5728\u4e00\u7ec4\n    for (int i = 0; i < instanceList.size(); i++) {\n        InstanceInfo instance = instanceList.get(i);\n        // \u6709\u4e86groupId\uff0c\u4e0d\u518d\u8bbe\u7f6e\n        if (instance.getGroupId() > 0) {\n            continue;\n        }\n        if (instance.isOffline()) {\n            continue;\n        }\n        for (int j = i + 1; j < instanceList.size(); j++) {\n            InstanceInfo instanceCompare = instanceList.get(j);\n            if (instanceCompare.isOffline()) {\n                continue;\n            }\n            // \u5bfb\u627e\u4e3b\u4ece\u5bf9\u5e94\u5173\u7cfb\n            if (instanceCompare.getMasterInstanceId() == instance.getId()\n                    || instance.getMasterInstanceId() == instanceCompare.getId()) {\n                instanceCompare.setGroupId(groupId);\n            }\n        }\n        instance.setGroupId(groupId++);\n    }\n\n    // 2.\u673a\u5668\u4e0b\u7684\u5b9e\u4f8b\u5217\u8868\n    Map<String, List<InstanceInfo>> machineInstanceMap = new HashMap<String, List<InstanceInfo>>();\n    for (InstanceInfo instance : instanceList) {\n        String ip = instance.getIp();\n        if (machineInstanceMap.containsKey(ip)) {\n            machineInstanceMap.get(ip).add(instance);\n        } else {\n            List<InstanceInfo> tempInstanceList = new ArrayList<InstanceInfo>();\n            tempInstanceList.add(instance);\n            machineInstanceMap.put(ip, tempInstanceList);\n        }\n    }\n\n    model.addAttribute(\"machineInstanceMap\", machineInstanceMap);\n    model.addAttribute(\"instancePairCount\", groupId - 1);\n}", "path": "cachecloud/cachecloud-web/src/main/java/com/sohu/cache/web/controller/BaseController.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "sohutv/cachecloud", "stars": 8349, "license": "apache-2.0", "language": "java", "size": 52947}
{"docstring": "/**\n * Test: insert one item to the cache, access it twice, then close the first reference to the\n * item. Expected: after closing the reference, the ClientCount should be decreased while the\n * accessCount should not change.\n */\n", "func_signal": "@Test\npublic void testAccessCountUpdate()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // add MFU item1\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);\n  CloseableReference<Integer> valueRef1a = mCache.get(KEYS[1]);\n  originalRef1.close();\n  assertSharedWithCount(KEYS[1], 10, 2);\n  assertSharedWithAccessCount(KEYS[1], 10, 2);\n\n  // close the first reference\n  valueRef1.close();\n  assertSharedWithCount(KEYS[1], 10, 1);\n  assertSharedWithAccessCount(KEYS[1], 10, 2);\n  valueRef1a.close();\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * insert 1 MFU item and 1 LFU item, access the LFU item twice (to become MFU) and make sure it is\n * moved to the MFU cache.\n */\n", "func_signal": "@Test\npublic void testMoveItemsFromLFUToMFU()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // insert item2 to MFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);\n  CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);\n  originalRef1.close();\n  valueRef1a.close();\n  valueRef1b.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n\n  // insert item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n\n  // access item2 one more time, this should result in moving item2 from LFU to MFU cache.\n  CloseableReference<Integer> valueRef2a = mCache.get(KEYS[2]);\n  valueRef2a.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n  assertMFUExclusivelyOwned(KEYS[2], 20);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Test: Add 2 frequently used elements, add a new frequently used element and make sure the cache\n * evicts the 1st item inserted to the cache (the least recently used one).\n */\n", "func_signal": "@Test\npublic void testFrequentlyUsedEviction()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // add item1 to MFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);\n  CloseableReference<Integer> valueRef1a = mCache.get(KEYS[1]);\n  originalRef1.close();\n  valueRef1.close();\n  valueRef1a.close();\n\n  // add item2 to MFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);\n  CloseableReference<Integer> valueRef2a = mCache.get(KEYS[2]);\n  originalRef2.close();\n  valueRef2.close();\n  assertSharedWithCount(KEYS[2], 20, 1);\n  assertSharedWithAccessCount(KEYS[2], 20, 2);\n  valueRef2a.close();\n\n  // both items are in the MFU\n  assertExclusivelyOwned(KEYS[1], 10);\n  assertExclusivelyOwned(KEYS[2], 20);\n\n  // add item2 to MFU, as a result item1 should be evicted\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);\n  CloseableReference<Integer> valueRef3a = mCache.get(KEYS[3]);\n  originalRef3.close();\n  valueRef3.close();\n  valueRef3a.close();\n  assertExclusivelyOwned(KEYS[2], 20);\n  assertExclusivelyOwned(KEYS[3], 30);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * add 2 frequently used items and one LFU item. Then add a new frequently used item. Expected:\n * the cache should evict one of the MFU items and not the LFU item.\n */\n", "func_signal": "@Test\npublic void testFrequentlyUsedEvictionWhithoutChangingLFU()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // insert item1 to MFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);\n  CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);\n  originalRef1.close();\n  valueRef1a.close();\n  valueRef1b.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n\n  // insert item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n\n  // insert item3 to MFU\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);\n  CloseableReference<Integer> valueRef3b = mCache.get(KEYS[3]);\n  originalRef3.close();\n  valueRef3a.close();\n  valueRef3b.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n  assertMFUExclusivelyOwned(KEYS[3], 30);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertExclusivelyOwnedSize(3, 60);\n\n  // insert item4 to MFU, this should evict item1 from the cache\n  CloseableReference<Integer> originalRef4 = newReference(40);\n  CloseableReference<Integer> valueRef4a = mCache.cache(KEYS[4], originalRef4);\n  CloseableReference<Integer> valueRef4b = mCache.get(KEYS[4]);\n  originalRef4.close();\n  valueRef4a.close();\n  valueRef4b.close();\n  assertNotCached(KEYS[1], 10);\n  assertMFUExclusivelyOwned(KEYS[3], 30);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertMFUExclusivelyOwned(KEYS[4], 40);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * insert 2 LFU keys, and 1 MFU key. Make sure when adding a new LFU key, the cache evicts the LFU\n * LFU key and not the LRU MFU key.\n */\n", "func_signal": "@Test\npublic void testEvictLFUandNotMFUKeys()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // insert item1 to MFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);\n  CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);\n  originalRef1.close();\n  valueRef1a.close();\n  valueRef1b.close(); // item1 is in the MFU cache\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n\n  // insert item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2a.close();\n\n  // insert item3 to LFU\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);\n  originalRef3.close();\n  valueRef3a.close();\n\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n\n  // insert item4 to LFU, the cache should evict item2\n  CloseableReference<Integer> originalRef4 = newReference(40);\n  CloseableReference<Integer> valueRef4a = mCache.cache(KEYS[4], originalRef4);\n  originalRef4.close();\n  valueRef4a.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n  assertLFUExclusivelyOwned(KEYS[4], 40);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * This test checks that the ghost list is actually an LRU list. It checks if the position of the\n * keys in the LFU ghost list is updated when trying to access them after being evicted (but they\n * were found it in the ghost list). ExpectedL the accessed key will be moved to the youngest\n * position in the ghost list.\n */\n", "func_signal": "@Test\npublic void testPositionUpdateInGhostList()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // insert item1 to LFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);\n  originalRef1.close();\n  valueRef1a.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n  assertGhostListsValidSize();\n\n  // insert item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2a.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertGhostListsValidSize();\n\n  // insert item3 to ghost list, this will result in evicting item1 from the LFU and insert it to\n  // the LFU ghost list.\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);\n  originalRef3.close();\n  valueRef3a.close();\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n  assertKeyIsInLFUGhostList(KEYS[1], 1);\n  assertGhostListsValidSize();\n\n  // insert item4 to LFU, this will result in evicting item2 from the LFU and inset it to the LFU\n  // ghost list.\n  CloseableReference<Integer> originalRef4 = newReference(40);\n  CloseableReference<Integer> valueRef4a = mCache.cache(KEYS[4], originalRef4);\n  originalRef4.close();\n  valueRef4a.close();\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n  assertLFUExclusivelyOwned(KEYS[4], 40);\n  assertKeyIsInLFUGhostList(KEYS[1], 1);\n  assertKeyIsInLFUGhostList(KEYS[2], 1);\n  assertGhostListsValidSize();\n\n  // try to access item1 (which is already evicted).\n  CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);\n  assertNull(valueRef1b);\n  assertKeyIsInLFUGhostList(KEYS[1], 2);\n  assertGhostListsValidSize();\n\n  // insert item5 to LFU, this will result in evicting item3 from LFU and insert it to the LFU\n  // ghost list\n  CloseableReference<Integer> originalRef5 = newReference(50);\n  CloseableReference<Integer> valueRef5a = mCache.cache(KEYS[5], originalRef5);\n  originalRef5.close();\n  valueRef5a.close();\n\n  // make sure item2 is removed from LFU ghost list and not item1 (since they have replaced\n  // their positions in the ghost list)\n  assertGhostListsValidSize();\n  assertLFUExclusivelyOwned(KEYS[4], 40);\n  assertLFUExclusivelyOwned(KEYS[5], 50);\n  assertKeyIsInLFUGhostList(KEYS[1], 2);\n  assertKeyIsInLFUGhostList(KEYS[3], 1);\n  assertKeyIsNotInLFUGhostList(KEYS[2]);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Zooms to the desired scale and positions the image so that the given image point corresponds to\n * the given view point.\n *\n * <p>If this method is called while an animation or gesture is already in progress, the current\n * animation or gesture will be stopped first.\n *\n * @param scale desired scale, will be limited to {min, max} scale factor\n * @param imagePoint 2D point in image's relative coordinate system (i.e. 0 <= x, y <= 1)\n * @param viewPoint 2D point in view's absolute coordinate system\n * @param limitFlags whether to limit translation and/or scale.\n * @param durationMs length of animation of the zoom, or 0 if no animation desired\n * @param onAnimationComplete code to run when the animation completes. Ignored if durationMs=0\n */\n", "func_signal": "public void zoomToPoint(\n    float scale,\n    PointF imagePoint,\n    PointF viewPoint,\n    @LimitFlag int limitFlags,\n    long durationMs,\n    @Nullable Runnable onAnimationComplete)", "code": "{\n  FLog.v(getLogTag(), \"zoomToPoint: duration %d ms\", durationMs);\n  calculateZoomToPointTransform(mNewTransform, scale, imagePoint, viewPoint, limitFlags);\n  setTransform(mNewTransform, durationMs, onAnimationComplete);\n}", "path": "fresco/samples/zoomable/src/main/java/com/facebook/samples/zoomable/AbstractAnimatedZoomableController.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Creates a bitmap from encoded JPEG bytes. Supports a partial JPEG image.\n *\n * @param encodedImage the encoded image with reference to the encoded bytes\n * @param bitmapConfig the {@link android.graphics.Bitmap.Config} used to create the decoded\n *     Bitmap\n * @param regionToDecode optional image region to decode. currently not supported.\n * @param length the number of encoded bytes in the buffer\n * @param colorSpace the target color space of the decoded bitmap, must be one of the named color\n *     space in {@link android.graphics.ColorSpace.Named}. If null, then SRGB color space is\n *     assumed if the SDK version >= 26.\n * @return the bitmap\n * @throws TooManyBitmapsException if the pool is full\n * @throws java.lang.OutOfMemoryError if the Bitmap cannot be allocated\n */\n", "func_signal": "@Override\npublic CloseableReference<Bitmap> decodeJPEGFromEncodedImageWithColorSpace(\n    final EncodedImage encodedImage,\n    Bitmap.Config bitmapConfig,\n    @Nullable Rect regionToDecode,\n    int length,\n    @Nullable final ColorSpace colorSpace)", "code": "{\n  BitmapFactory.Options options =\n      getBitmapFactoryOptions(encodedImage.getSampleSize(), bitmapConfig);\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n    OreoUtils.setColorSpace(options, colorSpace);\n  }\n  final CloseableReference<PooledByteBuffer> bytesRef = encodedImage.getByteBufferRef();\n  Preconditions.checkNotNull(bytesRef);\n  try {\n    Bitmap bitmap = decodeJPEGByteArrayAsPurgeable(bytesRef, length, options);\n    return pinBitmap(bitmap);\n  } finally {\n    CloseableReference.closeSafely(bytesRef);\n  }\n}", "path": "fresco/imagepipeline-native/src/main/java/com/facebook/imagepipeline/nativecode/DalvikPurgeableDecoder.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/** Creates a memory-backed encoded image from the stream. The stream is closed. */\n", "func_signal": "protected EncodedImage getByteBufferBackedEncodedImage(InputStream inputStream, int length)\n    throws IOException", "code": "{\n  CloseableReference<PooledByteBuffer> ref = null;\n  try {\n    if (length <= 0) {\n      ref = CloseableReference.of(mPooledByteBufferFactory.newByteBuffer(inputStream));\n    } else {\n      ref = CloseableReference.of(mPooledByteBufferFactory.newByteBuffer(inputStream, length));\n    }\n    return new EncodedImage(ref);\n  } finally {\n    Closeables.closeQuietly(inputStream);\n    CloseableReference.closeSafely(ref);\n  }\n}", "path": "fresco/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java", "commit_date": "2020-06-12 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Creates a bitmap from encoded bytes.\n *\n * @param encodedImage the encoded image with reference to the encoded bytes\n * @param bitmapConfig the {@link android.graphics.Bitmap.Config} used to create the decoded\n *     Bitmap\n * @param regionToDecode optional image region to decode. currently not supported.\n * @param colorSpace the target color space of the decoded bitmap, must be one of the named color\n *     space in {@link android.graphics.ColorSpace.Named}. If null, then SRGB color space is\n *     assumed if the SDK version >= 26.\n * @return the bitmap\n * @throws TooManyBitmapsException if the pool is full\n * @throws java.lang.OutOfMemoryError if the Bitmap cannot be allocated\n */\n", "func_signal": "@Override\npublic CloseableReference<Bitmap> decodeFromEncodedImageWithColorSpace(\n    final EncodedImage encodedImage,\n    Bitmap.Config bitmapConfig,\n    @Nullable Rect regionToDecode,\n    @Nullable final ColorSpace colorSpace)", "code": "{\n  BitmapFactory.Options options =\n      getBitmapFactoryOptions(encodedImage.getSampleSize(), bitmapConfig);\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n    OreoUtils.setColorSpace(options, colorSpace);\n  }\n  CloseableReference<PooledByteBuffer> bytesRef = encodedImage.getByteBufferRef();\n  Preconditions.checkNotNull(bytesRef);\n  try {\n    Bitmap bitmap = decodeByteArrayAsPurgeable(bytesRef, options);\n    return pinBitmap(bitmap);\n  } finally {\n    CloseableReference.closeSafely(bytesRef);\n  }\n}", "path": "fresco/imagepipeline-native/src/main/java/com/facebook/imagepipeline/nativecode/DalvikPurgeableDecoder.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Returns the greatest value present in {@code array}.\n *\n * @param array a <i>nonempty</i> array of {@code int} values\n * @return the value present in {@code array} that is greater than or equal to every other value\n *     in the array\n * @throws IllegalArgumentException if {@code array} is empty\n */\n", "func_signal": "public static int max(int... array)", "code": "{\n  Preconditions.checkArgument(array.length > 0);\n  int max = array[0];\n  for (int i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n}", "path": "fresco/fbcore/src/main/java/com/facebook/common/internal/Ints.java", "commit_date": "2020-06-16 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * This test makes sure that the accessCount state is updated for keys in the ghost list. Test:\n * add item1 to the ghost list, and try to access this element (after it was evicted), and check\n * that the access number was updated in the ghost list.\n */\n", "func_signal": "@Test\npublic void testAccessCountUpdateInLFUGhostList()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // insert item1 to LFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);\n  valueRef1a.close();\n\n  // insert item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2a.close();\n\n  // insert item3 to LFU, this should evict item1 from LFU and insert it to the LFU ghost list\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);\n  originalRef3.close();\n  valueRef3a.close();\n  assertExclusivelyOwnedSize(2, 50);\n  assertKeyIsInLFUGhostList(KEYS[1], 1);\n\n  // try to access the evicted item: item1, and check its accessCount is updated correctly\n  CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);\n  assertNull(valueRef1b);\n  assertExclusivelyOwnedSize(2, 50);\n  assertKeyIsInLFUGhostList(KEYS[1], 2);\n\n  // validate item1's state is correct after inserting the element again to the cache.\n  CloseableReference<Integer> valueRef1c = mCache.cache(KEYS[1], originalRef1);\n  originalRef1.close();\n  assertSharedWithAccessCount(KEYS[1], 10, 3);\n  // also, make sure it was added to the MFU now.\n  valueRef1c.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Sets a new zoomable transformation and animates to it if desired.\n *\n * <p>If this method is called while an animation or gesture is already in progress, the current\n * animation or gesture will be stopped first.\n *\n * @param newTransform new transform to make active\n * @param durationMs duration of the animation, or 0 to not animate\n * @param onAnimationComplete code to run when the animation completes. Ignored if durationMs=0\n */\n", "func_signal": "public void setTransform(\n    Matrix newTransform, long durationMs, @Nullable Runnable onAnimationComplete)", "code": "{\n  FLog.v(getLogTag(), \"setTransform: duration %d ms\", durationMs);\n  if (durationMs <= 0) {\n    setTransformImmediate(newTransform);\n  } else {\n    setTransformAnimated(newTransform, durationMs, onAnimationComplete);\n  }\n}", "path": "fresco/samples/zoomable/src/main/java/com/facebook/samples/zoomable/AbstractAnimatedZoomableController.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Utility method which adds optional configuration to ImageRequest\n *\n * @param imageRequestBuilder The Builder for ImageRequest\n * @param config The Config\n */\n", "func_signal": "public static void addOptionalFeatures(ImageRequestBuilder imageRequestBuilder, Config config)", "code": "{\n  if (config.usePostprocessor) {\n    final Postprocessor postprocessor;\n    switch (config.postprocessorType) {\n      case \"use_slow_postprocessor\":\n        postprocessor = DelayPostprocessor.getMediumPostprocessor();\n        break;\n      case \"use_fast_postprocessor\":\n        postprocessor = DelayPostprocessor.getFastPostprocessor();\n        break;\n      default:\n        postprocessor = DelayPostprocessor.getMediumPostprocessor();\n    }\n    imageRequestBuilder.setPostprocessor(postprocessor);\n  }\n  if (config.rotateUsingMetaData) {\n    imageRequestBuilder.setRotationOptions(RotationOptions.autoRotateAtRenderTime());\n  } else {\n    imageRequestBuilder.setRotationOptions(\n        RotationOptions.forceRotation(config.forcedRotationAngle));\n  }\n}", "path": "fresco/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/PipelineUtil.java", "commit_date": "2019-10-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/** checks that MFU min size cannot get smaller than MIN_MFU_FRACTION_PROMIL. */\n", "func_signal": "@Test\npublic void testCacheMargins()", "code": "{\n  // Cache has 4 entries; 3 for LFU and 1 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  int initialLFUFractionPromil = 850;\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUFractionPromil);\n\n  // insert item1 to LFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);\n  originalRef1.close();\n  valueRef1a.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n\n  // insert item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2a.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n\n  // insert item3 to LFU\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);\n  originalRef3.close();\n  valueRef3a.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n\n  // insert item4 to LFU, this will evict item1\n  CloseableReference<Integer> originalRef4 = newReference(40);\n  CloseableReference<Integer> valueRef4a = mCache.cache(KEYS[4], originalRef4);\n  originalRef4.close();\n  valueRef4a.close();\n  assertNotCached(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n  assertLFUExclusivelyOwned(KEYS[4], 40);\n\n  // item1 was evicted, now in ghost list\n  // this get should have increased the LFU fraction but since the MFU fraction will get under\n  // MIN_MFU_FRACTION_PREOMIL, the fractions will not be updated\n  CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);\n  assertNull(valueRef1b);\n  assertEquals(initialLFUFractionPromil, mCache.mLFUFractionPromil);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * This test maskes sure that the LFU cache fraction is being updated correctly when trying to\n * access a recently evicted key from LFU. Test: add 3 LFU items, the 1st item will be evicted and\n * inserted to the LFU ghost list (the LFU size is up to 2 keys). try to access the recently\n * evicted key and make sure that the LFU cache fraction is increased by the value of the\n * adaptiveRate.\n */\n", "func_signal": "@Test\npublic void testFractionUpdate()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // insert item1 to LFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);\n  originalRef1.close();\n  valueRef1.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n\n  // insert item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n\n  // insert item3 to LFU, item1 will be evicted from LFU and inserted to the LFU ghost list\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);\n  originalRef3.close();\n  valueRef3.close();\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n  assertNotCached(KEYS[1], 10);\n  assertKeyIsInLFUGhostList(KEYS[1], 1);\n  assertEquals(mCache.mLFUFractionPromil, initialLFUCacheFractionPromil);\n\n  // access item1, which was already evicted from LFU\n  CloseableReference<Integer> valueRef1a = mCache.get(KEYS[1]);\n  assertNull(valueRef1a);\n  // checks if the LFU fraction has been increased by adativeRate value\n  assertEquals(\n      initialLFUCacheFractionPromil + mCache.mAdaptiveRatePromil, mCache.mLFUFractionPromil);\n\n  // make item2 \"frequently used\" by accessing it more than mFrequentlyUsedThreshiold\n  // notice, MFU max size is 1 now (LFU size is 3).\n  CloseableReference<Integer> valueRef2a = mCache.get(KEYS[2]);\n  valueRef2a.close();\n  assertMFUExclusivelyOwned(KEYS[2], 20);\n\n  // insert item4 to MFU, item2 will be evicted from MFU and inserted in the MFU ghost list\n  CloseableReference<Integer> originalRef4 = newReference(40);\n  CloseableReference<Integer> valueRef4 = mCache.cache(KEYS[4], originalRef4);\n  CloseableReference<Integer> valueRef4a = mCache.get(KEYS[4]);\n  originalRef4.close();\n  valueRef4.close();\n  valueRef4a.close();\n  assertEquals(\n      initialLFUCacheFractionPromil + mCache.mAdaptiveRatePromil, mCache.mLFUFractionPromil);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/** check if the MFU keys are inserted to the MFU ghost list after eviction. */\n", "func_signal": "@Test\npublic void testAddKeyToMFHGhostList()", "code": "{\n  // Cache has 4 entries; 2 for LFU and 2 for MFU\n  // key is considered as MFU, if its accessCount > 1\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          100,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // insert item1 to MFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1a = mCache.cache(KEYS[1], originalRef1);\n  CloseableReference<Integer> valueRef1b = mCache.get(KEYS[1]);\n  originalRef1.close();\n  valueRef1a.close();\n  valueRef1b.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n\n  // insert item2 to MFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2a = mCache.cache(KEYS[2], originalRef2);\n  CloseableReference<Integer> valueRef2b = mCache.get(KEYS[2]);\n  originalRef2.close();\n  valueRef2a.close();\n  valueRef2b.close();\n  assertMFUExclusivelyOwned(KEYS[1], 10);\n  assertMFUExclusivelyOwned(KEYS[2], 20);\n\n  // insert item3 to MFU, the cache should evict item1 and insert it to the MFU ghost list\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3a = mCache.cache(KEYS[3], originalRef3);\n  CloseableReference<Integer> valueRef3b = mCache.get(KEYS[3]);\n  originalRef3.close();\n  valueRef3a.close();\n  valueRef3b.close();\n  assertMFUExclusivelyOwned(KEYS[2], 20);\n  assertMFUExclusivelyOwned(KEYS[3], 30);\n  assertKeyIsInMFUGhostList(KEYS[1]);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * Pin the bitmap so that it cannot be 'purged'. Only makes sense for purgeable bitmaps WARNING:\n * Use with caution. Make sure that the pinned bitmap is recycled eventually. Otherwise, this will\n * simply eat up ashmem memory and eventually lead to unfortunate crashes. We *may* eventually\n * provide an unpin method - but we don't yet have a compelling use case for that.\n *\n * @param bitmap the purgeable bitmap to pin\n */\n", "func_signal": "public CloseableReference<Bitmap> pinBitmap(Bitmap bitmap)", "code": "{\n  Preconditions.checkNotNull(bitmap);\n  try {\n    // Real decoding happens here - if the image was corrupted, this will throw an exception\n    nativePinBitmap(bitmap);\n  } catch (Exception e) {\n    bitmap.recycle();\n    throw Throwables.propagate(e);\n  }\n  if (!mUnpooledBitmapsCounter.increase(bitmap)) {\n    int bitmapSize = BitmapUtil.getSizeInBytes(bitmap);\n    bitmap.recycle();\n    String detailMessage =\n        String.format(\n            Locale.US,\n            \"Attempted to pin a bitmap of size %d bytes.\"\n                + \" The current pool count is %d, the current pool size is %d bytes.\"\n                + \" The current pool max count is %d, the current pool max size is %d bytes.\",\n            bitmapSize,\n            mUnpooledBitmapsCounter.getCount(),\n            mUnpooledBitmapsCounter.getSize(),\n            mUnpooledBitmapsCounter.getMaxCount(),\n            mUnpooledBitmapsCounter.getMaxSize());\n    throw new TooManyBitmapsException(detailMessage);\n  }\n  return CloseableReference.of(bitmap, mUnpooledBitmapsCounter.getReleaser());\n}", "path": "fresco/imagepipeline-native/src/main/java/com/facebook/imagepipeline/nativecode/DalvikPurgeableDecoder.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * This test checks edge cases, when trying to increase/decrease the LFU cache fraction to more\n * than 1/less than 0 (of the cache size). The expected behaviour is not to update the LFU\n * fraction.\n */\n", "func_signal": "@Test\npublic void testLFUFractionOverflow()", "code": "{\n  final int adaptiveRate = 700; // in order to cause an overflow\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          adaptiveRate,\n          1,\n          2,\n          initialLFUCacheFractionPromil);\n\n  // add item1 to LFU\n  CloseableReference<Integer> originalRef1 = newReference(10);\n  CloseableReference<Integer> valueRef1 = mCache.cache(KEYS[1], originalRef1);\n  originalRef1.close();\n  valueRef1.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n\n  // add item2 to LFU\n  CloseableReference<Integer> originalRef2 = newReference(20);\n  CloseableReference<Integer> valueRef2 = mCache.cache(KEYS[2], originalRef2);\n  originalRef2.close();\n  valueRef2.close();\n  assertLFUExclusivelyOwned(KEYS[1], 10);\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n\n  // add item3 to LFU, item1 will be evicted from LFU and will be inserted to the LFU ghost list\n  CloseableReference<Integer> originalRef3 = newReference(30);\n  CloseableReference<Integer> valueRef3 = mCache.cache(KEYS[3], originalRef3);\n  originalRef3.close();\n  valueRef3.close();\n  assertLFUExclusivelyOwned(KEYS[2], 20);\n  assertLFUExclusivelyOwned(KEYS[3], 30);\n  assertNotCached(KEYS[1], 10);\n\n  // item1 in the LFU ghost list\n  assertKeyIsInLFUGhostList(KEYS[1], 1);\n\n  // try to access item1, which was already evicted, which will result in updating the LFU\n  // fraction\n  assertEquals(initialLFUCacheFractionPromil, mCache.mLFUFractionPromil);\n  CloseableReference<Integer> valueRef1a = mCache.get(KEYS[1]);\n  assertNull(valueRef1a);\n  // make sure the LFU cache fraction was not updated, because if we do it will cause in overflow\n  assertEquals(initialLFUCacheFractionPromil, mCache.mLFUFractionPromil);\n\n  // make item2 and item3 \"frequently used\" by accessing them more than mFrequentlyUsedThreshiold\n  CloseableReference<Integer> valueRef2a = mCache.get(KEYS[2]);\n  CloseableReference<Integer> valueRef3a = mCache.get(KEYS[3]);\n  valueRef2a.close();\n  valueRef3a.close();\n  assertMFUExclusivelyOwned(KEYS[2], 20);\n  assertMFUExclusivelyOwned(KEYS[3], 30);\n\n  // insert item4 to MFU, item2 will be evicted from MFU and inserted in the MFU ghost list\n  CloseableReference<Integer> originalRef4 = newReference(40);\n  CloseableReference<Integer> valueRef4 = mCache.cache(KEYS[4], originalRef4);\n  CloseableReference<Integer> valueRef4a = mCache.get(KEYS[4]);\n  originalRef4.close();\n  valueRef4.close();\n  valueRef4a.close();\n\n  assertEquals(initialLFUCacheFractionPromil, mCache.mLFUFractionPromil);\n  CloseableReference<Integer> valueRef2b = mCache.get(KEYS[2]);\n  assertNull(valueRef2b);\n  // make sure the LFU cache fraction was not updated, because if we do it will cause in overflow\n  assertEquals(initialLFUCacheFractionPromil, mCache.mLFUFractionPromil);\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/**\n * test: pass illegal adaptive rate and illegal initial LFU cache fraction. expected result: fall\n * back and use the default adaptive rate and initial LFU fraction values.\n */\n", "func_signal": "@Test\npublic void testPassIllegalArgumentsToTheCacheConstructor()", "code": "{\n  final int illegalAdaptiveRate = -1;\n  final int illegalLFUCacheFractionPromil =\n      AbstractAdaptiveCountingMemoryCache.MIN_FRACTION_PROMIL - 1;\n  mCache =\n      createDummyAdaptiveCountingMemoryCache(\n          mParamsSupplier,\n          mCacheTrimStrategy,\n          mValueDescriptor,\n          illegalAdaptiveRate,\n          1,\n          2,\n          illegalLFUCacheFractionPromil);\n  assertNotNull(mCache);\n  assertEquals(\n      mCache.mLFUFractionPromil, AbstractAdaptiveCountingMemoryCache.DEFAULT_LFU_FRACTION_PROMIL);\n  assertEquals(\n      String.valueOf(mCache.mAdaptiveRatePromil),\n      String.valueOf(AbstractAdaptiveCountingMemoryCache.DEFAULT_ADAPTIVE_RATE_PROMIL));\n}", "path": "fresco/imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCacheTest.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "facebook/fresco", "stars": 17031, "license": "mit", "language": "java", "size": 75959}
{"docstring": "/** Add a single element to the set.  An isolated element is stored\n *  as a range el..el.\n */\n", "func_signal": "@Override\npublic void add(int el)", "code": "{\n    if ( readonly ) throw new IllegalStateException(\"can't alter readonly IntervalSet\");\n    add(el,el);\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "// copy on write so we can cache a..a intervals and sets of that\n", "func_signal": "protected void add(Interval addition)", "code": "{\n        if ( readonly ) throw new IllegalStateException(\"can't alter readonly IntervalSet\");\n\t//System.out.println(\"add \"+addition+\" to \"+intervals.toString());\n\tif ( addition.b<addition.a ) {\n\t\treturn;\n\t}\n\t// find position in list\n\t// Use iterators as we modify list in place\n\tfor (ListIterator<Interval> iter = intervals.listIterator(); iter.hasNext();) {\n\t\tInterval r = iter.next();\n\t\tif ( addition.equals(r) ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( addition.adjacent(r) || !addition.disjoint(r) ) {\n\t\t\t// next to each other, make a single larger interval\n\t\t\tInterval bigger = addition.union(r);\n\t\t\titer.set(bigger);\n\t\t\t// make sure we didn't just create an interval that\n\t\t\t// should be merged with next interval in list\n\t\t\twhile ( iter.hasNext() ) {\n\t\t\t\tInterval next = iter.next();\n\t\t\t\tif ( !bigger.adjacent(next) && bigger.disjoint(next) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// if we bump up against or overlap next, merge\n\t\t\t\titer.remove();   // remove this one\n\t\t\t\titer.previous(); // move backwards to what we just set\n\t\t\t\titer.set(bigger.union(next)); // set to 3 merged ones\n\t\t\t\titer.next(); // first call to next after previous duplicates the result\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif ( addition.startsBeforeDisjoint(r) ) {\n\t\t\t// insert before r\n\t\t\titer.previous();\n\t\t\titer.add(addition);\n\t\t\treturn;\n\t\t}\n\t\t// if disjoint and after r, a future iteration will handle it\n\t}\n\t// ok, must be after last interval (and disjoint from last interval)\n\t// just add it\n\tintervals.add(addition);\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Print out a whole tree in LISP form. {@link #getNodeText} is used on the\n *  node payloads to get the text for the nodes.\n */\n", "func_signal": "public static String toStringTree(final Tree t, final List<String> ruleNames)", "code": "{\n\tString s = Utils.escapeWhitespace(getNodeText(t, ruleNames), false);\n\tif ( t.getChildCount()==0 ) return s;\n\tStringBuilder buf = new StringBuilder();\n\tbuf.append(\"(\");\n\ts = Utils.escapeWhitespace(getNodeText(t, ruleNames), false);\n\tbuf.append(s);\n\tbuf.append(' ');\n\tfor (int i = 0; i<t.getChildCount(); i++) {\n\t\tif ( i>0 ) buf.append(' ');\n\t\tbuf.append(toStringTree(t.getChild(i), ruleNames));\n\t}\n\tbuf.append(\")\");\n\treturn buf.toString();\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Return true if t is u's parent or a node on path to root from u.\n *  Use == not equals().\n *\n *  @since 4.5.1\n */\n", "func_signal": "public static boolean isAncestorOf(Tree t, Tree u)", "code": "{\n\tif ( t==null || u==null || t.getParent()==null ) return false;\n\tTree p = u.getParent();\n\twhile ( p!=null ) {\n\t\tif ( t==p ) return true;\n\t\tp = p.getParent();\n\t}\n\treturn false;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/**\n * Computes the set of input symbols which could follow ATN state number\n * {@code stateNumber} in the specified full {@code context}. This method\n * considers the complete parser context, but does not evaluate semantic\n * predicates (i.e. all predicates encountered during the calculation are\n * assumed true). If a path in the ATN exists from the starting state to the\n * {@link RuleStopState} of the outermost context without matching any\n * symbols, {@link Token#EOF} is added to the returned set.\n *\n * <p>If {@code context} is {@code null}, it is treated as {@link ParserRuleContext#EMPTY}.</p>\n *\n * Note that this does NOT give you the set of all tokens that could\n * appear at a given token position in the input phrase.  In other words,\n * it does not answer:\n *\n *   \"Given a specific partial input phrase, return the set of all tokens\n *    that can follow the last token in the input phrase.\"\n *\n * The big difference is that with just the input, the parser could\n * land right in the middle of a lookahead decision. Getting\n     * all *possible* tokens given a partial input stream is a separate\n     * computation. See https://github.com/antlr/antlr4/issues/1428\n *\n * For this function, we are specifying an ATN state and call stack to compute\n * what token(s) can come next and specifically: outside of a lookahead decision.\n * That is what you want for error reporting and recovery upon parse error.\n *\n * @param stateNumber the ATN state number\n * @param context the full parse context\n * @return The set of potentially valid input symbols which could follow the\n * specified state in the specified context.\n * @throws IllegalArgumentException if the ATN does not contain a state with\n * number {@code stateNumber}\n */\n", "func_signal": "public IntervalSet getExpectedTokens(int stateNumber, RuleContext context)", "code": "{\n\tif (stateNumber < 0 || stateNumber >= states.size()) {\n\t\tthrow new IllegalArgumentException(\"Invalid state number.\");\n\t}\n\n\tRuleContext ctx = context;\n\tATNState s = states.get(stateNumber);\n\tIntervalSet following = nextTokens(s);\n\tif (!following.contains(Token.EPSILON)) {\n\t\treturn following;\n\t}\n\n\tIntervalSet expected = new IntervalSet();\n\texpected.addAll(following);\n\texpected.remove(Token.EPSILON);\n\twhile (ctx != null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\tATNState invokingState = states.get(ctx.invokingState);\n\t\tRuleTransition rt = (RuleTransition)invokingState.transition(0);\n\t\tfollowing = nextTokens(rt.followState);\n\t\texpected.addAll(following);\n\t\texpected.remove(Token.EPSILON);\n\t\tctx = ctx.parent;\n\t}\n\n\tif (following.contains(Token.EPSILON)) {\n\t\texpected.add(Token.EOF);\n\t}\n\n\treturn expected;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/atn/ATN.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Return first node satisfying the pred\n *\n \t *  @since 4.5.1\n */\n", "func_signal": "public static Tree findNodeSuchThat(Tree t, Predicate<Tree> pred)", "code": "{\n\tif ( pred.test(t) ) return t;\n\n\tif ( t==null ) return null;\n\n\tint n = t.getChildCount();\n\tfor (int i = 0 ; i < n ; i++){\n\t\tTree u = findNodeSuchThat(t.getChild(i), pred);\n\t\tif ( u!=null ) return u;\n\t}\n\treturn null;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Used for runtime deserialization of ATNs from strings */\n", "func_signal": "public ATN(ATNType grammarType, int maxTokenType)", "code": "{\n\tthis.grammarType = grammarType;\n\tthis.maxTokenType = maxTokenType;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/atn/ATN.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Create a set with all ints within range [a..b] (inclusive) */\n", "func_signal": "public static IntervalSet of(int a, int b)", "code": "{\n\t\tIntervalSet s = new IntervalSet();\n\t\ts.add(a,b);\n\t\treturn s;\n\t}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Print out a whole tree in LISP form. {@link #getNodeText} is used on the\n *  node payloads to get the text for the nodes.  Detect\n *  parse trees and extract data appropriately.\n */\n", "func_signal": "public static String toStringTree(Tree t, Parser recog)", "code": "{\n\tString[] ruleNames = recog != null ? recog.getRuleNames() : null;\n\tList<String> ruleNamesList = ruleNames != null ? Arrays.asList(ruleNames) : null;\n\treturn toStringTree(t, ruleNamesList);\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Get all descendents; includes t itself.\n *\n * @since 4.5.1\n \t */\n", "func_signal": "public static List<ParseTree> getDescendants(ParseTree t)", "code": "{\n\tList<ParseTree> nodes = new ArrayList<ParseTree>();\n\tnodes.add(t);\n\n\tint n = t.getChildCount();\n\tfor (int i = 0 ; i < n ; i++){\n\t\tnodes.addAll(getDescendants(t.getChild(i)));\n\t}\n\treturn nodes;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Return a list of all ancestors of this node.  The first node of\n *  list is the root and the last is the parent of this node.\n *\n *  @since 4.5.1\n */\n", "func_signal": "public static List<? extends Tree> getAncestors(Tree t)", "code": "{\n\tif ( t.getParent()==null ) return Collections.emptyList();\n\tList<Tree> ancestors = new ArrayList<Tree>();\n\tt = t.getParent();\n\twhile ( t!=null ) {\n\t\tancestors.add(0, t); // insert at start\n\t\tt = t.getParent();\n\t}\n\treturn ancestors;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Replace any subtree siblings of root that are completely to left\n *  or right of lookahead range with a CommonToken(Token.INVALID_TYPE,\"...\")\n *  node. The source interval for t is not altered to suit smaller range!\n *\n *  WARNING: destructive to t.\n *\n *  @since 4.5.1\n */\n", "func_signal": "public static void stripChildrenOutOfRange(ParserRuleContext t,\n\t\t\t\t\t\t\t\t\t\t   ParserRuleContext root,\n\t\t\t\t\t\t\t\t\t\t   int startIndex,\n\t\t\t\t\t\t\t\t\t\t   int stopIndex)", "code": "{\n\tif ( t==null ) return;\n\tfor (int i = 0; i < t.getChildCount(); i++) {\n\t\tParseTree child = t.getChild(i);\n\t\tInterval range = child.getSourceInterval();\n\t\tif ( child instanceof ParserRuleContext && (range.b < startIndex || range.a > stopIndex) ) {\n\t\t\tif ( isAncestorOf(child, root) ) { // replace only if subtree doesn't have displayed root\n\t\t\t\tCommonToken abbrev = new CommonToken(Token.INVALID_TYPE, \"...\");\n\t\t\t\tt.children.set(i, new TerminalNodeImpl(abbrev));\n\t\t\t}\n\t\t}\n\t}\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** combine all sets in the array returned the or'd value */\n", "func_signal": "public static IntervalSet or(IntervalSet[] sets)", "code": "{\n\tIntervalSet r = new IntervalSet();\n\tfor (IntervalSet s : sets) r.addAll(s);\n\treturn r;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\n\tpublic IntervalSet and(IntSet other)", "code": "{\n\t\tif ( other==null ) { //|| !(other instanceof IntervalSet) ) {\n\t\t\treturn null; // nothing in common with null set\n\t\t}\n\n\t\tList<Interval> myIntervals = this.intervals;\n\t\tList<Interval> theirIntervals = ((IntervalSet)other).intervals;\n\t\tIntervalSet intersection = null;\n\t\tint mySize = myIntervals.size();\n\t\tint theirSize = theirIntervals.size();\n\t\tint i = 0;\n\t\tint j = 0;\n\t\t// iterate down both interval lists looking for nondisjoint intervals\n\t\twhile ( i<mySize && j<theirSize ) {\n\t\t\tInterval mine = myIntervals.get(i);\n\t\t\tInterval theirs = theirIntervals.get(j);\n\t\t\t//System.out.println(\"mine=\"+mine+\" and theirs=\"+theirs);\n\t\t\tif ( mine.startsBeforeDisjoint(theirs) ) {\n\t\t\t\t// move this iterator looking for interval that might overlap\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse if ( theirs.startsBeforeDisjoint(mine) ) {\n\t\t\t\t// move other iterator looking for interval that might overlap\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if ( mine.properlyContains(theirs) ) {\n\t\t\t\t// overlap, add intersection, get next theirs\n\t\t\t\tif ( intersection==null ) {\n\t\t\t\t\tintersection = new IntervalSet();\n\t\t\t\t}\n\t\t\t\tintersection.add(mine.intersection(theirs));\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if ( theirs.properlyContains(mine) ) {\n\t\t\t\t// overlap, add intersection, get next mine\n\t\t\t\tif ( intersection==null ) {\n\t\t\t\t\tintersection = new IntervalSet();\n\t\t\t\t}\n\t\t\t\tintersection.add(mine.intersection(theirs));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse if ( !mine.disjoint(theirs) ) {\n\t\t\t\t// overlap, add intersection\n\t\t\t\tif ( intersection==null ) {\n\t\t\t\t\tintersection = new IntervalSet();\n\t\t\t\t}\n\t\t\t\tintersection.add(mine.intersection(theirs));\n\t\t\t\t// Move the iterator of lower range [a..b], but not\n\t\t\t\t// the upper range as it may contain elements that will collide\n\t\t\t\t// with the next iterator. So, if mine=[0..115] and\n\t\t\t\t// theirs=[115..200], then intersection is 115 and move mine\n\t\t\t\t// but not theirs as theirs may collide with the next range\n\t\t\t\t// in thisIter.\n\t\t\t\t// move both iterators to next ranges\n\t\t\t\tif ( mine.startsAfterNonDisjoint(theirs) ) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\telse if ( theirs.startsAfterNonDisjoint(mine) ) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( intersection==null ) {\n\t\t\treturn new IntervalSet();\n\t\t}\n\t\treturn intersection;\n\t}\n\n/** {@inheritDoc} */\n@Override\npublic boolean contains(int el) {\n\t\tint n = intervals.size();\n\t\tint l = 0;\n\t\tint r = n - 1;\n\t\t// Binary search for the element in the (sorted,\n\t\t// disjoint) array of intervals.\n\t\twhile (l <= r) {\n\t\t\tint m = (l + r) / 2;\n\t\t\tInterval I = intervals.get(m);\n\t\t\tint a = I.a;\n\t\t\tint b = I.b;\n\t\t\tif ( b<el ) {\n\t\t\t\tl = m + 1;\n\t\t\t} else if ( a>el ) {\n\t\t\t\tr = m - 1;\n\t\t\t} else { // el >= a && el <= b\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n}\n\n/** {@inheritDoc} */\n@Override\npublic boolean isNil() {\n    return intervals==null || intervals.isEmpty();\n}\n\n\t/**\n\t * Returns the maximum value contained in the set if not isNil().\n\t *\n\t * @return the maximum value contained in the set.\n\t * @throws RuntimeException if set is empty\n\t */\n\tpublic int getMaxElement() {\n\t\tif ( isNil() ) {\n\t\t\tthrow new RuntimeException(\"set is empty\");\n\t\t}\n\t\tInterval last = intervals.get(intervals.size()-1);\n\t\treturn last.b;\n\t}\n\n\t/**\n\t * Returns the minimum value contained in the set if not isNil().\n\t *\n\t * @return the minimum value contained in the set.\n\t * @throws RuntimeException if set is empty\n\t */\n\tpublic int getMinElement() {\n\t\tif ( isNil() ) {\n\t\t\tthrow new RuntimeException(\"set is empty\");\n\t\t}\n\n\t\treturn intervals.get(0).a;\n\t}\n\n/** Return a list of Interval objects. */\npublic List<Interval> getIntervals() {\n    return intervals;\n}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint hash = MurmurHash.initialize();\n\t\tfor (Interval I : intervals) {\n\t\t\thash = MurmurHash.update(hash, I.a);\n\t\t\thash = MurmurHash.update(hash, I.b);\n\t\t}\n\n\t\thash = MurmurHash.finish(hash, intervals.size() * 2);\n\t\treturn hash;\n\t}\n\n\t/** Are two IntervalSets equal?  Because all intervals are sorted\n *  and disjoint, equals is a simple linear walk over both lists\n *  to make sure they are the same.  Interval.equals() is used\n *  by the List.equals() method to check the ranges.\n */\n@Override\npublic boolean equals(Object obj) {\n    if ( obj==null || !(obj instanceof IntervalSet) ) {\n        return false;\n    }\n    IntervalSet other = (IntervalSet)obj;\n\t\treturn this.intervals.equals(other.intervals);\n\t}\n\n\t@Override\n\tpublic String toString() { return toString(false); }\n\n\tpublic String toString(boolean elemAreChar) {\n\t\tStringBuilder buf = new StringBuilder();\n\t\tif ( this.intervals==null || this.intervals.isEmpty() ) {\n\t\t\treturn \"{}\";\n\t\t}\n\t\tif ( this.size()>1 ) {\n\t\t\tbuf.append(\"{\");\n\t\t}\n\t\tIterator<Interval> iter = this.intervals.iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tInterval I = iter.next();\n\t\t\tint a = I.a;\n\t\t\tint b = I.b;\n\t\t\tif ( a==b ) {\n\t\t\t\tif ( a==Token.EOF ) buf.append(\"<EOF>\");\n\t\t\t\telse if ( elemAreChar ) buf.append(\"'\").appendCodePoint(a).append(\"'\");\n\t\t\t\telse buf.append(a);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( elemAreChar ) buf.append(\"'\").appendCodePoint(a).append(\"'..'\").appendCodePoint(b).append(\"'\");\n\t\t\t\telse buf.append(a).append(\"..\").append(b);\n\t\t\t}\n\t\t\tif ( iter.hasNext() ) {\n\t\t\t\tbuf.append(\", \");\n\t\t\t}\n\t\t}\n\t\tif ( this.size()>1 ) {\n\t\t\tbuf.append(\"}\");\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\t/**\n\t * @deprecated Use {@link #toString(Vocabulary)} instead.\n\t */\n\t@Deprecated\n\tpublic String toString(String[] tokenNames) {\n\t\treturn toString(VocabularyImpl.fromTokenNames(tokenNames));\n\t}\n\n\tpublic String toString(Vocabulary vocabulary) {\n\t\tStringBuilder buf = new StringBuilder();\n\t\tif ( this.intervals==null || this.intervals.isEmpty() ) {\n\t\t\treturn \"{}\";\n\t\t}\n\t\tif ( this.size()>1 ) {\n\t\t\tbuf.append(\"{\");\n\t\t}\n\t\tIterator<Interval> iter = this.intervals.iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tInterval I = iter.next();\n\t\t\tint a = I.a;\n\t\t\tint b = I.b;\n\t\t\tif ( a==b ) {\n\t\t\t\tbuf.append(elementName(vocabulary, a));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (int i=a; i<=b; i++) {\n\t\t\t\t\tif ( i>a ) buf.append(\", \");\n                buf.append(elementName(vocabulary, i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( iter.hasNext() ) {\n\t\t\t\tbuf.append(\", \");\n\t\t\t}\n\t\t}\n\t\tif ( this.size()>1 ) {\n\t\t\tbuf.append(\"}\");\n\t\t}\n    return buf.toString();\n}\n\n\t/**\n\t * @deprecated Use {@link #elementName(Vocabulary, int)} instead.\n\t */\n\t@Deprecated\n\tprotected String elementName(String[] tokenNames, int a) {\n\t\treturn elementName(VocabularyImpl.fromTokenNames(tokenNames), a);\n\t}\n\n\n\tprotected String elementName(Vocabulary vocabulary, int a) {\n\t\tif (a == Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t}\n\t\telse if (a == Token.EPSILON) {\n\t\t\treturn \"<EPSILON>\";\n\t\t}\n\t\telse {\n\t\t\treturn vocabulary.getDisplayName(a);\n\t\t}\n\t}\n\n@Override\npublic int size() {\n\t\tint n = 0;\n\t\tint numIntervals = intervals.size();\n\t\tif ( numIntervals==1 ) {\n\t\t\tInterval firstInterval = this.intervals.get(0);\n\t\t\treturn firstInterval.b-firstInterval.a+1;\n\t\t}\n\t\tfor (int i = 0; i < numIntervals; i++) {\n\t\t\tInterval I = intervals.get(i);\n\t\t\tn += (I.b-I.a+1);\n\t\t}\n\t\treturn n;\n}\n\n\tpublic IntegerList toIntegerList() {\n\t\tIntegerList values = new IntegerList(size());\n\t\tint n = intervals.size();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tInterval I = intervals.get(i);\n\t\t\tint a = I.a;\n\t\t\tint b = I.b;\n\t\t\tfor (int v=a; v<=b; v++) {\n\t\t\t\tvalues.add(v);\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n\n@Override\npublic List<Integer> toList() {\n\t\tList<Integer> values = new ArrayList<Integer>();\n\t\tint n = intervals.size();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tInterval I = intervals.get(i);\n\t\t\tint a = I.a;\n\t\t\tint b = I.b;\n\t\t\tfor (int v=a; v<=b; v++) {\n\t\t\t\tvalues.add(v);\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n\n\tpublic Set<Integer> toSet() {\n\t\tSet<Integer> s = new HashSet<Integer>();\n\t\tfor (Interval I : intervals) {\n\t\t\tint a = I.a;\n\t\t\tint b = I.b;\n\t\t\tfor (int v=a; v<=b; v++) {\n\t\t\t\ts.add(v);\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t/** Get the ith element of ordered set.  Used only by RandomPhrase so\n\t *  don't bother to implement if you're not doing that for a new\n\t *  ANTLR code gen target.\n\t */\n\tpublic int get(int i) {\n\t\tint n = intervals.size();\n\t\tint index = 0;\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tInterval I = intervals.get(j);\n\t\t\tint a = I.a;\n\t\t\tint b = I.b;\n\t\t\tfor (int v=a; v<=b; v++) {\n\t\t\t\tif ( index==i ) {\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic int[] toArray() {\n\t\treturn toIntegerList().toArray();\n\t}\n\n\t@Override\n\tpublic void remove(int el) {\n    if ( readonly ) throw new IllegalStateException(\"can't alter readonly IntervalSet\");\n    int n = intervals.size();\n    for (int i = 0; i < n; i++) {\n        Interval I = intervals.get(i);\n        int a = I.a;\n        int b = I.b;\n        if ( el<a ) {\n            break; // list is sorted and el is before this interval; not here\n        }\n        // if whole interval x..x, rm\n        if ( el==a && el==b ) {\n            intervals.remove(i);\n            break;\n        }\n        // if on left edge x..b, adjust left\n        if ( el==a ) {\n            I.a++;\n            break;\n        }\n        // if on right edge a..x, adjust right\n        if ( el==b ) {\n            I.b--;\n            break;\n        }\n        // if in middle a..x..b, split interval\n        if ( el>a && el<b ) { // found in this interval\n            int oldb = I.b;\n            I.b = el-1;      // [a..x-1]\n            add(el+1, oldb); // add [x+1..b]\n        }\n    }\n}\n\npublic boolean isReadonly() {\n    return readonly;\n}\n\npublic void setReadonly(boolean readonly) {\n    if ( this.readonly && !readonly ) throw new IllegalStateException(\"can't alter readonly IntervalSet\");\n    this.readonly = readonly;\n}\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Return ordered list of all children of this node */\n", "func_signal": "public static List<Tree> getChildren(Tree t)", "code": "{\n\tList<Tree> kids = new ArrayList<Tree>();\n\tfor (int i=0; i<t.getChildCount(); i++) {\n\t\tkids.add(t.getChild(i));\n\t}\n\treturn kids;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/Trees.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Compute the set of valid tokens that can occur starting in state {@code s}.\n *  If {@code ctx} is null, the set of tokens will not include what can follow\n *  the rule surrounding {@code s}. In other words, the set will be\n *  restricted to tokens reachable staying within {@code s}'s rule.\n */\n", "func_signal": "public IntervalSet nextTokens(ATNState s, RuleContext ctx)", "code": "{\n\tLL1Analyzer anal = new LL1Analyzer(this);\n\tIntervalSet next = anal.LOOK(s, ctx);\n\treturn next;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/atn/ATN.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic IntervalSet complement(IntSet vocabulary)", "code": "{\n\t\tif ( vocabulary==null || vocabulary.isNil() ) {\n\t\t\treturn null; // nothing in common with null set\n\t\t}\n\n\t\tIntervalSet vocabularyIS;\n\t\tif (vocabulary instanceof IntervalSet) {\n\t\t\tvocabularyIS = (IntervalSet)vocabulary;\n\t\t}\n\t\telse {\n\t\t\tvocabularyIS = new IntervalSet();\n\t\t\tvocabularyIS.addAll(vocabulary);\n\t\t}\n\n\t\treturn vocabularyIS.subtract(this);\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/** Create a set with a single element, el. */\n", "func_signal": "public static IntervalSet of(int a)", "code": "{\n\tIntervalSet s = new IntervalSet();\n        s.add(a);\n        return s;\n    }", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/**\n * Compute the set difference between two interval sets. The specific\n * operation is {@code left - right}. If either of the input sets is\n * {@code null}, it is treated as though it was an empty set.\n */\n", "func_signal": "public static IntervalSet subtract(IntervalSet left, IntervalSet right)", "code": "{\n\tif (left == null || left.isNil()) {\n\t\treturn new IntervalSet();\n\t}\n\n\tIntervalSet result = new IntervalSet(left);\n\tif (right == null || right.isNil()) {\n\t\t// right set has no elements; just return the copy of the current set\n\t\treturn result;\n\t}\n\n\tint resultI = 0;\n\tint rightI = 0;\n\twhile (resultI < result.intervals.size() && rightI < right.intervals.size()) {\n\t\tInterval resultInterval = result.intervals.get(resultI);\n\t\tInterval rightInterval = right.intervals.get(rightI);\n\n\t\t// operation: (resultInterval - rightInterval) and update indexes\n\n\t\tif (rightInterval.b < resultInterval.a) {\n\t\t\trightI++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rightInterval.a > resultInterval.b) {\n\t\t\tresultI++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tInterval beforeCurrent = null;\n\t\tInterval afterCurrent = null;\n\t\tif (rightInterval.a > resultInterval.a) {\n\t\t\tbeforeCurrent = new Interval(resultInterval.a, rightInterval.a - 1);\n\t\t}\n\n\t\tif (rightInterval.b < resultInterval.b) {\n\t\t\tafterCurrent = new Interval(rightInterval.b + 1, resultInterval.b);\n\t\t}\n\n\t\tif (beforeCurrent != null) {\n\t\t\tif (afterCurrent != null) {\n\t\t\t\t// split the current interval into two\n\t\t\t\tresult.intervals.set(resultI, beforeCurrent);\n\t\t\t\tresult.intervals.add(resultI + 1, afterCurrent);\n\t\t\t\tresultI++;\n\t\t\t\trightI++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// replace the current interval\n\t\t\t\tresult.intervals.set(resultI, beforeCurrent);\n\t\t\t\tresultI++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (afterCurrent != null) {\n\t\t\t\t// replace the current interval\n\t\t\t\tresult.intervals.set(resultI, afterCurrent);\n\t\t\t\trightI++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// remove the current interval (thus no need to increment resultI)\n\t\t\t\tresult.intervals.remove(resultI);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\n\t// If rightI reached right.intervals.size(), no more intervals to subtract from result.\n\t// If resultI reached result.intervals.size(), we would be subtracting from an empty set.\n\t// Either way, we are done.\n\treturn result;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/misc/IntervalSet.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/**\n\t * Compute the set of valid tokens that can occur starting in {@code s} and\n\t * staying in same rule. {@link Token#EPSILON} is in set if we reach end of\n\t * rule.\n */\n", "func_signal": "public IntervalSet nextTokens(ATNState s)", "code": "{\n    if ( s.nextTokenWithinRule != null ) return s.nextTokenWithinRule;\n    s.nextTokenWithinRule = nextTokens(s, null);\n    s.nextTokenWithinRule.setReadonly(true);\n    return s.nextTokenWithinRule;\n}", "path": "antlr4/runtime/Java/src/org/antlr/v4/runtime/atn/ATN.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "antlr/antlr4", "stars": 16125, "license": "bsd-3-clause", "language": "java", "size": 69711}
{"docstring": "/**\n *\t\u5224\u65ad\u7bad\u5934\u4e0a\u7684\u8868\u8fbe\u5f0f\u662f\u5426\u6210\u7acb\n */\n", "func_signal": "private boolean executeCondition(SpiderNode fromNode, SpiderNode node, Map<String, Object> variables, SpiderContext context)", "code": "{\n\tif (fromNode != null) {\n\t\tboolean hasException = variables.get(\"ex\") != null;\n\t\tString exceptionFlow = node.getExceptionFlow(fromNode.getNodeId());\n\t\t//\u5f53\u51fa\u73b0\u5f02\u5e38\u6d41\u8f6c : 1\n\t\t//\u672a\u51fa\u73b0\u5f02\u5e38\u6d41\u8f6c : 2\n\t\tif((\"1\".equalsIgnoreCase(exceptionFlow) && !hasException) || (\"2\".equalsIgnoreCase(exceptionFlow) && hasException)){\n\t\t\treturn false;\n\t\t}\n\t\tString condition = node.getCondition(fromNode.getNodeId());\n\t\tif (StringUtils.isNotBlank(condition)) { // \u5224\u65ad\u662f\u5426\u6709\u6761\u4ef6\n\t\t\tObject result = null;\n\t\t\ttry {\n\t\t\t\tresult = ExpressionUtils.execute(condition, variables);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"\u5224\u65ad{}\u51fa\u9519,\u5f02\u5e38\u4fe1\u606f\uff1a{}\", condition, e);\n\t\t\t}\n\t\t\tif (result != null) {\n\t\t\t\tboolean isContinue = \"true\".equals(result) || Objects.equals(result, true);\n\t\t\t\tlogger.debug(\"\u5224\u65ad{}={}\", condition, isContinue);\n\t\t\t\treturn isContinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/Spider.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Consumes the next token and returns it. **/\n", "func_signal": "public Token consume ()", "code": "{\n\tif (!hasMore()) throw new RuntimeException(\"Reached the end of the source.\");\n\treturn tokens.get(index++);\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Returns a scratch buffer to store arguments in when calling the function in {@link AstInterpreter}. Avoids generating\n * garbage. **/\n", "func_signal": "public Object[] getCachedArguments ()", "code": "{\n\tObject[] args = cachedArguments.get();\n\tif (args == null) {\n\t\targs = new Object[arguments.size()];\n\t\tcachedArguments.set(args);\n\t}\n\treturn args;\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/Ast.java", "commit_date": "2020-03-11 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Returns a scratch buffer to store arguments in when calling the function in {@link AstInterpreter}. Avoids generating\n * garbage. **/\n", "func_signal": "public Object[] getCachedArguments ()", "code": "{\n\tObject[] args = cachedArguments.get();\n\tif (args == null) {\n\t\targs = new Object[arguments.size()];\n\t\tcachedArguments.set(args);\n\t}\n\treturn args;\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/Ast.java", "commit_date": "2020-03-11 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Returns the {@link Source} this stream wraps. */\n", "func_signal": "public String getSource ()", "code": "{\n\tif (tokens.size() == 0) return null;\n\treturn tokens.get(0).getSpan().getSource();\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Matches and optionally consumes the next token in case of a match. Returns whether the token matched. */\n", "func_signal": "public boolean match (String text, boolean consume)", "code": "{\n\tif (index >= end) return false;\n\tif (tokens.get(index).getText().equals(text)) {\n\t\tif (consume) index++;\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Must be invoked when this node is done evaluating so we don't leak memory **/\n", "func_signal": "public void clearCachedArguments ()", "code": "{\n\tObject[] args = getCachedArguments();\n\tfor (int i = 0; i < args.length; i++) {\n\t\targs[i] = null;\n\t}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/Ast.java", "commit_date": "2020-03-11 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Must be invoked when this node is done evaluating so we don't leak memory **/\n", "func_signal": "public void clearCachedArguments ()", "code": "{\n\tObject[] args = getCachedArguments();\n\tfor (int i = 0; i < args.length; i++) {\n\t\targs[i] = null;\n\t}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/Ast.java", "commit_date": "2020-03-11 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/**\n * \u521d\u59cb\u5316/\u91cd\u7f6e\u81ea\u5b9a\u4e49\u51fd\u6570\n */\n", "func_signal": "@PostConstruct\nprivate void init()", "code": "{\n    try {\n        ScriptManager.lock();\n        ScriptManager.clearFunctions();\n        ScriptEngine engine = ScriptManager.createEngine();\n        super.list().forEach(function -> {\n            ScriptManager.registerFunction(engine,function.getName(),function.getParameter(),function.getScript());\n        });\n        ScriptManager.setScriptEngine(engine);\n    } finally {\n        ScriptManager.unlock();\n    }\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/service/FunctionService.java", "commit_date": "2020-03-11 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "//www.baidu.com/s?wd=spider-flow&abbr=sf')}\")\n", "func_signal": "public static Map<String,String> parameterMap(String url)", "code": "{\n\t\tMap<String,String> map = new HashMap<String,String>();\n\t\tint index = url.indexOf(\"?\");\n\t\tif(index != -1) {\n\t        String param = url.substring(index+1);\n\t        if(StringUtils.isNotBlank(param)) {\n\t\t        String[] params = param.split(\"&\");\n\t\t        for (String item : params) {\n\t\t            String[] kv = item.split(\"=\");\n\t\t            if(kv.length > 0) {\n\t\t            \tif(StringUtils.isNotBlank(kv[0])) {\n\t\t            \t\tString value = \"\";\n\t\t            \t\tif(StringUtils.isNotBlank(kv[1])) {\n\t\t            \t\t\tint kv1Index = kv[1].indexOf(\"#\");\n\t\t            \t\t\tif(kv1Index != -1) {\n\t\t            \t\t\t\tvalue = kv[1].substring(0,kv1Index);\n\t\t            \t\t\t}else {\n\t\t            \t\t\t\tvalue = kv[1];\n\t\t            \t\t\t}\n\t\t            \t\t}\n\t\t            \t\tmap.put(kv[0],value);\n\t\t            \t}\n\t\t            }\n\t\t        }\n\t        }\n\t\t}\n\t\treturn map;\n\t}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/executor/function/UrlFunctionExecutor.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/**\n * \u65b0\u5efa\u5b9a\u65f6\u4efb\u52a1\n * @param spiderFlow \u722c\u866b\u6d41\u7a0b\u56fe\n * @return boolean true/false\n */\n", "func_signal": "public Date addJob(SpiderFlow spiderFlow)", "code": "{\n\ttry {\n\t\tJobDetail job = JobBuilder.newJob(SpiderJob.class).withIdentity(getJobKey(spiderFlow.getId())).build();\n\t\tjob.getJobDataMap().put(JOB_PARAM_NAME, spiderFlow);\n\t\t\n\t\tCronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(spiderFlow.getCron()).withMisfireHandlingInstructionDoNothing();\n\t\t\n\t\tCronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(spiderFlow.getId())).withSchedule(cronScheduleBuilder).build();\n\t\t\n\t\treturn scheduler.scheduleJob(job,trigger);\n\t} catch (SchedulerException e) {\n\t\tlogger.error(\"\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\u51fa\u9519\",e);\n\t\treturn null;\n\t}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/job/SpiderJobManager.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/**\n * \u53d1\u9001\u7b80\u5355\u6587\u672c\u90ae\u4ef6\n * \n * @param subject \u4e3b\u9898\n * @param content \u5185\u5bb9\n * @param to      \u6536\u4ef6\u4eba\u5217\u8868\n * @author BillDowney\n * @date 2020\u5e744\u67084\u65e5 \u4e0a\u534812:40:42\n */\n", "func_signal": "public void sendSimpleMail(String subject, String content, String... to)", "code": "{\n\tSimpleMailMessage message = new SimpleMailMessage();\n\tmessage.setFrom(from);\n\tmessage.setSubject(subject);\n\tmessage.setText(content);\n\tmessage.setTo(to);\n\tjavaMailSender.send(message);\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/utils/EmailUtils.java", "commit_date": "2020-04-03 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Matches and optionally consumes the next token in case of a match. Returns whether the token matched. */\n", "func_signal": "public boolean match (TokenType type, boolean consume)", "code": "{\n\tif (index >= end) return false;\n\tif (tokens.get(index).getType() == type) {\n\t\tif (consume) index++;\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Checks if the next token matches the given text and optionally consumes, or throws an error if the next token did not match\n * the text. */\n", "func_signal": "public Token expect (String text)", "code": "{\n\tboolean result = match(text, true);\n\tif (!result) {\n\t\tToken token = index < tokens.size() ? tokens.get(index) : null;\n\t\tSpan span = token != null ? token.getSpan() : null;\n\t\tif (span == null)\n\t\t\tExpressionError.error(\"Expected '\" + text + \"', but reached the end of the source.\", this);\n\t\telse\n\t\t\tExpressionError.error(\"Expected '\" + text + \"', but got '\" + token.getText() + \"'\", span);\n\t\treturn null; // never reached\n\t} else {\n\t\treturn tokens.get(index - 1);\n\t}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Checks if the next token has the give type and optionally consumes, or throws an error if the next token did not match the\n * type. */\n", "func_signal": "public Token expect (TokenType type)", "code": "{\n\tboolean result = match(type, true);\n\tif (!result) {\n\t\tToken token = index < tokens.size() ? tokens.get(index) : null;\n\t\tSpan span = token != null ? token.getSpan() : null;\n\t\tif (span == null)\n\t\t\tExpressionError.error(\"Expected '\" + type.getError() + \"', but reached the end of the source.\", this);\n\t\telse\n\t\t\tExpressionError.error(\"Expected '\" + type.getError() + \"', but got '\" + token.getText() + \"'\", span);\n\t\treturn null; // never reached\n\t} else {\n\t\treturn tokens.get(index - 1);\n\t}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Matches any of the token texts and optionally consumes the next token in case of a match. Returns whether the token\n * matched. */\n", "func_signal": "public boolean match (boolean consume, String... tokenTexts)", "code": "{\n\tfor (String text : tokenTexts) {\n\t\tif (match(text, consume)) return true;\n\t}\n\treturn false;\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/** Matches any of the token types and optionally consumes the next token in case of a match. Returns whether the token\n * matched. */\n", "func_signal": "public boolean match (boolean consume, TokenType... types)", "code": "{\n\tfor (TokenType type : types) {\n\t\tif (match(type, consume)) return true;\n\t}\n\treturn false;\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/parsing/TokenStream.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/**\n * <p>\n * Create an error message based on the provided message and stream, highlighting the line on which the error happened. If the\n * stream has more tokens, the next token will be highlighted. Otherwise the end of the source of the stream will be\n * highlighted.\n * </p>\n *\n * <p>\n * Throws a {@link RuntimeException}\n * </p>\n */\n", "func_signal": "public static void error (String message, TokenStream stream)", "code": "{\n\tif (stream.hasMore())\n\t\terror(message, stream.consume().getSpan());\n\telse {\n\t\tString source = stream.getSource();\n\t\tif (source == null)\n\t\t\terror(message, new Span(\" \", 0, 1));\n\t\telse\n\t\t\terror(message, new Span(source, source.length() - 1, source.length()));\n\t}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/expression/ExpressionError.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/**\n * \u6267\u884c\u6839\u8282\u70b9\n */\n", "func_signal": "private void executeRoot(SpiderNode root, SpiderContext context, Map<String, Object> variables)", "code": "{\n\t//\u83b7\u53d6\u5f53\u524d\u6d41\u7a0b\u6267\u884c\u7ebf\u7a0b\u6570\n\tint nThreads = NumberUtils.toInt(root.getStringJsonValue(ShapeExecutor.THREAD_COUNT), defaultThreads);\n\tString strategy = root.getStringJsonValue(\"submit-strategy\");\n\tThreadSubmitStrategy submitStrategy;\n\t//\u9009\u62e9\u63d0\u4ea4\u7b56\u7565\uff0c\u8fd9\u91cc\u4e00\u5b9a\u8981\u4f7f\u7528new,\u4e0d\u80fd\u4e0e\u5176\u4ed6\u5b9e\u4f8b\u5171\u4eab\n\tif(\"linked\".equalsIgnoreCase(strategy)){\n\t\tsubmitStrategy = new LinkedThreadSubmitStrategy();\n\t}else if(\"child\".equalsIgnoreCase(strategy)){\n\t\tsubmitStrategy = new ChildPriorThreadSubmitStrategy();\n\t}else if(\"parent\".equalsIgnoreCase(strategy)){\n\t\tsubmitStrategy = new ParentPriorThreadSubmitStrategy();\n\t}else{\n\t\tsubmitStrategy = new RandomThreadSubmitStrategy();\n\t}\n\t//\u521b\u5efa\u5b50\u7ebf\u7a0b\u6c60\uff0c\u91c7\u7528\u4e00\u7236\u591a\u5b50\u7684\u7ebf\u7a0b\u6c60,\u5b50\u7ebf\u7a0b\u6570\u4e0d\u80fd\u8d85\u8fc7\u603b\u7ebf\u7a0b\u6570\uff08\u8d85\u8fc7\u65f6\u8fdb\u5165\u961f\u5217\u7b49\u5f85\uff09,+1\u662f\u56e0\u4e3a\u4f1a\u5360\u7528\u4e00\u4e2a\u7ebf\u7a0b\u7528\u6765\u8c03\u5ea6\u6267\u884c\u4e0b\u4e00\u7ea7\n\tSubThreadPoolExecutor pool = executorInstance.createSubThreadPoolExecutor(Math.max(nThreads,1) + 1,submitStrategy);\n\tcontext.setRootNode(root);\n\tcontext.setThreadPool(pool);\n\t//\u89e6\u53d1\u76d1\u542c\u5668\n\tif (listeners != null) {\n\t\tlisteners.forEach(listener -> listener.beforeStart(context));\n\t}\n\tComparator<SpiderNode> comparator = submitStrategy.comparator();\n\t//\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u5f00\u59cb\u6267\u884c\u4efb\u52a1,\u5e76\u76d1\u542c\u5176\u7ed3\u675f\u5e76\u6267\u884c\u4e0b\u4e00\u7ea7\n\tFuture<?> f = pool.submitAsync(TtlRunnable.get(() -> {\n\t\ttry {\n\t\t\t//\u6267\u884c\u5177\u4f53\u8282\u70b9\n\t\t\tSpider.this.executeNode(null, root, context, variables);\n\t\t\tQueue<Future<?>> queue = context.getFutureQueue();\n\t\t\t//\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u83b7\u53d6Future,\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u7ed3\u675f,\u5f53\u4efb\u52a1\u5b8c\u6210\u65f6\uff0c\u5219\u6267\u884c\u4e0b\u4e00\u7ea7\n\t\t\twhile (!queue.isEmpty()) {\n\t\t\t\ttry {\n\t\t\t\t\t//TODO \u8fd9\u91cc\u5e94\u8be5\u662f\u53d6\u51fa\u6700\u5148\u6267\u884c\u5b8c\u6bd5\u7684\u4efb\u52a1\n\t\t\t\t\tOptional<Future<?>> max = queue.stream().filter(Future::isDone).max((o1, o2) -> {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn comparator.compare(((SpiderTask) o1.get()).node, ((SpiderTask) o2.get()).node);\n\t\t\t\t\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\n\t\t\t\t\t});\n\t\t\t\t\tif (max.isPresent()) {\t//\u5224\u65ad\u4efb\u52a1\u662f\u5426\u5b8c\u6210\n\t\t\t\t\t\tqueue.remove(max.get());\n\t\t\t\t\t\tif (context.isRunning()) {\t//\u68c0\u6d4b\u662f\u5426\u8fd0\u884c\u4e2d(\u5f53\u5728\u9875\u9762\u4e2d\u70b9\u51fb\"\u505c\u6b62\"\u65f6,\u6b64\u503c\u4e3afalse,\u5176\u4f59\u4e3atrue)\n\t\t\t\t\t\t\tSpiderTask task = (SpiderTask) max.get().get();\n\t\t\t\t\t\t\ttask.node.decrement();\t//\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5,\u8ba1\u6570\u5668\u51cf\u4e00(\u8be5\u8ba1\u6570\u5668\u662f\u7ed9Join\u8282\u70b9\u4f7f\u7528)\n\t\t\t\t\t\t\tif (task.executor.allowExecuteNext(task.node, context, task.variables)) {\t//\u5224\u65ad\u662f\u5426\u5141\u8bb8\u6267\u884c\u4e0b\u4e00\u7ea7\n\t\t\t\t\t\t\t\tlogger.debug(\"\u6267\u884c\u8282\u70b9[{}:{}]\u5b8c\u6bd5\", task.node.getNodeName(), task.node.getNodeId());\n\t\t\t\t\t\t\t\t//\u6267\u884c\u4e0b\u4e00\u7ea7\n\t\t\t\t\t\t\t\tSpider.this.executeNextNodes(task.node, context, task.variables);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlogger.debug(\"\u6267\u884c\u8282\u70b9[{}:{}]\u5b8c\u6bd5\uff0c\u5ffd\u7565\u6267\u884c\u4e0b\u4e00\u8282\u70b9\", task.node.getNodeName(), task.node.getNodeId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//\u7761\u77201ms,\u8ba9\u51facpu\n\t\t\t\t\tThread.sleep(1);\n\t\t\t\t} catch (InterruptedException ignored) {\n\t\t\t\t} catch (Throwable t){\n\t\t\t\t\tlogger.error(\"\u7a0b\u5e8f\u53d1\u751f\u5f02\u5e38\",t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//\u7b49\u5f85\u7ebf\u7a0b\u6c60\u7ed3\u675f\n\t\t\tpool.awaitTermination();\n\t\t} finally {\n\t\t\t//\u89e6\u53d1\u76d1\u542c\u5668\n\t\t\tif (listeners != null) {\n\t\t\t\tlisteners.forEach(listener -> listener.afterEnd(context));\n\t\t\t}\n\t\t}\n\t}), null, root);\n\ttry {\n\t\tf.get();\t//\u963b\u585e\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\n\t} catch (InterruptedException | ExecutionException ignored) {}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/Spider.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/**\n * \u6267\u884c\u4e0b\u4e00\u7ea7\u8282\u70b9\n */\n", "func_signal": "private void executeNextNodes(SpiderNode node, SpiderContext context, Map<String, Object> variables)", "code": "{\n\tList<SpiderNode> nextNodes = node.getNextNodes();\n\tif (nextNodes != null) {\n\t\tfor (SpiderNode nextNode : nextNodes) {\n\t\t\texecuteNode(node, nextNode, context, variables);\n\t\t}\n\t}\n}", "path": "spider-flow/spider-flow-core/src/main/java/org/spiderflow/core/Spider.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "ssssssss-team/spider-flow", "stars": 8902, "license": "mit", "language": "java", "size": 3382}
{"docstring": "/**\n * Assert that the fake program returned by fakeProgramForTypes has the given list of imports and\n * the given list of spellings. Here, \"spellings\" means the way each type is referenced in the\n * decoded program, for example {@code Timer} if {@code java.util.Timer} can be imported, or\n * {@code java.util.Timer} if not.\n *\n * <p>We construct a fake program that references each of the given types in turn.\n * TypeEncoder.decode doesn't have any real notion of Java syntax, so our program just consists of\n * START and END markers around the {@code `import`} tag, followed by each type in braces, as\n * encoded by TypeEncoder.encode. Once decoded, the program should consist of the appropriate\n * imports (inside START...END) and each type in braces, spelled appropriately.\n *\n * @param fakePackage the package that TypeEncoder should consider the fake program to be in.\n *     Classes in the same package don't usually need to be imported.\n */\n", "func_signal": "private void assertTypeImportsAndSpellings(\n    Set<TypeMirror> types, String fakePackage, List<String> imports, List<String> spellings)", "code": "{\n  String fakeProgram =\n      \"START\\n`import`\\nEND\\n\"\n          + types.stream().map(TypeEncoder::encode).collect(joining(\"}", "path": "auto/value/src/test/java/com/google/auto/value/processor/TypeEncoderTest.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/** Creates a wrapper for lambdas that converts checked exceptions to runtime exceptions. */\n", "func_signal": "public static <I, O> Function<I, O> wrapper(FunctionWithException<I, O> fe)", "code": "{\n  return arg -> {\n    try {\n      return fe.apply(arg);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  };\n}", "path": "auto/value/src/main/java/com/google/auto/value/extension/serializable/serializer/runtime/FunctionWithExceptions.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "// If you have an explicit abstract toString() method, we will implement it.\n", "func_signal": "@Test\npublic void abstractToString()", "code": "{\n  AbstractToString x = AbstractToString.ace(\"ceg\");\n  assertThat(x.toString()).isEqualTo(\"AbstractToString{ace=ceg}\");\n}", "path": "auto/value/src/it/functional/src/test/java/com/google/auto/value/AutoOneOfTest.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Tests that extensions providing their own (annotated) annotation types or options get picked\n * up.\n */\n", "func_signal": "@Test\npublic void extensionsWithAnnotatedOptions()", "code": "{\n  ExtensionWithAnnotatedOptions extension = new ExtensionWithAnnotatedOptions();\n\n  // Ensure default annotation support works\n  assertThat(extension.getSupportedOptions()).contains(CUSTOM_OPTION);\n\n  // Ensure it's carried over to the AutoValue processor\n  assertThat(new AutoValueProcessor(ImmutableList.of(extension)).getSupportedOptions())\n      .contains(CUSTOM_OPTION);\n}", "path": "auto/value/src/test/java/com/google/auto/value/processor/ExtensionTest.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "// This is a regression test for the problem described in\n// https://github.com/google/auto/issues/847#issuecomment-629857642.\n", "func_signal": "@Test\npublic void generatedParentWithGeneratedGetterButSetterInBuilder()", "code": "{\n  JavaFileObject test =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.Test\",\n          \"package foo.bar;\",\n          \"\",\n          \"import com.google.auto.value.AutoValue;\",\n          \"import foo.baz.GeneratedParent;\",\n          \"import foo.baz.GeneratedPropertyType;\",\n          \"import java.util.Optional;\",\n          \"\",\n          \"@AutoValue\",\n          \"public abstract class Test extends GeneratedParent {\",\n          \"  public abstract String string();\",\n          \"\",\n          \"  public static Builder builder() {\",\n          \"    return new AutoValue_Test.Builder();\",\n          \"  }\",\n          \"\",\n          \"  @AutoValue.Builder\",\n          \"  public abstract static class Builder extends GeneratedParent.Builder<Builder> {\",\n          \"    public abstract Builder setString(String x);\",\n          \"    public abstract Builder setGenerated(GeneratedPropertyType x);\",\n          \"    public abstract Test build();\",\n          \"  }\",\n          \"}\");\n  AutoValueProcessor autoValueProcessor = new AutoValueProcessor();\n  GeneratedParentProcessor generatedParentProcessor =\n      new GeneratedParentProcessor(autoValueProcessor, expect);\n  Compilation compilation =\n      javac()\n          .withProcessors(autoValueProcessor, generatedParentProcessor)\n          .withOptions(\"-Xlint:-processing\", \"-implicit:none\")\n          .compile(test);\n  assertThat(compilation).succeededWithoutWarnings();\n  assertThat(compilation)\n      .generatedSourceFile(\"foo.bar.AutoValue_Test\")\n      .contentsAsUtf8String()\n      .contains(\"  public int integer() {\");\n}\n\n@SupportedAnnotationTypes(\"*\")\nprivate static class GeneratedParentProcessor extends AbstractProcessor {\n  private static final String GENERATED_PARENT =\n      String.join(\n          \"\\n\",\n          \"package foo.baz;\",\n          \"\",\n          \"public abstract class GeneratedParent {\",\n          \"  public abstract int integer();\",\n          \"  public abstract GeneratedPropertyType generated();\",\n          \"\",\n          \"  public abstract static class Builder<B extends Builder<B>> {\",\n          \"    public abstract B setInteger(int x);\",\n          \"  }\",\n          \"}\");\n  private static final String GENERATED_PROPERTY_TYPE =\n      String.join(\n          \"\\n\",\n          \"package foo.baz;\",\n          \"\",\n          \"public class GeneratedPropertyType {}\");\n  private static final ImmutableMap<String, String> GENERATED_TYPES =\n      ImmutableMap.of(\n          \"foo.baz.GeneratedParent\", GENERATED_PARENT,\n          \"foo.baz.GeneratedPropertyType\", GENERATED_PROPERTY_TYPE);\n\n  private final AutoValueProcessor autoValueProcessor;\n  private final Expect expect;\n\n  GeneratedParentProcessor(AutoValueProcessor autoValueProcessor, Expect expect) {\n    this.autoValueProcessor = autoValueProcessor;\n    this.expect = expect;\n  }\n\n  private boolean generated;\n\n  @Override\n  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n    if (!generated) {\n      generated = true;\n      // Check that AutoValueProcessor has already run and deferred the foo.bar.Test type because\n      // we haven't generated its parent yet.\n      expect.that(autoValueProcessor.deferredTypeNames()).contains(\"foo.bar.Test\");\n      GENERATED_TYPES.forEach(\n          (typeName, source) -> {\n            try {\n              JavaFileObject generated =\n                  processingEnv\n                      .getFiler()\n                      .createSourceFile(typeName);\n              try (Writer writer = generated.openWriter()) {\n                writer.write(source);\n              }\n            } catch (IOException e) {\n              throw new UncheckedIOException(e);\n            }\n          }\n      );\n    }\n    return false;\n  }\n\n  @Override\n  public SourceVersion getSupportedSourceVersion() {\n    return SourceVersion.latestSupported();\n  }\n}\n\nprivate String sorted(String... imports) {\n   return Arrays.stream(imports).sorted().collect(joining(\"\\n\"));\n }\n}", "path": "auto/value/src/test/java/com/google/auto/value/processor/AutoValueCompilationTest.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "// If a type has a type argument, then casting to the type is unchecked, except if the argument\n// is <?> or <? extends Object>. The same applies to all type arguments, so casting to Map<?, ?>\n// does not produce an unchecked warning for example.\n", "func_signal": "private static boolean uncheckedTypeArgument(TypeMirror arg)", "code": "{\n  if (arg.getKind().equals(TypeKind.WILDCARD)) {\n    WildcardType wildcard = asWildcard(arg);\n    if (wildcard.getExtendsBound() == null || isJavaLangObject(wildcard.getExtendsBound())) {\n      // This is <?>, unless there's a super bound, in which case it is <? super Foo> and\n      // is erased.\n      return (wildcard.getSuperBound() != null);\n    }\n  }\n  return true;\n}", "path": "auto/common/src/main/java/com/google/auto/common/MoreTypes.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Resolves a {@link VariableElement} parameter to a method or constructor based on the given\n * container, or a member of a class. For parameters to a method or constructor, the variable's\n * enclosing element must be a supertype of the container type. For example, given a\n * {@code container} of type {@code Set<String>}, and a variable corresponding to the {@code E e}\n * parameter in the {@code Set.add(E e)} method, this will return a TypeMirror for {@code String}.\n */\n", "func_signal": "public static TypeMirror asMemberOf(Types types, DeclaredType container,\n    VariableElement variable)", "code": "{\n  if (variable.getKind().equals(ElementKind.PARAMETER)) {\n    ExecutableElement methodOrConstructor =\n        MoreElements.asExecutable(variable.getEnclosingElement());\n    ExecutableType resolvedMethodOrConstructor =\n        MoreTypes.asExecutable(types.asMemberOf(container, methodOrConstructor));\n    List<? extends VariableElement> parameters = methodOrConstructor.getParameters();\n    List<? extends TypeMirror> parameterTypes = resolvedMethodOrConstructor.getParameterTypes();\n    checkState(parameters.size() == parameterTypes.size());\n    for (int i = 0; i < parameters.size(); i++) {\n      // We need to capture the parameter type of the variable we're concerned about,\n      // for later printing.  This is the only way to do it since we can't use\n      // types.asMemberOf on variables of methods.\n      if (parameters.get(i).equals(variable)) {\n        return parameterTypes.get(i);\n      }\n    }\n    throw new IllegalStateException(\"Could not find variable: \" + variable);\n  } else {\n    return types.asMemberOf(container, variable);\n  }\n}", "path": "auto/common/src/main/java/com/google/auto/common/MoreTypes.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "// If you have an explicit toString() method, we won't override it.\n", "func_signal": "@Test\npublic void customToString()", "code": "{\n  CustomToString x = CustomToString.ace(\"ceg\");\n  assertThat(x.toString()).isEqualTo(\"blim\");\n}", "path": "auto/value/src/it/functional/src/test/java/com/google/auto/value/AutoOneOfTest.java", "commit_date": "2019-11-21 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Tests behaviour when the package containing an {@code @AutoValue} class also has classes with\n * the same name as classes in {@code java.lang}. If you call a class {@code Object} you are\n * asking for trouble, but you could innocently call a class {@code Compiler} without realizing\n * there is a {@code java.lang.Compiler}.\n *\n * <p>The case where the class in question is mentioned in the {@code @AutoValue} class is the\n * easy one, because then our logic can easily see that there is a clash and will use\n * fully-qualified names. This is the case of the {@code Compiler} class below. The case where the\n * class is <i>not</i> mentioned is harder. We have to realize that we can't elide the package\n * name in {@code java.lang.Object} because there is also a {@code foo.bar.Object} in scope, and\n * in fact it takes precedence.\n */\n", "func_signal": "@Test\npublic void javaLangClash()", "code": "{\n  JavaFileObject object =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.Object\", //\n          \"package foo.bar;\",\n          \"\",\n          \"public class Object {}\");\n  JavaFileObject string =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.String\", //\n          \"package foo.bar;\",\n          \"\",\n          \"public class String {}\");\n  JavaFileObject integer =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.Integer\", //\n          \"package foo.bar;\",\n          \"\",\n          \"public class Integer {}\");\n  JavaFileObject thread =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.Thread\", //\n          \"package foo.bar;\",\n          \"\",\n          \"public class Thread {}\");\n  JavaFileObject override =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.Override\", //\n          \"package foo.bar;\",\n          \"\",\n          \"public class Override {}\");\n  JavaFileObject test =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.Test\",\n          \"package foo.bar;\",\n          \"\",\n          \"import com.google.auto.value.AutoValue;\",\n          \"\",\n          \"@AutoValue\",\n          \"public abstract class Test {\",\n          \"  public abstract java.lang.Integer integer();\",\n          \"  public abstract java.lang.Thread.State state();\",\n          \"  public static Builder builder() {\",\n          \"    return new AutoValue_Test.Builder();\",\n          \"  }\",\n          \"\",\n          \"  @AutoValue.Builder\",\n          \"  public abstract static class Builder {\",\n          \"    public abstract Builder setInteger(java.lang.Integer x);\",\n          \"    public abstract Builder setState(java.lang.Thread.State x);\",\n          \"    public abstract Test build();\",\n          \"  }\",\n          \"}\");\n  Compilation compilation =\n      javac()\n          .withProcessors(new AutoValueProcessor())\n          .withOptions(\"-Xlint:-processing\", \"-implicit:none\")\n          .compile(object, string, integer, thread, override, test);\n  assertThat(compilation).succeededWithoutWarnings();\n}", "path": "auto/value/src/test/java/com/google/auto/value/processor/AutoValueCompilationTest.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "// error message gets converted into assertion failure\n", "func_signal": "private void testErrorType(TypeMirror typeWithError)", "code": "{\n     try {\n       TypeEncoder.encode(typeWithError);\n       processingEnv\n           .getMessager()\n           .printMessage(Diagnostic.Kind.ERROR, \"Expected exception for type: \" + typeWithError);\n     } catch (MissingTypeException expected) {\n     }\n   }", "path": "auto/value/src/test/java/com/google/auto/value/processor/TypeEncoderTest.java", "commit_date": "2020-05-20 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Issue a compilation error. This method does not throw an exception, since we want to continue\n * processing and perhaps report other errors.\n */\n", "func_signal": "@FormatMethod\nprivate void reportError(Element e, String msg, Object... msgParams)", "code": "{\n  String formattedMessage = String.format(msg, msgParams);\n  processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, formattedMessage, e);\n}", "path": "auto/value/src/main/java/com/google/auto/value/processor/AutoAnnotationProcessor.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * We compute a {@code serialVersionUID} for the generated class based on the names and types of\n * the annotation members that the {@code @AutoAnnotation} method defines. These are exactly the\n * names and types of the instance fields in the generated class. So in the common case where the\n * annotation acquires a new member with a default value, if the {@code @AutoAnnotation} method is\n * not changed then the generated class will acquire an implementation of the new member method\n * which just returns the default value. The {@code serialVersionUID} will not change, which makes\n * sense because the instance fields haven't changed, and instances that were serialized before\n * the new member was added should deserialize fine. On the other hand, if you then add a\n * parameter to the {@code @AutoAnnotation} method for the new member, the implementation class\n * will acquire a new instance field, and we will compute a different {@code serialVersionUID}.\n * That's because an instance serialized before that change would not have a value for the new\n * instance field, which would end up zero or null. Users don't expect annotation methods to\n * return null so that would be bad.\n *\n * <p>We could instead add a {@code readObject(ObjectInputStream)} method that would check that\n * all of the instance fields are really present in the deserialized instance, and perhaps\n * replace them with their default values from the annotation if not. That seems a lot more\n * complicated than is justified, though, especially since the instance fields are final and\n * would have to be set in the deserialized object through reflection.\n */\n", "func_signal": "private static long computeSerialVersionUid(\n    ImmutableMap<String, Member> members, ImmutableMap<String, Parameter> parameters)", "code": "{\n  // TypeMirror.toString() isn't fully specified so it could potentially differ between\n  // implementations. Our member.getType() string comes from TypeEncoder and is predictable, but\n  // it includes `...` markers around fully-qualified type names, which are used to handle\n  // imports. So we remove those markers below.\n  String namesAndTypesString =\n      members.entrySet().stream()\n          .filter(e -> parameters.containsKey(e.getKey()))\n          .map(e -> immutableEntry(e.getKey(), e.getValue().getType().replace(\"`\", \"\")))\n          .sorted(comparing(Map.Entry::getKey))\n          .map(e -> e.getKey() + \":\" + e.getValue())\n          .collect(joining(\";\"));\n  return Hashing.murmur3_128().hashUnencodedChars(namesAndTypesString).asLong();\n}", "path": "auto/value/src/main/java/com/google/auto/value/processor/AutoAnnotationProcessor.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Returns a map from the names of members with invariable hashCodes to the values of those\n * hashCodes.\n */\n", "func_signal": "private static ImmutableMap<String, Integer> invariableHashes(\n    ImmutableMap<String, Member> members, ImmutableSet<String> parameters)", "code": "{\n  ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();\n  for (String element : members.keySet()) {\n    if (!parameters.contains(element)) {\n      Member member = members.get(element);\n      AnnotationValue annotationValue = member.method.getDefaultValue();\n      Optional<Integer> invariableHash = invariableHash(annotationValue);\n      if (invariableHash.isPresent()) {\n        builder.put(element, (element.hashCode() * 127) ^ invariableHash.get());\n      }\n    }\n  }\n  return builder.build();\n}", "path": "auto/value/src/main/java/com/google/auto/value/processor/AutoAnnotationProcessor.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Returns the type of the innermost enclosing instance, or null if there is none. This is the\n * same as {@link DeclaredType#getEnclosingType()} except that it returns null rather than\n * NoType for a static type. We need this because of\n * <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=508222\">this bug</a> whereby\n * the Eclipse compiler returns a value for static classes that is not NoType.\n */\n", "func_signal": "private static TypeMirror enclosingType(DeclaredType t)", "code": "{\n  TypeMirror enclosing = t.getEnclosingType();\n  if (enclosing.getKind().equals(TypeKind.NONE)\n      || t.asElement().getModifiers().contains(Modifier.STATIC)) {\n    return null;\n  }\n  return enclosing;\n}", "path": "auto/common/src/main/java/com/google/auto/common/MoreTypes.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Tests that the search for extensions doesn't completely blow AutoValue up if there is a corrupt\n * jar in the {@code processorpath}. If we're not careful, that can lead to a\n * ServiceConfigurationError.\n */\n", "func_signal": "@Test\npublic void testBadJarDoesntBlowUp() throws IOException", "code": "{\n  File badJar = File.createTempFile(\"bogus\", \".jar\");\n  try {\n    doTestBadJarDoesntBlowUp(badJar);\n  } finally {\n    badJar.delete();\n  }\n}", "path": "auto/value/src/test/java/com/google/auto/value/processor/ExtensionTest.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Returns the hashCode of the given AnnotationValue, if that hashCode is guaranteed to be always\n * the same. The hashCode of a String or primitive type never changes. The hashCode of a Class or\n * an enum constant does potentially change in different runs of the same program. The hashCode of\n * an array doesn't change if the hashCodes of its elements don't. Although we could have a\n * similar rule for nested annotation values, we currently don't.\n */\n", "func_signal": "private static Optional<Integer> invariableHash(AnnotationValue annotationValue)", "code": "{\n  Object value = annotationValue.getValue();\n  if (value instanceof String || Primitives.isWrapperType(value.getClass())) {\n    return Optional.of(value.hashCode());\n  } else if (value instanceof List<?>) {\n    @SuppressWarnings(\"unchecked\") // by specification\n    List<? extends AnnotationValue> list = (List<? extends AnnotationValue>) value;\n    return invariableHash(list);\n  } else {\n    return Optional.empty();\n  }\n}", "path": "auto/value/src/main/java/com/google/auto/value/processor/AutoAnnotationProcessor.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Tests that extensions providing their own implemented annotation types or options get picked\n * up.\n */\n", "func_signal": "@Test\npublic void extensionsWithImplementedOptions()", "code": "{\n  ExtensionWithImplementedOptions extension = new ExtensionWithImplementedOptions();\n\n  // Ensure it's carried over to the AutoValue processor\n  assertThat(new AutoValueProcessor(ImmutableList.of(extension)).getSupportedOptions())\n      .contains(CUSTOM_OPTION);\n}", "path": "auto/value/src/test/java/com/google/auto/value/processor/ExtensionTest.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Returns the set of {@linkplain TypeElement types} that are referenced by the given {@link\n * TypeMirror}.\n */\n", "func_signal": "public static ImmutableSet<TypeElement> referencedTypes(TypeMirror type)", "code": "{\n  checkNotNull(type);\n  ImmutableSet.Builder<TypeElement> elements = ImmutableSet.builder();\n  type.accept(ReferencedTypes.INSTANCE, elements);\n  return elements.build();\n}", "path": "auto/common/src/main/java/com/google/auto/common/MoreTypes.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "// Check that we get a helpful error message if some of your properties look like getters but\n// others don't.\n", "func_signal": "@Test\npublic void autoValueBuilderBeansConfusion()", "code": "{\n  JavaFileObject javaFileObject =\n      JavaFileObjects.forSourceLines(\n          \"foo.bar.Item\",\n          \"package foo.bar;\",\n          \"\",\n          \"import com.google.auto.value.AutoValue;\",\n          \"\",\n          \"@AutoValue\",\n          \"public abstract class Item {\",\n          \"  abstract String getTitle();\",\n          \"  abstract boolean hasThumbnail();\",\n          \"\",\n          \"  @AutoValue.Builder\",\n          \"  public interface Builder {\",\n          \"    Builder setTitle(String title);\",\n          \"    Builder setHasThumbnail(boolean t);\",\n          \"    Item build();\",\n          \"  }\",\n          \"}\");\n  Compilation compilation =\n      javac()\n          .withProcessors(new AutoValueProcessor(), new AutoValueBuilderProcessor())\n          .compile(javaFileObject);\n  assertThat(compilation)\n      .hadErrorContaining(\"Method does not correspond to a property of foo.bar.Item\")\n      .inFile(javaFileObject)\n      .onLineContaining(\"Builder setTitle(String title)\");\n  assertThat(compilation)\n      .hadNoteContaining(\"hasThumbnail\")\n      .inFile(javaFileObject)\n      .onLineContaining(\"Builder setTitle(String title)\");\n}", "path": "auto/value/src/test/java/com/google/auto/value/processor/AutoValueCompilationTest.java", "commit_date": "2020-07-28 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * Returns the wrapper types ({@code Integer.class} etc) that are used in collection parameters\n * like {@code List<Integer>}. This is needed because we will emit a helper method for each such\n * type, for example to convert {@code Collection<Integer>} into {@code int[]}.\n */\n", "func_signal": "private ImmutableSet<Class<?>> wrapperTypesUsedInCollections(ExecutableElement method)", "code": "{\n  TypeElement javaUtilCollection = elementUtils.getTypeElement(Collection.class.getName());\n  ImmutableSet.Builder<Class<?>> usedInCollections = ImmutableSet.builder();\n  for (Class<?> wrapper : Primitives.allWrapperTypes()) {\n    DeclaredType collectionOfWrapper =\n        typeUtils.getDeclaredType(javaUtilCollection, getTypeMirror(wrapper));\n    for (VariableElement parameter : method.getParameters()) {\n      if (typeUtils.isAssignable(parameter.asType(), collectionOfWrapper)) {\n        usedInCollections.add(wrapper);\n        break;\n      }\n    }\n  }\n  return usedInCollections.build();\n}", "path": "auto/value/src/main/java/com/google/auto/value/processor/AutoAnnotationProcessor.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "google/auto", "stars": 10330, "license": "apache-2.0", "language": "java", "size": 37820}
{"docstring": "/**\n * The maximum number of active connections.\n *\n * @param poolMaximumActiveConnections\n *          The maximum number of active connections\n */\n", "func_signal": "public void setPoolMaximumActiveConnections(int poolMaximumActiveConnections)", "code": "{\n  this.poolMaximumActiveConnections = poolMaximumActiveConnections;\n  forceCloseAll();\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "// Only handler type\n", "func_signal": "public void register(Class<?> typeHandlerClass)", "code": "{\n  boolean mappedTypeFound = false;\n  MappedTypes mappedTypes = typeHandlerClass.getAnnotation(MappedTypes.class);\n  if (mappedTypes != null) {\n    for (Class<?> javaTypeClass : mappedTypes.value()) {\n      register(javaTypeClass, typeHandlerClass);\n      mappedTypeFound = true;\n    }\n  }\n  if (!mappedTypeFound) {\n    register(getInstance(null, typeHandlerClass));\n  }\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Instantiates a new provider sql source.\n *\n * @param configuration\n *          the configuration\n * @param provider\n *          the provider\n * @param mapperType\n *          the mapper type\n * @param mapperMethod\n *          the mapper method\n * @since 3.5.3\n */\n", "func_signal": "public ProviderSqlSource(Configuration configuration, Annotation provider, Class<?> mapperType, Method mapperMethod)", "code": "{\n  String candidateProviderMethodName;\n  Method candidateProviderMethod = null;\n  try {\n    this.configuration = configuration;\n    this.mapperMethod = mapperMethod;\n    Lang lang = mapperMethod == null ? null : mapperMethod.getAnnotation(Lang.class);\n    this.languageDriver = configuration.getLanguageDriver(lang == null ? null : lang.value());\n    this.providerType = getProviderType(configuration, provider, mapperMethod);\n    candidateProviderMethodName = (String) provider.annotationType().getMethod(\"method\").invoke(provider);\n\n    if (candidateProviderMethodName.length() == 0 && ProviderMethodResolver.class.isAssignableFrom(this.providerType)) {\n      candidateProviderMethod = ((ProviderMethodResolver) this.providerType.getDeclaredConstructor().newInstance())\n          .resolveMethod(new ProviderContext(mapperType, mapperMethod, configuration.getDatabaseId()));\n    }\n    if (candidateProviderMethod == null) {\n      candidateProviderMethodName = candidateProviderMethodName.length() == 0 ? \"provideSql\" : candidateProviderMethodName;\n      for (Method m : this.providerType.getMethods()) {\n        if (candidateProviderMethodName.equals(m.getName()) && CharSequence.class.isAssignableFrom(m.getReturnType())) {\n          if (candidateProviderMethod != null) {\n            throw new BuilderException(\"Error creating SqlSource for SqlProvider. Method '\"\n                + candidateProviderMethodName + \"' is found multiple in SqlProvider '\" + this.providerType.getName()\n                + \"'. Sql provider method can not overload.\");\n          }\n          candidateProviderMethod = m;\n        }\n      }\n    }\n  } catch (BuilderException e) {\n    throw e;\n  } catch (Exception e) {\n    throw new BuilderException(\"Error creating SqlSource for SqlProvider.  Cause: \" + e, e);\n  }\n  if (candidateProviderMethod == null) {\n    throw new BuilderException(\"Error creating SqlSource for SqlProvider. Method '\"\n        + candidateProviderMethodName + \"' not found in SqlProvider '\" + this.providerType.getName() + \"'.\");\n  }\n  this.providerMethod = candidateProviderMethod;\n  this.providerMethodArgumentNames = new ParamNameResolver(configuration, this.providerMethod).getNames();\n  this.providerMethodParameterTypes = this.providerMethod.getParameterTypes();\n\n  ProviderContext candidateProviderContext = null;\n  Integer candidateProviderContextIndex = null;\n  for (int i = 0; i < this.providerMethodParameterTypes.length; i++) {\n    Class<?> parameterType = this.providerMethodParameterTypes[i];\n    if (parameterType == ProviderContext.class) {\n      if (candidateProviderContext != null) {\n        throw new BuilderException(\"Error creating SqlSource for SqlProvider. ProviderContext found multiple in SqlProvider method (\"\n            + this.providerType.getName() + \".\" + providerMethod.getName()\n            + \"). ProviderContext can not define multiple in SqlProvider method argument.\");\n      }\n      candidateProviderContext = new ProviderContext(mapperType, mapperMethod, configuration.getDatabaseId());\n      candidateProviderContextIndex = i;\n    }\n  }\n  this.providerContext = candidateProviderContext;\n  this.providerContextIndex = candidateProviderContextIndex;\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java", "commit_date": "2020-06-06 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Creates a logging version of a Statement.\n *\n * @param stmt\n *          the statement\n * @param statementLog\n *          the statement log\n * @param queryStack\n *          the query stack\n * @return the proxy\n */\n", "func_signal": "public static Statement newInstance(Statement stmt, Log statementLog, int queryStack)", "code": "{\n  InvocationHandler handler = new StatementLogger(stmt, statementLog, queryStack);\n  ClassLoader cl = Statement.class.getClassLoader();\n  return (Statement) Proxy.newProxyInstance(cl, new Class[]{Statement.class}, handler);\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/logging/jdbc/StatementLogger.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Creates a logging version of a PreparedStatement.\n *\n * @param stmt - the statement\n * @param statementLog - the statement log\n * @param queryStack - the query stack\n * @return - the proxy\n */\n", "func_signal": "public static PreparedStatement newInstance(PreparedStatement stmt, Log statementLog, int queryStack)", "code": "{\n  InvocationHandler handler = new PreparedStatementLogger(stmt, statementLog, queryStack);\n  ClassLoader cl = PreparedStatement.class.getClassLoader();\n  return (PreparedStatement) Proxy.newProxyInstance(cl, new Class[]{PreparedStatement.class, CallableStatement.class}, handler);\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/logging/jdbc/PreparedStatementLogger.java", "commit_date": "2019-01-21 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Wrap to a {@link ParamMap} if object is {@link Collection} or array.\n *\n * @param object a parameter object\n * @param actualParamName an actual parameter name\n *                        (If specify a name, set an object to {@link ParamMap} with specified name)\n * @return a {@link ParamMap}\n * @since 3.5.5\n */\n", "func_signal": "public static Object wrapToMapIfCollection(Object object, String actualParamName)", "code": "{\n  if (object instanceof Collection) {\n    ParamMap<Object> map = new ParamMap<>();\n    map.put(\"collection\", object);\n    if (object instanceof List) {\n      map.put(\"list\", object);\n    }\n    Optional.ofNullable(actualParamName).ifPresent(name -> map.put(name, object));\n    return map;\n  } else if (object != null && object.getClass().isArray()) {\n    ParamMap<Object> map = new ParamMap<>();\n    map.put(\"array\", object);\n    Optional.ofNullable(actualParamName).ifPresent(name -> map.put(name, object));\n    return map;\n  }\n  return object;\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java", "commit_date": "2020-03-21 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Closes all active and idle connections in the pool.\n */\n", "func_signal": "public void forceCloseAll()", "code": "{\n  synchronized (state) {\n    expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());\n    for (int i = state.activeConnections.size(); i > 0; i--) {\n      try {\n        PooledConnection conn = state.activeConnections.remove(i - 1);\n        conn.invalidate();\n\n        Connection realConn = conn.getRealConnection();\n        if (!realConn.getAutoCommit()) {\n          realConn.rollback();\n        }\n        realConn.close();\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n    for (int i = state.idleConnections.size(); i > 0; i--) {\n      try {\n        PooledConnection conn = state.idleConnections.remove(i - 1);\n        conn.invalidate();\n\n        Connection realConn = conn.getRealConnection();\n        if (!realConn.getAutoCommit()) {\n          realConn.rollback();\n        }\n        realConn.close();\n      } catch (Exception e) {\n        // ignore\n      }\n    }\n  }\n  if (log.isDebugEnabled()) {\n    log.debug(\"PooledDataSource forcefully closed/removed all connections.\");\n  }\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Determines if the ping query should be used.\n *\n * @param poolPingEnabled\n *          True if we need to check a connection before using it\n */\n", "func_signal": "public void setPoolPingEnabled(boolean poolPingEnabled)", "code": "{\n  this.poolPingEnabled = poolPingEnabled;\n  forceCloseAll();\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Required for InvocationHandler implementation.\n *\n * @param proxy\n *          - not used\n * @param method\n *          - the method to be executed\n * @param args\n *          - the parameters to be passed to the method\n * @see java.lang.reflect.InvocationHandler#invoke(Object, java.lang.reflect.Method, Object[])\n */\n", "func_signal": "@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable", "code": "{\n  String methodName = method.getName();\n  if (CLOSE.equals(methodName)) {\n    dataSource.pushConnection(this);\n    return null;\n  }\n  try {\n    if (!Object.class.equals(method.getDeclaringClass())) {\n      // issue #579 toString() should never fail\n      // throw an SQLException instead of a Runtime\n      checkConnection();\n    }\n    return method.invoke(realConnection, args);\n  } catch (Throwable t) {\n    throw ExceptionUtil.unwrapThrowable(t);\n  }\n\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Constructor for SimplePooledConnection that uses the Connection and PooledDataSource passed in.\n *\n * @param connection\n *          - the connection that is to be presented as a pooled connection\n * @param dataSource\n *          - the dataSource that the connection is from\n */\n", "func_signal": "public PooledConnection(Connection connection, PooledDataSource dataSource)", "code": "{\n  this.hashCode = connection.hashCode();\n  this.realConnection = connection;\n  this.dataSource = dataSource;\n  this.createdTimestamp = System.currentTimeMillis();\n  this.lastUsedTimestamp = System.currentTimeMillis();\n  this.valid = true;\n  this.proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, this);\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "// Construct a handler (used also from Builders)\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T> TypeHandler<T> getInstance(Class<?> javaTypeClass, Class<?> typeHandlerClass)", "code": "{\n  if (javaTypeClass != null) {\n    try {\n      Constructor<?> c = typeHandlerClass.getConstructor(Class.class);\n      return (TypeHandler<T>) c.newInstance(javaTypeClass);\n    } catch (NoSuchMethodException ignored) {\n      // ignored\n    } catch (Exception e) {\n      throw new TypeException(\"Failed invoking constructor for handler \" + typeHandlerClass, e);\n    }\n  }\n  try {\n    Constructor<?> c = typeHandlerClass.getConstructor();\n    return (TypeHandler<T>) c.newInstance();\n  } catch (Exception e) {\n    throw new TypeException(\"Unable to find a usable constructor for \" + typeHandlerClass, e);\n  }\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Sets the default network timeout value to wait for the database operation to complete. See {@link Connection#setNetworkTimeout(java.util.concurrent.Executor, int)}\n *\n * @param milliseconds\n *          The time in milliseconds to wait for the database operation to complete.\n * @since 3.5.2\n */\n", "func_signal": "public void setDefaultNetworkTimeout(Integer milliseconds)", "code": "{\n  dataSource.setDefaultNetworkTimeout(milliseconds);\n  forceCloseAll();\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * The query to be used to check a connection.\n *\n * @param poolPingQuery\n *          The query\n */\n", "func_signal": "public void setPoolPingQuery(String poolPingQuery)", "code": "{\n  this.poolPingQuery = poolPingQuery;\n  forceCloseAll();\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Creates a logging version of a connection.\n *\n * @param conn\n *          the original connection\n * @param statementLog\n *          the statement log\n * @param queryStack\n *          the query stack\n * @return the connection with logging\n */\n", "func_signal": "public static Connection newInstance(Connection conn, Log statementLog, int queryStack)", "code": "{\n  InvocationHandler handler = new ConnectionLogger(conn, statementLog, queryStack);\n  ClassLoader cl = Connection.class.getClassLoader();\n  return (Connection) Proxy.newProxyInstance(cl, new Class[]{Connection.class}, handler);\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/logging/jdbc/ConnectionLogger.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * The annotation that be grouping mapping definitions for property.\n *\n * <p>\n * <b>How to use:</b>\n *\n * <pre>\n * public interface UserMapper {\n *   &#064;Results({\n *     &#064;Result(property = \"id\", column = \"id\", id = true),\n *     &#064;Result(property = \"name\", column = \"name\"),\n *     &#064;Result(property = \"email\" column = \"id\", one = @One(select = \"selectUserEmailById\", fetchType = FetchType.LAZY)),\n *     &#064;Result(property = \"telephoneNumbers\" column = \"id\", many = @Many(select = \"selectAllUserTelephoneNumberById\", fetchType = FetchType.LAZY))\n *   })\n *   &#064;Select(\"SELECT id, name FROM users WHERE id = #{id}\")\n *   User selectById(int id);\n * }\n * </pre>\n *\n * @author Clinton Begin\n */\n", "func_signal": "@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface Results", "code": "{\n  /**\n   * Returns the id of this result map.\n   *\n   * @return the id of this result map\n   */\n  String id() default \"\";\n\n  /**\n   * Returns mapping definitions for property.\n   *\n   * @return mapping definitions\n   */\n  Result[] value() default {};\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/annotations/Results.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * <p>\n * A single non-special parameter is returned without a name.\n * Multiple parameters are named using the naming rule.\n * In addition to the default names, this method also adds the generic names (param1, param2,\n * ...).\n * </p>\n *\n * @param args\n *          the args\n * @return the named params\n */\n", "func_signal": "public Object getNamedParams(Object[] args)", "code": "{\n  final int paramCount = names.size();\n  if (args == null || paramCount == 0) {\n    return null;\n  } else if (!hasParamAnnotation && paramCount == 1) {\n    Object value = args[names.firstKey()];\n    return wrapToMapIfCollection(value, useActualParamName ? names.get(0) : null);\n  } else {\n    final Map<String, Object> param = new ParamMap<>();\n    int i = 0;\n    for (Map.Entry<Integer, String> entry : names.entrySet()) {\n      param.put(entry.getValue(), args[entry.getKey()]);\n      // add generic param names (param1, param2, ...)\n      final String genericParamName = GENERIC_NAME_PREFIX + (i + 1);\n      // ensure not to overwrite parameter named with @Param\n      if (!names.containsValue(genericParamName)) {\n        param.put(genericParamName, args[entry.getKey()]);\n      }\n      i++;\n    }\n    return param;\n  }\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java", "commit_date": "2020-03-21 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * If a connection has not been used in this many milliseconds, ping the\n * database to make sure the connection is still good.\n *\n * @param milliseconds\n *          the number of milliseconds of inactivity that will trigger a ping\n */\n", "func_signal": "public void setPoolPingConnectionsNotUsedFor(int milliseconds)", "code": "{\n  this.poolPingConnectionsNotUsedFor = milliseconds;\n  forceCloseAll();\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * The time to wait before retrying to get a connection.\n *\n * @param poolTimeToWait\n *          The time to wait\n */\n", "func_signal": "public void setPoolTimeToWait(int poolTimeToWait)", "code": "{\n  this.poolTimeToWait = poolTimeToWait;\n  forceCloseAll();\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * The constructor that pass the MyBatis configuration.\n *\n * @param configuration a MyBatis configuration\n * @since 3.5.4\n */\n", "func_signal": "public TypeHandlerRegistry(Configuration configuration)", "code": "{\n  this.unknownTypeHandler = new UnknownTypeHandler(configuration);\n\n  register(Boolean.class, new BooleanTypeHandler());\n  register(boolean.class, new BooleanTypeHandler());\n  register(JdbcType.BOOLEAN, new BooleanTypeHandler());\n  register(JdbcType.BIT, new BooleanTypeHandler());\n\n  register(Byte.class, new ByteTypeHandler());\n  register(byte.class, new ByteTypeHandler());\n  register(JdbcType.TINYINT, new ByteTypeHandler());\n\n  register(Short.class, new ShortTypeHandler());\n  register(short.class, new ShortTypeHandler());\n  register(JdbcType.SMALLINT, new ShortTypeHandler());\n\n  register(Integer.class, new IntegerTypeHandler());\n  register(int.class, new IntegerTypeHandler());\n  register(JdbcType.INTEGER, new IntegerTypeHandler());\n\n  register(Long.class, new LongTypeHandler());\n  register(long.class, new LongTypeHandler());\n\n  register(Float.class, new FloatTypeHandler());\n  register(float.class, new FloatTypeHandler());\n  register(JdbcType.FLOAT, new FloatTypeHandler());\n\n  register(Double.class, new DoubleTypeHandler());\n  register(double.class, new DoubleTypeHandler());\n  register(JdbcType.DOUBLE, new DoubleTypeHandler());\n\n  register(Reader.class, new ClobReaderTypeHandler());\n  register(String.class, new StringTypeHandler());\n  register(String.class, JdbcType.CHAR, new StringTypeHandler());\n  register(String.class, JdbcType.CLOB, new ClobTypeHandler());\n  register(String.class, JdbcType.VARCHAR, new StringTypeHandler());\n  register(String.class, JdbcType.LONGVARCHAR, new StringTypeHandler());\n  register(String.class, JdbcType.NVARCHAR, new NStringTypeHandler());\n  register(String.class, JdbcType.NCHAR, new NStringTypeHandler());\n  register(String.class, JdbcType.NCLOB, new NClobTypeHandler());\n  register(JdbcType.CHAR, new StringTypeHandler());\n  register(JdbcType.VARCHAR, new StringTypeHandler());\n  register(JdbcType.CLOB, new ClobTypeHandler());\n  register(JdbcType.LONGVARCHAR, new StringTypeHandler());\n  register(JdbcType.NVARCHAR, new NStringTypeHandler());\n  register(JdbcType.NCHAR, new NStringTypeHandler());\n  register(JdbcType.NCLOB, new NClobTypeHandler());\n\n  register(Object.class, JdbcType.ARRAY, new ArrayTypeHandler());\n  register(JdbcType.ARRAY, new ArrayTypeHandler());\n\n  register(BigInteger.class, new BigIntegerTypeHandler());\n  register(JdbcType.BIGINT, new LongTypeHandler());\n\n  register(BigDecimal.class, new BigDecimalTypeHandler());\n  register(JdbcType.REAL, new BigDecimalTypeHandler());\n  register(JdbcType.DECIMAL, new BigDecimalTypeHandler());\n  register(JdbcType.NUMERIC, new BigDecimalTypeHandler());\n\n  register(InputStream.class, new BlobInputStreamTypeHandler());\n  register(Byte[].class, new ByteObjectArrayTypeHandler());\n  register(Byte[].class, JdbcType.BLOB, new BlobByteObjectArrayTypeHandler());\n  register(Byte[].class, JdbcType.LONGVARBINARY, new BlobByteObjectArrayTypeHandler());\n  register(byte[].class, new ByteArrayTypeHandler());\n  register(byte[].class, JdbcType.BLOB, new BlobTypeHandler());\n  register(byte[].class, JdbcType.LONGVARBINARY, new BlobTypeHandler());\n  register(JdbcType.LONGVARBINARY, new BlobTypeHandler());\n  register(JdbcType.BLOB, new BlobTypeHandler());\n\n  register(Object.class, unknownTypeHandler);\n  register(Object.class, JdbcType.OTHER, unknownTypeHandler);\n  register(JdbcType.OTHER, unknownTypeHandler);\n\n  register(Date.class, new DateTypeHandler());\n  register(Date.class, JdbcType.DATE, new DateOnlyTypeHandler());\n  register(Date.class, JdbcType.TIME, new TimeOnlyTypeHandler());\n  register(JdbcType.TIMESTAMP, new DateTypeHandler());\n  register(JdbcType.DATE, new DateOnlyTypeHandler());\n  register(JdbcType.TIME, new TimeOnlyTypeHandler());\n\n  register(java.sql.Date.class, new SqlDateTypeHandler());\n  register(java.sql.Time.class, new SqlTimeTypeHandler());\n  register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());\n\n  register(String.class, JdbcType.SQLXML, new SqlxmlTypeHandler());\n\n  register(Instant.class, new InstantTypeHandler());\n  register(LocalDateTime.class, new LocalDateTimeTypeHandler());\n  register(LocalDate.class, new LocalDateTypeHandler());\n  register(LocalTime.class, new LocalTimeTypeHandler());\n  register(OffsetDateTime.class, new OffsetDateTimeTypeHandler());\n  register(OffsetTime.class, new OffsetTimeTypeHandler());\n  register(ZonedDateTime.class, new ZonedDateTimeTypeHandler());\n  register(Month.class, new MonthTypeHandler());\n  register(Year.class, new YearTypeHandler());\n  register(YearMonth.class, new YearMonthTypeHandler());\n  register(JapaneseDate.class, new JapaneseDateTypeHandler());\n\n  // issue #273\n  register(Character.class, new CharacterTypeHandler());\n  register(char.class, new CharacterTypeHandler());\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * The maximum time a connection can be used before it *may* be\n * given away again.\n *\n * @param poolMaximumCheckoutTime\n *          The maximum time\n */\n", "func_signal": "public void setPoolMaximumCheckoutTime(int poolMaximumCheckoutTime)", "code": "{\n  this.poolMaximumCheckoutTime = poolMaximumCheckoutTime;\n  forceCloseAll();\n}", "path": "mybatis-3/src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java", "commit_date": "2020-03-15 00:00:00", "repo_name": "mybatis/mybatis-3", "stars": 19263, "license": "apache-2.0", "language": "java", "size": 144794}
{"docstring": "/**\n * Compute the administrative monitors that are active and should be shown.\n * This is done only when the instance is currently running and the user has the permission to read them.\n *\n * @return the list of active monitors if we should display them, otherwise null.\n */\n", "func_signal": "public Collection<AdministrativeMonitor> getMonitorsToDisplay()", "code": "{\n    if (!Jenkins.get().hasPermission(Jenkins.SYSTEM_READ)) {\n        return null;\n    }\n\n    StaplerRequest req = Stapler.getCurrentRequest();\n\n    if (req == null) {\n        return null;\n    }\n    List<Ancestor> ancestors = req.getAncestors();\n\n    if (ancestors == null || ancestors.size() == 0) {\n        // ???\n        return null;\n    }\n\n    Ancestor a = ancestors.get(ancestors.size() - 1);\n    Object o = a.getObject();\n\n    // don't show while Jenkins is loading\n    if (o instanceof HudsonIsLoading || o instanceof HudsonIsRestarting) {\n        return null;\n    }\n\n    // don't show for some URLs served directly by Jenkins\n    if (o instanceof Jenkins) {\n        String url = a.getRestOfUrl();\n\n        if (ignoredJenkinsRestOfUrls.contains(url)) {\n            return null;\n        }\n    }\n\n    return getAllActiveAdministrativeMonitors();\n}", "path": "jenkins/core/src/main/java/jenkins/management/AdministrativeMonitorsDecorator.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Prevent us to compute multiple times the {@link AdministrativeMonitor#isActivated()} by re-using the same list\n */\n", "func_signal": "private Collection<AdministrativeMonitor> filterActiveAdministrativeMonitors(Collection<AdministrativeMonitor> activeMonitors, boolean isSecurity)", "code": "{\n    Collection<AdministrativeMonitor> active = new ArrayList<>();\n    for (AdministrativeMonitor am : activeMonitors) {\n        if (am.isSecurity() == isSecurity) {\n            active.add(am);\n        }\n    }\n    return active;\n}", "path": "jenkins/core/src/main/java/jenkins/management/AdministrativeMonitorsDecorator.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Save all files containing only unreadable data (no data upgrades), which discards this data.\n * Remove those items from the data map.\n */\n", "func_signal": "@RequirePOST\npublic HttpResponse doDiscard(StaplerRequest req, StaplerResponse rsp)", "code": "{\n    saveAndRemoveEntries( new Predicate<Map.Entry<SaveableReference,VersionRange>>() {\n        @Override\n        public boolean apply(Map.Entry<SaveableReference, VersionRange> entry) {\n            return entry.getValue().max == null;\n        }\n    });\n\n    return HttpResponses.forwardToPreviousPage();\n}", "path": "jenkins/core/src/main/java/hudson/diagnosis/OldDataMonitor.java", "commit_date": "2020-11-06 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * This is where we send the data to the client.\n *\n * <p>\n * If this connection is lost, we'll abort the channel.\n */\n", "func_signal": "public synchronized void download(StaplerRequest req, StaplerResponse rsp) throws InterruptedException, IOException", "code": "{\n    rsp.setStatus(HttpServletResponse.SC_OK);\n\n    // server->client channel.\n    // this is created first, and this controls the lifespan of the channel\n    rsp.addHeader(\"Transfer-Encoding\", \"chunked\");\n    OutputStream out = rsp.getOutputStream();\n    if (DIY_CHUNKING) {\n        out = new ChunkedOutputStream(out);\n    }\n\n    // send something out so that the client will see the HTTP headers\n    out.write(0);\n    out.flush();\n\n    {// wait until we have the other channel\n        long end = System.currentTimeMillis() + CONNECTION_TIMEOUT;\n        while (upload == null && System.currentTimeMillis() < end) {\n            LOGGER.log(Level.FINE, \"Waiting for upload stream for {0}: {1}\", new Object[] {uuid, this});\n            wait(1000);\n        }\n\n        if (upload == null) {\n            throw new IOException(\"HTTP full-duplex channel timeout: \" + uuid);\n        }\n\n        LOGGER.log(Level.FINE, \"Received upload stream {0} for {1}: {2}\", new Object[] {upload, uuid, this});\n    }\n\n    try {\n        run(upload, out);\n    } finally {\n        // publish that we are done\n        completed = true;\n        notify();\n    }\n}", "path": "jenkins/core/src/main/java/jenkins/util/FullDuplexHttpService.java", "commit_date": "2017-09-22 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "// Used by API\n", "func_signal": "public List<AdministrativeMonitor> getSecurityAdministrativeMonitors()", "code": "{\n    Collection<AdministrativeMonitor> allowedMonitors = getMonitorsToDisplay();\n\n    if (allowedMonitors == null) {\n        return Collections.emptyList();\n    }\n\n    return allowedMonitors.stream()\n            .filter(AdministrativeMonitor::isSecurity)\n            .collect(Collectors.toList());\n}", "path": "jenkins/core/src/main/java/jenkins/management/AdministrativeMonitorsDecorator.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Verify we can't rename a node over an existing node.\n */\n", "func_signal": "@Issue(\"JENKINS-31321\")\n@Test\npublic void testProhibitRenameOverExistingNode() throws Exception", "code": "{\n    final String NOTE = \"Rename node to name of another node should fail.\";\n\n    Node nodeA = j.createSlave(\"nodeA\", null, null);\n    Node nodeB = j.createSlave(\"nodeB\", null, null);\n\n    WebClient wc = j.createWebClient()\n            .withThrowExceptionOnFailingStatusCode(false);\n    HtmlForm form = wc.getPage(nodeB, \"configure\").getFormByName(\"config\");\n    form.getInputByName(\"_.name\").setValueAttribute(\"nodeA\");\n\n    Page page = j.submit(form);\n    assertEquals(NOTE, HttpURLConnection.HTTP_BAD_REQUEST, page.getWebResponse().getStatusCode());\n    assertThat(NOTE, page.getWebResponse().getContentAsString(), \n            containsString(\"Agent called \u2018nodeA\u2019 already exists\"));\n}", "path": "jenkins/test/src/test/java/hudson/model/ComputerTest.java", "commit_date": "2020-12-19 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * This is where we receive inputs from the client.\n */\n", "func_signal": "public synchronized void upload(StaplerRequest req, StaplerResponse rsp) throws InterruptedException, IOException", "code": "{\n    rsp.setStatus(HttpServletResponse.SC_OK);\n    InputStream in = req.getInputStream();\n    if (DIY_CHUNKING) {\n        in = new ChunkedInputStream(in);\n    }\n\n    // publish the upload channel\n    upload = in;\n    LOGGER.log(Level.FINE, \"Recording upload stream {0} for {1}: {2}\", new Object[] {upload, uuid, this});\n    notify();\n\n    // wait until we are done\n    while (!completed) {\n        wait();\n    }\n}", "path": "jenkins/core/src/main/java/jenkins/util/FullDuplexHttpService.java", "commit_date": "2017-09-22 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Provisions new {@link Node}s from this cloud.\n *\n * <p>\n * {@link NodeProvisioner} performs a trend analysis on the load,\n * and when it determines that it <b>really</b> needs to bring up\n * additional nodes, this method is invoked.\n *\n * <p>\n * The implementation of this method asynchronously starts\n * node provisioning.\n *\n * @param label\n *      The label that indicates what kind of nodes are needed now.\n *      Newly launched node needs to have this label.\n *      Only those {@link Label}s that this instance returned true\n *      from the {@link #canProvision(Label)} method will be passed here.\n *      This parameter is null if Hudson needs to provision a new {@link Node}\n *      for jobs that don't have any tie to any label.\n * @param excessWorkload\n *      Number of total executors needed to meet the current demand.\n *      Always \u2265 1. For example, if this is 3, the implementation\n *      should launch 3 agents with 1 executor each, or 1 agent with\n *      3 executors, etc.\n * @return\n *      {@link PlannedNode}s that represent asynchronous {@link Node}\n *      provisioning operations. Can be empty but must not be null.\n *      {@link NodeProvisioner} will be responsible for adding the resulting {@link Node}s\n *      into Hudson via {@link jenkins.model.Jenkins#addNode(Node)}, so a {@link Cloud} implementation\n *      just needs to return {@link PlannedNode}s that each contain an object that implements {@link Future}.\n *      When the {@link Future} has completed its work, {@link Future#get} will be called to obtain the\n *      provisioned {@link Node} object.\n * @deprecated Use {@link #provision(CloudState, int)} instead.\n */\n", "func_signal": "@Deprecated\npublic Collection<PlannedNode> provision(Label label, int excessWorkload)", "code": "{\n    return Util.ifOverridden(() -> provision(new CloudState(label, 0), excessWorkload),\n            Cloud.class,\n            getClass(),\n            \"provision\",\n            CloudState.class,\n            int.class);\n}", "path": "jenkins/core/src/main/java/hudson/slaves/Cloud.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Checks the resource collision.\n *\n * @param count\n *      If we are testing W/W conflict, total # of write counts.\n *      For R/W conflict test, this value should be set to {@link Integer#MAX_VALUE}.\n */\n", "func_signal": "public boolean isCollidingWith(Resource that, int count)", "code": "{\n    assert that!=null;\n    for(Resource r=that; r!=null; r=r.parent)\n        if(this.equals(r) && r.numConcurrentWrite<count)\n            return true;\n    for(Resource r=this; r!=null; r=r.parent)\n        if(that.equals(r) && r.numConcurrentWrite<count)\n            return true;\n    return false;\n}", "path": "jenkins/core/src/main/java/hudson/model/Resource.java", "commit_date": "2020-03-26 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n */\n", "func_signal": "@RequirePOST\npublic HttpResponse doAct(StaplerRequest req, StaplerResponse rsp) throws IOException", "code": "{\n    if (req.hasParameter(\"no\")) {\n        disable(true);\n        return HttpResponses.redirectViaContextPath(\"/manage\");\n    } else {\n        return new HttpRedirect(\"manage\");\n    }\n}", "path": "jenkins/core/src/main/java/hudson/diagnosis/OldDataMonitor.java", "commit_date": "2020-11-06 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "// Used by API\n", "func_signal": "public List<AdministrativeMonitor> getNonSecurityAdministrativeMonitors()", "code": "{\n    Collection<AdministrativeMonitor> allowedMonitors = getMonitorsToDisplay();\n\n    if (allowedMonitors == null) {\n        return Collections.emptyList();\n    }\n\n    return allowedMonitors.stream()\n            .filter(administrativeMonitor -> !administrativeMonitor.isSecurity())\n            .collect(Collectors.toList());\n}", "path": "jenkins/core/src/main/java/jenkins/management/AdministrativeMonitorsDecorator.java", "commit_date": "2020-11-26 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Returns true if this cloud is capable of provisioning new nodes for the given label.\n * @deprecated Use {@link #canProvision(CloudState)} instead.\n */\n", "func_signal": "@Deprecated\npublic boolean canProvision(Label label)", "code": "{\n    return Util.ifOverridden(() -> canProvision(new CloudState(label, 0)),\n            Cloud.class,\n            getClass(),\n            \"canProvision\",\n            CloudState.class);\n}", "path": "jenkins/core/src/main/java/hudson/slaves/Cloud.java", "commit_date": "2020-09-25 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Does this version range contain a version more than the given number of releases ago?\n * @param threshold Number of releases\n * @return True if the major version# differs or the minor# differs by \u2265 threshold\n */\n", "func_signal": "public boolean isOld(int threshold)", "code": "{\n    return currentVersion != null && min != null && (currentVersion.getDigitAt(0) > min.getDigitAt(0)\n            || (currentVersion.getDigitAt(0) == min.getDigitAt(0)\n            && currentVersion.getDigitAt(1) - min.getDigitAt(1) >= threshold));\n}", "path": "jenkins/core/src/main/java/hudson/diagnosis/OldDataMonitor.java", "commit_date": "2020-11-06 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Checks the format of the {@code /jenkins/split-plugins.txt} file has maximum 4 columns.\n */\n", "func_signal": "@Test\npublic void checkSplitPluginsFileFormat() throws IOException", "code": "{\n    final List<String> splitPluginsLines = IOUtils.readLines(getClass().getResourceAsStream(\"/jenkins/split-plugins.txt\"), StandardCharsets.UTF_8);\n    assertFalse(splitPluginsLines.isEmpty());\n\n    // File is not only comments\n    final List<String> linesWithoutComments = splitPluginsLines.stream()\n            .filter(line -> !line.startsWith(\"#\")).collect(Collectors.toList());\n    assertFalse( \"weird, split-plugins.txt only has comments?\", linesWithoutComments.isEmpty());\n\n    //\n    assertFalse(\"no whitespaces only lines allowed\" ,linesWithoutComments.stream()\n                        .filter(line -> line.trim().isEmpty())\n                        .anyMatch(line -> !line.isEmpty()));\n\n\n    assertTrue( \"max 4 columns is supported\", linesWithoutComments.stream()\n                       .map(line -> line.split(\" \"))\n                       .noneMatch(line -> line.length > 4));\n}", "path": "jenkins/core/src/test/java/jenkins/plugins/DetachedPluginsUtilTest.java", "commit_date": "2019-10-19 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Filters a descriptor for {@link BuildStep}s by using {@link BuildStepDescriptor#isApplicable(Class)}.\n */\n", "func_signal": "public static <T extends BuildStep&Describable<T>>\nList<Descriptor<T>> filter(List<Descriptor<T>> base, Class<? extends AbstractProject> type)", "code": "{\n    // descriptor of the project\n    Descriptor pd = Jenkins.get().getDescriptor((Class) type);\n\n    List<Descriptor<T>> r = new ArrayList<>(base.size());\n    for (Descriptor<T> d : base) {\n        if (pd instanceof AbstractProjectDescriptor && !((AbstractProjectDescriptor)pd).isApplicable(d))\n            continue;\n\n        if (d instanceof BuildStepDescriptor) {\n            BuildStepDescriptor<T> bd = (BuildStepDescriptor<T>) d;\n            if(!bd.isApplicable(type))  continue;\n            r.add(bd);\n        } else {\n            // old plugins built before 1.150 may not implement BuildStepDescriptor\n            r.add(d);\n        }\n    }\n    return r;\n}", "path": "jenkins/core/src/main/java/hudson/tasks/BuildStepDescriptor.java", "commit_date": "2019-06-27 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Save all or some of the files to persist data in the new forms.\n * Remove those items from the data map.\n */\n", "func_signal": "@RequirePOST\npublic HttpResponse doUpgrade(StaplerRequest req, StaplerResponse rsp)", "code": "{\n    final String thruVerParam = req.getParameter(\"thruVer\");\n    final VersionNumber thruVer = thruVerParam.equals(\"all\") ? null : new VersionNumber(thruVerParam);\n\n    saveAndRemoveEntries(new Predicate<Map.Entry<SaveableReference, VersionRange>>() {\n        @Override\n        public boolean apply(Map.Entry<SaveableReference, VersionRange> entry) {\n            VersionNumber version = entry.getValue().max;\n            return version != null && (thruVer == null || !version.isNewerThan(thruVer));\n        }\n    });\n\n    return HttpResponses.forwardToPreviousPage();\n}", "path": "jenkins/core/src/main/java/hudson/diagnosis/OldDataMonitor.java", "commit_date": "2020-11-06 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "// RunList<Run> is ordered from most to least recent\n", "func_signal": "private void setUpByTimestampRuns()", "code": "{\n\tRun r1 = PowerMockito.mock(Run.class);\n\tRun r2 = PowerMockito.mock(Run.class);\n\n\twhen(r1.getNumber()).thenReturn(1);\n\twhen(r2.getNumber()).thenReturn(2);\n\n\twhen(r1.getTimeInMillis()).thenReturn(200L);\n\twhen(r2.getTimeInMillis()).thenReturn(300L);\n\n\tArrayList<Run> list = new ArrayList<>();\n\tlist.add(r2);\n\tlist.add(r1);\n\n\trlist = RunList.fromRuns(list);\n}", "path": "jenkins/core/src/test/java/hudson/util/RunListTest.java", "commit_date": "2019-10-01 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * {@link JSONObject} databinding should be able to ignore non-existent fields.\n */\n", "func_signal": "@Test\n@Issue(\"JENKINS-15105\")\npublic void databindingShouldIgnoreUnrecognizedJsonProperty()", "code": "{\n    JSONObject o = JSONObject.fromObject(\"{a:1,b:2}\");\n    Foo f = (Foo)JSONObject.toBean(o,Foo.class);\n    assert f.a == 1;\n}", "path": "jenkins/core/src/test/java/jenkins/ResilientJsonObjectTest.java", "commit_date": "2015-01-07 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * Inform monitor that some data in a deprecated format has been loaded,\n * and converted in-memory to a new structure.\n * @param obj Saveable object; calling save() on this object will persist\n *            the data in its new format to disk.\n * @param version Hudson release when the data structure changed.\n */\n", "func_signal": "public static void report(Saveable obj, String version)", "code": "{\n    OldDataMonitor odm = get(Jenkins.get());\n    try {\n        SaveableReference ref = referTo(obj);\n        while (true) {\n            VersionRange vr = odm.data.get(ref);\n            if (vr != null && odm.data.replace(ref, vr, new VersionRange(vr, version, null))) {\n                break;\n            } else if (odm.data.putIfAbsent(ref, new VersionRange(null, version, null)) == null) {\n                break;\n            }\n        }\n    } catch (IllegalArgumentException ex) {\n        LOGGER.log(Level.WARNING, \"Bad parameter given to OldDataMonitor\", ex);\n    }\n}", "path": "jenkins/core/src/main/java/hudson/diagnosis/OldDataMonitor.java", "commit_date": "2020-11-06 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "// JENKINS-46659\n", "func_signal": "@Override\n               public void run()", "code": "{\n                   try {\n                       Thread.sleep(PING_INTERVAL);\n                       while (!connection.complete) {\n                           LOGGER.fine(\"sending ping\");\n                           connection.sendEncoding(Charset.defaultCharset().name()); // no-op at this point\n                           Thread.sleep(PING_INTERVAL);\n                       }\n                   } catch (IOException | InterruptedException x) {\n                       LOGGER.log(Level.WARNING, null, x);\n                   }\n               }", "path": "jenkins/cli/src/main/java/hudson/cli/CLI.java", "commit_date": "2020-12-20 00:00:00", "repo_name": "jenkinsci/jenkins", "stars": 22143, "license": "mit", "language": "java", "size": 156881}
{"docstring": "/**\n * \u67e5\u8be2\u5168\u90e8\u6570\u636e\n * @param filter /\n * @param pageable /\n * @return /\n */\n", "func_signal": "public Map<String,Object> getAll(String filter, Pageable pageable)", "code": "{\n    List<OnlineUserDto> onlineUserDtos = getAll(filter);\n    return PageUtil.toPage(\n            PageUtil.toPage(pageable.getPageNumber(),pageable.getPageSize(), onlineUserDtos),\n            onlineUserDtos.size()\n    );\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/service/OnlineUserService.java", "commit_date": "2020-12-24 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * <p>\n *   \u7528\u4e8e\u5224\u65ad\u662f\u5426\u8fc7\u6ee4\u6570\u636e\u6743\u9650\n *   1\u3001\u5982\u679c\u6ca1\u6709\u7528\u5230 @OneToOne \u8fd9\u79cd\u5173\u8054\u5173\u7cfb\uff0c\u53ea\u9700\u8981\u586b\u5199 fieldName [\u53c2\u8003\uff1aDeptQueryCriteria.class]\n *   2\u3001\u5982\u679c\u7528\u5230\u4e86 @OneToOne \uff0cfieldName \u548c joinName \u90fd\u9700\u8981\u586b\u5199\uff0c\u62ffUserQueryCriteria.class\u4e3e\u4f8b:\n *   \u5e94\u8be5\u662f @DataPermission(joinName = \"dept\", fieldName = \"id\")\n * </p>\n * @author Zheng Jie\n * @website https://el-admin.vip\n * @date 2020-05-07\n **/\n", "func_signal": "@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface DataPermission", "code": "{\n\n    /**\n     * Entity \u4e2d\u7684\u5b57\u6bb5\u540d\u79f0\n     */\n    String fieldName() default \"\";\n\n    /**\n     * Entity \u4e2d\u4e0e\u90e8\u95e8\u5173\u8054\u7684\u5b57\u6bb5\u540d\u79f0\n     */\n    String joinName() default \"\";\n}", "path": "eladmin/eladmin-common/src/main/java/me/zhengjie/annotation/DataPermission.java", "commit_date": "2020-05-29 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n *  \u8bbe\u7f6e redis \u6570\u636e\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\uff0c\u9ed8\u8ba42\u5c0f\u65f6\n *  \u8bbe\u7f6e@cacheable \u5e8f\u5217\u5316\u65b9\u5f0f\n */\n", "func_signal": "@Bean\npublic RedisCacheConfiguration redisCacheConfiguration()", "code": "{\n    FastJsonRedisSerializer<Object> fastJsonRedisSerializer = new FastJsonRedisSerializer<>(Object.class);\n    RedisCacheConfiguration configuration = RedisCacheConfiguration.defaultCacheConfig();\n    configuration = configuration.serializeValuesWith(RedisSerializationContext.\n            SerializationPair.fromSerializer(fastJsonRedisSerializer)).entryTtl(Duration.ofHours(6));\n    return configuration;\n}", "path": "eladmin/eladmin-common/src/main/java/me/zhengjie/config/RedisConfig.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u5bfc\u51fa\n * @param all /\n * @param response /\n * @throws IOException /\n */\n", "func_signal": "public void download(List<OnlineUserDto> all, HttpServletResponse response) throws IOException", "code": "{\n    List<Map<String, Object>> list = new ArrayList<>();\n    for (OnlineUserDto user : all) {\n        Map<String,Object> map = new LinkedHashMap<>();\n        map.put(\"\u7528\u6237\u540d\", user.getUserName());\n        map.put(\"\u90e8\u95e8\", user.getDept());\n        map.put(\"\u767b\u5f55IP\", user.getIp());\n        map.put(\"\u767b\u5f55\u5730\u70b9\", user.getAddress());\n        map.put(\"\u6d4f\u89c8\u5668\", user.getBrowser());\n        map.put(\"\u767b\u5f55\u65e5\u671f\", user.getLoginTime());\n        list.add(map);\n    }\n    FileUtil.downloadExcel(list, response);\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/service/OnlineUserService.java", "commit_date": "2020-12-24 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u67e5\u8be2\u5168\u90e8\u6570\u636e\uff0c\u4e0d\u5206\u9875\n * @param filter /\n * @return /\n */\n", "func_signal": "public List<OnlineUserDto> getAll(String filter)", "code": "{\n    List<String> keys = redisUtils.scan(properties.getOnlineKey() + \"*\");\n    Collections.reverse(keys);\n    List<OnlineUserDto> onlineUserDtos = new ArrayList<>();\n    for (String key : keys) {\n        OnlineUserDto onlineUserDto = (OnlineUserDto) redisUtils.get(key);\n        if(StringUtils.isNotBlank(filter)){\n            if(onlineUserDto.toString().contains(filter)){\n                onlineUserDtos.add(onlineUserDto);\n            }\n        } else {\n            onlineUserDtos.add(onlineUserDto);\n        }\n    }\n    onlineUserDtos.sort((o1, o2) -> o2.getLoginTime().compareTo(o1.getLoginTime()));\n    return onlineUserDtos;\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/service/OnlineUserService.java", "commit_date": "2020-12-24 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u6570\u636e\u6743\u9650\n * @return /\n */\n", "func_signal": "public static List<Long> getCurrentUserDataScope()", "code": "{\n    UserDetails userDetails = getCurrentUser();\n    JSONArray array = JSONUtil.parseArray(new JSONObject(userDetails).get(\"dataScopes\"));\n    return JSONUtil.toList(array,Long.class);\n}", "path": "eladmin/eladmin-common/src/main/java/me/zhengjie/utils/SecurityUtils.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u4fdd\u5b58\u5728\u7ebf\u7528\u6237\u4fe1\u606f\n * @param jwtUserDto /\n * @param token /\n * @param request /\n */\n", "func_signal": "public void save(JwtUserDto jwtUserDto, String token, HttpServletRequest request)", "code": "{\n    String dept = jwtUserDto.getUser().getDept().getName();\n    String ip = StringUtils.getIp(request);\n    String browser = StringUtils.getBrowser(request);\n    String address = StringUtils.getCityInfo(ip);\n    OnlineUserDto onlineUserDto = null;\n    try {\n        onlineUserDto = new OnlineUserDto(jwtUserDto.getUsername(), jwtUserDto.getUser().getNickName(), dept, browser , ip, address, EncryptUtils.desEncrypt(token), new Date());\n    } catch (Exception e) {\n        log.error(e.getMessage(),e);\n    }\n    redisUtils.set(properties.getOnlineKey() + token, onlineUserDto, properties.getTokenValidityInSeconds()/1000);\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/service/OnlineUserService.java", "commit_date": "2020-12-24 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u8e22\u51fa\u7528\u6237\n * @param key /\n */\n", "func_signal": "public void kickOut(String key)", "code": "{\n    key = properties.getOnlineKey() + key;\n    redisUtils.del(key);\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/service/OnlineUserService.java", "commit_date": "2020-12-24 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u9000\u51fa\u767b\u5f55\n * @param token /\n */\n", "func_signal": "public void logout(String token)", "code": "{\n    String key = properties.getOnlineKey() + token;\n    redisUtils.del(key);\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/service/OnlineUserService.java", "commit_date": "2020-12-24 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u8f6c LocalDateTime \uff0c\u5b57\u7b26\u4e32\u683c\u5f0f yyyy-MM-dd\n *\n * @param localDateTime /\n * @return /\n */\n", "func_signal": "public static LocalDateTime parseLocalDateTimeFormat(String localDateTime, String pattern)", "code": "{\n    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n    return LocalDateTime.from(dateTimeFormatter.parse(localDateTime));\n}", "path": "eladmin/eladmin-common/src/main/java/me/zhengjie/utils/DateUtil.java", "commit_date": "2020-06-21 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237\u540d\u5f3a\u9000\u7528\u6237\n * @param username /\n */\n", "func_signal": "@Async\npublic void kickOutForUsername(String username) throws Exception", "code": "{\n    List<OnlineUserDto> onlineUsers = getAll(username);\n    for (OnlineUserDto onlineUser : onlineUsers) {\n        if (onlineUser.getUserName().equals(username)) {\n            String token =EncryptUtils.desDecrypt(onlineUser.getKey());\n            kickOut(token);\n        }\n    }\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/security/service/OnlineUserService.java", "commit_date": "2020-12-24 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u83b7\u53d6\u7cfb\u7edf\u7528\u6237ID\n * @return \u7cfb\u7edf\u7528\u6237ID\n */\n", "func_signal": "public static Long getCurrentUserId()", "code": "{\n    UserDetails userDetails = getCurrentUser();\n    return new JSONObject(new JSONObject(userDetails).get(\"user\")).get(\"id\", Long.class);\n}", "path": "eladmin/eladmin-common/src/main/java/me/zhengjie/utils/SecurityUtils.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u6e05\u7406\u7f13\u5b58\n * @param id /\n */\n", "func_signal": "public void delCaches(Long id, List<User> users)", "code": "{\n    users = CollectionUtil.isEmpty(users) ? userRepository.findByRoleId(id) : users;\n    if (CollectionUtil.isNotEmpty(users)) {\n        users.forEach(item -> userCacheClean.cleanUserCache(item.getUsername()));\n        Set<Long> userIds = users.stream().map(User::getId).collect(Collectors.toSet());\n        redisUtils.delByKeys(CacheKey.DATE_USER, userIds);\n        redisUtils.delByKeys(CacheKey.MENU_USER, userIds);\n        redisUtils.delByKeys(CacheKey.ROLE_AUTH, userIds);\n    }\n    redisUtils.del(CacheKey.ROLE_ID + id);\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/system/service/impl/RoleServiceImpl.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u65e5\u671f \u683c\u5f0f\u5316\n *\n * @param localDateTime /\n * @param patten /\n * @return /\n */\n", "func_signal": "public static String localDateTimeFormat(LocalDateTime localDateTime, String patten)", "code": "{\n    DateTimeFormatter df = DateTimeFormatter.ofPattern(patten);\n    return df.format(localDateTime);\n}", "path": "eladmin/eladmin-common/src/main/java/me/zhengjie/utils/DateUtil.java", "commit_date": "2020-06-21 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u8fde\u63a5\u5efa\u7acb\u6210\u529f\u8c03\u7528\u7684\u65b9\u6cd5\n * */\n", "func_signal": "@OnOpen\npublic void onOpen(Session session,@PathParam(\"sid\") String sid)", "code": "{\n\tthis.session = session;\n\t//\u5982\u679c\u5b58\u5728\u5c31\u5148\u5220\u9664\u4e00\u4e2a\uff0c\u9632\u6b62\u91cd\u590d\u63a8\u9001\u6d88\u606f\n\tfor (WebSocketServer webSocket:webSocketSet) {\n\t\tif (webSocket.sid.equals(sid)) {\n\t\t\twebSocketSet.remove(webSocket);\n\t\t}\n\t}\n\twebSocketSet.add(this);\n\tthis.sid=sid;\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/mnt/websocket/WebSocketServer.java", "commit_date": "2020-06-10 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u6536\u5230\u5ba2\u6237\u7aef\u6d88\u606f\u540e\u8c03\u7528\u7684\u65b9\u6cd5\n * @param message \u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6d88\u606f*/\n", "func_signal": "@OnMessage\npublic void onMessage(String message, Session session)", "code": "{\n\tlog.info(\"\u6536\u5230\u6765\"+sid+\"\u7684\u4fe1\u606f:\"+message);\n\t//\u7fa4\u53d1\u6d88\u606f\n\tfor (WebSocketServer item : webSocketSet) {\n\t\ttry {\n\t\t\titem.sendMessage(message);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(e.getMessage(),e);\n\t\t}\n\t}\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/mnt/websocket/WebSocketServer.java", "commit_date": "2020-06-10 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u83b7\u53d6\u7cfb\u7edf\u7528\u6237\u540d\u79f0\n *\n * @return \u7cfb\u7edf\u7528\u6237\u540d\u79f0\n */\n", "func_signal": "public static String getCurrentUsername()", "code": "{\n    final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n    if (authentication == null) {\n        throw new BadRequestException(HttpStatus.UNAUTHORIZED, \"\u5f53\u524d\u767b\u5f55\u72b6\u6001\u8fc7\u671f\");\n    }\n    if (authentication.getPrincipal() instanceof UserDetails) {\n        UserDetails userDetails = (UserDetails) authentication.getPrincipal();\n        return userDetails.getUsername();\n    }\n    throw new BadRequestException(HttpStatus.UNAUTHORIZED, \"\u627e\u4e0d\u5230\u5f53\u524d\u767b\u5f55\u7684\u4fe1\u606f\");\n}", "path": "eladmin/eladmin-common/src/main/java/me/zhengjie/utils/SecurityUtils.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u6279\u91cf\u6267\u884csql\n * @param connection /\n * @param sqlList /\n */\n", "func_signal": "public static void batchExecute(Connection connection, List<String> sqlList) throws SQLException", "code": "{\n\tStatement st = connection.createStatement();\n\tfor (String sql : sqlList) {\n\t\tif (sql.endsWith(\";\")) {\n\t\t\tsql = sql.substring(0, sql.length() - 1);\n\t\t}\n\t\tst.addBatch(sql);\n\t}\n\tst.executeBatch();\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/mnt/util/SqlUtils.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u83b7\u53d6\u6570\u636e\u6e90\n *\n * @param jdbcUrl /\n * @param userName /\n * @param password /\n * @return DataSource\n */\n", "func_signal": "private static DataSource getDataSource(String jdbcUrl, String userName, String password)", "code": "{\n\tDruidDataSource druidDataSource = new DruidDataSource();\n\tString className;\n\ttry {\n\t\tclassName = DriverManager.getDriver(jdbcUrl.trim()).getClass().getName();\n\t} catch (SQLException e) {\n\t\tthrow new RuntimeException(\"Get class name error: =\" + jdbcUrl);\n\t}\n\tif (StringUtils.isEmpty(className)) {\n\t\tDataTypeEnum dataTypeEnum = DataTypeEnum.urlOf(jdbcUrl);\n\t\tif (null == dataTypeEnum) {\n\t\t\tthrow new RuntimeException(\"Not supported data type: jdbcUrl=\" + jdbcUrl);\n\t\t}\n\t\tdruidDataSource.setDriverClassName(dataTypeEnum.getDriver());\n\t} else {\n\t\tdruidDataSource.setDriverClassName(className);\n\t}\n\n\n\tdruidDataSource.setUrl(jdbcUrl);\n\tdruidDataSource.setUsername(userName);\n\tdruidDataSource.setPassword(password);\n\t// \u914d\u7f6e\u83b7\u53d6\u8fde\u63a5\u7b49\u5f85\u8d85\u65f6\u7684\u65f6\u95f4\n\tdruidDataSource.setMaxWait(3000);\n\t// \u914d\u7f6e\u521d\u59cb\u5316\u5927\u5c0f\u3001\u6700\u5c0f\u3001\u6700\u5927\n\tdruidDataSource.setInitialSize(1);\n\tdruidDataSource.setMinIdle(1);\n\tdruidDataSource.setMaxActive(1);\n\n\t// \u5982\u679c\u94fe\u63a5\u51fa\u73b0\u5f02\u5e38\u5219\u76f4\u63a5\u5224\u5b9a\u4e3a\u5931\u8d25\u800c\u4e0d\u662f\u4e00\u76f4\u91cd\u8bd5\n\tdruidDataSource.setBreakAfterAcquireFailure(true);\n\ttry {\n\t\tdruidDataSource.init();\n\t} catch (SQLException e) {\n\t\tlog.error(\"Exception during pool initialization\", e);\n\t\tthrow new RuntimeException(e.getMessage());\n\t}\n\n\treturn druidDataSource;\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/mnt/util/SqlUtils.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "/**\n * \u5c06\u6587\u4ef6\u4e2d\u7684sql\u8bed\u53e5\u4ee5\uff1b\u4e3a\u5355\u4f4d\u8bfb\u53d6\u5230\u5217\u8868\u4e2d\n * @param sqlFile /\n * @return /\n * @throws Exception e\n */\n", "func_signal": "private static List<String> readSqlList(File sqlFile) throws Exception", "code": "{\n\tList<String> sqlList = Lists.newArrayList();\n\tStringBuilder sb = new StringBuilder();\n\ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\tnew FileInputStream(sqlFile), StandardCharsets.UTF_8))) {\n\t\tString tmp;\n\t\twhile ((tmp = reader.readLine()) != null) {\n\t\t\tlog.info(\"line:{}\", tmp);\n\t\t\tif (tmp.endsWith(\";\")) {\n\t\t\t\tsb.append(tmp);\n\t\t\t\tsqlList.add(sb.toString());\n\t\t\t\tsb.delete(0, sb.length());\n\t\t\t} else {\n\t\t\t\tsb.append(tmp);\n\t\t\t}\n\t\t}\n\t\tif (!\"\".endsWith(sb.toString().trim())) {\n\t\t\tsqlList.add(sb.toString());\n\t\t}\n\t}\n\n\treturn sqlList;\n}", "path": "eladmin/eladmin-system/src/main/java/me/zhengjie/modules/mnt/util/SqlUtils.java", "commit_date": "2020-11-15 00:00:00", "repo_name": "elunez/eladmin", "stars": 20611, "license": "apache-2.0", "language": "java", "size": 7153}
{"docstring": "// ==================== RabbitMQ \u76f8\u5173 ====================\n", "func_signal": "@Bean\npublic SpringRabbitTracing springRabbitTracing(Tracing tracing)", "code": "{\n    return SpringRabbitTracing.newBuilder(tracing)\n            .remoteServiceName(\"demo-mq-rabbit\") // \u8fdc\u7a0b RabbitMQ \u670d\u52a1\u540d\uff0c\u53ef\u81ea\u5b9a\u4e49\n            .build();\n}", "path": "SpringBoot-Labs/lab-40/lab-40-rabbitmq/src/main/java/cn/iocoder/springboot/lab40/zipkindemo/config/ZipkinConfiguration.java", "commit_date": "2020-01-08 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// ==================== Redis \u76f8\u5173 ====================\n", "func_signal": "@Bean\npublic RedisConnectionFactory redisConnectionFactory(Tracer tracer, RedisProperties redisProperties)", "code": "{\n    // \u521b\u5efa JedisConnectionFactory \u5bf9\u8c61\n    RedisConnectionFactory connectionFactory = new JedisConnectionFactory();\n    // \u521b\u5efa TracingConfiguration \u5bf9\u8c61\n    TracingConfiguration tracingConfiguration = new TracingConfiguration.Builder(tracer)\n            // \u8bbe\u7f6e\u62d3\u5c55 Tag \uff0c\u8bbe\u7f6e Redis \u670d\u52a1\u5668\u5730\u5740\u3002\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u5728\u64cd\u4f5c Redis \u94fe\u8def\u7684 Span \u4e0a\u8bb0\u5f55 Redis \u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6e\u3002\n            .extensionTag(\"Server Address\", redisProperties.getHost() + \":\" + redisProperties.getPort())\n            .build();\n    // \u521b\u5efa TracingRedisConnectionFactory \u5bf9\u8c61\n    return new TracingRedisConnectionFactory(connectionFactory, tracingConfiguration);\n}", "path": "SpringBoot-Labs/labx-13/labx-13-sc-sleuth-db-redis/src/main/java/cn/iocoder/springcloud/labx13/springmvcdemo/config/SleuthConfiguration.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u521b\u5efa Dead Queue\n", "func_signal": "@Bean\npublic Queue demo07DeadQueue()", "code": "{\n    return new Queue(Demo07Message.DEAD_QUEUE, // Queue \u540d\u5b57\n            true, // durable: \u662f\u5426\u6301\u4e45\u5316\n            false, // exclusive: \u662f\u5426\u6392\u5b83\n            false); // autoDelete: \u662f\u5426\u81ea\u52a8\u5220\u9664\n}", "path": "SpringBoot-Labs/lab-04-rabbitmq/lab-04-rabbitmq-consume-retry/src/main/java/cn/iocoder/springboot/lab04/rabbitmqdemo/config/RabbitConfig.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u6839\u636e ID \u7f16\u53f7\u6570\u7ec4\uff0c\u67e5\u8be2\u591a\u6761\u8bb0\u5f55\n", "func_signal": "public void testSelectByIds()", "code": "{\n       Iterable<UserDO> users = userRepository.findAllById(Arrays.asList(1, 4));\n       users.forEach(System.out::println);\n   }", "path": "SpringBoot-Labs/lab-13-spring-data-jpa/lab-13-jpa/src/test/java/cn/iocoder/springboot/lab13/jpa/repository/UserRepository01Test.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u63d2\u5165\u4e00\u6761\u8bb0\u5f55\n", "func_signal": "public void testSave()", "code": "{\n       UserDO user = new UserDO().setUsername(UUID.randomUUID().toString())\n               .setPassword(\"nicai\").setCreateTime(new Date());\n       userRepository.save(user);\n   }", "path": "SpringBoot-Labs/lab-13-spring-data-jpa/lab-13-jpa/src/test/java/cn/iocoder/springboot/lab13/jpa/repository/UserRepository01Test.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "//    @CrossOrigin(allowCredentials = \"false\") // \u5141\u8bb8\u6240\u6709\u6765\u6e90\uff0c\u4e0d\u5141\u8bb8\u53d1\u9001 Cookie\n", "func_signal": "public Mono<UserVO> get()", "code": "{\n        // \u67e5\u8be2\u7528\u6237\n        UserVO user =  new UserVO().setId(1).setUsername(UUID.randomUUID().toString());\n        // \u8fd4\u56de\n        return Mono.just(user);\n    }", "path": "SpringBoot-Labs/lab-27/lab-27-webflux-02/src/main/java/cn/iocoder/springboot/lab27/springwebflux/controller2/TestController.java", "commit_date": "2019-11-25 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u4e3a\u4e86\u65b9\u4fbf\u6d4b\u8bd5\uff0c\u5b9e\u9645\u4f7f\u7528 @PostMapping\n", "func_signal": "public Integer add(@RequestParam(\"name\") String name,\n                      @RequestParam(\"gender\") Integer gender)", "code": "{\n       UserAddDTO addDTO = new UserAddDTO().setName(name).setGender(gender);\n       return userRpcService.add(addDTO);\n   }", "path": "SpringBoot-Labs/lab-63/lab-63-motan-xml-demo/lab-63-motan-xml-demo-user-rpc-service-consumer/src/main/java/cn/iocoder/springboot/lab63/rpc/controller/UserController.java", "commit_date": "2020-06-10 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "/**\n * \u6dfb\u52a0\u7528\u6237\n *\n * @param addDTO \u6dfb\u52a0\u7528\u6237\u4fe1\u606f DTO\n * @return \u6dfb\u52a0\u6210\u529f\u7684\u7528\u6237\u7f16\u53f7\n */\n", "func_signal": "@PostMapping(\"add\")\n@Transactional\npublic Mono<Integer> add(UserAddDTO addDTO)", "code": "{\n    // \u67e5\u8be2\u7528\u6237\n    Mono<UserDO> user = userRepository.findByUsername(addDTO.getUsername());\n\n    // \u6267\u884c\u63d2\u5165\n    return user.defaultIfEmpty(USER_NULL) // \u8bbe\u7f6e USER_NULL \u4f5c\u4e3a null \u7684\u60c5\u51b5\uff0c\u5426\u5219 flatMap \u4e0d\u4f1a\u5f80\u4e0b\u8d70\n            .flatMap(new Function<UserDO, Mono<Integer>>() {\n\n                @Override\n                public Mono<Integer> apply(UserDO userDO) {\n                    if (userDO != USER_NULL) {\n                        // \u8fd4\u56de -1 \u8868\u793a\u63d2\u5165\u5931\u8d25\u3002\n                        // \u5b9e\u9645\u4e0a\uff0c\u4e00\u822c\u662f\u629b\u51fa ServiceException \u5f02\u5e38\u3002\u56e0\u4e3a\u8fd9\u4e2a\u793a\u4f8b\u9879\u76ee\u91cc\u6682\u65f6\u6ca1\u505a\u5168\u5c40\u5f02\u5e38\u7684\u5b9a\u4e49\uff0c\u6240\u4ee5\u6682\u65f6\u8fd4\u56de -1 \u5566\n                        return Mono.just(-1);\n                    }\n                    // \u5c06 addDTO \u8f6c\u6210 UserDO\n                    userDO = new UserDO()\n                            .setUsername(addDTO.getUsername())\n                            .setPassword(addDTO.getPassword())\n                            .setCreateTime(new Date());\n                    // \u63d2\u5165\u6570\u636e\u5e93\n                    return userRepository.save(userDO).flatMap(new Function<UserDO, Mono<Integer>>() {\n                        @Override\n                        public Mono<Integer> apply(UserDO userDO) {\n                            // \u5982\u679c\u7f16\u53f7\u4e3a\u5076\u6570\uff0c\u629b\u51fa\u5f02\u5e38\u3002\n                            if (userDO.getId() % 2 == 0) {\n                                throw new RuntimeException(\"\u6211\u5c31\u662f\u6545\u610f\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u6d4b\u8bd5\u4e0b\u4e8b\u52a1\u56de\u6eda\");\n                            }\n\n                            // \u8fd4\u56de\u7f16\u53f7\n                            return Mono.just(userDO.getId());\n                        }\n                    });\n                }\n\n            });\n}", "path": "SpringBoot-Labs/lab-27/lab-27-webflux-r2dbc/src/main/java/cn/iocoder/springboot/lab27/springwebflux/controller/UserController.java", "commit_date": "2019-11-26 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "/**\n * Creates a new {@link ClusterNodes} by parsing the given source.\n *\n * @param source must not be {@literal null} or empty.\n */\n", "func_signal": "private ClusterNodes(String source)", "code": "{\n\n    Assert.hasText(source, \"Cluster nodes source must not be null or empty!\");\n\n    String[] nodes = StringUtils.delimitedListToStringArray(source, COMMA);\n\n    this.clusterNodes = Arrays.stream(nodes).map(node -> {\n\n        String[] segments = StringUtils.delimitedListToStringArray(node, COLON);\n\n        Assert.isTrue(segments.length == 2,\n                () -> String.format(\"Invalid cluster node %s in %s! Must be in the format host:port!\", node, source));\n\n        String host = segments[0].trim();\n        String port = segments[1].trim();\n\n        Assert.hasText(host, () -> String.format(\"No host name given cluster node %s!\", node));\n        Assert.hasText(port, () -> String.format(\"No port given in cluster node %s!\", node));\n\n        return new TransportAddress(toInetAddress(host), Integer.valueOf(port));\n\n    }).collect(Collectors.toList());\n}", "path": "SpringBoot-Labs/labx-13/labx-13-sc-sleuth-db-elasticsearch/src/main/java/cn/iocoder/springcloud/labx13/springmvcdemo/spring/ClusterNodes.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u66f4\u65b0\u4e00\u6761\u8bb0\u5f55\n", "func_signal": "public void testUpdate()", "code": "{\n       // \u5148\u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\n       Optional<UserDO> userDO = userRepository.findById(1);\n       Assert.isTrue(userDO.isPresent(), \"\u8bb0\u5f55\u4e0d\u80fd\u4e3a\u7a7a\");\n       // \u66f4\u65b0\u4e00\u6761\u8bb0\u5f55\n       UserDO updateUser = userDO.get();\n       updateUser.setPassword(\"yudaoyuanma\");\n       userRepository.save(updateUser);\n   }", "path": "SpringBoot-Labs/lab-13-spring-data-jpa/lab-13-jpa/src/test/java/cn/iocoder/springboot/lab13/jpa/repository/UserRepository01Test.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u5f00\u542f\u65b0\u4e8b\u7269\n", "func_signal": "public void reduceStock(Long productId, Integer amount) throws Exception", "code": "{\n       logger.info(\"[reduceStock] \u5f53\u524d XID: {}\", RootContext.getXID());\n\n       // \u68c0\u67e5\u5e93\u5b58\n       checkStock(productId, amount);\n\n       logger.info(\"[reduceStock] \u5f00\u59cb\u6263\u51cf {} \u5e93\u5b58\", productId);\n       // \u6263\u51cf\u5e93\u5b58\n       int updateCount = productDao.reduceStock(productId, amount);\n       // \u6263\u9664\u6210\u529f\n       if (updateCount == 0) {\n           logger.warn(\"[reduceStock] \u6263\u9664 {} \u5e93\u5b58\u5931\u8d25\", productId);\n           throw new Exception(\"\u5e93\u5b58\u4e0d\u8db3\");\n       }\n       // \u6263\u9664\u5931\u8d25\n       logger.info(\"[reduceStock] \u6263\u9664 {} \u5e93\u5b58\u6210\u529f\", productId);\n   }", "path": "SpringBoot-Labs/labx-17/labx-17-sc-seata-at-feign-demo/labx-17-sc-seata-at-feign-demo-product-service/src/main/java/cn/iocoder/springcloud/labx17/productservice/service/impl/ProductServiceImpl.java", "commit_date": "2020-04-06 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u521b\u5efa Queue\n", "func_signal": "@Bean\npublic Queue demo07Queue()", "code": "{\n    return QueueBuilder.durable(Demo07Message.QUEUE) // durable: \u662f\u5426\u6301\u4e45\u5316\n            .exclusive() // exclusive: \u662f\u5426\u6392\u5b83\n            .autoDelete() // autoDelete: \u662f\u5426\u81ea\u52a8\u5220\u9664\n            .deadLetterExchange(Demo07Message.EXCHANGE)\n            .deadLetterRoutingKey(Demo07Message.DEAD_ROUTING_KEY)\n            .build();\n}", "path": "SpringBoot-Labs/lab-04-rabbitmq/lab-04-rabbitmq-consume-retry/src/main/java/cn/iocoder/springboot/lab04/rabbitmqdemo/config/RabbitConfig.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u6839\u636e\u540d\u5b57\u83b7\u5f97\u4e00\u6761\u8bb0\u5f55\n", "func_signal": "public void testFindByName()", "code": "{\n       ESProductDO product = productRepository.findByName(\"\u828b\u9053\u6e90\u7801\");\n       System.out.println(product);\n   }", "path": "SpringBoot-Labs/lab-15-spring-data-es/lab-15-spring-data-jest/src/test/java/cn/iocoder/springboot/lab15/springdatajest/repository/ProductRepository02Test.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// URL \u4fee\u6539\u6210 /delete \uff0cRequestMethod \u6539\u6210 DELETE\n", "func_signal": "public Mono<Boolean> delete(@RequestParam(\"id\") Integer id)", "code": "{\n       // \u67e5\u8be2\u7528\u6237\n       Mono<UserDO> user = userRepository.findById(id);\n\n       // \u6267\u884c\u5220\u9664\u3002\u8fd9\u91cc\u4ec5\u4ec5\u662f\u793a\u4f8b\uff0c\u9879\u76ee\u4e2d\u4e0d\u8981\u7269\u7406\u5220\u9664\uff0c\u800c\u662f\u6807\u8bb0\u5220\u9664\n       return user.defaultIfEmpty(USER_NULL) // \u8bbe\u7f6e USER_NULL \u4f5c\u4e3a null \u7684\u60c5\u51b5\uff0c\u5426\u5219 flatMap \u4e0d\u4f1a\u5f80\u4e0b\u8d70\n               .flatMap(new Function<UserDO, Mono<Boolean>>() {\n\n                   @Override\n                   public Mono<Boolean> apply(UserDO userDO) {\n                       // \u5982\u679c\u4e0d\u5b58\u5728\u8be5\u7528\u6237\uff0c\u5219\u76f4\u63a5\u8fd4\u56de false \u5931\u8d25\n                       if (userDO == USER_NULL) {\n                           return Mono.just(false);\n                       }\n                       // \u6267\u884c\u5220\u9664\n                       return userRepository.deleteById(id).map(aVoid -> true); // \u8fd4\u56de true \u6210\u529f\n                   }\n\n               });\n   }", "path": "SpringBoot-Labs/lab-27/lab-27-webflux-r2dbc/src/main/java/cn/iocoder/springboot/lab27/springwebflux/controller/UserController.java", "commit_date": "2019-11-26 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "/**\n * \u4e3a\u4e86\u7ed9\u5206\u9875\u5236\u9020\u4e00\u70b9\u6570\u636e\n */\n", "func_signal": "private void testInsert()", "code": "{\n    for (int i = 1; i <= 100; i++) {\n        ESProductDO product = new ESProductDO();\n        product.setId(i); // \u4e00\u822c ES \u7684 ID \u7f16\u53f7\uff0c\u4f7f\u7528 DB \u6570\u636e\u5bf9\u5e94\u7684\u7f16\u53f7\u3002\u8fd9\u91cc\uff0c\u5148\u5199\u6b7b\n        product.setName(\"\u828b\u9053\u6e90\u7801\uff1a\" + i);\n        product.setSellPoint(\"\u613f\u534a\u751f\u7f16\u7801\uff0c\u5982\u4e00\u751f\u8001\u53cb\");\n        product.setDescription(\"\u6211\u53ea\u662f\u4e00\u4e2a\u63cf\u8ff0\");\n        product.setCid(1);\n        product.setCategoryName(\"\u6280\u672f\");\n        productRepository.save(product);\n    }\n}", "path": "SpringBoot-Labs/lab-15-spring-data-es/lab-15-spring-data-jest/src/test/java/cn/iocoder/springboot/lab15/springdatajest/repository/ProductRepository02Test.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u521b\u5efa Direct Exchange\n", "func_signal": "@Bean\npublic DirectExchange demo07Exchange()", "code": "{\n    return new DirectExchange(Demo07Message.EXCHANGE,\n            true,  // durable: \u662f\u5426\u6301\u4e45\u5316\n            false);  // exclusive: \u662f\u5426\u6392\u5b83\n}", "path": "SpringBoot-Labs/lab-04-rabbitmq/lab-04-rabbitmq-consume-retry/src/main/java/cn/iocoder/springboot/lab04/rabbitmqdemo/config/RabbitConfig.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// ==================== Elasticsearch \u76f8\u5173 ====================\n", "func_signal": "@Bean\npublic TransportClient elasticsearchClient(Tracer tracer, ElasticsearchProperties elasticsearchProperties) throws Exception", "code": "{\n    // \u521b\u5efa TracingTransportClientFactoryBean \u5bf9\u8c61\n    TracingTransportClientFactoryBean factory = new TracingTransportClientFactoryBean(tracer);\n    // \u8bbe\u7f6e\u5176\u5c5e\u6027\n    factory.setClusterNodes(elasticsearchProperties.getClusterNodes());\n    factory.setProperties(this.createElasticsearch(elasticsearchProperties));\n    // \u521b\u5efa TransportClient \u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\n    factory.afterPropertiesSet();\n    return factory.getObject();\n}", "path": "SpringBoot-Labs/labx-13/labx-13-sc-sleuth-db-elasticsearch/src/main/java/cn/iocoder/springcloud/labx13/springmvcdemo/config/SleuthConfiguration.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u6839\u636e ID \u7f16\u53f7\uff0c\u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\n", "func_signal": "public void testSelectById()", "code": "{\n       Optional<UserDO> userDO = userRepository.findById(1);\n       System.out.println(userDO.get());\n   }", "path": "SpringBoot-Labs/lab-13-spring-data-jpa/lab-13-jpa/src/test/java/cn/iocoder/springboot/lab13/jpa/repository/UserRepository01Test.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u4f7f\u7528 name \u6a21\u7cca\u67e5\u8be2\uff0c\u5206\u9875\u8fd4\u56de\u7ed3\u679c\n", "func_signal": "public void testFindByNameLike()", "code": "{\n       // \u6839\u636e\u60c5\u51b5\uff0c\u662f\u5426\u8981\u5236\u9020\u6d4b\u8bd5\u6570\u636e\n       if (true) {\n           testInsert();\n       }\n\n       // \u521b\u5efa\u6392\u5e8f\u6761\u4ef6\n       Sort sort = new Sort(Sort.Direction.DESC, \"id\"); // ID \u5012\u5e8f\n       // \u521b\u5efa\u5206\u9875\u6761\u4ef6\u3002\n       Pageable pageable = PageRequest.of(0, 10, sort);\n       // \u6267\u884c\u5206\u9875\u64cd\u4f5c\n       Page<ESProductDO> page = productRepository.findByNameLike(\"\u828b\u9053\", pageable);\n       // \u6253\u5370\n       System.out.println(page.getTotalElements());\n       System.out.println(page.getTotalPages());\n   }", "path": "SpringBoot-Labs/lab-15-spring-data-es/lab-15-spring-data-jest/src/test/java/cn/iocoder/springboot/lab15/springdatajest/repository/ProductRepository02Test.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "// \u5c06 ConstraintViolationException \u8f6c\u6362\u6210 ServiceException\n", "func_signal": "private ServiceException handleConstraintViolationException(ConstraintViolationException ex)", "code": "{\n    // \u62fc\u63a5\u9519\u8bef\n    StringBuilder detailMessage = new StringBuilder();\n    for (ConstraintViolation<?> constraintViolation : ex.getConstraintViolations()) {\n        // \u4f7f\u7528 ; \u5206\u9694\u591a\u4e2a\u9519\u8bef\n        if (detailMessage.length() > 0) {\n            detailMessage.append(\";\");\n        }\n        // \u62fc\u63a5\u5185\u5bb9\u5230\u5176\u4e2d\n        detailMessage.append(constraintViolation.getMessage());\n    }\n    // \u8fd4\u56de\u5f02\u5e38\n    return new ServiceException(ServiceExceptionEnum.INVALID_REQUEST_PARAM_ERROR, detailMessage.toString());\n}", "path": "SpringBoot-Labs/labx-07-spring-cloud-alibaba-dubbo/labx-07-sca-dubbo-demo04-filter/labx-07-sca-dubbo-demo04-provider/src/main/java/cn/iocoder/springcloudalibaba/labx7/providerdemo/filter/DubboExceptionFilter.java", "commit_date": "2020-06-28 00:00:00", "repo_name": "yudaocode/SpringBoot-Labs", "stars": 18187, "license": "None", "language": "java", "size": 1813}
{"docstring": "/**\n * Returns <tt>true</tt> if this map maps one or more keys to the\n * specified value. Note: This method requires a full internal\n * traversal of the hash table, and so is much slower than\n * method <tt>containsKey</tt>.\n *\n * @param value value whose presence in this map is to be tested\n * @return <tt>true</tt> if this map maps one or more keys to the\n *         specified value\n * @throws NullPointerException if the specified value is null\n */\n", "func_signal": "public boolean containsValue(Object value)", "code": "{\n    if (value == null)\n        throw new NullPointerException();\n\n    // See explanation of modCount use above\n\n    final Segment<K,V>[] segments = this.segments;\n    int[] mc = new int[segments.length];\n\n    // Try a few times without locking\n    for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) {\n        int sum = 0;\n        int mcsum = 0;\n        for (int i = 0; i < segments.length; ++i) {\n            int c = segments[i].count;\n            mcsum += mc[i] = segments[i].modCount;\n            if (segments[i].containsValue(value))\n                return true;\n        }\n        boolean cleanSweep = true;\n        if (mcsum != 0) {\n            for (int i = 0; i < segments.length; ++i) {\n                int c = segments[i].count;\n                if (mc[i] != segments[i].modCount) {\n                    cleanSweep = false;\n                    break;\n                }\n            }\n        }\n        if (cleanSweep)\n            return false;\n    }\n    // Resort to locking all segments\n    for (int i = 0; i < segments.length; ++i)\n        segments[i].lock();\n    boolean found = false;\n    try {\n        for (int i = 0; i < segments.length; ++i) {\n            if (segments[i].containsValue(value)) {\n                found = true;\n                break;\n            }\n        }\n    } finally {\n        for (int i = 0; i < segments.length; ++i)\n            segments[i].unlock();\n    }\n    return found;\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Applies a supplemental hash function to a given hashCode, which\n * defends against poor quality hash functions.  This is critical\n * because ConcurrentWeakHashMap uses power-of-two length hash tables,\n * that otherwise encounter collisions for hashCodes that do not\n * differ in lower or upper bits.\n */\n", "func_signal": "private static int hash(int h)", "code": "{\n    // Spread bits to regularize both segment and index locations,\n    // using variant of single-word Wang/Jenkins hash.\n    h += (h <<  15) ^ 0xffffcd7d;\n    h ^= (h >>> 10);\n    h += (h <<   3);\n    h ^= (h >>>  6);\n    h += (h <<   2) + (h << 14);\n    return h ^ (h >>> 16);\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // SUCCESS\n      return SUCCESS;\n    case 2: // MESSAGE\n      return MESSAGE;\n    default:\n      return null;\n  }\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TResult.java", "commit_date": "2017-04-17 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 2: // SAMPLED_NEW_COUNT\n      return SAMPLED_NEW_COUNT;\n    case 3: // SAMPLED_CONTINUATION_COUNT\n      return SAMPLED_CONTINUATION_COUNT;\n    case 4: // UNSAMPLED_NEW_COUNT\n      return UNSAMPLED_NEW_COUNT;\n    case 5: // UNSAMPLED_CONTINUATION_COUNT\n      return UNSAMPLED_CONTINUATION_COUNT;\n    case 6: // SKIPPED_NEW_COUNT\n      return SKIPPED_NEW_COUNT;\n    case 7: // SKIPPED_CONTINUATION_COUNT\n      return SKIPPED_CONTINUATION_COUNT;\n    default:\n      return null;\n  }\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TTransaction.java", "commit_date": "2019-08-09 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "// BEFORE\n", "func_signal": "@Override\npublic AsyncContext getAsyncContext(Object target, Object[] args)", "code": "{\n    if (validate(args)) {\n        return AsyncContextAccessorUtils.getAsyncContext(args[0]);\n    }\n    return null;\n}", "path": "pinpoint/plugins/spring-webflux/src/main/java/com/navercorp/pinpoint/plugin/spring/webflux/interceptor/DispatchHandlerInvokeHandlerMethodInterceptor.java", "commit_date": "2020-12-03 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Removes the key (and its corresponding value) from this map.\n * This method does nothing if the key is not in the map.\n *\n * @param  key the key that needs to be removed\n * @return the previous value associated with <tt>key</tt>, or\n *         <tt>null</tt> if there was no mapping for <tt>key</tt>\n * @throws NullPointerException if the specified key is null\n */\n", "func_signal": "public V remove(Object key)", "code": "{\n    int hash = hash(key.hashCode());\n    return segmentFor(hash).remove(key, hash, null, false);\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Removes all of the mappings from this map.\n */\n", "func_signal": "public void clear()", "code": "{\n    for (int i = 0; i < segments.length; ++i)\n        segments[i].clear();\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Reconstitute the <tt>ConcurrentWeakHashMap</tt> instance from a\n * stream (i.e., deserialize it).\n * @param s the stream\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate void readObject(java.io.ObjectInputStream s)\n        throws IOException, ClassNotFoundException", "code": "{\n    s.defaultReadObject();\n\n    // Initialize each segment to be minimally sized, and let grow.\n    for (int i = 0; i < segments.length; ++i) {\n        segments[i].setTable(new HashEntry[1]);\n    }\n\n    // Read the keys and values, and put the mappings in the table\n    for (;;) {\n        K key = (K) s.readObject();\n        V value = (V) s.readObject();\n        if (key == null)\n            break;\n        put(key, value);\n    }\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public TResult(TResult other)", "code": "{\n  __isset_bitfield = other.__isset_bitfield;\n  this.success = other.success;\n  if (other.isSetMessage()) {\n    this.message = other.message;\n  }\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TResult.java", "commit_date": "2017-04-17 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * {@inheritDoc}\n *\n * @return the previous value associated with the specified key,\n *         or <tt>null</tt> if there was no mapping for the key\n * @throws NullPointerException if the specified key or value is null\n */\n", "func_signal": "public V replace(K key, V value)", "code": "{\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key.hashCode());\n    return segmentFor(hash).replace(key, hash, value);\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public TAgentInfo(TAgentInfo other)", "code": "{\n  __isset_bitfield = other.__isset_bitfield;\n  if (other.isSetHostname()) {\n    this.hostname = other.hostname;\n  }\n  if (other.isSetIp()) {\n    this.ip = other.ip;\n  }\n  if (other.isSetPorts()) {\n    this.ports = other.ports;\n  }\n  if (other.isSetAgentId()) {\n    this.agentId = other.agentId;\n  }\n  if (other.isSetApplicationName()) {\n    this.applicationName = other.applicationName;\n  }\n  this.serviceType = other.serviceType;\n  this.pid = other.pid;\n  if (other.isSetAgentVersion()) {\n    this.agentVersion = other.agentVersion;\n  }\n  if (other.isSetVmVersion()) {\n    this.vmVersion = other.vmVersion;\n  }\n  this.startTimestamp = other.startTimestamp;\n  this.endTimestamp = other.endTimestamp;\n  this.endStatus = other.endStatus;\n  if (other.isSetServerMetaData()) {\n    this.serverMetaData = new TServerMetaData(other.serverMetaData);\n  }\n  if (other.isSetJvmInfo()) {\n    this.jvmInfo = new TJvmInfo(other.jvmInfo);\n  }\n  this.container = other.container;\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentInfo.java", "commit_date": "2018-06-22 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Returns a {@link Set} view of the mappings contained in this map.\n * The set is backed by the map, so changes to the map are\n * reflected in the set, and vice-versa.  The set supports element\n * removal, which removes the corresponding mapping from the map,\n * via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n * <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n * operations.  It does not support the <tt>add</tt> or\n * <tt>addAll</tt> operations.\n *\n * <p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator\n * that will never throw {@link ConcurrentModificationException},\n * and guarantees to traverse elements as they existed upon\n * construction of the iterator, and may (but is not guaranteed to)\n * reflect any modifications subsequent to construction.\n */\n", "func_signal": "public Set<Map.Entry<K,V>> entrySet()", "code": "{\n    Set<Map.Entry<K,V>> es = entrySet;\n    return (es != null) ? es : (entrySet = new EntrySet());\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TResult.java", "commit_date": "2017-04-17 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new java.lang.IllegalArgumentException();\n  }\n\n  switch (field) {\n  case SAMPLED_NEW_COUNT:\n    return isSetSampledNewCount();\n  case SAMPLED_CONTINUATION_COUNT:\n    return isSetSampledContinuationCount();\n  case UNSAMPLED_NEW_COUNT:\n    return isSetUnsampledNewCount();\n  case UNSAMPLED_CONTINUATION_COUNT:\n    return isSetUnsampledContinuationCount();\n  case SKIPPED_NEW_COUNT:\n    return isSetSkippedNewCount();\n  case SKIPPED_CONTINUATION_COUNT:\n    return isSetSkippedContinuationCount();\n  }\n  throw new java.lang.IllegalStateException();\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TTransaction.java", "commit_date": "2019-08-09 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Tests if the specified object is a key in this table.\n *\n * @param  key   possible key\n * @return <tt>true</tt> if and only if the specified object\n *         is a key in this table, as determined by the\n *         <tt>equals</tt> method; <tt>false</tt> otherwise.\n * @throws NullPointerException if the specified key is null\n */\n", "func_signal": "public boolean containsKey(Object key)", "code": "{\n    int hash = hash(key.hashCode());\n    return segmentFor(hash).containsKey(key, hash);\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Returns the value to which the specified key is mapped,\n * or {@code null} if this map contains no mapping for the key.\n *\n * <p>More formally, if this map contains a mapping from a key\n * {@code k} to a value {@code v} such that {@code key.equals(k)},\n * then this method returns {@code v}; otherwise it returns\n * {@code null}.  (There can be at most one such mapping.)\n *\n * @throws NullPointerException if the specified key is null\n */\n", "func_signal": "public V get(Object key)", "code": "{\n    int hash = hash(key.hashCode());\n    return segmentFor(hash).get(key, hash);\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new java.lang.IllegalArgumentException();\n  }\n\n  switch (field) {\n  case SUCCESS:\n    return isSetSuccess();\n  case MESSAGE:\n    return isSetMessage();\n  }\n  throw new java.lang.IllegalStateException();\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TResult.java", "commit_date": "2017-04-17 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TTransaction.java", "commit_date": "2019-08-09 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new java.lang.IllegalArgumentException();\n  }\n\n  switch (field) {\n  case HOSTNAME:\n    return isSetHostname();\n  case IP:\n    return isSetIp();\n  case PORTS:\n    return isSetPorts();\n  case AGENT_ID:\n    return isSetAgentId();\n  case APPLICATION_NAME:\n    return isSetApplicationName();\n  case SERVICE_TYPE:\n    return isSetServiceType();\n  case PID:\n    return isSetPid();\n  case AGENT_VERSION:\n    return isSetAgentVersion();\n  case VM_VERSION:\n    return isSetVmVersion();\n  case START_TIMESTAMP:\n    return isSetStartTimestamp();\n  case END_TIMESTAMP:\n    return isSetEndTimestamp();\n  case END_STATUS:\n    return isSetEndStatus();\n  case SERVER_META_DATA:\n    return isSetServerMetaData();\n  case JVM_INFO:\n    return isSetJvmInfo();\n  case CONTAINER:\n    return isSetContainer();\n  }\n  throw new java.lang.IllegalStateException();\n}", "path": "pinpoint/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentInfo.java", "commit_date": "2018-06-22 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * Returns a {@link Collection} view of the values contained in this map.\n * The collection is backed by the map, so changes to the map are\n * reflected in the collection, and vice-versa.  The collection\n * supports element removal, which removes the corresponding\n * mapping from this map, via the <tt>Iterator.remove</tt>,\n * <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n * <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not\n * support the <tt>add</tt> or <tt>addAll</tt> operations.\n *\n * <p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator\n * that will never throw {@link ConcurrentModificationException},\n * and guarantees to traverse elements as they existed upon\n * construction of the iterator, and may (but is not guaranteed to)\n * reflect any modifications subsequent to construction.\n */\n", "func_signal": "public Collection<V> values()", "code": "{\n    Collection<V> vs = values;\n    return (vs != null) ? vs : (values = new Values());\n}", "path": "pinpoint/commons-profiler/src/main/java/com/navercorp/pinpoint/common/profiler/concurrent/jsr166/ConcurrentWeakHashMap.java", "commit_date": "2019-10-18 00:00:00", "repo_name": "pinpoint-apm/pinpoint", "stars": 13152, "license": "apache-2.0", "language": "java", "size": 253123}
{"docstring": "/**\n * \u663e\u793agui\u7a97\u53e3\n *\n * @param isTray \u662f\u5426\u4ece\u6258\u76d8\u6309\u94ae\u6253\u5f00\u7684(windows\u4e0b\u5982\u679c\u975e\u6258\u76d8\u6309\u94ae\u8c03\u7528\u7a97\u53e3\u53ef\u80fd\u4e0d\u4f1a\u7f6e\u9876)\n */\n", "func_signal": "public void show(boolean isTray)", "code": "{\n  //\u662f\u5426\u9700\u8981\u8c03\u7528\u7a97\u53e3\u7f6e\u9876\n  boolean isFront = false;\n  if (stage.isShowing()) {\n    if (stage.isIconified()) {\n      stage.setIconified(false);\n    } else {\n      isFront = true;\n      stage.toFront();\n    }\n  } else {\n    isFront = true;\n    stage.show();\n    stage.toFront();\n  }\n  //\u907f\u514d\u6709\u65f6\u5019\u7a97\u53e3\u4e0d\u5f39\u51fa\n  if (isFront && !isTray && OsUtil.isWindows()) {\n    stage.setIconified(true);\n    stage.setIconified(false);\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/DownApplication.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u542f\u7528http\u4ee3\u7406\n */\n", "func_signal": "public static void enabledHTTPProxy(String host, int port) throws IOException", "code": "{\n  if (OsUtil.isWindows()) {\n    String interName = getRemoteInterface();\n    INTERNET_PER_CONN_OPTION_LIST list = buildOptionList(interName, 2);\n    INTERNET_PER_CONN_OPTION[] pOptions = (INTERNET_PER_CONN_OPTION[]) list.pOptions\n        .toArray(list.dwOptionCount);\n\n    // Set flags.\n    pOptions[0].dwOption = WinInet.INTERNET_PER_CONN_FLAGS;\n    pOptions[0].Value.dwValue = WinInet.PROXY_TYPE_PROXY;\n    pOptions[0].Value.setType(int.class);\n\n    // Set proxy name.\n    pOptions[1].dwOption = WinInet.INTERNET_PER_CONN_PROXY_SERVER;\n    pOptions[1].Value.pszValue = host + \":\" + port;\n    pOptions[1].Value.setType(String.class);\n\n    refreshOptions(list);\n  } else if (OsUtil.isMac()) {\n    String networkService = disabledProxy();\n    ExecUtil.httpGet(\"http://127.0.0.1:\" + DownApplication.macToolPort + \"/proxy/enabledHTTP\"\n        + \"?ns=\" + networkService\n        + \"&host=\" + host\n        + \"&port=\" + port);\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/mitm/util/ExtensionProxyUtil.java", "commit_date": "2018-10-12 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "//-Dio.netty.leakDetection.level=PARANOID\n//https://stackoverflow.com/questions/39192528/how-can-you-send-information-to-the-windows-task-bar-from-java-o-javafx\n", "func_signal": "public static void main(String[] args)", "code": "{\n  //get free port\n  doCheck();\n  launch(args);\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/DownApplication.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u8bbe\u7f6ePAC\u4ee3\u7406\n */\n", "func_signal": "public static void enabledPACProxy(String url) throws IOException", "code": "{\n  if (OsUtil.isWindows()) {\n    String interName = getRemoteInterface();\n    INTERNET_PER_CONN_OPTION_LIST list = buildOptionList(interName, 2);\n    INTERNET_PER_CONN_OPTION[] pOptions = (INTERNET_PER_CONN_OPTION[]) list.pOptions\n        .toArray(list.dwOptionCount);\n    // Set flags.\n    pOptions[0].dwOption = WinInet.INTERNET_PER_CONN_FLAGS;\n    pOptions[0].Value.dwValue = WinInet.PROXY_TYPE_AUTO_PROXY_URL;\n    pOptions[0].Value.setType(int.class);\n\n    // Set flags.\n    pOptions[1].dwOption = WinInet.INTERNET_PER_CONN_AUTOCONFIG_URL;\n    pOptions[1].Value.pszValue = url;\n    pOptions[1].Value.setType(String.class);\n\n    refreshOptions(list);\n  } else if (OsUtil.isMac()) {\n    String networkService = disabledProxy();\n    ExecUtil.httpGet(\"http://127.0.0.1:\" + DownApplication.macToolPort + \"/proxy/enabledPAC\"\n        + \"?ns=\" + networkService\n        + \"&url=\" + url);\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/mitm/util/ExtensionProxyUtil.java", "commit_date": "2018-10-12 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "//\u52a0\u8f7dmac tool\n", "func_signal": "private void initMacMITMTool()", "code": "{\n  if (OsUtil.isMac()) {\n    new Thread(() -> {\n      String toolUri = \"mac/mitm-tool.bin\";\n      Path toolPath = Paths.get(PathUtil.ROOT_PATH + File.separator + toolUri);\n      try {\n        if (!toolPath.toFile().exists()) {\n          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n          URL url = classLoader.getResource(toolUri);\n          URLConnection connection = url.openConnection();\n          if (connection instanceof JarURLConnection) {\n            if (!toolPath.getParent().toFile().exists()) {\n              Files.createDirectories(toolPath.getParent());\n            }\n            Files.copy(classLoader.getResourceAsStream(toolUri), toolPath);\n            Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxrw-rw-\");\n            Files.setPosixFilePermissions(toolPath, perms);\n          }\n        }\n        //\u53d6\u4e00\u4e2a\u7a7a\u95f2\u7aef\u53e3\u6765\u8fd0\u884cmac tool\n        macToolPort = OsUtil.getFreePort();\n        //\u7a0b\u5e8f\u9000\u51fa\u76d1\u542c\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n          try {\n            ExecUtil.httpGet(\"http://127.0.0.1:\" + macToolPort + \"/quit\");\n          } catch (IOException e) {\n          }\n        }));\n        ExecUtil.execBlockWithAdmin(\"'\" + toolPath.toFile().getPath() + \"' \" + macToolPort);\n      } catch (Exception e) {\n        LOGGER.error(\"initMacMITMTool error\", e);\n        alertAndExit(\"Init mitm-tool error\uff1a\" + e.getMessage());\n      }\n      System.exit(0);\n    }).start();\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/DownApplication.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u66f4\u65b0\u6269\u5c55,\u5148\u628a\u6269\u5c55\u6587\u4ef6\u4e0b\u8f7d\u5230\u4e34\u65f6\u76ee\u5f55\u4e2d\n */\n", "func_signal": "public static void update(String server, String path, String files) throws Exception", "code": "{\n  String extDir = ExtensionContent.EXT_DIR + File.separator + path;\n  String tmpPath = path + \"_tmp\";\n  String extTmpPath = ExtensionContent.EXT_DIR + File.separator + tmpPath;\n  String extBakPath = ExtensionContent.EXT_DIR + File.separator + path + \"_bak\";\n  try {\n    download(server, path, tmpPath, files);\n    //\u5907\u4efd\u8001\u7248\u672c\u6269\u5c55\n    copy(new File(extDir), new File(extBakPath));\n    //\u5907\u4efd\u6269\u5c55\u914d\u7f6e\n    String configPath = extDir + File.separator + Meta.CONFIG_FILE;\n    if (FileUtil.exists(configPath)) {\n      Path bakConfigPath = Paths.get(extTmpPath + File.separator + Meta.CONFIG_FILE);\n      FileUtil.createFileSmart(bakConfigPath.toFile().getAbsolutePath());\n      Files.copy(Paths.get(configPath), bakConfigPath, StandardCopyOption.REPLACE_EXISTING);\n    }\n    String configBakPath = extDir + File.separator + Meta.CONFIG_FILE + \".bak\";\n    if (FileUtil.exists(configBakPath)) {\n      Files.copy(Paths.get(configBakPath), Paths.get(extTmpPath + File.separator + Meta.CONFIG_FILE + \".bak\"), StandardCopyOption.REPLACE_EXISTING);\n    }\n    try {\n      //\u5220\u9664\u539f\u59cb\u6269\u5c55\u76ee\u5f55\u5e76\u5c06\u4e34\u65f6\u76ee\u5f55\u91cd\u547d\u540d\n      FileUtil.deleteIfExists(extDir);\n    } catch (Exception e) {\n      //\u5220\u9664\u5931\u8d25\u8fd8\u539f\u6269\u5c55\n      copy(new File(extBakPath), new File(extDir));\n      throw new IOException(e);\n    } finally {\n      FileUtil.deleteIfExists(extBakPath);\n    }\n    new File(extTmpPath).renameTo(new File(extDir));\n  } finally {\n    //\u5220\u9664\u4e34\u65f6\u76ee\u5f55\n    FileUtil.deleteIfExists(extTmpPath);\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/util/ExtensionUtil.java", "commit_date": "2018-11-09 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u6839\u636e\u6269\u5c55\u7684\u8def\u5f84\u548c\u6587\u4ef6\u5217\u8868\uff0c\u4e0b\u8f7d\u5bf9\u5e94\u7684\u6587\u4ef6\n */\n", "func_signal": "private static void download(String server, String path, String writePath, String files) throws Exception", "code": "{\n  String extDir = ExtensionContent.EXT_DIR + File.separator + writePath;\n  if (!FileUtil.exists(extDir)) {\n    Files.createDirectories(Paths.get(extDir));\n  }\n  for (String fileName : files.split(\",\")) {\n    AppUtil.download(server + path + fileName, extDir + File.separator + fileName);\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/util/ExtensionUtil.java", "commit_date": "2018-11-09 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "//\u63d0\u793a\u5e76\u9000\u51fa\u7a0b\u5e8f\n", "func_signal": "private void alertAndExit(String msg)", "code": "{\n  Platform.runLater(() -> {\n    Components.alert(msg);\n    System.exit(0);\n  });\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/DownApplication.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "//\u6839\u636e\u8bf7\u6c42uri\u627e\u5230\u5bf9\u5e94\u7684\u5904\u7406\u7c7b\u65b9\u6cd5\u6267\u884c\n", "func_signal": "public FullHttpResponse invoke(String uri, Channel channel, FullHttpRequest request)\n    throws Exception", "code": "{\n  if (controllerList != null) {\n    for (Object obj : controllerList) {\n      Class<?> clazz = obj.getClass();\n      RequestMapping mapping = clazz.getAnnotation(RequestMapping.class);\n      if (mapping != null) {\n        String mappingUri = fixUri(mapping.value()[0]);\n        for (Method actionMethod : clazz.getMethods()) {\n          RequestMapping subMapping = actionMethod.getAnnotation(RequestMapping.class);\n          if (subMapping != null) {\n            String subMappingUri = fixUri(subMapping.value()[0]);\n            if (uri.equalsIgnoreCase(mappingUri + subMappingUri)) {\n              return (FullHttpResponse) actionMethod.invoke(obj, channel, request);\n            }\n          }\n        }\n      }\n    }\n  }\n  return defaultController.handle(channel, request);\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/http/EmbedHttpServer.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u901a\u8fc7\u8bc1\u4e66subjectName\uff0c\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u5df2\u5b89\u88c5\u6b64subjectName\u7684\u8bc1\u4e66\n */\n", "func_signal": "public static boolean existsCert(String subjectName) throws IOException", "code": "{\n  if (OsUtil.isWindows() && findCertList(subjectName).toUpperCase().indexOf(\"=====\") != -1) {\n    return true;\n  } else if (OsUtil.isMac() && findCertList(subjectName).toUpperCase().indexOf(\"BEGIN CERTIFICATE\") != -1) {\n    return true;\n  }\n  return false;\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/mitm/util/ExtensionCertUtil.java", "commit_date": "2018-09-10 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u901a\u8fc7\u8bc1\u4e66subjectName\u548csha1\uff0c\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u5df2\u5b89\u88c5\u8be5\u8bc1\u4e66\n */\n", "func_signal": "public static boolean isInstalledCert(File file) throws Exception", "code": "{\n  if (!file.exists()) {\n    return false;\n  }\n  if (OsUtil.isUnix()) {\n    return true;\n  }\n  X509Certificate cert = CertUtil.loadCert(file.toURI());\n  String subjectName = ((X500Name) cert.getSubjectDN()).getCommonName();\n  String sha1 = getCertSHA1(cert);\n  return findCertList(subjectName).toUpperCase().replaceAll(\"\\\\s\", \"\").indexOf(\":\" + sha1.toUpperCase()) != -1;\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/mitm/util/ExtensionCertUtil.java", "commit_date": "2018-09-10 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u4ee5\u7ba1\u7406\u5458\u6743\u9650\uff0c\u540c\u6b65\u6267\u884cshell\uff0c\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\n */\n", "func_signal": "public static void execBlockWithAdmin(String shell) throws IOException", "code": "{\n  //osascript -e \"do shell script \\\"shell\\\" with administrator privileges\"\n  Process process = Runtime.getRuntime().exec(new String[]{\n      \"osascript\",\n      \"-e\",\n      \"do shell script \\\"\" +\n          shell +\n          \"\\\"\" +\n          \"with administrator privileges\"\n  });\n  try (\n      InputStream inputStream = process.getInputStream()\n  ) {\n    byte[] bytes = new byte[8192];\n    while ((inputStream.read(bytes)) != -1) {\n      //Do nothing\n    }\n  } finally {\n    process.destroy();\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/util/ExecUtil.java", "commit_date": "2018-09-03 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u83b7\u53d6\u8bbf\u95ee\u5916\u7f51\u4f7f\u7528\u7684\u7f51\u5361\n */\n", "func_signal": "private static String getRemoteInterface() throws IOException", "code": "{\n  Map<String, List<String>> interfacesInfo = getInterfacesInfo();\n  Socket socket = new Socket(\"www.baidu.com\", 80);\n  for (Entry<String, List<String>> entry : interfacesInfo.entrySet()) {\n    if (entry.getValue().contains(socket.getLocalAddress().getHostAddress())) {\n      String remoteInterface = entry.getKey();\n      if (OsUtil.isWindows()) {\n        try {\n          String result = ExecUtil.exec(\"rasdial\");\n          if (result != null && Arrays.stream(result.split(\"\\r\\n\")).anyMatch(line -> line.equals(remoteInterface))) {\n            return remoteInterface;\n          }\n        } catch (IOException e) {\n          return null;\n        }\n      } else if (OsUtil.isMac()) {\n        String result = ExecUtil.exec(\"networksetup\", \"-listnetworkserviceorder\");\n        Pattern pattern = Pattern.compile(\"\\\\(Hardware\\\\sPort:\\\\s(.*),\\\\sDevice:\\\\s(.*)\\\\)\");\n        Matcher matcher = pattern.matcher(result);\n        while (matcher.find()) {\n          if (matcher.group(2).equalsIgnoreCase(remoteInterface)) {\n            return matcher.group(1);\n          }\n        }\n      }\n    }\n  }\n  return null;\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/mitm/util/ExtensionProxyUtil.java", "commit_date": "2018-10-12 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u83b7\u53d6\u672c\u673a\u6240\u6709\u7f51\u5361\n */\n", "func_signal": "public static Map<String, List<String>> getInterfacesInfo() throws SocketException", "code": "{\n  Map<String, List<String>> interfacesInfo = new HashMap<>();\n  Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n  while (interfaces.hasMoreElements()) {\n    NetworkInterface networkInterface = interfaces.nextElement();\n    Enumeration<InetAddress> addresses = networkInterface.getInetAddresses();\n    while (addresses.hasMoreElements()) {\n      InetAddress nextElement = addresses.nextElement();\n      String name = networkInterface.getDisplayName();\n      List<String> ipList = interfacesInfo.get(name);\n      if (ipList == null) {\n        ipList = new ArrayList<>();\n        interfacesInfo.put(name, ipList);\n      }\n      ipList.add(nextElement.getHostAddress());\n    }\n  }\n  return interfacesInfo;\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/mitm/util/ExtensionProxyUtil.java", "commit_date": "2018-10-12 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u5728\u6307\u5b9a\u76ee\u5f55\u751f\u6210\u4e00\u4e2aca\u8bc1\u4e66\u548c\u79c1\u94a5\n */\n", "func_signal": "public static void buildCert(String path, String subjectName) throws Exception", "code": "{\n  //\u751f\u6210ca\u8bc1\u4e66\u548c\u79c1\u94a5\n  KeyPair keyPair = CertUtil.genKeyPair();\n  File priKeyFile = FileUtil.createFile(path + File.separator + \".ca_pri.der\", true);\n  File caCertFile = FileUtil.createFile(path + File.separator + \"ca.crt\", false);\n  Files.write(Paths.get(priKeyFile.toURI()), keyPair.getPrivate().getEncoded());\n  Files.write(Paths.get(caCertFile.toURI()),\n      CertUtil.genCACert(\n          \"C=CN, ST=GD, L=SZ, O=lee, OU=study, CN=\" + subjectName,\n          new Date(),\n          new Date(System.currentTimeMillis() + TimeUnit.DAYS.toMillis(3650)),\n          keyPair)\n          .getEncoded());\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/mitm/util/ExtensionCertUtil.java", "commit_date": "2018-09-10 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u540c\u6b65\u6267\u884cshell\uff0c\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\n */\n", "func_signal": "public static void execBlock(String... shell) throws IOException", "code": "{\n  Process process = Runtime.getRuntime().exec(shell);\n  try (\n      InputStream inputStream = process.getInputStream()\n  ) {\n    byte[] bytes = new byte[8192];\n    while ((inputStream.read(bytes)) != -1) {\n      //Do nothing\n    }\n  } finally {\n    process.destroy();\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/util/ExecUtil.java", "commit_date": "2018-09-03 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u8fd0\u884c\u4e00\u4e2ajs\u65b9\u6cd5\n */\n", "func_signal": "public static Object invoke(ExtensionInfo extensionInfo, Event event, Object param, boolean async) throws NoSuchMethodException, ScriptException, FileNotFoundException, InterruptedException", "code": "{\n  //\u521d\u59cb\u5316js\u5f15\u64ce\n  ScriptEngine engine = ExtensionUtil.buildExtensionRuntimeEngine(extensionInfo);\n  Invocable invocable = (Invocable) engine;\n  //\u6267\u884cresolve\u65b9\u6cd5\n  Object result = invocable.invokeFunction(StringUtils.isEmpty(event.getMethod()) ? event.getOn() : event.getMethod(), param);\n  //\u7ed3\u679c\u4e3anull\u6216\u8005\u5f02\u6b65\u8c03\u7528\u76f4\u63a5\u8fd4\u56de\n  if (result == null || async) {\n    return result;\n  }\n  final Object[] ret = {null};\n  //\u5224\u65ad\u662f\u4e0d\u662f\u8fd4\u56dePromise\u5bf9\u8c61\n  ScriptContext ctx = new SimpleScriptContext();\n  ctx.setAttribute(\"result\", result, ScriptContext.ENGINE_SCOPE);\n  boolean isPromise = (boolean) engine.eval(\"!!result&&typeof result=='object'&&typeof result.then=='function'\", ctx);\n  if (isPromise) {\n    //\u5982\u679c\u662f\u8fd4\u56de\u7684Promise\u5219\u7b49\u5f85\u6267\u884c\u5b8c\u6210\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    invocable.invokeMethod(result, \"then\", (Function) o -> {\n      try {\n        ret[0] = o;\n      } catch (Exception e) {\n        LOGGER.error(\"An exception occurred while resolve()\", e);\n      } finally {\n        countDownLatch.countDown();\n      }\n      return null;\n    });\n    invocable.invokeMethod(result, \"catch\", (Function) o -> {\n      countDownLatch.countDown();\n      return null;\n    });\n    //\u7b49\u5f85\u89e3\u6790\u5b8c\u6210\n    countDownLatch.await();\n  } else {\n    ret[0] = result;\n  }\n  return ret[0];\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/util/ExtensionUtil.java", "commit_date": "2018-11-09 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u521b\u5efa\u6269\u5c55\u73af\u5883\u7684js\u5f15\u64ce\uff0c\u53ef\u4ee5\u5728\u5f15\u64ce\u4e2d\u8bbf\u95eepdown\u5bf9\u8c61\n */\n", "func_signal": "public static ScriptEngine buildExtensionRuntimeEngine(ExtensionInfo extensionInfo) throws ScriptException, NoSuchMethodException, FileNotFoundException", "code": "{\n  //\u521d\u59cb\u5316js\u5f15\u64ce\n  ScriptEngine engine = JavascriptEngine.buildEngine();\n  //\u52a0\u8f7d\u8fd0\u884c\u65f6\u811a\u672c\n  Object runtime = engine.eval(ExtensionUtil.readRuntimeTemplate(extensionInfo));\n  engine.put(\"pdown\", runtime);\n  //\u52a0\u8f7d\u6269\u5c55\u811a\u672c\n  engine.eval(new FileReader(Paths.get(extensionInfo.getMeta().getFullPath(), extensionInfo.getHookScript().getScript()).toFile()));\n  return engine;\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/extension/util/ExtensionUtil.java", "commit_date": "2018-11-09 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * \u6267\u884cshell\u5e76\u8fd4\u56de\u6807\u51c6\u8f93\u51fa\u6587\u672c\u5185\u5bb9\n */\n", "func_signal": "public static String exec(String... shell) throws IOException", "code": "{\n  Process process = Runtime.getRuntime().exec(shell);\n  StringBuilder sb = new StringBuilder();\n  Charset charset = OsUtil.isWindows() ? Charset.forName(\"GBK\") : Charset.defaultCharset();\n  try (\n      BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(), charset))\n  ) {\n    String line;\n    while ((line = reader.readLine()) != null) {\n      sb.append(line + System.lineSeparator());\n    }\n  } finally {\n    process.destroy();\n  }\n  return sb.toString();\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/util/ExecUtil.java", "commit_date": "2018-09-03 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "//\u52a0\u8f7dwebView\n", "func_signal": "private void initBrowser() throws AWTException", "code": "{\n  browser = new Browser();\n  stage.setScene(new Scene(browser));\n  try {\n    countDownLatch.await();\n  } catch (InterruptedException e) {\n  }\n}", "path": "proxyee-down/main/src/main/java/org/pdown/gui/DownApplication.java", "commit_date": "2018-11-02 00:00:00", "repo_name": "proxyee-down-org/proxyee-down", "stars": 24972, "license": "apache-2.0", "language": "java", "size": 26862}
{"docstring": "/**\n * Find the topmost child under the given point within the parent view's coordinate system.\n * The child order is determined using {@link Callback#getOrderedChildIndex(int)}.\n *\n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return The topmost child view under (x, y) or null if none found.\n */\n", "func_signal": "public View findTopChildUnder(int x, int y)", "code": "{\n    final int childCount = mParentView.getChildCount();\n    for (int i = childCount - 1; i >= 0; i--) {\n        final View child = mParentView.getChildAt(mCallback.getOrderedChildIndex(i));\n        if (x >= child.getLeft() && x < child.getRight() &&\n                y >= child.getTop() && y < child.getBottom()) {\n            return child;\n        }\n    }\n    return null;\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v      View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx     Delta scrolled in pixels\n * @param x      X coordinate of the active touch point\n * @param y      Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n    return checkV && ViewCompat.canScrollHorizontally(v, -dx);\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels along the X axis\n * @param dy Delta scrolled in pixels along the Y axis\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int dy, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, dy, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && (ViewCompat.canScrollHorizontally(v, -dx) ||\n            ViewCompat.canScrollVertically(v, -dy));\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n *\n * @param finalLeft Target left position for the captured view\n * @param finalTop Target top position for the captured view\n * @param xvel Horizontal velocity\n * @param yvel Vertical velocity\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "private boolean forceSettleCapturedViewAt(int finalLeft, int finalTop, int xvel, int yvel)", "code": "{\n    final int startLeft = mCapturedView.getLeft();\n    final int startTop = mCapturedView.getTop();\n    final int dx = finalLeft - startLeft;\n    final int dy = finalTop - startTop;\n\n    if (dx == 0 && dy == 0) {\n        // Nothing to do. Send callbacks, be done.\n        mScroller.abortAnimation();\n        setDragState(STATE_IDLE);\n        return false;\n    }\n\n    final int duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);\n    mScroller.startScroll(startLeft, startTop, dx, dy, duration);\n\n    setDragState(STATE_SETTLING);\n    return true;\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n *\n * @param forParent Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be about detecting\n *                    the start of a drag. Larger values are more sensitive. 1.0f is normal.\n * @param cb Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n    final ViewDragHelper helper = create(forParent, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * @return The current parallax offset\n */\n", "func_signal": "public int getCurrentParallaxOffset()", "code": "{\n    // Clamp slide offset at zero for parallax computation;\n    int offset = (int) (mParallaxOffset * Math.max(mSlideOffset, 0));\n    return mIsSlidingUp ? -offset : offset;\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Settle the captured view based on standard free-moving fling behavior.\n * The caller should invoke {@link #continueSettling(boolean)} on each subsequent frame\n * to continue the motion until it returns false.\n *\n * @param minLeft Minimum X position for the view's left edge\n * @param minTop Minimum Y position for the view's top edge\n * @param maxLeft Maximum X position for the view's left edge\n * @param maxTop Maximum Y position for the view's top edge\n */\n", "func_signal": "public void flingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot flingCapturedView outside of a call to \" +\n                \"Callback#onViewReleased\");\n    }\n\n    mScroller.fling(mCapturedView.getLeft(), mCapturedView.getTop(),\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),\n            minLeft, maxLeft, minTop, maxTop);\n\n    setDragState(STATE_SETTLING);\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Adds a panel slide listener\n *\n * @param listener\n */\n", "func_signal": "public void addPanelSlideListener(PanelSlideListener listener)", "code": "{\n    synchronized (mPanelSlideListeners) {\n        mPanelSlideListeners.add(listener);\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Change panel state to the given state with\n *\n * @param state - new panel state\n */\n", "func_signal": "public void setPanelState(PanelState state)", "code": "{\n\n    // Abort any running animation, to allow state change\n    if(mDragHelper.getViewDragState() == ViewDragHelper.STATE_SETTLING){\n        Log.d(TAG, \"View is settling. Aborting animation.\");\n        mDragHelper.abort();\n    }\n\n    if (state == null || state == PanelState.DRAGGING) {\n        throw new IllegalArgumentException(\"Panel state cannot be null or DRAGGING.\");\n    }\n    if (!isEnabled()\n            || (!mFirstLayout && mSlideableView == null)\n            || state == mSlideState\n            || mSlideState == PanelState.DRAGGING) return;\n\n    if (mFirstLayout) {\n        setPanelStateInternal(state);\n    } else {\n        if (mSlideState == PanelState.HIDDEN) {\n            mSlideableView.setVisibility(View.VISIBLE);\n            requestLayout();\n        }\n        switch (state) {\n            case ANCHORED:\n                smoothSlideTo(mAnchorPoint, 0);\n                break;\n            case COLLAPSED:\n                smoothSlideTo(0, 0);\n                break;\n            case EXPANDED:\n                smoothSlideTo(1.0f, 0);\n                break;\n            case HIDDEN:\n                int newTop = computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);\n                smoothSlideTo(computeSlideOffset(newTop), 0);\n                break;\n        }\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Like all callback events this must happen on the UI thread, but release\n * involves some extra semantics. During a release (mReleaseInProgress)\n * is the only time it is valid to call {@link #settleCapturedViewAt(int, int)}\n * or {@link #flingCapturedView(int, int, int, int)}.\n */\n", "func_signal": "private void dispatchViewReleased(float xvel, float yvel)", "code": "{\n    mReleaseInProgress = true;\n    mCallback.onViewReleased(mCapturedView, xvel, yvel);\n    mReleaseInProgress = false;\n\n    if (mDragState == STATE_DRAGGING) {\n        // onViewReleased didn't call a method that would have changed this. Go idle.\n        setDragState(STATE_IDLE);\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * The result of a call to this method is equivalent to\n * {@link #processTouchEvent(android.view.MotionEvent)} receiving an ACTION_CANCEL event.\n */\n", "func_signal": "public void cancel()", "code": "{\n    mActivePointerId = INVALID_POINTER;\n    clearMotionHistory();\n\n    if (mVelocityTracker != null) {\n        mVelocityTracker.recycle();\n        mVelocityTracker = null;\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Set the draggable view portion. Use to null, to allow the whole panel to be draggable\n *\n * @param dragViewResId The resource ID of the new drag view\n */\n", "func_signal": "public void setDragView(int dragViewResId)", "code": "{\n    mDragViewResId = dragViewResId;\n    setDragView(findViewById(dragViewResId));\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper with the specified interpolator.\n *\n * @param forParent Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be about detecting\n *                    the start of a drag. Larger values are more sensitive. 1.0f is normal.\n * @param interpolator interpolator for scroller\n * @param cb Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Interpolator interpolator, Callback cb)", "code": "{\n    final ViewDragHelper helper = create(forParent, interpolator, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * {@link #cancel()}, but also abort all motion in progress and snap to the end of any\n * animation.\n */\n", "func_signal": "public void abort()", "code": "{\n    cancel();\n    if (mDragState == STATE_SETTLING) {\n        final int oldX = mScroller.getCurrX();\n        final int oldY = mScroller.getCurrY();\n        mScroller.abortAnimation();\n        final int newX = mScroller.getCurrX();\n        final int newY = mScroller.getCurrY();\n        mCallback.onViewPositionChanged(mCapturedView, newX, newY, newX - oldX, newY - oldY);\n    }\n    setDragState(STATE_IDLE);\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Removes a panel slide listener\n *\n * @param listener\n */\n", "func_signal": "public void removePanelSlideListener(PanelSlideListener listener)", "code": "{\n    synchronized (mPanelSlideListeners) {\n        mPanelSlideListeners.remove(listener);\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Set the collapsed panel height in pixels\n *\n * @param val A height in pixels\n */\n", "func_signal": "public void setPanelHeight(int val)", "code": "{\n    if (getPanelHeight() == val) {\n        return;\n    }\n\n    mPanelHeight = val;\n    if (!mFirstLayout) {\n        requestLayout();\n    }\n\n    if (getPanelState() == PanelState.COLLAPSED) {\n        smoothToBottom();\n        invalidate();\n        return;\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Check if the specified pointer tracked in the current gesture has crossed\n * the required slop threshold.\n *\n * <p>This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or\n * {@link #processTouchEvent(android.view.MotionEvent)}. You should only rely on\n * the results of this method after all currently available touch data\n * has been provided to one of these two methods.</p>\n *\n * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},\n *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}\n * @param pointerId ID of the pointer to slop check as specified by MotionEvent\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions, int pointerId)", "code": "{\n    if (!isPointerDown(pointerId)) {\n        return false;\n    }\n\n    final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL;\n    final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL;\n\n    final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId];\n    final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId];\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/ViewDragHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Set the shadow height\n *\n * @param val A height in pixels\n */\n", "func_signal": "public void setShadowHeight(int val)", "code": "{\n    mShadowHeight = val;\n    if (!mFirstLayout) {\n        invalidate();\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Update the parallax based on the current slide offset.\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\nprivate void applyParallaxForCurrentSlideOffset()", "code": "{\n    if (mParallaxOffset > 0) {\n        int mainViewOffset = getCurrentParallaxOffset();\n        ViewCompat.setTranslationY(mMainView, mainViewOffset);\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "/**\n * Set the draggable view portion. Use to null, to allow the whole panel to be draggable\n *\n * @param dragView A view that will be used to drag the panel.\n */\n", "func_signal": "public void setDragView(View dragView)", "code": "{\n    if (mDragView != null) {\n        mDragView.setOnClickListener(null);\n    }\n    mDragView = dragView;\n    if (mDragView != null) {\n        mDragView.setClickable(true);\n        mDragView.setFocusable(false);\n        mDragView.setFocusableInTouchMode(false);\n        mDragView.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (!isEnabled() || !isTouchEnabled()) return;\n                if (mSlideState != PanelState.EXPANDED && mSlideState != PanelState.ANCHORED) {\n                    if (mAnchorPoint < 1.0f) {\n                        setPanelState(PanelState.ANCHORED);\n                    } else {\n                        setPanelState(PanelState.EXPANDED);\n                    }\n                } else {\n                    setPanelState(PanelState.COLLAPSED);\n                }\n            }\n        });\n        ;\n    }\n}", "path": "AndroidSlidingUpPanel/library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java", "commit_date": "2017-09-17 00:00:00", "repo_name": "umano/AndroidSlidingUpPanel", "stars": 9480, "license": "apache-2.0", "language": "java", "size": 2861}
{"docstring": "// @GuardedBy annotation is doing lexical analysis that doesn't understand the closures below\n// will be running under the synchronized block.\n", "func_signal": "@SuppressWarnings(\"GuardedBy\")\nprivate synchronized void clearEventsAndPostFinalProgress(ChainableEvent event)", "code": "{\n  clearPendingEvents();\n  Iterable<String> allOut = ImmutableList.of();\n  Iterable<String> allErr = ImmutableList.of();\n  if (outErrProvider != null) {\n    allOut = orEmpty(outErrProvider.getOut());\n    allErr = orEmpty(outErrProvider.getErr());\n  }\n  consumeAsPairsofStrings(\n      allOut,\n      allErr,\n      (s1, s2) -> post(flushStdoutStderrEvent(s1, s2)),\n      (s1, s2) -> post(ProgressEvent.finalProgressUpdate(progressCount, s1, s2)));\n  clearAnnouncedEvents(event == null ? ImmutableList.of() : event.getChildrenEvents());\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "// TODO(bazel-team): Use AtomicReference instead of a synchronized method.\n", "func_signal": "private synchronized boolean compareAndSetState(\n    Set<State> fromStates, State toState, TestInstant now)", "code": "{\n  if (fromStates == null || toState == null || state == null) {\n    throw new NullPointerException();\n  }\n  if (fromStates.isEmpty()) {\n    throw new IllegalArgumentException();\n  }\n  if (fromStates.contains(state) && toState != state) {\n    state = toState;\n    if (toState != State.PENDING) {\n      runTimeInterval =\n          runTimeInterval == null\n          ? new TestInterval(now, now)\n          : runTimeInterval.withEndMillis(now);\n    }\n    return true;\n  }\n  return false;\n}", "path": "bazel/src/java_tools/junitrunner/java/com/google/testing/junit/runner/model/TestCaseNode.java", "commit_date": "2019-06-25 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Returns all methods with the given annotation for the given class in the entire hierarchy.\n * Methods are returned in hierarchy order: superclass after subclass.\n */\n", "func_signal": "private static List<Method> getMethodsAnnotatedWith(\n    Class<?> type, Class<? extends Annotation> annotation)", "code": "{\n  List<Method> methods = new ArrayList<>();\n  Class<?> klass = type;\n  // need to iterate through hierarchy in order to retrieve methods from above the current\n  // instance.\n  while (klass != Object.class) {\n    // iterate though the list of methods declared in the class represented by klass variable, and\n    // add those annotated with the specified annotation\n    final List<Method> allMethods = new ArrayList<>(Arrays.asList(klass.getDeclaredMethods()));\n    for (final Method method : allMethods) {\n      if (method.isAnnotationPresent(annotation)) {\n        methods.add(method);\n      }\n    }\n    // move to the upper class in the hierarchy in search for more methods\n    klass = klass.getSuperclass();\n  }\n  return methods;\n}", "path": "bazel/src/test/java/com/google/devtools/build/lib/query2/testutil/PostAnalysisQueryHelper.java", "commit_date": "2020-09-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Returns true if a specific rule compiles a specific source. Looks through genrules and\n * filegroups.\n */\n", "func_signal": "private boolean listContainsFile(\n    ExtendedEventHandler eventHandler,\n    Collection<Label> srcLabels,\n    Label source,\n    Set<Label> visitedRuleLabels)\n    throws TargetParsingException, InterruptedException", "code": "{\n  if (srcLabels.contains(source)) {\n    return true;\n  }\n  for (Label label : srcLabels) {\n    if (!visitedRuleLabels.add(label)) {\n      continue;\n    }\n    Target target = null;\n    try {\n      target = targetProvider.getTarget(eventHandler, label);\n    } catch (NoSuchThingException e) {\n      // Just ignore failing sources/packages. We could report them here, but as long as we do\n      // early return, the presence of this error would then be determined by the order of items\n      // in the srcs attribute. A proper error will be created by the subsequent loading.\n    }\n    if (target == null || target instanceof FileTarget) {\n      continue;\n    }\n    Rule targetRule = target.getAssociatedRule();\n    if (\"filegroup\".equals(targetRule.getRuleClass())) {\n      RawAttributeMapper attributeMapper = RawAttributeMapper.of(targetRule);\n      Collection<Label> srcs = attributeMapper.getMergedValues(\"srcs\", BuildType.LABEL_LIST);\n      if (listContainsFile(eventHandler, srcs, source, visitedRuleLabels)) {\n        return true;\n      }\n    } else if (\"genrule\".equals(targetRule.getRuleClass())) {\n      // TODO(djasper): Likely, it makes much more sense to look at the inputs of a genrule.\n      for (OutputFile file : targetRule.getOutputFiles()) {\n        if (file.getLabel().equals(source)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/pkgcache/CompileOneDependencyTransformer.java", "commit_date": "2020-08-03 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * If some events are blocked on the absence of a build_started event, generate such an event;\n * moreover, make that artificial start event announce all events blocked on it, as well as the\n * {@link BuildCompletingEvent} that caused the early end of the stream.\n */\n", "func_signal": "private synchronized void clearMissingStartEvent(BuildEventId id)", "code": "{\n  if (pendingEvents.containsKey(BuildEventIdUtil.buildStartedId())) {\n    ImmutableSet.Builder<BuildEventId> children = ImmutableSet.builder();\n    children.add(ProgressEvent.INITIAL_PROGRESS_UPDATE);\n    children.add(id);\n    children.addAll(\n        pendingEvents.get(BuildEventIdUtil.buildStartedId()).stream()\n            .map(BuildEvent::getEventId)\n            .collect(ImmutableSet.toImmutableSet()));\n    buildEvent(\n        new AbortedEvent(\n            BuildEventIdUtil.buildStartedId(),\n            children.build(),\n            getLastAbortReason(),\n            getAbortReasonDetails()));\n  }\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Returns a detailed message explaining the most recent {@link AbortReason} (and possibly\n * previous reasons).\n */\n", "func_signal": "private synchronized String getAbortReasonDetails()", "code": "{\n  if (abortReasons.size() == 1\n      && Iterables.getOnlyElement(abortReasons) == AbortReason.OUT_OF_MEMORY) {\n    return BugReport.constructOomExitMessage(oomMessage);\n  }\n  return abortReasons.size() > 1 ? \"Multiple abort reasons reported: \" + abortReasons : \"\";\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/** Returns whether an {@link ActionExecutedEvent} should be published. */\n", "func_signal": "private boolean shouldPublishActionExecutedEvent(ActionExecutedEvent event)", "code": "{\n  if (besOptions.publishAllActions) {\n    return true;\n  }\n  if (event.getException() != null) {\n    // Publish failed actions\n    return true;\n  }\n  if (!event.getActionMetadataLogs().isEmpty()) {\n    // Publish all new logs with inputs and input sizes\n    return true;\n  }\n  return (event.getAction() instanceof ExtraAction);\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/** Returns all labels that are contained in direct compile time inputs of {@code rule}. */\n", "func_signal": "private static Set<Label> getInputLabels(Rule rule)", "code": "{\n  RawAttributeMapper attributeMapper = RawAttributeMapper.of(rule);\n  Set<Label> labels = new TreeSet<>();\n  for (String attrName : attributeMapper.getAttributeNames()) {\n    if (!attributeMapper.getAttributeDefinition(attrName).isDirectCompileTimeInput()) {\n      continue;\n    }\n    // TODO(djasper): We might also want to look at LABEL types, but there currently is the\n    // attribute xcode_config, which leads to test errors in Bazel tests.\n    if (rule.isAttrDefined(attrName, BuildType.LABEL_LIST)) {\n      labels.addAll(attributeMapper.getMergedValues(attrName, BuildType.LABEL_LIST));\n    }\n  }\n  return labels;\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/pkgcache/CompileOneDependencyTransformer.java", "commit_date": "2020-08-03 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Post a new event to all transports; simultaneously keep track of the events we announce to\n * still come.\n *\n * <p>Moreover, link unannounced events to the progress stream; we only expect failure events to\n * come before their parents.\n */\n// @GuardedBy annotation is doing lexical analysis that doesn't understand the closures below\n// will be running under the synchronized block.\n", "func_signal": "@SuppressWarnings(\"GuardedBy\")\nprivate void post(BuildEvent event)", "code": "{\n  List<BuildEvent> linkEvents = null;\n  BuildEventId id = event.getEventId();\n  List<BuildEvent> flushEvents = null;\n  boolean lastEvent = false;\n\n  synchronized (this) {\n    if (announcedEvents == null) {\n      announcedEvents = new HashSet<>();\n      // The very first event of a stream is implicitly announced by the convention that\n      // a complete stream has to have at least one entry. In this way we keep the invariant\n      // that the set of posted events is always a subset of the set of announced events.\n      announcedEvents.add(id);\n      if (!event.getChildrenEvents().contains(ProgressEvent.INITIAL_PROGRESS_UPDATE)) {\n        BuildEvent progress = ProgressEvent.progressChainIn(progressCount, event.getEventId());\n        linkEvents = ImmutableList.of(progress);\n        progressCount++;\n        announcedEvents.addAll(progress.getChildrenEvents());\n        // the new first event in the stream, implicitly announced by the fact that complete\n        // stream may not be empty.\n        announcedEvents.add(progress.getEventId());\n        postedEvents.add(progress.getEventId());\n      }\n\n      if (!bufferedStdoutStderrPairs.isEmpty()) {\n        flushEvents = new ArrayList<>(bufferedStdoutStderrPairs.size());\n        for (Pair<String, String> outErrPair : bufferedStdoutStderrPairs) {\n          flushEvents.add(flushStdoutStderrEvent(outErrPair.getFirst(), outErrPair.getSecond()));\n        }\n      }\n      bufferedStdoutStderrPairs = null;\n    } else {\n      if (!announcedEvents.contains(id)) {\n        Iterable<String> allOut = ImmutableList.of();\n        Iterable<String> allErr = ImmutableList.of();\n        if (outErrProvider != null) {\n          allOut = orEmpty(outErrProvider.getOut());\n          allErr = orEmpty(outErrProvider.getErr());\n        }\n        linkEvents = new ArrayList<>();\n        List<BuildEvent> finalLinkEvents = linkEvents;\n        consumeAsPairsofStrings(\n            allOut,\n            allErr,\n            (out, err) -> {\n              BuildEvent progressEvent =\n                  ProgressEvent.progressChainIn(progressCount, id, out, err);\n              finalLinkEvents.add(progressEvent);\n              progressCount++;\n              announcedEvents.addAll(progressEvent.getChildrenEvents());\n              postedEvents.add(progressEvent.getEventId());\n            });\n      }\n    }\n\n    if (event instanceof BuildInfoEvent) {\n      // The specification for BuildInfoEvent says that there may be many such events,\n      // but all except the first one should be ignored.\n      if (postedEvents.contains(id)) {\n        return;\n      }\n    }\n\n    postedEvents.add(id);\n    announcedEvents.addAll(event.getChildrenEvents());\n    // We keep as an invariant that postedEvents is a subset of announced events, so this is a\n    // cheaper test for equality\n    if (announcedEvents.size() == postedEvents.size()) {\n      lastEvent = true;\n    }\n  }\n\n  BuildEvent mainEvent = event;\n  if (lastEvent) {\n    mainEvent = new LastBuildEvent(event);\n  }\n\n  for (BuildEventTransport transport : transports) {\n    if (linkEvents != null) {\n      for (BuildEvent linkEvent : linkEvents) {\n        transport.sendBuildEvent(linkEvent);\n      }\n    }\n    transport.sendBuildEvent(mainEvent);\n  }\n\n  if (flushEvents != null) {\n    for (BuildEvent flushEvent : flushEvents) {\n      for (BuildEventTransport transport : transports) {\n        transport.sendBuildEvent(flushEvent);\n      }\n    }\n  }\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/** Returns whether a {@link BuildEvent} should be ignored. */\n", "func_signal": "private boolean shouldIgnoreBuildEvent(BuildEvent event)", "code": "{\n  if (event instanceof ActionExecutedEvent\n      && !shouldPublishActionExecutedEvent((ActionExecutedEvent) event)) {\n    return true;\n  }\n\n  if (bufferUntilPrerequisitesReceived(event) || isVacuousTestSummary(event)) {\n    return true;\n  }\n\n  if (isTestCommand && event instanceof BuildCompleteEvent) {\n    // In case of \"bazel test\" ignore the BuildCompleteEvent, as it will be followed by a\n    // TestingCompleteEvent that contains the correct exit code.\n    return !isCrash((BuildCompleteEvent) event);\n  }\n\n  if (event instanceof TargetParsingCompleteEvent) {\n    // If there is only one pattern and we have one failed pattern, then we already posted a\n    // pattern expanded error, so we don't post the completion event.\n    // TODO(b/109727414): This is brittle. It would be better to always post one PatternExpanded\n    // event for each pattern given on the command line instead of one event for all of them\n    // combined.\n    return ((TargetParsingCompleteEvent) event).getOriginalTargetPattern().size() == 1\n        && !((TargetParsingCompleteEvent) event).getFailedTargetPatterns().isEmpty();\n  }\n\n  return false;\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * For each input file in the original result, returns a rule in the same package which has the\n * input file as a source.\n */\n", "func_signal": "public ResolvedTargets<Target> transformCompileOneDependency(\n    ExtendedEventHandler eventHandler, ResolvedTargets<Target> original)\n    throws TargetParsingException, InterruptedException", "code": "{\n  if (original.hasError()) {\n    return original;\n  }\n  ResolvedTargets.Builder<Target> builder = ResolvedTargets.builder();\n  for (Target target : original.getTargets()) {\n    builder.add(transformCompileOneDependency(eventHandler, target));\n  }\n  return builder.build();\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/pkgcache/CompileOneDependencyTransformer.java", "commit_date": "2020-08-03 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/** Creates a new build event streamer. */\n", "func_signal": "private BuildEventStreamer(\n    Collection<BuildEventTransport> transports,\n    BuildEventStreamOptions options,\n    CountingArtifactGroupNamer artifactGroupNamer,\n    String oomMessage)", "code": "{\n  this.transports = transports;\n  this.besOptions = options;\n  this.announcedEvents = null;\n  this.progressCount = 0;\n  this.artifactGroupNamer = artifactGroupNamer;\n  this.oomMessage = oomMessage;\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * This is called from test setup to create the mock directory layout needed to create the\n * configuration.\n */\n", "func_signal": "public void setupMockClient(MockToolsConfig mockToolsConfig) throws IOException", "code": "{\n  List<String> workspaceContents = getWorkspaceContents(mockToolsConfig);\n  setupMockClient(mockToolsConfig, workspaceContents);\n}", "path": "bazel/src/test/java/com/google/devtools/build/lib/analysis/util/AnalysisMock.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Given a {@link SkyKey} that contains a sequence of target patterns, when this function returns\n * {@link PrepareDepsOfPatternsValue}, then all targets matching that sequence, and those targets'\n * transitive dependencies, have been loaded.\n */\n", "func_signal": "@Nullable\n@Override\npublic SkyValue compute(SkyKey skyKey, Environment env) throws InterruptedException", "code": "{\n  ExtendedEventHandler eventHandler = env.getListener();\n  ImmutableList<SkyKey> skyKeys = getSkyKeys(skyKey, eventHandler);\n\n  Map<SkyKey, ValueOrException<TargetParsingException>> tokensByKey =\n      env.getValuesOrThrow(skyKeys, TargetParsingException.class);\n  if (env.valuesMissing()) {\n    return null;\n  }\n\n  for (SkyKey key : skyKeys) {\n    try {\n      // The only exception type throwable by PrepareDepsOfPatternFunction is\n      // TargetParsingException. Therefore all ValueOrException values in the map will either\n      // be non-null or throw TargetParsingException when get is called.\n      Preconditions.checkNotNull(tokensByKey.get(key).get());\n    } catch (TargetParsingException e) {\n      // If a target pattern can't be evaluated, notify the user of the problem and keep going.\n      handleTargetParsingException(eventHandler, key, e);\n    }\n  }\n\n  return new PrepareDepsOfPatternsValue(getTargetPatternKeys(skyKeys));\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/skyframe/PrepareDepsOfPatternsFunction.java", "commit_date": "2017-11-09 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "// All four subclasses of Parameter are handled together.\n", "func_signal": "public void visit(Parameter node)", "code": "{\n  visit(node.getIdentifier());\n  if (node.getDefaultValue() != null) {\n    visit(node.getDefaultValue());\n  }\n}", "path": "bazel/src/main/java/net/starlark/java/syntax/NodeVisitor.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Clear all events that are still announced; events not naturally closed by the expected event\n * normally only occur if the build is aborted.\n */\n", "func_signal": "private synchronized void clearAnnouncedEvents(Collection<BuildEventId> dontclear)", "code": "{\n  if (announcedEvents != null) {\n    // create a copy of the identifiers to clear, as the post method\n    // will change the set of already announced events.\n    Set<BuildEventId> ids;\n    synchronized (this) {\n      ids = Sets.difference(announcedEvents, postedEvents);\n    }\n    for (BuildEventId id : ids) {\n      if (!dontclear.contains(id)) {\n        post(new AbortedEvent(id, getLastAbortReason(), getAbortReasonDetails()));\n      }\n    }\n  }\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/runtime/BuildEventStreamer.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/** called from JNI */\n", "func_signal": "public Dirents(String[] names, byte[] types)", "code": "{\n  this.names = names;\n  this.types = types;\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/unix/NativePosixFiles.java", "commit_date": "2020-10-02 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "// methods dealing with sequences of nodes\n", "func_signal": "public void visitAll(List<? extends Node> nodes)", "code": "{\n  for (Node node : nodes) {\n    visit(node);\n  }\n}", "path": "bazel/src/main/java/net/starlark/java/syntax/NodeVisitor.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Called whenever the FileRecordingOutputStream finds an error.\n */\n", "func_signal": "protected void recordError(IOException exception)", "code": "{\n  String newErrorText = exception.getMessage();\n  error = (error == null) ? newErrorText : error + \"\\n\" + newErrorText;\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/util/io/FileOutErr.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/**\n * Writes the captured content to the given {@link FileOutErr},\n * avoiding keeping the entire contents in memory.\n */\n", "func_signal": "public static void dump(FileOutErr from, FileOutErr to)", "code": "{\n  from.dumpOutAsLatin1(to.getOutputStream());\n  from.dumpErrAsLatin1(to.getErrorStream());\n}", "path": "bazel/src/main/java/com/google/devtools/build/lib/util/io/FileOutErr.java", "commit_date": "2020-09-18 00:00:00", "repo_name": "bazelbuild/bazel", "stars": 22091, "license": "apache-2.0", "language": "java", "size": 922767}
{"docstring": "/** The {@link JAXBContextFactory} for body part. */\n", "func_signal": "public Builder withJAXBContextFactory(JAXBContextFactory jaxbContextFactory)", "code": "{\n  this.jaxbContextFactory = jaxbContextFactory;\n  return this;\n}", "path": "feign/soap/src/main/java/feign/soap/SOAPEncoder.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Copy of {@code com.google.common.base.Preconditions#checkState}.\n */\n", "func_signal": "public static void checkState(boolean expression,\n                              String errorMessageTemplate,\n                              Object... errorMessageArgs)", "code": "{\n  if (!expression) {\n    throw new IllegalStateException(\n        format(errorMessageTemplate, errorMessageArgs));\n  }\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Adapted from {@code com.google.common.io.ByteStreams.toByteArray()}.\n */\n", "func_signal": "public static byte[] toByteArray(InputStream in) throws IOException", "code": "{\n  checkNotNull(in, \"in\");\n  try {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    copy(in, out);\n    return out.toByteArray();\n  } finally {\n    ensureClosed(in);\n  }\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Resolves the last type parameter of the parameterized {@code supertype}, based on the {@code\n * genericContext}, into its upper bounds.\n * <p/>\n * Implementation copied from {@code\n * retrofit.RestMethodInfo}.\n *\n * @param genericContext Ex. {@link java.lang.reflect.Field#getGenericType()}\n * @param supertype Ex. {@code Decoder.class}\n * @return in the example above, the type parameter of {@code Decoder}.\n * @throws IllegalStateException if {@code supertype} cannot be resolved into a parameterized type\n *         using {@code context}.\n */\n", "func_signal": "public static Type resolveLastTypeParameter(Type genericContext, Class<?> supertype)\n    throws IllegalStateException", "code": "{\n  Type resolvedSuperType =\n      Types.getSupertype(genericContext, Types.getRawType(genericContext), supertype);\n  checkState(resolvedSuperType instanceof ParameterizedType,\n      \"could not resolve %s into a parameterized type %s\",\n      genericContext, supertype);\n  Type[] types = ParameterizedType.class.cast(resolvedSuperType).getActualTypeArguments();\n  for (int i = 0; i < types.length; i++) {\n    Type type = types[i];\n    if (type instanceof WildcardType) {\n      types[i] = ((WildcardType) type).getUpperBounds()[0];\n    }\n  }\n  return types[types.length - 1];\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Adapted from {@code com.google.common.io.ByteStreams.copy()}.\n */\n", "func_signal": "private static long copy(InputStream from, OutputStream to)\n    throws IOException", "code": "{\n  checkNotNull(from, \"from\");\n  checkNotNull(to, \"to\");\n  byte[] buf = new byte[BUF_SIZE];\n  long total = 0;\n  while (true) {\n    int r = from.read(buf);\n    if (r == -1) {\n      break;\n    }\n    to.write(buf, 0, r);\n    total += r;\n  }\n  return total;\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Returns an unmodifiable collection which may be empty, but is never null.\n */\n", "func_signal": "public static <T> Collection<T> valuesOrEmpty(Map<String, Collection<T>> map, String key)", "code": "{\n  Collection<T> values = map.get(key);\n  return values != null ? values : Collections.emptyList();\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/** Write the xml declaration if true. Default is true */\n", "func_signal": "public Builder withWriteXmlDeclaration(boolean writeXmlDeclaration)", "code": "{\n  this.writeXmlDeclaration = writeXmlDeclaration;\n  return this;\n}", "path": "feign/soap/src/main/java/feign/soap/SOAPEncoder.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Copy of {@code com.google.common.base.Preconditions#checkNotNull}.\n */\n", "func_signal": "public static <T> T checkNotNull(T reference,\n                                 String errorMessageTemplate,\n                                 Object... errorMessageArgs)", "code": "{\n  if (reference == null) {\n    // If either of these parameters is null, the right thing happens anyway\n    throw new NullPointerException(\n        format(errorMessageTemplate, errorMessageArgs));\n  }\n  return reference;\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/** Specify the charset encoding. Default is {@link Charset#defaultCharset()}. */\n", "func_signal": "public Builder withCharsetEncoding(Charset charsetEncoding)", "code": "{\n  this.charsetEncoding = charsetEncoding;\n  return this;\n}", "path": "feign/soap/src/main/java/feign/soap/SOAPEncoder.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * @param i individual parameter that should be ignored\n * @return this instance\n */\n", "func_signal": "public MethodMetadata ignoreParamater(int i)", "code": "{\n  this.parameterToIgnore.set(i);\n  return this;\n}", "path": "feign/core/src/main/java/feign/MethodMetadata.java", "commit_date": "2020-03-09 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Adapted from {@code com.google.common.io.CharStreams.toString()}.\n */\n", "func_signal": "public static String toString(Reader reader) throws IOException", "code": "{\n  if (reader == null) {\n    return null;\n  }\n  try {\n    StringBuilder to = new StringBuilder();\n    CharBuffer charBuf = CharBuffer.allocate(BUF_SIZE);\n    // must cast to super class Buffer otherwise break when running with java 11\n    Buffer buf = charBuf;\n    while (reader.read(charBuf) != -1) {\n      buf.flip();\n      to.append(charBuf);\n      buf.clear();\n    }\n    return to.toString();\n  } finally {\n    ensureClosed(reader);\n  }\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Adapted from {@code com.google.common.base.Strings#emptyToNull}.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type)", "code": "{\n  Collection<T> collection;\n  if (iterable instanceof Collection) {\n    collection = (Collection<T>) iterable;\n  } else {\n    collection = new ArrayList<T>();\n    for (T element : iterable) {\n      collection.add(element);\n    }\n  }\n  T[] array = (T[]) Array.newInstance(type, collection.size());\n  return collection.toArray(array);\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * @param index\n * @return true if the parameter {@code index} was already consumed by a any\n *         {@link MethodMetadata} holder\n */\n", "func_signal": "public boolean isAlreadyProcessed(Integer index)", "code": "{\n  return index.equals(urlIndex)\n      || index.equals(bodyIndex)\n      || index.equals(headerMapIndex)\n      || index.equals(queryMapIndex)\n      || indexToName.containsKey(index)\n      || indexToExpanderClass.containsKey(index)\n      || indexToEncoded.containsKey(index)\n      || (indexToExpander != null && indexToExpander.containsKey(index))\n      || parameterToIgnore.get(index);\n}", "path": "feign/core/src/main/java/feign/MethodMetadata.java", "commit_date": "2020-03-09 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * The protocol used to create message factory. Default is \"SOAP 1.1 Protocol\".\n * \n * @param soapProtocol a string constant representing the MessageFactory protocol.\n * \n * @see SOAPConstants#SOAP_1_1_PROTOCOL\n * @see SOAPConstants#SOAP_1_2_PROTOCOL\n * @see SOAPConstants#DYNAMIC_SOAP_PROTOCOL\n * @see MessageFactory#newInstance(String)\n */\n", "func_signal": "public Builder withSOAPProtocol(String soapProtocol)", "code": "{\n  this.soapProtocol = soapProtocol;\n  return this;\n}", "path": "feign/soap/src/main/java/feign/soap/SOAPEncoder.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Build the Feign instance.\n *\n * @return a new Feign Instance.\n */\n", "func_signal": "@Override\npublic Feign build()", "code": "{\n  if (!(this.contract instanceof ReactiveDelegatingContract)) {\n    super.contract(new ReactiveDelegatingContract(this.contract));\n  } else {\n    super.contract(this.contract);\n  }\n  return super.build();\n}", "path": "feign/reactive/src/main/java/feign/reactive/ReactiveFeign.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * After {@link #indexToExpanderClass} is populated, this is set by contracts that support runtime\n * injection.\n */\n", "func_signal": "public MethodMetadata indexToExpander(Map<Integer, Expander> indexToExpander)", "code": "{\n  this.indexToExpander = indexToExpander;\n  return this;\n}", "path": "feign/core/src/main/java/feign/MethodMetadata.java", "commit_date": "2020-03-09 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Identifies a method as a default instance method.\n */\n", "func_signal": "public static boolean isDefault(Method method)", "code": "{\n  // Default methods are public non-abstract, non-synthetic, and non-static instance methods\n  // declared in an interface.\n  // method.isDefault() is not sufficient for our usage as it does not check\n  // for synthetic methods. As a result, it picks up overridden methods as well as actual default\n  // methods.\n  final int SYNTHETIC = 0x00001000;\n  return ((method.getModifiers()\n      & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC | SYNTHETIC)) == Modifier.PUBLIC)\n      && method.getDeclaringClass().isInterface();\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/** Output format indent if true. Default is false */\n", "func_signal": "public Builder withFormattedOutput(boolean formattedOutput)", "code": "{\n  this.formattedOutput = formattedOutput;\n  return this;\n}", "path": "feign/soap/src/main/java/feign/soap/SOAPEncoder.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Copy of {@code com.google.common.base.Preconditions#checkArgument}.\n */\n", "func_signal": "public static void checkArgument(boolean expression,\n                                 String errorMessageTemplate,\n                                 Object... errorMessageArgs)", "code": "{\n  if (!expression) {\n    throw new IllegalArgumentException(\n        format(errorMessageTemplate, errorMessageArgs));\n  }\n}", "path": "feign/core/src/main/java/feign/Util.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/**\n * Extend the current contract to support Reactive Stream return types.\n *\n * @param contract to extend.\n * @return a Builder for chaining.\n */\n", "func_signal": "@Override\npublic Builder contract(Contract contract)", "code": "{\n  this.contract = contract;\n  return this;\n}", "path": "feign/reactive/src/main/java/feign/reactive/ReactiveFeign.java", "commit_date": "2020-01-18 00:00:00", "repo_name": "OpenFeign/feign", "stars": 9203, "license": "apache-2.0", "language": "java", "size": 5823}
{"docstring": "/** Creates a decal using the region for texturing and the specified blending parameters for blending\n * \n * @param width Width of the decal in world units\n * @param height Height of the decal in world units\n * @param textureRegion TextureRegion to use\n * @param srcBlendFactor Source blend used by glBlendFunc\n * @param dstBlendFactor Destination blend used by glBlendFunc\n * @param material Custom decal material\n * @return Created decal */\n", "func_signal": "public static Decal newDecal (float width, float height, TextureRegion textureRegion, int srcBlendFactor, int dstBlendFactor,\n\tDecalMaterial material)", "code": "{\n\tDecal decal = new Decal(material);\n\tdecal.setTextureRegion(textureRegion);\n\tdecal.setBlending(srcBlendFactor, dstBlendFactor);\n\tdecal.dimensions.x = width;\n\tdecal.dimensions.y = height;\n\tdecal.setColor(1, 1, 1, 1);\n\treturn decal;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Resets the color map to the predefined colors. */\n", "func_signal": "public static void reset ()", "code": "{\n\tmap.clear();\n\tmap.put(\"CLEAR\", Color.CLEAR);\n\tmap.put(\"BLACK\", Color.BLACK);\n\n\tmap.put(\"WHITE\", Color.WHITE);\n\tmap.put(\"LIGHT_GRAY\", Color.LIGHT_GRAY);\n\tmap.put(\"GRAY\", Color.GRAY);\n\tmap.put(\"DARK_GRAY\", Color.DARK_GRAY);\n\n\tmap.put(\"BLUE\", Color.BLUE);\n\tmap.put(\"NAVY\", Color.NAVY);\n\tmap.put(\"ROYAL\", Color.ROYAL);\n\tmap.put(\"SLATE\", Color.SLATE);\n\tmap.put(\"SKY\", Color.SKY);\n\tmap.put(\"CYAN\", Color.CYAN);\n\tmap.put(\"TEAL\", Color.TEAL);\n\n\tmap.put(\"GREEN\", Color.GREEN);\n\tmap.put(\"CHARTREUSE\", Color.CHARTREUSE);\n\tmap.put(\"LIME\", Color.LIME);\n\tmap.put(\"FOREST\", Color.FOREST);\n\tmap.put(\"OLIVE\", Color.OLIVE);\n\n\tmap.put(\"YELLOW\", Color.YELLOW);\n\tmap.put(\"GOLD\", Color.GOLD);\n\tmap.put(\"GOLDENROD\", Color.GOLDENROD);\n\tmap.put(\"ORANGE\", Color.ORANGE);\n\n\tmap.put(\"BROWN\", Color.BROWN);\n\tmap.put(\"TAN\", Color.TAN);\n\tmap.put(\"FIREBRICK\", Color.FIREBRICK);\n\n\tmap.put(\"RED\", Color.RED);\n\tmap.put(\"SCARLET\", Color.SCARLET);\n\tmap.put(\"CORAL\", Color.CORAL);\n\tmap.put(\"SALMON\", Color.SALMON);\n\tmap.put(\"PINK\", Color.PINK);\n\tmap.put(\"MAGENTA\", Color.MAGENTA);\n\n\tmap.put(\"PURPLE\", Color.PURPLE);\n\tmap.put(\"VIOLET\", Color.VIOLET);\n\tmap.put(\"MAROON\", Color.MAROON);\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/Colors.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets the rotation on the local X axis to the specified angle\n * \n * @param angle Angle in degrees to set rotation to */\n", "func_signal": "public void setRotationX (float angle)", "code": "{\n\trotation.set(Vector3.X, angle);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Creates a decal using the region for texturing\n * \n * @param width Width of the decal in world units\n * @param height Height of the decal in world units\n * @param textureRegion TextureRegion to use\n * @param hasTransparency Whether or not this sprite will be treated as having transparency (transparent png, etc.)\n * @return Created decal */\n", "func_signal": "public static Decal newDecal (float width, float height, TextureRegion textureRegion, boolean hasTransparency)", "code": "{\n\treturn newDecal(width, height, textureRegion, hasTransparency ? GL20.GL_SRC_ALPHA : DecalMaterial.NO_BLEND,\n\t\thasTransparency ? GL20.GL_ONE_MINUS_SRC_ALPHA : DecalMaterial.NO_BLEND);\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets the rotation on the local Y axis to the specified angle\n * \n * @param angle Angle in degrees to set rotation to */\n", "func_signal": "public void setRotationY (float angle)", "code": "{\n\trotation.set(Vector3.Y, angle);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Re-applies the uv coordinates from the material's texture region to the uv components of the vertices array */\n", "func_signal": "protected void updateUVs ()", "code": "{\n\tTextureRegion tr = material.textureRegion;\n\t// left top\n\tvertices[U1] = tr.getU();\n\tvertices[V1] = tr.getV();\n\t// right top\n\tvertices[U2] = tr.getU2();\n\tvertices[V2] = tr.getV();\n\t// left bot\n\tvertices[U3] = tr.getU();\n\tvertices[V3] = tr.getV2();\n\t// right bot\n\tvertices[U4] = tr.getU2();\n\tvertices[V4] = tr.getV2();\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Creates a decal assuming the dimensions of the texture region and adding transparency\n * \n * @param textureRegion Texture region to use\n * @param hasTransparency Whether or not this sprite will be treated as having transparency (transparent png, etc.)\n * @return Created decal */\n", "func_signal": "public static Decal newDecal (TextureRegion textureRegion, boolean hasTransparency)", "code": "{\n\treturn newDecal(textureRegion.getRegionWidth(), textureRegion.getRegionHeight(), textureRegion,\n\t\thasTransparency ? GL20.GL_SRC_ALPHA : DecalMaterial.NO_BLEND, hasTransparency ? GL20.GL_ONE_MINUS_SRC_ALPHA\n\t\t\t: DecalMaterial.NO_BLEND);\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets scale along the y axis\n * \n * @param scale New scale along y axis */\n", "func_signal": "public void setScaleY (float scale)", "code": "{\n\tthis.scale.y = scale;\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets the color of this decal, expanding the alpha from 0-254 to 0-255.\n * @see #setColor(Color) */\n", "func_signal": "public void setPackedColor (float color)", "code": "{\n\tColor.abgr8888ToColor(this.color, color);\n\tvertices[C1] = color;\n\tvertices[C2] = color;\n\tvertices[C3] = color;\n\tvertices[C4] = color;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Recalculates vertices array if it grew out of sync with the properties (position, ..) */\n", "func_signal": "protected void update ()", "code": "{\n\tif (!updated) {\n\t\tresetVertices();\n\t\ttransformVertices();\n\t}\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Resets the position components of the vertices array based ont he dimensions (preparation for transformation) */\n", "func_signal": "protected void resetVertices ()", "code": "{\n\tfloat left = -dimensions.x / 2f;\n\tfloat right = left + dimensions.x;\n\tfloat top = dimensions.y / 2f;\n\tfloat bottom = top - dimensions.y;\n\n\t// left top\n\tvertices[X1] = left;\n\tvertices[Y1] = top;\n\tvertices[Z1] = 0;\n\t// right top\n\tvertices[X2] = right;\n\tvertices[Y2] = top;\n\tvertices[Z2] = 0;\n\t// left bot\n\tvertices[X3] = left;\n\tvertices[Y3] = bottom;\n\tvertices[Z3] = 0;\n\t// right bot\n\tvertices[X4] = right;\n\tvertices[Y4] = bottom;\n\tvertices[Z4] = 0;\n\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets scale along both the x and y axis\n * \n * @param scale New scale */\n", "func_signal": "public void setScale (float scale)", "code": "{\n\tthis.scale.set(scale, scale);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Rotates along local X axis by the specified angle\n * \n * @param angle Angle in degrees to rotate by */\n", "func_signal": "public void rotateX (float angle)", "code": "{\n\trotator.set(Vector3.X, angle);\n\trotation.mul(rotator);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets the position to the given world coordinates\n * \n * @param x X position\n * @param y Y Position\n * @param z Z Position */\n", "func_signal": "public void setPosition (float x, float y, float z)", "code": "{\n\tthis.position.set(x, y, z);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets scale along both the x and y axis\n * \n * @param scaleX Scale on the x axis\n * @param scaleY Scale on the y axis */\n", "func_signal": "public void setScale (float scaleX, float scaleY)", "code": "{\n\tthis.scale.set(scaleX, scaleY);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets the position on the y axis\n * \n * @param y Position to locate the decal at */\n", "func_signal": "public void setY (float y)", "code": "{\n\tthis.position.y = y;\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Translates by the specified amount of units\n * \n * @param x Units to move along the x axis\n * @param y Units to move along the y axis\n * @param z Units to move along the z axis */\n", "func_signal": "public void translate (float x, float y, float z)", "code": "{\n\tthis.position.add(x, y, z);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Construct a new btConeTwistConstraint, normally you should not need this constructor it's intended for low-level usage. */\n", "func_signal": "public btConeTwistConstraint(long cPtr, boolean cMemoryOwn)", "code": "{\n\tthis(\"btConeTwistConstraint\", cPtr, cMemoryOwn);\n\tconstruct();\n}", "path": "libgdx/extensions/gdx-bullet/jni/swig-src/dynamics/com/badlogic/gdx/physics/bullet/dynamics/btConeTwistConstraint.java", "commit_date": "2017-11-09 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** Sets the height in world units\n * \n * @param height Height in world units */\n", "func_signal": "public void setHeight (float height)", "code": "{\n\tthis.dimensions.y = height;\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** @see Decal#translate(float, float, float) */\n", "func_signal": "public void translate (Vector3 trans)", "code": "{\n\tthis.position.add(trans);\n\tupdated = false;\n}", "path": "libgdx/gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java", "commit_date": "2020-10-11 00:00:00", "repo_name": "libgdx/libgdx", "stars": 22534, "license": "apache-2.0", "language": "java", "size": 1102790}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void setMetricRegistry(Object metricRegistry)", "code": "{\n   boolean isAlreadySet = getMetricRegistry() != null;\n   super.setMetricRegistry(metricRegistry);\n\n   HikariPool p = pool;\n   if (p != null) {\n      if (isAlreadySet) {\n         throw new IllegalStateException(\"MetricRegistry can only be set one time\");\n      }\n      else {\n         p.setMetricRegistry(super.getMetricRegistry());\n      }\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void setLogWriter(PrintWriter out) throws SQLException", "code": "{\n   HikariPool p = pool;\n   if (p != null) {\n      p.getUnwrappedDataSource().setLogWriter(out);\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void setMetricsTrackerFactory(MetricsTrackerFactory metricsTrackerFactory)", "code": "{\n   boolean isAlreadySet = getMetricsTrackerFactory() != null;\n   super.setMetricsTrackerFactory(metricsTrackerFactory);\n\n   HikariPool p = pool;\n   if (p != null) {\n      if (isAlreadySet) {\n         throw new IllegalStateException(\"MetricsTrackerFactory can only be set one time\");\n      }\n      else {\n         p.setMetricsTrackerFactory(super.getMetricsTrackerFactory());\n      }\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Default constructor.  Setters are used to configure the pool.  Using\n * this constructor vs. {@link #HikariDataSource(HikariConfig)} will\n * result in {@link #getConnection()} performance that is slightly lower\n * due to lazy initialization checks.\n *\n * The first call to {@link #getConnection()} starts the pool.  Once the pool\n * is started, the configuration is \"sealed\" and no further configuration\n * changes are possible -- except via {@link HikariConfigMXBean} methods.\n */\n", "func_signal": "public HikariDataSource()", "code": "{\n   super();\n   fastPathPool = null;\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Execute isValid() or connection test query.\n *\n * @param connection a Connection to check\n */\n", "func_signal": "private void checkDriverSupport(final Connection connection) throws SQLException", "code": "{\n   if (!isValidChecked) {\n      checkValidationSupport(connection);\n      checkDefaultIsolation(connection);\n\n      isValidChecked = true;\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/PoolBase.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void setHealthCheckRegistry(Object healthCheckRegistry)", "code": "{\n   boolean isAlreadySet = getHealthCheckRegistry() != null;\n   super.setHealthCheckRegistry(healthCheckRegistry);\n\n   HikariPool p = pool;\n   if (p != null) {\n      if (isAlreadySet) {\n         throw new IllegalStateException(\"HealthCheckRegistry can only be set one time\");\n      }\n      else {\n         p.setHealthCheckRegistry(super.getHealthCheckRegistry());\n      }\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void insertRow() throws SQLException", "code": "{\n   connection.markCommitStateDirty();\n   delegate.insertRow();\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/ProxyResultSet.java", "commit_date": "2017-02-10 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic boolean isWrapperFor(Class<?> iface) throws SQLException", "code": "{\n   if (iface.isInstance(this)) {\n      return true;\n   }\n\n   HikariPool p = pool;\n   if (p != null) {\n      final DataSource unwrappedDataSource = p.getUnwrappedDataSource();\n      if (iface.isInstance(unwrappedDataSource)) {\n         return true;\n      }\n\n      if (unwrappedDataSource != null) {\n         return unwrappedDataSource.isWrapperFor(iface);\n      }\n   }\n\n   return false;\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void updateRow() throws SQLException", "code": "{\n   connection.markCommitStateDirty();\n   delegate.updateRow();\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/ProxyResultSet.java", "commit_date": "2017-02-10 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Set the network timeout, if <code>isUseNetworkTimeout</code> is <code>true</code> and the\n * driver supports it.\n *\n * @param connection the connection to set the network timeout on\n * @param timeoutMs the number of milliseconds before timeout\n * @throws SQLException throw if the connection.setNetworkTimeout() call throws\n */\n", "func_signal": "private void setNetworkTimeout(final Connection connection, final long timeoutMs) throws SQLException", "code": "{\n   if (isNetworkTimeoutSupported == TRUE) {\n      connection.setNetworkTimeout(netTimeoutExecutor, (int) timeoutMs);\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/PoolBase.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n *  Generate Javassist Proxy Classes\n */\n", "func_signal": "private static <T> void generateProxyClass(Class<T> primaryInterface, String superClassName, String methodBody) throws Exception", "code": "{\n   String newClassName = superClassName.replaceAll(\"(.+)\\\\.(\\\\w+)\", \"$1.Hikari$2\");\n\n   CtClass superCt = classPool.getCtClass(superClassName);\n   CtClass targetCt = classPool.makeClass(newClassName, superCt);\n   targetCt.setModifiers(Modifier.FINAL);\n\n   System.out.println(\"Generating \" + newClassName);\n\n   targetCt.setModifiers(Modifier.PUBLIC);\n\n   // Make a set of method signatures we inherit implementation for, so we don't generate delegates for these\n   Set<String> superSigs = new HashSet<>();\n   for (CtMethod method : superCt.getMethods()) {\n      if ((method.getModifiers() & Modifier.FINAL) == Modifier.FINAL) {\n         superSigs.add(method.getName() + method.getSignature());\n      }\n   }\n\n   Set<String> methods = new HashSet<>();\n   for (Class<?> intf : getAllInterfaces(primaryInterface)) {\n      CtClass intfCt = classPool.getCtClass(intf.getName());\n      targetCt.addInterface(intfCt);\n      for (CtMethod intfMethod : intfCt.getDeclaredMethods()) {\n         final String signature = intfMethod.getName() + intfMethod.getSignature();\n\n         // don't generate delegates for methods we override\n         if (superSigs.contains(signature)) {\n            continue;\n         }\n\n         // Ignore already added methods that come from other interfaces\n         if (methods.contains(signature)) {\n            continue;\n         }\n\n         // Track what methods we've added\n         methods.add(signature);\n\n         // Clone the method we want to inject into\n         CtMethod method = CtNewMethod.copy(intfMethod, targetCt, null);\n\n         String modifiedBody = methodBody;\n\n         // If the super-Proxy has concrete methods (non-abstract), transform the call into a simple super.method() call\n         CtMethod superMethod = superCt.getMethod(intfMethod.getName(), intfMethod.getSignature());\n         if ((superMethod.getModifiers() & Modifier.ABSTRACT) != Modifier.ABSTRACT && !isDefaultMethod(intf, intfMethod)) {\n            modifiedBody = modifiedBody.replace(\"((cast) \", \"\");\n            modifiedBody = modifiedBody.replace(\"delegate\", \"super\");\n            modifiedBody = modifiedBody.replace(\"super)\", \"super\");\n         }\n\n         modifiedBody = modifiedBody.replace(\"cast\", primaryInterface.getName());\n\n         // Generate a method that simply invokes the same method on the delegate\n         if (isThrowsSqlException(intfMethod)) {\n            modifiedBody = modifiedBody.replace(\"method\", method.getName());\n         }\n         else {\n            modifiedBody = \"{ return ((cast) delegate).method($$); }\".replace(\"method\", method.getName()).replace(\"cast\", primaryInterface.getName());\n         }\n\n         if (method.getReturnType() == CtClass.voidType) {\n            modifiedBody = modifiedBody.replace(\"return\", \"\");\n         }\n\n         method.setBody(modifiedBody);\n         targetCt.addMethod(method);\n      }\n   }\n\n   targetCt.getClassFile().setMajorVersion(ClassFile.JAVA_8);\n   targetCt.writeFile(genDirectory + \"target/classes\");\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/util/JavassistProxyFactory.java", "commit_date": "2019-09-16 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Obtain connection from data source.\n *\n * @return a Connection connection\n */\n", "func_signal": "private Connection newConnection() throws Exception", "code": "{\n   final long start = currentTime();\n\n   Connection connection = null;\n   try {\n      String username = config.getUsername();\n      String password = config.getPassword();\n\n      connection = (username == null) ? dataSource.getConnection() : dataSource.getConnection(username, password);\n      if (connection == null) {\n         throw new SQLTransientConnectionException(\"DataSource returned null unexpectedly\");\n      }\n\n      setupConnection(connection);\n      lastConnectionFailure.set(null);\n      return connection;\n   }\n   catch (Exception e) {\n      if (connection != null) {\n         quietlyCloseConnection(connection, \"(Failed to create/setup connection)\");\n      }\n      else if (getLastConnectionFailure() == null) {\n         logger.debug(\"{} - Failed to create/setup connection: {}\", poolName, e.getMessage());\n      }\n\n      lastConnectionFailure.set(e);\n      throw e;\n   }\n   finally {\n      // tracker will be null during failFast check\n      if (metricsTracker != null) {\n         metricsTracker.recordConnectionCreated(elapsedMillis(start));\n      }\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/PoolBase.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Shutdown the DataSource and its associated pool.\n */\n", "func_signal": "@Override\npublic void close()", "code": "{\n   if (isShutdown.getAndSet(true)) {\n      return;\n   }\n\n   HikariPool p = pool;\n   if (p != null) {\n      try {\n         LOGGER.info(\"{} - Shutdown initiated...\", getPoolName());\n         p.shutdown();\n         LOGGER.info(\"{} - Shutdown completed.\", getPoolName());\n      }\n      catch (InterruptedException e) {\n         LOGGER.warn(\"{} - Interrupted during closing\", getPoolName(), e);\n         Thread.currentThread().interrupt();\n      }\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic final <T> T unwrap(Class<T> iface) throws SQLException", "code": "{\n   if (iface.isInstance(delegate)) {\n      return (T) delegate;\n   }\n   else if (delegate != null) {\n       return delegate.unwrap(iface);\n   }\n\n   throw new SQLException(\"Wrapped ResultSet is not an instance of \" + iface);\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/ProxyResultSet.java", "commit_date": "2017-02-10 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Setup a connection initial state.\n *\n * @param connection a Connection\n * @throws ConnectionSetupException thrown if any exception is encountered\n */\n", "func_signal": "private void setupConnection(final Connection connection) throws ConnectionSetupException", "code": "{\n   try {\n      if (networkTimeout == UNINITIALIZED) {\n         networkTimeout = getAndSetNetworkTimeout(connection, validationTimeout);\n      }\n      else {\n         setNetworkTimeout(connection, validationTimeout);\n      }\n\n      if (connection.isReadOnly() != isReadOnly) {\n         connection.setReadOnly(isReadOnly);\n      }\n\n      if (connection.getAutoCommit() != isAutoCommit) {\n         connection.setAutoCommit(isAutoCommit);\n      }\n\n      checkDriverSupport(connection);\n\n      if (transactionIsolation != defaultTransactionIsolation) {\n         connection.setTransactionIsolation(transactionIsolation);\n      }\n\n      if (catalog != null) {\n         connection.setCatalog(catalog);\n      }\n\n      if (schema != null) {\n         connection.setSchema(schema);\n      }\n\n      executeSql(connection, config.getConnectionInitSql(), true);\n\n      setNetworkTimeout(connection, networkTimeout);\n   }\n   catch (SQLException e) {\n      throw new ConnectionSetupException(e);\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/PoolBase.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void setLoginTimeout(int seconds) throws SQLException", "code": "{\n   HikariPool p = pool;\n   if (p != null) {\n      p.getUnwrappedDataSource().setLoginTimeout(seconds);\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Set the network timeout, if <code>isUseNetworkTimeout</code> is <code>true</code> and the\n * driver supports it.  Return the pre-existing value of the network timeout.\n *\n * @param connection the connection to set the network timeout on\n * @param timeoutMs the number of milliseconds before timeout\n * @return the pre-existing network timeout value\n */\n", "func_signal": "private int getAndSetNetworkTimeout(final Connection connection, final long timeoutMs)", "code": "{\n   if (isNetworkTimeoutSupported != FALSE) {\n      try {\n         final int originalTimeout = connection.getNetworkTimeout();\n         connection.setNetworkTimeout(netTimeoutExecutor, (int) timeoutMs);\n         isNetworkTimeoutSupported = TRUE;\n         return originalTimeout;\n      }\n      catch (Exception | AbstractMethodError e) {\n         if (isNetworkTimeoutSupported == UNINITIALIZED) {\n            isNetworkTimeoutSupported = FALSE;\n\n            logger.info(\"{} - Driver does not support get/set network timeout for connections. ({})\", poolName, e.getMessage());\n            if (validationTimeout < SECONDS.toMillis(1)) {\n               logger.warn(\"{} - A validationTimeout of less than 1 second cannot be honored on drivers without setNetworkTimeout() support.\", poolName);\n            }\n            else if (validationTimeout % SECONDS.toMillis(1) != 0) {\n               logger.warn(\"{} - A validationTimeout with fractional second granularity cannot be honored on drivers without setNetworkTimeout() support.\", poolName);\n            }\n         }\n      }\n   }\n\n   return 0;\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/PoolBase.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Construct a HikariDataSource with the specified configuration.  The\n * {@link HikariConfig} is copied and the pool is started by invoking this\n * constructor.\n *\n * The {@link HikariConfig} can be modified without affecting the HikariDataSource\n * and used to initialize another HikariDataSource instance.\n *\n * @param configuration a HikariConfig instance\n */\n", "func_signal": "public HikariDataSource(HikariConfig configuration)", "code": "{\n   configuration.validate();\n   configuration.copyStateTo(this);\n\n   LOGGER.info(\"{} - Starting...\", configuration.getPoolName());\n   pool = fastPathPool = new HikariPool(this);\n   LOGGER.info(\"{} - Start completed.\", configuration.getPoolName());\n\n   this.seal();\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/HikariDataSource.java", "commit_date": "2018-10-20 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Execute the user-specified init SQL.\n *\n * @param connection the connection to initialize\n * @param sql the SQL to execute\n * @param isCommit whether to commit the SQL after execution or not\n * @throws SQLException throws if the init SQL execution fails\n */\n", "func_signal": "private void executeSql(final Connection connection, final String sql, final boolean isCommit) throws SQLException", "code": "{\n   if (sql != null) {\n      try (Statement statement = connection.createStatement()) {\n         // connection was created a few milliseconds before, so set query timeout is omitted (we assume it will succeed)\n         statement.execute(sql);\n      }\n\n      if (isIsolateInternalQueries && !isAutoCommit) {\n         if (isCommit) {\n            connection.commit();\n         }\n         else {\n            connection.rollback();\n         }\n      }\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/PoolBase.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Set the query timeout, if it is supported by the driver.\n *\n * @param statement a statement to set the query timeout on\n * @param timeoutSec the number of seconds before timeout\n */\n", "func_signal": "private void setQueryTimeout(final Statement statement, final int timeoutSec)", "code": "{\n   if (isQueryTimeoutSupported != FALSE) {\n      try {\n         statement.setQueryTimeout(timeoutSec);\n         isQueryTimeoutSupported = TRUE;\n      }\n      catch (Exception e) {\n         if (isQueryTimeoutSupported == UNINITIALIZED) {\n            isQueryTimeoutSupported = FALSE;\n            logger.info(\"{} - Failed to set query timeout for statement. ({})\", poolName, e.getMessage());\n         }\n      }\n   }\n}", "path": "HikariCP/src/main/java/com/zaxxer/hikari/pool/PoolBase.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "brettwooldridge/HikariCP", "stars": 19233, "license": "apache-2.0", "language": "java", "size": 4786}
{"docstring": "/**\n * Returns a possibly brighter component for a color.\n *\n * @param i An RGB component for a color (0-255).\n * @return A possibly brighter value for the component.\n */\n", "func_signal": "private static final int possiblyBrighter(int i)", "code": "{\n    if (i<255) {\n        i += (int)((255-i)*0.6f);\n    }\n    return i;\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Sets the color to use when painting the caret marker.\n *\n * @param color The new caret marker color.\n * @see #getCaretMarkerColor()\n */\n", "func_signal": "public void setCaretMarkerColor(Color color)", "code": "{\n    if (color!=null) {\n        caretMarkerColor = color;\n        listener.caretUpdate(null); // Force repaint\n    }\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Sets whether marked occurrences are shown in this error strip.\n *\n * @param show Whether to show marked occurrences.\n * @see #getShowMarkedOccurrences()\n */\n", "func_signal": "public void setShowMarkedOccurrences(boolean show)", "code": "{\n    if (show!=showMarkedOccurrences) {\n        showMarkedOccurrences = show;\n        if (isDisplayable()) { // Skip this when we're first created\n            refreshMarkers();\n        }\n    }\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Toggles whether the caret's current location should be drawn.\n *\n * @param follow Whether the caret's current location should be followed.\n * @see #getFollowCaret()\n */\n", "func_signal": "public void setFollowCaret(boolean follow)", "code": "{\n    if (followCaret!=follow) {\n        if (followCaret) {\n            repaint(0,caretLineY, getWidth(),2); // Erase\n        }\n        caretLineY = -1;\n        lastLineY = -1;\n        followCaret = follow;\n        listener.caretUpdate(null); // Possibly repaint\n    }\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Sets the minimum severity a parser notice must be for it to be displayed\n * in this error strip.  This should be one of the constants defined in\n * the <code>ParserNotice</code> class.  The default value is\n * {@link ParserNotice.Level#WARNING}.\n *\n * @param level The new severity threshold.\n * @see #getLevelThreshold()\n * @see ParserNotice\n */\n", "func_signal": "public void setLevelThreshold(ParserNotice.Level level)", "code": "{\n    levelThreshold = level;\n    if (isDisplayable()) {\n        refreshMarkers();\n    }\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Added for JD-GUI.\n *\n * Returns a \"brighter\" color.\n *\n * @param c The color.\n * @return A brighter color.\n */\n", "func_signal": "private Color getDarkerColor(Color c)", "code": "{\n    if (darkerColors==null) {\n        darkerColors = new HashMap<Color, Color>(5); // Usually small\n    }\n    Color darker = darkerColors.get(c);\n    if (darker==null) {\n        // Don't use c.brighter() as it doesn't work well for blue, and\n        // also doesn't return something brighter \"enough.\"\n        int r = possiblyDarker(c.getRed());\n        int g = possiblyDarker(c.getGreen());\n        int b = possiblyDarker(c.getBlue());\n        darker = new Color(r, g, b);\n        darkerColors.put(c, darker);\n    }\n    return darker;\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Overridden so we only start listening for parser notices when this\n * component (and presumably the text area) are visible.\n */\n", "func_signal": "@Override\npublic void addNotify()", "code": "{\n    super.addNotify();\n    textArea.addCaretListener(listener);\n    textArea.addPropertyChangeListener(\n            RSyntaxTextArea.PARSER_NOTICES_PROPERTY, listener);\n    textArea.addPropertyChangeListener(\n            RSyntaxTextArea.MARK_OCCURRENCES_PROPERTY, listener);\n    textArea.addPropertyChangeListener(\n            RSyntaxTextArea.MARKED_OCCURRENCES_CHANGED_PROPERTY, listener);\n    textArea.addPropertyChangeListener(\n            RSyntaxTextArea.MARK_ALL_OCCURRENCES_CHANGED_PROPERTY, listener);\n    refreshMarkers();\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "// --- ContentSavable --- //\n", "func_signal": "public String getFileName()", "code": "{\n    String path = entry.getPath();\n    int index = path.lastIndexOf('/');\n    return path.substring(index+1);\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/WebXmlFilePage.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Refreshes the markers displayed in this error strip.\n */\n", "func_signal": "private void refreshMarkers()", "code": "{\n\n    removeAll(); // listener is removed in Marker.removeNotify()\n    Map<Integer, Marker> markerMap = new HashMap<Integer, Marker>();\n\n    List<ParserNotice> notices = textArea.getParserNotices();\n    for (ParserNotice notice : notices) {\n        if (notice.getLevel().isEqualToOrWorseThan(levelThreshold) ||\n                (notice instanceof TaskNotice)) {\n            Integer key = Integer.valueOf(notice.getLine());\n            Marker m = markerMap.get(key);\n            if (m==null) {\n                m = new Marker(notice);\n                m.addMouseListener(listener);\n                markerMap.put(key, m);\n                add(m);\n            }\n            else {\n                m.addNotice(notice);\n            }\n        }\n    }\n\n    if (getShowMarkedOccurrences() && textArea.getMarkOccurrences()) {\n        List<DocumentRange> occurrences = textArea.getMarkedOccurrences();\n        addMarkersForRanges(occurrences, markerMap, textArea.getMarkOccurrencesColor());\n    }\n\n    if (getShowMarkAll() /*&& textArea.getMarkAll()*/) {\n        Color markAllColor = textArea.getMarkAllHighlightColor();\n        List<DocumentRange> ranges = textArea.getMarkAllHighlightRanges();\n        addMarkersForRanges(ranges, markerMap, markAllColor);\n    }\n\n    revalidate();\n    repaint();\n\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Adds markers for a list of ranges in the document.\n *\n * @param ranges The list of ranges in the document.\n * @param markerMap A mapping from line number to <code>Marker</code>.\n * @param color The color to use for the markers.\n */\n", "func_signal": "private void addMarkersForRanges(List<DocumentRange> ranges,\n                                 Map<Integer, Marker> markerMap, Color color)", "code": "{\n    for (DocumentRange range : ranges) {\n        int line = 0;\n        try {\n            line = textArea.getLineOfOffset(range.getStartOffset());\n        } catch (BadLocationException ble) { // Never happens\n            continue;\n        }\n        ParserNotice notice = new MarkedOccurrenceNotice(range, color);\n        Integer key = Integer.valueOf(line);\n        Marker m = markerMap.get(key);\n        if (m==null) {\n            m = new Marker(notice);\n            m.addMouseListener(listener);\n            markerMap.put(key, m);\n            add(m);\n        }\n        else {\n            if (!m.containsMarkedOccurence()) {\n                m.addNotice(notice);\n            }\n        }\n    }\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Dimension getPreferredSize()", "code": "{\n    int height = textArea.getPreferredScrollableViewportSize().height;\n    return new Dimension(PREFERRED_WIDTH, height);\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Returns a \"brighter\" color.\n *\n * @param c The color.\n * @return A brighter color.\n */\n", "func_signal": "private Color getBrighterColor(Color c)", "code": "{\n    if (brighterColors==null) {\n        brighterColors = new HashMap<Color, Color>(5); // Usually small\n    }\n    Color brighter = brighterColors.get(c);\n    if (brighter==null) {\n        // Don't use c.brighter() as it doesn't work well for blue, and\n        // also doesn't return something brighter \"enough.\"\n        int r = possiblyBrighter(c.getRed());\n        int g = possiblyBrighter(c.getGreen());\n        int b = possiblyBrighter(c.getBlue());\n        brighter = new Color(r, g, b);\n        brighterColors.put(c, brighter);\n    }\n    return brighter;\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Returns the line in the text area corresponding to a y-offset in this\n * component.\n *\n * @param y The y-offset.\n * @return The line.\n * @see #lineToY(int)\n */\n", "func_signal": "private final int yToLine(int y)", "code": "{\n    int line = -1;\n    int h = textArea.getVisibleRect().height;\n    if (y<h) {\n        float at = y/(float)h;\n        line = Math.round((textArea.getLineCount()-1)*at);\n    }\n    return line;\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void removeNotify()", "code": "{\n    super.removeNotify();\n    textArea.removeCaretListener(listener);\n    textArea.removePropertyChangeListener(\n            RSyntaxTextArea.PARSER_NOTICES_PROPERTY, listener);\n    textArea.removePropertyChangeListener(\n            RSyntaxTextArea.MARK_OCCURRENCES_PROPERTY, listener);\n    textArea.removePropertyChangeListener(\n            RSyntaxTextArea.MARKED_OCCURRENCES_CHANGED_PROPERTY, listener);\n    textArea.removePropertyChangeListener(\n            RSyntaxTextArea.MARK_ALL_OCCURRENCES_CHANGED_PROPERTY, listener);\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "// --- IndexesChangeListener --- //\n", "func_signal": "public void indexesChanged(Collection<Future<Indexes>> collectionOfFutureIndexes)", "code": "{\n    if (openTypeHierarchyView.isVisible()) {\n        // Update the list of containers\n        this.collectionOfFutureIndexes = collectionOfFutureIndexes;\n        // And refresh\n        openTypeHierarchyView.updateTree(collectionOfFutureIndexes);\n    }\n}", "path": "jd-gui/app/src/main/java/org/jd/gui/controller/OpenTypeHierarchyController.java", "commit_date": "2019-05-18 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "// --- IndexesChangeListener --- //\n", "func_signal": "public void indexesChanged(Collection<Future<Indexes>> collectionOfFutureIndexes)", "code": "{\n    // Update the list of containers\n    this.collectionOfFutureIndexes = collectionOfFutureIndexes;\n    // Refresh links\n    boolean refresh = false;\n\n    for (Map.Entry<Integer, HyperlinkData> entry : hyperlinks.entrySet()) {\n        TypeHyperlinkData data = (TypeHyperlinkData)entry.getValue();\n        boolean enabled;\n\n        if (data instanceof PathHyperlinkData) {\n            PathHyperlinkData d = (PathHyperlinkData)data;\n            enabled = searchEntry(this.entry.getContainer().getRoot(), d.path) != null;\n        } else {\n            String internalTypeName = data.internalTypeName;\n            enabled = IndexesUtil.containsInternalTypeName(collectionOfFutureIndexes, internalTypeName);\n        }\n\n        if (data.enabled != enabled) {\n            data.enabled = enabled;\n            refresh = true;\n        }\n    }\n\n    if (refresh) {\n        textArea.repaint();\n    }\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/WebXmlFilePage.java", "commit_date": "2019-04-17 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Manually manages layout since this component uses no layout manager.\n */\n", "func_signal": "@Override\npublic void doLayout()", "code": "{\n    for (int i=0; i<getComponentCount(); i++) {\n        Marker m = (Marker)getComponent(i);\n        m.updateLocation();\n    }\n    listener.caretUpdate(null); // Force recalculation of caret line pos\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Returns the y-offset in this component corresponding to a line in the\n * text component.\n *\n * @param line The line.\n * @return The y-offset.\n * @see #yToLine(int)\n */\n", "func_signal": "private int lineToY(int line)", "code": "{\n    int h = textArea.getVisibleRect().height;\n    float lineCount = textArea.getLineCount();\n    return (int)(((line-1)/(lineCount-1)) * h) - 2;\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Overridden to (possibly) draw the caret's position.\n *\n * @param g The graphics context.\n */\n", "func_signal": "@Override\nprotected void paintComponent(Graphics g)", "code": "{\n    super.paintComponent(g);\n    if (caretLineY>-1) {\n        g.setColor(getCaretMarkerColor());\n        g.fillRect(0, caretLineY, getWidth(), 2);\n    }\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic String getToolTipText(MouseEvent e)", "code": "{\n    String text = null;\n    int line = yToLine(e.getY());\n    if (line>-1) {\n        text = msg.getString(\"Line\");\n        text = MessageFormat.format(text, Integer.valueOf(line+1));\n    }\n    return text;\n}", "path": "jd-gui/services/src/main/java/org/jd/gui/view/component/RoundMarkErrorStrip.java", "commit_date": "2019-04-07 00:00:00", "repo_name": "java-decompiler/jd-gui", "stars": 13345, "license": "gpl-3.0", "language": "java", "size": 56989}
{"docstring": "/**\n * Given JoinGraph determine the order of joins between graph nodes\n * by traversing JoinGraph. Any graph traversal algorithm could be used\n * here (like BFS or DFS), but we use PriorityQueue to preserve\n * original JoinOrder as mush as it is possible. PriorityQueue returns\n * next nodes to join in order of their occurrence in original Plan.\n */\n", "func_signal": "public static List<Integer> getJoinOrder(JoinGraph graph)", "code": "{\n    ImmutableList.Builder<PlanNode> joinOrder = ImmutableList.builder();\n\n    Map<PlanNodeId, Integer> priorities = new HashMap<>();\n    for (int i = 0; i < graph.size(); i++) {\n        priorities.put(graph.getNode(i).getId(), i);\n    }\n\n    PriorityQueue<PlanNode> nodesToVisit = new PriorityQueue<>(\n            graph.size(),\n            comparing(node -> priorities.get(node.getId())));\n    Set<PlanNode> visited = new HashSet<>();\n\n    nodesToVisit.add(graph.getNode(0));\n\n    while (!nodesToVisit.isEmpty()) {\n        PlanNode node = nodesToVisit.poll();\n        if (!visited.contains(node)) {\n            visited.add(node);\n            joinOrder.add(node);\n            for (JoinGraph.Edge edge : graph.getEdges(node)) {\n                nodesToVisit.add(edge.getTargetNode());\n            }\n        }\n\n        if (nodesToVisit.isEmpty() && visited.size() < graph.size()) {\n            // disconnected graph, find new starting point\n            Optional<PlanNode> firstNotVisitedNode = graph.getNodes().stream()\n                    .filter(graphNode -> !visited.contains(graphNode))\n                    .findFirst();\n            if (firstNotVisitedNode.isPresent()) {\n                nodesToVisit.add(firstNotVisitedNode.get());\n            }\n        }\n    }\n\n    checkState(visited.size() == graph.size());\n    return joinOrder.build().stream()\n            .map(node -> priorities.get(node.getId()))\n            .collect(toImmutableList());\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/EliminateCrossJoins.java", "commit_date": "2020-08-04 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "//\n// Start http server for testing\n//\n", "func_signal": "@BeforeClass\npublic void setUp()\n        throws Exception", "code": "{\n    exampleHttpServer = new ExampleHttpServer();\n    dataUri = exampleHttpServer.resolve(\"/example-data/numbers-2.csv\");\n}", "path": "presto/presto-example-http/src/test/java/com/facebook/presto/example/TestExampleRecordSetProvider.java", "commit_date": "2020-05-06 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * @return If the node has outputs not in permittedOutputs, returns an identity projection containing only those node outputs also in permittedOutputs.\n */\n", "func_signal": "public static Optional<PlanNode> restrictOutputs(PlanNodeIdAllocator idAllocator, PlanNode node, Set<VariableReferenceExpression> permittedOutputs, boolean useRowExpression)", "code": "{\n    List<VariableReferenceExpression> restrictedOutputs = node.getOutputVariables().stream()\n            .filter(permittedOutputs::contains)\n            .collect(toImmutableList());\n\n    if (restrictedOutputs.size() == node.getOutputVariables().size()) {\n        return Optional.empty();\n    }\n\n    return Optional.of(\n            new ProjectNode(\n                    idAllocator.getNextId(),\n                    node,\n                    useRowExpression ? identityAssignments(restrictedOutputs) : identityAssignmentsAsSymbolReferences(restrictedOutputs),\n                    LOCAL));\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/Util.java", "commit_date": "2020-07-16 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "// Find matching constructor, if this is an instance method, and populate constructorDependencies\n", "func_signal": "private Optional<MethodHandle> getConstructor(Method method, Optional<Constructor<?>> optionalConstructor)", "code": "{\n    if (isStatic(method.getModifiers())) {\n        return Optional.empty();\n    }\n\n    checkArgument(optionalConstructor.isPresent(), \"Method [%s] is an instance method. It must be in a class annotated with @ScalarFunction, and the class is required to have a public constructor.\", method);\n    Constructor<?> constructor = optionalConstructor.get();\n    Set<TypeParameter> constructorTypeParameters = Stream.of(constructor.getAnnotationsByType(TypeParameter.class))\n            .collect(ImmutableSet.toImmutableSet());\n    checkArgument(constructorTypeParameters.containsAll(typeParameters), \"Method [%s] is an instance method and requires a public constructor containing all type parameters: %s\", method, typeParameters);\n\n    for (int i = 0; i < constructor.getParameterCount(); i++) {\n        Annotation[] annotations = constructor.getParameterAnnotations()[i];\n        checkArgument(containsImplementationDependencyAnnotation(annotations), \"Constructors may only have meta parameters [%s]\", constructor);\n        checkArgument(annotations.length == 1, \"Meta parameters may only have a single annotation [%s]\", constructor);\n        Annotation annotation = annotations[0];\n        if (annotation instanceof TypeParameter) {\n            checkTypeParameters(parseTypeSignature(((TypeParameter) annotation).value()), typeParameterNames, method);\n        }\n        constructorDependencies.add(createDependency(annotation, literalParameters));\n    }\n    MethodHandle result = constructorMethodHandle(FUNCTION_IMPLEMENTATION_ERROR, constructor);\n    // Change type of return value to Object to make sure callers won't have classloader issues\n    return Optional.of(result.asType(result.type().changeReturnType(Object.class)));\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/annotations/ParametricScalarImplementation.java", "commit_date": "2020-10-13 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Get the Slice starting at {@code offset} in the value at {@code internalPosition} with {@code length} bytes.\n *\n * @param internalPosition The physical position of the 128-bit integer in the values array.\n *                         For example, internalPosition = 1 refers to the 128-bit integer at values[2] and values[3]\n * @param offset The offset to the position in the unit of 128-bit integers.\n *                       For example, offset = 1 means the next position (one 128-bit integer or 16 bytes) to the specified position.\n *                       This means we always compare bytes starting at 128-bit integer boundaries.\n * @param length The length in bytes. It has to be a multiple of 16.\n */\n", "func_signal": "@Override\npublic Slice getSliceUnchecked(int internalPosition, int offset, int length)", "code": "{\n    int num128Integers = getNum128Integers(length);\n    return Slices.wrappedLongArray(values, (internalPosition + offset) * 2, num128Integers * 2);\n}", "path": "presto/presto-common/src/main/java/com/facebook/presto/common/block/Int128ArrayBlock.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Transforms a plan like P->C->X to C->P->X\n */\n", "func_signal": "public static PlanNode transpose(PlanNode parent, PlanNode child)", "code": "{\n    return child.replaceChildren(ImmutableList.of(\n            parent.replaceChildren(\n                    child.getSources())));\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/Util.java", "commit_date": "2020-07-16 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Is the byte sequences at the {@code position + offset} position in the 128-bit values of {@code length} bytes equal\n * to the byte sequence at {@code otherOffset} in {@code otherSlice}.\n *\n * @param position The position of 128-bit integer.\n * @param offset The offset to the position in the unit of 128-bit integers.\n * For example, offset = 1 means the next position (one 128-bit integer or 16 bytes) to the specified position.\n * This means we always compare starting at 128-bit integer boundaries.\n * @param otherSlice The slice to compare to.\n * @param otherOffset The offset in bytes to the start of otherSlice.\n * @param length The length to compare in bytes. It has to be a multiple of 16.\n * @return True if the bytes are the same, false otherwise.\n */\n", "func_signal": "@Override\npublic boolean bytesEqual(int position, int offset, Slice otherSlice, int otherOffset, int length)", "code": "{\n    int num128Integers = getNum128Integers(length);\n    checkValidRegion(positionCount, position + offset, num128Integers);\n    if (otherOffset < 0 || length < 0 || otherOffset + length > otherSlice.length()) {\n        throw new IllegalArgumentException(format(\"otherOffset %d, length %d are invalid for otherSlice with length %d\", otherOffset, length, otherSlice.length()));\n    }\n\n    int currentPosition = (position + offset + positionOffset) * 2;\n    for (int i = 0; i < num128Integers; i++) {\n        if (values[currentPosition] != otherSlice.getLong(otherOffset) || values[currentPosition + 1] != otherSlice.getLong(otherOffset + SIZE_OF_LONG)) {\n            return false;\n        }\n\n        currentPosition += 2;\n        otherOffset += SIZE_OF_LONG * 2;\n    }\n\n    return true;\n}", "path": "presto/presto-common/src/main/java/com/facebook/presto/common/block/Int128ArrayBlock.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Get the Slice starting at {@code this.positionOffset + offset} in the value at {@code position} with {@code length} bytes.\n *\n * @param position The logical position of the 128-bit integer in the values array.\n *                 For example, position = 0 refers to the 128-bit integer at values[2] and values[3] if this.positionOffset = 1.\n * @param offset The offset to the position in the unit of 128-bit integers.\n *               For example, offset = 1 means the next position (one 128-bit integer or 16 bytes) to the specified position.\n *               This means we always compare bytes starting at 128-bit integer boundaries.\n * @param length The length in bytes. It has to be a multiple of 16.\n */\n", "func_signal": "@Override\npublic Slice getSlice(int position, int offset, int length)", "code": "{\n    checkValidRegion(positionCount, offset, length / SIZE_OF_LONG / 2);\n    return getSliceUnchecked(position + positionOffset, offset, length);\n}", "path": "presto/presto-common/src/main/java/com/facebook/presto/common/block/Int128ArrayBlock.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Returns the corresponding wrapper type of {@code type} if it is a primitive\n * type; otherwise returns {@code type} itself. Idempotent.\n * <pre>\n *     wrap(int.class) == Integer.class\n *     wrap(Integer.class) == Integer.class\n *     wrap(String.class) == String.class\n * </pre>\n */\n", "func_signal": "public static <T> Class<T> wrap(Class<T> type)", "code": "{\n    requireNonNull(type);\n\n    // cast is safe: long.class and Long.class are both of type Class<Long>\n    @SuppressWarnings(\"unchecked\")\n    Class<T> wrapped = (Class<T>) PRIMITIVE_TO_WRAPPER_TYPE.get(type);\n    return (wrapped == null) ? type : wrapped;\n}", "path": "presto/presto-common/src/main/java/com/facebook/presto/common/predicate/Primitives.java", "commit_date": "2020-05-06 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * GlueHiveMetastore currently uses AWS Default Credential Provider Chain,\n * See https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default\n * on ways to set your AWS credentials which will be needed to run this test.\n */\n", "func_signal": "@Override\nprotected ExtendedHiveMetastore createMetastore(File tempDir)", "code": "{\n    HiveClientConfig hiveClientConfig = new HiveClientConfig();\n    MetastoreClientConfig metastoreClientConfig = new MetastoreClientConfig();\n    HdfsConfiguration hdfsConfiguration = new HiveHdfsConfiguration(new HdfsConfigurationInitializer(hiveClientConfig, metastoreClientConfig), ImmutableSet.of());\n    HdfsEnvironment hdfsEnvironment = new HdfsEnvironment(hdfsConfiguration, metastoreClientConfig, new NoHdfsAuthentication());\n    GlueHiveMetastoreConfig glueConfig = new GlueHiveMetastoreConfig();\n    glueConfig.setDefaultWarehouseDir(tempDir.toURI().toString());\n\n    return new GlueHiveMetastore(hdfsEnvironment, glueConfig, executor);\n}", "path": "presto/presto-hive/src/test/java/com/facebook/presto/hive/metastore/glue/TestHiveClientGlueMetastore.java", "commit_date": "2019-12-06 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Reserves the given number of bytes to spill. If more than the maximum, throws an exception.\n *\n * @throws ExceededSpillLimitException\n */\n", "func_signal": "public synchronized ListenableFuture<?> reserve(long bytes)", "code": "{\n    checkArgument(bytes >= 0, \"bytes is negative\");\n\n    if ((currentBytes + bytes) >= maxBytes) {\n        throw exceededLocalLimit(succinctBytes(maxBytes));\n    }\n    currentBytes += bytes;\n\n    return NOT_BLOCKED;\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/spiller/SpillSpaceTracker.java", "commit_date": "2017-07-24 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Returns the corresponding primitive type of {@code type} if it is a\n * wrapper type; otherwise returns {@code type} itself. Idempotent.\n * <pre>\n *     unwrap(Integer.class) == int.class\n *     unwrap(int.class) == int.class\n *     unwrap(String.class) == String.class\n * </pre>\n */\n", "func_signal": "public static <T> Class<T> unwrap(Class<T> type)", "code": "{\n    requireNonNull(type);\n\n    // cast is safe: long.class and Long.class are both of type Class<Long>\n    @SuppressWarnings(\"unchecked\")\n    Class<T> unwrapped = (Class<T>) WRAPPER_TO_PRIMITIVE_TYPE.get(type);\n    return (unwrapped == null) ? type : unwrapped;\n}", "path": "presto/presto-common/src/main/java/com/facebook/presto/common/predicate/Primitives.java", "commit_date": "2020-05-06 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * @param p: Point expected to be in earth spherical coordinates (Long, Lat)\n */\n", "func_signal": "public CartesianPoint(Point p)", "code": "{\n    // Angle from North Pole down to Latitude, in Radians\n    double phi = toRadians(90 - p.getY());\n    double sinPhi = Math.sin(phi);\n    // Angle from Greenwich to Longitude, in Radians\n    double theta = toRadians(p.getX());\n\n    x = EARTH_RADIUS_KM * sinPhi * Math.cos(theta);\n    y = EARTH_RADIUS_KM * sinPhi * Math.sin(theta);\n    z = EARTH_RADIUS_KM * Math.cos(phi);\n}", "path": "presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "commit_date": "2020-04-13 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n *\n * @param x in cartesian coordinate\n * @param y in cartesian coordinate\n * @param z in cartesian coordinate\n */\n", "func_signal": "public CartesianPoint(double x, double y, double z)", "code": "{\n    this.x = x;\n    this.y = y;\n    this.z = z;\n}", "path": "presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "commit_date": "2020-04-13 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * @return The original node, with identity projections possibly inserted between node and each child, limiting the columns to those permitted.\n * Returns a present Optional iff at least one child was rewritten.\n */\n", "func_signal": "@SafeVarargs\npublic static Optional<PlanNode> restrictChildOutputs(PlanNodeIdAllocator idAllocator, PlanNode node, Set<VariableReferenceExpression>... permittedChildOutputsArgs)", "code": "{\n    List<Set<VariableReferenceExpression>> permittedChildOutputs = ImmutableList.copyOf(permittedChildOutputsArgs);\n\n    checkArgument(\n            (node.getSources().size() == permittedChildOutputs.size()),\n            \"Mismatched child (%d) and permitted outputs (%d) sizes\",\n            node.getSources().size(),\n            permittedChildOutputs.size());\n\n    ImmutableList.Builder<PlanNode> newChildrenBuilder = ImmutableList.builder();\n    boolean rewroteChildren = false;\n\n    for (int i = 0; i < node.getSources().size(); ++i) {\n        PlanNode oldChild = node.getSources().get(i);\n        Optional<PlanNode> newChild = restrictOutputs(idAllocator, oldChild, permittedChildOutputs.get(i), false);\n        rewroteChildren |= newChild.isPresent();\n        newChildrenBuilder.add(newChild.orElse(oldChild));\n    }\n\n    if (!rewroteChildren) {\n        return Optional.empty();\n    }\n    return Optional.of(node.replaceChildren(newChildrenBuilder.build()));\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/Util.java", "commit_date": "2020-07-16 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Prune the set of available inputs to those required by the given expressions.\n * <p>\n * If all inputs are used, return Optional.empty() to indicate that no pruning is necessary.\n */\n", "func_signal": "public static Optional<Set<VariableReferenceExpression>> pruneInputs(\n        Collection<VariableReferenceExpression> availableInputs,\n        Collection<RowExpression> expressions,\n        TypeProvider types)", "code": "{\n    Set<VariableReferenceExpression> availableInputsSet = ImmutableSet.copyOf(availableInputs);\n    Set<VariableReferenceExpression> referencedInputs;\n    if (expressions.stream().allMatch(OriginalExpressionUtils::isExpression)) {\n        // TODO remove once all pruneInputs rules are below translateExpressions.\n        referencedInputs = VariablesExtractor.extractUnique(\n                expressions.stream().map(OriginalExpressionUtils::castToExpression).collect(toImmutableList()),\n                types);\n    }\n    else if (expressions.stream().noneMatch(OriginalExpressionUtils::isExpression)) {\n        referencedInputs = VariablesExtractor.extractUnique(expressions);\n    }\n    else {\n        throw new IllegalStateException(format(\"Expressions %s contains mixed Expression and RowExpression\", expressions));\n    }\n    Set<VariableReferenceExpression> prunedInputs;\n    prunedInputs = Sets.filter(availableInputsSet, referencedInputs::contains);\n\n    if (prunedInputs.size() == availableInputsSet.size()) {\n        return Optional.empty();\n    }\n\n    return Optional.of(prunedInputs);\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/Util.java", "commit_date": "2020-07-16 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Use createRowBlockInternal or fromFieldBlocks instead of this method.  The caller of this method is assumed to have\n * validated the arguments with validateConstructorArguments.\n */\n", "func_signal": "private RowBlock(int startOffset, int positionCount, @Nullable boolean[] rowIsNull, int[] fieldBlockOffsets, Block[] fieldBlocks)", "code": "{\n    super(fieldBlocks.length);\n\n    this.startOffset = startOffset;\n    this.positionCount = positionCount;\n    this.rowIsNull = rowIsNull;\n    this.fieldBlockOffsets = fieldBlockOffsets;\n    this.fieldBlocks = fieldBlocks;\n\n    this.sizeInBytes = -1;\n    this.logicalSizeInBytes = -1;\n    long retainedSizeInBytes = INSTANCE_SIZE + sizeOf(fieldBlockOffsets) + sizeOf(rowIsNull);\n    for (Block fieldBlock : fieldBlocks) {\n        retainedSizeInBytes += fieldBlock.getRetainedSizeInBytes();\n    }\n    this.retainedSizeInBytes = retainedSizeInBytes;\n}", "path": "presto/presto-common/src/main/java/com/facebook/presto/common/block/RowBlock.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Create a row block directly from columnar nulls and field blocks.\n */\n", "func_signal": "public static Block fromFieldBlocks(int positionCount, Optional<boolean[]> rowIsNull, Block[] fieldBlocks)", "code": "{\n    int[] fieldBlockOffsets = new int[positionCount + 1];\n    for (int position = 0; position < positionCount; position++) {\n        fieldBlockOffsets[position + 1] = fieldBlockOffsets[position] + (rowIsNull.isPresent() && rowIsNull.get()[position] ? 0 : 1);\n    }\n    validateConstructorArguments(0, positionCount, rowIsNull.orElse(null), fieldBlockOffsets, fieldBlocks);\n    return new RowBlock(0, positionCount, rowIsNull.orElse(null), fieldBlockOffsets, fieldBlocks);\n}", "path": "presto/presto-common/src/main/java/com/facebook/presto/common/block/RowBlock.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "// this is a separate method to ensure that the `this` reference is not leaked during construction\n", "func_signal": "private void initialize(Function<SqlTask, ?> onDone, CounterStat failedTasks)", "code": "{\n    requireNonNull(onDone, \"onDone is null\");\n    requireNonNull(failedTasks, \"failedTasks is null\");\n    taskStateMachine.addStateChangeListener(new StateChangeListener<TaskState>()\n    {\n        @Override\n        public void stateChanged(TaskState newState)\n        {\n            if (!newState.isDone()) {\n                return;\n            }\n\n            // Update failed tasks counter\n            if (newState == FAILED) {\n                failedTasks.update(1);\n            }\n\n            // store final task info\n            while (true) {\n                TaskHolder taskHolder = taskHolderReference.get();\n                if (taskHolder.isFinished()) {\n                    // another concurrent worker already set the final state\n                    return;\n                }\n\n                if (taskHolderReference.compareAndSet(taskHolder, new TaskHolder(createTaskInfo(taskHolder), taskHolder.getIoStats()))) {\n                    break;\n                }\n            }\n\n            // make sure buffers are cleaned up\n            if (newState == FAILED || newState == ABORTED) {\n                // don't close buffers for a failed query\n                // closed buffers signal to upstream tasks that everything finished cleanly\n                outputBuffer.fail();\n            }\n            else {\n                outputBuffer.destroy();\n            }\n\n            try {\n                onDone.apply(SqlTask.this);\n            }\n            catch (Exception e) {\n                log.warn(e, \"Error running task cleanup callback %s\", SqlTask.this.taskId);\n            }\n        }\n    });\n}", "path": "presto/presto-main/src/main/java/com/facebook/presto/execution/SqlTask.java", "commit_date": "2020-10-28 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Calculate the distance between two points on Earth.\n *\n * This assumes a spherical Earth, and uses the Vincenty formula.\n * (https://en.wikipedia.org/wiki/Great-circle_distance)\n */\n", "func_signal": "public static double greatCircleDistance(\n        double latitude1,\n        double longitude1,\n        double latitude2,\n        double longitude2)", "code": "{\n    checkLatitude(latitude1);\n    checkLongitude(longitude1);\n    checkLatitude(latitude2);\n    checkLongitude(longitude2);\n\n    double radianLatitude1 = toRadians(latitude1);\n    double radianLatitude2 = toRadians(latitude2);\n\n    double sin1 = sin(radianLatitude1);\n    double cos1 = cos(radianLatitude1);\n    double sin2 = sin(radianLatitude2);\n    double cos2 = cos(radianLatitude2);\n\n    double deltaLongitude = toRadians(longitude1) - toRadians(longitude2);\n    double cosDeltaLongitude = cos(deltaLongitude);\n\n    double t1 = cos2 * sin(deltaLongitude);\n    double t2 = cos1 * sin2 - sin1 * cos2 * cosDeltaLongitude;\n    double t3 = sin1 * sin2 + cos1 * cos2 * cosDeltaLongitude;\n    return atan2(sqrt(t1 * t1 + t2 * t2), t3) * EARTH_RADIUS_KM;\n}", "path": "presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "commit_date": "2020-04-13 00:00:00", "repo_name": "prestodb/presto", "stars": 15465, "license": "apache-2.0", "language": "java", "size": 208270}
{"docstring": "/**\n * Create a set with only one element.\n */\n", "func_signal": "public void makeSet(long data)", "code": "{\n    Node node = new Node();\n    node.data = data;\n    node.parent = node;\n    node.rank = 0;\n    map.put(data, node);\n}", "path": "interview/src/com/interview/graph/DisjointSet.java", "commit_date": "2016-03-30 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Use one queue and count to print level by level\n */\n", "func_signal": "public void levelByLevelOneQueueUsingCount(Node root)", "code": "{\n    if (root == null) {\n        return;\n    }\n    Queue<Node> q = new LinkedList<Node>();\n    int levelCount = 1;\n    int currentCount = 0;\n    q.offer(root);\n    while (!q.isEmpty()) {\n        while (levelCount > 0) {\n            root = q.poll();\n            System.out.print(root.data + \" \");\n            if (root.left != null) {\n                currentCount++;\n                q.offer(root.left);\n            }\n            if (root.right != null) {\n                currentCount++;\n                q.offer(root.right);\n            }\n            levelCount--;\n        }\n        System.out.println();\n        levelCount = currentCount;\n        currentCount = 0;\n    }\n}", "path": "interview/src/com/interview/tree/TreeTraversalLevelByLevel.java", "commit_date": "2015-07-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * -1 in the input means don't use that position\n * \n * @param k\n * @param input\n * @return\n */\n", "func_signal": "public int numberOfCombination(int k, int input[][])", "code": "{\n\tif (input == null || input.length == 0) {\n\t\tthrow new IllegalArgumentException();\n\t}\n\tMap<Integer, Integer> t = new HashMap<Integer, Integer>();\n\tMap<Integer, Integer> t1 = new HashMap<Integer, Integer>();\n\n\tfor (int i = 0; i < input.length; i++) {\n\t\tfor (int j = 0; j < input[i].length; j++) {\n\t\t\tif (input[i][j] < 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tt1.put(input[i][j], 1);\n\t\t}\n\t}\n\n\tfor (int x = 1; x < k; x++) {\n\t\tfor (int i = 0; i < input.length; i++) {\n\t\t\tfor (int j = 0; j < input[i].length; j++) {\n\t\t\t\tif (input[i][j] < 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfindNeighborsAndPopulateMap(i, j, input, t, t1);\n\t\t\t}\n\t\t}\n\t\tcopyMap(t, t1);\n\t\tt.clear();\n\t}\n\tint count = 0;\n\tfor (int i : t1.keySet()) {\n\t\tcount += t1.get(i);\n\t}\n\treturn count;\n}", "path": "interview/src/com/interview/dynamic/PhoneDialNumberOfCombinationOfSizeK.java", "commit_date": "2015-07-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * https://leetcode.com/problems/jump-game-ii/\n */\n", "func_signal": "public int jump(int[] nums)", "code": "{\n    if (nums.length == 1) {\n        return 0;\n    }\n    int count = 0;\n    int i = 0;\n    while (i + nums[i] < nums.length - 1) {\n        int maxVal = 0;\n        int maxValIndex = 0;\n        for (int j = 1; j <= nums[i]; j++) {\n            if (nums[j + i] + j > maxVal) {\n                maxVal = nums[j + i] + j;\n                maxValIndex = i + j;\n            }\n        }\n        i = maxValIndex;\n        count++;\n    }\n    return count + 1;\n}", "path": "interview/src/com/interview/dynamic/MinJumpToReachEnd.java", "commit_date": "2016-02-25 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "//prints the sequence of values and indexes\n", "func_signal": "public void printSequence(int pots[], Pair moves[][])", "code": "{\n    int i = 0;\n    int j = pots.length - 1;\n    int step;\n    for (int k = 0; k < pots.length; k++) {\n        step = moves[i][j].pick;\n        //this is the value of pick and its index\n        System.out.print(\"value: \" + pots[step] + \" \" + \"index: \" + step + \" \");\n        if (step <= i) {\n            i = i + 1;\n        } else {\n            j = j - 1;\n        }\n    }\n}", "path": "interview/src/com/interview/dynamic/NPotGold.java", "commit_date": "2015-11-23 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Space efficient DP solution\n */\n", "func_signal": "public int numberOfSolutionsOnSpace(int total, int arr[])", "code": "{\n\n    int temp[] = new int[total+1];\n\n    temp[0] = 1;\n    for(int i=0; i < arr.length; i++){\n        for(int j=1; j <= total ; j++){\n            if(j >= arr[i]){\n                temp[j] += temp[j-arr[i]];\n            }\n        }\n    }\n    return temp[total];\n}", "path": "interview/src/com/interview/dynamic/CoinChanging.java", "commit_date": "2016-03-13 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Solves 0/1 knapsack in top down DP\n */\n", "func_signal": "public int topDownRecursive(int values[], int weights[], int W)", "code": "{\n    //map of key(remainingWeight, remainingCount) to maximumValue they can get.\n    Map<Index, Integer> map = new HashMap<>();\n    return topDownRecursiveUtil(values, weights, W, values.length, 0, map);\n}", "path": "interview/src/com/interview/dynamic/Knapsack01.java", "commit_date": "2015-11-24 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Combines two sets together to one.\n * Does union by rank\n *\n * @return true if data1 and data2 are in different set before union else false.\n */\n", "func_signal": "public boolean union(long data1, long data2)", "code": "{\n    Node node1 = map.get(data1);\n    Node node2 = map.get(data2);\n\n    Node parent1 = findSet(node1);\n    Node parent2 = findSet(node2);\n\n    //if they are part of same set do nothing\n    if (parent1.data == parent2.data) {\n        return false;\n    }\n\n    //else whoever's rank is higher becomes parent of other\n    if (parent1.rank >= parent2.rank) {\n        //increment rank only if both sets have same rank\n        parent1.rank = (parent1.rank == parent2.rank) ? parent1.rank + 1 : parent1.rank;\n        parent2.parent = parent1;\n    } else {\n        parent1.parent = parent2;\n    }\n    return true;\n}", "path": "interview/src/com/interview/graph/DisjointSet.java", "commit_date": "2016-03-30 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "//we keep track of first char of the chain and the end compare that with last char of last element of the chain\n", "func_signal": "private boolean formCircle(String input[], List<String> result,boolean used[],char firstChar)", "code": "{\n    if(input.length == result.size()){\n        String str = result.get(result.size()-1);\n        if(firstChar == str.charAt(str.length()-1)){\n            return true;\n        }\n        return false;\n    }\n    String str = result.get(result.size()-1);\n    char lastChar = str.charAt(str.length()-1);\n    for(int i=1; i < input.length; i++){\n        if(used[i]){\n            continue;\n     \n        }\n        if(lastChar == input[i].charAt(0)){\n            used[i] = true;\n            result.add(input[i]);\n            boolean r = formCircle(input,result,used,firstChar);\n            if(r){\n                return true;\n            }\n            used[i] = false;\n            result.remove(result.size()-1);\n        }\n        \n    }\n    return false;\n}", "path": "interview/src/com/interview/recursion/ChainWordsToFormCircle.java", "commit_date": "2015-07-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "// Decodes a single string to a list of strings.\n", "func_signal": "public List<String> decode(String s)", "code": "{\n    List<String> result = new ArrayList<>();\n    while (s.length() != 0) {\n        int size = toSize(s.substring(0, 4));\n        result.add(s.substring(4, size + 4));\n        s = s.substring(size + 4);\n    }\n    return result;\n}", "path": "interview/src/com/interview/string/StringEncoderDecoder.java", "commit_date": "2016-05-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "//http://bits.stephan-brumme.com/countBits.html\n", "func_signal": "public int countBitsEvenFaster(int x)", "code": "{\n    // count bits of each 2-bit chunk\n    x = x - ((x >> 1) & 0x55555555);\n    // count bits of each 4-bit chunk\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    // count bits of each 8-bit chunk\n    x = x + (x >> 4);\n    // mask out junk\n    x &= 0xF0F0F0F;\n    // add all four 8-bit chunks\n    return (x * 0x01010101) >> 24;\n}", "path": "interview/src/com/interview/bits/CountBits.java", "commit_date": "2015-07-18 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Use one queue and delimiter to print level by level\n */\n", "func_signal": "public void levelByLevelOneQueueUsingDelimiter(Node root)", "code": "{\n    if (root == null) {\n        return;\n    }\n    Queue<Node> q = new LinkedList<Node>();\n    q.offer(root);\n    q.offer(null);\n    while (!q.isEmpty()) {\n        root = q.poll();\n        if (root != null) {\n            System.out.print(root.data + \" \");\n            if (root.left != null) {\n                q.offer(root.left);\n            }\n            if (root.right != null) {\n                q.offer(root.right);\n            }\n        } else {\n            if (!q.isEmpty()) {\n                System.out.println();\n                q.offer(null);\n            }\n        }\n    }\n}", "path": "interview/src/com/interview/tree/TreeTraversalLevelByLevel.java", "commit_date": "2015-07-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * This method actually prints all the combination. It takes exponential time.\n */\n", "func_signal": "public void printCoinChangingSolution(int total,int coins[])", "code": "{\n    List<Integer> result = new ArrayList<>();\n    printActualSolution(result, total, coins, 0);\n}", "path": "interview/src/com/interview/dynamic/CoinChanging.java", "commit_date": "2016-03-13 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Solves 0/1 knapsack in bottom up dynamic programming\n */\n", "func_signal": "public int bottomUpDP(int val[], int wt[], int W)", "code": "{\n    int K[][] = new int[val.length+1][W+1];\n    for(int i=0; i <= val.length; i++){\n        for(int j=0; j <= W; j++){\n            if(i == 0 || j == 0){\n                K[i][j] = 0;\n                continue;\n            }\n            if(j - wt[i-1] >= 0){\n                K[i][j] = Math.max(K[i-1][j], K[i-1][j-wt[i-1]] + val[i-1]);\n            }else{\n                K[i][j] = K[i-1][j];\n            }\n        }\n    }\n    return K[val.length][W];\n}", "path": "interview/src/com/interview/dynamic/Knapsack01.java", "commit_date": "2015-11-24 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "//you can create a AVL tree to efficiently find total\n//number of smaller characters.\n//You can keep size of subtree at root and keep moving left or right\n//depending on the character you looking for\n", "func_signal": "private int findNumberOfSmallerCharactersOnRight(int index,char []str)", "code": "{\n    int count=0;\n    for(int i=index+1; i < str.length; i++){\n        if(str[i] < str[index]){\n            count++;\n        }\n    }\n    return count;\n}", "path": "interview/src/com/interview/string/LexicographicRankInPermutation.java", "commit_date": "2015-07-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "// Encodes a list of strings to a single string.\n", "func_signal": "public String encode(List<String> strs)", "code": "{\n    StringBuffer buff = new StringBuffer();\n    for (String str : strs) {\n        String size = toFixedLength(str.length());\n        buff.append(size);\n        buff.append(str);\n    }\n    return buff.toString();\n}", "path": "interview/src/com/interview/string/StringEncoderDecoder.java", "commit_date": "2016-05-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "//if mid is greater than both ends than result is low of two ends else move in direction\n//where either mid-1 or mid+1 is less\n", "func_signal": "public int search(int arr[])", "code": "{\n    int low = 0;\n    int high = arr.length - 1;\n    int mid = 0;\n    while (low < high) {\n        mid = (low + high) / 2;\n        //if middle is less than both mid-1 and mid+1 then mid is the answer\n        if((low == mid || arr[mid] < arr[mid-1])&& arr[mid] < arr[mid+1]){\n            return arr[mid];\n        }\n        if ((arr[mid] >= arr[low] && arr[mid] >= arr[high])){\n            if(arr[low] < arr[high]){\n                high = mid-1;\n            }else{\n                low = mid+1;\n            }\n        }else{\n            if(arr[mid-1] < arr[mid+1]){\n                high = mid-1;\n            }else{\n                low = mid+1;\n            }\n        }\n    }\n    return arr[low];\n}", "path": "interview/src/com/interview/binarysearch/CircularBinarySearch.java", "commit_date": "2015-07-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/*\n *Solution for https://leetcode.com/problems/n-queens/\n */\n", "func_signal": "public List<List<String>> solveNQueens(int n)", "code": "{\n    List<List<String>> result = new ArrayList<>();\n    Position[] positions = new Position[n];\n    solve(0, positions, result, n);\n    return result;\n}", "path": "interview/src/com/interview/recursion/NQueenProblem.java", "commit_date": "2016-03-01 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Use two queue to print level by level\n */\n", "func_signal": "public void levelByLevelTwoQueue(Node root)", "code": "{\n    if (root == null) {\n        return;\n    }\n    Queue<Node> q1 = new LinkedList<>();\n    Queue<Node> q2 = new LinkedList<>();\n    q1.add(root);\n    while (!q1.isEmpty() || !q2.isEmpty()) {\n        while (!q1.isEmpty()) {\n            root = q1.poll();\n            System.out.print(root.data + \" \");\n            if (root.left != null) {\n                q2.offer(root.left);\n            }\n            if (root.right != null) {\n                q2.offer(root.right);\n            }\n        }\n        System.out.println();\n        while (!q2.isEmpty()) {\n            root = q2.poll();\n            System.out.print(root.data + \" \");\n            if (root.left != null) {\n                q1.offer(root.left);\n            }\n            if (root.right != null) {\n                q1.offer(root.right);\n            }\n        }\n        System.out.println();\n    }\n}", "path": "interview/src/com/interview/tree/TreeTraversalLevelByLevel.java", "commit_date": "2015-07-16 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * Find the representative recursively and does path\n * compression as well.\n */\n", "func_signal": "private Node findSet(Node node)", "code": "{\n    Node parent = node.parent;\n    if (parent == node) {\n        return parent;\n    }\n    node.parent = findSet(node.parent);\n    return node.parent;\n}", "path": "interview/src/com/interview/graph/DisjointSet.java", "commit_date": "2016-03-30 00:00:00", "repo_name": "mission-peace/interview", "stars": 10973, "license": "apache-2.0", "language": "java", "size": 1200}
{"docstring": "/**\n * logout\n *\n * @param request\n * @param response\n */\n", "func_signal": "public ReturnT<String> logout(HttpServletRequest request, HttpServletResponse response)", "code": "{\n    CookieUtil.remove(request, response, LOGIN_IDENTITY_KEY);\n    return ReturnT.SUCCESS;\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/service/LoginService.java", "commit_date": "2019-05-04 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * 3\u3001\u547d\u4ee4\u884c\u4efb\u52a1\n */\n", "func_signal": "@XxlJob(\"commandJobHandler\")\npublic void commandJobHandler() throws Exception", "code": "{\n    String command = XxlJobHelper.getJobParam();\n    int exitValue = -1;\n\n    BufferedReader bufferedReader = null;\n    try {\n        // command process\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        processBuilder.command(command);\n        processBuilder.redirectErrorStream(true);\n\n        Process process = processBuilder.start();\n        //Process process = Runtime.getRuntime().exec(command);\n\n        BufferedInputStream bufferedInputStream = new BufferedInputStream(process.getInputStream());\n        bufferedReader = new BufferedReader(new InputStreamReader(bufferedInputStream));\n\n        // command log\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            XxlJobHelper.log(line);\n        }\n\n        // command exit\n        process.waitFor();\n        exitValue = process.exitValue();\n    } catch (Exception e) {\n        XxlJobHelper.log(e);\n    } finally {\n        if (bufferedReader != null) {\n            bufferedReader.close();\n        }\n    }\n\n    if (exitValue == 0) {\n        // default success\n    } else {\n        XxlJobHelper.handleFail(\"command exit value(\"+exitValue+\") is failed\");\n    }\n\n}", "path": "xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/java/com/xxl/job/executor/service/jobhandler/SampleXxlJob.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * 2\u3001\u5206\u7247\u5e7f\u64ad\u4efb\u52a1\n */\n", "func_signal": "@XxlJob(\"shardingJobHandler\")\npublic void shardingJobHandler() throws Exception", "code": "{\n\n    // \u5206\u7247\u53c2\u6570\n    int shardIndex = XxlJobHelper.getShardIndex();\n    int shardTotal = XxlJobHelper.getShardTotal();\n\n    XxlJobHelper.log(\"\u5206\u7247\u53c2\u6570\uff1a\u5f53\u524d\u5206\u7247\u5e8f\u53f7 = {}, \u603b\u5206\u7247\u6570 = {}\", shardIndex, shardTotal);\n\n    // \u4e1a\u52a1\u903b\u8f91\n    for (int i = 0; i < shardTotal; i++) {\n        if (i == shardIndex) {\n            XxlJobHelper.log(\"\u7b2c {} \u7247, \u547d\u4e2d\u5206\u7247\u5f00\u59cb\u5904\u7406\", i);\n        } else {\n            XxlJobHelper.log(\"\u7b2c {} \u7247, \u5ffd\u7565\", i);\n        }\n    }\n\n}", "path": "xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/java/com/xxl/job/executor/service/jobhandler/SampleXxlJob.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * 1\u3001\u7b80\u5355\u4efb\u52a1\u793a\u4f8b\uff08Bean\u6a21\u5f0f\uff09\n */\n", "func_signal": "@XxlJob(\"demoJobHandler\")\npublic void demoJobHandler() throws Exception", "code": "{\n    XxlJobHelper.log(\"XXL-JOB, Hello World.\");\n\n    for (int i = 0; i < 5; i++) {\n        XxlJobHelper.log(\"beat at:\" + i);\n        TimeUnit.SECONDS.sleep(2);\n    }\n    // default success\n}", "path": "xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/java/com/xxl/job/executor/service/jobhandler/SampleXxlJob.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * get ip:port\n *\n * @param port\n * @return String\n */\n", "func_signal": "public static String getIpPort(int port)", "code": "{\n    String ip = getIp();\n    return getIpPort(ip, port);\n}", "path": "xxl-job/xxl-job-core/src/main/java/com/xxl/job/core/util/IpUtil.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "//BeansWrapper.getDefaultInstance();\n", "func_signal": "public static TemplateHashModel generateStaticModel(String packageName)", "code": "{\n   try {\n       TemplateHashModel staticModels = wrapper.getStaticModels();\n       TemplateHashModel fileStatics = (TemplateHashModel) staticModels.get(packageName);\n       return fileStatics;\n   } catch (Exception e) {\n       logger.error(e.getMessage(), e);\n   }\n   return null;\n    }", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/util/FtlUtil.java", "commit_date": "2019-11-22 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * Indicates whether the specified cron expression can be parsed into a \n * valid cron expression\n * \n * @param cronExpression the expression to evaluate\n * @return a boolean indicating whether the given expression is a valid cron\n *         expression\n */\n", "func_signal": "public static boolean isValidExpression(String cronExpression)", "code": "{\n    \n    try {\n        new CronExpression(cronExpression);\n    } catch (ParseException pe) {\n        return false;\n    }\n    \n    return true;\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java", "commit_date": "2019-11-07 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "////////////////////////////////////////////////////////////////////////////\n//\n// Computation Functions\n//\n////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public Date getTimeAfter(Date afterTime)", "code": "{\n\n    // Computation is based on Gregorian year only.\n    Calendar cl = new java.util.GregorianCalendar(getTimeZone()); \n\n    // move ahead one second, since we're computing the time *after* the\n    // given time\n    afterTime = new Date(afterTime.getTime() + 1000);\n    // CronTrigger does not deal with milliseconds\n    cl.setTime(afterTime);\n    cl.set(Calendar.MILLISECOND, 0);\n\n    boolean gotOne = false;\n    // loop until we've computed the next time, or we've past the endTime\n    while (!gotOne) {\n\n        //if (endTime != null && cl.getTime().after(endTime)) return null;\n        if(cl.get(Calendar.YEAR) > 2999) { // prevent endless loop...\n            return null;\n        }\n\n        SortedSet<Integer> st = null;\n        int t = 0;\n\n        int sec = cl.get(Calendar.SECOND);\n        int min = cl.get(Calendar.MINUTE);\n\n        // get second.................................................\n        st = seconds.tailSet(sec);\n        if (st != null && st.size() != 0) {\n            sec = st.first();\n        } else {\n            sec = seconds.first();\n            min++;\n            cl.set(Calendar.MINUTE, min);\n        }\n        cl.set(Calendar.SECOND, sec);\n\n        min = cl.get(Calendar.MINUTE);\n        int hr = cl.get(Calendar.HOUR_OF_DAY);\n        t = -1;\n\n        // get minute.................................................\n        st = minutes.tailSet(min);\n        if (st != null && st.size() != 0) {\n            t = min;\n            min = st.first();\n        } else {\n            min = minutes.first();\n            hr++;\n        }\n        if (min != t) {\n            cl.set(Calendar.SECOND, 0);\n            cl.set(Calendar.MINUTE, min);\n            setCalendarHour(cl, hr);\n            continue;\n        }\n        cl.set(Calendar.MINUTE, min);\n\n        hr = cl.get(Calendar.HOUR_OF_DAY);\n        int day = cl.get(Calendar.DAY_OF_MONTH);\n        t = -1;\n\n        // get hour...................................................\n        st = hours.tailSet(hr);\n        if (st != null && st.size() != 0) {\n            t = hr;\n            hr = st.first();\n        } else {\n            hr = hours.first();\n            day++;\n        }\n        if (hr != t) {\n            cl.set(Calendar.SECOND, 0);\n            cl.set(Calendar.MINUTE, 0);\n            cl.set(Calendar.DAY_OF_MONTH, day);\n            setCalendarHour(cl, hr);\n            continue;\n        }\n        cl.set(Calendar.HOUR_OF_DAY, hr);\n\n        day = cl.get(Calendar.DAY_OF_MONTH);\n        int mon = cl.get(Calendar.MONTH) + 1;\n        // '+ 1' because calendar is 0-based for this field, and we are\n        // 1-based\n        t = -1;\n        int tmon = mon;\n        \n        // get day...................................................\n        boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC);\n        boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC);\n        if (dayOfMSpec && !dayOfWSpec) { // get day by day of month rule\n            st = daysOfMonth.tailSet(day);\n            if (lastdayOfMonth) {\n                if(!nearestWeekday) {\n                    t = day;\n                    day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));\n                    day -= lastdayOffset;\n                    if(t > day) {\n                        mon++;\n                        if(mon > 12) { \n                            mon = 1;\n                            tmon = 3333; // ensure test of mon != tmon further below fails\n                            cl.add(Calendar.YEAR, 1);\n                        }\n                        day = 1;\n                    }\n                } else {\n                    t = day;\n                    day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));\n                    day -= lastdayOffset;\n                    \n                    java.util.Calendar tcal = java.util.Calendar.getInstance(getTimeZone());\n                    tcal.set(Calendar.SECOND, 0);\n                    tcal.set(Calendar.MINUTE, 0);\n                    tcal.set(Calendar.HOUR_OF_DAY, 0);\n                    tcal.set(Calendar.DAY_OF_MONTH, day);\n                    tcal.set(Calendar.MONTH, mon - 1);\n                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR));\n                    \n                    int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));\n                    int dow = tcal.get(Calendar.DAY_OF_WEEK);\n\n                    if(dow == Calendar.SATURDAY && day == 1) {\n                        day += 2;\n                    } else if(dow == Calendar.SATURDAY) {\n                        day -= 1;\n                    } else if(dow == Calendar.SUNDAY && day == ldom) { \n                        day -= 2;\n                    } else if(dow == Calendar.SUNDAY) { \n                        day += 1;\n                    }\n                \n                    tcal.set(Calendar.SECOND, sec);\n                    tcal.set(Calendar.MINUTE, min);\n                    tcal.set(Calendar.HOUR_OF_DAY, hr);\n                    tcal.set(Calendar.DAY_OF_MONTH, day);\n                    tcal.set(Calendar.MONTH, mon - 1);\n                    Date nTime = tcal.getTime();\n                    if(nTime.before(afterTime)) {\n                        day = 1;\n                        mon++;\n                    }\n                }\n            } else if(nearestWeekday) {\n                t = day;\n                day = daysOfMonth.first();\n\n                java.util.Calendar tcal = java.util.Calendar.getInstance(getTimeZone());\n                tcal.set(Calendar.SECOND, 0);\n                tcal.set(Calendar.MINUTE, 0);\n                tcal.set(Calendar.HOUR_OF_DAY, 0);\n                tcal.set(Calendar.DAY_OF_MONTH, day);\n                tcal.set(Calendar.MONTH, mon - 1);\n                tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR));\n                \n                int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));\n                int dow = tcal.get(Calendar.DAY_OF_WEEK);\n\n                if(dow == Calendar.SATURDAY && day == 1) {\n                    day += 2;\n                } else if(dow == Calendar.SATURDAY) {\n                    day -= 1;\n                } else if(dow == Calendar.SUNDAY && day == ldom) { \n                    day -= 2;\n                } else if(dow == Calendar.SUNDAY) { \n                    day += 1;\n                }\n                    \n            \n                tcal.set(Calendar.SECOND, sec);\n                tcal.set(Calendar.MINUTE, min);\n                tcal.set(Calendar.HOUR_OF_DAY, hr);\n                tcal.set(Calendar.DAY_OF_MONTH, day);\n                tcal.set(Calendar.MONTH, mon - 1);\n                Date nTime = tcal.getTime();\n                if(nTime.before(afterTime)) {\n                    day = daysOfMonth.first();\n                    mon++;\n                }\n            } else if (st != null && st.size() != 0) {\n                t = day;\n                day = st.first();\n                // make sure we don't over-run a short month, such as february\n                int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));\n                if (day > lastDay) {\n                    day = daysOfMonth.first();\n                    mon++;\n                }\n            } else {\n                day = daysOfMonth.first();\n                mon++;\n            }\n            \n            if (day != t || mon != tmon) {\n                cl.set(Calendar.SECOND, 0);\n                cl.set(Calendar.MINUTE, 0);\n                cl.set(Calendar.HOUR_OF_DAY, 0);\n                cl.set(Calendar.DAY_OF_MONTH, day);\n                cl.set(Calendar.MONTH, mon - 1);\n                // '- 1' because calendar is 0-based for this field, and we\n                // are 1-based\n                continue;\n            }\n        } else if (dayOfWSpec && !dayOfMSpec) { // get day by day of week rule\n            if (lastdayOfWeek) { // are we looking for the last XXX day of\n                // the month?\n                int dow = daysOfWeek.first(); // desired\n                // d-o-w\n                int cDow = cl.get(Calendar.DAY_OF_WEEK); // current d-o-w\n                int daysToAdd = 0;\n                if (cDow < dow) {\n                    daysToAdd = dow - cDow;\n                }\n                if (cDow > dow) {\n                    daysToAdd = dow + (7 - cDow);\n                }\n\n                int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));\n\n                if (day + daysToAdd > lDay) { // did we already miss the\n                    // last one?\n                    cl.set(Calendar.SECOND, 0);\n                    cl.set(Calendar.MINUTE, 0);\n                    cl.set(Calendar.HOUR_OF_DAY, 0);\n                    cl.set(Calendar.DAY_OF_MONTH, 1);\n                    cl.set(Calendar.MONTH, mon);\n                    // no '- 1' here because we are promoting the month\n                    continue;\n                }\n\n                // find date of last occurrence of this day in this month...\n                while ((day + daysToAdd + 7) <= lDay) {\n                    daysToAdd += 7;\n                }\n\n                day += daysToAdd;\n\n                if (daysToAdd > 0) {\n                    cl.set(Calendar.SECOND, 0);\n                    cl.set(Calendar.MINUTE, 0);\n                    cl.set(Calendar.HOUR_OF_DAY, 0);\n                    cl.set(Calendar.DAY_OF_MONTH, day);\n                    cl.set(Calendar.MONTH, mon - 1);\n                    // '- 1' here because we are not promoting the month\n                    continue;\n                }\n\n            } else if (nthdayOfWeek != 0) {\n                // are we looking for the Nth XXX day in the month?\n                int dow = daysOfWeek.first(); // desired\n                // d-o-w\n                int cDow = cl.get(Calendar.DAY_OF_WEEK); // current d-o-w\n                int daysToAdd = 0;\n                if (cDow < dow) {\n                    daysToAdd = dow - cDow;\n                } else if (cDow > dow) {\n                    daysToAdd = dow + (7 - cDow);\n                }\n\n                boolean dayShifted = false;\n                if (daysToAdd > 0) {\n                    dayShifted = true;\n                }\n\n                day += daysToAdd;\n                int weekOfMonth = day / 7;\n                if (day % 7 > 0) {\n                    weekOfMonth++;\n                }\n\n                daysToAdd = (nthdayOfWeek - weekOfMonth) * 7;\n                day += daysToAdd;\n                if (daysToAdd < 0\n                        || day > getLastDayOfMonth(mon, cl\n                                .get(Calendar.YEAR))) {\n                    cl.set(Calendar.SECOND, 0);\n                    cl.set(Calendar.MINUTE, 0);\n                    cl.set(Calendar.HOUR_OF_DAY, 0);\n                    cl.set(Calendar.DAY_OF_MONTH, 1);\n                    cl.set(Calendar.MONTH, mon);\n                    // no '- 1' here because we are promoting the month\n                    continue;\n                } else if (daysToAdd > 0 || dayShifted) {\n                    cl.set(Calendar.SECOND, 0);\n                    cl.set(Calendar.MINUTE, 0);\n                    cl.set(Calendar.HOUR_OF_DAY, 0);\n                    cl.set(Calendar.DAY_OF_MONTH, day);\n                    cl.set(Calendar.MONTH, mon - 1);\n                    // '- 1' here because we are NOT promoting the month\n                    continue;\n                }\n            } else {\n                int cDow = cl.get(Calendar.DAY_OF_WEEK); // current d-o-w\n                int dow = daysOfWeek.first(); // desired\n                // d-o-w\n                st = daysOfWeek.tailSet(cDow);\n                if (st != null && st.size() > 0) {\n                    dow = st.first();\n                }\n\n                int daysToAdd = 0;\n                if (cDow < dow) {\n                    daysToAdd = dow - cDow;\n                }\n                if (cDow > dow) {\n                    daysToAdd = dow + (7 - cDow);\n                }\n\n                int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR));\n\n                if (day + daysToAdd > lDay) { // will we pass the end of\n                    // the month?\n                    cl.set(Calendar.SECOND, 0);\n                    cl.set(Calendar.MINUTE, 0);\n                    cl.set(Calendar.HOUR_OF_DAY, 0);\n                    cl.set(Calendar.DAY_OF_MONTH, 1);\n                    cl.set(Calendar.MONTH, mon);\n                    // no '- 1' here because we are promoting the month\n                    continue;\n                } else if (daysToAdd > 0) { // are we swithing days?\n                    cl.set(Calendar.SECOND, 0);\n                    cl.set(Calendar.MINUTE, 0);\n                    cl.set(Calendar.HOUR_OF_DAY, 0);\n                    cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd);\n                    cl.set(Calendar.MONTH, mon - 1);\n                    // '- 1' because calendar is 0-based for this field,\n                    // and we are 1-based\n                    continue;\n                }\n            }\n        } else { // dayOfWSpec && !dayOfMSpec\n            throw new UnsupportedOperationException(\n                    \"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\");\n        }\n        cl.set(Calendar.DAY_OF_MONTH, day);\n\n        mon = cl.get(Calendar.MONTH) + 1;\n        // '+ 1' because calendar is 0-based for this field, and we are\n        // 1-based\n        int year = cl.get(Calendar.YEAR);\n        t = -1;\n\n        // test for expressions that never generate a valid fire date,\n        // but keep looping...\n        if (year > MAX_YEAR) {\n            return null;\n        }\n\n        // get month...................................................\n        st = months.tailSet(mon);\n        if (st != null && st.size() != 0) {\n            t = mon;\n            mon = st.first();\n        } else {\n            mon = months.first();\n            year++;\n        }\n        if (mon != t) {\n            cl.set(Calendar.SECOND, 0);\n            cl.set(Calendar.MINUTE, 0);\n            cl.set(Calendar.HOUR_OF_DAY, 0);\n            cl.set(Calendar.DAY_OF_MONTH, 1);\n            cl.set(Calendar.MONTH, mon - 1);\n            // '- 1' because calendar is 0-based for this field, and we are\n            // 1-based\n            cl.set(Calendar.YEAR, year);\n            continue;\n        }\n        cl.set(Calendar.MONTH, mon - 1);\n        // '- 1' because calendar is 0-based for this field, and we are\n        // 1-based\n\n        year = cl.get(Calendar.YEAR);\n        t = -1;\n\n        // get year...................................................\n        st = years.tailSet(year);\n        if (st != null && st.size() != 0) {\n            t = year;\n            year = st.first();\n        } else {\n            return null; // ran out of years...\n        }\n\n        if (year != t) {\n            cl.set(Calendar.SECOND, 0);\n            cl.set(Calendar.MINUTE, 0);\n            cl.set(Calendar.HOUR_OF_DAY, 0);\n            cl.set(Calendar.DAY_OF_MONTH, 1);\n            cl.set(Calendar.MONTH, 0);\n            // '- 1' because calendar is 0-based for this field, and we are\n            // 1-based\n            cl.set(Calendar.YEAR, year);\n            continue;\n        }\n        cl.set(Calendar.YEAR, year);\n\n        gotOne = true;\n    } // while( !done )\n\n    return cl.getTime();\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java", "commit_date": "2019-11-07 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * normalize the ipv6 Address, convert scope name to scope id.\n * e.g.\n * convert\n * fe80:0:0:0:894:aeec:f37d:23e1%en0\n * to\n * fe80:0:0:0:894:aeec:f37d:23e1%5\n * <p>\n * The %5 after ipv6 address is called scope id.\n * see java doc of {@link Inet6Address} for more details.\n *\n * @param address the input address\n * @return the normalized address, with scope id converted to int\n */\n", "func_signal": "private static InetAddress normalizeV6Address(Inet6Address address)", "code": "{\n    String addr = address.getHostAddress();\n    int i = addr.lastIndexOf('%');\n    if (i > 0) {\n        try {\n            return InetAddress.getByName(addr.substring(0, i) + '%' + address.getScopeId());\n        } catch (UnknownHostException e) {\n            // ignore\n            logger.debug(\"Unknown IPV6 address: \", e);\n        }\n    }\n    return address;\n}", "path": "xxl-job/xxl-job-core/src/main/java/com/xxl/job/core/util/IpUtil.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * Constructs a new {@code CronExpression} as a copy of an existing\n * instance.\n * \n * @param expression\n *            The existing cron expression to be copied\n */\n", "func_signal": "public CronExpression(CronExpression expression)", "code": "{\n    /*\n     * We don't call the other constructor here since we need to swallow the\n     * ParseException. We also elide some of the sanity checking as it is\n     * not logically trippable.\n     */\n    this.cronExpression = expression.getCronExpression();\n    try {\n        buildExpression(cronExpression);\n    } catch (ParseException ex) {\n        throw new AssertionError();\n    }\n    if (expression.getTimeZone() != null) {\n        setTimeZone((TimeZone) expression.getTimeZone().clone());\n    }\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java", "commit_date": "2019-11-07 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * Advance the calendar to the particular hour paying particular attention\n * to daylight saving problems.\n * \n * @param cal the calendar to operate on\n * @param hour the hour to set\n */\n", "func_signal": "protected void setCalendarHour(Calendar cal, int hour)", "code": "{\n    cal.set(java.util.Calendar.HOUR_OF_DAY, hour);\n    if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {\n        cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1);\n    }\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java", "commit_date": "2019-11-07 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * logout\n *\n * @param request\n * @return\n */\n", "func_signal": "public XxlJobUser ifLogin(HttpServletRequest request, HttpServletResponse response)", "code": "{\n    String cookieToken = CookieUtil.getValue(request, LOGIN_IDENTITY_KEY);\n    if (cookieToken != null) {\n        XxlJobUser cookieUser = null;\n        try {\n            cookieUser = parseToken(cookieToken);\n        } catch (Exception e) {\n            logout(request, response);\n        }\n        if (cookieUser != null) {\n            XxlJobUser dbUser = xxlJobUserDao.loadByUserName(cookieUser.getUsername());\n            if (dbUser != null) {\n                if (cookieUser.getPassword().equals(dbUser.getPassword())) {\n                    return dbUser;\n                }\n            }\n        }\n    }\n    return null;\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/service/LoginService.java", "commit_date": "2019-05-04 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "////////////////////////////////////////////////////////////////////////////\n//\n// Expression Parsing Functions\n//\n////////////////////////////////////////////////////////////////////////////\n", "func_signal": "protected void buildExpression(String expression) throws ParseException", "code": "{\n    expressionParsed = true;\n\n    try {\n\n        if (seconds == null) {\n            seconds = new TreeSet<Integer>();\n        }\n        if (minutes == null) {\n            minutes = new TreeSet<Integer>();\n        }\n        if (hours == null) {\n            hours = new TreeSet<Integer>();\n        }\n        if (daysOfMonth == null) {\n            daysOfMonth = new TreeSet<Integer>();\n        }\n        if (months == null) {\n            months = new TreeSet<Integer>();\n        }\n        if (daysOfWeek == null) {\n            daysOfWeek = new TreeSet<Integer>();\n        }\n        if (years == null) {\n            years = new TreeSet<Integer>();\n        }\n\n        int exprOn = SECOND;\n\n        StringTokenizer exprsTok = new StringTokenizer(expression, \" \\t\",\n                false);\n\n        while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {\n            String expr = exprsTok.nextToken().trim();\n\n            // throw an exception if L is used with other days of the month\n            if(exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains(\",\")) {\n                throw new ParseException(\"Support for specifying 'L' and 'LW' with other days of the month is not implemented\", -1);\n            }\n            // throw an exception if L is used with other days of the week\n            if(exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1  && expr.contains(\",\")) {\n                throw new ParseException(\"Support for specifying 'L' with other days of the week is not implemented\", -1);\n            }\n            if(exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#', expr.indexOf('#') +1) != -1) {\n                throw new ParseException(\"Support for specifying multiple \\\"nth\\\" days is not implemented.\", -1);\n            }\n            \n            StringTokenizer vTok = new StringTokenizer(expr, \",\");\n            while (vTok.hasMoreTokens()) {\n                String v = vTok.nextToken();\n                storeExpressionVals(0, v, exprOn);\n            }\n\n            exprOn++;\n        }\n\n        if (exprOn <= DAY_OF_WEEK) {\n            throw new ParseException(\"Unexpected end of expression.\",\n                        expression.length());\n        }\n\n        if (exprOn <= YEAR) {\n            storeExpressionVals(0, \"*\", YEAR);\n        }\n\n        TreeSet<Integer> dow = getSet(DAY_OF_WEEK);\n        TreeSet<Integer> dom = getSet(DAY_OF_MONTH);\n\n        // Copying the logic from the UnsupportedOperationException below\n        boolean dayOfMSpec = !dom.contains(NO_SPEC);\n        boolean dayOfWSpec = !dow.contains(NO_SPEC);\n\n        if (!dayOfMSpec || dayOfWSpec) {\n            if (!dayOfWSpec || dayOfMSpec) {\n                throw new ParseException(\n                        \"Support for specifying both a day-of-week AND a day-of-month parameter is not implemented.\", 0);\n            }\n        }\n    } catch (ParseException pe) {\n        throw pe;\n    } catch (Exception e) {\n        throw new ParseException(\"Illegal cron expression format (\"\n                + e.toString() + \")\", 0);\n    }\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java", "commit_date": "2019-11-07 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "// plugin\n", "func_signal": "public boolean validPermission(int jobGroup)", "code": "{\n\tif (this.role == 1) {\n\t\treturn true;\n\t} else {\n\t\tif (StringUtils.hasText(this.permission)) {\n\t\t\tfor (String permissionItem : this.permission.split(\",\")) {\n\t\t\t\tif (String.valueOf(jobGroup).equals(permissionItem)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/model/XxlJobUser.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * Constructs a new <CODE>CronExpression</CODE> based on the specified \n * parameter.\n * \n * @param cronExpression String representation of the cron expression the\n *                       new object should represent\n * @throws java.text.ParseException\n *         if the string expression cannot be parsed into a valid \n *         <CODE>CronExpression</CODE>\n */\n", "func_signal": "public CronExpression(String cronExpression) throws ParseException", "code": "{\n    if (cronExpression == null) {\n        throw new IllegalArgumentException(\"cronExpression cannot be null\");\n    }\n    \n    this.cronExpression = cronExpression.toUpperCase(Locale.US);\n    \n    buildExpression(this.cronExpression);\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java", "commit_date": "2019-11-07 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * Returns the time zone for which this <code>CronExpression</code> \n * will be resolved.\n */\n", "func_signal": "public TimeZone getTimeZone()", "code": "{\n    if (timeZone == null) {\n        timeZone = TimeZone.getDefault();\n    }\n\n    return timeZone;\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java", "commit_date": "2019-11-07 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * Find first valid IP from local network card\n *\n * @return first valid local IP\n */\n", "func_signal": "public static InetAddress getLocalAddress()", "code": "{\n    if (LOCAL_ADDRESS != null) {\n        return LOCAL_ADDRESS;\n    }\n    InetAddress localAddress = getLocalAddress0();\n    LOCAL_ADDRESS = localAddress;\n    return localAddress;\n}", "path": "xxl-job/xxl-job-core/src/main/java/com/xxl/job/core/util/IpUtil.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * \u6743\u9650\u9650\u5236\n * @author xuxueli 2015-12-12 18:29:02\n */\n", "func_signal": "@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface PermissionLimit", "code": "{\n\t\n\t/**\n\t * \u767b\u5f55\u62e6\u622a (\u9ed8\u8ba4\u62e6\u622a)\n\t */\n\tboolean limit() default true;\n\n\t/**\n\t * \u8981\u6c42\u7ba1\u7406\u5458\u6743\u9650\n\t *\n\t * @return\n\t */\n\tboolean adminuser() default false;\n\n}", "path": "xxl-job/xxl-job-admin/src/main/java/com/xxl/job/admin/controller/annotation/PermissionLimit.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * 4\u3001\u8de8\u5e73\u53f0Http\u4efb\u52a1\n *  \u53c2\u6570\u793a\u4f8b\uff1a\n *      \"url: http://www.baidu.com\\n\" +\n *      \"method: get\\n\" +\n *      \"data: content\\n\";\n */\n", "func_signal": "@XxlJob(\"httpJobHandler\")\npublic void httpJobHandler() throws Exception", "code": "{\n\n    // param parse\n    String param = XxlJobHelper.getJobParam();\n    if (param==null || param.trim().length()==0) {\n        XxlJobHelper.log(\"param[\"+ param +\"] invalid.\");\n\n        XxlJobHelper.handleFail();\n        return;\n    }\n\n    String[] httpParams = param.split(\"\\n\");\n    String url = null;\n    String method = null;\n    String data = null;\n    for (String httpParam: httpParams) {\n        if (httpParam.startsWith(\"url:\")) {\n            url = httpParam.substring(httpParam.indexOf(\"url:\") + 4).trim();\n        }\n        if (httpParam.startsWith(\"method:\")) {\n            method = httpParam.substring(httpParam.indexOf(\"method:\") + 7).trim().toUpperCase();\n        }\n        if (httpParam.startsWith(\"data:\")) {\n            data = httpParam.substring(httpParam.indexOf(\"data:\") + 5).trim();\n        }\n    }\n\n    // param valid\n    if (url==null || url.trim().length()==0) {\n        XxlJobHelper.log(\"url[\"+ url +\"] invalid.\");\n\n        XxlJobHelper.handleFail();\n        return;\n    }\n    if (method==null || !Arrays.asList(\"GET\", \"POST\").contains(method)) {\n        XxlJobHelper.log(\"method[\"+ method +\"] invalid.\");\n\n        XxlJobHelper.handleFail();\n        return;\n    }\n    boolean isPostMethod = method.equals(\"POST\");\n\n    // request\n    HttpURLConnection connection = null;\n    BufferedReader bufferedReader = null;\n    try {\n        // connection\n        URL realUrl = new URL(url);\n        connection = (HttpURLConnection) realUrl.openConnection();\n\n        // connection setting\n        connection.setRequestMethod(method);\n        connection.setDoOutput(isPostMethod);\n        connection.setDoInput(true);\n        connection.setUseCaches(false);\n        connection.setReadTimeout(5 * 1000);\n        connection.setConnectTimeout(3 * 1000);\n        connection.setRequestProperty(\"connection\", \"Keep-Alive\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n        connection.setRequestProperty(\"Accept-Charset\", \"application/json;charset=UTF-8\");\n\n        // do connection\n        connection.connect();\n\n        // data\n        if (isPostMethod && data!=null && data.trim().length()>0) {\n            DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());\n            dataOutputStream.write(data.getBytes(\"UTF-8\"));\n            dataOutputStream.flush();\n            dataOutputStream.close();\n        }\n\n        // valid StatusCode\n        int statusCode = connection.getResponseCode();\n        if (statusCode != 200) {\n            throw new RuntimeException(\"Http Request StatusCode(\" + statusCode + \") Invalid.\");\n        }\n\n        // result\n        bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n        StringBuilder result = new StringBuilder();\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            result.append(line);\n        }\n        String responseMsg = result.toString();\n\n        XxlJobHelper.log(responseMsg);\n\n        return;\n    } catch (Exception e) {\n        XxlJobHelper.log(e);\n\n        XxlJobHelper.handleFail();\n        return;\n    } finally {\n        try {\n            if (bufferedReader != null) {\n                bufferedReader.close();\n            }\n            if (connection != null) {\n                connection.disconnect();\n            }\n        } catch (Exception e2) {\n            XxlJobHelper.log(e2);\n        }\n    }\n\n}", "path": "xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/java/com/xxl/job/executor/service/jobhandler/SampleXxlJob.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * valid Inet4Address\n *\n * @param address\n * @return\n */\n", "func_signal": "private static boolean isValidV4Address(InetAddress address)", "code": "{\n    if (address == null || address.isLoopbackAddress()) {\n        return false;\n    }\n    String name = address.getHostAddress();\n    boolean result = (name != null\n            && IP_PATTERN.matcher(name).matches()\n            && !ANYHOST_VALUE.equals(name)\n            && !LOCALHOST_VALUE.equals(name));\n    return result;\n}", "path": "xxl-job/xxl-job-core/src/main/java/com/xxl/job/core/util/IpUtil.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "xuxueli/xxl-job", "stars": 26177, "license": "gpl-3.0", "language": "java", "size": 32822}
{"docstring": "/**\n * Returns the screen/display size.\n */\n", "func_signal": "public static Point getDisplaySize(Context context)", "code": "{\n    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n    Display display = wm.getDefaultDisplay();\n    Point size = new Point();\n    display.getSize(size);\n\n    // You can get the height & width like such:\n    // int width = size.x;\n    // int height = size.y;\n    return size;\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/common/Utils.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the selected item position.\n */\n", "func_signal": "public void setSelectedPosition(int position)", "code": "{\n    mSelectedPosition = position;\n    if(mGridViewHolder != null && mGridViewHolder.getGridView().getAdapter() != null) {\n        mGridViewHolder.getGridView().setSelectedPositionSmooth(position);\n    }\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/GridFragment.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "//private void syncMode(int width, float frameRate) {\n//    syncMode(width, frameRate, false);\n//}\n", "func_signal": "private void syncMode(Activity activity, int width, float frameRate, boolean force)", "code": "{\n    if (activity == null) {\n        Log.e(TAG, \"Activity in null. exiting...\");\n        return;\n    }\n\n    if (!isSupported()) {\n        Log.e(TAG, \"Autoframerate not supported. Exiting...\");\n        return;\n    }\n\n    mSyncHelper.syncDisplayMode(activity.getWindow(), width, frameRate, force);\n}", "path": "SmartTube/common/src/main/java/com/liskovsoft/smartyoutubetv2/common/autoframerate/AutoFrameRateHelper.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Ignore unpaired ACTION_UP events<br/>\n * Ignore UNKNOWN key codes\n */\n", "func_signal": "private boolean ignoreEvent(KeyEvent event)", "code": "{\n    if (event == null || event.getKeyCode() == KeyEvent.KEYCODE_UNKNOWN) {\n        return true;\n    }\n\n    if (event.getAction() == KeyEvent.ACTION_DOWN) {\n        mDownPressed = true;\n        return false;\n    }\n\n    if (event.getAction() == KeyEvent.ACTION_UP && mDownPressed) {\n        mDownPressed = false;\n        return false;\n    }\n\n    return true;\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/common/keyhandler/DoubleBackManager.java", "commit_date": "2020-10-19 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the content text.\n */\n", "func_signal": "public void setContentText(CharSequence text)", "code": "{\n    if (mContentView == null) {\n        return;\n    }\n    mContentView.setText(text);\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/widgets/vineyard/videoview/VideoCardView.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the button text.\n *\n * @param text The button text.\n */\n", "func_signal": "public void setButtonText(String text)", "code": "{\n    mButtonText = text;\n    updateButton();\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/ErrorSupportFragment.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the error message.\n *\n * @param message The error message.\n */\n", "func_signal": "public void setMessage(CharSequence message)", "code": "{\n    mMessage = message;\n    updateMessage();\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/ErrorSupportFragment.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Hides the progress bar.\n */\n", "func_signal": "public void hide()", "code": "{\n    mIsShowing = false;\n    if (mUserProvidedProgressBar) {\n        mProgressBarView.setVisibility(View.INVISIBLE);\n    } else if (mProgressBarView != null) {\n        rootView.removeView(mProgressBarView);\n        mProgressBarView = null;\n    }\n\n    mHandler.removeCallbacks(runnable);\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/leanback/misc/ProgressBarManager.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Example for handling resizing content for overscan.  Typically you won't need to resize when\n * using the Leanback support library.\n */\n", "func_signal": "public void overScan(Activity activity, VideoView videoView)", "code": "{\n    DisplayMetrics metrics = new DisplayMetrics();\n    activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);\n    int w = (int) (metrics.widthPixels * MediaDimensions.MEDIA_WIDTH);\n    int h = (int) (metrics.heightPixels * MediaDimensions.MEDIA_HEIGHT);\n    int marginLeft = (int) (metrics.widthPixels * MediaDimensions.MEDIA_LEFT_MARGIN);\n    int marginTop = (int) (metrics.heightPixels * MediaDimensions.MEDIA_TOP_MARGIN);\n    int marginRight = (int) (metrics.widthPixels * MediaDimensions.MEDIA_RIGHT_MARGIN);\n    int marginBottom = (int) (metrics.heightPixels * MediaDimensions.MEDIA_BOTTOM_MARGIN);\n    FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(w, h);\n    lp.setMargins(marginLeft, marginTop, marginRight, marginBottom);\n    videoView.setLayoutParams(lp);\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/common/Utils.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Data: https://www.youtube.com/channel/UCtDjOV5nk982w35AIdVDuNw\n */\n", "func_signal": "public static String extractChannelId(Intent intent)", "code": "{\n    if (intent == null || intent.getData() == null || !Intent.ACTION_VIEW.equals(intent.getAction())) {\n        return null;\n    }\n\n    String[] split = intent.getData().toString().split(CHANNEL_URL);\n\n    return split.length == 2 ? split[1] : null;\n}", "path": "SmartTube/common/src/main/java/com/liskovsoft/smartyoutubetv2/common/utils/IntentExtractor.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the title text.\n */\n", "func_signal": "public void setTitleText(CharSequence text)", "code": "{\n    if (mTitleView == null) {\n        return;\n    }\n    mTitleView.setText(text);\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/widgets/vineyard/videoview/VideoCardView.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the layout dimensions of the ImageView.\n */\n", "func_signal": "public void setMainContainerDimensions(int width, int height)", "code": "{\n    ViewGroup.LayoutParams lp = mPreviewCard.getLayoutParams();\n    lp.width = width;\n    lp.height = height;\n    mPreviewCard.setLayoutParams(lp);\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/widgets/vineyard/videoview/VideoCardView.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets an item clicked listener.\n */\n", "func_signal": "public void setOnItemViewClickedListener(OnItemViewClickedListener listener)", "code": "{\n    mOnItemViewClickedListener = listener;\n    if (mGridPresenter != null) {\n        mGridPresenter.setOnItemViewClickedListener(mOnItemViewClickedListener);\n    }\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/GridFragment.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the object adapter for the fragment.\n */\n", "func_signal": "public void setAdapter(ObjectAdapter adapter)", "code": "{\n    mAdapter = adapter;\n    updateAdapter();\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/GridFragment.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the default background.\n *\n * @param translucent True to set a translucent background.\n */\n", "func_signal": "public void setDefaultBackground(boolean translucent)", "code": "{\n    mBackgroundDrawable = null;\n    mIsBackgroundTranslucent = translucent;\n    updateBackground();\n    updateMessage();\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/ErrorSupportFragment.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets a drawable for the fragment background.\n *\n * @param drawable The drawable used for the background.\n */\n", "func_signal": "public void setBackgroundDrawable(Drawable drawable)", "code": "{\n    mBackgroundDrawable = drawable;\n    if (drawable != null) {\n        final int opacity = drawable.getOpacity();\n        mIsBackgroundTranslucent = (opacity == PixelFormat.TRANSLUCENT\n                || opacity == PixelFormat.TRANSPARENT);\n    }\n    updateBackground();\n    updateMessage();\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/ErrorSupportFragment.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Displays the progress bar.\n */\n", "func_signal": "public void show()", "code": "{\n    if (mEnableProgressBar) {\n        mIsShowing = true;\n        mHandler.postDelayed(runnable, mInitialDelay);\n    }\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/leanback/misc/ProgressBarManager.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Browser: https://www.youtube.com/results?search_query=twice<br/>\n * Amazon: youtube://search?query=linkin+park&isVoice=true\n */\n", "func_signal": "public static String extractSearchText(Intent intent)", "code": "{\n    if (intent == null || intent.getData() == null || !Intent.ACTION_VIEW.equals(intent.getAction())) {\n        return null;\n    }\n\n    // Don't Uri directly or you might get UnsupportedOperationException on some urls.\n    UrlQueryString parser = UrlQueryStringFactory.parse(intent.getData());\n\n    for (String searchKey : SEARCH_KEYS) {\n        String searchText = parser.get(searchKey);\n\n        if (searchText != null) {\n            return searchText;\n        }\n    }\n\n    return null;\n}", "path": "SmartTube/common/src/main/java/com/liskovsoft/smartyoutubetv2/common/utils/IntentExtractor.java", "commit_date": "2020-12-15 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the info area background drawable.\n */\n", "func_signal": "public void setInfoAreaBackground(Drawable drawable)", "code": "{\n    if (mInfoArea != null) {\n        mInfoArea.setBackground(drawable);\n    }\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/widgets/vineyard/videoview/VideoCardView.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * Sets the drawable to be used for the error image.\n *\n * @param drawable The drawable used for the error image.\n */\n", "func_signal": "public void setImageDrawable(Drawable drawable)", "code": "{\n    mDrawable = drawable;\n    updateImageDrawable();\n}", "path": "SmartTube/smarttubetv/src/main/java/com/liskovsoft/smartyoutubetv2/tv/ui/mod/fragments/ErrorSupportFragment.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "yuliskov/SmartTube", "stars": 15398, "license": "other", "language": "java", "size": 87329}
{"docstring": "/**\n * dfs find find local and the first locationInsensitive Value\n * // TODO if can not merge, try adjust the stmt to fit the local\n */\n", "func_signal": "private static void localCanExecFirst(Local local, Stmt target) throws MergeResult", "code": "{\n\n    switch (target.et) {\n        case E0: // impossible\n        case En: // no EnStmt yet\n            throw FAIL;\n        case E1:\n            localCanExecFirst(local, target.getOp());\n            break;\n        case E2:\n            AssignStmt as = (AssignStmt) target;\n            Value op1 = as.getOp1();\n            Value op2 = as.getOp2();\n            switch (op1.vt) {\n                case LOCAL:\n                    localCanExecFirst(local, op2);\n                    break;\n                case FIELD:\n                    localCanExecFirst(local, op1.getOp());\n                    // pass through\n                case STATIC_FIELD:\n                    localCanExecFirst(local, op2);\n                    break;\n                case ARRAY:\n                    localCanExecFirst(local, op1.getOp1());\n                    localCanExecFirst(local, op1.getOp2());\n                    localCanExecFirst(local, op2);\n                    break;\n                default:\n            }\n            break;\n    }\n    throw FAIL;\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/ts/AggTransformer.java", "commit_date": "2017-07-15 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "// int,int long\n", "func_signal": "public void visit(String name, Object value)", "code": "{\n    if (value instanceof Object[]) {\n        DexAnnotationVisitor s = visitArray(name);\n        if (s != null) {\n            for (Object v : (Object[]) value) {\n                s.visit(null, v);\n            }\n            s.visitEnd();\n        }\n    } else {\n        AnnotationElement ae = newAnnotationElement(name);\n        ae.value = EncodedValue.wrap(cp.wrapEncodedItem(value));\n    }\n}", "path": "dex2jar/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java", "commit_date": "2014-08-06 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * @param list\n * @param next\n */\n", "func_signal": "public StmtListIterator(StmtList list, Stmt next)", "code": "{\n    super();\n    this.list = list;\n    this.next = next;\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/stmt/StmtList.java", "commit_date": "2015-02-18 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * \n * @param st\n *            Statement Type\n * @param et\n *            The number of argument\n */\n", "func_signal": "protected Stmt(ST st, ET et)", "code": "{\n    this.st = st;\n    this.et = et;\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/stmt/Stmt.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * test for return 1+2+3;\n */\n", "func_signal": "@Test\npublic void test00Base()", "code": "{\n    initMethod(true, \"I\");\n    addStmt(nReturn(nAdd(nAdd(nInt(1), nInt(2), \"I\"), nInt(3), \"I\")));\n    transform();\n\n    Assert.assertEquals(\"should expends to 3 stmts\", 3, method.stmts.getSize());\n    Assert.assertEquals(\"should expends to 2 locals\", 2, method.locals.size());\n\n    // System.out.println(super.method);\n}", "path": "dex2jar/dex-ir/src/test/java/com/googlecode/dex2jar/ir/test/JimpleTransformerTest.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * <pre>\n *  -l,--use-locals output the .locals directive with the number of non-parameter registers, rather than the .register\n * </pre>\n * \n * @return\n */\n", "func_signal": "public Baksmali useLocals()", "code": "{\n    this.useLocals = true;\n    return this;\n}", "path": "dex2jar/d2j-smali/src/main/java/com/googlecode/d2j/smali/Baksmali.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * if a local is only used in one place, and the value is isLocationInsensitive,\n * remove the local and replace it with its value\n * <pre>\n *     a=b+c\n *     d=a+e\n * </pre>\n * to\n * <pre>\n *     d=(b+c)+e\n * </pre>\n */\n", "func_signal": "private boolean simpleMergeLocals(IrMethod method, boolean changed, Set<Stmt> locationSensitiveStmts)", "code": "{\n    if (method.locals.size() == 0) {\n        return false;\n    }\n    final int[] readCounts = Cfg.countLocalReads(method);\n    Set<Local> useInPhi = collectLocalUsedInPhi(method);\n    final Map<Local, Value> toReplace = new HashMap<>();\n    for (Iterator<Stmt> it = method.stmts.iterator(); it.hasNext(); ) {\n        Stmt p = it.next();\n        if (p.st == Stmt.ST.ASSIGN && p.getOp1().vt == Value.VT.LOCAL) {\n            Local local = (Local) p.getOp1();\n            if (useInPhi.contains(local)) {\n                continue;\n            }\n            if (readCounts[local._ls_index] < 2) {\n                Value op2 = p.getOp2();\n                if (isLocationInsensitive(op2)) {\n                    method.locals.remove(local);\n                    toReplace.put(local, op2);\n                    it.remove();\n                    changed = true;\n                } else {\n                    locationSensitiveStmts.add(p);\n                }\n            }\n        }\n    }\n    Cfg.TravelCallBack tcb = new Cfg.TravelCallBack() {\n        @Override\n        public Value onAssign(Local v, AssignStmt as) {\n            return v;\n        }\n\n        @Override\n        public Value onUse(Local v) {\n            Value v2 = toReplace.get(v);\n            if (v2 != null) {\n                return v2;\n            }\n            return v;\n        }\n    };\n\n    modReplace(toReplace, tcb);\n\n    Cfg.travelMod(method.stmts, tcb, false);\n    return changed;\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/ts/AggTransformer.java", "commit_date": "2017-07-15 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * Base64-encode the given data and return a newly allocated\n * String with the result.\n *\n * @param input  the data to encode\n * @param offset the position within the input array at which to\n *               start\n * @param len    the number of bytes of input to encode\n * @param flags  controls certain features of the encoded output.\n *               Passing {@code DEFAULT} results in output that\n *               adheres to RFC 2045.\n */\n", "func_signal": "public static String encodeToString(byte[] input, int offset, int len, int flags)", "code": "{\n    try {\n        return new String(encode(input, offset, len, flags), \"US-ASCII\");\n    } catch (UnsupportedEncodingException e) {\n        // US-ASCII is guaranteed to be available.\n        throw new AssertionError(e);\n    }\n}", "path": "dex2jar/dex-tools/src/main/java/com/googlecode/d2j/signapk/Base64.java", "commit_date": "2014-07-31 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * \n * @param offset\n *            the offset of the label\n */\n", "func_signal": "public DexLabel(int offset)", "code": "{\n    super();\n    this.offset = offset;\n}", "path": "dex2jar/dex-reader-api/src/main/java/com/googlecode/d2j/DexLabel.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * Base64-encode the given data and return a newly allocated\n * String with the result.\n *\n * @param input  the data to encode\n * @param flags  controls certain features of the encoded output.\n *               Passing {@code DEFAULT} results in output that\n *               adheres to RFC 2045.\n */\n", "func_signal": "public static String encodeToString(byte[] input, int flags)", "code": "{\n    try {\n        return new String(encode(input, flags), \"US-ASCII\");\n    } catch (UnsupportedEncodingException e) {\n        // US-ASCII is guaranteed to be available.\n        throw new AssertionError(e);\n    }\n}", "path": "dex2jar/dex-tools/src/main/java/com/googlecode/d2j/signapk/Base64.java", "commit_date": "2014-07-31 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * Decode another block of input data.\n *\n * @return true if the state machine is still healthy.  false if\n *         bad base-64 data has been detected in the input stream.\n */\n", "func_signal": "public boolean process(byte[] input, int offset, int len, boolean finish)", "code": "{\n    if (this.state == 6) return false;\n\n    int p = offset;\n    len += offset;\n\n    // Using local variables makes the decoder about 12%\n    // faster than if we manipulate the member variables in\n    // the loop.  (Even alphabet makes a measurable\n    // difference, which is somewhat surprising to me since\n    // the member variable is final.)\n    int state = this.state;\n    int value = this.value;\n    int op = 0;\n    final byte[] output = this.output;\n    final int[] alphabet = this.alphabet;\n\n    while (p < len) {\n        // Try the fast path:  we're starting a new tuple and the\n        // next four bytes of the input stream are all data\n        // bytes.  This corresponds to going through states\n        // 0-1-2-3-0.  We expect to use this method for most of\n        // the data.\n        //\n        // If any of the next four bytes of input are non-data\n        // (whitespace, etc.), value will end up negative.  (All\n        // the non-data values in decode are small negative\n        // numbers, so shifting any of them up and or'ing them\n        // together will result in a value with its top bit set.)\n        //\n        // You can remove this whole block and the output should\n        // be the same, just slower.\n        if (state == 0) {\n            while (p+4 <= len &&\n                   (value = ((alphabet[input[p] & 0xff] << 18) |\n                             (alphabet[input[p+1] & 0xff] << 12) |\n                             (alphabet[input[p+2] & 0xff] << 6) |\n                             (alphabet[input[p+3] & 0xff]))) >= 0) {\n                output[op+2] = (byte) value;\n                output[op+1] = (byte) (value >> 8);\n                output[op] = (byte) (value >> 16);\n                op += 3;\n                p += 4;\n            }\n            if (p >= len) break;\n        }\n\n        // The fast path isn't available -- either we've read a\n        // partial tuple, or the next four input bytes aren't all\n        // data, or whatever.  Fall back to the slower state\n        // machine implementation.\n\n        int d = alphabet[input[p++] & 0xff];\n\n        switch (state) {\n        case 0:\n            if (d >= 0) {\n                value = d;\n                ++state;\n            } else if (d != SKIP) {\n                this.state = 6;\n                return false;\n            }\n            break;\n\n        case 1:\n            if (d >= 0) {\n                value = (value << 6) | d;\n                ++state;\n            } else if (d != SKIP) {\n                this.state = 6;\n                return false;\n            }\n            break;\n\n        case 2:\n            if (d >= 0) {\n                value = (value << 6) | d;\n                ++state;\n            } else if (d == EQUALS) {\n                // Emit the last (partial) output tuple;\n                // expect exactly one more padding character.\n                output[op++] = (byte) (value >> 4);\n                state = 4;\n            } else if (d != SKIP) {\n                this.state = 6;\n                return false;\n            }\n            break;\n\n        case 3:\n            if (d >= 0) {\n                // Emit the output triple and return to state 0.\n                value = (value << 6) | d;\n                output[op+2] = (byte) value;\n                output[op+1] = (byte) (value >> 8);\n                output[op] = (byte) (value >> 16);\n                op += 3;\n                state = 0;\n            } else if (d == EQUALS) {\n                // Emit the last (partial) output tuple;\n                // expect no further data or padding characters.\n                output[op+1] = (byte) (value >> 2);\n                output[op] = (byte) (value >> 10);\n                op += 2;\n                state = 5;\n            } else if (d != SKIP) {\n                this.state = 6;\n                return false;\n            }\n            break;\n\n        case 4:\n            if (d == EQUALS) {\n                ++state;\n            } else if (d != SKIP) {\n                this.state = 6;\n                return false;\n            }\n            break;\n\n        case 5:\n            if (d != SKIP) {\n                this.state = 6;\n                return false;\n            }\n            break;\n        }\n    }\n\n    if (!finish) {\n        // We're out of input, but a future call could provide\n        // more.\n        this.state = state;\n        this.value = value;\n        this.op = op;\n        return true;\n    }\n\n    // Done reading input.  Now figure out where we are left in\n    // the state machine and finish up.\n\n    switch (state) {\n    case 0:\n        // Output length is a multiple of three.  Fine.\n        break;\n    case 1:\n        // Read one extra input byte, which isn't enough to\n        // make another output byte.  Illegal.\n        this.state = 6;\n        return false;\n    case 2:\n        // Read two extra input bytes, enough to emit 1 more\n        // output byte.  Fine.\n        output[op++] = (byte) (value >> 4);\n        break;\n    case 3:\n        // Read three extra input bytes, enough to emit 2 more\n        // output bytes.  Fine.\n        output[op++] = (byte) (value >> 10);\n        output[op++] = (byte) (value >> 2);\n        break;\n    case 4:\n        // Read one padding '=' when we expected 2.  Illegal.\n        this.state = 6;\n        return false;\n    case 5:\n        // Read all the padding '='s we expected and no more.\n        // Fine.\n        break;\n    }\n\n    this.state = state;\n    this.op = op;\n    return true;\n}", "path": "dex2jar/dex-tools/src/main/java/com/googlecode/d2j/signapk/Base64.java", "commit_date": "2014-07-31 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * <pre>\n *  -p,--no-parameter-registers use the v<n> syntax instead of the p<n> syntax for registers mapped to method parameters\n * </pre>\n * \n * @return\n */\n", "func_signal": "public Baksmali noParameterRegisters()", "code": "{\n    this.parameterRegisters = false;\n    return this;\n}", "path": "dex2jar/d2j-smali/src/main/java/com/googlecode/d2j/smali/Baksmali.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * Decode the Base64-encoded data in input and return the data in\n * a new byte array.\n *\n * <p>The padding '=' characters at the end are considered optional, but\n * if any are present, there must be the correct number of them.\n *\n * @param input  the data to decode\n * @param offset the position within the input array at which to start\n * @param len    the number of bytes of input to decode\n * @param flags  controls certain features of the decoded output.\n *               Pass {@code DEFAULT} to decode standard Base64.\n *\n * @throws IllegalArgumentException if the input contains\n * incorrect padding\n */\n", "func_signal": "public static byte[] decode(byte[] input, int offset, int len, int flags)", "code": "{\n    // Allocate space for the most data the input could represent.\n    // (It could contain less if it contains whitespace, etc.)\n    Decoder decoder = new Decoder(flags, new byte[len*3/4]);\n\n    if (!decoder.process(input, offset, len, true)) {\n        throw new IllegalArgumentException(\"bad base-64\");\n    }\n\n    // Maybe we got lucky and allocated exactly enough output space.\n    if (decoder.op == decoder.output.length) {\n        return decoder.output;\n    }\n\n    // Need to shorten the array, so allocate a new one of the\n    // right size and copy.\n    byte[] temp = new byte[decoder.op];\n    System.arraycopy(decoder.output, 0, temp, 0, decoder.op);\n    return temp;\n}", "path": "dex2jar/dex-tools/src/main/java/com/googlecode/d2j/signapk/Base64.java", "commit_date": "2014-07-31 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * Base64-encode the given data and return a newly allocated\n * byte[] with the result.\n *\n * @param input  the data to encode\n * @param offset the position within the input array at which to\n *               start\n * @param len    the number of bytes of input to encode\n * @param flags  controls certain features of the encoded output.\n *               Passing {@code DEFAULT} results in output that\n *               adheres to RFC 2045.\n */\n", "func_signal": "public static byte[] encode(byte[] input, int offset, int len, int flags)", "code": "{\n    Encoder encoder = new Encoder(flags, null);\n\n    // Compute the exact length of the array we will produce.\n    int output_len = len / 3 * 4;\n\n    // Account for the tail of the data and the padding bytes, if any.\n    if (encoder.do_padding) {\n        if (len % 3 > 0) {\n            output_len += 4;\n        }\n    } else {\n        switch (len % 3) {\n            case 0: break;\n            case 1: output_len += 2; break;\n            case 2: output_len += 3; break;\n        }\n    }\n\n    // Account for the newlines, if any.\n    if (encoder.do_newline && len > 0) {\n        output_len += (((len-1) / (3 * Encoder.LINE_GROUPS)) + 1) *\n            (encoder.do_cr ? 2 : 1);\n    }\n\n    encoder.output = new byte[output_len];\n    encoder.process(input, offset, len, true);\n\n    assert encoder.op == output_len;\n\n    return encoder.output;\n}", "path": "dex2jar/dex-tools/src/main/java/com/googlecode/d2j/signapk/Base64.java", "commit_date": "2014-07-31 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * IF\n * \n * @param type\n * @param condition\n * @param target\n */\n", "func_signal": "public IfStmt(ST type, Value condition, LabelStmt target)", "code": "{\n    super(type, condition);\n    this.target = target;\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/stmt/IfStmt.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * @param vt\n * @param value\n * @param type\n */\n", "func_signal": "public UnopExpr(VT vt, Value value, String type)", "code": "{\n    super(vt, value);\n    this.type = type;\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/expr/UnopExpr.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * test for System.out.print(\"Hello JNI\");\n */\n", "func_signal": "@Test\npublic void test01HelloWord()", "code": "{\n    initMethod(true, \"V\");\n    addStmt(Stmts.nVoidInvoke(Exprs.nInvokeVirtual(\n            new Value[] {//\n            Exprs.nStaticField(\"Ljava/lang/System;\", \"out\", \"Ljava/io/PrintStream;\"),//\n                    Exprs.nString(\"Hello JNI\") }, \"Ljava/io/PrintStream;\", \"println\",\n            new String[] { \"Ljava/lang/String;\" }, \"V\")));\n    transform();\n    Assert.assertEquals(\"should expends to 3 stmts\", 3, method.stmts.getSize());\n    Assert.assertEquals(\"should expends to 2 locals\", 2, method.locals.size());\n\n    // System.out.println(super.method);\n}", "path": "dex2jar/dex-ir/src/test/java/com/googlecode/dex2jar/ir/test/JimpleTransformerTest.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * <pre>\n * -b,--no-debug-info don't write out debug info (.local, .param, .line, etc.)\n * </pre>\n * \n * @return\n */\n", "func_signal": "public Baksmali noDebug()", "code": "{\n    this.noDebug = true;\n    return this;\n}", "path": "dex2jar/d2j-smali/src/main/java/com/googlecode/d2j/smali/Baksmali.java", "commit_date": "2014-07-21 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * [[B + [[D -> [L\n * [B + L -> [B\n * [[B + [B -> [[B\n *\n * @param a\n * @param b\n * @return\n */\n", "func_signal": "private static String mergeTypeEx(String a, String b)", "code": "{\n    if (a.equals(b)) {\n        return a;\n    }\n    int as = countArrayDim(a);\n    int bs = countArrayDim(b);\n    if (as > bs) {\n        return a;\n    } else if (bs > as) {\n        return b;\n    } else { // as==bs;\n        String elementTypeA = a.substring(as);\n        String elementTypeB = a.substring(bs);\n        TypeClass ta = TypeClass.clzOf(elementTypeA);\n        TypeClass tb = TypeClass.clzOf(elementTypeB);\n        if (ta.fixed && !tb.fixed) {\n            return a;\n        } else if (!ta.fixed && tb.fixed) {\n            return b;\n        } else if (ta.fixed && tb.fixed) {\n            if (ta != tb) {\n                if (as == 0) {\n                    throw new RuntimeException();\n                }\n                return buildArray(as - 1, \"L\");\n            }\n            if (ta == TypeClass.INT) {\n                String chooseType = \"I\";\n                for (int i = possibleIntTypes.length - 1; i >= 0; i--) {\n                    String t = possibleIntTypes[i];\n                    if (a.equals(t) || b.equals(t)) {\n                        chooseType = t;\n                        break;\n                    }\n                }\n                return buildArray(as, chooseType);\n            } else {\n                return buildArray(as, \"L\");\n            }\n        } else { // !ta.fixed && !tb.fixed\n            return buildArray(as, TypeClass.merge(ta, tb).name);\n        }\n    }\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/ts/TypeTransformer.java", "commit_date": "2018-04-02 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * dfs searching, if local is appear before first location-insensitive value, throws SUCCESS, or throws FAIL\n */\n", "func_signal": "private static void localCanExecFirst(Local local, Value op) throws MergeResult", "code": "{\n    switch (op.et) {\n        case E0:\n            if (local.vt == Value.VT.LOCAL) {\n                if (op == local) {\n                    throw SUCCESS;\n                }\n            }\n            break;\n        case E1:\n            localCanExecFirst(local, op.getOp());\n            break;\n        case E2:\n            localCanExecFirst(local, op.getOp1());\n            localCanExecFirst(local, op.getOp2());\n            break;\n        case En:\n            for (Value v : op.getOps()) {\n                localCanExecFirst(local, v);\n            }\n    }\n\n    boolean shouldExclude = false;\n    if (op.vt == Value.VT.INVOKE_STATIC) {\n        InvokeExpr ie = (InvokeExpr) op;\n        if (ie.getName().equals(\"valueOf\") && ie.getOwner().startsWith(\"Ljava/lang/\") && ie.getArgs().length == 1 && ie.getArgs()[0].length() == 1) {\n            shouldExclude = true;\n        }\n    }\n\n    if (!isLocationInsensitive(op.vt) && !shouldExclude) {  // this is the first insensitive Value\n        throw FAIL;\n    }\n}", "path": "dex2jar/dex-ir/src/main/java/com/googlecode/dex2jar/ir/ts/AggTransformer.java", "commit_date": "2017-07-15 00:00:00", "repo_name": "pxb1988/dex2jar", "stars": 11698, "license": "apache-2.0", "language": "java", "size": 8725}
{"docstring": "/**\n * Find all methods annotated with {@link AfterPermissionGranted} on a given object with the\n * correct requestCode argument.\n *\n * @param object      the object with annotated methods.\n * @param requestCode the requestCode passed to the annotation.\n */\n", "func_signal": "private static void runAnnotatedMethods(@NonNull Object object, int requestCode)", "code": "{\n    Class clazz = object.getClass();\n    if (isUsingAndroidAnnotations(object)) {\n        clazz = clazz.getSuperclass();\n    }\n\n    while (clazz != null) {\n        for (Method method : clazz.getDeclaredMethods()) {\n            AfterPermissionGranted ann = method.getAnnotation(AfterPermissionGranted.class);\n            if (ann != null) {\n                // Check for annotated methods with matching request code.\n                if (ann.value() == requestCode) {\n                    // Method must be void so that we can invoke it\n                    if (method.getParameterTypes().length > 0) {\n                        throw new RuntimeException(\n                                \"Cannot execute method \" + method.getName() + \" because it is non-void method and/or has input parameters.\");\n                    }\n\n                    try {\n                        // Make method accessible if private\n                        if (!method.isAccessible()) {\n                            method.setAccessible(true);\n                        }\n                        method.invoke(object);\n                    } catch (IllegalAccessException e) {\n                        Log.e(TAG, \"runDefaultMethod:IllegalAccessException\", e);\n                    } catch (InvocationTargetException e) {\n                        Log.e(TAG, \"runDefaultMethod:InvocationTargetException\", e);\n                    }\n                }\n            }\n        }\n\n        clazz = clazz.getSuperclass();\n    }\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/EasyPermissions.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "// ------ From Activity ------\n", "func_signal": "@Test\npublic void shouldCorrectlyCallback_whenOnRequestPermissionResultCalledFromActivity()", "code": "{\n    EasyPermissions.onRequestPermissionsResult(TestActivity.REQUEST_CODE, ALL_PERMS, SMS_DENIED_RESULT, spyActivity);\n\n    verify(spyActivity, times(1))\n            .onPermissionsGranted(integerCaptor.capture(), listCaptor.capture());\n    assertThat(integerCaptor.getValue()).isEqualTo(TestActivity.REQUEST_CODE);\n    assertThat(listCaptor.getValue())\n            .containsAllIn(new ArrayList<>(Collections.singletonList(Manifest.permission.ACCESS_FINE_LOCATION)));\n\n    verify(spyActivity, times(1))\n            .onPermissionsDenied(integerCaptor.capture(), listCaptor.capture());\n    assertThat(integerCaptor.getValue()).isEqualTo(TestActivity.REQUEST_CODE);\n    assertThat(listCaptor.getValue())\n            .containsAllIn(new ArrayList<>(Collections.singletonList(Manifest.permission.READ_SMS)));\n\n    verify(spyActivity, never()).afterPermissionGranted();\n}", "path": "easypermissions/easypermissions/src/test/java/pub/devrel/easypermissions/EasyPermissionsTest.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the rationale dialog. Default is\n * \"This app may not work correctly without the requested permissions.\n * Open the app settings screen to modify app permissions.\"\n */\n", "func_signal": "@NonNull\npublic Builder setRationale(@StringRes int rationale)", "code": "{\n    mRationale = mContext.getString(rationale);\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the negative button text, default is {@link android.R.string#cancel}.\n * <p>\n * To know if a user cancelled the request, check if your permissions were given with {@link\n * EasyPermissions#hasPermissions(Context, String...)} in {@see\n * Activity#onActivityResult(int, int, Intent)}. If you still don't have the right\n * permissions, then the request was cancelled.\n */\n", "func_signal": "@NonNull\npublic Builder setNegativeButton(@Nullable String text)", "code": "{\n    mNegativeButtonText = text;\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * @see #somePermissionPermanentlyDenied(Activity, List)\n */\n", "func_signal": "public static boolean somePermissionPermanentlyDenied(@NonNull Fragment host,\n                                                      @NonNull List<String> deniedPermissions)", "code": "{\n    return PermissionHelper.newInstance(host)\n            .somePermissionPermanentlyDenied(deniedPermissions);\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/EasyPermissions.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the rationale dialog. Default is\n * \"This app may not work correctly without the requested permissions.\n * Open the app settings screen to modify app permissions.\"\n */\n", "func_signal": "@NonNull\npublic Builder setRationale(@Nullable String rationale)", "code": "{\n    mRationale = rationale;\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Version of {@link #show(FragmentManager, String)} that no-ops when an IllegalStateException\n * would otherwise occur.\n */\n", "func_signal": "public void showAllowingStateLoss(FragmentManager manager, String tag)", "code": "{\n    if (manager.isStateSaved()) {\n        return;\n    }\n\n    show(manager, tag);\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/RationaleDialogFragmentCompat.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Request a set of permissions.\n *\n * @param request the permission request\n * @see PermissionRequest\n */\n", "func_signal": "public static void requestPermissions(PermissionRequest request)", "code": "{\n\n    // Check for permissions before dispatching the request\n    if (hasPermissions(request.getHelper().getContext(), request.getPerms())) {\n        notifyAlreadyHasPermissions(\n                request.getHelper().getHost(), request.getRequestCode(), request.getPerms());\n        return;\n    }\n\n    // Request permissions\n    request.getHelper().requestPermissions(\n            request.getRationale(),\n            request.getPositiveButtonText(),\n            request.getNegativeButtonText(),\n            request.getTheme(),\n            request.getRequestCode(),\n            request.getPerms());\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/EasyPermissions.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Check if at least one permission in the list of denied permissions has been permanently\n * denied (user clicked \"Never ask again\").\n *\n * <b>Note</b>: Due to a limitation in the information provided by the Android\n * framework permissions API, this method only works after the permission\n * has been denied and your app has received the onPermissionsDenied callback.\n * Otherwise the library cannot distinguish permanent denial from the\n * \"not yet denied\" case.\n *\n * @param host              context requesting permissions.\n * @param deniedPermissions list of denied permissions, usually from {@link\n *                          PermissionCallbacks#onPermissionsDenied(int, List)}\n * @return {@code true} if at least one permission in the list was permanently denied.\n */\n", "func_signal": "public static boolean somePermissionPermanentlyDenied(@NonNull Activity host,\n                                                      @NonNull List<String> deniedPermissions)", "code": "{\n    return PermissionHelper.newInstance(host)\n            .somePermissionPermanentlyDenied(deniedPermissions);\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/EasyPermissions.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the positive button text, default is {@link android.R.string#ok}.\n */\n", "func_signal": "@NonNull\npublic Builder setPositiveButton(@StringRes int textId)", "code": "{\n    mPositiveButtonText = mContext.getString(textId);\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the title dialog. Default is \"Permissions Required\".\n */\n", "func_signal": "@NonNull\npublic Builder setTitle(@Nullable String title)", "code": "{\n    mTitle = title;\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the dialog theme.\n */\n", "func_signal": "@NonNull\npublic Builder setThemeResId(@StyleRes int themeResId)", "code": "{\n    mThemeResId = themeResId;\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Build the {@link AppSettingsDialog} from the specified options. Generally followed by a\n * call to {@link AppSettingsDialog#show()}.\n */\n", "func_signal": "@NonNull\npublic AppSettingsDialog build()", "code": "{\n    mRationale = TextUtils.isEmpty(mRationale) ?\n            mContext.getString(R.string.rationale_ask_again) : mRationale;\n    mTitle = TextUtils.isEmpty(mTitle) ?\n            mContext.getString(R.string.title_settings_dialog) : mTitle;\n    mPositiveButtonText = TextUtils.isEmpty(mPositiveButtonText) ?\n            mContext.getString(android.R.string.ok) : mPositiveButtonText;\n    mNegativeButtonText = TextUtils.isEmpty(mNegativeButtonText) ?\n            mContext.getString(android.R.string.cancel) : mNegativeButtonText;\n    mRequestCode = mRequestCode > 0 ? mRequestCode : DEFAULT_SETTINGS_REQ_CODE;\n\n    int intentFlags = 0;\n    if (mOpenInNewTask) {\n        intentFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n    }\n\n    return new AppSettingsDialog(\n            mActivityOrFragment,\n            mThemeResId,\n            mRationale,\n            mTitle,\n            mPositiveButtonText,\n            mNegativeButtonText,\n            mRequestCode,\n            intentFlags);\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the request code use when launching the Settings screen for result, can be retrieved\n * in the calling Activity's {@see Activity#onActivityResult(int, int, Intent)} method.\n * Default is {@link #DEFAULT_SETTINGS_REQ_CODE}.\n */\n", "func_signal": "@NonNull\npublic Builder setRequestCode(int requestCode)", "code": "{\n    mRequestCode = requestCode;\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the negative button text, default is {@link android.R.string#cancel}.\n */\n", "func_signal": "@NonNull\npublic Builder setNegativeButton(@StringRes int textId)", "code": "{\n    mNegativeButtonText = mContext.getString(textId);\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Version of {@link #show(FragmentManager, String)} that no-ops when an IllegalStateException\n * would otherwise occur.\n */\n", "func_signal": "public void showAllowingStateLoss(FragmentManager manager, String tag)", "code": "{\n    // API 26 added this convenient method\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        if (manager.isStateSaved()) {\n            return;\n        }\n    }\n\n    if (mStateSaved) {\n        return;\n    }\n\n    show(manager, tag);\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/RationaleDialogFragment.java", "commit_date": "2019-01-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set whether the settings screen should be opened in a separate task. This is achieved by\n * setting {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK#FLAG_ACTIVITY_NEW_TASK} on\n * the Intent used to open the settings screen.\n */\n", "func_signal": "@NonNull\npublic Builder setOpenInNewTask(boolean openInNewTask)", "code": "{\n    mOpenInNewTask = openInNewTask;\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the title dialog. Default is \"Permissions Required\".\n */\n", "func_signal": "@NonNull\npublic Builder setTitle(@StringRes int title)", "code": "{\n    mTitle = mContext.getString(title);\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Create a new Builder for an {@link AppSettingsDialog}.\n *\n * @param activity the {@link Activity} in which to display the dialog.\n */\n", "func_signal": "public Builder(@NonNull Activity activity)", "code": "{\n    mActivityOrFragment = activity;\n    mContext = activity;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * Set the positive button text, default is {@link android.R.string#ok}.\n */\n", "func_signal": "@NonNull\npublic Builder setPositiveButton(@Nullable String text)", "code": "{\n    mPositiveButtonText = text;\n    return this;\n}", "path": "easypermissions/easypermissions/src/main/java/pub/devrel/easypermissions/AppSettingsDialog.java", "commit_date": "2019-09-23 00:00:00", "repo_name": "googlesamples/easypermissions", "stars": 9796, "license": "apache-2.0", "language": "java", "size": 635}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@link Activity}. The current content\n * view is used as the view root.\n *\n * @param target Target activity for view binding.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Activity target)", "code": "{\n  View sourceView = target.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife-reflect/src/main/java/butterknife/ButterKnife.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/** Returns the first duplicate element inside an array, null if there are no duplicates. */\n", "func_signal": "private static @Nullable Integer findDuplicate(int[] array)", "code": "{\n  Set<Integer> seenElements = new LinkedHashSet<>();\n\n  for (int element : array) {\n    if (!seenElements.add(element)) {\n      return element;\n    }\n  }\n\n  return null;\n}", "path": "butterknife/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@code target} using the {@code source}\n * {@link Dialog} as the view root.\n *\n * @param target Target class for view binding.\n * @param source Dialog on which IDs will be looked up.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Object target, @NonNull Dialog source)", "code": "{\n  View sourceView = source.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife/src/main/java/butterknife/ButterKnife.java", "commit_date": "2019-01-04 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "// AndroidX problems on earlier versions\n", "func_signal": "@Test public void styleMustBeValid()", "code": "{\n   TargetStyle target = new TargetStyle();\n\n   try {\n     ButterKnife.bind(target, tree);\n     fail();\n   } catch (IllegalStateException e) {\n     assertThat(e).hasMessageThat()\n         .isEqualTo(\"@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. \"\n             + \"(com.example.butterknife.functional.BindFontFailureTest$TargetStyle.actual)\");\n   }\n }", "path": "butterknife/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java", "commit_date": "2019-02-08 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "// Implicit synchronization for use of shared resource VALUE.\n", "func_signal": "public static Drawable getTintedDrawable(Context context,\n     @DrawableRes int id, @AttrRes int tintAttrId)", "code": "{\n   boolean attributeFound = context.getTheme().resolveAttribute(tintAttrId, VALUE, true);\n   if (!attributeFound) {\n     throw new Resources.NotFoundException(\"Required tint color attribute with name \"\n         + context.getResources().getResourceEntryName(tintAttrId)\n         + \" and attribute ID \"\n         + tintAttrId\n         + \" was not found.\");\n   }\n\n   Drawable drawable = ContextCompat.getDrawable(context, id);\n   drawable = DrawableCompat.wrap(drawable.mutate());\n   int color = ContextCompat.getColor(context, VALUE.resourceId);\n   DrawableCompat.setTint(drawable, color);\n   return drawable;\n }", "path": "butterknife/butterknife-runtime/src/main/java/butterknife/internal/Utils.java", "commit_date": "2019-09-12 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/** True when this type's bindings use raw integer values instead of {@code R} references. */\n", "func_signal": "private boolean hasUnqualifiedResourceBindings()", "code": "{\n  for (ResourceBinding binding : resourceBindings) {\n    if (!binding.id().qualifed) {\n      return true;\n    }\n  }\n  return false;\n}", "path": "butterknife/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java", "commit_date": "2019-09-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@code target} using the {@code source}\n * {@link Activity} as the view root.\n *\n * @param target Target class for view binding.\n * @param source Activity on which IDs will be looked up.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Object target, @NonNull Activity source)", "code": "{\n  View sourceView = source.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife/src/main/java/butterknife/ButterKnife.java", "commit_date": "2019-01-04 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/** True when this type's bindings use Resource directly instead of Context. */\n", "func_signal": "private boolean hasResourceBindingsNeedingResource(int sdk)", "code": "{\n  for (ResourceBinding binding : resourceBindings) {\n    if (binding.requiresResources(sdk)) {\n      return true;\n    }\n  }\n  return false;\n}", "path": "butterknife/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java", "commit_date": "2019-09-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@link Activity}. The current content\n * view is used as the view root.\n *\n * @param target Target activity for view binding.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Activity target)", "code": "{\n  View sourceView = target.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife/src/main/java/butterknife/ButterKnife.java", "commit_date": "2019-01-04 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@link Dialog}. The current content\n * view is used as the view root.\n *\n * @param target Target dialog for view binding.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Dialog target)", "code": "{\n  View sourceView = target.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife/src/main/java/butterknife/ButterKnife.java", "commit_date": "2019-01-04 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * Returns a method name from the {@code android.content.res.Resources} class for array resource\n * binding, null if the element type is not supported.\n */\n", "func_signal": "private static @Nullable FieldResourceBinding.Type getArrayResourceMethodName(Element element)", "code": "{\n  TypeMirror typeMirror = element.asType();\n  if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {\n    return FieldResourceBinding.Type.TYPED_ARRAY;\n  }\n  if (TypeKind.ARRAY.equals(typeMirror.getKind())) {\n    ArrayType arrayType = (ArrayType) typeMirror;\n    String componentType = arrayType.getComponentType().toString();\n    if (STRING_TYPE.equals(componentType)) {\n      return FieldResourceBinding.Type.STRING_ARRAY;\n    } else if (\"int\".equals(componentType)) {\n      return FieldResourceBinding.Type.INT_ARRAY;\n    } else if (\"java.lang.CharSequence\".equals(componentType)) {\n      return FieldResourceBinding.Type.TEXT_ARRAY;\n    }\n  }\n  return null;\n}", "path": "butterknife/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@code target} using the {@code source}\n * {@link View} as the view root.\n *\n * @param target Target class for view binding.\n * @param source View root on which IDs will be looked up.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Object target, @NonNull View source)", "code": "{\n  Class<?> targetClass = target.getClass();\n  if (debug) Log.d(TAG, \"Looking up binding for \" + targetClass.getName());\n  Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);\n\n  if (constructor == null) {\n    return Unbinder.EMPTY;\n  }\n\n  //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.\n  try {\n    return constructor.newInstance(target, source);\n  } catch (IllegalAccessException e) {\n    throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n  } catch (InstantiationException e) {\n    throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n  } catch (InvocationTargetException e) {\n    Throwable cause = e.getCause();\n    if (cause instanceof RuntimeException) {\n      throw (RuntimeException) cause;\n    }\n    if (cause instanceof Error) {\n      throw (Error) cause;\n    }\n    throw new RuntimeException(\"Unable to create binding instance.\", cause);\n  }\n}", "path": "butterknife/butterknife/src/main/java/butterknife/ButterKnife.java", "commit_date": "2019-01-04 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/** True if this binding requires a view. Otherwise only a context is needed. */\n", "func_signal": "@Override\npublic boolean constructorNeedsView()", "code": "{\n  return hasViewBindings() //\n      || (parentBinding != null && parentBinding.constructorNeedsView());\n}", "path": "butterknife/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java", "commit_date": "2019-09-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@code target} using the {@code source}\n * {@link Activity} as the view root.\n *\n * @param target Target class for view binding.\n * @param source Activity on which IDs will be looked up.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Object target, @NonNull Activity source)", "code": "{\n  View sourceView = source.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife-reflect/src/main/java/butterknife/ButterKnife.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@link Dialog}. The current content\n * view is used as the view root.\n *\n * @param target Target dialog for view binding.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Dialog target)", "code": "{\n  View sourceView = target.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife-reflect/src/main/java/butterknife/ButterKnife.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@code target} using the {@code source}\n * {@link View} as the view root.\n *\n * @param target Target class for view binding.\n * @param source View root on which IDs will be looked up.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Object target, @NonNull View source)", "code": "{\n  List<Unbinder> unbinders = new ArrayList<>();\n  Class<?> targetClass = target.getClass();\n  if ((targetClass.getModifiers() & PRIVATE) != 0) {\n    throw new IllegalArgumentException(targetClass.getName() + \" must not be private.\");\n  }\n\n  while (true) {\n    String clsName = targetClass.getName();\n    if (clsName.startsWith(\"android.\") || clsName.startsWith(\"java.\")\n        || clsName.startsWith(\"androidx.\")) {\n      break;\n    }\n\n    for (Field field : targetClass.getDeclaredFields()) {\n      int unbinderStartingSize = unbinders.size();\n      Unbinder unbinder;\n\n      unbinder = parseBindView(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindViews(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindAnim(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindArray(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindBitmap(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindBool(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindColor(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindDimen(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindDrawable(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindFloat(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindFont(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindInt(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseBindString(target, field, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      if (unbinders.size() - unbinderStartingSize > 1) {\n        throw new IllegalStateException(\n            \"More than one bind annotation on \" + targetClass.getName() + \".\" + field.getName());\n      }\n    }\n\n    for (Method method : targetClass.getDeclaredMethods()) {\n      Unbinder unbinder;\n\n      unbinder = parseOnCheckedChanged(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnClick(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnEditorAction(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnFocusChange(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnItemClick(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnItemLongClick(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnLongClick(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnPageChange(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnTextChanged(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n\n      unbinder = parseOnTouch(target, method, source);\n      if (unbinder != null) unbinders.add(unbinder);\n    }\n\n    targetClass = targetClass.getSuperclass();\n  }\n\n  if (unbinders.isEmpty()) {\n    if (debug) Log.d(TAG, \"MISS: Reached framework class. Abandoning search.\");\n    return Unbinder.EMPTY;\n  }\n\n  if (debug) Log.d(TAG, \"HIT: Reflectively found \" + unbinders.size() + \" bindings.\");\n  return new CompositeUnbinder(unbinders);\n}", "path": "butterknife/butterknife-reflect/src/main/java/butterknife/ButterKnife.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/** Uses both {@link Types#erasure} and string manipulation to strip any generic types. */\n", "func_signal": "private String doubleErasure(TypeMirror elementType)", "code": "{\n  String name = typeUtils.erasure(elementType).toString();\n  int typeParamStart = name.indexOf('<');\n  if (typeParamStart != -1) {\n    name = name.substring(0, typeParamStart);\n  }\n  return name;\n}", "path": "butterknife/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * BindView annotated fields and methods in the specified {@code target} using the {@code source}\n * {@link Dialog} as the view root.\n *\n * @param target Target class for view binding.\n * @param source Dialog on which IDs will be looked up.\n */\n", "func_signal": "@NonNull @UiThread\npublic static Unbinder bind(@NonNull Object target, @NonNull Dialog source)", "code": "{\n  View sourceView = source.getWindow().getDecorView();\n  return bind(target, sourceView);\n}", "path": "butterknife/butterknife-reflect/src/main/java/butterknife/ButterKnife.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/** Returns true when the return value should be propagated. Use a default otherwise. */\n", "func_signal": "private static boolean validateReturnType(Method method, Class<?> expected)", "code": "{\n  Class<?> returnType = method.getReturnType();\n  if (returnType == void.class) {\n    return false;\n  }\n  if (returnType != expected) {\n    String expectedType = \"'\" + expected.getName() + \"'\";\n    if (expected != void.class) {\n      expectedType = \"'void' or \" + expectedType;\n    }\n    throw new IllegalStateException(method.getDeclaringClass().getName()\n        + \".\"\n        + method.getName()\n        + \" must have return type of \"\n        + expectedType);\n  }\n  return true;\n}", "path": "butterknife/butterknife-reflect/src/main/java/butterknife/ButterKnife.java", "commit_date": "2020-08-05 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "// Implicit synchronization for use of shared resource VALUE.\n", "func_signal": "public static float getFloat(Context context, @DimenRes int id)", "code": "{\n   TypedValue value = VALUE;\n   context.getResources().getValue(id, value, true);\n   if (value.type == TypedValue.TYPE_FLOAT) {\n     return value.getFloat();\n   }\n   throw new Resources.NotFoundException(\"Resource ID #0x\" + Integer.toHexString(id)\n       + \" type #0x\" + Integer.toHexString(value.type) + \" is not valid\");\n }", "path": "butterknife/butterknife-runtime/src/main/java/butterknife/internal/Utils.java", "commit_date": "2019-09-12 00:00:00", "repo_name": "JakeWharton/butterknife", "stars": 25581, "license": "apache-2.0", "language": "java", "size": 3909}
{"docstring": "/**\n * Provide a custom thread pool to EventBus used for async and background event delivery. This is an advanced\n * setting to that can break things: ensure the given ExecutorService won't get stuck to avoid undefined behavior.\n */\n", "func_signal": "public EventBusBuilder executorService(ExecutorService executorService)", "code": "{\n    this.executorService = executorService;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Adds an index generated by EventBus' annotation preprocessor. */\n", "func_signal": "public EventBusBuilder addIndex(SubscriberInfoIndex index)", "code": "{\n    if (subscriberInfoIndexes == null) {\n        subscriberInfoIndexes = new ArrayList<>();\n    }\n    subscriberInfoIndexes.add(index);\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Default: true */\n", "func_signal": "public EventBusBuilder logNoSubscriberMessages(boolean logNoSubscriberMessages)", "code": "{\n    this.logNoSubscriberMessages = logNoSubscriberMessages;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Looks at the exception and its causes trying to find an ID. */\n", "func_signal": "public Integer mapThrowable(final Throwable throwable)", "code": "{\n    Throwable throwableToCheck = throwable;\n    int depthToGo = 20;\n\n    while (true) {\n        Integer resId = mapThrowableFlat(throwableToCheck);\n        if (resId != null) {\n            return resId;\n        } else {\n            throwableToCheck = throwableToCheck.getCause();\n            depthToGo--;\n            if (depthToGo <= 0 || throwableToCheck == throwable || throwableToCheck == null) {\n                Logger logger = Logger.Default.get();  // No EventBus instance here\n                logger.log(Level.FINE, \"No specific message resource ID found for \" + throwable);\n                // return config.defaultErrorMsgId;\n                return null;\n            }\n        }\n    }\n\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/util/ExceptionToResourceMapping.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Mapping without checking the cause (done in mapThrowable). */\n", "func_signal": "protected Integer mapThrowableFlat(Throwable throwable)", "code": "{\n    Class<? extends Throwable> throwableClass = throwable.getClass();\n    Integer resId = throwableToMsgIdMap.get(throwableClass);\n    if (resId == null) {\n        Class<? extends Throwable> closestClass = null;\n        Set<Entry<Class<? extends Throwable>, Integer>> mappings = throwableToMsgIdMap.entrySet();\n        for (Entry<Class<? extends Throwable>, Integer> mapping : mappings) {\n            Class<? extends Throwable> candidate = mapping.getKey();\n            if (candidate.isAssignableFrom(throwableClass)) {\n                if (closestClass == null || closestClass.isAssignableFrom(candidate)) {\n                    closestClass = candidate;\n                    resId = mapping.getValue();\n                }\n            }\n        }\n\n    }\n    return resId;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/util/ExceptionToResourceMapping.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * Installs the default EventBus returned by {@link EventBus#getDefault()} using this builders' values. Must be\n * done only once before the first usage of the default EventBus.\n *\n * @throws EventBusException if there's already a default EventBus instance in place\n */\n", "func_signal": "public EventBus installDefaultEventBus()", "code": "{\n    synchronized (EventBus.class) {\n        if (EventBus.defaultInstance != null) {\n            throw new EventBusException(\"Default instance already exists.\" +\n                    \" It may be only set once before it's used the first time to ensure consistent behavior.\");\n        }\n        EventBus.defaultInstance = build();\n        return EventBus.defaultInstance;\n    }\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Forces the use of reflection even if there's a generated index (default: false). */\n", "func_signal": "public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex)", "code": "{\n    this.ignoreGeneratedIndex = ignoreGeneratedIndex;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * Fails if an subscriber throws an exception (default: false).\n * <p/>\n * Tip: Use this with BuildConfig.DEBUG to let the app crash in DEBUG mode (only). This way, you won't miss\n * exceptions during development.\n */\n", "func_signal": "public EventBusBuilder throwSubscriberException(boolean throwSubscriberException)", "code": "{\n    this.throwSubscriberException = throwSubscriberException;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Default: true */\n", "func_signal": "public EventBusBuilder logSubscriberExceptions(boolean logSubscriberExceptions)", "code": "{\n    this.logSubscriberExceptions = logSubscriberExceptions;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Ensures the index is actually used and no reflection fall-back kicks in. */\n", "func_signal": "@Test\npublic void testManualIndexWithoutAnnotation()", "code": "{\n    SubscriberInfoIndex index = new SubscriberInfoIndex() {\n\n        @Override\n        public SubscriberInfo getSubscriberInfo(Class<?> subscriberClass) {\n            Assert.assertEquals(EventBusIndexTest.class, subscriberClass);\n            SubscriberMethodInfo[] methodInfos = {\n                    new SubscriberMethodInfo(\"someMethodWithoutAnnotation\", String.class)\n            };\n            return new SimpleSubscriberInfo(EventBusIndexTest.class, false, methodInfos);\n        }\n    };\n\n    EventBus eventBus = EventBus.builder().addIndex(index).build();\n    eventBus.register(this);\n    eventBus.post(\"Yepp\");\n    eventBus.unregister(this);\n    Assert.assertEquals(\"Yepp\", value);\n}", "path": "EventBus/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusIndexTest.java", "commit_date": "2017-09-18 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * Subscriber classes should be skipped if their class or any involved event class are not visible to the index.\n */\n", "func_signal": "private void checkForSubscribersToSkip(Messager messager, String myPackage)", "code": "{\n    for (TypeElement skipCandidate : methodsByClass.keySet()) {\n        TypeElement subscriberClass = skipCandidate;\n        while (subscriberClass != null) {\n            if (!isVisible(myPackage, subscriberClass)) {\n                boolean added = classesToSkip.add(skipCandidate);\n                if (added) {\n                    String msg;\n                    if (subscriberClass.equals(skipCandidate)) {\n                        msg = \"Falling back to reflection because class is not public\";\n                    } else {\n                        msg = \"Falling back to reflection because \" + skipCandidate +\n                                \" has a non-public super class\";\n                    }\n                    messager.printMessage(Diagnostic.Kind.NOTE, msg, subscriberClass);\n                }\n                break;\n            }\n            List<ExecutableElement> methods = methodsByClass.get(subscriberClass);\n            if (methods != null) {\n                for (ExecutableElement method : methods) {\n                    String skipReason = null;\n                    VariableElement param = method.getParameters().get(0);\n                    TypeMirror typeMirror = getParamTypeMirror(param, messager);\n                    if (!(typeMirror instanceof DeclaredType) ||\n                            !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {\n                        skipReason = \"event type cannot be processed\";\n                    }\n                    if (skipReason == null) {\n                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();\n                        if (!isVisible(myPackage, eventTypeElement)) {\n                            skipReason = \"event type is not public\";\n                        }\n                    }\n                    if (skipReason != null) {\n                        boolean added = classesToSkip.add(skipCandidate);\n                        if (added) {\n                            String msg = \"Falling back to reflection because \" + skipReason;\n                            if (!subscriberClass.equals(skipCandidate)) {\n                                msg += \" (found in super class for \" + skipCandidate + \")\";\n                            }\n                            messager.printMessage(Diagnostic.Kind.NOTE, msg, param);\n                        }\n                        break;\n                    }\n                }\n            }\n            subscriberClass = getSuperclass(subscriberClass);\n        }\n    }\n}", "path": "EventBus/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java", "commit_date": "2020-01-28 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Enables strict method verification (default: false). */\n", "func_signal": "public EventBusBuilder strictMethodVerification(boolean strictMethodVerification)", "code": "{\n    this.strictMethodVerification = strictMethodVerification;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * By default, EventBus considers the event class hierarchy (subscribers to super classes will be notified).\n * Switching this feature off will improve posting of events. For simple event classes extending Object directly,\n * we measured a speed up of 20% for event posting. For more complex event hierarchies, the speed up should be\n * greater than 20%.\n * <p/>\n * However, keep in mind that event posting usually consumes just a small proportion of CPU time inside an app,\n * unless it is posting at high rates, e.g. hundreds/thousands of events per second.\n */\n", "func_signal": "public EventBusBuilder eventInheritance(boolean eventInheritance)", "code": "{\n    this.eventInheritance = eventInheritance;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Default: true */\n", "func_signal": "public EventBusBuilder sendNoSubscriberEvent(boolean sendNoSubscriberEvent)", "code": "{\n    this.sendNoSubscriberEvent = sendNoSubscriberEvent;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * Set a specific log handler for all EventBus logging.\n * <p/>\n * By default all logging is via {@link android.util.Log} but if you want to use EventBus\n * outside the Android environment then you will need to provide another log target.\n */\n", "func_signal": "public EventBusBuilder logger(Logger logger)", "code": "{\n    this.logger = logger;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Posts an failure event if the given {@link RunnableEx} throws an Exception. */\n", "func_signal": "public void execute(final RunnableEx runnable)", "code": "{\n    threadPool.execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                runnable.run();\n            } catch (Exception e) {\n                Object event;\n                try {\n                    event = failureEventConstructor.newInstance(e);\n                } catch (Exception e1) {\n                    eventBus.getLogger().log(Level.SEVERE, \"Original exception:\", e);\n                    throw new RuntimeException(\"Could not create failure event\", e1);\n                }\n                if (event instanceof HasExecutionScope) {\n                    ((HasExecutionScope) event).setExecutionScope(scope);\n                }\n                eventBus.post(event);\n            }\n        }\n    });\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/util/AsyncExecutor.java", "commit_date": "2017-09-16 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * @param suppressErrorUi\n *            true indicates to the receiver that no error UI (e.g. dialog) should now displayed.\n */\n", "func_signal": "public ThrowableFailureEvent(Throwable throwable, boolean suppressErrorUi)", "code": "{\n    this.throwable = throwable;\n    this.suppressErrorUi = suppressErrorUi;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/util/ThrowableFailureEvent.java", "commit_date": "2016-01-30 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/** Default: true */\n", "func_signal": "public EventBusBuilder sendSubscriberExceptionEvent(boolean sendSubscriberExceptionEvent)", "code": "{\n    this.sendSubscriberExceptionEvent = sendSubscriberExceptionEvent;\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * Method name verification is done for methods starting with onEvent to avoid typos; using this method you can\n * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor\n * abstract).\n */\n", "func_signal": "public EventBusBuilder skipMethodVerificationFor(Class<?> clazz)", "code": "{\n    if (skipMethodVerificationForClasses == null) {\n        skipMethodVerificationForClasses = new ArrayList<>();\n    }\n    skipMethodVerificationForClasses.add(clazz);\n    return this;\n}", "path": "EventBus/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java", "commit_date": "2020-02-04 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "//    public void testSubscriberStatic() {\n//        try {\n//            eventBus.register(new Static());\n//            fail(\"Registration of ilegal subscriber successful\");\n//        } catch (EventBusException e) {\n//            // Expected\n//        }\n//    }\n", "func_signal": "public void testSubscriberLegalAbstract()", "code": "{\n        eventBus.register(new AbstractImpl());\n\n        eventBus.post(\"42\");\n        assertEquals(1, eventCount.intValue());\n    }", "path": "EventBus/EventBusTestJava/src/main/java/org/greenrobot/eventbus/EventBusSubscriberLegalTest.java", "commit_date": "2017-09-18 00:00:00", "repo_name": "greenrobot/EventBus", "stars": 24553, "license": "apache-2.0", "language": "java", "size": 1742}
{"docstring": "/**\n * Set the scale on the current composition. The only cost of this function is re-rendering the\n * current frame so you may call it frequent to scale something up or down.\n *\n * The smaller the animation is, the better the performance will be. You may find that scaling an\n * animation down then rendering it in a larger ImageView and letting ImageView scale it back up\n * with a scaleType such as centerInside will yield better performance with little perceivable\n * quality loss.\n *\n * You can also use a fixed view width/height in conjunction with the normal ImageView\n * scaleTypes centerCrop and centerInside.\n */\n", "func_signal": "public void setScale(float scale)", "code": "{\n  lottieDrawable.setScale(scale);\n  if (getDrawable() == lottieDrawable) {\n    setLottieDrawable();\n  }\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * If rendering via software, Android will fail to generate a bitmap if the view is too large. Rather than displaying\n * nothing, fallback on hardware acceleration which may incur a performance hit.\n *\n * @see #setRenderMode(RenderMode)\n * @see com.airbnb.lottie.LottieDrawable#draw(android.graphics.Canvas)\n */\n", "func_signal": "@Override\npublic void buildDrawingCache(boolean autoScale)", "code": "{\n  L.beginSection(\"buildDrawingCache\");\n  buildDrawingCacheDepth++;\n  super.buildDrawingCache(autoScale);\n  if (buildDrawingCacheDepth == 1 && getWidth() > 0 && getHeight() > 0 &&\n      getLayerType() == LAYER_TYPE_SOFTWARE && getDrawingCache(autoScale) == null) {\n    setRenderMode(HARDWARE);\n  }\n  buildDrawingCacheDepth--;\n  L.endSection(\"buildDrawingCache\");\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Remove a given task listener. The task will continue to execute so you can re-add\n * a listener if neccesary.\n * @return the task for call chaining.\n */\n", "func_signal": "public synchronized LottieTask<T> removeListener(LottieListener<T> listener)", "code": "{\n  successListeners.remove(listener);\n  return this;\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieTask.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Load a lottie animation from a url. The url can be a json file or a zip file. Use a zip file if you have images. Simply zip them together and lottie\n * will unzip and link the images automatically.\n *\n * Under the hood, Lottie uses Java HttpURLConnection because it doesn't require any transitive networking dependencies. It will download the file\n * to the application cache under a temporary name. If the file successfully parses to a composition, it will rename the temporary file to one that\n * can be accessed immediately for subsequent requests. If the file does not parse to a composition, the temporary file will be deleted.\n *\n * You can replace the default network stack or cache handling with a global {@link LottieConfig}\n *\n * @see LottieConfig.Builder\n * @see Lottie#initialize(LottieConfig)\n */\n", "func_signal": "public void setAnimationFromUrl(String url)", "code": "{\n  LottieTask<LottieComposition> task = cacheComposition ?\n      LottieCompositionFactory.fromUrl(getContext(), url) : LottieCompositionFactory.fromUrl(getContext(), url, null);\n  setCompositionTask(task);\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Rebalances the tree by making any AVL rotations necessary between the\n * newly-unbalanced node and the tree's root.\n *\n * @param insert true if the node was unbalanced by an insert; false if it\n *     was by a removal.\n */\n", "func_signal": "private void rebalance(Node<K, V> unbalanced, boolean insert)", "code": "{\n  for (Node<K, V> node = unbalanced; node != null; node = node.parent) {\n    Node<K, V> left = node.left;\n    Node<K, V> right = node.right;\n    int leftHeight = left != null ? left.height : 0;\n    int rightHeight = right != null ? right.height : 0;\n\n    int delta = leftHeight - rightHeight;\n    if (delta == -2) {\n      Node<K, V> rightLeft = right.left;\n      Node<K, V> rightRight = right.right;\n      int rightRightHeight = rightRight != null ? rightRight.height : 0;\n      int rightLeftHeight = rightLeft != null ? rightLeft.height : 0;\n\n      int rightDelta = rightLeftHeight - rightRightHeight;\n      if (rightDelta == -1 || (rightDelta == 0 && !insert)) {\n        rotateLeft(node); // AVL right right\n      } else {\n        assert (rightDelta == 1);\n        rotateRight(right); // AVL right left\n        rotateLeft(node);\n      }\n      if (insert) {\n        break; // no further rotations will be necessary\n      }\n\n    } else if (delta == 2) {\n      Node<K, V> leftLeft = left.left;\n      Node<K, V> leftRight = left.right;\n      int leftRightHeight = leftRight != null ? leftRight.height : 0;\n      int leftLeftHeight = leftLeft != null ? leftLeft.height : 0;\n\n      int leftDelta = leftLeftHeight - leftRightHeight;\n      if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n        rotateRight(node); // AVL left left\n      } else {\n        assert (leftDelta == -1);\n        rotateLeft(left); // AVL left right\n        rotateRight(node);\n      }\n      if (insert) {\n        break; // no further rotations will be necessary\n      }\n\n    } else if (delta == 0) {\n      node.height = leftHeight + 1; // leftHeight == rightHeight\n      if (insert) {\n        break; // the insert caused balance, so rebalancing is done!\n      }\n\n    } else {\n      assert (delta == -1 || delta == 1);\n      node.height = Math.max(leftHeight, rightHeight) + 1;\n      if (!insert) {\n        break; // the height hasn't changed, so rebalancing is done!\n      }\n    }\n  }\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java", "commit_date": "2019-05-30 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Sets a composition.\n * You can set a default cache strategy if this view was inflated with xml by\n * using {@link R.attr#lottie_cacheComposition}.\n */\n", "func_signal": "public void setComposition(@NonNull LottieComposition composition)", "code": "{\n  if (L.DBG) {\n    Log.v(TAG, \"Set Composition \\n\" + composition);\n  }\n  lottieDrawable.setCallback(this);\n\n  this.composition = composition;\n  boolean isNewComposition = lottieDrawable.setComposition(composition);\n  enableOrDisableHardwareLayer();\n  if (getDrawable() == lottieDrawable && !isNewComposition) {\n    // We can avoid re-setting the drawable, and invalidating the view, since the composition\n    // hasn't changed.\n    return;\n  } else if (!isNewComposition) {\n    // The current drawable isn't lottieDrawable but the drawable already has the right composition.\n    setLottieDrawable();\n  }\n\n  // This is needed to makes sure that the animation is properly played/paused for the current visibility state.\n  // It is possible that the drawable had a lazy composition task to play the animation but this view subsequently\n  // became invisible. Comment this out and run the espresso tests to see a failing test.\n  onVisibilityChanged(this, getVisibility());\n\n  requestLayout();\n\n  for (LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener : lottieOnCompositionLoadedListeners) {\n      lottieOnCompositionLoadedListener.onCompositionLoaded(composition);\n  }\n\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "//</editor-fold>\n", "func_signal": "private void assertSize(int size, String... keys)", "code": "{\n  KeyPath keyPath = new KeyPath(keys);\n  List<KeyPath> resolvedKeyPaths = lottieDrawable.resolveKeyPath(keyPath);\n  assertEquals(size, resolvedKeyPaths.size());\n}", "path": "lottie-android/lottie/src/test/java/com/airbnb/lottie/KeyPathTest.java", "commit_date": "2018-09-25 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Remove a given task failure listener. The task will continue to execute so you can re-add\n * a listener if neccesary.\n * @return the task for call chaining.\n */\n", "func_signal": "public synchronized LottieTask<T> removeFailureListener(LottieListener<Throwable> listener)", "code": "{\n  failureListeners.remove(listener);\n  return this;\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieTask.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Add a task listener. If the task has completed, the listener will be called synchronously.\n * @return the task for call chaining.\n */\n", "func_signal": "public synchronized LottieTask<T> addListener(LottieListener<T> listener)", "code": "{\n  if (result != null && result.getValue() != null) {\n    listener.onResult(result.getValue());\n  }\n\n  successListeners.add(listener);\n  return this;\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieTask.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Override this to provide your own offset on every frame.\n */\n", "func_signal": "public PointF getOffset(LottieFrameInfo<PointF> frameInfo)", "code": "{\n  if (value == null) {\n    throw new IllegalArgumentException(\"You must provide a static value in the constructor \" +\n        \", call setValue, or override getValue.\");\n  }\n  return value;\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/value/LottieRelativePointValueCallback.java", "commit_date": "2018-09-25 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Plays the animation from the beginning. If speed is {@literal <} 0, it will start at the end\n * and play towards the beginning\n */\n", "func_signal": "@MainThread\npublic void playAnimation()", "code": "{\n  if (isShown()) {\n    lottieDrawable.playAnimation();\n    enableOrDisableHardwareLayer();\n  } else {\n    playAnimationWhenShown = true;\n  }\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Sets the animation from a file in the raw directory.\n * This will load and deserialize the file asynchronously.\n */\n", "func_signal": "public void setAnimation(@RawRes final int rawRes)", "code": "{\n  this.animationResId = rawRes;\n  animationName = null;\n  setCompositionTask(fromRawRes(rawRes));\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Add a task failure listener. This will only be called in the even that an exception\n * occurs. If an exception has already occurred, the listener will be called immediately.\n * @return the task for call chaining.\n */\n", "func_signal": "public synchronized LottieTask<T> addFailureListener(LottieListener<Throwable> listener)", "code": "{\n  if (result != null && result.getException() != null) {\n    listener.onResult(result.getException());\n  }\n\n  failureListeners.add(listener);\n  return this;\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieTask.java", "commit_date": "2019-05-08 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Rotates the subtree so that its root's right child is the new root.\n */\n", "func_signal": "private void rotateLeft(Node<K, V> root)", "code": "{\n  Node<K, V> left = root.left;\n  Node<K, V> pivot = root.right;\n  Node<K, V> pivotLeft = pivot.left;\n  Node<K, V> pivotRight = pivot.right;\n\n  // move the pivot's left child to the root's right\n  root.right = pivotLeft;\n  if (pivotLeft != null) {\n    pivotLeft.parent = root;\n  }\n\n  replaceInParent(root, pivot);\n\n  // move the root to the pivot's left\n  pivot.left = root;\n  root.parent = pivot;\n\n  // fix heights\n  root.height = Math.max(left != null ? left.height : 0,\n      pivotLeft != null ? pivotLeft.height : 0) + 1;\n  pivot.height = Math.max(root.height,\n      pivotRight != null ? pivotRight.height : 0) + 1;\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java", "commit_date": "2019-05-30 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Call this to set whether or not to render with hardware or software acceleration.\n * Lottie defaults to Automatic which will use hardware acceleration unless:\n * 1) There are dash paths and the device is pre-Pie.\n * 2) There are more than 4 masks and mattes and the device is pre-Pie.\n *    Hardware acceleration is generally faster for those devices unless\n *    there are many large mattes and masks in which case there is a ton\n *    of GPU uploadTexture thrashing which makes it much slower.\n *\n * In most cases, hardware rendering will be faster, even if you have mattes and masks.\n * However, if you have multiple mattes and masks (especially large ones) then you\n * should test both render modes. You should also test on pre-Pie and Pie+ devices\n * because the underlying rendering enginge changed significantly.\n */\n", "func_signal": "public void setRenderMode(RenderMode renderMode)", "code": "{\n  this.renderMode = renderMode;\n  enableOrDisableHardwareLayer();\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * This hangs on CI but not locally.\n */\n", "func_signal": "@Ignore\n@Test\npublic void testRemoveListener()", "code": "{\n  final Semaphore lock = new Semaphore(0);\n  LottieTask<Integer> task = new LottieTask<>(new Callable<LottieResult<Integer>>() {\n    @Override public LottieResult<Integer> call() {\n      return new LottieResult<>(5);\n    }\n  })\n      .addListener(successListener)\n      .addFailureListener(failureListener)\n      .addListener(new LottieListener<Integer>() {\n        @Override public void onResult(Integer result) {\n          lock.release();\n        }\n      });\n  task.removeListener(successListener);\n  try {\n    lock.acquire();\n  } catch (InterruptedException e) {\n    throw new IllegalStateException(e);\n  }\n  verifyZeroInteractions(successListener);\n  verifyZeroInteractions(failureListener);\n}", "path": "lottie-android/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java", "commit_date": "2018-09-25 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Overload of {@link #addValueCallback(KeyPath, Object, LottieValueCallback)} that takes an interface. This allows you to use a single abstract\n * method code block in Kotlin such as:\n * animationView.addValueCallback(yourKeyPath, LottieProperty.COLOR) { yourColor }\n */\n", "func_signal": "public <T> void addValueCallback(KeyPath keyPath, T property,\n    final SimpleLottieValueCallback<T> callback)", "code": "{\n  lottieDrawable.addValueCallback(keyPath, property, new LottieValueCallback<T>() {\n    @Override public T getValue(LottieFrameInfo<T> frameInfo) {\n      return callback.getValue(frameInfo);\n    }\n  });\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Applies a supplemental hash function to a given hashCode, which defends\n * against poor quality hash functions. This is critical because HashMap\n * uses power-of-two length hash tables, that otherwise encounter collisions\n * for hashCodes that do not differ in lower or upper bits.\n */\n", "func_signal": "private static int secondaryHash(int h)", "code": "{\n  // Doug Lea's supplemental hash function\n  h ^= (h >>> 20) ^ (h >>> 12);\n  return h ^ (h >>> 7) ^ (h >>> 4);\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java", "commit_date": "2019-05-30 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Returns the first node in this subtree.\n */\n", "func_signal": "public Node<K, V> first()", "code": "{\n  Node<K, V> node = this;\n  Node<K, V> child = node.left;\n  while (child != null) {\n    node = child;\n    child = node.left;\n  }\n  return node;\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/parser/moshi/LinkedHashTreeMap.java", "commit_date": "2019-05-30 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Continues playing the animation from its current position. If speed {@literal <} 0, it will play backwards\n * from the current position.\n */\n", "func_signal": "@MainThread\npublic void resumeAnimation()", "code": "{\n  if (isShown()) {\n    lottieDrawable.resumeAnimation();\n    enableOrDisableHardwareLayer();\n  } else {\n    playAnimationWhenShown = false;\n    wasAnimatingWhenNotShown = true;\n  }\n}", "path": "lottie-android/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java", "commit_date": "2020-12-28 00:00:00", "repo_name": "airbnb/lottie-android", "stars": 34566, "license": "apache-2.0", "language": "java", "size": 136597}
{"docstring": "/**\n * Any @string reference in a <provider> value in AndroidManifest.xml will break on\n * build, thus preventing the application from installing. This is from a bug/error\n * in AOSP where public resources cannot be part of an authorities attribute within\n * a <provider> tag.\n *\n * This finds any reference and replaces it with the literal value found in the\n * res/values/strings.xml file.\n *\n * @param file File for AndroidManifest.xml\n * @throws AndrolibException\n */\n", "func_signal": "public static void fixingPublicAttrsInProviderAttributes(File file) throws AndrolibException", "code": "{\n    boolean saved = false;\n    if (file.exists()) {\n        try {\n            Document doc = loadDocument(file);\n            XPath xPath = XPathFactory.newInstance().newXPath();\n            XPathExpression expression = xPath.compile(\"/manifest/application/provider\");\n\n            Object result = expression.evaluate(doc, XPathConstants.NODESET);\n            NodeList nodes = (NodeList) result;\n\n            for (int i = 0; i < nodes.getLength(); i++) {\n                Node node = nodes.item(i);\n                NamedNodeMap attrs = node.getAttributes();\n\n                if (attrs != null) {\n                    Node provider = attrs.getNamedItem(\"android:authorities\");\n\n                    if (provider != null) {\n                        saved = isSaved(file, saved, provider);\n                    }\n                }\n            }\n\n            // android:scheme\n            xPath = XPathFactory.newInstance().newXPath();\n            expression = xPath.compile(\"/manifest/application/activity/intent-filter/data\");\n\n            result = expression.evaluate(doc, XPathConstants.NODESET);\n            nodes = (NodeList) result;\n\n            for (int i = 0; i < nodes.getLength(); i++) {\n                Node node = nodes.item(i);\n                NamedNodeMap attrs = node.getAttributes();\n\n                if (attrs != null) {\n                    Node provider = attrs.getNamedItem(\"android:scheme\");\n\n                    if (provider != null) {\n                        saved = isSaved(file, saved, provider);\n                    }\n                }\n            }\n\n            if (saved) {\n                saveDocument(file, doc);\n            }\n\n        }  catch (SAXException | ParserConfigurationException | IOException |\n                XPathExpressionException | TransformerException ignored) {\n        }\n    }\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Finds key in integers.xml file and returns text value\n *\n * @param directory Root directory of apk\n * @param key Integer reference (ie @integer/foo)\n * @return String|null\n * @throws AndrolibException\n */\n", "func_signal": "public static String pullValueFromIntegers(File directory, String key) throws AndrolibException", "code": "{\n    if (key == null || ! key.contains(\"@\")) {\n        return null;\n    }\n\n    File file = new File(directory, \"/res/values/integers.xml\");\n    key = key.replace(\"@integer/\", \"\");\n\n    if (file.exists()) {\n        try {\n            Document doc = loadDocument(file);\n            XPath xPath = XPathFactory.newInstance().newXPath();\n            XPathExpression expression = xPath.compile(\"/resources/integer[@name=\" + '\"' + key + \"\\\"]/text()\");\n\n            Object result = expression.evaluate(doc, XPathConstants.STRING);\n\n            if (result != null) {\n                return (String) result;\n            }\n\n        }  catch (SAXException | ParserConfigurationException | IOException | XPathExpressionException ignored) {\n        }\n    }\n\n    return null;\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Finds index of the string. Returns -1 if the string was not found.\n */\n", "func_signal": "public int find(String string)", "code": "{\n    if (string == null) {\n        return -1;\n    }\n    for (int i = 0; i != m_stringOffsets.length; ++i) {\n        int offset = m_stringOffsets[i];\n        int length = getShort(m_strings, offset);\n        if (length != string.length()) {\n            continue;\n        }\n        int j = 0;\n        for (; j != length; ++j) {\n            offset += 2;\n            if (string.charAt(j) != getShort(m_strings, offset)) {\n                break;\n            }\n        }\n        if (j == length) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/** simple utility method -- good for debugging */\n", "func_signal": "protected static final String printable(String s)", "code": "{\n\tif (s == null) {\n\t\treturn \"null\";\n\t}\n\tStringBuffer retval = new StringBuffer(s.length() + 16);\n\tretval.append(\"'\");\n\tfor (int i = 0; i < s.length(); i++) {\n\t\taddPrintable(retval, s.charAt(i));\n\t}\n\tretval.append(\"'\");\n\treturn retval.toString();\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/org/xmlpull/renamed/MXSerializer.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n *\n * @param file File to save Document to (ie AndroidManifest.xml)\n * @param doc Document being saved\n * @throws IOException\n * @throws SAXException\n * @throws ParserConfigurationException\n * @throws TransformerException\n */\n", "func_signal": "private static void saveDocument(File file, Document doc)\n        throws IOException, SAXException, ParserConfigurationException, TransformerException", "code": "{\n\n    TransformerFactory transformerFactory = TransformerFactory.newInstance();\n    Transformer transformer = transformerFactory.newTransformer();\n    DOMSource source = new DOMSource(doc);\n    StreamResult result = new StreamResult(file);\n    transformer.transform(source, result);\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n *\n * @param file File to load into Document\n * @return Document\n * @throws IOException\n * @throws SAXException\n * @throws ParserConfigurationException\n */\n", "func_signal": "private static Document loadDocument(File file)\n        throws IOException, SAXException, ParserConfigurationException", "code": "{\n\n    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n    docFactory.setFeature(FEATURE_DISABLE_DOCTYPE_DECL, true);\n    docFactory.setFeature(FEATURE_LOAD_DTD, false);\n\n    try {\n        docFactory.setAttribute(ACCESS_EXTERNAL_DTD, \" \");\n        docFactory.setAttribute(ACCESS_EXTERNAL_SCHEMA, \" \");\n    } catch (IllegalArgumentException ex) {\n        LOGGER.warning(\"JAXP 1.5 Support is required to validate XML\");\n    }\n\n    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n    // Not using the parse(File) method on purpose, so that we can control when\n    // to close it. Somehow parse(File) does not seem to close the file in all cases.\n    FileInputStream inputStream = new FileInputStream(file);\n    try {\n    \treturn docBuilder.parse(inputStream);\n    } finally {\n    \tinputStream.close();\n    }\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Reads whole (including chunk type) string block from stream. Stream must\n * be at the chunk type.\n */\n", "func_signal": "public static StringBlock read(ExtDataInput reader) throws IOException", "code": "{\n    reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE, CHUNK_NULL_TYPE);\n    int chunkSize = reader.readInt();\n\n    // ResStringPool_header\n    int stringCount = reader.readInt();\n    int styleCount = reader.readInt();\n    int flags = reader.readInt();\n    int stringsOffset = reader.readInt();\n    int stylesOffset = reader.readInt();\n\n    StringBlock block = new StringBlock();\n    block.m_isUTF8 = (flags & UTF8_FLAG) != 0;\n    block.m_stringOffsets = reader.readIntArray(stringCount);\n\n    if (styleCount != 0) {\n        block.m_styleOffsets = reader.readIntArray(styleCount);\n    }\n\n    int size = ((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;\n    block.m_strings = new byte[size];\n    reader.readFully(block.m_strings);\n\n    if (stylesOffset != 0) {\n        size = (chunkSize - stylesOffset);\n        block.m_styles = reader.readIntArray(size / 4);\n\n        // read remaining bytes\n        int remaining = size % 4;\n        if (remaining >= 1) {\n            while (remaining-- > 0) {\n                reader.readByte();\n            }\n        }\n    }\n\n    return block;\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Checks if the replacement was properly made to a node.\n *\n * @param file File we are searching for value\n * @param saved boolean on whether we need to save\n * @param provider Node we are attempting to replace\n * @return boolean\n * @throws AndrolibException setting node value failed\n */\n", "func_signal": "private static boolean isSaved(File file, boolean saved, Node provider) throws AndrolibException", "code": "{\n    String reference = provider.getNodeValue();\n    String replacement = pullValueFromStrings(file.getParentFile(), reference);\n\n    if (replacement != null) {\n        provider.setNodeValue(replacement);\n        saved = true;\n    }\n    return saved;\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "// --- utility methods\n", "func_signal": "protected void writeAttributeValue(String value, Writer out)\n\t\tthrows IOException", "code": "{\n\t// .[apostrophe and <, & escaped],\n\tfinal char quot = attributeUseApostrophe ? '\\'' : '\"';\n\tfinal String quotEntity = attributeUseApostrophe ? \"&apos;\" : \"&quot;\";\n\n\tint pos = 0;\n\tfor (int i = 0; i < value.length(); i++) {\n\t\tchar ch = value.charAt(i);\n\t\tif (ch == '&') {\n\t\t\tif (i > pos)\n\t\t\t\tout.write(value.substring(pos, i));\n\t\t\tout.write(\"&amp;\");\n\t\t\tpos = i + 1;\n\t\t}\n\t\tif (ch == '<') {\n\t\t\tif (i > pos)\n\t\t\t\tout.write(value.substring(pos, i));\n\t\t\tout.write(\"&lt;\");\n\t\t\tpos = i + 1;\n\t\t} else if (ch == quot) {\n\t\t\tif (i > pos)\n\t\t\t\tout.write(value.substring(pos, i));\n\t\t\tout.write(quotEntity);\n\t\t\tpos = i + 1;\n\t\t} else if (ch < 32) {\n\t\t\t// in XML 1.0 only legal character are #x9 | #xA | #xD\n\t\t\t// and they must be escaped otherwise in attribute value they\n\t\t\t// are normalized to spaces\n\t\t\tif (ch == 13 || ch == 10 || ch == 9) {\n\t\t\t\tif (i > pos)\n\t\t\t\t\tout.write(value.substring(pos, i));\n\t\t\t\tout.write(\"&#\");\n\t\t\t\tout.write(Integer.toString(ch));\n\t\t\t\tout.write(';');\n\t\t\t\tpos = i + 1;\n\t\t\t} else {\n\t\t\t\tif (TRACE_ESCAPING)\n\t\t\t\t\tSystem.err.println(getClass().getName() + \" DEBUG ATTR value.len=\" + value.length()\n\t\t\t\t\t\t\t+ \" \" + printable(value));\n\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"character \" + printable(ch) + \" (\" + Integer.toString(ch) + \") is not allowed in output\"\n\t\t\t\t\t\t\t\t+ getLocation() + \" (attr value=\"\n\t\t\t\t\t\t\t\t+ printable(value) + \")\");\n\t\t\t}\n\t\t}\n\t}\n\tif (pos > 0) {\n\t\tout.write(value.substring(pos));\n\t} else {\n\t\tout.write(value); // this is shortcut to the most common case\n\t}\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/org/xmlpull/renamed/MXSerializer.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Replaces package value with passed packageOriginal string\n *\n * @param file File for AndroidManifest.xml\n * @param packageOriginal Package name to replace\n * @throws AndrolibException\n */\n", "func_signal": "public static void renameManifestPackage(File file, String packageOriginal) throws AndrolibException", "code": "{\n    try {\n        Document doc = loadDocument(file);\n\n        // Get the manifest line\n        Node manifest = doc.getFirstChild();\n\n        // update package attribute\n        NamedNodeMap attr = manifest.getAttributes();\n        Node nodeAttr = attr.getNamedItem(\"package\");\n        nodeAttr.setNodeValue(packageOriginal);\n        saveDocument(file, doc);\n\n    } catch (SAXException | ParserConfigurationException | IOException | TransformerException ignored) {\n    }\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Returns style information - array of int triplets, where in each triplet:\n * * first int is index of tag name ('b','i', etc.) * second int is tag\n * start index in string * third int is tag end index in string\n */\n", "func_signal": "private int[] getStyle(int index)", "code": "{\n    if (m_styleOffsets == null || m_styles == null|| index >= m_styleOffsets.length) {\n        return null;\n    }\n    int offset = m_styleOffsets[index] / 4;\n    int count = 0;\n    int[] style;\n\n    for (int i = offset; i < m_styles.length; ++i) {\n        if (m_styles[i] == -1) {\n            break;\n        }\n        count += 1;\n    }\n\n    if (count == 0 || (count % 3) != 0) {\n        return null;\n    }\n    style = new int[count];\n\n    for (int i = offset, j = 0; i < m_styles.length;) {\n        if (m_styles[i] == -1) {\n            break;\n        }\n        style[j++] = m_styles[i++];\n    }\n    return style;\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * The general contract of DataInput doesn't guarantee all the bytes requested will be skipped\n * and failure can occur for many reasons. We override this to try harder to skip all the bytes\n * requested (this is similar to DataInputStream's wrapper).\n */\n", "func_signal": "public final int skipBytes(int n) throws IOException", "code": "{\n    int total = 0;\n    int cur = 0;\n\n    while ((total < n) && ((cur = (int) super.skipBytes(n - total)) > 0)) {\n        total += cur;\n    }\n\n    return total;\n}", "path": "Apktool/brut.j.util/src/main/java/brut/util/ExtDataInput.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Returns raw string (without any styling information) at specified index.\n */\n", "func_signal": "public String getString(int index)", "code": "{\n    if (index < 0 || m_stringOffsets == null || index >= m_stringOffsets.length) {\n        return null;\n    }\n    int offset = m_stringOffsets[index];\n    int length;\n\n    int[] val;\n    if (m_isUTF8) {\n        val = getUtf8(m_strings, offset);\n        offset = val[0];\n    } else {\n        val = getUtf16(m_strings, offset);\n        offset += val[0];\n    }\n    length = val[1];\n    return decodeString(offset, length);\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Returns string with style tags (html-like).\n */\n", "func_signal": "public String getHTML(int index)", "code": "{\n    String raw = getString(index);\n    if (raw == null) {\n        return null;\n    }\n    int[] style = getStyle(index);\n    if (style == null) {\n        return ResXmlEncoders.escapeXmlChars(raw);\n    }\n\n    // If the returned style is further in string, than string length. Lets skip it.\n    if (style[1] > raw.length()) {\n        return ResXmlEncoders.escapeXmlChars(raw);\n    }\n    StringBuilder html = new StringBuilder(raw.length() + 32);\n    int[] opened = new int[style.length / 3];\n    boolean[] unclosed = new boolean[style.length / 3];\n    int offset = 0, depth = 0;\n    while (true) {\n        int i = -1, j;\n        for (j = 0; j != style.length; j += 3) {\n            if (style[j + 1] == -1) {\n                continue;\n            }\n            if (i == -1 || style[i + 1] > style[j + 1]) {\n                i = j;\n            }\n        }\n        int start = ((i != -1) ? style[i + 1] : raw.length());\n        for (j = depth - 1; j >= 0; j--) {\n            int last = opened[j];\n            int end = style[last + 2];\n            if (end >= start) {\n                if (style[last + 1] == -1 && end != -1) {\n                    unclosed[j] = true;\n                }\n                break;\n            }\n            if (offset <= end) {\n                html.append(ResXmlEncoders.escapeXmlChars(raw.substring(offset, end + 1)));\n                offset = end + 1;\n            }\n            outputStyleTag(getString(style[last]), html, true);\n        }\n        depth = j + 1;\n        if (offset < start) {\n            html.append(ResXmlEncoders.escapeXmlChars(raw.substring(offset, start)));\n            if (j >= 0 && unclosed.length >= j && unclosed[j]) {\n                if (unclosed.length > (j + 1) && unclosed[j + 1] || unclosed.length == 1) {\n                    outputStyleTag(getString(style[opened[j]]), html, true);\n                }\n            }\n            offset = start;\n        }\n        if (i == -1) {\n            break;\n        }\n        outputStyleTag(getString(style[i]), html, false);\n        style[i + 1] = -1;\n        opened[depth++] = i;\n    }\n    return html.toString();\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/decoder/StringBlock.java", "commit_date": "2020-12-10 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Sets \"debug\" tag in the file to true\n *\n * @param file AndroidManifest file\n * @throws AndrolibException\n */\n", "func_signal": "public static void setApplicationDebugTagTrue(File file) throws AndrolibException", "code": "{\n    if (file.exists()) {\n        try {\n            Document doc = loadDocument(file);\n            Node application = doc.getElementsByTagName(\"application\").item(0);\n\n            // load attr\n            NamedNodeMap attr = application.getAttributes();\n            Node debugAttr = attr.getNamedItem(\"android:debuggable\");\n\n            if (debugAttr == null) {\n                debugAttr = doc.createAttribute(\"android:debuggable\");\n                attr.setNamedItem(debugAttr);\n            }\n\n            // set application:debuggable to 'true\n            debugAttr.setNodeValue(\"true\");\n\n            saveDocument(file, doc);\n\n        } catch (SAXException | ParserConfigurationException | IOException | TransformerException ignored) {\n        }\n    }\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Removes \"debug\" tag from file\n *\n * @param file AndroidManifest file\n * @throws AndrolibException\n */\n", "func_signal": "public static void removeApplicationDebugTag(File file) throws AndrolibException", "code": "{\n    if (file.exists()) {\n        try {\n            Document doc = loadDocument(file);\n            Node application = doc.getElementsByTagName(\"application\").item(0);\n\n            // load attr\n            NamedNodeMap attr = application.getAttributes();\n            Node debugAttr = attr.getNamedItem(\"android:debuggable\");\n\n            // remove application:debuggable\n            if (debugAttr != null) {\n                attr.removeNamedItem(\"android:debuggable\");\n            }\n\n            saveDocument(file, doc);\n\n        } catch (SAXException | ParserConfigurationException | IOException | TransformerException ignored) {\n        }\n    }\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Finds key in strings.xml file and returns text value\n *\n * @param directory Root directory of apk\n * @param key String reference (ie @string/foo)\n * @return String|null\n * @throws AndrolibException\n */\n", "func_signal": "public static String pullValueFromStrings(File directory, String key) throws AndrolibException", "code": "{\n    if (key == null || ! key.contains(\"@\")) {\n        return null;\n    }\n\n    File file = new File(directory, \"/res/values/strings.xml\");\n    key = key.replace(\"@string/\", \"\");\n\n    if (file.exists()) {\n        try {\n            Document doc = loadDocument(file);\n            XPath xPath = XPathFactory.newInstance().newXPath();\n            XPathExpression expression = xPath.compile(\"/resources/string[@name=\" + '\"' + key + \"\\\"]/text()\");\n\n            Object result = expression.evaluate(doc, XPathConstants.STRING);\n\n            if (result != null) {\n                return (String) result;\n            }\n\n        }  catch (SAXException | ParserConfigurationException | IOException | XPathExpressionException ignored) {\n        }\n    }\n\n    return null;\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * It returns a tuple of:\n *   - a list of offsets of non positional substitutions. non-pos is defined as any \"%\" which isn't \"%%\" nor \"%\\d+\\$\"\n *   - a list of offsets of positional substitutions\n */\n", "func_signal": "private static Duo<List<Integer>, List<Integer>> findSubstitutions(String str, int nonPosMax)", "code": "{\n    if (nonPosMax == -1) {\n        nonPosMax = Integer.MAX_VALUE;\n    }\n    int pos;\n    int pos2 = 0;\n    List<Integer> nonPositional = new ArrayList<>();\n    List<Integer> positional = new ArrayList<>();\n\n    if (str == null) {\n        return new Duo<>(nonPositional, positional);\n    }\n\n    int length = str.length();\n\n    while ((pos = str.indexOf('%', pos2)) != -1) {\n        pos2 = pos + 1;\n        if (pos2 == length) {\n            nonPositional.add(pos);\n            break;\n        }\n        char c = str.charAt(pos2++);\n        if (c == '%') {\n            continue;\n        }\n        if (c >= '0' && c <= '9' && pos2 < length) {\n            while ((c = str.charAt(pos2++)) >= '0' && c <= '9' && pos2 < length);\n            if (c == '$') {\n                positional.add(pos);\n                continue;\n            }\n        }\n\n        nonPositional.add(pos);\n        if (nonPositional.size() >= nonPosMax) {\n            break;\n        }\n    }\n\n    return new Duo<>(nonPositional, positional);\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlEncoders.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * For maximum efficiency when writing indents the required output is\n * pre-computed This is internal function that recomputes buffer after user\n * requested chnages.\n */\n", "func_signal": "protected void rebuildIndentationBuf()", "code": "{\n\tif (doIndent == false)\n\t\treturn;\n\tfinal int maxIndent = 65; // hardcoded maximum indentation size in characters\n\tint bufSize = 0;\n\toffsetNewLine = 0;\n\tif (writeLineSepartor) {\n\t\toffsetNewLine = lineSeparator.length();\n\t\tbufSize += offsetNewLine;\n\t}\n\tmaxIndentLevel = 0;\n\tif (writeIndentation) {\n\t\tindentationJump = indentationString.length();\n\t\tmaxIndentLevel = maxIndent / indentationJump;\n\t\tbufSize += maxIndentLevel * indentationJump;\n\t}\n\tif (indentationBuf == null || indentationBuf.length < bufSize) {\n\t\tindentationBuf = new char[bufSize + 8];\n\t}\n\tint bufPos = 0;\n\tif (writeLineSepartor) {\n\t\tfor (int i = 0; i < lineSeparator.length(); i++) {\n\t\t\tindentationBuf[bufPos++] = lineSeparator.charAt(i);\n\t\t}\n\t}\n\tif (writeIndentation) {\n\t\tfor (int i = 0; i < maxIndentLevel; i++) {\n\t\t\tfor (int j = 0; j < indentationString.length(); j++) {\n\t\t\t\tindentationBuf[bufPos++] = indentationString.charAt(j);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/org/xmlpull/renamed/MXSerializer.java", "commit_date": "2020-04-11 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Removes attributes like \"versionCode\" and \"versionName\" from file.\n *\n * @param file File representing AndroidManifest.xml\n * @throws AndrolibException\n */\n", "func_signal": "public static void removeManifestVersions(File file) throws AndrolibException", "code": "{\n    if (file.exists()) {\n        try {\n            Document doc = loadDocument(file);\n            Node manifest = doc.getFirstChild();\n            NamedNodeMap attr = manifest.getAttributes();\n            Node vCode = attr.getNamedItem(\"android:versionCode\");\n            Node vName = attr.getNamedItem(\"android:versionName\");\n\n            if (vCode != null) {\n                attr.removeNamedItem(\"android:versionCode\");\n            }\n            if (vName != null) {\n                attr.removeNamedItem(\"android:versionName\");\n            }\n            saveDocument(file, doc);\n\n        } catch (SAXException | ParserConfigurationException | IOException | TransformerException ignored) {\n        }\n    }\n}", "path": "Apktool/brut.apktool/apktool-lib/src/main/java/brut/androlib/res/xml/ResXmlPatcher.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "iBotPeaches/Apktool", "stars": 18444, "license": "apache-2.0", "language": "java", "size": 286687}
{"docstring": "/**\n * Build a file, used to be inserted in the disk cache.\n *\n * @param userId The id user to build the file.\n * @return A valid file.\n */\n", "func_signal": "private File buildFile(int userId)", "code": "{\n  final StringBuilder fileNameBuilder = new StringBuilder();\n  fileNameBuilder.append(this.cacheDir.getPath());\n  fileNameBuilder.append(File.separator);\n  fileNameBuilder.append(DEFAULT_FILE_NAME);\n  fileNameBuilder.append(userId);\n\n  return new File(fileNameBuilder.toString());\n}", "path": "Android-CleanArchitecture/data/src/main/java/com/fernandocejas/android10/sample/data/cache/UserCacheImpl.java", "commit_date": "2016-12-23 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Set an image from a remote url.\n *\n * @param imageUrl The url of the resource to load.\n */\n", "func_signal": "public void setImageUrl(final String imageUrl)", "code": "{\n  this.imageUrl = imageUrl;\n  AutoLoadImageView.this.loadImagePlaceHolder();\n  if (this.imageUrl != null) {\n    this.loadImageFromUrl(this.imageUrl);\n  } else {\n    this.loadImagePlaceHolder();\n  }\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Transform a Collection of {@link User} into a Collection of {@link UserModel}.\n *\n * @param usersCollection Objects to be transformed.\n * @return List of {@link UserModel}.\n */\n", "func_signal": "public Collection<UserModel> transform(Collection<User> usersCollection)", "code": "{\n  Collection<UserModel> userModelsCollection;\n\n  if (usersCollection != null && !usersCollection.isEmpty()) {\n    userModelsCollection = new ArrayList<>();\n    for (User user : usersCollection) {\n      userModelsCollection.add(transform(user));\n    }\n  } else {\n    userModelsCollection = Collections.emptyList();\n  }\n\n  return userModelsCollection;\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/mapper/UserModelDataMapper.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Creates a file name from an image url\n *\n * @param imageUrl The image url used to build the file name.\n * @return An String representing a unique file name.\n */\n", "func_signal": "private String getFileNameFromUrl(String imageUrl)", "code": "{\n  //we could generate an unique MD5/SHA-1 here\n  String hash = String.valueOf(imageUrl.hashCode());\n  if (hash.startsWith(\"-\")) {\n    hash = hash.substring(1);\n  }\n  return BASE_IMAGE_NAME_CACHED + hash;\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Loads the image place holder if any has been assigned.\n */\n", "func_signal": "private void loadImagePlaceHolder()", "code": "{\n  if (this.imagePlaceHolderResId != -1) {\n    ((Activity) getContext()).runOnUiThread(new Runnable() {\n      @Override public void run() {\n        AutoLoadImageView.this.setImageResource(\n            AutoLoadImageView.this.imagePlaceHolderResId);\n      }\n    });\n  }\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Get in millis, the last time the cache was accessed.\n */\n", "func_signal": "private long getLastCacheUpdateTimeMillis()", "code": "{\n  return this.fileManager.getFromPreferences(this.context, SETTINGS_FILE_NAME,\n      SETTINGS_KEY_LAST_CACHE_UPDATE);\n}", "path": "Android-CleanArchitecture/data/src/main/java/com/fernandocejas/android10/sample/data/cache/UserCacheImpl.java", "commit_date": "2016-12-23 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Get a {@link android.graphics.Bitmap} from the internal cache or null if it does not exist.\n *\n * @param fileName The name of the file to look for in the cache.\n * @return A valid cached bitmap, otherwise null.\n */\n", "func_signal": "private Bitmap getFromCache(String fileName)", "code": "{\n  Bitmap bitmap = null;\n  if (this.cache != null) {\n    bitmap = this.cache.get(fileName);\n  }\n  return bitmap;\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Cache an image using the internal cache.\n *\n * @param bitmap The bitmap to cache.\n * @param fileName The file name used for caching the bitmap.\n */\n", "func_signal": "private void cacheBitmap(Bitmap bitmap, String fileName)", "code": "{\n  if (this.cache != null) {\n    this.cache.put(bitmap, fileName);\n  }\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Creates a String representing an error message.\n *\n * @param context Context needed to retrieve string resources.\n * @param exception An exception used as a condition to retrieve the correct error message.\n * @return {@link String} an error message.\n */\n", "func_signal": "public static String create(Context context, Exception exception)", "code": "{\n  String message = context.getString(R.string.exception_message_generic);\n\n  if (exception instanceof NetworkConnectionException) {\n    message = context.getString(R.string.exception_message_no_connection);\n  } else if (exception instanceof UserNotFoundException) {\n    message = context.getString(R.string.exception_message_user_not_found);\n  }\n\n  return message;\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/exception/ErrorMessageFactory.java", "commit_date": "2015-04-28 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Loads and image from the internet (and cache it) or from the internal cache.\n *\n * @param imageUrl The remote image url to load.\n */\n", "func_signal": "private void loadImageFromUrl(final String imageUrl)", "code": "{\n  new Thread() {\n    @Override public void run() {\n      final Bitmap bitmap = AutoLoadImageView.this.getFromCache(getFileNameFromUrl(imageUrl));\n      if (bitmap != null) {\n        AutoLoadImageView.this.loadBitmap(bitmap);\n      } else {\n        if (isThereInternetConnection()) {\n          final ImageDownloader imageDownloader = new ImageDownloader();\n          imageDownloader.download(imageUrl, new ImageDownloader.Callback() {\n            @Override public void onImageDownloaded(Bitmap bitmap) {\n              AutoLoadImageView.this.cacheBitmap(bitmap, getFileNameFromUrl(imageUrl));\n              AutoLoadImageView.this.loadBitmap(bitmap);\n            }\n\n            @Override public void onError() {\n              AutoLoadImageView.this.loadImagePlaceHolder();\n            }\n          });\n        } else {\n          AutoLoadImageView.this.loadImagePlaceHolder();\n        }\n      }\n    }\n  }.start();\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Loads all users.\n */\n", "func_signal": "private void loadUserList()", "code": "{\n  this.hideViewRetry();\n  this.showViewLoading();\n  this.getUserList();\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/presenter/UserListPresenter.java", "commit_date": "2016-12-26 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Checks if the device has any active internet connection.\n *\n * @return true device with internet connection, otherwise false.\n */\n", "func_signal": "private boolean isThereInternetConnection()", "code": "{\n  boolean isConnected;\n\n  final ConnectivityManager connectivityManager =\n      (ConnectivityManager) getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  final NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n  isConnected = (networkInfo != null && networkInfo.isConnectedOrConnecting());\n\n  return isConnected;\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Report an error to the caller\n *\n * @param callback Caller implementing {@link Callback}\n */\n", "func_signal": "private void reportError(Callback callback)", "code": "{\n  if (callback != null) {\n    callback.onError();\n  }\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Creates a file name from an image url\n *\n * @param fileName The image url used to build the file name.\n * @return A {@link java.io.File} representing a unique element.\n */\n", "func_signal": "private File buildFileFromFilename(String fileName)", "code": "{\n  String fullPath = this.cacheDir.getPath() + File.separator + fileName;\n  return new File(fullPath);\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Run the operation of loading a bitmap on the UI thread.\n *\n * @param bitmap The image to load.\n */\n", "func_signal": "private void loadBitmap(final Bitmap bitmap)", "code": "{\n  ((Activity) getContext()).runOnUiThread(new Runnable() {\n    @Override public void run() {\n      AutoLoadImageView.this.setImageBitmap(bitmap);\n    }\n  });\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/view/component/AutoLoadImageView.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Set in millis, the last time the cache was accessed.\n */\n", "func_signal": "private void setLastCacheUpdateTimeMillis()", "code": "{\n  final long currentMillis = System.currentTimeMillis();\n  this.fileManager.writeToPreferences(this.context, SETTINGS_FILE_NAME,\n      SETTINGS_KEY_LAST_CACHE_UPDATE, currentMillis);\n}", "path": "Android-CleanArchitecture/data/src/main/java/com/fernandocejas/android10/sample/data/cache/UserCacheImpl.java", "commit_date": "2016-12-23 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Dispose from current {@link CompositeDisposable}.\n */\n", "func_signal": "private void addDisposable(Disposable disposable)", "code": "{\n  Preconditions.checkNotNull(disposable);\n  Preconditions.checkNotNull(disposables);\n  disposables.add(disposable);\n}", "path": "Android-CleanArchitecture/domain/src/main/java/com/fernandocejas/android10/sample/domain/interactor/UseCase.java", "commit_date": "2016-12-26 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Dispose from current {@link CompositeDisposable}.\n */\n", "func_signal": "public void dispose()", "code": "{\n  if (!disposables.isDisposed()) {\n    disposables.dispose();\n  }\n}", "path": "Android-CleanArchitecture/domain/src/main/java/com/fernandocejas/android10/sample/domain/interactor/UseCase.java", "commit_date": "2016-12-26 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Initializes the presenter by showing/hiding proper views\n * and retrieving user details.\n */\n", "func_signal": "public void initialize(int userId)", "code": "{\n  this.hideViewRetry();\n  this.showViewLoading();\n  this.getUserDetails(userId);\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/presenter/UserDetailsPresenter.java", "commit_date": "2016-12-26 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * Transform a {@link User} into an {@link UserModel}.\n *\n * @param user Object to be transformed.\n * @return {@link UserModel}.\n */\n", "func_signal": "public UserModel transform(User user)", "code": "{\n  if (user == null) {\n    throw new IllegalArgumentException(\"Cannot transform a null value\");\n  }\n  final UserModel userModel = new UserModel(user.getUserId());\n  userModel.setCoverUrl(user.getCoverUrl());\n  userModel.setFullName(user.getFullName());\n  userModel.setEmail(user.getEmail());\n  userModel.setDescription(user.getDescription());\n  userModel.setFollowers(user.getFollowers());\n\n  return userModel;\n}", "path": "Android-CleanArchitecture/presentation/src/main/java/com/fernandocejas/android10/sample/presentation/mapper/UserModelDataMapper.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "android10/Android-CleanArchitecture", "stars": 15437, "license": "apache-2.0", "language": "java", "size": 5191}
{"docstring": "/**\n * \u8fd4\u56de\u83b7\u53d6userInfo\u7684url\n *\n * @param authToken authToken\n * @return \u8fd4\u56de\u83b7\u53d6userInfo\u7684url\n */\n", "func_signal": "@Override\nprotected String userInfoUrl(AuthToken authToken)", "code": "{\n    return UrlBuilder.fromBaseUrl(source.userInfo())\n        .queryParam(\"access_token\", authToken.getAccessToken())\n        .queryParam(\"uid\", authToken.getUid())\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthWeiboRequest.java", "commit_date": "2020-07-04 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * 1000000: 23135ms\n * 100000: 3016ms\n * 10000: 328ms\n * 1000: 26ms\n */\n", "func_signal": "@Test\npublic void testByThread()", "code": "{\n    long start = System.currentTimeMillis();\n    for (int i = 0; i < 1; i++) {\n        System.out.println(callMethodByThread());\n    }\n    long end = System.currentTimeMillis();\n    System.out.println((end - start) + \"ms\");\n\n}", "path": "JustAuth/src/test/java/me/zhyd/oauth/log/LogTest.java", "commit_date": "2019-08-02 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u6dfb\u52a0\u53c2\u6570\n *\n * @param key   \u53c2\u6570\u540d\u79f0\n * @param value \u53c2\u6570\u503c\n * @return this UrlBuilder\n */\n", "func_signal": "public UrlBuilder queryParam(String key, Object value)", "code": "{\n    if (StringUtil.isEmpty(key)) {\n        throw new RuntimeException(\"\u53c2\u6570\u540d\u4e0d\u80fd\u4e3a\u7a7a\");\n    }\n    String valueAsString = (value != null ? value.toString() : null);\n    this.params.put(key, valueAsString);\n\n    return this;\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/utils/UrlBuilder.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * @param baseUrl \u57fa\u7840\u8def\u5f84\n * @return the new {@code UrlBuilder}\n */\n", "func_signal": "public static UrlBuilder fromBaseUrl(String baseUrl)", "code": "{\n    UrlBuilder builder = new UrlBuilder();\n    builder.setBaseUrl(baseUrl);\n    return builder;\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/utils/UrlBuilder.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u8fd4\u56de\u5e26{@code state}\u53c2\u6570\u7684\u6388\u6743url\uff0c\u6388\u6743\u56de\u8c03\u65f6\u4f1a\u5e26\u4e0a\u8fd9\u4e2a{@code state}\n *\n * @param state state \u9a8c\u8bc1\u6388\u6743\u6d41\u7a0b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u9632\u6b62csrf\n * @return \u8fd4\u56de\u6388\u6743\u5730\u5740\n */\n", "func_signal": "@Override\npublic String authorize(String state)", "code": "{\n    return UrlBuilder.fromBaseUrl(super.authorize(state))\n        .queryParam(\"scope\", this.getScopes(\" \", true, AuthScopeUtils.getDefaultScopes(AuthGiteeScope.values())))\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java", "commit_date": "2020-07-04 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * Obtaining a request token\n * https://developer.twitter.com/en/docs/twitter-for-websites/log-in-with-twitter/guides/implementing-sign-in-with-twitter\n *\n * @return request token\n */\n", "func_signal": "public AuthToken getRequestToken()", "code": "{\n    String baseUrl = \"https://api.twitter.com/oauth/request_token\";\n\n    Map<String, String> oauthParams = buildOauthParams();\n    oauthParams.put(\"oauth_callback\", config.getRedirectUri());\n    oauthParams.put(\"oauth_signature\", generateTwitterSignature(oauthParams, \"POST\", baseUrl, config.getClientSecret(), null));\n    String header = buildHeader(oauthParams);\n\n    HttpHeader httpHeader = new HttpHeader();\n    httpHeader.add(\"Authorization\", header);\n    httpHeader.add(\"User-Agent\", \"themattharris' HTTP Client\");\n    httpHeader.add(\"Host\", \"api.twitter.com\");\n    httpHeader.add(\"Accept\", \"*/*\");\n    String requestToken = new HttpUtils(config.getHttpConfig()).post(baseUrl, null, httpHeader);\n\n    Map<String, String> res = MapUtil.parseStringToMap(requestToken, false);\n\n    return AuthToken.builder()\n        .oauthToken(res.get(\"oauth_token\"))\n        .oauthTokenSecret(res.get(\"oauth_token_secret\"))\n        .oauthCallbackConfirmed(Boolean.valueOf(res.get(\"oauth_callback_confirmed\")))\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthTwitterRequest.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u8fd4\u56de\u5e26{@code state}\u53c2\u6570\u7684\u6388\u6743url\uff0c\u6388\u6743\u56de\u8c03\u65f6\u4f1a\u5e26\u4e0a\u8fd9\u4e2a{@code state}\n *\n * @param state state \u9a8c\u8bc1\u6388\u6743\u6d41\u7a0b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u9632\u6b62csrf\n * @return \u8fd4\u56de\u6388\u6743\u5730\u5740\n * @since 1.9.3\n */\n", "func_signal": "@Override\npublic String authorize(String state)", "code": "{\n    AuthToken token  = this.getRequestToken();\n    return UrlBuilder.fromBaseUrl(source.authorize())\n        .queryParam(\"oauth_token\", token.getOauthToken())\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthTwitterRequest.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u8fd4\u56de\u5e26{@code state}\u53c2\u6570\u7684\u6388\u6743url\uff0c\u6388\u6743\u56de\u8c03\u65f6\u4f1a\u5e26\u4e0a\u8fd9\u4e2a{@code state}\n *\n * @param state state \u9a8c\u8bc1\u6388\u6743\u6d41\u7a0b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u9632\u6b62csrf\n * @return \u8fd4\u56de\u6388\u6743\u5730\u5740\n * @since 1.9.3\n */\n", "func_signal": "@Override\npublic String authorize(String state)", "code": "{\n    return UrlBuilder.fromBaseUrl(source.authorize())\n        .queryParam(\"app_id\", config.getClientId())\n        .queryParam(\"scope\", \"auth_user\")\n        .queryParam(\"redirect_uri\", config.getRedirectUri())\n        .queryParam(\"state\", getRealState(state))\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthAlipayRequest.java", "commit_date": "2020-12-27 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u8fd4\u56de\u5e26{@code state}\u53c2\u6570\u7684\u6388\u6743url\uff0c\u6388\u6743\u56de\u8c03\u65f6\u4f1a\u5e26\u4e0a\u8fd9\u4e2a{@code state}\n *\n * @param state state \u9a8c\u8bc1\u6388\u6743\u6d41\u7a0b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u9632\u6b62csrf\n * @return \u8fd4\u56de\u6388\u6743\u5730\u5740\n * @since 1.9.3\n */\n", "func_signal": "@Override\npublic String authorize(String state)", "code": "{\n    return UrlBuilder.fromBaseUrl(super.authorize(state))\n        .queryParam(\"access_type\", \"offline\")\n        .queryParam(\"scope\", this.getScopes(\" \", false, AuthScopeUtils.getDefaultScopes(AuthGoogleScope.values())))\n        .queryParam(\"prompt\",\"select_account\")\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthGoogleRequest.java", "commit_date": "2020-07-22 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u7f16\u7801\u4e3aBase64<br>\n * \u5982\u679cisMultiLine\u4e3a<code>true</code>\uff0c\u5219\u6bcf76\u4e2a\u5b57\u7b26\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u5426\u5219\u5728\u4e00\u884c\u663e\u793a\n *\n * @param arr         \u88ab\u7f16\u7801\u7684\u6570\u7ec4\n * @param isMultiLine \u572876\u4e2achar\u4e4b\u540e\u662fCRLF\u8fd8\u662fEOF\n * @param isUrlSafe   \u662f\u5426\u4f7f\u7528URL\u5b89\u5168\u5b57\u7b26\uff0c\u4e00\u822c\u4e3a<code>false</code>\n * @return \u7f16\u7801\u540e\u7684bytes\n */\n", "func_signal": "public static byte[] encode(byte[] arr, boolean isMultiLine, boolean isUrlSafe)", "code": "{\n    if (null == arr) {\n        return null;\n    }\n\n    int len = arr.length;\n    if (len == 0) {\n        return new byte[0];\n    }\n\n    int evenlen = (len / 3) * 3;\n    int cnt = ((len - 1) / 3 + 1) << 2;\n    int destlen = cnt + (isMultiLine ? (cnt - 1) / 76 << 1 : 0);\n    byte[] dest = new byte[destlen];\n\n    byte[] encodeTable = isUrlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n\n    for (int s = 0, d = 0, cc = 0; s < evenlen; ) {\n        int i = (arr[s++] & 0xff) << 16 | (arr[s++] & 0xff) << 8 | (arr[s++] & 0xff);\n\n        dest[d++] = encodeTable[(i >>> 18) & 0x3f];\n        dest[d++] = encodeTable[(i >>> 12) & 0x3f];\n        dest[d++] = encodeTable[(i >>> 6) & 0x3f];\n        dest[d++] = encodeTable[i & 0x3f];\n\n        if (isMultiLine && ++cc == 19 && d < destlen - 2) {\n            dest[d++] = '\\r';\n            dest[d++] = '\\n';\n            cc = 0;\n        }\n    }\n\n    int left = len - evenlen;// \u5269\u4f59\u4f4d\u6570\n    if (left > 0) {\n        int i = ((arr[evenlen] & 0xff) << 10) | (left == 2 ? ((arr[len - 1] & 0xff) << 2) : 0);\n\n        dest[destlen - 4] = encodeTable[i >> 12];\n        dest[destlen - 3] = encodeTable[(i >>> 6) & 0x3f];\n\n        if (isUrlSafe) {\n            // \u5728URL Safe\u6a21\u5f0f\u4e0b\uff0c=\u4e3aURL\u4e2d\u7684\u5173\u952e\u5b57\u7b26\uff0c\u4e0d\u9700\u8981\u8865\u5145\u3002\u7a7a\u4f59\u7684byte\u4f4d\u8981\u53bb\u6389\u3002\n            int urlSafeLen = destlen - 2;\n            if (2 == left) {\n                dest[destlen - 2] = encodeTable[i & 0x3f];\n                urlSafeLen += 1;\n            }\n            byte[] urlSafeDest = new byte[urlSafeLen];\n            System.arraycopy(dest, 0, urlSafeDest, 0, urlSafeLen);\n            return urlSafeDest;\n        } else {\n            dest[destlen - 2] = (left == 2) ? encodeTable[i & 0x3f] : (byte) '=';\n            dest[destlen - 1] = '=';\n        }\n    }\n    return dest;\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/utils/Base64Utils.java", "commit_date": "2020-07-04 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u8fd4\u56de\u83b7\u53d6accessToken\u7684url\n *\n * @param code \u6388\u6743\u7801\n * @return \u8fd4\u56de\u83b7\u53d6accessToken\u7684url\n */\n", "func_signal": "@Override\nprotected String accessTokenUrl(String code)", "code": "{\n    return UrlBuilder.fromBaseUrl(source.accessToken())\n        .queryParam(\"code\", code)\n        .queryParam(\"client_key\", config.getClientId())\n        .queryParam(\"client_secret\", config.getClientSecret())\n        .queryParam(\"grant_type\", \"authorization_code\")\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthToutiaoRequest.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u5237\u65b0access token \uff08\u7eed\u671f\uff09\n *\n * @param authToken \u767b\u5f55\u6210\u529f\u540e\u8fd4\u56de\u7684Token\u4fe1\u606f\n * @return AuthResponse\n */\n", "func_signal": "@Override\npublic AuthResponse refresh(AuthToken authToken)", "code": "{\n    AlipaySystemOauthTokenRequest request = new AlipaySystemOauthTokenRequest();\n    request.setGrantType(\"refresh_token\");\n    request.setRefreshToken(authToken.getRefreshToken());\n    AlipaySystemOauthTokenResponse response = null;\n    try {\n        response = this.alipayClient.execute(request);\n    } catch (Exception e) {\n        throw new AuthException(e);\n    }\n    if (!response.isSuccess()) {\n        throw new AuthException(response.getSubMsg());\n    }\n    return AuthResponse.builder()\n        .code(AuthResponseStatus.SUCCESS.getCode())\n        .data(AuthToken.builder()\n            .accessToken(response.getAccessToken())\n            .uid(response.getUserId())\n            .expireIn(Integer.parseInt(response.getExpiresIn()))\n            .refreshToken(response.getRefreshToken())\n            .build())\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthAlipayRequest.java", "commit_date": "2020-12-27 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u8fd4\u56de\u5e26{@code state}\u53c2\u6570\u7684\u6388\u6743url\uff0c\u6388\u6743\u56de\u8c03\u65f6\u4f1a\u5e26\u4e0a\u8fd9\u4e2a{@code state}\n *\n * @param state state \u9a8c\u8bc1\u6388\u6743\u6d41\u7a0b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u9632\u6b62csrf\n * @return \u8fd4\u56de\u6388\u6743\u5730\u5740\n * @since 1.9.3\n */\n", "func_signal": "@Override\npublic String authorize(String state)", "code": "{\n    return UrlBuilder.fromBaseUrl(source.authorize())\n        .queryParam(\"response_type\", \"code\")\n        .queryParam(\"client_key\", config.getClientId())\n        .queryParam(\"redirect_uri\", config.getRedirectUri())\n        .queryParam(\"auth_only\", 1)\n        .queryParam(\"display\", 0)\n        .queryParam(\"state\", getRealState(state))\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthToutiaoRequest.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u68c0\u67e5\u54cd\u5e94\u5185\u5bb9\u662f\u5426\u6b63\u786e\n *\n * @param object \u8bf7\u6c42\u54cd\u5e94\u5185\u5bb9\n */\n", "func_signal": "private void checkResponse(JSONObject object)", "code": "{\n    if (object.containsKey(\"error_code\")) {\n        throw new AuthException(AuthToutiaoErrorCode.getErrorCode(object.getIntValue(\"error_code\")).getDesc());\n    }\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthToutiaoRequest.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * 1000000: 19058ms\n * 100000: 2772ms\n * 10000: 323ms\n * 1000: 29ms\n */\n", "func_signal": "@Test\npublic void testByThrowable()", "code": "{\n    long end = System.currentTimeMillis();\n    for (int i = 0; i < 1; i++) {\n        System.out.println(callMethodByThrowable());\n    }\n    long end2 = System.currentTimeMillis();\n    System.out.println((end2 - end) + \"ms\");\n\n}", "path": "JustAuth/src/test/java/me/zhyd/oauth/log/LogTest.java", "commit_date": "2019-08-02 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u6784\u9020url\n *\n * @param encode \u8f6c\u7801\n * @return url\n */\n", "func_signal": "public String build(boolean encode)", "code": "{\n    if (MapUtil.isEmpty(this.params)) {\n        return this.baseUrl;\n    }\n    String baseUrl = StringUtils.appendIfNotContain(this.baseUrl, \"?\", \"&\");\n    String paramString = MapUtil.parseMapToString(this.params, encode);\n    return baseUrl + paramString;\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/utils/UrlBuilder.java", "commit_date": "2020-04-09 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u68c0\u67e5\u54cd\u5e94\u5185\u5bb9\u662f\u5426\u6b63\u786e\n *\n * @param object \u8bf7\u6c42\u54cd\u5e94\u5185\u5bb9\n */\n", "func_signal": "private void checkResponse(JSONObject object)", "code": "{\n    if (object.containsKey(\"error\")) {\n        throw new AuthException(object.getString(\"error_description\"));\n    }\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java", "commit_date": "2020-07-04 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u8fd4\u56de\u83b7\u53d6userInfo\u7684url\n *\n * @param authToken \u7528\u6237\u6388\u6743\u540e\u7684token\n * @return \u8fd4\u56de\u83b7\u53d6userInfo\u7684url\n */\n", "func_signal": "@Override\nprotected String userInfoUrl(AuthToken authToken)", "code": "{\n    return UrlBuilder.fromBaseUrl(source.userInfo())\n        .queryParam(\"client_key\", config.getClientId())\n        .queryParam(\"access_token\", authToken.getAccessToken())\n        .build();\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthToutiaoRequest.java", "commit_date": "2020-06-07 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u4e2a\u4eba\u7528\u6237\u65e0\u6cd5\u7533\u8bf7\u5e94\u7528\n * \u6682\u65f6\u53ea\u80fd\u53c2\u8003\u5b98\u7f51\u7ed9\u51fa\u7684\u8fd4\u56de\u7ed3\u679c\u89e3\u6790\n *\n * @param object \u8bf7\u6c42\u8fd4\u56de\u7ed3\u679c\n * @return data JSONObject\n */\n", "func_signal": "private JSONObject getUserDataJsonObject(JSONObject object)", "code": "{\n    return object.getJSONObject(\"jingdong_user_getUserInfoByOpenId_response\")\n        .getJSONObject(\"getuserinfobyappidandopenid_result\")\n        .getJSONObject(\"data\");\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthJdRequest.java", "commit_date": "2020-07-04 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * \u68c0\u67e5\u54cd\u5e94\u5185\u5bb9\u662f\u5426\u6b63\u786e\n *\n * @param object \u8bf7\u6c42\u54cd\u5e94\u5185\u5bb9\n */\n", "func_signal": "private void checkResponse(JSONObject object)", "code": "{\n    if (object.containsKey(\"error\") || object.containsKey(\"error_description\")) {\n        throw new AuthException(object.containsKey(\"error\") + \":\" + object.getString(\"error_description\"));\n    }\n}", "path": "JustAuth/src/main/java/me/zhyd/oauth/request/AuthGoogleRequest.java", "commit_date": "2020-07-22 00:00:00", "repo_name": "justauth/JustAuth", "stars": 15803, "license": "mit", "language": "java", "size": 9554}
{"docstring": "/**\n * Copies histogram h into the current histogram.\n *\n * @param h ApproximateHistogram to copy\n *\n * @return this histogram\n */\n", "func_signal": "public ApproximateHistogram copy(ApproximateHistogram h)", "code": "{\n  if (h.size > this.size) {\n    this.size = h.size;\n    this.positions = new float[size];\n    this.bins = new long[size];\n  }\n\n  System.arraycopy(h.positions, 0, this.positions, 0, h.binCount);\n  System.arraycopy(h.bins, 0, this.bins, 0, h.binCount);\n  this.min = h.min;\n  this.max = h.max;\n  this.binCount = h.binCount;\n  this.count = h.count;\n  return this;\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Returns the approximate number of items less than or equal to b in the histogram\n *\n * @param b the cutoff\n *\n * @return the approximate number of items less than or equal to b\n */\n", "func_signal": "public double sum(final float b)", "code": "{\n  if (b < min) {\n    return 0;\n  }\n  if (b >= max) {\n    return count;\n  }\n\n  int index = Arrays.binarySearch(positions, 0, binCount, b);\n  boolean exactMatch = index >= 0;\n  index = exactMatch ? index : -(index + 1);\n\n  // we want positions[index] <= b < positions[index+1]\n  if (!exactMatch) {\n    index--;\n  }\n\n  final boolean outerLeft = index < 0;\n  final boolean outerRight = index >= (binCount - 1);\n\n  final long m0 = outerLeft ? 0 : (bins[index] & COUNT_BITS);\n  final long m1 = outerRight ? 0 : (bins[index + 1] & COUNT_BITS);\n  final double p0 = outerLeft ? min : positions[index];\n  final double p1 = outerRight ? max : positions[index + 1];\n  final boolean exact0 = (!outerLeft && (bins[index] & APPROX_FLAG_BIT) == 0);\n  final boolean exact1 = (!outerRight && (bins[index + 1] & APPROX_FLAG_BIT) == 0);\n\n  // handle case when p0 = p1, which happens if the first bin = min or the last bin = max\n  final double l = (p1 == p0) ? 0 : (b - p0) / (p1 - p0);\n\n  // don't include exact counts in the trapezoid calculation\n  long tm0 = m0;\n  long tm1 = m1;\n  if (exact0) {\n    tm0 = 0;\n  }\n  if (exact1) {\n    tm1 = 0;\n  }\n  final double mb = tm0 + (tm1 - tm0) * l;\n  double s = 0.5 * (tm0 + mb) * l;\n\n  for (int i = 0; i < index; ++i) {\n    s += (bins[i] & COUNT_BITS);\n  }\n\n  // add full bin count if left bin count is exact\n  if (exact0) {\n    return (s + m0);\n  } else {\n    // otherwise add only the left half of the bin\n    return (s + 0.5 * m0);\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Shifts the given range the histogram bins one slot to the right\n *\n * @param start index of the first bin to shift\n * @param end   index of the rightmost bin to shift into\n */\n", "func_signal": "protected void shiftRight(int start, int end)", "code": "{\n  float prevVal = positions[start];\n  long prevCnt = bins[start];\n\n  for (int i = start + 1; i <= end; ++i) {\n    float tmpVal = positions[i];\n    long tmpCnt = bins[i];\n\n    positions[i] = prevVal;\n    bins[i] = prevCnt;\n\n    prevVal = tmpVal;\n    prevCnt = tmpCnt;\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Writes the representation of this ApproximateHistogram object to the given byte-buffer\n *\n * @param buf ByteBuffer to write the ApproximateHistogram to\n */\n", "func_signal": "public void toBytes(ByteBuffer buf)", "code": "{\n  if (canStoreCompact() && getCompactStorageSize() < getSparseStorageSize()) {\n    // store compact\n    toBytesCompact(buf);\n  } else {\n    // store sparse\n    toBytesSparse(buf);\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Rebalances the min-heap by pushing values from the top down and simultaneously updating the reverse index\n *\n * @param heap         min-heap stored as indices into the array of values\n * @param reverseIndex reverse index from the array of values into the heap\n * @param start        index to start re-balancing from\n * @param end          index to stop re-balancing at\n * @param values       values stored in the heap\n */\n", "func_signal": "private static void siftDown(int[] heap, int[] reverseIndex, int start, int end, float[] values)", "code": "{\n  int root = start;\n  while (root * 2 + 1 <= end) {\n    int child = root * 2 + 1;\n    int swap = root;\n    if (values[heap[swap]] > values[heap[child]]) {\n      swap = child;\n    }\n    if (child + 1 <= end && values[heap[swap]] > values[heap[child + 1]]) {\n      swap = child + 1;\n    }\n    if (swap != root) {\n      // swap\n      int tmp = heap[swap];\n      heap[swap] = heap[root];\n      heap[root] = tmp;\n\n      // heap index from delta index\n      reverseIndex[heap[swap]] = swap;\n      reverseIndex[heap[root]] = root;\n\n      root = swap;\n    } else {\n      return;\n    }\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Constructs an ApproximateHistogram object from the given compact byte-buffer representation\n *\n * @param buf ByteBuffer to construct an ApproximateHistogram from\n *\n * @return ApproximateHistogram constructed from the given ByteBuffer\n */\n", "func_signal": "public static ApproximateHistogram fromBytesCompact(ByteBuffer buf)", "code": "{\n  short size = (short) (-1 * buf.getShort());\n  byte count = buf.get();\n\n  if (count >= 0) {\n    // only exact bins\n    ApproximateHistogram histogram = new ApproximateHistogram(size);\n    for (int i = 0; i < count; ++i) {\n      histogram.offer(buf.getFloat());\n    }\n    return histogram;\n  } else {\n    byte approxCount = (byte) (-1 * count);\n\n    Map<Float, Long> approx = new HashMap<>();\n\n    for (int i = 0; i < approxCount; ++i) {\n      final float value = buf.getFloat();\n      if (approx.containsKey(value)) {\n        approx.put(value, approx.get(value) + 1);\n      } else {\n        approx.put(value, 1L);\n      }\n    }\n\n    float min = buf.getFloat();\n    float max = buf.getFloat();\n\n    byte exactCount = buf.get();\n\n    Map<Float, Long> exact = new HashMap<>();\n\n    for (int i = 0; i < exactCount; ++i) {\n      final float value = buf.getFloat();\n      if (exact.containsKey(value)) {\n        exact.put(value, exact.get(value) + 1);\n      } else {\n        exact.put(value, 1L);\n      }\n    }\n\n    int binCount = exact.size() + approx.size();\n\n    List<Float> pos = new ArrayList<>();\n    pos.addAll(exact.keySet());\n    pos.addAll(approx.keySet());\n    Collections.sort(pos);\n\n    float[] positions = new float[size];\n    long[] bins = new long[size];\n\n    for (int i = 0; i < pos.size(); ++i) {\n      positions[i] = pos.get(i);\n    }\n\n    for (int i = 0; i < pos.size(); ++i) {\n      final float value = pos.get(i);\n      if (exact.containsKey(value)) {\n        bins[i] = exact.get(value);\n      } else {\n        bins[i] = approx.get(value) | APPROX_FLAG_BIT;\n      }\n    }\n\n    return new ApproximateHistogram(binCount, positions, bins, min, max);\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Finalize the computation on sketch object and returns estimate from underlying\n * sketch.\n *\n * @param object the sketch object\n *\n * @return sketch object\n */\n", "func_signal": "@Nullable\n@Override\npublic Object finalizeComputation(@Nullable Object object)", "code": "{\n  if (object == null) {\n    return null;\n  }\n\n  if (shouldFinalize) {\n    SketchHolder holder = (SketchHolder) object;\n    if (errorBoundsStdDev != null) {\n      return holder.getEstimateWithErrorBounds(errorBoundsStdDev);\n    } else {\n      return holder.getEstimate();\n    }\n  } else {\n    return object;\n  }\n}", "path": "druid/extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/theta/SketchMergeAggregatorFactory.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * test serialize/deserilize null values of {@link PeriodLoadRule#tieredReplicants} and {@link PeriodLoadRule#includeFuture}\n */\n", "func_signal": "@Test\npublic void testSerdeNull() throws Exception", "code": "{\n  PeriodLoadRule rule = new PeriodLoadRule(\n      new Period(\"P1D\"), null, null\n  );\n\n  ObjectMapper jsonMapper = new DefaultObjectMapper();\n  Rule reread = jsonMapper.readValue(jsonMapper.writeValueAsString(rule), Rule.class);\n\n  Assert.assertEquals(rule.getPeriod(), ((PeriodLoadRule) reread).getPeriod());\n  Assert.assertEquals(rule.isIncludeFuture(), ((PeriodLoadRule) reread).isIncludeFuture());\n  Assert.assertEquals(PeriodLoadRule.DEFAULT_INCLUDE_FUTURE, rule.isIncludeFuture());\n  Assert.assertEquals(rule.getTieredReplicants(), ((PeriodLoadRule) reread).getTieredReplicants());\n  Assert.assertEquals(ImmutableMap.of(DruidServer.DEFAULT_TIER, DruidServer.DEFAULT_NUM_REPLICANTS), rule.getTieredReplicants());\n}", "path": "druid/server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodLoadRuleTest.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * test mapping null values of {@link PeriodLoadRule#tieredReplicants} and {@link PeriodLoadRule#includeFuture}\n */\n", "func_signal": "@Test\npublic void testMappingNull() throws Exception", "code": "{\n  String inputJson = \"{\\n\"\n                     + \"      \\\"period\\\": \\\"P1D\\\",\\n\"\n                     + \"      \\\"type\\\": \\\"loadByPeriod\\\"\\n\"\n                     + \"    }\";\n  String expectedJson = \"{\\n\"\n                        + \"      \\\"period\\\": \\\"P1D\\\",\\n\"\n                        + \"      \\\"includeFuture\\\": \" + PeriodLoadRule.DEFAULT_INCLUDE_FUTURE + \",\\n\"\n                        + \"      \\\"tieredReplicants\\\": {\\n\"\n                        + \"        \\\"\" + DruidServer.DEFAULT_TIER + \"\\\": \" + DruidServer.DEFAULT_NUM_REPLICANTS + \"\\n\"\n                        + \"      },\\n\"\n                        + \"      \\\"type\\\": \\\"loadByPeriod\\\"\\n\"\n                        + \"    }\";\n  ObjectMapper jsonMapper = new DefaultObjectMapper();\n  PeriodLoadRule inputPeriodLoadRule = jsonMapper.readValue(inputJson, PeriodLoadRule.class);\n  PeriodLoadRule expectedPeriodLoadRule = jsonMapper.readValue(expectedJson, PeriodLoadRule.class);\n  Assert.assertEquals(expectedPeriodLoadRule.getTieredReplicants(), inputPeriodLoadRule.getTieredReplicants());\n  Assert.assertEquals(expectedPeriodLoadRule.getPeriod(), inputPeriodLoadRule.getPeriod());\n  Assert.assertEquals(expectedPeriodLoadRule.isIncludeFuture(), inputPeriodLoadRule.isIncludeFuture());\n}", "path": "druid/server/src/test/java/org/apache/druid/server/coordinator/rules/PeriodLoadRuleTest.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Used by compareAndSwap to check if the transaction was terminated because of concurrent updates.\n *\n * The parent implementation's compareAndSwap transaction has isolation level REPEATABLE_READ.\n * In Postgres, such transactions will be canceled when another transaction commits a conflicting update:\n * https://www.postgresql.org/docs/10/transaction-iso.html#XACT-REPEATABLE-READ\n *\n * When this occurs, we need to retry the transaction from the beginning: by returning false in compareAndSwap,\n * the calling code will attempt retries.\n */\n", "func_signal": "private boolean checkRootCauseForPSQLSerializationFailure(\n    Throwable root\n)", "code": "{\n  if (root instanceof PSQLException) {\n    PSQLException psqlException = (PSQLException) root;\n    return PSQL_SERIALIZATION_FAILURE_SQL_STATE.equals(psqlException.getSQLState()) &&\n           PSQL_SERIALIZATION_FAILURE_MSG.equals(psqlException.getMessage());\n  } else {\n    return false;\n  }\n}", "path": "druid/extensions-core/postgresql-metadata-storage/src/main/java/org/apache/druid/metadata/storage/postgresql/PostgreSQLConnector.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Returns the minimum number of bytes required to store this ApproximateHistogram object\n *\n * @return required number of bytes\n */\n", "func_signal": "public int getMinStorageSize()", "code": "{\n  // sparse is always small than dense, so no need to check\n  if (canStoreCompact() && getCompactStorageSize() < getSparseStorageSize()) {\n    return getCompactStorageSize();\n  } else {\n    return getSparseStorageSize();\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Load the unique extensions and return their implementation-versions\n *\n * @return map of extensions loaded with their respective implementation versions.\n */\n", "func_signal": "private List<ModuleVersion> getExtensionVersions(Collection<DruidModule> druidModules)", "code": "{\n  List<ModuleVersion> moduleVersions = new ArrayList<>();\n  for (DruidModule module : druidModules) {\n    String artifact = module.getClass().getPackage().getImplementationTitle();\n    String version = module.getClass().getPackage().getImplementationVersion();\n    moduleVersions.add(new ModuleVersion(module.getClass().getName(), artifact, version));\n  }\n  return moduleVersions;\n}", "path": "druid/server/src/main/java/org/apache/druid/server/StatusResource.java", "commit_date": "2019-07-16 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Computes a visual representation of the approximate histogram with bins laid out according to the given breaks\n *\n * @param breaks breaks defining the histogram bins\n *\n * @return visual representation of the histogram\n */\n", "func_signal": "public Histogram toHistogram(final float[] breaks)", "code": "{\n  final double[] approximateBins = new double[breaks.length - 1];\n\n  double prev = sum(breaks[0]);\n  for (int i = 1; i < breaks.length; ++i) {\n    double s = sum(breaks[i]);\n    approximateBins[i - 1] = (float) (s - prev);\n    prev = s;\n  }\n\n  return new Histogram(breaks, approximateBins);\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Shifts the given range of histogram bins one slot to the left\n *\n * @param start index of the leftmost empty bin to shift into\n * @param end   index of the last bin to shift left\n */\n", "func_signal": "protected void shiftLeft(int start, int end)", "code": "{\n  for (int i = start; i < end; ++i) {\n    positions[i] = positions[i + 1];\n    bins[i] = bins[i + 1];\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Stop task scheduling and monitoring, and kill all running tasks.\n * This method is thread-safe.\n */\n", "func_signal": "private void stopInternal()", "code": "{\n  LOG.info(\"Cleaning up resources\");\n\n  taskCompleteEvents.clear();\n  if (taskMonitor != null) {\n    taskMonitor.stop();\n  }\n}", "path": "druid/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexPhaseRunner.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Constructs an ApproximateHistogram object from the given byte-buffer representation\n *\n * @param buf ByteBuffer to construct an ApproximateHistogram from\n *\n * @return ApproximateHistogram constructed from the given ByteBuffer\n */\n", "func_signal": "public static ApproximateHistogram fromBytes(ByteBuffer buf)", "code": "{\n  // negative size indicates compact representation\n  // this works regardless of whether we use int or short for the size since the leftmost bit is the sign bit\n  if (buf.getShort(buf.position()) < 0) {\n    return fromBytesCompact(buf);\n  } else {\n    // ignore size, determine if sparse or dense based on sign of binCount\n    if (buf.getInt(buf.position() + Integer.BYTES) < 0) {\n      return fromBytesSparse(buf);\n    } else {\n      return fromBytesDense(buf);\n    }\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Writes the sparse representation of this ApproximateHistogram object to the given byte-buffer\n * \n * Requires 16 + 12 * binCount bytes of storage\n *\n * @param buf ByteBuffer to write the ApproximateHistogram to\n */\n", "func_signal": "public void toBytesSparse(ByteBuffer buf)", "code": "{\n  buf.putInt(size);\n  buf.putInt(-1 * binCount); // use negative binCount to indicate sparse storage\n  for (int i = 0; i < binCount; ++i) {\n    buf.putFloat(positions[i]);\n  }\n  for (int i = 0; i < binCount; ++i) {\n    buf.putLong(bins[i]);\n  }\n  buf.putFloat(min);\n  buf.putFloat(max);\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Checks if the suffix of strings.get(i) matches the suffix of this matcher. The first prefix.length characters\n * of s are ignored. This method is useful if you've already independently verified the prefix. This method\n * evalutes strings.get(i) lazily to save time when it isn't necessary to actually look at the string.\n */\n", "func_signal": "public boolean matchesSuffixOnly(final Indexed<String> strings, final int i)", "code": "{\n  if (suffixMatch == SuffixMatch.MATCH_ANY) {\n    return true;\n  } else if (suffixMatch == SuffixMatch.MATCH_EMPTY) {\n    final String s = strings.get(i);\n    return s == null ? matches(null) : s.length() == prefix.length();\n  } else {\n    // suffixMatch is MATCH_PATTERN\n    final String s = strings.get(i);\n    return matches(s);\n  }\n}", "path": "druid/processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "commit_date": "2020-07-02 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * Constructs an Approximate Histogram object from the given byte-array representation\n *\n * @param bytes byte array to construct an ApproximateHistogram from\n *\n * @return ApproximateHistogram constructed from the given byte array\n */\n", "func_signal": "public static ApproximateHistogram fromBytes(byte[] bytes)", "code": "{\n  ByteBuffer buf = ByteBuffer.wrap(bytes);\n  return fromBytes(buf);\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "/**\n * @param h               histogram to be merged into the current histogram\n * @param mergedPositions temporary buffer of size greater or equal to {@link #size}\n * @param mergedBins      temporary buffer of size greater or equal to {@link #size}\n *\n * @return returns this histogram with h folded into it\n */\n", "func_signal": "public ApproximateHistogram foldFast(ApproximateHistogram h, @Nullable float[] mergedPositions, @Nullable long[] mergedBins)", "code": "{\n  if (size == 0) {\n    return copy(h);\n  } else {\n    return foldRule(h, mergedPositions, mergedBins);\n  }\n}", "path": "druid/extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogram.java", "commit_date": "2020-04-10 00:00:00", "repo_name": "apache/druid", "stars": 13119, "license": "apache-2.0", "language": "java", "size": 336610}
{"docstring": "//  Android  >= 3.0\n", "func_signal": "@Override\npublic void openFileChooser(ValueCallback valueCallback, String acceptType)", "code": "{\n\tLog.i(TAG, \"openFileChooser>3.0\");\n\tcreateAndOpenCommonFileChooser(valueCallback, acceptType);\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/DefaultChromeClient.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u6d4b\u8bd5\u9519\u8bef\u9875\u7684\u663e\u793a\n */\n", "func_signal": "private void loadErrorWebSite()", "code": "{\n\tif (mAgentWeb != null) {\n\t\tmAgentWeb.getUrlLoader().loadUrl(\"http://www.unkownwebsiteblog.me\");\n\t}\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "//Android  4.4  NoSuchMethodError: android.webkit.CookieManager.removeAllCookies\n", "func_signal": "public static void removeAllCookies(@Nullable ValueCallback<Boolean> callback)", "code": "{\n    if (callback == null) {\n        callback = getDefaultIgnoreCallback();\n    }\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n        CookieManager.getInstance().removeAllCookie();\n        toSyncCookies();\n        callback.onReceiveValue(!CookieManager.getInstance().hasCookies());\n        return;\n    }\n    CookieManager.getInstance().removeAllCookies(callback);\n    toSyncCookies();\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/AgentWebConfig.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u6253\u5f00\u6d4f\u89c8\u5668\n *\n * @param targetUrl \u5916\u90e8\u6d4f\u89c8\u5668\u6253\u5f00\u7684\u5730\u5740\n */\n", "func_signal": "private void openBrowser(String targetUrl)", "code": "{\n\tif (TextUtils.isEmpty(targetUrl) || targetUrl.startsWith(\"file://\")) {\n\t\tToast.makeText(this.getContext(), targetUrl + \" \u8be5\u94fe\u63a5\u65e0\u6cd5\u4f7f\u7528\u6d4f\u89c8\u5668\u6253\u5f00\u3002\", Toast.LENGTH_SHORT).show();\n\t\treturn;\n\t}\n\tIntent intent = new Intent();\n\tintent.setAction(\"android.intent.action.VIEW\");\n\tUri mUri = Uri.parse(targetUrl);\n\tintent.setData(mUri);\n\tstartActivity(intent);\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u590d\u5236\u5b57\u7b26\u4e32\n *\n * @param context\n * @param text\n */\n", "func_signal": "private void toCopy(Context context, String text)", "code": "{\n\n\tClipboardManager mClipboardManager = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n\tmClipboardManager.setPrimaryClip(ClipData.newPlainText(null, text));\n\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * Copy from com.blankj.utilcode.util.ActivityUtils#getActivityByView\n */\n", "func_signal": "private Activity getActivityByContext(Context context)", "code": "{\n    if (context instanceof Activity) return (Activity) context;\n    while (context instanceof ContextWrapper) {\n        if (context instanceof Activity) {\n            return (Activity) context;\n        }\n        context = ((ContextWrapper) context).getBaseContext();\n    }\n    return null;\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/AgentWebSettingsImpl.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "//  Android < 3.0\n", "func_signal": "@Override\npublic void openFileChooser(ValueCallback<Uri> valueCallback)", "code": "{\n\tLog.i(TAG, \"openFileChooser<3.0\");\n\tcreateAndOpenCommonFileChooser(valueCallback, \"*/*\");\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/DefaultChromeClient.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * PermissionInterceptor \u80fd\u8fbe\u5230 url1 \u5141\u8bb8\u6388\u6743\uff0c url2 \u62d2\u7edd\u6388\u6743\u7684\u6548\u679c\u3002\n * @param url\n * @param permissions\n * @param action\n * @return true \u8be5Url\u5bf9\u5e94\u9875\u9762\u8bf7\u6c42\u6743\u9650\u8fdb\u884c\u62e6\u622a \uff0cfalse \u8868\u793a\u4e0d\u62e6\u622a\u3002\n */\n", "func_signal": "@Override\npublic boolean intercept(String url, String[] permissions, String action)", "code": "{\n\tLog.i(TAG, \"mUrl:\" + url + \"  permission:\" + mGson.toJson(permissions) + \" action:\" + action);\n\treturn false;\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u9875\u9762\u7a7a\u767d\uff0c\u8bf7\u68c0\u67e5scheme\u662f\u5426\u52a0\u4e0a\uff0c scheme://host:port/path?query&query \u3002\n *\n * @return mUrl\n */\n", "func_signal": "public String getUrl()", "code": "{\n\tString target = \"\";\n\n\tif (TextUtils.isEmpty(target = this.getArguments().getString(URL_KEY))) {\n\t\ttarget = \"http://www.jd.com/\";\n\t}\n\n//\t\treturn \"http://ggzy.sqzwfw.gov.cn/WebBuilderDS/WebbuilderMIS/attach/downloadZtbAttach.jspx?attachGuid=af982055-3d76-4b00-b5ab-36dee1f90b11&appUrlFlag=sqztb&siteGuid=7eb5f7f1-9041-43ad-8e13-8fcb82ea831a\";\n\treturn target;\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u5411\u7f51\u9875\u6267\u884cjs\u56de\u8c03\uff1b\n * @param args\n * @throws JsCallbackException\n */\n", "func_signal": "public void apply (Object... args) throws JsCallbackException", "code": "{\n    if (mWebViewRef.get() == null) {\n        throw new JsCallbackException(\"the WebView related to the JsCallback has been recycled\");\n    }\n    if (!mCouldGoOn) {\n        throw new JsCallbackException(\"the JsCallback isn't permanent,cannot be called more than once\");\n    }\n    StringBuilder sb = new StringBuilder();\n    for (Object arg : args){\n        sb.append(\",\");\n        boolean isStrArg = arg instanceof String;\n        // \u6709\u7684\u63a5\u53e3\u5c06Json\u5bf9\u8c61\u8f6c\u6362\u6210\u4e86String\u8fd4\u56de\uff0c\u8fd9\u91cc\u4e0d\u80fd\u52a0\u53cc\u5f15\u53f7\uff0c\u5426\u5219\u7f51\u9875\u4f1a\u8ba4\u4e3a\u662fString\u800c\u4e0d\u662fJavaScript\u5bf9\u8c61\uff1b\n        boolean isObjArg = isJavaScriptObject(arg);\n        if (isStrArg && !isObjArg) {\n            sb.append(\"\\\"\");\n        }\n        sb.append(String.valueOf(arg));\n        if (isStrArg && !isObjArg) {\n            sb.append(\"\\\"\");\n        }\n    }\n    String execJs = String.format(CALLBACK_JS_FORMAT, mInjectedName, mIndex, mIsPermanent, sb.toString());\n    if (LogUtils.isDebug()) {\n        Log.d(\"JsCallBack\", execJs);\n    }\n    mWebViewRef.get().loadUrl(execJs);\n    mCouldGoOn = mIsPermanent > 0;\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/JsCallback.java", "commit_date": "2018-02-17 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u540c\u6b65cookie\n *\n * @param url\n * @param cookies\n */\n", "func_signal": "public static void syncCookie(String url, String cookies)", "code": "{\n    CookieManager mCookieManager = CookieManager.getInstance();\n    if (mCookieManager != null) {\n        mCookieManager.setCookie(url, cookies);\n        toSyncCookies();\n    }\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/AgentWebConfig.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * Android  >= 4.1\n *\n * @param uploadFile ValueCallback ,  File URI callback\n * @param acceptType\n * @param capture\n */\n", "func_signal": "@Override\npublic void openFileChooser(ValueCallback<Uri> uploadFile, String acceptType, String capture)", "code": "{\n    /*believe me , i never want to do this */\n\tLogUtils.i(TAG, \"openFileChooser>=4.1\");\n\tcreateAndOpenCommonFileChooser(uploadFile, acceptType);\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/DefaultChromeClient.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * notify the host application that a request for Geolocation permissions,\n * made with a previous call to\n * {@link #onGeolocationPermissionsShowPrompt(String, GeolocationPermissions.Callback) onGeolocationPermissionsShowPrompt()}\n * has been canceled. Any related UI should therefore be hidden.\n */\n", "func_signal": "@Override\npublic void onGeolocationPermissionsHidePrompt()", "code": "{\n\n    if (this.mDelegate != null) {\n        this.mDelegate.onGeolocationPermissionsHidePrompt();\n        return;\n    }\n\n    super.onGeolocationPermissionsHidePrompt();\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/WebChromeClientDelegate.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * @return IAgentWebSettings\n */\n", "func_signal": "public IAgentWebSettings getSettings()", "code": "{\n\treturn new AbsAgentWebSettings() {\n\t\tprivate AgentWeb mAgentWeb;\n\n\t\t@Override\n\t\tprotected void bindAgentWebSupport(AgentWeb agentWeb) {\n\t\t\tthis.mAgentWeb = agentWeb;\n\t\t}\n\n\t\t/**\n\t\t * AgentWeb 4.0.0 \u5185\u90e8\u5220\u9664\u4e86 DownloadListener \u76d1\u542c \uff0c\u4ee5\u53ca\u76f8\u5173API \uff0c\u5c06 Download \u90e8\u5206\u5b8c\u5168\u62bd\u79bb\u51fa\u6765\u72ec\u7acb\u4e00\u4e2a\u5e93\uff0c\n\t\t * \u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528 AgentWeb Download \u90e8\u5206 \uff0c \u8bf7\u4f9d\u8d56\u4e0a compile 'com.download.library:Downloader:4.1.1' \uff0c\n\t\t * \u5982\u679c\u4f60\u9700\u8981\u76d1\u542c\u4e0b\u8f7d\u7ed3\u679c\uff0c\u8bf7\u81ea\u5b9a\u4e49 AgentWebSetting \uff0c New \u51fa DefaultDownloadImpl\n\t\t * \u5b9e\u73b0\u8fdb\u5ea6\u6216\u8005\u7ed3\u679c\u76d1\u542c\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u76d1\u542c\u8fdb\u5ea6\uff0c\u6216\u8005\u4e0b\u8f7d\u7ed3\u679c\uff0c\u4e0b\u9762 setDownloader \u7684\u4f8b\u5b50\u53ef\u4ee5\u5ffd\u7565\u3002\n\t\t * @param webView\n\t\t * @param downloadListener\n\t\t * @return WebListenerManager\n\t\t */\n\t\t@Override\n\t\tpublic WebListenerManager setDownloader(WebView webView, android.webkit.DownloadListener downloadListener) {\n\t\t\treturn super.setDownloader(webView,\n\t\t\t\t\tnew DefaultDownloadImpl(getActivity(),\n\t\t\t\t\t\t\twebView,\n\t\t\t\t\t\t\tthis.mAgentWeb.getPermissionInterceptor()) {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected ResourceRequest createResourceRequest(String url) {\n\t\t\t\t\t\t\treturn DownloadImpl.getInstance()\n\t\t\t\t\t\t\t\t\t.with(getActivity().getApplicationContext())\n\t\t\t\t\t\t\t\t\t.url(url)\n\t\t\t\t\t\t\t\t\t.quickProgress()\n\t\t\t\t\t\t\t\t\t.addHeader(\"\", \"\")\n\t\t\t\t\t\t\t\t\t.setEnableIndicator(true)\n\t\t\t\t\t\t\t\t\t.autoOpenIgnoreMD5()\n\t\t\t\t\t\t\t\t\t.setRetry(5)\n\t\t\t\t\t\t\t\t\t.setBlockMaxTime(100000L);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void taskEnqueue(ResourceRequest resourceRequest) {\n\t\t\t\t\t\t\tresourceRequest.enqueue(new DownloadListenerAdapter() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void onStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength, Extra extra) {\n\t\t\t\t\t\t\t\t\tsuper.onStart(url, userAgent, contentDisposition, mimetype, contentLength, extra);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@MainThread\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void onProgress(String url, long downloaded, long length, long usedTime) {\n\t\t\t\t\t\t\t\t\tsuper.onProgress(url, downloaded, length, usedTime);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean onResult(Throwable throwable, Uri path, String url, Extra extra) {\n\t\t\t\t\t\t\t\t\treturn super.onResult(throwable, path, url, extra);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t}\n\t};\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * MiddlewareWebClientBase \u662f AgentWeb 3.0.0 \u63d0\u4f9b\u4e00\u4e2a\u5f3a\u5927\u7684\u529f\u80fd\uff0c\n * \u5982\u679c\u7528\u6237\u9700\u8981\u4f7f\u7528 AgentWeb \u63d0\u4f9b\u7684\u529f\u80fd\uff0c \u4e0d\u60f3\u91cd\u5199 WebClientView\u65b9\n * \u6cd5\u8986\u76d6AgentWeb\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u90a3\u4e48 MiddlewareWebClientBase \u662f\u4e00\u4e2a\n * \u4e0d\u9519\u7684\u9009\u62e9 \u3002\n *\n * @return\n */\n", "func_signal": "protected MiddlewareWebClientBase getMiddlewareWebClient()", "code": "{\n\treturn this.mMiddleWareWebClient = new MiddlewareWebViewClient() {\n\t\t/**\n\t\t *\n\t\t * @param view\n\t\t * @param url\n\t\t * @return\n\t\t */\n\t\t@Override\n\t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n\t\t\tLog.e(TAG, \"MiddlewareWebClientBase#shouldOverrideUrlLoading url:\" + url);\n\t\t\t/*if (url.startsWith(\"agentweb\")) { // \u62e6\u622a url\uff0c\u4e0d\u6267\u884c DefaultWebClient#shouldOverrideUrlLoading\n\t\t\t\tLog.i(TAG, \"agentweb scheme ~\");\n\t\t\t\treturn true;\n\t\t\t}*/\n\n\t\t\tif (super.shouldOverrideUrlLoading(view, url)) { // \u6267\u884c DefaultWebClient#shouldOverrideUrlLoading\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// do you work\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n\t\t\tLog.e(TAG, \"MiddlewareWebClientBase#shouldOverrideUrlLoading request url:\" + request.getUrl().toString());\n\t\t\treturn super.shouldOverrideUrlLoading(view, request);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n\t\t\tif (request.isForMainFrame() && error.getErrorCode() != -1) {\n\t\t\t\tsuper.onReceivedError(view, request, error);\n\t\t\t}\n\t\t}\n\t};\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u662f\u5426\u662fJSON(JavaScript Object Notation)\u5bf9\u8c61\uff1b\n * @param obj\n * @return\n */\n", "func_signal": "private boolean isJavaScriptObject(Object obj)", "code": "{\n    if (obj instanceof JSONObject || obj instanceof JSONArray) {\n        return true;\n    } else {\n        String json = obj.toString();\n        try {\n            new JSONObject(json);\n        } catch (JSONException e) {\n            try {\n                new JSONArray(json);\n            } catch (JSONException e1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/JsCallback.java", "commit_date": "2018-02-17 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u5220\u9664\u6240\u6709\u5df2\u7ecf\u8fc7\u671f\u7684 Cookies\n */\n", "func_signal": "public static void removeExpiredCookies()", "code": "{\n    CookieManager mCookieManager = null;\n    if ((mCookieManager = CookieManager.getInstance()) != null) { //\u540c\u6b65\u6e05\u9664\n        mCookieManager.removeExpiredCookie();\n        toSyncCookies();\n    }\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/AgentWebConfig.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u6e05\u9664 WebView \u7f13\u5b58\n */\n", "func_signal": "private void toCleanWebCache()", "code": "{\n\n\tif (this.mAgentWeb != null) {\n\n\t\t//\u6e05\u7406\u6240\u6709\u8ddfWebView\u76f8\u5173\u7684\u7f13\u5b58 \uff0c\u6570\u636e\u5e93\uff0c \u5386\u53f2\u8bb0\u5f55 \u7b49\u3002\n\t\tthis.mAgentWeb.clearWebCache();\n\t\tToast.makeText(getActivity(), \"\u5df2\u6e05\u7406\u7f13\u5b58\", Toast.LENGTH_SHORT).show();\n\t\t//\u6e05\u7a7a\u6240\u6709 AgentWeb \u786c\u76d8\u7f13\u5b58\uff0c\u5305\u62ec WebView \u7684\u7f13\u5b58 , AgentWeb \u4e0b\u8f7d\u7684\u56fe\u7247 \uff0c\u89c6\u9891 \uff0capk \u7b49\u6587\u4ef6\u3002\n//            AgentWebConfig.clearDiskCache(this.getContext());\n\t}\n\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u6e05\u7a7a\u7f13\u5b58\n *\n * @param context\n */\n", "func_signal": "public static synchronized void clearDiskCache(Context context)", "code": "{\n    try {\n        AgentWebUtils.clearCacheFolder(new File(getCachePath(context)), 0);\n        String path = getExternalCachePath(context);\n        if (!TextUtils.isEmpty(path)) {\n            File mFile = new File(path);\n            AgentWebUtils.clearCacheFolder(mFile, 0);\n        }\n    } catch (Throwable throwable) {\n        if (LogUtils.isDebug()) {\n            throwable.printStackTrace();\n        }\n    }\n}", "path": "AgentWeb/agentweb-core/src/main/java/com/just/agentweb/AgentWebConfig.java", "commit_date": "2020-09-03 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * \u663e\u793a\u66f4\u591a\u83dc\u5355\n *\n * @param view \u83dc\u5355\u4f9d\u9644\u5728\u8be5View\u4e0b\u9762\n */\n", "func_signal": "private void showPoPup(View view)", "code": "{\n\tif (mPopupMenu == null) {\n\t\tmPopupMenu = new PopupMenu(this.getActivity(), view);\n\t\tmPopupMenu.inflate(R.menu.toolbar_menu);\n\t\tmPopupMenu.setOnMenuItemClickListener(mOnMenuItemClickListener);\n\t}\n\tmPopupMenu.show();\n}", "path": "AgentWeb/sample/src/main/java/com/just/agentweb/sample/fragment/AgentWebFragment.java", "commit_date": "2020-11-19 00:00:00", "repo_name": "Justson/AgentWeb", "stars": 9085, "license": "apache-2.0", "language": "java", "size": 29032}
{"docstring": "/**\n * The center about which to apply the distortion, with a default of (0.5, 0.5).\n *\n * @param center default (0.5, 0.5)\n */\n", "func_signal": "public void setCenter(PointF center)", "code": "{\n    this.center = center;\n    setPoint(centerLocation, center);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java", "commit_date": "2018-10-17 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Capture the current image with the size as it is displayed and retrieve it as Bitmap.\n *\n * @return current output as Bitmap\n * @throws InterruptedException\n */\n", "func_signal": "public Bitmap capture() throws InterruptedException", "code": "{\n    final Semaphore waiter = new Semaphore(0);\n\n    final int width = surfaceView.getMeasuredWidth();\n    final int height = surfaceView.getMeasuredHeight();\n\n    // Take picture on OpenGL thread\n    final Bitmap resultBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n    gpuImage.runOnGLThread(new Runnable() {\n        @Override\n        public void run() {\n            GPUImageNativeLibrary.adjustBitmap(resultBitmap);\n            waiter.release();\n        }\n    });\n    requestRender();\n    waiter.acquire();\n\n    return resultBitmap;\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The degree of smoothing controls how gradually similar colors are replaced in the image\n * The default value is 0.1\n */\n", "func_signal": "public void setSmoothing(final float smoothing)", "code": "{\n    this.smoothing = smoothing;\n    setFloat(smoothingLocation, this.smoothing);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageChromaKeyBlendFilter.java", "commit_date": "2018-10-22 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The color to be replaced is specified using individual red, green, and blue components (normalized to 1.0).\n * The default is green: (0.0, 1.0, 0.0).\n *\n * @param redComponent   Red component of color to be replaced\n * @param greenComponent Green component of color to be replaced\n * @param blueComponent  Blue component of color to be replaced\n */\n", "func_signal": "public void setColorToReplace(float redComponent, float greenComponent, float blueComponent)", "code": "{\n    colorToReplace = new float[]{redComponent, greenComponent, blueComponent};\n    setFloatVec3(colorToReplaceLocation, colorToReplace);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageChromaKeyBlendFilter.java", "commit_date": "2018-10-22 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The radius of the distortion, ranging from 0.0 to 1.0, with a default of 0.5.\n *\n * @param radius from 0.0 to 1.0, default 0.5\n */\n", "func_signal": "public void setRadius(float radius)", "code": "{\n    this.radius = radius;\n    setFloat(radiusLocation, radius);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java", "commit_date": "2018-10-17 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * A multiplier for the blur size, ranging from 0.0 on up, with a default of 1.0\n *\n * @param blurSize from 0.0 on up, default 1.0\n */\n", "func_signal": "public void setBlurSize(float blurSize)", "code": "{\n    this.blurSize = blurSize;\n    runOnDraw(new Runnable() {\n        @Override\n        public void run() {\n            initTexelOffsets();\n        }\n    });\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The radius of the distortion, ranging from 0.0 to 1.0, with a default of 0.25\n *\n * @param radius from 0.0 to 1.0, default 0.25\n */\n", "func_signal": "public void setRadius(float radius)", "code": "{\n    this.radius = radius;\n    setFloat(radiusLocation, radius);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Retrieve current image with filter applied and given size as Bitmap.\n *\n * @param width  requested Bitmap width\n * @param height requested Bitmap height\n * @return Bitmap of picture with given size\n * @throws InterruptedException\n */\n", "func_signal": "public Bitmap capture(final int width, final int height) throws InterruptedException", "code": "{\n    // This method needs to run on a background thread because it will take a longer time\n    if (Looper.myLooper() == Looper.getMainLooper()) {\n        throw new IllegalStateException(\"Do not call this method from the UI thread!\");\n    }\n\n    forceSize = new Size(width, height);\n\n    final Semaphore waiter = new Semaphore(0);\n\n    // Layout with new size\n    getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n                getViewTreeObserver().removeGlobalOnLayoutListener(this);\n            } else {\n                getViewTreeObserver().removeOnGlobalLayoutListener(this);\n            }\n            waiter.release();\n        }\n    });\n\n    post(new Runnable() {\n        @Override\n        public void run() {\n            // Optionally, show loading view:\n            if (isShowLoading) {\n                addView(new LoadingView(getContext()));\n            }\n            // Request layout to release waiter:\n            surfaceView.requestLayout();\n        }\n    });\n\n    waiter.acquire();\n\n    // Run one render pass\n    gpuImage.runOnGLThread(new Runnable() {\n        @Override\n        public void run() {\n            waiter.release();\n        }\n    });\n    requestRender();\n    waiter.acquire();\n    Bitmap bitmap = capture();\n\n\n    forceSize = null;\n    post(new Runnable() {\n        @Override\n        public void run() {\n            surfaceView.requestLayout();\n        }\n    });\n    requestRender();\n\n    if (isShowLoading) {\n        postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                // Remove loading view\n                removeViewAt(1);\n            }\n        }, 300);\n    }\n\n    return bitmap;\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Set the rendering mode. When renderMode is\n * RENDERMODE_CONTINUOUSLY, the renderer is called\n * repeatedly to re-render the scene. When renderMode\n * is RENDERMODE_WHEN_DIRTY, the renderer only rendered when the surface\n * is created, or when {@link #requestRender} is called. Defaults to RENDERMODE_CONTINUOUSLY.\n *\n * @param renderMode one of the RENDERMODE_X constants\n * @see #RENDERMODE_CONTINUOUSLY\n * @see #RENDERMODE_WHEN_DIRTY\n * @see GLSurfaceView#setRenderMode(int)\n * @see GLTextureView#setRenderMode(int)\n */\n", "func_signal": "public void setRenderMode(int renderMode)", "code": "{\n    if (surfaceView instanceof GLSurfaceView) {\n        ((GLSurfaceView) surfaceView).setRenderMode(renderMode);\n    } else if (surfaceView instanceof GLTextureView) {\n        ((GLTextureView) surfaceView).setRenderMode(renderMode);\n    }\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The amount of distortion to apply, with a minimum of 0.0 and a default of 1.0.\n *\n * @param angle minimum 0.0, default 1.0\n */\n", "func_signal": "public void setAngle(float angle)", "code": "{\n    this.angle = angle;\n    setFloat(angleLocation, angle);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java", "commit_date": "2018-10-17 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "// TODO Should be an xml attribute. But then GPUImage can not be distributed as .jar anymore.\n", "func_signal": "public void setRatio(float ratio)", "code": "{\n    this.ratio = ratio;\n    surfaceView.requestLayout();\n    gpuImage.deleteImage();\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Pauses the Surface.\n */\n", "func_signal": "public void onPause()", "code": "{\n    if (surfaceView instanceof GLSurfaceView) {\n        ((GLSurfaceView) surfaceView).onPause();\n    } else if (surfaceView instanceof GLTextureView) {\n        ((GLTextureView) surfaceView).onPause();\n    }\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Setup and Tear down\n */\n", "func_signal": "public GPUImageSmoothToonFilter()", "code": "{\n    // First pass: apply a variable Gaussian blur\n    blurFilter = new GPUImageGaussianBlurFilter();\n    addFilter(blurFilter);\n\n    // Second pass: run the Sobel edge detection on this blurred image, along with a posterization effect\n    toonFilter = new GPUImageToonFilter();\n    addFilter(toonFilter);\n\n    getFilters().add(blurFilter);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Set the filter to be applied on the image.\n *\n * @param filter Filter that should be applied on the image.\n */\n", "func_signal": "public void setFilter(GPUImageFilter filter)", "code": "{\n    this.filter = filter;\n    gpuImage.setFilter(filter);\n    requestRender();\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * A scaling for the size of the applied blur, default of 1.0\n *\n * @param blurSize\n */\n", "func_signal": "public void setBlurSize(float blurSize)", "code": "{\n    this.blurSize = blurSize;\n    runOnDraw(new Runnable() {\n        @Override\n        public void run() {\n            initTexelOffsets();\n        }\n    });\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Resumes the Surface.\n */\n", "func_signal": "public void onResume()", "code": "{\n    if (surfaceView instanceof GLSurfaceView) {\n        ((GLSurfaceView) surfaceView).onResume();\n    } else if (surfaceView instanceof GLTextureView) {\n        ((GLTextureView) surfaceView).onResume();\n    }\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The index of refraction for the sphere, with a default of 0.71\n *\n * @param refractiveIndex default 0.71\n */\n", "func_signal": "public void setRefractiveIndex(float refractiveIndex)", "code": "{\n    this.refractiveIndex = refractiveIndex;\n    setFloat(refractiveIndexLocation, refractiveIndex);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The threshold sensitivity controls how similar pixels need to be colored to be replaced\n * The default value is 0.3\n */\n", "func_signal": "public void setThresholdSensitivity(final float thresholdSensitivity)", "code": "{\n    this.thresholdSensitivity = thresholdSensitivity;\n    setFloat(thresholdSensitivityLocation, this.thresholdSensitivity);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageChromaKeyBlendFilter.java", "commit_date": "2018-10-22 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * The center about which to apply the distortion, with a default of (0.5, 0.5)\n *\n * @param center default (0.5, 0.5)\n */\n", "func_signal": "public void setCenter(PointF center)", "code": "{\n    this.center = center;\n    setPoint(centerLocation, center);\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java", "commit_date": "2018-11-01 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * Sets the rotation of the displayed image.\n *\n * @param rotation new rotation\n */\n", "func_signal": "public void setRotation(Rotation rotation)", "code": "{\n    gpuImage.setRotation(rotation);\n    requestRender();\n}", "path": "android-gpuimage/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java", "commit_date": "2018-11-13 00:00:00", "repo_name": "cats-oss/android-gpuimage", "stars": 8858, "license": "None", "language": "java", "size": 1368}
{"docstring": "/**\n * set scheduler for Spider\n *\n * @param scheduler scheduler\n * @return this\n * @see Scheduler\n * @since 0.2.1\n */\n", "func_signal": "public Spider setScheduler(Scheduler scheduler)", "code": "{\n    checkIfRunning();\n    Scheduler oldScheduler = this.scheduler;\n    this.scheduler = scheduler;\n    if (oldScheduler != null) {\n        Request request;\n        while ((request = oldScheduler.poll(this)) != null) {\n            this.scheduler.push(request, this);\n        }\n    }\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Set charset of page manually.<br>\n * When charset is not set or set to null, it can be auto detected by Http header.\n *\n * @param charset charset\n * @return this\n */\n", "func_signal": "public Site setCharset(String charset)", "code": "{\n    this.charset = charset;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Put an Http header for downloader. <br>\n * Use {@link #addCookie(String, String)} for cookie and {@link #setUserAgent(String)} for user-agent. <br>\n *\n * @param key   key of http header, there are some keys constant in {@link HttpConstant.Header}\n * @param value value of header\n * @return this\n */\n", "func_signal": "public Site addHeader(String key, String value)", "code": "{\n    headers.put(key, value);\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Process specific urls without url discovering.\n *\n * @param urls urls to process\n */\n", "func_signal": "public void test(String... urls)", "code": "{\n    initComponent();\n    if (urls.length > 0) {\n        for (String url : urls) {\n            processRequest(new Request(url));\n        }\n    }\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * set user agent\n *\n * @param userAgent userAgent\n * @return this\n */\n", "func_signal": "public Site setUserAgent(String userAgent)", "code": "{\n    this.userAgent = userAgent;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * set the downloader of spider\n *\n * @param downloader downloader\n * @return this\n * @see Downloader\n */\n", "func_signal": "public Spider setDownloader(Downloader downloader)", "code": "{\n    checkIfRunning();\n    this.downloader = downloader;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Set acceptStatCode.<br>\n * When status code of http response is in acceptStatCodes, it will be processed.<br>\n * {200} by default.<br>\n * It is not necessarily to be set.<br>\n *\n * @param acceptStatCode acceptStatCode\n * @return this\n */\n", "func_signal": "public Site setAcceptStatCode(Set<Integer> acceptStatCode)", "code": "{\n    this.acceptStatCode = acceptStatCode;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Downloader is supposed to store response cookie.\n * Disable it to ignore all cookie fields and stay clean.\n * Warning: Set cookie will still NOT work if disableCookieManagement is true.\n * @param disableCookieManagement disableCookieManagement\n * @return this\n */\n", "func_signal": "public Site setDisableCookieManagement(boolean disableCookieManagement)", "code": "{\n    this.disableCookieManagement = disableCookieManagement;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Exit when complete. <br>\n * True: exit when all url of the site is downloaded. <br>\n * False: not exit until call stop() manually.<br>\n *\n * @param exitWhenComplete exitWhenComplete\n * @return this\n */\n", "func_signal": "public Spider setExitWhenComplete(boolean exitWhenComplete)", "code": "{\n    this.exitWhenComplete = exitWhenComplete;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Set cycleRetryTimes times when download fail, 0 by default. <br>\n *\n * @param cycleRetryTimes cycleRetryTimes\n * @return this\n */\n", "func_signal": "public Site setCycleRetryTimes(int cycleRetryTimes)", "code": "{\n    this.cycleRetryTimes = cycleRetryTimes;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Add a cookie with domain {@link #getDomain()}\n *\n * @param name name\n * @param value value\n * @return this\n */\n", "func_signal": "public Site addCookie(String name, String value)", "code": "{\n    defaultCookies.put(name, value);\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Whether use gzip. <br>\n * Default is true, you can set it to false to disable gzip.\n *\n * @param useGzip useGzip\n * @return this\n */\n", "func_signal": "public Site setUseGzip(boolean useGzip)", "code": "{\n    this.useGzip = useGzip;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Get thread count which is running\n *\n * @return thread count which is running\n * @since 0.4.1\n */\n", "func_signal": "public int getThreadAlive()", "code": "{\n    if (threadPool == null) {\n        return 0;\n    }\n    return threadPool.getThreadAlive();\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * start with more than one threads\n *\n * @param executorService executorService to run the spider\n * @param threadNum threadNum\n * @return this\n */\n", "func_signal": "public Spider thread(ExecutorService executorService, int threadNum)", "code": "{\n    checkIfRunning();\n    this.threadNum = threadNum;\n    if (threadNum <= 0) {\n        throw new IllegalArgumentException(\"threadNum should be more than one!\");\n    }\n    this.executorService = executorService;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * set timeout for downloader in ms\n *\n * @param timeOut timeOut\n * @return this\n */\n", "func_signal": "public Site setTimeOut(int timeOut)", "code": "{\n    this.timeOut = timeOut;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Set an uuid for spider.<br>\n * Default uuid is domain of site.<br>\n *\n * @param uuid uuid\n * @return this\n */\n", "func_signal": "public Spider setUUID(String uuid)", "code": "{\n    this.uuid = uuid;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Set retry sleep times when download fail, 1000 by default. <br>\n *\n * @param retrySleepTime retrySleepTime\n * @return this\n */\n", "func_signal": "public Site setRetrySleepTime(int retrySleepTime)", "code": "{\n    this.retrySleepTime = retrySleepTime;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Set retry times when download fail, 0 by default.<br>\n *\n * @param retryTimes retryTimes\n * @return this\n */\n", "func_signal": "public Site setRetryTimes(int retryTimes)", "code": "{\n    this.retryTimes = retryTimes;\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Site.java", "commit_date": "2020-12-21 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * clear the pipelines set\n *\n * @return this\n */\n", "func_signal": "public Spider clearPipeline()", "code": "{\n    pipelines = new ArrayList<Pipeline>();\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * Set startUrls of Spider.<br>\n * Prior to startUrls of Site.\n *\n * @param startUrls startUrls\n * @return this\n */\n", "func_signal": "public Spider startUrls(List<String> startUrls)", "code": "{\n    checkIfRunning();\n    this.startRequests = UrlUtils.convertToRequests(startUrls);\n    return this;\n}", "path": "webmagic/webmagic-core/src/main/java/us/codecraft/webmagic/Spider.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "code4craft/webmagic", "stars": 11120, "license": "apache-2.0", "language": "java", "size": 17306}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u672a\u8bfb\u6570\u91cf\n */\n", "func_signal": "public int getUnreadCount()", "code": "{\n    int count = 0;\n    if (TextUtils.isEmpty(mTvUnreadCount.getText())) {\n        return count;\n    }\n    if (mTvUnreadCount.getText().toString().equals(\"99+\")) {\n        return 99;\n    }\n    try {\n        count = Integer.valueOf(mTvUnreadCount.getText().toString());\n    } catch (Exception ignored) {\n    }\n    return count;\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_wechat/ui/view/BottomBarTab.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * Get the topFragment from BackStack\n */\n", "func_signal": "public static ISupportFragment getBackStackTopFragment(FragmentManager fragmentManager, int containerId)", "code": "{\n    int count = fragmentManager.getBackStackEntryCount();\n\n    for (int i = count - 1; i >= 0; i--) {\n        FragmentManager.BackStackEntry entry = fragmentManager.getBackStackEntryAt(i);\n        Fragment fragment = fragmentManager.findFragmentByTag(entry.getName());\n        if (fragment instanceof ISupportFragment) {\n            ISupportFragment supportFragment = (ISupportFragment) fragment;\n            if (containerId == 0) return supportFragment;\n\n            if (containerId == supportFragment.getSupportDelegate().mContainerId) {\n                return supportFragment;\n            }\n        }\n    }\n    return null;\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/SupportHelper.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u83b7\u53d6 Tab\n */\n", "func_signal": "public BottomBarTab getItem(int index)", "code": "{\n    if (mTabs.size() < index) return null;\n    return mTabs.get(index);\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_wechat/ui/view/BottomBar.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u9690\u85cf\u8f6f\u952e\u76d8\n */\n", "func_signal": "public static void hideSoftInput(View view)", "code": "{\n    if (view == null || view.getContext() == null) return;\n    InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/SupportHelper.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * Sets the mode to display the stack view\n * <p>\n * None if debug(false).\n * <p>\n * Default:NONE\n */\n", "func_signal": "public FragmentationBuilder stackViewMode(@StackViewMode int mode)", "code": "{\n    this.mode = mode;\n    return this;\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/Fragmentation.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * @param debug Suppressed Exception(\"Can not perform this action after onSaveInstanceState!\") when debug=false\n */\n", "func_signal": "public FragmentationBuilder debug(boolean debug)", "code": "{\n    this.debug = debug;\n    return this;\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/Fragmentation.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u8bbe\u7f6e\u672a\u8bfb\u6570\u91cf\n */\n", "func_signal": "public void setUnreadCount(int num)", "code": "{\n    if (num <= 0) {\n        mTvUnreadCount.setText(String.valueOf(0));\n        mTvUnreadCount.setVisibility(GONE);\n    } else {\n        mTvUnreadCount.setVisibility(VISIBLE);\n        if (num > 99) {\n            mTvUnreadCount.setText(\"99+\");\n        } else {\n            mTvUnreadCount.setText(String.valueOf(num));\n        }\n    }\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_wechat/ui/view/BottomBarTab.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u5904\u7406\u56de\u9000\u4e8b\u4ef6\n *\n * @return\n */\n", "func_signal": "@Override\npublic boolean onBackPressedSupport()", "code": "{\n    if (getChildFragmentManager().getBackStackEntryCount() > 1) {\n        popChild();\n    } else {\n        if (this instanceof ZhihuFirstFragment) {   // \u5982\u679c\u662f \u7b2c\u4e00\u4e2aFragment \u5219\u9000\u51faapp\n            _mActivity.finish();\n        } else {                                    // \u5982\u679c\u4e0d\u662f,\u5219\u56de\u5230\u7b2c\u4e00\u4e2aFragment\n            _mBackToFirstListener.onBackToFirstFragment();\n        }\n    }\n    return true;\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_zhihu/base/BaseMainFragment.java", "commit_date": "2017-06-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "// \u5141\u8bb8\u8d44\u6e90\u6587\u4ef6\u4f7f\u7528\n", "func_signal": "public DetailTransition(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n    init();\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_zhihu/helper/DetailTransition.java", "commit_date": "2016-06-30 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u8be5\u65b9\u6cd5\u56de\u8c03\u65f6\u673a\u4e3a,Activity\u56de\u9000\u6808\u5185Fragment\u7684\u6570\u91cf \u5c0f\u4e8e\u7b49\u4e8e1 \u65f6,\u9ed8\u8ba4finish Activity\n * \u8bf7\u5c3d\u91cf\u590d\u5199\u8be5\u65b9\u6cd5,\u907f\u514d\u590d\u5199onBackPress(),\u4ee5\u4fdd\u8bc1SupportFragment\u5185\u7684onBackPressedSupport()\u56de\u9000\u4e8b\u4ef6\u6b63\u5e38\u6267\u884c\n */\n", "func_signal": "public void onBackPressedSupport()", "code": "{\n    if (getSupportFragmentManager().getBackStackEntryCount() > 1) {\n        pop();\n    } else {\n        ActivityCompat.finishAfterTransition(mActivity);\n    }\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/SupportActivityDelegate.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u66ff\u6362\u52a0\u8f7d \u5185\u5bb9Fragment\n *\n * @param fragment\n */\n", "func_signal": "public void switchContentFragment(ContentFragment fragment)", "code": "{\n    SupportFragment contentFragment = findChildFragment(ContentFragment.class);\n    if (contentFragment != null) {\n        contentFragment.replaceFragment(fragment, false);\n    }\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_zhihu/ui/fragment/third/child/ShopFragment.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u4e0d\u5efa\u8bae\u590d\u5199\u8be5\u65b9\u6cd5,\u8bf7\u4f7f\u7528 {@link #onBackPressedSupport} \u4ee3\u66ff\n */\n", "func_signal": "public void onBackPressed()", "code": "{\n    mTransactionDelegate.mActionQueue.enqueue(new Action(Action.ACTION_BACK) {\n        @Override\n        public void run() {\n            if (!mFragmentClickable) {\n                mFragmentClickable = true;\n            }\n\n            // \u83b7\u53d6activeFragment:\u5373\u4ece\u6808\u9876\u5f00\u59cb \u72b6\u6001\u4e3ashow\u7684\u90a3\u4e2aFragment\n            ISupportFragment activeFragment = SupportHelper.getActiveFragment(getSupportFragmentManager());\n            if (mTransactionDelegate.dispatchBackPressedEvent(activeFragment)) return;\n\n            mSupport.onBackPressedSupport();\n        }\n    });\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/SupportActivityDelegate.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u5904\u7406\u56de\u9000\u4e8b\u4ef6\n *\n * @return\n */\n", "func_signal": "@Override\npublic boolean onBackPressedSupport()", "code": "{\n    if (System.currentTimeMillis() - TOUCH_TIME < WAIT_TIME) {\n        _mActivity.finish();\n    } else {\n        TOUCH_TIME = System.currentTimeMillis();\n        Toast.makeText(_mActivity, R.string.press_again_exit, Toast.LENGTH_SHORT).show();\n    }\n    return true;\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_wechat/base/BaseMainFragment.java", "commit_date": "2017-06-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * @param handler Handled Exception(\"Can not perform this action after onSaveInstanceState!\") when debug=false.\n */\n", "func_signal": "public FragmentationBuilder handleException(ExceptionHandler handler)", "code": "{\n    this.handler = handler;\n    return this;\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/Fragmentation.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u83b7\u53d6\u76ee\u6807Fragment\u7684\u524d\u4e00\u4e2aSupportFragment\n *\n * @param fragment \u76ee\u6807Fragment\n */\n", "func_signal": "public static ISupportFragment getPreFragment(Fragment fragment)", "code": "{\n    FragmentManager fragmentManager = fragment.getFragmentManager();\n    if (fragmentManager == null) return null;\n\n    List<Fragment> fragmentList = FragmentationMagician.getActiveFragments(fragmentManager);\n    if (fragmentList == null) return null;\n\n    int index = fragmentList.indexOf(fragment);\n    for (int i = index - 1; i >= 0; i--) {\n        Fragment preFragment = fragmentList.get(i);\n        if (preFragment instanceof ISupportFragment) {\n            return (ISupportFragment) preFragment;\n        }\n    }\n    return null;\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/SupportHelper.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * save requestCode\n */\n", "func_signal": "private void saveRequestCode(FragmentManager fm, Fragment from, Fragment to, int requestCode)", "code": "{\n    Bundle bundle = getArguments(to);\n    ResultRecord resultRecord = new ResultRecord();\n    resultRecord.requestCode = requestCode;\n    bundle.putParcelable(FRAGMENTATION_ARG_RESULT_RECORD, resultRecord);\n    fm.putFragment(bundle, FRAGMENTATION_STATE_SAVE_RESULT, from);\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/TransactionDelegate.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u9009\u62e9tab\u4e8b\u4ef6\n */\n", "func_signal": "@Subscribe\npublic void onTabSelectedEvent(TabSelectedEvent event)", "code": "{\n    if (event.position != MainActivity.FIRST) return;\n\n    if (mInAtTop) {\n        mRefreshLayout.setRefreshing(true);\n        onRefresh();\n    } else {\n        scrollToTop();\n    }\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_zhihu/ui/fragment/first/child/FirstHomeFragment.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * \u663e\u793a\u8f6f\u952e\u76d8\n */\n", "func_signal": "public static void showSoftInput(final View view)", "code": "{\n    if (view == null || view.getContext() == null) return;\n    final InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    view.requestFocus();\n    view.postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            imm.showSoftInput(view, InputMethodManager.SHOW_FORCED);\n        }\n    }, SHOW_SPACE);\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/SupportHelper.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * Reselected Tab\n */\n", "func_signal": "@Subscribe\npublic void onTabSelectedEvent(TabSelectedEvent event)", "code": "{\n    if (event.position != MainFragment.SECOND) return;\n\n    if (mInAtTop) {\n        mRefreshLayout.setRefreshing(true);\n        onRefresh();\n    } else {\n        scrollToTop();\n    }\n}", "path": "Fragmentation/demo/src/main/java/me/yokeyword/sample/demo_wechat/ui/fragment/second/FirstPagerFragment.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * Set all fragments animation.\n * \u8bbe\u7f6eFragment\u5185\u7684\u5168\u5c40\u52a8\u753b\n */\n", "func_signal": "public void setFragmentAnimator(FragmentAnimator fragmentAnimator)", "code": "{\n    this.mFragmentAnimator = fragmentAnimator;\n\n    for (Fragment fragment : FragmentationMagician.getActiveFragments(getSupportFragmentManager())) {\n        if (fragment instanceof ISupportFragment) {\n            ISupportFragment iF = (ISupportFragment) fragment;\n            SupportFragmentDelegate delegate = iF.getSupportDelegate();\n            if (delegate.mAnimByActivity) {\n                delegate.mFragmentAnimator = fragmentAnimator.copy();\n                if (delegate.mAnimHelper != null) {\n                    delegate.mAnimHelper.notifyChanged(delegate.mFragmentAnimator);\n                }\n            }\n        }\n    }\n}", "path": "Fragmentation/fragmentation_core/src/main/java/me/yokeyword/fragmentation/SupportActivityDelegate.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "YoKeyword/Fragmentation", "stars": 9717, "license": "apache-2.0", "language": "java", "size": 29343}
{"docstring": "/**\n * Parse and validates a route and adds it\n *\n * @param route      the route path\n * @param acceptType the accept type\n * @param target     the invocation target\n */\n", "func_signal": "@Deprecated\npublic void add(String route, String acceptType, Object target)", "code": "{\n    try {\n        int singleQuoteIndex = route.indexOf(SINGLE_QUOTE);\n        String httpMethod = route.substring(0, singleQuoteIndex).trim().toLowerCase(); // NOSONAR\n        String url = route.substring(singleQuoteIndex + 1, route.length() - 1).trim(); // NOSONAR\n\n        // Use special enum stuff to get from value\n        HttpMethod method;\n        try {\n            method = HttpMethod.valueOf(httpMethod);\n        } catch (IllegalArgumentException e) {\n            LOG.error(\"The @Route value: \"\n                          + route\n                          + \" has an invalid HTTP method part: \"\n                          + httpMethod\n                          + \".\");\n            return;\n        }\n        add(method, url, acceptType, target);\n    } catch (Exception e) {\n        LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e);\n    }\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "//////////////////////////////////////////////////\n// PRIVATE METHODS\n//////////////////////////////////////////////////\n", "func_signal": "private void add(HttpMethod method, String url, String acceptedType, Object target)", "code": "{\n    RouteEntry entry = new RouteEntry();\n    entry.httpMethod = method;\n    entry.path = url;\n    entry.target = target;\n    entry.acceptedType = acceptedType;\n    LOG.debug(\"Adds route: \" + entry);\n    // Adds to end of list\n    routes.add(entry);\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Replace all occurrences of a substring within a string with\n * another string.\n *\n * @param inString   String to examine\n * @param oldPattern String to replace\n * @param newPattern String to insert\n * @return a String with the replacements\n */\n", "func_signal": "public static String replace(String inString, String oldPattern, String newPattern)", "code": "{\n    if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\n        return inString;\n    }\n    StringBuilder sb = new StringBuilder();\n    int pos = 0; // our position in the old string\n    int index = inString.indexOf(oldPattern);\n    // the index of an occurrence we've found, or -1\n    int patLen = oldPattern.length();\n    while (index >= 0) {\n        sb.append(inString.substring(pos, index));\n        sb.append(newPattern);\n        pos = index + patLen;\n        index = inString.indexOf(oldPattern, pos);\n    }\n    sb.append(inString.substring(pos));\n    // remember to append any characters to the right of a match\n    return sb.toString();\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Convenience method to return a Collection as a delimited (e.g. CSV)\n * String. E.g. useful for {@code toString()} implementations.\n *\n * @param coll   the Collection to display\n * @param delim  the delimiter to use (probably a \",\")\n * @param prefix the String to start each element with\n * @param suffix the String to end each element with\n * @return the delimited String\n */\n", "func_signal": "public static String collectionToDelimitedString(Collection<?> coll, String delim, String prefix, String suffix)", "code": "{\n    if (CollectionUtils.isEmpty(coll)) {\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    Iterator<?> it = coll.iterator();\n    while (it.hasNext()) {\n        sb.append(prefix).append(it.next()).append(suffix);\n        if (it.hasNext()) {\n            sb.append(delim);\n        }\n    }\n    return sb.toString();\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Finds multiple targets for a requested route.\n *\n * @param httpMethod the http method\n * @param path       the route path\n * @param acceptType the accept type\n * @return the targets\n */\n", "func_signal": "public List<RouteMatch> findMultiple(HttpMethod httpMethod, String path, String acceptType)", "code": "{\n    List<RouteMatch> matchSet = new ArrayList<>();\n    List<RouteEntry> routeEntries = findTargetsForRequestedRoute(httpMethod, path);\n\n    for (RouteEntry routeEntry : routeEntries) {\n        if (acceptType != null) {\n            String bestMatch = MimeParse.bestMatch(Arrays.asList(routeEntry.acceptedType), acceptType);\n\n            if (routeWithGivenAcceptType(bestMatch)) {\n                matchSet.add(new RouteMatch(routeEntry.target, routeEntry.path, path, acceptType, httpMethod));\n            }\n        } else {\n            matchSet.add(new RouteMatch(routeEntry.target, routeEntry.path, path, acceptType, httpMethod));\n        }\n    }\n\n    return matchSet;\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Apply the given relative path to the given path,\n * assuming standard Java folder separation (i.e. \"/\" separators).\n *\n * @param path         the path to start from (usually a full file path)\n * @param relativePath the relative path to apply\n *                     (relative to the full file path above)\n * @return the full file path that results from applying the relative path\n */\n", "func_signal": "public static String applyRelativePath(String path, String relativePath)", "code": "{\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n    if (separatorIndex != -1) {\n        String newPath = path.substring(0, separatorIndex);\n        if (!relativePath.startsWith(FOLDER_SEPARATOR)) {\n            newPath += FOLDER_SEPARATOR;\n        }\n        return newPath + relativePath;\n    } else {\n        return relativePath;\n    }\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Delete any character in a given String.\n *\n * @param inString      the original String\n * @param charsToDelete a set of characters to delete.\n *                      E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n * @return the resulting String\n */\n", "func_signal": "public static String deleteAny(String inString, String charsToDelete)", "code": "{\n    if (!hasLength(inString) || !hasLength(charsToDelete)) {\n        return inString;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < inString.length(); i++) {\n        char c = inString.charAt(i);\n        if (charsToDelete.indexOf(c) == -1) {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "//can be cached? I don't think so.\n", "func_signal": "private Map<String, RouteEntry> getAcceptedMimeTypes(List<RouteEntry> routes)", "code": "{\n    Map<String, RouteEntry> acceptedTypes = new HashMap<>();\n\n    for (RouteEntry routeEntry : routes) {\n        if (!acceptedTypes.containsKey(routeEntry.acceptedType)) {\n            acceptedTypes.put(routeEntry.acceptedType, routeEntry);\n        }\n    }\n\n    return acceptedTypes;\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Normalize the path by suppressing sequences like \"path/..\" and\n * inner simple dots.\n * <p>The result is convenient for path comparison. For other uses,\n * notice that Windows separators (\"\\\") are replaced by simple slashes.\n *\n * @param path the original path\n * @return the normalized path\n */\n", "func_signal": "public static String cleanPath(String path)", "code": "{\n    if (path == null) {\n        return null;\n    }\n    String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\n\n    // Strip prefix from path to analyze, to not treat it as part of the\n    // first path element. This is necessary to correctly parse paths like\n    // \"file:core/../core/io/Resource.class\", where the \"..\" should just\n    // strip the first \"core\" directory while keeping the \"file:\" prefix.\n    int prefixIndex = pathToUse.indexOf(\":\");\n    String prefix = \"\";\n    if (prefixIndex != -1) {\n        prefix = pathToUse.substring(0, prefixIndex + 1);\n        pathToUse = pathToUse.substring(prefixIndex + 1);\n    }\n    if (pathToUse.startsWith(FOLDER_SEPARATOR)) {\n        prefix = prefix + FOLDER_SEPARATOR;\n        pathToUse = pathToUse.substring(1);\n    }\n\n    String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);\n    List<String> pathElements = new LinkedList<>();\n    int tops = 0;\n\n    for (int i = pathArray.length - 1; i >= 0; i--) {\n        String element = pathArray[i];\n        if (CURRENT_PATH.equals(element)) {\n            // Points to current directory - drop it.\n        } else if (TOP_PATH.equals(element)) {\n            // Registering top path found.\n            tops++;\n        } else {\n            if (tops > 0) {\n                // Merging path element with element corresponding to top path.\n                tops--;\n            } else {\n                // Normal path element found.\n                pathElements.add(0, element);\n            }\n        }\n    }\n\n    // Remaining top paths need to be retained.\n    for (int i = 0; i < tops; i++) {\n        pathElements.add(0, TOP_PATH);\n    }\n\n    return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Removes a particular route from the collection of those that have been previously routed.\n * Search for a previously established routes using the given path and removes any matches that are found.\n *\n * @param path the route path\n * @return <tt>true</tt> if this a matching route has been previously routed\n * @throws java.lang.IllegalArgumentException if <tt>path</tt> is null or blank\n * @since 2.2\n */\n", "func_signal": "public boolean remove(String path)", "code": "{\n    if (StringUtils.isEmpty(path)) {\n        throw new IllegalArgumentException(\"path cannot be null or blank\");\n    }\n\n    return removeRoute((HttpMethod) null, path);\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/* ------------------------------------------------------------ */\n/* Decode a URI path and strip parameters of UTF-8 path\n */\n", "func_signal": "public static String path(String path, int offset, int length)", "code": "{\n    try {\n        Utf8StringBuilder builder = null;\n        int end = offset + length;\n        for (int i = offset; i < end; i++) {\n            char c = path.charAt(i);\n            switch (c) {\n                case '%':\n                    if (builder == null) {\n                        builder = new Utf8StringBuilder(path.length());\n                        builder.append(path, offset, i - offset);\n                    }\n                    if ((i + 2) < end) {\n                        char u = path.charAt(i + 1);\n                        if (u == 'u') {\n                            // TODO this is wrong. This is a codepoint not a char\n                            builder.append((char) (0xffff & TypeUtil.parseInt(path, i + 2, 4, 16)));\n                            i += 5;\n                        } else {\n                            builder.append((byte) (0xff & (TypeUtil.convertHexDigit(u) * 16\n                                + TypeUtil.convertHexDigit(path.charAt(i + 2)))));\n                            i += 2;\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\"Bad URI % encoding\");\n                    }\n\n                    break;\n\n                case ';':\n                    if (builder == null) {\n                        builder = new Utf8StringBuilder(path.length());\n                        builder.append(path, offset, i - offset);\n                    }\n\n                    while (++i < end) {\n                        if (path.charAt(i) == '/') {\n                            builder.append('/');\n                            break;\n                        }\n                    }\n\n                    break;\n\n                default:\n                    if (builder != null) {\n                        builder.append(c);\n                    }\n                    break;\n            }\n        }\n\n        if (builder != null) {\n            return builder.toString();\n        }\n        if (offset == 0 && length == path.length()) {\n            return path;\n        }\n        return path.substring(offset, end);\n    } catch (Utf8Appendable.NotUtf8Exception e) {\n        return decodeISO88591Path(path, offset, length);\n    }\n}", "path": "spark/src/main/java/spark/utils/urldecoding/UrlDecode.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * finds target for a requested route\n *\n * @param httpMethod the http method\n * @param path       the path\n * @param acceptType the accept type\n * @return the target\n */\n", "func_signal": "public RouteMatch find(HttpMethod httpMethod, String path, String acceptType)", "code": "{\n    List<RouteEntry> routeEntries = this.findTargetsForRequestedRoute(httpMethod, path);\n    RouteEntry entry = findTargetWithGivenAcceptType(routeEntries, acceptType);\n    return entry != null ? new RouteMatch(entry.target, entry.path, path, acceptType, httpMethod) : null;\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/* ------------------------------------------------------------ */\n/* Decode a URI path and strip parameters of ISO-8859-1 path\n */\n", "func_signal": "private static String decodeISO88591Path(String path, int offset, int length)", "code": "{\n    StringBuilder builder = null;\n    int end = offset + length;\n    for (int i = offset; i < end; i++) {\n        char c = path.charAt(i);\n        switch (c) {\n            case '%':\n                if (builder == null) {\n                    builder = new StringBuilder(path.length());\n                    builder.append(path, offset, i - offset);\n                }\n                if ((i + 2) < end) {\n                    char u = path.charAt(i + 1);\n                    if (u == 'u') {\n                        // TODO this is wrong. This is a codepoint not a char\n                        builder.append((char) (0xffff & TypeUtil.parseInt(path, i + 2, 4, 16)));\n                        i += 5;\n                    } else {\n                        builder.append((byte) (0xff & (TypeUtil.convertHexDigit(u) * 16\n                            + TypeUtil.convertHexDigit(path.charAt(i + 2)))));\n                        i += 2;\n                    }\n                } else {\n                    throw new IllegalArgumentException();\n                }\n\n                break;\n\n            case ';':\n                if (builder == null) {\n                    builder = new StringBuilder(path.length());\n                    builder.append(path, offset, i - offset);\n                }\n                while (++i < end) {\n                    if (path.charAt(i) == '/') {\n                        builder.append('/');\n                        break;\n                    }\n                }\n                break;\n\n            default:\n                if (builder != null) {\n                    builder.append(c);\n                }\n                break;\n        }\n    }\n\n    if (builder != null) {\n        return builder.toString();\n    }\n    if (offset == 0 && length == path.length()) {\n        return path;\n    }\n    return path.substring(offset, end);\n}", "path": "spark/src/main/java/spark/utils/urldecoding/UrlDecode.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Removes a particular route from the collection of those that have been previously routed.\n * Search for a previously established routes using the given path and HTTP method, removing\n * any matches that are found.\n *\n * @param path       the route path\n * @param httpMethod the http method\n * @return <tt>true</tt> if this a matching route has been previously routed\n * @throws IllegalArgumentException if <tt>path</tt> is null or blank or if <tt>httpMethod</tt> is null, blank\n *                                  or an invalid HTTP method\n * @since 2.2\n */\n", "func_signal": "public boolean remove(String path, String httpMethod)", "code": "{\n    if (StringUtils.isEmpty(path)) {\n        throw new IllegalArgumentException(\"path cannot be null or blank\");\n    }\n\n    if (StringUtils.isEmpty(httpMethod)) {\n        throw new IllegalArgumentException(\"httpMethod cannot be null or blank\");\n    }\n\n    // Catches invalid input and throws IllegalArgumentException\n    HttpMethod method = HttpMethod.valueOf(httpMethod);\n\n    return removeRoute(method, path);\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * @return the targets\n */\n", "func_signal": "public List<RouteMatch> findAll()", "code": "{\n    List<RouteMatch> matchSet = new ArrayList<>();\n    List<RouteEntry> routeEntries = routes;\n\n    for (RouteEntry routeEntry : routeEntries) {\n        matchSet.add(new RouteMatch(routeEntry.target, routeEntry.path, \"ALL_ROUTES\", routeEntry.acceptedType, routeEntry.httpMethod));\n    }\n\n    return matchSet;\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "// TODO: I believe this feature has impacted performance. Optimization?\n", "func_signal": "private RouteEntry findTargetWithGivenAcceptType(List<RouteEntry> routeMatches, String acceptType)", "code": "{\n    if (acceptType != null && routeMatches.size() > 0) {\n        Map<String, RouteEntry> acceptedMimeTypes = getAcceptedMimeTypes(routeMatches);\n        String bestMatch = MimeParse.bestMatch(acceptedMimeTypes.keySet(), acceptType);\n\n        if (routeWithGivenAcceptType(bestMatch)) {\n            return acceptedMimeTypes.get(bestMatch);\n        } else {\n            return null;\n        }\n    } else {\n        if (routeMatches.size() > 0) {\n            return routeMatches.get(0);\n        }\n    }\n\n    return null;\n}", "path": "spark/src/main/java/spark/route/Routes.java", "commit_date": "2019-03-12 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Copy the given Collection into a String array.\n * The Collection must contain String elements only.\n *\n * @param collection the Collection to copy\n * @return the String array ({@code null} if the passed-in\n * Collection was {@code null})\n */\n", "func_signal": "public static String[] toStringArray(Collection<String> collection)", "code": "{\n    if (collection == null) {\n        return null;\n    }\n    return collection.toArray(new String[collection.size()]);\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "//---------------------------------------------------------------------\n// General convenience methods for working with Strings\n//---------------------------------------------------------------------\n", "func_signal": "public static boolean isBlank(final CharSequence cs)", "code": "{\n    int strLen;\n    if (cs == null || (strLen = cs.length()) == 0) {\n        return true;\n    }\n    for (int i = 0; i < strLen; i++) {\n        if (Character.isWhitespace(cs.charAt(i)) == false) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Take a String which is a delimited list and convert it to a String array.\n * <p>A single delimiter can consists of more than one character: It will still\n * be considered as single delimiter string, rather than as bunch of potential\n * delimiter characters - in contrast to {@code tokenizeToStringArray}.\n *\n * @param str           the input String\n * @param delimiter     the delimiter between elements (this is a single delimiter,\n *                      rather than a bunch individual delimiter characters)\n * @param charsToDelete a set of characters to delete. Useful for deleting unwanted\n *                      line breaks: e.g. \"\\r\\n\\f\" will delete all new lines and line feeds in a String.\n * @return an array of the tokens in the list\n */\n", "func_signal": "public static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete)", "code": "{\n    if (str == null) {\n        return new String[0];\n    }\n    if (delimiter == null) {\n        return new String[] {str};\n    }\n    List<String> result = new ArrayList<>();\n    if (\"\".equals(delimiter)) {\n        for (int i = 0; i < str.length(); i++) {\n            result.add(deleteAny(str.substring(i, i + 1), charsToDelete));\n        }\n    } else {\n        int pos = 0;\n        int delPos;\n        while ((delPos = str.indexOf(delimiter, pos)) != -1) {\n            result.add(deleteAny(str.substring(pos, delPos), charsToDelete));\n            pos = delPos + delimiter.length();\n        }\n        if (str.length() > 0 && pos <= str.length()) {\n            // Add rest of String, but not in case of empty input.\n            result.add(deleteAny(str.substring(pos), charsToDelete));\n        }\n    }\n    return toStringArray(result);\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * Extract the filename from the given path.\n *\n * @param path the file path (may be {@code null})\n * @return the extracted filename, or {@code null} if none\n */\n", "func_signal": "public static String getFilename(String path)", "code": "{\n    if (path == null) {\n        return null;\n    }\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n    return (separatorIndex != -1 ? path.substring(separatorIndex + 1) : path);\n}", "path": "spark/src/main/java/spark/utils/StringUtils.java", "commit_date": "2016-11-05 00:00:00", "repo_name": "perwendel/spark", "stars": 9588, "license": "apache-2.0", "language": "java", "size": 2503}
{"docstring": "/**\n * test get udffunc by type\n */\n", "func_signal": "@Test\npublic void testGetUdfFuncByType()", "code": "{\n    //insertOneUser\n    User user = insertOneUser();\n    //insertOne\n    UdfFunc udfFunc = insertOne(user);\n    //getUdfFuncByType\n    List<UdfFunc> udfFuncList = udfFuncMapper.getUdfFuncByType(user.getId(), udfFunc.getType().ordinal());\n    Assert.assertNotEquals(udfFuncList.size(), 0);\n\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * insert one user\n *\n * @return User\n */\n", "func_signal": "private User insertOneUser(String userName)", "code": "{\n    User user = new User();\n    user.setUserName(userName);\n    user.setUserPassword(\"1\");\n    user.setEmail(\"xx@123.com\");\n    user.setUserType(UserType.GENERAL_USER);\n    user.setCreateTime(new Date());\n    user.setTenantId(1);\n    user.setUpdateTime(new Date());\n    userMapper.insert(user);\n    return user;\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * insert one user\n *\n * @return User\n */\n", "func_signal": "private User insertOneUser()", "code": "{\n    User user = new User();\n    user.setUserName(\"user1\");\n    user.setUserPassword(\"1\");\n    user.setEmail(\"xx@123.com\");\n    user.setUserType(UserType.GENERAL_USER);\n    user.setCreateTime(new Date());\n    user.setTenantId(1);\n    user.setUpdateTime(new Date());\n    userMapper.insert(user);\n    return user;\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test query udf by ids\n */\n", "func_signal": "@Test\npublic void testQueryUdfByIdStr()", "code": "{\n    //insertOne\n    UdfFunc udfFunc = insertOne();\n    //insertOne\n    UdfFunc udfFunc1 = insertOne();\n    int[] idArray = new int[]{udfFunc.getId(), udfFunc1.getId()};\n    //queryUdfByIdStr\n    List<UdfFunc> udfFuncList = udfFuncMapper.queryUdfByIdStr(idArray, \"\");\n    Assert.assertNotEquals(udfFuncList.size(), 0);\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test page\n */\n", "func_signal": "@Test\npublic void testQueryUdfFuncPaging()", "code": "{\n    //insertOneUser\n    User user = insertOneUser();\n    //insertOne\n    UdfFunc udfFunc = insertOne(user);\n    //queryUdfFuncPaging\n    Page<UdfFunc> page = new Page(1, 3);\n    IPage<UdfFunc> udfFuncIPage = udfFuncMapper.queryUdfFuncPaging(page, user.getId(), \"\");\n    Assert.assertNotEquals(udfFuncIPage.getTotal(), 0);\n\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test select by id\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testSelectById() throws Exception", "code": "{\n    Integer userId = 1;\n    AccessToken accessToken = createAccessToken(userId);\n    AccessToken resultAccessToken = accessTokenMapper.selectById(accessToken.getId());\n    assertEquals(accessToken, resultAccessToken);\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test update\n */\n", "func_signal": "@Test\npublic void testUpdate()", "code": "{\n    //insertOne\n    UdfFunc udfFunc = insertOne();\n    udfFunc.setResourceName(\"dolphin_resource_update\");\n    udfFunc.setResourceId(2);\n    udfFunc.setClassName(\"org.apache.dolphinscheduler.test.mrUpdate\");\n    udfFunc.setUpdateTime(new Date());\n    //update\n    int update = udfFuncMapper.updateById(udfFunc);\n    Assert.assertEquals(update, 1);\n\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test insert\n *\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testInsert() throws Exception", "code": "{\n    Integer userId = 1;\n\n    AccessToken accessToken = createAccessToken(userId);\n    assertThat(accessToken.getId(), greaterThan(0));\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test query\n */\n", "func_signal": "@Test\npublic void testQuery()", "code": "{\n    //insertOne\n    UdfFunc udfFunc = insertOne();\n    //query\n    List<UdfFunc> udfFuncList = udfFuncMapper.selectList(null);\n    Assert.assertNotEquals(udfFuncList.size(), 0);\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * create user\n *\n * @param userName userName\n * @return user\n * @throws Exception\n */\n", "func_signal": "private User createUser(String userName) throws Exception", "code": "{\n    User user = new User();\n    user.setUserName(userName);\n    user.setUserPassword(\"123\");\n    user.setUserType(UserType.GENERAL_USER);\n    user.setEmail(\"test@qq.com\");\n    user.setPhone(\"13102557272\");\n    user.setTenantId(1);\n    user.setCreateTime(DateUtils.getCurrentDate());\n    user.setUpdateTime(DateUtils.getCurrentDate());\n    user.setQueue(\"default\");\n\n    int status = userMapper.insert(user);\n\n    if (status != 1) {\n        Assert.fail(\"insert user data error\");\n    }\n\n    return user;\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test page\n */\n", "func_signal": "@Test\npublic void testSelectAccessTokenPage() throws Exception", "code": "{\n    Integer count = 4;\n    String userName = \"zhangsan\";\n\n    Integer offset = 2;\n    Integer size = 2;\n\n    Map<Integer, AccessToken> accessTokenMap = createAccessTokens(count, userName);\n\n    Page page = new Page(offset, size);\n    IPage<AccessToken> accessTokenPage = accessTokenMapper.selectAccessTokenPage(page, userName, 0);\n\n    assertEquals(Integer.valueOf(accessTokenPage.getRecords().size()), size);\n\n    for (AccessToken accessToken : accessTokenPage.getRecords()) {\n        AccessToken resultAccessToken = accessTokenMap.get(accessToken.getId());\n        assertEquals(accessToken, resultAccessToken);\n    }\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * create general user\n *\n * @return User\n */\n", "func_signal": "private User createGeneralUser(String userName)", "code": "{\n    User user = new User();\n    user.setUserName(userName);\n    user.setUserPassword(\"1\");\n    user.setEmail(\"xx@123.com\");\n    user.setUserType(UserType.GENERAL_USER);\n    user.setCreateTime(new Date());\n    user.setTenantId(1);\n    user.setUpdateTime(new Date());\n    userMapper.insert(user);\n    return user;\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test query udffunc expect userId\n */\n", "func_signal": "@Test\npublic void testQueryUdfFuncExceptUserId()", "code": "{\n    //insertOneUser\n    User user1 = insertOneUser();\n    User user2 = insertOneUser(\"user2\");\n    //insertOne\n    UdfFunc udfFunc1 = insertOne(user1);\n    UdfFunc udfFunc2 = insertOne(user2);\n    List<UdfFunc> udfFuncList = udfFuncMapper.queryUdfFuncExceptUserId(user1.getId());\n    Assert.assertNotEquals(udfFuncList.size(), 0);\n\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * check email\n */\n", "func_signal": "@Test\npublic void testCheckEmail()", "code": "{\n\n    assertTrue(CheckUtils.checkEmail(\"test01@gmail.com\"));\n\n    assertFalse(CheckUtils.checkEmail(\"test01@gmail\"));\n}", "path": "dolphinscheduler/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * test update\n */\n", "func_signal": "@Test\npublic void testUpdate() throws Exception", "code": "{\n    Integer userId = 1;\n    AccessToken accessToken = createAccessToken(userId);\n    //update\n    accessToken.setToken(\"56789\");\n    accessToken.setExpireTime(DateUtils.getCurrentDate());\n    accessToken.setUpdateTime(DateUtils.getCurrentDate());\n    int status = accessTokenMapper.updateById(accessToken);\n    if (status != 1) {\n        Assert.fail(\"update access token fail\");\n    }\n    AccessToken resultAccessToken = accessTokenMapper.selectById(accessToken.getId());\n    assertEquals(accessToken, resultAccessToken);\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * check username\n */\n", "func_signal": "@Test\npublic void testCheckUserName()", "code": "{\n\n    assertTrue(CheckUtils.checkUserName(\"test01\"));\n\n    assertFalse(CheckUtils.checkUserName(null));\n\n    assertFalse(CheckUtils.checkUserName(\"test01@abc\"));\n}", "path": "dolphinscheduler/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * create accessTokens\n *\n * @param count    create accessToken count\n * @param userName username\n * @return accessToken map\n * @throws Exception\n */\n", "func_signal": "private Map<Integer, AccessToken> createAccessTokens(\n        Integer count, String userName) throws Exception", "code": "{\n\n    User user = createUser(userName);\n\n    Map<Integer, AccessToken> accessTokenMap = new HashMap<>();\n    for (int i = 1; i <= count; i++) {\n        AccessToken accessToken = createAccessToken(user.getId(), userName);\n\n        accessTokenMap.put(accessToken.getId(), accessToken);\n    }\n\n    return accessTokenMap;\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * check desc\n */\n", "func_signal": "@Test\npublic void testCheckDesc()", "code": "{\n\n    Map<String, Object> objectMap = CheckUtils.checkDesc(\"I am desc\");\n    Status status = (Status) objectMap.get(Constants.STATUS);\n\n    assertEquals(status.getCode(),Status.SUCCESS.getCode());\n\n}", "path": "dolphinscheduler/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * check passwd\n */\n", "func_signal": "@Test\npublic void testCheckPassword()", "code": "{\n\n    assertFalse(CheckUtils.checkPassword(null));\n\n    assertFalse(CheckUtils.checkPassword(\"a\"));\n\n    assertFalse(CheckUtils.checkPassword(\"1234567890abcderfasdf2\"));\n\n    assertTrue(CheckUtils.checkPassword(\"123456\"));\n}", "path": "dolphinscheduler/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java", "commit_date": "2020-06-02 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * create access token\n *\n * @param userId   userId\n * @param userName userName\n * @return accessToken\n * @throws Exception\n */\n", "func_signal": "private AccessToken createAccessToken(Integer userId, String userName) throws Exception", "code": "{\n    //insertOne\n    AccessToken accessToken = new AccessToken();\n    accessToken.setUserName(userName);\n    accessToken.setUserId(userId);\n    accessToken.setToken(String.valueOf(ThreadLocalRandom.current().nextLong()));\n    accessToken.setCreateTime(DateUtils.getCurrentDate());\n    accessToken.setUpdateTime(DateUtils.getCurrentDate());\n    accessToken.setExpireTime(DateUtils.getCurrentDate());\n\n    int status = accessTokenMapper.insert(accessToken);\n\n    if (status != 1) {\n        Assert.fail(\"insert data error\");\n    }\n    return accessToken;\n}", "path": "dolphinscheduler/dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "apache/dolphinscheduler", "stars": 11746, "license": "apache-2.0", "language": "java", "size": 207555}
{"docstring": "/**\n * Get an array of types for an array of objects\n *\n * @see Object#getClass()\n */\n", "func_signal": "private static Class<?>[] types(Object... values)", "code": "{\n    if (values == null) {\n        return new Class[0];\n    }\n    \n    Class<?>[] result = new Class[values.length];\n    \n    for (int i = 0; i < values.length; i++) {\n        Object value = values[i];\n        result[i] = value == null ? NULL.class : value.getClass();\n    }\n    \n    return result;\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Wrap an object created from a constructor\n */\n", "func_signal": "private static Reflect on(Constructor<?> constructor, Object... args) throws ReflectException", "code": "{\n    try {\n        return on(constructor.getDeclaringClass(), accessible(constructor).newInstance(args));\n    }\n    catch (Exception e) {\n        throw new ReflectException(e);\n    }\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * hookSystemServices, but need to compatible with Android O in future.\n */\n", "func_signal": "protected void hookSystemServices()", "code": "{\n    try {\n        Singleton<IActivityManager> defaultSingleton;\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            defaultSingleton = Reflector.on(ActivityManager.class).field(\"IActivityManagerSingleton\").get();\n        } else {\n            defaultSingleton = Reflector.on(ActivityManagerNative.class).field(\"gDefault\").get();\n        }\n        IActivityManager origin = defaultSingleton.get();\n        IActivityManager activityManagerProxy = (IActivityManager) Proxy.newProxyInstance(mContext.getClassLoader(), new Class[] { IActivityManager.class },\n            createActivityManagerProxy(origin));\n\n        // Hook IActivityManager from ActivityManagerNative\n        Reflector.with(defaultSingleton).field(\"mInstance\").set(activityManagerProxy);\n\n        if (defaultSingleton.get() == activityManagerProxy) {\n            this.mActivityManager = activityManagerProxy;\n            Log.d(TAG, \"hookSystemServices succeed : \" + mActivityManager);\n        }\n    } catch (Exception e) {\n        Log.w(TAG, e);\n    }\n}", "path": "VirtualAPK/CoreLibrary/src/main/java/com/didi/virtualapk/PluginManager.java", "commit_date": "2018-08-10 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Get a wrapped field.\n * <p>\n * This is roughly equivalent to {@link Field#get(Object)}. If the wrapped\n * object is a {@link Class}, then this will wrap a static member field. If\n * the wrapped object is any other {@link Object}, then this wrap an\n * instance member field.\n *\n * @param name The field name\n * @return The wrapped field\n * @throws ReflectException If any reflection exception occurred.\n */\n", "func_signal": "public Reflect field(String name) throws ReflectException", "code": "{\n    try {\n        Field field = field0(name);\n        return on(field.getType(), field.get(object));\n    }\n    catch (Exception e) {\n        throw new ReflectException(e);\n    }\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Create a proxy for the wrapped object allowing to typesafely invoke\n * methods on it using a custom interface\n *\n * @param proxyType The interface type that is implemented by the proxy\n * @return A proxy for the wrapped object\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <P> P as(final Class<P> proxyType)", "code": "{\n    final boolean isMap = (object instanceof Map);\n    final InvocationHandler handler = new InvocationHandler() {\n        @SuppressWarnings(\"null\")\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            String name = method.getName();\n            \n            // Actual method name matches always come first\n            try {\n                return on(type, object).call(name, args).get();\n            }\n            \n            // [#14] Emulate POJO behaviour on wrapped map objects\n            catch (ReflectException e) {\n                if (isMap) {\n                    Map<String, Object> map = (Map<String, Object>) object;\n                    int length = (args == null ? 0 : args.length);\n                    \n                    if (length == 0 && name.startsWith(\"get\")) {\n                        return map.get(property(name.substring(3)));\n                    }\n                    else if (length == 0 && name.startsWith(\"is\")) {\n                        return map.get(property(name.substring(2)));\n                    }\n                    else if (length == 1 && name.startsWith(\"set\")) {\n                        map.put(property(name.substring(3)), args[0]);\n                        return null;\n                    }\n                }\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                throw e;\n            }\n        }\n    };\n    \n    return (P) Proxy.newProxyInstance(proxyType.getClassLoader(), new Class[] { proxyType }, handler);\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Searches a method with a similar signature as desired using\n * {@link #isSimilarSignature(java.lang.reflect.Method, String, Class[])}.\n * <p>\n * First public methods are searched in the class hierarchy, then private\n * methods on the declaring class. If a method could be found, it is\n * returned, otherwise a {@code NoSuchMethodException} is thrown.\n */\n", "func_signal": "private Method similarMethod(String name, Class<?>[] types) throws NoSuchMethodException", "code": "{\n    Class<?> t = type();\n    \n    // first priority: find a public method with a \"similar\" signature in class hierarchy\n    // similar interpreted in when primitive argument types are converted to their wrappers\n    for (Method method : t.getMethods()) {\n        if (isSimilarSignature(method, name, types)) {\n            return method;\n        }\n    }\n    \n    // second priority: find a non-public method with a \"similar\" signature on declaring class\n    do {\n        for (Method method : t.getDeclaredMethods()) {\n            if (isSimilarSignature(method, name, types)) {\n                return method;\n            }\n        }\n        \n        t = t.getSuperclass();\n    }\n    while (t != null);\n    \n    throw new NoSuchMethodException(\"No similar method \" + name + \" with params \" + Arrays.toString(types) + \" could be found on type \" + type() + \".\");\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "// Hooked IContentProvider binder\n", "func_signal": "public static PluginManager getInstance(Context base)", "code": "{\n       if (sInstance == null) {\n           synchronized (PluginManager.class) {\n               if (sInstance == null) {\n                   sInstance = createInstance(base);\n               }\n           }\n       }\n\n       return sInstance;\n   }", "path": "VirtualAPK/CoreLibrary/src/main/java/com/didi/virtualapk/PluginManager.java", "commit_date": "2018-08-10 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Unwrap an object\n */\n", "func_signal": "private static Object unwrap(Object object)", "code": "{\n    if (object instanceof Reflect) {\n        return ((Reflect) object).get();\n    }\n    \n    return object;\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * query binder by binderCode from binder pool\n * \n * @param binderCode\n *            the unique token of binder\n * @return binder who's token is binderCode<br>\n *         return null when not found or BinderPoolService died.\n */\n", "func_signal": "public IBinder queryBinder(int binderCode)", "code": "{\n    IBinder binder = null;\n    try {\n        if (mBinderPool != null) {\n            binder = mBinderPool.queryBinder(binderCode);\n        }\n    } catch (RemoteException e) {\n        e.printStackTrace();\n    }\n    return binder;\n}", "path": "VirtualAPK/PluginDemo/app/src/main/java/com/didi/virtualapk/demo/binderpool/BinderPool.java", "commit_date": "2017-06-29 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Get the POJO property name of an getter/setter\n */\n", "func_signal": "private static String property(String string)", "code": "{\n    int length = string.length();\n    \n    if (length == 0) {\n        return \"\";\n    }\n    else if (length == 1) {\n        return string.toLowerCase();\n    }\n    else {\n        return string.substring(0, 1).toLowerCase() + string.substring(1);\n    }\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Call a method by its name.\n * <p>\n * This is roughly equivalent to {@link Method#invoke(Object, Object...)}.\n * If the wrapped object is a {@link Class}, then this will invoke a static\n * method. If the wrapped object is any other {@link Object}, then this will\n * invoke an instance method.\n * <p>\n * Just like {@link Method#invoke(Object, Object...)}, this will try to wrap\n * primitive types or unwrap primitive type wrappers if applicable. If\n * several methods are applicable, by that rule, the first one encountered\n * is called. i.e. when calling <code><pre>\n * on(...).call(\"method\", 1, 1);\n * </pre></code> The first of the following methods will be called:\n * <code><pre>\n * public void method(int param1, Integer param2);\n * public void method(Integer param1, int param2);\n * public void method(Number param1, Number param2);\n * public void method(Number param1, Object param2);\n * public void method(int param1, Object param2);\n * </pre></code>\n * <p>\n * The best matching method is searched for with the following strategy:\n * <ol>\n * <li>public method with exact signature match in class hierarchy</li>\n * <li>non-public method with exact signature match on declaring class</li>\n * <li>public method with similar signature in class hierarchy</li>\n * <li>non-public method with similar signature on declaring class</li>\n * </ol>\n *\n * @param name The method name\n * @param args The method arguments\n * @return The wrapped method result or the same wrapped object if the\n *         method returns <code>void</code>, to be used for further\n *         reflection.\n * @throws ReflectException If any reflection exception occurred.\n */\n", "func_signal": "public Reflect call(String name, Object... args) throws ReflectException", "code": "{\n    Class<?>[] types = types(args);\n    \n    // Try invoking the \"canonical\" method, i.e. the one with exact\n    // matching argument types\n    try {\n        Method method = exactMethod(name, types);\n        return on(method, object, args);\n    }\n    \n    // If there is no exact match, try to find a method that has a \"similar\"\n    // signature if primitive argument types are converted to their wrappers\n    catch (NoSuchMethodException e) {\n        try {\n            Method method = similarMethod(name, types);\n            return on(method, object, args);\n        } catch (NoSuchMethodException e1) {\n            throw new ReflectException(e1);\n        }\n    }\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Set a field value.\n * <p>\n * This is roughly equivalent to {@link Field#set(Object, Object)}. If the\n * wrapped object is a {@link Class}, then this will set a value to a static\n * member field. If the wrapped object is any other {@link Object}, then\n * this will set a value to an instance member field.\n * <p>\n * This method is also capable of setting the value of (static) final\n * fields. This may be convenient in situations where no\n * {@link SecurityManager} is expected to prevent this, but do note that\n * (especially static) final fields may already have been inlined by the\n * javac and/or JIT and relevant code deleted from the runtime verison of\n * your program, so setting these fields might not have any effect on your\n * execution.\n * <p>\n * For restrictions of usage regarding setting values on final fields check:\n * <a href=\n * \"http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection\">http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection</a>\n * ... and <a href=\n * \"http://pveentjer.blogspot.co.at/2017/01/final-static-boolean-jit.html\">http://pveentjer.blogspot.co.at/2017/01/final-static-boolean-jit.html</a>\n *\n * @param name The field name\n * @param value The new field value\n * @return The same wrapped object, to be used for further reflection.\n * @throws ReflectException If any reflection exception occurred.\n */\n", "func_signal": "public Reflect set(String name, Object value) throws ReflectException", "code": "{\n    try {\n        Field field = field0(name);\n        if ((field.getModifiers() & Modifier.FINAL) == Modifier.FINAL) {\n            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n        }\n        field.set(object, unwrap(value));\n        return this;\n    }\n    catch (Exception e) {\n        throw new ReflectException(e);\n    }\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * execute a runnable on ui thread\n * @param runnable the runnable prepared to run\n * @param waitUtilDone if set true, the caller thread will wait until the specific runnable finished.\n */\n", "func_signal": "public static void runOnUiThread(Runnable runnable, boolean waitUtilDone)", "code": "{\n    if (Thread.currentThread() == Looper.getMainLooper().getThread()) {\n        runnable.run();\n        return;\n    }\n\n    CountDownLatch countDownLatch = null;\n    if (waitUtilDone) {\n        countDownLatch = new CountDownLatch(1);\n    }\n    Pair<Runnable, CountDownLatch> pair = new Pair<>(runnable, countDownLatch);\n    getHandler().obtainMessage(MESSAGE_RUN_ON_UITHREAD, pair).sendToTarget();\n    if (waitUtilDone) {\n        try {\n            countDownLatch.await();\n        } catch (InterruptedException e) {\n            Log.w(Constants.TAG, e);\n        }\n    }\n}", "path": "VirtualAPK/CoreLibrary/src/main/java/com/didi/virtualapk/utils/RunUtil.java", "commit_date": "2018-08-07 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n    if (obj instanceof Reflect) {\n        return object.equals(((Reflect) obj).get());\n    }\n    \n    return false;\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Load a class\n *\n * @see Class#forName(String)\n */\n", "func_signal": "private static Class<?> forName(String name) throws ReflectException", "code": "{\n    try {\n        return Class.forName(name);\n    }\n    catch (Exception e) {\n        throw new ReflectException(e);\n    }\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Cast an IBinder object into an IBookManager interface, generating a proxy\n * if needed.\n */\n", "func_signal": "public static IBookManager asInterface(IBinder obj)", "code": "{\n    if ((obj == null)) {\n        return null;\n    }\n    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n    if (((iin != null) && (iin instanceof IBookManager))) {\n        return ((IBookManager) iin);\n    }\n    return new BookManagerImpl.Proxy(obj);\n}", "path": "VirtualAPK/PluginDemo/app/src/main/java/com/didi/virtualapk/demo/manualbinder/BookManagerImpl.java", "commit_date": "2017-06-29 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * load a plugin into memory, then invoke it's Application.\n * @param apk the file of plugin, should end with .apk\n * @throws Exception\n */\n", "func_signal": "public void loadPlugin(File apk) throws Exception", "code": "{\n    if (null == apk) {\n        throw new IllegalArgumentException(\"error : apk is null.\");\n    }\n\n    if (!apk.exists()) {\n        // throw the FileNotFoundException by opening a stream.\n        InputStream in = new FileInputStream(apk);\n        in.close();\n    }\n\n    LoadedPlugin plugin = createLoadedPlugin(apk);\n    \n    if (null == plugin) {\n        throw new RuntimeException(\"Can't load plugin which is invalid: \" + apk.getAbsolutePath());\n    }\n    \n    this.mPlugins.put(plugin.getPackageName(), plugin);\n    synchronized (mCallbacks) {\n        for (int i = 0; i < mCallbacks.size(); i++) {\n            mCallbacks.get(i).onAddedLoadedPlugin(plugin);\n        }\n    }\n}", "path": "VirtualAPK/CoreLibrary/src/main/java/com/didi/virtualapk/PluginManager.java", "commit_date": "2018-08-10 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * used in PluginPackageManager, do not invoke it from outside.\n */\n", "func_signal": "@Deprecated\npublic List<ResolveInfo> queryIntentActivities(Intent intent, int flags)", "code": "{\n    List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();\n\n    for (LoadedPlugin plugin : this.mPlugins.values()) {\n        List<ResolveInfo> result = plugin.queryIntentActivities(intent, flags);\n        if (null != result && result.size() > 0) {\n            resolveInfos.addAll(result);\n        }\n    }\n\n    return resolveInfos;\n}", "path": "VirtualAPK/CoreLibrary/src/main/java/com/didi/virtualapk/PluginManager.java", "commit_date": "2018-08-10 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Get a wrapper type for a primitive type, or the argument type itself, if\n * it is not a primitive type.\n */\n", "func_signal": "public static Class<?> wrapper(Class<?> type)", "code": "{\n    if (type == null) {\n        return null;\n    }\n    else if (type.isPrimitive()) {\n        if (boolean.class == type) {\n            return Boolean.class;\n        }\n        else if (int.class == type) {\n            return Integer.class;\n        }\n        else if (long.class == type) {\n            return Long.class;\n        }\n        else if (short.class == type) {\n            return Short.class;\n        }\n        else if (byte.class == type) {\n            return Byte.class;\n        }\n        else if (double.class == type) {\n            return Double.class;\n        }\n        else if (float.class == type) {\n            return Float.class;\n        }\n        else if (char.class == type) {\n            return Character.class;\n        }\n        else if (void.class == type) {\n            return Void.class;\n        }\n    }\n    \n    return type;\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/Reflect.java", "commit_date": "2018-02-02 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Checks a file to make sure it should be packaged as standard resources.\n * @param fileName the name of the file (including extension)\n * @param extension the extension of the file (excluding '.')\n * @return true if the file should be packaged as standard java resources.\n */\n", "func_signal": "public static boolean checkFileForPackaging(\n    @NonNull String fileName,\n    @NonNull String extension)", "code": "{\n    // ignore hidden files and backup files\n    return !(fileName.charAt(0) == '.' || fileName.charAt(fileName.length() - 1) == '~') &&\n        !isOfNonResourcesExtensions(extension, false) &&\n        !isNotAResourceFile(fileName);\n}", "path": "VirtualAPK/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/utils/PackagingUtils.java", "commit_date": "2017-11-01 00:00:00", "repo_name": "didi/VirtualAPK", "stars": 8942, "license": "apache-2.0", "language": "java", "size": 1010}
{"docstring": "/**\n * Send leader message to all the instances to notify the new leader.\n *\n * @param currentId Instance ID of which sends this message.\n * @param leaderId  Leader message content.\n * @return {@code true} if the message is accepted.\n */\n", "func_signal": "@Override\npublic boolean sendLeaderMessage(int currentId, int leaderId)", "code": "{\n  var leaderMessage = new Message(MessageType.LEADER, String.valueOf(leaderId));\n  instanceMap.keySet()\n      .stream()\n      .filter((i) -> i != currentId)\n      .forEach((i) -> instanceMap.get(i).onMessage(leaderMessage));\n  return false;\n}", "path": "java-design-patterns/leader-election/src/main/java/com/iluwatar/leaderelection/bully/BullyMessageManager.java", "commit_date": "2020-03-22 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Add new server.\n */\n", "func_signal": "public final void addServer(Server server)", "code": "{\n  synchronized (SERVERS) {\n    SERVERS.add(server);\n  }\n\n}", "path": "java-design-patterns/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java", "commit_date": "2020-04-12 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Constructor.\n */\n", "func_signal": "public NodeImpl(String name, Node left, Node right)", "code": "{\n  this.name = name;\n  this.left = left;\n  this.right = right;\n}", "path": "java-design-patterns/null-object/src/main/java/com/iluwatar/nullobject/NodeImpl.java", "commit_date": "2019-11-12 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Main app method.\n *\n * @param args command line args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n  var wizard = new Wizard();\n  wizard.setHealth(45);\n  wizard.setAgility(7);\n  wizard.setWisdom(11);\n\n  var vm = new VirtualMachine();\n  vm.getWizards()[0] = wizard;\n\n  String literal = \"LITERAL 0\";\n\n  interpretInstruction(literal, vm);\n  interpretInstruction(literal, vm);\n  interpretInstruction(\"GET_HEALTH\", vm);\n  interpretInstruction(literal, vm);\n  interpretInstruction(\"GET_AGILITY\", vm);\n  interpretInstruction(literal, vm);\n  interpretInstruction(\"GET_WISDOM \", vm);\n  interpretInstruction(\"ADD\", vm);\n  interpretInstruction(\"LITERAL 2\", vm);\n  interpretInstruction(\"DIVIDE\", vm);\n  interpretInstruction(\"ADD\", vm);\n  interpretInstruction(\"SET_HEALTH\", vm);\n}", "path": "java-design-patterns/bytecode/src/main/java/com/iluwatar/bytecode/App.java", "commit_date": "2020-08-15 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/*\n * Typically used when the API declares some exception but cannot do so. Usually a\n * signature mistake.In this example out is not supposed to throw exception as it is a\n * ByteArrayOutputStream. So we utilize mute, which will throw AssertionError if unexpected\n * exception occurs.\n */\n", "func_signal": "private static void useOfMute()", "code": "{\n  var out = new ByteArrayOutputStream();\n  Mute.mute(() -> out.write(\"Hello\".getBytes()));\n}", "path": "java-design-patterns/mute-idiom/src/main/java/com/iluwatar/mute/App.java", "commit_date": "2020-04-12 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Send heartbeat invoke message to the next instance.\n *\n * @param currentId Instance ID of which sends this message.\n */\n", "func_signal": "@Override\npublic void sendHeartbeatInvokeMessage(int currentId)", "code": "{\n  var nextInstance = this.findNextInstance(currentId);\n  var heartbeatInvokeMessage = new Message(MessageType.HEARTBEAT_INVOKE, \"\");\n  nextInstance.onMessage(heartbeatInvokeMessage);\n}", "path": "java-design-patterns/leader-election/src/main/java/com/iluwatar/leaderelection/bully/BullyMessageManager.java", "commit_date": "2020-03-22 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Get the service from the cache. null if no service is found matching the name\n *\n * @param serviceName a string\n * @return {@link Service}\n */\n", "func_signal": "public Service getService(String serviceName)", "code": "{\n  if (serviceCache.containsKey(serviceName)) {\n    var cachedService = serviceCache.get(serviceName);\n    var name = cachedService.getName();\n    var id = cachedService.getId();\n    LOGGER.info(\"(cache call) Fetched service {}({}) from cache... !\", name, id);\n    return cachedService;\n  }\n  return null;\n}", "path": "java-design-patterns/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceCache.java", "commit_date": "2020-01-04 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Program entry point.\n *\n * @param args command line args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  var context = new AnnotationConfigApplicationContext(AppConfig.class);\n  var repository = context.getBean(PersonRepository.class);\n\n  var peter = new Person(\"Peter\", \"Sagan\", 17);\n  var nasta = new Person(\"Nasta\", \"Kuzminova\", 25);\n  var john = new Person(\"John\", \"lawrence\", 35);\n  var terry = new Person(\"Terry\", \"Law\", 36);\n\n  // Add new Person records\n  repository.save(peter);\n  repository.save(nasta);\n  repository.save(john);\n  repository.save(terry);\n\n  // Count Person records\n  LOGGER.info(\"Count Person records: {}\", repository.count());\n\n  // Print all records\n  var persons = (List<Person>) repository.findAll();\n  persons.stream().map(Person::toString).forEach(LOGGER::info);\n\n  // Update Person\n  nasta.setName(\"Barbora\");\n  nasta.setSurname(\"Spotakova\");\n  repository.save(nasta);\n\n  repository.findById(2L).ifPresent(p -> LOGGER.info(\"Find by id 2: {}\", p));\n\n  // Remove record from Person\n  repository.deleteById(2L);\n\n  // count records\n  LOGGER.info(\"Count Person records: {}\", repository.count());\n\n  // find by name\n  repository\n      .findOne(new PersonSpecifications.NameEqualSpec(\"John\"))\n      .ifPresent(p -> LOGGER.info(\"Find by John is {}\", p));\n\n  // find by age\n  persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));\n\n  LOGGER.info(\"Find Person with age between 20,40: \");\n  persons.stream().map(Person::toString).forEach(LOGGER::info);\n\n  context.close();\n\n}", "path": "java-design-patterns/repository/src/main/java/com/iluwatar/repository/AppConfig.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Find all the alive instances with smaller ID than current instance.\n *\n * @param currentId ID of current instance.\n * @return ID list of all the candidate instance.\n */\n", "func_signal": "private List<Integer> findElectionCandidateInstanceList(int currentId)", "code": "{\n  return instanceMap.keySet()\n      .stream()\n      .filter((i) -> i < currentId && instanceMap.get(i).isAlive())\n      .collect(Collectors.toList());\n}", "path": "java-design-patterns/leader-election/src/main/java/com/iluwatar/leaderelection/bully/BullyMessageManager.java", "commit_date": "2020-03-22 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Program entry point.\n *\n * @param args command line args.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n  useOfLoggedMute();\n\n  useOfMute();\n}", "path": "java-design-patterns/mute-idiom/src/main/java/com/iluwatar/mute/App.java", "commit_date": "2020-04-12 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Get instance.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T extends CustomerRole> Optional<T> instance()", "code": "{\n  var typeCst = this.typeCst;\n  try {\n    return (Optional<T>) Optional.of(typeCst.newInstance());\n  } catch (InstantiationException | IllegalAccessException e) {\n    logger.error(\"error creating an object\", e);\n  }\n  return Optional.empty();\n}", "path": "java-design-patterns/role-object/src/main/java/com/iluwatar/roleobject/Role.java", "commit_date": "2020-07-30 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Send election message to all the instances with smaller ID.\n *\n * @param currentId Instance ID of which sends this message.\n * @param content   Election message content.\n * @return {@code true} if no alive instance has smaller ID, so that the election is accepted.\n */\n", "func_signal": "@Override\npublic boolean sendElectionMessage(int currentId, String content)", "code": "{\n  var candidateList = findElectionCandidateInstanceList(currentId);\n  if (candidateList.isEmpty()) {\n    return true;\n  } else {\n    var electionMessage = new Message(MessageType.ELECTION_INVOKE, \"\");\n    candidateList.stream().forEach((i) -> instanceMap.get(i).onMessage(electionMessage));\n    return false;\n  }\n}", "path": "java-design-patterns/leader-election/src/main/java/com/iluwatar/leaderelection/bully/BullyMessageManager.java", "commit_date": "2020-03-22 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Constructor.\n */\n", "func_signal": "public Order(\n    String name, String contactNumber, String address,\n    String depositNumber, String order\n)", "code": "{\n  this.name = name;\n  this.contactNumber = contactNumber;\n  this.address = address;\n  this.depositNumber = depositNumber;\n  this.orderItem = order;\n}", "path": "java-design-patterns/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java", "commit_date": "2019-11-10 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Handle request.\n */\n", "func_signal": "public synchronized void serverRequest(Request request)", "code": "{\n  if (lastServedId >= SERVERS.size()) {\n    lastServedId = 0;\n  }\n  var server = SERVERS.get(lastServedId++);\n  server.serve(request);\n}", "path": "java-design-patterns/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java", "commit_date": "2020-04-12 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Properties for Jpa.\n */\n", "func_signal": "private static Properties jpaProperties()", "code": "{\n  var properties = new Properties();\n  properties.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.H2Dialect\");\n  properties.setProperty(\"hibernate.hbm2ddl.auto\", \"create-drop\");\n  return properties;\n}", "path": "java-design-patterns/repository/src/main/java/com/iluwatar/repository/AppConfig.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Mix the stew.\n */\n", "func_signal": "public void mix()", "code": "{\n  LOGGER\n      .info(\"Mixing the immutable stew we find: {} potatoes, {} carrots, {} meat and {} peppers\",\n          data.getNumPotatoes(), data.getNumCarrots(), data.getNumMeat(), data.getNumPeppers());\n}", "path": "java-design-patterns/private-class-data/src/main/java/com/iluwatar/privateclassdata/ImmutableStew.java", "commit_date": "2020-07-30 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Factory to create a especific instance of Entity Manager.\n */\n", "func_signal": "@Bean\npublic LocalContainerEntityManagerFactoryBean entityManagerFactory()", "code": "{\n  var entityManager = new LocalContainerEntityManagerFactoryBean();\n  entityManager.setDataSource(dataSource());\n  entityManager.setPackagesToScan(\"com.iluwatar\");\n  entityManager.setPersistenceProvider(new HibernatePersistenceProvider());\n  entityManager.setJpaProperties(jpaProperties());\n  return entityManager;\n}", "path": "java-design-patterns/repository/src/main/java/com/iluwatar/repository/AppConfig.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Program entry point.\n *\n * @param args command line args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  // stew is mutable\n  var stew = new Stew(1, 2, 3, 4);\n  stew.mix();\n  stew.taste();\n  stew.mix();\n\n  // immutable stew protected with Private Class Data pattern\n  var immutableStew = new ImmutableStew(2, 4, 3, 6);\n  immutableStew.mix();\n}", "path": "java-design-patterns/private-class-data/src/main/java/com/iluwatar/privateclassdata/App.java", "commit_date": "2020-01-16 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Get transaction manager.\n */\n", "func_signal": "@Bean\npublic JpaTransactionManager transactionManager()", "code": "{\n  var transactionManager = new JpaTransactionManager();\n  transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());\n  return transactionManager;\n}", "path": "java-design-patterns/repository/src/main/java/com/iluwatar/repository/AppConfig.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "/**\n * Send heartbeat message to current leader instance to check the health.\n *\n * @param leaderId leaderID\n * @return {@code true} if the leader is alive.\n */\n", "func_signal": "@Override\npublic boolean sendHeartbeatMessage(int leaderId)", "code": "{\n  var leaderInstance = instanceMap.get(leaderId);\n  var alive = leaderInstance.isAlive();\n  return alive;\n}", "path": "java-design-patterns/leader-election/src/main/java/com/iluwatar/leaderelection/bully/BullyMessageManager.java", "commit_date": "2020-03-22 00:00:00", "repo_name": "iluwatar/java-design-patterns", "stars": 85907, "license": "other", "language": "java", "size": 31726}
{"docstring": "// must not throw any error\n// must wait for everything to finish and only then exit\n", "func_signal": "private void stopApp()", "code": "{\n    Logging.info(this, \"Stopping SuperTokens...\");\n    try {\n        Webserver.getInstance(this).stop();\n        Cronjobs.shutdownAndAwaitTermination(this);\n        StorageLayer.getStorage(this).close();\n        if (this.shutdownHook != null) {\n            try {\n                Runtime.getRuntime().removeShutdownHook(this.shutdownHook);\n            } catch (IllegalStateException e) {\n                // we are shutting down already.. so doesn't matter\n            }\n        }\n        removeDotStartedFileForThisProcess();\n        Logging.stopLogging(this);\n        // uncomment this when you want to confirm that processes are actually shut.\n        // printRunningThreadNames();\n\n    } catch (Exception ignored) {\n\n    }\n}", "path": "supertokens-core/src/main/java/io/supertokens/Main.java", "commit_date": "2020-11-17 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// *  - set one valid, and one invalid API key and check error is thrown\n", "func_signal": "@Test\npublic void testSettingValidAndInvalidApiKeysAndErrorIsThrown() throws Exception", "code": "{\n    String[] args = {\"../\"};\n    String validKey = \"abdein30934=-DJNIigwe39\";\n    String invalidKey = \"%93*4=JN39\";\n\n    Utils.setValueInConfig(\"api_keys\", validKey + \",\" + invalidKey); // set api_keys\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    ProcessState.EventAndException event = process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.INIT_FAILURE);\n    assertNotNull(event);\n    assertEquals(event.exception.getMessage(),\n            \"One of the API keys is too short. Please use at least 20 characters\");\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// pass antiCsrfToken to disable csrf check for this request\n", "func_signal": "public static SessionInformationHolder getSession(Main main, @Nonnull String token, @Nullable String antiCsrfToken,\n                                                  boolean allowAntiCsrf)\n        throws StorageQueryException\n        , StorageTransactionLogicException,\n        TryRefreshTokenException, UnauthorisedException", "code": "{\n\n    AccessTokenInfo accessToken = AccessToken.getInfoFromAccessToken(main, token, allowAntiCsrf &&\n            Config.getConfig(main).getEnableAntiCSRF());\n\n    if (Config.getConfig(main).getEnableAntiCSRF() && allowAntiCsrf && (antiCsrfToken == null\n            || !antiCsrfToken.equals(accessToken.antiCsrfToken))) {\n        throw new TryRefreshTokenException(\"anti-csrf check failed\");\n    }\n\n    io.supertokens.pluginInterface.session.SessionInfo sessionInfoForBlacklisting = null;\n    if (Config.getConfig(main).getAccessTokenBlacklisting()) {\n        sessionInfoForBlacklisting = StorageLayer.getSessionStorage(main)\n                .getSession(accessToken.sessionHandle);\n        if (sessionInfoForBlacklisting == null) {\n            throw new UnauthorisedException(\"Either the session has ended or has been blacklisted\");\n        }\n    }\n\n    boolean JWTPayloadNeedsUpdating = sessionInfoForBlacklisting != null &&\n            !accessToken.userData.equals(sessionInfoForBlacklisting.userDataInJWT);\n    if (accessToken.parentRefreshTokenHash1 == null && !JWTPayloadNeedsUpdating) {\n        // this means that the refresh token associated with this access token is\n        // already the parent - and JWT payload doesn't need to be updated.\n        return new SessionInformationHolder(\n                new SessionInfo(accessToken.sessionHandle, accessToken.userId, accessToken.userData), null, null,\n                null, null);\n    }\n\n    ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.GET_SESSION_NEW_TOKENS, null);\n\n    if (StorageLayer.getSessionStorage(main).getType() == STORAGE_TYPE.SQL) {\n        SessionSQLStorage storage = (SessionSQLStorage) StorageLayer.getSessionStorage(main);\n        try {\n            return storage.startTransaction(con -> {\n                try {\n\n                    io.supertokens.pluginInterface.session.SessionInfo sessionInfo = storage\n                            .getSessionInfo_Transaction(con, accessToken.sessionHandle);\n\n                    if (sessionInfo == null) {\n                        storage.commitTransaction(con);\n                        throw new UnauthorisedException(\"Session missing in db\");\n                    }\n\n                    boolean promote = accessToken.parentRefreshTokenHash1 != null && sessionInfo.refreshTokenHash2\n                            .equals(Utils.hashSHA256(accessToken.parentRefreshTokenHash1));\n                    if (promote ||\n                            sessionInfo.refreshTokenHash2.equals(Utils.hashSHA256(accessToken.refreshTokenHash1)) ||\n                            JWTPayloadNeedsUpdating) {\n                        if (promote) {\n                            storage.updateSessionInfo_Transaction(con, accessToken.sessionHandle,\n                                    Utils.hashSHA256(accessToken.refreshTokenHash1),\n                                    System.currentTimeMillis() + Config.getConfig(main).getRefreshTokenValidity());\n                        }\n                        storage.commitTransaction(con);\n\n                        TokenInfo newAccessToken;\n                        if (AccessToken.getAccessTokenVersion(accessToken) == AccessToken.VERSION.V1) {\n                            newAccessToken = AccessToken.createNewAccessTokenV1(main,\n                                    accessToken.sessionHandle, accessToken.userId, accessToken.refreshTokenHash1,\n                                    null, sessionInfo.userDataInJWT, accessToken.antiCsrfToken);\n                        } else {\n                            assert accessToken.lmrt != null;\n                            newAccessToken = AccessToken.createNewAccessToken(main,\n                                    accessToken.sessionHandle, accessToken.userId, accessToken.refreshTokenHash1,\n                                    null, sessionInfo.userDataInJWT, accessToken.antiCsrfToken, accessToken.lmrt,\n                                    null);\n                        }\n\n                        return new SessionInformationHolder(\n                                new SessionInfo(accessToken.sessionHandle, accessToken.userId,\n                                        sessionInfo.userDataInJWT),\n                                new TokenInfo(newAccessToken.token, newAccessToken.expiry,\n                                        newAccessToken.createdTime), null, null, null);\n                    }\n\n                    storage.commitTransaction(con);\n                    return new SessionInformationHolder(\n                            new SessionInfo(accessToken.sessionHandle, accessToken.userId, accessToken.userData),\n                            // here we purposely use accessToken.userData instead of sessionInfo.userDataInJWT\n                            // because we are not returning a new access token\n                            null, null,\n                            null, null);\n                } catch (UnauthorisedException | NoSuchAlgorithmException | UnsupportedEncodingException |\n                        InvalidKeyException | InvalidKeySpecException | SignatureException e) {\n                    throw new StorageTransactionLogicException(e);\n                }\n            });\n        } catch (StorageTransactionLogicException e) {\n            if (e.actualException instanceof UnauthorisedException) {\n                throw (UnauthorisedException) e.actualException;\n            }\n            throw e;\n        }\n    } else if (StorageLayer.getSessionStorage(main).getType() == STORAGE_TYPE.NOSQL_1) {\n        SessionNoSQLStorage_1 storage = (SessionNoSQLStorage_1) StorageLayer.getSessionStorage(main);\n        while (true) {\n            try {\n\n                io.supertokens.pluginInterface.session.noSqlStorage.SessionInfoWithLastUpdated sessionInfo = storage\n                        .getSessionInfo_Transaction(accessToken.sessionHandle);\n\n                if (sessionInfo == null) {\n                    throw new UnauthorisedException(\"Session missing in db\");\n                }\n\n                boolean promote = accessToken.parentRefreshTokenHash1 != null && sessionInfo.refreshTokenHash2\n                        .equals(Utils.hashSHA256(accessToken.parentRefreshTokenHash1));\n                if (promote ||\n                        sessionInfo.refreshTokenHash2.equals(Utils.hashSHA256(accessToken.refreshTokenHash1)) ||\n                        JWTPayloadNeedsUpdating) {\n                    if (promote) {\n                        boolean success = storage.updateSessionInfo_Transaction(accessToken.sessionHandle,\n                                Utils.hashSHA256(accessToken.refreshTokenHash1),\n                                System.currentTimeMillis() + Config.getConfig(main).getRefreshTokenValidity(),\n                                sessionInfo.lastUpdatedSign);\n                        if (!success) {\n                            continue;\n                        }\n                    }\n\n                    TokenInfo newAccessToken;\n                    if (AccessToken.getAccessTokenVersion(accessToken) == AccessToken.VERSION.V1) {\n                        newAccessToken = AccessToken.createNewAccessTokenV1(main,\n                                accessToken.sessionHandle, accessToken.userId, accessToken.refreshTokenHash1,\n                                null, sessionInfo.userDataInJWT, accessToken.antiCsrfToken);\n                    } else {\n                        assert accessToken.lmrt != null;\n                        newAccessToken = AccessToken.createNewAccessToken(main,\n                                accessToken.sessionHandle, accessToken.userId, accessToken.refreshTokenHash1,\n                                null, sessionInfo.userDataInJWT, accessToken.antiCsrfToken, accessToken.lmrt,\n                                null);\n                    }\n\n                    return new SessionInformationHolder(\n                            new SessionInfo(accessToken.sessionHandle, accessToken.userId,\n                                    sessionInfo.userDataInJWT),\n                            new TokenInfo(newAccessToken.token, newAccessToken.expiry,\n                                    newAccessToken.createdTime), null, null, null);\n                }\n\n                return new SessionInformationHolder(\n                        new SessionInfo(accessToken.sessionHandle, accessToken.userId, accessToken.userData),\n                        // here we purposely use accessToken.userData instead of sessionInfo.userDataInJWT\n                        // because we are not returning a new access token\n                        null, null,\n                        null, null);\n            } catch (NoSuchAlgorithmException | UnsupportedEncodingException |\n                    InvalidKeyException | InvalidKeySpecException | SignatureException e) {\n                throw new StorageTransactionLogicException(e);\n            }\n        }\n    } else {\n        throw new UnsupportedOperationException(\"\");\n    }\n}", "path": "supertokens-core/src/main/java/io/supertokens/session/Session.java", "commit_date": "2020-11-17 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// * - Give no version and makes sure it treats it as the latest\n", "func_signal": "@Test\npublic void testNoVersionGiven() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    TestingProcess process = TestingProcessManager.start(args);\n    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STARTED));\n\n    Webserver.getInstance(process.getProcess()).addAPI(new WebserverAPI(process.getProcess()) {\n        private static final long serialVersionUID = 2132771458741821984L;\n\n        @Override\n        public String getPath() {\n            return \"/defaultVersion\";\n        }\n\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n                throws IOException, ServletException {\n            sendTextResponse(200, super.getVersionFromRequest(req), resp);\n        }\n    });\n\n    String response = io.supertokens.test.httpRequest.HttpRequest\n            .sendGETRequest(process.getProcess(), \"\", \"http://localhost:3567/defaultVersion\", null, 1000, 1000,\n                    null, null);\n    assertEquals(response, Utils.getCdiVersionLatestForTests());\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/WebserverTest.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "//*  - set API key and check that config.getAPIKeys() does not return null\n", "func_signal": "@Test\npublic void testGetApiKeysDoesNotReturnNullWhenAPIKeyIsSet() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    Utils.setValueInConfig(\"api_keys\", \"abctijenbogweg=-2438243u98\"); // set api_keys\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));\n\n    String[] apiKeys = Config.getConfig(process.getProcess()).getAPIKeys();\n    assertNotNull(apiKeys);\n    assertEquals(apiKeys.length, 1);\n    assertEquals(apiKeys[0], \"abctijenbogweg=-2438243u98\");\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// args: true [--path <path location>] --> via installer is true\n// args: false <installation path> <command> <...command args>\n", "func_signal": "private static void start(String[] args)", "code": "{\n    boolean viaInstaller = Boolean.parseBoolean(args[0]);\n    String installationDir;\n    String command;\n    String[] options;\n\n    if (viaInstaller) {\n        installationDir = \"ignored\";\n        command = \"install\";\n        options = java.util.Arrays.stream(args, 1, args.length)\n                .toArray(String[]::new);\n    } else {\n        installationDir = args[1];\n\n        if (args.length == 2) {\n            args = new String[]{args[0], args[1], \"--help\"};\n        }\n\n        command = args[2];\n        options = java.util.Arrays.stream(args, 3, args.length)\n                .toArray(String[]::new);\n    }\n\n    initCommandHandlers();\n    if (commandHandler.containsKey(command)) {\n        CommandHandler handler = commandHandler.get(command);\n        if (handler != null) {\n            handler.handleCommand(installationDir, viaInstaller, options);\n        }\n    } else {\n        throw new QuitProgramException(\"Unknown command '\" + command +\n                \"'. Please use \\\"supertokens --help\\\" to see the list of available commands\", null);\n    }\n}", "path": "supertokens-core/cli/src/main/java/io/supertokens/cli/Main.java", "commit_date": "2020-09-09 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// different CPI arguments failure and pass cases\n", "func_signal": "@Test\npublic void cli0ArgsTest() throws TestingProcessManagerException, InterruptedException", "code": "{\n    String[] args = {};\n    TestingProcess process = TestingProcessManager.start(args);\n    EventAndException e = process.checkOrWaitForEvent(PROCESS_STATE.INIT_FAILURE);\n    assertTrue(e != null && e.exception.getMessage()\n            .equals(\"Please provide installation path location for SuperTokens\"));\n    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));\n    process.kill();\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/CLIOptionsTest.java", "commit_date": "2020-11-04 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// NOTE: this value will be fixed depending on operating system being used.. it\n// will be passed from the CLI\n", "func_signal": "public String getInstallationPath()", "code": "{\n    if (installationPath.endsWith(\"/\")) {\n        return installationPath;\n    } else {\n        return installationPath + \"/\";\n    }\n}", "path": "supertokens-core/src/main/java/io/supertokens/cliOptions/CLIOptions.java", "commit_date": "2020-08-10 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// *  - set API key and check that you can still call /config and /hello without it\n", "func_signal": "@Test\npublic void testSettingAPIKeyAndCallingConfigAndHelloWithoutIt() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    String apiKey = \"hg40239oirjgBHD9450=Beew123-\";\n    Utils.setValueInConfig(\"api_keys\", apiKey); // set api_keys\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));\n\n    String response = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/hello\", null,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests());\n    assertEquals(response, \"Hello\");\n\n    // map to store pid as parameter\n    Map<String, String> map = new HashMap<>();\n    map.put(\"pid\", ProcessHandle.current().pid() + \"\");\n    JsonObject response2 = HttpRequest\n            .sendGETRequest(process.getProcess(), \"\", \"http://localhost:3567/config\", map, 1000, 1000, null,\n                    Utils.getCdiVersionLatestForTests());\n\n\n    File f = new File(CLIOptions.get(process.getProcess()).getInstallationPath() + \"config.yaml\");\n    String path = f.getAbsolutePath();\n\n    assertEquals(response2.get(\"status\").getAsString(), \"OK\");\n    assertEquals(response2.get(\"path\").getAsString(), path);\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "/*\n * Quesiton: If the incoming access token is expired, do we throw try refresh token error and not update the db?\n * We should update in database, in SDK session object and not throw an error, nor set any cookie. This is\n * because, the user has already verified the session for this API. If it has expired, the refresh API will be\n * called, and the new JWT info will be set in the token then.\n *\n * Quesiton: If the incoming session has been revoked, do we throw an unauthorised error?\n * Yes. It's important that the user knows that this has happened.\n *\n * Quesiton: If this regenerates session tokens, while another API revokes it, then how will that work?\n * This is OK since the other API will cause a clearing of idRefreshToken and this will not set that. This means\n * that next API call, only the access token will go and that will not pass. In fact, it will be removed.\n *\n *\n * */\n", "func_signal": "public static SessionInformationHolder regenerateToken(Main main, @Nonnull String token,\n                                                       @Nullable JsonObject userDataInJWT)\n        throws StorageQueryException\n        , StorageTransactionLogicException, UnauthorisedException, InvalidKeySpecException, SignatureException,\n        NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException", "code": "{\n\n    // We assume the token has already been verified at this point. It may be expired or JWT signing key may have\n    // changed for it...\n    AccessTokenInfo accessToken = AccessToken.getInfoFromAccessTokenWithoutVerifying(token);\n\n    JsonObject newJWTUserPayload =\n            userDataInJWT == null ? getJWTData(main, accessToken.sessionHandle) : userDataInJWT;\n    long lmrt = System.currentTimeMillis();\n\n    updateSession(main, accessToken.sessionHandle, null, newJWTUserPayload, lmrt);\n\n    // if the above succeeds but the below fails, it's OK since the client will get server error and will try\n    // again. In this case, the JWT data will be updated again since the API will get the old JWT. In case there\n    // is a refresh call, the new JWT will get the new data.\n    if (accessToken.expiryTime < System.currentTimeMillis()) {\n        // in this case, we set the should not set the access token in the response since they will have to call\n        // the refresh API anyway.\n        return new SessionInformationHolder(\n                new SessionInfo(accessToken.sessionHandle, accessToken.userId,\n                        newJWTUserPayload),\n                null, null, null, null);\n    }\n\n    TokenInfo newAccessToken = AccessToken.createNewAccessToken(main,\n            accessToken.sessionHandle, accessToken.userId, accessToken.refreshTokenHash1,\n            accessToken.parentRefreshTokenHash1, newJWTUserPayload, accessToken.antiCsrfToken, lmrt,\n            accessToken.expiryTime);\n\n    return new SessionInformationHolder(\n            new SessionInfo(accessToken.sessionHandle, accessToken.userId,\n                    newJWTUserPayload),\n            new TokenInfo(newAccessToken.token, newAccessToken.expiry,\n                    newAccessToken.createdTime), null, null, null);\n}", "path": "supertokens-core/src/main/java/io/supertokens/session/Session.java", "commit_date": "2020-11-17 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// TODO: figure out some other way to solve this problem. It is used to not show\n//  illegal access warning in Tomcat\n", "func_signal": "private void suppressIllegalAccessWarning()", "code": "{\n    try {\n        Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");\n        theUnsafe.setAccessible(true);\n        Unsafe u = (Unsafe) theUnsafe.get(null);\n\n        Class<?> cls = Class.forName(\"jdk.internal.module.IllegalAccessLogger\");\n        Field logger = cls.getDeclaredField(\"logger\");\n        u.putObjectVolatile(cls, u.staticFieldOffset(logger), null);\n    } catch (Exception ignored) {\n    }\n}", "path": "supertokens-core/src/main/java/io/supertokens/Main.java", "commit_date": "2020-11-17 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// *  - set an invalid API key and check that an error is thrown.\n", "func_signal": "@Test\npublic void testErrorIsThrownWhenInvalidApiKeyIsSet() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    //api key length less that minimum length 20\n    Utils.setValueInConfig(\"api_keys\", \"abc\"); // set api_keys\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    ProcessState.EventAndException event = process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.INIT_FAILURE);\n    assertNotNull(event);\n    assertEquals(event.exception.getMessage(),\n            \"One of the API keys is too short. Please use at least 20 characters\");\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n\n    Utils.reset();\n\n    // setting api key with non-supported symbols\n    Utils.setValueInConfig(\"api_keys\", \"abC&^0t4t3t40t4@#%greognr\"); // set api_keys\n    process = TestingProcessManager.start(args);\n\n    event = process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.INIT_FAILURE);\n    assertNotNull(event);\n    assertEquals(event.exception.getMessage(),\n            \"Invalid characters in API key. Please only use '=', '-' and alpha-numeric (including capitals)\");\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "/**\n * Reads given resource file as a string.\n *\n * @param fileName path to the resource file\n * @return the file's contents\n * @throws IOException if read fails for any reason\n */\n", "func_signal": "private String getResourceFileAsString(String fileName) throws IOException", "code": "{\n    try (InputStream is = this.getClass().getResourceAsStream(fileName)) {\n        if (is == null) {\n            Logging.error(\"Failed to load resource named \" + fileName);\n            return null;\n        }\n        try (InputStreamReader isr = new InputStreamReader(is);\n             BufferedReader reader = new BufferedReader(isr)) {\n            return reader.lines().collect(Collectors.joining(System.lineSeparator()));\n        }\n    }\n}", "path": "supertokens-core/cli/src/main/java/io/supertokens/cli/commandHandler/install/InstallHandler.java", "commit_date": "2020-10-08 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// - set API key like \" key1, key2 , key3,key4 \" and check that each of the keys work (the spaces are important)\n// *  - set API key and check that request with \" key \", \" key\" and \"key\" work\n", "func_signal": "@Test\npublic void testSettingMultipleAPIKeysWithSpacing() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    String apiKey1 = \"hg40239oirjgBHD9450=Beew123-1\";\n    String apiKey2 = \"hg40239oirjgBHD9450=Beew123-2\";\n    String apiKey3 = \"hg40239oirjgBHD9450=Beew123-3\";\n    String apiKey4 = \"hg40239oirjgBHD9450=Beew123-4\";\n\n\n    Utils.setValueInConfig(\"api_keys\",\n            \" \" + apiKey1 + \", \" + apiKey2 + \", \" + apiKey3 + \",\" + apiKey4); // set api_keys\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));\n\n\n    String userId = \"userId\";\n    JsonObject userDataInJWT = new JsonObject();\n    userDataInJWT.addProperty(\"key\", \"value\");\n    JsonObject userDataInDatabase = new JsonObject();\n    userDataInDatabase.addProperty(\"key\", \"value\");\n\n    JsonObject request = new JsonObject();\n    request.addProperty(\"userId\", userId);\n    request.add(\"userDataInJWT\", userDataInJWT);\n    request.add(\"userDataInDatabase\", userDataInDatabase);\n\n    // check that any one of the keys can be used\n    JsonObject sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), \" \" + apiKey1 + \" \");\n\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n    sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), \" \" + apiKey2);\n\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n\n    sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), apiKey3);\n\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n    sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), apiKey4);\n\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "/**\n * Decrypts text by given key\n *\n * @param encdata   - base64 encoded input data\n * @param masterkey - key used to decrypt\n * @return String decrypted (original) text\n */\n", "func_signal": "public static String decrypt(String encdata, String masterkey) throws NoSuchAlgorithmException,\n        InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException,\n        IllegalBlockSizeException, BadPaddingException", "code": "{\n\n    // Wrap the data into a byte buffer to ease the reading process\n    Decoder decoder = Base64.getDecoder();\n    ByteBuffer byteBuffer = ByteBuffer.wrap(decoder.decode(encdata));\n\n    byte[] iv = new byte[12];\n    byteBuffer.get(iv);\n\n    // Prepare your key/password\n    SecretKey secretKey = new SecretKeySpec(Utils.pbkdf2(masterkey.toCharArray(), iv, 100, 32 * 8), \"AES\");\n\n    // get the rest of encrypted data\n    byte[] cipherBytes = new byte[byteBuffer.remaining()];\n    byteBuffer.get(cipherBytes);\n\n    Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n    GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);\n\n    // Encryption mode on!\n    cipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);\n\n    // Encrypt the data\n    return new String(cipher.doFinal(cipherBytes));\n}", "path": "supertokens-core/src/main/java/io/supertokens/utils/Utils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// *  - don't set API key and check that config.getAPIKeys() returns null\n", "func_signal": "@Test\npublic void testGetApiKeysReturnsNullWhenAPIKeyIsNotSet() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));\n    assertNull(Config.getConfig(process.getProcess()).getAPIKeys());\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "//  * - set a valid API key (with small and capital letter, numbers, =, -) and check that creating a new session\n//     * requires that key (send request without key and it should fail with 401 and proper message, and then send\n//     * with key and it should succeed and then send with wrong key and check it fails).\n", "func_signal": "@Test\npublic void testCreatingSessionWithAndWithoutAPIKey() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    String apiKey = \"hg40239oirjgBHD9450=Beew123-\";\n    Utils.setValueInConfig(\"api_keys\", apiKey); // set api_keys\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));\n\n\n    String userId = \"userId\";\n    JsonObject userDataInJWT = new JsonObject();\n    userDataInJWT.addProperty(\"key\", \"value\");\n    JsonObject userDataInDatabase = new JsonObject();\n    userDataInDatabase.addProperty(\"key\", \"value\");\n\n    JsonObject request = new JsonObject();\n    request.addProperty(\"userId\", userId);\n    request.add(\"userDataInJWT\", userDataInJWT);\n    request.add(\"userDataInDatabase\", userDataInDatabase);\n\n    try {\n        HttpRequest\n                .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                        1000,\n                        1000, null, Utils.getCdiVersionLatestForTests(), null);\n        fail();\n    } catch (io.supertokens.test.httpRequest.HttpResponseException e) {\n        assertTrue(e.statusCode == 401 &&\n                e.getMessage().equals(\"Http error. Status Code: 401. Message: Invalid API key\"));\n    }\n\n    JsonObject sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), apiKey);\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n    try {\n        HttpRequest\n                .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                        1000,\n                        1000, null, Utils.getCdiVersionLatestForTests(), \"abd#%034t0g4in40t40v0j\");\n        fail();\n    } catch (io.supertokens.test.httpRequest.HttpResponseException e) {\n        assertTrue(e.statusCode == 401 &&\n                e.getMessage().equals(\"Http error. Status Code: 401. Message: Invalid API key\"));\n    }\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// returns the location of the installation dir where SuperTokens needs to be installed.\n", "func_signal": "private String getToInstallDir(String[] args)", "code": "{\n    String installationDir = CLIOptionsParser.parseOption(\"--path\", args);\n    installationDir = installationDir == null ? getDefaultInstallationDir() : installationDir;\n    if (OperatingSystem.getOS() == OperatingSystem.OS.WINDOWS) {\n        if (!installationDir.endsWith(\"\\\\\")) {\n            installationDir += \"\\\\\";\n        }\n    } else {\n        if (!installationDir.endsWith(\"/\")) {\n            installationDir += \"/\";\n        }\n    }\n    return installationDir;\n}", "path": "supertokens-core/cli/src/main/java/io/supertokens/cli/commandHandler/install/InstallHandler.java", "commit_date": "2020-10-08 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// TODO: device fingerprint - store hash of this in JWT.\n", "func_signal": "private static AccessTokenInfo getInfoFromAccessToken(@Nonnull Main main, @Nonnull String token, boolean retry,\n                                                      boolean doAntiCsrfCheck)\n        throws StorageQueryException, StorageTransactionLogicException, TryRefreshTokenException", "code": "{\n\n    Utils.PubPriKey signingKey = AccessTokenSigningKey.getInstance(main).getKey();\n    try {\n        final JWT.JWTInfo jwtInfo;\n        try {\n            jwtInfo = JWT.verifyJWTAndGetPayload(token, signingKey.publicKey);\n        } catch (InvalidKeyException | NoSuchAlgorithmException | JWTException e) {\n            if (retry) {\n                ProcessState.getInstance(main).addState(PROCESS_STATE.RETRYING_ACCESS_TOKEN_JWT_VERIFICATION, e);\n\n                // remove key from memory and retry\n                AccessTokenSigningKey.getInstance(main).removeKeyFromMemory();\n                return AccessToken.getInfoFromAccessToken(main, token, false, doAntiCsrfCheck);\n            } else {\n                throw e;\n            }\n        }\n        AccessTokenInfo tokenInfo = new Gson().fromJson(jwtInfo.payload, AccessTokenInfo.class);\n        if (jwtInfo.version == VERSION.V1) {\n            if (tokenInfo.sessionHandle == null || tokenInfo.userId == null || tokenInfo.refreshTokenHash1 == null\n                    || tokenInfo.userData == null\n                    || (doAntiCsrfCheck && tokenInfo.antiCsrfToken == null)) {\n                throw new TryRefreshTokenException(\n                        \"Access token does not contain all the information. Maybe the structure has changed?\");\n            }\n        } else {\n            if (tokenInfo.sessionHandle == null || tokenInfo.userId == null || tokenInfo.refreshTokenHash1 == null\n                    || tokenInfo.userData == null || tokenInfo.lmrt == null\n                    || (doAntiCsrfCheck && tokenInfo.antiCsrfToken == null)) {\n                throw new TryRefreshTokenException(\n                        \"Access token does not contain all the information. Maybe the structure has changed?\");\n            }\n        }\n        if (tokenInfo.expiryTime < System.currentTimeMillis()) {\n            throw new TryRefreshTokenException(\"Access token expired\");\n        }\n\n        return tokenInfo;\n    } catch (InvalidKeyException | NoSuchAlgorithmException | JWTException e) {\n        throw new TryRefreshTokenException(e);\n    }\n\n}", "path": "supertokens-core/src/main/java/io/supertokens/session/accessToken/AccessToken.java", "commit_date": "2020-10-19 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "// *  - set 3 API keys and check that any one of them can be used. Then check that if you give no key or give wrong\n// *      key, it fails\n", "func_signal": "@Test\npublic void testSettingMultipleAPIKeys() throws Exception", "code": "{\n    String[] args = {\"../\"};\n\n    String apiKey1 = \"hg40239oirjgBHD9450=Beew123-1\";\n    String apiKey2 = \"hg40239oirjgBHD9450=Beew123-2\";\n    String apiKey3 = \"hg40239oirjgBHD9450=Beew123-3\";\n\n    Utils.setValueInConfig(\"api_keys\", apiKey1 + \",\" + apiKey2 + \",\" + apiKey3); // set api_keys\n\n    TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));\n\n\n    String userId = \"userId\";\n    JsonObject userDataInJWT = new JsonObject();\n    userDataInJWT.addProperty(\"key\", \"value\");\n    JsonObject userDataInDatabase = new JsonObject();\n    userDataInDatabase.addProperty(\"key\", \"value\");\n\n    JsonObject request = new JsonObject();\n    request.addProperty(\"userId\", userId);\n    request.add(\"userDataInJWT\", userDataInJWT);\n    request.add(\"userDataInDatabase\", userDataInDatabase);\n\n    // check that any one of the keys can be used\n    JsonObject sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), apiKey1);\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n    sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), apiKey2);\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n\n    sessionInfo = HttpRequest\n            .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                    1000,\n                    1000, null, Utils.getCdiVersionLatestForTests(), apiKey3);\n    assertEquals(sessionInfo.get(\"status\").getAsString(), \"OK\");\n    checkSessionResponse(sessionInfo, process, userId, userDataInJWT);\n\n\n    // sending request with no api key\n    try {\n        HttpRequest\n                .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                        1000,\n                        1000, null, Utils.getCdiVersionLatestForTests(), null);\n        fail();\n    } catch (io.supertokens.test.httpRequest.HttpResponseException e) {\n        assertTrue(e.statusCode == 401 &&\n                e.getMessage().equals(\"Http error. Status Code: 401. Message: Invalid API key\"));\n    }\n\n    // sending request with invalid api key\n    try {\n        HttpRequest\n                .sendJsonPOSTRequest(process.getProcess(), \"\", \"http://localhost:3567/recipe/session\", request,\n                        1000,\n                        1000, null, Utils.getCdiVersionLatestForTests(), \"abd#%034t0g4in40t40v0j\");\n        fail();\n    } catch (io.supertokens.test.httpRequest.HttpResponseException e) {\n        assertTrue(e.statusCode == 401 &&\n                e.getMessage().equals(\"Http error. Status Code: 401. Message: Invalid API key\"));\n    }\n\n    process.kill();\n    assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));\n}", "path": "supertokens-core/src/test/java/io/supertokens/test/APIKeysTest.java", "commit_date": "2020-10-24 00:00:00", "repo_name": "supertokens/supertokens-core", "stars": 11327, "license": "other", "language": "java", "size": 38585}
{"docstring": "/**\n * <code>string file = 4;</code>\n */\n", "func_signal": "public java.lang.String getFile()", "code": "{\n  java.lang.Object ref = \"\";\n  if (filePresentCase_ == 4) {\n    ref = filePresent_;\n  }\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String) ref;\n  } else {\n    com.google.protobuf.ByteString bs = \n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    if (filePresentCase_ == 4) {\n      filePresent_ = s;\n    }\n    return s;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>int32 version = 2;</code>\n */\n", "func_signal": "public Builder setVersion(int value)", "code": "{\n  versionPresentCase_ = 2;\n  versionPresent_ = value;\n  onChanged();\n  return this;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>string action = 2;</code>\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getActionBytes()", "code": "{\n  java.lang.Object ref = action_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    action_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * if something like compression is not supported, erorr_message will tell about it.\n * </pre>\n *\n * <code>string message = 2;</code>\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getMessageBytes()", "code": "{\n  java.lang.Object ref = message_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    message_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * in seconds\n * </pre>\n *\n * <code>int32 net_write_timeout = 4;</code>\n */\n", "func_signal": "public int getNetWriteTimeout()", "code": "{\n  if (netWriteTimeoutPresentCase_ == 4) {\n    return (java.lang.Integer) netWriteTimeoutPresent_;\n  }\n  return 0;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>string destination = 3;</code>\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getDestinationBytes()", "code": "{\n  java.lang.Object ref = \"\";\n  if (destinationPresentCase_ == 3) {\n    ref = destinationPresent_;\n  }\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    if (destinationPresentCase_ == 3) {\n      destinationPresent_ = b;\n    }\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * check/start/stop/restart/list\n * </pre>\n *\n * <code>string action = 1;</code>\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getActionBytes()", "code": "{\n  java.lang.Object ref = action_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    action_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * if something like compression is not supported, erorr_message will tell about it.\n * </pre>\n *\n * <code>string message = 2;</code>\n */\n", "func_signal": "public java.lang.String getMessage()", "code": "{\n  java.lang.Object ref = message_;\n  if (!(ref instanceof java.lang.String)) {\n    com.google.protobuf.ByteString bs =\n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    message_ = s;\n    return s;\n  } else {\n    return (java.lang.String) ref;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * \u9ed8\u8ba4tail 100\u884c\uff0c\u6700\u5927\u4e0d\u8d85\u8fc74MB\n * </pre>\n *\n * <code>int32 count = 5;</code>\n */\n", "func_signal": "public int getCount()", "code": "{\n  if (countPresentCase_ == 5) {\n    return (java.lang.Integer) countPresent_;\n  }\n  return 0;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * if something like compression is not supported, erorr_message will tell about it.\n * </pre>\n *\n * <code>string message = 2;</code>\n */\n", "func_signal": "public java.lang.String getMessage()", "code": "{\n  java.lang.Object ref = message_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String) ref;\n  } else {\n    com.google.protobuf.ByteString bs = \n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    message_ = s;\n    return s;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * check/start/stop/reload\n * </pre>\n *\n * <code>string action = 2;</code>\n */\n", "func_signal": "public Builder clearAction()", "code": "{\n  \n  action_ = getDefaultInstance().getAction();\n  onChanged();\n  return this;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>int32 code = 1;</code>\n */\n", "func_signal": "public int getCode()", "code": "{\n  if (errorCodePresentCase_ == 1) {\n    return (java.lang.Integer) errorCodePresent_;\n  }\n  return 0;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>int32 version = 2;</code>\n */\n", "func_signal": "public int getVersion()", "code": "{\n  if (versionPresentCase_ == 2) {\n    return (java.lang.Integer) versionPresent_;\n  }\n  return 0;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>.com.alibaba.otter.canal.protocol.PacketType type = 3;</code>\n */\n", "func_signal": "public Builder setType(com.alibaba.otter.canal.protocol.AdminPacket.PacketType value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  \n  type_ = value.getNumber();\n  onChanged();\n  return this;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>int32 code = 1;</code>\n */\n", "func_signal": "public Builder clearCode()", "code": "{\n  if (errorCodePresentCase_ == 1) {\n    errorCodePresentCase_ = 0;\n    errorCodePresent_ = null;\n    onChanged();\n  }\n  return this;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>string username = 1;</code>\n */\n", "func_signal": "public Builder setUsernameBytes(\n    com.google.protobuf.ByteString value)", "code": "{\n  if (value == null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  \n  username_ = value;\n  onChanged();\n  return this;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * check/start/stop/reload\n * </pre>\n *\n * <code>string action = 2;</code>\n */\n", "func_signal": "public java.lang.String getAction()", "code": "{\n  java.lang.Object ref = action_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String) ref;\n  } else {\n    com.google.protobuf.ByteString bs = \n        (com.google.protobuf.ByteString) ref;\n    java.lang.String s = bs.toStringUtf8();\n    action_ = s;\n    return s;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * check/start/stop/restart/list\n * </pre>\n *\n * <code>string action = 1;</code>\n */\n", "func_signal": "public com.google.protobuf.ByteString\n    getActionBytes()", "code": "{\n  java.lang.Object ref = action_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b = \n        com.google.protobuf.ByteString.copyFromUtf8(\n            (java.lang.String) ref);\n    action_ = b;\n    return b;\n  } else {\n    return (com.google.protobuf.ByteString) ref;\n  }\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <pre>\n * in seconds\n * </pre>\n *\n * <code>int32 net_read_timeout = 3;</code>\n */\n", "func_signal": "public Builder setNetReadTimeout(int value)", "code": "{\n  netReadTimeoutPresentCase_ = 3;\n  netReadTimeoutPresent_ = value;\n  onChanged();\n  return this;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * <code>int32 code = 1;</code>\n */\n", "func_signal": "public Builder setCode(int value)", "code": "{\n  errorCodePresentCase_ = 1;\n  errorCodePresent_ = value;\n  onChanged();\n  return this;\n}", "path": "canal/protocol/src/main/java/com/alibaba/otter/canal/protocol/AdminPacket.java", "commit_date": "2019-08-26 00:00:00", "repo_name": "alibaba/canal", "stars": 27470, "license": "apache-2.0", "language": "java", "size": 18452}
{"docstring": "/**\n * If CloseGuard is enabled, logs a warning if the caller did not\n * properly cleanup by calling an explicit close method\n * before finalization. If CloseGuard is disabled, no action is\n * performed.\n */\n", "func_signal": "public void warnIfOpen()", "code": "{\n    if (allocationSite == null || !sENABLED) {\n        return;\n    }\n\n    String message =\n        (\"A resource was acquired at attached stack trace but never released. \"\n            + \"See java.io.Closeable for information on avoiding resource leaks.\");\n\n    sREPORTER.report(message, allocationSite);\n}", "path": "matrix/matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/MatrixCloseGuard.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Check if current runtime is 64bit.\n *\n * @return\n *   True if current runtime is 64bit abi. Otherwise return false instead.\n */\n", "func_signal": "public static boolean is64BitRuntime()", "code": "{\n    final String currRuntimeABI = Build.CPU_ABI;\n    return \"arm64-v8a\".equalsIgnoreCase(currRuntimeABI)\n            || \"x86_64\".equalsIgnoreCase(currRuntimeABI)\n            || \"mips64\".equalsIgnoreCase(currRuntimeABI);\n}", "path": "matrix/matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/DeviceUtil.java", "commit_date": "2020-08-21 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Copy {@code srcFile} to {@code destFile}.\n *\n * @param src\n *  Source file.\n * @param dest\n *  Destination file.\n *\n * @throws IOException\n */\n", "func_signal": "public static void copyFile(File src, File dest) throws IOException", "code": "{\n    if (!dest.exists()) {\n        dest.getParentFile().mkdirs();\n    }\n    Files.copy(src.toPath(), dest.toPath(),\n            StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);\n}", "path": "matrix/matrix/matrix-android/matrix-commons/src/main/java/com/tencent/matrix/javalib/util/IOUtil.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Close {@code target} quietly.\n *\n * @param obj\n *  Object to be closed.\n */\n", "func_signal": "public static void closeQuietly(Object obj)", "code": "{\n    if (obj == null) {\n        return;\n    }\n    if (obj instanceof Closeable) {\n        try {\n            ((Closeable) obj).close();\n        } catch (Throwable ignored) {\n            // ignore\n        }\n    } else if (obj instanceof AutoCloseable) {\n        try {\n            ((AutoCloseable) obj).close();\n        } catch (Throwable ignored) {\n            // ignore\n        }\n    } else if (obj instanceof ZipFile) {\n        try {\n            ((ZipFile) obj).close();\n        } catch (Throwable ignored) {\n            // ignore\n        }\n    } else {\n        throw new IllegalArgumentException(\"obj \" + obj + \" is not closeable\");\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-commons/src/main/java/com/tencent/matrix/javalib/util/IOUtil.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Like {@link #enqueueWork(Context, Class, int, Intent)}, but supplies a ComponentName\n * for the service to interact with instead of its class.\n *\n * @param context Context this is being called from.\n * @param component The published ComponentName of the class this work should be\n * dispatched to.\n * @param jobId A unique job ID for scheduling; must be the same value for all work\n * enqueued for the same class.\n * @param work The Intent of work to enqueue.\n */\n", "func_signal": "public static void enqueueWork(@NonNull Context context, @NonNull ComponentName component,\n                               int jobId, @NonNull Intent work)", "code": "{\n    if (work == null) {\n        throw new IllegalArgumentException(\"work must not be null\");\n    }\n    synchronized (sLock) {\n        WorkEnqueuer we = getWorkEnqueuer(context, component, true, jobId);\n        we.ensureJobId(jobId);\n        we.enqueueWork(work);\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/MatrixJobIntentService.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Copy data in {@code is} to {@code os} <b>without</b> closing any of these streams.\n *\n * @param is\n *  Data source.\n * @param os\n *  Data destination.\n * @param buffer\n *  Buffer used to temporarily hold copying data, if {@code null} is passed, a new buffer\n *  will be created in each invocation of this method.\n *\n * @throws IOException\n */\n", "func_signal": "public static void copyStream(InputStream is, OutputStream os, byte[] buffer) throws IOException", "code": "{\n    if (buffer == null || buffer.length == 0) {\n        buffer = new byte[4096];\n    }\n    int bytesCopied;\n    while ((bytesCopied = is.read(buffer)) >= 0) {\n        os.write(buffer, 0, bytesCopied);\n    }\n    os.flush();\n}", "path": "matrix/matrix/matrix-android/matrix-commons/src/main/java/com/tencent/matrix/javalib/util/IOUtil.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Used to replace default Reporter used to warn of CloseGuard\n * violations. Must be non-null.\n */\n", "func_signal": "public static void setReporter(Reporter reporter)", "code": "{\n    if (reporter == null) {\n        throw new NullPointerException(\"reporter == null\");\n    }\n    sREPORTER = reporter;\n}", "path": "matrix/matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/MatrixCloseGuard.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Closes the given {@code Closeable}. Suppresses any IO exceptions.\n */\n", "func_signal": "public static void closeQuietly(Closeable closeable)", "code": "{\n    try {\n        if (closeable != null) {\n            closeable.close();\n        }\n    } catch (IOException e) {\n        Log.w(TAG, \"Failed to close resource\", e);\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixUtil.java", "commit_date": "2020-05-18 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * If CloseGuard is enabled, {@code open} initializes the instance\n * with a warning that the caller should have explicitly called the\n * {@code closer} method instead of relying on finalization.\n *\n * @param closer non-null name of explicit termination method\n * @throws NullPointerException if closer is null, regardless of\n *                              whether or not CloseGuard is enabled\n */\n", "func_signal": "public void open(String closer)", "code": "{\n    // always perform the check for valid API usage...\n    if (closer == null) {\n        throw new NullPointerException(\"closer == null\");\n    }\n    // ...but avoid allocating an allocationSite if disabled\n    if (this == NOOP || !sENABLED) {\n        return;\n    }\n    String message = \"Explicit termination method '\" + closer + \"' not called\";\n    allocationSite = new Throwable(message);\n}", "path": "matrix/matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/MatrixCloseGuard.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * In Android P, ViewLocationHolder has an mRoot field that is not cleared in its clear() method.\n * Introduced in https://github.com/aosp-mirror/platform_frameworks_base/commit\n * /86b326012813f09d8f1de7d6d26c986a909d\n *\n * This leaks triggers very often when accessibility is on. To fix this leak we need to clear\n * the ViewGroup.ViewLocationHolder.sPool pool. Unfortunately Android P prevents accessing that\n * field through reflection. So instead, we call [ViewGroup#addChildrenForAccessibility] with\n * a view group that has 32 children (32 being the pool size), which as result fills in the pool\n * with 32 dumb views that reference a dummy context instead of an activity context.\n *\n * This fix empties the pool on every activity destroy and every AndroidX fragment view destroy.\n * You can support other cases where views get detached by calling directly\n * [ViewLocationHolderLeakFix.clearStaticPool].\n */\n", "func_signal": "public static void fixViewLocationHolderLeakApi28(Context destContext)", "code": "{\n    if (Build.VERSION.SDK_INT != Build.VERSION_CODES.P) {\n        return;\n    }\n\n    try {\n        Context application = destContext.getApplicationContext();\n        if (sGroupAndOutChildren == null) {\n            ViewGroup sViewGroup = new FrameLayout(application);\n            // ViewLocationHolder.MAX_POOL_SIZE = 32\n            for (int i = 0; i < 32; i++) {\n                View childView = new View(application);\n                sViewGroup.addView(childView);\n            }\n            sGroupAndOutChildren = new Pair<>(sViewGroup, new ArrayList<View>());\n        }\n\n        sGroupAndOutChildren.first.addChildrenForAccessibility(sGroupAndOutChildren.second);\n    } catch (Throwable e) {\n        MatrixLog.printErrStackTrace(TAG, e, \"fixViewLocationHolderLeakApi28 err\");\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ActivityLeakFixer.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "//return in KB\n", "func_signal": "public static long getAvailMemory(Context context)", "code": "{\n    Runtime runtime = Runtime.getRuntime();\n    return runtime.freeMemory() / 1024;   //in KB\n}", "path": "matrix/matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/DeviceUtil.java", "commit_date": "2020-08-21 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Mostly new insert rowid is one more than the largest ROWID currently in use\n * @return\n */\n", "func_signal": "public static long getLastRowId()", "code": "{\n    String querySql = String.format(\"SELECT rowid FROM %s order by rowid desc limit 1\", TABLE_NAME);\n    Cursor cursor = SQLiteLintDbHelper.INSTANCE.getDatabase().rawQuery(querySql, null);\n    try {\n        if (cursor != null && cursor.getCount() > 0) {\n            cursor.moveToFirst();\n            return cursor.getLong(0);\n        }\n\n        return -1;\n    } finally {\n        cursor.close();\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-sqlite-lint/matrix-sqlite-lint-android-sdk/src/full/java/com/tencent/sqlitelint/behaviour/persistence/IssueStorage.java", "commit_date": "2019-05-28 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * add process name cache\n *\n * @param context\n * @return\n */\n", "func_signal": "public static String getProcessName(final Context context)", "code": "{\n    if (processName != null) {\n        return processName;\n    }\n    //will not null\n    processName = getProcessNameInternal(context);\n    return processName;\n}", "path": "matrix/matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/MatrixUtil.java", "commit_date": "2020-05-18 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Judge if {@code input} is a real zip or jar file.\n * For handling special case in Wechat plugin that generates a path list by writing paths\n * into a file whose name ends with {@code PathUtil.DOT_JAR}\n *\n * @param input\n *  File to judge with.\n *\n * @return\n *  true - if input is a real zip or jar file.\n *  false - if input is not a real zip or jar file.\n */\n", "func_signal": "public static boolean isRealZipOrJar(File input)", "code": "{\n    ZipFile zf = null;\n    try {\n        zf = new ZipFile(input);\n        return true;\n    } catch (Exception e) {\n        return false;\n    } finally {\n        IOUtil.closeQuietly(zf);\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-commons/src/main/java/com/tencent/matrix/javalib/util/IOUtil.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Dequeue some work.\n */\n", "func_signal": "@Override\npublic MatrixJobIntentService.GenericWorkItem dequeueWork()", "code": "{\n    JobWorkItem work;\n    synchronized (mLock) {\n        if (mParams == null) {\n            return null;\n        }\n        try {\n            work = mParams.dequeueWork();\n        } catch (Throwable thr) {\n            MatrixLog.printErrStackTrace(TAG, thr, \"exception occurred.\");\n            return null;\n        }\n    }\n    if (work != null && work.getIntent() != null) {\n        work.getIntent().setExtrasClassLoader(mService.getClassLoader());\n        return new WrapperWorkItem(work);\n    } else {\n        return null;\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/MatrixJobIntentService.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * asynchronous call may be crash\n * @param view\n */\n", "func_signal": "private static void cleanContextOfView(View view)", "code": "{\n    try {\n        final Field mContextField = View.class.getDeclaredField(\"mContext\");\n        mContextField.setAccessible(true);\n        mContextField.set(view, null);\n    } catch (Throwable ignored) {\n        // Ignored.\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ActivityLeakFixer.java", "commit_date": "2020-12-04 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Returns a CloseGuard instance. If CloseGuard is enabled, {@code\n * #open(String)} can be used to set up the instance to warn on\n * failure to close. If CloseGuard is disabled, a non-null no-op\n * instance is returned.\n */\n", "func_signal": "public static MatrixCloseGuard get()", "code": "{\n    if (!sENABLED) {\n        return NOOP;\n    }\n    return new MatrixCloseGuard();\n}", "path": "matrix/matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/detect/MatrixCloseGuard.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Returns the IBinder for the {@link android.app.job.JobServiceEngine} when\n * running as a JobService on O and later platforms.\n */\n", "func_signal": "@Override\npublic IBinder onBind(@NonNull Intent intent)", "code": "{\n    if (mJobImpl != null) {\n        return mJobImpl.compatGetBinder();\n    } else {\n        return null;\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/MatrixJobIntentService.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Default empty constructor.\n */\n", "func_signal": "public MatrixJobIntentService()", "code": "{\n    if (Build.VERSION.SDK_INT >= 26) {\n        mCompatQueue = null;\n    } else {\n        mCompatQueue = new ArrayList<>();\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/MatrixJobIntentService.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Processes start commands when running as a pre-O service, enqueueing them to be\n * later dispatched in {@link #onHandleWork(Intent)}.\n */\n", "func_signal": "@Override\npublic int onStartCommand(@Nullable Intent intent, int flags, int startId)", "code": "{\n    if (mCompatQueue != null) {\n        mCompatWorkEnqueuer.serviceStartReceived();\n        synchronized (mCompatQueue) {\n            mCompatQueue.add(new CompatWorkItem(intent != null ? intent : new Intent(),\n                    startId));\n            ensureProcessorRunningLocked(true);\n        }\n        return START_REDELIVER_INTENT;\n    } else {\n        return START_NOT_STICKY;\n    }\n}", "path": "matrix/matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/MatrixJobIntentService.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "Tencent/matrix", "stars": 11328, "license": "other", "language": "java", "size": 199709}
{"docstring": "/**\n * Create tabs for each of the current sketch's files, removing any existing\n * tabs.\n */\n", "func_signal": "public void createTabs()", "code": "{\n  tabs.clear();\n  currentTabIndex = -1;\n  tabs.ensureCapacity(sketch.getCodeCount());\n  for (SketchFile file : sketch.getFiles()) {\n    try {\n      addTab(file, null);\n    } catch(IOException e) {\n      // TODO: Improve / move error handling\n      System.err.println(e);\n    }\n  }\n  selectTab(0);\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Check if the sketch is modified and ask user to save changes.\n * @return false if canceling the close/quit operation\n */\n", "func_signal": "protected boolean checkModified()", "code": "{\n  if (!sketch.isModified())\n    return true;\n\n  // As of Processing 1.0.10, this always happens immediately.\n  // http://dev.processing.org/bugs/show_bug.cgi?id=1456\n\n  toFront();\n\n  String prompt = I18n.format(tr(\"Save changes to \\\"{0}\\\"?  \"),\n                              sketch.getName());\n\n  if (!OSUtils.hasMacOSStyleMenus()) {\n    int result =\n      JOptionPane.showConfirmDialog(this, prompt, tr(\"Close\"),\n                                    JOptionPane.YES_NO_CANCEL_OPTION,\n                                    JOptionPane.QUESTION_MESSAGE);\n\n    switch (result) {\n      case JOptionPane.YES_OPTION:\n        return handleSave(true);\n      case JOptionPane.NO_OPTION:\n        return true;  // ok to continue\n      case JOptionPane.CANCEL_OPTION:\n      case JOptionPane.CLOSED_OPTION:  // Escape key pressed\n        return false;\n      default:\n        throw new IllegalStateException();\n    }\n\n  } else {\n    // This code is disabled unless Java 1.5 is being used on Mac OS X\n    // because of a Java bug that prevents the initial value of the\n    // dialog from being set properly (at least on my MacBook Pro).\n    // The bug causes the \"Don't Save\" option to be the highlighted,\n    // blinking, default. This sucks. But I'll tell you what doesn't\n    // suck--workarounds for the Mac and Apple's snobby attitude about it!\n    // I think it's nifty that they treat their developers like dirt.\n\n    JOptionPane pane =\n      new JOptionPane(tr(\"<html> \" +\n                        \"<head> <style type=\\\"text/css\\\">\"+\n                        \"b { font: 13pt \\\"Lucida Grande\\\" }\"+\n                        \"p { font: 11pt \\\"Lucida Grande\\\"; margin-top: 8px }\"+\n                        \"</style> </head>\" +\n                        \"<b>Do you want to save changes to this sketch<BR>\" +\n                        \" before closing?</b>\" +\n                        \"<p>If you don't save, your changes will be lost.\"),\n                      JOptionPane.QUESTION_MESSAGE);\n\n    String[] options = new String[] {\n      tr(\"Save\"), tr(\"Cancel\"), tr(\"Don't Save\")\n    };\n    pane.setOptions(options);\n\n    // highlight the safest option ala apple hig\n    pane.setInitialValue(options[0]);\n\n    JDialog dialog = pane.createDialog(this, null);\n    dialog.setVisible(true);\n\n    Object result = pane.getValue();\n    if (result == options[0]) {  // save (and close/quit)\n      return handleSave(true);\n    } else {\n      return result == options[2];\n    }\n  }\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Like newJMenuItem() but adds shift as a modifier for the key command.\n */\n// Control + Shift + K seems to not be working on linux (Xubuntu 17.04, 2017-08-19)\n", "func_signal": "static public JMenuItem newJMenuItemShift(String title, int what)", "code": "{\n  JMenuItem menuItem = new JMenuItem(title);\n  menuItem.setAccelerator(KeyStroke.getKeyStroke(what, SHORTCUT_KEY_MASK | ActionEvent.SHIFT_MASK));\n  return menuItem;\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Finds the index of the tab showing the given file. Matches the file against\n * EditorTab.getSketchFile().getFile() using equals.\n *\n * @returns The index of the tab for the given file, or -1 if no such tab was\n *          found.\n */\n", "func_signal": "public int findTabIndex(final File file)", "code": "{\n  for (int i = 0; i < tabs.size(); ++i) {\n    if (tabs.get(i).getSketchFile().getFile().equals(file))\n      return i;\n  }\n  return -1;\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Finds the index of the tab showing the given file. Matches the file against\n * EditorTab.getSketchFile() using ==.\n *\n * @returns The index of the tab for the given file, or -1 if no such tab was\n *          found.\n */\n", "func_signal": "public int findTabIndex(final SketchFile file)", "code": "{\n  for (int i = 0; i < tabs.size(); ++i) {\n    if (tabs.get(i).getSketchFile() == file)\n      return i;\n  }\n  return -1;\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Handler for File &rarr; Print.\n */\n", "func_signal": "private void handlePrint()", "code": "{\n  statusNotice(tr(\"Printing...\"));\n  //printerJob = null;\n  PrinterJob printerJob = PrinterJob.getPrinterJob();\n  if (pageFormat != null) {\n    //System.out.println(\"setting page format \" + pageFormat);\n    printerJob.setPrintable(getCurrentTab().getTextArea(), pageFormat);\n  } else {\n    printerJob.setPrintable(getCurrentTab().getTextArea());\n  }\n  // set the name of the job to the code name\n  printerJob.setJobName(getCurrentTab().getSketchFile().getPrettyName());\n\n  if (printerJob.printDialog()) {\n    try {\n      printerJob.print();\n      statusNotice(tr(\"Done printing.\"));\n\n    } catch (PrinterException pe) {\n      statusError(tr(\"Error while printing.\"));\n      pe.printStackTrace();\n    }\n  } else {\n    statusNotice(tr(\"Printing canceled.\"));\n  }\n  //printerJob = null;  // clear this out?\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Show an error int the status bar.\n */\n", "func_signal": "public void statusError(String what)", "code": "{\n  System.err.println(what);\n  status.error(what);\n  //new Exception(\"deactivating RUN\").printStackTrace();\n  toolbar.deactivateRun();\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Called by Sketch &rarr; Export.\n * Handles calling the export() function on sketch, and\n * queues all the gui status stuff that comes along with it.\n * <p/>\n * Made synchronized to (hopefully) avoid problems of people\n * hitting export twice, quickly, and horking things up.\n */\n/**\n * Handles calling the export() function on sketch, and\n * queues all the gui status stuff that comes along with it.\n *\n * Made synchronized to (hopefully) avoid problems of people\n * hitting export twice, quickly, and horking things up.\n */\n", "func_signal": "synchronized public void handleExport(final boolean usingProgrammer)", "code": "{\n  if (PreferencesData.getBoolean(\"editor.save_on_verify\")) {\n    if (sketch.isModified() && !sketchController.isReadOnly()) {\n      handleSave(true);\n    }\n  }\n  toolbar.activateExport();\n  console.clear();\n  status.progress(tr(\"Uploading to I/O Board...\"));\n\n  avoidMultipleOperations = true;\n\n  new Thread(timeoutUploadHandler).start();\n  new Thread(usingProgrammer ? uploadUsingProgrammerHandler : uploadHandler).start();\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "// these will be done in a more generic way soon, more like:\n// setHandler(\"action name\", Runnable);\n// but for the time being, working out the kinks of how many things to\n// abstract from the editor in this fashion.\n", "func_signal": "private void resetHandlers()", "code": "{\n  runHandler = new BuildHandler();\n  presentHandler = new BuildHandler(true);\n  runAndSaveHandler = new BuildHandler(false, true);\n  presentAndSaveHandler = new BuildHandler(true, true);\n  uploadHandler = new UploadHandler();\n  uploadHandler.setUsingProgrammer(false);\n  uploadUsingProgrammerHandler = new UploadHandler();\n  uploadUsingProgrammerHandler.setUsingProgrammer(true);\n  timeoutUploadHandler = new TimeoutUploadHandler();\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "// added for 1.0.5\n// http://dev.processing.org/bugs/show_bug.cgi?id=1260\n", "func_signal": "public void windowDeactivated(WindowEvent e)", "code": "{\n  List<Component> toolsMenuItemsToRemove = new LinkedList<>();\n  for (Component menuItem : toolsMenu.getMenuComponents()) {\n    if (menuItem instanceof JComponent) {\n      Object removeOnWindowDeactivation = ((JComponent) menuItem).getClientProperty(\"removeOnWindowDeactivation\");\n      if (removeOnWindowDeactivation != null && Boolean.valueOf(removeOnWindowDeactivation.toString())) {\n        toolsMenuItemsToRemove.add(menuItem);\n      }\n    }\n  }\n  for (Component menuItem : toolsMenuItemsToRemove) {\n    toolsMenu.remove(menuItem);\n  }\n  toolsMenu.remove(portMenu);\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * A software engineer, somewhere, needs to have his abstraction\n * taken away. In some countries they jail or beat people for writing\n * the sort of API that would require a five line helper function\n * just to set the command key for a menu item.\n */\n", "func_signal": "static public JMenuItem newJMenuItem(String title, int what)", "code": "{\n  JMenuItem menuItem = new JMenuItem(title);\n  menuItem.setAccelerator(KeyStroke.getKeyStroke(what, SHORTCUT_KEY_MASK));\n  return menuItem;\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Show an exception in the editor status bar.\n */\n", "func_signal": "public void statusError(Exception e)", "code": "{\n  e.printStackTrace();\n//    if (e == null) {\n//      System.err.println(\"Editor.statusError() was passed a null exception.\");\n//      return;\n//    }\n\n  if (e instanceof RunnerException) {\n    RunnerException re = (RunnerException) e;\n    if (re.hasCodeFile()) {\n      selectTab(findTabIndex(re.getCodeFile()));\n    }\n    if (re.hasCodeLine()) {\n      int line = re.getCodeLine();\n      // subtract one from the end so that the \\n ain't included\n      if (line >= getCurrentTab().getTextArea().getLineCount()) {\n        // The error is at the end of this current chunk of code,\n        // so the last line needs to be selected.\n        line = getCurrentTab().getTextArea().getLineCount() - 1;\n        if (getCurrentTab().getLineText(line).length() == 0) {\n          // The last line may be zero length, meaning nothing to select.\n          // If so, back up one more line.\n          line--;\n        }\n      }\n      if (line < 0 || line >= getCurrentTab().getTextArea().getLineCount()) {\n        System.err.println(I18n.format(tr(\"Bad error line: {0}\"), line));\n      } else {\n        try {\n          addLineHighlight(line);\n        } catch (BadLocationException e1) {\n          e1.printStackTrace();\n        }\n      }\n    }\n  }\n\n  // Since this will catch all Exception types, spend some time figuring\n  // out which kind and try to give a better error message to the user.\n  String mess = e.getMessage();\n  if (mess != null) {\n    String javaLang = \"java.lang.\";\n    if (mess.indexOf(javaLang) == 0) {\n      mess = mess.substring(javaLang.length());\n    }\n    String rxString = \"RuntimeException: \";\n    if (mess.indexOf(rxString) == 0) {\n      mess = mess.substring(rxString.length());\n    }\n    statusError(mess);\n  }\n//    e.printStackTrace();\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n/**\n * Change the currently displayed tab.\n * Note that the GUI might not update immediately, since this needs\n * to run in the Event dispatch thread.\n * @param index The index of the tab to select\n */\n", "func_signal": "public void selectTab(final int index)", "code": "{\n  currentTabIndex = index;\n  updateUndoRedoState();\n  updateTitle();\n  header.rebuild();\n  getCurrentTab().activated();\n\n  // This must be run in the GUI thread\n  SwingUtilities.invokeLater(() -> {\n    codePanel.removeAll();\n    codePanel.add(tabs.get(index), BorderLayout.CENTER);\n    tabs.get(index).requestFocusInWindow(); // get the caret blinking\n    // For some reason, these are needed. Revalidate says it should be\n    // automatically called when components are added or removed, but without\n    // it, the component switched to is not displayed. repaint() is needed to\n    // clear the entire text area of any previous text.\n    codePanel.revalidate();\n    codePanel.repaint();\n  });\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Implements Sketch &rarr; Stop, or pressing Stop on the toolbar.\n */\n", "func_signal": "private void handleStop()", "code": "{  // called by menu or buttons\n//    toolbar.activate(EditorToolbar.STOP);\n\n  toolbar.deactivateRun();\n//    toolbar.deactivate(EditorToolbar.STOP);\n\n  // focus the PDE again after quitting presentation mode [toxi 030903]\n  toFront();\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Read and apply new values from the preferences, either because\n * the app is just starting up, or the user just finished messing\n * with things in the Preferences window.\n */\n", "func_signal": "public void applyPreferences()", "code": "{\n  boolean external = PreferencesData.getBoolean(\"editor.external\");\n  saveMenuItem.setEnabled(!external);\n  saveAsMenuItem.setEnabled(!external);\n  for (EditorTab tab: tabs) {\n    tab.applyPreferences();\n  }\n  console.applyPreferences();\n  if (serialMonitor != null) {\n    serialMonitor.applyPreferences();\n  }\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Handler for File &rarr; Page Setup.\n */\n", "func_signal": "private void handlePageSetup()", "code": "{\n  PrinterJob printerJob = PrinterJob.getPrinterJob();\n  if (pageFormat == null) {\n    pageFormat = printerJob.defaultPage();\n  }\n  pageFormat = printerJob.pageDialog(pageFormat);\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Add a new tab.\n *\n * @param file\n *          The file to show in the tab.\n * @param contents\n *          The contents to show in the tab, or null to load the contents from\n *          the given file.\n * @throws IOException\n */\n", "func_signal": "protected void addTab(SketchFile file, String contents) throws IOException", "code": "{\n  EditorTab tab = new EditorTab(this, file, contents);\n  tab.getTextArea().getDocument()\n      .addDocumentListener(new DocumentTextChangeListener(\n          () -> updateUndoRedoState()));\n  tabs.add(tab);\n  reorderTabs();\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Same as newJMenuItem(), but adds the ALT (on Linux and Windows)\n * or OPTION (on Mac OS X) key as a modifier.\n */\n", "func_signal": "private static JMenuItem newJMenuItemAlt(String title, int what)", "code": "{\n  JMenuItem menuItem = new JMenuItem(title);\n  menuItem.setAccelerator(KeyStroke.getKeyStroke(what, SHORTCUT_ALT_KEY_MASK));\n  return menuItem;\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Actually handle the save command. If 'immediately' is set to false,\n * this will happen in another thread so that the message area\n * will update and the save button will stay highlighted while the\n * save is happening. If 'immediately' is true, then it will happen\n * immediately. This is used during a quit, because invokeLater()\n * won't run properly while a quit is happening. This fixes\n * <A HREF=\"http://dev.processing.org/bugs/show_bug.cgi?id=276\">Bug 276</A>.\n */\n", "func_signal": "public boolean handleSave(boolean immediately)", "code": "{\n  //stopRunner();\n  handleStop();  // 0136\n  removeAllLineHighlights();\n\n  if (untitled) {\n    return handleSaveAs();\n    // need to get the name, user might also cancel here\n\n  } else if (immediately) {\n    return handleSave2();\n\n  } else {\n    SwingUtilities.invokeLater(new Runnable() {\n        public void run() {\n          handleSave2();\n        }\n      });\n  }\n  return true;\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "/**\n * Second stage of open, occurs after having checked to see if the\n * modifications (if any) to the previous sketch need to be saved.\n */\n", "func_signal": "protected boolean handleOpenInternal(File sketchFile)", "code": "{\n  // check to make sure that this .pde file is\n  // in a folder of the same name\n  String fileName = sketchFile.getName();\n\n  File file = Sketch.checkSketchFile(sketchFile);\n\n  if (file == null) {\n    if (!fileName.endsWith(\".ino\") && !fileName.endsWith(\".pde\")) {\n\n      Base.showWarning(tr(\"Bad file selected\"), tr(\"Arduino can only open its own sketches\\n\" +\n        \"and other files ending in .ino or .pde\"), null);\n      return false;\n\n    } else {\n      String properParent = fileName.substring(0, fileName.length() - 4);\n\n      Object[] options = {tr(\"OK\"), tr(\"Cancel\")};\n      String prompt = I18n.format(tr(\"The file \\\"{0}\\\" needs to be inside\\n\" +\n          \"a sketch folder named \\\"{1}\\\".\\n\" +\n          \"Create this folder, move the file, and continue?\"),\n        fileName,\n        properParent);\n\n      int result = JOptionPane.showOptionDialog(this, prompt, tr(\"Moving\"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);\n\n      if (result != JOptionPane.YES_OPTION) {\n        return false;\n      }\n\n      // create properly named folder\n      File properFolder = new File(sketchFile.getParent(), properParent);\n      if (properFolder.exists()) {\n        Base.showWarning(tr(\"Error\"), I18n.format(tr(\"A folder named \\\"{0}\\\" already exists. \" +\n          \"Can't open sketch.\"), properParent), null);\n        return false;\n      }\n      if (!properFolder.mkdirs()) {\n        //throw new IOException(\"Couldn't create sketch folder\");\n        Base.showWarning(tr(\"Error\"), tr(\"Could not create the sketch folder.\"), null);\n        return false;\n      }\n      // copy the sketch inside\n      File properPdeFile = new File(properFolder, sketchFile.getName());\n      try {\n        Base.copyFile(sketchFile, properPdeFile);\n      } catch (IOException e) {\n        Base.showWarning(tr(\"Error\"), tr(\"Could not copy to a proper location.\"), e);\n        return false;\n      }\n\n      // remove the original file, so user doesn't get confused\n      sketchFile.delete();\n\n      // update with the new path\n      file = properPdeFile;\n\n    }\n  }\n\n  try {\n    sketch = new Sketch(file);\n  } catch (IOException e) {\n    Base.showWarning(tr(\"Error\"), tr(\"Could not create the sketch.\"), e);\n    return false;\n  }\n  sketchController = new SketchController(this, sketch);\n  createTabs();\n\n  // Disable untitled setting from previous document, if any\n  untitled = false;\n\n  // opening was successful\n  return true;\n}", "path": "Arduino/app/src/processing/app/Editor.java", "commit_date": "2020-03-25 00:00:00", "repo_name": "arduino/Arduino", "stars": 13947, "license": "other", "language": "java", "size": 1387854}
{"docstring": "// Returns true when one of the rows already contains all the pairs\n", "func_signal": "private static boolean isPartialRow(Iterable<ExpandedPair> pairs, Iterable<ExpandedRow> rows)", "code": "{\n  for (ExpandedRow r : rows) {\n    boolean allFound = true;\n    for (ExpandedPair p : pairs) {\n      boolean found = false;\n      for (ExpandedPair pp : r.getPairs()) {\n        if (p.equals(pp)) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        allFound = false;\n        break;\n      }\n    }\n    if (allFound) {\n      // the row 'r' contain all the pairs from 'pairs'\n      return true;\n    }\n  }\n  return false;\n}", "path": "zxing/core/src/main/java/com/google/zxing/oned/rss/expanded/RSSExpandedReader.java", "commit_date": "2020-09-06 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * <p>Decodes given set of received codewords, which include both data and error-correction\n * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,\n * in the input.</p>\n *\n * @param received data and error-correction codewords\n * @param twoS number of error-correction codewords available\n * @throws ReedSolomonException if decoding fails for any reason\n */\n", "func_signal": "public void decode(int[] received, int twoS) throws ReedSolomonException", "code": "{\n  GenericGFPoly poly = new GenericGFPoly(field, received);\n  int[] syndromeCoefficients = new int[twoS];\n  boolean noError = true;\n  for (int i = 0; i < twoS; i++) {\n    int eval = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));\n    syndromeCoefficients[syndromeCoefficients.length - 1 - i] = eval;\n    if (eval != 0) {\n      noError = false;\n    }\n  }\n  if (noError) {\n    return;\n  }\n  GenericGFPoly syndrome = new GenericGFPoly(field, syndromeCoefficients);\n  GenericGFPoly[] sigmaOmega =\n      runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);\n  GenericGFPoly sigma = sigmaOmega[0];\n  GenericGFPoly omega = sigmaOmega[1];\n  int[] errorLocations = findErrorLocations(sigma);\n  int[] errorMagnitudes = findErrorMagnitudes(omega, errorLocations);\n  for (int i = 0; i < errorLocations.length; i++) {\n    int position = received.length - 1 - field.log(errorLocations[i]);\n    if (position < 0) {\n      throw new ReedSolomonException(\"Bad error location\");\n    }\n    received[position] = GenericGF.addOrSubtract(received[position], errorMagnitudes[i]);\n  }\n}", "path": "zxing/core/src/main/java/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java", "commit_date": "2017-05-14 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "// Treat all UPC and EAN variants as UPCs, in the sense that they are all product barcodes.\n", "func_signal": "@Override\npublic ProductParsedResult parse(Result result)", "code": "{\n  BarcodeFormat format = result.getBarcodeFormat();\n  if (!(format == BarcodeFormat.UPC_A || format == BarcodeFormat.UPC_E ||\n        format == BarcodeFormat.EAN_8 || format == BarcodeFormat.EAN_13)) {\n    return null;\n  }\n  String rawText = getMassagedText(result);\n  if (!isStringOfDigits(rawText, rawText.length())) {\n    return null;\n  }\n  // Not actually checking the checksum again here    \n\n  String normalizedProductID;\n  // Expand UPC-E for purposes of searching\n  if (format == BarcodeFormat.UPC_E && rawText.length() == 8) {\n    normalizedProductID = UPCEReader.convertUPCEtoUPCA(rawText);\n  } else {\n    normalizedProductID = rawText;\n  }\n\n  return new ProductParsedResult(rawText, normalizedProductID);\n}", "path": "zxing/core/src/main/java/com/google/zxing/client/result/ProductResultParser.java", "commit_date": "2014-01-23 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * @param bytes bytes encoding a string, whose encoding should be guessed\n * @param hints decode hints if applicable\n * @return name of guessed encoding; at the moment will only guess one of:\n *  \"SJIS\", \"UTF8\", \"ISO8859_1\", or the platform default encoding if none\n *  of these can possibly be correct\n */\n", "func_signal": "public static String guessEncoding(byte[] bytes, Map<DecodeHintType,?> hints)", "code": "{\n    Charset c = guessCharset(bytes, hints);\n    if (c == SHIFT_JIS_CHARSET) {\n        return \"SJIS\";\n    } else if (c == StandardCharsets.UTF_8) {\n        return \"UTF8\";\n    } else if (c == StandardCharsets.ISO_8859_1) {\n        return \"ISO8859_1\";\n    }\n    return c.name();\n}", "path": "zxing/core/src/main/java/com/google/zxing/common/StringUtils.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * <p>Detects a Data Matrix Code in an image.</p>\n *\n * @return {@link DetectorResult} encapsulating results of detecting a Data Matrix Code\n * @throws NotFoundException if no Data Matrix Code can be found\n */\n", "func_signal": "public DetectorResult detect() throws NotFoundException", "code": "{\n\n  ResultPoint[] cornerPoints = rectangleDetector.detect();\n\n  ResultPoint[] points = detectSolid1(cornerPoints);\n  points = detectSolid2(points);\n  points[3] = correctTopRight(points);\n  if (points[3] == null) {\n    throw NotFoundException.getNotFoundInstance();\n  }\n  points = shiftToModuleCenter(points);\n\n  ResultPoint topLeft = points[0];\n  ResultPoint bottomLeft = points[1];\n  ResultPoint bottomRight = points[2];\n  ResultPoint topRight = points[3];\n\n  int dimensionTop = transitionsBetween(topLeft, topRight) + 1;\n  int dimensionRight = transitionsBetween(bottomRight, topRight) + 1;\n  if ((dimensionTop & 0x01) == 1) {\n    dimensionTop += 1;\n  }\n  if ((dimensionRight & 0x01) == 1) {\n    dimensionRight += 1;\n  }\n\n  if (4 * dimensionTop < 7 * dimensionRight && 4 * dimensionRight < 7 * dimensionTop) {\n    // The matrix is square\n    dimensionTop = dimensionRight = Math.max(dimensionTop, dimensionRight);\n  }\n\n  BitMatrix bits = sampleGrid(image, \n                              topLeft,\n                              bottomLeft,\n                              bottomRight,\n                              topRight,\n                              dimensionTop,\n                              dimensionRight);\n\n  return new DetectorResult(bits, new ResultPoint[]{topLeft, bottomLeft, bottomRight, topRight});\n}", "path": "zxing/core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java", "commit_date": "2019-05-13 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "// Numbers are from http://www.swetake.com/qr/qr3.html and\n// http://www.swetake.com/qr/qr9.html\n", "func_signal": "@Test\npublic void testGenerateECBytes()", "code": "{\n  byte[] dataBytes = bytes(32, 65, 205, 69, 41, 220, 46, 128, 236);\n  byte[] ecBytes = Encoder.generateECBytes(dataBytes, 17);\n  int[] expected = {\n      42, 159, 74, 221, 244, 169, 239, 150, 138, 70, 237, 85, 224, 96, 74, 219, 61\n  };\n  assertEquals(expected.length, ecBytes.length);\n  for (int x = 0; x < expected.length; x++) {\n    assertEquals(expected[x], ecBytes[x] & 0xFF);\n  }\n  dataBytes = bytes(67, 70, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166,  182, 198, 214);\n  ecBytes = Encoder.generateECBytes(dataBytes, 18);\n  expected = new int[] {\n      175, 80, 155, 64, 178, 45, 214, 233, 65, 209, 12, 155, 117, 31, 140, 214, 27, 187\n  };\n  assertEquals(expected.length, ecBytes.length);\n  for (int x = 0; x < expected.length; x++) {\n    assertEquals(expected[x], ecBytes[x] & 0xFF);\n  }\n  // High-order zero coefficient case.\n  dataBytes = bytes(32, 49, 205, 69, 42, 20, 0, 236, 17);\n  ecBytes = Encoder.generateECBytes(dataBytes, 17);\n  expected = new int[] {\n      0, 3, 130, 179, 194, 0, 55, 211, 110, 79, 98, 72, 170, 96, 211, 137, 213\n  };\n  assertEquals(expected.length, ecBytes.length);\n  for (int x = 0; x < expected.length; x++) {\n    assertEquals(expected[x], ecBytes[x] & 0xFF);\n  }\n}", "path": "zxing/core/src/test/java/com/google/zxing/qrcode/encoder/EncoderTestCase.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "// Numbers are from page 21 of JISX0510:2004\n", "func_signal": "@Test\npublic void testAppendKanjiBytes() throws WriterException", "code": "{\n  BitArray bits = new BitArray();\n    Encoder.appendKanjiBytes(shiftJISString(bytes(0x93, 0x5f)), bits);\n    assertEquals(\" .XX.XX.. XXXXX\", bits.toString());\n    Encoder.appendKanjiBytes(shiftJISString(bytes(0xe4, 0xaa)), bits);\n    assertEquals(\" .XX.XX.. XXXXXXX. X.X.X.X. X.\", bits.toString());\n}", "path": "zxing/core/src/test/java/com/google/zxing/qrcode/encoder/EncoderTestCase.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "// Try to construct a valid rows sequence\n// Recursion is used to implement backtracking\n", "func_signal": "private List<ExpandedPair> checkRows(List<ExpandedRow> collectedRows, int currentRow) throws NotFoundException", "code": "{\n  for (int i = currentRow; i < rows.size(); i++) {\n    ExpandedRow row = rows.get(i);\n    this.pairs.clear();\n    for (ExpandedRow collectedRow : collectedRows) {\n      this.pairs.addAll(collectedRow.getPairs());\n    }\n    this.pairs.addAll(row.getPairs());\n\n    if (isValidSequence(this.pairs)) {\n      if (checkChecksum()) {\n        return this.pairs;\n      }\n\n      List<ExpandedRow> rs = new ArrayList<>(collectedRows);\n      rs.add(row);\n      try {\n        // Recursion: try to add more rows\n        return checkRows(rs, i + 1);\n      } catch (NotFoundException e) {\n        // We failed, try the next candidate\n      }\n    }\n  }\n\n  throw NotFoundException.getNotFoundInstance();\n}", "path": "zxing/core/src/main/java/com/google/zxing/oned/rss/expanded/RSSExpandedReader.java", "commit_date": "2020-09-06 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "// Remove all the rows that contains only specified pairs\n", "func_signal": "private static void removePartialRows(Collection<ExpandedPair> pairs, Collection<ExpandedRow> rows)", "code": "{\n  for (Iterator<ExpandedRow> iterator = rows.iterator(); iterator.hasNext();) {\n    ExpandedRow r = iterator.next();\n    if (r.getPairs().size() != pairs.size()) {\n      boolean allFound = true;\n      for (ExpandedPair p : r.getPairs()) {\n        if (!pairs.contains(p)) {\n          allFound = false;\n          break;\n        }\n      }\n      if (allFound) {\n        // 'pairs' contains all the pairs from the row 'r'\n        iterator.remove();\n      }\n    }\n  }\n}", "path": "zxing/core/src/main/java/com/google/zxing/oned/rss/expanded/RSSExpandedReader.java", "commit_date": "2020-09-06 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "// See mask patterns on the page 43 of JISX0510:2004.\n", "func_signal": "@Test\npublic void testGetDataMaskBit()", "code": "{\n  int[][] mask0 = {\n    {1, 0, 1, 0, 1, 0},\n    {0, 1, 0, 1, 0, 1},\n    {1, 0, 1, 0, 1, 0},\n    {0, 1, 0, 1, 0, 1},\n    {1, 0, 1, 0, 1, 0},\n    {0, 1, 0, 1, 0, 1},\n  };\n  assertTrue(testGetDataMaskBitInternal(0, mask0));\n  int[][] mask1 = {\n    {1, 1, 1, 1, 1, 1},\n    {0, 0, 0, 0, 0, 0},\n    {1, 1, 1, 1, 1, 1},\n    {0, 0, 0, 0, 0, 0},\n    {1, 1, 1, 1, 1, 1},\n    {0, 0, 0, 0, 0, 0},\n  };\n  assertTrue(testGetDataMaskBitInternal(1, mask1));\n  int[][] mask2 = {\n    {1, 0, 0, 1, 0, 0},\n    {1, 0, 0, 1, 0, 0},\n    {1, 0, 0, 1, 0, 0},\n    {1, 0, 0, 1, 0, 0},\n    {1, 0, 0, 1, 0, 0},\n    {1, 0, 0, 1, 0, 0},\n  };\n  assertTrue(testGetDataMaskBitInternal(2, mask2));\n  int[][] mask3 = {\n    {1, 0, 0, 1, 0, 0},\n    {0, 0, 1, 0, 0, 1},\n    {0, 1, 0, 0, 1, 0},\n    {1, 0, 0, 1, 0, 0},\n    {0, 0, 1, 0, 0, 1},\n    {0, 1, 0, 0, 1, 0},\n  };\n  assertTrue(testGetDataMaskBitInternal(3, mask3));\n  int[][] mask4 = {\n    {1, 1, 1, 0, 0, 0},\n    {1, 1, 1, 0, 0, 0},\n    {0, 0, 0, 1, 1, 1},\n    {0, 0, 0, 1, 1, 1},\n    {1, 1, 1, 0, 0, 0},\n    {1, 1, 1, 0, 0, 0},\n  };\n  assertTrue(testGetDataMaskBitInternal(4, mask4));\n  int[][] mask5 = {\n    {1, 1, 1, 1, 1, 1},\n    {1, 0, 0, 0, 0, 0},\n    {1, 0, 0, 1, 0, 0},\n    {1, 0, 1, 0, 1, 0},\n    {1, 0, 0, 1, 0, 0},\n    {1, 0, 0, 0, 0, 0},\n  };\n  assertTrue(testGetDataMaskBitInternal(5, mask5));\n  int[][] mask6 = {\n    {1, 1, 1, 1, 1, 1},\n    {1, 1, 1, 0, 0, 0},\n    {1, 1, 0, 1, 1, 0},\n    {1, 0, 1, 0, 1, 0},\n    {1, 0, 1, 1, 0, 1},\n    {1, 0, 0, 0, 1, 1},\n  };\n  assertTrue(testGetDataMaskBitInternal(6, mask6));\n  int[][] mask7 = {\n    {1, 0, 1, 0, 1, 0},\n    {0, 0, 0, 1, 1, 1},\n    {1, 0, 0, 0, 1, 1},\n    {0, 1, 0, 1, 0, 1},\n    {1, 1, 1, 0, 0, 0},\n    {0, 1, 1, 1, 0, 0},\n  };\n  assertTrue(testGetDataMaskBitInternal(7, mask7));\n}", "path": "zxing/core/src/test/java/com/google/zxing/qrcode/encoder/MaskUtilTestCase.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Create a representation of GF(size) using the given primitive polynomial.\n *\n * @param primitive irreducible polynomial whose coefficients are represented by\n *  the bits of an int, where the least-significant bit represents the constant\n *  coefficient\n * @param size the size of the field\n * @param b the factor b in the generator polynomial can be 0- or 1-based\n *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n *  In most cases it should be 1, but for QR code it is 0.\n */\n", "func_signal": "public GenericGF(int primitive, int size, int b)", "code": "{\n  this.primitive = primitive;\n  this.size = size;\n  this.generatorBase = b;\n\n  expTable = new int[size];\n  logTable = new int[size];\n  int x = 1;\n  for (int i = 0; i < size; i++) {\n    expTable[i] = x;\n    x *= 2; // we're assuming the generator alpha is 2\n    if (x >= size) {\n      x ^= primitive;\n      x &= size - 1;\n    }\n  }\n  for (int i = 0; i < size - 1; i++) {\n    logTable[expTable[i]] = i;\n  }\n  // logTable[0] == 0 but this should never be used\n  zero = new GenericGFPoly(this, new int[]{0});\n  one = new GenericGFPoly(this, new int[]{1});\n}", "path": "zxing/core/src/main/java/com/google/zxing/common/reedsolomon/GenericGF.java", "commit_date": "2017-05-14 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "// This takes all the work out of figuring out which buttons/actions should be in which\n// positions, based on which fields are present in this barcode.\n", "func_signal": "private int mapIndexToAction(int index)", "code": "{\n  if (index < buttonCount) {\n    int count = -1;\n    for (int x = 0; x < MAX_BUTTON_COUNT; x++) {\n      if (fields[x]) {\n        count++;\n      }\n      if (count == index) {\n        return x;\n      }\n    }\n  }\n  return -1;\n}", "path": "zxing/android/src/com/google/zxing/client/android/result/AddressBookResultHandler.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Calculates the corner position of the white top right module.\n */\n", "func_signal": "private ResultPoint correctTopRight(ResultPoint[] points)", "code": "{\n  // A..D\n  // |  :\n  // B--C\n  ResultPoint pointA = points[0];\n  ResultPoint pointB = points[1];\n  ResultPoint pointC = points[2];\n  ResultPoint pointD = points[3];\n\n  // shift points for safe transition detection.\n  int trTop = transitionsBetween(pointA, pointD);\n  int trRight = transitionsBetween(pointB, pointD);\n  ResultPoint pointAs = shiftPoint(pointA, pointB, (trRight + 1) * 4);\n  ResultPoint pointCs = shiftPoint(pointC, pointB, (trTop + 1) * 4);\n\n  trTop = transitionsBetween(pointAs, pointD);\n  trRight = transitionsBetween(pointCs, pointD);\n\n  ResultPoint candidate1 = new ResultPoint(\n    pointD.getX() + (pointC.getX() - pointB.getX()) / (trTop + 1),\n    pointD.getY() + (pointC.getY() - pointB.getY()) / (trTop + 1));\n  ResultPoint candidate2 = new ResultPoint(\n    pointD.getX() + (pointA.getX() - pointB.getX()) / (trRight + 1),\n    pointD.getY() + (pointA.getY() - pointB.getY()) / (trRight + 1));\n\n  if (!isValid(candidate1)) {\n    if (isValid(candidate2)) {\n      return candidate2;\n    }\n    return null;\n  }\n  if (!isValid(candidate2)) {\n    return candidate1;\n  }\n\n  int sumc1 = transitionsBetween(pointAs, candidate1) + transitionsBetween(pointCs, candidate1);\n  int sumc2 = transitionsBetween(pointAs, candidate2) + transitionsBetween(pointCs, candidate2);\n\n  if (sumc1 > sumc2) {\n    return candidate1;\n  } else {\n    return candidate2;\n  }\n}", "path": "zxing/core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java", "commit_date": "2019-05-13 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Shift the edge points to the module center.\n */\n", "func_signal": "private ResultPoint[] shiftToModuleCenter(ResultPoint[] points)", "code": "{\n  // A..D\n  // |  :\n  // B--C\n  ResultPoint pointA = points[0];\n  ResultPoint pointB = points[1];\n  ResultPoint pointC = points[2];\n  ResultPoint pointD = points[3];\n\n  // calculate pseudo dimensions\n  int dimH = transitionsBetween(pointA, pointD) + 1;\n  int dimV = transitionsBetween(pointC, pointD) + 1;\n\n  // shift points for safe dimension detection\n  ResultPoint pointAs = shiftPoint(pointA, pointB, dimV * 4);\n  ResultPoint pointCs = shiftPoint(pointC, pointB, dimH * 4);\n\n  //  calculate more precise dimensions\n  dimH = transitionsBetween(pointAs, pointD) + 1;\n  dimV = transitionsBetween(pointCs, pointD) + 1;\n  if ((dimH & 0x01) == 1) {\n    dimH += 1;\n  }\n  if ((dimV & 0x01) == 1) {\n    dimV += 1;\n  }\n\n  // WhiteRectangleDetector returns points inside of the rectangle.\n  // I want points on the edges.\n  float centerX = (pointA.getX() + pointB.getX() + pointC.getX() + pointD.getX()) / 4;\n  float centerY = (pointA.getY() + pointB.getY() + pointC.getY() + pointD.getY()) / 4;\n  pointA = moveAway(pointA, centerX, centerY);\n  pointB = moveAway(pointB, centerX, centerY);\n  pointC = moveAway(pointC, centerX, centerY);\n  pointD = moveAway(pointD, centerX, centerY);\n\n  ResultPoint pointBs;\n  ResultPoint pointDs;\n\n  // shift points to the center of each modules\n  pointAs = shiftPoint(pointA, pointB, dimV * 4);\n  pointAs = shiftPoint(pointAs, pointD, dimH * 4);\n  pointBs = shiftPoint(pointB, pointA, dimV * 4);\n  pointBs = shiftPoint(pointBs, pointC, dimH * 4);\n  pointCs = shiftPoint(pointC, pointD, dimV * 4);\n  pointCs = shiftPoint(pointCs, pointB, dimH * 4);\n  pointDs = shiftPoint(pointD, pointC, dimV * 4);\n  pointDs = shiftPoint(pointDs, pointA, dimH * 4);\n\n  return new ResultPoint[]{pointAs, pointBs, pointCs, pointDs};\n}", "path": "zxing/core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java", "commit_date": "2019-05-13 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Detect a solid side which has minimum transition.\n */\n", "func_signal": "private ResultPoint[] detectSolid1(ResultPoint[] cornerPoints)", "code": "{\n  // 0  2\n  // 1  3\n  ResultPoint pointA = cornerPoints[0];\n  ResultPoint pointB = cornerPoints[1];\n  ResultPoint pointC = cornerPoints[3];\n  ResultPoint pointD = cornerPoints[2];\n\n  int trAB = transitionsBetween(pointA, pointB);\n  int trBC = transitionsBetween(pointB, pointC);\n  int trCD = transitionsBetween(pointC, pointD);\n  int trDA = transitionsBetween(pointD, pointA);\n\n  // 0..3\n  // :  :\n  // 1--2\n  int min = trAB;\n  ResultPoint[] points = {pointD, pointA, pointB, pointC};\n  if (min > trBC) {\n    min = trBC;\n    points[0] = pointA;\n    points[1] = pointB;\n    points[2] = pointC;\n    points[3] = pointD;\n  }\n  if (min > trCD) {\n    min = trCD;\n    points[0] = pointB;\n    points[1] = pointC;\n    points[2] = pointD;\n    points[3] = pointA;\n  }\n  if (min > trDA) {\n    points[0] = pointC;\n    points[1] = pointD;\n    points[2] = pointA;\n    points[3] = pointB;\n  }\n\n  return points;\n}", "path": "zxing/core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java", "commit_date": "2019-05-13 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Calculates a single black point for each block of pixels and saves it away.\n * See the following thread for a discussion of this algorithm:\n *  http://groups.google.com/group/zxing/browse_thread/thread/d06efa2c35a7ddc0\n */\n", "func_signal": "private static int[][] calculateBlackPoints(byte[] luminances,\n                                            int subWidth,\n                                            int subHeight,\n                                            int width,\n                                            int height)", "code": "{\n  int maxYOffset = height - BLOCK_SIZE;\n  int maxXOffset = width - BLOCK_SIZE;\n  int[][] blackPoints = new int[subHeight][subWidth];\n  for (int y = 0; y < subHeight; y++) {\n    int yoffset = y << BLOCK_SIZE_POWER;\n    if (yoffset > maxYOffset) {\n      yoffset = maxYOffset;\n    }\n    for (int x = 0; x < subWidth; x++) {\n      int xoffset = x << BLOCK_SIZE_POWER;\n      if (xoffset > maxXOffset) {\n        xoffset = maxXOffset;\n      }\n      int sum = 0;\n      int min = 0xFF;\n      int max = 0;\n      for (int yy = 0, offset = yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset += width) {\n        for (int xx = 0; xx < BLOCK_SIZE; xx++) {\n          int pixel = luminances[offset + xx] & 0xFF;\n          sum += pixel;\n          // still looking for good contrast\n          if (pixel < min) {\n            min = pixel;\n          }\n          if (pixel > max) {\n            max = pixel;\n          }\n        }\n        // short-circuit min/max tests once dynamic range is met\n        if (max - min > MIN_DYNAMIC_RANGE) {\n          // finish the rest of the rows quickly\n          for (yy++, offset += width; yy < BLOCK_SIZE; yy++, offset += width) {\n            for (int xx = 0; xx < BLOCK_SIZE; xx++) {\n              sum += luminances[offset + xx] & 0xFF;\n            }\n          }\n        }\n      }\n\n      // The default estimate is the average of the values in the block.\n      int average = sum >> (BLOCK_SIZE_POWER * 2);\n      if (max - min <= MIN_DYNAMIC_RANGE) {\n        // If variation within the block is low, assume this is a block with only light or only\n        // dark pixels. In that case we do not want to use the average, as it would divide this\n        // low contrast area into black and white pixels, essentially creating data out of noise.\n        //\n        // The default assumption is that the block is light/background. Since no estimate for\n        // the level of dark pixels exists locally, use half the min for the block.\n        average = min / 2;\n\n        if (y > 0 && x > 0) {\n          // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n          // the pixels in this block to the previously calculated black points. This is based on\n          // the fact that dark barcode symbology is always surrounded by some amount of light\n          // background for which reasonable black point estimates were made. The bp estimated at\n          // the boundaries is used for the interior.\n\n          // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n          int averageNeighborBlackPoint =\n              (blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;\n          if (min < averageNeighborBlackPoint) {\n            average = averageNeighborBlackPoint;\n          }\n        }\n      }\n      blackPoints[y][x] = average;\n    }\n  }\n  return blackPoints;\n}", "path": "zxing/core/src/main/java/com/google/zxing/common/HybridBinarizer.java", "commit_date": "2019-07-29 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * @param raw raw content of extension\n * @return formatted interpretation of raw content as a {@link Map} mapping\n *  one {@link ResultMetadataType} to appropriate value, or {@code null} if not known\n */\n", "func_signal": "private static Map<ResultMetadataType,Object> parseExtensionString(String raw)", "code": "{\n  if (raw.length() != 5) {\n    return null;\n  }\n  Object value = parseExtension5String(raw);\n  if (value == null) {\n    return null;\n  }\n  Map<ResultMetadataType,Object> result = new EnumMap<>(ResultMetadataType.class);\n  result.put(ResultMetadataType.SUGGESTED_PRICE, value);\n  return result;\n}", "path": "zxing/core/src/main/java/com/google/zxing/oned/UPCEANExtension5Support.java", "commit_date": "2017-09-11 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Detect a second solid side next to first solid side.\n */\n", "func_signal": "private ResultPoint[] detectSolid2(ResultPoint[] points)", "code": "{\n  // A..D\n  // :  :\n  // B--C\n  ResultPoint pointA = points[0];\n  ResultPoint pointB = points[1];\n  ResultPoint pointC = points[2];\n  ResultPoint pointD = points[3];\n\n  // Transition detection on the edge is not stable.\n  // To safely detect, shift the points to the module center.\n  int tr = transitionsBetween(pointA, pointD);\n  ResultPoint pointBs = shiftPoint(pointB, pointC, (tr + 1) * 4);\n  ResultPoint pointCs = shiftPoint(pointC, pointB, (tr + 1) * 4);\n  int trBA = transitionsBetween(pointBs, pointA);\n  int trCD = transitionsBetween(pointCs, pointD);\n\n  // 0..3\n  // |  :\n  // 1--2\n  if (trBA < trCD) {\n    // solid sides: A-B-C\n    points[0] = pointA;\n    points[1] = pointB;\n    points[2] = pointC;\n    points[3] = pointD;\n  } else {\n    // solid sides: B-C-D\n    points[0] = pointB;\n    points[1] = pointC;\n    points[2] = pointD;\n    points[3] = pointA;\n  }\n\n  return points;\n}", "path": "zxing/core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java", "commit_date": "2019-05-13 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Counts the number of black/white transitions between two points, using something like Bresenham's algorithm.\n */\n", "func_signal": "private int transitionsBetween(ResultPoint from, ResultPoint to)", "code": "{\n  // See QR Code Detector, sizeOfBlackWhiteBlackRun()\n  int fromX = (int) from.getX();\n  int fromY = (int) from.getY();\n  int toX = (int) to.getX();\n  int toY = (int) to.getY();\n  boolean steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n  if (steep) {\n    int temp = fromX;\n    fromX = fromY;\n    fromY = temp;\n    temp = toX;\n    toX = toY;\n    toY = temp;\n  }\n\n  int dx = Math.abs(toX - fromX);\n  int dy = Math.abs(toY - fromY);\n  int error = -dx / 2;\n  int ystep = fromY < toY ? 1 : -1;\n  int xstep = fromX < toX ? 1 : -1;\n  int transitions = 0;\n  boolean inBlack = image.get(steep ? fromY : fromX, steep ? fromX : fromY);\n  for (int x = fromX, y = fromY; x != toX; x += xstep) {\n    boolean isBlack = image.get(steep ? y : x, steep ? x : y);\n    if (isBlack != inBlack) {\n      transitions++;\n      inBlack = isBlack;\n    }\n    error += dy;\n    if (error > 0) {\n      if (y == toY) {\n        break;\n      }\n      y += ystep;\n      error -= dx;\n    }\n  }\n  return transitions;\n}", "path": "zxing/core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java", "commit_date": "2019-05-13 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * @param bytes bytes encoding a string, whose encoding should be guessed\n * @param hints decode hints if applicable\n * @return Charset of guessed encoding; at the moment will only guess one of:\n *  {@link #SHIFT_JIS_CHARSET}, {@link StandardCharsets#UTF_8},\n *  {@link StandardCharsets#ISO_8859_1}, or the platform default encoding if\n *  none of these can possibly be correct\n */\n", "func_signal": "public static Charset guessCharset(byte[] bytes, Map<DecodeHintType,?> hints)", "code": "{\n  if (hints != null && hints.containsKey(DecodeHintType.CHARACTER_SET)) {\n    return Charset.forName(hints.get(DecodeHintType.CHARACTER_SET).toString());\n  }\n  // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n  // which should be by far the most common encodings.\n  int length = bytes.length;\n  boolean canBeISO88591 = true;\n  boolean canBeShiftJIS = true;\n  boolean canBeUTF8 = true;\n  int utf8BytesLeft = 0;\n  int utf2BytesChars = 0;\n  int utf3BytesChars = 0;\n  int utf4BytesChars = 0;\n  int sjisBytesLeft = 0;\n  int sjisKatakanaChars = 0;\n  int sjisCurKatakanaWordLength = 0;\n  int sjisCurDoubleBytesWordLength = 0;\n  int sjisMaxKatakanaWordLength = 0;\n  int sjisMaxDoubleBytesWordLength = 0;\n  int isoHighOther = 0;\n\n  boolean utf8bom = bytes.length > 3 &&\n      bytes[0] == (byte) 0xEF &&\n      bytes[1] == (byte) 0xBB &&\n      bytes[2] == (byte) 0xBF;\n\n  for (int i = 0;\n       i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8);\n       i++) {\n\n    int value = bytes[i] & 0xFF;\n\n    // UTF-8 stuff\n    if (canBeUTF8) {\n      if (utf8BytesLeft > 0) {\n        if ((value & 0x80) == 0) {\n          canBeUTF8 = false;\n        } else {\n          utf8BytesLeft--;\n        }\n      } else if ((value & 0x80) != 0) {\n        if ((value & 0x40) == 0) {\n          canBeUTF8 = false;\n        } else {\n          utf8BytesLeft++;\n          if ((value & 0x20) == 0) {\n            utf2BytesChars++;\n          } else {\n            utf8BytesLeft++;\n            if ((value & 0x10) == 0) {\n              utf3BytesChars++;\n            } else {\n              utf8BytesLeft++;\n              if ((value & 0x08) == 0) {\n                utf4BytesChars++;\n              } else {\n                canBeUTF8 = false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // ISO-8859-1 stuff\n    if (canBeISO88591) {\n      if (value > 0x7F && value < 0xA0) {\n        canBeISO88591 = false;\n      } else if (value > 0x9F && (value < 0xC0 || value == 0xD7 || value == 0xF7)) {\n        isoHighOther++;\n      }\n    }\n\n    // Shift_JIS stuff\n    if (canBeShiftJIS) {\n      if (sjisBytesLeft > 0) {\n        if (value < 0x40 || value == 0x7F || value > 0xFC) {\n          canBeShiftJIS = false;\n        } else {\n          sjisBytesLeft--;\n        }\n      } else if (value == 0x80 || value == 0xA0 || value > 0xEF) {\n        canBeShiftJIS = false;\n      } else if (value > 0xA0 && value < 0xE0) {\n        sjisKatakanaChars++;\n        sjisCurDoubleBytesWordLength = 0;\n        sjisCurKatakanaWordLength++;\n        if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n          sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n        }\n      } else if (value > 0x7F) {\n        sjisBytesLeft++;\n        //sjisDoubleBytesChars++;\n        sjisCurKatakanaWordLength = 0;\n        sjisCurDoubleBytesWordLength++;\n        if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n          sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n        }\n      } else {\n        //sjisLowChars++;\n        sjisCurKatakanaWordLength = 0;\n        sjisCurDoubleBytesWordLength = 0;\n      }\n    }\n  }\n\n  if (canBeUTF8 && utf8BytesLeft > 0) {\n    canBeUTF8 = false;\n  }\n  if (canBeShiftJIS && sjisBytesLeft > 0) {\n    canBeShiftJIS = false;\n  }\n\n  // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n  if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n    return StandardCharsets.UTF_8;\n  }\n  // Easy -- if assuming Shift_JIS or >= 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n  if (canBeShiftJIS && (ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n    return SHIFT_JIS_CHARSET;\n  }\n  // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n  // - If we saw\n  //   - only two consecutive katakana chars in the whole text, or\n  //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n  // - then we conclude Shift_JIS, else ISO-8859-1\n  if (canBeISO88591 && canBeShiftJIS) {\n    return (sjisMaxKatakanaWordLength == 2 && sjisKatakanaChars == 2) || isoHighOther * 10 >= length\n        ? SHIFT_JIS_CHARSET : StandardCharsets.ISO_8859_1;\n  }\n\n  // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n  if (canBeISO88591) {\n    return StandardCharsets.ISO_8859_1;\n  }\n  if (canBeShiftJIS) {\n    return SHIFT_JIS_CHARSET;\n  }\n  if (canBeUTF8) {\n    return StandardCharsets.UTF_8;\n  }\n  // Otherwise, we take a wild guess with platform encoding\n  return PLATFORM_DEFAULT_ENCODING;\n}", "path": "zxing/core/src/main/java/com/google/zxing/common/StringUtils.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "zxing/zxing", "stars": 32048, "license": "apache-2.0", "language": "java", "size": 242930}
{"docstring": "/**\n * Attempts to confirm that when pauses exist between events, the ScheduledObserver\n * does not lose or reorder any events since the scheduler will not block, but will\n * be re-scheduled when it receives new events after each pause.\n *\n *\n * This is non-deterministic in proving success, but if it ever fails (non-deterministically)\n * it is a sign of potential issues as thread-races and scheduling should not affect output.\n */\n", "func_signal": "@Test\npublic void observeOnOrderingConcurrency()", "code": "{\n    final AtomicInteger count = new AtomicInteger();\n    final int _multiple = 99;\n\n    Observable.range(1, 10000).map(new Function<Integer, Integer>() {\n\n        @Override\n        public Integer apply(Integer t1) {\n            if (randomIntFrom0to100() > 98) {\n                try {\n                    Thread.sleep(2);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            return t1 * _multiple;\n        }\n\n    }).observeOn(Schedulers.computation())\n    .blockingForEach(new Consumer<Integer>() {\n\n        @Override\n        public void accept(Integer t1) {\n            assertEquals(count.incrementAndGet() * _multiple, t1.intValue());\n//                assertTrue(name.startsWith(\"RxComputationThreadPool\"));\n            // FIXME toBlocking now runs its methods on the caller thread\n            String name = Thread.currentThread().getName();\n            assertFalse(\"Wrong thread name: \" + name, name.startsWith(\"Rx\"));\n        }\n\n    });\n}", "path": "RxJava/src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java", "commit_date": "2019-12-26 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Creates an unbounded replay subject with the specified initial buffer capacity.\n * <p>\n * Use this method to avoid excessive array reallocation while the internal buffer grows to accommodate new\n * items. For example, if you know that the buffer will hold 32k items, you can ask the\n * {@code ReplaySubject} to preallocate its internal array with a capacity to hold that many items. Once\n * the items start to arrive, the internal array won't need to grow, creating less garbage and no overhead\n * due to frequent array-copying.\n *\n * @param <T>\n *          the type of items observed and emitted by the Subject\n * @param capacityHint\n *          the initial buffer capacity\n * @return the created subject\n * @throws IllegalArgumentException if {@code capacityHint} is non-positive\n */\n", "func_signal": "@CheckReturnValue\n@NonNull\npublic static <T> ReplaySubject<T> create(int capacityHint)", "code": "{\n    ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n    return new ReplaySubject<>(new UnboundedReplayBuffer<>(capacityHint));\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/subjects/ReplaySubject.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * This tests the path that can not optimize based on size so must use setProducer.\n */\n", "func_signal": "@Test\npublic void rawIterable()", "code": "{\n    Iterable<String> it = new Iterable<String>() {\n\n        @Override\n        public Iterator<String> iterator() {\n            return new Iterator<String>() {\n\n                int i;\n\n                @Override\n                public boolean hasNext() {\n                    return i < 3;\n                }\n\n                @Override\n                public String next() {\n                    return String.valueOf(++i);\n                }\n\n                @Override\n                public void remove() {\n                }\n\n            };\n        }\n\n    };\n    Flowable<String> flowable = Flowable.fromIterable(it);\n\n    Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n    flowable.subscribe(subscriber);\n\n    verify(subscriber, times(1)).onNext(\"1\");\n    verify(subscriber, times(1)).onNext(\"2\");\n    verify(subscriber, times(1)).onNext(\"3\");\n    verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n    verify(subscriber, times(1)).onComplete();\n}", "path": "RxJava/src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterableTest.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Verifies that current is null, next is not null, otherwise signals errors\n * to the RxJavaPlugins and returns false.\n * @param current the current Subscription, expected to be null\n * @param next the next Subscription, expected to be non-null\n * @return true if the validation succeeded\n */\n", "func_signal": "public static boolean validate(Subscription current, Subscription next)", "code": "{\n    if (next == null) {\n        RxJavaPlugins.onError(new NullPointerException(\"next is null\"));\n        return false;\n    }\n    if (current != null) {\n        next.cancel();\n        reportSubscriptionSet();\n        return false;\n    }\n    return true;\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Make sure canceling through {@code subscribeOn} works.\n * Bug report: https://github.com/ReactiveX/RxJava/issues/431\n * @throws InterruptedException if the test is interrupted\n */\n", "func_signal": "@Test\npublic final void unSubscribeForScheduler() throws InterruptedException", "code": "{\n    final AtomicInteger countReceived = new AtomicInteger();\n    final AtomicInteger countGenerated = new AtomicInteger();\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    Flowable.interval(50, TimeUnit.MILLISECONDS)\n            .map(new Function<Long, Long>() {\n                @Override\n                public Long apply(Long aLong) {\n                    countGenerated.incrementAndGet();\n                    return aLong;\n                }\n            })\n            .subscribeOn(getScheduler())\n            .observeOn(getScheduler())\n            .subscribe(new DefaultSubscriber<Long>() {\n                @Override\n                public void onComplete() {\n                    System.out.println(\"--- completed\");\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    System.out.println(\"--- onError\");\n                }\n\n                @Override\n                public void onNext(Long args) {\n                    if (countReceived.incrementAndGet() == 2) {\n                        cancel();\n                        latch.countDown();\n                    }\n                    System.out.println(\"==> Received \" + args);\n                }\n            });\n\n    latch.await(1000, TimeUnit.MILLISECONDS);\n\n    System.out.println(\"----------- it thinks it is finished ------------------ \");\n\n    int timeout = 10;\n\n    while (timeout-- > 0 && countGenerated.get() != 2) {\n        Thread.sleep(100);\n    }\n\n    assertEquals(2, countGenerated.get());\n}", "path": "RxJava/src/test/java/io/reactivex/rxjava3/schedulers/AbstractSchedulerConcurrencyTests.java", "commit_date": "2019-08-16 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Replace a non-empty head node with an empty one to\n * allow the GC of the inaccessible old value.\n */\n", "func_signal": "@Override\npublic void trimHead()", "code": "{\n    TimedNode<Object> h = head;\n    if (h.value != null) {\n        TimedNode<Object> n = new TimedNode<>(null, 0);\n        n.lazySet(h.get());\n        head = n;\n    }\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/subjects/ReplaySubject.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Atomically sets the subscription on the field if it is still null and issues a positive request\n * to the given {@link Subscription}.\n * <p>\n * If the field is not null and doesn't contain the {@link #CANCELLED}\n * instance, the {@link #reportSubscriptionSet()} is called.\n * @param field the target field\n * @param s the new subscription to set\n * @param request the amount to request, positive (not verified)\n * @return true if the operation succeeded, false if the target field was not null.\n * @since 2.1.11\n */\n", "func_signal": "public static boolean setOnce(AtomicReference<Subscription> field, Subscription s, long request)", "code": "{\n    if (setOnce(field, s)) {\n        s.request(request);\n        return true;\n    }\n    return false;\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Confirm that running on a NewThreadScheduler uses the same thread for the entire stream.\n */\n", "func_signal": "@Test\npublic void observeOnWithNewThreadScheduler()", "code": "{\n    final AtomicInteger count = new AtomicInteger();\n    final int _multiple = 99;\n\n    Observable.range(1, 100000).map(new Function<Integer, Integer>() {\n\n        @Override\n        public Integer apply(Integer t1) {\n            return t1 * _multiple;\n        }\n\n    }).observeOn(Schedulers.newThread())\n    .blockingForEach(new Consumer<Integer>() {\n\n        @Override\n        public void accept(Integer t1) {\n            assertEquals(count.incrementAndGet() * _multiple, t1.intValue());\n            // FIXME toBlocking methods run on the current thread\n            String name = Thread.currentThread().getName();\n            assertFalse(\"Wrong thread name: \" + name, name.startsWith(\"Rx\"));\n        }\n\n    });\n\n}", "path": "RxJava/src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java", "commit_date": "2019-12-26 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Creates a time- and size-bounded replay subject.\n * <p>\n * In this setting, the {@code ReplaySubject} internally tags each received item with a timestamp value\n * supplied by the {@link Scheduler} and holds at most {@code size} items in its internal buffer. It evicts\n * items from the start of the buffer if their age becomes less-than or equal to the supplied age in\n * milliseconds or the buffer reaches its {@code size} limit.\n * <p>\n * When observers subscribe to a terminated {@code ReplaySubject}, they observe the items that remained in\n * the buffer after the terminal notification, regardless of their age, but at most {@code size} items.\n * <p>\n * If an observer subscribes while the {@code ReplaySubject} is active, it will observe only those items\n * from within the buffer that have age less than the specified time and each subsequent item, even if the\n * buffer evicts items due to the time constraint in the mean time. In other words, once an observer\n * subscribes, it observes items without gaps in the sequence except for the outdated items at the beginning\n * of the sequence.\n * <p>\n * Note that terminal notifications ({@code onError} and {@code onComplete}) trigger eviction as well. For\n * example, with a max age of 5, the first item is observed at T=0, then an {@code onComplete} notification\n * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplaySubject} with just\n * an {@code onComplete} notification.\n *\n * @param <T>\n *          the type of items observed and emitted by the Subject\n * @param maxAge\n *          the maximum age of the contained items\n * @param unit\n *          the time unit of {@code time}\n * @param maxSize\n *          the maximum number of buffered items\n * @param scheduler\n *          the {@link Scheduler} that provides the current time\n * @return the created subject\n * @throws NullPointerException if {@code unit} or {@code scheduler} is {@code null}\n * @throws IllegalArgumentException if {@code maxAge} or {@code maxSize} is non-positive\n */\n", "func_signal": "@CheckReturnValue\n@NonNull\npublic static <T> ReplaySubject<T> createWithTimeAndSize(long maxAge, @NonNull TimeUnit unit, @NonNull Scheduler scheduler, int maxSize)", "code": "{\n    ObjectHelper.verifyPositive(maxSize, \"maxSize\");\n    ObjectHelper.verifyPositive(maxAge, \"maxAge\");\n    Objects.requireNonNull(unit, \"unit is null\");\n    Objects.requireNonNull(scheduler, \"scheduler is null\");\n    return new ReplaySubject<>(new SizeAndTimeBoundReplayBuffer<>(maxSize, maxAge, unit, scheduler));\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/subjects/ReplaySubject.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Atomically sets the subscription on the field if it is still null.\n * <p>If the field is not null and doesn't contain the {@link #CANCELLED}\n * instance, the {@link #reportSubscriptionSet()} is called.\n * @param field the target field\n * @param s the new subscription to set\n * @return true if the operation succeeded, false if the target field was not null.\n */\n", "func_signal": "public static boolean setOnce(AtomicReference<Subscription> field, Subscription s)", "code": "{\n    Objects.requireNonNull(s, \"s is null\");\n    if (!field.compareAndSet(null, s)) {\n        s.cancel();\n        if (field.get() != CANCELLED) {\n            reportSubscriptionSet();\n        }\n        return false;\n    }\n    return true;\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Replace a non-empty head node with an empty one to\n * allow the GC of the inaccessible old value.\n */\n", "func_signal": "@Override\npublic void trimHead()", "code": "{\n    Node<Object> h = head;\n    if (h.value != null) {\n        Node<Object> n = new Node<>(null);\n        n.lazySet(h.get());\n        head = n;\n    }\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/subjects/ReplaySubject.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Validates that the n is positive.\n * @param n the request amount\n * @return false if n is non-positive.\n */\n", "func_signal": "public static boolean validate(long n)", "code": "{\n    if (n <= 0) {\n        RxJavaPlugins.onError(new IllegalArgumentException(\"n > 0 required but it was \" + n));\n        return false;\n    }\n    return true;\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * This won't compile if super/extends isn't done correctly on generics.\n */\n", "func_signal": "@Test\npublic void covarianceOfZip()", "code": "{\n    Observable<HorrorMovie> horrors = Observable.just(new HorrorMovie());\n    Observable<CoolRating> ratings = Observable.just(new CoolRating());\n\n    Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine).blockingForEach(action);\n    Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine).blockingForEach(action);\n    Observable.<Media, Rating, ExtendedResult> zip(horrors, ratings, combine).blockingForEach(extendedAction);\n    Observable.<Media, Rating, Result> zip(horrors, ratings, combine).blockingForEach(action);\n    Observable.<Media, Rating, ExtendedResult> zip(horrors, ratings, combine).blockingForEach(action);\n\n    Observable.<Movie, CoolRating, Result> zip(horrors, ratings, combine);\n}", "path": "RxJava/src/test/java/io/reactivex/rxjava3/observable/ObservableZipTests.java", "commit_date": "2019-12-22 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * This is testing a no-op path since it uses Schedulers.immediate() which will not do scheduling.\n */\n", "func_signal": "@Test\npublic void observeOn()", "code": "{\n    Observer<Integer> observer = TestHelper.mockObserver();\n    Observable.just(1, 2, 3).observeOn(ImmediateThinScheduler.INSTANCE).subscribe(observer);\n\n    verify(observer, times(1)).onNext(1);\n    verify(observer, times(1)).onNext(2);\n    verify(observer, times(1)).onNext(3);\n    verify(observer, times(1)).onComplete();\n}", "path": "RxJava/src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java", "commit_date": "2019-12-26 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Atomically requests from the Subscription in the field if not null, otherwise accumulates\n * the request amount in the requested field to be requested once the field is set to non-null.\n * @param field the target field that may already contain a Subscription\n * @param requested the current requested amount\n * @param n the request amount, positive (verified)\n */\n", "func_signal": "public static void deferredRequest(AtomicReference<Subscription> field, AtomicLong requested, long n)", "code": "{\n    Subscription s = field.get();\n    if (s != null) {\n        s.request(n);\n    } else {\n        if (SubscriptionHelper.validate(n)) {\n            BackpressureHelper.add(requested, n);\n\n            s = field.get();\n            if (s != null) {\n                long r = requested.getAndSet(0L);\n                if (r != 0L) {\n                    s.request(r);\n                }\n            }\n        }\n    }\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Confirm that running on a ThreadPoolScheduler allows multiple threads but is still ordered.\n */\n", "func_signal": "@Test\npublic void observeOnWithThreadPoolScheduler()", "code": "{\n    final AtomicInteger count = new AtomicInteger();\n    final int _multiple = 99;\n\n    Observable.range(1, 100000).map(new Function<Integer, Integer>() {\n\n        @Override\n        public Integer apply(Integer t1) {\n            return t1 * _multiple;\n        }\n\n    }).observeOn(Schedulers.computation())\n    .blockingForEach(new Consumer<Integer>() {\n\n        @Override\n        public void accept(Integer t1) {\n            assertEquals(count.incrementAndGet() * _multiple, t1.intValue());\n            // FIXME toBlocking methods run on the caller's thread\n            String name = Thread.currentThread().getName();\n            assertFalse(\"Wrong thread name: \" + name, name.startsWith(\"Rx\"));\n        }\n\n    });\n}", "path": "RxJava/src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java", "commit_date": "2019-12-26 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Creates a size-bounded replay subject.\n * <p>\n * In this setting, the {@code ReplaySubject} holds at most {@code size} items in its internal buffer and\n * discards the oldest item.\n * <p>\n * When observers subscribe to a terminated {@code ReplaySubject}, they are guaranteed to see at most\n * {@code size} {@code onNext} events followed by a termination event.\n * <p>\n * If an observer subscribes while the {@code ReplaySubject} is active, it will observe all items in the\n * buffer at that point in time and each item observed afterwards, even if the buffer evicts items due to\n * the size constraint in the mean time. In other words, once an Observer subscribes, it will receive items\n * without gaps in the sequence.\n *\n * @param <T>\n *          the type of items observed and emitted by the Subject\n * @param maxSize\n *          the maximum number of buffered items\n * @return the created subject\n * @throws IllegalArgumentException if {@code maxSize} is non-positive\n */\n", "func_signal": "@CheckReturnValue\n@NonNull\npublic static <T> ReplaySubject<T> createWithSize(int maxSize)", "code": "{\n    ObjectHelper.verifyPositive(maxSize, \"maxSize\");\n    return new ReplaySubject<>(new SizeBoundReplayBuffer<>(maxSize));\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/subjects/ReplaySubject.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Atomically sets the subscription on the field and cancels the\n * previous subscription if any.\n * @param field the target field to set the new subscription on\n * @param s the new subscription\n * @return true if the operation succeeded, false if the target field\n * holds the {@link #CANCELLED} instance.\n * @see #replace(AtomicReference, Subscription)\n */\n", "func_signal": "public static boolean set(AtomicReference<Subscription> field, Subscription s)", "code": "{\n    for (;;) {\n        Subscription current = field.get();\n        if (current == CANCELLED) {\n            if (s != null) {\n                s.cancel();\n            }\n            return false;\n        }\n        if (field.compareAndSet(current, s)) {\n            if (current != null) {\n                current.cancel();\n            }\n            return true;\n        }\n    }\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Creates a time-bounded replay subject.\n * <p>\n * In this setting, the {@code ReplaySubject} internally tags each observed item with a timestamp value\n * supplied by the {@link Scheduler} and keeps only those whose age is less than the supplied time value\n * converted to milliseconds. For example, an item arrives at T=0 and the max age is set to 5; at T&gt;=5\n * this first item is then evicted by any subsequent item or termination event, leaving the buffer empty.\n * <p>\n * Once the subject is terminated, observers subscribing to it will receive items that remained in the\n * buffer after the terminal event, regardless of their age.\n * <p>\n * If an observer subscribes while the {@code ReplaySubject} is active, it will observe only those items\n * from within the buffer that have an age less than the specified time, and each item observed thereafter,\n * even if the buffer evicts items due to the time constraint in the mean time. In other words, once an\n * observer subscribes, it observes items without gaps in the sequence except for any outdated items at the\n * beginning of the sequence.\n * <p>\n * Note that terminal notifications ({@code onError} and {@code onComplete}) trigger eviction as well. For\n * example, with a max age of 5, the first item is observed at T=0, then an {@code onComplete} notification\n * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplaySubject} with just\n * an {@code onComplete} notification.\n *\n * @param <T>\n *          the type of items observed and emitted by the Subject\n * @param maxAge\n *          the maximum age of the contained items\n * @param unit\n *          the time unit of {@code time}\n * @param scheduler\n *          the {@link Scheduler} that provides the current time\n * @return the created subject\n * @throws NullPointerException if {@code unit} or {@code scheduler} is {@code null}\n * @throws IllegalArgumentException if {@code maxAge} is non-positive\n */\n", "func_signal": "@CheckReturnValue\n@NonNull\npublic static <T> ReplaySubject<T> createWithTime(long maxAge, @NonNull TimeUnit unit, @NonNull Scheduler scheduler)", "code": "{\n    ObjectHelper.verifyPositive(maxAge, \"maxAge\");\n    Objects.requireNonNull(unit, \"unit is null\");\n    Objects.requireNonNull(scheduler, \"scheduler is null\");\n    return new ReplaySubject<>(new SizeAndTimeBoundReplayBuffer<>(Integer.MAX_VALUE, maxAge, unit, scheduler));\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/subjects/ReplaySubject.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Atomically sets the subscription on the field but does not\n * cancel the previous subscription.\n * @param field the target field to set the new subscription on\n * @param s the new subscription\n * @return true if the operation succeeded, false if the target field\n * holds the {@link #CANCELLED} instance.\n * @see #set(AtomicReference, Subscription)\n */\n", "func_signal": "public static boolean replace(AtomicReference<Subscription> field, Subscription s)", "code": "{\n    for (;;) {\n        Subscription current = field.get();\n        if (current == CANCELLED) {\n            if (s != null) {\n                s.cancel();\n            }\n            return false;\n        }\n        if (field.compareAndSet(current, s)) {\n            return true;\n        }\n    }\n}", "path": "RxJava/src/main/java/io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "ReactiveX/RxJava", "stars": 47553, "license": "apache-2.0", "language": "java", "size": 141286}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/client/petstore/java/native/src/main/java/org/openapitools/client/model/AdditionalPropertiesString.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Join a list of strings with the given separator.\n *\n * @param list      The list of strings\n * @param separator The separator\n * @return the resulting string\n */\n", "func_signal": "public static String join(Collection<String> list, String separator)", "code": "{\n  Iterator<String> iterator = list.iterator();\n  StringBuilder out = new StringBuilder();\n  if (iterator.hasNext()) {\n    out.append(iterator.next());\n  }\n  while (iterator.hasNext()) {\n    out.append(separator).append(iterator.next());\n  }\n  return out.toString();\n}", "path": "openapi-generator/samples/client/petstore/java/retrofit2rx3/src/main/java/org/openapitools/client/StringUtil.java", "commit_date": "2020-06-14 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/server/petstore/java-play-framework-fake-endpoints/app/apimodels/Model200Response.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Return true if this AdditionalPropertiesString object is equal to o.\n */\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  AdditionalPropertiesString additionalPropertiesString = (AdditionalPropertiesString) o;\n  return Objects.equals(this.name, additionalPropertiesString.name)&&\n      Objects.equals(this.additionalProperties, additionalPropertiesString.additionalProperties) &&\n      super.equals(o);\n}", "path": "openapi-generator/samples/client/petstore/java/native/src/main/java/org/openapitools/client/model/AdditionalPropertiesString.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Constructor.\n *\n * @param code The HTTP status code.\n * @param msg The error message.\n */\n", "func_signal": "public ApiException(int code, String msg)", "code": "{\n    super(msg);\n    this.code = code;\n}", "path": "openapi-generator/samples/server/petstore/jaxrs-jersey/src/gen/java/org/openapitools/api/ApiException.java", "commit_date": "2020-08-09 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Return the additional (undeclared) property with the specified name.\n */\n", "func_signal": "public String getAdditionalProperty(String key)", "code": "{\n  if (this.additionalProperties == null) {\n      return null;\n  }\n  return this.additionalProperties.get(key);\n}", "path": "openapi-generator/samples/client/petstore/java/native/src/main/java/org/openapitools/client/model/AdditionalPropertiesString.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/client/petstore/java/retrofit2-play26/src/main/java/org/openapitools/client/model/Client.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/openapi3/client/petstore/java/jersey2-java8/src/main/java/org/openapitools/client/model/ModelReturn.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/client/petstore/java/retrofit2rx2/src/main/java/org/openapitools/client/model/User.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Return true if this Return object is equal to o.\n */\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  ModelReturn _return = (ModelReturn) o;\n  return Objects.equals(this._return, _return._return);\n}", "path": "openapi-generator/samples/openapi3/client/petstore/java/jersey2-java8/src/main/java/org/openapitools/client/model/ModelReturn.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/server/petstore/springboot-beanvalidation-no-nullable/src/main/java/org/openapitools/model/User.java", "commit_date": "2020-08-31 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Join an array of strings with the given separator.\n * <p>\n * Note: This might be replaced by utility method from commons-lang or guava someday\n * if one of those libraries is added as dependency.\n * </p>\n *\n * @param array     The array of strings\n * @param separator The separator\n * @return the resulting string\n */\n", "func_signal": "public static String join(String[] array, String separator)", "code": "{\n  int len = array.length;\n  if (len == 0) {\n    return \"\";\n  }\n\n  StringBuilder out = new StringBuilder();\n  out.append(array[0]);\n  for (int i = 1; i < len; i++) {\n    out.append(separator).append(array[i]);\n  }\n  return out.toString();\n}", "path": "openapi-generator/samples/client/petstore/java/retrofit2rx3/src/main/java/org/openapitools/client/StringUtil.java", "commit_date": "2020-06-14 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/server/petstore/springboot-beanvalidation/src/main/java/org/openapitools/model/ArrayOfNumberOnly.java", "commit_date": "2020-08-27 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * @param statusCode The status code of HTTP response\n * @param headers The headers of HTTP response\n * @param data The object deserialized from response bod\n */\n", "func_signal": "public ApiResponse(int statusCode, Map<String, List<String>> headers, T data)", "code": "{\n    this.statusCode = statusCode;\n    this.headers = headers;\n    this.data = data;\n}", "path": "openapi-generator/samples/client/petstore/java/native-async/src/main/java/org/openapitools/client/ApiResponse.java", "commit_date": "2020-07-17 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Set the additional (undeclared) property with the specified name and value.\n * If the property does not already exist, create it otherwise replace it.\n */\n", "func_signal": "@JsonAnySetter\npublic AdditionalPropertiesString putAdditionalProperty(String key, String value)", "code": "{\n  if (this.additionalProperties == null) {\n      this.additionalProperties = new HashMap<String, String>();\n  }\n  this.additionalProperties.put(key, value);\n  return this;\n}", "path": "openapi-generator/samples/client/petstore/java/native/src/main/java/org/openapitools/client/model/AdditionalPropertiesString.java", "commit_date": "2020-10-15 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Check if the given array contains the given value (with case-insensitive comparison).\n *\n * @param array The array\n * @param value The value to search\n * @return true if the array contains the value\n */\n", "func_signal": "public static boolean containsIgnoreCase(String[] array, String value)", "code": "{\n  for (String str : array) {\n    if (value == null && str == null) {\n      return true;\n    }\n    if (value != null && value.equalsIgnoreCase(str)) {\n      return true;\n    }\n  }\n  return false;\n}", "path": "openapi-generator/samples/client/petstore/java/retrofit2rx3/src/main/java/org/openapitools/client/StringUtil.java", "commit_date": "2020-06-14 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/server/petstore/jaxrs-datelib-j8/src/gen/java/org/openapitools/model/Category.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/client/petstore/java/okhttp-gson-parcelableModel/src/main/java/org/openapitools/client/model/TypeHolderExample.java", "commit_date": "2020-08-31 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/client/petstore/java/webclient/src/main/java/org/openapitools/client/model/MapTest.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * Convert the given object to string with each line indented by 4 spaces\n * (except the first line).\n */\n", "func_signal": "private String toIndentedString(Object o)", "code": "{\n  if (o == null) {\n    return \"null\";\n  }\n  return o.toString().replace(\"\\n\", \"\\n    \");\n}", "path": "openapi-generator/samples/client/petstore/java/resteasy/src/main/java/org/openapitools/client/model/AdditionalPropertiesString.java", "commit_date": "2020-08-25 00:00:00", "repo_name": "OpenAPITools/openapi-generator", "stars": 19249, "license": "apache-2.0", "language": "java", "size": 848890}
{"docstring": "/**\n * @param text Item \u7684\u6587\u5b57\u5185\u5bb9\u3002\n * @param tag  item \u7684 tag\u3002\n */\n", "func_signal": "public BottomListSheetBuilder addItem(String text, String tag)", "code": "{\n    mItems.add(new QMUIBottomSheetListItemModel(text, tag));\n    return this;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * \u4ece\u4e00\u4e2aview\u521b\u5efaBitmap\u3002\u628aview\u7684\u533a\u57df\u622a\u6389leftCrop/topCrop/rightCrop/bottomCrop\n */\n", "func_signal": "public static Bitmap createBitmapFromView(View view, int leftCrop, int topCrop, int rightCrop, int bottomCrop)", "code": "{\n    Bitmap originBitmap = QMUIDrawableHelper.createBitmapFromView(view);\n    if (originBitmap == null) {\n        return null;\n    }\n    Bitmap cutBitmap = createBitmapSafely(view.getWidth() - rightCrop - leftCrop, view.getHeight() - topCrop - bottomCrop, Bitmap.Config.ARGB_8888, 1);\n    if (cutBitmap == null) {\n        return null;\n    }\n    Canvas canvas = new Canvas(cutBitmap);\n    Rect src = new Rect(leftCrop, topCrop, view.getWidth() - rightCrop, view.getHeight() - bottomCrop);\n    Rect dest = new Rect(0, 0, view.getWidth() - rightCrop - leftCrop, view.getHeight() - topCrop - bottomCrop);\n    canvas.drawColor(Color.WHITE); // \u9632\u6b62 View \u4e0a\u9762\u6709\u4e9b\u533a\u57df\u7a7a\u767d\u5bfc\u81f4\u6700\u7ec8 Bitmap \u4e0a\u6709\u4e9b\u533a\u57df\u53d8\u9ed1\n    canvas.drawBitmap(originBitmap, src, dest, null);\n    originBitmap.recycle();\n    return cutBitmap;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/util/QMUIDrawableHelper.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * @param textAndTag Item \u7684\u6587\u5b57\u5185\u5bb9\uff0c\u540c\u65f6\u4f1a\u628a\u5185\u5bb9\u8bbe\u7f6e\u4e3a tag\u3002\n */\n", "func_signal": "public BottomListSheetBuilder addItem(String textAndTag)", "code": "{\n    mItems.add(new QMUIBottomSheetListItemModel(textAndTag, textAndTag));\n    return this;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * Helper\n */\n", "func_signal": "private void initUtilDesc()", "code": "{\n    mUtilNames = new ArrayList<>();\n    mUtilNames.add(QDColorHelperFragment.class);\n    mUtilNames.add(QDDeviceHelperFragment.class);\n    mUtilNames.add(QDDrawableHelperFragment.class);\n    mUtilNames.add(QDStatusBarHelperFragment.class);\n    mUtilNames.add(QDViewHelperFragment.class);\n    mUtilNames.add(QDNotchHelperFragment.class);\n}", "path": "QMUI_Android/qmuidemo/src/main/java/com/qmuiteam/qmuidemo/manager/QDDataManager.java", "commit_date": "2020-05-15 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "// ================================ \u751f\u6210\u4e0d\u540c\u7c7b\u578b\u7684BottomSheet\n", "func_signal": "private void showSimpleBottomSheetList(boolean gravityCenter,\n                                       boolean addCancelBtn,\n                                       boolean withIcon,\n                                       CharSequence title,\n                                       int itemCount,\n                                       boolean allowDragDismiss,\n                                       boolean withMark)", "code": "{\n    QMUIBottomSheet.BottomListSheetBuilder builder = new QMUIBottomSheet.BottomListSheetBuilder(getActivity());\n    builder.setGravityCenter(gravityCenter)\n            .setSkinManager(QMUISkinManager.defaultInstance(getContext()))\n            .setTitle(title)\n            .setAddCancelBtn(addCancelBtn)\n            .setAllowDrag(allowDragDismiss)\n            .setNeedRightMark(withMark)\n            .setOnSheetItemClickListener(new QMUIBottomSheet.BottomListSheetBuilder.OnSheetItemClickListener() {\n                @Override\n                public void onClick(QMUIBottomSheet dialog, View itemView, int position, String tag) {\n                    dialog.dismiss();\n                    Toast.makeText(getActivity(), \"Item \" + (position + 1), Toast.LENGTH_SHORT).show();\n                }\n            });\n    if(withMark){\n        builder.setCheckedIndex(40);\n    }\n    for (int i = 1; i <= itemCount; i++) {\n        if(withIcon){\n            builder.addItem(ContextCompat.getDrawable(getContext(), R.mipmap.icon_tabbar_lab), \"Item \" + i);\n        }else{\n            builder.addItem(\"Item \" + i);\n        }\n\n    }\n    builder.build().show();\n}", "path": "QMUI_Android/qmuidemo/src/main/java/com/qmuiteam/qmuidemo/fragment/components/QDBottomSheetFragment.java", "commit_date": "2020-04-01 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n *\n * refer to https://github.com/bingoogolapple/BGASwipeBackLayout-Android/\n * @param currentActivity the last activity\n * @return\n */\n", "func_signal": "@Nullable\npublic Activity getPenultimateActivity(Activity currentActivity)", "code": "{\n    Activity activity = null;\n    try {\n        if (mActivityStack.size() > 1) {\n            activity = mActivityStack.get(mActivityStack.size() - 2);\n\n            if (currentActivity.equals(activity)) {\n                int index = mActivityStack.indexOf(currentActivity);\n                if (index > 0) {\n                    // if memory leaks or the last activity is being finished\n                    activity = mActivityStack.get(index - 1);\n                } else if (mActivityStack.size() == 2) {\n                    // if screen orientation changes, there may be an error sequence in the stack\n                    activity = mActivityStack.lastElement();\n                }\n            }\n        }\n    } catch (Exception ignored) {\n    }\n    return activity;\n}", "path": "QMUI_Android/arch/src/main/java/com/qmuiteam/qmui/arch/QMUISwipeBackActivityManager.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * \u7531\u4e00\u4e2adrawable\u751f\u6210bitmap\n */\n", "func_signal": "public static Bitmap drawableToBitmap(Drawable drawable)", "code": "{\n    if (drawable == null)\n        return null;\n    else if (drawable instanceof BitmapDrawable) {\n        return ((BitmapDrawable) drawable).getBitmap();\n    }\n\n    int intrinsicWidth = drawable.getIntrinsicWidth();\n    int intrinsicHeight = drawable.getIntrinsicHeight();\n\n    if (!(intrinsicWidth > 0 && intrinsicHeight > 0))\n        return null;\n\n    try {\n        Bitmap.Config config = drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888\n                : Bitmap.Config.RGB_565;\n        Bitmap bitmap = Bitmap.createBitmap(intrinsicWidth, intrinsicHeight, config);\n        Canvas canvas = new Canvas(bitmap);\n        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());\n        drawable.draw(canvas);\n        return bitmap;\n    } catch (OutOfMemoryError e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/util/QMUIDrawableHelper.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * @param imageRes Item \u7684\u56fe\u6807 Resource\u3002\n * @param text     Item \u7684\u6587\u5b57\u5185\u5bb9\u3002\n * @param tag      Item \u7684 tag\u3002\n */\n", "func_signal": "public BottomListSheetBuilder addItem(int imageRes, String text, String tag)", "code": "{\n    mItems.add(new QMUIBottomSheetListItemModel(text, tag).image(imageRes));\n    return this;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * \u8bbe\u7f6eDrawable\u7684\u989c\u8272\n * <b>\u8fd9\u91cc\u4e0d\u5bf9Drawable\u8fdb\u884cmutate()\uff0c\u4f1a\u5f71\u54cd\u5230\u6240\u6709\u7528\u5230\u8fd9\u4e2aDrawable\u7684\u5730\u65b9\uff0c\u5982\u679c\u8981\u907f\u514d\uff0c\u8bf7\u5148\u81ea\u884cmutate()</b>\n *\n * please use {@link DrawableCompat#setTint(Drawable, int)} replace this.\n */\n", "func_signal": "@Deprecated\npublic static ColorFilter setDrawableTintColor(Drawable drawable, @ColorInt int tintColor)", "code": "{\n    LightingColorFilter colorFilter = new LightingColorFilter(Color.argb(255, 0, 0, 0), tintColor);\n    if(drawable != null){\n        drawable.setColorFilter(colorFilter);\n    }\n    return colorFilter;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/util/QMUIDrawableHelper.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * @param image      icon Item \u7684 icon\u3002\n * @param textAndTag Item \u7684\u6587\u5b57\u5185\u5bb9\uff0c\u540c\u65f6\u4f1a\u628a\u5185\u5bb9\u8bbe\u7f6e\u4e3a tag\u3002\n */\n", "func_signal": "public BottomListSheetBuilder addItem(Drawable image, String textAndTag)", "code": "{\n    mItems.add(new QMUIBottomSheetListItemModel(textAndTag, textAndTag).image(image));\n    return this;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * @param imageRes    Item \u7684\u56fe\u6807 Resource\u3002\n * @param text        Item \u7684\u6587\u5b57\u5185\u5bb9\u3002\n * @param tag         Item \u7684 tag\u3002\n * @param hasRedPoint \u662f\u5426\u663e\u793a\u7ea2\u70b9\u3002\n * @param disabled    \u662f\u5426\u663e\u793a\u7981\u7528\u6001\u3002\n */\n", "func_signal": "public BottomListSheetBuilder addItem(\n        int imageRes, CharSequence text, String tag, boolean hasRedPoint, boolean disabled)", "code": "{\n    mItems.add(new QMUIBottomSheetListItemModel(text, tag)\n            .image(imageRes).redPoint(hasRedPoint).disabled(disabled));\n    return this;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * @param needRightMark \u662f\u5426\u9700\u8981\u5728\u88ab\u9009\u4e2d\u7684 Item \u53f3\u4fa7\u663e\u793a\u4e00\u4e2a\u52fe(\u4f7f\u7528 {@link #setCheckedIndex(int)} \u8bbe\u7f6e\u9009\u4e2d\u7684 Item)\n */\n", "func_signal": "public BottomListSheetBuilder(Context context, boolean needRightMark)", "code": "{\n    super(context);\n    mItems = new ArrayList<>();\n    mNeedRightMark = needRightMark;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * used for activity for different business.\n *\n *example:\n *\n * FragmentContainerParam(required = {\"bookId\"})\n * class BookActivity extend QMUIFragmentActivity {\n *\n * }\n *\n * FragmentScheme(name = \"bookDetail\", activities = {QDMainActivity.class}, required={\"bookId\"})\n * class BookDetailFragment extend QMUIFragment {\n *\n * }\n *\n * FragmentScheme(name = \"bookRead\", activities = {QDMainActivity.class}, required={\"bookId\"})\n * class BookReadFragment extend QMUIFragment {\n *\n * }\n *\n * if bookId changed. QMUI will start up a new activity. so it's safe to put common book info\n * in activityViewModel.\n *\n *\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface FragmentContainerParam", "code": "{\n    String[] required() default {};\n    String[] optional() default {};\n}", "path": "QMUI_Android/arch-annotation/src/main/java/com/qmuiteam/qmui/arch/annotation/FragmentContainerParam.java", "commit_date": "2020-10-17 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * @param imageRes    Item \u7684\u56fe\u6807 Resource\u3002\n * @param text        Item \u7684\u6587\u5b57\u5185\u5bb9\u3002\n * @param tag         Item \u7684 tag\u3002\n * @param hasRedPoint \u662f\u5426\u663e\u793a\u7ea2\u70b9\u3002\n */\n", "func_signal": "public BottomListSheetBuilder addItem(int imageRes, String text, String tag, boolean hasRedPoint)", "code": "{\n    mItems.add(new QMUIBottomSheetListItemModel(text, tag).image(imageRes).redPoint(hasRedPoint));\n    return this;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * sometimes you may need to perform some operations on all items,\n * such as perform cleanup when the ViewPager is destroyed\n * once the action return true, then do not handle remain items\n *\n * @param action\n */\n", "func_signal": "public void each(@NonNull Action action)", "code": "{\n    int size = mScrapItems.size();\n    for (int i = 0; i < size; i++) {\n        Object item = mScrapItems.valueAt(i);\n        if (action.call(item)) {\n            break;\n        }\n    }\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/QMUIPagerAdapter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * Components\n */\n", "func_signal": "private void initComponentsDesc()", "code": "{\n    mComponentsNames = new ArrayList<>();\n    mComponentsNames.add(QDButtonFragment.class);\n    mComponentsNames.add(QDDialogFragment.class);\n    mComponentsNames.add(QDFloatLayoutFragment.class);\n    mComponentsNames.add(QDEmptyViewFragment.class);\n    mComponentsNames.add(QDTabSegmentFragment.class);\n    mComponentsNames.add(QDProgressBarFragment.class);\n    mComponentsNames.add(QDBottomSheetFragment.class);\n    mComponentsNames.add(QDGroupListViewFragment.class);\n    mComponentsNames.add(QDTipDialogFragment.class);\n    mComponentsNames.add(QDRadiusImageViewFragment.class);\n    mComponentsNames.add(QDVerticalTextViewFragment.class);\n    mComponentsNames.add(QDPullRefreshFragment.class);\n    mComponentsNames.add(QDPopupFragment.class);\n    mComponentsNames.add(QDSpanTouchFixTextViewFragment.class);\n    mComponentsNames.add(QDLinkTextViewFragment.class);\n    mComponentsNames.add(QDQQFaceFragment.class);\n    mComponentsNames.add(QDSpanFragment.class);\n    mComponentsNames.add(QDCollapsingTopBarLayoutFragment.class);\n    mComponentsNames.add(QDViewPagerFragment.class);\n    mComponentsNames.add(QDLayoutFragment.class);\n    mComponentsNames.add(QDPriorityLinearLayoutFragment.class);\n    mComponentsNames.add(QDSectionLayoutFragment.class);\n    mComponentsNames.add(QDContinuousNestedScrollFragment.class);\n    mComponentsNames.add(QDSliderFragment.class);\n    mComponentsNames.add(QDPullFragment.class);\n    mComponentsNames.add(QDRecyclerViewDraggableScrollBarFragment.class);\n    mComponentsNames.add(QDRVSwipeActionFragment.class);\n}", "path": "QMUI_Android/qmuidemo/src/main/java/com/qmuiteam/qmuidemo/manager/QDDataManager.java", "commit_date": "2020-05-15 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * \u5b89\u5168\u7684\u521b\u5efabitmap\u3002\n * \u5982\u679c\u65b0\u5efa Bitmap \u65f6\u4ea7\u751f\u4e86 OOM\uff0c\u53ef\u4ee5\u4e3b\u52a8\u8fdb\u884c\u4e00\u6b21 GC - System.gc()\uff0c\u7136\u540e\u518d\u6b21\u5c1d\u8bd5\u521b\u5efa\u3002\n *\n * @param width      Bitmap \u5bbd\u5ea6\u3002\n * @param height     Bitmap \u9ad8\u5ea6\u3002\n * @param config     \u4f20\u5165\u4e00\u4e2a Bitmap.Config\u3002\n * @param retryCount \u521b\u5efa Bitmap \u65f6\u4ea7\u751f OOM \u540e\uff0c\u4e3b\u52a8\u91cd\u8bd5\u7684\u6b21\u6570\u3002\n * @return \u8fd4\u56de\u521b\u5efa\u7684 Bitmap\u3002\n */\n", "func_signal": "public static Bitmap createBitmapSafely(int width, int height, Bitmap.Config config, int retryCount)", "code": "{\n    try {\n        return Bitmap.createBitmap(width, height, config);\n    } catch (OutOfMemoryError e) {\n        e.printStackTrace();\n        if (retryCount > 0) {\n            System.gc();\n            return createBitmapSafely(width, height, config, retryCount - 1);\n        }\n        return null;\n    }\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/util/QMUIDrawableHelper.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * \u8bbe\u7f6e\u8981\u88ab\u9009\u4e2d\u7684 Item \u7684\u4e0b\u6807\u3002\n * <p>\n * \u6ce8\u610f:\u4ec5\u5f53 {@link #mNeedRightMark} \u4e3a true \u65f6\u624d\u6709\u6548\u3002\n */\n", "func_signal": "public BottomListSheetBuilder setCheckedIndex(int checkedIndex)", "code": "{\n    mCheckedIndex = checkedIndex;\n    return this;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/widget/dialog/QMUIBottomSheet.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * \u4ece\u4e00\u4e2aview\u521b\u5efaBitmap\u3002\n * \u6ce8\u610f\u70b9\uff1a\u7ed8\u5236\u4e4b\u524d\u8981\u6e05\u6389 View \u7684\u7126\u70b9\uff0c\u56e0\u4e3a\u7126\u70b9\u53ef\u80fd\u4f1a\u6539\u53d8\u4e00\u4e2a View \u7684 UI \u72b6\u6001\u3002\n * \u6765\u6e90\uff1ahttps://github.com/tyrantgit/ExplosionField\n *\n * @param view  \u4f20\u5165\u4e00\u4e2a View\uff0c\u4f1a\u83b7\u53d6\u8fd9\u4e2a View \u7684\u5185\u5bb9\u521b\u5efa Bitmap\u3002\n * @param scale \u7f29\u653e\u6bd4\u4f8b\uff0c\u5bf9\u521b\u5efa\u7684 Bitmap \u8fdb\u884c\u7f29\u653e\uff0c\u6570\u503c\u652f\u6301\u4ece 0 \u5230 1\u3002\n */\n", "func_signal": "public static Bitmap createBitmapFromView(View view, float scale)", "code": "{\n    if (view instanceof ImageView) {\n        Drawable drawable = ((ImageView) view).getDrawable();\n        if (drawable != null && drawable instanceof BitmapDrawable) {\n            return ((BitmapDrawable) drawable).getBitmap();\n        }\n    }\n    view.clearFocus();\n    Bitmap bitmap = createBitmapSafely((int) (view.getWidth() * scale),\n            (int) (view.getHeight() * scale), Bitmap.Config.ARGB_8888, 1);\n    if (bitmap != null) {\n        synchronized (sCanvas) {\n            Canvas canvas = sCanvas;\n            canvas.setBitmap(bitmap);\n            canvas.save();\n            canvas.drawColor(Color.WHITE); // \u9632\u6b62 View \u4e0a\u9762\u6709\u4e9b\u533a\u57df\u7a7a\u767d\u5bfc\u81f4\u6700\u7ec8 Bitmap \u4e0a\u6709\u4e9b\u533a\u57df\u53d8\u9ed1\n            canvas.scale(scale, scale);\n            view.draw(canvas);\n            canvas.restore();\n            canvas.setBitmap(null);\n        }\n    }\n    return bitmap;\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/util/QMUIDrawableHelper.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/////////////// VectorDrawable /////////////////////\n", "func_signal": "public static\n@Nullable\nDrawable getVectorDrawable(Context context, @DrawableRes int resVector)", "code": "{\n    try {\n        return AppCompatResources.getDrawable(context, resVector);\n    } catch (Exception e) {\n        QMUILog.d(TAG, \"Error in getVectorDrawable. resVector=\" + resVector + \", resName=\" + context.getResources().getResourceName(resVector) + e.getMessage());\n        return null;\n    }\n}", "path": "QMUI_Android/qmui/src/main/java/com/qmuiteam/qmui/util/QMUIDrawableHelper.java", "commit_date": "2020-04-22 00:00:00", "repo_name": "Tencent/QMUI_Android", "stars": 14290, "license": "other", "language": "java", "size": 21951}
{"docstring": "/**\n * Handle the created view\n *\n * @param view    nullable.\n * @param context shouldn't be null.\n * @param attrs   shouldn't be null.\n * @return null if null is passed in.\n */\n", "func_signal": "public View onViewCreated(View view, Context context, AttributeSet attrs)", "code": "{\n    if (view != null && view.getTag(R.id.calligraphy_tag_id) != Boolean.TRUE) {\n        onViewCreatedInternal(view, context, attrs);\n        view.setTag(R.id.calligraphy_tag_id, Boolean.TRUE);\n    }\n    return view;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java", "commit_date": "2017-07-17 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "// ===\n// Wrapping goodies\n// ===\n", "func_signal": "@Override\npublic View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)", "code": "{\n    setPrivateFactoryInternal();\n    return super.inflate(parser, root, attachToRoot);\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * AppCompat will inflate special versions of views for Material tinting etc,\n * this adds those classes to the style lookup map\n */\n", "func_signal": "private static void addAppCompatViews()", "code": "{\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatTextView.class, android.R.attr.textViewStyle);\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatButton.class, android.R.attr.buttonStyle);\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatEditText.class, android.R.attr.editTextStyle);\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatAutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatMultiAutoCompleteTextView.class, android.R.attr.autoCompleteTextViewStyle);\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatCheckBox.class, android.R.attr.checkboxStyle);\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatRadioButton.class, android.R.attr.radioButtonStyle);\n    DEFAULT_STYLES.put(android.support.v7.widget.AppCompatCheckedTextView.class, android.R.attr.checkedTextViewStyle);\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java", "commit_date": "2016-04-28 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * An even dirtier way to see if the TextView is part of the ActionBar\n *\n * @param view TextView to check is Title\n * @return true if it is.\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\nprotected static boolean isActionBarTitle(TextView view)", "code": "{\n    if (matchesResourceIdName(view, ACTION_BAR_TITLE)) return true;\n    if (parentIsToolbarV7(view)) {\n        final android.support.v7.widget.Toolbar parent = (android.support.v7.widget.Toolbar) view.getParent();\n        return TextUtils.equals(parent.getTitle(), view.getText());\n    }\n    return false;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java", "commit_date": "2017-07-17 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Applies a Typeface to a TextView, if deferred,its recommend you don't call this multiple\n * times, as this adds a TextWatcher.\n *\n * Deferring should really only be used on tricky views which get Typeface set by the system at\n * weird times.\n *\n * @param textView Not null, TextView or child of.\n * @param typeface Not null, Typeface to apply to the TextView.\n * @param deferred If true we use Typefaces and TextChange listener to make sure font is always\n *                 applied, but this sometimes conflicts with other\n *                 {@link android.text.Spannable}'s.\n * @return true if applied otherwise false.\n * @see #applyFontToTextView(android.widget.TextView, android.graphics.Typeface)\n */\n", "func_signal": "public static boolean applyFontToTextView(final TextView textView, final Typeface typeface, boolean deferred)", "code": "{\n    if (textView == null || typeface == null) return false;\n    textView.setPaintFlags(textView.getPaintFlags() | Paint.SUBPIXEL_TEXT_FLAG | Paint.ANTI_ALIAS_FLAG);\n    textView.setTypeface(typeface);\n    if (deferred) {\n        textView.setText(applyTypefaceSpan(textView.getText(), typeface), TextView.BufferType.SPANNABLE);\n        textView.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n                applyTypefaceSpan(s, typeface);\n            }\n        });\n    }\n    return true;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java", "commit_date": "2015-12-10 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Override the default AttributeId, this will always take the custom attribute defined here\n * and ignore the one set in {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig}.\n *\n * Remember if you are defining default in the\n * {@link uk.co.chrisjenx.calligraphy.CalligraphyConfig} make sure this is initialised before\n * the activity is created.\n *\n * @param base        ContextBase to Wrap\n * @param attributeId Attribute to lookup.\n * @deprecated use {@link #wrap(android.content.Context)}\n */\n", "func_signal": "@Deprecated\npublic CalligraphyContextWrapper(Context base, int attributeId)", "code": "{\n    super(base);\n    mAttributeId = attributeId;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Set the default font if you don't define one else where in your styles.\n *\n * @param defaultFontAssetPath a path to a font file in the assets folder, e.g. \"fonts/Roboto-light.ttf\",\n *                             passing null will default to the device font-family.\n * @return this builder.\n */\n", "func_signal": "public Builder setDefaultFontPath(String defaultFontAssetPath)", "code": "{\n    this.isFontSet = !TextUtils.isEmpty(defaultFontAssetPath);\n    this.fontAssetPath = defaultFontAssetPath;\n    return this;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java", "commit_date": "2016-04-28 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Applies a custom typeface span to the text.\n *\n * @param s        text to apply it too.\n * @param typeface typeface to apply.\n * @return Either the passed in Object or new Spannable with the typeface span applied.\n */\n", "func_signal": "public static CharSequence applyTypefaceSpan(CharSequence s, Typeface typeface)", "code": "{\n    if (s != null && s.length() > 0) {\n        if (!(s instanceof Spannable)) {\n            s = new SpannableString(s);\n        }\n        ((Spannable) s).setSpan(TypefaceUtils.getSpan(typeface), 0, s.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n    }\n    return s;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java", "commit_date": "2015-12-10 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * A helper loading a custom font.\n *\n * @param assetManager App's asset manager.\n * @param filePath     The path of the file.\n * @return Return {@link android.graphics.Typeface} or null if the path is invalid.\n */\n", "func_signal": "public static Typeface load(final AssetManager assetManager, final String filePath)", "code": "{\n    synchronized (sCachedFonts) {\n        try {\n            if (!sCachedFonts.containsKey(filePath)) {\n                final Typeface typeface = Typeface.createFromAsset(assetManager, filePath);\n                sCachedFonts.put(filePath, typeface);\n                return typeface;\n            }\n        } catch (Exception e) {\n            Log.w(\"Calligraphy\", \"Can't create asset from \" + filePath + \". Make sure you have passed in the correct path and file name.\", e);\n            sCachedFonts.put(filePath, null);\n            return null;\n        }\n        return sCachedFonts.get(filePath);\n    }\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java", "commit_date": "2015-02-07 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * This defaults to R.attr.fontPath. So only override if you want to use your own attrId.\n *\n * @param fontAssetAttrId the custom attribute to look for fonts in assets.\n * @return this builder.\n */\n", "func_signal": "public Builder setFontAttrId(int fontAssetAttrId)", "code": "{\n    this.attrId = fontAssetAttrId;\n    return this;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java", "commit_date": "2016-04-28 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Will forcibly set text on the views then remove ones that didn't have copy.\n *\n * @param view toolbar view.\n */\n", "func_signal": "private void applyFontToToolbar(final Toolbar view)", "code": "{\n    final CharSequence previousTitle = view.getTitle();\n    final CharSequence previousSubtitle = view.getSubtitle();\n    // The toolbar inflates both the title and the subtitle views lazily but luckily they do it\n    // synchronously when you set a title and a subtitle programmatically.\n    // So we set a title and a subtitle to something, then get the views, then revert.\n    view.setTitle(\"uk.co.chrisjenx.calligraphy:toolbar_title\");\n    view.setSubtitle(\"uk.co.chrisjenx.calligraphy:toolbar_subtitle\");\n\n    // Iterate through the children to run post inflation on them\n    final int childCount = view.getChildCount();\n    for (int i = 0; i < childCount; i++) {\n        onViewCreated(view.getChildAt(i), view.getContext(), null);\n    }\n    // Remove views from view if they didn't have copy set.\n    view.setTitle(previousTitle);\n    view.setSubtitle(previousSubtitle);\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java", "commit_date": "2017-07-17 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * <p>Turn of the use of Reflection to inject the private factory.\n * This has operational consequences! Please read and understand before disabling.\n * <b>This is already disabled on pre Honeycomb devices. (API 11)</b></p>\n *\n * <p> If you disable this you will need to override your {@link android.app.Activity#onCreateView(android.view.View, String, android.content.Context, android.util.AttributeSet)}\n * as this is set as the {@link android.view.LayoutInflater} private factory.</p>\n * <br>\n * <b> Use the following code in the Activity if you disable FactoryInjection:</b>\n * <pre><code>\n * {@literal @}Override\n * {@literal @}TargetApi(Build.VERSION_CODES.HONEYCOMB)\n * public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {\n *   return CalligraphyContextWrapper.onActivityCreateView(this, parent, super.onCreateView(parent, name, context, attrs), name, context, attrs);\n * }\n * </code></pre>\n */\n", "func_signal": "public Builder disablePrivateFactoryInjection()", "code": "{\n    this.reflection = false;\n    return this;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java", "commit_date": "2016-04-28 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Register custom non-{@code TextView}'s which implement {@code setTypeface} so they can have the Typeface applied during inflation.\n */\n", "func_signal": "public Builder addCustomViewWithSetTypeface(Class<?> clazz)", "code": "{\n    customViewTypefaceSupport = true;\n    mHasTypefaceClasses.add(clazz);\n    return this;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java", "commit_date": "2016-04-28 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Nasty method to inflate custom layouts that haven't been handled else where. If this fails it\n * will fall back through to the PhoneLayoutInflater method of inflating custom views where\n * Calligraphy will NOT have a hook into.\n *\n * @param parent      parent view\n * @param view        view if it has been inflated by this point, if this is not null this method\n *                    just returns this value.\n * @param name        name of the thing to inflate.\n * @param viewContext Context to inflate by if parent is null\n * @param attrs       Attr for this view which we can steal fontPath from too.\n * @return view or the View we inflate in here.\n */\n", "func_signal": "private View createCustomViewInternal(View parent, View view, String name, Context viewContext, AttributeSet attrs)", "code": "{\n    // I by no means advise anyone to do this normally, but Google have locked down access to\n    // the createView() method, so we never get a callback with attributes at the end of the\n    // createViewFromTag chain (which would solve all this unnecessary rubbish).\n    // We at the very least try to optimise this as much as possible.\n    // We only call for customViews (As they are the ones that never go through onCreateView(...)).\n    // We also maintain the Field reference and make it accessible which will make a pretty\n    // significant difference to performance on Android 4.0+.\n\n    // If CustomViewCreation is off skip this.\n    if (!CalligraphyConfig.get().isCustomViewCreation()) return view;\n    if (view == null && name.indexOf('.') > -1) {\n        if (mConstructorArgs == null)\n            mConstructorArgs = ReflectionUtils.getField(LayoutInflater.class, \"mConstructorArgs\");\n\n        final Object[] mConstructorArgsArr = (Object[]) ReflectionUtils.getValue(mConstructorArgs, this);\n        final Object lastContext = mConstructorArgsArr[0];\n        // The LayoutInflater actually finds out the correct context to use. We just need to set\n        // it on the mConstructor for the internal method.\n        // Set the constructor ars up for the createView, not sure why we can't pass these in.\n        mConstructorArgsArr[0] = viewContext;\n        ReflectionUtils.setValue(mConstructorArgs, this, mConstructorArgsArr);\n        try {\n            view = createView(name, null, attrs);\n        } catch (ClassNotFoundException ignored) {\n        } finally {\n            mConstructorArgsArr[0] = lastContext;\n            ReflectionUtils.setValue(mConstructorArgs, this, mConstructorArgsArr);\n        }\n    }\n    return view;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Resolving font path from xml attrs, style attrs or text appearance\n */\n", "func_signal": "private String resolveFontPath(Context context, AttributeSet attrs)", "code": "{\n    // Try view xml attributes\n    String textViewFont = CalligraphyUtils.pullFontPathFromView(context, attrs, mAttributeId);\n\n    // Try view style attributes\n    if (TextUtils.isEmpty(textViewFont)) {\n        textViewFont = CalligraphyUtils.pullFontPathFromStyle(context, attrs, mAttributeId);\n    }\n\n    // Try View TextAppearance\n    if (TextUtils.isEmpty(textViewFont)) {\n        textViewFont = CalligraphyUtils.pullFontPathFromTextAppearance(context, attrs, mAttributeId);\n    }\n\n    return textViewFont;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java", "commit_date": "2017-07-17 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Used by Calligraphy to change view's typeface\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic void setTypeface(Typeface tf)", "code": "{\n    paint.setTypeface(tf);\n    invalidate();\n}", "path": "Calligraphy/CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CustomViewWithTypefaceSupport.java", "commit_date": "2015-09-29 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Due to the poor inflation order where custom views are created and never returned inside an\n * {@code onCreateView(...)} method. We have to create CustomView's at the latest point in the\n * overrideable injection flow.\n *\n * On HoneyComb+ this is inside the {@link android.app.Activity#onCreateView(android.view.View, String, android.content.Context, android.util.AttributeSet)}\n * Pre HoneyComb this is in the {@link android.view.LayoutInflater.Factory#onCreateView(String, android.util.AttributeSet)}\n *\n * We wrap base implementations, so if you LayoutInflater/Factory/Activity creates the\n * custom view before we get to this point, your view is used. (Such is the case with the\n * TintEditText etc)\n *\n * The problem is, the native methods pass there parents context to the constructor in a really\n * specific place. We have to mimic this in {@link uk.co.chrisjenx.calligraphy.CalligraphyLayoutInflater#createCustomViewInternal(android.view.View, android.view.View, String, android.content.Context, android.util.AttributeSet)}\n * To mimic this we have to use reflection as the Class constructor args are hidden to us.\n *\n * We have discussed other means of doing this but this is the only semi-clean way of doing it.\n * (Without having to do proxy classes etc).\n *\n * Calling this will of course speed up inflation by turning off reflection, but not by much,\n * But if you want Calligraphy to inject the correct typeface then you will need to make sure your CustomView's\n * are created before reaching the LayoutInflater onViewCreated.\n */\n", "func_signal": "public Builder disableCustomViewInflation()", "code": "{\n    this.customViewCreation = false;\n    return this;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java", "commit_date": "2016-04-28 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * The LayoutInflater onCreateView is the fourth port of call for LayoutInflation.\n * BUT only for none CustomViews.\n * Basically if this method doesn't inflate the View nothing probably will.\n */\n", "func_signal": "@Override\nprotected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoundException", "code": "{\n    // This mimics the {@code PhoneLayoutInflater} in the way it tries to inflate the base\n    // classes, if this fails its pretty certain the app will fail at this point.\n    View view = null;\n    for (String prefix : sClassPrefixList) {\n        try {\n            view = createView(name, prefix, attrs);\n        } catch (ClassNotFoundException ignored) {\n        }\n    }\n    // In this case we want to let the base class take a crack\n    // at it.\n    if (view == null) view = super.onCreateView(name, attrs);\n\n    return mCalligraphyFactory.onViewCreated(view, view.getContext(), attrs);\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * We don't want to unnecessary create/set our factories if there are none there. We try to be\n * as lazy as possible.\n */\n", "func_signal": "private void setUpLayoutFactories(boolean cloned)", "code": "{\n    if (cloned) return;\n    // If we are HC+ we get and set Factory2 otherwise we just wrap Factory1\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        if (getFactory2() != null && !(getFactory2() instanceof WrapperFactory2)) {\n            // Sets both Factory/Factory2\n            setFactory2(getFactory2());\n        }\n    }\n    // We can do this as setFactory2 is used for both methods.\n    if (getFactory() != null && !(getFactory() instanceof WrapperFactory)) {\n        setFactory(getFactory());\n    }\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * The current Calligraphy Config.\n * If not set it will create a default config.\n */\n", "func_signal": "public static CalligraphyConfig get()", "code": "{\n    if (sInstance == null)\n        sInstance = new CalligraphyConfig(new Builder());\n    return sInstance;\n}", "path": "Calligraphy/calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyConfig.java", "commit_date": "2016-04-28 00:00:00", "repo_name": "chrisjenx/Calligraphy", "stars": 8587, "license": "apache-2.0", "language": "java", "size": 1523}
{"docstring": "/**\n * Return a random stock trade with a unique id every time.\n *\n */\n", "func_signal": "public StockTrade getRandomTrade()", "code": "{\n    // pick a random stock\n    StockPrice stockPrice = STOCK_PRICES.get(random.nextInt(STOCK_PRICES.size()));\n    // pick a random deviation between -MAX_DEVIATION and +MAX_DEVIATION\n    double deviation = (random.nextDouble() - 0.5) * 2.0 * MAX_DEVIATION;\n    // set the price using the deviation and mean price\n    double price = stockPrice.price * (1 + deviation);\n    // round price to 2 decimal places\n    price = Math.round(price * 100.0) / 100.0;\n\n    // set the trade type to buy or sell depending on the probability of sell\n    StockTrade.TradeType tradeType = StockTrade.TradeType.BUY;\n    if (random.nextDouble() < PROBABILITY_SELL) {\n        tradeType = StockTrade.TradeType.SELL;\n    }\n\n    // randomly pick a quantity of shares\n    long quantity = random.nextInt(MAX_QUANTITY) + 1; // add 1 because nextInt() will return between 0 (inclusive)\n    // and MAX_QUANTITY (exclusive). we want at least 1 share.\n\n    return new StockTrade(stockPrice.tickerSymbol, tradeType, price, quantity, id.getAndIncrement());\n}", "path": "aws-doc-sdk-examples/javav2/example_code/firehose/src/main/java/com/example/firehose/StockTradeGenerator.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Gets the job results by calling GetLabelDetection\n", "func_signal": "private static void GetResultsLabels(RekognitionClient rekClient)", "code": "{\n\n    int maxResults=10;\n    String paginationToken=null;\n    GetLabelDetectionResponse labelDetectionResult=null;\n\n    try {\n        do {\n            if (labelDetectionResult !=null)\n                paginationToken = labelDetectionResult.nextToken();\n\n\n            GetLabelDetectionRequest labelDetectionRequest= GetLabelDetectionRequest.builder()\n                    .jobId(startJobId)\n                    .sortBy(LabelDetectionSortBy.TIMESTAMP)\n                    .maxResults(maxResults)\n                    .nextToken(paginationToken)\n                    .build();\n\n            labelDetectionResult = rekClient.getLabelDetection(labelDetectionRequest);\n            VideoMetadata videoMetaData=labelDetectionResult.videoMetadata();\n\n            System.out.println(\"Format: \" + videoMetaData.format());\n            System.out.println(\"Codec: \" + videoMetaData.codec());\n            System.out.println(\"Duration: \" + videoMetaData.durationMillis());\n            System.out.println(\"FrameRate: \" + videoMetaData.frameRate());\n\n            List<LabelDetection> detectedLabels= labelDetectionResult.labels();\n            for (LabelDetection detectedLabel: detectedLabels) {\n                long seconds=detectedLabel.timestamp();\n                Label label=detectedLabel.label();\n                System.out.println(\"Millisecond: \" + Long.toString(seconds) + \" \");\n\n                System.out.println(\"   Label:\" + label.name());\n                System.out.println(\"   Confidence:\" + detectedLabel.label().confidence().toString());\n\n                List<Instance> instances = label.instances();\n                System.out.println(\"   Instances of \" + label.name());\n\n                if (instances.isEmpty()) {\n                    System.out.println(\"        \" + \"None\");\n                }  else {\n                    for (Instance instance : instances) {\n                        System.out.println(\"        Confidence: \" + instance.confidence().toString());\n                        System.out.println(\"        Bounding box: \" + instance.boundingBox().toString());\n                    }\n                }\n                System.out.println(\"   Parent labels for \" + label.name() + \":\");\n                List<Parent> parents = label.parents();\n\n                if (parents.isEmpty()) {\n                    System.out.println(\"        None\");\n                } else {\n                    for (Parent parent : parents) {\n                        System.out.println(\"        \" + parent.name());\n                    }\n                }\n                System.out.println();\n            }\n        } while (labelDetectionResult !=null && labelDetectionResult.nextToken() != null);\n\n    } catch(RekognitionException e) {\n        e.getMessage();\n        System.exit(1);\n    }\n}", "path": "aws-doc-sdk-examples/javav2/example_code/rekognition/src/main/java/com/example/rekognition/VideoDetect.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Submits a sample query to Amazon Athena and returns the execution ID of the query\n", "func_signal": "public static String submitAthenaQuery(AthenaClient athenaClient)", "code": "{\n\n    try {\n\n        // The QueryExecutionContext allows us to set the database\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n            .database(ExampleConstants.ATHENA_DEFAULT_DATABASE).build();\n\n        // The result configuration specifies where the results of the query should go\n        ResultConfiguration resultConfiguration = ResultConfiguration.builder()\n                .outputLocation(ExampleConstants.ATHENA_OUTPUT_BUCKET)\n                .build();\n\n        StartQueryExecutionRequest startQueryExecutionRequest = StartQueryExecutionRequest.builder()\n                .queryString(ExampleConstants.ATHENA_SAMPLE_QUERY)\n                .queryExecutionContext(queryExecutionContext)\n            .   resultConfiguration(resultConfiguration)\n                .build();\n\n        StartQueryExecutionResponse startQueryExecutionResponse = athenaClient.startQueryExecution(startQueryExecutionRequest);\n        return startQueryExecutionResponse.queryExecutionId();\n\n    } catch (AthenaException e) {\n        e.printStackTrace();\n        System.exit(1);\n    }\n    return \"\";\n}", "path": "aws-doc-sdk-examples/javav2/example_code/athena/src/main/java/aws/example/athena/StartQueryExample.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// This code retrieves the results of a query\n", "func_signal": "public static void processResultRows(AthenaClient athenaClient, String queryExecutionId)", "code": "{\n\n   try {\n\n       // Max Results can be set but if its not set,\n       // it will choose the maximum page size\n        GetQueryResultsRequest getQueryResultsRequest = GetQueryResultsRequest.builder()\n                .queryExecutionId(queryExecutionId)\n                .build();\n\n        GetQueryResultsIterable getQueryResultsResults = athenaClient.getQueryResultsPaginator(getQueryResultsRequest);\n\n        for (GetQueryResultsResponse result : getQueryResultsResults) {\n            List<ColumnInfo> columnInfoList = result.resultSet().resultSetMetadata().columnInfo();\n            List<Row> results = result.resultSet().rows();\n            processRow(results, columnInfoList);\n        }\n\n    } catch (AthenaException e) {\n       e.printStackTrace();\n       System.exit(1);\n   }\n}", "path": "aws-doc-sdk-examples/javav2/example_code/athena/src/main/java/aws/example/athena/StartQueryExample.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Wait for an Amazon Athena query to complete, fail or to be cancelled\n", "func_signal": "public static void waitForQueryToComplete(AthenaClient athenaClient, String queryExecutionId) throws InterruptedException", "code": "{\n    GetQueryExecutionRequest getQueryExecutionRequest = GetQueryExecutionRequest.builder()\n            .queryExecutionId(queryExecutionId).build();\n\n    GetQueryExecutionResponse getQueryExecutionResponse;\n    boolean isQueryStillRunning = true;\n    while (isQueryStillRunning) {\n        getQueryExecutionResponse = athenaClient.getQueryExecution(getQueryExecutionRequest);\n        String queryState = getQueryExecutionResponse.queryExecution().status().state().toString();\n        if (queryState.equals(QueryExecutionState.FAILED.toString())) {\n            throw new RuntimeException(\"The Amazon Athena query failed to run with error message: \" + getQueryExecutionResponse\n                    .queryExecution().status().stateChangeReason());\n        } else if (queryState.equals(QueryExecutionState.CANCELLED.toString())) {\n            throw new RuntimeException(\"The Amazon Athena query was cancelled.\");\n        } else if (queryState.equals(QueryExecutionState.SUCCEEDED.toString())) {\n            isQueryStillRunning = false;\n        } else {\n            // Sleep an amount of time before retrying again\n            Thread.sleep(ExampleConstants.SLEEP_AMOUNT_IN_MS);\n        }\n        System.out.println(\"The current status is: \" + queryState);\n    }\n}", "path": "aws-doc-sdk-examples/javav2/example_code/athena/src/main/java/aws/example/athena/StartQueryExample.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// snippet-start:[s3.java2.delete_bucket_policy.main]\n// Delete the bucket policy\n", "func_signal": "public static void deleteS3BucketPolicy(S3Client s3, String bucketName)", "code": "{\n\n   DeleteBucketPolicyRequest delReq = DeleteBucketPolicyRequest.builder()\n            .bucket(bucketName)\n            .build();\n    try {\n        s3.deleteBucketPolicy(delReq);\n        System.out.println(\"Done!\");\n\n    } catch (S3Exception e) {\n        System.err.println(e.awsErrorDetails().errorMessage());\n        System.exit(1);\n    }\n}", "path": "aws-doc-sdk-examples/javav2/example_code/s3/src/main/java/com/example/s3/DeleteBucketPolicy.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Show bounding box at supplied location.\n", "func_signal": "private void ShowBoundingBox(int imageHeight, int imageWidth, BoundingBox box, Graphics2D g2d)", "code": "{\n\n    float left = imageWidth * box.getLeft();\n    float top = imageHeight * box.getTop();\n\n    // Display bounding box.\n    g2d.setColor(new Color(0, 212, 0));\n    g2d.drawRect(Math.round(left), Math.round(top),\n            Math.round(imageWidth * box.getWidth()), Math.round(imageHeight * box.getHeight()));\n\n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/DocumentText.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Draws the image and text bounding box.\n", "func_signal": "public void paintComponent(Graphics g)", "code": "{\n\n    int height = image.getHeight(this);\n    int width = image.getWidth(this);\n\n    Graphics2D g2d = (Graphics2D) g; // Create a Java2D version of g.\n\n    // Draw the image.\n    g2d.drawImage(image, 0, 0, image.getWidth(this) , image.getHeight(this), this);\n\n    // Iterate through blocks and display polygons around lines of detected text.\n    List<Block> blocks = result.getBlocks();\n    for (Block block : blocks) {\n        DisplayBlockInfo(block);\n        if ((block.getBlockType()).equals(\"LINE\")) {\n            ShowPolygon(height, width, block.getGeometry().getPolygon(), g2d);\n            /*\n              ShowBoundingBox(height, width, block.getGeometry().getBoundingBox(), g2d);\n             */\n        } else { // its a word, so just show vertical lines.\n            ShowPolygonVerticals(height, width, block.getGeometry().getPolygon(), g2d);\n        }\n    }\n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/DocumentText.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Draws only the vertical lines in the supplied polygon.\n", "func_signal": "private void ShowPolygonVerticals(int imageHeight, int imageWidth, List<Point> points, Graphics2D g2d)", "code": "{\n\n    g2d.setColor(new Color(0, 212, 0));\n    Object[] parry = points.toArray();\n    g2d.setStroke(new BasicStroke(2));\n\n    g2d.drawLine(Math.round(((Point) parry[0]).getX() * imageWidth),\n            Math.round(((Point) parry[0]).getY() * imageHeight), Math.round(((Point) parry[3]).getX() * imageWidth),\n            Math.round(((Point) parry[3]).getY() * imageHeight));\n\n    g2d.setColor(new Color(255, 0, 0));\n    g2d.drawLine(Math.round(((Point) parry[1]).getX() * imageWidth),\n            Math.round(((Point) parry[1]).getY() * imageHeight), Math.round(((Point) parry[2]).getX() * imageWidth),\n            Math.round(((Point) parry[2]).getY() * imageHeight));\n\n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/DocumentText.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "//snippet-start:[personalize.java2.describe_solution.main]\n", "func_signal": "public static void describeSpecificSolution(PersonalizeClient personalizeClient, String solutionArn)", "code": "{\n\n try {\n    DescribeSolutionRequest solutionRequest = DescribeSolutionRequest.builder()\n            .solutionArn(solutionArn)\n            .build();\n\n    DescribeSolutionResponse response = personalizeClient.describeSolution(solutionRequest);\n    System.out.println(\"The Solution name is \"+response.solution().name());\n\n    } catch (PersonalizeException e) {\n        System.err.println(e.awsErrorDetails().errorMessage());\n        System.exit(1);\n    }\n}", "path": "aws-doc-sdk-examples/javav2/example_code/personalize/src/main/java/com/example/personalize/DescribeSolution.java", "commit_date": "2020-11-23 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// snippet-start:[rds.java2.create_instance.main]\n", "func_signal": "public static void createDatabaseInstance(RdsClient rdsClient,\n                                          String dbInstanceIdentifier,\n                                          String dbName,\n                                          String masterUsername,\n                                          String masterUserPassword)", "code": "{\n\n    try {\n        CreateDbInstanceRequest instanceRequest = CreateDbInstanceRequest.builder()\n                .dbInstanceIdentifier(dbInstanceIdentifier)\n                .allocatedStorage(100)\n                .dbName(dbName)\n                .engine(\"mysql\")\n                .dbInstanceClass(\"db.m4.large\")\n                .engineVersion(\"8.0.15\")\n                .storageType(\"standard\")\n                .masterUsername(masterUsername)\n                .masterUserPassword(masterUserPassword)\n                .build();\n\n        CreateDbInstanceResponse response = rdsClient.createDBInstance(instanceRequest);\n        System.out.print(\"The status is \" + response.dbInstance().dbInstanceStatus());\n\n    } catch (RdsException e) {\n        System.out.println(e.getLocalizedMessage());\n        System.exit(1);\n    }\n    // snippet-end:[rds.java2.create_instance.main]\n}", "path": "aws-doc-sdk-examples/javav2/example_code/rds/src/main/java/com/example/rds/CreateDBInstance.java", "commit_date": "2020-11-23 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "//snippet-start:[athena.java2.StartQueryExample.main]\n", "func_signal": "public static void main(String[] args) throws InterruptedException", "code": "{\n\n    AthenaClient athenaClient = AthenaClient.builder()\n            .region(Region.US_WEST_2)\n            .build();\n\n    String queryExecutionId = submitAthenaQuery(athenaClient);\n    waitForQueryToComplete(athenaClient, queryExecutionId);\n    processResultRows(athenaClient, queryExecutionId);\n    athenaClient.close();\n}", "path": "aws-doc-sdk-examples/javav2/example_code/athena/src/main/java/aws/example/athena/StartQueryExample.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Show bounding box at supplied location.\n", "func_signal": "private void ShowBoundingBox(int imageHeight, int imageWidth, BoundingBox box, Graphics2D g2d, Color color)", "code": "{\n\n    float left = imageWidth * box.getLeft();\n    float top = imageHeight * box.getTop();\n\n    // Display bounding box.\n    g2d.setColor(color);\n    g2d.drawRect(Math.round(left), Math.round(top),\n            Math.round(imageWidth * box.getWidth()), Math.round(imageHeight * box.getHeight()));\n\n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/AnalyzeDocument.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Shows polygon at supplied location\n", "func_signal": "private void ShowPolygon(int imageHeight, int imageWidth, List<Point> points, Graphics2D g2d)", "code": "{\n\n    g2d.setColor(new Color(0, 0, 0));\n    Polygon polygon = new Polygon();\n\n    // Construct polygon and display\n    for (Point point : points) {\n        polygon.addPoint((Math.round(point.getX() * imageWidth)),\n                Math.round(point.getY() * imageHeight));\n    }\n    g2d.drawPolygon(polygon);\n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/AnalyzeDocument.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "//Displays information from a block returned by text detection and text analysis\n", "func_signal": "private void DisplayBlockInfo(Block block)", "code": "{\n    System.out.println(\"Block Id : \" + block.getId());\n    if (block.getText()!=null)\n        System.out.println(\"    Detected text: \" + block.getText());\n    System.out.println(\"    Type: \" + block.getBlockType());\n    \n    if (block.getBlockType().equals(\"PAGE\") !=true) {\n        System.out.println(\"    Confidence: \" + block.getConfidence().toString());\n    }\n    if(block.getBlockType().equals(\"CELL\"))\n    {\n        System.out.println(\"    Cell information:\");\n        System.out.println(\"        Column: \" + block.getColumnIndex());\n        System.out.println(\"        Row: \" + block.getRowIndex());\n        System.out.println(\"        Column span: \" + block.getColumnSpan());\n        System.out.println(\"        Row span: \" + block.getRowSpan());\n\n    }\n    \n    System.out.println(\"    Relationships\");\n    List<Relationship> relationships=block.getRelationships();\n    if(relationships!=null) {\n        for (Relationship relationship : relationships) {\n            System.out.println(\"        Type: \" + relationship.getType());\n            System.out.println(\"        IDs: \" + relationship.getIds().toString());\n        }\n    } else {\n        System.out.println(\"        No related Blocks\");\n    }\n\n    System.out.println(\"    Geometry\");\n    System.out.println(\"        Bounding Box: \" + block.getGeometry().getBoundingBox().toString());\n    System.out.println(\"        Polygon: \" + block.getGeometry().getPolygon().toString());\n    \n    List<String> entityTypes = block.getEntityTypes();\n    \n    System.out.println(\"    Entity Types\");\n    if(entityTypes!=null) {\n        for (String entityType : entityTypes) {\n            System.out.println(\"        Entity Type: \" + entityType);\n        }\n    } else {\n        System.out.println(\"        No entity type\");\n    }\n    if(block.getPage()!=null)\n        System.out.println(\"    Page: \" + block.getPage());            \n    System.out.println();\n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/DocumentText.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "//snippet-end:[swf.java.activity_worker.sayHello]\n", "func_signal": "public static void main(String[] args)", "code": "{\n    //snippet-start:[swf.java.activity_worker.main]\n    while (true) {\n        //snippet-start:[swf.java.activity_worker.poll_method]\n        System.out.println(\"Polling for an activity task from the tasklist '\"\n                + HelloTypes.TASKLIST + \"' in the domain '\" +\n                HelloTypes.DOMAIN + \"'.\");\n\n        ActivityTask task = swf.pollForActivityTask(\n            new PollForActivityTaskRequest()\n                .withDomain(HelloTypes.DOMAIN)\n                .withTaskList(\n                    new TaskList().withName(HelloTypes.TASKLIST)));\n\n        String task_token = task.getTaskToken();\n        //snippet-end:[swf.java.activity_worker.poll_method]\n\n        //snippet-start:[swf.java.activity_worker.process_tasks]\n        if (task_token != null) {\n            String result = null;\n            Throwable error = null;\n\n            try {\n                System.out.println(\"Executing the activity task with input '\" +\n                        task.getInput() + \"'.\");\n                result = sayHello(task.getInput());\n            } catch (Throwable th) {\n                error = th;\n            }\n\n            if (error == null) {\n                System.out.println(\"The activity task succeeded with result '\"\n                        + result + \"'.\");\n                swf.respondActivityTaskCompleted(\n                    new RespondActivityTaskCompletedRequest()\n                        .withTaskToken(task_token)\n                        .withResult(result));\n            } else {\n                System.out.println(\"The activity task failed with the error '\"\n                        + error.getClass().getSimpleName() + \"'.\");\n                swf.respondActivityTaskFailed(\n                    new RespondActivityTaskFailedRequest()\n                        .withTaskToken(task_token)\n                        .withReason(error.getClass().getSimpleName())\n                        .withDetails(error.getMessage()));\n            }\n        }\n        //snippet-end:[swf.java.activity_worker.process_tasks]\n    }\n    //snippet-end:[swf.java.activity_worker.main]\n}", "path": "aws-doc-sdk-examples/java/example_code/swf/src/main/java/aws/example/helloswf/ActivityWorker.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "//Displays information from a block returned by text detection and text analysis\n", "func_signal": "private void DisplayBlockInfo(Block block)", "code": "{\n    System.out.println(\"Block Id : \" + block.getId());\n    if (block.getText()!=null)\n        System.out.println(\"    Detected text: \" + block.getText());\n    System.out.println(\"    Type: \" + block.getBlockType());\n    \n    if (block.getBlockType().equals(\"PAGE\") !=true) {\n        System.out.println(\"    Confidence: \" + block.getConfidence().toString());\n    }\n    if(block.getBlockType().equals(\"CELL\"))\n    {\n        System.out.println(\"    Cell information:\");\n        System.out.println(\"        Column: \" + block.getColumnIndex());\n        System.out.println(\"        Row: \" + block.getRowIndex());\n        System.out.println(\"        Column span: \" + block.getColumnSpan());\n        System.out.println(\"        Row span: \" + block.getRowSpan());\n\n    }\n    \n    System.out.println(\"    Relationships\");\n    List<Relationship> relationships=block.getRelationships();\n    if(relationships!=null) {\n        for (Relationship relationship : relationships) {\n            System.out.println(\"        Type: \" + relationship.getType());\n            System.out.println(\"        IDs: \" + relationship.getIds().toString());\n        }\n    } else {\n        System.out.println(\"        No related Blocks\");\n    }\n\n    System.out.println(\"    Geometry\");\n    System.out.println(\"        Bounding Box: \" + block.getGeometry().getBoundingBox().toString());\n    System.out.println(\"        Polygon: \" + block.getGeometry().getPolygon().toString());\n    \n    List<String> entityTypes = block.getEntityTypes();\n    \n    System.out.println(\"    Entity Types\");\n    if(entityTypes!=null) {\n        for (String entityType : entityTypes) {\n            System.out.println(\"        Entity Type: \" + entityType);\n        }\n    } else {\n        System.out.println(\"        No entity type\");\n    }\n    if(block.getPage()!=null)\n        System.out.println(\"    Page: \" + block.getPage());            \n    System.out.println();\n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/AnalyzeDocument.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// snippet-start:[rekognition.java2.recognize_video_detect.main]\n", "func_signal": "public static void startLabels(RekognitionClient rekClient,\n                               NotificationChannel channel,\n                               String bucket,\n                               String video)", "code": "{\n    try {\n        S3Object s3Obj = S3Object.builder()\n                .bucket(bucket)\n                .name(video)\n                .build();\n\n        Video vidOb = Video.builder()\n                .s3Object(s3Obj)\n                .build();\n\n        StartLabelDetectionRequest labelDetectionRequest = StartLabelDetectionRequest.builder()\n                .jobTag(\"DetectingLabels\")\n                .notificationChannel(channel)\n                .video(vidOb)\n                .minConfidence(50F)\n                .build();\n\n        StartLabelDetectionResponse labelDetectionResponse = rekClient.startLabelDetection(labelDetectionRequest);\n        startJobId = labelDetectionResponse.jobId();\n\n        boolean ans = true;\n        String status = \"\";\n        int yy = 0;\n        while (ans) {\n\n            GetLabelDetectionRequest detectionRequest = GetLabelDetectionRequest.builder()\n                    .jobId(startJobId)\n                    .maxResults(10)\n                    .build();\n\n            GetLabelDetectionResponse result = rekClient.getLabelDetection(detectionRequest);\n            status = result.jobStatusAsString();\n\n            if (status.compareTo(\"SUCCEEDED\") == 0)\n                ans = false;\n            else\n                System.out.println(yy +\" status is: \"+status);\n\n            Thread.sleep(1000);\n            yy++;\n        }\n\n        System.out.println(startJobId +\" status is: \"+status);\n    } catch(RekognitionException | InterruptedException e) {\n        e.getMessage();\n        System.exit(1);\n    }\n}", "path": "aws-doc-sdk-examples/javav2/example_code/rekognition/src/main/java/com/example/rekognition/VideoDetect.java", "commit_date": "2020-12-07 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Waits until the database instance is available\n", "func_signal": "public static void waitForInstanceReady(RdsClient rdsClient, String dbInstanceIdentifier)", "code": "{\n\n    Boolean instanceReady = false;\n    String instanceReadyStr = \"\";\n    System.out.println(\"Waiting for instance to become available.\");\n\n    try {\n        DescribeDbInstancesRequest instanceRequest = DescribeDbInstancesRequest.builder()\n        .dbInstanceIdentifier(dbInstanceIdentifier)\n                .build();\n\n        // Loop until the cluster is ready\n        while (!instanceReady) {\n\n            DescribeDbInstancesResponse response = rdsClient.describeDBInstances(instanceRequest);\n            List<DBInstance> instanceList = response.dbInstances();\n\n            for (DBInstance instance : instanceList) {\n\n                instanceReadyStr = instance.dbInstanceStatus();\n                if (instanceReadyStr.contains(\"available\"))\n                    instanceReady = true;\n                else {\n                    System.out.print(\".\");\n                    Thread.sleep(sleepTime * 1000);\n                }\n            }\n        }\n        System.out.println(\"Database instance is available!\");\n\n    } catch (RdsException | InterruptedException e) {\n\n        System.err.println(e.getMessage());\n        System.exit(1);\n    }\n}", "path": "aws-doc-sdk-examples/javav2/example_code/rds/src/main/java/com/example/rds/CreateDBInstance.java", "commit_date": "2020-11-23 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "// Draws the image and text bounding box.\n", "func_signal": "public void paintComponent(Graphics g)", "code": "{\n\n    int height = image.getHeight(this);\n    int width = image.getWidth(this);\n\n    Graphics2D g2d = (Graphics2D) g; // Create a Java2D version of g.\n\n    // Draw the image.\n    g2d.drawImage(image, 0, 0, image.getWidth(this), image.getHeight(this), this);\n\n    // Iterate through blocks and display bounding boxes around everything.\n\n    List<Block> blocks = result.getBlocks();\n    for (Block block : blocks) {\n        DisplayBlockInfo(block);\n        switch(block.getBlockType()) {\n        \n        case \"KEY_VALUE_SET\":\n            if (block.getEntityTypes().contains(\"KEY\")){\n                ShowBoundingBox(height, width, block.getGeometry().getBoundingBox(), g2d, new Color(255,0,0));\n            }\n            else {  //VALUE\n                ShowBoundingBox(height, width, block.getGeometry().getBoundingBox(), g2d, new Color(0,255,0));\n            }\n            break;\n        case \"TABLE\":\n            ShowBoundingBox(height, width, block.getGeometry().getBoundingBox(), g2d, new Color(0,0,255));\n            break;\n        case \"CELL\":\n            ShowBoundingBox(height, width, block.getGeometry().getBoundingBox(), g2d, new Color(255,255,0));\n            break;\n        default:\n            //PAGE, LINE & WORD\n            //ShowBoundingBox(height, width, block.getGeometry().getBoundingBox(), g2d, new Color(200,200,0));\n        }\n    }\n\n     // uncomment to show polygon around all blocks\n     //ShowPolygon(height,width,block.getGeometry().getPolygon(),g2d);\n  \n  \n}", "path": "aws-doc-sdk-examples/java/example_code/textract/src/main/java/com/amazonaws/samples/AnalyzeDocument.java", "commit_date": "2019-09-09 00:00:00", "repo_name": "awsdocs/aws-doc-sdk-examples", "stars": 8741, "license": "apache-2.0", "language": "java", "size": 269606}
{"docstring": "/**\n * Build postcard by uri\n */\n", "func_signal": "protected Postcard build(Uri uri)", "code": "{\n    if (null == uri || TextUtils.isEmpty(uri.toString())) {\n        throw new HandlerException(Consts.TAG + \"Parameter invalid!\");\n    } else {\n        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);\n        if (null != pService) {\n            uri = pService.forUri(uri);\n        }\n        return new Postcard(uri.getPath(), extractGroup(uri.getPath()), uri, null);\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/launcher/_ARouter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Start activity\n *\n * @see ActivityCompat\n */\n", "func_signal": "private void startActivity(int requestCode, Context currentContext, Intent intent, Postcard postcard, NavigationCallback callback)", "code": "{\n    if (requestCode >= 0) {  // Need start for result\n        if (currentContext instanceof Activity) {\n            ActivityCompat.startActivityForResult((Activity) currentContext, intent, requestCode, postcard.getOptionsBundle());\n        } else {\n            logger.warning(Consts.TAG, \"Must use [navigation(activity, ...)] to support [startActivityForResult]\");\n        }\n    } else {\n        ActivityCompat.startActivity(currentContext, intent, postcard.getOptionsBundle());\n    }\n\n    if ((-1 != postcard.getEnterAnim() && -1 != postcard.getExitAnim()) && currentContext instanceof Activity) {    // Old version.\n        ((Activity) currentContext).overridePendingTransition(postcard.getEnterAnim(), postcard.getExitAnim());\n    }\n\n    if (null != callback) { // Navigation over.\n        callback.onArrival(postcard);\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/launcher/_ARouter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Build postcard by path and group\n */\n", "func_signal": "protected Postcard build(String path, String group, Boolean afterReplace)", "code": "{\n    if (TextUtils.isEmpty(path) || TextUtils.isEmpty(group)) {\n        throw new HandlerException(Consts.TAG + \"Parameter is invalid!\");\n    } else {\n        if (!afterReplace) {\n            PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);\n            if (null != pService) {\n                path = pService.forString(path);\n            }\n        }\n        return new Postcard(path, group);\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/launcher/_ARouter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Extract the default group from path.\n */\n", "func_signal": "private String extractGroup(String path)", "code": "{\n    if (TextUtils.isEmpty(path) || !path.startsWith(\"/\")) {\n        throw new HandlerException(Consts.TAG + \"Extract the default group failed, the path must be start with '/' and contain more than 2 '/'!\");\n    }\n\n    try {\n        String defaultGroup = path.substring(1, path.indexOf(\"/\", 1));\n        if (TextUtils.isEmpty(defaultGroup)) {\n            throw new HandlerException(Consts.TAG + \"Extract the default group failed! There's nothing between 2 '/'!\");\n        } else {\n            return defaultGroup;\n        }\n    } catch (Exception e) {\n        logger.warning(Consts.TAG, \"Failed to extract default group! \" + e.getMessage());\n        return null;\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/launcher/_ARouter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * LogisticsCenter init, load all metas in memory. Demand initialization\n */\n", "func_signal": "public synchronized static void init(Context context, ThreadPoolExecutor tpe) throws HandlerException", "code": "{\n    mContext = context;\n    executor = tpe;\n\n    try {\n        long startInit = System.currentTimeMillis();\n        //load by plugin first\n        loadRouterMap();\n        if (registerByPlugin) {\n            logger.info(TAG, \"Load router map by arouter-auto-register plugin.\");\n        } else {\n            Set<String> routerMap;\n\n            // It will rebuild router map every times when debuggable.\n            if (ARouter.debuggable() || PackageUtils.isNewVersion(context)) {\n                logger.info(TAG, \"Run with debug mode or new install, rebuild router map.\");\n                // These class was generated by arouter-compiler.\n                routerMap = ClassUtils.getFileNameByPackageName(mContext, ROUTE_ROOT_PAKCAGE);\n                if (!routerMap.isEmpty()) {\n                    context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(AROUTER_SP_KEY_MAP, routerMap).apply();\n                }\n\n                PackageUtils.updateVersion(context);    // Save new version name when router map update finishes.\n            } else {\n                logger.info(TAG, \"Load router map from cache.\");\n                routerMap = new HashSet<>(context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(AROUTER_SP_KEY_MAP, new HashSet<String>()));\n            }\n\n            logger.info(TAG, \"Find router map finished, map size = \" + routerMap.size() + \", cost \" + (System.currentTimeMillis() - startInit) + \" ms.\");\n            startInit = System.currentTimeMillis();\n\n            for (String className : routerMap) {\n                if (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_ROOT)) {\n                    // This one of root elements, load root.\n                    ((IRouteRoot) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.groupsIndex);\n                } else if (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_INTERCEPTORS)) {\n                    // Load interceptorMeta\n                    ((IInterceptorGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.interceptorsIndex);\n                } else if (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_PROVIDERS)) {\n                    // Load providerIndex\n                    ((IProviderGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.providersIndex);\n                }\n            }\n        }\n\n        logger.info(TAG, \"Load root element finished, cost \" + (System.currentTimeMillis() - startInit) + \" ms.\");\n\n        if (Warehouse.groupsIndex.size() == 0) {\n            logger.error(TAG, \"No mapping files were found, check your configuration please!\");\n        }\n\n        if (ARouter.debuggable()) {\n            logger.debug(TAG, String.format(Locale.getDefault(), \"LogisticsCenter has already been loaded, GroupIndex[%d], InterceptorIndex[%d], ProviderIndex[%d]\", Warehouse.groupsIndex.size(), Warehouse.interceptorsIndex.size(), Warehouse.providersIndex.size()));\n        }\n    } catch (Exception e) {\n        throw new HandlerException(TAG + \"ARouter init logistics center exception! [\" + e.getMessage() + \"]\");\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * mark already registered by arouter-auto-register plugin\n */\n", "func_signal": "private static void markRegisteredByPlugin()", "code": "{\n    if (!registerByPlugin) {\n        registerByPlugin = true;\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Build param inject statement\n */\n", "func_signal": "private String buildStatement(String originalValue, String statement, int type, boolean isActivity, boolean isKt)", "code": "{\n    switch (TypeKind.values()[type]) {\n        case BOOLEAN:\n            statement += \"getBoolean\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case BYTE:\n            statement += \"getByte\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case SHORT:\n            statement += \"getShort\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case INT:\n            statement += \"getInt\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case LONG:\n            statement += \"getLong\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case CHAR:\n            statement += \"getChar\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case FLOAT:\n            statement += \"getFloat\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case DOUBLE:\n            statement += \"getDouble\" + (isActivity ? \"Extra\" : \"\") + \"($S, \" + originalValue + \")\";\n            break;\n        case STRING:\n            statement += (isActivity ? (\"getExtras() == null ? \" + originalValue + \" : substitute.getIntent().getExtras().getString($S\") : (\"getString($S\")) + \", \" + originalValue + \")\";\n            break;\n        case SERIALIZABLE:\n            statement += (isActivity ? (\"getSerializableExtra($S)\") : (\"getSerializable($S)\"));\n            break;\n        case PARCELABLE:\n            statement += (isActivity ? (\"getParcelableExtra($S)\") : (\"getParcelable($S)\"));\n            break;\n        case OBJECT:\n            statement = \"serializationService.parseObject(substitute.\" + (isActivity ? \"getIntent().\" : \"getArguments().\") + (isActivity ? \"getStringExtra($S)\" : \"getString($S)\") + \", new \" + TYPE_WRAPPER + \"<$T>(){}.getType())\";\n            break;\n    }\n\n    return statement;\n}", "path": "ARouter/arouter-compiler/src/main/java/com/alibaba/android/arouter/compiler/processor/AutowiredProcessor.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Set value by known type\n *\n * @param postcard postcard\n * @param typeDef  type\n * @param key      key\n * @param value    value\n */\n", "func_signal": "private static void setValue(Postcard postcard, Integer typeDef, String key, String value)", "code": "{\n    if (TextUtils.isEmpty(key) || TextUtils.isEmpty(value)) {\n        return;\n    }\n\n    try {\n        if (null != typeDef) {\n            if (typeDef == TypeKind.BOOLEAN.ordinal()) {\n                postcard.withBoolean(key, Boolean.parseBoolean(value));\n            } else if (typeDef == TypeKind.BYTE.ordinal()) {\n                postcard.withByte(key, Byte.parseByte(value));\n            } else if (typeDef == TypeKind.SHORT.ordinal()) {\n                postcard.withShort(key, Short.parseShort(value));\n            } else if (typeDef == TypeKind.INT.ordinal()) {\n                postcard.withInt(key, Integer.parseInt(value));\n            } else if (typeDef == TypeKind.LONG.ordinal()) {\n                postcard.withLong(key, Long.parseLong(value));\n            } else if (typeDef == TypeKind.FLOAT.ordinal()) {\n                postcard.withFloat(key, Float.parseFloat(value));\n            } else if (typeDef == TypeKind.DOUBLE.ordinal()) {\n                postcard.withDouble(key, Double.parseDouble(value));\n            } else if (typeDef == TypeKind.STRING.ordinal()) {\n                postcard.withString(key, value);\n            } else if (typeDef == TypeKind.PARCELABLE.ordinal()) {\n                // TODO : How to description parcelable value with string?\n            } else if (typeDef == TypeKind.OBJECT.ordinal()) {\n                postcard.withString(key, value);\n            } else {    // Compatible compiler sdk 1.0.3, in that version, the string type = 18\n                postcard.withString(key, value);\n            }\n        } else {\n            postcard.withString(key, value);\n        }\n    } catch (Throwable ex) {\n        logger.warning(Consts.TAG, \"LogisticsCenter setValue failed! \" + ex.getMessage());\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Completion the postcard by route metas\n *\n * @param postcard Incomplete postcard, should complete by this method.\n */\n", "func_signal": "public synchronized static void completion(Postcard postcard)", "code": "{\n    if (null == postcard) {\n        throw new NoRouteFoundException(TAG + \"No postcard!\");\n    }\n\n    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());\n    if (null == routeMeta) {\n        // Maybe its does't exist, or didn't load.\n        if (!Warehouse.groupsIndex.containsKey(postcard.getGroup())) {\n            throw new NoRouteFoundException(TAG + \"There is no route match the path [\" + postcard.getPath() + \"], in group [\" + postcard.getGroup() + \"]\");\n        } else {\n            // Load route and cache it into memory, then delete from metas.\n            try {\n                if (ARouter.debuggable()) {\n                    logger.debug(TAG, String.format(Locale.getDefault(), \"The group [%s] starts loading, trigger by [%s]\", postcard.getGroup(), postcard.getPath()));\n                }\n\n                addRouteGroupDynamic(postcard.getGroup(), null);\n\n                if (ARouter.debuggable()) {\n                    logger.debug(TAG, String.format(Locale.getDefault(), \"The group [%s] has already been loaded, trigger by [%s]\", postcard.getGroup(), postcard.getPath()));\n                }\n            } catch (Exception e) {\n                throw new HandlerException(TAG + \"Fatal exception when loading group meta. [\" + e.getMessage() + \"]\");\n            }\n\n            completion(postcard);   // Reload\n        }\n    } else {\n        postcard.setDestination(routeMeta.getDestination());\n        postcard.setType(routeMeta.getType());\n        postcard.setPriority(routeMeta.getPriority());\n        postcard.setExtra(routeMeta.getExtra());\n\n        Uri rawUri = postcard.getUri();\n        if (null != rawUri) {   // Try to set params into bundle.\n            Map<String, String> resultMap = TextUtils.splitQueryParameters(rawUri);\n            Map<String, Integer> paramsType = routeMeta.getParamsType();\n\n            if (MapUtils.isNotEmpty(paramsType)) {\n                // Set value by its type, just for params which annotation by @Param\n                for (Map.Entry<String, Integer> params : paramsType.entrySet()) {\n                    setValue(postcard,\n                            params.getValue(),\n                            params.getKey(),\n                            resultMap.get(params.getKey()));\n                }\n\n                // Save params name which need auto inject.\n                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(new String[]{}));\n            }\n\n            // Save raw uri\n            postcard.withString(ARouter.RAW_URI, rawUri.toString());\n        }\n\n        switch (routeMeta.getType()) {\n            case PROVIDER:  // if the route is provider, should find its instance\n                // Its provider, so it must implement IProvider\n                Class<? extends IProvider> providerMeta = (Class<? extends IProvider>) routeMeta.getDestination();\n                IProvider instance = Warehouse.providers.get(providerMeta);\n                if (null == instance) { // There's no instance of this provider\n                    IProvider provider;\n                    try {\n                        provider = providerMeta.getConstructor().newInstance();\n                        provider.init(mContext);\n                        Warehouse.providers.put(providerMeta, provider);\n                        instance = provider;\n                    } catch (Exception e) {\n                        throw new HandlerException(\"Init provider failed! \" + e.getMessage());\n                    }\n                }\n                postcard.setProvider(instance);\n                postcard.greenChannel();    // Provider should skip all of interceptors\n                break;\n            case FRAGMENT:\n                postcard.greenChannel();    // Fragment needn't interceptors\n            default:\n                break;\n        }\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * method for arouter-auto-register plugin to register Routers\n * @param routeRoot IRouteRoot implementation class in the package: com.alibaba.android.arouter.core.routers\n */\n", "func_signal": "private static void registerRouteRoot(IRouteRoot routeRoot)", "code": "{\n    markRegisteredByPlugin();\n    if (routeRoot != null) {\n        routeRoot.loadInto(Warehouse.groupsIndex);\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Build postcard by serviceName\n *\n * @param serviceName interfaceName\n * @return postcard\n */\n", "func_signal": "public static Postcard buildProvider(String serviceName)", "code": "{\n    RouteMeta meta = Warehouse.providersIndex.get(serviceName);\n\n    if (null == meta) {\n        return null;\n    } else {\n        return new Postcard(meta.getPath(), meta.getGroup());\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Build postcard by path and default group\n */\n", "func_signal": "protected Postcard build(String path)", "code": "{\n    if (TextUtils.isEmpty(path)) {\n        throw new HandlerException(Consts.TAG + \"Parameter is invalid!\");\n    } else {\n        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);\n        if (null != pService) {\n            path = pService.forString(path);\n        }\n        return build(path, extractGroup(path), true);\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/launcher/_ARouter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Categories field, find his papa.\n *\n * @param elements Field need autowired\n */\n", "func_signal": "private void categories(Set<? extends Element> elements) throws IllegalAccessException", "code": "{\n    if (CollectionUtils.isNotEmpty(elements)) {\n        for (Element element : elements) {\n            TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();\n\n            if (element.getModifiers().contains(Modifier.PRIVATE)) {\n                throw new IllegalAccessException(\"The inject fields CAN NOT BE 'private'!!! please check field [\"\n                        + element.getSimpleName() + \"] in class [\" + enclosingElement.getQualifiedName() + \"]\");\n            }\n\n            if (parentAndChild.containsKey(enclosingElement)) { // Has categries\n                parentAndChild.get(enclosingElement).add(element);\n            } else {\n                List<Element> childs = new ArrayList<>();\n                childs.add(element);\n                parentAndChild.put(enclosingElement, childs);\n            }\n        }\n\n        logger.info(\"categories finished.\");\n    }\n}", "path": "ARouter/arouter-compiler/src/main/java/com/alibaba/android/arouter/compiler/processor/AutowiredProcessor.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * method for arouter-auto-register plugin to register Interceptors\n * @param interceptorGroup IInterceptorGroup implementation class in the package: com.alibaba.android.arouter.core.routers\n */\n", "func_signal": "private static void registerInterceptor(IInterceptorGroup interceptorGroup)", "code": "{\n    markRegisteredByPlugin();\n    if (interceptorGroup != null) {\n        interceptorGroup.loadInto(Warehouse.interceptorsIndex);\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * \u8df3\u8f6c\u5230 Test1 Activity,\n *\n * @param name    \u59d3\u540d\n * @param age     \u5e74\u9f84\n * @param context ctx\n */\n", "func_signal": "public static void redirect2Test1Activity(String name, int age, Context context)", "code": "{\n    ARouter.getInstance().build(\"/test/activity1\")\n            .withString(\"name\", name)\n            .withInt(\"age\", age)\n            .navigation(context);\n}", "path": "ARouter/module-java-export/src/main/java/com/alibaba/android/arouter/demo/service/Entrance.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * method for arouter-auto-register plugin to register Providers\n * @param providerGroup IProviderGroup implementation class in the package: com.alibaba.android.arouter.core.routers\n */\n", "func_signal": "private static void registerProvider(IProviderGroup providerGroup)", "code": "{\n    markRegisteredByPlugin();\n    if (providerGroup != null) {\n        providerGroup.loadInto(Warehouse.providersIndex);\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/core/LogisticsCenter.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/*\n *  \u7ebf\u7a0b\u6267\u884c\u7ed3\u675f\uff0c\u987a\u4fbf\u770b\u4e00\u4e0b\u6709\u4e48\u6709\u4ec0\u4e48\u4e71\u4e03\u516b\u7cdf\u7684\u5f02\u5e38\n *\n * @param r the runnable that has completed\n * @param t the exception that caused termination, or null if\n */\n", "func_signal": "@Override\nprotected void afterExecute(Runnable r, Throwable t)", "code": "{\n    super.afterExecute(r, t);\n    if (t == null && r instanceof Future<?>) {\n        try {\n            ((Future<?>) r).get();\n        } catch (CancellationException ce) {\n            t = ce;\n        } catch (ExecutionException ee) {\n            t = ee.getCause();\n        } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt(); // ignore/reset\n        }\n    }\n    if (t != null) {\n        ARouter.logger.warning(Consts.TAG, \"Running task appeared exception! Thread [\" + Thread.currentThread().getName() + \"], because [\" + t.getMessage() + \"]\\n\" + TextUtils.formatStackTrace(t.getStackTrace()));\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/thread/DefaultPoolExecutor.java", "commit_date": "2018-10-31 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Be sure execute in main thread.\n *\n * @param runnable code\n */\n", "func_signal": "private void runInMainThread(Runnable runnable)", "code": "{\n    if (Looper.getMainLooper().getThread() != Thread.currentThread()) {\n        mHandler.post(runnable);\n    } else {\n        runnable.run();\n    }\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/launcher/_ARouter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Use router navigation.\n *\n * @param context     Activity or null.\n * @param postcard    Route metas\n * @param requestCode RequestCode\n * @param callback    cb\n */\n", "func_signal": "protected Object navigation(final Context context, final Postcard postcard, final int requestCode, final NavigationCallback callback)", "code": "{\n    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);\n    if (null != pretreatmentService && !pretreatmentService.onPretreatment(context, postcard)) {\n        // Pretreatment failed, navigation canceled.\n        return null;\n    }\n\n    // Set context to postcard.\n    postcard.setContext(null == context ? mContext : context);\n\n    try {\n        LogisticsCenter.completion(postcard);\n    } catch (NoRouteFoundException ex) {\n        logger.warning(Consts.TAG, ex.getMessage());\n\n        if (debuggable()) {\n            // Show friendly tips for user.\n            runInMainThread(new Runnable() {\n                @Override\n                public void run() {\n                    Toast.makeText(mContext, \"There's no route matched!\\n\" +\n                            \" Path = [\" + postcard.getPath() + \"]\\n\" +\n                            \" Group = [\" + postcard.getGroup() + \"]\", Toast.LENGTH_LONG).show();\n                }\n            });\n        }\n\n        if (null != callback) {\n            callback.onLost(postcard);\n        } else {\n            // No callback for this invoke, then we use the global degrade service.\n            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);\n            if (null != degradeService) {\n                degradeService.onLost(context, postcard);\n            }\n        }\n\n        return null;\n    }\n\n    if (null != callback) {\n        callback.onFound(postcard);\n    }\n\n    if (!postcard.isGreenChannel()) {   // It must be run in async thread, maybe interceptor cost too mush time made ANR.\n        interceptorService.doInterceptions(postcard, new InterceptorCallback() {\n            /**\n             * Continue process\n             *\n             * @param postcard route meta\n             */\n            @Override\n            public void onContinue(Postcard postcard) {\n                _navigation(postcard, requestCode, callback);\n            }\n\n            /**\n             * Interrupt process, pipeline will be destory when this method called.\n             *\n             * @param exception Reson of interrupt.\n             */\n            @Override\n            public void onInterrupt(Throwable exception) {\n                if (null != callback) {\n                    callback.onInterrupt(postcard);\n                }\n\n                logger.info(Consts.TAG, \"Navigation failed, termination by interceptor : \" + exception.getMessage());\n            }\n        });\n    } else {\n        return _navigation(postcard, requestCode, callback);\n    }\n\n    return null;\n}", "path": "ARouter/arouter-api/src/main/java/com/alibaba/android/arouter/launcher/_ARouter.java", "commit_date": "2020-10-21 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "/**\n * Called when a view has been clicked.\n *\n * @param v The view that was clicked.\n */\n", "func_signal": "@Override\npublic void onClick(View v)", "code": "{\n    // Build test data.\n    TestSerializable testSerializable = new TestSerializable(\"Titanic\", 555);\n    TestParcelable testParcelable = new TestParcelable(\"jack\", 666);\n    TestObj testObj = new TestObj(\"Rose\", 777);\n    List<TestObj> objList = new ArrayList<>();\n    objList.add(testObj);\n    Map<String, List<TestObj>> map = new HashMap<>();\n    map.put(\"testMap\", objList);\n\n    switch (v.getId()) {\n        case R.id.openLog:\n            ARouter.openLog();\n            break;\n        case R.id.openDebug:\n            ARouter.openDebug();\n            break;\n        case R.id.init:\n            // \u8c03\u8bd5\u6a21\u5f0f\u4e0d\u662f\u5fc5\u987b\u5f00\u542f\uff0c\u4f46\u662f\u4e3a\u4e86\u9632\u6b62\u6709\u7528\u6237\u5f00\u542f\u4e86InstantRun\uff0c\u4f46\u662f\n            // \u5fd8\u4e86\u5f00\u8c03\u8bd5\u6a21\u5f0f\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528Demo\uff0c\u5982\u679c\u4f7f\u7528\u4e86InstantRun\uff0c\u5fc5\u987b\u5728\n            // \u521d\u59cb\u5316\u4e4b\u524d\u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f\uff0c\u4f46\u662f\u4e0a\u7ebf\u524d\u9700\u8981\u5173\u95ed\uff0cInstantRun\u4ec5\u7528\u4e8e\u5f00\n            // \u53d1\u9636\u6bb5\uff0c\u7ebf\u4e0a\u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f\u6709\u5b89\u5168\u98ce\u9669\uff0c\u53ef\u4ee5\u4f7f\u7528BuildConfig.DEBUG\n            // \u6765\u533a\u5206\u73af\u5883\n            ARouter.openDebug();\n            ARouter.init(getApplication());\n            break;\n        case R.id.normalNavigation:\n            ARouter.getInstance()\n                    .build(\"/test/activity2\")\n                    .navigation();\n\n            // \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f9d\u8d56\u5bf9\u65b9\u63d0\u4f9b\u7684\u4e8c\u65b9\u5305\u6765\u7ea6\u675f\u5165\u53c2\n            // \u975e\u5fc5\u987b\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8c03\u7528\n            // Entrance.redirect2Test1Activity(\"\u5f20\u98de\", 48, this);\n            break;\n        case R.id.kotlinNavigation:\n            ARouter.getInstance()\n                    .build(\"/kotlin/test\")\n                    .withString(\"name\", \"\u8001\u738b\")\n                    .withInt(\"age\", 23)\n                    .navigation();\n            break;\n        case R.id.normalNavigationWithParams:\n            // ARouter.getInstance()\n            //         .build(\"/test/activity2\")\n            //         .withString(\"key1\", \"value1\")\n            //         .navigation();\n\n            Uri testUriMix = Uri.parse(\"arouter://m.aliyun.com/test/activity2\");\n            ARouter.getInstance().build(testUriMix)\n                    .withString(\"key1\", \"value1\")\n                    .navigation();\n\n            break;\n        case R.id.oldVersionAnim:\n            ARouter.getInstance()\n                    .build(\"/test/activity2\")\n                    .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)\n                    .navigation(this);\n            break;\n        case R.id.newVersionAnim:\n            if (Build.VERSION.SDK_INT >= 16) {\n                ActivityOptionsCompat compat = ActivityOptionsCompat.\n                        makeScaleUpAnimation(v, v.getWidth() / 2, v.getHeight() / 2, 0, 0);\n\n                ARouter.getInstance()\n                        .build(\"/test/activity2\")\n                        .withOptionsCompat(compat)\n                        .navigation();\n            } else {\n                Toast.makeText(this, \"API < 16,\u4e0d\u652f\u6301\u65b0\u7248\u672c\u52a8\u753b\", Toast.LENGTH_SHORT).show();\n            }\n            break;\n        case R.id.interceptor:\n            ARouter.getInstance()\n                    .build(\"/test/activity4\")\n                    .navigation(this, new NavCallback() {\n                        @Override\n                        public void onArrival(Postcard postcard) {\n\n                        }\n\n                        @Override\n                        public void onInterrupt(Postcard postcard) {\n                            Log.d(\"ARouter\", \"\u88ab\u62e6\u622a\u4e86\");\n                        }\n                    });\n            break;\n        case R.id.navByUrl:\n            ARouter.getInstance()\n                    .build(\"/test/webview\")\n                    .withString(\"url\", \"file:///android_asset/scheme-test.html\")\n                    .navigation();\n            break;\n        case R.id.autoInject:\n            ARouter.getInstance().build(\"/test/activity1\")\n                    .withString(\"name\", \"\u8001\u738b\")\n                    .withInt(\"age\", 18)\n                    .withBoolean(\"boy\", true)\n                    .withLong(\"high\", 180)\n                    .withString(\"url\", \"https://a.b.c\")\n                    .withSerializable(\"ser\", testSerializable)\n                    .withParcelable(\"pac\", testParcelable)\n                    .withObject(\"obj\", testObj)\n                    .withObject(\"objList\", objList)\n                    .withObject(\"map\", map)\n                    .navigation();\n            break;\n        case R.id.navByName:\n            ((HelloService) ARouter.getInstance().build(\"/yourservicegroupname/hello\").navigation()).sayHello(\"mike\");\n            break;\n        case R.id.navByType:\n            ARouter.getInstance().navigation(HelloService.class).sayHello(\"mike\");\n            break;\n        case R.id.navToMoudle1:\n            ARouter.getInstance().build(\"/module/1\").navigation();\n            break;\n        case R.id.navToMoudle2:\n            // \u8fd9\u4e2a\u9875\u9762\u4e3b\u52a8\u6307\u5b9a\u4e86Group\u540d\n            ARouter.getInstance().build(\"/module/2\", \"m2\").navigation();\n            break;\n        case R.id.destroy:\n            ARouter.getInstance().destroy();\n            break;\n        case R.id.failNav:\n            ARouter.getInstance().build(\"/xxx/xxx\").navigation(this, new NavCallback() {\n                @Override\n                public void onFound(Postcard postcard) {\n                    Log.d(\"ARouter\", \"\u627e\u5230\u4e86\");\n                }\n\n                @Override\n                public void onLost(Postcard postcard) {\n                    Log.d(\"ARouter\", \"\u627e\u4e0d\u5230\u4e86\");\n                }\n\n                @Override\n                public void onArrival(Postcard postcard) {\n                    Log.d(\"ARouter\", \"\u8df3\u8f6c\u5b8c\u4e86\");\n                }\n\n                @Override\n                public void onInterrupt(Postcard postcard) {\n                    Log.d(\"ARouter\", \"\u88ab\u62e6\u622a\u4e86\");\n                }\n            });\n            break;\n        case R.id.callSingle:\n            ARouter.getInstance().navigation(SingleService.class).sayHello(\"Mike\");\n            break;\n        case R.id.failNav2:\n            ARouter.getInstance().build(\"/xxx/xxx\").navigation();\n            break;\n        case R.id.failNav3:\n            ARouter.getInstance().navigation(MainActivity.class);\n            break;\n        case R.id.normalNavigation2:\n            ARouter.getInstance()\n                    .build(\"/test/activity2\")\n                    .navigation(this, 666);\n            break;\n        case R.id.getFragment:\n            Fragment fragment = (Fragment) ARouter.getInstance().build(\"/test/fragment\")\n                    .withString(\"name\", \"\u8001\u738b\")\n                    .withInt(\"age\", 18)\n                    .withBoolean(\"boy\", true)\n                    .withLong(\"high\", 180)\n                    .withString(\"url\", \"https://a.b.c\")\n                    .withSerializable(\"ser\", testSerializable)\n                    .withParcelable(\"pac\", testParcelable)\n                    .withObject(\"obj\", testObj)\n                    .withObject(\"objList\", objList)\n                    .withObject(\"map\", map).navigation();\n            Toast.makeText(this, \"\u627e\u5230Fragment:\" + fragment.toString(), Toast.LENGTH_SHORT).show();\n            break;\n        case R.id.addGroup:\n            ARouter.getInstance().addRouteGroup(new IRouteGroup() {\n                @Override\n                public void loadInto(Map<String, RouteMeta> atlas) {\n                    atlas.put(\"/dynamic/activity\", RouteMeta.build(\n                            RouteType.ACTIVITY,\n                            TestDynamicActivity.class,\n                            \"/dynamic/activity\",\n                            \"dynamic\", 0, 0));\n                }\n            });\n            break;\n        case R.id.dynamicNavigation:\n            // \u8be5\u9875\u9762\u672a\u914d\u7f6e Route \u6ce8\u89e3\uff0c\u52a8\u6001\u6ce8\u518c\u5230 ARouter\n            ARouter.getInstance().build(\"/dynamic/activity\")\n                    .withString(\"name\", \"\u8001\u738b\")\n                    .withInt(\"age\", 18)\n                    .withBoolean(\"boy\", true)\n                    .withLong(\"high\", 180)\n                    .withString(\"url\", \"https://a.b.c\")\n                    .withSerializable(\"ser\", testSerializable)\n                    .withParcelable(\"pac\", testParcelable)\n                    .withObject(\"obj\", testObj)\n                    .withObject(\"objList\", objList)\n                    .withObject(\"map\", map).navigation(this);\n            break;\n        default:\n            break;\n    }\n}", "path": "ARouter/app/src/main/java/com/alibaba/android/arouter/demo/MainActivity.java", "commit_date": "2020-10-22 00:00:00", "repo_name": "alibaba/ARouter", "stars": 14355, "license": "apache-2.0", "language": "java", "size": 26589}
{"docstring": "// \u013d\u03aaif...else\u02b5\n// @Override\n// public void run() {\n// while (true) {\n// if (x % 2 == 0) {\n// synchronized (obj) {\n// if (tickets > 0) {\n// try {\n// Thread.sleep(100);\n// } catch (InterruptedException e) {\n// e.printStackTrace();\n// }\n//\n// System.out.println(Thread.currentThread().getName()\n// + \"\u06b3\u06f5\" + (tickets--) + \"\u01b1\");\n// }\n// }\n// } else {\n// synchronized (obj) {\n// if (tickets > 0) {\n// try {\n// Thread.sleep(100);\n// } catch (InterruptedException e) {\n// e.printStackTrace();\n// }\n//\n// System.out.println(Thread.currentThread().getName()\n// + \"\u06b3\u06f5\" + (tickets--) + \"\u01b1\");\n// }\n// }\n// }\n// x++;\n// }\n// }\n", "func_signal": "@Override\npublic void run()", "code": "{\n\twhile (true) {\n\t\tif (x % 2 == 0) {\n\t\t\tsynchronized (MovieTicket.class) {\n\t\t\t\tif (tickets > 0) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\n\t\t\t\t\tSystem.out.println(Thread.currentThread().getName()\n\t\t\t\t\t\t\t+ \"\u06b3\u06f5\" + (tickets--) + \"\u01b1\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tsellTicket();\n\t\t}\n\t\tx++;\n\t}\n}", "path": "Java/day23/code/day23_Thread/src/cn/itcast_10/MovieTicket.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// public DiGuiDemo() {\n// DiGuiDemo();\n// }\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tDiGuiDemo dgd = new DiGuiDemo();\n\tdgd.show();\n}", "path": "Java/day20/code/day20_DiGui/src/cn/itcast_01/DiGuiDemo.java", "commit_date": "2015-11-25 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    firstNumber = new javax.swing.JTextField();\n    choiceOperator = new javax.swing.JComboBox();\n    jLabel2 = new javax.swing.JLabel();\n    secondNumber = new javax.swing.JTextField();\n    jLabel3 = new javax.swing.JLabel();\n    resultNumber = new javax.swing.JTextField();\n    jLabel4 = new javax.swing.JLabel();\n    jiSuanButton = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jLabel1.setText(\"\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\");\n\n    choiceOperator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"+\", \"-\", \"*\", \"/\" }));\n\n    jLabel2.setText(\"\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\");\n\n    jLabel3.setText(\"=\");\n\n    jLabel4.setText(\"\u7ed3\u679c\");\n\n    jiSuanButton.setText(\"\u8ba1\u7b97\");\n    jiSuanButton.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            jiSuanButtonMouseClicked(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(firstNumber))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(choiceOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(secondNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(jLabel2))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel3)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jiSuanButton)\n                .addComponent(resultNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel4))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(jLabel2)\n                .addComponent(jLabel4))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(firstNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(choiceOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(secondNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel3)\n                .addComponent(resultNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(18, 18, 18)\n            .addComponent(jiSuanButton)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    pack();\n}", "path": "Java/day25/code/\u56db\u5219\u8fd0\u7b97/src/cn/itcast_03/OperatorJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void checkGame()", "code": "{\n         Properties prop = new Properties();\n        try {\n            FileReader fr = new FileReader(\"count.txt\");\n            prop.load(fr);\n            fr.close();\n\n            String countString = prop.getProperty(\"count\");\n            int count = Integer.parseInt(countString);\n            if (count >= 5) {\n                JOptionPane.showMessageDialog(this, \"\u8bd5\u73a9\u7ed3\u675f,\u8981\u60f3\u7ee7\u7eed\u73a9,\u8bf7\u5145\u503c\");\n                System.exit(0);\n            } else {\n                count++;\n                prop.setProperty(\"count\", String.valueOf(count));\n\n                FileWriter fw = new FileWriter(\"count.txt\");\n                prop.store(fw, null);\n                fw.close();\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/GuessNumberJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// \u0427\u05bd\u04bb\u03b6\u0434\u04bb\u05bd\n", "func_signal": "public static void method3() throws IOException", "code": "{\n\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\n\t\t\t\"d:\\\\.mp4\"));\n\tBufferedOutputStream bos = new BufferedOutputStream(\n\t\t\tnew FileOutputStream(\"copy3.mp4\"));\n\n\tint by = 0;\n\twhile ((by = bis.read()) != -1) {\n\t\tbos.write(by);\n\t}\n\n\tbos.close();\n\tbis.close();\n}", "path": "Java/day21/code/day21_IO/src/cn/itcast_03/CopyMP4Demo.java", "commit_date": "2015-11-25 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/*\n\t\u04e6nn\u02f7\n\t\n\t\u05b5\u0363\n\t\tvoid\n\t\u0431\n\t\tint n\n*/\n", "func_signal": "public static void printNN(int n)", "code": "{\n\tfor(int x=1; x<=n; x++) {\n\t\tfor(int y=1; y<=x; y++) {\n\t\t\tSystem.out.print(y+\"*\"+x+\"=\"+x*y+\"\\t\");\n\t\t}\n\t\tSystem.out.println();\n\t}\t\n}", "path": "Java/day04/code/06_\u65b9\u6cd5/MethodTest4.java", "commit_date": "2015-11-25 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void jiSuanButtonMouseClicked(java.awt.event.MouseEvent evt)", "code": "{//GEN-FIRST:event_jiSuanButtonMouseClicked\n        /*\n         \u601d\u8def\uff1a\n         1:\u83b7\u53d6\u64cd\u4f5c\u6570\u548c\u8fd0\u7b97\u7b26\n         2:\u6839\u636e\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97\n         3:\u628a\u8fd0\u7b97\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9\u6700\u540e\u4e00\u4e2a\u6587\u672c\u6846\n         */\n        String firstNumberString = this.firstNumber.getText();\n        String operatorString = String.valueOf(this.choiceOperator.getSelectedItem());\n        String secondNumberString = this.secondNumber.getText();\n\n        //\u52a0\u5165\u6570\u636e\u6821\u9a8c\n        String regex = \"\\\\d+\";\n\n        if (!firstNumberString.matches(regex)) {\n//            System.out.println(\"\u4f60\u8f93\u5165\u7684\u6570\u636e\u6709\u8bef\");\n            //\u5f39\u51fa\u4e00\u4e2a\u6846\u6846\n            // public static void showMessageDialog(Component parentComponent,Object message)\n            JOptionPane.showMessageDialog(this, \"\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e0d\u662f\u6570\u5b57\");\n            this.firstNumber.setText(\"\");\n            //\u83b7\u5f97\u7126\u70b9\n            this.firstNumber.requestFocus();\n            return;\n        }\n\n        if (!secondNumberString.matches(regex)) {\n            JOptionPane.showMessageDialog(this, \"\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e0d\u662f\u6570\u5b57\");\n            this.secondNumber.setText(\"\");\n            //\u83b7\u5f97\u7126\u70b9\n            this.secondNumber.requestFocus();\n            return;\n        }\n\n        //\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u636e\u7c7b\u578b\n        int firstNumber = Integer.parseInt(firstNumberString);\n        int secondNumber = Integer.parseInt(secondNumberString);\n\n        //\u5b9a\u4e49\u53d8\u91cf\uff0c\u7528\u4e8e\u4fdd\u5b58\u8fd0\u7b97\u7684\u7ed3\u679c\n        int result = 0;\n\n        switch (operatorString) {\n            case \"+\":\n                result = firstNumber + secondNumber;\n                break;\n            case \"-\":\n                result = firstNumber - secondNumber;\n                break;\n            case \"*\":\n                result = firstNumber * secondNumber;\n                break;\n            case \"/\":\n                if (secondNumber == 0) {\n                     JOptionPane.showMessageDialog(this, \"\u9664\u6570\u4e0d\u80fd\u4e3a0\");\n                    //\u83b7\u5f97\u7126\u70b9\n                    this.secondNumber.requestFocus();\n                    return;\n                } else {\n                    result = firstNumber / secondNumber;\n                }\n                break;\n        }\n\n        //\u628a\u8fd0\u7b97\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9\u6700\u540e\u4e00\u4e2a\u6587\u672c\u6846\n        this.resultNumber.setText(String.valueOf(result));\n    }", "path": "Java/day25/code/\u56db\u5219\u8fd0\u7b97/src/cn/itcast_03/OperatorJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// private synchronized void sellTicket() {\n// if (tickets > 0) {\n// try {\n// Thread.sleep(100);\n// } catch (InterruptedException e) {\n// e.printStackTrace();\n// }\n//\n// System.out.println(Thread.currentThread().getName() + \"\u06b3\u06f5\"\n// + (tickets--) + \"\u01b1\");\n// }\n// }\n", "func_signal": "private static synchronized void sellTicket()", "code": "{\n\tif (tickets > 0) {\n\t\ttry {\n\t\t\tThread.sleep(100);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tSystem.out.println(Thread.currentThread().getName() + \"\u06b3\u06f5\"\n\t\t\t\t+ (tickets--) + \"\u01b1\");\n\t}\n}", "path": "Java/day23/code/day23_Thread/src/cn/itcast_10/MovieTicket.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "//GEN-LAST:event_registButtonActionPerformed\n", "func_signal": "private void clearData()", "code": "{\n        this.jtfUsername.setText(\"\");\n        this.jpfPassword.setText(\"\");\n        this.jtfUsername.requestFocus();\n    }", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/LoginJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jtfGuessNumber = new javax.swing.JTextField();\n    guessButton = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jLabel1.setText(\"\u7cfb\u7edf\u5df2\u7ecf\u4ea7\u751f\u4e86\u4e00\u4e2a\u968f\u673a\u6570,\u8bf7\u8f93\u5165\u4f60\u8981\u731c\u7684\u6570\u636e(1-100)\");\n\n    guessButton.setText(\"\u6211\u731c\");\n    guessButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            guessButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(jtfGuessNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(18, 18, 18)\n                    .addComponent(guessButton))\n                .addComponent(jLabel1))\n            .addGap(46, 46, 46))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(46, 46, 46)\n            .addComponent(jLabel1)\n            .addGap(24, 24, 24)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jtfGuessNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(guessButton))\n            .addContainerGap(36, Short.MAX_VALUE))\n    );\n\n    pack();\n}", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/GuessNumberJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel2 = new javax.swing.JLabel();\n    jLabel1 = new javax.swing.JLabel();\n    jLabel3 = new javax.swing.JLabel();\n    jtfUsername = new javax.swing.JTextField();\n    jpfPassword = new javax.swing.JPasswordField();\n    loginButton = new javax.swing.JButton();\n    resetButton = new javax.swing.JButton();\n    registButton = new javax.swing.JButton();\n\n    jLabel2.setText(\"jLabel2\");\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n    setResizable(false);\n\n    jLabel1.setText(\"\u7528\u6237\u540d:\");\n\n    jLabel3.setText(\"\u5bc6\u7801:\");\n\n    loginButton.setText(\"\u767b\u5f55\");\n    loginButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            loginButtonActionPerformed(evt);\n        }\n    });\n\n    resetButton.setText(\"\u91cd\u7f6e\");\n    resetButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            resetButtonActionPerformed(evt);\n        }\n    });\n\n    registButton.setText(\"\u6ce8\u518c\");\n    registButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            registButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(48, 48, 48)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(loginButton)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)\n                    .addComponent(resetButton))\n                .addGroup(layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(jLabel1)\n                        .addComponent(jLabel3))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                        .addComponent(jtfUsername)\n                        .addComponent(jpfPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(registButton)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(34, 34, 34)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(jtfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(registButton))\n            .addGap(32, 32, 32)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel3)\n                .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(loginButton)\n                .addComponent(resetButton))\n            .addGap(79, 79, 79))\n    );\n\n    pack();\n}", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/LoginJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "//GEN-LAST:event_resetButtonActionPerformed\n", "func_signal": "private void loginButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_loginButtonActionPerformed\n        //\u83b7\u53d6\u7528\u6237\u540d\u548c\u5bc6\u7801\n        String username = this.jtfUsername.getText().trim();\n//        String password = this.jpfPassword.getText().trim();\n        String password = String.valueOf(this.jpfPassword.getPassword());\n        \n        //\u6821\u9a8c\u6570\u636e\n        //\u5b9a\u4e49\u89c4\u5219\n        String regex = \"\\\\w{6,12}\";\n        \n        //\u6821\u9a8c\u7528\u6237\u540d\n        if(!username.matches(regex)) {\n            JOptionPane.showMessageDialog(this, \"\u7528\u6237\u540d\u4e0d\u6ee1\u8db3\u6761\u4ef6(6~12\u4f4d\u5b57\u7b26)\");\n            this.jtfUsername.setText(\"\");\n            this.jtfUsername.requestFocus();\n            return;\n        }\n        \n        //\u6821\u9a8c\u5bc6\u7801\n        if(!password.matches(regex)) {\n            JOptionPane.showMessageDialog(this, \"\u5bc6\u7801\u4e0d\u6ee1\u8db3\u6761\u4ef6(6~12\u4f4d\u5b57\u7b26)\");\n            this.jpfPassword.setText(\"\");\n            this.jpfPassword.requestFocus();\n            return;\n        }\n        \n        //\u8c03\u7528\u767b\u5f55\u529f\u80fd\n        UserDao ud = new UserDaoImpl();\n        boolean flag =  ud.isLogin(username, password);\n        if(flag) {\n             JOptionPane.showMessageDialog(this, \"\u767b\u5f55\u6210\u529f,\u53ef\u4ee5\u5f00\u59cb\u73a9\u6e38\u620f\u4e86\");\n             GuessNumberJFrame gjf = new GuessNumberJFrame(username);\n             this.dispose();\n             gjf.setVisible(true);\n        }else{\n            JOptionPane.showMessageDialog(this, \"\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u6709\u8bef\");\n            clearData();\n        }\n    }", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/LoginJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    /* Set the Nimbus look and feel */\n    //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n     */\n    try {\n        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n            if (\"Nimbus\".equals(info.getName())) {\n                javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                break;\n            }\n        }\n    } catch (ClassNotFoundException ex) {\n        java.util.logging.Logger.getLogger(LoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (InstantiationException ex) {\n        java.util.logging.Logger.getLogger(LoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (IllegalAccessException ex) {\n        java.util.logging.Logger.getLogger(LoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n        java.util.logging.Logger.getLogger(LoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    }\n    //</editor-fold>\n\n    /* Create and display the form */\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            new LoginJFrame().setVisible(true);\n        }\n    });\n}", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/LoginJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/**\n * Creates new form LoginJFrame\n */\n", "func_signal": "public LoginJFrame()", "code": "{\n    initComponents();\n    init();\n}", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/LoginJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/**\n* \u98ec\u02bd\u01e3[\u052a1, \u052a2, ...]\n* @param arr \u04aa\n*/\n", "func_signal": "public static void printArray(int[] arr)", "code": "{\n\tSystem.out.print(\"[\");\n\tfor(int x=0; x<arr.length; x++) {\n\t\tif(x == arr.length-1) {\n\t\t\tSystem.out.print(arr[x]);\n\t\t}else {\n\t\t\tSystem.out.print(arr[x]+\", \");\n\t\t}\n\t}\n\tSystem.out.println(\"]\");\n}", "path": "Java/day07/code/06_\u5236\u4f5c\u5e2e\u52a9\u6587\u6863/ArrayTool.java", "commit_date": "2015-11-25 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    /* Set the Nimbus look and feel */\n    //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n     */\n    try {\n        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n            if (\"Nimbus\".equals(info.getName())) {\n                javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                break;\n            }\n        }\n    } catch (ClassNotFoundException ex) {\n        java.util.logging.Logger.getLogger(OperatorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (InstantiationException ex) {\n        java.util.logging.Logger.getLogger(OperatorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (IllegalAccessException ex) {\n        java.util.logging.Logger.getLogger(OperatorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n        java.util.logging.Logger.getLogger(OperatorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n    }\n    //</editor-fold>\n    try {\n        //\u4fee\u6539\u76ae\u80a4\n        UIManager.setLookAndFeel(MyLookAndFeel.LIQUIDINF);\n    } catch (ClassNotFoundException ex) {\n        Logger.getLogger(OperatorJFrame.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (InstantiationException ex) {\n        Logger.getLogger(OperatorJFrame.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IllegalAccessException ex) {\n        Logger.getLogger(OperatorJFrame.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (UnsupportedLookAndFeelException ex) {\n        Logger.getLogger(OperatorJFrame.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    \n    /* Create and display the form */\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            new OperatorJFrame().setVisible(true);\n        }\n    });\n}", "path": "Java/day25/code/\u56db\u5219\u8fd0\u7b97/src/cn/itcast_03/OperatorJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/**\n* \u0221\u0435\u05b5\n* @param arr \u0221\u05b5\n* @return int \u0435\u05b5\n*/\n", "func_signal": "public static int getMax(int[] arr)", "code": "{\n\tint max = arr[0];\n\n\tfor(int x=1; x<arr.length; x++) {\n\t\tif(arr[x] > max) {\n\t\t\tmax = arr[x];\n\t\t}\n\t}\n\n\treturn max;\n}", "path": "Java/day07/code/06_\u5236\u4f5c\u5e2e\u52a9\u6587\u6863/ArrayTool.java", "commit_date": "2015-11-25 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// \u0427\u05bd\u04bb\u03b6\u0434\u04bb\u05bd\n", "func_signal": "public static void method4() throws IOException", "code": "{\n\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\n\t\t\t\"d:\\\\.mp4\"));\n\tBufferedOutputStream bos = new BufferedOutputStream(\n\t\t\tnew FileOutputStream(\"copy4.mp4\"));\n\n\tbyte[] bys = new byte[1024];\n\tint len = 0;\n\twhile ((len = bis.read(bys)) != -1) {\n\t\tbos.write(bys, 0, len);\n\t}\n\n\tbos.close();\n\tbis.close();\n}", "path": "Java/day21/code/day21_IO/src/cn/itcast_03/CopyMP4Demo.java", "commit_date": "2015-11-25 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/**\n * Creates new form OperatorJFrame\n */\n", "func_signal": "public OperatorJFrame()", "code": "{\n    initComponents();\n    init();\n}", "path": "Java/day25/code/\u56db\u5219\u8fd0\u7b97/src/cn/itcast_03/OperatorJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void registButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_registButtonActionPerformed\n        RegistJFrame rjf = new RegistJFrame();\n//        this.setVisible(false);\n        this.dispose();\n        rjf.setVisible(true);\n    }", "path": "Java/day25/code/\u767b\u5f55\u6ce8\u518c/src/cn/itcast/view/LoginJFrame.java", "commit_date": "2015-11-26 00:00:00", "repo_name": "DuGuQiuBai/Java", "stars": 12036, "license": "artistic-2.0", "language": "java", "size": 24346}
{"docstring": "/**\n * Set custom text apperance for all BottomBarTabs.\n */\n", "func_signal": "public void setTabTitleTextAppearance(int textAppearance)", "code": "{\n    titleTextAppearance = textAppearance;\n\n    batchPropertyApplier.applyToAllTabs(new BatchTabPropertyApplier.TabPropertyUpdater() {\n        @Override\n        public void update(BottomBarTab tab) {\n            tab.setTitleTextAppearance(titleTextAppearance);\n        }\n    });\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set background color for the badge.\n */\n", "func_signal": "public void setBadgeBackgroundColor(@ColorInt int color)", "code": "{\n    badgeBackgroundColor = color;\n\n    batchPropertyApplier.applyToAllTabs(new BatchTabPropertyApplier.TabPropertyUpdater() {\n        @Override\n        public void update(BottomBarTab tab) {\n            tab.setBadgeBackgroundColor(badgeBackgroundColor);\n        }\n    });\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Sets the default tab for this BottomBar that is shown until the user changes\n * the selection.\n *\n * @param defaultTabPosition the default tab position.\n */\n", "func_signal": "public void setDefaultTabPosition(int defaultTabPosition)", "code": "{\n    if (isComingFromRestoredState) return;\n\n    selectTabAtPosition(defaultTabPosition);\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set active color used for selected BottomBarTabs.\n */\n", "func_signal": "public void setActiveTabColor(@ColorInt int color)", "code": "{\n    activeTabColor = color;\n\n    batchPropertyApplier.applyToAllTabs(new BatchTabPropertyApplier.TabPropertyUpdater() {\n        @Override\n        public void update(BottomBarTab tab) {\n            tab.setActiveColor(activeTabColor);\n        }\n    });\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Returns screen width.\n *\n * @param context Context to get resources and device specific display metrics\n * @return screen width\n */\n", "func_signal": "protected static int getScreenWidth(@NonNull Context context)", "code": "{\n    DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();\n    return (int) (displayMetrics.widthPixels / displayMetrics.density);\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/MiscUtils.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Converts pixels to dps just as well.\n *\n * @param context the Context for getting the resources\n * @param px      dimension in pixels\n * @return dimension in dps\n */\n", "func_signal": "protected static int pixelToDp(@NonNull Context context, @Px int px)", "code": "{\n    DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();\n    return Math.round(px / displayMetrics.density);\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/MiscUtils.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set the item for the BottomBar from XML Resource with a default configuration\n * for each tab.\n */\n", "func_signal": "public void setItems(@XmlRes int xmlRes, BottomBarTab.Config defaultTabConfig)", "code": "{\n    if (xmlRes == 0) {\n        throw new RuntimeException(\"No items specified for the BottomBar!\");\n    }\n\n    if (defaultTabConfig == null) {\n        defaultTabConfig = getTabConfig();\n    }\n\n    TabParser parser = new TabParser(getContext(), defaultTabConfig, xmlRes);\n    updateItems(parser.parseTabs());\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set a listener that gets fired when the selected {@link BottomBarTab} changes.\n * <p>\n * If {@code shouldFireInitially} is set to false, this listener isn't fired straight away\n * it's set, but you'll get all events normally for consecutive tab selection changes.\n *\n * @param listener            a listener for monitoring changes in tab selection.\n * @param shouldFireInitially whether the listener should be fired the first time it's set.\n */\n", "func_signal": "public void setOnTabSelectListener(@NonNull OnTabSelectListener listener, boolean shouldFireInitially)", "code": "{\n    onTabSelectListener = listener;\n\n    if (shouldFireInitially && getTabCount() > 0) {\n        listener.onTabSelected(getCurrentTabId());\n    }\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set alpha value used for active BottomBarTabs.\n */\n", "func_signal": "public void setActiveTabAlpha(float alpha)", "code": "{\n    activeTabAlpha = alpha;\n\n    batchPropertyApplier.applyToAllTabs(new BatchTabPropertyApplier.TabPropertyUpdater() {\n        @Override\n        public void update(BottomBarTab tab) {\n            tab.setActiveAlpha(activeTabAlpha);\n        }\n    });\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * A convenience method for setting text appearance.\n *\n * @param textView a TextView which textAppearance to modify.\n * @param resId    a style resource for the text appearance.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\nprotected static void setTextAppearance(@NonNull TextView textView, @StyleRes int resId)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        textView.setTextAppearance(resId);\n    } else {\n        textView.setTextAppearance(textView.getContext(), resId);\n    }\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/MiscUtils.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Select the tab with the corresponding id.\n */\n", "func_signal": "public void selectTabWithId(@IdRes int tabResId)", "code": "{\n    int tabPosition = findPositionForTabWithId(tabResId);\n    selectTabAtPosition(tabPosition);\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Returns the settings specific for a shy BottomBar.\n *\n * @throws UnsupportedOperationException, if this BottomBar is not shy.\n */\n", "func_signal": "public ShySettings getShySettings()", "code": "{\n    if (!isShy()) {\n        Log.e(\"BottomBar\", \"Tried to get shy settings for a BottomBar \" +\n                \"that is not shy.\");\n    }\n\n    if (shySettings == null) {\n        shySettings = new ShySettings(this);\n    }\n\n    return shySettings;\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set a custom typeface for all tab's titles.\n *\n * @param fontPath path for your custom font file, such as fonts/MySuperDuperFont.ttf.\n *                 In that case your font path would look like src/main/assets/fonts/MySuperDuperFont.ttf,\n *                 but you only need to provide fonts/MySuperDuperFont.ttf, as the asset folder\n *                 will be auto-filled for you.\n */\n", "func_signal": "public void setTabTitleTypeface(String fontPath)", "code": "{\n    Typeface actualTypeface = getTypeFaceFromAsset(fontPath);\n    setTabTitleTypeface(actualTypeface);\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set a custom typeface for all tab's titles.\n */\n", "func_signal": "public void setTabTitleTypeface(Typeface typeface)", "code": "{\n    titleTypeFace = typeface;\n\n    batchPropertyApplier.applyToAllTabs(new BatchTabPropertyApplier.TabPropertyUpdater() {\n        @Override\n        public void update(BottomBarTab tab) {\n            tab.setTitleTypeface(titleTypeFace);\n        }\n    });\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set the default selected to be the tab with the corresponding tab id.\n * By default, the first tab in the container is the default tab.\n */\n", "func_signal": "public void setDefaultTab(@IdRes int defaultTabId)", "code": "{\n    int defaultTabPosition = findPositionForTabWithId(defaultTabId);\n    setDefaultTabPosition(defaultTabPosition);\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Determine if the current UI Mode is Night Mode.\n *\n * @param context Context to get the configuration.\n * @return true if the night mode is enabled, otherwise false.\n */\n", "func_signal": "protected static boolean isNightMode(@NonNull Context context)", "code": "{\n    int currentNightMode = context.getResources().getConfiguration().uiMode\n            & Configuration.UI_MODE_NIGHT_MASK;\n    return currentNightMode == Configuration.UI_MODE_NIGHT_YES;\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/MiscUtils.java", "commit_date": "2017-04-06 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Controls whether the badge (if any) for active tabs\n * should be hidden or not.\n */\n", "func_signal": "public void setBadgesHideWhenActive(final boolean hideWhenSelected)", "code": "{\n    hideBadgeWhenActive = hideWhenSelected;\n    batchPropertyApplier.applyToAllTabs(new BatchTabPropertyApplier.TabPropertyUpdater() {\n        @Override\n        public void update(BottomBarTab tab) {\n            tab.setBadgeHidesWhenActive(hideWhenSelected);\n        }\n    });\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Select a tab at the specified position.\n *\n * @param position the position to select.\n * @param animate  should the tab change be animated or not.\n */\n", "func_signal": "public void selectTabAtPosition(int position, boolean animate)", "code": "{\n    if (position > getTabCount() - 1 || position < 0) {\n        throw new IndexOutOfBoundsException(\"Can't select tab at position \" +\n                position + \". This BottomBar has no items at that position.\");\n    }\n\n    BottomBarTab oldTab = getCurrentTab();\n    BottomBarTab newTab = getTabAtPosition(position);\n\n    oldTab.deselect(animate);\n    newTab.select(animate);\n\n    updateSelectedTab(position);\n    shiftingMagic(oldTab, newTab, animate);\n    handleBackgroundColorChange(newTab, animate);\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Get the tab at the specified position.\n */\n", "func_signal": "public BottomBarTab getTabAtPosition(int position)", "code": "{\n    View child = tabContainer.getChildAt(position);\n\n    if (child instanceof BadgeContainer) {\n        return findTabInLayout((BadgeContainer) child);\n    }\n\n    return (BottomBarTab) child;\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * Set alpha value used for inactive BottomBarTabs.\n */\n", "func_signal": "public void setInActiveTabAlpha(float alpha)", "code": "{\n    inActiveTabAlpha = alpha;\n\n    batchPropertyApplier.applyToAllTabs(new BatchTabPropertyApplier.TabPropertyUpdater() {\n        @Override\n        public void update(BottomBarTab tab) {\n            tab.setInActiveAlpha(inActiveTabAlpha);\n        }\n    });\n}", "path": "BottomBar/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java", "commit_date": "2017-04-13 00:00:00", "repo_name": "roughike/BottomBar", "stars": 8414, "license": "apache-2.0", "language": "java", "size": 40819}
{"docstring": "/**\n * @param leftRes Left padding as dimension resource.\n * @param topRes Top padding as dimension resource.\n * @param rightRes Right padding as dimension resource.\n * @param bottomRes Bottom padding as dimension resource.\n * @param itemSpacingRes Space as dimension resource to add between each carousel item. Will be\n *     implemented via an item decoration.\n */\n", "func_signal": "public static Padding resource(\n    @DimenRes int leftRes,\n    @DimenRes int topRes,\n    @DimenRes int rightRes,\n    @DimenRes int bottomRes,\n    @DimenRes int itemSpacingRes)", "code": "{\n  return new Padding(\n      leftRes, topRes, rightRes, bottomRes, itemSpacingRes, PaddingType.RESOURCE);\n}", "path": "epoxy/epoxy-adapter/src/main/java/com/airbnb/epoxy/Carousel.java", "commit_date": "2020-05-05 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * @param paddingRes Padding as dimension resource.\n * @param itemSpacingRes Space as dimension resource to add between each carousel item. Will be\n *     implemented via an item decoration.\n */\n", "func_signal": "public static Padding resource(@DimenRes int paddingRes, @DimenRes int itemSpacingRes)", "code": "{\n  return new Padding(\n      paddingRes, paddingRes, paddingRes, paddingRes, itemSpacingRes, PaddingType.RESOURCE);\n}", "path": "epoxy/epoxy-adapter/src/main/java/com/airbnb/epoxy/Carousel.java", "commit_date": "2020-05-05 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Register a listener that will be called when this model is bound to a view.\n * <p>\n * The listener will contribute to this model's hashCode state per the {@link\n * com.airbnb.epoxy.EpoxyAttribute.Option#DoNotHash} rules.\n * <p>\n * You may clear the listener by setting a null value, or by calling {@link #reset()} */\n", "func_signal": "public ModelFactoryBaseModelViewModel_ onBind(\n    OnModelBoundListener<ModelFactoryBaseModelViewModel_, ModelFactoryBaseModelView> listener)", "code": "{\n  onMutation();\n  this.onModelBoundListener_epoxyGeneratedModel = listener;\n  return this;\n}", "path": "epoxy/epoxy-modelfactorytest/src/test/resources/ModelFactoryBaseModelViewModel_.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Required.</i>\n *\n * @see TestManyTypesView#setBooleanValue(Boolean)\n */\n", "func_signal": "public TestManyTypesViewModel_ booleanValue(@NonNull Boolean booleanValue)", "code": "{\n  if (booleanValue == null) {\n    throw new IllegalArgumentException(\"booleanValue cannot be null\");\n  }\n  assignedAttributes_epoxyGeneratedModel.set(9);\n  onMutation();\n  this.booleanValue_Boolean = booleanValue;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Register a listener that will be called when this model visibility has changed.\n * <p>\n * The listener will contribute to this model's hashCode state per the {@link\n * com.airbnb.epoxy.EpoxyAttribute.Option#DoNotHash} rules.\n */\n", "func_signal": "public ModelFactoryBaseModelViewModel_ onVisibilityChanged(\n    OnModelVisibilityChangedListener<ModelFactoryBaseModelViewModel_, ModelFactoryBaseModelView> listener)", "code": "{\n  onMutation();\n  this.onModelVisibilityChangedListener_epoxyGeneratedModel = listener;\n  return this;\n}", "path": "epoxy/epoxy-modelfactorytest/src/test/resources/ModelFactoryBaseModelViewModel_.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Register a listener that will be called when this model visibility state has changed.\n * <p>\n * The listener will contribute to this model's hashCode state per the {@link\n * com.airbnb.epoxy.EpoxyAttribute.Option#DoNotHash} rules.\n */\n", "func_signal": "public ModelFactoryBaseModelViewModel_ onVisibilityStateChanged(\n    OnModelVisibilityStateChangedListener<ModelFactoryBaseModelViewModel_, ModelFactoryBaseModelView> listener)", "code": "{\n  onMutation();\n  this.onModelVisibilityStateChangedListener_epoxyGeneratedModel = listener;\n  return this;\n}", "path": "epoxy/epoxy-modelfactorytest/src/test/resources/ModelFactoryBaseModelViewModel_.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * @param left Left padding.\n * @param top Top padding.\n * @param right Right padding.\n * @param bottom Bottom padding.\n * @param itemSpacing Space to add between each carousel item. Will be implemented via an item\n *     decoration.\n * @param paddingType Unit / Type of the given paddings/ itemspacing.\n */\n", "func_signal": "private Padding(\n    int left, int top, int right, int bottom, int itemSpacing, PaddingType paddingType)", "code": "{\n\n  this.left = left;\n  this.top = top;\n  this.right = right;\n  this.bottom = bottom;\n  this.itemSpacing = itemSpacing;\n  this.paddingType = paddingType;\n}", "path": "epoxy/epoxy-adapter/src/main/java/com/airbnb/epoxy/Carousel.java", "commit_date": "2020-05-05 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Required.</i>\n *\n * @see ModelFactoryBaseModelView#setTitle(String)\n */\n", "func_signal": "public ModelFactoryBaseModelViewModel_ title(@NonNull String title)", "code": "{\n  if (title == null) {\n    throw new IllegalArgumentException(\"title cannot be null\");\n  }\n  assignedAttributes_epoxyGeneratedModel.set(0);\n  onMutation();\n  this.title_String = title;\n  return this;\n}", "path": "epoxy/epoxy-modelfactorytest/src/test/resources/ModelFactoryBaseModelViewModel_.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Required.</i>\n *\n * @see TestManyTypesView#setStringValue(String)\n */\n", "func_signal": "public TestManyTypesViewModel_ stringValue(@NonNull String stringValue)", "code": "{\n  if (stringValue == null) {\n    throw new IllegalArgumentException(\"stringValue cannot be null\");\n  }\n  assignedAttributes_epoxyGeneratedModel.set(0);\n  onMutation();\n  this.stringValue_String = stringValue;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Register a listener that will be called when this model is bound to a view.\n * <p>\n * The listener will contribute to this model's hashCode state per the {@link\n * com.airbnb.epoxy.EpoxyAttribute.Option#DoNotHash} rules.\n * <p>\n * You may clear the listener by setting a null value, or by calling {@link #reset()} */\n", "func_signal": "public TestManyTypesViewModel_ onBind(\n    OnModelBoundListener<TestManyTypesViewModel_, TestManyTypesView> listener)", "code": "{\n  onMutation();\n  this.onModelBoundListener_epoxyGeneratedModel = listener;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Required.</i>\n *\n * @see TestManyTypesView#setListValue(List<String>)\n */\n", "func_signal": "public TestManyTypesViewModel_ listValue(@NonNull List<String> listValue)", "code": "{\n  if (listValue == null) {\n    throw new IllegalArgumentException(\"listValue cannot be null\");\n  }\n  assignedAttributes_epoxyGeneratedModel.set(11);\n  onMutation();\n  this.listValue_List = listValue;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Required.</i>\n *\n * @see TestManyTypesView#setArrayValue(String[])\n */\n", "func_signal": "public TestManyTypesViewModel_ arrayValue(@NonNull String[] arrayValue)", "code": "{\n  if (arrayValue == null) {\n    throw new IllegalArgumentException(\"arrayValue cannot be null\");\n  }\n  assignedAttributes_epoxyGeneratedModel.set(10);\n  onMutation();\n  this.arrayValue_StringArray = arrayValue;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Register a listener that will be called when this model is unbound from a view.\n * <p>\n * The listener will contribute to this model's hashCode state per the {@link\n * com.airbnb.epoxy.EpoxyAttribute.Option#DoNotHash} rules.\n * <p>\n * You may clear the listener by setting a null value, or by calling {@link #reset()} */\n", "func_signal": "public TestManyTypesViewModel_ onUnbind(\n    OnModelUnboundListener<TestManyTypesViewModel_, TestManyTypesView> listener)", "code": "{\n  onMutation();\n  this.onModelUnboundListener_epoxyGeneratedModel = listener;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Optional</i>: Default value is false\n *\n * @see TestManyTypesView#setBoolValue(boolean)\n */\n", "func_signal": "public TestManyTypesViewModel_ boolValue(boolean boolValue)", "code": "{\n  onMutation();\n  this.boolValue_Boolean = boolValue;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */\n", "func_signal": "public TestManyTypesViewModel_ clickListener(\n    @NonNull final OnModelClickListener<TestManyTypesViewModel_, TestManyTypesView> clickListener)", "code": "{\n  assignedAttributes_epoxyGeneratedModel.set(12);\n  onMutation();\n  if (clickListener == null) {\n    this.clickListener_OnClickListener = null;\n  }\n  else {\n    this.clickListener_OnClickListener = new WrappedEpoxyModelClickListener(clickListener);\n  }\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Required.</i>\n *\n * @see TestManyTypesView#setClickListener(View.OnClickListener)\n */\n", "func_signal": "public TestManyTypesViewModel_ clickListener(@NonNull View.OnClickListener clickListener)", "code": "{\n  if (clickListener == null) {\n    throw new IllegalArgumentException(\"clickListener cannot be null\");\n  }\n  assignedAttributes_epoxyGeneratedModel.set(12);\n  onMutation();\n  this.clickListener_OnClickListener = clickListener;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * If a value of 0 is set then this attribute will revert to its default value.\n * <p>\n * <i>Optional</i>: Default value is (CharSequence) null\n *\n * @see TestManyTypesView#setTitle(CharSequence)\n */\n", "func_signal": "public TestManyTypesViewModel_ title(@StringRes int stringRes, Object... formatArgs)", "code": "{\n  onMutation();\n  title_StringAttributeData.setValue(stringRes, formatArgs);\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Optional</i>: Default value is 0\n *\n * @see TestManyTypesView#setIntValueWithAnnotation(int)\n */\n", "func_signal": "public TestManyTypesViewModel_ intValueWithAnnotation(@StringRes int intValueWithAnnotation)", "code": "{\n  onMutation();\n  this.intValueWithAnnotation_Int = intValueWithAnnotation;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Register a listener that will be called when this model visibility has changed.\n * <p>\n * The listener will contribute to this model's hashCode state per the {@link\n * com.airbnb.epoxy.EpoxyAttribute.Option#DoNotHash} rules.\n */\n", "func_signal": "public TestManyTypesViewModel_ onVisibilityChanged(\n    OnModelVisibilityChangedListener<TestManyTypesViewModel_, TestManyTypesView> listener)", "code": "{\n  onMutation();\n  this.onModelVisibilityChangedListener_epoxyGeneratedModel = listener;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * <i>Optional</i>: Default value is (String) null\n *\n * @see TestManyTypesView#setNullableStringValue(String)\n */\n", "func_signal": "public TestManyTypesViewModel_ nullableStringValue(@Nullable String nullableStringValue)", "code": "{\n  onMutation();\n  this.nullableStringValue_String = nullableStringValue;\n  return this;\n}", "path": "epoxy/epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java", "commit_date": "2020-06-01 00:00:00", "repo_name": "airbnb/epoxy", "stars": 8425, "license": "apache-2.0", "language": "java", "size": 34091}
{"docstring": "/**\n * Starts a client handshake. A GeneralSecurityException is thrown if the handshaker service is\n * interrupted or fails. Note that isFinished() must be false before this function is called.\n *\n * @return the frame to give to the peer.\n * @throws GeneralSecurityException or IllegalStateException\n */\n", "func_signal": "public ByteBuffer startClientHandshake() throws GeneralSecurityException", "code": "{\n  Preconditions.checkState(!isFinished(), \"Handshake has already finished.\");\n  HandshakerReq.Builder req = HandshakerReq.newBuilder();\n  setStartClientFields(req);\n  HandshakerResp resp;\n  try {\n    resp = handshakerStub.send(req.build());\n  } catch (IOException | InterruptedException e) {\n    throw new GeneralSecurityException(e);\n  }\n  handleResponse(resp);\n  return resp.getOutFrames().asReadOnlyByteBuffer();\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Sets the Cronet channel to always use PUT instead of POST. Defaults to false.\n */\n", "func_signal": "public final CronetChannelBuilder alwaysUsePut(boolean enable)", "code": "{\n  this.alwaysUsePut = enable;\n  return this;\n}", "path": "grpc-java/cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Constructor for use by subclasses.\n *\n * @since 1.0.0\n * @param channel the channel that this stub will use to do communications\n * @param callOptions the runtime call options to be applied to every call on this stub\n */\n", "func_signal": "protected AbstractStub(Channel channel, CallOptions callOptions)", "code": "{\n  this.channel = checkNotNull(channel, \"channel\");\n  this.callOptions = checkNotNull(callOptions, \"callOptions\");\n}", "path": "grpc-java/stub/src/main/java/io/grpc/stub/AbstractStub.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Parses the JSON input file containing the list of features.\n */\n", "func_signal": "public static List<Feature> parseFeatures(URL file) throws IOException", "code": "{\n  InputStream input = file.openStream();\n  try {\n    Reader reader = new InputStreamReader(input, Charset.forName(\"UTF-8\"));\n    try {\n      FeatureDatabase.Builder database = FeatureDatabase.newBuilder();\n      JsonFormat.parser().merge(reader, database);\n      return database.getFeatureList();\n    } finally {\n      reader.close();\n    }\n  } finally {\n    input.close();\n  }\n}", "path": "grpc-java/examples/src/main/java/io/grpc/examples/routeguide/RouteGuideUtil.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Starts a server handshake. A GeneralSecurityException is thrown if the handshaker service is\n * interrupted or fails. Note that isFinished() must be false before this function is called.\n *\n * @param inBytes the bytes received from the peer.\n * @return the frame to give to the peer.\n * @throws GeneralSecurityException or IllegalStateException\n */\n", "func_signal": "public ByteBuffer startServerHandshake(ByteBuffer inBytes) throws GeneralSecurityException", "code": "{\n  Preconditions.checkState(!isFinished(), \"Handshake has already finished.\");\n  HandshakerReq.Builder req = HandshakerReq.newBuilder();\n  setStartServerFields(req, inBytes);\n  HandshakerResp resp;\n  try {\n    resp = handshakerStub.send(req.build());\n  } catch (IOException | InterruptedException e) {\n    throw new GeneralSecurityException(e);\n  }\n  handleResponse(resp);\n  ((Buffer) inBytes).position(inBytes.position() + resp.getBytesConsumed());\n  return resp.getOutFrames().asReadOnlyByteBuffer();\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/** Sets the start server fields for the passed handshake request. */\n", "func_signal": "private void setStartServerFields(HandshakerReq.Builder req, ByteBuffer inBytes)", "code": "{\n  ServerHandshakeParameters serverParameters =\n      ServerHandshakeParameters.newBuilder().addRecordProtocols(RECORD_PROTOCOL).build();\n  StartServerHandshakeReq.Builder startServerReq =\n      StartServerHandshakeReq.newBuilder()\n          .addApplicationProtocols(APPLICATION_PROTOCOL)\n          .putHandshakeParameters(HandshakeProtocol.ALTS.getNumber(), serverParameters)\n          .setInBytes(ByteString.copyFrom(inBytes.duplicate()));\n  if (handshakerOptions.getRpcProtocolVersions() != null) {\n    startServerReq.setRpcVersions(handshakerOptions.getRpcProtocolVersions());\n  }\n  startServerReq.setMaxFrameSize(AltsTsiFrameProtector.getMaxFrameSize());\n  req.setServerStart(startServerReq);\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Construct client connecting to HelloWorld server at {@code host:port}.\n */\n", "func_signal": "public HelloWorldClientTls(String host,\n                           int port,\n                           SslContext sslContext) throws SSLException", "code": "{\n\n    this(NettyChannelBuilder.forAddress(host, port)\n            .overrideAuthority(\"foo.test.google.fr\")  /* Only for using provided test certs. */\n            .sslContext(sslContext)\n            .build());\n}", "path": "grpc-java/examples/example-tls/src/main/java/io/grpc/examples/helloworldtls/HelloWorldClientTls.java", "commit_date": "2019-05-22 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Provides a custom scheduled executor service.\n *\n * <p>It's an optional parameter. If the user has not provided a scheduled executor service when\n * the channel is built, the builder will use a static cached thread pool.\n *\n * @return this\n *\n * @since 1.12.0\n */\n", "func_signal": "public final CronetChannelBuilder scheduledExecutorService(\n    ScheduledExecutorService scheduledExecutorService)", "code": "{\n  this.scheduledExecutorService =\n      checkNotNull(scheduledExecutorService, \"scheduledExecutorService\");\n  return this;\n}", "path": "grpc-java/cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Processes the next bytes in a handshake. A GeneralSecurityException is thrown if the handshaker\n * service is interrupted or fails. Note that isFinished() must be false before this function is\n * called.\n *\n * @param inBytes the bytes received from the peer.\n * @return the frame to give to the peer.\n * @throws GeneralSecurityException or IllegalStateException\n */\n", "func_signal": "public ByteBuffer next(ByteBuffer inBytes) throws GeneralSecurityException", "code": "{\n  Preconditions.checkState(!isFinished(), \"Handshake has already finished.\");\n  HandshakerReq.Builder req =\n      HandshakerReq.newBuilder()\n          .setNext(\n              NextHandshakeMessageReq.newBuilder()\n                  .setInBytes(ByteString.copyFrom(inBytes.duplicate()))\n                  .build());\n  HandshakerResp resp;\n  try {\n    resp = handshakerStub.send(req.build());\n  } catch (IOException | InterruptedException e) {\n    throw new GeneralSecurityException(e);\n  }\n  handleResponse(resp);\n  ((Buffer) inBytes).position(inBytes.position() + resp.getBytesConsumed());\n  return resp.getOutFrames().asReadOnlyByteBuffer();\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Say hello to server.\n */\n", "func_signal": "public void greet(String name)", "code": "{\n    logger.info(\"Will try to greet \" + name + \" ...\");\n    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n    HelloReply response;\n    try {\n        response = blockingStub.sayHello(request);\n    } catch (StatusRuntimeException e) {\n        logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n        return;\n    }\n    logger.info(\"Greeting: \" + response.getMessage());\n}", "path": "grpc-java/examples/example-tls/src/main/java/io/grpc/examples/helloworldtls/HelloWorldClientTls.java", "commit_date": "2019-05-22 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/** Returns true if the handshake is complete. */\n", "func_signal": "public boolean isFinished()", "code": "{\n  // If we have a HandshakeResult, we are done.\n  if (result != null) {\n    return true;\n  }\n  // If we have an error status, we are done.\n  if (status != null && status.getCode() != Status.Code.OK.value()) {\n    return true;\n  }\n  return false;\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/** Creates a new builder for the given server host, port and CronetEngine. */\n", "func_signal": "public static CronetChannelBuilder forAddress(String host, int port, CronetEngine cronetEngine)", "code": "{\n  Preconditions.checkNotNull(cronetEngine, \"cronetEngine\");\n  return new CronetChannelBuilder(host, port, cronetEngine);\n}", "path": "grpc-java/cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Parses a handshake response, setting the status, result, and closing the handshaker, as needed.\n */\n", "func_signal": "private void handleResponse(HandshakerResp resp) throws GeneralSecurityException", "code": "{\n  status = resp.getStatus();\n  if (resp.hasResult()) {\n    result = resp.getResult();\n    close();\n  }\n  if (status.getCode() != Status.Code.OK.value()) {\n    String error = \"Handshaker service error: \" + status.getDetails();\n    logger.log(Level.INFO, error);\n    close();\n    throw new GeneralSecurityException(error);\n  }\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Sets the maximum message size allowed to be received on the channel. If not called,\n * defaults to {@link io.grpc.internal.GrpcUtil#DEFAULT_MAX_MESSAGE_SIZE}.\n */\n", "func_signal": "public final CronetChannelBuilder maxMessageSize(int maxMessageSize)", "code": "{\n  checkArgument(maxMessageSize >= 0, \"maxMessageSize must be >= 0\");\n  this.maxMessageSize = maxMessageSize;\n  return this;\n}", "path": "grpc-java/cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java", "commit_date": "2020-10-29 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Greet server. If provided, the first element of {@code args} is the name to use in the\n * greeting.\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\n    if (args.length < 2 || args.length == 4 || args.length > 5) {\n        System.out.println(\"USAGE: HelloWorldClientTls host port [trustCertCollectionFilePath \" +\n                \"[clientCertChainFilePath clientPrivateKeyFilePath]]\\n  Note: clientCertChainFilePath and \" +\n                \"clientPrivateKeyFilePath are only needed if mutual auth is desired.\");\n        System.exit(0);\n    }\n\n    HelloWorldClientTls client;\n    switch (args.length) {\n        case 2:\n            /* Use default CA. Only for real server certificates. */\n            client = new HelloWorldClientTls(args[0], Integer.parseInt(args[1]),\n                    buildSslContext(null, null, null));\n            break;\n        case 3:\n            client = new HelloWorldClientTls(args[0], Integer.parseInt(args[1]),\n                    buildSslContext(args[2], null, null));\n            break;\n        default:\n            client = new HelloWorldClientTls(args[0], Integer.parseInt(args[1]),\n                    buildSslContext(args[2], args[3], args[4]));\n    }\n\n    try {\n        client.greet(args[0]);\n    } finally {\n        client.shutdown();\n    }\n}", "path": "grpc-java/examples/example-tls/src/main/java/io/grpc/examples/helloworldtls/HelloWorldClientTls.java", "commit_date": "2019-05-22 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Returns the resulting key of the handshake, if the handshake is completed. Note that the key\n * data returned from the handshake may be more than the key length required for the record\n * protocol, thus we need to truncate to the right size.\n */\n", "func_signal": "public byte[] getKey()", "code": "{\n  if (result == null) {\n    return null;\n  }\n  if (result.getKeyData().size() < KEY_LENGTH) {\n    throw new IllegalStateException(\"Could not get enough key data from the handshake.\");\n  }\n  byte[] key = new byte[KEY_LENGTH];\n  result.getKeyData().substring(0, KEY_LENGTH).copyTo(key, 0);\n  return key;\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Must be called with holding the transport lock.\n */\n", "func_signal": "@GuardedBy(\"lock\")\npublic void transportHeadersReceived(List<Header> headers, boolean endOfStream)", "code": "{\n  if (endOfStream) {\n    transportTrailersReceived(Utils.convertTrailers(headers));\n  } else {\n    transportHeadersReceived(Utils.convertHeaders(headers));\n  }\n}", "path": "grpc-java/okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java", "commit_date": "2020-07-01 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/** Sets the start client fields for the passed handshake request. */\n", "func_signal": "private void setStartClientFields(HandshakerReq.Builder req)", "code": "{\n  // Sets the default values.\n  StartClientHandshakeReq.Builder startClientReq =\n      StartClientHandshakeReq.newBuilder()\n          .setHandshakeSecurityProtocol(HandshakeProtocol.ALTS)\n          .addApplicationProtocols(APPLICATION_PROTOCOL)\n          .addRecordProtocols(RECORD_PROTOCOL);\n  // Sets handshaker options.\n  if (handshakerOptions.getRpcProtocolVersions() != null) {\n    startClientReq.setRpcVersions(handshakerOptions.getRpcProtocolVersions());\n  }\n  if (handshakerOptions instanceof AltsClientOptions) {\n    AltsClientOptions clientOptions = (AltsClientOptions) handshakerOptions;\n    if (!Strings.isNullOrEmpty(clientOptions.getTargetName())) {\n      startClientReq.setTargetName(clientOptions.getTargetName());\n    }\n    for (String serviceAccount : clientOptions.getTargetServiceAccounts()) {\n      startClientReq.addTargetIdentitiesBuilder().setServiceAccount(serviceAccount);\n    }\n  }\n  startClientReq.setMaxFrameSize(AltsTsiFrameProtector.getMaxFrameSize());\n  req.setClientStart(startClientReq);\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Must be called with holding the transport lock.\n */\n", "func_signal": "@GuardedBy(\"lock\")\npublic void transportDataReceived(okio.Buffer frame, boolean endOfStream)", "code": "{\n  // We only support 16 KiB frames, and the max permitted in HTTP/2 is 16 MiB. This is verified\n  // in OkHttp's Http2 deframer. In addition, this code is after the data has been read.\n  int length = (int) frame.size();\n  window -= length;\n  if (window < 0) {\n    frameWriter.rstStream(id(), ErrorCode.FLOW_CONTROL_ERROR);\n    transport.finishStream(\n        id(),\n        Status.INTERNAL.withDescription(\n            \"Received data size exceeded our receiving window size\"),\n        PROCESSED, false, null, null);\n    return;\n  }\n  super.transportDataReceived(new OkHttpReadableBuffer(frame), endOfStream);\n}", "path": "grpc-java/okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java", "commit_date": "2020-07-01 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/** Closes the connection. */\n", "func_signal": "public void close()", "code": "{\n  if (closed) {\n    return;\n  }\n  closed = true;\n  handshakerStub.close();\n}", "path": "grpc-java/alts/src/main/java/io/grpc/alts/internal/AltsHandshakerClient.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "grpc/grpc-java", "stars": 11068, "license": "apache-2.0", "language": "java", "size": 86042}
{"docstring": "/**\n * Check all events for tasks not related to a process-instance\n */\n", "func_signal": "public void testStandaloneTaskEvents() throws Exception", "code": "{\n\n  Task task = null;\n  try {\n    task = taskService.newTask();\n    task.setCategory(\"123\");\n    task.setDescription(\"Description\");\n    taskService.saveTask(task);\n\n    assertThat(listener.getEventsReceived()).hasSize(3);\n\n    ActivitiEntityEvent event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_CREATED);\n    assertThat(event.getEntity()).isInstanceOf(Task.class);\n    Task taskFromEvent = (Task) event.getEntity();\n    assertThat(taskFromEvent.getId()).isEqualTo(task.getId());\n    assertThat(event.getProcessDefinitionId()).isNull();\n    assertThat(event.getProcessInstanceId()).isNull();\n    assertThat(event.getExecutionId()).isNull();\n\n    event = (ActivitiEntityEvent) listener.getEventsReceived().get(1);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_INITIALIZED);\n\n    event = (ActivitiEntityEvent) listener.getEventsReceived().get(2);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.TASK_CREATED);\n    listener.clearEventsReceived();\n\n    // Update task\n    taskService.setOwner(task.getId(), \"owner\");\n    assertThat(listener.getEventsReceived()).hasSize(1);\n    event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_UPDATED);\n    assertThat(event.getEntity()).isInstanceOf(Task.class);\n    taskFromEvent = (Task) event.getEntity();\n    assertThat(taskFromEvent.getId()).isEqualTo(task.getId());\n    assertThat(taskFromEvent.getOwner()).isEqualTo(\"owner\");\n    assertThat(event.getProcessDefinitionId()).isNull();\n    assertThat(event.getProcessInstanceId()).isNull();\n    assertThat(event.getExecutionId()).isNull();\n    listener.clearEventsReceived();\n\n    // Assign task\n    taskService.setAssignee(task.getId(), \"kermit\");\n    assertThat(listener.getEventsReceived()).hasSize(2);\n    event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.TASK_ASSIGNED);\n    assertThat(event.getEntity()).isInstanceOf(Task.class);\n    taskFromEvent = (Task) event.getEntity();\n    assertThat(taskFromEvent.getId()).isEqualTo(task.getId());\n    assertThat(taskFromEvent.getAssignee()).isEqualTo(\"kermit\");\n    assertThat(event.getProcessDefinitionId()).isNull();\n    assertThat(event.getProcessInstanceId()).isNull();\n    assertThat(event.getExecutionId()).isNull();\n    event = (ActivitiEntityEvent) listener.getEventsReceived().get(1);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_UPDATED);\n    assertThat(event.getEntity()).isInstanceOf(Task.class);\n    taskFromEvent = (Task) event.getEntity();\n    assertThat(taskFromEvent.getId()).isEqualTo(task.getId());\n    assertThat(event.getProcessDefinitionId()).isNull();\n    assertThat(event.getProcessInstanceId()).isNull();\n    assertThat(event.getExecutionId()).isNull();\n    listener.clearEventsReceived();\n\n    // Complete task\n    taskService.complete(task.getId());\n    assertThat(listener.getEventsReceived()).hasSize(2);\n    event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.TASK_COMPLETED);\n    assertThat(event.getEntity()).isInstanceOf(Task.class);\n    taskFromEvent = (Task) event.getEntity();\n    assertThat(taskFromEvent.getId()).isEqualTo(task.getId());\n    assertThat(event.getProcessDefinitionId()).isNull();\n    assertThat(event.getProcessInstanceId()).isNull();\n    assertThat(event.getExecutionId()).isNull();\n\n    event = (ActivitiEntityEvent) listener.getEventsReceived().get(1);\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_DELETED);\n    assertThat(event.getEntity()).isInstanceOf(Task.class);\n    taskFromEvent = (Task) event.getEntity();\n    assertThat(taskFromEvent.getId()).isEqualTo(task.getId());\n    assertThat(event.getProcessDefinitionId()).isNull();\n    assertThat(event.getProcessInstanceId()).isNull();\n    assertThat(event.getExecutionId()).isNull();\n\n  } finally {\n    if (task != null) {\n      String taskId = task.getId();\n      task = taskService.createTaskQuery().taskId(taskId).singleResult();\n      if (task != null) {\n        // If task still exists, delete it to have a clean DB after\n        // test\n        taskService.deleteTask(taskId);\n      }\n      historyService.deleteHistoricTaskInstance(taskId);\n    }\n  }\n}", "path": "Activiti/activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/api/event/TaskEventsTest.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * This method makes coordinates of connection flow better.\n * @param sourceShapeType\n * @param targetShapeType\n * @param sourceGraphicInfo\n * @param targetGraphicInfo\n * @param graphicInfoList\n */\n", "func_signal": "public List<GraphicInfo> connectionPerfectionizer(SHAPE_TYPE sourceShapeType,\n                                                  SHAPE_TYPE targetShapeType,\n                                                  GraphicInfo sourceGraphicInfo,\n                                                  GraphicInfo targetGraphicInfo,\n                                                  List<GraphicInfo> graphicInfoList)", "code": "{\n    Shape shapeFirst = createShape(sourceShapeType,\n                                   sourceGraphicInfo);\n    Shape shapeLast = createShape(targetShapeType,\n                                  targetGraphicInfo);\n\n    if (graphicInfoList != null && graphicInfoList.size() > 0) {\n        GraphicInfo graphicInfoFirst = graphicInfoList.get(0);\n        GraphicInfo graphicInfoLast = graphicInfoList.get(graphicInfoList.size() - 1);\n        if (shapeFirst != null) {\n            graphicInfoFirst.setX(shapeFirst.getBounds2D().getCenterX());\n            graphicInfoFirst.setY(shapeFirst.getBounds2D().getCenterY());\n        }\n        if (shapeLast != null) {\n            graphicInfoLast.setX(shapeLast.getBounds2D().getCenterX());\n            graphicInfoLast.setY(shapeLast.getBounds2D().getCenterY());\n        }\n\n        Point p = null;\n\n        if (shapeFirst != null) {\n            Line2D.Double lineFirst = new Line2D.Double(graphicInfoFirst.getX(),\n                                                        graphicInfoFirst.getY(),\n                                                        graphicInfoList.get(1).getX(),\n                                                        graphicInfoList.get(1).getY());\n            p = getIntersection(shapeFirst,\n                                lineFirst);\n            if (p != null) {\n                graphicInfoFirst.setX(p.getX());\n                graphicInfoFirst.setY(p.getY());\n            }\n        }\n\n        if (shapeLast != null) {\n            Line2D.Double lineLast = new Line2D.Double(graphicInfoLast.getX(),\n                                                       graphicInfoLast.getY(),\n                                                       graphicInfoList.get(graphicInfoList.size() - 2).getX(),\n                                                       graphicInfoList.get(graphicInfoList.size() - 2).getY());\n            p = getIntersection(shapeLast,\n                                lineLast);\n            if (p != null) {\n                graphicInfoLast.setX(p.getX());\n                graphicInfoLast.setY(p.getY());\n            }\n        }\n    }\n\n    return graphicInfoList;\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * This method calculates ellipse intersection with line\n * @param shape Bounds of this shape used to calculate parameters of inscribed into this bounds ellipse.\n * @param line\n * @return Intersection point\n */\n", "func_signal": "private static Point getEllipseIntersection(Shape shape,\n                                            Line2D.Double line)", "code": "{\n    double angle = Math.atan2(line.y2 - line.y1,\n                              line.x2 - line.x1);\n    double x = shape.getBounds2D().getWidth() / 2 * Math.cos(angle) + shape.getBounds2D().getCenterX();\n    double y = shape.getBounds2D().getHeight() / 2 * Math.sin(angle) + shape.getBounds2D().getCenterY();\n    Point p = new Point();\n    p.setLocation(x,\n                  y);\n    return p;\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Creates an empty canvas with given width and height.\n * <p>\n * Allows to specify minimal boundaries on the left and upper side of the\n * canvas. This is useful for diagrams that have white space there.\n * Everything beneath these minimum values will be cropped.\n * It's also possible to pass a specific font name and a class loader for the icon images.\n */\n", "func_signal": "public DefaultProcessDiagramCanvas(int width,\n                                   int height,\n                                   int minX,\n                                   int minY,\n                                   String activityFontName,\n                                   String labelFontName,\n                                   String annotationFontName)", "code": "{\n\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.minX = minX;\n    this.minY = minY;\n    if (activityFontName != null) {\n        this.activityFontName = activityFontName;\n    }\n    if (labelFontName != null) {\n        this.labelFontName = labelFontName;\n    }\n    if (annotationFontName != null) {\n        this.annotationFontName = annotationFontName;\n    }\n\n    initialize();\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * This method creates shape by type and coordinates.\n * @param shapeType\n * @param graphicInfo\n * @return Shape\n */\n", "func_signal": "private static Shape createShape(SHAPE_TYPE shapeType,\n                                 GraphicInfo graphicInfo)", "code": "{\n    if (SHAPE_TYPE.Rectangle.equals(shapeType)) {\n        // source is rectangle\n        return new Rectangle2D.Double(graphicInfo.getX(),\n                                      graphicInfo.getY(),\n                                      graphicInfo.getWidth(),\n                                      graphicInfo.getHeight());\n    } else if (SHAPE_TYPE.Rhombus.equals(shapeType)) {\n        // source is rhombus\n        Path2D.Double rhombus = new Path2D.Double();\n        rhombus.moveTo(graphicInfo.getX(),\n                       graphicInfo.getY() + graphicInfo.getHeight() / 2);\n        rhombus.lineTo(graphicInfo.getX() + graphicInfo.getWidth() / 2,\n                       graphicInfo.getY() + graphicInfo.getHeight());\n        rhombus.lineTo(graphicInfo.getX() + graphicInfo.getWidth(),\n                       graphicInfo.getY() + graphicInfo.getHeight() / 2);\n        rhombus.lineTo(graphicInfo.getX() + graphicInfo.getWidth() / 2,\n                       graphicInfo.getY());\n        rhombus.lineTo(graphicInfo.getX(),\n                       graphicInfo.getY() + graphicInfo.getHeight() / 2);\n        rhombus.closePath();\n        return rhombus;\n    } else if (SHAPE_TYPE.Ellipse.equals(shapeType)) {\n        // source is ellipse\n        return new Ellipse2D.Double(graphicInfo.getX(),\n                                    graphicInfo.getY(),\n                                    graphicInfo.getWidth(),\n                                    graphicInfo.getHeight());\n    }\n    // unknown source element, just do not correct coordinates\n    return null;\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Test to verify listeners defined in the BPMN xml with invalid class/delegateExpression values cause an exception when process is started.\n */\n", "func_signal": "public void testProcessDefinitionListenerDefinitionError() throws Exception", "code": "{\n\n  // Deploy process with expression which references an unexisting bean\n  org.activiti.engine.repository.Deployment deployment = repositoryService.createDeployment().addClasspathResource(\"org/activiti/standalone/event/invalidEventListenerExpression.bpmn20.xml\").deploy();\n  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testInvalidEventExpression\");\n  assertThat(processInstance).isNotNull();\n  repositoryService.deleteDeployment(deployment.getId(), true);\n\n  // Deploy process with listener which references an unexisting class\n  deployment = repositoryService.createDeployment().addClasspathResource(\"org/activiti/standalone/event/invalidEventListenerClass.bpmn20.xml\").deploy();\n  processInstance = runtimeService.startProcessInstanceByKey(\"testInvalidEventClass\");\n  repositoryService.deleteDeployment(deployment.getId(), true);\n}", "path": "Activiti/activiti-core/activiti-engine/src/test/java/org/activiti/standalone/event/ProcessDefinitionScopedEventListenerDefinitionTest.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "//this bean will be automatically injected inside boot's ObjectMapper\n", "func_signal": "@Bean\npublic Module customizeCommonModelObjectMapper()", "code": "{\n    SimpleModule module = new SimpleModule(\"mapCommonModelInterfaces\",\n                                           Version.unknownVersion());\n    SimpleAbstractTypeResolver resolver = new SimpleAbstractTypeResolver() {\n        //this is a workaround for https://github.com/FasterXML/jackson-databind/issues/2019\n        //once version 2.9.6 is related we can remove this @override method\n        @Override\n        public JavaType resolveAbstractType(DeserializationConfig config,\n                                            BeanDescription typeDesc) {\n            return findTypeMapping(config,\n                                   typeDesc.getType());\n        }\n    };\n\n    resolver.addMapping(VariableInstance.class,\n                        VariableInstanceImpl.class);\n\n    module.setAbstractTypes(resolver);\n\n    module.setMixInAnnotation(Payload.class,\n                              PayloadMixIn.class);\n    module.setMixInAnnotation(Result.class,\n                              ResultMixIn.class);\n\n    module.registerSubtypes(new NamedType(EmptyResult.class,\n                                          EmptyResult.class.getSimpleName()));\n\n    return module;\n}", "path": "Activiti/activiti-core/activiti-api-impl/activiti-api-model-shared-impl/src/main/java/org/activiti/api/runtime/conf/impl/CommonModelAutoConfiguration.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * This method calculates intersections of two lines.\n * @param a Line 1\n * @param b Line 2\n * @return Intersection point\n */\n", "func_signal": "private static Point getLinesIntersection(Line2D a,\n                                          Line2D b)", "code": "{\n    double d = (a.getX1() - a.getX2()) * (b.getY2() - b.getY1()) - (a.getY1() - a.getY2()) * (b.getX2() - b.getX1());\n    double da = (a.getX1() - b.getX1()) * (b.getY2() - b.getY1()) - (a.getY1() - b.getY1()) * (b.getX2() - b.getX1());\n    double ta = da / d;\n    Point p = new Point();\n    p.setLocation(a.getX1() + ta * (a.getX2() - a.getX1()),\n                  a.getY1() + ta * (a.getY2() - a.getY1()));\n    return p;\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Test to verify listeners defined in the BPMN xml are added to the process definition and are active, for all entity types\n */\n", "func_signal": "@Deployment\npublic void testProcessDefinitionListenerDefinitionEntities() throws Exception", "code": "{\n  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testEventListeners\");\n  assertThat(processInstance).isNotNull();\n  Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertThat(task).isNotNull();\n\n  // Attachment entity\n  TestActivitiEventListener theListener = (TestActivitiEventListener) processEngineConfiguration.getBeans().get(\"testAttachmentEventListener\");\n  assertThat(theListener).isNotNull();\n  assertThat(theListener.getEventsReceived()).hasSize(0);\n\n  taskService.createAttachment(\"test\", task.getId(), processInstance.getId(), \"test\", \"test\", \"url\");\n  assertThat(theListener.getEventsReceived()).hasSize(2);\n  assertThat(theListener.getEventsReceived().get(0).getType()).isEqualTo(ActivitiEventType.ENTITY_CREATED);\n  assertThat(theListener.getEventsReceived().get(1).getType()).isEqualTo(ActivitiEventType.ENTITY_INITIALIZED);\n\n}", "path": "Activiti/activiti-core/activiti-engine/src/test/java/org/activiti/standalone/event/ProcessDefinitionScopedEventListenerDefinitionTest.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * This method returns intersection point of shape border and line.\n * @param shape\n * @param line\n * @return Point\n */\n", "func_signal": "private static Point getIntersection(Shape shape,\n                                     Line2D.Double line)", "code": "{\n    if (shape instanceof Ellipse2D) {\n        return getEllipseIntersection(shape,\n                                      line);\n    } else if (shape instanceof Rectangle2D || shape instanceof Path2D) {\n        return getShapeIntersection(shape,\n                                    line);\n    } else {\n        // something strange\n        return null;\n    }\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Closes the canvas which dissallows further drawing and releases graphical\n * resources.\n */\n", "func_signal": "public void close()", "code": "{\n    g.dispose();\n    closed = true;\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "// ordering\n// /////////////////////////////////////////////////////////////////\n", "func_signal": "public HistoricTaskInstanceQueryImpl orderByTaskId()", "code": "{\n  orderBy(HistoricTaskInstanceQueryProperty.HISTORIC_TASK_INSTANCE_ID);\n  return this;\n}", "path": "Activiti/activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/HistoricTaskInstanceQueryImpl.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * This method calculates shape intersection with line.\n * @param shape\n * @param line\n * @return Intersection point\n */\n", "func_signal": "private static Point getShapeIntersection(Shape shape,\n                                          Line2D.Double line)", "code": "{\n    PathIterator it = shape.getPathIterator(null);\n    double[] coords = new double[6];\n    double[] pos = new double[2];\n    Line2D.Double l = new Line2D.Double();\n    while (!it.isDone()) {\n        int type = it.currentSegment(coords);\n        switch (type) {\n            case PathIterator.SEG_MOVETO:\n                pos[0] = coords[0];\n                pos[1] = coords[1];\n                break;\n            case PathIterator.SEG_LINETO:\n                l = new Line2D.Double(pos[0],\n                                      pos[1],\n                                      coords[0],\n                                      coords[1]);\n                if (line.intersectsLine(l)) {\n                    return getLinesIntersection(line,\n                                                l);\n                }\n                pos[0] = coords[0];\n                pos[1] = coords[1];\n                break;\n            case PathIterator.SEG_CLOSE:\n                break;\n            default:\n                // whatever\n        }\n        it.next();\n    }\n    return null;\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Implementation based on {@link TestWatcher}.\n */\n", "func_signal": "@Override\npublic Statement apply(final Statement base, final Description description)", "code": "{\n  return new Statement() {\n    @Override\n    public void evaluate() throws Throwable {\n      List<Throwable> errors = new ArrayList<Throwable>();\n\n      startingQuietly(description, errors);\n      try {\n        base.evaluate();\n        succeededQuietly(description, errors);\n      } catch (AssumptionViolatedException e) {\n        errors.add(e);\n        skippedQuietly(e, description, errors);\n      } catch (Throwable t) {\n        errors.add(t);\n        failedQuietly(t, description, errors);\n      } finally {\n        finishedQuietly(description, errors);\n      }\n\n      MultipleFailureException.assertEmpty(errors);\n    }\n  };\n}", "path": "Activiti/activiti-core/activiti-engine/src/main/java/org/activiti/engine/test/ActivitiRule.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Creates an empty canvas with given width and height.\n * <p>\n * Allows to specify minimal boundaries on the left and upper side of the\n * canvas. This is useful for diagrams that have white space there (eg\n * Signavio). Everything beneath these minimum values will be cropped.\n * @param minX Hint that will be used when generating the image. Parts that fall\n * below minX on the horizontal scale will be cropped.\n * @param minY Hint that will be used when generating the image. Parts that fall\n * below minX on the horizontal scale will be cropped.\n */\n", "func_signal": "public DefaultProcessDiagramCanvas(int width,\n                                   int height,\n                                   int minX,\n                                   int minY)", "code": "{\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.minX = minX;\n    this.minY = minY;\n\n    initialize();\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Test to verify listeners defined in the BPMN xml are added to the process definition and are active.\n */\n", "func_signal": "@Deployment\npublic void testProcessDefinitionListenerDefinition() throws Exception", "code": "{\n  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testEventListeners\");\n  assertThat(testListenerBean).isNotNull();\n\n  Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  taskService.complete(task.getId());\n\n  // Check if the listener (defined as bean) received events (only creation, not other events)\n  assertThat(testListenerBean.getEventsReceived().isEmpty()).isFalse();\n  for (ActivitiEvent event : testListenerBean.getEventsReceived()) {\n    assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_CREATED);\n  }\n\n  // First event received should be creation of Process-instance\n  assertThat(testListenerBean.getEventsReceived().get(0)).isInstanceOf(ActivitiEntityEvent.class);\n  ActivitiEntityEvent event = (ActivitiEntityEvent) testListenerBean.getEventsReceived().get(0);\n  assertThat(event.getEntity()).isInstanceOf(ProcessInstance.class);\n  assertThat(((ProcessInstance) event.getEntity()).getId()).isEqualTo(processInstance.getId());\n\n  // Check if listener, defined by classname, received all events\n  List<ActivitiEvent> events = StaticTestActivitiEventListener.getEventsReceived();\n  assertThat(events.isEmpty()).isFalse();\n\n  boolean insertFound = false;\n  boolean deleteFound = false;\n\n  for (ActivitiEvent e : events) {\n    if (ActivitiEventType.ENTITY_CREATED == e.getType()) {\n      insertFound = true;\n    } else if (ActivitiEventType.ENTITY_DELETED == e.getType()) {\n      deleteFound = true;\n    }\n  }\n  assertThat(insertFound).isTrue();\n  assertThat(deleteFound).isTrue();\n}", "path": "Activiti/activiti-core/activiti-engine/src/test/java/org/activiti/standalone/event/ProcessDefinitionScopedEventListenerDefinitionTest.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Test to verify if event listeners defined in the BPMN XML which have illegal event-types cause an exception on deploy.\n */\n", "func_signal": "public void testProcessDefinitionListenerDefinitionIllegalType() throws Exception", "code": "{\n  assertThatExceptionOfType(ActivitiIllegalArgumentException.class)\n    .isThrownBy(() -> repositoryService.createDeployment()\n      .addClasspathResource(\"org/activiti/standalone/event/invalidEventListenerType.bpmn20.xml\")\n      .deploy())\n    .withMessageContaining(\"Invalid event-type: invalid\");\n}", "path": "Activiti/activiti-core/activiti-engine/src/test/java/org/activiti/standalone/event/ProcessDefinitionScopedEventListenerDefinitionTest.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "// results ////////////////////////////////////////////\n", "func_signal": "public long executeCount(CommandContext commandContext)", "code": "{\n    checkQueryOk();\n    return commandContext.getProcessDefinitionEntityManager().findProcessDefinitionCountByQueryCriteria(this);\n}", "path": "Activiti/activiti-core/activiti-engine/src/main/java/org/activiti/engine/impl/ProcessDefinitionQueryImpl.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Generates an image of what currently is drawn on the canvas.\n * <p>\n * Throws an {@link ActivitiImageException} when {@link #close()} is already\n * called.\n */\n", "func_signal": "public InputStream generateImage()", "code": "{\n    if (closed) {\n        throw new ActivitiImageException(\"ProcessDiagramGenerator already closed\");\n    }\n\n    try {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        Writer out;\n        out = new OutputStreamWriter(stream,\n                                     \"UTF-8\");\n        g.stream(out,\n                 true);\n        return new ByteArrayInputStream(stream.toByteArray());\n    } catch (UnsupportedEncodingException | SVGGraphics2DIOException e) {\n        throw new ActivitiImageException(\"Error while generating process image\",\n                                         e);\n    }\n}", "path": "Activiti/activiti-core/activiti-image-generator/src/main/java/org/activiti/image/impl/DefaultProcessDiagramCanvas.java", "commit_date": "2020-12-16 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Test create, update and delete events of users.\n */\n", "func_signal": "public void testAttachmentEntityEventsStandaloneTask() throws Exception", "code": "{\n  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {\n    Task task = null;\n    try {\n      task = taskService.newTask();\n      taskService.saveTask(task);\n      assertThat(task).isNotNull();\n\n      // Create link-attachment\n      Attachment attachment = taskService.createAttachment(\"test\", task.getId(), null, \"attachment name\", \"description\", \"http://activiti.org\");\n      assertThat(listener.getEventsReceived()).hasSize(2);\n      ActivitiEntityEvent event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n      assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_CREATED);\n      assertThat(event.getProcessInstanceId()).isNull();\n      assertThat(event.getExecutionId()).isNull();\n      assertThat(event.getProcessDefinitionId()).isNull();\n      Attachment attachmentFromEvent = (Attachment) event.getEntity();\n      assertThat(attachmentFromEvent.getId()).isEqualTo(attachment.getId());\n      event = (ActivitiEntityEvent) listener.getEventsReceived().get(1);\n      assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_INITIALIZED);\n      listener.clearEventsReceived();\n\n      // Create binary attachment\n      attachment = taskService.createAttachment(\"test\", task.getId(), null, \"attachment name\", \"description\", new ByteArrayInputStream(\"test\".getBytes()));\n      assertThat(listener.getEventsReceived()).hasSize(2);\n      event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n      assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_CREATED);\n      assertThat(event.getProcessInstanceId()).isNull();\n      assertThat(event.getExecutionId()).isNull();\n      assertThat(event.getProcessDefinitionId()).isNull();\n      attachmentFromEvent = (Attachment) event.getEntity();\n      assertThat(attachmentFromEvent.getId()).isEqualTo(attachment.getId());\n\n      event = (ActivitiEntityEvent) listener.getEventsReceived().get(1);\n      assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_INITIALIZED);\n      listener.clearEventsReceived();\n\n      // Update attachment\n      attachment = taskService.getAttachment(attachment.getId());\n      attachment.setDescription(\"Description\");\n      taskService.saveAttachment(attachment);\n\n      assertThat(listener.getEventsReceived()).hasSize(1);\n      event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n      assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_UPDATED);\n      assertThat(event.getProcessInstanceId()).isNull();\n      assertThat(event.getExecutionId()).isNull();\n      assertThat(event.getProcessDefinitionId()).isNull();\n      attachmentFromEvent = (Attachment) event.getEntity();\n      assertThat(attachmentFromEvent.getId()).isEqualTo(attachment.getId());\n      assertThat(attachmentFromEvent.getDescription()).isEqualTo(\"Description\");\n      listener.clearEventsReceived();\n\n      // Finally, delete attachment\n      taskService.deleteAttachment(attachment.getId());\n      assertThat(listener.getEventsReceived()).hasSize(1);\n      event = (ActivitiEntityEvent) listener.getEventsReceived().get(0);\n      assertThat(event.getType()).isEqualTo(ActivitiEventType.ENTITY_DELETED);\n      assertThat(event.getProcessInstanceId()).isNull();\n      assertThat(event.getExecutionId()).isNull();\n      assertThat(event.getProcessDefinitionId()).isNull();\n      attachmentFromEvent = (Attachment) event.getEntity();\n      assertThat(attachmentFromEvent.getId()).isEqualTo(attachment.getId());\n\n    } finally {\n      if (task != null && task.getId() != null) {\n        taskService.deleteTask(task.getId());\n        historyService.deleteHistoricTaskInstance(task.getId());\n      }\n    }\n  }\n}", "path": "Activiti/activiti-core/activiti-engine/src/test/java/org/activiti/engine/test/api/event/AttachmentEventsTest.java", "commit_date": "2020-05-14 00:00:00", "repo_name": "Activiti/Activiti", "stars": 9840, "license": "apache-2.0", "language": "java", "size": 122243}
{"docstring": "/**\n * Set the above view content to the given View.\n *\n * @param view The desired content to display.\n */\n", "func_signal": "public void setContent(View view)", "code": "{\n\tmViewAbove.setContent(view);\n\tshowContent();\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.\n *\n * @param animate true to animate the transition, false to ignore animation\n */\n", "func_signal": "public void toggle(boolean animate)", "code": "{\n\tif (isMenuShowing()) {\n\t\tshowContent(animate);\n\t} else {\n\t\tshowMenu(animate);\n\t}\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Sets the above offset.\n *\n * @param resID The dimension resource id to be set as the above offset.\n */\n", "func_signal": "public void setAboveOffsetRes(int resID)", "code": "{\n\tint i = (int) getContext().getResources().getDimension(resID);\n\tsetAboveOffset(i);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onRestoreInstanceState(android.os.Parcelable)\n */\n", "func_signal": "@Override\nprotected void onRestoreInstanceState(Parcelable state)", "code": "{\n\tSavedState ss = (SavedState)state;\n\tsuper.onRestoreInstanceState(ss.getSuperState());\n\tmViewAbove.setCurrentItem(ss.getItem());\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Sets the behind scroll scale.\n *\n * @param f The scale of the parallax scroll (i.e. 1.0f scrolls 1 pixel for every\n * 1 pixel that the above view scrolls and 0.0f scrolls 0 pixels)\n */\n", "func_signal": "public void setBehindScrollScale(float f)", "code": "{\n\tif (f < 0 && f > 1)\n\t\tthrow new IllegalStateException(\"ScrollScale must be between 0 and 1\");\n\tmViewBehind.setScrollScale(f);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)\n */\n", "func_signal": "@Override\npublic void setContentView(View v, LayoutParams params)", "code": "{\n\tsuper.setContentView(v, params);\n\tmHelper.registerAboveContentView(v, params);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java", "commit_date": "2013-05-07 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.support.v4.app.FragmentActivity#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tmHelper = new SlidingActivityHelper(this);\n\tmHelper.onCreate(savedInstanceState);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java", "commit_date": "2013-05-07 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.support.v4.app.FragmentActivity#onSaveInstanceState(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onSaveInstanceState(Bundle outState)", "code": "{\n\tsuper.onSaveInstanceState(outState);\n\tmHelper.onSaveInstanceState(outState);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java", "commit_date": "2013-05-07 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Instantiates a new SlidingMenu and attach to Activity.\n *\n * @param activity the activity to attach slidingmenu\n * @param slideStyle the slidingmenu style\n */\n", "func_signal": "public SlidingMenu(Activity activity, int slideStyle)", "code": "{\n\tthis(activity, null);\n\tthis.attachToActivity(activity, slideStyle);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Sets the behind width.\n *\n * @param i The width the Sliding Menu will open to, in pixels\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic void setBehindWidth(int i)", "code": "{\n\tint width;\n\tDisplay display = ((WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE))\n\t\t\t.getDefaultDisplay();\n\ttry {\n\t\tClass<?> cls = Display.class;\n\t\tClass<?>[] parameterTypes = {Point.class};\n\t\tPoint parameter = new Point();\n\t\tMethod method = cls.getMethod(\"getSize\", parameterTypes);\n\t\tmethod.invoke(display, parameter);\n\t\twidth = parameter.x;\n\t} catch (Exception e) {\n\t\twidth = display.getWidth();\n\t}\n\tsetBehindOffset(width-i);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onKeyUp(int, android.view.KeyEvent)\n */\n", "func_signal": "@Override\npublic boolean onKeyUp(int keyCode, KeyEvent event)", "code": "{\n\tboolean b = mHelper.onKeyUp(keyCode, event);\n\tif (b) return b;\n\treturn super.onKeyUp(keyCode, event);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java", "commit_date": "2013-05-07 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.view.AbsSavedState#writeToParcel(android.os.Parcel, int)\n */\n", "func_signal": "public void writeToParcel(Parcel out, int flags)", "code": "{\n\tsuper.writeToParcel(out, flags);\n\tout.writeInt(mItem);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Sets the behind width.\n *\n * @param res The dimension resource id to be set as the behind width offset.\n * The menu, when open, will open this wide.\n */\n", "func_signal": "public void setBehindWidthRes(int res)", "code": "{\n\tint i = (int) getContext().getResources().getDimension(res);\n\tsetBehindWidth(i);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Sets whether or not the SlidingMenu is in static mode (i.e. nothing is moving and everything is showing)\n *\n * @param b true to set static mode, false to disable static mode.\n */\n", "func_signal": "public void setStatic(boolean b)", "code": "{\n\tif (b) {\n\t\tsetSlidingEnabled(false);\n\t\tmViewAbove.setCustomViewBehind(null);\n\t\tmViewAbove.setCurrentItem(1);\n\t\t//\t\t\tmViewBehind.setCurrentItem(0);\t\n\t} else {\n\t\tmViewAbove.setCurrentItem(1);\n\t\t//\t\t\tmViewBehind.setCurrentItem(1);\n\t\tmViewAbove.setCustomViewBehind(mViewBehind);\n\t\tsetSlidingEnabled(true);\n\t}\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.view.ViewGroup#fitSystemWindows(android.graphics.Rect)\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\n@Override\nprotected boolean fitSystemWindows(Rect insets)", "code": "{\n\tint leftPadding = insets.left;\n\tint rightPadding = insets.right;\n\tint topPadding = insets.top;\n\tint bottomPadding = insets.bottom;\n\tif (!mActionbarOverlay) {\n\t\tLog.v(TAG, \"setting padding!\");\n\t\tsetPadding(leftPadding, topPadding, rightPadding, bottomPadding);\n\t}\n\treturn true;\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onPostCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\npublic void onPostCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onPostCreate(savedInstanceState);\n\tmHelper.onPostCreate(savedInstanceState);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java", "commit_date": "2013-05-07 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onSaveInstanceState()\n */\n", "func_signal": "@Override\nprotected Parcelable onSaveInstanceState()", "code": "{\n\tParcelable superState = super.onSaveInstanceState();\n\tSavedState ss = new SavedState(superState, mViewAbove.getCurrentItem());\n\treturn ss;\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Controls whether the SlidingMenu can be opened with a swipe gesture.\n * Options are {@link #TOUCHMODE_MARGIN TOUCHMODE_MARGIN}, {@link #TOUCHMODE_FULLSCREEN TOUCHMODE_FULLSCREEN},\n * or {@link #TOUCHMODE_NONE TOUCHMODE_NONE}\n *\n * @param i the new touch mode\n */\n", "func_signal": "public void setTouchModeAbove(int i)", "code": "{\n\tif (i != TOUCHMODE_FULLSCREEN && i != TOUCHMODE_MARGIN\n\t\t\t&& i != TOUCHMODE_NONE) {\n\t\tthrow new IllegalStateException(\"TouchMode must be set to either\" +\n\t\t\t\t\"TOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN or TOUCHMODE_NONE.\");\n\t}\n\tmViewAbove.setTouchMode(i);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Instantiates a new SlidingMenu.\n *\n * @param context the associated Context\n * @param attrs the attrs\n * @param defStyle the def style\n */\n", "func_signal": "public SlidingMenu(Context context, AttributeSet attrs, int defStyle)", "code": "{\n\tsuper(context, attrs, defStyle);\n\t\n\tLayoutParams behindParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n\tmViewBehind = new CustomViewBehind(context);\n\taddView(mViewBehind, behindParams);\n\tLayoutParams aboveParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n\tmViewAbove = new CustomViewAbove(context);\n\taddView(mViewAbove, aboveParams);\n\t// register the CustomViewBehind with the CustomViewAbove\n\tmViewAbove.setCustomViewBehind(mViewBehind);\n\tmViewBehind.setCustomViewAbove(mViewAbove);\n\tmViewAbove.setOnPageChangeListener(new OnPageChangeListener() {\n\t\tpublic static final int POSITION_OPEN = 0;\n\t\tpublic static final int POSITION_CLOSE = 1;\n\t\tpublic static final int POSITION_SECONDARY_OPEN = 2;\n\n\t\tpublic void onPageScrolled(int position, float positionOffset,\n\t\t\t\tint positionOffsetPixels) { }\n\n\t\tpublic void onPageSelected(int position) {\n\t\t\tif (position == POSITION_OPEN && mOpenListener != null) {\n\t\t\t\tmOpenListener.onOpen();\n\t\t\t} else if (position == POSITION_CLOSE && mCloseListener != null) {\n\t\t\t\tmCloseListener.onClose();\n\t\t\t} else if (position == POSITION_SECONDARY_OPEN && mSecondaryOpenListner != null ) {\n\t\t\t\tmSecondaryOpenListner.onOpen();\n\t\t\t}\n\t\t}\n\t});\n\n\t// now style everything!\n\tTypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.SlidingMenu);\n\t// set the above and behind views if defined in xml\n\tint mode = ta.getInt(R.styleable.SlidingMenu_mode, LEFT);\n\tsetMode(mode);\n\tint viewAbove = ta.getResourceId(R.styleable.SlidingMenu_viewAbove, -1);\n\tif (viewAbove != -1) {\n\t\tsetContent(viewAbove);\n\t} else {\n\t\tsetContent(new FrameLayout(context));\n\t}\n\tint viewBehind = ta.getResourceId(R.styleable.SlidingMenu_viewBehind, -1);\n\tif (viewBehind != -1) {\n\t\tsetMenu(viewBehind); \n\t} else {\n\t\tsetMenu(new FrameLayout(context));\n\t}\n\tint touchModeAbove = ta.getInt(R.styleable.SlidingMenu_touchModeAbove, TOUCHMODE_MARGIN);\n\tsetTouchModeAbove(touchModeAbove);\n\tint touchModeBehind = ta.getInt(R.styleable.SlidingMenu_touchModeBehind, TOUCHMODE_MARGIN);\n\tsetTouchModeBehind(touchModeBehind);\n\n\tint offsetBehind = (int) ta.getDimension(R.styleable.SlidingMenu_behindOffset, -1);\n\tint widthBehind = (int) ta.getDimension(R.styleable.SlidingMenu_behindWidth, -1);\n\tif (offsetBehind != -1 && widthBehind != -1)\n\t\tthrow new IllegalStateException(\"Cannot set both behindOffset and behindWidth for a SlidingMenu\");\n\telse if (offsetBehind != -1)\n\t\tsetBehindOffset(offsetBehind);\n\telse if (widthBehind != -1)\n\t\tsetBehindWidth(widthBehind);\n\telse\n\t\tsetBehindOffset(0);\n\tfloat scrollOffsetBehind = ta.getFloat(R.styleable.SlidingMenu_behindScrollScale, 0.33f);\n\tsetBehindScrollScale(scrollOffsetBehind);\n\tint shadowRes = ta.getResourceId(R.styleable.SlidingMenu_shadowDrawable, -1);\n\tif (shadowRes != -1) {\n\t\tsetShadowDrawable(shadowRes);\n\t}\n\tint shadowWidth = (int) ta.getDimension(R.styleable.SlidingMenu_shadowWidth, 0);\n\tsetShadowWidth(shadowWidth);\n\tboolean fadeEnabled = ta.getBoolean(R.styleable.SlidingMenu_fadeEnabled, true);\n\tsetFadeEnabled(fadeEnabled);\n\tfloat fadeDeg = ta.getFloat(R.styleable.SlidingMenu_fadeDegree, 0.33f);\n\tsetFadeDegree(fadeDeg);\n\tboolean selectorEnabled = ta.getBoolean(R.styleable.SlidingMenu_selectorEnabled, false);\n\tsetSelectorEnabled(selectorEnabled);\n\tint selectorRes = ta.getResourceId(R.styleable.SlidingMenu_selectorDrawable, -1);\n\tif (selectorRes != -1)\n\t\tsetSelectorDrawable(selectorRes);\n\tta.recycle();\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Controls whether the SlidingMenu can be opened with a swipe gesture.\n * Options are {@link #TOUCHMODE_MARGIN TOUCHMODE_MARGIN}, {@link #TOUCHMODE_FULLSCREEN TOUCHMODE_FULLSCREEN},\n * or {@link #TOUCHMODE_NONE TOUCHMODE_NONE}\n *\n * @param i the new touch mode\n */\n", "func_signal": "public void setTouchModeBehind(int i)", "code": "{\n\tif (i != TOUCHMODE_FULLSCREEN && i != TOUCHMODE_MARGIN\n\t\t\t&& i != TOUCHMODE_NONE) {\n\t\tthrow new IllegalStateException(\"TouchMode must be set to either\" +\n\t\t\t\t\"TOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN or TOUCHMODE_NONE.\");\n\t}\n\tmViewBehind.setTouchMode(i);\n}", "path": "SlidingMenu/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "commit_date": "2013-12-09 00:00:00", "repo_name": "jfeinstein10/SlidingMenu", "stars": 11103, "license": "apache-2.0", "language": "java", "size": 32085}
{"docstring": "/**\n * Verify that the actual value at the given JSON path produces a non-null array\n * result.\n * @param expression the {@link JsonPath} expression\n * @param args arguments to parameterize the {@code JsonPath} expression with, using\n * formatting specifiers defined in {@link String#format(String, Object...)}\n * @return {@code this} assertion object\n * @throws AssertionError if the value at the given path is missing or not an array\n */\n", "func_signal": "public JsonContentAssert hasJsonPathArrayValue(CharSequence expression, Object... args)", "code": "{\n\tnew JsonPathValue(expression, args).assertHasValue(List.class, \"an array\");\n\treturn this;\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is equal to the specified JSON resource.\n * @param path the name of a resource containing the expected JSON\n * @param resourceLoadClass the source class used to load the resource\n * @param compareMode the compare mode used when checking\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is not equal to the given one\n */\n", "func_signal": "public JsonContentAssert isEqualToJson(String path, Class<?> resourceLoadClass, JSONCompareMode compareMode)", "code": "{\n\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\treturn assertNotFailed(compare(expectedJson, compareMode));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n * to the specified JSON input stream.\n * @param expected an input stream containing the expected JSON\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotStrictlyEqualToJson(InputStream expected)", "code": "{\n\tString expectedJson = this.loader.getJson(expected);\n\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Create a new {@link TemplateAvailabilityProviders} instance.\n * @param providers the underlying providers\n */\n", "func_signal": "protected TemplateAvailabilityProviders(Collection<? extends TemplateAvailabilityProvider> providers)", "code": "{\n\tAssert.notNull(providers, \"Providers must not be null\");\n\tthis.providers = new ArrayList<>(providers);\n}", "path": "spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not equal to the specified JSON resource.\n * @param expected a resource containing the expected JSON\n * @param comparator the comparator used when checking\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotEqualToJson(Resource expected, JSONComparator comparator)", "code": "{\n\tString expectedJson = this.loader.getJson(expected);\n\treturn assertNotPassed(compare(expectedJson, comparator));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not equal to the specified JSON bytes.\n * @param expected the expected JSON bytes\n * @param compareMode the compare mode used when checking\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotEqualToJson(byte[] expected, JSONCompareMode compareMode)", "code": "{\n\tString expectedJson = this.loader.getJson(expected);\n\treturn assertNotPassed(compare(expectedJson, compareMode));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Get the provider that can be used to render the given view.\n * @param view the view to render\n * @param applicationContext the application context\n * @return a {@link TemplateAvailabilityProvider} or null\n */\n", "func_signal": "public TemplateAvailabilityProvider getProvider(String view, ApplicationContext applicationContext)", "code": "{\n\tAssert.notNull(applicationContext, \"ApplicationContext must not be null\");\n\treturn getProvider(view, applicationContext.getEnvironment(), applicationContext.getClassLoader(),\n\t\t\tapplicationContext);\n}", "path": "spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java", "commit_date": "2019-06-07 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Create a {@code MustacheViewResolver} backed by a custom instance of a\n * {@link Compiler}.\n * @param compiler the Mustache compiler used to compile templates\n */\n", "func_signal": "public MustacheViewResolver(Compiler compiler)", "code": "{\n\tthis.compiler = compiler;\n\tsetViewClass(requiredViewClass());\n}", "path": "spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheViewResolver.java", "commit_date": "2019-07-24 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Creates a new {@code WebFluxEndpointHandlerMapping} instance that provides mappings\n * for the given endpoints.\n * @param endpointMapping the base mapping for all endpoints\n * @param endpoints the web endpoints\n * @param endpointMediaTypes media types consumed and produced by the endpoints\n * @param corsConfiguration the CORS configuration for the endpoints or {@code null}\n * @param linksResolver resolver for determining links to available endpoints\n * @param shouldRegisterLinksMapping whether the links endpoint should be registered\n */\n", "func_signal": "public WebFluxEndpointHandlerMapping(EndpointMapping endpointMapping, Collection<ExposableWebEndpoint> endpoints,\n\t\tEndpointMediaTypes endpointMediaTypes, CorsConfiguration corsConfiguration,\n\t\tEndpointLinksResolver linksResolver, boolean shouldRegisterLinksMapping)", "code": "{\n\tsuper(endpointMapping, endpoints, endpointMediaTypes, corsConfiguration, shouldRegisterLinksMapping);\n\tthis.linksResolver = linksResolver;\n\tsetOrder(-100);\n}", "path": "spring-boot/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointHandlerMapping.java", "commit_date": "2019-07-03 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Create a {@code MustacheViewResolver} backed by a default instance of a\n * {@link Compiler}.\n */\n", "func_signal": "public MustacheViewResolver()", "code": "{\n\tthis.compiler = Mustache.compiler();\n\tsetViewClass(requiredViewClass());\n}", "path": "spring-boot/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheViewResolver.java", "commit_date": "2019-07-24 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verify that the actual value at the given JSON path produces a non-null number\n * result.\n * @param expression the {@link JsonPath} expression\n * @param args arguments to parameterize the {@code JsonPath} expression with, using\n * formatting specifiers defined in {@link String#format(String, Object...)}\n * @return {@code this} assertion object\n * @throws AssertionError if the value at the given path is missing or not a number\n */\n", "func_signal": "public JsonContentAssert hasJsonPathNumberValue(CharSequence expression, Object... args)", "code": "{\n\tnew JsonPathValue(expression, args).assertHasValue(Number.class, \"a number\");\n\treturn this;\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal\n * to the specified JSON resource.\n * @param expected a resource containing the expected JSON\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotStrictlyEqualToJson(Resource expected)", "code": "{\n\tString expectedJson = this.loader.getJson(expected);\n\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n * equal to the specified JSON. The {@code expected} value can contain the JSON itself\n * or, if it ends with {@code .json}, the name of a resource to be loaded using\n * {@code resourceLoadClass}.\n * @param expected the expected JSON or the name of a resource containing the expected\n * JSON\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotEqualToJson(CharSequence expected)", "code": "{\n\tString expectedJson = this.loader.getJson(expected);\n\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verify that the actual value at the given JSON path produces a non-null result. If\n * the JSON path expression is not {@linkplain JsonPath#isDefinite() definite}, this\n * method verifies that the value at the given path is not <em>empty</em>.\n * @param expression the {@link JsonPath} expression\n * @param args arguments to parameterize the {@code JsonPath} expression with, using\n * formatting specifiers defined in {@link String#format(String, Object...)}\n * @return {@code this} assertion object\n * @throws AssertionError if the value at the given path is missing\n */\n", "func_signal": "public JsonContentAssert hasJsonPathValue(CharSequence expression, Object... args)", "code": "{\n\tnew JsonPathValue(expression, args).assertHasValue(Object.class, \"an object\");\n\treturn this;\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is equal to the specified JSON bytes.\n * @param expected the expected JSON bytes\n * @param compareMode the compare mode used when checking\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is not equal to the given one\n */\n", "func_signal": "public JsonContentAssert isEqualToJson(byte[] expected, JSONCompareMode compareMode)", "code": "{\n\tString expectedJson = this.loader.getJson(expected);\n\treturn assertNotFailed(compare(expectedJson, compareMode));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Scan for entities with the specified annotations.\n * @param annotationTypes the annotation types used on the entities\n * @return a set of entity classes\n * @throws ClassNotFoundException if an entity class cannot be loaded\n */\n", "func_signal": "@SafeVarargs\npublic final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes) throws ClassNotFoundException", "code": "{\n\tList<String> packages = getPackages();\n\tif (packages.isEmpty()) {\n\t\treturn Collections.emptySet();\n\t}\n\tClassPathScanningCandidateComponentProvider scanner = createClassPathScanningCandidateComponentProvider(\n\t\t\tthis.context);\n\tfor (Class<? extends Annotation> annotationType : annotationTypes) {\n\t\tscanner.addIncludeFilter(new AnnotationTypeFilter(annotationType));\n\t}\n\tSet<Class<?>> entitySet = new HashSet<>();\n\tfor (String basePackage : packages) {\n\t\tif (StringUtils.hasText(basePackage)) {\n\t\t\tfor (BeanDefinition candidate : scanner.findCandidateComponents(basePackage)) {\n\t\t\t\tentitySet.add(ClassUtils.forName(candidate.getBeanClassName(), this.context.getClassLoader()));\n\t\t\t}\n\t\t}\n\t}\n\treturn entitySet;\n}", "path": "spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanner.java", "commit_date": "2020-09-01 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not equal to the specified JSON resource.\n * @param path the name of a resource containing the expected JSON\n * @param resourceLoadClass the source class used to load the resource\n * @param comparator the comparator used when checking\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass, JSONComparator comparator)", "code": "{\n\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\treturn assertNotPassed(compare(expectedJson, comparator));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n * equal to the specified JSON file.\n * @param expected a file containing the expected JSON\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotEqualToJson(File expected)", "code": "{\n\tString expectedJson = this.loader.getJson(expected);\n\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}\n * equal to the specified JSON resource.\n * @param path the name of a resource containing the expected JSON\n * @param resourceLoadClass the source class used to load the resource\n * @return {@code this} assertion object\n * @throws AssertionError if the actual JSON value is equal to the given one\n */\n", "func_signal": "public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass)", "code": "{\n\tString expectedJson = this.loader.getJson(path, resourceLoadClass);\n\treturn assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT));\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Verify that the actual value at the given JSON path produces no result. If the JSON\n * path expression is not {@linkplain JsonPath#isDefinite() definite}, this method\n * verifies that the value at the given path is <em>empty</em>.\n * @param expression the {@link JsonPath} expression\n * @param args arguments to parameterize the {@code JsonPath} expression with, using\n * formatting specifiers defined in {@link String#format(String, Object...)}\n * @return {@code this} assertion object\n * @throws AssertionError if the value at the given path is not missing\n */\n", "func_signal": "public JsonContentAssert doesNotHaveJsonPathValue(CharSequence expression, Object... args)", "code": "{\n\tnew JsonPathValue(expression, args).assertDoesNotHaveValue();\n\treturn this;\n}", "path": "spring-boot/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java", "commit_date": "2019-07-23 00:00:00", "repo_name": "spring-projects/spring-boot", "stars": 71967, "license": "apache-2.0", "language": "java", "size": 170103}
{"docstring": "/**\n * Hide bar.\n * \u9690\u85cf\u6216\u663e\u793a\u72b6\u6001\u680f\u548c\u5bfc\u822a\u680f\u3002\n *\n * @param uiFlags the ui flags\n * @return the int\n */\n", "func_signal": "private int hideBar(int uiFlags)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n        switch (mBarParams.barHide) {\n            case FLAG_HIDE_BAR:\n                uiFlags |= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n                        | View.INVISIBLE;\n                break;\n            case FLAG_HIDE_STATUS_BAR:\n                uiFlags |= View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.INVISIBLE;\n                break;\n            case FLAG_HIDE_NAVIGATION_BAR:\n                uiFlags |= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n                break;\n            case FLAG_SHOW_BAR:\n                uiFlags |= View.SYSTEM_UI_FLAG_VISIBLE;\n                break;\n            default:\n                break;\n        }\n    }\n    return uiFlags | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * Gets navigation bar width.\n * \u83b7\u5f97\u5bfc\u822a\u680f\u7684\u5bbd\u5ea6\n *\n * @param activity the activity\n * @return the navigation bar width\n */\n", "func_signal": "@TargetApi(14)\npublic static int getNavigationBarWidth(@NonNull Activity activity)", "code": "{\n    BarConfig config = new BarConfig(activity);\n    return config.getNavigationBarWidth();\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * Add \u989c\u8272\u53d8\u6362\u652f\u6301View\n *\n * @param view                     the view\n * @param viewColorBeforeTransform the view color before transform\n * @param viewColorAfterTransform  the view color after transform\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar addViewSupportTransformColor(View view, String viewColorBeforeTransform,\n                                                 String viewColorAfterTransform)", "code": "{\n    return this.addViewSupportTransformColorInt(view,\n            Color.parseColor(viewColorBeforeTransform),\n            Color.parseColor(viewColorAfterTransform));\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u89e3\u51b3\u8f6f\u952e\u76d8\u4e0e\u5e95\u90e8\u8f93\u5165\u6846\u51b2\u7a81\u95ee\u9898 \uff0c\u9ed8\u8ba4\u662ffalse\n *\n * @param enable       the enable\n * @param keyboardMode the keyboard mode\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar keyboardEnable(boolean enable, int keyboardMode)", "code": "{\n    mBarParams.keyboardEnable = enable;\n    mBarParams.keyboardMode = keyboardMode;\n    mKeyboardTempEnable = enable;\n    return this;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u4e3a\u6807\u9898\u680fmarginTop\u589e\u52a0fixHeight\u7684\u9ad8\u5ea6\n * Sets title bar margin top.\n *\n * @param activity  the activity\n * @param fixHeight the fix height\n * @param view      the view\n */\n", "func_signal": "public static void setTitleBarMarginTop(Activity activity, int fixHeight, View... view)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        if (activity == null) {\n            return;\n        }\n        if (fixHeight < 0) {\n            fixHeight = 0;\n        }\n        for (View v : view) {\n            if (v == null) {\n                continue;\n            }\n            Integer fitsHeight = (Integer) v.getTag(R.id.immersion_fits_layout_overlap);\n            if (fitsHeight == null) {\n                fitsHeight = 0;\n            }\n            if (fitsHeight != fixHeight) {\n                v.setTag(R.id.immersion_fits_layout_overlap, fixHeight);\n                ViewGroup.LayoutParams lp = v.getLayoutParams();\n                if (lp == null) {\n                    lp = new ViewGroup.MarginLayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n                }\n                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) lp;\n                layoutParams.setMargins(layoutParams.leftMargin,\n                        layoutParams.topMargin + fixHeight - fitsHeight,\n                        layoutParams.rightMargin,\n                        layoutParams.bottomMargin);\n                v.setLayoutParams(layoutParams);\n            }\n        }\n    }\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u89e3\u51b3\u5e03\u5c40\u4e0e\u72b6\u6001\u680f\u91cd\u53e0\u95ee\u9898\n *\n * @param fits the fits\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar fitsSystemWindows(boolean fits)", "code": "{\n    mBarParams.fits = fits;\n    if (mBarParams.fits) {\n        if (mFitsStatusBarType == FLAG_FITS_DEFAULT) {\n            mFitsStatusBarType = FLAG_FITS_SYSTEM_WINDOWS;\n        }\n    } else {\n        mFitsStatusBarType = FLAG_FITS_DEFAULT;\n    }\n    return this;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * android 5.0\u4ee5\u4e0b\u89e3\u51b3\u72b6\u6001\u680f\u548c\u5e03\u5c40\u91cd\u53e0\u95ee\u9898\n */\n", "func_signal": "private void fitsWindowsBelowLOLLIPOP()", "code": "{\n    if (mBarParams.isSupportActionBar) {\n        mIsActionBarBelowLOLLIPOP = true;\n        mContentView.post(this);\n    } else {\n        mIsActionBarBelowLOLLIPOP = false;\n        postFitsWindowsBelowLOLLIPOP();\n    }\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u4fee\u6539 Flyme OS\u7cfb\u7edf\u624b\u673a\u72b6\u6001\u680f\u5b57\u4f53\u989c\u8272\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8estatusBarDarkFont(boolean isDarkFont)\u65b9\u6cd5\n * Flyme os status bar font color immersion bar.\n *\n * @param flymeOSStatusBarFontColor the flyme os status bar font color\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar flymeOSStatusBarFontColorInt(@ColorInt int flymeOSStatusBarFontColor)", "code": "{\n    mBarParams.flymeOSStatusBarFontColor = flymeOSStatusBarFontColor;\n    mBarParams.flymeOSStatusBarFontTempColor = mBarParams.flymeOSStatusBarFontColor;\n    return this;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u66f4\u65b0BarConfig\n */\n", "func_signal": "private void updateBarConfig()", "code": "{\n    mBarConfig = new BarConfig(mActivity);\n    if (!mInitialized || mIsActionBarBelowLOLLIPOP) {\n        mActionBarHeight = mBarConfig.getActionBarHeight();\n    }\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u5355\u72ec\u5728\u6807\u9898\u680f\u7684\u4f4d\u7f6e\u589e\u52a0view\uff0c\u9ad8\u5ea6\u4e3afixHeight\u7684\u9ad8\u5ea6\n * Sets status bar view.\n *\n * @param activity  the activity\n * @param fixHeight the fix height\n * @param view      the view\n */\n", "func_signal": "public static void setStatusBarView(Activity activity, int fixHeight, View... view)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        if (activity == null) {\n            return;\n        }\n        if (fixHeight < 0) {\n            fixHeight = 0;\n        }\n        for (View v : view) {\n            if (v == null) {\n                continue;\n            }\n            Integer fitsHeight = (Integer) v.getTag(R.id.immersion_fits_layout_overlap);\n            if (fitsHeight == null) {\n                fitsHeight = 0;\n            }\n            if (fitsHeight != fixHeight) {\n                v.setTag(R.id.immersion_fits_layout_overlap, fixHeight);\n                ViewGroup.LayoutParams lp = v.getLayoutParams();\n                if (lp == null) {\n                    lp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0);\n                }\n                lp.height = fixHeight;\n                v.setLayoutParams(lp);\n            }\n        }\n    }\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u8c03\u7528\u7cfb\u7edfview\u7684setFitsSystemWindows\u65b9\u6cd5\n * Sets fits system windows.\n *\n * @param activity        the activity\n * @param applySystemFits the apply system fits\n */\n", "func_signal": "public static void setFitsSystemWindows(Activity activity, boolean applySystemFits)", "code": "{\n    if (activity == null) {\n        return;\n    }\n    setFitsSystemWindows(((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0), applySystemFits);\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * Gets navigation bar height.\n * \u83b7\u5f97\u5bfc\u822a\u680f\u7684\u9ad8\u5ea6\n *\n * @param activity the activity\n * @return the navigation bar height\n */\n", "func_signal": "@TargetApi(14)\npublic static int getNavigationBarHeight(@NonNull Activity activity)", "code": "{\n    BarConfig config = new BarConfig(activity);\n    return config.getNavigationBarHeight();\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u6839\u636etag\u6062\u590d\u5230\u67d0\u6b21\u8c03\u7528\u65f6\u7684\u53c2\u6570\n * Recover immersion bar.\n *\n * @param tag the tag\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar getTag(String tag)", "code": "{\n    if (isEmpty(tag)) {\n        throw new IllegalArgumentException(\"tag\u4e0d\u80fd\u4e3a\u7a7a\");\n    }\n    BarParams barParams = mTagMap.get(tag);\n    if (barParams != null) {\n        mBarParams = barParams.clone();\n    }\n    return this;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u5224\u65ad\u624b\u673a\u652f\u4e0d\u652f\u6301\u72b6\u6001\u680f\u5b57\u4f53\u53d8\u8272\n * Is support status bar dark font boolean.\n *\n * @return the boolean\n */\n", "func_signal": "public static boolean isSupportStatusBarDarkFont()", "code": "{\n    return OSUtils.isMIUI6Later() || OSUtils.isFlymeOS4Later()\n            || (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M);\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u8bbe\u7f6e\u4e00\u4e2a\u53ef\u4ee5\u81ea\u5b9a\u4e49\u989c\u8272\u7684\u5bfc\u822a\u680f\n */\n", "func_signal": "private void setupNavBarView()", "code": "{\n    View navigationBarView = mDecorView.findViewById(IMMERSION_NAVIGATION_BAR_VIEW_ID);\n    if (navigationBarView == null) {\n        navigationBarView = new View(mActivity);\n        navigationBarView.setId(IMMERSION_NAVIGATION_BAR_VIEW_ID);\n        mDecorView.addView(navigationBarView);\n    }\n\n    FrameLayout.LayoutParams params;\n    if (mBarConfig.isNavigationAtBottom()) {\n        params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, mBarConfig.getNavigationBarHeight());\n        params.gravity = Gravity.BOTTOM;\n    } else {\n        params = new FrameLayout.LayoutParams(mBarConfig.getNavigationBarWidth(), FrameLayout.LayoutParams.MATCH_PARENT);\n        params.gravity = Gravity.END;\n    }\n    navigationBarView.setLayoutParams(params);\n    navigationBarView.setBackgroundColor(ColorUtils.blendARGB(mBarParams.navigationBarColor,\n            mBarParams.navigationBarColorTransform, mBarParams.navigationBarAlpha));\n\n    if (mBarParams.navigationBarEnable && mBarParams.navigationBarWithKitkatEnable && !mBarParams.hideNavigationBar) {\n        navigationBarView.setVisibility(View.VISIBLE);\n    } else {\n        navigationBarView.setVisibility(View.GONE);\n    }\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u89e3\u51b3android4.4\u6709\u5bfc\u822a\u680f\u7684\u60c5\u51b5\u4e0b\uff0cactivity\u5e95\u90e8\u88ab\u5bfc\u822a\u680f\u906e\u6321\u7684\u95ee\u9898\u548candroid 5.0\u4ee5\u4e0b\u89e3\u51b3\u72b6\u6001\u680f\u548c\u5e03\u5c40\u91cd\u53e0\u95ee\u9898\n * Fits windows below lollipop.\n */\n", "func_signal": "private void fitsWindowsKITKAT()", "code": "{\n    if (checkFitsSystemWindows(mDecorView.findViewById(android.R.id.content))) {\n        setPadding(0, 0, 0, 0);\n        return;\n    }\n    int top = 0, right = 0, bottom = 0;\n    if (mBarParams.fits && mFitsStatusBarType == FLAG_FITS_SYSTEM_WINDOWS) {\n        top = mBarConfig.getStatusBarHeight();\n    }\n    if (mBarParams.isSupportActionBar) {\n        top = mBarConfig.getStatusBarHeight() + mActionBarHeight;\n    }\n    if (mBarConfig.hasNavigationBar() && mBarParams.navigationBarEnable && mBarParams.navigationBarWithKitkatEnable) {\n        if (!mBarParams.fullScreen) {\n            if (mBarConfig.isNavigationAtBottom()) {\n                bottom = mBarConfig.getNavigationBarHeight();\n            } else {\n                right = mBarConfig.getNavigationBarWidth();\n            }\n        }\n        if (mBarParams.hideNavigationBar) {\n            if (mBarConfig.isNavigationAtBottom()) {\n                bottom = 0;\n            } else {\n                right = 0;\n            }\n        } else {\n            if (!mBarConfig.isNavigationAtBottom()) {\n                right = mBarConfig.getNavigationBarWidth();\n            }\n        }\n\n    }\n    setPadding(0, top, right, bottom);\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u68c0\u67e5\u5e03\u5c40\u6839\u8282\u70b9\u662f\u5426\u4f7f\u7528\u4e86android:fitsSystemWindows=\"true\"\u5c5e\u6027\n * Check fits system windows boolean.\n *\n * @param view the view\n * @return the boolean\n */\n", "func_signal": "public static boolean checkFitsSystemWindows(View view)", "code": "{\n    if (view == null) {\n        return false;\n    }\n    if (view.getFitsSystemWindows()) {\n        return true;\n    }\n    if (view instanceof ViewGroup) {\n        ViewGroup viewGroup = (ViewGroup) view;\n        for (int i = 0, count = viewGroup.getChildCount(); i < count; i++) {\n            View childView = viewGroup.getChildAt(i);\n            if (childView instanceof DrawerLayout) {\n                if (checkFitsSystemWindows(childView)) {\n                    return true;\n                }\n            }\n            if (childView.getFitsSystemWindows()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * Add \u989c\u8272\u53d8\u6362\u652f\u6301View\n *\n * @param view                     the view\n * @param viewColorBeforeTransform the view color before transform\n * @param viewColorAfterTransform  the view color after transform\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar addViewSupportTransformColor(View view, @ColorRes int viewColorBeforeTransform,\n                                                 @ColorRes int viewColorAfterTransform)", "code": "{\n    return this.addViewSupportTransformColorInt(view,\n            ContextCompat.getColor(mActivity, viewColorBeforeTransform),\n            ContextCompat.getColor(mActivity, viewColorAfterTransform));\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u4fee\u6539 Flyme OS\u7cfb\u7edf\u624b\u673a\u72b6\u6001\u680f\u5b57\u4f53\u989c\u8272\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8estatusBarDarkFont(boolean isDarkFont)\u65b9\u6cd5\n * Flyme os status bar font color immersion bar.\n *\n * @param flymeOSStatusBarFontColor the flyme os status bar font color\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar flymeOSStatusBarFontColor(String flymeOSStatusBarFontColor)", "code": "{\n    mBarParams.flymeOSStatusBarFontColor = Color.parseColor(flymeOSStatusBarFontColor);\n    mBarParams.flymeOSStatusBarFontTempColor = mBarParams.flymeOSStatusBarFontColor;\n    return this;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * \u72b6\u6001\u680f\u989c\u8272\n *\n * @param statusBarColor \u72b6\u6001\u680f\u989c\u8272\uff0c\u8d44\u6e90\u6587\u4ef6\uff08R.color.xxx\uff09\n * @return the immersion bar\n */\n", "func_signal": "public ImmersionBar statusBarColorInt(@ColorInt int statusBarColor)", "code": "{\n    mBarParams.statusBarColor = statusBarColor;\n    return this;\n}", "path": "ImmersionBar/immersionbar/src/main/java/com/gyf/immersionbar/ImmersionBar.java", "commit_date": "2019-12-13 00:00:00", "repo_name": "gyf-dev/ImmersionBar", "stars": 11104, "license": "apache-2.0", "language": "java", "size": 325009}
{"docstring": "/**\n * Find a pseudo-random port number within the range [{@code minPort},\n * {@code maxPort}].\n * \n * @param minPort the minimum port number\n * @param maxPort the maximum port number\n * @return a random port number within the specified range\n */\n", "func_signal": "private static int findRandomPort(int minPort, int maxPort)", "code": "{\n    int portRange = maxPort - minPort;\n    return minPort + random.nextInt(portRange + 1);\n}", "path": "arthas/common/src/main/java/com/taobao/arthas/common/SocketUtils.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * @return a byte[] containing the information contained in the specified\n *         InputStream.\n * @throws java.io.IOException\n */\n", "func_signal": "public static byte[] getBytes(InputStream input) throws IOException", "code": "{\n    ByteArrayOutputStream result = new ByteArrayOutputStream();\n    copy(input, result);\n    result.close();\n    return result.toByteArray();\n}", "path": "arthas/common/src/main/java/com/taobao/arthas/common/IOUtils.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "// support jdk6\n", "func_signal": "public static IOException close(final ZipFile zip)", "code": "{\n    try {\n        if (zip != null) {\n            zip.close();\n        }\n    } catch (final IOException ioe) {\n        return ioe;\n    }\n    return null;\n}", "path": "arthas/common/src/main/java/com/taobao/arthas/common/IOUtils.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Writes {@code len} bytes from the specified byte array starting at offset\n * {@code off} to a file, creating the file if it does not exist.\n *\n * @param file   the file to write to\n * @param data   the content to write to the file\n * @param off    the start offset in the data\n * @param len    the number of bytes to write\n * @param append if {@code true}, then bytes will be added to the end of the\n *               file rather than overwriting\n * @throws IOException in case of an I/O error\n * @since 2.5\n */\n", "func_signal": "public static void writeByteArrayToFile(final File file, final byte[] data, final int off, final int len,\n\t\tfinal boolean append) throws IOException", "code": "{\n\tFileOutputStream out = null;\n\ttry {\n\t\tout = openOutputStream(file, append);\n\t\tout.write(data, off, len);\n\t} finally {\n\t\tIOUtils.close(out);\n\t}\n}", "path": "arthas/common/src/main/java/com/taobao/arthas/common/FileUtils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * \u662f\u5426\u8fc7\u6ee4\u76ee\u524d\u6682\u4e0d\u652f\u6301\u7684\u7c7b\n */\n", "func_signal": "private static boolean isUnsupportedClass(Class<?> clazz)", "code": "{\n    return clazz.isArray() || (clazz.isInterface() && !GlobalOptions.isSupportDefaultMethod) || clazz.isEnum()\n            || clazz.equals(Class.class) || clazz.equals(Integer.class) || clazz.equals(Method.class) || ClassUtils.isLambdaClass(clazz);\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Find an available port for this {@code SocketType}, randomly selected from\n * the range [{@code minPort}, {@code maxPort}].\n * \n * @param minPort the minimum port number\n * @param maxPort the maximum port number\n * @return an available port number for this socket type\n * @throws IllegalStateException if no available port could be found\n */\n", "func_signal": "private static int findAvailablePort(int minPort, int maxPort)", "code": "{\n\n    int portRange = maxPort - minPort;\n    int candidatePort;\n    int searchCounter = 0;\n    do {\n        if (searchCounter > portRange) {\n            throw new IllegalStateException(\n                    String.format(\"Could not find an available tcp port in the range [%d, %d] after %d attempts\",\n                            minPort, maxPort, searchCounter));\n        }\n        candidatePort = findRandomPort(minPort, maxPort);\n        searchCounter++;\n    } while (!isTcpPortAvailable(candidatePort));\n\n    return candidatePort;\n}", "path": "arthas/common/src/main/java/com/taobao/arthas/common/SocketUtils.java", "commit_date": "2020-09-02 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix\n * and suffix.\n * \n * @param placeholderPrefix              the prefix that denotes the start of a\n *                                       placeholder\n * @param placeholderSuffix              the suffix that denotes the end of a\n *                                       placeholder\n * @param valueSeparator                 the separating character between the\n *                                       placeholder variable and the associated\n *                                       default value, if any\n * @param ignoreUnresolvablePlaceholders indicates whether unresolvable\n *                                       placeholders should be ignored\n *                                       ({@code true}) or cause an exception\n *                                       ({@code false})\n */\n", "func_signal": "public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix, String valueSeparator,\n        boolean ignoreUnresolvablePlaceholders)", "code": "{\n\n    this.placeholderPrefix = placeholderPrefix;\n    this.placeholderSuffix = placeholderSuffix;\n    String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix);\n    if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {\n        this.simplePrefix = simplePrefixForSuffix;\n    } else {\n        this.simplePrefix = this.placeholderPrefix;\n    }\n    this.valueSeparator = valueSeparator;\n    this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/env/PropertyPlaceholderHelper.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Unregister a command.\n *\n * @param commandName the command name\n * @return a reference to this, so the API can be used fluently\n */\n", "func_signal": "public CommandRegistry unregisterCommand(String commandName)", "code": "{\n    commandMap.remove(commandName);\n    return this;\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/shell/command/CommandRegistry.java", "commit_date": "2018-08-31 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Opens a {@link FileOutputStream} for the specified file, checking and\n * creating the parent directory if it does not exist.\n * <p>\n * At the end of the method either the stream will be successfully opened, or an\n * exception will have been thrown.\n * <p>\n * The parent directory will be created if it does not exist. The file will be\n * created if it does not exist. An exception is thrown if the file object\n * exists but is a directory. An exception is thrown if the file exists but\n * cannot be written to. An exception is thrown if the parent directory cannot\n * be created.\n *\n * @param file   the file to open for output, must not be {@code null}\n * @param append if {@code true}, then bytes will be added to the end of the\n *               file rather than overwriting\n * @return a new {@link FileOutputStream} for the specified file\n * @throws IOException if the file object is a directory\n * @throws IOException if the file cannot be written to\n * @throws IOException if a parent directory needs creating but that fails\n * @since 2.1\n */\n", "func_signal": "public static FileOutputStream openOutputStream(final File file, final boolean append) throws IOException", "code": "{\n\tif (file.exists()) {\n\t\tif (file.isDirectory()) {\n\t\t\tthrow new IOException(\"File '\" + file + \"' exists but is a directory\");\n\t\t}\n\t\tif (file.canWrite() == false) {\n\t\t\tthrow new IOException(\"File '\" + file + \"' cannot be written to\");\n\t\t}\n\t} else {\n\t\tfinal File parent = file.getParentFile();\n\t\tif (parent != null) {\n\t\t\tif (!parent.mkdirs() && !parent.isDirectory()) {\n\t\t\t\tthrow new IOException(\"Directory '\" + parent + \"' could not be created\");\n\t\t\t}\n\t\t}\n\t}\n\treturn new FileOutputStream(file, append);\n}", "path": "arthas/common/src/main/java/com/taobao/arthas/common/FileUtils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * \u662f\u5426\u9700\u8981\u5ffd\u7565\n */\n", "func_signal": "private boolean isIgnore(MethodNode methodNode, Matcher methodNameMatcher)", "code": "{\n    return null == methodNode || isAbstract(methodNode.access) || !methodNameMatcher.matching(methodNode.name)\n            || ArthasCheckUtils.isEquals(methodNode.name, \"<clinit>\");\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Reads the contents of a file into a byte array.\n * The file is always closed.\n *\n * @param file the file to read, must not be {@code null}\n * @return the file contents, never {@code null}\n * @throws IOException in case of an I/O error\n * @since 1.1\n */\n", "func_signal": "public static byte[] readFileToByteArray(final File file) throws IOException", "code": "{\n\tInputStream in = null;\n\ttry {\n\t\tin = new FileInputStream(file);\n\t\treturn IOUtils.getBytes(in);\n\t\t} finally {\n\t\t\tIOUtils.close(in);\n\t\t}\n}", "path": "arthas/common/src/main/java/com/taobao/arthas/common/FileUtils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Resolve placeholders within the given string, deferring to the value of\n * {@link #setIgnoreUnresolvableNestedPlaceholders} to determine whether any\n * unresolvable placeholders should raise an exception or be ignored.\n * <p>\n * Invoked from {@link #getProperty} and its variants, implicitly resolving\n * nested placeholders. In contrast, {@link #resolvePlaceholders} and\n * {@link #resolveRequiredPlaceholders} do <i>not</i> delegate to this method\n * but rather perform their own handling of unresolvable placeholders, as\n * specified by each of those methods.\n * \n * @since 3.2\n * @see #setIgnoreUnresolvableNestedPlaceholders\n */\n", "func_signal": "protected String resolveNestedPlaceholders(String value)", "code": "{\n    return (this.ignoreUnresolvableNestedPlaceholders ? resolvePlaceholders(value)\n            : resolveRequiredPlaceholders(value));\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/env/AbstractPropertyResolver.java", "commit_date": "2020-02-13 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * \u6ce8\u9500\u76d1\u542c\u5668\n *\n * @param adviceId \u901a\u77e5ID\n */\n", "func_signal": "public static void unReg(AdviceListener listener)", "code": "{\n    if (null != listener) {\n        // \u6ce8\u9500\u76d1\u542c\u5668\n        advices.remove(listener.id());\n\n        // \u89e6\u53d1\u76d1\u542c\u5668\u9500\u6bc1\n        listener.destroy();\n    }\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/***\n * Called upon connection.\n *\n * @throws IOException - Exception in I/O.\n ***/\n", "func_signal": "@Override\nprotected void _connectAction_() throws IOException", "code": "{\n    /* (start). BUGFIX: clean the option info for each connection*/\n    for (int ii = 0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++)\n    {\n        _doResponse[ii] = 0;\n        _willResponse[ii] = 0;\n        _options[ii] = 0;\n        if (optionHandlers[ii] != null)\n        {\n            optionHandlers[ii].setDo(false);\n            optionHandlers[ii].setWill(false);\n        }\n    }\n    /* (end). BUGFIX: clean the option info for each connection*/\n\n    super._connectAction_();\n    _input_ = new BufferedInputStream(_input_);\n    _output_ = new BufferedOutputStream(_output_);\n\n    /* open TelnetOptionHandler functionality (start)*/\n    for (int ii = 0; ii < TelnetOption.MAX_OPTION_VALUE + 1; ii++)\n    {\n        if (optionHandlers[ii] != null)\n        {\n            if (optionHandlers[ii].getInitLocal())\n            {\n                _requestWill(optionHandlers[ii].getOptionCode());\n            }\n\n            if (optionHandlers[ii].getInitRemote())\n            {\n                _requestDo(optionHandlers[ii].getOptionCode());\n            }\n        }\n    }\n    /* open TelnetOptionHandler functionality (end)*/\n}", "path": "arthas/client/src/main/java/org/apache/commons/net/telnet/Telnet.java", "commit_date": "2018-08-31 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Register a list of commands.\n *\n * @param commands the commands to register\n * @return a reference to this, so the API can be used fluently\n */\n", "func_signal": "public CommandRegistry registerCommands(List<Command> commands)", "code": "{\n    for (Command command : commands) {\n        commandMap.put(command.name(), command);\n    }\n    return this;\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/shell/command/CommandRegistry.java", "commit_date": "2018-08-31 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * \u6ce8\u518c\u76d1\u542c\u5668\n *\n * @param adviceId \u901a\u77e5ID\n * @param listener \u901a\u77e5\u76d1\u542c\u5668\n */\n", "func_signal": "public static void reg(AdviceListener listener)", "code": "{\n\n    // \u89e6\u53d1\u76d1\u542c\u5668\u521b\u5efa\n    listener.create();\n\n    // \u6ce8\u518c\u76d1\u542c\u5668\n    advices.put(listener.id(), listener);\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/advisor/AdviceWeaver.java", "commit_date": "2020-05-24 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * \u4f30\u7b97\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u7684item\u6570\u91cf\uff0c\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u5ea6\u91cf\u503c\uff0c\u4f5c\u4e3aConsumer\u5206\u53d1\u65f6\u8fdb\u884c\u5207\u7247\u7684\u53c2\u8003\u4f9d\u636e\uff0c\u907f\u514d\u5355\u6b21\u53d1\u9001\u5927\u91cf\u6570\u636e\u3002\n * \u6ce8\u610f\uff1a\u6b64\u65b9\u6cd5\u8c03\u7528\u9891\u7e41\uff0c\u907f\u514d\u4ea7\u751f\u5185\u5b58\u788e\u7247\n *\n * @param model\n * @return\n */\n", "func_signal": "public static int getItemCount(ResultModel model)", "code": "{\n    //\u5982\u679c\u5b9e\u73b0Countable\u63a5\u53e3\uff0c\u5219\u8ba4\u4e3amodel\u81ea\u5df1\u7edf\u8ba1\u5143\u7d20\u6570\u91cf\n    if (model instanceof Countable) {\n        return ((Countable) model).size();\n    }\n\n    //\u5bf9\u4e8e\u666e\u901a\u7684Model\uff0c\u901a\u8fc7\u7c7b\u53cd\u5c04\u7edf\u8ba1\u5bb9\u5668\u7c7b\u5b57\u6bb5\u7edf\u8ba1\u5143\u7d20\u6570\u91cf\n    //\u7f13\u5b58Field\u5bf9\u8c61\uff0c\u907f\u514d\u4ea7\u751f\u5185\u5b58\u788e\u7247\n    Class modelClass = model.getClass();\n    List<Field> fields = modelFieldMap.get(modelClass.getName());\n    if (fields == null) {\n        fields = new ArrayList<Field>();\n        Field[] declaredFields = modelClass.getDeclaredFields();\n        for (int i = 0; i < declaredFields.length; i++) {\n            Field field = declaredFields[i];\n            Class<?> fieldClass = field.getType();\n            //\u5982\u679c\u662fList/Map/Array/Countable\u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5219\u7f13\u5b58\u8d77\u6765\u540e\u9762\u7edf\u8ba1\u6570\u91cf\n            if (Collection.class.isAssignableFrom(fieldClass)\n                    || Map.class.isAssignableFrom(fieldClass)\n                    || Countable.class.isAssignableFrom(fieldClass)\n                    || fieldClass.isArray()) {\n                field.setAccessible(true);\n                fields.add(field);\n            }\n        }\n        List<Field> old_fields = modelFieldMap.putIfAbsent(modelClass.getName(), fields);\n        if (old_fields != null) {\n            fields = old_fields;\n        }\n    }\n\n    //\u7edf\u8ba1Model\u5bf9\u8c61\u7684item\u6570\u91cf\n    int count = 0;\n    try {\n        for (int i = 0; i < fields.size(); i++) {\n            Field field = fields.get(i);\n            if (!field.isAccessible()) {\n                field.setAccessible(true);\n            }\n            Object value = field.get(model);\n            if (value != null) {\n                if (value instanceof Collection) {\n                    count += ((Collection) value).size();\n                } else if (value.getClass().isArray()) {\n                    count += Array.getLength(value);\n                } else if (value instanceof Map) {\n                    count += ((Map) value).size();\n                } else if (value instanceof Countable) {\n                    count += ((Countable) value).size();\n                }\n            }\n        }\n    } catch (Exception e) {\n        logger.error(\"get item count of result model failed, model: {}\", JSON.toJSONString(model), e);\n    }\n\n    return count > 0 ? count : 1;\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/distribution/ResultConsumerHelper.java", "commit_date": "2020-06-08 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Test whether the given string matches the given substring at the given index.\n * \n * @param str       the original string (or StringBuilder)\n * @param index     the index in the original string to start matching against\n * @param substring the substring to match at the given index\n */\n", "func_signal": "public static boolean substringMatch(CharSequence str, int index, CharSequence substring)", "code": "{\n    if (index + substring.length() > str.length()) {\n        return false;\n    }\n    for (int i = 0; i < substring.length(); i++) {\n        if (str.charAt(index + i) != substring.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/env/PropertyPlaceholderHelper.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Replaces all placeholders of format {@code ${name}} with the corresponding\n * property from the supplied {@link Properties}.\n * \n * @param value      the value containing the placeholders to be replaced\n * @param properties the {@code Properties} to use for replacement\n * @return the supplied value with placeholders replaced inline\n */\n", "func_signal": "public String replacePlaceholders(String value, final Properties properties)", "code": "{\n    return replacePlaceholders(value, new PlaceholderResolver() {\n        public String resolvePlaceholder(String placeholderName) {\n            return properties.getProperty(placeholderName);\n        }\n    });\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/env/PropertyPlaceholderHelper.java", "commit_date": "2019-12-27 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * \u5bf9\u8c61\u589e\u5f3a\n *\n * @param inst              inst\n * @param adviceId          \u901a\u77e5ID\n * @param isTracing         \u53ef\u8ddf\u8e2a\u65b9\u6cd5\u8c03\u7528\n * @param skipJDKTrace      \u662f\u5426\u5ffd\u7565\u5bf9JDK\u5185\u90e8\u65b9\u6cd5\u7684\u8ddf\u8e2a\n * @param classNameMatcher  \u7c7b\u540d\u5339\u914d\n * @param methodNameMatcher \u65b9\u6cd5\u540d\u5339\u914d\n * @return \u589e\u5f3a\u5f71\u54cd\u8303\u56f4\n * @throws UnmodifiableClassException \u589e\u5f3a\u5931\u8d25\n */\n", "func_signal": "public synchronized EnhancerAffect enhance(final Instrumentation inst) throws UnmodifiableClassException", "code": "{\n    // \u83b7\u53d6\u9700\u8981\u589e\u5f3a\u7684\u7c7b\u96c6\u5408\n    this.matchingClasses = GlobalOptions.isDisableSubClass\n            ? SearchUtils.searchClass(inst, classNameMatcher)\n            : SearchUtils.searchSubClass(inst, SearchUtils.searchClass(inst, classNameMatcher));\n\n    // \u8fc7\u6ee4\u6389\u65e0\u6cd5\u88ab\u589e\u5f3a\u7684\u7c7b\n    filter(matchingClasses);\n\n    logger.info(\"enhance matched classes: {}\", matchingClasses);\n\n    affect.setTransformer(this);\n\n    try {\n        ArthasBootstrap.getInstance().getTransformerManager().addTransformer(this, isTracing);\n\n        // \u6279\u91cf\u589e\u5f3a\n        if (GlobalOptions.isBatchReTransform) {\n            final int size = matchingClasses.size();\n            final Class<?>[] classArray = new Class<?>[size];\n            arraycopy(matchingClasses.toArray(), 0, classArray, 0, size);\n            if (classArray.length > 0) {\n                inst.retransformClasses(classArray);\n                logger.info(\"Success to batch transform classes: \" + Arrays.toString(classArray));\n            }\n        } else {\n            // for each \u589e\u5f3a\n            for (Class<?> clazz : matchingClasses) {\n                try {\n                    inst.retransformClasses(clazz);\n                    logger.info(\"Success to transform class: \" + clazz);\n                } catch (Throwable t) {\n                    logger.warn(\"retransform {} failed.\", clazz, t);\n                    if (t instanceof UnmodifiableClassException) {\n                        throw (UnmodifiableClassException) t;\n                    } else if (t instanceof RuntimeException) {\n                        throw (RuntimeException) t;\n                    } else {\n                        throw new RuntimeException(t);\n                    }\n                }\n            }\n        }\n    } catch (Throwable e) {\n        logger.error(\"Enhancer error, matchingClasses: {}\", matchingClasses, e);\n        affect.setThrowable(e);\n    }\n\n    return affect;\n}", "path": "arthas/core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java", "commit_date": "2020-12-25 00:00:00", "repo_name": "alibaba/arthas", "stars": 34359, "license": "apache-2.0", "language": "java", "size": 48669}
{"docstring": "/**\n * Store failure in failure file for index with the given id\n *\n * @param failure message describing the failure that needs to be stored\n * @throws IOException if the failure could not be stored\n */\n", "func_signal": "public synchronized void storeIndexFailure( String failure ) throws IOException", "code": "{\n    Path failureFile = failureFile();\n    try ( StoreChannel channel = fs.write( failureFile ) )\n    {\n        byte[] existingData = new byte[(int) channel.size()];\n        channel.readAll( ByteBuffer.wrap( existingData ) );\n        channel.position( lengthOf( existingData ) );\n\n        byte[] data = UTF8.encode( failure );\n        channel.writeAll( ByteBuffer.wrap( data, 0, Math.min( data.length, MAX_FAILURE_SIZE ) ) );\n\n        channel.force( true );\n    }\n}", "path": "neo4j/community/lucene-index/src/main/java/org/neo4j/kernel/api/impl/index/storage/FailureStorage.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Create/reserve an empty failure file for the given indexId.\n *\n * This will overwrite any pre-existing failure file.\n *\n * @throws IOException if the failure file could not be created\n */\n", "func_signal": "public synchronized void reserveForIndex() throws IOException", "code": "{\n    fs.mkdirs( folderLayout.getIndexFolder() );\n    Path failureFile = failureFile();\n    try ( StoreChannel channel = fs.write( failureFile ) )\n    {\n        channel.writeAll( ByteBuffer.wrap( new byte[MAX_FAILURE_SIZE] ) );\n        channel.force( true );\n    }\n}", "path": "neo4j/community/lucene-index/src/main/java/org/neo4j/kernel/api/impl/index/storage/FailureStorage.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Validates given HTTP header name. Does not allow blank names and names with control characters, like '\\n' (LF) and '\\r' (CR).\n * Can be used to detect and neutralize CRLF in HTTP headers.\n *\n * @param name the HTTP header name, like 'Accept' or 'Content-Type'.\n * @return {@code true} when given name represents a valid HTTP header, {@code false} otherwise.\n */\n", "func_signal": "public static boolean isValidHttpHeaderName( String name )", "code": "{\n    if ( name == null || name.isEmpty() )\n    {\n        return false;\n    }\n    boolean isBlank = true;\n    for ( int i = 0; i < name.length(); i++ )\n    {\n        char c = name.charAt( i );\n        if ( Character.isISOControl( c ) )\n        {\n            return false;\n        }\n        if ( !Character.isWhitespace( c ) )\n        {\n            isBlank = false;\n        }\n    }\n    return !isBlank;\n}", "path": "neo4j/community/server/src/main/java/org/neo4j/server/web/HttpHeaderUtils.java", "commit_date": "2020-04-24 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Allocate on heap byte buffer with requested byte order\n * @param capacity byte buffer capacity\n * @param order byte buffer order\n * @param memoryTracker underlying buffers allocation memory tracker\n * @return byte buffer with requested size\n */\n", "func_signal": "public static ByteBuffer allocate( int capacity, ByteOrder order, MemoryTracker memoryTracker )", "code": "{\n    memoryTracker.allocateHeap( capacity );\n    return ByteBuffer.allocate( capacity ).order( order );\n}", "path": "neo4j/community/io/src/main/java/org/neo4j/io/memory/ByteBuffers.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "// used to visit transaction state\n", "func_signal": "@Override\npublic void visit( long relationshipId, int typeId, long startNodeId, long endNodeId )", "code": "{\n    setId( relationshipId );\n    initialize( true, NO_ID, startNodeId, endNodeId, typeId, NO_ID, NO_ID, NO_ID, NO_ID, false, false );\n}", "path": "neo4j/community/record-storage-engine/src/main/java/org/neo4j/internal/recordstorage/RecordRelationshipCursor.java", "commit_date": "2020-11-20 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * @param fs The filesystem abstraction. Rotating files will only be created for DefaultFileSystemAbstraction, for other abstractions no rotation is done.\n * @param logPath Path of the log file.\n * @param rotationThreshold The threshold to rotate on in bytes.\n * @param maxArchives The maximum number of archive files to keep.\n * @param fileSuffix File suffix of the archive files. If the file suffix ends with '.gz' or '.zip' the resulting archive will be compressed using\n *                   the compression scheme that matches the suffix. Empty string if no additional file suffix should be added.\n * @param header String to print at beginning of each new file. Note that the header has no implicit newline so that must be added in the string if desired.\n */\n", "func_signal": "public RotatingLogFileWriter( FileSystemAbstraction fs, Path logPath, long rotationThreshold, int maxArchives, String fileSuffix, String header )", "code": "{\n    ctx = setupLogFile( fs, logPath, rotationThreshold, maxArchives, fileSuffix, header );\n    log = ctx.getLogger( \"\" );\n}", "path": "neo4j/community/logging/src/main/java/org/neo4j/logging/log4j/RotatingLogFileWriter.java", "commit_date": "2020-09-30 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Internal calculate method that will run the calculation until either the\n * limit is reached or a result has been generated for a given node.\n */\n", "func_signal": "public boolean calculate( Node targetNode )", "code": "{\n    while ( (targetNode == null || !distances.containsKey( targetNode ))\n        && dijkstraIterator.hasNext() && !limitReached() )\n    {\n        dijkstraIterator.next();\n    }\n    return true;\n}", "path": "neo4j/community/graph-algo/src/main/java/org/neo4j/graphalgo/impl/shortestpath/SingleSourceShortestPathDijkstra.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Allocate on heap byte buffer with default byte order\n * @param capacity byte buffer capacity\n * @param memoryTracker underlying buffers allocation memory tracker\n * @return byte buffer with requested size\n */\n", "func_signal": "public static ByteBuffer allocate( int capacity, MemoryTracker memoryTracker )", "code": "{\n    memoryTracker.allocateHeap( capacity );\n    return ByteBuffer.allocate( capacity );\n}", "path": "neo4j/community/io/src/main/java/org/neo4j/io/memory/ByteBuffers.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Release all the memory that was allocated for the buffer in case its native.\n * Noop for on heap buffers\n * @param byteBuffer byte buffer to release\n */\n", "func_signal": "public static void releaseBuffer( ByteBuffer byteBuffer, MemoryTracker memoryTracker )", "code": "{\n    if ( !byteBuffer.isDirect() )\n    {\n        memoryTracker.releaseHeap( byteBuffer.capacity() );\n        return;\n    }\n    UnsafeUtil.freeByteBuffer( byteBuffer, memoryTracker );\n}", "path": "neo4j/community/io/src/main/java/org/neo4j/io/memory/ByteBuffers.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Retrieve custom transaction timeout in milliseconds from numeric {@link #MAX_EXECUTION_TIME_HEADER} request\n * header.\n * If header is not set returns -1.\n * @param headers http headers\n * @param errorLog errors log for header parsing errors\n * @return custom timeout if header set, -1 otherwise or when value is not a valid number.\n */\n", "func_signal": "public static long getTransactionTimeout( HttpHeaders headers, Log errorLog )", "code": "{\n    String headerValue = headers.getHeaderString( MAX_EXECUTION_TIME_HEADER );\n    return getTransactionTimeout( headerValue, errorLog );\n}", "path": "neo4j/community/server/src/main/java/org/neo4j/server/web/HttpHeaderUtils.java", "commit_date": "2020-04-24 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * @see SingleSourceShortestPath\n */\n", "func_signal": "@Override\npublic List<Node> getPredecessorNodes( Node node )", "code": "{\n    List<Node> result = new LinkedList<>();\n    List<Relationship> predecessorRelationShips = predecessors1.get( node );\n    if ( predecessorRelationShips == null\n        || predecessorRelationShips.isEmpty() )\n    {\n        return null;\n    }\n    for ( Relationship relationship : predecessorRelationShips )\n    {\n        result.add( relationship.getOtherNode( node ) );\n    }\n    return result;\n}", "path": "neo4j/community/graph-algo/src/main/java/org/neo4j/graphalgo/impl/shortestpath/SingleSourceShortestPathDijkstra.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * @see Dijkstra\n */\n", "func_signal": "public SingleSourceShortestPathDijkstra( CostType startCost,\n    Node startNode, CostEvaluator<CostType> costEvaluator,\n    CostAccumulator<CostType> costAccumulator,\n    Comparator<CostType> costComparator, Direction relationDirection,\n    RelationshipType... costRelationTypes )", "code": "{\n    super( startCost, startNode, null, costEvaluator, costAccumulator,\n        costComparator, relationDirection, costRelationTypes );\n    reset();\n}", "path": "neo4j/community/graph-algo/src/main/java/org/neo4j/graphalgo/impl/shortestpath/SingleSourceShortestPathDijkstra.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * @return the failure, if any. Otherwise {@code null} marking no failure.\n */\n", "func_signal": "public synchronized String loadIndexFailure()", "code": "{\n    Path failureFile = failureFile();\n    try\n    {\n        if ( !fs.fileExists( failureFile ) || !isFailed( failureFile ) )\n        {\n            return null;\n        }\n        return readFailure( failureFile );\n    }\n    catch ( IOException e )\n    {\n        throw new RuntimeException( e );\n    }\n}", "path": "neo4j/community/lucene-index/src/main/java/org/neo4j/kernel/api/impl/index/storage/FailureStorage.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * @see SingleSourceShortestPath\n */\n", "func_signal": "@Override\npublic Map<Node,List<Relationship>> getPredecessors()", "code": "{\n    calculateMultiple();\n    return predecessors1;\n}", "path": "neo4j/community/graph-algo/src/main/java/org/neo4j/graphalgo/impl/shortestpath/SingleSourceShortestPathDijkstra.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * We are going to ensure the minimum timeout is 2 seconds. The timeout value is communicated to the user in\n * seconds rounded down, meaning if a user set a 1 second timeout, he would be told there was less than 1 second\n * remaining before he would need to renew the timeout.\n */\n", "func_signal": "private Duration getTransactionTimeout()", "code": "{\n    final long timeout = config.get( ServerSettings.transaction_idle_timeout ).toMillis();\n    return Duration.ofMillis( Math.max( timeout, MINIMUM_TIMEOUT + ROUNDING_SECOND ) );\n}", "path": "neo4j/community/server/src/main/java/org/neo4j/server/AbstractNeoWebServer.java", "commit_date": "2020-09-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Allocate on heap byte buffer with default byte order\n * @param capacity byte buffer capacity\n * @param capacityUnit byte buffer capacity unit\n * @param memoryTracker underlying buffers allocation memory tracker\n * @return byte buffer with requested size\n */\n", "func_signal": "public static ByteBuffer allocate( int capacity, ByteUnit capacityUnit, MemoryTracker memoryTracker )", "code": "{\n    int bufferCapacity = toIntExact( capacityUnit.toBytes( capacity ) );\n    memoryTracker.allocateHeap( bufferCapacity );\n    return ByteBuffer.allocate( bufferCapacity );\n}", "path": "neo4j/community/io/src/main/java/org/neo4j/io/memory/ByteBuffers.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * @see Dijkstra\n */\n", "func_signal": "@Override\npublic CostType getCost( Node targetNode )", "code": "{\n    if ( targetNode == null )\n    {\n        throw new RuntimeException( \"No end node defined\" );\n    }\n    calculate( targetNode );\n    return distances.get( targetNode );\n}", "path": "neo4j/community/graph-algo/src/main/java/org/neo4j/graphalgo/impl/shortestpath/SingleSourceShortestPathDijkstra.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Retrieve custom transaction timeout in milliseconds from numeric {@link #MAX_EXECUTION_TIME_HEADER} request\n * header.\n * If header is not set returns -1.\n * @param request http request\n * @param errorLog errors log for header parsing errors\n * @return custom timeout if header set, -1 otherwise or when value is not a valid number.\n */\n", "func_signal": "public static long getTransactionTimeout( HttpServletRequest request, Log errorLog )", "code": "{\n    String headerValue = request.getHeader( MAX_EXECUTION_TIME_HEADER );\n    return getTransactionTimeout( headerValue, errorLog );\n}", "path": "neo4j/community/server/src/main/java/org/neo4j/server/web/HttpHeaderUtils.java", "commit_date": "2020-04-24 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * Same as calculate(), but will set the flag to calculate all shortest\n * paths. It sets the flag and then calls calculate.\n * @return\n */\n", "func_signal": "public boolean calculateMultiple( Node targetNode )", "code": "{\n    if ( !calculateAllShortestPaths )\n    {\n        reset();\n        calculateAllShortestPaths = true;\n    }\n    return calculate( targetNode );\n}", "path": "neo4j/community/graph-algo/src/main/java/org/neo4j/graphalgo/impl/shortestpath/SingleSourceShortestPathDijkstra.java", "commit_date": "2020-05-07 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "/**\n * @param failureFileName name of failure files to be created\n * @param folderLayout describing where failure files should be stored\n */\n", "func_signal": "public FailureStorage( FileSystemAbstraction fs, FolderLayout folderLayout, String failureFileName )", "code": "{\n    this.fs = fs;\n    this.folderLayout = folderLayout;\n    this.failureFileName = failureFileName;\n}", "path": "neo4j/community/lucene-index/src/main/java/org/neo4j/kernel/api/impl/index/storage/FailureStorage.java", "commit_date": "2020-08-26 00:00:00", "repo_name": "neo4j/neo4j", "stars": 12269, "license": "gpl-3.0", "language": "java", "size": 618100}
{"docstring": "//\u83b7\u53d6\u4e0b\u4e00\u4e2a\u573a\u6b21\u4fe1\u606f\n", "func_signal": "private SmsFlashPromotionSession getNextFlashPromotionSession(Date date)", "code": "{\n    SmsFlashPromotionSessionExample sessionExample = new SmsFlashPromotionSessionExample();\n    sessionExample.createCriteria()\n            .andStartTimeGreaterThan(date);\n    sessionExample.setOrderByClause(\"start_time asc\");\n    List<SmsFlashPromotionSession> promotionSessionList = promotionSessionMapper.selectByExample(sessionExample);\n    if (!CollectionUtils.isEmpty(promotionSessionList)) {\n        return promotionSessionList.get(0);\n    }\n    return null;\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/service/impl/HomeServiceImpl.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u4ecetoken\u4e2d\u83b7\u53d6\u767b\u5f55\u7528\u6237\u540d\n */\n", "func_signal": "public String getUserNameFromToken(String token)", "code": "{\n    String username;\n    try {\n        Claims claims = getClaimsFromToken(token);\n        username = claims.getSubject();\n    } catch (Exception e) {\n        username = null;\n    }\n    return username;\n}", "path": "mall/mall-security/src/main/java/com/macro/mall/security/util/JwtTokenUtil.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u5224\u65adtoken\u662f\u5426\u5df2\u7ecf\u5931\u6548\n */\n", "func_signal": "private boolean isTokenExpired(String token)", "code": "{\n    Date expiredDate = getExpiredDateFromToken(token);\n    return expiredDate.before(new Date());\n}", "path": "mall/mall-security/src/main/java/com/macro/mall/security/util/JwtTokenUtil.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u5141\u8bb8\u8de8\u57df\u8c03\u7528\u7684\u8fc7\u6ee4\u5668\n */\n", "func_signal": "@Bean\npublic CorsFilter corsFilter()", "code": "{\n    CorsConfiguration config = new CorsConfiguration();\n    //\u5141\u8bb8\u6240\u6709\u57df\u540d\u8fdb\u884c\u8de8\u57df\u8c03\u7528\n    config.addAllowedOrigin(\"*\");\n    //\u5141\u8bb8\u8de8\u8d8a\u53d1\u9001cookie\n    config.setAllowCredentials(true);\n    //\u653e\u884c\u5168\u90e8\u539f\u59cb\u5934\u4fe1\u606f\n    config.addAllowedHeader(\"*\");\n    //\u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u65b9\u6cd5\u8de8\u57df\u8c03\u7528\n    config.addAllowedMethod(\"*\");\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    source.registerCorsConfiguration(\"/**\", config);\n    return new CorsFilter(source);\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/config/GlobalCorsConfig.java", "commit_date": "2020-07-26 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u4fee\u6539\u83dc\u5355\u5c42\u7ea7\n */\n", "func_signal": "private void updateLevel(UmsMenu umsMenu)", "code": "{\n    if (umsMenu.getParentId() == 0) {\n        //\u6ca1\u6709\u7236\u83dc\u5355\u65f6\u4e3a\u4e00\u7ea7\u83dc\u5355\n        umsMenu.setLevel(0);\n    } else {\n        //\u6709\u7236\u83dc\u5355\u65f6\u9009\u62e9\u6839\u636e\u7236\u83dc\u5355level\u8bbe\u7f6e\n        UmsMenu parentMenu = menuMapper.selectByPrimaryKey(umsMenu.getParentId());\n        if (parentMenu != null) {\n            umsMenu.setLevel(parentMenu.getLevel() + 1);\n        } else {\n            umsMenu.setLevel(0);\n        }\n    }\n}", "path": "mall/mall-admin/src/main/java/com/macro/mall/service/impl/UmsMenuServiceImpl.java", "commit_date": "2020-02-16 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u4eceDate\u7c7b\u578b\u7684\u65f6\u95f4\u4e2d\u63d0\u53d6\u65e5\u671f\u90e8\u5206\n */\n", "func_signal": "public static Date getDate(Date date)", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.setTime(date);\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    return calendar.getTime();\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/util/DateUtil.java", "commit_date": "2019-01-29 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "//\u6839\u636e\u65f6\u95f4\u83b7\u53d6\u79d2\u6740\u573a\u6b21\n", "func_signal": "private SmsFlashPromotionSession getFlashPromotionSession(Date date)", "code": "{\n    Date currTime = DateUtil.getTime(date);\n    SmsFlashPromotionSessionExample sessionExample = new SmsFlashPromotionSessionExample();\n    sessionExample.createCriteria()\n            .andStartTimeLessThanOrEqualTo(currTime)\n            .andEndTimeGreaterThanOrEqualTo(currTime);\n    List<SmsFlashPromotionSession> promotionSessionList = promotionSessionMapper.selectByExample(sessionExample);\n    if (!CollectionUtils.isEmpty(promotionSessionList)) {\n        return promotionSessionList.get(0);\n    }\n    return null;\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/service/impl/HomeServiceImpl.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u5c06SpringData\u5206\u9875\u540e\u7684list\u8f6c\u4e3a\u5206\u9875\u4fe1\u606f\n */\n", "func_signal": "public static <T> CommonPage<T> restPage(Page<T> pageInfo)", "code": "{\n    CommonPage<T> result = new CommonPage<T>();\n    result.setTotalPage(pageInfo.getTotalPages());\n    result.setPageNum(pageInfo.getNumber());\n    result.setPageSize(pageInfo.getSize());\n    result.setTotal(pageInfo.getTotalElements());\n    result.setList(pageInfo.getContent());\n    return result;\n}", "path": "mall/mall-common/src/main/java/com/macro/mall/common/api/CommonPage.java", "commit_date": "2020-09-07 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u5c06\u8fd4\u56de\u7ed3\u679c\u8f6c\u6362\u4e3a\u5bf9\u8c61\n */\n", "func_signal": "private EsProductRelatedInfo convertProductRelatedInfo(SearchHits<EsProduct> response)", "code": "{\n    EsProductRelatedInfo productRelatedInfo = new EsProductRelatedInfo();\n    Map<String, Aggregation> aggregationMap = response.getAggregations().getAsMap();\n    //\u8bbe\u7f6e\u54c1\u724c\n    Aggregation brandNames = aggregationMap.get(\"brandNames\");\n    List<String> brandNameList = new ArrayList<>();\n    for(int i = 0; i<((Terms) brandNames).getBuckets().size(); i++){\n        brandNameList.add(((Terms) brandNames).getBuckets().get(i).getKeyAsString());\n    }\n    productRelatedInfo.setBrandNames(brandNameList);\n    //\u8bbe\u7f6e\u5206\u7c7b\n    Aggregation productCategoryNames = aggregationMap.get(\"productCategoryNames\");\n    List<String> productCategoryNameList = new ArrayList<>();\n    for(int i=0;i<((Terms) productCategoryNames).getBuckets().size();i++){\n        productCategoryNameList.add(((Terms) productCategoryNames).getBuckets().get(i).getKeyAsString());\n    }\n    productRelatedInfo.setProductCategoryNames(productCategoryNameList);\n    //\u8bbe\u7f6e\u53c2\u6570\n    Aggregation productAttrs = aggregationMap.get(\"allAttrValues\");\n    List<? extends Terms.Bucket> attrIds = ((ParsedLongTerms) ((ParsedFilter) ((ParsedNested) productAttrs).getAggregations().get(\"productAttrs\")).getAggregations().get(\"attrIds\")).getBuckets();\n    List<EsProductRelatedInfo.ProductAttr> attrList = new ArrayList<>();\n    for (Terms.Bucket attrId : attrIds) {\n        EsProductRelatedInfo.ProductAttr attr = new EsProductRelatedInfo.ProductAttr();\n        attr.setAttrId((Long) attrId.getKey());\n        List<String> attrValueList = new ArrayList<>();\n        List<? extends Terms.Bucket> attrValues = ((ParsedStringTerms) attrId.getAggregations().get(\"attrValues\")).getBuckets();\n        List<? extends Terms.Bucket> attrNames = ((ParsedStringTerms) attrId.getAggregations().get(\"attrNames\")).getBuckets();\n        for (Terms.Bucket attrValue : attrValues) {\n            attrValueList.add(attrValue.getKeyAsString());\n        }\n        attr.setAttrValues(attrValueList);\n        if(!CollectionUtils.isEmpty(attrNames)){\n            String attrName = attrNames.get(0).getKeyAsString();\n            attr.setAttrName(attrName);\n        }\n        attrList.add(attr);\n    }\n    productRelatedInfo.setProductAttrs(attrList);\n    return productRelatedInfo;\n}", "path": "mall/mall-search/src/main/java/com/macro/mall/search/service/impl/EsProductServiceImpl.java", "commit_date": "2020-09-26 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u521d\u59cb\u5bf9\u8c61\u8f6c\u5316\u4e3a\u8282\u70b9\u5bf9\u8c61\n */\n", "func_signal": "private PmsProductCategoryNode covert(PmsProductCategory item, List<PmsProductCategory> allList)", "code": "{\n    PmsProductCategoryNode node = new PmsProductCategoryNode();\n    BeanUtils.copyProperties(item, node);\n    List<PmsProductCategoryNode> children = allList.stream()\n            .filter(subItem -> subItem.getParentId().equals(item.getId()))\n            .map(subItem -> covert(subItem, allList)).collect(Collectors.toList());\n    node.setChildren(children);\n    return node;\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/service/impl/PmsPortalProductServiceImpl.java", "commit_date": "2020-05-23 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "//\u6839\u636e\u65f6\u95f4\u83b7\u53d6\u79d2\u6740\u6d3b\u52a8\n", "func_signal": "private SmsFlashPromotion getFlashPromotion(Date date)", "code": "{\n    Date currDate = DateUtil.getDate(date);\n    SmsFlashPromotionExample example = new SmsFlashPromotionExample();\n    example.createCriteria()\n            .andStatusEqualTo(1)\n            .andStartDateLessThanOrEqualTo(currDate)\n            .andEndDateGreaterThanOrEqualTo(currDate);\n    List<SmsFlashPromotion> flashPromotionList = flashPromotionMapper.selectByExample(example);\n    if (!CollectionUtils.isEmpty(flashPromotionList)) {\n        return flashPromotionList.get(0);\n    }\n    return null;\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/service/impl/HomeServiceImpl.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u5c06PageHelper\u5206\u9875\u540e\u7684list\u8f6c\u4e3a\u5206\u9875\u4fe1\u606f\n */\n", "func_signal": "public static <T> CommonPage<T> restPage(List<T> list)", "code": "{\n    CommonPage<T> result = new CommonPage<T>();\n    PageInfo<T> pageInfo = new PageInfo<T>(list);\n    result.setTotalPage(pageInfo.getPages());\n    result.setPageNum(pageInfo.getPageNum());\n    result.setPageSize(pageInfo.getPageSize());\n    result.setTotal(pageInfo.getTotal());\n    result.setList(pageInfo.getList());\n    return result;\n}", "path": "mall/mall-common/src/main/java/com/macro/mall/common/api/CommonPage.java", "commit_date": "2020-09-07 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u4ecetoken\u4e2d\u83b7\u53d6JWT\u4e2d\u7684\u8d1f\u8f7d\n */\n", "func_signal": "private Claims getClaimsFromToken(String token)", "code": "{\n    Claims claims = null;\n    try {\n        claims = Jwts.parser()\n                .setSigningKey(secret)\n                .parseClaimsJws(token)\n                .getBody();\n    } catch (Exception e) {\n        LOGGER.info(\"JWT\u683c\u5f0f\u9a8c\u8bc1\u5931\u8d25:{}\", token);\n    }\n    return claims;\n}", "path": "mall/mall-security/src/main/java/com/macro/mall/security/util/JwtTokenUtil.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237\u4fe1\u606f\u751f\u6210token\n */\n", "func_signal": "public String generateToken(UserDetails userDetails)", "code": "{\n    Map<String, Object> claims = new HashMap<>();\n    claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());\n    claims.put(CLAIM_KEY_CREATED, new Date());\n    return generateToken(claims);\n}", "path": "mall/mall-security/src/main/java/com/macro/mall/security/util/JwtTokenUtil.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * 16\u4f4d\u4f18\u60e0\u7801\u751f\u6210\uff1a\u65f6\u95f4\u6233\u540e8\u4f4d+4\u4f4d\u968f\u673a\u6570+\u7528\u6237id\u540e4\u4f4d\n */\n", "func_signal": "private String generateCouponCode(Long memberId)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    Long currentTimeMillis = System.currentTimeMillis();\n    String timeMillisStr = currentTimeMillis.toString();\n    sb.append(timeMillisStr.substring(timeMillisStr.length() - 8));\n    for (int i = 0; i < 4; i++) {\n        sb.append(new Random().nextInt(10));\n    }\n    String memberIdStr = memberId.toString();\n    if (memberIdStr.length() <= 4) {\n        sb.append(String.format(\"%04d\", memberId));\n    } else {\n        sb.append(memberIdStr.substring(memberIdStr.length()-4));\n    }\n    return sb.toString();\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/service/impl/UmsMemberCouponServiceImpl.java", "commit_date": "2020-06-27 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u6839\u636e\u65b9\u6cd5\u548c\u4f20\u5165\u7684\u53c2\u6570\u83b7\u53d6\u8bf7\u6c42\u53c2\u6570\n */\n", "func_signal": "private Object getParameter(Method method, Object[] args)", "code": "{\n    List<Object> argList = new ArrayList<>();\n    Parameter[] parameters = method.getParameters();\n    for (int i = 0; i < parameters.length; i++) {\n        //\u5c06RequestBody\u6ce8\u89e3\u4fee\u9970\u7684\u53c2\u6570\u4f5c\u4e3a\u8bf7\u6c42\u53c2\u6570\n        RequestBody requestBody = parameters[i].getAnnotation(RequestBody.class);\n        if (requestBody != null) {\n            argList.add(args[i]);\n        }\n        //\u5c06RequestParam\u6ce8\u89e3\u4fee\u9970\u7684\u53c2\u6570\u4f5c\u4e3a\u8bf7\u6c42\u53c2\u6570\n        RequestParam requestParam = parameters[i].getAnnotation(RequestParam.class);\n        if (requestParam != null) {\n            Map<String, Object> map = new HashMap<>();\n            String key = parameters[i].getName();\n            if (!StringUtils.isEmpty(requestParam.value())) {\n                key = requestParam.value();\n            }\n            map.put(key, args[i]);\n            argList.add(map);\n        }\n    }\n    if (argList.size() == 0) {\n        return null;\n    } else if (argList.size() == 1) {\n        return argList.get(0);\n    } else {\n        return argList;\n    }\n}", "path": "mall/mall-common/src/main/java/com/macro/mall/common/log/WebLogAspect.java", "commit_date": "2020-08-08 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u4eceDate\u7c7b\u578b\u7684\u65f6\u95f4\u4e2d\u63d0\u53d6\u65f6\u95f4\u90e8\u5206\n */\n", "func_signal": "public static Date getTime(Date date)", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    calendar.setTime(date);\n    calendar.set(Calendar.YEAR, 1970);\n    calendar.set(Calendar.MONTH, 0);\n    calendar.set(Calendar.DAY_OF_MONTH, 1);\n    return calendar.getTime();\n}", "path": "mall/mall-portal/src/main/java/com/macro/mall/portal/util/DateUtil.java", "commit_date": "2019-01-29 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u6279\u91cf\u63d2\u5165\u5546\u54c1\u5206\u7c7b\u4e0e\u7b5b\u9009\u5c5e\u6027\u5173\u7cfb\u8868\n * @param productCategoryId \u5546\u54c1\u5206\u7c7bid\n * @param productAttributeIdList \u76f8\u5173\u5546\u54c1\u7b5b\u9009\u5c5e\u6027id\u96c6\u5408\n */\n", "func_signal": "private void insertRelationList(Long productCategoryId, List<Long> productAttributeIdList)", "code": "{\n    List<PmsProductCategoryAttributeRelation> relationList = new ArrayList<>();\n    for (Long productAttrId : productAttributeIdList) {\n        PmsProductCategoryAttributeRelation relation = new PmsProductCategoryAttributeRelation();\n        relation.setProductAttributeId(productAttrId);\n        relation.setProductCategoryId(productCategoryId);\n        relationList.add(relation);\n    }\n    productCategoryAttributeRelationDao.insertList(relationList);\n}", "path": "mall/mall-admin/src/main/java/com/macro/mall/service/impl/PmsProductCategoryServiceImpl.java", "commit_date": "2020-12-19 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u5224\u65adtoken\u5728\u6307\u5b9a\u65f6\u95f4\u5185\u662f\u5426\u521a\u521a\u5237\u65b0\u8fc7\n * @param token \u539ftoken\n * @param time \u6307\u5b9a\u65f6\u95f4\uff08\u79d2\uff09\n */\n", "func_signal": "private boolean tokenRefreshJustBefore(String token, int time)", "code": "{\n    Claims claims = getClaimsFromToken(token);\n    Date created = claims.get(CLAIM_KEY_CREATED, Date.class);\n    Date refreshDate = new Date();\n    //\u5237\u65b0\u65f6\u95f4\u5728\u521b\u5efa\u65f6\u95f4\u7684\u6307\u5b9a\u65f6\u95f4\u5185\n    if(refreshDate.after(created)&&refreshDate.before(DateUtil.offsetSecond(created,time))){\n        return true;\n    }\n    return false;\n}", "path": "mall/mall-security/src/main/java/com/macro/mall/security/util/JwtTokenUtil.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * \u5c06UmsMenu\u8f6c\u5316\u4e3aUmsMenuNode\u5e76\u8bbe\u7f6echildren\u5c5e\u6027\n */\n", "func_signal": "private UmsMenuNode covertMenuNode(UmsMenu menu, List<UmsMenu> menuList)", "code": "{\n    UmsMenuNode node = new UmsMenuNode();\n    BeanUtils.copyProperties(menu, node);\n    List<UmsMenuNode> children = menuList.stream()\n            .filter(subMenu -> subMenu.getParentId().equals(menu.getId()))\n            .map(subMenu -> covertMenuNode(subMenu, menuList)).collect(Collectors.toList());\n    node.setChildren(children);\n    return node;\n}", "path": "mall/mall-admin/src/main/java/com/macro/mall/service/impl/UmsMenuServiceImpl.java", "commit_date": "2020-02-16 00:00:00", "repo_name": "macrozheng/mall", "stars": 74359, "license": "apache-2.0", "language": "java", "size": 58461}
{"docstring": "/**\n * From\u8f6c\u5316\u4e3aPo\uff0c\u8fdb\u884c\u540e\u7eed\u4e1a\u52a1\u5904\u7406\n *\n * @param clazz\n * @return\n */\n", "func_signal": "public T toPo(Class<T> clazz)", "code": "{\n    T t = BeanUtils.instantiateClass(clazz);\n    BeanUtils.copyProperties(this, t);\n    return t;\n}", "path": "SpringCloud/common/web/src/main/java/com/springboot/cloud/common/web/entity/form/BaseForm.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * Form\u8f6c\u5316\u4e3aParam\n *\n * @param clazz\n * @return\n */\n", "func_signal": "public P toParam(Class<P> clazz)", "code": "{\n    P p = BeanUtils.instantiateClass(clazz);\n    BeanUtils.copyProperties(this, p);\n    return p;\n}", "path": "SpringCloud/common/web/src/main/java/com/springboot/cloud/common/web/entity/form/BaseQueryForm.java", "commit_date": "2019-09-20 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * @param errorType\n */\n", "func_signal": "public Result(ErrorType errorType)", "code": "{\n    this.code = errorType.getCode();\n    this.mesg = errorType.getMesg();\n    this.time = ZonedDateTime.now().toInstant();\n}", "path": "SpringCloud/common/core/src/main/java/com/springboot/cloud/common/core/entity/vo/Result.java", "commit_date": "2019-10-24 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * jwt token\u7684\u751f\u6210\u914d\u7f6e\n *\n * @return\n */\n", "func_signal": "@Bean\npublic JwtAccessTokenConverter accessTokenConverter()", "code": "{\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    converter.setSigningKey(signingKey);\n    return converter;\n}", "path": "SpringCloud/auth/authorization-server/src/main/java/com/springboot/auth/authorization/config/AuthorizationServerConfig.java", "commit_date": "2019-10-26 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * @param errorType\n * @param data\n */\n", "func_signal": "public Result(ErrorType errorType, T data)", "code": "{\n    this(errorType);\n    this.data = data;\n}", "path": "SpringCloud/common/core/src/main/java/com/springboot/cloud/common/core/entity/vo/Result.java", "commit_date": "2019-10-24 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u914d\u7f6e\u81ea\u5b9a\u4e49\u7684granter,\u624b\u673a\u53f7\u9a8c\u8bc1\u7801\u767b\u9646\n *\n * @param endpoints\n * @return\n * @auth joe_chen\n */\n", "func_signal": "public TokenGranter tokenGranter(final AuthorizationServerEndpointsConfigurer endpoints)", "code": "{\n    List<TokenGranter> granters = Lists.newArrayList(endpoints.getTokenGranter());\n    granters.add(new MobileTokenGranter(\n            authenticationManager,\n            endpoints.getTokenServices(),\n            endpoints.getClientDetailsService(),\n            endpoints.getOAuth2RequestFactory()));\n    return new CompositeTokenGranter(granters);\n}", "path": "SpringCloud/auth/authorization-server/src/main/java/com/springboot/auth/authorization/config/AuthorizationServerConfig.java", "commit_date": "2019-10-26 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u5c06\u4e48\u6709\u65b9\u6cd5\u8bbe\u7f6e\u4e3a\u53ef\u8bbf\u95ee\uff0c\u5e76\u8c03\u7528\u8be5\u65b9\u6cd5\n *\n * @param instance \u5b9e\u4f8b\u5bf9\u8c61\n * @param method   \u65b9\u6cd5\u5bf9\u8c61\n * @param args\n */\n", "func_signal": "public Object invokePrivateMethod(Object instance, Method method, Object... args)", "code": "{\n    ReflectionUtils.makeAccessible(method);\n    return ReflectionUtils.invokeMethod(method, instance, args);\n}", "path": "SpringCloud/common/test/src/main/java/com/springboot/cloud/common/test/PrivateHelper.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u521b\u5efa\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u9646\u7684AuthenticationProvider\n *\n * @return mobileAuthenticationProvider\n */\n", "func_signal": "@Bean\npublic MobileAuthenticationProvider mobileAuthenticationProvider()", "code": "{\n    MobileAuthenticationProvider mobileAuthenticationProvider = new MobileAuthenticationProvider(this.mobileUserDetailsService);\n    mobileAuthenticationProvider.setPasswordEncoder(passwordEncoder());\n    return mobileAuthenticationProvider;\n}", "path": "SpringCloud/auth/authorization-server/src/main/java/com/springboot/auth/authorization/config/WebServerSecurityConfig.java", "commit_date": "2019-08-18 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * @param url\n * @param method\n */\n", "func_signal": "public HttpServletRequestAuthWrapper(HttpServletRequest request, String url, String method)", "code": "{\n    super(request);\n    this.url = url;\n    this.method = method;\n}", "path": "SpringCloud/auth/authentication-server/src/main/java/com/springboot/cloud/auth/authentication/rest/HttpServletRequestAuthWrapper.java", "commit_date": "2019-08-30 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u5185\u90e8\u4f7f\u7528\uff0c\u7528\u4e8e\u6784\u9020\u6210\u529f\u7684\u7ed3\u679c\n *\n * @param code\n * @param mesg\n * @param data\n */\n", "func_signal": "private Result(String code, String mesg, T data)", "code": "{\n    this.code = code;\n    this.mesg = mesg;\n    this.data = data;\n    this.time = ZonedDateTime.now().toInstant();\n}", "path": "SpringCloud/common/core/src/main/java/com/springboot/cloud/common/core/entity/vo/Result.java", "commit_date": "2019-10-24 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * @param authRequest \u8bbf\u95ee\u7684url,method\n * @return \u6709\u6743\u9650true, \u65e0\u6743\u9650\u6216\u5168\u5c40\u8d44\u6e90\u4e2d\u672a\u627e\u5230\u8bf7\u6c42url\u8fd4\u56de\u5426\n */\n", "func_signal": "@Override\npublic boolean decide(HttpServletRequest authRequest)", "code": "{\n    log.debug(\"\u6b63\u5728\u8bbf\u95ee\u7684url\u662f:{}\uff0cmethod:{}\", authRequest.getServletPath(), authRequest.getMethod());\n    //\u83b7\u53d6\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\n    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n    //\u83b7\u53d6\u6b64url\uff0cmethod\u8bbf\u95ee\u5bf9\u5e94\u7684\u6743\u9650\u8d44\u6e90\u4fe1\u606f\n    ConfigAttribute urlConfigAttribute = resourceService.findConfigAttributesByUrl(authRequest);\n    if (NONEXISTENT_URL.equals(urlConfigAttribute.getAttribute()))\n        log.debug(\"url\u672a\u5728\u8d44\u6e90\u6c60\u4e2d\u627e\u5230\uff0c\u62d2\u7edd\u8bbf\u95ee\");\n    //\u83b7\u53d6\u6b64\u8bbf\u95ee\u7528\u6237\u6240\u6709\u89d2\u8272\u62e5\u6709\u7684\u6743\u9650\u8d44\u6e90\n    Set<Resource> userResources = findResourcesByUsername(authentication.getName());\n    //\u7528\u6237\u62e5\u6709\u6743\u9650\u8d44\u6e90 \u4e0e url\u8981\u6c42\u7684\u8d44\u6e90\u8fdb\u884c\u5bf9\u6bd4\n    return isMatch(urlConfigAttribute, userResources);\n}", "path": "SpringCloud/auth/authentication-server/src/main/java/com/springboot/cloud/auth/authentication/service/impl/AuthenticationService.java", "commit_date": "2019-08-30 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * @param instance  \u5b9e\u4f8b\u5bf9\u8c61\n * @param fieldName \u6210\u5458\u53d8\u91cf\u540d\n * @param value     \u503c\n */\n", "func_signal": "public void setPrivateField(Object instance, String fieldName, Object value)", "code": "{\n    Field signingKeyField = ReflectionUtils.findField(instance.getClass(), fieldName);\n    ReflectionUtils.makeAccessible(signingKeyField);\n    ReflectionUtils.setField(signingKeyField, instance, value);\n\n}", "path": "SpringCloud/common/test/src/main/java/com/springboot/cloud/common/test/PrivateHelper.java", "commit_date": "2018-07-01 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u83b7\u5f97\u767b\u5f55\u8005\u6240\u6709\u89d2\u8272\u7684\u6743\u9650\u96c6\u5408.\n *\n * @param user\n * @return\n */\n", "func_signal": "protected Set<GrantedAuthority> obtainGrantedAuthorities(User user)", "code": "{\n    Set<Role> roles = roleService.queryUserRolesByUserId(user.getId());\n    log.info(\"user:{},roles:{}\", user.getUsername(), roles);\n    return roles.stream().map(role -> new SimpleGrantedAuthority(role.getCode())).collect(Collectors.toSet());\n}", "path": "SpringCloud/auth/authorization-server/src/main/java/com/springboot/auth/authorization/oauth2/CustomUserDetailsService.java", "commit_date": "2019-07-29 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * 1.\u9996\u5148\u7f51\u5173\u68c0\u67e5token\u662f\u5426\u6709\u6548\uff0c\u65e0\u6548\u76f4\u63a5\u8fd4\u56de401\uff0c\u4e0d\u8c03\u7528\u7b7e\u6743\u670d\u52a1\n * 2.\u8c03\u7528\u7b7e\u6743\u670d\u52a1\u5668\u770b\u662f\u5426\u5bf9\u8be5\u8bf7\u6c42\u6709\u6743\u9650\uff0c\u6709\u6743\u9650\u8fdb\u5165\u4e0b\u4e00\u4e2afilter\uff0c\u6ca1\u6709\u6743\u9650\u8fd4\u56de401\n *\n * @param exchange\n * @param chain\n * @return\n */\n", "func_signal": "@Override\npublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)", "code": "{\n    ServerHttpRequest request = exchange.getRequest();\n    String authentication = request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);\n    String method = request.getMethodValue();\n    String url = request.getPath().value();\n    log.debug(\"url:{},method:{},headers:{}\", url, method, request.getHeaders());\n    //\u4e0d\u9700\u8981\u7f51\u5173\u7b7e\u6743\u7684url\n    if (authService.ignoreAuthentication(url)) {\n        return chain.filter(exchange);\n    }\n\n    //\u8c03\u7528\u7b7e\u6743\u670d\u52a1\u770b\u7528\u6237\u662f\u5426\u6709\u6743\u9650\uff0c\u82e5\u6709\u6743\u9650\u8fdb\u5165\u4e0b\u4e00\u4e2afilter\n    if (permissionService.permission(authentication, url, method)) {\n        ServerHttpRequest.Builder builder = request.mutate();\n        //TODO \u8f6c\u53d1\u7684\u8bf7\u6c42\u90fd\u52a0\u4e0a\u670d\u52a1\u95f4\u8ba4\u8bc1token\n        builder.header(X_CLIENT_TOKEN, \"TODO zhoutaoo\u6dfb\u52a0\u670d\u52a1\u95f4\u7b80\u5355\u8ba4\u8bc1\");\n        //\u5c06jwt token\u4e2d\u7684\u7528\u6237\u4fe1\u606f\u4f20\u7ed9\u670d\u52a1\n        builder.header(X_CLIENT_TOKEN_USER, getUserToken(authentication));\n        return chain.filter(exchange.mutate().request(builder.build()).build());\n    }\n    return unauthorized(exchange);\n}", "path": "SpringCloud/gateway/gateway-web/src/main/java/com/springboot/cloud/gateway/filter/AccessGatewayFilter.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49token\n *\n * @return tokenEnhancerChain\n */\n", "func_signal": "@Bean\npublic TokenEnhancerChain tokenEnhancerChain()", "code": "{\n    TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();\n    tokenEnhancerChain.setTokenEnhancers(Arrays.asList(new CustomTokenEnhancer(), accessTokenConverter()));\n    return tokenEnhancerChain;\n}", "path": "SpringCloud/auth/authorization-server/src/main/java/com/springboot/auth/authorization/config/AuthorizationServerConfig.java", "commit_date": "2019-10-26 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .formLogin().permitAll();\n    }\n\n    /**\n     * \u6ce8\u5165\u81ea\u5b9a\u4e49\u7684userDetailsService\u5b9e\u73b0\uff0c\u83b7\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u8bbe\u7f6e\u5bc6\u7801\u52a0\u5bc6\u65b9\u5f0f\n     *\n     * @param authenticationManagerBuilder\n     * @throws Exception\n     */\n", "func_signal": "@Override\n    protected void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception", "code": "{\n        authenticationManagerBuilder\n                .userDetailsService(userDetailsService)\n                .passwordEncoder(passwordEncoder());\n        // \u8bbe\u7f6e\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u9646\u7684AuthenticationProvider\n        authenticationManagerBuilder.authenticationProvider(mobileAuthenticationProvider());\n    }", "path": "SpringCloud/auth/authorization-server/src/main/java/com/springboot/auth/authorization/config/WebServerSecurityConfig.java", "commit_date": "2019-08-18 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u7f51\u5173\u62d2\u7edd\uff0c\u8fd4\u56de401\n *\n * @param\n */\n", "func_signal": "private Mono<Void> unauthorized(ServerWebExchange serverWebExchange)", "code": "{\n    serverWebExchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);\n    DataBuffer buffer = serverWebExchange.getResponse()\n            .bufferFactory().wrap(HttpStatus.UNAUTHORIZED.getReasonPhrase().getBytes());\n    return serverWebExchange.getResponse().writeWith(Flux.just(buffer));\n}", "path": "SpringCloud/gateway/gateway-web/src/main/java/com/springboot/cloud/gateway/filter/AccessGatewayFilter.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u63d0\u53d6jwt token\u4e2d\u7684\u6570\u636e\uff0c\u8f6c\u4e3ajson\n *\n * @param authentication\n * @return\n */\n", "func_signal": "private String getUserToken(String authentication)", "code": "{\n    String token = \"{}\";\n    try {\n        token = new ObjectMapper().writeValueAsString(authService.getJwt(authentication).getBody());\n        return token;\n    } catch (JsonProcessingException e) {\n        log.error(\"token json error:{}\", e.getMessage());\n    }\n    return token;\n}", "path": "SpringCloud/gateway/gateway-web/src/main/java/com/springboot/cloud/gateway/filter/AccessGatewayFilter.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * From\u8f6c\u5316\u4e3aPo\uff0c\u8fdb\u884c\u540e\u7eed\u4e1a\u52a1\u5904\u7406\n *\n * @param id\n * @param clazz\n * @return\n */\n", "func_signal": "public T toPo(String id, Class<T> clazz)", "code": "{\n    T t = BeanUtils.instantiateClass(clazz);\n    t.setId(id);\n    BeanUtils.copyProperties(this, t);\n    return t;\n}", "path": "SpringCloud/common/web/src/main/java/com/springboot/cloud/common/web/entity/form/BaseForm.java", "commit_date": "2019-11-03 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237\u6240\u88ab\u6388\u4e88\u7684\u89d2\u8272\uff0c\u67e5\u8be2\u5230\u7528\u6237\u6240\u62e5\u6709\u7684\u8d44\u6e90\n *\n * @param username\n * @return\n */\n", "func_signal": "private Set<Resource> findResourcesByUsername(String username)", "code": "{\n    //\u7528\u6237\u88ab\u6388\u4e88\u7684\u89d2\u8272\u8d44\u6e90\n    Set<Resource> resources = resourceService.queryByUsername(username);\n    if (log.isDebugEnabled()) {\n        log.debug(\"\u7528\u6237\u88ab\u6388\u4e88\u89d2\u8272\u7684\u8d44\u6e90\u6570\u91cf\u662f:{}, \u8d44\u6e90\u96c6\u5408\u4fe1\u606f\u4e3a:{}\", resources.size(), resources);\n    }\n    return resources;\n}", "path": "SpringCloud/auth/authentication-server/src/main/java/com/springboot/cloud/auth/authentication/service/impl/AuthenticationService.java", "commit_date": "2019-08-30 00:00:00", "repo_name": "zhoutaoo/SpringCloud", "stars": 8475, "license": "apache-2.0", "language": "java", "size": 10069}
{"docstring": "/**\n * Replace input string non-regular special characters with standard regular expression strings; Replace '*' with\n * '.* '? 'is replaced by '{n}', n is the number of consecutive ?; Other special characters that are not alphabetic\n * or numeric are preceded by '\\'.\n *\n * @param regex  The expression to be formatted\n * @return\n */\n", "func_signal": "public static String regexFormat(String regex)", "code": "{\n    if (regex == null) {\n        throw new NullPointerException(\"regex string can't be null\");\n    }\n    StringBuilder result = new StringBuilder();\n    result.append(\"^\");\n    for (int i = 0; i < regex.length(); i++) {\n        char ch = regex.charAt(i);\n        if (CharUtils.isAsciiAlphanumeric(ch) || CharUtils.isAsciiNumeric(ch)) {\n            result.append(ch);\n        } else if (ch == '*') {\n            result.append(\".*\");\n        } else if (ch == QUESTION_MARK) {\n            int j = 0;\n            for (; j < regex.length() - i && ch == QUESTION_MARK; j++) {\n                ch = regex.charAt(i + j);\n            }\n            if (j == regex.length() - i) {\n                result.append(\".{\" + j + \"}\");\n                break;\n            } else {\n                j -= 1;\n                result.append(\".{\" + (j) + \"}\");\n                i += j - 1;\n            }\n        } else {\n            result.append(\"\\\\\" + ch);\n        }\n    }\n    result.append(\"$\");\n    return result.toString();\n}", "path": "nacos/config/src/main/java/com/alibaba/nacos/config/server/utils/RegexParser.java", "commit_date": "2020-07-10 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Returns a resource on the classpath as a Stream object.\n *\n * @param resource The resource to find\n * @return The resource\n * @throws IOException If the resource cannot be found or read\n */\n", "func_signal": "public static InputStream getResourceAsStream(String resource) throws IOException", "code": "{\n    ClassLoader loader = ResourceUtils.class.getClassLoader();\n    return getResourceAsStream(loader, resource);\n}", "path": "nacos/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * push response with no ack.\n *\n * @param connectionId    connectionId.\n * @param request         request.\n * @param requestCallBack requestCallBack.\n */\n", "func_signal": "public void pushWithCallback(String connectionId, ServerPushRequest request, PushCallBack requestCallBack,\n        Executor executor)", "code": "{\n    Connection connection = connectionManager.getConnection(connectionId);\n    if (connection != null) {\n        try {\n            connection.asyncRequest(request, null, new AbstractRequestCallBack(requestCallBack.getTimeout()) {\n                \n                @Override\n                public Executor getExecutor() {\n                    return executor;\n                }\n                \n                @Override\n                public void onResponse(Response response) {\n                    if (response.isSuccess()) {\n                        requestCallBack.onSuccess();\n                    } else {\n                        requestCallBack.onFail(new NacosException(response.getErrorCode(), response.getMessage()));\n                    }\n                }\n                \n                @Override\n                public void onException(Throwable e) {\n                    requestCallBack.onFail(e);\n                }\n            });\n        } catch (ConnectionAlreadyClosedException e) {\n            connectionManager.unregister(connectionId);\n            requestCallBack.onSuccess();\n        } catch (Exception e) {\n            Loggers.REMOTE_DIGEST\n                    .error(\"error to send push response to connectionId ={},push response={}\", connectionId,\n                            request, e);\n            requestCallBack.onFail(e);\n        }\n    } else {\n        requestCallBack.onSuccess();\n    }\n}", "path": "nacos/core/src/main/java/com/alibaba/nacos/core/remote/RpcPushService.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Returns a resource on the classpath as a Stream object.\n *\n * @param loader   The classloader used to load the resource\n * @param resource The resource to find\n * @return The resource\n * @throws IOException If the resource cannot be found or read\n */\n", "func_signal": "public static InputStream getResourceAsStream(ClassLoader loader, String resource) throws IOException", "code": "{\n    InputStream in = null;\n    if (loader != null) {\n        in = loader.getResourceAsStream(resource);\n    }\n    if (in == null) {\n        in = ClassLoader.getSystemResourceAsStream(resource);\n    }\n    if (in == null) {\n        throw new IOException(\"Could not find resource \" + resource);\n    }\n    return in;\n}", "path": "nacos/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * push response with no ack.\n *\n * @param connectionId connectionId.\n * @param request      request.\n */\n", "func_signal": "public void pushWithoutAck(String connectionId, ServerPushRequest request)", "code": "{\n    Connection connection = connectionManager.getConnection(connectionId);\n    if (connection != null) {\n        try {\n            connection.request(request, null);\n        } catch (ConnectionAlreadyClosedException e) {\n            connectionManager.unregister(connectionId);\n        } catch (Exception e) {\n            Loggers.REMOTE_DIGEST\n                    .error(\"error to send push response to connectionId ={},push response={}\", connectionId,\n                            request, e);\n        }\n    }\n}", "path": "nacos/core/src/main/java/com/alibaba/nacos/core/remote/RpcPushService.java", "commit_date": "2020-12-29 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check Tenant, dataId and group.\n *\n * @param tenant tenant\n * @param dataId dataId\n * @param group  group\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkTdg(String tenant, String dataId, String group) throws NacosException", "code": "{\n    checkTenant(tenant);\n    if (StringUtils.isBlank(dataId) || !ParamUtils.isValid(dataId)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"dataId invalid\");\n    }\n    if (StringUtils.isBlank(group) || !ParamUtils.isValid(group)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"group invalid\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check key param.\n *\n * @param dataId dataId\n * @param group  group\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkKeyParam(String dataId, String group) throws NacosException", "code": "{\n    if (StringUtils.isBlank(dataId) || !ParamUtils.isValid(dataId)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"dataId invalid\");\n    }\n    if (StringUtils.isBlank(group) || !ParamUtils.isValid(group)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"group invalid\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check key param.\n *\n * @param dataIds dataIds\n * @param group   group\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkKeyParam(List<String> dataIds, String group) throws NacosException", "code": "{\n    if (dataIds == null || dataIds.size() == 0) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"dataIds invalid\");\n    }\n    for (String dataId : dataIds) {\n        if (StringUtils.isBlank(dataId) || !ParamUtils.isValid(dataId)) {\n            throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"dataId invalid\");\n        }\n    }\n    if (StringUtils.isBlank(group) || !ParamUtils.isValid(group)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"group invalid\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check beta ips.\n *\n * @param betaIps beta ips\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkBetaIps(String betaIps) throws NacosException", "code": "{\n    if (StringUtils.isBlank(betaIps)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n    }\n    String[] ipsArr = betaIps.split(\",\");\n    for (String ip : ipsArr) {\n        if (!IPUtil.isIP(ip)) {\n            throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"betaIps invalid\");\n        }\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Returns a resource on the classpath as a Properties object.\n *\n * @param loader   The classloader used to load the resource\n * @param resource The resource to find\n * @return The resource\n * @throws IOException If the resource cannot be found or read\n */\n", "func_signal": "public static Properties getResourceAsProperties(ClassLoader loader, String resource) throws IOException", "code": "{\n    Properties props = new Properties();\n    InputStream in = getResourceAsStream(loader, resource);\n    props.load(in);\n    IoUtils.closeQuietly(in);\n    return props;\n}", "path": "nacos/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check key param.\n *\n * @param dataId  dataId\n * @param group   group\n * @param datumId datumId\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkKeyParam(String dataId, String group, String datumId) throws NacosException", "code": "{\n    if (StringUtils.isBlank(dataId) || !ParamUtils.isValid(dataId)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"dataId invalid\");\n    }\n    if (StringUtils.isBlank(group) || !ParamUtils.isValid(group)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"group invalid\");\n    }\n    if (StringUtils.isBlank(datumId) || !ParamUtils.isValid(datumId)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"datumId invalid\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Returns a resource on the classpath as a Properties object.\n *\n * @param resource The resource to find\n * @return The resource\n * @throws IOException If the resource cannot be found or read\n */\n", "func_signal": "public static Properties getResourceAsProperties(String resource) throws IOException", "code": "{\n    ClassLoader loader = ResourceUtils.class.getClassLoader();\n    return getResourceAsProperties(loader, resource);\n}", "path": "nacos/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Returns the URL of the resource on the classpath.\n *\n * @param loader   The classloader used to load the resource\n * @param resource The resource to find\n * @return The resource\n * @throws IOException If the resource cannot be found or read\n */\n", "func_signal": "public static URL getResourceUrl(ClassLoader loader, String resource) throws IOException", "code": "{\n    URL url = null;\n    if (loader != null) {\n        url = loader.getResource(resource);\n    }\n    if (url == null) {\n        url = ClassLoader.getSystemResource(resource);\n    }\n    if (url == null) {\n        throw new IOException(\"Could not find resource \" + resource);\n    }\n    return url;\n}", "path": "nacos/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Returns the URL of the resource on the classpath.\n *\n * @param resource The resource to find\n * @return The resource\n * @throws IOException If the resource cannot be found or read\n */\n", "func_signal": "public static URL getResourceUrl(String resource) throws IOException", "code": "{\n    if (resource.startsWith(CLASSPATH_PREFIX)) {\n        String path = resource.substring(CLASSPATH_PREFIX.length());\n        \n        ClassLoader classLoader = ResourceUtils.class.getClassLoader();\n        \n        URL url = (classLoader != null ? classLoader.getResource(path) : ClassLoader.getSystemResource(path));\n        if (url == null) {\n            throw new FileNotFoundException(\"Resource [\" + resource + \"] does not exist\");\n        }\n        \n        return url;\n    }\n    \n    try {\n        return new URL(resource);\n    } catch (MalformedURLException ex) {\n        return new File(resource).toURI().toURL();\n    }\n}", "path": "nacos/common/src/main/java/com/alibaba/nacos/common/utils/ResourceUtils.java", "commit_date": "2020-12-31 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check content.\n *\n * @param content content\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkContent(String content) throws NacosException", "code": "{\n    if (StringUtils.isBlank(content)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"content invalid\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check parameter.\n *\n * @param dataId  dataId\n * @param group   group\n * @param content content\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkParam(String dataId, String group, String content) throws NacosException", "code": "{\n    checkKeyParam(dataId, group);\n    if (StringUtils.isBlank(content)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"content invalid\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Here you inject the dependent objects constructively, ensuring that some of the dependent functionality is\n * initialized ahead of time.\n *\n * @param persistService {@link PersistService}\n * @param memberManager  {@link ServerMemberManager}\n */\n", "func_signal": "public DumpService(PersistService persistService, ServerMemberManager memberManager)", "code": "{\n    this.persistService = persistService;\n    this.memberManager = memberManager;\n    this.processor = new DumpProcessor(this);\n    this.dumpAllProcessor = new DumpAllProcessor(this);\n    this.dumpAllBetaProcessor = new DumpAllBetaProcessor(this);\n    this.dumpAllTagProcessor = new DumpAllTagProcessor(this);\n    this.dumpTaskMgr = new TaskManager(\"com.alibaba.nacos.server.DumpTaskManager\");\n    this.dumpTaskMgr.setDefaultTaskProcessor(processor);\n    \n    this.dumpAllTaskMgr = new TaskManager(\"com.alibaba.nacos.server.DumpAllTaskManager\");\n    this.dumpAllTaskMgr.setDefaultTaskProcessor(dumpAllProcessor);\n    \n    this.dumpAllTaskMgr.addProcessor(DumpAllTask.TASK_ID, dumpAllProcessor);\n    this.dumpAllTaskMgr.addProcessor(DumpAllBetaTask.TASK_ID, dumpAllBetaProcessor);\n    this.dumpAllTaskMgr.addProcessor(DumpAllTagTask.TASK_ID, dumpAllTagProcessor);\n    \n    DynamicDataSource.getInstance().getDataSource();\n}", "path": "nacos/config/src/main/java/com/alibaba/nacos/config/server/service/dump/DumpService.java", "commit_date": "2020-11-20 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check parameter.\n *\n * @param dataId  dataId\n * @param group   group\n * @param datumId datumId\n * @param content content\n * @throws NacosException nacos exception\n */\n", "func_signal": "public static void checkParam(String dataId, String group, String datumId, String content) throws NacosException", "code": "{\n    checkKeyParam(dataId, group, datumId);\n    if (StringUtils.isBlank(content)) {\n        throw new NacosException(NacosException.CLIENT_INVALID_PARAM, \"content invalid\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * \u767d\u540d\u5355\u7684\u65b9\u5f0f\u68c0\u67e5, \u5408\u6cd5\u7684\u53c2\u6570\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4ee5\u53cavalidChars\u4e2d\u7684\u5b57\u7b26, \u5e76\u4e14\u4e0d\u80fd\u4e3a\u7a7a.\n *\n * @param param parameter\n * @return true if valid\n */\n", "func_signal": "public static boolean isValid(String param)", "code": "{\n    if (param == null) {\n        return false;\n    }\n    int length = param.length();\n    for (int i = 0; i < length; i++) {\n        char ch = param.charAt(i);\n        if (!Character.isLetterOrDigit(ch) && !isValidChar(ch)) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/config/utils/ParamUtils.java", "commit_date": "2020-11-05 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * Check context path.\n *\n * @param contextPath context path\n */\n", "func_signal": "public static void checkContextPath(String contextPath)", "code": "{\n    if (contextPath == null) {\n        return;\n    }\n    Matcher matcher = CONTEXT_PATH_MATCH.matcher(contextPath);\n    if (matcher.find()) {\n        throw new IllegalArgumentException(\"Illegal url path expression\");\n    }\n}", "path": "nacos/client/src/main/java/com/alibaba/nacos/client/utils/ValidatorUtils.java", "commit_date": "2020-07-03 00:00:00", "repo_name": "alibaba/nacos", "stars": 28644, "license": "apache-2.0", "language": "java", "size": 55744}
{"docstring": "/**\n * @param minProgressTime The minimum millisecond interval in per time to sync to the file and\n *                        the database.\n *                        <p>\n *                        Used for adjudging whether is time to sync the downloaded so far bytes\n *                        to database and make sure sync the downloaded buffer to local file.\n *                        <p/>\n *                        More smaller more frequently, then download more slowly, but will more\n *                        safer in scene of the process is killed unexpected.\n *                        <p/>\n *                        Default 2000, which follow the value in\n *                        com.android.providers.downloads.Constants.\n * @see com.liulishuo.filedownloader.download.DownloadStatusCallback#onProgress(long)\n * @see #setMinProgressStep(int)\n */\n", "func_signal": "public static void setMinProgressTime(long minProgressTime) throws IllegalAccessException", "code": "{\n    if (isDownloaderProcess(FileDownloadHelper.getAppContext())) {\n        FileDownloadUtils.minProgressTime = minProgressTime;\n    } else {\n        throw new IllegalAccessException(\"This value is used in the :filedownloader process,\"\n                + \" so set this value in your process is without effect. You can add \"\n                + \"'process.non-separate=true' in 'filedownloader.properties' to share the main\"\n                + \" process to FileDownloadService. Or you can configure this value in \"\n                + \"'filedownloader.properties' by 'download.min-progress-time'.\");\n    }\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * The connection used for connecting to the network.\n */\n", "func_signal": "@SuppressWarnings(\"EmptyMethod\")\npublic interface FileDownloadConnection", "code": "{\n    int NO_RESPONSE_CODE = 0;\n    int RESPONSE_CODE_FROM_OFFSET = 1;\n\n    /**\n     * Sets the header named {@code name} to {@code value}.\n     * <p>\n     * The capacity of this method is similar to the\n     * {@link URLConnection#addRequestProperty(String, String)}\n     */\n    void addHeader(String name, String value);\n\n    /**\n     * If we find the file has been downloaded several bytes, we will try to resume from the\n     * breakpoint from {@code offset} length.\n     *\n     * @param etag   the etag is stored by the past downloaded.\n     * @param offset the offset length has already been downloaded.\n     * @return {@code true} if adding resume offset was dispatched, so we can't handle that by\n     * internal.\n     */\n    @SuppressWarnings(\"UnusedParameters\")\n    boolean dispatchAddResumeOffset(String etag, long offset);\n\n    /**\n     * Returns an input stream that reads from this open connection.\n     * <p>\n     * The capacity of this method is similar to the {@link URLConnection#getInputStream()}\n     *\n     * @return an input stream that reads from this open connection.\n     */\n    InputStream getInputStream() throws IOException;\n\n    /**\n     * Returns an unmodifiable Map of general request header fields for this connection. The Map\n     * keys are Strings that represent the request-header field names. Each Map value is a\n     * unmodifiable List of Strings that represents the corresponding field values.\n     * <p>\n     * The capacity of this method is similar to the {@link URLConnection#getRequestProperties()}\n     *\n     * @return a Map of the general request properties for this connection.\n     */\n    Map<String, List<String>> getRequestHeaderFields();\n\n    /**\n     * Returns an unmodifiable Map of the header fields. The Map keys are Strings that represent\n     * the response-header field names. Each Map value is an unmodifiable List of Strings that\n     * represents the corresponding field values.\n     * <p>\n     * The capacity of this method is similar to the {@link URLConnection#getHeaderFields()}\n     *\n     * @return a Map of header fields\n     */\n    Map<String, List<String>> getResponseHeaderFields();\n\n    /**\n     * Returns the value of the named header field, which would be the response-header field.\n     * <p>\n     * If called on a connection that sets the same header multiple times\n     * with possibly different values, only the last value is returned.\n     *\n     * @param name the name of a header field.\n     * @return the value of the named header field, or <code>null</code>\n     * if there is no such field in the header.\n     */\n    String getResponseHeaderField(String name);\n\n    /**\n     * Set the method for the request, one of:\n     * <UL>\n     *  <LI>GET\n     *  <LI>POST\n     *  <LI>HEAD\n     *  <LI>OPTIONS\n     *  <LI>PUT\n     *  <LI>DELETE\n     *  <LI>TRACE\n     * </UL> are legal, subject to protocol restrictions.  The default\n     * method is GET.\n     *\n     * @param method the HTTP method\n     * @exception ProtocolException if the method cannot be reset or if\n     *              the requested method isn't valid for HTTP.\n     * @exception SecurityException if a security manager is set and the\n     *              method is \"TRACE\", but the \"allowHttpTrace\"\n     *              NetPermission is not granted.\n     *\n     * @return {@code true} if set effect, otherwise {@code false}.\n     */\n    boolean setRequestMethod(String method) throws ProtocolException;\n\n    /**\n     * Invokes the request immediately, and blocks until the response can be processed or is in\n     * error.\n     */\n    void execute() throws IOException;\n\n    /**\n     * Gets the status code from an HTTP response message.\n     * <p>\n     * <strong>If this is not http/https protocol connection</strong>:\n     * 1. If you make sure this connection is resume from the offset breakpoint(which you can check\n     * out this through {@link #dispatchAddResumeOffset(String, long)}), please return\n     * {@link #RESPONSE_CODE_FROM_OFFSET}\n     * 2. otherwise, return {@link #NO_RESPONSE_CODE}.\n     *\n     * @return the HTTP Status-Code, or -1\n     */\n    int getResponseCode() throws IOException;\n\n    /**\n     * To Be Reused or Close this connection, since this connection is ending in this session.\n     */\n    void ending();\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/connection/FileDownloadConnection.java", "commit_date": "2018-02-01 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * customize configurations of foreground service\n * @param config determines how to show an notification for the foreground service\n */\n", "func_signal": "public InitCustomMaker foregroundServiceConfig(ForegroundServiceConfig config)", "code": "{\n    this.mForegroundServiceConfig = config;\n    return this;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/services/DownloadMgrInitialParams.java", "commit_date": "2018-07-17 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @see #IDownloadEvent(String)\n * @deprecated do not handle ORDER any more.\n */\n", "func_signal": "public IDownloadEvent(final String id, boolean order)", "code": "{\n    this.id = id;\n    if (order) {\n        FileDownloadLog.w(this, \"do not handle ORDER any more, %s\", id);\n    }\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/event/IDownloadEvent.java", "commit_date": "2016-08-21 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "// because of we using one of two HEAD method to request or using range:0-0 to trial connection\n// only if connection api not support, so we test content-range first and then test\n// content-length.\n", "func_signal": "public static long findInstanceLengthForTrial(FileDownloadConnection connection)", "code": "{\n    long length = findInstanceLengthFromContentRange(connection);\n    if (length < 0) {\n        length = TOTAL_VALUE_IN_CHUNKED_RESOURCE;\n        FileDownloadLog.w(FileDownloadUtils.class, \"don't get instance length from\"\n                + \"Content-Range header\");\n    }\n    // the response of HEAD method is not very canonical sometimes(it depends on server\n    // implementation)\n    // so that it's uncertain the content-length is the same as the response of GET method if\n    // content-length=0, so we have to filter this case in here.\n    if (length == 0 && FileDownloadProperties.getImpl().trialConnectionHeadMethod) {\n        length = TOTAL_VALUE_IN_CHUNKED_RESOURCE;\n    }\n\n    return length;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @param url  The downloading URL.\n * @param path If {@code pathAsDirectory} is {@code true}, {@code path} would be the absolute\n *             directory to place the file;\n *             If {@code pathAsDirectory} is {@code false}, {@code path} would be the absolute\n *             file path.\n * @return The download id.\n */\n", "func_signal": "public static int generateId(final String url, final String path,\n                             final boolean pathAsDirectory)", "code": "{\n    return CustomComponentHolder.getImpl().getIdGeneratorInstance()\n            .generateId(url, path, pathAsDirectory);\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @param id              the {@code id} used for filter out which task would be notified the\n *                        'completed' message if need.\n * @param path            if the file with {@code path} is exist it means the relate task would\n *                        be completed.\n * @param forceReDownload whether the task is force to re-download ignore whether the file has\n *                        been exist or not.\n * @param flowDirectly    {@code true} if flow the message if need directly without throw to the\n *                        message-queue.\n * @return whether the task with {@code id} has been downloaded.\n */\n", "func_signal": "public static boolean inspectAndInflowDownloaded(int id, String path, boolean forceReDownload,\n                                                 boolean flowDirectly)", "code": "{\n    if (forceReDownload) {\n        return false;\n    }\n\n    if (path != null) {\n        final File file = new File(path);\n        if (file.exists()) {\n            MessageSnapshotFlow.getImpl().inflow(MessageSnapshotTaker.\n                    catchCanReusedOldFile(id, file, flowDirectly));\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadHelper.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @param url  The downloading URL.\n * @param path The absolute file path.\n * @return The download id.\n */\n", "func_signal": "public static int generateId(final String url, final String path)", "code": "{\n    return CustomComponentHolder.getImpl().getIdGeneratorInstance()\n            .generateId(url, path, false);\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * The notification item with the {@code task} is told to destroy.\n *\n * @param task The task used to identify the will be destroyed notification item.\n */\n", "func_signal": "public void destroyNotification(BaseDownloadTask task)", "code": "{\n    if (disableNotification(task)) {\n        return;\n    }\n\n    this.helper.showIndeterminate(task.getId(), task.getStatus());\n\n    final BaseNotificationItem n = this.helper.\n            remove(task.getId());\n    if (!interceptCancel(task, n) && n != null) {\n        n.cancel();\n    }\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/notification/FileDownloadNotificationListener.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @param path            If {@code pathAsDirectory} is true, the {@code path} would be the\n *                        absolute directory to settle down the file;\n *                        If {@code pathAsDirectory} is false, the {@code path} would be the\n *                        absolute file path.\n * @param pathAsDirectory whether the {@code path} is a directory.\n * @param filename        the file's name.\n * @return the absolute path of the file. If can't find by params, will return {@code null}.\n */\n", "func_signal": "public static String getTargetFilePath(String path, boolean pathAsDirectory, String filename)", "code": "{\n    if (path == null) {\n        return null;\n    }\n\n    if (pathAsDirectory) {\n        if (filename == null) {\n            return null;\n        }\n\n        return FileDownloadUtils.generateFilePath(path, filename);\n    } else {\n        return path;\n    }\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @return can resume by break point\n */\n", "func_signal": "public static boolean isBreakpointAvailable(final int id, final FileDownloadModel model,\n                                            final Boolean outputStreamSupportSeek)", "code": "{\n    if (model == null) {\n        if (FileDownloadLog.NEED_LOG) {\n            FileDownloadLog.d(FileDownloadUtils.class, \"can't continue %d model == null\", id);\n        }\n        return false;\n    }\n\n    if (model.getTempFilePath() == null) {\n        if (FileDownloadLog.NEED_LOG) {\n            FileDownloadLog\n                    .d(FileDownloadUtils.class, \"can't continue %d temp path == null\", id);\n        }\n        return false;\n    }\n\n    return isBreakpointAvailable(id, model, model.getTempFilePath(), outputStreamSupportSeek);\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * This construct is just for build trial connection profile.\n */\n", "func_signal": "private ConnectionProfile()", "code": "{\n    this.startOffset = 0;\n    this.currentOffset = 0;\n    this.endOffset = 0;\n    this.contentLength = 0;\n\n    this.isForceNoRange = false;\n    this.isTrialConnect = true;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/download/ConnectionProfile.java", "commit_date": "2018-02-05 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @see #getTargetFilePath(String, boolean, String)\n */\n", "func_signal": "public static String generateFilePath(String directory, String filename)", "code": "{\n    if (filename == null) {\n        throw new IllegalStateException(\"can't generate real path, the file name is null\");\n    }\n\n    if (directory == null) {\n        throw new IllegalStateException(\"can't generate real path, the directory is null\");\n    }\n\n    return formatString(\"%s%s%s\", directory, File.separator, filename);\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * The same to com.android.providers.downloads.Helpers#parseContentDisposition.\n * </p>\n * Parse the Content-Disposition HTTP Header. The format of the header\n * is defined here: http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html\n * This header provides a filename for content that is going to be\n * downloaded to the file system. We only support the attachment type.\n */\n", "func_signal": "public static String parseContentDisposition(String contentDisposition)", "code": "{\n    if (contentDisposition == null) {\n        return null;\n    }\n\n    try {\n        Matcher m = CONTENT_DISPOSITION_WITH_ASTERISK_PATTERN.matcher(contentDisposition);\n        if (m.find()) {\n            String charset = m.group(1);\n            String encodeFileName = m.group(2);\n            return URLDecoder.decode(encodeFileName, charset);\n        }\n\n        m = CONTENT_DISPOSITION_WITHOUT_ASTERISK_PATTERN.matcher(contentDisposition);\n        if (m.find()) {\n            return m.group(1);\n        }\n    } catch (IllegalStateException | UnsupportedEncodingException ignore) {\n        // This function is defined as returning null when it can't parse the header\n    }\n    return null;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * customize the connection count adapter.\n *\n * @param adapter the adapter used for determine how many connection will be used to\n *                downloading the target task.\n * @return the connection count adapter.\n */\n", "func_signal": "public InitCustomMaker connectionCountAdapter(\n        FileDownloadHelper.ConnectionCountAdapter adapter)", "code": "{\n    this.mConnectionCountAdapter = adapter;\n    return this;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/services/DownloadMgrInitialParams.java", "commit_date": "2018-07-17 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @param id             the {@code id} used for filter out which task would be notified the\n *                       'error' message if need.\n * @param sofar          the so far bytes of the current checking-task.\n * @param tempFilePath   the temp file path(file path used for downloading) for the current\n *                       checking-task.\n * @param targetFilePath the target file path for the current checking-task.\n * @param monitor        the monitor for download-thread.\n * @return whether the task with {@code id} is refused to start, because of there is an another\n * running task with the same {@code tempFilePath}.\n */\n", "func_signal": "public static boolean inspectAndInflowConflictPath(int id, long sofar,\n                                                   String tempFilePath, String targetFilePath,\n                                                   IThreadPoolMonitor monitor)", "code": "{\n    if (targetFilePath != null && tempFilePath != null) {\n        final int anotherSameTempPathTaskId =\n                monitor.findRunningTaskIdBySameTempPath(tempFilePath, id);\n        if (anotherSameTempPathTaskId != 0) {\n            MessageSnapshotFlow.getImpl().\n                    inflow(MessageSnapshotTaker.catchException(id, sofar,\n                            new PathConflictException(anotherSameTempPathTaskId, tempFilePath,\n                                    targetFilePath)));\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadHelper.java", "commit_date": "2017-12-12 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * Customize the max network thread count.\n * <p>\n * If you don't customize the network thread count, we use the result of\n * {@link #getDefaultMaxNetworkThreadCount()} as the default one.\n *\n * @param maxNetworkThreadCount The maximum count of the network thread, what is the number\n *                              of simultaneous downloads in FileDownloader.\n *                              <p>\n *                              If this value is less than or equal to 0, the value will be\n *                              ignored and use\n *                              {@link FileDownloadProperties#downloadMaxNetworkThreadCount}\n *                              which is defined in filedownloader.properties instead.\n */\n", "func_signal": "public InitCustomMaker maxNetworkThreadCount(int maxNetworkThreadCount)", "code": "{\n    if (maxNetworkThreadCount > 0) {\n        this.mMaxNetworkThreadCount = maxNetworkThreadCount;\n    }\n    return this;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/services/DownloadMgrInitialParams.java", "commit_date": "2018-07-17 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "// accept range is effect by  response code and Accept-Ranges header field.\n", "func_signal": "public static boolean isAcceptRange(int responseCode, FileDownloadConnection connection)", "code": "{\n    if (responseCode == HttpURLConnection.HTTP_PARTIAL\n            || responseCode == FileDownloadConnection.RESPONSE_CODE_FROM_OFFSET) return true;\n\n    final String acceptRanges = connection.getResponseHeaderField(\"Accept-Ranges\");\n    return \"bytes\".equals(acceptRanges);\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @param messenger {@link com.liulishuo.filedownloader.IFileDownloadMessenger}\n * @return true if the messenger is a block complete messenger and handle it through\n * {@linkplain FileDownloadMessageStation#BLOCK_COMPLETED_POOL} in the meantime.\n */\n", "func_signal": "private static boolean interceptBlockCompleteMessage(final IFileDownloadMessenger messenger)", "code": "{\n    if (messenger.isBlockingCompleted()) {\n        BLOCK_COMPLETED_POOL.execute(new Runnable() {\n            @Override\n            public void run() {\n                messenger.handoverMessage();\n            }\n        });\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/FileDownloadMessageStation.java", "commit_date": "2019-08-27 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * @param context the context\n * @return {@code true} if the FileDownloadService is allowed to run on the current process,\n * {@code false} otherwise.\n */\n", "func_signal": "public static boolean isDownloaderProcess(final Context context)", "code": "{\n    if (isDownloaderProcess != null) {\n        return isDownloaderProcess;\n    }\n\n    boolean result = false;\n    do {\n        if (FileDownloadProperties.getImpl().processNonSeparate) {\n            result = true;\n            break;\n        }\n\n        int pid = android.os.Process.myPid();\n        final ActivityManager activityManager = (ActivityManager) context.\n                getSystemService(Context.ACTIVITY_SERVICE);\n\n        if (activityManager == null) {\n            FileDownloadLog.w(FileDownloadUtils.class, \"fail to get the activity manager!\");\n            return false;\n        }\n\n        final List<ActivityManager.RunningAppProcessInfo> runningAppProcessInfoList =\n                activityManager.getRunningAppProcesses();\n\n        if (null == runningAppProcessInfoList || runningAppProcessInfoList.isEmpty()) {\n            FileDownloadLog\n                    .w(FileDownloadUtils.class, \"The running app process info list from\"\n                            + \" ActivityManager is null or empty, maybe current App is not \"\n                            + \"running.\");\n            return false;\n        }\n\n        for (ActivityManager.RunningAppProcessInfo processInfo : runningAppProcessInfoList) {\n            if (processInfo.pid == pid) {\n                result = processInfo.processName.endsWith(\":filedownloader\");\n                break;\n            }\n        }\n\n    } while (false);\n\n    isDownloaderProcess = result;\n    return isDownloaderProcess;\n}", "path": "FileDownloader/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java", "commit_date": "2019-08-31 00:00:00", "repo_name": "lingochamp/FileDownloader", "stars": 10937, "license": "apache-2.0", "language": "java", "size": 40720}
{"docstring": "/**\n * If there is an animation running for a recent state change, ends it.\n *\n * <p>This causes the animation to assign the end value(s) to the View.\n */\n", "func_signal": "public void jumpToCurrentState()", "code": "{\n  if (runningAnimator != null) {\n    runningAnimator.end();\n    runningAnimator = null;\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/internal/StateListAnimator.java", "commit_date": "2020-06-26 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Tests a AppBarLayout + scrolling content with fitSystemWindows = undefined, with a\n * fitSystemWindows = true parent, in RTL\n */\n", "func_signal": "@Test\npublic void testScrollingContentPositionWithFitSystemWindowsParentInRtl() throws Throwable", "code": "{\n  configureContent(\n      R.layout.design_appbar_toolbar_scroll_fitsystemwindows_parent,\n      R.string.design_appbar_toolbar_scroll_tabs_pin);\n\n  // Force RTL\n  onView(withId(R.id.app_bar)).perform(setLayoutDirection(ViewCompat.LAYOUT_DIRECTION_RTL));\n\n  final int[] appbarOnScreenXY = new int[2];\n  mAppBar.getLocationOnScreen(appbarOnScreenXY);\n\n  final View scrollingContent = mCoordinatorLayout.findViewById(R.id.scrolling_content);\n  final int[] scrollingContentOnScreenXY = new int[2];\n  scrollingContent.getLocationOnScreen(scrollingContentOnScreenXY);\n\n  // Assert that they have the same left\n  assertEquals(appbarOnScreenXY[0], scrollingContentOnScreenXY[0]);\n  // ...and the same width\n  assertEquals(mAppBar.getWidth(), scrollingContent.getWidth());\n  // ...and are vertically stacked\n  assertEquals(mAppBar.getBottom(), scrollingContent.getTop());\n}", "path": "material-components-android/tests/javatests/com/google/android/material/appbar/AppBarWithToolbarTest.java", "commit_date": "2020-01-14 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/** Resets the segment colors to the first indicator color. */\n", "func_signal": "private void resetSegmentColors()", "code": "{\n  referenceSegmentColorIndex = 0;\n  updateSegmentColors();\n}", "path": "material-components-android/lib/java/com/google/android/material/progressindicator/LinearIndeterminateContiguousAnimatorDelegate.java", "commit_date": "2020-12-03 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Tests a AppBarLayout + scrolling content with fitSystemWindows = undefined, with a\n * fitSystemWindows = true parent\n */\n", "func_signal": "@Test\npublic void testScrollingContentPositionWithFitSystemWindowsParent() throws Throwable", "code": "{\n  configureContent(\n      R.layout.design_appbar_toolbar_scroll_fitsystemwindows_parent,\n      R.string.design_appbar_toolbar_scroll_tabs_pin);\n\n  final int[] appbarOnScreenXY = new int[2];\n  mAppBar.getLocationOnScreen(appbarOnScreenXY);\n\n  final View scrollingContent = mCoordinatorLayout.findViewById(R.id.scrolling_content);\n  final int[] scrollingContentOnScreenXY = new int[2];\n  scrollingContent.getLocationOnScreen(scrollingContentOnScreenXY);\n\n  // Assert that they have the same left\n  assertEquals(appbarOnScreenXY[0], scrollingContentOnScreenXY[0]);\n  // ...and the same width\n  assertEquals(mAppBar.getWidth(), scrollingContent.getWidth());\n  // ...and are vertically stacked\n  assertEquals(mAppBar.getBottom(), scrollingContent.getTop());\n}", "path": "material-components-android/tests/javatests/com/google/android/material/appbar/AppBarWithToolbarTest.java", "commit_date": "2020-01-14 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets an {@link android.view.View.OnTouchListener} for the item view associated with the\n * provided {@code menuItemId}.\n */\n", "func_signal": "@SuppressLint(\"ClickableViewAccessibility\")\npublic void setItemOnTouchListener(int menuItemId, @Nullable OnTouchListener onTouchListener)", "code": "{\n  if (onTouchListener == null) {\n    onTouchListeners.remove(menuItemId);\n  } else {\n    onTouchListeners.put(menuItemId, onTouchListener);\n  }\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      if (item.getItemData().getItemId() == menuItemId) {\n        item.setOnTouchListener(onTouchListener);\n      }\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets the text appearance to be used for inactive menu item labels.\n *\n * @param textAppearanceRes the text appearance ID used for inactive menu item labels\n */\n", "func_signal": "public void setItemTextAppearanceInactive(@StyleRes int textAppearanceRes)", "code": "{\n  this.itemTextAppearanceInactive = textAppearanceRes;\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      item.setTextAppearanceInactive(textAppearanceRes);\n      // Set the text color if the user has set it, since itemTextColorFromUser takes precedence\n      // over a color set in the text appearance.\n      if (itemTextColorFromUser != null) {\n        item.setTextColor(itemTextColorFromUser);\n      }\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets the size to provide for the menu item icons.\n *\n * <p>For best image resolution, use an icon with the same size set in this method.\n *\n * @param iconSize the size to provide for the menu item icons in pixels\n */\n", "func_signal": "public void setItemIconSize(@Dimension int iconSize)", "code": "{\n  this.itemIconSize = iconSize;\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      item.setIconSize(iconSize);\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets the text appearance to be used for the active menu item label.\n *\n * @param textAppearanceRes the text appearance ID used for the active menu item label\n */\n", "func_signal": "public void setItemTextAppearanceActive(@StyleRes int textAppearanceRes)", "code": "{\n  this.itemTextAppearanceActive = textAppearanceRes;\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      item.setTextAppearanceActive(textAppearanceRes);\n      // Set the text color if the user has set it, since itemTextColorFromUser takes precedence\n      // over a color set in the text appearance.\n      if (itemTextColorFromUser != null) {\n        item.setTextColor(itemTextColorFromUser);\n      }\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Interface for users of {@link MaterialCalendar<S>} to control how the Calendar displays and\n * returns selections.\n *\n * <p>Implementors must implement {@link Parcelable} so that selection can be maintained through\n * Lifecycle events (e.g., Fragment destruction).\n *\n * <p>Dates are represented as times in UTC milliseconds.\n *\n * @param <S> The type of item available when cells are selected in the {@link AdapterView}\n * @hide\n */\n", "func_signal": "@RestrictTo(Scope.LIBRARY_GROUP)\npublic interface DateSelector<S> extends Parcelable", "code": "{\n\n  /** Returns the current selection. */\n  @Nullable\n  S getSelection();\n\n  /** Returns true if the current selection is acceptable. */\n  boolean isSelectionComplete();\n\n  /**\n   * Sets the current selection to {@code selection}.\n   *\n   * @throws IllegalArgumentException If {@code selection} creates an invalid state.\n   */\n  void setSelection(@NonNull S selection);\n\n  /**\n   * Allows this selection handler to respond to clicks within the {@link AdapterView}.\n   *\n   * @param selection The selected day represented as time in UTC milliseconds.\n   */\n  void select(long selection);\n\n  /**\n   * Returns a list of longs whose time value represents days that should be marked selected.\n   *\n   * <p>Uses {@link R.styleable#MaterialCalendar_daySelectedStyle} for styling.\n   */\n  @NonNull\n  Collection<Long> getSelectedDays();\n\n  /**\n   * Returns a list of ranges whose time values represent ranges that should be filled.\n   *\n   * <p>Uses {@link R.styleable#MaterialCalendar_rangeFillColor} for styling.\n   */\n  @NonNull\n  Collection<Pair<Long, Long>> getSelectedRanges();\n\n  @NonNull\n  String getSelectionDisplayString(Context context);\n\n  @StringRes\n  int getDefaultTitleResId();\n\n  @StyleRes\n  int getDefaultThemeResId(Context context);\n\n  @NonNull\n  View onCreateTextInputView(\n      @NonNull LayoutInflater layoutInflater,\n      @Nullable ViewGroup viewGroup,\n      @Nullable Bundle bundle,\n      @NonNull CalendarConstraints constraints,\n      @NonNull OnSelectionChangedListener<S> listener);\n}", "path": "material-components-android/lib/java/com/google/android/material/datepicker/DateSelector.java", "commit_date": "2020-06-26 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets the drawable to be used for item backgrounds.\n *\n * @param background the drawable of the background\n */\n", "func_signal": "public void setItemBackground(@Nullable Drawable background)", "code": "{\n  itemBackground = background;\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      item.setItemBackground(background);\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets the text color to be used for the menu item labels.\n *\n * @param color the ColorStateList used for menu item labels\n */\n", "func_signal": "public void setItemTextColor(@Nullable ColorStateList color)", "code": "{\n  itemTextColorFromUser = color;\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      item.setTextColor(color);\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/** Updates the segment colors array based on current reference color index. */\n", "func_signal": "private void updateSegmentColors()", "code": "{\n  int leftSegmentColorIndex =\n      MathUtils.floorMod(referenceSegmentColorIndex + 2, baseSpec.indicatorColors.length);\n  int centralSegmentColorIndex =\n      MathUtils.floorMod(referenceSegmentColorIndex + 1, baseSpec.indicatorColors.length);\n  segmentColors[0] =\n      MaterialColors.compositeARGBWithAlpha(\n          baseSpec.indicatorColors[leftSegmentColorIndex], drawable.getAlpha());\n  segmentColors[1] =\n      MaterialColors.compositeARGBWithAlpha(\n          baseSpec.indicatorColors[centralSegmentColorIndex], drawable.getAlpha());\n  segmentColors[2] =\n      MaterialColors.compositeARGBWithAlpha(\n          baseSpec.indicatorColors[referenceSegmentColorIndex], drawable.getAlpha());\n}", "path": "material-components-android/lib/java/com/google/android/material/progressindicator/LinearIndeterminateContiguousAnimatorDelegate.java", "commit_date": "2020-12-03 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Associates the given Animation with the provided drawable state specs so that it will be run\n * when the View's drawable state matches the specs.\n *\n * @param specs The drawable state specs to match against\n * @param animator The animator to run when the specs match\n */\n", "func_signal": "public void addState(int[] specs, ValueAnimator animator)", "code": "{\n  Tuple tuple = new Tuple(specs, animator);\n  animator.addListener(animationListener);\n  tuples.add(tuple);\n}", "path": "material-components-android/lib/java/com/google/android/material/internal/StateListAnimator.java", "commit_date": "2020-06-26 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "// ******************* Animation control *******************\n", "func_signal": "@Override\npublic void startAnimator()", "code": "{\n  maybeInitializeAnimators();\n\n  animatorSet.start();\n}", "path": "material-components-android/lib/java/com/google/android/material/progressindicator/LinearIndeterminateContiguousAnimatorDelegate.java", "commit_date": "2020-12-03 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/** Tests a AppBarLayout with fitSystemWindows = true, with a fitSystemWindows = true parent */\n", "func_signal": "@Test\npublic void testScrollAppBarLayoutWithFitSystemWindows() throws Throwable", "code": "{\n  configureContent(\n      R.layout.design_appbar_toolbar_scroll_fitsystemwindows,\n      R.string.design_appbar_toolbar_scroll_tabs_pin);\n\n  final int[] appbarOnScreenXY = new int[2];\n  mAppBar.getLocationOnScreen(appbarOnScreenXY);\n\n  final int[] toolbarOnScreenXY = new int[2];\n  mToolbar.getLocationOnScreen(toolbarOnScreenXY);\n\n  final int[] coordinatorLayoutOnScreenXY = new int[2];\n  mCoordinatorLayout.getLocationOnScreen(coordinatorLayoutOnScreenXY);\n\n  final int originalAppbarTop = appbarOnScreenXY[1];\n  final int originalAppbarBottom = originalAppbarTop + mAppBar.getHeight();\n  final int centerX = appbarOnScreenXY[0] + mAppBar.getWidth() / 2;\n\n  final int longSwipeAmount = 3 * mAppBar.getHeight() / 2;\n\n  final int originalToolbarTop = toolbarOnScreenXY[1];\n  final int originalToolbarBottom = originalToolbarTop + mToolbar.getHeight();\n\n  // Ensure that the Toolbar is positioned at the bottom of the AppBarLayout, and below\n  // the status bar\n  assertEquals(coordinatorLayoutOnScreenXY[1], originalAppbarTop);\n  assertEquals(originalAppbarTop + mAppBar.getTopInset(), originalToolbarTop);\n  assertEquals(originalAppbarBottom, originalToolbarBottom);\n\n  // Perform a swipe-up gesture across the horizontal center of the screen.\n  performVerticalSwipeUpGesture(\n      R.id.coordinator_layout,\n      centerX,\n      originalAppbarBottom + 3 * longSwipeAmount / 2,\n      longSwipeAmount);\n\n  // At this point the app bar should be visually snapped below the system status bar.\n  // Allow for off-by-a-pixel margin of error.\n  mAppBar.getLocationOnScreen(appbarOnScreenXY);\n  assertEquals(originalToolbarTop, appbarOnScreenXY[1] + mAppBar.getHeight(), 1);\n\n  // Perform yet another swipe-down gesture across the horizontal center of the screen.\n  performVerticalSwipeDownGesture(\n      R.id.coordinator_layout, centerX, originalAppbarBottom, longSwipeAmount);\n\n  // At this point the app bar should still be in its original position.\n  // Allow for off-by-a-pixel margin of error.\n  mAppBar.getLocationOnScreen(appbarOnScreenXY);\n  assertEquals(originalAppbarTop, appbarOnScreenXY[1], 1);\n  assertEquals(originalAppbarBottom, appbarOnScreenXY[1] + mAppBar.getHeight(), 1);\n}", "path": "material-components-android/tests/javatests/com/google/android/material/appbar/AppBarWithToolbarTest.java", "commit_date": "2020-01-14 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Updates the segment positions array based on current {@link #lineConnectPoint1Fraction} and\n * {@link #lineConnectPoint2Fraction};\n */\n", "func_signal": "private void updateSegmentPositions()", "code": "{\n  segmentPositions[0] = 0f;\n  segmentPositions[1] =\n      segmentPositions[2] =\n          Math.min(getLineConnectPoint1Fraction(), getLineConnectPoint2Fraction());\n  segmentPositions[3] =\n      segmentPositions[4] =\n          Math.max(getLineConnectPoint1Fraction(), getLineConnectPoint2Fraction());\n  segmentPositions[5] = 1f;\n}", "path": "material-components-android/lib/java/com/google/android/material/progressindicator/LinearIndeterminateContiguousAnimatorDelegate.java", "commit_date": "2020-12-03 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Returns the drawable for the background of the menu items.\n *\n * @return the drawable for the background\n */\n", "func_signal": "@Nullable\npublic Drawable getItemBackground()", "code": "{\n  if (buttons != null && buttons.length > 0) {\n    // Return button background instead of itemBackground if possible, so that the correct\n    // drawable is returned if the background is set via #setItemBackgroundRes.\n    return buttons[0].getBackground();\n  } else {\n    return itemBackground;\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets the tint which is applied to the menu items' icons.\n *\n * @param tint the tint to apply\n */\n", "func_signal": "public void setIconTintList(@Nullable ColorStateList tint)", "code": "{\n  itemIconTint = tint;\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      item.setIconTintList(tint);\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Sets the resource ID to be used for item backgrounds.\n *\n * @param background the resource ID of the background\n */\n", "func_signal": "public void setItemBackgroundRes(int background)", "code": "{\n  itemBackgroundRes = background;\n  if (buttons != null) {\n    for (NavigationBarItemView item : buttons) {\n      item.setItemBackground(background);\n    }\n  }\n}", "path": "material-components-android/lib/java/com/google/android/material/navigation/NavigationBarMenuView.java", "commit_date": "2020-12-02 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/** Shifts the color used in the segment colors to the next available one. */\n", "func_signal": "private void shiftSegmentColors()", "code": "{\n  referenceSegmentColorIndex = (referenceSegmentColorIndex + 1) % baseSpec.indicatorColors.length;\n  updateSegmentColors();\n}", "path": "material-components-android/lib/java/com/google/android/material/progressindicator/LinearIndeterminateContiguousAnimatorDelegate.java", "commit_date": "2020-12-03 00:00:00", "repo_name": "material-components/material-components-android", "stars": 15814, "license": "apache-2.0", "language": "java", "size": 150069}
{"docstring": "/**\n * Get information about a computer.\n * @param computerName computer name\n * @return Domain or workgroup name.\n */\n", "func_signal": "public static String getDomainName(String computerName)", "code": "{\n    PointerByReference lpNameBuffer = new PointerByReference();\n    IntByReference bufferType = new IntByReference();\n\n    try {\n        int rc = Netapi32.INSTANCE.NetGetJoinInformation(computerName, lpNameBuffer, bufferType);\n        if (LMErr.NERR_Success != rc) {\n            throw new Win32Exception(rc);\n        }\n        // type of domain: bufferType.getValue()\n        return lpNameBuffer.getValue().getWideString(0);\n    } finally {\n        if (lpNameBuffer.getPointer() != null) {\n            int rc = Netapi32.INSTANCE.NetApiBufferFree(lpNameBuffer.getValue());\n            if (LMErr.NERR_Success != rc) {\n                throw new Win32Exception(rc);\n            }\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Get the names of local groups on a computer.\n * @param serverName Name of the computer.\n * @return An array of local group names.\n */\n", "func_signal": "public static LocalGroup[] getLocalGroups(String serverName)", "code": "{\n    PointerByReference bufptr = new PointerByReference();\n    IntByReference entriesRead = new IntByReference();\n    IntByReference totalEntries = new IntByReference();\n    try {\n        int rc = Netapi32.INSTANCE.NetLocalGroupEnum(serverName, 1, bufptr, LMCons.MAX_PREFERRED_LENGTH, entriesRead, totalEntries, null);\n        if (LMErr.NERR_Success != rc || bufptr.getValue() == Pointer.NULL) {\n            throw new Win32Exception(rc);\n        }\n\n        ArrayList<LocalGroup> result = new ArrayList<LocalGroup>();\n\n        if (entriesRead.getValue() > 0) {\n            LMAccess.LOCALGROUP_INFO_1 group = new LMAccess.LOCALGROUP_INFO_1(bufptr.getValue());\n            LMAccess.LOCALGROUP_INFO_1[] groups = (LOCALGROUP_INFO_1[]) group.toArray(entriesRead.getValue());\n            for (LOCALGROUP_INFO_1 lgpi : groups) {\n                LocalGroup lgp = new LocalGroup();\n                lgp.name = lgpi.lgrui1_name;\n                lgp.comment = lgpi.lgrui1_comment;\n                result.add(lgp);\n            }\n        }\n\n        return result.toArray(new LocalGroup[0]);\n    } finally {\n        if (bufptr.getValue() != Pointer.NULL) {\n            int rc = Netapi32.INSTANCE.NetApiBufferFree(bufptr.getValue());\n            if (LMErr.NERR_Success != rc) {\n                throw new Win32Exception(rc);\n            }\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * @param type\n * @param value\n */\n", "func_signal": "public void setValue(EVT_VARIANT_TYPE type, Object value)", "code": "{\n    allocateMemory();\n    if (type == null) {\n        throw new IllegalArgumentException(\"setValue must not be called with type set to NULL\");\n    }\n    holder = null;\n    if (value == null || type == EVT_VARIANT_TYPE.EvtVarTypeNull) {\n        Type = EVT_VARIANT_TYPE.EvtVarTypeNull.ordinal();\n        Count = 0;\n        field1.writeField(\"pointerValue\", Pointer.NULL);\n    } else {\n        switch (type) {\n            case EvtVarTypeAnsiString:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == String.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    StringArray sa = new StringArray((String[]) value, false);\n                    holder = sa;\n                    Count = ((String[]) value).length;\n                    field1.writeField(\"pointerValue\", sa);\n                } else if (value.getClass() == String.class) {\n                    Type = type.ordinal();\n                    Memory mem = new Memory(((String) value).length() + 1);\n                    mem.setString(0, (String) value);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from String/String[]\");\n                }\n                break;\n            case EvtVarTypeBoolean:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == BOOL.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    Memory mem = new Memory(((BOOL[]) value).length * 4);\n                    for (int i = 0; i < ((BOOL[]) value).length; i++) {\n                        mem.setInt(i * 4, ((BOOL[]) value)[i].intValue());\n                    }\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else if (value.getClass() == BOOL.class) {\n                    Type = type.ordinal();\n                    Count = 0;\n                    field1.writeField(\"intValue\", ((BOOL) value).intValue());\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from BOOL/BOOL[]\");\n                }\n                break;\n            case EvtVarTypeString:\n            case EvtVarTypeEvtXml:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == String.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    StringArray sa = new StringArray((String[]) value, true);\n                    holder = sa;\n                    Count = ((String[]) value).length;\n                    field1.writeField(\"pointerValue\", sa);\n                } else if (value.getClass() == String.class) {\n                    Type = type.ordinal();\n                    Memory mem = new Memory((((String) value).length() + 1) * 2);\n                    mem.setWideString(0, (String) value);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from String/String[]\");\n                }\n                break;\n            case EvtVarTypeSByte:\n            case EvtVarTypeByte:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == byte.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    Memory mem = new Memory(((byte[]) value).length * 1);\n                    mem.write(0, (byte[]) value, 0, ((byte[]) value).length);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else if (value.getClass() == byte.class) {\n                    Type = type.ordinal();\n                    Count = 0;\n                    field1.writeField(\"byteValue\", value);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from byte/byte[]\");\n                }\n                break;\n            case EvtVarTypeInt16:\n            case EvtVarTypeUInt16:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == short.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    Memory mem = new Memory(((short[]) value).length * 2);\n                    mem.write(0, (short[]) value, 0, ((short[]) value).length);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else if (value.getClass() == short.class) {\n                    Type = type.ordinal();\n                    Count = 0;\n                    field1.writeField(\"shortValue\", value);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from short/short[]\");\n                }\n                break;\n            case EvtVarTypeHexInt32:\n            case EvtVarTypeInt32:\n            case EvtVarTypeUInt32:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == int.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    Memory mem = new Memory(((int[]) value).length * 4);\n                    mem.write(0, (int[]) value, 0, ((int[]) value).length);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else if (value.getClass() == int.class) {\n                    Type = type.ordinal();\n                    Count = 0;\n                    field1.writeField(\"intValue\", value);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from int/int[]\");\n                }\n                break;\n            case EvtVarTypeHexInt64:\n            case EvtVarTypeInt64:\n            case EvtVarTypeUInt64:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == long.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    Memory mem = new Memory(((long[]) value).length * 4);\n                    mem.write(0, (long[]) value, 0, ((long[]) value).length);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else if (value.getClass() == long.class) {\n                    Type = type.ordinal();\n                    Count = 0;\n                    field1.writeField(\"longValue\", value);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from long/long[]\");\n                }\n                break;\n            case EvtVarTypeSingle:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == float.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    Memory mem = new Memory(((float[]) value).length * 4);\n                    mem.write(0, (float[]) value, 0, ((float[]) value).length);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else if (value.getClass() == float.class) {\n                    Type = type.ordinal();\n                    Count = 0;\n                    field1.writeField(\"floatValue\", value);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from float/float[]\");\n                }\n                break;\n            case EvtVarTypeDouble:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == double.class) {\n                    Type = type.ordinal() | EVT_VARIANT_TYPE_ARRAY;\n                    Memory mem = new Memory(((double[]) value).length * 4);\n                    mem.write(0, (double[]) value, 0, ((double[]) value).length);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else if (value.getClass() == double.class) {\n                    Type = type.ordinal();\n                    Count = 0;\n                    field1.writeField(\"doubleVal\", value);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from double/double[]\");\n                }\n                break;\n            case EvtVarTypeBinary:\n                if (value.getClass().isArray() && value.getClass().getComponentType() == byte.class) {\n                    Type = type.ordinal();\n                    Memory mem = new Memory(((byte[]) value).length * 1);\n                    mem.write(0, (byte[]) value, 0, ((byte[]) value).length);\n                    holder = mem;\n                    Count = 0;\n                    field1.writeField(\"pointerValue\", mem);\n                } else {\n                    throw new IllegalArgumentException(type.name() + \" must be set from byte[]\");\n                }\n                break;\n            case EvtVarTypeFileTime:\n            case EvtVarTypeEvtHandle:\n            case EvtVarTypeSysTime:\n            case EvtVarTypeGuid:\n            case EvtVarTypeSid:\n            case EvtVarTypeSizeT:\n            default:\n                throw new IllegalStateException(String.format(\"NOT IMPLEMENTED: getValue(%s) (Array: %b, Count: %d)\", type, isArray(), Count));\n        }\n    }\n    write();\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Winevt.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * This module defines the 32-Bit Windows types and constants that are defined\n * by NT, but exposed through the Win32 API. Ported from WinNT.h Microsoft\n * Windows SDK 6.0A. Avoid including any NIO Buffer mappings here; put them in a\n * DLL-derived interface (e.g. kernel32, user32, etc) instead.\n *\n * @author dblock[at]dblock.org\n */\n", "func_signal": "@SuppressWarnings(\"serial\")\npublic interface WinNT extends WinError, WinDef, WinBase, BaseTSD", "code": "{\n\n    int MINCHAR     = 0x80;\n    int MAXCHAR     = 0x7f;\n    int MINSHORT    = 0x8000;\n    int MAXSHORT    = 0x7fff;\n    int MINLONG     = 0x80000000;\n    int MAXLONG     = 0x7fffffff;\n    int MAXBYTE     = 0xff;\n    int MAXWORD     = 0xffff;\n    int MAXDWORD    = 0xffffffff;\n    //\n    // The following are masks for the predefined standard access types\n    //\n\n    int DELETE = 0x00010000;\n    int READ_CONTROL = 0x00020000;\n    int WRITE_DAC = 0x00040000;\n    int WRITE_OWNER = 0x00080000;\n    int SYNCHRONIZE = 0x00100000;\n\n    int STANDARD_RIGHTS_REQUIRED = 0x000F0000;\n    int STANDARD_RIGHTS_READ = READ_CONTROL;\n    int STANDARD_RIGHTS_WRITE = READ_CONTROL;\n    int STANDARD_RIGHTS_EXECUTE = READ_CONTROL;\n    int STANDARD_RIGHTS_ALL = 0x001F0000;\n\n    int SPECIFIC_RIGHTS_ALL = 0x0000FFFF;\n\n    int MUTANT_QUERY_STATE = 0x0001;\n    int MUTANT_ALL_ACCESS = STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE\n            | MUTANT_QUERY_STATE;\n\n    //\n    // Token Specific Access Rights.\n    //\n\n    /**\n     * Required to attach a primary token to a process. The\n     * SE_ASSIGNPRIMARYTOKEN_NAME privilege is also required to accomplish this\n     * task.\n     */\n    int TOKEN_ASSIGN_PRIMARY = 0x0001;\n\n    /**\n     * Required to duplicate an access token.\n     */\n    int TOKEN_DUPLICATE = 0x0002;\n\n    /**\n     * Required to attach an impersonation access token to a process.\n     */\n    int TOKEN_IMPERSONATE = 0x0004;\n\n    /**\n     * Required to query an access token.\n     */\n    int TOKEN_QUERY = 0x0008;\n\n    /**\n     * Required to query the source of an access token.\n     */\n    int TOKEN_QUERY_SOURCE = 0x0010;\n\n    /**\n     * Required to enable or disable the privileges in an access token.\n     */\n    int TOKEN_ADJUST_PRIVILEGES = 0x0020;\n\n    /**\n     * Required to adjust the attributes of the groups in an access token.\n     */\n    int TOKEN_ADJUST_GROUPS = 0x0040;\n\n    /**\n     * Required to change the default owner, primary group, or DACL of an access\n     * token.\n     */\n    int TOKEN_ADJUST_DEFAULT = 0x0080;\n\n    /**\n     * Required to adjust the session ID of an access token. The SE_TCB_NAME\n     * privilege is required.\n     */\n    int TOKEN_ADJUST_SESSIONID = 0x0100;\n\n    int TOKEN_ALL_ACCESS_P = STANDARD_RIGHTS_REQUIRED | TOKEN_ASSIGN_PRIMARY\n            | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY\n            | TOKEN_QUERY_SOURCE | TOKEN_ADJUST_PRIVILEGES\n            | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT;\n\n    /**\n     * Combines all possible access rights for a token.\n     */\n    int TOKEN_ALL_ACCESS = TOKEN_ALL_ACCESS_P | TOKEN_ADJUST_SESSIONID;\n\n    /**\n     * Combines STANDARD_RIGHTS_READ and TOKEN_QUERY.\n     */\n    int TOKEN_READ = STANDARD_RIGHTS_READ | TOKEN_QUERY;\n\n    /**\n     * Combines STANDARD_RIGHTS_WRITE, TOKEN_ADJUST_PRIVILEGES,\n     * TOKEN_ADJUST_GROUPS, and TOKEN_ADJUST_DEFAULT.\n     */\n    int TOKEN_WRITE = STANDARD_RIGHTS_WRITE | TOKEN_ADJUST_PRIVILEGES\n            | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT;\n\n    /**\n     * Combines STANDARD_RIGHTS_EXECUTE and TOKEN_IMPERSONATE.\n     */\n    int TOKEN_EXECUTE = STANDARD_RIGHTS_EXECUTE;\n\n    int THREAD_TERMINATE = 0x0001;\n    int THREAD_SUSPEND_RESUME = 0x0002;\n    int THREAD_GET_CONTEXT = 0x0008;\n    int THREAD_SET_CONTEXT = 0x0010;\n    int THREAD_QUERY_INFORMATION = 0x0040;\n    int THREAD_SET_INFORMATION = 0x0020;\n    int THREAD_SET_THREAD_TOKEN = 0x0080;\n    int THREAD_IMPERSONATE = 0x0100;\n    int THREAD_DIRECT_IMPERSONATION = 0x0200;\n    int THREAD_SET_LIMITED_INFORMATION = 0x0400;\n    int THREAD_QUERY_LIMITED_INFORMATION = 0x0800;\n    int THREAD_ALL_ACCESS = STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x3FF;\n\n    /**\n     * Flag identifying hyperthreading / simultaneous multithreading (SMT)\n     */\n    int LTP_PC_SMT = 0x1;\n\n    /**\n     * The SECURITY_IMPERSONATION_LEVEL enumeration type contains values that\n     * specify security impersonation levels. Security impersonation levels\n     * govern the degree to which a server process can act on behalf of a client\n     * process.\n     */\n    public abstract class SECURITY_IMPERSONATION_LEVEL {\n        /**\n         * The server process cannot obtain identification information about the\n         * client, and it cannot impersonate the client. It is defined with no\n         * value given, and thus, by ANSI C rules, defaults to a value of zero.\n         */\n        public static final int SecurityAnonymous = 0;\n\n        /**\n         * The server process can obtain information about the client, such as\n         * security identifiers and privileges, but it cannot impersonate the\n         * client. This is useful for servers that export their own objects, for\n         * example, database products that export tables and views. Using the\n         * retrieved client-security information, the server can make\n         * access-validation decisions without being able to use other services\n         * that are using the client's security context.\n         */\n        public static final int SecurityIdentification = 1;\n\n        /**\n         * The server process can impersonate the client's security context on\n         * its local system. The server cannot impersonate the client on remote\n         * systems.\n         */\n        public static final int SecurityImpersonation = 2;\n\n        /**\n         * The server process can impersonate the client's security context on\n         * remote systems.\n         */\n        public static final int SecurityDelegation = 3;\n    }\n\n    /**\n     * The TOKEN_INFORMATION_CLASS enumeration type contains values that specify\n     * the type of information being assigned to or retrieved from an access\n     * token.\n     */\n    public abstract class TOKEN_INFORMATION_CLASS {\n        public static final int TokenUser = 1;\n        public static final int TokenGroups = 2;\n        public static final int TokenPrivileges = 3;\n        public static final int TokenOwner = 4;\n        public static final int TokenPrimaryGroup = 5;\n        public static final int TokenDefaultDacl = 6;\n        public static final int TokenSource = 7;\n        public static final int TokenType = 8;\n        public static final int TokenImpersonationLevel = 9;\n        public static final int TokenStatistics = 10;\n        public static final int TokenRestrictedSids = 11;\n        public static final int TokenSessionId = 12;\n        public static final int TokenGroupsAndPrivileges = 13;\n        public static final int TokenSessionReference = 14;\n        public static final int TokenSandBoxInert = 15;\n        public static final int TokenAuditPolicy = 16;\n        public static final int TokenOrigin = 17;\n        public static final int TokenElevationType = 18;\n        public static final int TokenLinkedToken = 19;\n        public static final int TokenElevation = 20;\n        public static final int TokenHasRestrictions = 21;\n        public static final int TokenAccessInformation = 22;\n        public static final int TokenVirtualizationAllowed = 23;\n        public static final int TokenVirtualizationEnabled = 24;\n        public static final int TokenIntegrityLevel = 25;\n        public static final int TokenUIAccess = 26;\n        public static final int TokenMandatoryPolicy = 27;\n        public static final int TokenLogonSid = 28;\n    }\n\n    /**\n     * The TOKEN_TYPE enumeration type contains values that differentiate\n     * between a primary token and an impersonation token.\n     */\n    public abstract class TOKEN_TYPE {\n        public static final int TokenPrimary = 1;\n        public static final int TokenImpersonation = 2;\n    }\n\n    /**\n     * The LUID_AND_ATTRIBUTES structure represents a locally unique identifier\n     * (LUID) and its attributes.\n     */\n    @FieldOrder({\"Luid\", \"Attributes\"})\n    public static class LUID_AND_ATTRIBUTES extends Structure {\n        /**\n         * Specifies an LUID value.\n         */\n        public LUID Luid;\n\n        /**\n         * Specifies attributes of the LUID. This value contains up to 32\n         * one-bit flags. Its meaning is dependent on the definition and use of\n         * the LUID.\n         */\n        public DWORD Attributes;\n\n        public LUID_AND_ATTRIBUTES() {\n            super();\n        }\n\n        public LUID_AND_ATTRIBUTES(LUID luid, DWORD attributes) {\n            this.Luid = luid;\n            this.Attributes = attributes;\n        }\n    }\n\n    /**\n     * The SID_AND_ATTRIBUTES structure represents a security identifier (SID)\n     * and its attributes. SIDs are used to uniquely identify users or groups.\n     */\n    @FieldOrder({\"Sid\", \"Attributes\"})\n    public static class SID_AND_ATTRIBUTES extends Structure {\n        /**\n         * Pointer to a SID structure.\n         */\n        public PSID.ByReference Sid;\n\n        /**\n         * Specifies attributes of the SID. This value contains up to 32 one-bit\n         * flags. Its meaning depends on the definition and use of the SID.\n         */\n        public int Attributes;\n\n        public SID_AND_ATTRIBUTES() {\n            super();\n        }\n\n        public SID_AND_ATTRIBUTES(Pointer memory) {\n            super(memory);\n        }\n    }\n\n    /**\n     * The TOKEN_OWNER structure contains the default owner security identifier\n     * (SID) that will be applied to newly created objects.\n     */\n    @FieldOrder({\"Owner\"})\n    public static class TOKEN_OWNER extends Structure {\n        /**\n         * Pointer to a SID structure representing a user who will become the\n         * owner of any objects created by a process using this access token.\n         * The SID must be one of the user or group SIDs already in the token.\n         */\n        public PSID.ByReference Owner; // PSID\n\n        public TOKEN_OWNER() {\n            super();\n        }\n\n        public TOKEN_OWNER(int size) {\n            super(new Memory(size));\n        }\n\n        public TOKEN_OWNER(Pointer memory) {\n            super(memory);\n            read();\n        }\n    }\n\n    @FieldOrder({\"sid\"})\n    public static class PSID extends Structure {\n        public static class ByReference extends PSID implements Structure.ByReference { }\n        public Pointer sid;\n\n        public PSID() {\n            super();\n        }\n\n        public PSID(byte[] data) {\n            super(new Memory(data.length));\n            getPointer().write(0, data, 0, data.length);\n            read();\n        }\n\n        public PSID(int size) {\n            super(new Memory(size));\n        }\n\n        public PSID(Pointer memory) {\n            super(memory);\n            read();\n        }\n\n        public byte[] getBytes() {\n            int len = Advapi32.INSTANCE.GetLengthSid(this);\n            return getPointer().getByteArray(0, len);\n        }\n\n        public String getSidString() {\n            return Advapi32Util.convertSidToStringSid(this);\n        }\n    }\n\n    public static class PSIDByReference extends ByReference {\n        public PSIDByReference() {\n            this(null);\n        }\n\n        public PSIDByReference(PSID h) {\n            super(Native.POINTER_SIZE);\n            setValue(h);\n        }\n\n        public void setValue(PSID h) {\n            getPointer().setPointer(0, h != null ? h.getPointer() : null);\n        }\n\n        public PSID getValue() {\n            Pointer p = getPointer().getPointer(0);\n            if (p == null) {\n                return null;\n            }\n            else {\n                return new PSID(p);\n            }\n        }\n    }\n\n    /**\n     * The TOKEN_USER structure identifies the user associated with an access\n     * token.\n     */\n    @FieldOrder({\"User\"})\n    public static class TOKEN_USER extends Structure {\n        /**\n         * Specifies a SID_AND_ATTRIBUTES structure representing the user\n         * associated with the access token. There are currently no attributes\n         * defined for user security identifiers (SIDs).\n         */\n        public SID_AND_ATTRIBUTES User;\n\n        public TOKEN_USER() {\n            super();\n        }\n\n        public TOKEN_USER(Pointer memory) {\n            super(memory);\n            read();\n        }\n\n        public TOKEN_USER(int size) {\n            super(new Memory(size));\n        }\n    }\n\n    /**\n     * The TOKEN_PRIMARY_GROUP structure specifies a group security identifier (SID)\n     * for an access token.\n     */\n    @FieldOrder({ \"PrimaryGroup\" })\n    public static class TOKEN_PRIMARY_GROUP extends Structure {\n        /**\n         * A pointer to a SID structure representing a group that will become the\n         * primary group of any objects created by a process using this access token.\n         * The SID must be one of the group SIDs already in the token.\n         */\n        public PSID.ByReference PrimaryGroup;\n\n        public TOKEN_PRIMARY_GROUP() {\n            super();\n        }\n\n        public TOKEN_PRIMARY_GROUP(Pointer memory) {\n            super(memory);\n            read();\n        }\n\n        public TOKEN_PRIMARY_GROUP(int size) {\n            super(new Memory(size));\n        }\n    }\n\n    /**\n     * The TOKEN_GROUPS structure contains information about the group security\n     * identifiers (SIDs) in an access token.\n     */\n    @FieldOrder({\"GroupCount\", \"Group0\"})\n    public static class TOKEN_GROUPS extends Structure {\n        /**\n         * Specifies the number of groups in the access token.\n         */\n        public int GroupCount;\n        public SID_AND_ATTRIBUTES Group0;\n\n        public TOKEN_GROUPS() {\n            super();\n        }\n\n        public TOKEN_GROUPS(Pointer memory) {\n            super(memory);\n            read();\n        }\n\n        public TOKEN_GROUPS(int size) {\n            super(new Memory(size));\n        }\n\n        /**\n         * Specifies an array of SID_AND_ATTRIBUTES structures that contain a\n         * set of SIDs and corresponding attributes.\n         * @return attributes\n         */\n        public SID_AND_ATTRIBUTES[] getGroups() {\n            return (SID_AND_ATTRIBUTES[]) Group0.toArray(GroupCount);\n        }\n    }\n\n    /**\n     * Specifies a set of privileges. <br>\n     * It is also used to indicate which, if any, privileges are held by a user or group requesting access to an object.\n     */\n    @FieldOrder({\"PrivilegeCount\", \"Control\", \"Privileges\"})\n    public static class PRIVILEGE_SET extends Structure {\n        public DWORD PrivilegeCount;\n        public DWORD Control;\n        public LUID_AND_ATTRIBUTES Privileges[];\n\n        public PRIVILEGE_SET() {\n            this(0);\n        }\n        /**\n         * @param nbOfPrivileges\n         *            Desired size of the Privileges array\n         */\n        public PRIVILEGE_SET(int nbOfPrivileges) {\n            PrivilegeCount = new DWORD(nbOfPrivileges);\n            if(nbOfPrivileges > 0) {\n                Privileges = new LUID_AND_ATTRIBUTES[nbOfPrivileges];\n            }\n        }\n\n        /** Initialize a TOKEN_PRIVILEGES instance from initialized memory.\n         * @param p base address\n         */\n        public PRIVILEGE_SET(Pointer p) {\n            super(p);\n            final int count = p.getInt(0);\n            PrivilegeCount = new DWORD(count);\n            if(count > 0) {\n                Privileges = new LUID_AND_ATTRIBUTES[count];\n            }\n            read();\n        }\n    }\n\n    /**\n     * The TOKEN_PRIVILEGES structure contains information about a set of\n     * privileges for an access token.\n     */\n    @FieldOrder({\"PrivilegeCount\", \"Privileges\"})\n    public static class TOKEN_PRIVILEGES extends Structure {\n        /**\n         * This must be set to the number of entries in the Privileges array.\n         */\n        public DWORD PrivilegeCount;\n\n        /**\n         * Specifies an array of LUID_AND_ATTRIBUTES structures. Each structure\n         * contains the LUID and attributes of a privilege.\n         */\n        public LUID_AND_ATTRIBUTES Privileges[];\n\n        /** Creates an empty instance with no privileges. */\n        public TOKEN_PRIVILEGES() {\n            this(0);\n        }\n        /**\n         * @param nbOfPrivileges\n         *            Desired size of the Privileges array\n         */\n        public TOKEN_PRIVILEGES(int nbOfPrivileges) {\n            PrivilegeCount = new DWORD(nbOfPrivileges);\n            Privileges = new LUID_AND_ATTRIBUTES[nbOfPrivileges];\n        }\n\n        /** Initialize a TOKEN_PRIVILEGES instance from initialized memory.\n         * @param p base address\n         */\n        public TOKEN_PRIVILEGES(Pointer p) {\n            super(p);\n            int count = p.getInt(0);\n            PrivilegeCount = new DWORD(count);\n            Privileges = new LUID_AND_ATTRIBUTES[count];\n            read();\n        }\n    }\n\n    /**\n     * The SID_NAME_USE enumeration type contains values that specify the type\n     * of a security identifier (SID).\n     */\n    public abstract class SID_NAME_USE {\n        /**\n         * Indicates a user SID.\n         */\n        public static final int SidTypeUser = 1;\n\n        /**\n         * Indicates a group SID.\n         */\n        public static final int SidTypeGroup = 2;\n\n        /**\n         * Indicates a domain SID.\n         */\n        public static final int SidTypeDomain = 3;\n\n        /**\n         * Indicates an alias SID.\n         */\n        public static final int SidTypeAlias = 4;\n\n        /**\n         * Indicates a SID for a well-known group.\n         */\n        public static final int SidTypeWellKnownGroup = 5;\n\n        /**\n         * Indicates a SID for a deleted account.\n         */\n        public static final int SidTypeDeletedAccount = 6;\n\n        /**\n         * Indicates an invalid SID.\n         */\n        public static final int SidTypeInvalid = 7;\n\n        /**\n         * Indicates an unknown SID type.\n         */\n        public static final int SidTypeUnknown = 8;\n\n        /**\n         * Indicates a SID for a computer.\n         */\n        public static final int SidTypeComputer = 9;\n\n        /**\n         * ?\n         */\n        public static final int SidTypeLabel = 10;\n    }\n\n    /* File access rights */\n    int FILE_READ_DATA = 0x00000001;\n    int FILE_LIST_DIRECTORY = 0x00000001;\n    int FILE_WRITE_DATA = 0x00000002;\n    int FILE_ADD_FILE = 0x00000002;\n    int FILE_APPEND_DATA = 0x00000004;\n    int FILE_ADD_SUBDIRECTORY = 0x00000004;\n    int FILE_CREATE_PIPE_INSTANCE = 0x00000004;\n    int FILE_READ_EA = 0x00000008;\n    int FILE_WRITE_EA = 0x00000010;\n    int FILE_EXECUTE = 0x00000020;\n    int FILE_TRAVERSE = 0x00000020;\n    int FILE_DELETE_CHILD = 0x00000040;\n    int FILE_READ_ATTRIBUTES = 0x00000080;\n    int FILE_WRITE_ATTRIBUTES = 0x00000100;\n\n    int FILE_ALL_ACCESS = STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x000001FF;\n\n    int FILE_GENERIC_READ = STANDARD_RIGHTS_READ | SYNCHRONIZE | FILE_READ_DATA\n            | FILE_READ_ATTRIBUTES | FILE_READ_EA;\n\n    int FILE_GENERIC_WRITE = STANDARD_RIGHTS_WRITE | SYNCHRONIZE\n            | FILE_WRITE_DATA | FILE_WRITE_ATTRIBUTES | FILE_WRITE_EA\n            | FILE_APPEND_DATA;\n\n    int FILE_GENERIC_EXECUTE = STANDARD_RIGHTS_EXECUTE | SYNCHRONIZE\n            | FILE_READ_ATTRIBUTES | FILE_EXECUTE;\n\n    int CREATE_NEW = 1;\n    int CREATE_ALWAYS = 2;\n    int OPEN_EXISTING = 3;\n    int OPEN_ALWAYS = 4;\n    int TRUNCATE_EXISTING = 5;\n\n    int FILE_FLAG_WRITE_THROUGH = 0x80000000;\n    int FILE_FLAG_OVERLAPPED = 0x40000000;\n    int FILE_FLAG_NO_BUFFERING = 0x20000000;\n    int FILE_FLAG_RANDOM_ACCESS = 0x10000000;\n    int FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000;\n    int FILE_FLAG_DELETE_ON_CLOSE = 0x04000000;\n    int FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;\n    int FILE_FLAG_POSIX_SEMANTICS = 0x01000000;\n    int FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;\n    int FILE_FLAG_OPEN_NO_RECALL = 0x00100000;\n\n    //\n    // These are the generic rights.\n    //\n\n    int GENERIC_READ = 0x80000000;\n    int GENERIC_WRITE = 0x40000000;\n    int GENERIC_EXECUTE = 0x20000000;\n    int GENERIC_ALL = 0x10000000;\n\n    //\n    // AccessSystemAcl access type\n    //\n\n    int ACCESS_SYSTEM_SECURITY             = 0x01000000;\n\n    /**\n     * Pages in the region become guard pages. <br>\n     * Any attempt to access a guard page causes the system to raise a\n     * STATUS_GUARD_PAGE_VIOLATION exception and turn off the guard page status.\n     * <br>\n     * Guard pages thus act as a one-time access alarm. <br>\n     * For more information, see Creating Guard Pages. <br>\n     * When an access attempt leads the system to turn off guard page status,\n     * the underlying page protection takes over.<br>\n     * If a guard page exception occurs during a system service, the service\n     * typically returns a failure status indicator. <br>\n     * This value cannot be used with PAGE_NOACCESS. This flag is not supported\n     * by the CreateFileMapping function.\n     *\n     * @see <a href=\n     *      \"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\">\n     *      MSDN</a>\n     */\n    int PAGE_GUARD                         = 0x100;\n\n    /**\n     * Disables all access to the committed region of pages.<br>\n     * An attempt to read from, write to, or execute the committed region\n     * results in an access violation.<br>\n     * This flag is not supported by the CreateFileMapping function.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\">MSDN</a>\n     */\n    int PAGE_NOACCESS                      = 0x01;\n\n    /**\n     * Enables read-only access to the committed region of pages.<br>\n     * An attempt to write to the committed region results in an access\n     * violation. <br>\n     * If Data Execution Prevention is enabled, an attempt to execute code in\n     * the committed region results in an access violation.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\">MSDN</a>\n     */\n    int PAGE_READONLY                      = 0x02;\n\n    /**\n     * Enables read-only or read/write access to the committed region of pages. <br>\n     * If Data Execution Prevention is enabled, attempting to execute code in\n     * the committed region results in an access violation.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\">MSDN</a>\n     */\n    int PAGE_READWRITE                     = 0x04;\n\n    /**\n     * Enables read-only or copy-on-write access to a mapped view of a file\n     * mapping object. An attempt to write to a committed copy-on-write page\n     * results in a private copy of the page being made for the process. The\n     * private page is marked as PAGE_READWRITE, and the change is written to\n     * the new page. If Data Execution Prevention is enabled, attempting to\n     * execute code in the committed region results in an access violation.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\"> MSDN</a>\n     */\n    int PAGE_WRITECOPY = 0x08;\n\n    /**\n     * Enables execute access to the committed region of pages. An attempt to\n     * write to the committed region results in an access violation. This flag\n     * is not supported by the CreateFileMapping function.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\">MSDN</a>\n     */\n    int PAGE_EXECUTE                       = 0x10;\n\n    /**\n     * Enables execute or read-only access to the committed region of pages. An\n     * attempt to write to the committed region results in an access violation.\n     * Windows Server 2003 and Windows XP: This attribute is not supported by\n     * the CreateFileMapping function until Windows XP with SP2 and Windows\n     * Server 2003 with SP1.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\">MSDN</a>\n     */\n    int PAGE_EXECUTE_READ                  = 0x20;\n\n    /**\n     * Enables execute, read-only, or read/write access to the committed region\n     * of pages. Windows Server 2003 and Windows XP: This attribute is not\n     * supported by the CreateFileMapping function until Windows XP with SP2 and\n     * Windows Server 2003 with SP1.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx\">MSDN</a>\n     */\n    int PAGE_EXECUTE_READWRITE             = 0x40;\n\n    int SECTION_QUERY = 0x0001;\n    int SECTION_MAP_WRITE = 0x0002;\n    int SECTION_MAP_READ = 0x0004;\n    int SECTION_MAP_EXECUTE = 0x0008;\n    int SECTION_EXTEND_SIZE = 0x0010;\n\n    int FILE_SHARE_READ = 0x00000001;\n    int FILE_SHARE_WRITE = 0x00000002;\n    int FILE_SHARE_DELETE = 0x00000004;\n    int FILE_TYPE_CHAR = 0x0002;\n    int FILE_TYPE_DISK = 0x0001;\n    int FILE_TYPE_PIPE = 0x0003;\n    int FILE_TYPE_REMOTE = 0x8000;\n    int FILE_TYPE_UNKNOWN = 0x0000;\n    int FILE_ATTRIBUTE_READONLY = 0x00000001;\n    int FILE_ATTRIBUTE_HIDDEN = 0x00000002;\n    int FILE_ATTRIBUTE_SYSTEM = 0x00000004;\n    int FILE_ATTRIBUTE_DIRECTORY = 0x00000010;\n    int FILE_ATTRIBUTE_ARCHIVE = 0x00000020;\n    int FILE_ATTRIBUTE_DEVICE = 0x00000040;\n    int FILE_ATTRIBUTE_NORMAL = 0x00000080;\n    int FILE_ATTRIBUTE_TEMPORARY = 0x00000100;\n    int FILE_ATTRIBUTE_SPARSE_FILE = 0x00000200;\n    int FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400;\n    int FILE_ATTRIBUTE_COMPRESSED = 0x00000800;\n    int FILE_ATTRIBUTE_OFFLINE = 0x00001000;\n    int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000;\n    int FILE_ATTRIBUTE_ENCRYPTED = 0x00004000;\n    int FILE_ATTRIBUTE_VIRTUAL = 0x00010000;\n    int FILE_NOTIFY_CHANGE_FILE_NAME = 0x00000001;\n    int FILE_NOTIFY_CHANGE_DIR_NAME = 0x00000002;\n    int FILE_NOTIFY_CHANGE_NAME = 0x00000003;\n    int FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x00000004;\n    int FILE_NOTIFY_CHANGE_SIZE = 0x00000008;\n    int FILE_NOTIFY_CHANGE_LAST_WRITE = 0x00000010;\n    int FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x00000020;\n    int FILE_NOTIFY_CHANGE_CREATION = 0x00000040;\n    int FILE_NOTIFY_CHANGE_SECURITY = 0x00000100;\n    int FILE_ACTION_ADDED = 0x00000001;\n    int FILE_ACTION_REMOVED = 0x00000002;\n    int FILE_ACTION_MODIFIED = 0x00000003;\n    int FILE_ACTION_RENAMED_OLD_NAME = 0x00000004;\n    int FILE_ACTION_RENAMED_NEW_NAME = 0x00000005;\n    int FILE_CASE_SENSITIVE_SEARCH = 0x00000001;\n    int FILE_CASE_PRESERVED_NAMES = 0x00000002;\n    int FILE_UNICODE_ON_DISK = 0x00000004;\n    int FILE_PERSISTENT_ACLS = 0x00000008;\n    int FILE_FILE_COMPRESSION = 0x00000010;\n    int FILE_VOLUME_QUOTAS = 0x00000020;\n    int FILE_SUPPORTS_SPARSE_FILES = 0x00000040;\n    int FILE_SUPPORTS_REPARSE_POINTS = 0x00000080;\n    int FILE_SUPPORTS_REMOTE_STORAGE = 0x00000100;\n    int FILE_VOLUME_IS_COMPRESSED = 0x00008000;\n    int FILE_SUPPORTS_OBJECT_IDS = 0x00010000;\n    int FILE_SUPPORTS_ENCRYPTION = 0x00020000;\n    int FILE_NAMED_STREAMS = 0x00040000;\n    int FILE_READ_ONLY_VOLUME = 0x00080000;\n    int FILE_SEQUENTIAL_WRITE_ONCE = 0x00100000;\n    int FILE_SUPPORTS_TRANSACTIONS = 0x00200000;\n    // NOTE: These values are not supported until Windows Server 2008 R2 and Windows 7\n    int FILE_SUPPORTS_HARD_LINKS = 0x00400000;\n    int FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 0x00800000;\n    int FILE_SUPPORTS_OPEN_BY_FILE_ID = 0x01000000;\n    int FILE_SUPPORTS_USN_JOURNAL = 0x02000000;\n\n    // Reparse point tags\n    int IO_REPARSE_TAG_MOUNT_POINT              = 0xA0000003;\n    int IO_REPARSE_TAG_HSM                      = 0xC0000004;\n    int IO_REPARSE_TAG_HSM2                     = 0x80000006;\n    int IO_REPARSE_TAG_SIS                      = 0x80000007;\n    int IO_REPARSE_TAG_WIM                      = 0x80000008;\n    int IO_REPARSE_TAG_CSV                      = 0x80000009;\n    int IO_REPARSE_TAG_DFS                      = 0x8000000A;\n    int IO_REPARSE_TAG_SYMLINK                  = 0xA000000C;\n    int IO_REPARSE_TAG_DFSR                     = 0x80000012;\n\n    // The controllable aspects of the DefineDosDevice function.\n    // see https://msdn.microsoft.com/en-us/library/windows/desktop/aa363904(v=vs.85).aspx\n    int DDD_RAW_TARGET_PATH = 0x00000001;\n    int DDD_REMOVE_DEFINITION = 0x00000002;\n    int DDD_EXACT_MATCH_ON_REMOVE = 0x00000004;\n    int DDD_NO_BROADCAST_SYSTEM = 0x00000008;\n\n    int COMPRESSION_FORMAT_NONE          = 0x0000;\n    int COMPRESSION_FORMAT_DEFAULT       = 0x0001;\n    int COMPRESSION_FORMAT_LZNT1         = 0x0002;\n    int COMPRESSION_FORMAT_XPRESS        = 0x0003;\n    int COMPRESSION_FORMAT_XPRESS_HUFF   = 0x0004;\n    int COMPRESSION_ENGINE_STANDARD      = 0x0000;\n    int COMPRESSION_ENGINE_MAXIMUM       = 0x0100;\n    int COMPRESSION_ENGINE_HIBER         = 0x0200;\n\n    /**\n     * The FILE_NOTIFY_INFORMATION structure describes the changes found by the\n     * ReadDirectoryChangesW function.\n     *\n     * This structure is non-trivial since it is a pattern stamped into a large\n     * block of result memory rather than something that stands alone or is used\n     * for input.\n     */\n    @FieldOrder({\"NextEntryOffset\", \"Action\", \"FileNameLength\", \"FileName\"})\n    public static class FILE_NOTIFY_INFORMATION extends Structure {\n        public int NextEntryOffset;\n        public int Action;\n        public int FileNameLength;\n        // filename is not nul-terminated, so we can't use a String/WString\n        public char[] FileName = new char[1];\n\n        private FILE_NOTIFY_INFORMATION() {\n            super();\n        }\n\n        public FILE_NOTIFY_INFORMATION(int size) {\n            if (size < size()) {\n                throw new IllegalArgumentException(\"Size must greater than \"\n                        + size() + \", requested \" + size);\n            }\n            allocateMemory(size);\n        }\n\n        /**\n         * WARNING: this filename may be either the short or long form of the\n         * filename.\n         * @return filename\n         */\n        public String getFilename() {\n            return new String(FileName, 0, FileNameLength / 2);\n        }\n\n        @Override\n        public void read() {\n            // avoid reading filename until we know how long it is\n            FileName = new char[0];\n            super.read();\n            FileName = getPointer().getCharArray(12, FileNameLength / 2);\n        }\n\n        public FILE_NOTIFY_INFORMATION next() {\n            if (NextEntryOffset == 0) {\n                return null;\n            }\n            FILE_NOTIFY_INFORMATION next = new FILE_NOTIFY_INFORMATION();\n            next.useMemory(getPointer(), NextEntryOffset);\n            next.read();\n            return next;\n        }\n    }\n\n    /**\n     * Registry options.\n     */\n    int KEY_QUERY_VALUE = 0x0001;\n    int KEY_SET_VALUE = 0x0002;\n    int KEY_CREATE_SUB_KEY = 0x0004;\n    int KEY_ENUMERATE_SUB_KEYS = 0x0008;\n    int KEY_NOTIFY = 0x0010;\n    int KEY_CREATE_LINK = 0x0020;\n    int KEY_WOW64_32KEY = 0x0200;\n    int KEY_WOW64_64KEY = 0x0100;\n    int KEY_WOW64_RES = 0x0300;\n\n    int KEY_READ = STANDARD_RIGHTS_READ | KEY_QUERY_VALUE\n            | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY & (~SYNCHRONIZE);\n\n    int KEY_WRITE = STANDARD_RIGHTS_WRITE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY\n            & (~SYNCHRONIZE);\n\n    int KEY_EXECUTE = KEY_READ & (~SYNCHRONIZE);\n\n    int KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL | KEY_QUERY_VALUE | KEY_SET_VALUE\n            | KEY_CREATE_SUB_KEY | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY\n            | KEY_CREATE_LINK) & (~SYNCHRONIZE));\n\n    //\n    // Open/Create Options\n    //\n\n    /**\n     * Parameter is reserved.\n     */\n    int REG_OPTION_RESERVED = 0x00000000;\n\n    /**\n     * Key is preserved when system is rebooted.\n     */\n    int REG_OPTION_NON_VOLATILE = 0x00000000;\n\n    /**\n     * Key is not preserved when system is rebooted.\n     */\n    int REG_OPTION_VOLATILE = 0x00000001;\n\n    /**\n     * Created key is a symbolic link.\n     */\n    int REG_OPTION_CREATE_LINK = 0x00000002;\n\n    /**\n     * Open for backup or restore special access rules privilege required.\n     */\n    int REG_OPTION_BACKUP_RESTORE = 0x00000004;\n\n    /**\n     * Open symbolic link.\n     */\n    int REG_OPTION_OPEN_LINK = 0x00000008;\n\n    int REG_LEGAL_OPTION = REG_OPTION_RESERVED | REG_OPTION_NON_VOLATILE\n            | REG_OPTION_VOLATILE | REG_OPTION_CREATE_LINK\n            | REG_OPTION_BACKUP_RESTORE | REG_OPTION_OPEN_LINK;\n\n    //\n    // Key creation/open disposition\n    //\n\n    /**\n     * New Registry Key created.\n     */\n    int REG_CREATED_NEW_KEY = 0x00000001;\n\n    /**\n     * Existing Key opened.\n     */\n    int REG_OPENED_EXISTING_KEY = 0x00000002;\n\n    int REG_STANDARD_FORMAT = 1;\n    int REG_LATEST_FORMAT = 2;\n    int REG_NO_COMPRESSION = 4;\n\n    //\n    // Key restore & hive load flags\n    //\n\n    /**\n     * Restore whole hive volatile.\n     */\n    int REG_WHOLE_HIVE_VOLATILE = 0x00000001;\n\n    /**\n     * Unwind changes to last flush.\n     */\n    int REG_REFRESH_HIVE = 0x00000002;\n\n    /**\n     * Never lazy flush this hive.\n     */\n    int REG_NO_LAZY_FLUSH = 0x00000004;\n\n    /**\n     * Force the restore process even when we have open handles on subkeys.\n     */\n    int REG_FORCE_RESTORE = 0x00000008;\n\n    /**\n     * Loads the hive visible to the calling process.\n     */\n    int REG_APP_HIVE = 0x00000010;\n\n    /**\n     * Hive cannot be mounted by any other process while in use.\n     */\n    int REG_PROCESS_PRIVATE = 0x00000020;\n\n    /**\n     * Starts Hive Journal.\n     */\n    int REG_START_JOURNAL = 0x00000040;\n\n    /**\n     * Grow hive file in exact 4k increments.\n     */\n    int REG_HIVE_EXACT_FILE_GROWTH = 0x00000080;\n\n    /**\n     * No RM is started for this hive = no transactions.\n     */\n    int REG_HIVE_NO_RM = 0x00000100;\n\n    /**\n     * Legacy single logging is used for this hive.\n     */\n    int REG_HIVE_SINGLE_LOG = 0x00000200;\n\n    //\n    // Unload Flags\n    //\n\n    int REG_FORCE_UNLOAD = 1;\n\n    //\n    // Notify filter values\n    //\n\n    int REG_NOTIFY_CHANGE_NAME = 0x00000001;\n    int REG_NOTIFY_CHANGE_ATTRIBUTES = 0x00000002;\n    int REG_NOTIFY_CHANGE_LAST_SET = 0x00000004;\n    int REG_NOTIFY_CHANGE_SECURITY = 0x00000008;\n\n    int REG_LEGAL_CHANGE_FILTER = REG_NOTIFY_CHANGE_NAME\n            | REG_NOTIFY_CHANGE_ATTRIBUTES | REG_NOTIFY_CHANGE_LAST_SET\n            | REG_NOTIFY_CHANGE_SECURITY;\n\n    //\n    // Predefined Value Types.\n    //\n\n    /**\n     * No value type.\n     */\n    int REG_NONE = 0;\n\n    /**\n     * Unicode null-terminated string.\n     */\n    int REG_SZ = 1;\n\n    /**\n     * Unicode null-terminated string with environment variable references.\n     */\n    int REG_EXPAND_SZ = 2;\n\n    /**\n     * Free-formed binary.\n     */\n    int REG_BINARY = 3;\n\n    /**\n     * 32-bit number.\n     */\n    int REG_DWORD = 4;\n\n    /**\n     * 32-bit number, same as REG_DWORD.\n     */\n    int REG_DWORD_LITTLE_ENDIAN = 4;\n\n    /**\n     * 32-bit number.\n     */\n    int REG_DWORD_BIG_ENDIAN = 5;\n\n    /**\n     * Symbolic link (unicode).\n     */\n    int REG_LINK = 6;\n\n    /**\n     * Multiple unicode strings.\n     */\n    int REG_MULTI_SZ = 7;\n\n    /**\n     * Resource list in the resource map.\n     */\n    int REG_RESOURCE_LIST = 8;\n\n    /**\n     * Resource list in the hardware description.\n     */\n    int REG_FULL_RESOURCE_DESCRIPTOR = 9;\n\n    /**\n     *\n     */\n    int REG_RESOURCE_REQUIREMENTS_LIST = 10;\n\n    /**\n     * 64-bit number.\n     */\n    int REG_QWORD = 11;\n\n    /**\n     * 64-bit number, same as REG_QWORD.\n     */\n    int REG_QWORD_LITTLE_ENDIAN = 11;\n\n    /**\n     * A 64-bit value that is guaranteed to be unique on the operating system\n     * that generated it until the system is restarted.\n     */\n    @FieldOrder({\"LowPart\", \"HighPart\"})\n    public static class LUID extends Structure {\n        public int LowPart;\n        public int HighPart;\n    }\n\n    /**\n     * A 64-bit integer;\n     */\n    @FieldOrder({\"u\"})\n    public static class LARGE_INTEGER extends Structure implements Comparable<LARGE_INTEGER> {\n        public static class ByReference extends LARGE_INTEGER implements\n                Structure.ByReference {\n        }\n\n        @FieldOrder({\"LowPart\", \"HighPart\"})\n        public static class LowHigh extends Structure {\n            public DWORD LowPart;\n            public DWORD HighPart;\n\n            public LowHigh() {\n                super();\n            }\n\n            public LowHigh(long value) {\n                this(new DWORD(value & 0xFFFFFFFFL),  new DWORD((value >> 32) & 0xFFFFFFFFL));\n            }\n\n            public LowHigh(DWORD low, DWORD high) {\n                LowPart = low;\n                HighPart = high;\n            }\n\n            public long longValue() {\n                long loValue = LowPart.longValue();\n                long hiValue = HighPart.longValue();\n                return ((hiValue << 32) & 0xFFFFFFFF00000000L) | (loValue & 0xFFFFFFFFL);\n            }\n\n            @Override\n            public String toString() {\n                if ((LowPart == null) || (HighPart == null)) {\n                    return \"null\";\n                } else {\n                    return Long.toString(longValue());\n                }\n            }\n        }\n\n        public static class UNION extends Union {\n            public LowHigh lh;\n            public long value;\n\n            public UNION() {\n                super();\n            }\n\n            public UNION(long value) {\n                this.value = value;\n                this.lh = new LowHigh(value);\n            }\n\n            @Override\n            public void read() {\n                readField(\"lh\");\n                readField(\"value\");\n            }\n\n            public long longValue() {\n                return value;\n            }\n\n            @Override\n            public String toString() {\n                return Long.toString(longValue());\n            }\n        }\n\n        public UNION u;\n\n        public LARGE_INTEGER() {\n            super();\n        }\n\n        public LARGE_INTEGER(long value) {\n            this.u = new UNION(value);\n        }\n\n        /**\n         * Low DWORD.\n         *\n         * @return Low DWORD value\n         */\n        public DWORD getLow() {\n            return u.lh.LowPart;\n        }\n\n        /**\n         * High DWORD.\n         *\n         * @return High DWORD value\n         */\n        public DWORD getHigh() {\n            return u.lh.HighPart;\n        }\n\n        /**\n         * 64-bit value.\n         *\n         * @return The 64-bit value.\n         */\n        public long getValue() {\n            return u.value;\n        }\n\n        @Override\n        public int compareTo(LARGE_INTEGER other) {\n            return compare(this, other);\n        }\n\n        @Override\n        public String toString() {\n            return (u == null) ? \"null\" : Long.toString(getValue());\n        }\n\n        /**\n         * Compares 2 LARGE_INTEGER values -  - <B>Note:</B> a {@code null}\n         * value is considered <U>greater</U> than any non-{@code null} one\n         * (i.e., {@code null} values are &quot;pushed&quot; to the end\n         * of a sorted array / list of values)\n         *\n         * @param v1 The 1st value\n         * @param v2 The 2nd value\n         * @return 0 if values are equal (including if <U>both</U> are {@code null},\n         * negative if 1st value less than 2nd one, positive otherwise. <B>Note:</B>\n         * the comparison uses the {@link #getValue()}.\n         * @see IntegerType#compare(long, long)\n         */\n        public static int compare(LARGE_INTEGER v1, LARGE_INTEGER v2) {\n            if (v1 == v2) {\n                return 0;\n            } else if (v1 == null) {\n                return 1;   // v2 cannot be null or v1 == v2 would hold\n            } else if (v2 == null) {\n                return (-1);\n            } else {\n                return IntegerType.compare(v1.getValue(), v2.getValue());\n            }\n        }\n\n        /**\n         * Compares a LARGE_INTEGER value with a {@code long} one. <B>Note:</B> if\n         * the LARGE_INTEGER value is {@code null} then it is consider <U>greater</U>\n         * than any {@code long} value.\n         *\n         * @param v1 The {@link LARGE_INTEGER} value\n         * @param v2 The {@code long} value\n         * @return 0 if values are equal, negative if 1st value less than 2nd one,\n         * positive otherwise. <B>Note:</B> the comparison uses the {@link #getValue()}.\n         * @see IntegerType#compare(long, long)\n         */\n        public static int compare(LARGE_INTEGER v1, long v2) {\n            if (v1 == null) {\n                return 1;\n            } else {\n                return IntegerType.compare(v1.getValue(), v2);\n            }\n        }\n    }\n\n    /**\n     * Handle to an object.\n     */\n    public static class HANDLE extends PointerType {\n        private boolean immutable;\n\n        public HANDLE() {\n        }\n\n        public HANDLE(Pointer p) {\n            setPointer(p);\n            immutable = true;\n        }\n\n        /** Override to the appropriate object for INVALID_HANDLE_VALUE. */\n        @Override\n        public Object fromNative(Object nativeValue, FromNativeContext context) {\n            Object o = super.fromNative(nativeValue, context);\n            if (WinBase.INVALID_HANDLE_VALUE.equals(o)) {\n                return WinBase.INVALID_HANDLE_VALUE;\n            }\n            return o;\n        }\n\n        @Override\n        public void setPointer(Pointer p) {\n            if (immutable) {\n                throw new UnsupportedOperationException(\"immutable reference\");\n            }\n\n            super.setPointer(p);\n        }\n\n        @Override\n        public String toString() {\n            return String.valueOf(getPointer());\n        }\n    }\n\n    /**\n     * LPHANDLE\n     */\n    public static class HANDLEByReference extends ByReference {\n        public HANDLEByReference() {\n            this(null);\n        }\n\n        public HANDLEByReference(HANDLE h) {\n            super(Native.POINTER_SIZE);\n            setValue(h);\n        }\n\n        public void setValue(HANDLE h) {\n            getPointer().setPointer(0, h != null ? h.getPointer() : null);\n        }\n\n        public HANDLE getValue() {\n            Pointer p = getPointer().getPointer(0);\n            if (p == null) {\n                return null;\n            }\n            if (WinBase.INVALID_HANDLE_VALUE.getPointer().equals(p)) {\n                return WinBase.INVALID_HANDLE_VALUE;\n            }\n            HANDLE h = new HANDLE();\n            h.setPointer(p);\n            return h;\n        }\n    }\n\n    /**\n     * Return code used by interfaces. It is zero upon success and nonzero to\n     * represent an error code or status information.\n     */\n    class HRESULT extends NativeLong {\n        public HRESULT() {\n        }\n\n        public HRESULT(int value) {\n            super(value);\n        }\n    }\n\n    /**\n     * The WELL_KNOWN_SID_TYPE enumeration type is a list of commonly used\n     * security identifiers (SIDs). Programs can pass these values to the\n     * CreateWellKnownSid function to create a SID from this list.\n     */\n    public abstract class WELL_KNOWN_SID_TYPE {\n        /**\n         * Indicates a null SID.\n         */\n        public static final int WinNullSid = 0;\n\n        /**\n         * Indicates a SID that matches everyone.\n         */\n        public static final int WinWorldSid = 1;\n\n        /**\n         * Indicates a local SID.\n         */\n        public static final int WinLocalSid = 2;\n\n        /**\n         * Indicates a SID that matches the owner or creator of an object.\n         */\n        public static final int WinCreatorOwnerSid = 3;\n\n        /**\n         * Indicates a SID that matches the creator group of an object.\n         */\n        public static final int WinCreatorGroupSid = 4;\n\n        /**\n         * Indicates a creator owner server SID.\n         */\n        public static final int WinCreatorOwnerServerSid = 5;\n\n        /**\n         * Indicates a creator group server SID.\n         */\n        public static final int WinCreatorGroupServerSid = 6;\n\n        /**\n         * Indicates a SID for the Windows NT authority.\n         */\n        public static final int WinNtAuthoritySid = 7;\n\n        /**\n         * Indicates a SID for a dial-up account.\n         */\n        public static final int WinDialupSid = 8;\n\n        /**\n         * Indicates a SID for a network account. This SID is added to the\n         * process of a token when it logs on across a network. The\n         * corresponding logon type is LOGON32_LOGON_NETWORK.\n         */\n        public static final int WinNetworkSid = 9;\n\n        /**\n         * Indicates a SID for a batch process. This SID is added to the process\n         * of a token when it logs on as a batch job. The corresponding logon\n         * type is LOGON32_LOGON_BATCH.\n         */\n        public static final int WinBatchSid = 10;\n\n        /**\n         * Indicates a SID for an interactive account. This SID is added to the\n         * process of a token when it logs on interactively. The corresponding\n         * logon type is LOGON32_LOGON_INTERACTIVE.\n         */\n        public static final int WinInteractiveSid = 11;\n\n        /**\n         * Indicates a SID for a service. This SID is added to the process of a\n         * token when it logs on as a service. The corresponding logon type is\n         * LOGON32_LOGON_bSERVICE.\n         */\n        public static final int WinServiceSid = 12;\n\n        /**\n         * Indicates a SID for the anonymous account.\n         */\n        public static final int WinAnonymousSid = 13;\n\n        /**\n         * Indicates a proxy SID.\n         */\n        public static final int WinProxySid = 14;\n\n        /**\n         * Indicates a SID for an enterprise controller.\n         */\n        public static final int WinEnterpriseControllersSid = 15;\n\n        /**\n         * Indicates a SID for self.\n         */\n        public static final int WinSelfSid = 16;\n\n        /**\n         * Indicates a SID that matches any authenticated user.\n         */\n        public static final int WinAuthenticatedUserSid = 17;\n\n        /**\n         * Indicates a SID for restricted code.\n         */\n        public static final int WinRestrictedCodeSid = 18;\n\n        /**\n         * Indicates a SID that matches a terminal server account.\n         */\n        public static final int WinTerminalServerSid = 19;\n\n        /**\n         * Indicates a SID that matches remote logons.\n         */\n        public static final int WinRemoteLogonIdSid = 20;\n\n        /**\n         * Indicates a SID that matches logon IDs.\n         */\n        public static final int WinLogonIdsSid = 21;\n\n        /**\n         * Indicates a SID that matches the local system.\n         */\n        public static final int WinLocalSystemSid = 22;\n\n        /**\n         * Indicates a SID that matches a local service.\n         */\n        public static final int WinLocalServiceSid = 23;\n\n        /**\n         * Indicates a SID that matches a network service.\n         */\n        public static final int WinNetworkServiceSid = 24;\n\n        /**\n         * Indicates a SID that matches the domain account.\n         */\n        public static final int WinBuiltinDomainSid = 25;\n\n        /**\n         * Indicates a SID that matches the administrator account.\n         */\n        public static final int WinBuiltinAdministratorsSid = 26;\n\n        /**\n         * Indicates a SID that matches built-in user accounts.\n         */\n        public static final int WinBuiltinUsersSid = 27;\n\n        /**\n         * Indicates a SID that matches the guest account.\n         */\n        public static final int WinBuiltinGuestsSid = 28;\n\n        /**\n         * Indicates a SID that matches the power users group.\n         */\n        public static final int WinBuiltinPowerUsersSid = 29;\n\n        /**\n         * Indicates a SID that matches the account operators account.\n         */\n        public static final int WinBuiltinAccountOperatorsSid = 30;\n\n        /**\n         * Indicates a SID that matches the system operators group.\n         */\n        public static final int WinBuiltinSystemOperatorsSid = 31;\n\n        /**\n         * Indicates a SID that matches the print operators group.\n         */\n        public static final int WinBuiltinPrintOperatorsSid = 32;\n\n        /**\n         * Indicates a SID that matches the backup operators group.\n         */\n        public static final int WinBuiltinBackupOperatorsSid = 33;\n\n        /**\n         * Indicates a SID that matches the replicator account.\n         */\n        public static final int WinBuiltinReplicatorSid = 34;\n\n        /**\n         * Indicates a SID that matches pre-Windows 2000 compatible accounts.\n         */\n        public static final int WinBuiltinPreWindows2000CompatibleAccessSid = 35;\n\n        /**\n         * Indicates a SID that matches remote desktop users.\n         */\n        public static final int WinBuiltinRemoteDesktopUsersSid = 36;\n\n        /**\n         * Indicates a SID that matches the network operators group.\n         */\n        public static final int WinBuiltinNetworkConfigurationOperatorsSid = 37;\n\n        /**\n         * Indicates a SID that matches the account administrators group.\n         */\n        public static final int WinAccountAdministratorSid = 38;\n\n        /**\n         * Indicates a SID that matches the account guest group.\n         */\n        public static final int WinAccountGuestSid = 39;\n\n        /**\n         * Indicates a SID that matches account Kerberos target group.\n         */\n        public static final int WinAccountKrbtgtSid = 40;\n\n        /**\n         * Indicates a SID that matches the account domain administrator group.\n         */\n        public static final int WinAccountDomainAdminsSid = 41;\n\n        /**\n         * Indicates a SID that matches the account domain users group.\n         */\n        public static final int WinAccountDomainUsersSid = 42;\n\n        /**\n         * Indicates a SID that matches the account domain guests group.\n         */\n        public static final int WinAccountDomainGuestsSid = 43;\n\n        /**\n         * Indicates a SID that matches the account computer group.\n         */\n        public static final int WinAccountComputersSid = 44;\n\n        /**\n         * Indicates a SID that matches the account controller group.\n         */\n        public static final int WinAccountControllersSid = 45;\n\n        /**\n         * Indicates a SID that matches the certificate administrators group.\n         */\n        public static final int WinAccountCertAdminsSid = 46;\n\n        /**\n         * Indicates a SID that matches the schema administrators group.\n         */\n        public static final int WinAccountSchemaAdminsSid = 47;\n\n        /**\n         * Indicates a SID that matches the enterprise administrators group.\n         */\n        public static final int WinAccountEnterpriseAdminsSid = 48;\n\n        /**\n         * Indicates a SID that matches the policy administrators group.\n         */\n        public static final int WinAccountPolicyAdminsSid = 49;\n\n        /**\n         * Indicates a SID that matches the RAS and IAS server account.\n         */\n        public static final int WinAccountRasAndIasServersSid = 50;\n\n        /**\n         * Indicates a SID present when the Microsoft NTLM authentication\n         * package authenticated the client.\n         */\n        public static final int WinNTLMAuthenticationSid = 51;\n\n        /**\n         * Indicates a SID present when the Microsoft Digest authentication\n         * package authenticated the client.\n         */\n        public static final int WinDigestAuthenticationSid = 52;\n\n        /**\n         * Indicates a SID present when the Secure Channel (SSL/TLS)\n         * authentication package authenticated the client.\n         */\n        public static final int WinSChannelAuthenticationSid = 53;\n\n        /**\n         * Indicates a SID present when the user authenticated from within the\n         * forest or across a trust that does not have the selective\n         * authentication option enabled. If this SID is present, then\n         * WinOtherOrganizationSid cannot be present.\n         */\n        public static final int WinThisOrganizationSid = 54;\n\n        /**\n         * Indicates a SID present when the user authenticated across a forest\n         * with the selective authentication option enabled. If this SID is\n         * present, then WinThisOrganizationSid cannot be present.\n         */\n        public static final int WinOtherOrganizationSid = 55;\n\n        /**\n         * Indicates a SID that allows a user to create incoming forest trusts.\n         * It is added to the token of users who are a member of the Incoming\n         * Forest Trust Builders built-in group in the root domain of the\n         * forest.\n         */\n        public static final int WinBuiltinIncomingForestTrustBuildersSid = 56;\n\n        /**\n         * Indicates a SID that matches the performance monitor user group.\n         */\n        public static final int WinBuiltinPerfMonitoringUsersSid = 57;\n\n        /**\n         * Indicates a SID that matches the performance log user group.\n         */\n        public static final int WinBuiltinPerfLoggingUsersSid = 58;\n\n        /**\n         * Indicates a SID that matches the Windows Authorization Access group.\n         */\n        public static final int WinBuiltinAuthorizationAccessSid = 59;\n\n        /**\n         * Indicates a SID is present in a server that can issue Terminal Server\n         * licenses.\n         */\n        public static final int WinBuiltinTerminalServerLicenseServersSid = 60;\n\n        /**\n         *\n         */\n        public static final int WinBuiltinDCOMUsersSid = 61;\n\n        /**\n         *\n         */\n        public static final int WinBuiltinIUsersSid = 62;\n\n        /**\n         *\n         */\n        public static final int WinIUserSid = 63;\n\n        /**\n         *\n         */\n        public static final int WinBuiltinCryptoOperatorsSid = 64;\n\n        /**\n         *\n         */\n        public static final int WinUntrustedLabelSid = 65;\n\n        /**\n         *\n         */\n        public static final int WinLowLabelSid = 66;\n\n        /**\n         *\n         */\n        public static final int WinMediumLabelSid = 67;\n\n        /**\n         *\n         */\n        public static final int WinHighLabelSid = 68;\n\n        /**\n         *\n         */\n        public static final int WinSystemLabelSid = 69;\n\n        /**\n         *\n         */\n        public static final int WinWriteRestrictedCodeSid = 70;\n\n        /**\n         *\n         */\n        public static final int WinCreatorOwnerRightsSid = 71;\n\n        /**\n         *\n         */\n        public static final int WinCacheablePrincipalsGroupSid = 72;\n\n        /**\n         *\n         */\n        public static final int WinNonCacheablePrincipalsGroupSid = 73;\n\n        /**\n         *\n         */\n        public static final int WinEnterpriseReadonlyControllersSid = 74;\n\n        /**\n         * Indicates a SID that matches a read-only enterprise domain\n         * controller.\n         */\n        public static final int WinAccountReadonlyControllersSid = 75;\n\n        /**\n         * Indicates a SID that matches the built-in DCOM certification services\n         * access group.\n         */\n        public static final int WinBuiltinEventLogReadersGroup = 76;\n    }\n\n    /**\n     * Current SID revision level.\n     */\n    int SID_REVISION = 1;\n    int SID_MAX_SUB_AUTHORITIES = 15;\n    int SID_RECOMMENDED_SUB_AUTHORITIES = 1;\n\n    /**\n     * Maximum bytes used by a SID. (sizeof(SID) - sizeof(DWORD) +\n     * (SID_MAX_SUB_AUTHORITIES * sizeof(DWORD)))\n     */\n    int SECURITY_MAX_SID_SIZE = 68;\n\n    /**\n     * The OSVERSIONINFO data structure contains operating system version\n     * information. The information includes major and minor version numbers, a\n     * build number, a platform identifier, and descriptive text about the\n     * operating system. This structure is used with the GetVersionEx function.\n     */\n    @FieldOrder({\"dwOSVersionInfoSize\", \"dwMajorVersion\", \"dwMinorVersion\", \"dwBuildNumber\", \"dwPlatformId\", \"szCSDVersion\"})\n    public static class OSVERSIONINFO extends Structure {\n        /**\n         * Size of this data structure, in bytes. Set this member to\n         * sizeof(OSVERSIONINFO) before calling the GetVersionEx function.\n         */\n        public DWORD dwOSVersionInfoSize;\n\n        /**\n         * Major version number of the operating system.\n         */\n        public DWORD dwMajorVersion;\n\n        /**\n         * Minor version number of the operating system.\n         */\n        public DWORD dwMinorVersion;\n\n        /**\n         * Build number of the operating system.\n         */\n        public DWORD dwBuildNumber;\n\n        /**\n         * Operating system platform.\n         */\n        public DWORD dwPlatformId;\n\n        /**\n         * Pointer to a null-terminated string, such as \"Service Pack 3\", that\n         * indicates the latest Service Pack installed on the system.\n         */\n        public char szCSDVersion[];\n\n        public OSVERSIONINFO() {\n            szCSDVersion = new char[128];\n            dwOSVersionInfoSize = new DWORD(size()); // sizeof(OSVERSIONINFO)\n        }\n\n        public OSVERSIONINFO(Pointer memory) {\n            super(memory);\n            read();\n        }\n    }\n\n    /**\n     * Contains operating system version information. The information includes\n     * major and minor version numbers, a build number, a platform identifier,\n     * and information about product suites and the latest Service Pack\n     * installed on the system.\n     */\n    @FieldOrder({\"dwOSVersionInfoSize\",\n                \"dwMajorVersion\", \"dwMinorVersion\", \"dwBuildNumber\",\n                \"dwPlatformId\",\n                \"szCSDVersion\",\n                \"wServicePackMajor\", \"wServicePackMinor\",\n                \"wSuiteMask\", \"wProductType\", \"wReserved\"})\n    public static class OSVERSIONINFOEX extends Structure {\n        /**\n         * The size of this data structure, in bytes.\n         */\n        public DWORD dwOSVersionInfoSize;\n\n        /**\n         * The major version number of the operating system.\n         */\n        public DWORD dwMajorVersion;\n\n        /**\n         * The minor version number of the operating system.\n         */\n        public DWORD dwMinorVersion;\n\n        /**\n         * The build number of the operating system.\n         */\n        public DWORD dwBuildNumber;\n\n        /**\n         * The operating system platform. This member can be\n         * VER_PLATFORM_WIN32_NT.\n         */\n        public DWORD dwPlatformId;\n\n        /**\n         * A null-terminated string, such as \"Service Pack 3\", that indicates\n         * the latest Service Pack installed on the system. If no Service Pack\n         * has been installed, the string is empty.\n         */\n        public char szCSDVersion[];\n\n        /**\n         * The major version number of the latest Service Pack installed on the\n         * system. For example, for Service Pack 3, the major version number is\n         * 3. If no Service Pack has been installed, the value is zero.\n         */\n        public WORD wServicePackMajor;\n\n        /**\n         * The minor version number of the latest Service Pack installed on the\n         * system. For example, for Service Pack 3, the minor version number is\n         * 0.\n         */\n        public WORD wServicePackMinor;\n\n        /**\n         * A bit mask that identifies the product suites available on the\n         * system.\n         */\n        public WORD wSuiteMask;\n\n        /**\n         * Any additional information about the system.\n         */\n        public byte wProductType;\n\n        /**\n         * Reserved for future use.\n         */\n        public byte wReserved;\n\n        public OSVERSIONINFOEX() {\n            szCSDVersion = new char[128];\n            dwOSVersionInfoSize = new DWORD(size()); // sizeof(OSVERSIONINFOEX)\n        }\n\n        public OSVERSIONINFOEX(Pointer memory) {\n            super(memory);\n            read();\n        }\n\n        /**\n         * @return The major version number of the operating system.\n         */\n        public int getMajor() {\n            return dwMajorVersion.intValue();\n        }\n\n        /**\n         * @return The minor version number of the operating system.\n         */\n        public int getMinor() {\n            return dwMinorVersion.intValue();\n        }\n\n        /**\n         * @return The build number of the operating system.\n         */\n        public int getBuildNumber() {\n            return dwBuildNumber.intValue();\n        }\n\n        /**\n         * @return  The operating system platform. This member can be VER_PLATFORM_WIN32_NT.\n         */\n        public int getPlatformId() {\n            return dwPlatformId.intValue();\n        }\n\n        /**\n         * @return String, such as \"Service Pack 3\", that indicates the latest\n         *         Service Pack installed on the system.<br>\n         *         If no Service Pack has been installed, the string is empty.\n         */\n        public String getServicePack() {\n            return Native.toString(szCSDVersion);\n        }\n\n        /**\n         * @return A bit mask that identifies the product suites available on the system.\n         */\n        public int getSuiteMask() {\n            return wSuiteMask.intValue();\n        }\n\n        /**\n         * @return Any additional information about the system.\n         */\n        public byte getProductType() {\n            return wProductType;\n        }\n    }\n\n    int VER_EQUAL = 1;\n    int VER_GREATER = 2;\n    int VER_GREATER_EQUAL = 3;\n    int VER_LESS = 4;\n    int VER_LESS_EQUAL = 5;\n    int VER_AND = 6;\n    int VER_OR = 7;\n\n    int VER_CONDITION_MASK = 7;\n    int VER_NUM_BITS_PER_CONDITION_MASK = 3;\n\n    int VER_MINORVERSION = 0x0000001;\n    int VER_MAJORVERSION = 0x0000002;\n    int VER_BUILDNUMBER = 0x0000004;\n    int VER_PLATFORMID = 0x0000008;\n    int VER_SERVICEPACKMINOR = 0x0000010;\n    int VER_SERVICEPACKMAJOR = 0x0000020;\n    int VER_SUITENAME = 0x0000040;\n    int VER_PRODUCT_TYPE = 0x0000080;\n\n    int VER_NT_WORKSTATION = 0x0000001;\n    int VER_NT_DOMAIN_CONTROLLER = 0x0000002;\n    int VER_NT_SERVER = 0x0000003;\n\n    int VER_PLATFORM_WIN32s = 0;\n    int VER_PLATFORM_WIN32_WINDOWS = 1;\n    int VER_PLATFORM_WIN32_NT = 2;\n\n    /*\n     * WIN32_WINNT version constants\n     */\n    short WIN32_WINNT_NT4 = 0x0400; // Windows NT 4.0\n    short WIN32_WINNT_WIN2K = 0x0500; // Windows 2000\n    short WIN32_WINNT_WINXP = 0x0501; // Windows XP\n    short WIN32_WINNT_WS03 = 0x0502; // Windows Server 2003\n    short WIN32_WINNT_WIN6 = 0x0600; // Windows Vista\n    short WIN32_WINNT_VISTA = 0x0600; // Windows Vista\n    short WIN32_WINNT_WS08 = 0x0600; // Windows Server 2008\n    short WIN32_WINNT_LONGHORN = 0x0600; // Windows Vista\n    short WIN32_WINNT_WIN7 = 0x0601; // Windows 7\n    short WIN32_WINNT_WIN8 = 0x0602; // Windows 8\n    short WIN32_WINNT_WINBLUE = 0x0603; // Windows 8.1\n    short WIN32_WINNT_WINTHRESHOLD = 0x0A00; // Windows 10\n    short WIN32_WINNT_WIN10 = 0x0A00; // Windows 10\n\n    /**\n     * Read the records sequentially. If this is the first read operation, the\n     * EVENTLOG_FORWARDS_READ EVENTLOG_BACKWARDS_READ flags determines which\n     * record is read first.\n     */\n    int EVENTLOG_SEQUENTIAL_READ = 0x0001;\n\n    /**\n     * Begin reading from the record specified in the dwRecordOffset parameter.\n     * This option may not work with large log files if the function cannot\n     * determine the log file's size. For details, see Knowledge Base article,\n     * 177199.\n     */\n    int EVENTLOG_SEEK_READ = 0x0002;\n\n    /**\n     * The log is read in chronological order (oldest to newest). The default.\n     */\n    int EVENTLOG_FORWARDS_READ = 0x0004;\n\n    /**\n     * The log is read in reverse chronological order (newest to oldest).\n     */\n    int EVENTLOG_BACKWARDS_READ = 0x0008;\n\n    /**\n     * Information event\n     */\n    int EVENTLOG_SUCCESS = 0x0000;\n\n    /**\n     * Error event\n     */\n    int EVENTLOG_ERROR_TYPE = 0x0001;\n\n    /**\n     * Warning event\n     */\n    int EVENTLOG_WARNING_TYPE = 0x0002;\n\n    /**\n     * Information event\n     */\n    int EVENTLOG_INFORMATION_TYPE = 0x0004;\n\n    /**\n     * Success Audit event\n     */\n    int EVENTLOG_AUDIT_SUCCESS = 0x0008;\n\n    /**\n     * Failure Audit event\n     */\n    int EVENTLOG_AUDIT_FAILURE = 0x0010;\n\n    /**\n     * The EVENTLOGRECORD structure contains information about an event record\n     * returned by the ReadEventLog function.\n     */\n    @FieldOrder({\"Length\", \"Reserved\", \"RecordNumber\", \"TimeGenerated\", \"TimeWritten\",\n                \"EventID\", \"EventType\", \"NumStrings\", \"EventCategory\", \"ReservedFlags\",\n                \"ClosingRecordNumber\", \"StringOffset\", \"UserSidLength\", \"UserSidOffset\",\n                \"DataLength\", \"DataOffset\"})\n    public static class EVENTLOGRECORD extends Structure {\n        /**\n         * Size of this event record, in bytes. Note that this value is stored\n         * at both ends of the entry to ease moving forward or backward through\n         * the log. The length includes any pad bytes inserted at the end of the\n         * record for DWORD alignment.\n         */\n        public DWORD Length;\n\n        /**\n         * Reserved.\n         */\n        public DWORD Reserved;\n\n        /**\n         * Record number of the record. This value can be used with the\n         * EVENTLOG_SEEK_READ flag in the ReadEventLog function to begin reading\n         * at a specified record.\n         */\n        public DWORD RecordNumber;\n\n        /**\n         * Time at which this entry was submitted. This time is measured in the\n         * number of seconds elapsed since 00:00:00 January 1, 1970, Universal\n         * Coordinated Time.\n         */\n        public DWORD TimeGenerated;\n\n        /**\n         * Time at which this entry was received by the service to be written to\n         * the log. This time is measured in the number of seconds elapsed since\n         * 00:00:00 January 1, 1970, Universal Coordinated Time.\n         */\n        public DWORD TimeWritten;\n\n        /**\n         * Event identifier. The value is specific to the event source for the\n         * event, and is used with source name to locate a description string in\n         * the message file for the event source.\n         */\n        public DWORD EventID;\n\n        /**\n         * Type of event.\n         */\n        public WORD EventType;\n\n        /**\n         * Number of strings present in the log (at the position indicated by\n         * StringOffset). These strings are merged into the message before it is\n         * displayed to the user.\n         */\n        public WORD NumStrings;\n\n        /**\n         * Category for this event. The meaning of this value depends on the\n         * event source.\n         */\n        public WORD EventCategory;\n\n        /**\n         * Reserved.\n         */\n        public WORD ReservedFlags;\n\n        /**\n         * Reserved.\n         */\n        public DWORD ClosingRecordNumber;\n\n        /**\n         * Offset of the description strings within this event log record.\n         */\n        public DWORD StringOffset;\n\n        /**\n         * Size of the UserSid member, in bytes. This value can be zero if no\n         * security identifier was provided.\n         */\n        public DWORD UserSidLength;\n\n        /**\n         * Offset of the security identifier (SID) within this event log record.\n         * To obtain the user name for this SID, use the LookupAccountSid\n         * function.\n         */\n        public DWORD UserSidOffset;\n\n        /**\n         * Size of the event-specific data (at the position indicated by\n         * DataOffset), in bytes.\n         */\n        public DWORD DataLength;\n\n        /**\n         * Offset of the event-specific information within this event log\n         * record, in bytes. This information could be something specific (a\n         * disk driver might log the number of retries, for example), followed\n         * by binary information specific to the event being logged and to the\n         * source that generated the entry.\n         */\n        public DWORD DataOffset;\n\n        public EVENTLOGRECORD() {\n            super();\n        }\n\n        public EVENTLOGRECORD(Pointer p) {\n            super(p);\n            read();\n        }\n    }\n\n    //\n    // Service Types (Bit Mask)\n    //\n    int SERVICE_KERNEL_DRIVER = 0x00000001;\n    int SERVICE_FILE_SYSTEM_DRIVER = 0x00000002;\n    int SERVICE_ADAPTER = 0x00000004;\n    int SERVICE_RECOGNIZER_DRIVER = 0x00000008;\n    int SERVICE_DRIVER = SERVICE_KERNEL_DRIVER | SERVICE_FILE_SYSTEM_DRIVER\n            | SERVICE_RECOGNIZER_DRIVER;\n    int SERVICE_WIN32_OWN_PROCESS = 0x00000010;\n    int SERVICE_WIN32_SHARE_PROCESS = 0x00000020;\n    int SERVICE_WIN32 = SERVICE_WIN32_OWN_PROCESS | SERVICE_WIN32_SHARE_PROCESS;\n    int SERVICE_INTERACTIVE_PROCESS = 0x00000100;\n    int SERVICE_TYPE_ALL = SERVICE_WIN32 | SERVICE_ADAPTER | SERVICE_DRIVER\n            | SERVICE_INTERACTIVE_PROCESS;\n\n    //\n    // Start Type\n    //\n\n    int SERVICE_BOOT_START   = 0x00000000;\n    int SERVICE_SYSTEM_START = 0x00000001;\n    int SERVICE_AUTO_START   = 0x00000002;\n    int SERVICE_DEMAND_START = 0x00000003;\n    int SERVICE_DISABLED     = 0x00000004;\n\n    //\n    // Error control type\n    //\n    int SERVICE_ERROR_IGNORE   = 0x00000000;\n    int SERVICE_ERROR_NORMAL   = 0x00000001;\n    int SERVICE_ERROR_SEVERE   = 0x00000002;\n    int SERVICE_ERROR_CRITICAL = 0x00000003;\n\n    int STATUS_PENDING = 0x00000103;\n\n    // Privilege Constants\n    String SE_CREATE_TOKEN_NAME = \"SeCreateTokenPrivilege\";\n    String SE_ASSIGNPRIMARYTOKEN_NAME = \"SeAssignPrimaryTokenPrivilege\";\n    String SE_LOCK_MEMORY_NAME = \"SeLockMemoryPrivilege\";\n    String SE_INCREASE_QUOTA_NAME = \"SeIncreaseQuotaPrivilege\";\n    String SE_UNSOLICITED_INPUT_NAME = \"SeUnsolicitedInputPrivilege\";\n    String SE_MACHINE_ACCOUNT_NAME = \"SeMachineAccountPrivilege\";\n    String SE_TCB_NAME = \"SeTcbPrivilege\";\n    String SE_SECURITY_NAME = \"SeSecurityPrivilege\";\n    String SE_TAKE_OWNERSHIP_NAME = \"SeTakeOwnershipPrivilege\";\n    String SE_LOAD_DRIVER_NAME = \"SeLoadDriverPrivilege\";\n    String SE_SYSTEM_PROFILE_NAME = \"SeSystemProfilePrivilege\";\n    String SE_SYSTEMTIME_NAME = \"SeSystemtimePrivilege\";\n    String SE_PROF_SINGLE_PROCESS_NAME = \"SeProfileSingleProcessPrivilege\";\n    String SE_INC_BASE_PRIORITY_NAME = \"SeIncreaseBasePriorityPrivilege\";\n    String SE_CREATE_PAGEFILE_NAME = \"SeCreatePagefilePrivilege\";\n    String SE_CREATE_PERMANENT_NAME = \"SeCreatePermanentPrivilege\";\n    String SE_BACKUP_NAME = \"SeBackupPrivilege\";\n    String SE_RESTORE_NAME = \"SeRestorePrivilege\";\n    String SE_SHUTDOWN_NAME = \"SeShutdownPrivilege\";\n    String SE_DEBUG_NAME = \"SeDebugPrivilege\";\n    String SE_AUDIT_NAME = \"SeAuditPrivilege\";\n    String SE_SYSTEM_ENVIRONMENT_NAME = \"SeSystemEnvironmentPrivilege\";\n    String SE_CHANGE_NOTIFY_NAME = \"SeChangeNotifyPrivilege\";\n    String SE_REMOTE_SHUTDOWN_NAME = \"SeRemoteShutdownPrivilege\";\n    String SE_UNDOCK_NAME = \"SeUndockPrivilege\";\n    String SE_SYNC_AGENT_NAME = \"SeSyncAgentPrivilege\";\n    String SE_ENABLE_DELEGATION_NAME = \"SeEnableDelegationPrivilege\";\n    String SE_MANAGE_VOLUME_NAME = \"SeManageVolumePrivilege\";\n    String SE_IMPERSONATE_NAME = \"SeImpersonatePrivilege\";\n    String SE_CREATE_GLOBAL_NAME = \"SeCreateGlobalPrivilege\";\n\n    int SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x00000001;\n    int SE_PRIVILEGE_ENABLED = 0x00000002;\n    int SE_PRIVILEGE_REMOVED = 0X00000004;\n    int SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000;\n\n    /** Required to create a process. */\n    int PROCESS_CREATE_PROCESS = 0x0080;\n\n    /** Required to create a thread. */\n    int PROCESS_CREATE_THREAD = 0x0002;\n\n    /**\n     * Required to duplicate a handle using\n     * {@link Kernel32#DuplicateHandle}\n     * .\n     */\n    int PROCESS_DUP_HANDLE = 0x0040;\n\n    /**\n     * All possible access rights for a process object. Windows Server 2003 and\n     * Windows XP: The size of the PROCESS_ALL_ACCESS flag increased on Windows\n     * Server 2008 and Windows Vista. <br>\n     * If an application compiled for Windows Server 2008 and Windows Vista is\n     * run on Windows Server 2003 or Windows XP, the PROCESS_ALL_ACCESS flag is\n     * too large and the function specifying this flag fails with\n     * ERROR_ACCESS_DENIED.<br>\n     * To avoid this problem, specify the minimum set of access rights required\n     * for the operation.<br>\n     * If PROCESS_ALL_ACCESS must be used, set _WIN32_WINNT to the minimum\n     * operating system targeted by your application (for example, #define\n     * _WIN32_WINNT _WIN32_WINNT_WINXP).<br>\n     * For more information, see Using the Windows Headers.\n     *\n     * @see <a href=\"https://msdn.microsoft.com/en-us/library/ms684880(v=VS.85).aspx\">MSDN</a>\n     */\n    int PROCESS_ALL_ACCESS = WinNT.PROCESS_CREATE_PROCESS\n            | WinNT.PROCESS_CREATE_THREAD\n            | WinNT.PROCESS_DUP_HANDLE\n            | WinNT.PROCESS_QUERY_INFORMATION\n            | WinNT.PROCESS_QUERY_LIMITED_INFORMATION\n            | WinNT.PROCESS_SET_INFORMATION\n            | WinNT.PROCESS_SET_QUOTA\n            | WinNT.PROCESS_SUSPEND_RESUME\n            | WinNT.PROCESS_SYNCHRONIZE\n            | WinNT.PROCESS_TERMINATE\n            | WinNT.PROCESS_VM_OPERATION\n            | WinNT.PROCESS_VM_READ\n            | WinNT.PROCESS_VM_WRITE\n            | WinNT.DELETE\n            | WinNT.READ_CONTROL\n            | WinNT.WRITE_DAC\n            | WinNT.WRITE_OWNER\n            | WinNT.SYNCHRONIZE;\n\n    /**\n     * Required to retrieve certain information about a process, such as its\n     * token, exit code, and priority class (see\n     * {@link Advapi32#OpenProcessToken}).\n     */\n    int PROCESS_QUERY_INFORMATION = 0x0400;\n\n    /**\n     * Required to retrieve certain information about a process (see\n     * {@link Kernel32#GetExitCodeProcess}\n     * , {@code Kernel32#GetPriorityClass}, {@code Kernel32#IsProcessInJob},\n     * {@code Kernel32.QueryFullProcessImageName}). A handle that has the\n     * {@link #PROCESS_QUERY_INFORMATION} access right is automatically granted\n     * {@link #PROCESS_QUERY_LIMITED_INFORMATION}.\n     *\n     * Windows Server 2003 and Windows XP: This access right is not supported.\n     */\n    int PROCESS_QUERY_LIMITED_INFORMATION = 0x1000;\n\n    /**\n     * Required to set certain information about a process, such as its priority\n     * class (see {@code Kernel32#SetPriorityClass}).\n     */\n    int PROCESS_SET_INFORMATION = 0x0200;\n\n    /**\n     * Required to set memory limits using\n     * {@code Kernel32.SetProcessWorkingSetSize()}.\n     */\n    int PROCESS_SET_QUOTA = 0x0100;\n\n    /** Required to suspend or resume a process. */\n    int PROCESS_SUSPEND_RESUME = 0x0800;\n\n    /**\n     * Required to terminate a process using\n     * {@link Kernel32#TerminateProcess}.\n     */\n    int PROCESS_TERMINATE = 0x00000001;\n\n    /**\n     * Required for getting process exe path in native system path format\n     * {@code Kernel32.QueryFullProcessImageName()}.\n     */\n    int PROCESS_NAME_NATIVE = 0x00000001;\n\n    /**\n     * Required to perform an operation on the address space of a process (see\n     * {@code Kernel32.VirtualProtectEx()} and\n     * {@link Kernel32#WriteProcessMemory}\n     * ).\n     */\n    int PROCESS_VM_OPERATION = 0x0008;\n\n    /**\n     * Required to read memory in a process using\n     * {@link Kernel32#ReadProcessMemory}\n     * .\n     */\n    int PROCESS_VM_READ = 0x0010;\n\n    /**\n     * Required to write to memory in a process using\n     * {@link Kernel32#WriteProcessMemory}\n     * .\n     */\n    int PROCESS_VM_WRITE = 0x0020;\n\n    /** Required to wait for the process to terminate using the wait functions. */\n    int PROCESS_SYNCHRONIZE = 0x00100000;\n\n    /* Security information types */\n    int OWNER_SECURITY_INFORMATION = 0x00000001;\n    int GROUP_SECURITY_INFORMATION = 0x00000002;\n    int DACL_SECURITY_INFORMATION = 0x00000004;\n    int SACL_SECURITY_INFORMATION = 0x00000008;\n    int LABEL_SECURITY_INFORMATION = 0x00000010;\n    int PROTECTED_DACL_SECURITY_INFORMATION = 0x80000000;\n    int PROTECTED_SACL_SECURITY_INFORMATION = 0x40000000;\n    int UNPROTECTED_DACL_SECURITY_INFORMATION = 0x20000000;\n    int UNPROTECTED_SACL_SECURITY_INFORMATION = 0x10000000;\n\n    /* Security control bits */\n    int SE_OWNER_DEFAULTED          = 0x00000001;\n    int SE_GROUP_DEFAULTED          = 0x00000002;\n    int SE_DACL_PRESENT             = 0x00000004;\n    int SE_DACL_DEFAULTED           = 0x00000008;\n    int SE_SACL_PRESENT             = 0x00000010;\n    int SE_SACL_DEFAULTED           = 0x00000020;\n    int SE_DACL_AUTO_INHERIT_REQ    = 0x00000100;\n    int SE_SACL_AUTO_INHERIT_REQ    = 0x00000200;\n    int SE_DACL_AUTO_INHERITED      = 0x00000400;\n    int SE_SACL_AUTO_INHERITED      = 0x00000800;\n    int SE_DACL_PROTECTED           = 0x00001000;\n    int SE_SACL_PROTECTED           = 0x00002000;\n    int SE_RM_CONTROL_VALID         = 0x00004000;\n    int SE_SELF_RELATIVE            = 0x00008000;\n\n    int SECURITY_DESCRIPTOR_REVISION = 0x00000001;\n\n    @FieldOrder({\"data\"})\n    public static class SECURITY_DESCRIPTOR extends Structure {\n        public static class ByReference extends SECURITY_DESCRIPTOR implements\n                Structure.ByReference {\n        }\n\n        public byte[] data;\n\n        public SECURITY_DESCRIPTOR() {\n            super();\n        }\n\n        public SECURITY_DESCRIPTOR(byte[] data) {\n            super();\n            this.data = data;\n            useMemory(new Memory(data.length));\n        }\n\n        public SECURITY_DESCRIPTOR(int size) {\n            super();\n            useMemory(new Memory(size));\n            data = new byte[size];\n        }\n\n        public SECURITY_DESCRIPTOR(Pointer memory) {\n            super(memory);\n            read();\n        }\n    }\n\n    int ACL_REVISION        = 2;\n    int ACL_REVISION_DS     = 4;\n\n    // This is the history of ACL revisions.  Add a new one whenever\n    // ACL_REVISION is updated\n    int ACL_REVISION1       = 1;\n    int ACL_REVISION2       = 2;\n    int ACL_REVISION3       = 3;\n    int ACL_REVISION4       = 4;\n    int MIN_ACL_REVISION    = ACL_REVISION2;\n    int MAX_ACL_REVISION    = ACL_REVISION4;\n\n    @FieldOrder({\"AclRevision\", \"Sbz1\", \"AclSize\", \"AceCount\", \"Sbz2\"})\n    public static class ACL extends Structure {\n        /*\n         * Maximum size chosen based on technet article:\n         * https://technet.microsoft.com/en-us/library/cc781716.aspx\n         */\n        public static int MAX_ACL_SIZE = 64 * 1024;\n\n        public byte AclRevision;\n        public byte Sbz1;\n        public short AclSize;\n        public short AceCount;\n        public short Sbz2;\n\n        public ACL() {\n            super();\n        }\n\n        public ACL(int size) {\n            super();\n            useMemory(new Memory(size));\n        }\n\n        public ACL(Pointer pointer) {\n            super(pointer);\n            read();\n        }\n\n        /**\n         * Extract the contained ACEs from the ACL.\n         *\n         * <p>ACE types as decoded to their native JNA counterparts. ACE types,\n         * that are currently unsupported by JNA are returned as\n         * {@link WinNT.ACE_HEADER} objects.</p>\n         *\n         * @return array holding the contained ACEs\n         */\n        public ACE_HEADER[] getACEs() {\n            ACE_HEADER[] ACEs = new ACE_HEADER[AceCount];\n            final Pointer pointer = this.getPointer();\n            int offset = size();\n            for (int i = 0; i < AceCount; i++) {\n                final Pointer share = pointer.share(offset);\n                final byte aceType = share.getByte(0); // ACE_HEADER.AceType\n                switch (aceType) {\n                    case ACCESS_ALLOWED_ACE_TYPE:\n                        ACEs[i] = new ACCESS_ALLOWED_ACE(share);\n                        break;\n                    case ACCESS_DENIED_ACE_TYPE:\n                        ACEs[i] = new ACCESS_DENIED_ACE(share);\n                        break;\n                    default:\n                        ACEs[i] = new ACE_HEADER(share);\n                        break;\n                }\n                offset += ACEs[i].AceSize;\n            }\n            return ACEs;\n        }\n    }\n\n    public static class PACLByReference extends ByReference {\n        public PACLByReference() {\n            this(null);\n        }\n\n        public PACLByReference(ACL h) {\n            super(Native.POINTER_SIZE);\n            setValue(h);\n        }\n\n        public void setValue(ACL h) {\n            getPointer().setPointer(0, h != null ? h.getPointer() : null);\n        }\n\n        public ACL getValue() {\n            Pointer p = getPointer().getPointer(0);\n            if (p == null) {\n                return null;\n            }\n            else {\n                return new ACL(p);\n            }\n        }\n    }\n\n    @FieldOrder({\"Revision\", \"Sbz1\", \"Control\", \"Owner\", \"Group\", \"Sacl\", \"Dacl\"})\n    public static class SECURITY_DESCRIPTOR_RELATIVE extends Structure {\n        public static class ByReference extends SECURITY_DESCRIPTOR_RELATIVE\n                implements Structure.ByReference {\n        }\n\n        public byte Revision;\n        public byte Sbz1;\n        public short Control;\n        public int Owner;\n        public int Group;\n        public int Sacl;\n        public int Dacl;\n\n        private PSID OWNER;\n        private PSID GROUP;\n        private ACL SACL;\n        private ACL DACL;\n\n        public SECURITY_DESCRIPTOR_RELATIVE() {\n            super();\n        }\n\n        public SECURITY_DESCRIPTOR_RELATIVE(byte[] data) {\n            super(new Memory(data.length));\n            getPointer().write(0, data, 0, data.length);\n            setMembers();\n        }\n\n        public SECURITY_DESCRIPTOR_RELATIVE(int length) {\n            super(new Memory(length));\n        }\n\n        public SECURITY_DESCRIPTOR_RELATIVE(Pointer p) {\n            super(p);\n            setMembers();\n        }\n\n        public PSID getOwner() {\n            return OWNER;\n        }\n\n        public PSID getGroup() {\n            return GROUP;\n        }\n\n        public ACL getDiscretionaryACL() {\n            return DACL;\n        }\n\n        public ACL getSystemACL() {\n            return SACL;\n        }\n\n        private final void setMembers() {\n            read();\n            if (Dacl != 0) {\n                DACL = new ACL(getPointer().share(Dacl));\n            }\n            if (Sacl != 0) {\n                SACL = new ACL(getPointer().share(Sacl));\n            }\n            if (Group != 0) {\n                GROUP = new PSID(getPointer().share(Group));\n            }\n            if (Owner != 0) {\n                OWNER = new PSID(getPointer().share(Owner));\n            }\n        }\n    }\n\n    @FieldOrder({\"AceType\", \"AceFlags\", \"AceSize\"})\n    public static class ACE_HEADER extends Structure {\n        public byte AceType;\n        public byte AceFlags;\n        public short AceSize;\n\n        public ACE_HEADER() {\n            super();\n        }\n\n        public ACE_HEADER(Pointer p) {\n            super(p);\n            read();\n        }\n\n        public ACE_HEADER(byte AceType, byte AceFlags, short AceSize) {\n            super();\n            this.AceType = AceType;\n            this.AceFlags = AceFlags;\n            this.AceSize = AceSize;\n            write();\n        }\n    }\n\n    /**\n     * ACCESS_ALLOWED_ACE and ACCESS_DENIED_ACE have the same structure layout\n     */\n    @FieldOrder({\"Mask\", \"SidStart\"})\n    public static abstract class ACCESS_ACEStructure extends ACE_HEADER {\n        public int Mask;\n        /**\n         * First 4 bytes of the SID\n         * Only used to have a valid field defined - use sid!\n         */\n        public byte[] SidStart = new byte[4];\n\n        PSID psid;\n\n        public ACCESS_ACEStructure() {\n            super();\n        }\n\n        public ACCESS_ACEStructure(int Mask, byte AceType, byte AceFlags, PSID psid) {\n            super();\n            this.calculateSize(true);\n            this.AceType = AceType;\n            this.AceFlags = AceFlags;\n            this.AceSize = (short) (super.fieldOffset(\"SidStart\") + psid.getBytes().length);\n            this.psid = psid;\n            this.Mask = Mask;\n            this.SidStart = psid.getPointer().getByteArray(0, SidStart.length);\n            this.allocateMemory(AceSize);\n            write();\n        }\n\n        public ACCESS_ACEStructure(Pointer p) {\n            super(p);\n            read();\n        }\n\n        public String getSidString() {\n            return Advapi32Util.convertSidToStringSid(psid);\n        }\n\n        public PSID getSID() {\n            return psid;\n        }\n\n        /**\n         * Write override due to psid not being a managed field\n         */\n        @Override\n        public void write() {\n            super.write();\n            int offsetOfSID = super.fieldOffset(\"SidStart\");\n            int sizeOfSID = super.AceSize - super.fieldOffset(\"SidStart\");\n            if(psid != null) {\n                // Get bytes from the PSID\n                byte[] psidWrite = psid.getBytes();\n                assert psidWrite.length <= sizeOfSID;\n                // Write those bytes to native memory\n                getPointer().write(offsetOfSID, psidWrite, 0, sizeOfSID);\n            }\n        }\n\n        @Override\n        public void read() {\n            if(SidStart == null) {\n                SidStart = new byte[4];\n            }\n            super.read();\n            int offsetOfSID = super.fieldOffset(\"SidStart\");\n            int sizeOfSID = super.AceSize - super.fieldOffset(\"SidStart\");\n            if(sizeOfSID > 0) {\n                psid = new PSID(getPointer().getByteArray(offsetOfSID, sizeOfSID));\n            } else {\n                psid = new PSID();\n            }\n        }\n    }\n\n    /* Access allowed ACE */\n    public static class ACCESS_ALLOWED_ACE extends ACCESS_ACEStructure {\n        public ACCESS_ALLOWED_ACE() {\n            super();\n        }\n\n        public ACCESS_ALLOWED_ACE(Pointer p) {\n            super(p);\n        }\n\n        public ACCESS_ALLOWED_ACE(int Mask, byte AceFlags, PSID psid) {\n            super(Mask, ACCESS_ALLOWED_ACE_TYPE, AceFlags, psid);\n        }\n    }\n\n    /* Access denied ACE */\n    public static class ACCESS_DENIED_ACE extends ACCESS_ACEStructure {\n        public ACCESS_DENIED_ACE() {\n            super();\n        }\n\n        public ACCESS_DENIED_ACE(Pointer p) {\n            super(p);\n        }\n\n        public ACCESS_DENIED_ACE(int Mask, byte AceFlags, PSID psid) {\n            super(Mask, ACCESS_DENIED_ACE_TYPE, AceFlags, psid);\n        }\n    }\n\n    /* ACE types */\n    byte ACCESS_ALLOWED_ACE_TYPE = 0x00;\n    byte ACCESS_DENIED_ACE_TYPE = 0x01;\n    byte SYSTEM_AUDIT_ACE_TYPE = 0x02;\n    byte SYSTEM_ALARM_ACE_TYPE = 0x03;\n    byte ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 0x04;\n    byte ACCESS_ALLOWED_OBJECT_ACE_TYPE = 0x05;\n    byte ACCESS_DENIED_OBJECT_ACE_TYPE = 0x06;\n    byte SYSTEM_AUDIT_OBJECT_ACE_TYPE = 0x07;\n    byte SYSTEM_ALARM_OBJECT_ACE_TYPE = 0x08;\n    byte ACCESS_ALLOWED_CALLBACK_ACE_TYPE = 0x09;\n    byte ACCESS_DENIED_CALLBACK_ACE_TYPE = 0x0A;\n    byte ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = 0x0B;\n    byte ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = 0x0C;\n    byte SYSTEM_AUDIT_CALLBACK_ACE_TYPE = 0x0D;\n    byte SYSTEM_ALARM_CALLBACK_ACE_TYPE = 0x0E;\n    byte SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = 0x0F;\n    byte SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = 0x10;\n    byte SYSTEM_MANDATORY_LABEL_ACE_TYPE = 0x11;\n\n    /* ACE inherit flags */\n    byte OBJECT_INHERIT_ACE = 0x01;\n    byte CONTAINER_INHERIT_ACE = 0x02;\n    byte NO_PROPAGATE_INHERIT_ACE = 0x04;\n    byte INHERIT_ONLY_ACE = 0x08;\n    byte INHERITED_ACE = 0x10;\n    byte VALID_INHERIT_FLAGS = 0x1F;\n\n    // TODO: figure out how OVERLAPPED is used and apply an appropriate mapping\n    interface OVERLAPPED_COMPLETION_ROUTINE extends StdCallCallback {\n        void callback(int errorCode, int nBytesTransferred,\n                WinBase.OVERLAPPED overlapped);\n    }\n\n\n    /**\n     * Defines the mapping of generic access rights to specific and standard access rights for an object\n     */\n    @FieldOrder({\"genericRead\", \"genericWrite\", \"genericExecute\", \"genericAll\"})\n    public static class GENERIC_MAPPING extends Structure {\n        public static class ByReference extends GENERIC_MAPPING implements Structure.ByReference {\n        }\n\n        public DWORD genericRead;\n        public DWORD genericWrite;\n        public DWORD genericExecute;\n        public DWORD genericAll;\n    }\n\n    /**\n     * Describes the relationship between the specified processor set. This structure is used with the\n     * {@link Kernel32#GetLogicalProcessorInformation} function.\n     */\n    @FieldOrder({\"processorMask\", \"relationship\", \"payload\"})\n    public static class SYSTEM_LOGICAL_PROCESSOR_INFORMATION extends Structure {\n        /**\n         * The processor mask identifying the processors described by this structure. A processor mask is a bit\n         * vector in which each set bit represents an active processor in the relationship.\n         */\n        public ULONG_PTR processorMask;\n\n        /**\n         * The relationship between the processors identified by the value of the {@link #processorMask} member.\n         * This member can be one of\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationCache},\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationNumaNode},\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorCore} or\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorPackage}.\n         *\n         * @see LOGICAL_PROCESSOR_RELATIONSHIP\n         */\n        public int /* LOGICAL_PROCESSOR_RELATIONSHIP */ relationship;\n\n        /**\n         * A union of fields which differs depending on {@link #relationship}.\n         */\n        public AnonymousUnionPayload payload;\n\n        public SYSTEM_LOGICAL_PROCESSOR_INFORMATION() {\n            super();\n        }\n\n        public SYSTEM_LOGICAL_PROCESSOR_INFORMATION(Pointer memory) {\n            super(memory);\n            read();\n        }\n\n        public static class AnonymousUnionPayload extends Union {\n            /**\n             * Contains valid data only if {@link #relationship} is {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorCore}.\n             */\n            public AnonymousStructProcessorCore processorCore;\n\n            /**\n             * Contains valid data only if {@link #relationship} is {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationNumaNode}.\n             */\n            public AnonymousStructNumaNode numaNode;\n\n            /**\n             * <p>Identifies the characteristics of a particular cache. There is one record returned for each cache\n             *    reported. Some or all caches may not be reported, depending on how caches are identified. Therefore,\n             *    do not assume the absence of any particular caches. Caches are not necessarily shared among\n             *    logical processors.</p>\n             *\n             * <p>Contains valid data only if {@link #relationship} is\n             *    {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationCache}.</p>\n             *\n             * <p>This member was not supported until Windows Server 2003 SP1 / Windows XP Professional x64.</p>\n             */\n            public CACHE_DESCRIPTOR cache;\n\n            /**\n             * Reserved. Do not use.\n             */\n            public ULONGLONG[] reserved = new ULONGLONG[2];\n        }\n\n        @FieldOrder({\"flags\"})\n        public static class AnonymousStructProcessorCore extends Structure {\n            /**\n             * <p>If the value of this mmeber is {@code 1}, the logical processors identified by the value of the\n             *    {@link #processorMask} member share functional units, as in Hyperthreading or SMT. Otherwise, the\n             *    identified logical processors do not share functional units.</p>\n             *\n             * <p>Note: Prior to Windows Vista, this member is also {@code 1} for cores that share a physical\n             *    package.</p>\n             */\n            public BYTE flags;\n        }\n\n        @FieldOrder({\"nodeNumber\"})\n        public static class AnonymousStructNumaNode extends Structure {\n            /**\n             * Identifies the NUMA node. Valid values are {@code 0} to the highest NUMA node number inclusive.\n             * A non-NUMA multiprocessor system will report that all processors belong to one NUMA node.\n             */\n            public DWORD nodeNumber;\n        }\n    }\n\n    /**\n     * Contains information about the relationships of logical processors and\n     * related hardware. The {@link Kernel32#GetLogicalProcessorInformationEx}\n     * function uses this structure.\n     * <p>\n     * The native structure contains a union, which is mapped to JNA as\n     * subclasses.\n     */\n    @FieldOrder({ \"relationship\", \"size\" })\n    public abstract class SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX extends Structure {\n\n        /**\n         * The type of relationship between the logical processors. This\n         * parameter can be one of the following values:\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationCache},\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationGroup},\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationNumaNode},\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorCore}, or\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorPackage}.\n         * <p>\n         * This field identifies which subclass will be instantiated by the\n         * {@link #fromPointer(Pointer)} method.\n         */\n        public int /* LOGICAL_PROCESSOR_RELATIONSHIP */ relationship;\n\n        /**\n         * The size of the structure, in bytes.\n         */\n        public int size;\n\n        public SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX() {\n            super();\n        }\n\n        /**\n         * This constructor should only be called by a subclass to ensure memory\n         * is properly allocated to the subclass fields.\n         *\n         * @param memory\n         *            A pointer to the allocated native memory.\n         */\n        protected SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX(Pointer memory) {\n            super(memory);\n        }\n\n        /**\n         * Create a new instance of the appropriate subclass of\n         * {@link SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX} from the provided\n         * {@link Pointer} to native memory. Use this method rather than\n         * {@link #SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX(Pointer)} to properly\n         * cast the Pointer to the appropriate subclass and populate variable\n         * length arrays.\n         *\n         * @param memory\n         *            A pointer to allocated memory to be cast to this class.\n         * @return An instance of the appropriate subclass depending on the\n         *         value of the {@link #relationship} field. If the\n         *         {@link #relationship} member is\n         *         {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorCore}\n         *         or\n         *         {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorPackage},\n         *         the return type will be {@link PROCESSOR_RELATIONSHIP}. If\n         *         the {@link #relationship} member is\n         *         {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationNumaNode}, the\n         *         return type will be {@link NUMA_NODE_RELATIONSHIP}. If the\n         *         {@link #relationship} member is\n         *         {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationCache}, the\n         *         return type will be {@link CACHE_RELATIONSHIP}. If the\n         *         {@link #relationship} member is\n         *         {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationGroup}, the\n         *         return type will be {@link GROUP_RELATIONSHIP}.\n         */\n        public static SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX fromPointer(Pointer memory) {\n            int relationship = memory.getInt(0);\n            SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX result;\n            switch (relationship) {\n                case LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorCore:\n                case LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorPackage:\n                    result = new PROCESSOR_RELATIONSHIP(memory);\n                    break;\n                case LOGICAL_PROCESSOR_RELATIONSHIP.RelationNumaNode:\n                    result = new NUMA_NODE_RELATIONSHIP(memory);\n                    break;\n                case LOGICAL_PROCESSOR_RELATIONSHIP.RelationCache:\n                    result = new CACHE_RELATIONSHIP(memory);\n                    break;\n                case LOGICAL_PROCESSOR_RELATIONSHIP.RelationGroup:\n                    result = new GROUP_RELATIONSHIP(memory);\n                    break;\n                default:\n                    throw new IllegalStateException(\"Unmapped relationship: \" + relationship);\n            }\n            result.read();\n            return result;\n        }\n    }\n\n    /**\n     * Describes the logical processors associated with either a processor core\n     * or a processor package.\n     */\n    @FieldOrder({ \"flags\", \"efficiencyClass\", \"reserved\", \"groupCount\", \"groupMask\" })\n    public static class PROCESSOR_RELATIONSHIP extends SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {\n\n        /**\n         * If the {@link #relationship} member of the\n         * {@link SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX} structure is\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorCore}, this\n         * member is {@link #LTP_PC_SMT} if the core has more than one logical\n         * processor, or 0 if the core has one logical processor.\n         * <p>\n         * If the {@link #relationship} member of the\n         * {@link SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX} structure is\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorPackage}, this\n         * member is always 0.\n         */\n        public byte flags;\n\n        /**\n         * If the {@link #relationship} member of the\n         * {@link SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX} structure is\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorCore},\n         * EfficiencyClass specifies the intrinsic tradeoff between performance\n         * and power for the applicable core. A core with a higher value for the\n         * efficiency class has intrinsically greater performance and less\n         * efficiency than a core with a lower value for the efficiency class.\n         * EfficiencyClass is only nonzero on systems with a heterogeneous set\n         * of cores.\n         * <p>\n         * If the {@link #relationship} member of the\n         * {@link SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX} structure is\n         * {@link LOGICAL_PROCESSOR_RELATIONSHIP#RelationProcessorPackage},\n         * EfficiencyClass is always 0.\n         * <p>\n         * The minimum operating system version that supports this member is\n         * Windows 10.\n         */\n        public byte efficiencyClass;\n\n        /**\n         * This member is reserved.\n         */\n        public byte[] reserved = new byte[20];\n\n        /**\n         * This member specifies the number of entries in the GroupMask array.\n         * <p>\n         * If the PROCESSOR_RELATIONSHIP structure represents a processor core,\n         * the GroupCount member is always 1.\n         * <p>\n         * If the {@link PROCESSOR_RELATIONSHIP} structure represents a\n         * processor package, the {@link #groupCount} member is 1 only if all\n         * processors are in the same processor group. If the package contains\n         * more than one NUMA node, the system might assign different NUMA nodes\n         * to different processor groups. In this case, the {@link #groupCount}\n         * member is the number of groups to which NUMA nodes in the package are\n         * assigned.\n         */\n        public short groupCount;\n\n        /**\n         * An array of {@link GROUP_AFFINITY} structures. The\n         * {@link #groupCount} member specifies the number of structures in the\n         * array. Each structure in the array specifies a group number and\n         * processor affinity within the group.\n         */\n        public GROUP_AFFINITY[] groupMask = new GROUP_AFFINITY[1];\n\n        public PROCESSOR_RELATIONSHIP() {\n        }\n\n        public PROCESSOR_RELATIONSHIP(Pointer memory) {\n            super(memory);\n        }\n\n        @Override\n        public void read() {\n            readField(\"groupCount\");\n            groupMask = new GROUP_AFFINITY[groupCount];\n            super.read();\n        }\n    }\n\n    /**\n     * Represents information about a NUMA node in a processor group.\n     */\n    @FieldOrder({ \"nodeNumber\", \"reserved\", \"groupMask\" })\n    public static class NUMA_NODE_RELATIONSHIP extends SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {\n\n        /**\n         * Identifies the NUMA node. Valid values are {@code 0} to the highest\n         * NUMA node number inclusive. A non-NUMA multiprocessor system will\n         * report that all processors belong to one NUMA node.\n         */\n        public int nodeNumber;\n\n        /**\n         * This member is reserved.\n         */\n        public byte[] reserved = new byte[20];\n\n        /**\n         * A {@link GROUP_AFFINITY} structure that specifies a group number and\n         * processor affinity within the group.\n         */\n        public GROUP_AFFINITY groupMask;\n\n        public NUMA_NODE_RELATIONSHIP() {\n        }\n\n        public NUMA_NODE_RELATIONSHIP(Pointer memory) {\n            super(memory);\n        }\n    }\n\n    /**\n     * Describes cache attributes.\n     */\n    @FieldOrder({ \"level\", \"associativity\", \"lineSize\", \"cacheSize\", \"type\", \"reserved\", \"groupMask\" })\n    public static class CACHE_RELATIONSHIP extends SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {\n\n        /**\n         * The cache level. This member can be 1 (L1), 2 (L2), 3 (L3), or 4\n         * (L4).\n         */\n        public byte level;\n\n        /**\n         * The cache associativity. If this member is\n         * {@link #CACHE_FULLY_ASSOCIATIVE}, the cache is fully associative.\n         */\n        public byte associativity;\n\n        /**\n         * The cache line size, in bytes.\n         */\n        public short lineSize;\n\n        /**\n         * The cache size, in bytes.\n         */\n        public int cacheSize;\n\n        /**\n         * The cache type. This member is a {@link PROCESSOR_CACHE_TYPE} value.\n         */\n        public int /* PROCESSOR_CACHE_TYPE */ type;\n\n        /**\n         * This member is reserved.\n         */\n        public byte[] reserved = new byte[20];\n\n        /**\n         * A {@link GROUP_AFFINITY} structure that specifies a group number and\n         * processor affinity within the group.\n         */\n        public GROUP_AFFINITY groupMask;\n\n        public CACHE_RELATIONSHIP() {\n        }\n\n        public CACHE_RELATIONSHIP(Pointer memory) {\n            super(memory);\n        }\n    }\n\n    /**\n     * Represents information about processor groups.\n     */\n    @FieldOrder({ \"maximumGroupCount\", \"activeGroupCount\", \"reserved\", \"groupInfo\" })\n    public static class GROUP_RELATIONSHIP extends SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {\n\n        /**\n         * The maximum number of processor groups on the system.\n         */\n        public short maximumGroupCount;\n\n        /**\n         * The number of active groups on the system. This member indicates the\n         * number of {@link PROCESSOR_GROUP_INFO} structures in the GroupInfo\n         * array.\n         */\n        public short activeGroupCount;\n\n        /**\n         * This member is reserved.\n         */\n        public byte[] reserved = new byte[20];\n\n        /**\n         * An array of {@link PROCESSOR_GROUP_INFO} structures. The\n         * {@link #activeGroupCount} member specifies the number of structures\n         * in the array. Each structure in the array specifies the number and\n         * affinity of processors in an active group on the system.\n         */\n        public PROCESSOR_GROUP_INFO[] groupInfo = new PROCESSOR_GROUP_INFO[1];\n\n        public GROUP_RELATIONSHIP() {\n        }\n\n        public GROUP_RELATIONSHIP(Pointer memory) {\n            super(memory);\n        }\n\n        @Override\n        public void read() {\n            readField(\"activeGroupCount\");\n            groupInfo = new PROCESSOR_GROUP_INFO[activeGroupCount];\n            super.read();\n        }\n    }\n\n    /**\n     * Represents a processor group-specific affinity, such as the affinity of a\n     * thread.\n     */\n    @FieldOrder({ \"mask\", \"group\", \"reserved\" })\n    public static class GROUP_AFFINITY extends Structure {\n\n        /**\n         * A bitmap that specifies the affinity for zero or more processors\n         * within the specified group.\n         */\n        public ULONG_PTR /* KAFFINITY */ mask;\n\n        /**\n         * The processor group number.\n         */\n        public short group;\n\n        /**\n         * This member is reserved.\n         */\n        public short[] reserved = new short[3];\n\n        public GROUP_AFFINITY(Pointer memory) {\n            super(memory);\n        }\n\n        public GROUP_AFFINITY() {\n            super();\n        }\n    }\n\n    /**\n     * Represents the number and affinity of processors in a processor group.\n     */\n    @FieldOrder({ \"maximumProcessorCount\", \"activeProcessorCount\", \"reserved\", \"activeProcessorMask\" })\n    public static class PROCESSOR_GROUP_INFO extends Structure {\n\n        /**\n         * The maximum number of processors in the group.\n         */\n        public byte maximumProcessorCount;\n\n        /**\n         * The number of active processors in the group.\n         */\n        public byte activeProcessorCount;\n\n        /**\n         * This member is reserved.\n         */\n        public byte[] reserved = new byte[38];\n\n        /**\n         * A bitmap that specifies the affinity for zero or more active\n         * processors within the group.\n         */\n        public ULONG_PTR /* KAFFINITY */ activeProcessorMask;\n\n        public PROCESSOR_GROUP_INFO(Pointer memory) {\n            super(memory);\n        }\n\n        public PROCESSOR_GROUP_INFO() {\n            super();\n        }\n    }\n\n    /**\n     * Represents the relationship between the processor set identified in the corresponding\n     * {@link SYSTEM_LOGICAL_PROCESSOR_INFORMATION} or <code>SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX</code> structure.\n     */\n    public interface LOGICAL_PROCESSOR_RELATIONSHIP {\n        /**\n         * The specified logical processors share a single processor core.\n         */\n        int RelationProcessorCore = 0;\n\n        /**\n         * The specified logical processors are part of the same NUMA node.\n         */\n        int RelationNumaNode = 1;\n\n        /**\n         * <p>The specified logical processors share a cache.</p>\n         *\n         * <p>Not supported until Windows Server 2003 SP1 / Windows XP Professional x64.</p>\n         */\n        int RelationCache = 2;\n\n        /**\n         * <p>The specified logical processors share a physical package (a single package socketed or soldered onto a\n         *    motherboard may contain multiple processor cores or threads, each of which is treated as a separate\n         *    processor by the operating system.)</p>\n         *\n         * <p>Not supported until Windows Server 2003 SP1 / Windows XP Professional x64.</p>\n         */\n        int RelationProcessorPackage = 3;\n\n        /**\n         * <p>The specified logical processors share a single processor group.</p>\n         *\n         * <p>Not supported until Windows Server 2008 R2.</p>\n         */\n        int RelationGroup = 4;\n\n        /**\n         * <p>On input, retrieves information about all possible relation types. This value is not used on output.</p>\n         *\n         * <p>Not supported until Windows Server 2008 R2.</p>\n         */\n        int RelationAll = 0xFFFF;\n    }\n\n    byte CACHE_FULLY_ASSOCIATIVE = (byte)0xFF;\n\n    /**\n     * Describes the cache attributes.\n     */\n    @FieldOrder({\"level\", \"associativity\", \"lineSize\", \"size\", \"type\"})\n    public static class CACHE_DESCRIPTOR extends Structure {\n        /**\n         * The cache level. This member can be 1, 2 or 3, corresponding to L1, L2 or L3 cache, respectively (other\n         * values may be supported in the future.)\n         */\n        public BYTE level;\n\n        /**\n         * The cache associativity. If this member is {@link #CACHE_FULLY_ASSOCIATIVE}, the cache is fully\n         * associative.\n         */\n        public BYTE associativity;\n\n        /**\n         * The cache line size, in bytes.\n         */\n        public WORD lineSize;\n\n        /**\n         * The cache size, in bytes.\n         */\n        public DWORD size;\n\n        /**\n         * The cache type.\n         *\n         * @see PROCESSOR_CACHE_TYPE\n         */\n        public int /* PROCESSOR_CACHE_TYPE */ type;\n    }\n\n    /**\n     * Represents the type of processor cache identifier in the corresponding {@link CACHE_DESCRIPTOR} structure.\n     */\n    public static abstract class PROCESSOR_CACHE_TYPE {\n        /**\n         * The cache is unified.\n         */\n        public static int CacheUnified = 0;\n\n        /**\n         * The cache is for processor instructions.\n         */\n        public static int CacheInstruction = 1;\n\n        /**\n         * The cache is for data.\n         */\n        public static int CacheData = 2;\n\n        /**\n         * The cache is for traces.\n         */\n        public static int CacheTrace = 3;\n    }\n\n    /**\n     * Defines values that are used to specify system power action types.\n     */\n    public interface POWER_ACTION {\n        int PowerActionNone = 0;\n        int PowerActionReserved = 1;\n        int PowerActionSleep = 2;\n        int PowerActionHibernate = 3;\n        int PowerActionShutdown = 4;\n        int PowerActionShutdownReset = 5;\n        int PowerActionShutdownOff = 6;\n        int PowerActionWarmEject = 7;\n        int PowerActionDisplayOff = 8;\n    }\n\n    /**\n     * Defines values that are used to specify system power states.\n     */\n    public interface SYSTEM_POWER_STATE {\n        int PowerSystemUnspecified = 0;\n        int PowerSystemWorking = 1;\n        int PowerSystemSleeping1 = 2;\n        int PowerSystemSleeping2 = 3;\n        int PowerSystemSleeping3 = 4;\n        int PowerSystemHibernate = 5; // S4\n        int PowerSystemShutdown = 6; // S5\n        int PowerSystemMaximum = 7;\n    }\n\n    /**\n     * Contains information about the current state of the system battery.\n     */\n    @FieldOrder({ \"AcOnLine\", \"BatteryPresent\", \"Charging\", \"Discharging\", \"Spare1\", \"Tag\", \"MaxCapacity\",\n            \"RemainingCapacity\", \"Rate\", \"EstimatedTime\", \"DefaultAlert1\", \"DefaultAlert2\" })\n    class SYSTEM_BATTERY_STATE extends Structure {\n        public byte AcOnLine;\n        public byte BatteryPresent;\n        public byte Charging;\n        public byte Discharging;\n        public byte[] Spare1 = new byte[3];\n        public byte Tag;\n        public int MaxCapacity;\n        public int RemainingCapacity;\n        public int Rate;\n        public int EstimatedTime;\n        public int DefaultAlert1;\n        public int DefaultAlert2;\n\n        public SYSTEM_BATTERY_STATE(Pointer p) {\n            super(p);\n            read();\n        }\n\n        public SYSTEM_BATTERY_STATE() {\n            super();\n        }\n    }\n\n\n    /**\n     * Contains the granularity of the battery capacity.\n     */\n    @FieldOrder({ \"Granularity\", \"Capacity\" })\n    class BATTERY_REPORTING_SCALE extends Structure {\n        public int Granularity;\n        public int Capacity;\n    }\n\n    /**\n     * Contains information about a processor.\n     */\n    @FieldOrder({ \"Number\", \"MaxMhz\", \"CurrentMhz\", \"MhzLimit\", \"MaxIdleState\", \"CurrentIdleState\" })\n    class PROCESSOR_POWER_INFORMATION extends Structure {\n        public int Number;\n        public int MaxMhz;\n        public int CurrentMhz;\n        public int MhzLimit;\n        public int MaxIdleState;\n        public int CurrentIdleState;\n\n        public PROCESSOR_POWER_INFORMATION(Pointer p) {\n            super(p);\n            read();\n        }\n\n        public PROCESSOR_POWER_INFORMATION() {\n            super();\n        }\n    }\n\n    /**\n     * Contains information about the idleness of the system.\n     */\n    @FieldOrder({ \"MaxIdlenessAllowed\", \"Idleness\", \"TimeRemaining\", \"CoolingMode\" })\n    class SYSTEM_POWER_INFORMATION extends Structure {\n        public int MaxIdlenessAllowed;\n        public int Idleness;\n        public int TimeRemaining;\n        public byte CoolingMode;\n\n        public SYSTEM_POWER_INFORMATION(Pointer p) {\n            super(p);\n            read();\n        }\n\n        public SYSTEM_POWER_INFORMATION() {\n            super();\n        }\n    }\n\n    /**\n     * Contains information used to set the system power state.\n     */\n    @FieldOrder({ \"Action\", \"Flags\", \"EventCode\" })\n    class POWER_ACTION_POLICY extends Structure {\n        public int /* POWER_ACTION */ Action;\n        public int Flags;\n        public int EventCode;\n    }\n\n    /**\n     * Contains information about system battery drain policy settings.\n     */\n    @FieldOrder({ \"Enable\", \"Spare\", \"BatteryLevel\", \"PowerPolicy\", \"MinSystemState\" })\n    class SYSTEM_POWER_LEVEL extends Structure {\n        public byte Enable;\n        public byte[] Spare = new byte[3];\n        public int BatteryLevel;\n        public POWER_ACTION_POLICY PowerPolicy;\n        public int /* SYSTEM_POWER_STATE */ MinSystemState;\n    }\n\n    int NUM_DISCHARGE_POLICIES = 4;\n\n    /**\n     * Contains information about the current system power policy.\n     */\n    @FieldOrder({ \"Revision\", \"PowerButton\", \"SleepButton\", \"LidClose\", \"LidOpenWake\", \"Reserved\", \"Idle\",\n            \"IdleTimeout\", \"IdleSensitivity\", \"DynamicThrottle\", \"Spare2\", \"MinSleep\", \"MaxSleep\",\n            \"ReducedLatencySleep\", \"WinLogonFlags\", \"Spare3\", \"DozeS4Timeout\", \"BroadcastCapacityResolution\",\n            \"DischargePolicy\", \"VideoTimeout\", \"VideoDimDisplay\", \"VideoReserved\", \"SpindownTimeout\",\n            \"OptimizeForPower\", \"FanThrottleTolerance\", \"ForcedThrottle\", \"MinThrottle\", \"OverThrottled\" })\n    class SYSTEM_POWER_POLICY extends Structure {\n        public int Revision;\n        public POWER_ACTION_POLICY PowerButton;\n        public POWER_ACTION_POLICY SleepButton;\n        public POWER_ACTION_POLICY LidClose;\n        public int /* SYSTEM_POWER_STATE */ LidOpenWake;\n        public int Reserved;\n        public POWER_ACTION_POLICY Idle;\n        public int IdleTimeout;\n        public byte IdleSensitivity;\n        public byte DynamicThrottle;\n        public byte[] Spare2 = new byte[2];\n        public int /* SYSTEM_POWER_STATE */ MinSleep;\n        public int /* SYSTEM_POWER_STATE */ MaxSleep;\n        public int /* SYSTEM_POWER_STATE */ ReducedLatencySleep;\n        public int WinLogonFlags;\n        public int Spare3;\n        public int DozeS4Timeout;\n        public int BroadcastCapacityResolution;\n        public SYSTEM_POWER_LEVEL[] DischargePolicy = new SYSTEM_POWER_LEVEL[NUM_DISCHARGE_POLICIES];\n        public int VideoTimeout;\n        public byte VideoDimDisplay;\n        public int[] VideoReserved = new int[3];\n        public int SpindownTimeout;\n        public byte OptimizeForPower;\n        public byte FanThrottleTolerance;\n        public byte ForcedThrottle;\n        public byte MinThrottle;\n        public POWER_ACTION_POLICY OverThrottled;\n\n        public SYSTEM_POWER_POLICY(Pointer p) {\n            super(p);\n            read();\n        }\n\n        public SYSTEM_POWER_POLICY() {\n            super();\n        }\n    }\n\n    /**\n     * Contains information about the power capabilities of the system.\n     */\n    @FieldOrder({ \"PowerButtonPresent\", \"SleepButtonPresent\", \"LidPresent\", \"SystemS1\", \"SystemS2\", \"SystemS3\",\n            \"SystemS4\", \"SystemS5\", \"HiberFilePresent\", \"FullWake\", \"VideoDimPresent\", \"ApmPresent\", \"UpsPresent\",\n            \"ThermalControl\", \"ProcessorThrottle\", \"ProcessorMinThrottle\", \"ProcessorMaxThrottle\", \"FastSystemS4\",\n            \"Hiberboot\", \"WakeAlarmPresent\", \"AoAc\", \"DiskSpinDown\", \"HiberFileType\", \"AoAcConnectivitySupported\",\n            \"spare3\", \"SystemBatteriesPresent\", \"BatteriesAreShortTerm\", \"BatteryScale\", \"AcOnLineWake\", \"SoftLidWake\",\n            \"RtcWake\", \"MinDeviceWakeState\", \"DefaultLowLatencyWake\" })\n    class SYSTEM_POWER_CAPABILITIES extends Structure {\n        // Misc supported system features\n        public byte PowerButtonPresent;\n        public byte SleepButtonPresent;\n        public byte LidPresent;\n        public byte SystemS1;\n        public byte SystemS2;\n        public byte SystemS3;\n        public byte SystemS4; // hibernate\n        public byte SystemS5; // off\n        public byte HiberFilePresent;\n        public byte FullWake;\n        public byte VideoDimPresent;\n        public byte ApmPresent;\n        public byte UpsPresent;\n\n        // Processors\n        public byte ThermalControl;\n        public byte ProcessorThrottle;\n        public byte ProcessorMinThrottle;\n\n        // Prior to WinXP, next 5 bytes are ProcessorThrottleScale\n        // followed by 4 spare bytes\n        public byte ProcessorMaxThrottle;\n        public byte FastSystemS4;\n        public byte Hiberboot;\n        public byte WakeAlarmPresent;\n        public byte AoAc;\n\n        // Disk\n        public byte DiskSpinDown;\n\n        // HiberFile (Pre-Win10 next 2 bytes are spare)\n        public byte HiberFileType;\n        public byte AoAcConnectivitySupported;\n        public byte[] spare3 = new byte[6];\n\n        // System Battery\n        public byte SystemBatteriesPresent;\n        public byte BatteriesAreShortTerm;\n        public BATTERY_REPORTING_SCALE[] BatteryScale = new BATTERY_REPORTING_SCALE[3];\n\n        // Wake\n        public int /* SYSTEM_POWER_STATE */ AcOnLineWake;\n        public int /* SYSTEM_POWER_STATE */ SoftLidWake;\n        public int /* SYSTEM_POWER_STATE */ RtcWake;\n        public int /* SYSTEM_POWER_STATE */ MinDeviceWakeState;\n        public int /* SYSTEM_POWER_STATE */ DefaultLowLatencyWake;\n\n        public SYSTEM_POWER_CAPABILITIES(Pointer p) {\n            super(p);\n            read();\n        }\n\n        public SYSTEM_POWER_CAPABILITIES() {\n            super();\n        }\n    }\n    /**\n     * Indicates committed pages for which physical storage has been allocated,\n     * either in memory or in the paging file on disk.\n     */\n    int MEM_COMMIT = 0x1000;\n\n    /**\n     * Indicates free pages not accessible to the calling process and available to be allocated.\n     * For free pages, the information in the AllocationBase, AllocationProtect, Protect, and Type members is undefined.\n     */\n    int MEM_FREE = 0x10000;\n\n    /**\n     * Indicates reserved pages where a range of the process's virtual address space is reserved without any physical storage being allocated.\n     * For reserved pages, the information in the Protect member is undefined.\n     */\n    int MEM_RESERVE = 0x2000;\n\n    /**\n     * Indicates that the memory pages within the region are mapped into the view of an image section.\n     */\n    int MEM_IMAGE = 0x1000000;\n\n    /**\n     * Indicates that the memory pages within the region are mapped into the view of a section.\n     */\n    int MEM_MAPPED = 0x40000;\n\n    /**\n     * Indicates that the memory pages within the region are private (that is, not shared by other processes).\n     */\n    int MEM_PRIVATE = 0x20000;\n\n    /**\n     * Indicates that data in the memory range specified by lpAddress and dwSize\n     * is no longer of interest. The pages should not be read from or written to\n     * the paging file. However, the memory block will be used again later, so\n     * it should not be decommitted.\n     */\n    int MEM_RESET = 0x00080000;\n\n    /**\n     * MEM_RESET_UNDO should only be called on an address range to which\n     * MEM_RESET was successfully applied earlier. It indicates that the data in\n     * the specified memory range specified by lpAddress and dwSize is of\n     * interest to the caller and attempts to reverse the effects of MEM_RESET.\n     */\n    int MEM_RESET_UNDO = 0x1000000;\n\n    /**\n     * Allocates memory using large page support.\n     * <p>\n     * The size and alignment must be a multiple of the large-page minimum. To\n     * obtain this value, use the GetLargePageMinimum function.\n     * <p>\n     * If you specify this value, you must also specify MEM_RESERVE and\n     * MEM_COMMIT.\n     */\n    int MEM_LARGE_PAGES = 0x20000000;\n\n    /**\n     * Reserves an address range that can be used to map Address Windowing\n     * Extensions (AWE) pages.\n     * <p>\n     * This value must be used with MEM_RESERVE and no other values.\n     */\n    int MEM_PHYSICAL = 0x00400000;\n\n    /**\n     * Allocates memory at the highest possible address. This can be slower than\n     * regular allocations, especially when there are many allocations.\n     */\n    int MEM_TOP_DOWN = 0x00100000;\n\n    /**\n     * To coalesce two adjacent placeholders, specify MEM_RELEASE |\n     * MEM_COALESCE_PLACEHOLDERS. When you coalesce placeholders, lpAddress and\n     * dwSize must exactly match those of the placeholder.\n     */\n    int MEM_COALESCE_PLACEHOLDERS = 0x00000001;\n\n    /**\n     * Frees an allocation back to a placeholder (after you've replaced a\n     * placeholder with a private allocation using VirtualAlloc2 or\n     * Virtual2AllocFromApp).\n     * <p>\n     * To split a placeholder into two placeholders, specify MEM_RELEASE |\n     * MEM_PRESERVE_PLACEHOLDER.</p>\n     */\n    int MEM_PRESERVE_PLACEHOLDER = 0x00000002;\n\n    /**\n     * Decommits the specified region of committed pages. After the operation,\n     * the pages are in the reserved state.\n     * <p>\n     * The function does not fail if you attempt to decommit an uncommitted\n     * page. This means that you can decommit a range of pages without first\n     * determining their current commitment state.\n     * <p>\n     * Do not use this value with MEM_RELEASE.\n     * <p>\n     * The MEM_DECOMMIT value is not supported when the lpAddress parameter\n     * provides the base address for an enclave.\n     */\n    int MEM_DECOMMIT = 0x4000;\n\n    /**\n     * Releases the specified region of pages, or placeholder (for a\n     * placeholder, the address space is released and available for other\n     * allocations). After the operation, the pages are in the free state.\n     * <p>\n     * If you specify this value, dwSize must be 0 (zero), and lpAddress must\n     * point to the base address returned by the VirtualAllocEx function when\n     * the region is reserved. The function fails if either of these conditions\n     * is not met.\n     * <p>\n     * If any pages in the region are committed currently, the function first\n     * decommits, and then releases them.\n     * <p>\n     * The function does not fail if you attempt to release pages that are in\n     * different states, some reserved and some committed. This means that you\n     * can release a range of pages without first determining the current\n     * commitment state.\n     * <p>\n     * Do not use this value with MEM_DECOMMIT.\n     */\n    int MEM_RELEASE = 0x8000;\n\n    @FieldOrder({\"baseAddress\", \"allocationBase\", \"allocationProtect\",\n                \"regionSize\", \"state\", \"protect\", \"type\"})\n    public static class MEMORY_BASIC_INFORMATION extends Structure {\n        /**\n         * A pointer to the base address of the region of pages.\n         */\n        public Pointer baseAddress;\n\n        /**\n         * A pointer to the base address of a range of pages allocated by the VirtualAlloc function.\n         * The page pointed to by the BaseAddress member is contained within this allocation range.\n         */\n        public Pointer allocationBase;\n\n        /**\n         * The memory protection option when the region was initially allocated.\n         * This member can be one of the memory protection constants or 0 if the caller does not have access.\n         */\n        public DWORD allocationProtect;\n\n        /**\n         * The size of the region beginning at the base address in which all pages have identical attributes, in bytes.\n         */\n        public SIZE_T regionSize;\n\n        /**\n         * The state of the pages in the region.\n         * This member can be one of the following values:\n         *\n         * MEM_COMMIT,\n         * MEM_FREE,\n         * MEM_RESERVE.\n         */\n        public DWORD state;\n\n        /**\n         * The access protection of the pages in the region.\n         * This member is one of the values listed for the AllocationProtect member.\n         */\n        public DWORD protect;\n\n        /**\n         * The type of pages in the region.\n         * The following types are defined:\n         *\n         * MEM_IMAGE\n         * MEM_MAPPED\n         * MEM_PRIVATE\n         */\n        public DWORD type;\n    }\n\n    @FieldOrder({\"Length\", \"ImpersonationLevel\", \"ContextTrackingMode\", \"EffectiveOnly\"})\n    public class SECURITY_QUALITY_OF_SERVICE extends Structure {\n        /** Specifies the size, in bytes, of this structure.\n         */\n        public int Length;\n        /**\n         * Specifies the information given to the server about the client, and\n         * how the server may represent, or impersonate, the client. Security\n         * impersonation levels govern the degree to which a server process can\n         * act on behalf of a client process. This member is a\n         * {@link WinNT.SECURITY_IMPERSONATION_LEVEL} enumeration type value.\n         */\n        public int ImpersonationLevel;\n        /**\n         * Specifies whether the server is to be given a snapshot of the\n         * client's security context (called static tracking), or is to be\n         * continually updated to track changes to the client's security context\n         * (called dynamic tracking). The {@link WinNT#SECURITY_STATIC_TRACKING}\n         * value specifies static tracking, and the\n         * {@link WinNT#SECURITY_DYNAMIC_TRACKING} value specifies dynamic\n         * tracking. Not all communications mechanisms support dynamic tracking;\n         * those that do not will default to static tracking.\n         */\n        public byte ContextTrackingMode;\n        /**\n         * Specifies whether the server may enable or disable privileges and\n         * groups that the client's security context may include.\n         *\n         * <p>This is a boolean value. See {@link WinNT#BOOLEAN_TRUE} and\n         * {@link WinNT#BOOLEAN_FALSE}.</p>\n         */\n        public byte EffectiveOnly;\n\n        @Override\n        public void write() {\n            this.Length = size();\n            super.write();\n        }\n    }\n\n    byte SECURITY_DYNAMIC_TRACKING = (byte) 1;\n    byte SECURITY_STATIC_TRACKING = (byte) 0;\n    byte BOOLEAN_TRUE = (byte) 1;\n    byte BOOLEAN_FALSE = (byte) 0;\n\n    /*\n     * Primary language IDs.\n     */\n    public static final int LANG_NEUTRAL                    = 0x00;\n    public static final int LANG_INVARIANT                  = 0x7f;\n\n    public static final int LANG_AFRIKAANS                  = 0x36;\n    public static final int LANG_ALBANIAN                   = 0x1c;\n    public static final int LANG_ARABIC                     = 0x01;\n    public static final int LANG_ARMENIAN                   = 0x2b;\n    public static final int LANG_ASSAMESE                   = 0x4d;\n    public static final int LANG_AZERI                      = 0x2c;\n    public static final int LANG_BASQUE                     = 0x2d;\n    public static final int LANG_BELARUSIAN                 = 0x23;\n    public static final int LANG_BENGALI                    = 0x45;\n    public static final int LANG_BULGARIAN                  = 0x02;\n    public static final int LANG_CATALAN                    = 0x03;\n    public static final int LANG_CHINESE                    = 0x04;\n    public static final int LANG_CROATIAN                   = 0x1a;\n    public static final int LANG_CZECH                      = 0x05;\n    public static final int LANG_DANISH                     = 0x06;\n    public static final int LANG_DIVEHI                     = 0x65;\n    public static final int LANG_DUTCH                      = 0x13;\n    public static final int LANG_ENGLISH                    = 0x09;\n    public static final int LANG_ESTONIAN                   = 0x25;\n    public static final int LANG_FAEROESE                   = 0x38;\n    public static final int LANG_FARSI                      = 0x29;\n    public static final int LANG_FINNISH                    = 0x0b;\n    public static final int LANG_FRENCH                     = 0x0c;\n    public static final int LANG_GALICIAN                   = 0x56;\n    public static final int LANG_GEORGIAN                   = 0x37;\n    public static final int LANG_GERMAN                     = 0x07;\n    public static final int LANG_GREEK                      = 0x08;\n    public static final int LANG_GUJARATI                   = 0x47;\n    public static final int LANG_HEBREW                     = 0x0d;\n    public static final int LANG_HINDI                      = 0x39;\n    public static final int LANG_HUNGARIAN                  = 0x0e;\n    public static final int LANG_ICELANDIC                  = 0x0f;\n    public static final int LANG_INDONESIAN                 = 0x21;\n    public static final int LANG_ITALIAN                    = 0x10;\n    public static final int LANG_JAPANESE                   = 0x11;\n    public static final int LANG_KANNADA                    = 0x4b;\n    public static final int LANG_KASHMIRI                   = 0x60;\n    public static final int LANG_KAZAK                      = 0x3f;\n    public static final int LANG_KONKANI                    = 0x57;\n    public static final int LANG_KOREAN                     = 0x12;\n    public static final int LANG_KYRGYZ                     = 0x40;\n    public static final int LANG_LATVIAN                    = 0x26;\n    public static final int LANG_LITHUANIAN                 = 0x27;\n    public static final int LANG_MACEDONIAN                 = 0x2f;   // the Former Yugoslav Republic of Macedonia\n    public static final int LANG_MALAY                      = 0x3e;\n    public static final int LANG_MALAYALAM                  = 0x4c;\n    public static final int LANG_MANIPURI                   = 0x58;\n    public static final int LANG_MARATHI                    = 0x4e;\n    public static final int LANG_MONGOLIAN                  = 0x50;\n    public static final int LANG_NEPALI                     = 0x61;\n    public static final int LANG_NORWEGIAN                  = 0x14;\n    public static final int LANG_ORIYA                      = 0x48;\n    public static final int LANG_POLISH                     = 0x15;\n    public static final int LANG_PORTUGUESE                 = 0x16;\n    public static final int LANG_PUNJABI                    = 0x46;\n    public static final int LANG_ROMANIAN                   = 0x18;\n    public static final int LANG_RUSSIAN                    = 0x19;\n    public static final int LANG_SANSKRIT                   = 0x4f;\n    public static final int LANG_SERBIAN                    = 0x1a;\n    public static final int LANG_SINDHI                     = 0x59;\n    public static final int LANG_SLOVAK                     = 0x1b;\n    public static final int LANG_SLOVENIAN                  = 0x24;\n    public static final int LANG_SPANISH                    = 0x0a;\n    public static final int LANG_SWAHILI                    = 0x41;\n    public static final int LANG_SWEDISH                    = 0x1d;\n    public static final int LANG_SYRIAC                     = 0x5a;\n    public static final int LANG_TAMIL                      = 0x49;\n    public static final int LANG_TATAR                      = 0x44;\n    public static final int LANG_TELUGU                     = 0x4a;\n    public static final int LANG_THAI                       = 0x1e;\n    public static final int LANG_TURKISH                    = 0x1f;\n    public static final int LANG_UKRAINIAN                  = 0x22;\n    public static final int LANG_URDU                       = 0x20;\n    public static final int LANG_UZBEK                      = 0x43;\n    public static final int LANG_VIETNAMESE                 = 0x2a;\n\n    /*\n     * Sublanguage IDs.\n     *\n     * The name immediately following SUBLANG_ dictates which primary\n     * language ID that sublanguage ID can be combined with to form a\n     * valid language ID.\n     */\n    public static final int SUBLANG_NEUTRAL                 = 0x00;    // language neutral\n    public static final int SUBLANG_DEFAULT                 = 0x01;    // user default\n    public static final int SUBLANG_SYS_DEFAULT             = 0x02;    // system default\n\n    public static final int SUBLANG_ARABIC_SAUDI_ARABIA     = 0x01;    // Arabic (Saudi Arabia)\n    public static final int SUBLANG_ARABIC_IRAQ             = 0x02;    // Arabic (Iraq)\n    public static final int SUBLANG_ARABIC_EGYPT            = 0x03;    // Arabic (Egypt)\n    public static final int SUBLANG_ARABIC_LIBYA            = 0x04;    // Arabic (Libya)\n    public static final int SUBLANG_ARABIC_ALGERIA          = 0x05;    // Arabic (Algeria)\n    public static final int SUBLANG_ARABIC_MOROCCO          = 0x06;    // Arabic (Morocco)\n    public static final int SUBLANG_ARABIC_TUNISIA          = 0x07;    // Arabic (Tunisia)\n    public static final int SUBLANG_ARABIC_OMAN             = 0x08;    // Arabic (Oman)\n    public static final int SUBLANG_ARABIC_YEMEN            = 0x09;    // Arabic (Yemen)\n    public static final int SUBLANG_ARABIC_SYRIA            = 0x0a;    // Arabic (Syria)\n    public static final int SUBLANG_ARABIC_JORDAN           = 0x0b;    // Arabic (Jordan)\n    public static final int SUBLANG_ARABIC_LEBANON          = 0x0c;    // Arabic (Lebanon)\n    public static final int SUBLANG_ARABIC_KUWAIT           = 0x0d;    // Arabic (Kuwait)\n    public static final int SUBLANG_ARABIC_UAE              = 0x0e;    // Arabic (U.A.E)\n    public static final int SUBLANG_ARABIC_BAHRAIN          = 0x0f;    // Arabic (Bahrain)\n    public static final int SUBLANG_ARABIC_QATAR            = 0x10;    // Arabic (Qatar)\n    public static final int SUBLANG_AZERI_LATIN             = 0x01;    // Azeri (Latin)\n    public static final int SUBLANG_AZERI_CYRILLIC          = 0x02;    // Azeri (Cyrillic)\n    public static final int SUBLANG_CHINESE_TRADITIONAL     = 0x01;    // Chinese (Taiwan)\n    public static final int SUBLANG_CHINESE_SIMPLIFIED      = 0x02;    // Chinese (PR China)\n    public static final int SUBLANG_CHINESE_HONGKONG        = 0x03;    // Chinese (Hong Kong S.A.R., P.R.C.)\n    public static final int SUBLANG_CHINESE_SINGAPORE       = 0x04;    // Chinese (Singapore)\n    public static final int SUBLANG_CHINESE_MACAU           = 0x05;    // Chinese (Macau S.A.R.)\n    public static final int SUBLANG_DUTCH                   = 0x01;    // Dutch\n    public static final int SUBLANG_DUTCH_BELGIAN           = 0x02;    // Dutch (Belgian)\n    public static final int SUBLANG_ENGLISH_US              = 0x01;    // English (USA)\n    public static final int SUBLANG_ENGLISH_UK              = 0x02;    // English (UK)\n    public static final int SUBLANG_ENGLISH_AUS             = 0x03;    // English (Australian)\n    public static final int SUBLANG_ENGLISH_CAN             = 0x04;    // English (Canadian)\n    public static final int SUBLANG_ENGLISH_NZ              = 0x05;    // English (New Zealand)\n    public static final int SUBLANG_ENGLISH_EIRE            = 0x06;    // English (Irish)\n    public static final int SUBLANG_ENGLISH_SOUTH_AFRICA    = 0x07;    // English (South Africa)\n    public static final int SUBLANG_ENGLISH_JAMAICA         = 0x08;    // English (Jamaica)\n    public static final int SUBLANG_ENGLISH_CARIBBEAN       = 0x09;    // English (Caribbean)\n    public static final int SUBLANG_ENGLISH_BELIZE          = 0x0a;    // English (Belize)\n    public static final int SUBLANG_ENGLISH_TRINIDAD        = 0x0b;    // English (Trinidad)\n    public static final int SUBLANG_ENGLISH_ZIMBABWE        = 0x0c;    // English (Zimbabwe)\n    public static final int SUBLANG_ENGLISH_PHILIPPINES     = 0x0d;    // English (Philippines)\n    public static final int SUBLANG_FRENCH                  = 0x01;    // French\n    public static final int SUBLANG_FRENCH_BELGIAN          = 0x02;    // French (Belgian)\n    public static final int SUBLANG_FRENCH_CANADIAN         = 0x03;    // French (Canadian)\n    public static final int SUBLANG_FRENCH_SWISS            = 0x04;    // French (Swiss)\n    public static final int SUBLANG_FRENCH_LUXEMBOURG       = 0x05;    // French (Luxembourg)\n    public static final int SUBLANG_FRENCH_MONACO           = 0x06;    // French (Monaco)\n    public static final int SUBLANG_GERMAN                  = 0x01;    // German\n    public static final int SUBLANG_GERMAN_SWISS            = 0x02;    // German (Swiss)\n    public static final int SUBLANG_GERMAN_AUSTRIAN         = 0x03;    // German (Austrian)\n    public static final int SUBLANG_GERMAN_LUXEMBOURG       = 0x04;    // German (Luxembourg)\n    public static final int SUBLANG_GERMAN_LIECHTENSTEIN    = 0x05;    // German (Liechtenstein)\n    public static final int SUBLANG_ITALIAN                 = 0x01;    // Italian\n    public static final int SUBLANG_ITALIAN_SWISS           = 0x02;    // Italian (Swiss)\n    public static final int SUBLANG_KASHMIRI_SASIA          = 0x02;    // Kashmiri (South Asia)\n    public static final int SUBLANG_KASHMIRI_INDIA          = 0x02;    // For app compatibility only\n    public static final int SUBLANG_KOREAN                  = 0x01;    // Korean (Extended Wansung)\n    public static final int SUBLANG_LITHUANIAN              = 0x01;    // Lithuanian\n    public static final int SUBLANG_MALAY_MALAYSIA          = 0x01;    // Malay (Malaysia)\n    public static final int SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x02;    // Malay (Brunei Darussalam)\n    public static final int SUBLANG_NEPALI_INDIA            = 0x02;    // Nepali (India)\n    public static final int SUBLANG_NORWEGIAN_BOKMAL        = 0x01;    // Norwegian (Bokmal)\n    public static final int SUBLANG_NORWEGIAN_NYNORSK       = 0x02;    // Norwegian (Nynorsk)\n    public static final int SUBLANG_PORTUGUESE              = 0x02;    // Portuguese\n    public static final int SUBLANG_PORTUGUESE_BRAZILIAN    = 0x01;    // Portuguese (Brazilian)\n    public static final int SUBLANG_SERBIAN_LATIN           = 0x02;    // Serbian (Latin)\n    public static final int SUBLANG_SERBIAN_CYRILLIC        = 0x03;    // Serbian (Cyrillic)\n    public static final int SUBLANG_SPANISH                 = 0x01;    // Spanish (Castilian)\n    public static final int SUBLANG_SPANISH_MEXICAN         = 0x02;    // Spanish (Mexican)\n    public static final int SUBLANG_SPANISH_MODERN          = 0x03;    // Spanish (Spain)\n    public static final int SUBLANG_SPANISH_GUATEMALA       = 0x04;    // Spanish (Guatemala)\n    public static final int SUBLANG_SPANISH_COSTA_RICA      = 0x05;    // Spanish (Costa Rica)\n    public static final int SUBLANG_SPANISH_PANAMA          = 0x06;    // Spanish (Panama)\n    public static final int SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x07; // Spanish (Dominican Republic)\n    public static final int SUBLANG_SPANISH_VENEZUELA       = 0x08;    // Spanish (Venezuela)\n    public static final int SUBLANG_SPANISH_COLOMBIA        = 0x09;    // Spanish (Colombia)\n    public static final int SUBLANG_SPANISH_PERU            = 0x0a;    // Spanish (Peru)\n    public static final int SUBLANG_SPANISH_ARGENTINA       = 0x0b;    // Spanish (Argentina)\n    public static final int SUBLANG_SPANISH_ECUADOR         = 0x0c;    // Spanish (Ecuador)\n    public static final int SUBLANG_SPANISH_CHILE           = 0x0d;    // Spanish (Chile)\n    public static final int SUBLANG_SPANISH_URUGUAY         = 0x0e;    // Spanish (Uruguay)\n    public static final int SUBLANG_SPANISH_PARAGUAY        = 0x0f;    // Spanish (Paraguay)\n    public static final int SUBLANG_SPANISH_BOLIVIA         = 0x10;    // Spanish (Bolivia)\n    public static final int SUBLANG_SPANISH_EL_SALVADOR     = 0x11;    // Spanish (El Salvador)\n    public static final int SUBLANG_SPANISH_HONDURAS        = 0x12;    // Spanish (Honduras)\n    public static final int SUBLANG_SPANISH_NICARAGUA       = 0x13;    // Spanish (Nicaragua)\n    public static final int SUBLANG_SPANISH_PUERTO_RICO     = 0x14;    // Spanish (Puerto Rico)\n    public static final int SUBLANG_SWEDISH                 = 0x01;    // Swedish\n    public static final int SUBLANG_SWEDISH_FINLAND         = 0x02;    // Swedish (Finland)\n    public static final int SUBLANG_URDU_PAKISTAN           = 0x01;    // Urdu (Pakistan)\n    public static final int SUBLANG_URDU_INDIA              = 0x02;    // Urdu (India)\n    public static final int SUBLANG_UZBEK_LATIN             = 0x01;    // Uzbek (Latin)\n    public static final int SUBLANG_UZBEK_CYRILLIC          = 0x02;    // Uzbek (Cyrillic)\n\n    /*\n     * Sorting IDs.\n     */\n    public static final int SORT_DEFAULT                    = 0x0;     // sorting default\n\n    public static final int SORT_JAPANESE_XJIS              = 0x0;     // Japanese XJIS order\n    public static final int SORT_JAPANESE_UNICODE           = 0x1;     // Japanese Unicode order\n\n    public static final int SORT_CHINESE_BIG5               = 0x0;     // Chinese BIG5 order\n    public static final int SORT_CHINESE_PRCP               = 0x0;     // PRC Chinese Phonetic order\n    public static final int SORT_CHINESE_UNICODE            = 0x1;     // Chinese Unicode order\n    public static final int SORT_CHINESE_PRC                = 0x2;     // PRC Chinese Stroke Count order\n    public static final int SORT_CHINESE_BOPOMOFO           = 0x3;     // Traditional Chinese Bopomofo order\n\n    public static final int SORT_KOREAN_KSC                 = 0x0;     // Korean KSC order\n    public static final int SORT_KOREAN_UNICODE             = 0x1;     // Korean Unicode order\n\n    public static final int SORT_GERMAN_PHONE_BOOK          = 0x1;     // German Phone Book order\n\n    public static final int SORT_HUNGARIAN_DEFAULT          = 0x0;     // Hungarian Default order\n    public static final int SORT_HUNGARIAN_TECHNICAL        = 0x1;     // Hungarian Technical order\n\n    public static final int SORT_GEORGIAN_TRADITIONAL       = 0x0;     // Georgian Traditional order\n    public static final int SORT_GEORGIAN_MODERN            = 0x1;     // Georgian Modern order\n\n    public static final int NLS_VALID_LOCALE_MASK = 0x000fffff;\n\n    /**\n     *  <p>A language ID is a 16 bit value which is the combination of a\n     *  primary language ID and a secondary language ID.  The bits are\n     *  allocated as follows:</p>\n     *\n     *  <pre>\n     *       +-----------------------+-------------------------+\n     *       |     Sublanguage ID    |   Primary Language ID   |\n     *       +-----------------------+-------------------------+\n     *        15                   10 9                       0   bit\n     *  </pre>\n     *\n     *  <p>WARNING:  This pattern isn't always follows, Serbina, Bosnian &amp; Croation for example.</p>\n     *\n     *  <p>It is recommended that applications test for locale names or actual LCIDs.</p>\n     *\n     *  <p>Note that the LANG, SUBLANG construction is not always consistent.\n     *  The named locale APIs (eg GetLocaleInfoEx) are recommended.</p>\n     *\n     *  <p>Language IDs do not exist for all locales</p>\n     *\n     *  <p>A locale ID is a 32 bit value which is the combination of a\n     *  language ID, a sort ID, and a reserved area.  The bits are\n     * allocated as follows:</p>\n     *\n     * <pre>\n     *   +-------------+---------+-------------------------+\n     *   |   Reserved  | Sort ID |      Language ID        |\n     *   +-------------+---------+-------------------------+\n     *    31         20 19     16 15                      0   bit\n     * </pre>\n     *\n     * <p>WARNING: This pattern isn't always followed (es-ES_tradnl vs es-ES for example)</p>\n     *\n     * <p>It is recommended that applications test for locale names or actual LCIDs.</p>\n     */\n    public static final class LocaleMacros {\n        private static final int _MAKELCID(int lgid, int srtid) {\n            return (srtid << 16) | lgid;\n        }\n\n        /**\n         * construct the locale id from a language id and a sort id.\n         *\n         * @param lgid language id\n         * @param srtid sort id\n         * @return locale id derived from ldig and srtid\n         */\n        public static final LCID MAKELCID(int lgid, int srtid) {\n            return new LCID(_MAKELCID(lgid, srtid));\n        }\n\n        /**\n         * construct the locale id from a language id, sort id, and sort version.\n         *\n         * @param lgid locale id\n         * @param srtid sort id\n         * @param ver sort version\n         * @return locale id derviced from a language id, sort id, and sort version.\n         */\n        public static final LCID MAKESORTLCID(int lgid, int srtid, int ver) {\n            return new LCID(_MAKELCID(lgid, srtid) | (ver << 20));\n        }\n\n        /**\n         * extract the language id from a locale id.\n         *\n         * @param lcid locale id\n         * @return extracted language id\n         */\n        public static final int LANGIDFROMLCID(LCID lcid) {\n            return lcid.intValue() & 0xFFFF;\n        }\n\n        /**\n         * extract the sort id from a locale id.\n         *\n         * @param lcid locale id\n         * @return extracted sort id\n         */\n        public static final int SORTIDFROMLCID(LCID lcid) {\n            return (lcid.intValue() >>> 16) & 0xf;\n        }\n\n        /**\n         * extract the sort version from a locale id.\n         *\n         * @param lcid locale id\n         * @return extracted sort version\n         */\n        public static final int SORTVERSIONFROMLCID(LCID lcid) {\n            return (lcid.intValue() >>> 20) & 0xf;\n        }\n\n        /**\n         * Construct language id from a primary language id and a sublanguage id.\n         *\n         * @param p primary language ID\n         * @param s sublanguage ID\n         * @return constructed language id\n         */\n        public static final int MAKELANGID(int p, int s) {\n            return (s << 10) | (p & 0xFFFF);\n        }\n\n        /**\n         * Extract primary language id from a language id.\n         *\n         * @param lgid language ID\n         * @return extracted primary language id\n         */\n        public static final int PRIMARYLANGID(int lgid) {\n            return lgid & 0x3ff;\n        }\n\n        /**\n         * Extract sublanguage id from a language id.\n         *\n         * @param lgid language ID\n         * @return extracted sublanguage id\n         */\n        public static final int SUBLANGID(int lgid) {\n            return (lgid  & 0xFFFF) >>> 10;\n        }\n    }\n\n    public static final int  LANG_SYSTEM_DEFAULT   = LocaleMacros.MAKELANGID(LANG_NEUTRAL, SUBLANG_SYS_DEFAULT);\n    public static final int  LANG_USER_DEFAULT     = LocaleMacros.MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT);\n\n    public static final LCID LOCALE_SYSTEM_DEFAULT = LocaleMacros.MAKELCID(LANG_SYSTEM_DEFAULT, SORT_DEFAULT);\n    public static final LCID LOCALE_USER_DEFAULT   = LocaleMacros.MAKELCID(LANG_USER_DEFAULT, SORT_DEFAULT);\n\n    public static final LCID LOCALE_NEUTRAL        = LocaleMacros.MAKELCID(LocaleMacros.MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), SORT_DEFAULT);\n\n    public static final LCID LOCALE_INVARIANT      = LocaleMacros.MAKELCID(LocaleMacros.MAKELANGID(LANG_INVARIANT, SUBLANG_NEUTRAL), SORT_DEFAULT);\n\n    /**\n     * The IO_COUNTERS structure contains I/O accounting information for a\n     * process or a job object. For a job object, the counters include all\n     * operations performed by all processes that have ever been associated with\n     * the job, in addition to all processes currently associated with the job.\n     */\n    @FieldOrder({\"ReadOperationCount\", \"WriteOperationCount\",\n        \"OtherOperationCount\", \"ReadTransferCount\", \"WriteTransferCount\",\n        \"OtherTransferCount\"})\n    public static class IO_COUNTERS extends Structure {\n        /**\n         * The number of read operations performed.\n         */\n        public long ReadOperationCount;\n\n        /**\n         * The number of write operations performed.\n         */\n        public long WriteOperationCount;\n\n        /**\n         * The number of I/O operations performed, other than read and write\n         * operations.\n         */\n        public long OtherOperationCount;\n\n        /**\n         * The number of bytes read.\n         */\n        public long ReadTransferCount;\n\n        /**\n         * The number of bytes written.\n         */\n        public long WriteTransferCount;\n\n        /**\n         * The number of bytes transferred during operations other than read and\n         * write operations.\n         */\n        public long OtherTransferCount;\n\n        public IO_COUNTERS() {\n            super();\n        }\n\n        public IO_COUNTERS(Pointer memory) {\n            super(memory);\n        }\n    }\n\n    public int EVENT_MODIFY_STATE = 0x0002;\n    public int EVENT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x3);\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/WinNT.java", "commit_date": "2020-05-17 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Return the domain/workgroup join status for a computer.\n * @param computerName Computer name.\n * @return Join status.\n */\n", "func_signal": "public static int getJoinStatus(String computerName)", "code": "{\n    PointerByReference lpNameBuffer = new PointerByReference();\n    IntByReference bufferType = new IntByReference();\n\n    try {\n        int rc = Netapi32.INSTANCE.NetGetJoinInformation(computerName, lpNameBuffer, bufferType);\n        if (LMErr.NERR_Success != rc) {\n            throw new Win32Exception(rc);\n        }\n        return bufferType.getValue();\n    } finally {\n        if (lpNameBuffer.getPointer() != null) {\n            int rc = Netapi32.INSTANCE.NetApiBufferFree(lpNameBuffer.getValue());\n            if (LMErr.NERR_Success != rc) {\n                throw new Win32Exception(rc);\n            }\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Instantiates a new tlb property get.\n *\n * @param index\n *            the index\n * @param typeLibUtil\n *            the type lib util\n * @param funcDesc\n *            the func desc\n * @param typeInfoUtil\n *            the type info util\n */\n", "func_signal": "public TlbPropertyGet(int count, int index, TypeLibUtil typeLibUtil,\n        FUNCDESC funcDesc, TypeInfoUtil typeInfoUtil)", "code": "{\n    super(index, typeLibUtil, funcDesc, typeInfoUtil);\n\n    this.methodName = \"get\" + this.getMethodName();\n\n    this.replaceVariable(\"helpstring\", docStr);\n    this.replaceVariable(\"returntype\", returnType);\n    this.replaceVariable(\"methodname\", methodName);\n    this.replaceVariable(\"vtableid\", String.valueOf(vtableId));\n    this.replaceVariable(\"memberid\", String.valueOf(memberid));\n    this.replaceVariable(\"functionCount\", String.valueOf(count));\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/COM/tlb/imp/TlbPropertyGet.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Get the names of users on a computer.\n * @param serverName Name of the computer.\n * @return An array of users.\n */\n", "func_signal": "public static User[] getUsers(String serverName)", "code": "{\n    PointerByReference bufptr = new PointerByReference();\n    IntByReference entriesRead = new IntByReference();\n    IntByReference totalEntries = new IntByReference();\n    try {\n        int rc = Netapi32.INSTANCE.NetUserEnum(\n                serverName, 1, 0, bufptr,\n                LMCons.MAX_PREFERRED_LENGTH, entriesRead,\n                totalEntries, null);\n        if (LMErr.NERR_Success != rc || bufptr.getValue() == Pointer.NULL) {\n            throw new Win32Exception(rc);\n        }\n\n        ArrayList<User> result = new ArrayList<User>();\n\n        if (entriesRead.getValue() > 0) {\n            LMAccess.USER_INFO_1 user = new LMAccess.USER_INFO_1(bufptr.getValue());\n            LMAccess.USER_INFO_1[] users = (LMAccess.USER_INFO_1[]) user.toArray(entriesRead.getValue());\n            for (LMAccess.USER_INFO_1 lu : users) {\n                User auser = new User();\n                if (lu.usri1_name != null) {\n                    auser.name = lu.usri1_name;\n                }\n                result.add(auser);\n            }\n        }\n\n        return result.toArray(new User[0]);\n    } finally {\n        if (bufptr.getValue() != Pointer.NULL) {\n            int rc = Netapi32.INSTANCE.NetApiBufferFree(bufptr.getValue());\n            if (LMErr.NERR_Success != rc) {\n                throw new Win32Exception(rc);\n            }\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Return the domain controller for a current computer.\n * @return\n *  Domain controller information.\n */\n", "func_signal": "public static DomainController getDC()", "code": "{\n    PDOMAIN_CONTROLLER_INFO pdci = new PDOMAIN_CONTROLLER_INFO();\n    int rc = Netapi32.INSTANCE.DsGetDcName(null, null, null, null, 0, pdci);\n    if (W32Errors.ERROR_SUCCESS != rc) {\n        throw new Win32Exception(rc);\n    }\n    DomainController dc = new DomainController();\n    dc.address = pdci.dci.DomainControllerAddress;\n    dc.addressType = pdci.dci.DomainControllerAddressType;\n    dc.clientSiteName = pdci.dci.ClientSiteName;\n    dc.dnsForestName = pdci.dci.DnsForestName;\n    dc.domainGuid = pdci.dci.DomainGuid;\n    dc.domainName = pdci.dci.DomainName;\n    dc.flags = pdci.dci.Flags;\n    dc.name = pdci.dci.DomainControllerName;\n    rc = Netapi32.INSTANCE.NetApiBufferFree(pdci.dci.getPointer());\n    if (LMErr.NERR_Success != rc) {\n        throw new Win32Exception(rc);\n    }\n    return dc;\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Append the stack trace available via caughtException to the stack trace\n * of toBeThrown. The combined stack trace is reassigned to toBeThrown\n */\n", "func_signal": "private static void appendStacktrace(Exception caughtException, Throwable toBeThrown)", "code": "{\n    StackTraceElement[] upperTrace = caughtException.getStackTrace();\n    StackTraceElement[] lowerTrace = toBeThrown.getStackTrace();\n    StackTraceElement[] trace = new StackTraceElement[upperTrace.length + lowerTrace.length];\n    System.arraycopy(upperTrace, 0, trace, lowerTrace.length, upperTrace.length);\n    System.arraycopy(lowerTrace, 0, trace, 0, lowerTrace.length);\n    toBeThrown.setStackTrace(trace);\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/COM/util/Factory.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "// ------------------------ IUnknown ------------------------------\n", "func_signal": "@Override\npublic HRESULT QueryInterface(REFIID refid, PointerByReference ppvObject)", "code": "{\n    if (null == ppvObject) {\n        return new HRESULT(WinError.E_POINTER);\n    } else if (refid.equals(this.listenedToRiid)) {\n        ppvObject.setValue(this.getPointer());\n        return WinError.S_OK;\n    } else if (refid.getValue().equals(Unknown.IID_IUNKNOWN)) {\n        ppvObject.setValue(this.getPointer());\n        return WinError.S_OK;\n    } else if (refid.getValue().equals(Dispatch.IID_IDISPATCH)) {\n        ppvObject.setValue(this.getPointer());\n        return WinError.S_OK;\n    }\n\n    return new HRESULT(WinError.E_NOINTERFACE);\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/COM/util/CallbackProxy.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Get groups of a given user on a given system.\n * @param userName User name.\n * @param serverName Server name.\n * @return Groups.\n */\n", "func_signal": "public static Group[] getUserGroups(String userName, String serverName)", "code": "{\n    PointerByReference bufptr = new PointerByReference();\n    IntByReference entriesread = new IntByReference();\n    IntByReference totalentries = new IntByReference();\n    try {\n        int rc = Netapi32.INSTANCE.NetUserGetGroups(\n                serverName, userName,\n                0, bufptr, LMCons.MAX_PREFERRED_LENGTH, entriesread, totalentries);\n        if (rc != LMErr.NERR_Success) {\n            throw new Win32Exception(rc);\n        }\n\n        ArrayList<Group> result = new ArrayList<Group>();\n\n        if (entriesread.getValue() > 0) {\n            GROUP_USERS_INFO_0 lgroup = new GROUP_USERS_INFO_0(bufptr.getValue());\n            GROUP_USERS_INFO_0[] lgroups = (GROUP_USERS_INFO_0[]) lgroup.toArray(entriesread.getValue());\n            for (GROUP_USERS_INFO_0 lgpi : lgroups) {\n                Group lgp = new Group();\n                if (lgpi.grui0_name != null) {\n                    lgp.name = lgpi.grui0_name;\n                }\n                result.add(lgp);\n            }\n        }\n\n        return result.toArray(new Group[0]);\n    } finally {\n        if (bufptr.getValue() != Pointer.NULL) {\n            int rc = Netapi32.INSTANCE.NetApiBufferFree(bufptr.getValue());\n            if (LMErr.NERR_Success != rc) {\n                throw new Win32Exception(rc);\n            }\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Instantiates a new wndclassex.\n *\n * @param memory\n *            the memory\n */\n", "func_signal": "public WNDCLASSEX(Pointer memory)", "code": "{\n    super(memory, Structure.ALIGN_DEFAULT, W32APITypeMapper.DEFAULT);\n    read();\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/WinUser.java", "commit_date": "2020-11-13 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Get local groups of a given user on a given system.\n * @param userName User name.\n * @param serverName Server name.\n * @return Local groups.\n */\n", "func_signal": "public static Group[] getUserLocalGroups(String userName, String serverName)", "code": "{\n    PointerByReference bufptr = new PointerByReference();\n    IntByReference entriesread = new IntByReference();\n    IntByReference totalentries = new IntByReference();\n    try {\n        int rc = Netapi32.INSTANCE.NetUserGetLocalGroups(\n                serverName, userName,\n                0, 0, bufptr, LMCons.MAX_PREFERRED_LENGTH, entriesread, totalentries);\n        if (rc != LMErr.NERR_Success) {\n            throw new Win32Exception(rc);\n        }\n        ArrayList<Group> result = new ArrayList<Group>();\n        if (entriesread.getValue() > 0) {\n            LOCALGROUP_USERS_INFO_0 lgroup = new LOCALGROUP_USERS_INFO_0(bufptr.getValue());\n            LOCALGROUP_USERS_INFO_0[] lgroups = (LOCALGROUP_USERS_INFO_0[]) lgroup.toArray(entriesread.getValue());\n            for (LOCALGROUP_USERS_INFO_0 lgpi : lgroups) {\n                LocalGroup lgp = new LocalGroup();\n                if (lgpi.lgrui0_name != null) {\n                    lgp.name = lgpi.lgrui0_name;\n                }\n                result.add(lgp);\n            }\n        }\n        return result.toArray(new Group[0]);\n    } finally {\n        if (bufptr.getValue() != Pointer.NULL) {\n            int rc = Netapi32.INSTANCE.NetApiBufferFree(bufptr.getValue());\n            if (LMErr.NERR_Success != rc) {\n                throw new Win32Exception(rc);\n            }\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Retrieve all domain trusts for a given server.\n * @param serverName\n *  Server name.\n * @return\n *  An array of domain trusts.\n */\n", "func_signal": "public static DomainTrust[] getDomainTrusts(String serverName)", "code": "{\n    IntByReference domainTrustCount = new IntByReference();\n    PointerByReference domainsPointerRef = new PointerByReference();\n    int rc = Netapi32.INSTANCE.DsEnumerateDomainTrusts(serverName,\n            DsGetDC.DS_DOMAIN_VALID_FLAGS, domainsPointerRef, domainTrustCount);\n    if (W32Errors.NO_ERROR != rc) {\n        throw new Win32Exception(rc);\n    }\n    try {\n        ArrayList<DomainTrust> trusts = new ArrayList<DomainTrust>(domainTrustCount.getValue());\n\n        if(domainTrustCount.getValue() > 0) {\n            DS_DOMAIN_TRUSTS domainTrustRefs = new DS_DOMAIN_TRUSTS(domainsPointerRef.getValue());\n            DS_DOMAIN_TRUSTS[] domainTrusts = (DS_DOMAIN_TRUSTS[]) domainTrustRefs.toArray(new DS_DOMAIN_TRUSTS[domainTrustCount.getValue()]);\n            for (DS_DOMAIN_TRUSTS domainTrust : domainTrusts) {\n                DomainTrust t = new DomainTrust();\n                if (domainTrust.DnsDomainName != null) {\n                    t.DnsDomainName = domainTrust.DnsDomainName;\n                }\n                if (domainTrust.NetbiosDomainName != null) {\n                    t.NetbiosDomainName = domainTrust.NetbiosDomainName;\n                }\n                t.DomainSid = domainTrust.DomainSid;\n                if (domainTrust.DomainSid != null) {\n                    t.DomainSidString = Advapi32Util.convertSidToStringSid(domainTrust.DomainSid);\n                }\n                t.DomainGuid = domainTrust.DomainGuid;\n                if (domainTrust.DomainGuid != null) {\n                    t.DomainGuidString = Ole32Util.getStringFromGUID(domainTrust.DomainGuid);\n                }\n                t.flags = domainTrust.Flags;\n                trusts.add(t);\n            }\n        }\n\n        return trusts.toArray(new DomainTrust[0]);\n    } finally {\n        rc = Netapi32.INSTANCE.NetApiBufferFree(domainsPointerRef.getValue());\n        if(W32Errors.NO_ERROR != rc) {\n            throw new Win32Exception(rc);\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Retrieves an InternetExplorer object that represents the Shell window.\n *\n * @param idx\n *            The zero-based index of the item to retrieve.<br>\n *            This value must be less than the value of the Count property.\n * @return an InternetExplorer object that represents the Shell window.\n */\n", "func_signal": "public InternetExplorer Item(int idx)", "code": "{\n    VARIANT arg = new VARIANT();\n    arg.setValue(Variant.VT_I4, new LONG(idx));\n    IDispatch result = (IDispatch) invoke(\"Item\", arg).getValue();\n    if (result == null)\n    {\n        return null;\n    }\n    return new InternetExplorer(result);\n}", "path": "jna/contrib/platform/test/com/sun/jna/platform/win32/COM/ShellApplicationWindowsTest.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Instantiates a new tlb function.\n *\n * @param index\n *            the index\n * @param typeLibUtil\n *            the type lib util\n * @param funcDesc\n *            the func desc\n * @param typeInfoUtil\n *            the type info util\n */\n", "func_signal": "public TlbFunctionStub(int index, TypeLibUtil typeLibUtil,\n        FUNCDESC funcDesc, TypeInfoUtil typeInfoUtil)", "code": "{\n    super(index, typeLibUtil, funcDesc, typeInfoUtil);\n\n    TypeInfoDoc typeInfoDoc = typeInfoUtil.getDocumentation(funcDesc.memid);\n    String methodname = typeInfoDoc.getName();\n    String docStr = typeInfoDoc.getDocString();\n    String[] names = typeInfoUtil.getNames(funcDesc.memid, paramCount + 1);\n\n    // if there is at least one param we need a comma\n    if (paramCount > 0)\n        methodvariables = \", \";\n\n    for (int i = 0; i < paramCount; i++) {\n        ELEMDESC elemdesc = funcDesc.lprgelemdescParam.elemDescArg[i];\n        String methodName = names[i + 1].toLowerCase();\n        methodparams += this.getType(elemdesc.tdesc) + \" \"\n                + this.replaceJavaKeyword(methodName);\n        methodvariables += methodName;\n\n        // if there is more than 1 param\n        if (i < (paramCount - 1)) {\n            methodparams += \", \";\n            methodvariables += \", \";\n        }\n    }\n\n    this.replaceVariable(\"helpstring\", docStr);\n    this.replaceVariable(\"returntype\", returnType);\n    this.replaceVariable(\"methodname\", methodname);\n    this.replaceVariable(\"methodparams\", methodparams);\n    this.replaceVariable(\"vtableid\", String.valueOf(vtableId));\n    this.replaceVariable(\"memberid\", String.valueOf(memberid));\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/COM/tlb/imp/TlbFunctionStub.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * @return value contained in the EVT_VARIANT\n */\n", "func_signal": "public Object getValue()", "code": "{\n    EVT_VARIANT_TYPE type = getVariantType();\n    switch (type) {\n        case EvtVarTypeAnsiString:\n            return isArray() ? field1.getPointer().getPointer(0).getStringArray(0, Count) : field1.getPointer().getPointer(0).getString(0);\n        case EvtVarTypeBoolean:\n            if (isArray()) {\n                int[] rawValue = field1.getPointer().getPointer(0).getIntArray(0, Count);\n                WinDef.BOOL[] result = new WinDef.BOOL[rawValue.length];\n                for (int i = 0; i < result.length; i++) {\n                    result[i] = new WinDef.BOOL(rawValue[i]);\n                }\n                return result;\n            } else {\n                return new WinDef.BOOL(field1.getPointer().getInt(0));\n            }\n        case EvtVarTypeString:\n        case EvtVarTypeEvtXml:\n            return isArray() ? field1.getPointer().getPointer(0).getWideStringArray(0, Count) : field1.getPointer().getPointer(0).getWideString(0);\n        case EvtVarTypeFileTime:\n            if (isArray()) {\n                WinBase.FILETIME resultFirst = Structure.newInstance(WinBase.FILETIME.class, field1.getPointer().getPointer(0));\n                resultFirst.read();\n                return resultFirst.toArray(Count);\n            } else {\n                WinBase.FILETIME result = new WinBase.FILETIME(field1.getPointer());\n                result.read();\n                return result;\n            }\n        case EvtVarTypeSysTime:\n            if (isArray()) {\n                WinBase.SYSTEMTIME resultFirst = Structure.newInstance(WinBase.SYSTEMTIME.class, field1.getPointer().getPointer(0));\n                resultFirst.read();\n                return resultFirst.toArray(Count);\n            } else {\n                WinBase.SYSTEMTIME result = Structure.newInstance(WinBase.SYSTEMTIME.class, field1.getPointer().getPointer(0));\n                result.read();\n                return result;\n            }\n        case EvtVarTypeSByte:\n        case EvtVarTypeByte:\n            return isArray() ? field1.getPointer().getPointer(0).getByteArray(0, Count) : field1.getPointer().getByte(0);\n        case EvtVarTypeInt16:\n        case EvtVarTypeUInt16:\n            return isArray() ? field1.getPointer().getPointer(0).getShortArray(0, Count) : field1.getPointer().getShort(0);\n        case EvtVarTypeHexInt32:\n        case EvtVarTypeInt32:\n        case EvtVarTypeUInt32:\n            return isArray() ? field1.getPointer().getPointer(0).getIntArray(0, Count) : field1.getPointer().getInt(0);\n        case EvtVarTypeHexInt64:\n        case EvtVarTypeInt64:\n        case EvtVarTypeUInt64:\n            return isArray() ? field1.getPointer().getPointer(0).getLongArray(0, Count) : field1.getPointer().getLong(0);\n        case EvtVarTypeSingle:\n            return isArray() ? field1.getPointer().getPointer(0).getFloatArray(0, Count) : field1.getPointer().getFloat(0);\n        case EvtVarTypeDouble:\n            return isArray() ? field1.getPointer().getPointer(0).getDoubleArray(0, Count) : field1.getPointer().getDouble(0);\n        case EvtVarTypeBinary:\n            assert (!isArray());\n            return field1.getPointer().getPointer(0).getByteArray(0, Count);\n        case EvtVarTypeNull:\n            return null;\n        case EvtVarTypeGuid:\n            if (isArray()) {\n                Guid.GUID resultFirst = Structure.newInstance(Guid.GUID.class, field1.getPointer().getPointer(0));\n                resultFirst.read();\n                return resultFirst.toArray(Count);\n            } else {\n                Guid.GUID result = Structure.newInstance(Guid.GUID.class, field1.getPointer().getPointer(0));\n                result.read();\n                return result;\n            }\n        case EvtVarTypeSid:\n            if (isArray()) {\n                WinNT.PSID resultFirst = Structure.newInstance(WinNT.PSID.class, field1.getPointer().getPointer(0));\n                resultFirst.read();\n                return resultFirst.toArray(Count);\n            } else {\n                WinNT.PSID result = Structure.newInstance(WinNT.PSID.class, field1.getPointer().getPointer(0));\n                result.read();\n                return result;\n            }\n        case EvtVarTypeSizeT:\n            if (isArray()) {\n                long[] rawValue = field1.getPointer().getPointer(0).getLongArray(0, Count);\n                BaseTSD.SIZE_T[] result = new BaseTSD.SIZE_T[rawValue.length];\n                for (int i = 0; i < result.length; i++) {\n                    result[i] = new BaseTSD.SIZE_T(rawValue[i]);\n                }\n                return result;\n            } else {\n                return new BaseTSD.SIZE_T(field1.getPointer().getLong(0));\n            }\n        case EvtVarTypeEvtHandle:\n            if (isArray()) {\n                Pointer[] rawValue = field1.getPointer().getPointer(0).getPointerArray(0, Count);\n                WinNT.HANDLE[] result = new WinNT.HANDLE[rawValue.length];\n                for (int i = 0; i < result.length; i++) {\n                    result[i] = new WinNT.HANDLE(rawValue[i]);\n                }\n                return result;\n            } else {\n                return new WinNT.HANDLE(field1.getPointer().getPointer(0));\n            }\n        default:\n            throw new IllegalStateException(String.format(\"NOT IMPLEMENTED: getValue(%s) (Array: %b, Count: %d)\", type, isArray(), Count));\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Winevt.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Get the names of global groups on a computer.\n * @param serverName Name of the computer.\n * @return An array of group names.\n */\n", "func_signal": "public static Group[] getGlobalGroups(String serverName)", "code": "{\n    PointerByReference bufptr = new PointerByReference();\n    IntByReference entriesRead = new IntByReference();\n    IntByReference totalEntries = new IntByReference();\n    try {\n        int rc = Netapi32.INSTANCE.NetGroupEnum(serverName, 1, bufptr,\n                                                LMCons.MAX_PREFERRED_LENGTH, entriesRead,\n                                                totalEntries, null);\n        if (LMErr.NERR_Success != rc || bufptr.getValue() == Pointer.NULL) {\n            throw new Win32Exception(rc);\n        }\n\n        ArrayList<LocalGroup> result = new ArrayList<LocalGroup>();\n\n        if (entriesRead.getValue() > 0) {\n            LMAccess.GROUP_INFO_1 group = new LMAccess.GROUP_INFO_1(bufptr.getValue());\n            LMAccess.GROUP_INFO_1[] groups = (LMAccess.GROUP_INFO_1[]) group.toArray(entriesRead.getValue());\n            for (LMAccess.GROUP_INFO_1 lgpi : groups) {\n                LocalGroup lgp = new LocalGroup();\n                lgp.name = lgpi.grpi1_name;\n                lgp.comment = lgpi.grpi1_comment;\n                result.add(lgp);\n            }\n        }\n\n        return result.toArray(new LocalGroup[0]);\n    } finally {\n        if (bufptr.getValue() != Pointer.NULL) {\n            int rc = Netapi32.INSTANCE.NetApiBufferFree(bufptr.getValue());\n            if (LMErr.NERR_Success != rc) {\n                throw new Win32Exception(rc);\n            }\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * Returns the name of the primary domain controller (PDC).\n * @param serverName\n *     Specifies the DNS or NetBIOS name of the remote server on which the function is\n *     to execute.\n * @param domainName\n *     Specifies the name of the domain.\n * @return\n *  Name of the primary domain controller.\n */\n", "func_signal": "public static String getDCName(String serverName, String domainName)", "code": "{\n    PointerByReference bufptr = new PointerByReference();\n    try {\n        int rc = Netapi32.INSTANCE.NetGetDCName(domainName, serverName, bufptr);\n        if (LMErr.NERR_Success != rc) {\n            throw new Win32Exception(rc);\n        }\n        return bufptr.getValue().getWideString(0);\n    } finally {\n        if (W32Errors.ERROR_SUCCESS != Netapi32.INSTANCE.NetApiBufferFree(bufptr.getValue())) {\n            throw new Win32Exception(Kernel32.INSTANCE.GetLastError());\n        }\n    }\n}", "path": "jna/contrib/platform/src/com/sun/jna/platform/win32/Netapi32Util.java", "commit_date": "2019-05-06 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/** Read back from native memory. */\n", "func_signal": "@Override\npublic void read()", "code": "{\n    boolean returnWide = original instanceof WString[];\n    boolean wide = NativeString.WIDE_STRING.equals(encoding);\n    for (int si=0;si < original.length;si++) {\n        Pointer p = getPointer(si * Native.POINTER_SIZE);\n        Object s = null;\n        if (p != null) {\n            s = wide ? p.getWideString(0) : p.getString(0, encoding);\n            if (returnWide) s = new WString((String)s);\n        }\n        original[si] = s;\n    }\n}", "path": "jna/src/com/sun/jna/StringArray.java", "commit_date": "2019-03-08 00:00:00", "repo_name": "java-native-access/jna", "stars": 8202, "license": "other", "language": "java", "size": 679657}
{"docstring": "/**\n * \u6dfb\u52a0\u5c4f\u853d\u7528\u6237\n * @param ids\n * @return\n */\n", "func_signal": "public DanmakuContext addUserIdBlackList(Integer... ids)", "code": "{\n    if(ids == null || ids.length == 0) {\n        return this;\n    }\n    Collections.addAll(mUserIdBlackList, ids);\n    setFilterData(DanmakuFilters.TAG_USER_ID_FILTER, mUserIdBlackList);\n    mGlobalFlagValues.updateFilterFlag();\n    notifyConfigureChanged(DanmakuConfigTag.USER_ID_BLACK_LIST, mUserIdBlackList);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u663e\u793a\u5e95\u90e8\u5f39\u5e55\n * \n * @param visible\n */\n", "func_signal": "public DanmakuContext setFBDanmakuVisibility(boolean visible)", "code": "{\n    setDanmakuVisible(visible, BaseDanmaku.TYPE_FIX_BOTTOM);\n    setFilterData(DanmakuFilters.TAG_TYPE_DANMAKU_FILTER, mFilterTypes);\n    mGlobalFlagValues.updateFilterFlag();\n    if (FBDanmakuVisibility != visible) {\n        FBDanmakuVisibility = visible;\n        notifyConfigureChanged(DanmakuConfigTag.FB_DANMAKU_VISIBILITY, visible);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u6dfb\u52a0\u5c4f\u853d\u7528\u6237\n * @param hashes\n * @return\n */\n", "func_signal": "public DanmakuContext addUserHashBlackList(String... hashes)", "code": "{\n    if(hashes == null || hashes.length == 0) {\n        return this;\n    }\n    Collections.addAll(mUserHashBlackList, hashes);\n    setFilterData(DanmakuFilters.TAG_USER_HASH_FILTER, mUserHashBlackList);\n    mGlobalFlagValues.updateFilterFlag();\n    notifyConfigureChanged(DanmakuConfigTag.USER_HASH_BLACK_LIST, mUserHashBlackList);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u6700\u5927\u663e\u793a\u884c\u6570\n * @param pairs map<K,V> \u8bbe\u7f6enull\u53d6\u6d88\u884c\u6570\u9650\u5236\n * K = (BaseDanmaku.TYPE_SCROLL_RL|BaseDanmaku.TYPE_SCROLL_LR|BaseDanmaku.TYPE_FIX_TOP|BaseDanmaku.TYPE_FIX_BOTTOM)\n * V = \u6700\u5927\u884c\u6570\n * @return\n */\n", "func_signal": "public DanmakuContext setMaximumLines(Map<Integer, Integer> pairs)", "code": "{\n    mIsMaxLinesLimited = (pairs != null);\n    if (pairs == null) {\n        mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_MAXIMUN_LINES_FILTER, false);\n    } else {\n        setFilterData(DanmakuFilters.TAG_MAXIMUN_LINES_FILTER, pairs, false);\n    }\n    mGlobalFlagValues.updateFilterFlag();\n    notifyConfigureChanged(DanmakuConfigTag.MAXIMUN_LINES, pairs);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u663e\u793a\u7279\u6b8a\u5f39\u5e55\n * \n * @param visible\n */\n", "func_signal": "public DanmakuContext setSpecialDanmakuVisibility(boolean visible)", "code": "{\n    setDanmakuVisible(visible, BaseDanmaku.TYPE_SPECIAL);\n    setFilterData(DanmakuFilters.TAG_TYPE_DANMAKU_FILTER, mFilterTypes);\n    mGlobalFlagValues.updateFilterFlag();\n    if (SpecialDanmakuVisibility != visible) {\n        SpecialDanmakuVisibility = visible;\n        notifyConfigureChanged(DanmakuConfigTag.SPECIAL_DANMAKU_VISIBILITY, visible);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "// \u7ed8\u5236\u8d85\u8fc720ms\u5c31\u8df3\u8fc7 \uff0c\u9ed8\u8ba4\u4fdd\u6301\u63a5\u8fd150fps\n", "func_signal": "private synchronized boolean needFilter(BaseDanmaku danmaku, int orderInScreen,\n                                  int totalsizeInScreen, DanmakuTimer timer, boolean fromCachingTask)", "code": "{\n           if (timer == null || !danmaku.isOutside()) {\n               return false;\n           }\n\n           long elapsedTime = SystemClock.uptimeMillis() - timer.currMillisecond;\n           if (elapsedTime >= mMaxTime) {\n               return true;\n           }\n           return false;\n       }", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/controller/DanmakuFilters.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u5c4f\u853d\u5f39\u5e55\u7528\u6237hash\n * @param hashes \n * @return\n */\n", "func_signal": "public DanmakuContext setUserHashBlackList(String... hashes)", "code": "{\n    mUserHashBlackList.clear();\n    if (hashes == null || hashes.length == 0) {\n        mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_USER_HASH_FILTER);\n    } else {\n        Collections.addAll(mUserHashBlackList, hashes);\n        setFilterData(DanmakuFilters.TAG_USER_HASH_FILTER, mUserHashBlackList);\n    }\n    mGlobalFlagValues.updateFilterFlag();\n    notifyConfigureChanged(DanmakuConfigTag.USER_HASH_BLACK_LIST, mUserHashBlackList);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u542f\u7528\u5408\u5e76\u91cd\u590d\u5f39\u5e55\n * @param enable\n * @return\n */\n", "func_signal": "public DanmakuContext setDuplicateMergingEnabled(boolean enable)", "code": "{\n    if (mDuplicateMergingEnable != enable) {\n        mDuplicateMergingEnable = enable;\n        mGlobalFlagValues.updateFilterFlag();\n        notifyConfigureChanged(DanmakuConfigTag.DUPLICATE_MERGING_ENABLED, enable);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u663e\u793a\u9876\u90e8\u5f39\u5e55\n * \n * @param visible\n */\n", "func_signal": "public DanmakuContext setFTDanmakuVisibility(boolean visible)", "code": "{\n    setDanmakuVisible(visible, BaseDanmaku.TYPE_FIX_TOP);\n    setFilterData(DanmakuFilters.TAG_TYPE_DANMAKU_FILTER, mFilterTypes);\n    mGlobalFlagValues.updateFilterFlag();\n    if (FTDanmakuVisibility != visible) {\n        FTDanmakuVisibility = visible;\n        notifyConfigureChanged(DanmakuConfigTag.FT_DANMAKU_VISIBILITY, visible);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u5c4f\u853d\u6e38\u5ba2\u5f39\u5e55\n * @param block true\u5c4f\u853d\uff0cfalse\u4e0d\u5c4f\u853d\n * @return\n */\n", "func_signal": "public DanmakuContext blockGuestDanmaku(boolean block)", "code": "{\n    if (mBlockGuestDanmaku != block) {\n        mBlockGuestDanmaku = block;\n        if (block) {\n            setFilterData(DanmakuFilters.TAG_GUEST_FILTER, block);\n        } else {\n            mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_GUEST_FILTER);\n        }\n        mGlobalFlagValues.updateFilterFlag();\n        notifyConfigureChanged(DanmakuConfigTag.BLOCK_GUEST_DANMAKU, block);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u663e\u793a\u53f3\u5de6\u6eda\u52a8\u5f39\u5e55\n * \n * @param visible\n */\n", "func_signal": "public DanmakuContext setR2LDanmakuVisibility(boolean visible)", "code": "{\n    setDanmakuVisible(visible, BaseDanmaku.TYPE_SCROLL_RL);\n    setFilterData(DanmakuFilters.TAG_TYPE_DANMAKU_FILTER, mFilterTypes);\n    mGlobalFlagValues.updateFilterFlag();\n    if (R2LDanmakuVisibility != visible) {\n        R2LDanmakuVisibility = visible;\n        notifyConfigureChanged(DanmakuConfigTag.R2L_DANMAKU_VISIBILIY, visible);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u540c\u5c4f\u5f39\u5e55\u5bc6\u5ea6 -1\u81ea\u52a8 0\u65e0\u9650\u5236\n * \n * @param maxSize\n * @return\n */\n", "func_signal": "public DanmakuContext setMaximumVisibleSizeInScreen(int maxSize)", "code": "{\n    maximumNumsInScreen = maxSize;\n    // \u65e0\u9650\u5236\n    if (maxSize == 0) {\n        mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_QUANTITY_DANMAKU_FILTER);\n        mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_ELAPSED_TIME_FILTER);\n        notifyConfigureChanged(DanmakuConfigTag.MAXIMUM_NUMS_IN_SCREEN, maxSize);\n        return this;\n    }\n    // \u81ea\u52a8\u8c03\u6574\n    if (maxSize == -1) {\n        mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_QUANTITY_DANMAKU_FILTER);\n        mDanmakuFilters.registerFilter(DanmakuFilters.TAG_ELAPSED_TIME_FILTER);\n        notifyConfigureChanged(DanmakuConfigTag.MAXIMUM_NUMS_IN_SCREEN, maxSize);\n        return this;\n    }\n    setFilterData(DanmakuFilters.TAG_QUANTITY_DANMAKU_FILTER, maxSize);\n    mGlobalFlagValues.updateFilterFlag();\n    notifyConfigureChanged(DanmakuConfigTag.MAXIMUM_NUMS_IN_SCREEN, maxSize);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u8272\u5f69\u8fc7\u6ee4\u5f39\u5e55\u767d\u540d\u5355\n * @param colors\n * @return\n */\n", "func_signal": "public DanmakuContext setColorValueWhiteList(Integer... colors)", "code": "{\n    mColorValueWhiteList.clear();\n    if (colors == null || colors.length == 0) {\n        mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_TEXT_COLOR_DANMAKU_FILTER);\n    } else {\n        Collections.addAll(mColorValueWhiteList, colors);\n        setFilterData(DanmakuFilters.TAG_TEXT_COLOR_DANMAKU_FILTER, mColorValueWhiteList);\n    }\n    mGlobalFlagValues.updateFilterFlag();\n    notifyConfigureChanged(DanmakuConfigTag.COLOR_VALUE_WHITE_LIST, mColorValueWhiteList);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * set typeface\n * \n * @param font\n */\n", "func_signal": "public DanmakuContext setTypeface(Typeface font)", "code": "{\n    if (mFont != font) {\n        mFont = font;\n        mDisplayer.clearTextHeightCache();\n        mDisplayer.setTypeFace(font);\n        notifyConfigureChanged(DanmakuConfigTag.TYPEFACE);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u9632\u5f39\u5e55\u91cd\u53e0\n * @param pairs map<K,V> \u8bbe\u7f6enull\u6062\u590d\u9ed8\u8ba4\u8bbe\u7f6e,\u9ed8\u8ba4\u4e3a\u5141\u8bb8\u91cd\u53e0\n * K = (BaseDanmaku.TYPE_SCROLL_RL|BaseDanmaku.TYPE_SCROLL_LR|BaseDanmaku.TYPE_FIX_TOP|BaseDanmaku.TYPE_FIX_BOTTOM)\n * V = true|false \u662f\u5426\u91cd\u53e0\n * @return\n */\n", "func_signal": "public DanmakuContext preventOverlapping(Map<Integer, Boolean> pairs)", "code": "{\n    mIsPreventOverlappingEnabled = (pairs != null);\n    if (pairs == null) {\n        mDanmakuFilters.unregisterFilter(DanmakuFilters.TAG_OVERLAPPING_FILTER, false);\n    } else {\n        setFilterData(DanmakuFilters.TAG_OVERLAPPING_FILTER, pairs, false);\n    }\n    mGlobalFlagValues.updateFilterFlag();\n    notifyConfigureChanged(DanmakuConfigTag.OVERLAPPING_ENABLE, pairs);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u521b\u5efa\u5f39\u5e55\u6570\u636e\u8bf7\u5c3d\u91cf\u4f7f\u7528\u6b64\u65b9\u6cd5,\u53c2\u8003BiliDanmakuParser\u6216AcfunDanmakuParser\n *\n * @param type               \u5f39\u5e55\u7c7b\u578b\n * @param viewportWidth      danmakuview\u5bbd\u5ea6,\u4f1a\u5f71\u54cd\u6eda\u52a8\u5f39\u5e55\u7684\u5b58\u6d3b\u65f6\u95f4(duration)\n * @param viewportHeight     danmakuview\u9ad8\u5ea6\n * @param viewportSizeFactor \u4f1a\u5f71\u54cd\u6eda\u52a8\u5f39\u5e55\u7684\u901f\u5ea6/\u5b58\u6d3b\u65f6\u95f4(duration)\n * @return\n */\n", "func_signal": "public BaseDanmaku createDanmaku(int type, float viewportWidth, float viewportHeight,\n                                 float viewportSizeFactor, float scrollSpeedFactor)", "code": "{\n    int oldDispWidth = CURRENT_DISP_WIDTH;\n    int oldDispHeight = CURRENT_DISP_HEIGHT;\n    boolean sizeChanged = updateViewportState(viewportWidth, viewportHeight, viewportSizeFactor);\n    if (MAX_Duration_Scroll_Danmaku == null) {\n        MAX_Duration_Scroll_Danmaku = new Duration(REAL_DANMAKU_DURATION);\n        MAX_Duration_Scroll_Danmaku.setFactor(scrollSpeedFactor);\n    } else if (sizeChanged) {\n        MAX_Duration_Scroll_Danmaku.setValue(REAL_DANMAKU_DURATION);\n    }\n\n    if (MAX_Duration_Fix_Danmaku == null) {\n        MAX_Duration_Fix_Danmaku = new Duration(COMMON_DANMAKU_DURATION);\n    }\n\n    float scaleX = 1f;\n    float scaleY = 1f;\n    if (sizeChanged && viewportWidth > 0) {\n        updateMaxDanmakuDuration();\n        if (oldDispWidth > 0 && oldDispHeight > 0) {\n            scaleX = viewportWidth / (float) oldDispWidth;\n            scaleY = viewportHeight / (float) oldDispHeight;\n        }\n        updateScaleFactor((int) viewportWidth, (int) viewportHeight, scaleX, scaleY);\n        if (viewportHeight > 0) {\n            updateSpecialDanmakusDate((int) viewportWidth, (int) viewportHeight, scaleX, scaleY);\n        }\n    }\n\n    BaseDanmaku instance = null;\n    switch (type) {\n        case 1: // \u4ece\u53f3\u5f80\u5de6\u6eda\u52a8\n            instance = new R2LDanmaku(MAX_Duration_Scroll_Danmaku);\n            break;\n        case 4: // \u5e95\u7aef\u56fa\u5b9a\n            instance = new FBDanmaku(MAX_Duration_Fix_Danmaku);\n            break;\n        case 5: // \u9876\u7aef\u56fa\u5b9a\n            instance = new FTDanmaku(MAX_Duration_Fix_Danmaku);\n            break;\n        case 6: // \u4ece\u5de6\u5f80\u53f3\u6eda\u52a8\n            instance = new L2RDanmaku(MAX_Duration_Scroll_Danmaku);\n            break;\n        case 7: // \u7279\u6b8a\u5f39\u5e55\n            instance = new SpecialDanmaku();\n            updateScaleFactor((int) viewportWidth, (int) viewportHeight, scaleX, scaleY);\n            ((SpecialDanmaku) instance).setScaleFactor(mScaleFactor);\n            break;\n    }\n    return instance;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuFactory.java", "commit_date": "2017-09-26 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u7f13\u5b58\u7ed8\u5236\u586b\u5145\u5668\uff0c\u9ed8\u8ba4\u4f7f\u7528{@link SimpleTextCacheStuffer}\u53ea\u652f\u6301\u7eaf\u6587\u5b57\u663e\u793a, \u5982\u679c\u9700\u8981\u56fe\u6587\u6df7\u6392\u8bf7\u8bbe\u7f6e{@link SpannedCacheStuffer}\n * \u5982\u679c\u9700\u8981\u5b9a\u5236\u5176\u4ed6\u6837\u5f0f\u8bf7\u6269\u5c55{@link SimpleTextCacheStuffer}|{@link SpannedCacheStuffer}\n * @param cacheStuffer\n * @param cacheStufferAdapter\n */\n", "func_signal": "public DanmakuContext setCacheStuffer(BaseCacheStuffer cacheStuffer, BaseCacheStuffer.Proxy cacheStufferAdapter)", "code": "{\n    this.mCacheStuffer = cacheStuffer;\n    if (this.mCacheStuffer != null) {\n        this.mCacheStuffer.setProxy(cacheStufferAdapter);\n        mDisplayer.setCacheStuffer(this.mCacheStuffer);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u7c97\u4f53\u663e\u793a,\u5bf9\u67d0\u4e9b\u5b57\u4f53\u65e0\u6548\n * \n * @param bold\n * @return\n */\n", "func_signal": "public DanmakuContext setDanmakuBold(boolean bold)", "code": "{\n    mDisplayer.setFakeBoldText(bold);\n    notifyConfigureChanged(DanmakuConfigTag.DANMAKU_BOLD, bold);\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * Initial translation data of the special danmaku\n *\n * @param item\n * @param beginX\n * @param beginX\n * @param beginY\n * @param endX\n * @param endY\n * @param translationDuration\n * @param translationStartDelay\n */\n", "func_signal": "public void fillTranslationData(BaseDanmaku item, float beginX, float beginY,\n                                float endX, float endY, long translationDuration, long translationStartDelay,\n                                float scaleX, float scaleY)", "code": "{\n    if (item.getType() != BaseDanmaku.TYPE_SPECIAL)\n        return;\n    ((SpecialDanmaku) item).setTranslationData(beginX * scaleX, beginY * scaleY, endX * scaleX,\n            endY * scaleY, translationDuration, translationStartDelay);\n    updateSpecicalDanmakuDuration(item);\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuFactory.java", "commit_date": "2017-09-26 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * \u8bbe\u7f6e\u5f39\u5e55\u6eda\u52a8\u901f\u5ea6\u7cfb\u6570,\u53ea\u5bf9\u6eda\u52a8\u5f39\u5e55\u6709\u6548\n * @param p\n * @return\n */\n", "func_signal": "public DanmakuContext setScrollSpeedFactor(float p)", "code": "{\n    if (scrollSpeedFactor != p) {\n        scrollSpeedFactor = p;\n        mDanmakuFactory.updateDurationFactor(p);\n        mGlobalFlagValues.updateMeasureFlag();\n        mGlobalFlagValues.updateVisibleFlag();\n        notifyConfigureChanged(DanmakuConfigTag.SCROLL_SPEED_FACTOR, p);\n    }\n    return this;\n}", "path": "DanmakuFlameMaster/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/model/android/DanmakuContext.java", "commit_date": "2017-08-23 00:00:00", "repo_name": "bilibili/DanmakuFlameMaster", "stars": 9485, "license": "apache-2.0", "language": "java", "size": 3580}
{"docstring": "/**\n * Ascii\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n *\n * @param value Ascii\u4e32\n * @return \u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String asciiToString(String value)", "code": "{\n    StringBuilder sbu = new StringBuilder();\n    String[] chars = value.split(\",\");\n    for (String aChar : chars) {\n        sbu.append((char) Integer.parseInt(aChar));\n    }\n    return sbu.toString();\n}", "path": "spring-boot-demo/demo-ldap/src/main/java/com/xkcoding/ldap/util/LdapUtils.java", "commit_date": "2020-10-25 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u89e3\u6790JWT\n *\n * @param jwt JWT\n * @return {@link Claims}\n */\n", "func_signal": "public Claims parseJWT(String jwt)", "code": "{\n    try {\n        Claims claims = Jwts.parser().setSigningKey(jwtConfig.getKey()).parseClaimsJws(jwt).getBody();\n\n        String username = claims.getSubject();\n        String redisKey = Consts.REDIS_JWT_KEY_PREFIX + username;\n\n        // \u6821\u9a8credis\u4e2d\u7684JWT\u662f\u5426\u5b58\u5728\n        Long expire = stringRedisTemplate.getExpire(redisKey, TimeUnit.MILLISECONDS);\n        if (Objects.isNull(expire) || expire <= 0) {\n            throw new SecurityException(Status.TOKEN_EXPIRED);\n        }\n\n        // \u6821\u9a8credis\u4e2d\u7684JWT\u662f\u5426\u4e0e\u5f53\u524d\u7684\u4e00\u81f4\uff0c\u4e0d\u4e00\u81f4\u5219\u4ee3\u8868\u7528\u6237\u5df2\u6ce8\u9500/\u7528\u6237\u5728\u4e0d\u540c\u8bbe\u5907\u767b\u5f55\uff0c\u5747\u4ee3\u8868JWT\u5df2\u8fc7\u671f\n        String redisToken = stringRedisTemplate.opsForValue().get(redisKey);\n        if (!StrUtil.equals(jwt, redisToken)) {\n            throw new SecurityException(Status.TOKEN_OUT_OF_CTRL);\n        }\n        return claims;\n    } catch (ExpiredJwtException e) {\n        log.error(\"Token \u5df2\u8fc7\u671f\");\n        throw new SecurityException(Status.TOKEN_EXPIRED);\n    } catch (UnsupportedJwtException e) {\n        log.error(\"\u4e0d\u652f\u6301\u7684 Token\");\n        throw new SecurityException(Status.TOKEN_PARSE_ERROR);\n    } catch (MalformedJwtException e) {\n        log.error(\"Token \u65e0\u6548\");\n        throw new SecurityException(Status.TOKEN_PARSE_ERROR);\n    } catch (SignatureException e) {\n        log.error(\"\u65e0\u6548\u7684 Token \u7b7e\u540d\");\n        throw new SecurityException(Status.TOKEN_PARSE_ERROR);\n    } catch (IllegalArgumentException e) {\n        log.error(\"Token \u53c2\u6570\u4e0d\u5b58\u5728\");\n        throw new SecurityException(Status.TOKEN_PARSE_ERROR);\n    }\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/JwtUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u4ece request \u7684 header \u4e2d\u83b7\u53d6 JWT\n *\n * @param request \u8bf7\u6c42\n * @return JWT\n */\n", "func_signal": "public String getJwtFromRequest(HttpServletRequest request)", "code": "{\n    String bearerToken = request.getHeader(\"Authorization\");\n    if (StrUtil.isNotBlank(bearerToken) && bearerToken.startsWith(\"Bearer \")) {\n        return bearerToken.substring(7);\n    }\n    return null;\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/JwtUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u9ad8\u7ea7\u67e5\u8be2\n */\n", "func_signal": "@Test\npublic void customAdvanceSelect()", "code": "{\n    // \u6784\u9020\u67e5\u8be2\u6761\u4ef6\n    NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();\n    // \u6dfb\u52a0\u57fa\u672c\u7684\u5206\u8bcd\u6761\u4ef6\n    queryBuilder.withQuery(QueryBuilders.matchQuery(\"remark\", \"\u4e1c\u6c49\"));\n    // \u6392\u5e8f\u6761\u4ef6\n    queryBuilder.withSort(SortBuilders.fieldSort(\"age\").order(SortOrder.DESC));\n    // \u5206\u9875\u6761\u4ef6\n    queryBuilder.withPageable(PageRequest.of(0, 2));\n    Page<Person> people = repo.search(queryBuilder.build());\n    log.info(\"\u3010people\u3011\u603b\u6761\u6570 = {}\", people.getTotalElements());\n    log.info(\"\u3010people\u3011\u603b\u9875\u6570 = {}\", people.getTotalPages());\n    people.forEach(person -> log.info(\"\u3010person\u3011= {}\uff0c\u5e74\u9f84 = {}\", person.getName(), person.getAge()));\n}", "path": "spring-boot-demo/demo-elasticsearch/src/test/java/com/xkcoding/elasticsearch/repository/PersonRepositoryTest.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u6839\u636e\u5b66\u751f\u59d3\u540d\u67e5\u8be2\u6240\u9009\u8bfe\u7a0b\n *\n * @param studentName \u5b66\u751f\u59d3\u540d\n * @param depth       \u6df1\u5ea6\n * @return \u8bfe\u7a0b\u5217\u8868\n */\n", "func_signal": "public List<Lesson> findLessonsFromStudent(String studentName, int depth)", "code": "{\n    List<Lesson> lessons = Lists.newArrayList();\n    studentRepo.findByName(studentName, depth).ifPresent(student -> lessons.addAll(student.getLessons()));\n    return lessons;\n}", "path": "spring-boot-demo/demo-neo4j/src/main/java/com/xkcoding/neo4j/service/NeoService.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u6d4b\u8bd5\u805a\u5408\uff0c\u6d4b\u8bd5\u5e73\u5747\u5e74\u9f84\n */\n", "func_signal": "@Test\npublic void agg()", "code": "{\n    // \u6784\u9020\u67e5\u8be2\u6761\u4ef6\n    NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();\n    // \u4e0d\u67e5\u8be2\u4efb\u4f55\u7ed3\u679c\n    queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]{\"\"}, null));\n\n    // \u5e73\u5747\u5e74\u9f84\n    queryBuilder.addAggregation(AggregationBuilders.avg(\"avg\").field(\"age\"));\n\n    log.info(\"\u3010queryBuilder\u3011= {}\", JSONUtil.toJsonStr(queryBuilder.build()));\n\n    AggregatedPage<Person> people = (AggregatedPage<Person>) repo.search(queryBuilder.build());\n    double avgAge = ((InternalAvg) people.getAggregation(\"avg\")).getValue();\n    log.info(\"\u3010avgAge\u3011= {}\", avgAge);\n}", "path": "spring-boot-demo/demo-elasticsearch/src/test/java/com/xkcoding/elasticsearch/repository/PersonRepositoryTest.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u6d4b\u8bd5\u6279\u91cf\u65b0\u589e\n */\n", "func_signal": "@Test\npublic void saveList()", "code": "{\n    List<Person> personList = Lists.newArrayList();\n    personList.add(new Person(2L, \"\u66f9\u64cd\", \"\u9b4f\u56fd\", 20, DateUtil.parse(\"1988-01-02 03:04:05\"), \"\u66f9\u64cd\uff08155\u5e74\uff0d220\u5e743\u670815\u65e5\uff09\uff0c\u5b57\u5b5f\u5fb7\uff0c\u4e00\u540d\u5409\u5229\uff0c\u5c0f\u5b57\u963f\u7792\uff0c\u6c9b\u56fd\u8c2f\u53bf\uff08\u4eca\u5b89\u5fbd\u4eb3\u5dde\uff09\u4eba\u3002\u4e1c\u6c49\u672b\u5e74\u6770\u51fa\u7684\u653f\u6cbb\u5bb6\u3001\u519b\u4e8b\u5bb6\u3001\u6587\u5b66\u5bb6\u3001\u4e66\u6cd5\u5bb6\uff0c\u4e09\u56fd\u4e2d\u66f9\u9b4f\u653f\u6743\u7684\u5960\u57fa\u4eba\u3002\\n\u66f9\u64cd\u66fe\u62c5\u4efb\u4e1c\u6c49\u4e1e\u76f8\uff0c\u540e\u52a0\u5c01\u9b4f\u738b\uff0c\u5960\u5b9a\u4e86\u66f9\u9b4f\u7acb\u56fd\u7684\u57fa\u7840\u3002\u53bb\u4e16\u540e\u8c25\u53f7\u4e3a\u6b66\u738b\u3002\u5176\u5b50\u66f9\u4e15\u79f0\u5e1d\u540e\uff0c\u8ffd\u5c0a\u4e3a\u6b66\u7687\u5e1d\uff0c\u5e99\u53f7\u592a\u7956\u3002\\n\u4e1c\u6c49\u672b\u5e74\uff0c\u5929\u4e0b\u5927\u4e71\uff0c\u66f9\u64cd\u4ee5\u6c49\u5929\u5b50\u7684\u540d\u4e49\u5f81\u8ba8\u56db\u65b9\uff0c\u5bf9\u5185\u6d88\u706d\u4e8c\u8881\u3001\u5415\u5e03\u3001\u5218\u8868\u3001\u9a6c\u8d85\u3001\u97e9\u9042\u7b49\u5272\u636e\u52bf\u529b\uff0c\u5bf9\u5916\u964d\u670d\u5357\u5308\u5974\u3001\u4e4c\u6853\u3001\u9c9c\u5351\u7b49\uff0c\u7edf\u4e00\u4e86\u4e2d\u56fd\u5317\u65b9\uff0c\u5e76\u5b9e\u884c\u4e00\u7cfb\u5217\u653f\u7b56\u6062\u590d\u7ecf\u6d4e\u751f\u4ea7\u548c\u793e\u4f1a\u79e9\u5e8f\uff0c\u6269\u5927\u5c6f\u7530\u3001\u5174\u4fee\u6c34\u5229\u3001\u5956\u52b1\u519c\u6851\u3001\u91cd\u89c6\u624b\u5de5\u4e1a\u3001\u5b89\u7f6e\u6d41\u4ea1\u4eba\u53e3\u3001\u5b9e\u884c\u201c\u79df\u8c03\u5236\u201d\uff0c\u4ece\u800c\u4f7f\u4e2d\u539f\u793e\u4f1a\u6e10\u8d8b\u7a33\u5b9a\u3001\u7ecf\u6d4e\u51fa\u73b0\u8f6c\u673a\u3002\u9ec4\u6cb3\u6d41\u57df\u5728\u66f9\u64cd\u7edf\u6cbb\u4e0b\uff0c\u653f\u6cbb\u6e10\u89c1\u6e05\u660e\uff0c\u7ecf\u6d4e\u9010\u6b65\u6062\u590d\uff0c\u9636\u7ea7\u538b\u8feb\u7a0d\u6709\u51cf\u8f7b\uff0c\u793e\u4f1a\u98ce\u6c14\u6709\u6240\u597d\u8f6c\u3002\u66f9\u64cd\u5728\u6c49\u671d\u7684\u540d\u4e49\u4e0b\u6240\u91c7\u53d6\u7684\u4e00\u4e9b\u63aa\u65bd\u5177\u6709\u79ef\u6781\u4f5c\u7528\u3002\\n\u66f9\u64cd\u519b\u4e8b\u4e0a\u7cbe\u901a\u5175\u6cd5\uff0c\u91cd\u8d24\u7231\u624d\uff0c\u4e3a\u6b64\u4e0d\u60dc\u4e00\u5207\u4ee3\u4ef7\u5c06\u770b\u4e2d\u7684\u6f5c\u80fd\u5206\u5b50\u6536\u4e8e\u9ebe\u4e0b\uff1b\u751f\u6d3b\u4e0a\u5584\u8bd7\u6b4c\uff0c\u6292\u53d1\u81ea\u5df1\u7684\u653f\u6cbb\u62b1\u8d1f\uff0c\u5e76\u53cd\u6620\u6c49\u672b\u4eba\u6c11\u7684\u82e6\u96be\u751f\u6d3b\uff0c\u6c14\u9b44\u96c4\u4f1f\uff0c\u6177\u6168\u60b2\u51c9\uff1b\u6563\u6587\u4ea6\u6e05\u5cfb\u6574\u6d01\uff0c\u5f00\u542f\u5e76\u7e41\u8363\u4e86\u5efa\u5b89\u6587\u5b66\uff0c\u7ed9\u540e\u4eba\u7559\u4e0b\u4e86\u5b9d\u8d35\u7684\u7cbe\u795e\u8d22\u5bcc\uff0c\u9c81\u8fc5\u8bc4\u4ef7\u5176\u4e3a\u201c\u6539\u9020\u6587\u7ae0\u7684\u7956\u5e08\u201d\u3002\u540c\u65f6\u66f9\u64cd\u4e5f\u64c5\u957f\u4e66\u6cd5\uff0c\u5510\u671d\u5f20\u6000\u74d8\u5728\u300a\u4e66\u65ad\u300b\u5c06\u66f9\u64cd\u7684\u7ae0\u8349\u8bc4\u4e3a\u201c\u5999\u54c1\u201d\u3002\"));\n    personList.add(new Person(3L, \"\u5b59\u6743\", \"\u5434\u56fd\", 19, DateUtil.parse(\"1989-01-02 03:04:05\"), \"\u5b59\u6743\uff08182\u5e74\uff0d252\u5e745\u670821\u65e5\uff09\uff0c\u5b57\u4ef2\u8c0b\uff0c\u5434\u90e1\u5bcc\u6625\uff08\u4eca\u6d59\u6c5f\u676d\u5dde\u5bcc\u9633\u533a\uff09\u4eba\u3002\u4e09\u56fd\u65f6\u4ee3\u5b59\u5434\u7684\u5efa\u7acb\u8005\uff08229\u5e74\uff0d252\u5e74\u5728\u4f4d\uff09\u3002\\n\u5b59\u6743\u7684\u7236\u4eb2\u5b59\u575a\u548c\u5144\u957f\u5b59\u7b56\uff0c\u5728\u4e1c\u6c49\u672b\u5e74\u7fa4\u96c4\u5272\u636e\u4e2d\u6253\u4e0b\u4e86\u6c5f\u4e1c\u57fa\u4e1a\u3002\u5efa\u5b89\u4e94\u5e74\uff08200\u5e74\uff09\uff0c\u5b59\u7b56\u9047\u523a\u8eab\u4ea1\uff0c\u5b59\u6743\u7ee7\u4e4b\u638c\u4e8b\uff0c\u6210\u4e3a\u4e00\u65b9\u8bf8\u4faf\u3002\u5efa\u5b89\u5341\u4e09\u5e74\uff08208\u5e74\uff09\uff0c\u4e0e\u5218\u5907\u5efa\u7acb\u5b59\u5218\u8054\u76df\uff0c\u5e76\u4e8e\u8d64\u58c1\u4e4b\u6218\u4e2d\u51fb\u8d25\u66f9\u64cd\uff0c\u5960\u5b9a\u4e09\u56fd\u9f0e\u7acb\u7684\u57fa\u7840\u3002\u5efa\u5b89\u4e8c\u5341\u56db\u5e74\uff08219\u5e74\uff09\uff0c\u5b59\u6743\u6d3e\u5415\u8499\u6210\u529f\u88ad\u53d6\u5218\u5907\u7684\u8346\u5dde\uff0c\u4f7f\u9886\u571f\u9762\u79ef\u5927\u5927\u589e\u52a0\u3002\\n\u9ec4\u6b66\u5143\u5e74\uff08222\u5e74\uff09\uff0c\u5b59\u6743\u88ab\u9b4f\u6587\u5e1d\u66f9\u4e15\u518c\u5c01\u4e3a\u5434\u738b\uff0c\u5efa\u7acb\u5434\u56fd\u3002\u540c\u5e74\uff0c\u5728\u5937\u9675\u4e4b\u6218\u4e2d\u5927\u8d25\u5218\u5907\u3002\u9ec4\u9f99\u5143\u5e74\uff08229\u5e74\uff09\uff0c\u5728\u6b66\u660c\u6b63\u5f0f\u79f0\u5e1d\uff0c\u56fd\u53f7\u5434\uff0c\u4e0d\u4e45\u540e\u8fc1\u90fd\u5efa\u4e1a\u3002\u5b59\u6743\u79f0\u5e1d\u540e\uff0c\u8bbe\u7f6e\u519c\u5b98\uff0c\u5b9e\u884c\u5c6f\u7530\uff0c\u8bbe\u7f6e\u90e1\u53bf\uff0c\u5e76\u7ee7\u7eed\u527f\u629a\u5c71\u8d8a\uff0c\u4fc3\u8fdb\u4e86\u6c5f\u5357\u7ecf\u6d4e\u7684\u53d1\u5c55\u3002\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4ed6\u53c8\u591a\u6b21\u6d3e\u4eba\u51fa\u6d77\u3002\u9ec4\u9f99\u4e8c\u5e74\uff08230\u5e74\uff09\uff0c\u5b59\u6743\u6d3e\u536b\u6e29\u3001\u8bf8\u845b\u76f4\u62b5\u8fbe\u5937\u5dde\u3002\\n\u5b59\u6743\u665a\u5e74\u5728\u7ee7\u627f\u4eba\u95ee\u9898\u4e0a\u53cd\u590d\u65e0\u5e38\uff0c\u5f15\u81f4\u7fa4\u4e0b\u515a\u4e89\uff0c\u671d\u5c40\u4e0d\u7a33\u3002\u592a\u5143\u5143\u5e74\uff08252\u5e74\uff09\u75c5\u901d\uff0c\u4eab\u5e74\u4e03\u5341\u4e00\u5c81\uff0c\u5728\u4f4d\u4e8c\u5341\u56db\u5e74\uff0c\u8c25\u53f7\u5927\u7687\u5e1d\uff0c\u5e99\u53f7\u592a\u7956\uff0c\u846c\u4e8e\u848b\u9675\u3002\\n\u5b59\u6743\u4ea6\u5584\u4e66\uff0c\u5510\u4ee3\u5f20\u6000\u74d8\u5728\u300a\u4e66\u4f30\u300b\u4e2d\u5c06\u5176\u4e66\u6cd5\u5217\u4e3a\u7b2c\u4e09\u7b49\u3002\"));\n    personList.add(new Person(4L, \"\u8bf8\u845b\u4eae\", \"\u8700\u56fd\", 16, DateUtil.parse(\"1992-01-02 03:04:05\"), \"\u8bf8\u845b\u4eae\uff08181\u5e74-234\u5e7410\u67088\u65e5\uff09\uff0c\u5b57\u5b54\u660e\uff0c\u53f7\u5367\u9f99\uff0c\u5f90\u5dde\u7405\u740a\u9633\u90fd\uff08\u4eca\u5c71\u4e1c\u4e34\u6c82\u5e02\u6c82\u5357\u53bf\uff09\u4eba\uff0c\u4e09\u56fd\u65f6\u671f\u8700\u56fd\u4e1e\u76f8\uff0c\u6770\u51fa\u7684\u653f\u6cbb\u5bb6\u3001\u519b\u4e8b\u5bb6\u3001\u5916\u4ea4\u5bb6\u3001\u6587\u5b66\u5bb6\u3001\u4e66\u6cd5\u5bb6\u3001\u53d1\u660e\u5bb6\u3002\\n\u65e9\u5e74\u968f\u53d4\u7236\u8bf8\u845b\u7384\u5230\u8346\u5dde\uff0c\u8bf8\u845b\u7384\u6b7b\u540e\uff0c\u8bf8\u845b\u4eae\u5c31\u5728\u8944\u9633\u9686\u4e2d\u9690\u5c45\u3002\u540e\u5218\u5907\u4e09\u987e\u8305\u5e90\u8bf7\u51fa\u8bf8\u845b\u4eae\uff0c\u8054\u5b59\u6297\u66f9\uff0c\u4e8e\u8d64\u58c1\u4e4b\u6218\u5927\u8d25\u66f9\u519b\u3002\u5f62\u6210\u4e09\u56fd\u9f0e\u8db3\u4e4b\u52bf\uff0c\u53c8\u593a\u5360\u8346\u5dde\u3002\u5efa\u5b89\u5341\u516d\u5e74\uff08211\u5e74\uff09\uff0c\u653b\u53d6\u76ca\u5dde\u3002\u7ee7\u53c8\u51fb\u8d25\u66f9\u519b\uff0c\u593a\u5f97\u6c49\u4e2d\u3002\u8700\u7ae0\u6b66\u5143\u5e74\uff08221\u5e74\uff09\uff0c\u5218\u5907\u5728\u6210\u90fd\u5efa\u7acb\u8700\u6c49\u653f\u6743\uff0c\u8bf8\u845b\u4eae\u88ab\u4efb\u547d\u4e3a\u4e1e\u76f8\uff0c\u4e3b\u6301\u671d\u653f\u3002\u8700\u540e\u4e3b\u5218\u7985\u7ee7\u4f4d\uff0c\u8bf8\u845b\u4eae\u88ab\u5c01\u4e3a\u6b66\u4e61\u4faf\uff0c\u9886\u76ca\u5dde\u7267\u3002\u52e4\u52c9\u8c28\u614e\uff0c\u5927\u5c0f\u653f\u4e8b\u5fc5\u4eb2\u81ea\u5904\u7406\uff0c\u8d4f\u7f5a\u4e25\u660e\uff1b\u4e0e\u4e1c\u5434\u8054\u76df\uff0c\u6539\u5584\u548c\u897f\u5357\u5404\u65cf\u7684\u5173\u7cfb\uff1b\u5b9e\u884c\u5c6f\u7530\u653f\u7b56\uff0c\u52a0\u5f3a\u6218\u5907\u3002\u524d\u540e\u516d\u6b21\u5317\u4f10\u4e2d\u539f\uff0c\u591a\u4ee5\u7cae\u5c3d\u65e0\u529f\u3002\u7ec8\u56e0\u79ef\u52b3\u6210\u75be\uff0c\u4e8e\u8700\u5efa\u5174\u5341\u4e8c\u5e74\uff08234\u5e74\uff09\u75c5\u901d\u4e8e\u4e94\u4e08\u539f\uff08\u4eca\u9655\u897f\u5b9d\u9e21\u5c90\u5c71\u5883\u5185\uff09\uff0c\u4eab\u5e7454\u5c81\u3002\u5218\u7985\u8ffd\u5c01\u5176\u4e3a\u5fe0\u6b66\u4faf\uff0c\u540e\u4e16\u5e38\u4ee5\u6b66\u4faf\u5c0a\u79f0\u8bf8\u845b\u4eae\u3002\u4e1c\u664b\u653f\u6743\u56e0\u5176\u519b\u4e8b\u624d\u80fd\u7279\u8ffd\u5c01\u4ed6\u4e3a\u6b66\u5174\u738b\u3002\\n\u8bf8\u845b\u4eae\u6563\u6587\u4ee3\u8868\u4f5c\u6709\u300a\u51fa\u5e08\u8868\u300b\u300a\u8beb\u5b50\u4e66\u300b\u7b49\u3002\u66fe\u53d1\u660e\u6728\u725b\u6d41\u9a6c\u3001\u5b54\u660e\u706f\u7b49\uff0c\u5e76\u6539\u9020\u8fde\u5f29\uff0c\u53eb\u505a\u8bf8\u845b\u8fde\u5f29\uff0c\u53ef\u4e00\u5f29\u5341\u77e2\u4ff1\u53d1\u3002\u8bf8\u845b\u4eae\u4e00\u751f\u201c\u97a0\u8eac\u5c3d\u7601\u3001\u6b7b\u800c\u540e\u5df2\u201d\uff0c\u662f\u4e2d\u56fd\u4f20\u7edf\u6587\u5316\u4e2d\u5fe0\u81e3\u4e0e\u667a\u8005\u7684\u4ee3\u8868\u4eba\u7269\u3002\"));\n    Iterable<Person> people = repo.saveAll(personList);\n    log.info(\"\u3010people\u3011= {}\", people);\n}", "path": "spring-boot-demo/demo-elasticsearch/src/test/java/com/xkcoding/elasticsearch/repository/PersonRepositoryTest.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u67e5\u8be2\u540c\u5b66\u5173\u7cfb\uff0c\u6839\u636e\u8bfe\u7a0b\n *\n * @return \u8fd4\u56de\u540c\u5b66\u5173\u7cfb\n */\n", "func_signal": "public Map<String, List<Student>> findClassmatesGroupByLesson()", "code": "{\n    List<ClassmateInfoGroupByLesson> groupByLesson = studentRepo.findByClassmateGroupByLesson();\n    Map<String, List<Student>> result = Maps.newHashMap();\n\n    groupByLesson.forEach(classmateInfoGroupByLesson -> result.put(classmateInfoGroupByLesson.getLessonName(), classmateInfoGroupByLesson.getStudents()));\n\n    return result;\n}", "path": "spring-boot-demo/demo-neo4j/src/main/java/com/xkcoding/neo4j/service/NeoService.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u521b\u5efaJWT\n *\n * @param authentication \u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\n * @param rememberMe     \u8bb0\u4f4f\u6211\n * @return JWT\n */\n", "func_signal": "public String createJWT(Authentication authentication, Boolean rememberMe)", "code": "{\n    UserPrincipal userPrincipal = (UserPrincipal) authentication.getPrincipal();\n    return createJWT(rememberMe, userPrincipal.getId(), userPrincipal.getUsername(), userPrincipal.getRoles(), userPrincipal.getAuthorities());\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/JwtUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u6839\u636e jwt \u83b7\u53d6\u7528\u6237\u540d\n *\n * @param jwt JWT\n * @return \u7528\u6237\u540d\n */\n", "func_signal": "public String getUsernameFromJWT(String jwt)", "code": "{\n    Claims claims = parseJWT(jwt);\n    return claims.getSubject();\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/JwtUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6570\u636e\n */\n", "func_signal": "@Transactional\npublic void initData()", "code": "{\n    // \u521d\u59cb\u5316\u8001\u5e08\n    Teacher akai = Teacher.of(\"\u8fc8\u7279\u51ef\");\n    Teacher kakaxi = Teacher.of(\"\u65d7\u6728\u5361\u5361\u897f\");\n    Teacher zilaiye = Teacher.of(\"\u81ea\u6765\u4e5f\");\n    Teacher gangshou = Teacher.of(\"\u7eb2\u624b\");\n    Teacher dashewan = Teacher.of(\"\u5927\u86c7\u4e38\");\n    teacherRepo.save(akai);\n    teacherRepo.save(kakaxi);\n    teacherRepo.save(zilaiye);\n    teacherRepo.save(gangshou);\n    teacherRepo.save(dashewan);\n\n    // \u521d\u59cb\u5316\u8bfe\u7a0b\n    Lesson tishu = Lesson.of(\"\u4f53\u672f\", akai);\n    Lesson huanshu = Lesson.of(\"\u5e7b\u672f\", kakaxi);\n    Lesson shoulijian = Lesson.of(\"\u624b\u91cc\u5251\", kakaxi);\n    Lesson luoxuanwan = Lesson.of(\"\u87ba\u65cb\u4e38\", zilaiye);\n    Lesson xianshu = Lesson.of(\"\u4ed9\u672f\", zilaiye);\n    Lesson yiliao = Lesson.of(\"\u533b\u7597\", gangshou);\n    Lesson zhouyin = Lesson.of(\"\u5492\u5370\", dashewan);\n    lessonRepo.save(tishu);\n    lessonRepo.save(huanshu);\n    lessonRepo.save(shoulijian);\n    lessonRepo.save(luoxuanwan);\n    lessonRepo.save(xianshu);\n    lessonRepo.save(yiliao);\n    lessonRepo.save(zhouyin);\n\n    // \u521d\u59cb\u5316\u73ed\u7ea7\n    Class three = Class.of(\"\u7b2c\u4e09\u73ed\", akai);\n    Class seven = Class.of(\"\u7b2c\u4e03\u73ed\", kakaxi);\n    classRepo.save(three);\n    classRepo.save(seven);\n\n    // \u521d\u59cb\u5316\u5b66\u751f\n    List<Student> threeClass = Lists.newArrayList(Student.of(\"\u6f29\u6da1\u9e23\u4eba\", Lists.newArrayList(tishu, shoulijian, luoxuanwan, xianshu), seven), Student.of(\"\u5b87\u667a\u6ce2\u4f50\u52a9\", Lists.newArrayList(huanshu, zhouyin, shoulijian), seven), Student.of(\"\u6625\u91ce\u6a31\", Lists.newArrayList(tishu, yiliao, shoulijian), seven));\n    List<Student> sevenClass = Lists.newArrayList(Student.of(\"\u674e\u6d1b\u514b\", Lists.newArrayList(tishu), three), Student.of(\"\u65e5\u5411\u5b81\u6b21\", Lists.newArrayList(tishu), three), Student.of(\"\u5929\u5929\", Lists.newArrayList(tishu), three));\n\n    studentRepo.saveAll(threeClass);\n    studentRepo.saveAll(sevenClass);\n\n}", "path": "spring-boot-demo/demo-neo4j/src/main/java/com/xkcoding/neo4j/service/NeoService.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\n *\n * @return \u5f53\u524d\u767b\u5f55\u7528\u6237\u4fe1\u606f\uff0c\u533f\u540d\u767b\u5f55\u65f6\uff0c\u4e3anull\n */\n", "func_signal": "public static UserPrincipal getCurrentUser()", "code": "{\n    Object userInfo = SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    if (userInfo instanceof UserDetails) {\n        return (UserPrincipal) userInfo;\n    }\n    return null;\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/SecurityUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u5f80 response \u5199\u51fa json\n *\n * @param response  \u54cd\u5e94\n * @param exception \u5f02\u5e38\n */\n", "func_signal": "public static void renderJson(HttpServletResponse response, BaseException exception)", "code": "{\n    try {\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(200);\n\n        // FIXME: hutool \u7684 BUG\uff1aJSONUtil.toJsonStr()\n        //  \u5c06JSON\u8f6c\u4e3aString\u7684\u65f6\u5019\uff0c\u5ffd\u7565null\u503c\u7684\u65f6\u5019\u8f6c\u6210\u7684String\u5b58\u5728\u9519\u8bef\n        response.getWriter().write(JSONUtil.toJsonStr(new JSONObject(ApiResponse.ofException(exception), false)));\n    } catch (IOException e) {\n        log.error(\"Response\u5199\u51faJSON\u5f02\u5e38\uff0c\", e);\n    }\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/ResponseUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7528\u6237\u540d\n *\n * @return \u5f53\u524d\u767b\u5f55\u7528\u6237\u7528\u6237\u540d\n */\n", "func_signal": "public static String getCurrentUsername()", "code": "{\n    UserPrincipal currentUser = getCurrentUser();\n    return ObjectUtil.isNull(currentUser) ? Consts.ANONYMOUS_NAME : currentUser.getUsername();\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/SecurityUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u5f80 response \u5199\u51fa json\n *\n * @param response \u54cd\u5e94\n * @param status   \u72b6\u6001\n * @param data     \u8fd4\u56de\u6570\u636e\n */\n", "func_signal": "public static void renderJson(HttpServletResponse response, IStatus status, Object data)", "code": "{\n    try {\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"*\");\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(200);\n\n        // FIXME: hutool \u7684 BUG\uff1aJSONUtil.toJsonStr()\n        //  \u5c06JSON\u8f6c\u4e3aString\u7684\u65f6\u5019\uff0c\u5ffd\u7565null\u503c\u7684\u65f6\u5019\u8f6c\u6210\u7684String\u5b58\u5728\u9519\u8bef\n        response.getWriter().write(JSONUtil.toJsonStr(new JSONObject(ApiResponse.ofStatus(status, data), false)));\n    } catch (IOException e) {\n        log.error(\"Response\u5199\u51faJSON\u5f02\u5e38\uff0c\", e);\n    }\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/ResponseUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u521b\u5efaJWT\n *\n * @param rememberMe  \u8bb0\u4f4f\u6211\n * @param id          \u7528\u6237id\n * @param subject     \u7528\u6237\u540d\n * @param roles       \u7528\u6237\u89d2\u8272\n * @param authorities \u7528\u6237\u6743\u9650\n * @return JWT\n */\n", "func_signal": "public String createJWT(Boolean rememberMe, Long id, String subject, List<String> roles, Collection<? extends GrantedAuthority> authorities)", "code": "{\n    Date now = new Date();\n    JwtBuilder builder = Jwts.builder().setId(id.toString()).setSubject(subject).setIssuedAt(now).signWith(SignatureAlgorithm.HS256, jwtConfig.getKey()).claim(\"roles\", roles).claim(\"authorities\", authorities);\n\n    // \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n    Long ttl = rememberMe ? jwtConfig.getRemember() : jwtConfig.getTtl();\n    if (ttl > 0) {\n        builder.setExpiration(DateUtil.offsetMillisecond(now, ttl.intValue()));\n    }\n\n    String jwt = builder.compact();\n    // \u5c06\u751f\u6210\u7684JWT\u4fdd\u5b58\u81f3Redis\n    stringRedisTemplate.opsForValue().set(Consts.REDIS_JWT_KEY_PREFIX + subject, jwt, ttl, TimeUnit.MILLISECONDS);\n    return jwt;\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/JwtUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u6821\u9a8c\u5bc6\u7801\n *\n * @param ldapPassword  ldap \u52a0\u5bc6\u5bc6\u7801\n * @param inputPassword \u7528\u6237\u8f93\u5165\n * @return boolean\n * @throws NoSuchAlgorithmException \u52a0\u89e3\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static boolean verify(String ldapPassword, String inputPassword) throws NoSuchAlgorithmException", "code": "{\n\n    // MessageDigest \u63d0\u4f9b\u4e86\u6d88\u606f\u6458\u8981\u7b97\u6cd5\uff0c\u5982 MD5 \u6216 SHA\uff0c\u7684\u529f\u80fd\uff0c\u8fd9\u91ccLDAP\u4f7f\u7528\u7684\u662fSHA-1\n    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n\n    // \u53d6\u51fa\u52a0\u5bc6\u5b57\u7b26\n    if (ldapPassword.startsWith(\"{SSHA}\")) {\n        ldapPassword = ldapPassword.substring(6);\n    } else if (ldapPassword.startsWith(\"{SHA}\")) {\n        ldapPassword = ldapPassword.substring(5);\n    }\n    // \u89e3\u7801BASE64\n    byte[] ldapPasswordByte = Base64.decode(ldapPassword);\n    byte[] shaCode;\n    byte[] salt;\n\n    // \u524d20\u4f4d\u662fSHA-1\u52a0\u5bc6\u6bb5\uff0c20\u4f4d\u540e\u662f\u6700\u521d\u52a0\u5bc6\u65f6\u7684\u968f\u673a\u660e\u6587\n    if (ldapPasswordByte.length <= 20) {\n        shaCode = ldapPasswordByte;\n        salt = new byte[0];\n    } else {\n        shaCode = new byte[20];\n        salt = new byte[ldapPasswordByte.length - 20];\n        System.arraycopy(ldapPasswordByte, 0, shaCode, 0, 20);\n        System.arraycopy(ldapPasswordByte, 20, salt, 0, salt.length);\n    }\n    // \u628a\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u6dfb\u52a0\u5230\u6458\u8981\u8ba1\u7b97\u4fe1\u606f\n    md.update(inputPassword.getBytes());\n    // \u628a\u968f\u673a\u660e\u6587\u6dfb\u52a0\u5230\u6458\u8981\u8ba1\u7b97\u4fe1\u606f\n    md.update(salt);\n\n    // \u6309SSHA\u628a\u5f53\u524d\u7528\u6237\u5bc6\u7801\u8fdb\u884c\u8ba1\u7b97\n    byte[] inputPasswordByte = md.digest();\n\n    // \u8fd4\u56de\u6821\u9a8c\u7ed3\u679c\n    return MessageDigest.isEqual(shaCode, inputPasswordByte);\n}", "path": "spring-boot-demo/demo-ldap/src/main/java/com/xkcoding/ldap/util/LdapUtils.java", "commit_date": "2020-10-25 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u8bbe\u7f6eJWT\u8fc7\u671f\n *\n * @param request \u8bf7\u6c42\n */\n", "func_signal": "public void invalidateJWT(HttpServletRequest request)", "code": "{\n    String jwt = getJwtFromRequest(request);\n    String username = getUsernameFromJWT(jwt);\n    // \u4eceredis\u4e2d\u6e05\u9664JWT\n    stringRedisTemplate.delete(Consts.REDIS_JWT_KEY_PREFIX + username);\n}", "path": "spring-boot-demo/demo-rbac-security/src/main/java/com/xkcoding/rbac/security/util/JwtUtil.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u6d4b\u8bd5 ElasticTemplate \u521b\u5efa index\n */\n", "func_signal": "@Test\npublic void testCreateIndex()", "code": "{\n    // \u521b\u5efa\u7d22\u5f15\uff0c\u4f1a\u6839\u636eItem\u7c7b\u7684@Document\u6ce8\u89e3\u4fe1\u606f\u6765\u521b\u5efa\n    esTemplate.createIndex(Person.class);\n\n    // \u914d\u7f6e\u6620\u5c04\uff0c\u4f1a\u6839\u636eItem\u7c7b\u4e2d\u7684id\u3001Field\u7b49\u5b57\u6bb5\u6765\u81ea\u52a8\u5b8c\u6210\u6620\u5c04\n    esTemplate.putMapping(Person.class);\n}", "path": "spring-boot-demo/demo-elasticsearch/src/test/java/com/xkcoding/elasticsearch/template/TemplateTest.java", "commit_date": "2020-10-25 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u6d4b\u8bd5\u9ad8\u7ea7\u805a\u5408\u67e5\u8be2\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u7684\u4eba\u6709\u51e0\u4e2a\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u7684\u5e73\u5747\u5e74\u9f84\u662f\u591a\u5c11\n */\n", "func_signal": "@Test\npublic void advanceAgg()", "code": "{\n    // \u6784\u9020\u67e5\u8be2\u6761\u4ef6\n    NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();\n    // \u4e0d\u67e5\u8be2\u4efb\u4f55\u7ed3\u679c\n    queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]{\"\"}, null));\n\n    // 1. \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u805a\u5408\uff0c\u805a\u5408\u7c7b\u578b\u4e3aterms\uff0c\u805a\u5408\u540d\u79f0\u4e3acountry\uff0c\u805a\u5408\u5b57\u6bb5\u4e3aage\n    queryBuilder.addAggregation(AggregationBuilders.terms(\"country\").field(\"country\")\n        // 2. \u5728\u56fd\u5bb6\u805a\u5408\u6876\u5185\u8fdb\u884c\u5d4c\u5957\u805a\u5408\uff0c\u6c42\u5e73\u5747\u5e74\u9f84\n        .subAggregation(AggregationBuilders.avg(\"avg\").field(\"age\")));\n\n    log.info(\"\u3010queryBuilder\u3011= {}\", JSONUtil.toJsonStr(queryBuilder.build()));\n\n    // 3. \u67e5\u8be2\n    AggregatedPage<Person> people = (AggregatedPage<Person>) repo.search(queryBuilder.build());\n\n    // 4. \u89e3\u6790\n    // 4.1. \u4ece\u7ed3\u679c\u4e2d\u53d6\u51fa\u540d\u4e3a country \u7684\u90a3\u4e2a\u805a\u5408\uff0c\u56e0\u4e3a\u662f\u5229\u7528String\u7c7b\u578b\u5b57\u6bb5\u6765\u8fdb\u884c\u7684term\u805a\u5408\uff0c\u6240\u4ee5\u7ed3\u679c\u8981\u5f3a\u8f6c\u4e3aStringTerm\u7c7b\u578b\n    StringTerms country = (StringTerms) people.getAggregation(\"country\");\n    // 4.2. \u83b7\u53d6\u6876\n    List<StringTerms.Bucket> buckets = country.getBuckets();\n    for (StringTerms.Bucket bucket : buckets) {\n        // 4.3. \u83b7\u53d6\u6876\u4e2d\u7684key\uff0c\u5373\u56fd\u5bb6\u540d\u79f0  4.4. \u83b7\u53d6\u6876\u4e2d\u7684\u6587\u6863\u6570\u91cf\n        log.info(\"{} \u603b\u5171\u6709 {} \u4eba\", bucket.getKeyAsString(), bucket.getDocCount());\n        // 4.5. \u83b7\u53d6\u5b50\u805a\u5408\u7ed3\u679c\uff1a\n        InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(\"avg\");\n        log.info(\"\u5e73\u5747\u5e74\u9f84\uff1a{}\", avg);\n    }\n}", "path": "spring-boot-demo/demo-elasticsearch/src/test/java/com/xkcoding/elasticsearch/repository/PersonRepositoryTest.java", "commit_date": "2020-10-26 00:00:00", "repo_name": "xkcoding/spring-boot-demo", "stars": 31688, "license": "mit", "language": "java", "size": 14194}
{"docstring": "/**\n * \u7ed8\u5236\u9009\u4e2d\u7684\u65e5\u5b50\n *\n * @param canvas    canvas\n * @param calendar  \u65e5\u5386\u65e5\u5386calendar\n * @param x         \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param y         \u65e5\u5386Card y\u8d77\u70b9\u5750\u6807\n * @param hasScheme hasScheme \u975e\u6807\u8bb0\u7684\u65e5\u671f\n * @return true \u5219\u7ed8\u5236onDrawScheme\uff0c\u56e0\u4e3a\u8fd9\u91cc\u80cc\u666f\u8272\u4e0d\u662f\u662f\u4e92\u65a5\u7684\n */\n", "func_signal": "@Override\nprotected boolean onDrawSelected(Canvas canvas, Calendar calendar, int x, int y, boolean hasScheme)", "code": "{\n    mSelectedPaint.setStyle(Paint.Style.FILL);\n    canvas.drawRect(x + mPadding, y + mPadding, x + mItemWidth - mPadding, y + mItemHeight - mPadding, mSelectedPaint);\n    return true;\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/meizu/MeiZuMonthView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * dp\u8f6cpx\n *\n * @param context context\n * @param dpValue dp\n * @return px\n */\n", "func_signal": "private static int dipToPx(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/full/FullWeekView.java", "commit_date": "2019-07-04 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * @param canvas    canvas\n * @param calendar  \u65e5\u5386\u65e5\u5386calendar\n * @param x         \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param hasScheme hasScheme \u975e\u6807\u8bb0\u7684\u65e5\u671f\n * @return true \u5219\u7ed8\u5236onDrawScheme\uff0c\u56e0\u4e3a\u8fd9\u91cc\u80cc\u666f\u8272\u4e0d\u662f\u662f\u4e92\u65a5\u7684\n */\n", "func_signal": "@Override\nprotected boolean onDrawSelected(Canvas canvas, Calendar calendar, int x, boolean hasScheme)", "code": "{\n    mSelectedPaint.setStyle(Paint.Style.FILL);\n    canvas.drawRect(x,0, x + mItemWidth, mItemHeight , mSelectedPaint);\n    return true;\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/full/FullWeekView.java", "commit_date": "2019-07-04 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u8bbe\u7f6e\u5c0f\u7c73\u9ed1\u8272\u72b6\u6001\u680f\u5b57\u4f53\n */\n", "func_signal": "@SuppressLint(\"PrivateApi\")\nprivate void setMIUIStatusBarDarkMode()", "code": "{\n    if (isMiUi) {\n        Class<? extends Window> clazz = getWindow().getClass();\n        try {\n            int darkModeFlag;\n            Class<?> layoutParams = Class.forName(\"android.view.MiuiWindowManager$LayoutParams\");\n            Field field = layoutParams.getField(\"EXTRA_FLAG_STATUS_BAR_DARK_MODE\");\n            darkModeFlag = field.getInt(layoutParams);\n            Method extraFlagField = clazz.getMethod(\"setExtraFlags\", int.class, int.class);\n            extraFlagField.invoke(getWindow(), darkModeFlag, darkModeFlag);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/base/activity/BaseActivity.java", "commit_date": "2019-07-04 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u5f53\u5468\u8d77\u59cb\u53d1\u751f\u53d8\u5316\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e03\u5c40\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u907f\u514d\u51fa\u95ee\u9898\n *\n * @param weekStart \u5468\u8d77\u59cb\n */\n", "func_signal": "@Override\nprotected void onWeekStartChange(int weekStart)", "code": "{\n    for (int i = 0; i < getChildCount(); i++) {\n        ((TextView) getChildAt(i)).setText(getWeekString(i, weekStart));\n    }\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/solay/SolarWeekBar.java", "commit_date": "2018-06-25 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u6216\u8005\u5468\u6587\u672c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4ec5\u4f9b\u7236\u7c7b\u4f7f\u7528\n *\n * @param index     index\n * @param weekStart weekStart\n * @return \u6216\u8005\u5468\u6587\u672c\n */\n", "func_signal": "private String getWeekString(int index, int weekStart)", "code": "{\n    String[] weeks = getContext().getResources().getStringArray(R.array.english_week_string_array);\n\n    if (weekStart == 1) {\n        return weeks[index];\n    }\n    if (weekStart == 2) {\n        return weeks[index == 6 ? 0 : index + 1];\n    }\n    return weeks[index == 0 ? 6 : index - 1];\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/EnglishWeekBar.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u7ed8\u5236\u6807\u8bb0\u7684\u4e8b\u4ef6\u65e5\u5b50\n *\n * @param canvas   canvas\n * @param calendar \u65e5\u5386calendar\n * @param x        \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param y        \u65e5\u5386Card y\u8d77\u70b9\u5750\u6807\n */\n", "func_signal": "@Override\nprotected void onDrawScheme(Canvas canvas, Calendar calendar, int x, int y)", "code": "{\n    mSchemeBasicPaint.setColor(calendar.getSchemeColor());\n\n    canvas.drawCircle(x + mItemWidth - mPadding - mRadio / 2, y + mPadding + mRadio, mRadio, mSchemeBasicPaint);\n\n    canvas.drawText(calendar.getScheme(),\n            x + mItemWidth - mPadding - mRadio / 2 - getTextWidth(calendar.getScheme()) / 2,\n            y + mPadding + mSchemeBaseLine, mTextPaint);\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/meizu/MeiZuMonthView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u7ed8\u5236\u6587\u672c\n *\n * @param canvas     canvas\n * @param calendar   \u65e5\u5386calendar\n * @param x          \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param y          \u65e5\u5386Card y\u8d77\u70b9\u5750\u6807\n * @param hasScheme  \u662f\u5426\u662f\u6807\u8bb0\u7684\u65e5\u671f\n * @param isSelected \u662f\u5426\u9009\u4e2d\n */\n", "func_signal": "@SuppressWarnings(\"IntegerDivisionInFloatingPointContext\")\n@Override\nprotected void onDrawText(Canvas canvas, Calendar calendar, int x, int y, boolean hasScheme, boolean isSelected)", "code": "{\n    int cx = x + mItemWidth / 2;\n    int top = y - mItemHeight / 6;\n\n    boolean isInRange = isInRange(calendar);\n\n    if (isSelected) {\n        canvas.drawText(String.valueOf(calendar.getDay()), cx, mTextBaseLine + top,\n                mSelectTextPaint);\n        canvas.drawText(calendar.getLunar(), cx, mTextBaseLine + y + mItemHeight / 10, mSelectedLunarTextPaint);\n    } else if (hasScheme) {\n        canvas.drawText(String.valueOf(calendar.getDay()), cx, mTextBaseLine + top,\n                calendar.isCurrentMonth() && isInRange ? mSchemeTextPaint : mOtherMonthTextPaint);\n\n        canvas.drawText(calendar.getLunar(), cx, mTextBaseLine + y + mItemHeight / 10, mCurMonthLunarTextPaint);\n    } else {\n        canvas.drawText(String.valueOf(calendar.getDay()), cx, mTextBaseLine + top,\n                calendar.isCurrentDay() ? mCurDayTextPaint :\n                        calendar.isCurrentMonth() && isInRange ? mCurMonthTextPaint : mOtherMonthTextPaint);\n        canvas.drawText(calendar.getLunar(), cx, mTextBaseLine + y + mItemHeight / 10,\n                calendar.isCurrentDay() && isInRange ? mCurDayLunarTextPaint :\n                        calendar.isCurrentMonth() ? mCurMonthLunarTextPaint : mOtherMonthLunarTextPaint);\n    }\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/meizu/MeiZuMonthView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * dp\u8f6cpx\n *\n * @param context context\n * @param dpValue dp\n * @return px\n */\n", "func_signal": "private static int dipToPx(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/meizu/MeiZuMonthView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * dp\u8f6cpx\n *\n * @param context context\n * @param dpValue dp\n * @return px\n */\n", "func_signal": "private static int dipToPx(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/custom/CustomWeekView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u5f53\u5468\u8d77\u59cb\u53d1\u751f\u53d8\u5316\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e03\u5c40\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u907f\u514d\u51fa\u95ee\u9898\n *\n * @param weekStart \u5468\u8d77\u59cb\n */\n", "func_signal": "@Override\nprotected void onWeekStartChange(int weekStart)", "code": "{\n    for (int i = 0; i < getChildCount(); i++) {\n        ((TextView) getChildAt(i)).setText(getWeekString(i, weekStart));\n    }\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/EnglishWeekBar.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * dp\u8f6cpx\n *\n * @param context context\n * @param dpValue dp\n * @return px\n */\n", "func_signal": "private static int dipToPx(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/single/SingleMonthView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u5c4f\u853d\u67d0\u4e9b\u4e0d\u53ef\u70b9\u51fb\u7684\u65e5\u671f\uff0c\u53ef\u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u81ea\u884c\u4fee\u6539\n *\n * @param calendar calendar\n * @return \u662f\u5426\u5c4f\u853d\u67d0\u4e9b\u4e0d\u53ef\u70b9\u51fb\u7684\u65e5\u671f\uff0cMonthView\u548cWeekView\u6709\u7c7b\u4f3c\u7684API\u53ef\u8c03\u7528\n */\n", "func_signal": "@Override\npublic boolean onCalendarIntercept(Calendar calendar)", "code": "{\n    Log.e(\"onCalendarIntercept\", calendar.toString());\n    int day = calendar.getDay();\n    return day == 1 || day == 3 || day == 6 || day == 11 || day == 12 || day == 15 || day == 20 || day == 26;\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/MainActivity.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u8bbe\u7f6e\u9b45\u65cf\u624b\u673a\u72b6\u6001\u680f\u56fe\u6807\u989c\u8272\u98ce\u683c\n * \u53ef\u4ee5\u7528\u6765\u5224\u65ad\u662f\u5426\u4e3aFlyme\u7528\u6237\n *\n * @param window \u9700\u8981\u8bbe\u7f6e\u7684\u7a97\u53e3\n * @param dark   \u662f\u5426\u628a\u72b6\u6001\u680f\u5b57\u4f53\u53ca\u56fe\u6807\u989c\u8272\u8bbe\u7f6e\u4e3a\u6df1\u8272\n * @return boolean \u6210\u529f\u6267\u884c\u8fd4\u56detrue\n */\n", "func_signal": "@SuppressWarnings(\"JavaReflectionMemberAccess\")\npublic static boolean setMeiZuDarkMode(Window window, boolean dark)", "code": "{\n    boolean result = false;\n    if (Build.VERSION.SDK_INT >= 24) {\n        return false;\n    }\n    if (window != null) {\n        try {\n            WindowManager.LayoutParams lp = window.getAttributes();\n            Field darkFlag = WindowManager.LayoutParams.class\n                    .getDeclaredField(\"MEIZU_FLAG_DARK_STATUS_BAR_ICON\");\n            Field meizuFlags = WindowManager.LayoutParams.class\n                    .getDeclaredField(\"meizuFlags\");\n            darkFlag.setAccessible(true);\n            meizuFlags.setAccessible(true);\n            int bit = darkFlag.getInt(null);\n            int value = meizuFlags.getInt(lp);\n            if (dark) {\n                value |= bit;\n            } else {\n                value &= ~bit;\n            }\n            meizuFlags.setInt(lp, value);\n            window.setAttributes(lp);\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    return result;\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/base/activity/BaseActivity.java", "commit_date": "2019-07-04 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u6216\u8005\u5468\u6587\u672c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4ec5\u4f9b\u7236\u7c7b\u4f7f\u7528\n *\n * @param index     index\n * @param weekStart weekStart\n * @return \u6216\u8005\u5468\u6587\u672c\n */\n", "func_signal": "private String getWeekString(int index, int weekStart)", "code": "{\n    String[] weeks = getContext().getResources().getStringArray(R.array.english_week_string_array);\n\n    if (weekStart == 1) {\n        return weeks[index];\n    }\n    if (weekStart == 2) {\n        return weeks[index == 6 ? 0 : index + 1];\n    }\n    return weeks[index == 0 ? 6 : index - 1];\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/solay/SolarWeekBar.java", "commit_date": "2018-06-25 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * onDrawSelected\n * @param canvas   canvas\n * @param calendar \u65e5\u5386calendar\n * @param x        \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param y        \u65e5\u5386Card y\u8d77\u70b9\u5750\u6807\n */\n", "func_signal": "@SuppressWarnings(\"IntegerDivisionInFloatingPointContext\")\n@Override\nprotected void onDrawScheme(Canvas canvas, Calendar calendar, int x, int y)", "code": "{\n    mSchemeBasicPaint.setColor(calendar.getSchemeColor());\n    canvas.drawRect(x + mItemWidth / 2 - mW / 2,\n            y + mItemHeight - mH * 2 - mPadding,\n            x + mItemWidth / 2 + mW / 2,\n            y + mItemHeight - mH - mPadding, mSchemeBasicPaint);\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/index/IndexMonthView.java", "commit_date": "2019-07-04 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u5982\u679c\u9700\u8981\u70b9\u51fbScheme\u6ca1\u6709\u6548\u679c\uff0c\u5219return true\n *\n * @param canvas    canvas\n * @param calendar  \u65e5\u5386\u65e5\u5386calendar\n * @param x         \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param y         \u65e5\u5386Card y\u8d77\u70b9\u5750\u6807\n * @param hasScheme hasScheme \u975e\u6807\u8bb0\u7684\u65e5\u671f\n * @return false \u5219\u4e0d\u7ed8\u5236onDrawScheme\uff0c\u56e0\u4e3a\u8fd9\u91cc\u80cc\u666f\u8272\u662f\u4e92\u65a5\u7684\n */\n", "func_signal": "@Override\nprotected boolean onDrawSelected(Canvas canvas, Calendar calendar, int x, int y, boolean hasScheme)", "code": "{\n\n    int cx = x + mItemWidth / 2;\n    int cy = y + mItemHeight / 2;\n\n    canvas.drawCircle(cx, cy, mRadius, mSelectedPaint);\n    canvas.drawCircle(cx, cy, mRingRadius, mRingPaint);\n\n    return true;\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/single/SingleMonthView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * dp\u8f6cpx\n *\n * @param context context\n * @param dpValue dp\n * @return px\n */\n", "func_signal": "private static int dipToPx(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/EnglishWeekBar.java", "commit_date": "2018-08-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u5982\u679c\u9700\u8981\u70b9\u51fbScheme\u6ca1\u6709\u6548\u679c\uff0c\u5219return true\n *\n * @param canvas    canvas\n * @param calendar  \u65e5\u5386\u65e5\u5386calendar\n * @param x         \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param hasScheme hasScheme \u975e\u6807\u8bb0\u7684\u65e5\u671f\n * @return false \u5219\u4e0d\u7ed8\u5236onDrawScheme\uff0c\u56e0\u4e3a\u8fd9\u91cc\u80cc\u666f\u8272\u662f\u4e92\u65a5\u7684\n */\n", "func_signal": "@Override\nprotected boolean onDrawSelected(Canvas canvas, Calendar calendar, int x, boolean hasScheme)", "code": "{\n    int cx = x + mItemWidth / 2;\n    int cy = mItemHeight / 2;\n    canvas.drawCircle(cx, cy, mRadius, mSelectedPaint);\n    return true;\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/colorful/ColorfulWeekView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "/**\n * \u5982\u679c\u9700\u8981\u70b9\u51fbScheme\u6ca1\u6709\u6548\u679c\uff0c\u5219return true\n *\n * @param canvas    canvas\n * @param calendar  \u65e5\u5386\u65e5\u5386calendar\n * @param x         \u65e5\u5386Card x\u8d77\u70b9\u5750\u6807\n * @param y         \u65e5\u5386Card y\u8d77\u70b9\u5750\u6807\n * @param hasScheme hasScheme \u975e\u6807\u8bb0\u7684\u65e5\u671f\n * @return false \u5219\u4e0d\u7ed8\u5236onDrawScheme\uff0c\u56e0\u4e3a\u8fd9\u91cc\u80cc\u666f\u8272\u662f\u4e92\u65a5\u7684\n */\n", "func_signal": "@Override\nprotected boolean onDrawSelected(Canvas canvas, Calendar calendar, int x, int y, boolean hasScheme)", "code": "{\n    int cx = x + mItemWidth / 2;\n    int cy = y + mItemHeight / 2;\n    canvas.drawCircle(cx, cy, mRadius, mSelectedPaint);\n    return true;\n}", "path": "CalendarView/app/src/main/java/com/haibin/calendarviewproject/colorful/ColorfulMonthView.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "huanghaibin-dev/CalendarView", "stars": 8919, "license": "apache-2.0", "language": "java", "size": 126397}
{"docstring": "// if a producer fails to connect while creating partitioned producer, it should close all successful connections of\n// other producers and fail\n", "func_signal": "@Test\npublic void testOneProducerFailShouldCloseAllProducersInPartitionedProducer() throws Exception", "code": "{\n    PulsarClient client = PulsarClient.builder().serviceUrl(mockBrokerService.getHttpAddress()).build();\n    final AtomicInteger producerCounter = new AtomicInteger(0);\n    final AtomicInteger closeCounter = new AtomicInteger(0);\n\n    mockBrokerService.setHandleProducer((ctx, producer) -> {\n        if (producerCounter.incrementAndGet() == 3) {\n            ctx.writeAndFlush(Commands.newError(producer.getRequestId(), ServerError.AuthorizationError, \"msg\"));\n            return;\n        }\n        ctx.writeAndFlush(Commands.newProducerSuccess(producer.getRequestId(), \"default-producer\", SchemaVersion.Empty));\n    });\n\n    mockBrokerService.setHandleCloseProducer((ctx, closeProducer) -> {\n        ctx.writeAndFlush(Commands.newSuccess(closeProducer.getRequestId()));\n        closeCounter.incrementAndGet();\n    });\n\n    try {\n        client.newProducer().topic(\"persistent://prop/use/ns/multi-part-t1\").create();\n        fail(\"Should have failed with an authorization error\");\n    } catch (Exception e) {\n        assertTrue(e instanceof PulsarClientException.AuthorizationException);\n        // should call close for 3 partitions\n        assertEquals(closeCounter.get(), 3);\n    }\n\n    mockBrokerService.resetHandleProducer();\n    mockBrokerService.resetHandleCloseProducer();\n    client.close();\n}", "path": "pulsar/pulsar-broker/src/test/java/org/apache/pulsar/client/api/ClientErrorsTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Initializes UserGroupInformation with the given Configuration and\n * returns UserGroupInformation.getLoginUser(). All logins should happen\n * through this class to ensure other threads are not concurrently\n * modifying UserGroupInformation.\n *\n * @param config the configuration instance\n *\n * @return the UGI for the given principal\n *\n * @throws IOException if login failed\n */\n", "func_signal": "public static synchronized UserGroupInformation loginSimple(final Configuration config) throws IOException", "code": "{\n    Validate.notNull(config);\n    UserGroupInformation.setConfiguration(config);\n    return UserGroupInformation.getLoginUser();\n}", "path": "pulsar/pulsar-io/hdfs2/src/main/java/org/apache/pulsar/io/hdfs2/SecurityUtil.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Validate that chunking is not supported with batching and non-persistent topic\n * \n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testInvalidUseCaseForChunking() throws Exception", "code": "{\n\n    log.info(\"-- Starting {} test --\", methodName);\n    this.conf.setMaxMessageSize(5);\n    final String topicName = \"persistent://my-property/my-ns/my-topic1\";\n\n    ProducerBuilder<byte[]> producerBuilder = pulsarClient.newProducer().topic(topicName);\n\n    try {\n        Producer<byte[]> producer = producerBuilder.enableChunking(true).enableBatching(true).create();\n        fail(\"it should have failied because chunking can't be used with batching enabled\");\n    } catch (IllegalArgumentException ie) {\n        // Ok\n    }\n\n    log.info(\"-- Exiting {} test --\", methodName);\n}", "path": "pulsar/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/MessageChunkingTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Finds index of first available consumer which has higher priority then given targetPriority.\n *\n * @param targetPriority\n * @return -1 if couldn't find any available consumer\n */\n", "func_signal": "private int getConsumerFromHigherPriority(int targetPriority)", "code": "{\n    for (int i = 0; i < currentConsumerRoundRobinIndex; i++) {\n        Consumer consumer = consumerList.get(i);\n        if (consumer.getPriorityLevel() < targetPriority) {\n            if (isConsumerAvailable(consumerList.get(i))) {\n                return i;\n            }\n        } else {\n            break;\n        }\n    }\n    return -1;\n}", "path": "pulsar/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractDispatcherMultipleConsumers.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Test the calculateSubjectType function for function\n */\n", "func_signal": "@Test\npublic void testCalculateSubjectTypeForFunction()", "code": "{\n    FunctionDetails.Builder builder = FunctionDetails.newBuilder();\n    // an input but no sink classname is a function\n    builder.setSource(Function.SourceSpec.newBuilder().putInputSpecs(\"topic\", Function.ConsumerSpec.newBuilder().build()).build());\n    assertEquals(InstanceUtils.calculateSubjectType(builder.build()), FunctionDetails.ComponentType.FUNCTION);\n    // make sure that if the componenttype is set, that gets precedence.\n    builder.setComponentType(FunctionDetails.ComponentType.SOURCE);\n    assertEquals(InstanceUtils.calculateSubjectType(builder.build()), FunctionDetails.ComponentType.SOURCE);\n    builder.setComponentType(FunctionDetails.ComponentType.SINK);\n    assertEquals(InstanceUtils.calculateSubjectType(builder.build()), FunctionDetails.ComponentType.SINK);\n}", "path": "pulsar/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/InstanceUtilsTest.java", "commit_date": "2019-05-15 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "//This method is do `and` operation for position's ack set\n", "func_signal": "public static void andAckSet(PositionImpl currentPosition, PositionImpl otherPosition)", "code": "{\n    if (currentPosition == null || otherPosition == null) {\n        return;\n    }\n    BitSetRecyclable thisAckSet = BitSetRecyclable.valueOf(currentPosition.getAckSet());\n    BitSetRecyclable otherAckSet = BitSetRecyclable.valueOf(otherPosition.getAckSet());\n    thisAckSet.and(otherAckSet);\n    currentPosition.setAckSet(thisAckSet.toLongArray());\n    thisAckSet.recycle();\n    otherAckSet.recycle();\n}", "path": "pulsar/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/util/PositionAckSetUtil.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Creates an authentication token.\n *\n * @param userRole user name.\n * @param session the sessionId.\n * (<code>System.currentTimeMillis() + validityPeriod</code>).\n */\n", "func_signal": "public SaslRoleToken(String userRole, String session)", "code": "{\n    checkForIllegalArgument(session, \"session\");\n    this.userRole = userRole;\n    this.session = session;\n    this.expires = -1;\n    generateToken();\n}", "path": "pulsar/pulsar-broker-auth-sasl/src/main/java/org/apache/pulsar/broker/authentication/SaslRoleToken.java", "commit_date": "2019-04-25 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Sets the expiration of the token.\n *\n * @param expires expiration time of the token in milliseconds since the epoch.\n */\n", "func_signal": "public void setExpires(long expires)", "code": "{\n    if (this != SaslRoleToken.ANONYMOUS) {\n        this.expires = expires;\n        generateToken();\n    }\n}", "path": "pulsar/pulsar-broker-auth-sasl/src/main/java/org/apache/pulsar/broker/authentication/SaslRoleToken.java", "commit_date": "2019-04-25 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "// if a consumer fails to subscribe while creating partitioned consumer, it should close all successful connections\n// of other consumers and fail\n", "func_signal": "@Test\npublic void testOneConsumerFailShouldCloseAllConsumersInPartitionedConsumer() throws Exception", "code": "{\n    PulsarClient client = PulsarClient.builder().serviceUrl(mockBrokerService.getHttpAddress()).build();\n    final AtomicInteger subscribeCounter = new AtomicInteger(0);\n    final AtomicInteger closeCounter = new AtomicInteger(0);\n\n    mockBrokerService.setHandleSubscribe((ctx, subscribe) -> {\n        System.err.println(\"subscribeCounter: \" + subscribeCounter.get());\n        if (subscribeCounter.incrementAndGet() == 3) {\n            ctx.writeAndFlush(Commands.newError(subscribe.getRequestId(), ServerError.AuthorizationError, \"msg\"));\n            return;\n        }\n        ctx.writeAndFlush(Commands.newSuccess(subscribe.getRequestId()));\n    });\n\n    mockBrokerService.setHandleCloseConsumer((ctx, closeConsumer) -> {\n        ctx.writeAndFlush(Commands.newSuccess(closeConsumer.getRequestId()));\n        closeCounter.incrementAndGet();\n    });\n\n    try {\n        client.newConsumer().topic(\"persistent://prop/use/ns/multi-part-t1\").subscriptionName(\"sub1\").subscribe();\n        fail(\"Should have failed with an authorization error\");\n    } catch (PulsarClientException.AuthorizationException e) {\n    }\n\n    // should call close for 3 partitions\n    assertEquals(closeCounter.get(), 3);\n\n    mockBrokerService.resetHandleSubscribe();\n    mockBrokerService.resetHandleCloseConsumer();\n    client.close();\n}", "path": "pulsar/pulsar-broker/src/test/java/org/apache/pulsar/client/api/ClientErrorsTest.java", "commit_date": "2020-11-12 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Authenticate with client credentials.\n *\n * @param issuerUrl the issuer URL\n * @param credentialsUrl the credentials URL\n * @param audience the audience identifier\n * @return an Authentication object\n */\n", "func_signal": "public static Authentication clientCredentials(URL issuerUrl, URL credentialsUrl, String audience)", "code": "{\n    ClientCredentialsFlow flow = ClientCredentialsFlow.builder()\n            .issuerUrl(issuerUrl)\n            .privateKey(credentialsUrl.toExternalForm())\n            .audience(audience)\n            .build();\n    return new AuthenticationOAuth2(flow, Clock.systemDefaultZone());\n}", "path": "pulsar/pulsar-client/src/main/java/org/apache/pulsar/client/impl/auth/oauth2/AuthenticationFactoryOAuth2.java", "commit_date": "2020-07-02 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Parses a string into an authentication token.\n *\n * @param tokenStr string representation of a token.\n *\n * @return the parsed authentication token.\n *\n * @throws AuthenticationException thrown if the string representation could not be parsed into\n * an authentication token.\n */\n", "func_signal": "public static SaslRoleToken parse(String tokenStr) throws AuthenticationException", "code": "{\n    Map<String, String> map = split(tokenStr);\n    if (!map.keySet().equals(ATTRIBUTES)) {\n        throw new AuthenticationException(\"Invalid token string, missing attributes\");\n    }\n    long expires = Long.parseLong(map.get(EXPIRES));\n    SaslRoleToken token = new SaslRoleToken(map.get(USER_ROLE), map.get(SESSION));\n    token.setExpires(expires);\n    return token;\n}", "path": "pulsar/pulsar-broker-auth-sasl/src/main/java/org/apache/pulsar/broker/authentication/SaslRoleToken.java", "commit_date": "2019-04-25 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Check if the provided value is invalid. Throw an error if it is invalid, NOP otherwise.\n *\n * @param value the value to check.\n * @param name the parameter name to use in an error message if the value is invalid.\n */\n", "func_signal": "private static void checkForIllegalArgument(String value, String name)", "code": "{\n    if (value == null || value.length() == 0 || value.contains(ATTR_SEPARATOR)) {\n        throw new IllegalArgumentException(name + ILLEGAL_ARG_MSG);\n    }\n}", "path": "pulsar/pulsar-broker-auth-sasl/src/main/java/org/apache/pulsar/broker/authentication/SaslRoleToken.java", "commit_date": "2019-04-25 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "//This method is compare two position which position is bigger than another one.\n//When the ledgerId and entryId in this position is same to another one and two position all have ack set, it will\n//compare the ack set next bit index is bigger than another one.\n", "func_signal": "public static int compareToWithAckSet(PositionImpl currentPosition,PositionImpl otherPosition)", "code": "{\n    if (currentPosition == null || otherPosition ==null) {\n        throw new NullPointerException(\"Two positions can't be null! \" +\n                \"current position : [\" + currentPosition + \"] other position : [\" + otherPosition + \"]\");\n    }\n    int result = ComparisonChain.start().compare(currentPosition.getLedgerId(),\n            otherPosition.getLedgerId()).compare(currentPosition.getEntryId(), otherPosition.getEntryId())\n            .result();\n    if (result == 0) {\n        BitSetRecyclable otherAckSet;\n        BitSetRecyclable currentAckSet;\n\n        if (otherPosition.getAckSet() == null) {\n            otherAckSet = BitSetRecyclable.create();\n        } else {\n            otherAckSet = BitSetRecyclable.valueOf(otherPosition.getAckSet());\n        }\n\n        if (currentPosition.getAckSet() == null) {\n            currentAckSet = BitSetRecyclable.create();\n        } else {\n            currentAckSet = BitSetRecyclable.valueOf(currentPosition.getAckSet());\n        }\n\n        if (currentAckSet.isEmpty() || otherAckSet.isEmpty()) {\n            //when ack set is empty, the nextSetBit will return -1, so we should return the inverse value.\n            result = -(currentAckSet.nextSetBit(0) - otherAckSet.nextSetBit(0));\n        } else {\n            result = currentAckSet.nextSetBit(0) - otherAckSet.nextSetBit(0);\n        }\n        currentAckSet.recycle();\n        otherAckSet.recycle();\n    }\n    return result;\n}", "path": "pulsar/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/util/PositionAckSetUtil.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Finds index of round-robin available consumer that present on same level as consumer on\n * currentRoundRobinIndex if doesn't find consumer on same level then it finds first available consumer on lower\n * priority level else returns\n * index=-1 if couldn't find any available consumer in the list.\n *\n * @param currentRoundRobinIndex\n * @return\n */\n", "func_signal": "private int getNextConsumerFromSameOrLowerLevel(int currentRoundRobinIndex)", "code": "{\n\n    int targetPriority = consumerList.get(currentRoundRobinIndex).getPriorityLevel();\n    // use to do round-robin if can't find consumer from currentRR to last-consumer in list\n    int scanIndex = currentRoundRobinIndex;\n    int endPriorityLevelIndex = currentRoundRobinIndex;\n    do {\n        Consumer scanConsumer = scanIndex < consumerList.size() ? consumerList.get(scanIndex)\n                : null /* reached to last consumer of list */;\n\n        // if reached to last consumer of list then check from beginning to currentRRIndex of the list\n        if (scanConsumer == null || scanConsumer.getPriorityLevel() != targetPriority) {\n            endPriorityLevelIndex = scanIndex; // last consumer on this level\n            scanIndex = getFirstConsumerIndexOfPriority(targetPriority);\n        } else {\n            if (isConsumerAvailable(scanConsumer)) {\n                return scanIndex;\n            }\n            scanIndex++;\n        }\n    } while (scanIndex != currentRoundRobinIndex);\n\n    // it means: didn't find consumer in the same priority-level so, check available consumer lower than this level\n    for (int i = endPriorityLevelIndex; i < consumerList.size(); i++) {\n        if (isConsumerAvailable(consumerList.get(i))) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "path": "pulsar/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractDispatcherMultipleConsumers.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Finds index of first consumer in list which has same priority as given targetPriority.\n *\n * @param targetPriority\n * @return\n */\n", "func_signal": "private int getFirstConsumerIndexOfPriority(int targetPriority)", "code": "{\n    for (int i = 0; i < consumerList.size(); i++) {\n        if (consumerList.get(i).getPriorityLevel() == targetPriority) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "pulsar/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractDispatcherMultipleConsumers.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Initializes UserGroupInformation with the given Configuration and returns\n * UserGroupInformation.isSecurityEnabled().\n * All checks for isSecurityEnabled() should happen through this method.\n *\n * @param config the given configuration\n *\n * @return true if kerberos is enabled on the given configuration, false otherwise\n *\n */\n", "func_signal": "public static boolean isSecurityEnabled(final Configuration config)", "code": "{\n    Validate.notNull(config);\n    return KERBEROS.equalsIgnoreCase(config.get(HADOOP_SECURITY_AUTHENTICATION));\n}", "path": "pulsar/pulsar-io/hdfs2/src/main/java/org/apache/pulsar/io/hdfs2/SecurityUtil.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "//This method is to compare two ack set whether overlap or not\n", "func_signal": "public static boolean isAckSetOverlap(long[] currentAckSet, long[] otherAckSet)", "code": "{\n    if (currentAckSet == null || otherAckSet == null) {\n        return false;\n    }\n\n    BitSetRecyclable currentBitSet = BitSetRecyclable.valueOf(currentAckSet);\n    BitSetRecyclable otherBitSet = BitSetRecyclable.valueOf(otherAckSet);\n    currentBitSet.flip(0, currentBitSet.size());\n    otherBitSet.flip(0, otherBitSet.size());\n    currentBitSet.and(otherBitSet);\n    boolean isAckSetRepeated = !currentBitSet.isEmpty();\n    currentBitSet.recycle();\n    otherBitSet.recycle();\n    return isAckSetRepeated;\n}", "path": "pulsar/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/util/PositionAckSetUtil.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Generates the token.\n */\n", "func_signal": "private void generateToken()", "code": "{\n    StringBuffer sb = new StringBuffer();\n    sb.append(USER_ROLE).append(\"=\").append(getUserRole()).append(ATTR_SEPARATOR);\n    sb.append(SESSION).append(\"=\").append(getSession()).append(ATTR_SEPARATOR);\n    sb.append(EXPIRES).append(\"=\").append(getExpires());\n    token = sb.toString();\n}", "path": "pulsar/pulsar-broker-auth-sasl/src/main/java/org/apache/pulsar/broker/authentication/SaslRoleToken.java", "commit_date": "2019-04-25 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Get random consumer from consumerList.\n *\n * @return null if no consumer available, else return random consumer from consumerList\n */\n", "func_signal": "public Consumer getRandomConsumer()", "code": "{\n    if (consumerList.isEmpty() || IS_CLOSED_UPDATER.get(this) == TRUE) {\n        // abort read if no consumers are connected of if disconnect is initiated\n        return null;\n    }\n\n    return consumerList.get(random.nextInt(consumerList.size()));\n}", "path": "pulsar/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractDispatcherMultipleConsumers.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Test the calculateSubjectType function for Sink\n */\n", "func_signal": "@Test\npublic void testCalculateSubjectTypeForSink()", "code": "{\n    FunctionDetails.Builder builder = FunctionDetails.newBuilder();\n    // an input and a sink classname is a sink\n    builder.setSource(Function.SourceSpec.newBuilder().putInputSpecs(\"topic\", Function.ConsumerSpec.newBuilder().build()).build());\n    builder.setSink(Function.SinkSpec.newBuilder().setClassName(\"something\").build());\n    assertEquals(InstanceUtils.calculateSubjectType(builder.build()), FunctionDetails.ComponentType.SINK);\n    // make sure that if the componenttype is set, that gets precedence.\n    builder.setComponentType(FunctionDetails.ComponentType.SOURCE);\n    assertEquals(InstanceUtils.calculateSubjectType(builder.build()), FunctionDetails.ComponentType.SOURCE);\n    builder.setComponentType(FunctionDetails.ComponentType.FUNCTION);\n    assertEquals(InstanceUtils.calculateSubjectType(builder.build()), FunctionDetails.ComponentType.FUNCTION);\n}", "path": "pulsar/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/InstanceUtilsTest.java", "commit_date": "2019-05-15 00:00:00", "repo_name": "apache/pulsar", "stars": 13604, "license": "apache-2.0", "language": "java", "size": 206854}
{"docstring": "/**\n * Creates a random string with a length within the given interval. The string contains only characters that\n * can be represented as a single code point.\n *\n * @param rnd The random used to create the strings.\n * @param minLength The minimum string length.\n * @param maxLength The maximum string length (inclusive).\n * @return A random String.\n */\n", "func_signal": "public static String getRandomString(Random rnd, int minLength, int maxLength)", "code": "{\n\tint len = rnd.nextInt(maxLength - minLength + 1) + minLength;\n\n\tchar[] data = new char[len];\n\tfor (int i = 0; i < data.length; i++) {\n\t\tdata[i] = (char) (rnd.nextInt(0x7fff) + 1);\n\t}\n\treturn new String(data);\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Writes a String to the given output.\n * The written string can be read with {@link #readString(DataInputView)}.\n *\n * @param str The string to write\n * @param out The output to write to\n *\n * @throws IOException Thrown, if the writing or the serialization fails.\n */\n", "func_signal": "public static void writeString(@Nonnull String str, DataOutputView out) throws IOException", "code": "{\n\tcheckNotNull(str);\n\tStringValue.writeString(str, out);\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * \u6839\u636e\u5fae\u5e94\u7528 key \u548c secret \u83b7\u53d6 access_token\n *\n * @param appKey\n * @param appSecret\n * @return\n */\n", "func_signal": "public static String getAccessToken(String appKey, String appSecret)", "code": "{\n    String accessToken = \"\";\n    String dingDingAccessTocken = expireCache.getIfPresent(DING_DING_ACCESS_TOKEN);\n    if (dingDingAccessTocken == null || \"\".equals(dingDingAccessTocken)) {\n        String result = \"\";\n        try {\n            result = HttpUtil.doGet(DING_DING_GET_TOKEN_URL + \"?appkey=\" + appKey + \"&appsecret=\" + appSecret);\n            accessToken = JsonPath.read(result, \"$.access_token\");\n            if (accessToken != null && !\"\".equals(accessToken)) {\n                expireCache.put(DING_DING_ACCESS_TOKEN, String.valueOf(accessToken));\n                log.info(\"get ding ding access token = {}\", String.valueOf(accessToken));\n            }\n        } catch (Exception e) {\n            log.error(\"--------------httpclient do get request exception , msg = {}, result = {}\",\n                    Throwables.getStackTraceAsString(e), result);\n        }\n    } else {\n        accessToken = dingDingAccessTocken;\n    }\n    return accessToken;\n}", "path": "flink-learning/flink-learning-monitor/flink-learning-monitor-alert/src/main/java/com/zhisheng/alert/utils/DingDingAccessTokenUtil.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * es sink\n *\n * @param hosts               es hosts\n * @param bulkFlushMaxActions bulk flush size\n * @param parallelism         \u5e76\u884c\u6570\n * @param data                \u6570\u636e\n * @param func\n * @param <T>\n */\n", "func_signal": "public static <T> void addSink(List<HttpHost> hosts, int bulkFlushMaxActions, int parallelism,\n                               SingleOutputStreamOperator<T> data, ElasticsearchSinkFunction<T> func,\n                               ParameterTool parameterTool)", "code": "{\n    ElasticsearchSink.Builder<T> esSinkBuilder = new ElasticsearchSink.Builder<>(hosts, func);\n    esSinkBuilder.setBulkFlushMaxActions(bulkFlushMaxActions);\n    esSinkBuilder.setFailureHandler(new RetryRequestFailureHandler());\n    //todo:xpack security\n    data.addSink(esSinkBuilder.build()).setParallelism(parallelism);\n}", "path": "flink-learning/flink-learning-connectors/flink-learning-connectors-es/flink-learning-connectors-es7/src/main/java/com/zhisheng/connectors/es7/util/ESSinkUtil.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * \u6bcf\u6761\u6570\u636e\u7684\u63d2\u5165\u90fd\u8981\u8c03\u7528\u4e00\u6b21 invoke() \u65b9\u6cd5\n *\n * @param value\n * @param context\n * @throws Exception\n */\n", "func_signal": "@Override\npublic void invoke(List<Student> value, Context context) throws Exception", "code": "{\n    if (ps == null) {\n        return;\n    }\n    //\u904d\u5386\u6570\u636e\u96c6\u5408\n    for (Student student : value) {\n        ps.setInt(1, student.getId());\n        ps.setString(2, student.getName());\n        ps.setString(3, student.getPassword());\n        ps.setInt(4, student.getAge());\n        ps.addBatch();\n    }\n    int[] count = ps.executeBatch();//\u6279\u91cf\u540e\u6267\u884c\n    log.info(\"\u6210\u529f\u4e86\u63d2\u5165\u4e86 {} \u884c\u6570\u636e\", count.length);\n}", "path": "flink-learning/flink-learning-connectors/flink-learning-connectors-mysql/src/main/java/com/zhisheng/connectors/mysql/sinks/SinkToMySQL.java", "commit_date": "2019-09-17 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Returns a string representation of the given array. This method takes an Object\n * to allow also all types of primitive type arrays.\n *\n * @param array The array to create a string representation for.\n * @return The string representation of the array.\n * @throws IllegalArgumentException If the given object is no array.\n */\n", "func_signal": "public static String arrayToString(Object array)", "code": "{\n\tif (array == null) {\n\t\tthrow new NullPointerException();\n\t}\n\n\tif (array instanceof int[]) {\n\t\treturn Arrays.toString((int[]) array);\n\t}\n\tif (array instanceof long[]) {\n\t\treturn Arrays.toString((long[]) array);\n\t}\n\tif (array instanceof Object[]) {\n\t\treturn Arrays.toString((Object[]) array);\n\t}\n\tif (array instanceof byte[]) {\n\t\treturn Arrays.toString((byte[]) array);\n\t}\n\tif (array instanceof double[]) {\n\t\treturn Arrays.toString((double[]) array);\n\t}\n\tif (array instanceof float[]) {\n\t\treturn Arrays.toString((float[]) array);\n\t}\n\tif (array instanceof boolean[]) {\n\t\treturn Arrays.toString((boolean[]) array);\n\t}\n\tif (array instanceof char[]) {\n\t\treturn Arrays.toString((char[]) array);\n\t}\n\tif (array instanceof short[]) {\n\t\treturn Arrays.toString((short[]) array);\n\t}\n\n\tif (array.getClass().isArray()) {\n\t\treturn \"<unknown array type>\";\n\t} else {\n\t\tthrow new IllegalArgumentException(\"The given argument is no array.\");\n\t}\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * open() \u65b9\u6cd5\u4e2d\u5efa\u7acb\u8fde\u63a5\uff0c\u8fd9\u6837\u4e0d\u7528\u6bcf\u6b21 invoke \u7684\u65f6\u5019\u90fd\u8981\u5efa\u7acb\u8fde\u63a5\u548c\u91ca\u653e\u8fde\u63a5\n *\n * @param parameters\n * @throws Exception\n */\n", "func_signal": "@Override\npublic void open(Configuration parameters) throws Exception", "code": "{\n    super.open(parameters);\n    dataSource = new BasicDataSource();\n    connection = getConnection(dataSource);\n    String sql = \"insert into Student(id, name, password, age) values(?, ?, ?, ?);\";\n    if (connection != null) {\n        ps = this.connection.prepareStatement(sql);\n    }\n}", "path": "flink-learning/flink-learning-connectors/flink-learning-connectors-mysql/src/main/java/com/zhisheng/connectors/mysql/sinks/SinkToMySQL.java", "commit_date": "2019-09-17 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Checks if the string is null, empty, or contains only whitespace characters.\n * A whitespace character is defined via {@link Character#isWhitespace(char)}.\n *\n * @param str The string to check\n * @return True, if the string is null or blank, false otherwise.\n */\n", "func_signal": "public static boolean isNullOrWhitespaceOnly(String str)", "code": "{\n\tif (str == null || str.length() == 0) {\n\t\treturn true;\n\t}\n\n\tfinal int len = str.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (!Character.isWhitespace(str.charAt(i))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Reads a String from the given input. The string may be null and must have been written with\n * {@link #writeNullableString(String, DataOutputView)}.\n *\n * @param in The input to read from.\n * @return The deserialized string, or null.\n *\n * @throws IOException Thrown, if the reading or the deserialization fails.\n */\n", "func_signal": "public static @Nullable String readNullableString(DataInputView in) throws IOException", "code": "{\n\tif (in.readBoolean()) {\n\t\treturn readString(in);\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Partition a collection into approximately n buckets.\n */\n", "func_signal": "public static <T> Collection<List<T>> partition(Collection<T> elements, int numBuckets)", "code": "{\n    Map<Integer, List<T>> buckets = new HashMap<>(numBuckets);\n\n    int initialCapacity = elements.size() / numBuckets;\n\n    int index = 0;\n    for (T element : elements) {\n        int bucket = index % numBuckets;\n        buckets.computeIfAbsent(bucket, key -> new ArrayList<>(initialCapacity)).add(element);\n    }\n\n    return buckets.values();\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/CollectionUtil.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Writes a String to the given output. The string may be null.\n * The written string can be read with {@link #readNullableString(DataInputView)}-\n *\n * @param str The string to write, or null.\n * @param out The output to write to.\n *\n * @throws IOException Thrown, if the writing or the serialization fails.\n */\n", "func_signal": "public static void writeNullableString(@Nullable String str, DataOutputView out) throws IOException", "code": "{\n\tif (str != null) {\n\t\tout.writeBoolean(true);\n\t\twriteString(str, out);\n\t} else {\n\t\tout.writeBoolean(false);\n\t}\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Creates a random alphanumeric string of given length.\n *\n * @param rnd The random number generator to use.\n * @param length The number of alphanumeric characters to append.\n */\n", "func_signal": "public static String generateRandomAlphanumericString(Random rnd, int length)", "code": "{\n\tcheckNotNull(rnd);\n\tcheckArgument(length >= 0);\n\n\tStringBuilder buffer = new StringBuilder(length);\n\tfor (int i = 0; i < length; i++) {\n\t\tbuffer.append(nextAlphanumericChar(rnd));\n\t}\n\treturn buffer.toString();\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * \u89e3\u6790\u914d\u7f6e\u6587\u4ef6\u7684 es hosts\n *\n * @param hosts\n * @return\n * @throws MalformedURLException\n */\n", "func_signal": "public static List<HttpHost> getEsAddresses(String hosts) throws MalformedURLException", "code": "{\n    String[] hostList = hosts.split(\",\");\n    List<HttpHost> addresses = new ArrayList<>();\n    for (String host : hostList) {\n        if (host.startsWith(\"http\")) {\n            URL url = new URL(host);\n            addresses.add(new HttpHost(url.getHost(), url.getPort()));\n        } else {\n            String[] parts = host.split(\":\", 2);\n            if (parts.length > 1) {\n                addresses.add(new HttpHost(parts[0], Integer.parseInt(parts[1])));\n            } else {\n                throw new MalformedURLException(\"invalid elasticsearch hosts format\");\n            }\n        }\n    }\n    return addresses;\n}", "path": "flink-learning/flink-learning-connectors/flink-learning-connectors-es/flink-learning-connectors-es7/src/main/java/com/zhisheng/connectors/es7/util/ESSinkUtil.java", "commit_date": "2020-03-12 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "//kafka topic \u9700\u8981\u548c flink \u7a0b\u5e8f\u7528\u540c\u4e00\u4e2a topic\n", "func_signal": "public static void writeToKafka() throws InterruptedException", "code": "{\n      Properties props = new Properties();\n      props.put(\"bootstrap.servers\", broker_list);\n      props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n      props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n      KafkaProducer producer = new KafkaProducer<String, String>(props);\n\n      for (int i = 1; i <= 100; i++) {\n          Student student = new Student(i, \"zhisheng\" + i, \"password\" + i, 18 + i);\n          ProducerRecord record = new ProducerRecord<String, String>(topic, null, null, GsonUtil.toJson(student));\n          producer.send(record);\n          System.out.println(\"\u53d1\u9001\u6570\u636e: \" + GsonUtil.toJson(student));\n          Thread.sleep(10 * 1000); //\u53d1\u9001\u4e00\u6761\u6570\u636e sleep 10s\uff0c\u76f8\u5f53\u4e8e 1 \u5206\u949f 6 \u6761\n      }\n      producer.flush();\n  }", "path": "flink-learning/flink-learning-connectors/flink-learning-connectors-mysql/src/main/java/com/zhisheng/connectors/mysql/utils/KafkaUtil.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Replaces control characters by their escape-coded version. For example,\n * if the string contains a line break character ('\\n'), this character will\n * be replaced by the two characters backslash '\\' and 'n'. As a consequence, the\n * resulting string will not contain any more control characters.\n *\n * @param str The string in which to replace the control characters.\n * @return The string with the replaced characters.\n */\n", "func_signal": "public static String showControlCharacters(String str)", "code": "{\n\tint len = str.length();\n\tStringBuilder sb = new StringBuilder();\n\n\tfor (int i = 0; i < len; i += 1) {\n\t\tchar c = str.charAt(i);\n\t\tswitch (c) {\n\t\tcase '\\b':\n\t\t\tsb.append(\"\\\\b\");\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tsb.append(\"\\\\t\");\n\t\t\tbreak;\n\t\tcase '\\n':\n\t\t\tsb.append(\"\\\\n\");\n\t\t\tbreak;\n\t\tcase '\\f':\n\t\t\tsb.append(\"\\\\f\");\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\tsb.append(\"\\\\r\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsb.append(c);\n\t\t}\n\t}\n\n\treturn sb.toString();\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * If both string arguments are non-null, this method concatenates them with ' and '.\n * If only one of the arguments is non-null, this method returns the non-null argument.\n * If both arguments are null, this method returns null.\n *\n * @param s1 The first string argument\n * @param s2 The second string argument\n *\n * @return The concatenated string, or non-null argument, or null\n */\n", "func_signal": "@Nullable\npublic static String concatenateWithAnd(@Nullable String s1, @Nullable String s2)", "code": "{\n\tif (s1 != null) {\n\t\treturn s2 == null ? s1 : s1 + \" and \" + s2;\n\t}\n\telse {\n\t\treturn s2;\n\t}\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Creates a random string with a length within the given interval. The string contains only characters that\n * can be represented as a single code point.\n *\n * @param rnd The random used to create the strings.\n * @param minLength The minimum string length.\n * @param maxLength The maximum string length (inclusive).\n * @param minValue The minimum character value to occur.\n * @param maxValue The maximum character value to occur.\n * @return A random String.\n */\n", "func_signal": "public static String getRandomString(Random rnd, int minLength, int maxLength, char minValue, char maxValue)", "code": "{\n\tint len = rnd.nextInt(maxLength - minLength + 1) + minLength;\n\n\tchar[] data = new char[len];\n\tint diff = maxValue - minValue + 1;\n\n\tfor (int i = 0; i < data.length; i++) {\n\t\tdata[i] = (char) (rnd.nextInt(diff) + minValue);\n\t}\n\treturn new String(data);\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * This method calls {@link Object#toString()} on the given object, unless the\n * object is an array. In that case, it will use the {@link #arrayToString(Object)}\n * method to create a string representation of the array that includes all contained\n * elements.\n *\n * @param o The object for which to create the string representation.\n * @return The string representation of the object.\n */\n", "func_signal": "public static String arrayAwareToString(Object o)", "code": "{\n\tif (o == null) {\n\t\treturn \"null\";\n\t}\n\tif (o.getClass().isArray()) {\n\t\treturn arrayToString(o);\n\t}\n\n\treturn o.toString();\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Given a hex string this will return the byte array corresponding to the\n * string .\n *\n * @param hex\n *        the hex String array\n * @return a byte array that is a hex string representation of the given\n *         string. The size of the byte array is therefore hex.length/2\n */\n", "func_signal": "public static byte[] hexStringToByte(final String hex)", "code": "{\n\tfinal byte[] bts = new byte[hex.length() / 2];\n\tfor (int i = 0; i < bts.length; i++) {\n\t\tbts[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);\n\t}\n\treturn bts;\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * Given an array of bytes it will convert the bytes to a hex string\n * representation of the bytes.\n *\n * @param bytes\n *        the bytes to convert in a hex string\n * @param start\n *        start index, inclusively\n * @param end\n *        end index, exclusively\n * @return hex string representation of the byte array\n */\n", "func_signal": "public static String byteToHexString(final byte[] bytes, final int start, final int end)", "code": "{\n\tif (bytes == null) {\n\t\tthrow new IllegalArgumentException(\"bytes == null\");\n\t}\n\n\tint length = end - start;\n\tchar[] out = new char[length * 2];\n\n\tfor (int i = start, j = 0; i < end; i++) {\n\t\tout[j++] = HEX_CHARS[(0xF0 & bytes[i]) >>> 4];\n\t\tout[j++] = HEX_CHARS[0x0F & bytes[i]];\n\t}\n\n\treturn new String(out);\n}", "path": "flink-learning/flink-learning-core/src/main/java/com/zhisheng/core/utils/StringUtils.java", "commit_date": "2019-09-25 00:00:00", "repo_name": "zhisheng17/flink-learning", "stars": 14139, "license": "apache-2.0", "language": "java", "size": 43599}
{"docstring": "/**\n * @return {@link Principal} stored on the request, or {@code null}\n *         if no object was found.\n */\n", "func_signal": "public Principal provide()", "code": "{\n    final Principal principal = request.getSecurityContext().getUserPrincipal();\n    if (principal == null) {\n        throw new IllegalStateException(\"Cannot inject a custom principal into unauthenticated request\");\n    }\n    return principal;\n}", "path": "dropwizard/dropwizard-auth/src/main/java/io/dropwizard/auth/PrincipalContainerRequestValueFactory.java", "commit_date": "2018-06-23 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Converts the provided map as a JSON object according to the configured JSON mapper.\n *\n * @param map the provided map\n * @return the JSON as a string\n */\n", "func_signal": "@Nullable\npublic String toJson(@Nullable Map<String, Object> map)", "code": "{\n    if (map == null || map.isEmpty()) {\n        return null;\n    }\n\n    try (StringWriter writer = new StringWriter(bufferSize)) {\n        objectMapper.writeValue(writer, map);\n        if (doesAppendLineSeparator) {\n            writer.append(CoreConstants.LINE_SEPARATOR);\n        }\n        return writer.toString();\n    } catch (IOException e) {\n        throw new IllegalArgumentException(\"Unable to format map as a JSON\", e);\n    }\n}", "path": "dropwizard/dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/layout/JsonFormatter.java", "commit_date": "2019-01-20 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/** Issues a POST against the reload ssl admin task, asserts that the code and content\n *  are as expected, and finally returns the server certificate */\n", "func_signal": "private byte[] certBytes(int code, String content) throws Exception", "code": "{\n    final URL url = new URL(\"https://localhost:\" + rule.getAdminPort() + \"/tasks/reload-ssl\");\n    final HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();\n    try {\n        postIt(conn);\n\n        assertThat(conn.getResponseCode()).isEqualTo(code);\n        if (code == 200) {\n            assertThat(CharStreams.toString(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8)))\n                .isEqualTo(content);\n        } else {\n            assertThat(CharStreams.toString(new InputStreamReader(conn.getErrorStream(), StandardCharsets.UTF_8)))\n                .contains(content);\n        }\n\n        // The certificates are self signed, so are the only cert in the chain.\n        // Thus, we return the one and only certificate.\n        return conn.getServerCertificates()[0].getEncoded();\n    } finally {\n        conn.disconnect();\n    }\n}", "path": "dropwizard/dropwizard-e2e/src/test/java/com/example/sslreload/SslReloadAppTest.java", "commit_date": "2020-03-26 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Detects the absolute path of a class path resource.\n *\n * @param resourceClassPathLocation the filename of the class path resource\n * @return the absolute path to the denoted resource\n */\n", "func_signal": "public static String resourceFilePath(final String resourceClassPathLocation)", "code": "{\n    try {\n        return new File(Resources.getResource(resourceClassPathLocation).toURI()).getAbsolutePath();\n    } catch (Exception e) {\n        if (e instanceof RuntimeException) {\n            throw (RuntimeException) e;\n        }\n        throw new RuntimeException(e);\n    }\n}", "path": "dropwizard/dropwizard-testing/src/main/java/io/dropwizard/testing/ResourceHelpers.java", "commit_date": "2018-06-25 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * @since 2.0\n */\n", "func_signal": "public B bootstrapLogging(boolean value)", "code": "{\n    bootstrapLogging = value;\n    return (B) this;\n}", "path": "dropwizard/dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Creates a new DAO with a given session provider.\n *\n * @param sessionFactory    a session provider\n */\n", "func_signal": "public AbstractDAO(SessionFactory sessionFactory)", "code": "{\n    this.sessionFactory = requireNonNull(sessionFactory);\n    this.entityClass = Generics.getTypeParameter(getClass());\n}", "path": "dropwizard/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java", "commit_date": "2018-08-24 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Creates a new BasicCredentials with the given username and password.\n *\n * @param username the username\n * @param password the password\n */\n", "func_signal": "public BasicCredentials(String username, String password)", "code": "{\n    this.username = requireNonNull(username);\n    this.password = requireNonNull(password);\n}", "path": "dropwizard/dropwizard-auth/src/main/java/io/dropwizard/auth/basic/BasicCredentials.java", "commit_date": "2018-06-25 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Performs a call in a transaction\n *\n * @param call the call\n * @param <T>  the type of the returned result\n * @return the result of the call\n */\n", "func_signal": "public <T> T inTransaction(Callable<T> call)", "code": "{\n    final Session session = sessionFactory.getCurrentSession();\n    final Transaction transaction = session.beginTransaction();\n    try {\n        final T result = call.call();\n        transaction.commit();\n        return result;\n    } catch (final Exception e) {\n        transaction.rollback();\n        if (e instanceof RuntimeException) {\n          throw (RuntimeException) e;\n        }\n        throw new RuntimeException(e);\n    }\n}", "path": "dropwizard/dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Build a fully configured {@link Jdbi} instance managed by the DropWizard lifecycle\n * with the configured health check; this method should not be overridden\n * (instead, override {@link #newInstance(ManagedDataSource)} and\n * {@link #configure(Jdbi)})\n *\n * @param environment\n * @param configuration\n * @param dataSource\n * @param name\n * @return A fully configured {@link Jdbi} object\n */\n", "func_signal": "public Jdbi build(Environment environment,\n                  PooledDataSourceFactory configuration,\n                  ManagedDataSource dataSource,\n                  String name)", "code": "{\n\n    // Create the instance\n    final Jdbi jdbi = newInstance(dataSource);\n\n    // Manage the data source that created this instance.\n    environment.lifecycle().manage(dataSource);\n\n    // Setup the required health checks.\n    final Optional<String> validationQuery = configuration.getValidationQuery();\n    environment.healthChecks().register(name, new JdbiHealthCheck(\n        environment.getHealthCheckExecutorService(),\n        configuration.getValidationQueryTimeout().orElseGet(() -> Duration.seconds(5)),\n        jdbi,\n        validationQuery));\n\n    // Setup the SQL logger\n    jdbi.setSqlLogger(buildSQLLogger(environment.metrics(), nameStrategy));\n\n    if (configuration.isAutoCommentsEnabled()) {\n        final TemplateEngine original = jdbi.getConfig(SqlStatements.class).getTemplateEngine();\n        jdbi.setTemplateEngine(new NamePrependingTemplateEngine(original));\n    }\n\n    configure(jdbi);\n\n    return jdbi;\n}", "path": "dropwizard/dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/JdbiFactory.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Performs an action in a transaction\n *\n * @param action the action\n */\n", "func_signal": "public void inTransaction(Runnable action)", "code": "{\n    inTransaction(() -> {\n        action.run();\n        return true;\n    });\n}", "path": "dropwizard/dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Convenience method to return a single instance that matches the criteria query,\n * or null if the criteria returns no results.\n *\n * @param criteriaQuery the {@link CriteriaQuery} query to run\n * @return the single result or {@code null}\n * @throws HibernateException if there is more than one matching result\n */\n", "func_signal": "protected E uniqueResult(CriteriaQuery<E> criteriaQuery) throws HibernateException", "code": "{\n    return AbstractProducedQuery.uniqueElement(\n        currentSession()\n            .createQuery(requireNonNull(criteriaQuery))\n            .getResultList()\n    );\n}", "path": "dropwizard/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java", "commit_date": "2018-08-24 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/** Configure SSL and POST request parameters */\n", "func_signal": "private void postIt(HttpsURLConnection conn) throws Exception", "code": "{\n    final SSLContext sslCtx = SSLContext.getInstance(\"TLS\");\n    sslCtx.init(null, new TrustManager[]{TRUST_ALL}, null);\n\n    conn.setHostnameVerifier(new NoopHostnameVerifier());\n    conn.setSSLSocketFactory(sslCtx.getSocketFactory());\n\n    // Make it a POST\n    conn.setDoOutput(true);\n    conn.getOutputStream().write(new byte[]{});\n}", "path": "dropwizard/dropwizard-e2e/src/test/java/com/example/sslreload/SslReloadAppTest.java", "commit_date": "2020-03-26 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Generate a random UUID v4 that will perform reasonably when used by\n * multiple threads under load.\n *\n * @see <a href=\"https://github.com/Netflix/netflix-commons/blob/v0.3.0/netflix-commons-util/src/main/java/com/netflix/util/concurrent/ConcurrentUUIDFactory.java\">ConcurrentUUIDFactory</a>\n * @return random UUID\n */\n", "func_signal": "private static UUID generateRandomUuid()", "code": "{\n    final Random rnd = ThreadLocalRandom.current();\n    long mostSig  = rnd.nextLong();\n    long leastSig = rnd.nextLong();\n\n    // Identify this as a version 4 UUID, that is one based on a random value.\n    mostSig &= 0xffffffffffff0fffL;\n    mostSig |= 0x0000000000004000L;\n\n    // Set the variant identifier as specified for version 4 UUID values.  The two\n    // high order bits of the lower word are required to be one and zero, respectively.\n    leastSig &= 0x3fffffffffffffffL;\n    leastSig |= 0x8000000000000000L;\n\n    return new UUID(mostSig, leastSig);\n}", "path": "dropwizard/dropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/RequestIdFilter.java", "commit_date": "2018-06-25 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Overridable function to allow extra customization of the created {@link Jdbi}\n * instance.\n *\n * <p>\n * If this is overridden it is strongly recommend that\n * {@code super.configure(jdbi, configuration)} is invoked before any other\n * changes are made if you intend to use the default as a base so that the\n * customized settings will supersede the defaults\n * </p>\n *\n * @param jdbi\n */\n", "func_signal": "protected void configure(final Jdbi jdbi)", "code": "{\n    jdbi.installPlugin(new SqlObjectPlugin());\n    jdbi.installPlugin(new JodaTimePlugin());\n    jdbi.installPlugin(new GuavaPlugin());\n}", "path": "dropwizard/dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/JdbiFactory.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Override to configure the {@link Hibernate5Module}.\n */\n", "func_signal": "protected Hibernate5Module createHibernate5Module()", "code": "{\n    Hibernate5Module module = new Hibernate5Module();\n    if (lazyLoadingEnabled) {\n        module.enable(Feature.FORCE_LAZY_LOADING);\n    }\n    return module;\n}", "path": "dropwizard/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java", "commit_date": "2019-05-04 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/* Access to this method is authorized by the class level annotation */\n", "func_signal": "@GET\npublic String showBasicUserSecret(@Context SecurityContext context)", "code": "{\n    User user = (User) context.getUserPrincipal();\n    return String.format(\"Hey there, %s. You seem to be a basic user. %d\", user.getName(), user.getId());\n}", "path": "dropwizard/dropwizard-example/src/main/java/com/example/helloworld/resources/ProtectedClassResource.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Create a new task with the given name and response content type\n *\n * @param name                the task's name\n * @param responseContentType the task's response content type\n * @since 2.0\n */\n", "func_signal": "protected Task(String name, @Nullable String responseContentType)", "code": "{\n    this.name = name;\n    this.responseContentType = responseContentType;\n}", "path": "dropwizard/dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/Task.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Either save or update the given instance, depending upon resolution of the unsaved-value\n * checks (see the manual for discussion of unsaved-value checking).\n * <p/>\n * This operation cascades to associated instances if the association is mapped with\n * <tt>cascade=\"save-update\"</tt>.\n *\n * @param entity a transient or detached instance containing new or updated state\n * @throws HibernateException\n * @see Session#saveOrUpdate(Object)\n */\n", "func_signal": "protected E persist(E entity) throws HibernateException", "code": "{\n    currentSession().saveOrUpdate(requireNonNull(entity));\n    return entity;\n}", "path": "dropwizard/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java", "commit_date": "2018-08-24 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Build a fully configured {@link Jdbi} instance managed by the DropWizard lifecycle\n * with the configured health check; this method should not be overridden\n * (instead, override {@link #newInstance(ManagedDataSource)} and\n * {@link #configure(Jdbi)})\n *\n * @param environment\n * @param configuration\n * @param name\n * @return A fully configured {@link Jdbi} object using a managed data source\n * based on the specified environment and configuration\n * @see #build(Environment, PooledDataSourceFactory, ManagedDataSource,\n * String)\n */\n", "func_signal": "public Jdbi build(Environment environment,\n                  PooledDataSourceFactory configuration,\n                  String name)", "code": "{\n    final ManagedDataSource dataSource = configuration.build(environment.metrics(), name);\n    return build(environment, configuration, dataSource, name);\n}", "path": "dropwizard/dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/JdbiFactory.java", "commit_date": "2019-11-20 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * Force initialization of a proxy or persistent collection.\n * <p/>\n * Note: This only ensures initialization of a proxy object or collection;\n * it is not guaranteed that the elements INSIDE the collection will be initialized/materialized.\n *\n * @param proxy a persistable object, proxy, persistent collection or {@code null}\n * @throws HibernateException if we can't initialize the proxy at this time, eg. the {@link Session} was closed\n */\n", "func_signal": "protected <T> T initialize(T proxy) throws HibernateException", "code": "{\n    if (!Hibernate.isInitialized(proxy)) {\n        Hibernate.initialize(proxy);\n    }\n    return proxy;\n}", "path": "dropwizard/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java", "commit_date": "2018-08-24 00:00:00", "repo_name": "dropwizard/dropwizard", "stars": 8440, "license": "apache-2.0", "language": "java", "size": 110791}
{"docstring": "/**\n * This method is created to get identifier of entity without triggering \n * lazy load the whole entity object.\n * @param entity\n * @return\n */\n", "func_signal": "public static @Nullable Long idOf(@Nullable AbstractEntity entity)", "code": "{\n\tif (entity == null) {\n\t\treturn null;\n\t} else if (entity instanceof HibernateProxy) {\n\t\tHibernateProxy proxy = (HibernateProxy) entity;\n\t\treturn (Long) proxy.getHibernateLazyInitializer().getIdentifier();\n\t} else {\n\t\treturn entity.getId();\n\t}\n}", "path": "onedev/server-core/src/main/java/io/onedev/server/model/AbstractEntity.java", "commit_date": "2019-06-06 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Append a debug description of core RevFlags to a buffer.\n *\n * @param s\n *            buffer to append a debug description of core RevFlags onto.\n */\n", "func_signal": "protected void appendCoreFlags(StringBuilder s)", "code": "{\n\ts.append((flags & RevWalk.TOPO_DELAY) != 0 ? 'o' : '-');\n\ts.append((flags & RevWalk.TEMP_MARK) != 0 ? 't' : '-');\n\ts.append((flags & RevWalk.REWRITE) != 0 ? 'r' : '-');\n\ts.append((flags & RevWalk.UNINTERESTING) != 0 ? 'u' : '-');\n\ts.append((flags & RevWalk.SEEN) != 0 ? 's' : '-');\n\ts.append((flags & RevWalk.PARSED) != 0 ? 'p' : '-');\n}", "path": "onedev/server-core/src/main/java/org/eclipse/jgit/revwalk/RevObject.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Encode a string pattern for faster matching on byte arrays.\n * <p>\n * Force the characters to our funny UTF-8 only convention that we use on\n * raw buffers. This avoids needing to perform character set decodes on the\n * individual commit buffers.\n *\n * @param patternText\n *            original pattern string supplied by the user or the\n *            application.\n * @return same pattern, but re-encoded to match our funny raw UTF-8\n *         character sequence {@link org.eclipse.jgit.util.RawCharSequence}.\n */\n", "func_signal": "protected static final String forceToRaw(String patternText)", "code": "{\n\tfinal byte[] b = Constants.encode(patternText);\n\tfinal StringBuilder needle = new StringBuilder(b.length);\n\tfor (byte element : b)\n\t\tneedle.append((char) (element & 0xff));\n\treturn needle.toString();\n}", "path": "onedev/server-core/src/main/java/org/eclipse/jgit/revwalk/filter/PatternMatchRevFilter.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Actually match the given <code>path</code> against the given <code>pattern</code>.\n *\n * @param pattern   the pattern to match against\n * @param path      the path String to test\n * @param fullMatch whether a full pattern match is required\n *                  (else a pattern match as far as the given base path goes is sufficient)\n * @return <code>true</code> if the supplied <code>path</code> matched,\n *         <code>false</code> if it didn't\n */\n", "func_signal": "protected boolean doMatch(String pattern, String str, boolean fullMatch)", "code": "{\n    if (str.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {\n        return false;\n    }\n\n    String[] pattDirs = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator);\n    String[] pathDirs = StringUtils.tokenizeToStringArray(str, this.pathSeparator);\n\n    int pattIdxStart = 0;\n    int pattIdxEnd = pattDirs.length - 1;\n    int pathIdxStart = 0;\n    int pathIdxEnd = pathDirs.length - 1;\n\n    // Match all elements up to the first **\n    while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n        String patDir = pattDirs[pattIdxStart];\n        if (\"**\".equals(patDir)) {\n            break;\n        }\n        if (!STRING_MATCHER.matches(patDir, pathDirs[pathIdxStart])) {\n            return false;\n        }\n        pattIdxStart++;\n        pathIdxStart++;\n    }\n\n    if (pathIdxStart > pathIdxEnd) {\n        // Path is exhausted, only match if rest of pattern is * or **'s\n        if (pattIdxStart > pattIdxEnd) {\n            return (pattern.endsWith(this.pathSeparator) ?\n            \t\tstr.endsWith(this.pathSeparator) : !str.endsWith(this.pathSeparator));\n        }\n        if (!fullMatch) {\n            return true;\n        }\n        if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(\"*\") &&\n        \t\tstr.endsWith(this.pathSeparator)) {\n            return true;\n        }\n        for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n            if (!pattDirs[i].equals(\"**\")) {\n                return false;\n            }\n        }\n        return true;\n    } else if (pattIdxStart > pattIdxEnd) {\n        // String not exhausted, but pattern is. Failure.\n        return false;\n    } else if (!fullMatch && \"**\".equals(pattDirs[pattIdxStart])) {\n        // Path start definitely matches due to \"**\" part in pattern.\n        return true;\n    }\n\n    // up to last '**'\n    while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n        String patDir = pattDirs[pattIdxEnd];\n        if (patDir.equals(\"**\")) {\n            break;\n        }\n        if (!STRING_MATCHER.matches(patDir, pathDirs[pathIdxEnd])) {\n            return false;\n        }\n        pattIdxEnd--;\n        pathIdxEnd--;\n    }\n    if (pathIdxStart > pathIdxEnd) {\n        // String is exhausted\n        for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n            if (!pattDirs[i].equals(\"**\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n        int patIdxTmp = -1;\n        for (int i = pattIdxStart + 1; i <= pattIdxEnd; i++) {\n            if (pattDirs[i].equals(\"**\")) {\n                patIdxTmp = i;\n                break;\n            }\n        }\n        if (patIdxTmp == pattIdxStart + 1) {\n            // '**/**' situation, so skip one\n            pattIdxStart++;\n            continue;\n        }\n        // Find the pattern between padIdxStart & padIdxTmp in str between\n        // strIdxStart & strIdxEnd\n        int patLength = (patIdxTmp - pattIdxStart - 1);\n        int strLength = (pathIdxEnd - pathIdxStart + 1);\n        int foundIdx = -1;\n\n        strLoop:\n        for (int i = 0; i <= strLength - patLength; i++) {\n            for (int j = 0; j < patLength; j++) {\n                String subPat = (String) pattDirs[pattIdxStart + j + 1];\n                String subStr = (String) pathDirs[pathIdxStart + i + j];\n                if (!STRING_MATCHER.matches(subPat, subStr)) {\n                    continue strLoop;\n                }\n            }\n            foundIdx = pathIdxStart + i;\n            break;\n        }\n\n        if (foundIdx == -1) {\n            return false;\n        }\n\n        pattIdxStart = patIdxTmp;\n        pathIdxStart = foundIdx + patLength;\n    }\n\n    for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n        if (!pattDirs[i].equals(\"**\")) {\n            return false;\n        }\n    }\n\n    return true;\n}", "path": "onedev/server-core/src/main/java/io/onedev/server/util/match/PathMatcher.java", "commit_date": "2019-12-10 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Given a pattern and a full path, determine the pattern-mapped part.\n * <p>For example:\n * <ul>\n * <li>'<code>/docs/cvs/commit.html</code>' and '<code>/docs/cvs/commit.html</code> -> ''</li>\n * <li>'<code>/docs/*</code>' and '<code>/docs/cvs/commit</code> -> '<code>cvs/commit</code>'</li>\n * <li>'<code>/docs/cvs/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>commit.html</code>'</li>\n * <li>'<code>/docs/**</code>' and '<code>/docs/cvs/commit</code> -> '<code>cvs/commit</code>'</li>\n * <li>'<code>/docs/**\\/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>cvs/commit.html</code>'</li>\n * <li>'<code>/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>docs/cvs/commit.html</code>'</li>\n * <li>'<code>*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>/docs/cvs/commit.html</code>'</li>\n * <li>'<code>*</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>/docs/cvs/commit.html</code>'</li>\n * </ul>\n * <p>Assumes that {@link #match} returns <code>true</code> for '<code>pattern</code>'\n * and '<code>path</code>', but does <strong>not</strong> enforce this.\n */\n", "func_signal": "public String extractPathWithinPattern(String pattern, String path)", "code": "{\n    String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator);\n    String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator);\n\n    StringBuilder buffer = new StringBuilder();\n\n    // Add any path parts that have a wildcarded pattern part.\n    int puts = 0;\n    for (int i = 0; i < patternParts.length; i++) {\n        String patternPart = patternParts[i];\n        if ((patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) && pathParts.length >= i + 1) {\n            if (puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator))) {\n                buffer.append(this.pathSeparator);\n            }\n            buffer.append(pathParts[i]);\n            puts++;\n        }\n    }\n\n    // Append any trailing path parts.\n    for (int i = patternParts.length; i < pathParts.length; i++) {\n        if (puts > 0 || i > 0) {\n            buffer.append(this.pathSeparator);\n        }\n        buffer.append(pathParts[i]);\n    }\n\n    return buffer.toString();\n}", "path": "onedev/server-core/src/main/java/io/onedev/server/util/match/PathMatcher.java", "commit_date": "2019-12-10 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Remove redundant global tag for a type safe (generic) collection if it is\n * the same as defined by the JavaBean property\n *\n * @param property\n *            - JavaBean property\n * @param node\n *            - representation of the property\n * @param object\n *            - instance represented by the node\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected void checkGlobalTag(Property property, Node node, Object object)", "code": "{\n    // Skip primitive arrays.\n    if (object.getClass().isArray() && object.getClass().getComponentType().isPrimitive()) {\n        return;\n    }\n\n    Class<?>[] arguments = property.getActualTypeArguments();\n    if (arguments != null) {\n        if (node.getNodeId() == NodeId.sequence) {\n            // apply map tag where class is the same\n            Class<? extends Object> t = arguments[0];\n            SequenceNode snode = (SequenceNode) node;\n            Iterable<Object> memberList = Collections.EMPTY_LIST;\n            if (object.getClass().isArray()) {\n                memberList = Arrays.asList((Object[]) object);\n            } else if (object instanceof Iterable<?>) {\n                // list\n                memberList = (Iterable<Object>) object;\n            }\n            Iterator<Object> iter = memberList.iterator();\n            if (iter.hasNext()) {\n                for (Node childNode : snode.getValue()) {\n                    Object member = iter.next();\n                    if (member != null) {\n                        if (t.equals(member.getClass()))\n                            if (childNode.getNodeId() == NodeId.mapping) {\n                                childNode.setTag(Tag.MAP);\n                            }\n                    }\n                }\n            }\n        } else if (object instanceof Set) {\n            Class<?> t = arguments[0];\n            MappingNode mnode = (MappingNode) node;\n            Iterator<NodeTuple> iter = mnode.getValue().iterator();\n            Set<?> set = (Set<?>) object;\n            for (Object member : set) {\n                NodeTuple tuple = iter.next();\n                Node keyNode = tuple.getKeyNode();\n                if (t.equals(member.getClass())) {\n                    if (keyNode.getNodeId() == NodeId.mapping) {\n                        keyNode.setTag(Tag.MAP);\n                    }\n                }\n            }\n        } else if (object instanceof Map) { // NodeId.mapping ends-up here\n            Class<?> keyType = arguments[0];\n            Class<?> valueType = arguments[1];\n            MappingNode mnode = (MappingNode) node;\n            for (NodeTuple tuple : mnode.getValue()) {\n                resetTag(keyType, tuple.getKeyNode());\n                resetTag(valueType, tuple.getValueNode());\n            }\n        } else {\n            // the type for collection entries cannot be\n            // detected\n        }\n    }\n}", "path": "onedev/server-core/src/main/java/org/yaml/snakeyaml/representer/Representer.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Get JavaBean properties to be serialised. The order is respected. This\n * method may be overridden to provide custom property selection or order.\n *\n * @param type\n *            - JavaBean to inspect the properties\n * @return properties to serialise\n */\n", "func_signal": "protected Set<Property> getProperties(Class<? extends Object> type)", "code": "{\n    if (typeDefinitions.containsKey(type)) {\n        return typeDefinitions.get(type).getProperties();\n    }\n    return getPropertyUtils().getProperties(type);\n}", "path": "onedev/server-core/src/main/java/org/yaml/snakeyaml/representer/Representer.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Represent one JavaBean property.\n *\n * @param javaBean\n *            - the instance to be represented\n * @param property\n *            - the property of the instance\n * @param propertyValue\n *            - value to be represented\n * @param customTag\n *            - user defined Tag\n * @return NodeTuple to be used in a MappingNode. Return null to skip the\n *         property\n */\n", "func_signal": "protected NodeTuple representJavaBeanProperty(Object javaBean, Property property,\n        Object propertyValue, Tag customTag)", "code": "{\n    ScalarNode nodeKey = (ScalarNode) representData(property.getName());\n    // the first occurrence of the node must keep the tag\n    boolean hasAlias = this.representedObjects.containsKey(propertyValue);\n\n    Node nodeValue = representData(propertyValue);\n\n    if (propertyValue != null && !hasAlias) {\n        NodeId nodeId = nodeValue.getNodeId();\n        if (customTag == null) {\n            if (nodeId == NodeId.scalar) {\n                if (property.getType() == propertyValue.getClass()) {\n                    if (propertyValue instanceof Enum<?>) {\n                        nodeValue.setTag(Tag.STR);\n                    }\n                }\n            } else {\n                if (nodeId == NodeId.mapping) {\n                    if (property.getType() == propertyValue.getClass()) {\n                        if (!(propertyValue instanceof Map<?, ?>)) {\n                            if (!nodeValue.getTag().equals(Tag.SET)) {\n                                nodeValue.setTag(Tag.MAP);\n                            }\n                        }\n                    }\n                }\n                checkGlobalTag(property, nodeValue, propertyValue);\n            }\n        }\n    }\n\n    return new NodeTuple(nodeKey, nodeValue);\n}", "path": "onedev/server-core/src/main/java/org/yaml/snakeyaml/representer/Representer.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Adds the given element to this builder. It must be checked with\n * {@link #accepts(ConstrainedElement)} before, whether this is allowed or\n * not.\n *\n * @param constrainedElement The element to add.\n */\n", "func_signal": "public void add(ConstrainedElement constrainedElement)", "code": "{\n\t/*\n\t * Make sure child annotation can override parent annotation with same type\n\t */\n\tfor (MetaConstraint<?> constraint: constrainedElement.getConstraints()) {\n\t\tif (!constraints.stream()\n\t\t\t\t.filter(it->it.getDescriptor().getAnnotationType() == constraint.getDescriptor().getAnnotationType())\n\t\t\t\t.findAny().isPresent()) {\n\t\t\tconstraints.add(constraint);\n\t\t}\n\t}\n//\t\tconstraints.addAll( constrainedElement.getConstraints() );\n\t\n\tisCascading = isCascading || constrainedElement.isCascading();\n\tunwrapMode = constrainedElement.unwrapMode();\n\n\taddGroupConversions( constrainedElement.getGroupConversions() );\n}", "path": "onedev/server-core/src/main/java/org/hibernate/validator/internal/metadata/aggregated/MetaDataBuilder.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Adapts the given constraints to the given bean type. In case a constraint\n * is defined locally at the bean class the original constraint will be\n * returned without any modifications. If a constraint is defined in the\n * hierarchy (interface or super class) a new constraint will be returned\n * with an origin of {@link org.hibernate.validator.internal.metadata.core.ConstraintOrigin#DEFINED_IN_HIERARCHY}. If a\n * constraint is defined on an interface, the interface type will\n * additionally be part of the constraint's groups (implicit grouping).\n *\n * @param constraints The constraints that shall be adapted. The constraints themselves\n * will not be altered.\n *\n * @return A constraint adapted to the given bean type.\n */\n", "func_signal": "protected Set<MetaConstraint<?>> adaptOriginsAndImplicitGroups(Set<MetaConstraint<?>> constraints)", "code": "{\n\tSet<MetaConstraint<?>> adaptedConstraints = newHashSet();\n\n\tfor ( MetaConstraint<?> oneConstraint : constraints ) {\n\t\tadaptedConstraints.add( adaptOriginAndImplicitGroup( oneConstraint ) );\n\t}\n\treturn adaptedConstraints;\n}", "path": "onedev/server-core/src/main/java/org/hibernate/validator/internal/metadata/aggregated/MetaDataBuilder.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * @param redirectUrl\n *            URL to redirect to.\n * @param status\n *            301 (Moved permanently) or 302 (Moved temporarily)\n */\n", "func_signal": "public RedirectRequestHandler(final String redirectUrl, final int status)", "code": "{\n\tif ((status != HttpServletResponse.SC_MOVED_PERMANENTLY) &&\n\t\t(status != HttpServletResponse.SC_MOVED_TEMPORARILY) &&\n\t\t(status != HttpServletResponse.SC_SEE_OTHER))\n\t{\n\t\tthrow new IllegalStateException(\"Status must be either 301, 302 or 303, but was: \" + status);\n\t}\n\tthis.redirectUrl = Args.notEmpty(redirectUrl, \"redirectUrl\");\n\tthis.status = status;\n}", "path": "onedev/server-core/src/main/java/org/apache/wicket/request/http/handler/RedirectRequestHandler.java", "commit_date": "2020-08-15 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * @param rootClass The root class. That is the class for which we currently\n * create a {@code BeanMetaData}\n * @param hierarchyClass The class on which the current constraint is defined on\n *\n * @return Returns {@code ConstraintOrigin.DEFINED_LOCALLY} if the\n *         constraint was defined on the root bean,\n *         {@code ConstraintOrigin.DEFINED_IN_HIERARCHY} otherwise.\n */\n", "func_signal": "private ConstraintOrigin definedIn(Class<?> rootClass, Class<?> hierarchyClass)", "code": "{\n\tif ( hierarchyClass.equals( rootClass ) ) {\n\t\treturn ConstraintOrigin.DEFINED_LOCALLY;\n\t}\n\telse {\n\t\treturn ConstraintOrigin.DEFINED_IN_HIERARCHY;\n\t}\n}", "path": "onedev/server-core/src/main/java/org/hibernate/validator/internal/metadata/aggregated/MetaDataBuilder.java", "commit_date": "2020-11-08 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Tag logic:\n * - explicit root tag is set in serializer\n * - if there is a predefined class tag it is used\n * - a global tag with class name is always used as tag. The JavaBean parent\n * of the specified JavaBean may set another tag (tag:yaml.org,2002:map)\n * when the property class is the same as runtime class\n *\n * @param properties\n *            JavaBean getters\n * @param javaBean\n *            instance for Node\n * @return Node to get serialized\n */\n", "func_signal": "protected MappingNode representJavaBean(Set<Property> properties, Object javaBean)", "code": "{\n    List<NodeTuple> value = new ArrayList<NodeTuple>(properties.size());\n    Tag tag;\n    Tag customTag = classTags.get(javaBean.getClass());\n    tag = customTag != null ? customTag : new Tag(\"!\" + javaBean.getClass().getSimpleName());\n    // flow style will be chosen by BaseRepresenter\n    MappingNode node = new MappingNode(tag, value, FlowStyle.AUTO);\n    representedObjects.put(javaBean, node);\n    DumperOptions.FlowStyle bestStyle = FlowStyle.FLOW;\n    for (Property property : properties) {\n        Object memberValue = property.get(javaBean);\n        Tag customPropertyTag = memberValue == null ? null\n                : classTags.get(memberValue.getClass());\n        NodeTuple tuple = representJavaBeanProperty(javaBean, property, memberValue,\n                customPropertyTag);\n        if (tuple == null) {\n            continue;\n        }\n        if (!((ScalarNode) tuple.getKeyNode()).isPlain()) {\n            bestStyle = FlowStyle.BLOCK;\n        }\n        Node nodeValue = tuple.getValueNode();\n        if (!(nodeValue instanceof ScalarNode && ((ScalarNode) nodeValue).isPlain())) {\n            bestStyle = FlowStyle.BLOCK;\n        }\n        value.add(tuple);\n    }\n    if (defaultFlowStyle != FlowStyle.AUTO) {\n        node.setFlowStyle(defaultFlowStyle);\n    } else {\n        node.setFlowStyle(bestStyle);\n    }\n    return node;\n}", "path": "onedev/server-core/src/main/java/org/yaml/snakeyaml/representer/Representer.java", "commit_date": "2020-04-21 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Escapes single quotes in localized strings to be used as JavaScript\n * strings enclosed in single quotes\n *\n * @param key\n *            resource key for localized message\n * @return localized string with escaped single quotes\n */\n", "func_signal": "protected String getEscapedJsString(String key)", "code": "{\n\tString value = getString(key);\n\n\treturn Strings.replaceAll(value, \"'\", \"\\\\'\").toString();\n}", "path": "onedev/server-core/src/main/java/io/onedev/server/web/component/select2/AbstractSelect2Choice.java", "commit_date": "2020-04-24 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Returns a collection of currently active websockets. The connections might close at any time.\n *\n * @param application\n *          The application\n * @return a collection of currently active websockets\n */\n", "func_signal": "public Collection<IWebSocketConnection> getConnections(Application application)", "code": "{\n\tArgs.notNull(application, \"application\");\n\n\tCollection<IWebSocketConnection> connections = new ArrayList<>();\n\tConcurrentMap<String, ConcurrentMap<IKey, IWebSocketConnection>> connectionsBySession = application.getMetaData(KEY);\n\tif (connectionsBySession != null)\n\t{\n\t\tfor (ConcurrentMap<IKey, IWebSocketConnection> connectionsByPage : connectionsBySession.values())\n\t\t{\n\t\t\tconnections.addAll(connectionsByPage.values());\n\t\t}\n\t}\n\treturn connections;\n}", "path": "onedev/server-core/src/main/java/org/apache/wicket/protocol/ws/api/registry/SimpleWebSocketConnectionRegistry.java", "commit_date": "2019-06-06 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * \n * @param resources\n * @param loadedResources\n */\n", "func_signal": "private void loadResources(Enumeration<URL> resources, Set<URL> loadedResources)", "code": "{\n\tif (resources != null)\n\t{\n\t\twhile (resources.hasMoreElements())\n\t\t{\n\t\t\tfinal URL url = resources.nextElement();\n\t\t\tloadedResources.add(url);\n\t\t}\n\t}\n}", "path": "onedev/server-core/src/main/java/org/apache/wicket/application/AbstractClassResolver.java", "commit_date": "2019-11-27 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tfinal StringBuilder s = new StringBuilder();\n\ts.append(Constants.typeString(getType()));\n\ts.append(' ');\n\ts.append(name());\n\ts.append(' ');\n\tappendCoreFlags(s);\n\treturn s.toString();\n}", "path": "onedev/server-core/src/main/java/org/eclipse/jgit/revwalk/RevObject.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Constructor\n * \n * @param id\n *            component id\n * @param model\n *            component model\n * @param provider\n *            choice provider\n */\n", "func_signal": "public AbstractSelect2Choice(String id, IModel<M> model, ChoiceProvider<T> provider)", "code": "{\n\tsuper(id, model);\n\tthis.provider = provider;\n\n\tsetOutputMarkupId(true);\n}", "path": "onedev/server-core/src/main/java/io/onedev/server/web/component/select2/AbstractSelect2Choice.java", "commit_date": "2020-04-24 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * @return choice provider\n */\n", "func_signal": "public final ChoiceProvider<T> getProvider()", "code": "{\n\tif (provider == null) {\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"Select2 choice component: \" + getId() + \" does not have a ChoiceProvider set\");\n\t}\n\treturn provider;\n}", "path": "onedev/server-core/src/main/java/io/onedev/server/web/component/select2/AbstractSelect2Choice.java", "commit_date": "2020-04-24 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Construct a new pattern matching filter.\n *\n * @param pattern\n *            text of the pattern. Callers may want to surround their\n *            pattern with \".*\" on either end to allow matching in the\n *            middle of the string.\n * @param innerString\n *            should .* be wrapped around the pattern of ^ and $ are\n *            missing? Most users will want this set.\n * @param rawEncoding\n *            should {@link #forceToRaw(String)} be applied to the pattern\n *            before compiling it?\n * @param flags\n *            flags from {@link java.util.regex.Pattern} to control how\n *            matching performs.\n */\n", "func_signal": "protected PatternMatchRevFilter(String pattern, final boolean innerString,\n\t\tfinal boolean rawEncoding, final int flags)", "code": "{\n\tif (pattern.length() == 0)\n\t\tthrow new IllegalArgumentException(JGitText.get().cannotMatchOnEmptyString);\n\tpatternText = pattern;\n\n\tif (innerString) {\n\t\tif (!pattern.startsWith(\"^\") && !pattern.startsWith(\".*\")) //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tpattern = \".*\" + pattern; //$NON-NLS-1$\n\t\tif (!pattern.endsWith(\"$\") && !pattern.endsWith(\".*\")) //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tpattern = pattern + \".*\"; //$NON-NLS-1$\n\t}\n\tfinal String p = rawEncoding ? forceToRaw(pattern) : pattern;\n\tcompiledPattern = Pattern.compile(p, flags).matcher(\"\"); //$NON-NLS-1$\n}", "path": "onedev/server-core/src/main/java/org/eclipse/jgit/revwalk/filter/PatternMatchRevFilter.java", "commit_date": "2020-05-16 00:00:00", "repo_name": "theonedev/onedev", "stars": 12413, "license": "mit", "language": "java", "size": 209377}
{"docstring": "/**\n * Copies the input stream to the output stream using the specified buffer size\n * @param in the input stream\n * @param out the output stream\n * @param bufferSize the buffer size to use when copying\n * @throws IOException\n */\n", "func_signal": "public static void copy(InputStream in, OutputStream out, int bufferSize)\n\t\tthrows IOException", "code": "{\n\tbyte[] b = new byte[bufferSize];\n\tint read;\n\n\twhile ((read = in.read(b)) != -1)\n\t{\n\t\tout.write(b, 0, read);\n\t}\n}", "path": "drawio/src/main/java/com/mxgraph/online/Utils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/** Decodes a BASE64 encoded byte array that is known to be resonably well formatted. The method is about twice as\n * fast as {@link #decode(byte[])}. The preconditions are:<br>\n * + The array must have a line length of 76 chars OR no line separators at all (one line).<br>\n * + Line separator must be \"\\r\\n\", as specified in RFC 2045\n * + The array must not contain illegal characters within the encoded string<br>\n * + The array CAN have illegal characters at the beginning and end, those will be dealt with appropriately.<br>\n * @param sArr The source array. Length 0 will return an empty array. <code>null</code> will throw an exception.\n * @return The decoded array of bytes. May be of length 0.\n */\n", "func_signal": "public final static byte[] decodeFast(byte[] sArr)", "code": "{\n\t// Check special case\n\tint sLen = sArr.length;\n\tif (sLen == 0)\n\t\treturn new byte[0];\n\n\tint sIx = 0, eIx = sLen - 1; // Start and end index after trimming.\n\n\t// Trim illegal chars from start\n\twhile (sIx < eIx && IA[sArr[sIx] & 0xff] < 0)\n\t\tsIx++;\n\n\t// Trim illegal chars from end\n\twhile (eIx > 0 && IA[sArr[eIx] & 0xff] < 0)\n\t\teIx--;\n\n\t// get the padding count (=) (0, 1 or 2)\n\tint pad = sArr[eIx] == '=' ? (sArr[eIx - 1] == '=' ? 2 : 1) : 0; // Count '=' at end.\n\tint cCnt = eIx - sIx + 1; // Content count including possible separators\n\tint sepCnt = sLen > 76 ? (sArr[76] == '\\r' ? cCnt / 78 : 0) << 1 : 0;\n\n\tint len = ((cCnt - sepCnt) * 6 >> 3) - pad; // The number of decoded bytes\n\tbyte[] dArr = new byte[len]; // Preallocate byte[] of exact length\n\n\t// Decode all but the last 0 - 2 bytes.\n\tint d = 0;\n\tfor (int cc = 0, eLen = (len / 3) * 3; d < eLen;)\n\t{\n\t\t// Assemble three bytes into an int from four \"valid\" characters.\n\t\tint i = IA[sArr[sIx++]] << 18 | IA[sArr[sIx++]] << 12\n\t\t\t\t| IA[sArr[sIx++]] << 6 | IA[sArr[sIx++]];\n\n\t\t// Add the bytes\n\t\tdArr[d++] = (byte) (i >> 16);\n\t\tdArr[d++] = (byte) (i >> 8);\n\t\tdArr[d++] = (byte) i;\n\n\t\t// If line separator, jump over it.\n\t\tif (sepCnt > 0 && ++cc == 19)\n\t\t{\n\t\t\tsIx += 2;\n\t\t\tcc = 0;\n\t\t}\n\t}\n\n\tif (d < len)\n\t{\n\t\t// Decode last 1-3 bytes (incl '=') into 1-3 bytes\n\t\tint i = 0;\n\t\tfor (int j = 0; sIx <= eIx - pad; j++)\n\t\t\ti |= IA[sArr[sIx++]] << (18 - j * 6);\n\n\t\tfor (int r = 16; d < len; r -= 8)\n\t\t\tdArr[d++] = (byte) (i >> r);\n\t}\n\n\treturn dArr;\n}", "path": "drawio/src/main/java/com/mxgraph/online/mxBase64.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n */\n", "func_signal": "protected void doGet(HttpServletRequest request,\n\t\tHttpServletResponse response) throws ServletException, IOException", "code": "{\n\ttry\n\t{\n\t\tString qs = request.getQueryString();\n\n\t\tif (qs != null && qs.equals(\"stats\"))\n\t\t{\n\t\t\twriteStats(response);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Checks or sets last modified date of delivered content.\n\t\t\t// Date comparison not needed. Only return 304 if\n\t\t\t// delivered by this servlet instance.\n\t\t\tString modSince = request.getHeader(\"If-Modified-Since\");\n\n\t\t\tif (modSince != null && modSince.equals(lastModified)\n\t\t\t\t\t&& request.getParameter(\"fetch\") == null)\n\t\t\t{\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twriteEmbedResponse(request, response);\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception e)\n\t{\n\t\tresponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n\t}\n}", "path": "drawio/src/main/java/com/mxgraph/online/EmbedServlet2.java", "commit_date": "2020-07-09 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * \n * @param path\n * @return\n */\n", "func_signal": "public List<String> walk(File base, File root) throws IOException", "code": "{\n\tif (root == null)\n\t{\n\t\troot = base;\n\t}\n\n\tList<String> result = new LinkedList<String>();\n\tString basePath = base.getCanonicalPath();\n\tFile[] list = root.listFiles();\n\n\tif (list != null)\n\t{\n\t\tfor (File f : list)\n\t\t{\n\t\t\tif (f.isDirectory())\n\t\t\t{\n\t\t\t\tresult.addAll(walk(base, f));\n\t\t\t}\n\t\t\telse if (f.getCanonicalPath().toLowerCase().endsWith(\".xml\"))\n\t\t\t{\n\t\t\t\tString name = f.getCanonicalPath()\n\t\t\t\t\t\t.substring(basePath.length() + 1);\n\t\t\t\tresult.add(\n\t\t\t\t\t\t\"f['\" + name + \"'] = '\" + processFile(f) + \"';\\n\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}", "path": "drawio/etc/build/Xml2Js.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/** Decodes a BASE64 encoded char array that is known to be resonably well formatted. The method is about twice as\n * fast as {@link #decode(char[])}. The preconditions are:<br>\n * + The array must have a line length of 76 chars OR no line separators at all (one line).<br>\n * + Line separator must be \"\\r\\n\", as specified in RFC 2045\n * + The array must not contain illegal characters within the encoded string<br>\n * + The array CAN have illegal characters at the beginning and end, those will be dealt with appropriately.<br>\n * @param sArr The source array. Length 0 will return an empty array. <code>null</code> will throw an exception.\n * @return The decoded array of bytes. May be of length 0.\n */\n", "func_signal": "public final static byte[] decodeFast(char[] sArr)", "code": "{\n\t// Check special case\n\tint sLen = sArr.length;\n\tif (sLen == 0)\n\t\treturn new byte[0];\n\n\tint sIx = 0, eIx = sLen - 1; // Start and end index after trimming.\n\n\t// Trim illegal chars from start\n\twhile (sIx < eIx && IA[sArr[sIx]] < 0)\n\t\tsIx++;\n\n\t// Trim illegal chars from end\n\twhile (eIx > 0 && IA[sArr[eIx]] < 0)\n\t\teIx--;\n\n\t// get the padding count (=) (0, 1 or 2)\n\tint pad = sArr[eIx] == '=' ? (sArr[eIx - 1] == '=' ? 2 : 1) : 0; // Count '=' at end.\n\tint cCnt = eIx - sIx + 1; // Content count including possible separators\n\tint sepCnt = sLen > 76 ? (sArr[76] == '\\r' ? cCnt / 78 : 0) << 1 : 0;\n\n\tint len = ((cCnt - sepCnt) * 6 >> 3) - pad; // The number of decoded bytes\n\tbyte[] dArr = new byte[len]; // Preallocate byte[] of exact length\n\n\t// Decode all but the last 0 - 2 bytes.\n\tint d = 0;\n\tfor (int cc = 0, eLen = (len / 3) * 3; d < eLen;)\n\t{\n\t\t// Assemble three bytes into an int from four \"valid\" characters.\n\t\tint i = IA[sArr[sIx++]] << 18 | IA[sArr[sIx++]] << 12\n\t\t\t\t| IA[sArr[sIx++]] << 6 | IA[sArr[sIx++]];\n\n\t\t// Add the bytes\n\t\tdArr[d++] = (byte) (i >> 16);\n\t\tdArr[d++] = (byte) (i >> 8);\n\t\tdArr[d++] = (byte) i;\n\n\t\t// If line separator, jump over it.\n\t\tif (sepCnt > 0 && ++cc == 19)\n\t\t{\n\t\t\tsIx += 2;\n\t\t\tcc = 0;\n\t\t}\n\t}\n\n\tif (d < len)\n\t{\n\t\t// Decode last 1-3 bytes (incl '=') into 1-3 bytes\n\t\tint i = 0;\n\t\tfor (int j = 0; sIx <= eIx - pad; j++)\n\t\t\ti |= IA[sArr[sIx++]] << (18 - j * 6);\n\n\t\tfor (int r = 16; d < len; r -= 8)\n\t\t\tdArr[d++] = (byte) (i >> r);\n\t}\n\n\treturn dArr;\n}", "path": "drawio/src/main/java/com/mxgraph/online/mxBase64.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/** Decodes a BASE64 encoded char array. All illegal characters will be ignored and can handle both arrays with\n * and without line separators.\n * @param sArr The source array. <code>null</code> or length 0 will return an empty array.\n * @return The decoded array of bytes. May be of length 0. Will be <code>null</code> if the legal characters\n * (including '=') isn't divideable by 4.  (I.e. definitely corrupted).\n */\n", "func_signal": "public final static byte[] decode(char[] sArr)", "code": "{\n\t// Check special case\n\tint sLen = sArr != null ? sArr.length : 0;\n\tif (sLen == 0)\n\t\treturn new byte[0];\n\n\t// Count illegal characters (including '\\r', '\\n') to know what size the returned array will be,\n\t// so we don't have to reallocate & copy it later.\n\tint sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)\n\tfor (int i = 0; i < sLen; i++)\n\t\t// If input is \"pure\" (I.e. no line separators or illegal chars) base64 this loop can be commented out.\n\t\tif (IA[sArr[i]] < 0)\n\t\t\tsepCnt++;\n\n\t// Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045.\n\tif ((sLen - sepCnt) % 4 != 0)\n\t\treturn null;\n\n\tint pad = 0;\n\tfor (int i = sLen; i > 1 && IA[sArr[--i]] <= 0;)\n\t\tif (sArr[i] == '=')\n\t\t\tpad++;\n\n\tint len = ((sLen - sepCnt) * 6 >> 3) - pad;\n\n\tbyte[] dArr = new byte[len]; // Preallocate byte[] of exact length\n\n\tfor (int s = 0, d = 0; d < len;)\n\t{\n\t\t// Assemble three bytes into an int from four \"valid\" characters.\n\t\tint i = 0;\n\t\tfor (int j = 0; j < 4; j++)\n\t\t{ // j only increased if a valid char was found.\n\t\t\tint c = IA[sArr[s++]];\n\t\t\tif (c >= 0)\n\t\t\t\ti |= c << (18 - j * 6);\n\t\t\telse\n\t\t\t\tj--;\n\t\t}\n\t\t// Add the bytes\n\t\tdArr[d++] = (byte) (i >> 16);\n\t\tif (d < len)\n\t\t{\n\t\t\tdArr[d++] = (byte) (i >> 8);\n\t\t\tif (d < len)\n\t\t\t\tdArr[d++] = (byte) i;\n\t\t}\n\t}\n\treturn dArr;\n}", "path": "drawio/src/main/java/com/mxgraph/online/mxBase64.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Returns a random string of the given length.\n */\n", "func_signal": "public static String generateToken(int length)", "code": "{\n\tStringBuffer rtn = new StringBuffer();\n\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\trtn.append(TOKEN_ALPHABET.charAt(\n\t\t\t\t(int) Math.floor(Math.random() * TOKEN_ALPHABET.length())));\n\t}\n\n\treturn rtn.toString();\n}", "path": "drawio/src/main/java/com/mxgraph/online/Utils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n */\n", "func_signal": "protected void doGet(HttpServletRequest request,\n\t\tHttpServletResponse response) throws ServletException, IOException", "code": "{\n        // GAE can't serve dot prefixed folders\n        String uri = request.getRequestURI().replace(\"/.\", \"/\");\n\n        if (uri.toLowerCase().contains(\".json\"))\n        {\n        \tresponse.setContentType(\"application/json\");\n        }\n\n        // Serve whatever was requested from .well-known\n        try (InputStream in = getServletContext().getResourceAsStream(uri))\n        {\n            if (in == null)\n            {\n            \tresponse.sendError(404);\n                return;\n            }\n            \n            byte[] buffer = new byte[8192];\n            int count;\n\n            while ((count = in.read(buffer)) > 0)\n            {\n            \tresponse.getOutputStream().write(buffer, 0, count);\n            }\n            \n            response.getOutputStream().flush();\n            response.getOutputStream().close();\n        }\n    }", "path": "drawio/src/main/java/com/mxgraph/online/WellKnownServlet.java", "commit_date": "2020-01-07 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Applies a standard inflate algo to the input byte array\n * @param binary the byte array to inflate\n * @return the inflated String\n * \n */\n", "func_signal": "public static String inflate(byte[] binary) throws IOException", "code": "{\n\tStringBuffer result = new StringBuffer();\n\tInputStream in = new InflaterInputStream(\n\t\t\tnew ByteArrayInputStream(binary), new Inflater(true));\n\n\twhile (in.available() != 0)\n\t{\n\t\tbyte[] buffer = new byte[IO_BUFFER_SIZE];\n\t\tint len = in.read(buffer, 0, IO_BUFFER_SIZE);\n\n\t\tif (len <= 0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\tresult.append(new String(buffer, 0, len));\n\t}\n\n\tin.close();\n\n\treturn result.toString();\n}", "path": "drawio/src/main/java/com/mxgraph/online/Utils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Reads an input stream and returns the result as a String\n * @param stream the input stream to read\n * @return a String representation of the input stream\n * @throws IOException\n */\n", "func_signal": "public static String readInputStream(InputStream stream) throws IOException", "code": "{\n\tBufferedReader reader = new BufferedReader(\n\t\t\tnew InputStreamReader(stream));\n\tStringBuffer result = new StringBuffer();\n\tString tmp = reader.readLine();\n\n\twhile (tmp != null)\n\t{\n\t\tresult.append(tmp + \"\\n\");\n\t\ttmp = reader.readLine();\n\t}\n\n\treader.close();\n\n\treturn result.toString();\n}", "path": "drawio/src/main/java/com/mxgraph/online/Utils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Filter out known red herring client errors by reducing their severity\n * @param message the message thrown on the client\n * @param userAgent the user agent string \n * @return the severity to treat the message with\n */\n", "func_signal": "protected Level filterClientErrors(String message, String userAgent)", "code": "{\n\ttry\n\t{\n\t\tString result = message.substring(message.indexOf(\"clientError:\") + 12, message.indexOf(\":url:\"));\n\t\t\n\t\tif (result != null)\n\t\t{\n\t\t\tif (ignoreFilters.contains(result))\n\t\t\t{\n\t\t\t\treturn Level.CONFIG;\n\t\t\t}\n\t\t\telse if (warningFilters.contains(result))\n\t\t\t{\n\t\t\t\treturn Level.WARNING;\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception e)\n\t{\n\t\t\n\t}\n\t\n\tif (userAgent != null && userAgent.contains(\"compatible; MSIE 8.0;\"))\n\t{\n\t\treturn Level.WARNING;\n\t}\n\t\n\treturn Level.SEVERE;\n}", "path": "drawio/src/main/java/com/mxgraph/online/LogServlet.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/** Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>\n * No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a\n * little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\n", "func_signal": "public final static char[] encodeToChar(byte[] sArr, boolean lineSep)", "code": "{\n\t// Check special case\n\tint sLen = sArr != null ? sArr.length : 0;\n\tif (sLen == 0)\n\t\treturn new char[0];\n\n\tint eLen = (sLen / 3) * 3; // Length of even 24-bits.\n\tint cCnt = ((sLen - 1) / 3 + 1) << 2; // Returned character count\n\tint dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of returned array\n\tchar[] dArr = new char[dLen];\n\n\t// Encode even 24-bits\n\tfor (int s = 0, d = 0, cc = 0; s < eLen;)\n\t{\n\t\t// Copy next three bytes into lower 24 bits of int, paying attension to sign.\n\t\tint i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8\n\t\t\t\t| (sArr[s++] & 0xff);\n\n\t\t// Encode the int into four chars\n\t\tdArr[d++] = CA[(i >>> 18) & 0x3f];\n\t\tdArr[d++] = CA[(i >>> 12) & 0x3f];\n\t\tdArr[d++] = CA[(i >>> 6) & 0x3f];\n\t\tdArr[d++] = CA[i & 0x3f];\n\n\t\t// Add optional line separator\n\t\tif (lineSep && ++cc == 19 && d < dLen - 2)\n\t\t{\n\t\t\tdArr[d++] = '\\r';\n\t\t\tdArr[d++] = '\\n';\n\t\t\tcc = 0;\n\t\t}\n\t}\n\n\t// Pad and encode last bits if source isn't even 24 bits.\n\tint left = sLen - eLen; // 0 - 2.\n\tif (left > 0)\n\t{\n\t\t// Prepare the int\n\t\tint i = ((sArr[eLen] & 0xff) << 10)\n\t\t\t\t| (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n\n\t\t// Set last four chars\n\t\tdArr[dLen - 4] = CA[i >> 12];\n\t\tdArr[dLen - 3] = CA[(i >>> 6) & 0x3f];\n\t\tdArr[dLen - 2] = left == 2 ? CA[i & 0x3f] : '=';\n\t\tdArr[dLen - 1] = '=';\n\t}\n\treturn dArr;\n}", "path": "drawio/src/main/java/com/mxgraph/online/mxBase64.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/** Encodes a raw byte array into a BASE64 <code>byte[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>\n * No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a\n * little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\n", "func_signal": "public final static byte[] encodeToByte(byte[] sArr, boolean lineSep)", "code": "{\n\t// Check special case\n\tint sLen = sArr != null ? sArr.length : 0;\n\tif (sLen == 0)\n\t\treturn new byte[0];\n\n\tint eLen = (sLen / 3) * 3; // Length of even 24-bits.\n\tint cCnt = ((sLen - 1) / 3 + 1) << 2; // Returned character count\n\tint dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of returned array\n\tbyte[] dArr = new byte[dLen];\n\n\t// Encode even 24-bits\n\tfor (int s = 0, d = 0, cc = 0; s < eLen;)\n\t{\n\t\t// Copy next three bytes into lower 24 bits of int, paying attension to sign.\n\t\tint i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8\n\t\t\t\t| (sArr[s++] & 0xff);\n\n\t\t// Encode the int into four chars\n\t\tdArr[d++] = (byte) CA[(i >>> 18) & 0x3f];\n\t\tdArr[d++] = (byte) CA[(i >>> 12) & 0x3f];\n\t\tdArr[d++] = (byte) CA[(i >>> 6) & 0x3f];\n\t\tdArr[d++] = (byte) CA[i & 0x3f];\n\n\t\t// Add optional line separator\n\t\tif (lineSep && ++cc == 19 && d < dLen - 2)\n\t\t{\n\t\t\tdArr[d++] = '\\r';\n\t\t\tdArr[d++] = '\\n';\n\t\t\tcc = 0;\n\t\t}\n\t}\n\n\t// Pad and encode last bits if source isn't an even 24 bits.\n\tint left = sLen - eLen; // 0 - 2.\n\tif (left > 0)\n\t{\n\t\t// Prepare the int\n\t\tint i = ((sArr[eLen] & 0xff) << 10)\n\t\t\t\t| (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n\n\t\t// Set last four chars\n\t\tdArr[dLen - 4] = (byte) CA[i >> 12];\n\t\tdArr[dLen - 3] = (byte) CA[(i >>> 6) & 0x3f];\n\t\tdArr[dLen - 2] = left == 2 ? (byte) CA[i & 0x3f] : (byte) '=';\n\t\tdArr[dLen - 1] = '=';\n\t}\n\treturn dArr;\n}", "path": "drawio/src/main/java/com/mxgraph/online/mxBase64.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Sets up collection of stencils\n */\n", "func_signal": "public static void initLibraries(HashMap<String, String[]> libraries)", "code": "{\n\tlibraries.put(\"mockup\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupButtons.js\" });\n\tlibraries.put(\"arrows2\", new String[] { SHAPES_PATH + \"/mxArrows.js\" });\n\tlibraries.put(\"bpmn\",\n\t\t\tnew String[] { SHAPES_PATH + \"/bpmn/mxBpmnShape2.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/bpmn.xml\" });\n\tlibraries.put(\"er\", new String[] { SHAPES_PATH + \"/er/mxER.js\" });\n\tlibraries.put(\"ios\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupiOS.js\" });\n\tlibraries.put(\"rackGeneral\",\n\t\t\tnew String[] { SHAPES_PATH + \"/rack/mxRack.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/rack/general.xml\" });\n\tlibraries.put(\"rackF5\", new String[] { STENCIL_PATH + \"/rack/f5.xml\" });\n\tlibraries.put(\"lean_mapping\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mxLeanMap.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/lean_mapping.xml\" });\n\tlibraries.put(\"basic\", new String[] { SHAPES_PATH + \"/mxBasic.js\",\n\t\t\tSTENCIL_PATH + \"/basic.xml\" });\n\tlibraries.put(\"ios7icons\",\n\t\t\tnew String[] { STENCIL_PATH + \"/ios7/icons.xml\" });\n\tlibraries.put(\"ios7ui\",\n\t\t\tnew String[] { SHAPES_PATH + \"/ios7/mxIOS7Ui.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/ios7/misc.xml\" });\n\tlibraries.put(\"android\", new String[] { SHAPES_PATH + \"/mxAndroid.js\",\n\t\t\tSTENCIL_PATH + \"electrical/transmission\" });\n\tlibraries.put(\"electrical/transmission\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mxElectrical.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/electrical/transmission.xml\" });\n\tlibraries.put(\"mockup/buttons\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupButtons.js\" });\n\tlibraries.put(\"mockup/containers\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupContainers.js\" });\n\tlibraries.put(\"mockup/forms\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupForms.js\" });\n\tlibraries.put(\"mockup/graphics\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupGraphics.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/mockup/misc.xml\" });\n\tlibraries.put(\"mockup/markup\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupMarkup.js\" });\n\tlibraries.put(\"mockup/misc\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupMisc.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/mockup/misc.xml\" });\n\tlibraries.put(\"mockup/navigation\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupNavigation.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/mockup/misc.xml\" });\n\tlibraries.put(\"mockup/text\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mockup/mxMockupText.js\" });\n\tlibraries.put(\"floorplan\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mxFloorplan.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/floorplan.xml\" });\n\tlibraries.put(\"bootstrap\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mxBootstrap.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/bootstrap.xml\" });\n\tlibraries.put(\"gmdl\", new String[] { SHAPES_PATH + \"/mxGmdl.js\",\n\t\t\tSTENCIL_PATH + \"/gmdl.xml\" });\n\tlibraries.put(\"cabinets\", new String[] { SHAPES_PATH + \"/mxCabinets.js\",\n\t\t\tSTENCIL_PATH + \"/cabinets.xml\" });\n\tlibraries.put(\"archimate\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mxArchiMate.js\" });\n\tlibraries.put(\"archimate3\",\n\t\t\tnew String[] { SHAPES_PATH + \"/mxArchiMate3.js\" });\n\tlibraries.put(\"sysml\", new String[] { SHAPES_PATH + \"/mxSysML.js\" });\n\tlibraries.put(\"eip\", new String[] { SHAPES_PATH + \"/mxEip.js\",\n\t\t\tSTENCIL_PATH + \"/eip.xml\" });\n\tlibraries.put(\"networks\", new String[] { SHAPES_PATH + \"/mxNetworks.js\",\n\t\t\tSTENCIL_PATH + \"/networks.xml\" });\n\tlibraries.put(\"aws3d\", new String[] { SHAPES_PATH + \"/mxAWS3D.js\",\n\t\t\tSTENCIL_PATH + \"/aws3d.xml\" });\n\tlibraries.put(\"pid2inst\",\n\t\t\tnew String[] { SHAPES_PATH + \"/pid2/mxPidInstruments.js\" });\n\tlibraries.put(\"pid2misc\",\n\t\t\tnew String[] { SHAPES_PATH + \"/pid2/mxPidMisc.js\",\n\t\t\t\t\tSTENCIL_PATH + \"/pid/misc.xml\" });\n\tlibraries.put(\"pid2valves\",\n\t\t\tnew String[] { SHAPES_PATH + \"/pid2/mxPidValves.js\" });\n\tlibraries.put(\"pidFlowSensors\",\n\t\t\tnew String[] { STENCIL_PATH + \"/pid/flow_sensors.xml\" });\n}", "path": "drawio/src/main/java/com/mxgraph/online/EmbedServlet2.java", "commit_date": "2020-07-09 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Encodes the given string.\n */\n", "func_signal": "public static String encodeString(String value)", "code": "{\n\tStringBuilder result = new StringBuilder();\n\tvalue = value.trim();\n\n\tfor (int j = 0; j < value.length(); j++)\n\t{\n\t\tchar character = value.charAt(j);\n\n\t\tString hexString = Integer.toHexString(character);\n\n\t\t// +255 value must have 4 digits, 3 doesn't work\n\t\tif (hexString.length() == 3)\n\t\t{\n\t\t\thexString = \"0\" + hexString;\n\t\t}\n\n\t\t// Have to convert '%' too\n\t\tif (character == 37 || (character > 127 && character < 256))\n\t\t{\n\t\t\tresult.append(\"%\" + hexString);\n\t\t}\n\t\telse if (character > 255)\n\t\t{\n\t\t\tresult.append(\"%u\" + hexString);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.append(value.substring(j, j + 1));\n\t\t}\n\t}\n\n\treturn result.toString();\n}", "path": "drawio/etc/propgen/com/mxgraph/properties/PropGen.java", "commit_date": "2020-12-09 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Dynamically generated CORS header for known domains.\n * @throws IOException \n */\n", "func_signal": "protected void copyResponse(InputStream is, OutputStream out, byte[] head,\n\t\tboolean base64) throws IOException", "code": "{\n\tif (base64)\n\t{\n\t\ttry (BufferedInputStream in = new BufferedInputStream(is,\n\t\t\t\tBUFFER_SIZE))\n\t\t{\n\t\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\t\t    byte[] buffer = new byte[0xFFFF];\n\n\t\t\tos.write(head, 0, head.length);\n\t\t\t\n\t\t    for (int len = is.read(buffer); len != -1; len = is.read(buffer))\n\t\t    { \n\t\t        os.write(buffer, 0, len);\n\t\t    }\n\n\t\t\tout.write(mxBase64.encodeToString(os.toByteArray(), false).getBytes());\n\t\t}\n\t}\n\telse\n\t{\n\t\tout.write(head);\n\t\tUtils.copy(is, out);\n\t}\n}", "path": "drawio/src/main/java/com/mxgraph/online/ProxyServlet.java", "commit_date": "2020-02-13 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/** Encodes a raw byte array into a BASE64 <code>char[]</code> representation i accordance with RFC 2045.\n * @param sArr The bytes to convert. If <code>null</code> or length 0 an empty array will be returned.\n * @param lineSep Optional \"\\r\\n\" after 76 characters, unless end of file.<br>\n * No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a\n * little faster.\n * @return A BASE64 encoded array. Never <code>null</code>.\n */\n", "func_signal": "public final static char[] encodeToChar(byte[] sArr, boolean lineSep)", "code": "{\n\t// Check special case\n\tint sLen = sArr != null ? sArr.length : 0;\n\tif (sLen == 0)\n\t\treturn new char[0];\n\n\tint eLen = (sLen / 3) * 3; // Length of even 24-bits.\n\tint cCnt = ((sLen - 1) / 3 + 1) << 2; // Returned character count\n\tint dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of returned array\n\tchar[] dArr = new char[dLen];\n\n\t// Encode even 24-bits\n\tfor (int s = 0, d = 0, cc = 0; s < eLen;)\n\t{\n\t\t// Copy next three bytes into lower 24 bits of int, paying attension to sign.\n\t\tint i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8\n\t\t\t\t| (sArr[s++] & 0xff);\n\n\t\t// Encode the int into four chars\n\t\tdArr[d++] = CA[(i >>> 18) & 0x3f];\n\t\tdArr[d++] = CA[(i >>> 12) & 0x3f];\n\t\tdArr[d++] = CA[(i >>> 6) & 0x3f];\n\t\tdArr[d++] = CA[i & 0x3f];\n\n\t\t// Add optional line separator\n\t\tif (lineSep && ++cc == 19 && d < dLen - 2)\n\t\t{\n\t\t\tdArr[d++] = '\\r';\n\t\t\tdArr[d++] = '\\n';\n\t\t\tcc = 0;\n\t\t}\n\t}\n\n\t// Pad and encode last bits if source isn't even 24 bits.\n\tint left = sLen - eLen; // 0 - 2.\n\tif (left > 0)\n\t{\n\t\t// Prepare the int\n\t\tint i = ((sArr[eLen] & 0xff) << 10)\n\t\t\t\t| (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n\n\t\t// Set last four chars\n\t\tdArr[dLen - 4] = CA[i >> 12];\n\t\tdArr[dLen - 3] = CA[(i >>> 6) & 0x3f];\n\t\tdArr[dLen - 2] = left == 2 ? CA[i & 0x3f] : '=';\n\t\tdArr[dLen - 1] = '=';\n\t}\n\treturn dArr;\n}", "path": "drawio/etc/build/Xml2Js.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Applies a standard deflate algo to the input String\n * @param inString the String to deflate\n * @return the deflated byte array\n * \n */\n", "func_signal": "public static byte[] deflate(String inString) throws IOException", "code": "{\n\tDeflater deflater = new Deflater(Deflater.DEFAULT_COMPRESSION, true);\n\tbyte[] inBytes = inString.getBytes(\"UTF-8\");\n\tdeflater.setInput(inBytes);\n\n\tByteArrayOutputStream outputStream = new ByteArrayOutputStream(\n\t\t\tinBytes.length);\n\tdeflater.finish();\n\tbyte[] buffer = new byte[IO_BUFFER_SIZE];\n\n\twhile (!deflater.finished())\n\t{\n\t\tint count = deflater.deflate(buffer); // returns the generated code... index  \n\t\toutputStream.write(buffer, 0, count);\n\t}\n\n\toutputStream.close();\n\tbyte[] output = outputStream.toByteArray();\n\n\treturn output;\n}", "path": "drawio/src/main/java/com/mxgraph/online/Utils.java", "commit_date": "2020-05-03 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * \n * @param file\n * @return\n * @throws IOException\n */\n", "func_signal": "public static String processFile(File file) throws IOException", "code": "{\n\tSystem.out.println(\"Processing \" + file.getCanonicalPath() + \"...\");\n\n\tDeflater deflater = new Deflater(Deflater.DEFAULT_COMPRESSION, true);\n\tbyte[] inBytes = encodeURIComponent(\n\t\t\treadInputStream(new FileInputStream(file)),\n\t\t\tCHARSET_FOR_URL_ENCODING).getBytes(\"UTF-8\");\n\tdeflater.setInput(inBytes);\n\n\tByteArrayOutputStream outputStream = new ByteArrayOutputStream(\n\t\t\tinBytes.length);\n\tdeflater.finish();\n\tbyte[] buffer = new byte[IO_BUFFER_SIZE];\n\n\twhile (!deflater.finished())\n\t{\n\t\tint count = deflater.deflate(buffer); // returns the generated code... index  \n\t\toutputStream.write(buffer, 0, count);\n\t}\n\n\toutputStream.close();\n\n\treturn encodeToString(outputStream.toByteArray(), false);\n}", "path": "drawio/etc/build/Xml2Js.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/** Decodes a BASE64 encoded <code>String</code>. All illegal characters will be ignored and can handle both strings with\n * and without line separators.<br>\n * <b>Note!</b> It can be up to about 2x the speed to call <code>decode(str.toCharArray())</code> instead. That\n * will create a temporary array though. This version will use <code>str.charAt(i)</code> to iterate the string.\n * @param str The source string. <code>null</code> or length 0 will return an empty array.\n * @return The decoded array of bytes. May be of length 0. Will be <code>null</code> if the legal characters\n * (including '=') isn't divideable by 4.  (I.e. definitely corrupted).\n */\n", "func_signal": "public final static byte[] decode(String str)", "code": "{\n\t// Check special case\n\tint sLen = str != null ? str.length() : 0;\n\tif (sLen == 0)\n\t\treturn new byte[0];\n\n\t// Count illegal characters (including '\\r', '\\n') to know what size the returned array will be,\n\t// so we don't have to reallocate & copy it later.\n\tint sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)\n\tfor (int i = 0; i < sLen; i++)\n\t\t// If input is \"pure\" (I.e. no line separators or illegal chars) base64 this loop can be commented out.\n\t\tif (IA[str.charAt(i)] < 0)\n\t\t\tsepCnt++;\n\n\t// Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045.\n\tif ((sLen - sepCnt) % 4 != 0)\n\t\treturn null;\n\n\t// Count '=' at end\n\tint pad = 0;\n\tfor (int i = sLen; i > 1 && IA[str.charAt(--i)] <= 0;)\n\t\tif (str.charAt(i) == '=')\n\t\t\tpad++;\n\n\tint len = ((sLen - sepCnt) * 6 >> 3) - pad;\n\n\tbyte[] dArr = new byte[len]; // Preallocate byte[] of exact length\n\n\tfor (int s = 0, d = 0; d < len;)\n\t{\n\t\t// Assemble three bytes into an int from four \"valid\" characters.\n\t\tint i = 0;\n\t\tfor (int j = 0; j < 4; j++)\n\t\t{ // j only increased if a valid char was found.\n\t\t\tint c = IA[str.charAt(s++)];\n\t\t\tif (c >= 0)\n\t\t\t\ti |= c << (18 - j * 6);\n\t\t\telse\n\t\t\t\tj--;\n\t\t}\n\t\t// Add the bytes\n\t\tdArr[d++] = (byte) (i >> 16);\n\t\tif (d < len)\n\t\t{\n\t\t\tdArr[d++] = (byte) (i >> 8);\n\t\t\tif (d < len)\n\t\t\t\tdArr[d++] = (byte) i;\n\t\t}\n\t}\n\treturn dArr;\n}", "path": "drawio/src/main/java/com/mxgraph/online/mxBase64.java", "commit_date": "2018-01-18 00:00:00", "repo_name": "jgraph/drawio", "stars": 38241, "license": "other", "language": "java", "size": 1610328}
{"docstring": "/**\n * Removes all features from the dataset that are not in featureSet.\n *\n * @param featureSet\n */\n", "func_signal": "public void selectFeaturesFromSet(Set<F> featureSet)", "code": "{\n  HashIndex<F> newFeatureIndex = new HashIndex<>();\n  int[] featMap = new int[featureIndex.size()];\n  Arrays.fill(featMap, -1);\n  for (F feature : featureSet) {\n    int oldID = featureIndex.indexOf(feature);\n    if (oldID >= 0) { // it's a valid feature in the index\n      int newID = newFeatureIndex.addToIndex(feature);\n      featMap[oldID] = newID;\n    }\n  }\n  featureIndex = newFeatureIndex;\n  for (int i = 0; i < size; i++) {\n    List<Integer> featList = new ArrayList<>(data[i].length);\n    List<Double> valueList = new ArrayList<>(values[i].length);\n    for (int j = 0; j < data[i].length; j++) {\n      if (featMap[data[i][j]] >= 0) {\n        featList.add(featMap[data[i][j]]);\n        valueList.add(values[i][j]);\n      }\n    }\n    data[i] = new int[featList.size()];\n    values[i] = new double[valueList.size()];\n    for (int j = 0; j < data[i].length; j++) {\n      data[i][j] = featList.get(j);\n      values[i][j] = valueList.get(j);\n    }\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Prints a sparse feature matrix representation of the Dataset. Prints the\n * actual {@link Object#toString()} representations of features.\n */\n", "func_signal": "@Override\npublic void printSparseFeatureMatrix(PrintWriter pw)", "code": "{\n  String sep = \"\\t\";\n  for (int i = 0; i < size; i++) {\n    pw.print(labelIndex.get(labels[i]));\n    int[] datum = data[i];\n    for (int feat : datum) {\n      pw.print(sep);\n      pw.print(featureIndex.get(feat));\n    }\n    pw.println();\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Scales the values of each feature linearly using the min and max values\n * found in the training set. NOTE1: Not guaranteed to be between 0 and 1 for\n * a test datum. NOTE2: Also filters out features from the datum that are not\n * seen at training time.\n *\n * @param datum\n * @return a new datum\n */\n", "func_signal": "public RVFDatum<L, F> scaleDatum(RVFDatum<L, F> datum)", "code": "{\n  // scale this dataset before scaling the datum\n  if (minValues == null || maxValues == null)\n    scaleFeatures();\n  Counter<F> scaledFeatures = new ClassicCounter<>();\n  for (F feature : datum.asFeatures()) {\n    int fID = this.featureIndex.indexOf(feature);\n    if (fID >= 0) {\n      double oldVal = datum.asFeaturesCounter().getCount(feature);\n      double newVal;\n      if (minValues[fID] != maxValues[fID])\n        newVal = (oldVal - minValues[fID]) / (maxValues[fID] - minValues[fID]);\n      else\n        newVal = oldVal;\n      scaledFeatures.incrementCount(feature, newVal);\n    }\n  }\n  return new RVFDatum<>(scaledFeatures, datum.label());\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Constructor that fully specifies a Dataset. Needed this for\n * MulticlassDataset.\n */\n", "func_signal": "public RVFDataset(Index<L> labelIndex, int[] labels, Index<F> featureIndex, int[][] data, double[][] values)", "code": "{\n  this.labelIndex = labelIndex;\n  this.labels = labels;\n  this.featureIndex = featureIndex;\n  this.data = data;\n  this.values = values;\n  this.size = labels.length;\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "// If you edit me, also take care of WeightedRVFDataset\n", "func_signal": "public void add(Datum<L, F> d)", "code": "{\n  if (d instanceof RVFDatum<?, ?>) {\n    addLabel(d.label());\n    addFeatures(((RVFDatum<L, F>) d).asFeaturesCounter());\n    size++;\n  } else {\n    addLabel(d.label());\n    addFeatures(Counters.asCounter(d.asFeatures()));\n    size++;\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * @return the index-ed datum\n *\n *         Note, this returns a new RVFDatum object, not the original RVFDatum\n *         that was added to the dataset.\n */\n", "func_signal": "@Override\npublic RVFDatum<L, F> getRVFDatum(int index)", "code": "{\n  ClassicCounter<F> c = new ClassicCounter<>();\n  for (int i = 0; i < data[index].length; i++) {\n    c.incrementCount(featureIndex.get(data[index][i]), values[index][i]);\n  }\n  return new RVFDatum<>(c, labelIndex.get(labels[index]));\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Applies a feature max count threshold to the RVFDataset. All features that\n * occur greater than <i>k</i> times are expunged.\n */\n", "func_signal": "@Override\npublic void applyFeatureMaxCountThreshold(int k)", "code": "{\n  float[] counts = getFeatureCounts();\n  HashIndex<F> newFeatureIndex = new HashIndex<>();\n\n  int[] featMap = new int[featureIndex.size()];\n  for (int i = 0; i < featMap.length; i++) {\n    F feat = featureIndex.get(i);\n    if (counts[i] <= k) {\n      int newIndex = newFeatureIndex.size();\n      newFeatureIndex.add(feat);\n      featMap[i] = newIndex;\n    } else {\n      featMap[i] = -1;\n    }\n    // featureIndex.remove(feat);\n  }\n\n  featureIndex = newFeatureIndex;\n  // counts = null; // This is unnecessary; JVM can clean it up\n\n  for (int i = 0; i < size; i++) {\n    List<Integer> featList = new ArrayList<>(data[i].length);\n    List<Double> valueList = new ArrayList<>(values[i].length);\n    for (int j = 0; j < data[i].length; j++) {\n      if (featMap[data[i][j]] >= 0) {\n        featList.add(featMap[data[i][j]]);\n        valueList.add(values[i][j]);\n      }\n    }\n    data[i] = new int[featList.size()];\n    values[i] = new double[valueList.size()];\n    for (int j = 0; j < data[i].length; j++) {\n      data[i][j] = featList.get(j);\n      values[i][j] = valueList.get(j);\n    }\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "// If you edit me, also take care of WeightedRVFDataset\n", "func_signal": "public void add(Datum<L, F> d, String src, String id)", "code": "{\n  if (d instanceof RVFDatum<?, ?>) {\n    addLabel(d.label());\n    addFeatures(((RVFDatum<L, F>) d).asFeaturesCounter());\n    addSourceAndId(src, id);\n    size++;\n  } else {\n    addLabel(d.label());\n    addFeatures(Counters.asCounter(d.asFeatures()));\n    addSourceAndId(src, id);\n    size++;\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Prints some summary statistics to the logger for the Dataset.\n */\n", "func_signal": "@Override\npublic void summaryStatistics()", "code": "{\n  logger.info(\"numDatums: \" + size);\n  StringBuilder sb = new StringBuilder(\"numLabels: \");\n  sb.append(labelIndex.size()).append(\" [\");\n  Iterator<L> iter = labelIndex.iterator();\n  while (iter.hasNext()) {\n    sb.append(iter.next());\n    if (iter.hasNext()) {\n      sb.append(\", \");\n    }\n  }\n  sb.append(']');\n  logger.info(sb.toString());\n  logger.info(\"numFeatures (Phi(X) types): \" + featureIndex.size());\n  /*for(int i = 0; i < data.length; i++) {\n    for(int j = 0; j < data[i].length; j++) {\n    System.out.println(data[i][j]);\n    }\n    }*/\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Modification of printFullFeatureMatrix to correct bugs and print values\n * (Rajat). Prints the full feature matrix in tab-delimited form. These can be\n * BIG matrices, so be careful!\n */\n", "func_signal": "public void printFullFeatureMatrixWithValues(PrintWriter pw)", "code": "{\n  String sep = \"\\t\";\n  for (int i = 0; i < featureIndex.size(); i++) {\n    pw.print(sep + featureIndex.get(i));\n  }\n  pw.println();\n  for (int i = 0; i < size; i++) { // changed labels.length to size\n    pw.print(labelIndex.get(labels[i])); // changed i to labels[i]\n    Map<Integer, Double> feats = Generics.newHashMap();\n    for (int j = 0; j < data[i].length; j++) {\n      int feature = data[i][j];\n      double val = values[i][j];\n      feats.put(Integer.valueOf(feature), new Double(val));\n    }\n    for (int j = 0; j < featureIndex.size(); j++) {\n      if (feats.containsKey(Integer.valueOf(j))) {\n        pw.print(sep + feats.get(Integer.valueOf(j)));\n      } else {\n        pw.print(sep);\n        pw.print(' ');\n      }\n    }\n    pw.println();\n  }\n  pw.flush();\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Checks if the dataset has any unbounded values. Always good to use this\n * before training a model on the dataset. This way, one can avoid seeing the\n * infamous 4's that get printed by the QuasiNewton Method when NaNs exist in\n * the data! -Ramesh\n */\n", "func_signal": "public void ensureRealValues()", "code": "{\n  double[][] values = getValuesArray();\n  int[][] data = getDataArray();\n  for (int i = 0; i < size(); i++) {\n    for (int j = 0; j < values[i].length; j++) {\n      if (Double.isNaN(values[i][j])) {\n        int fID = data[i][j];\n        F feature = featureIndex.get(fID);\n        throw new RuntimeException(\"datum \" + i + \" has a NaN value for feature:\" + feature);\n      }\n      if (Double.isInfinite(values[i][j])) {\n        int fID = data[i][j];\n        F feature = featureIndex.get(fID);\n        throw new RuntimeException(\"datum \" + i + \" has infinite value for feature:\" + feature);\n      }\n    }\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Scales feature values linearly such that each feature value lies between 0\n * and 1.\n *\n */\n", "func_signal": "public void scaleFeatures()", "code": "{\n  // TODO: should also implement a method that scales the features using the\n  // mean and std.\n  minValues = new double[featureIndex.size()];\n  maxValues = new double[featureIndex.size()];\n  Arrays.fill(minValues, Double.POSITIVE_INFINITY);\n  Arrays.fill(maxValues, Double.NEGATIVE_INFINITY);\n\n  // first identify the max and min values for each feature.\n  // System.out.printf(\"number of datums: %d dataset size: %d\\n\",data.length,size());\n  for (int i = 0; i < size(); i++) {\n    // System.out.printf(\"datum %d length %d\\n\", i,data[i].length);\n    for (int j = 0; j < data[i].length; j++) {\n      int f = data[i][j];\n      if (values[i][j] < minValues[f])\n        minValues[f] = values[i][j];\n      if (values[i][j] > maxValues[f])\n        maxValues[f] = values[i][j];\n    }\n  }\n\n  for (int f = 0; f < featureIndex.size(); f++) {\n    if (minValues[f] == Double.POSITIVE_INFINITY)\n      throw new RuntimeException(\"minValue for feature \" + f + \" not assigned. \");\n    if (maxValues[f] == Double.NEGATIVE_INFINITY)\n      throw new RuntimeException(\"maxValue for feature \" + f + \" not assigned.\");\n  }\n\n  // now scale each value such that it's between 0 and 1.\n  for (int i = 0; i < size(); i++) {\n    for (int j = 0; j < data[i].length; j++) {\n      int f = data[i][j];\n      if (minValues[f] != maxValues[f])// the equality can happen for binary\n                                       // features which always take the value\n                                       // of 1.0\n        values[i][j] = (values[i][j] - minValues[f]) / (maxValues[f] - minValues[f]);\n    }\n  }\n\n  /*\n  for(int f = 0; f < featureIndex.size(); f++){\n    if(minValues[f] == maxValues[f])\n      throw new RuntimeException(\"minValue for feature \"+f+\" is equal to maxValue:\"+minValues[f]);\n  }\n  */\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Iterator<RVFDatum<L, F>> iterator()", "code": "{\n  return new Iterator<RVFDatum<L, F>>() {\n    private int index; // = 0;\n\n    @Override\n    public boolean hasNext() {\n      return this.index < size;\n    }\n\n    public RVFDatum<L, F> next() {\n      if (index >= size) {\n        throw new NoSuchElementException();\n      }\n      RVFDatum<L, F> next = getRVFDatum(this.index);\n      ++this.index;\n      return next;\n    }\n\n    @Override\n    public void remove() {\n      throw new UnsupportedOperationException();\n    }\n  };\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Applies a feature count threshold to the RVFDataset. All features that\n * occur fewer than <i>k</i> times are expunged.\n */\n", "func_signal": "public void applyFeatureCountThreshold(int k)", "code": "{\n  float[] counts = getFeatureCounts();\n  HashIndex<F> newFeatureIndex = new HashIndex<>();\n\n  int[] featMap = new int[featureIndex.size()];\n  for (int i = 0; i < featMap.length; i++) {\n    F feat = featureIndex.get(i);\n    if (counts[i] >= k) {\n      int newIndex = newFeatureIndex.size();\n      newFeatureIndex.add(feat);\n      featMap[i] = newIndex;\n    } else {\n      featMap[i] = -1;\n    }\n    // featureIndex.remove(feat);\n  }\n\n  featureIndex = newFeatureIndex;\n  // counts = null; // This is unnecessary; JVM can clean it up\n\n  for (int i = 0; i < size; i++) {\n    List<Integer> featList = new ArrayList<>(data[i].length);\n    List<Double> valueList = new ArrayList<>(values[i].length);\n    for (int j = 0; j < data[i].length; j++) {\n      if (featMap[data[i][j]] >= 0) {\n        featList.add(featMap[data[i][j]]);\n        valueList.add(values[i][j]);\n      }\n    }\n    data[i] = new int[featList.size()];\n    values[i] = new double[valueList.size()];\n    for (int j = 0; j < data[i].length; j++) {\n      data[i][j] = featList.get(j);\n      values[i][j] = valueList.get(j);\n    }\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Scales the values of each feature in each linearly using the min and max\n * values found in the training set. NOTE1: Not guaranteed to be between 0 and\n * 1 for a test datum. NOTE2: Also filters out features from each datum that\n * are not seen at training time.\n *\n * @param dataset\n * @return a new dataset\n */\n", "func_signal": "public RVFDataset<L, F> scaleDataset(RVFDataset<L, F> dataset)", "code": "{\n  RVFDataset<L, F> newDataset = new RVFDataset<>(this.featureIndex, this.labelIndex);\n  for (int i = 0; i < dataset.size(); i++) {\n    RVFDatum<L, F> datum = dataset.getDatum(i);\n    newDataset.add(scaleDatum(datum));\n  }\n  return newDataset;\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Randomizes the data array in place. Needs to be redefined here because we\n * need to randomize the values as well.\n */\n", "func_signal": "@Override\npublic <E> void shuffleWithSideInformation(long randomSeed, List<E> sideInformation)", "code": "{\n  if (size != sideInformation.size()) {\n    throw new IllegalArgumentException(\"shuffleWithSideInformation: sideInformation not of same size as Dataset\");\n  }\n  Random rand = new Random(randomSeed);\n  for (int j = size - 1; j > 0; j--) {\n    int randIndex = rand.nextInt(j);\n\n    int[] tmp = data[randIndex];\n    data[randIndex] = data[j];\n    data[j] = tmp;\n\n    int tmpl = labels[randIndex];\n    labels[randIndex] = labels[j];\n    labels[j] = tmpl;\n\n    double[] tmpv = values[randIndex];\n    values[randIndex] = values[j];\n    values[j] = tmpv;\n\n    E tmpE = sideInformation.get(randIndex);\n    sideInformation.set(randIndex, sideInformation.get(j));\n    sideInformation.set(j, tmpE);\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Prints a sparse feature-value output of the Dataset. Prints the actual\n * {@link Object#toString()} representations of features. This is probably\n * what you want for RVFDataset since the above two methods seem useless and\n * unused.\n */\n", "func_signal": "public void printSparseFeatureValues(PrintWriter pw)", "code": "{\n  for (int i = 0; i < size; i++) {\n    printSparseFeatureValues(i, pw);\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Write the dataset in SVM-light format to the file.\n *\n * A strict SVM-light format will be written, where labels and features are\n * both encoded as integers, using the label and feature indexes of this\n * dataset. Datasets written by this method can be read by\n * {@link #readSVMLightFormat(File)}.\n *\n * @param file The location where the dataset should be written.\n */\n", "func_signal": "public void writeSVMLightFormat(File file) throws FileNotFoundException", "code": "{\n  PrintWriter writer = new PrintWriter(file);\n  writeSVMLightFormat(writer);\n  writer.close();\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "// todo [cdm 2012]: This duplicates the functionality of the methods above. Should be refactored.\n/**\n * Read SVM-light formatted data into this dataset.\n *\n * A strict SVM-light format is expected, where labels and features are both\n * encoded as integers. These integers are converted into the dataset label\n * and feature types using the indexes stored in this dataset.\n *\n * @param file The file from which the data should be read.\n */\n", "func_signal": "public void readSVMLightFormat(File file)", "code": "{\n  for (String line : IOUtils.readLines(file)) {\n    line = line.replaceAll(\"#.*\", \"\"); // remove any trailing comments\n    String[] items = line.split(\"\\\\s+\");\n    Integer label = Integer.parseInt(items[0]);\n    Counter<F> features = new ClassicCounter<>();\n    for (int i = 1; i < items.length; i++) {\n      String[] featureItems = items[i].split(\":\");\n      int feature = Integer.parseInt(featureItems[0]);\n      double value = Double.parseDouble(featureItems[1]);\n      features.incrementCount(this.featureIndex.get(feature), value);\n    }\n    this.add(new RVFDatum<>(features, this.labelIndex.get(label)));\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Randomizes the data array in place. Needs to be redefined here because we\n * need to randomize the values as well.\n */\n", "func_signal": "@Override\npublic void randomize(long randomSeed)", "code": "{\n  Random rand = new Random(randomSeed);\n  for (int j = size - 1; j > 0; j--) {\n    int randIndex = rand.nextInt(j);\n    int[] tmp = data[randIndex];\n    data[randIndex] = data[j];\n    data[j] = tmp;\n\n    int tmpl = labels[randIndex];\n    labels[randIndex] = labels[j];\n    labels[j] = tmpl;\n\n    double[] tmpv = values[randIndex];\n    values[randIndex] = values[j];\n    values[j] = tmpv;\n  }\n}", "path": "CoreNLP/src/edu/stanford/nlp/classify/RVFDataset.java", "commit_date": "2017-06-23 00:00:00", "repo_name": "stanfordnlp/CoreNLP", "stars": 9378, "license": "gpl-3.0", "language": "java", "size": 381750}
{"docstring": "/**\n * Constructs an instance.\n */\n", "func_signal": "public ThreeRegisterDecodedInstruction(InstructionCodec format, int opcode,\n        int index, IndexType indexType, int target, long literal,\n        int a, int b, int c)", "code": "{\n    super(format, opcode, index, indexType, target, literal);\n\n    this.a = a;\n    this.b = b;\n    this.c = c;\n}", "path": "buck/third-party/java/dx/src/com/android/dx/io/instructions/ThreeRegisterDecodedInstruction.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int compare(AnnotationItem item1, AnnotationItem item2)", "code": "{\n    int index1 = item1.type.getIndex();\n    int index2 = item2.type.getIndex();\n\n    if (index1 < index2) {\n        return -1;\n    } else if (index1 > index2) {\n        return 1;\n    }\n\n    return 0;\n}", "path": "buck/third-party/java/dx/src/com/android/dx/dex/file/AnnotationItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public DecodedInstruction withIndex(int newIndex)", "code": "{\n    return new ThreeRegisterDecodedInstruction(\n            getFormat(), getOpcode(), newIndex, getIndexType(),\n            getTarget(), getLiteral(), a, b, c);\n}", "path": "buck/third-party/java/dx/src/com/android/dx/io/instructions/ThreeRegisterDecodedInstruction.java", "commit_date": "2016-12-19 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic boolean equals(Object other)", "code": "{\n    if (!(other instanceof LocalItem)) {\n        return false;\n    }\n\n    LocalItem local = (LocalItem) other;\n\n    return 0 == compareTo(local);\n}", "path": "buck/third-party/java/dx/src/com/android/dx/rop/code/LocalItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int compareTo(LocalItem local)", "code": "{\n    int ret;\n\n    ret = compareHandlesNulls(name, local.name);\n\n    if (ret != 0) {\n        return ret;\n    }\n\n    ret = compareHandlesNulls(signature, local.signature);\n\n    return ret;\n}", "path": "buck/third-party/java/dx/src/com/android/dx/rop/code/LocalItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    return (name == null ? 0 : name.hashCode()) * 31\n            + (signature == null ? 0 : signature.hashCode());\n}", "path": "buck/third-party/java/dx/src/com/android/dx/rop/code/LocalItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * Constructs an instance.\n *\n * @param annotation {@code non-null;} annotation to represent\n * @param dexFile {@code non-null;} dex output\n */\n", "func_signal": "public AnnotationItem(Annotation annotation, DexFile dexFile)", "code": "{\n    /*\n     * The write size isn't known up-front because (the variable-lengthed)\n     * leb128 type is used to represent some things.\n     */\n    super(ALIGNMENT, -1);\n\n    if (annotation == null) {\n        throw new NullPointerException(\"annotation == null\");\n    }\n\n    this.annotation = annotation;\n    this.type = null;\n    this.encodedForm = null;\n    addContents(dexFile);\n}", "path": "buck/third-party/java/dx/src/com/android/dx/dex/file/AnnotationItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * Compares two strings like String.compareTo(), excepts treats a null\n * as the least-possible string value.\n *\n * @return negative integer, zero, or positive integer in accordance\n * with Comparable.compareTo()\n */\n", "func_signal": "private static int compareHandlesNulls(CstString a, CstString b)", "code": "{\n    if (a == b) {\n        return 0;\n    } else if (a == null) {\n        return -1;\n    } else if (b == null) {\n        return 1;\n    } else {\n        return a.compareTo(b);\n    }\n}", "path": "buck/third-party/java/dx/src/com/android/dx/rop/code/LocalItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected int compareTo0(OffsettedItem other)", "code": "{\n    AnnotationItem otherAnnotation = (AnnotationItem) other;\n\n    return annotation.compareTo(otherAnnotation.annotation);\n}", "path": "buck/third-party/java/dx/src/com/android/dx/dex/file/AnnotationItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void addContents(DexFile file)", "code": "{\n    type = file.getTypeIds().intern(annotation.getType());\n    ValueEncoder.addContents(file, annotation);\n}", "path": "buck/third-party/java/dx/src/com/android/dx/dex/file/AnnotationItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * Make a new item. If both name and signature are null, null is returned.\n *\n * TODO: intern these\n *\n * @param name {@code null-ok;} local variable name\n * @param signature {@code null-ok;} local variable signature\n * @return {@code non-null;} appropriate instance.\n */\n", "func_signal": "public static LocalItem make(CstString name, CstString signature)", "code": "{\n    if (name == null && signature == null) {\n        return null;\n    }\n\n    return new LocalItem (name, signature);\n}", "path": "buck/third-party/java/dx/src/com/android/dx/rop/code/LocalItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    if (name != null && signature == null) {\n        return name.toQuoted();\n    } else if (name == null && signature == null) {\n        return \"\";\n    }\n\n    return \"[\" + (name == null ? \"\" : name.toQuoted())\n            + \"|\" + (signature == null ? \"\" : signature.toQuoted());\n}", "path": "buck/third-party/java/dx/src/com/android/dx/rop/code/LocalItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * Configures a function to be used to extract additional attributes to include when rendering\n * graph nodes.\n *\n * <p>In order ot prevent collisions, all attribute names are prefixed with {@code buck_}. They\n * are also escaped in order to be compatible with the <a\n * href=\"https://graphviz.gitlab.io/_pages/doc/info/lang.html\">Dot format</a>.\n */\n", "func_signal": "public Builder<T> setNodeToAttributes(Function<T, ImmutableSortedMap<String, String>> func)", "code": "{\n  nodeToAttributes = func;\n  return this;\n}", "path": "buck/src/com/facebook/buck/cli/Dot.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * Write a (listing file) annotation for this instance to the given\n * output, that consumes no bytes of output. This is for annotating\n * a reference to this instance at the point of the reference.\n *\n * @param out {@code non-null;} where to output to\n * @param prefix {@code non-null;} prefix for each line of output\n */\n", "func_signal": "public void annotateTo(AnnotatedOutput out, String prefix)", "code": "{\n    out.annotate(0, prefix + \"visibility: \" +\n            annotation.getVisibility().toHuman());\n    out.annotate(0, prefix + \"type: \" + annotation.getType().toHuman());\n\n    for (NameValuePair pair : annotation.getNameValuePairs()) {\n        CstString name = pair.getName();\n        Constant value = pair.getValue();\n\n        out.annotate(0, prefix + name.toHuman() + \": \" +\n                ValueEncoder.constantToHuman(value));\n    }\n}", "path": "buck/third-party/java/dx/src/com/android/dx/dex/file/AnnotationItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * Entry point for out of process rule execution. This should be run within the build root\n * directory (i.e. within the root cell's root).\n *\n * <p>Expected usage: {@code this_binary <build_root> <root_cell> <rule_hash> } where build_root\n * is the shared cell path ancestor and contains the rule_hash serialized data.\n */\n", "func_signal": "public static void main(String[] args)\n    throws IOException, StepFailedException, InterruptedException", "code": "{\n  LogManager.getLogManager().getLogger(\"\").setLevel(Level.SEVERE);\n\n  LOG.info(String.format(\"Started buck at time [%s].\", new Date()));\n  Thread.setDefaultUncaughtExceptionHandler(\n      (thread, error) -> {\n        error.printStackTrace(System.err);\n        System.exit(1);\n      });\n  Preconditions.checkState(\n      args.length == NUM_ARGS,\n      \"Expected %s arguments, got %s: <%s>\",\n      NUM_ARGS,\n      args.length,\n      Joiner.on(\",\").join(args));\n  Path buildDir = Paths.get(args[0]);\n  Path projectRoot = Paths.get(args[1]);\n  HashCode hash = HashCode.fromString(args[2]);\n  Path metadataPath = Paths.get(args[3]);\n  new IsolatedBuildableBuilder(buildDir, projectRoot, metadataPath) {\n\n    @Override\n    protected Console createConsole() {\n      return new Console(\n          Verbosity.STANDARD_INFORMATION, System.out, System.err, Ansi.withoutTty());\n    }\n\n    @Override\n    protected BuckEventBus createEventBus(Console console) {\n      DefaultBuckEventBus buckEventBus =\n          new DefaultBuckEventBus(new DefaultClock(), new BuildId(\"whatever\"));\n      buckEventBus.register(new ConsoleBuckEventListener(console));\n      return buckEventBus;\n    }\n  }.build(hash);\n  System.exit(0);\n}", "path": "buck/src/com/facebook/buck/rules/modern/builders/OutOfProcessIsolatedBuilder.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * Constructs instance.\n *\n * @param name {@code null-ok;} local variable name\n * @param signature {@code null-ok;} local variable signature\n */\n", "func_signal": "private LocalItem(CstString name, CstString signature)", "code": "{\n    this.name = name;\n    this.signature = signature;\n}", "path": "buck/third-party/java/dx/src/com/android/dx/rop/code/LocalItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected void writeTo0(DexFile file, AnnotatedOutput out)", "code": "{\n    boolean annotates = out.annotates();\n    AnnotationVisibility visibility = annotation.getVisibility();\n\n    if (annotates) {\n        out.annotate(0, offsetString() + \" annotation\");\n        out.annotate(1, \"  visibility: VISBILITY_\" + visibility);\n    }\n\n    switch (visibility) {\n        case BUILD:   out.writeByte(VISIBILITY_BUILD); break;\n        case RUNTIME: out.writeByte(VISIBILITY_RUNTIME); break;\n        case SYSTEM:  out.writeByte(VISIBILITY_SYSTEM); break;\n        default: {\n            // EMBEDDED shouldn't appear at the top level.\n            throw new RuntimeException(\"shouldn't happen\");\n        }\n    }\n\n    if (annotates) {\n        /*\n         * The output is to be annotated, so redo the work previously\n         * done by place0(), except this time annotations will actually\n         * get emitted.\n         */\n        ValueEncoder encoder = new ValueEncoder(file, out);\n        encoder.writeAnnotation(annotation, true);\n    } else {\n        out.write(encodedForm);\n    }\n}", "path": "buck/third-party/java/dx/src/com/android/dx/dex/file/AnnotationItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected void place0(Section addedTo, int offset)", "code": "{\n    // Encode the data and note the size.\n\n    ByteArrayAnnotatedOutput out = new ByteArrayAnnotatedOutput();\n    ValueEncoder encoder = new ValueEncoder(addedTo.getFile(), out);\n\n    encoder.writeAnnotation(annotation, false);\n    encodedForm = out.toByteArray();\n\n    // Add one for the visibility byte in front of the encoded annotation.\n    setWriteSize(encodedForm.length + 1);\n}", "path": "buck/third-party/java/dx/src/com/android/dx/dex/file/AnnotationItem.java", "commit_date": "2015-07-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** Maps the cxxPlatforms to corresponding HaskellPlatform. */\n", "func_signal": "public FlavorDomain<HaskellPlatform> getPlatforms(\n    FlavorDomain<UnresolvedCxxPlatform> cxxPlatforms)", "code": "{\n  // Use convert (instead of map) so that if we ever have the haskell platform flavor different\n  // from the underlying c++ platform's flavor this will continue to work correctly.\n  return cxxPlatforms.convert(\n      \"Haskell platform\",\n      cxxPlatform ->\n          // We special case the \"default\" C/C++ platform to just use the \"haskell\" section.\n          cxxPlatform.getFlavor().equals(DefaultCxxPlatforms.FLAVOR)\n              ? getPlatform(haskellBuckConfig.getDefaultSection(), cxxPlatform)\n              : getPlatform(haskellBuckConfig.getSectionForPlatform(cxxPlatform), cxxPlatform));\n}", "path": "buck/src/com/facebook/buck/features/haskell/HaskellPlatformsFactory.java", "commit_date": "2020-02-19 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/** Writes out the graph in dot format to the given output */\n", "func_signal": "public void writeOutput(Appendable output) throws IOException", "code": "{\n  // Sorting the edges to have deterministic output and be able to test this.\n  output.append(\"digraph \").append(graphName).append(\" {\");\n  output.append(System.lineSeparator());\n\n  switch (outputOrder) {\n    case BFS:\n      {\n        new AbstractBreadthFirstThrowingTraversal<T, IOException>(\n            graph.getNodesWithNoIncomingEdges()) {\n\n          @Override\n          public Iterable<T> visit(T node) throws IOException {\n            ImmutableSortedSet<T> deps =\n                ImmutableSortedSet.copyOf(graph.getOutgoingNodesFor(node));\n            if (shouldContainNode.test(node)) {\n              output.append(\n                  printNode(\n                      node,\n                      Dot.this::getNodeId,\n                      nodeToName,\n                      nodeToTypeName,\n                      nodeToAttributes,\n                      compactMode));\n              for (T dep : Sets.filter(deps, shouldContainNode::test)) {\n                output.append(printEdge(node, dep, nodeToName, Dot.this::getNodeId, compactMode));\n              }\n            }\n            return deps;\n          }\n        }.start();\n        break;\n      }\n    case SORTED:\n      {\n        for (T node : ImmutableSortedSet.copyOf(graph.getNodes())) {\n          if (shouldContainNode.test(node)) {\n            output.append(\n                printNode(\n                    node,\n                    Dot.this::getNodeId,\n                    nodeToName,\n                    nodeToTypeName,\n                    nodeToAttributes,\n                    compactMode));\n            for (T dep :\n                Sets.filter(\n                    ImmutableSortedSet.copyOf(graph.getOutgoingNodesFor(node)),\n                    shouldContainNode::test)) {\n              output.append(printEdge(node, dep, nodeToName, Dot.this::getNodeId, compactMode));\n            }\n          }\n        }\n        break;\n      }\n  }\n\n  output.append(\"}\");\n  output.append(System.lineSeparator());\n}", "path": "buck/src/com/facebook/buck/cli/Dot.java", "commit_date": "2019-12-17 00:00:00", "repo_name": "facebook/buck", "stars": 8572, "license": "apache-2.0", "language": "java", "size": 2024585}
{"docstring": "/**\n * deal with whitelist\n *\n * @param specNamesId resource spec name id\n * @param config      {@Configuration} AndResGuard configuration\n * @return isWhiteList whether this resource is processed by whitelist\n */\n", "func_signal": "private boolean dealWithWhiteList(int specNamesId, Configuration config) throws AndrolibException", "code": "{\n  String packName = mPkg.getName();\n  if (config.mWhiteList.containsKey(packName)) {\n    HashMap<String, HashSet<Pattern>> typeMaps = config.mWhiteList.get(packName);\n    String typeName = mType.getName();\n    if (typeMaps.containsKey(typeName)) {\n      String specName = mSpecNames.get(specNamesId).toString();\n      HashSet<Pattern> patterns = typeMaps.get(typeName);\n      for (Iterator<Pattern> it = patterns.iterator(); it.hasNext(); ) {\n        Pattern p = it.next();\n        if (p.matcher(specName).matches()) {\n          if (DEBUG) {\n            System.out.printf(\"[match] matcher %s ,typeName %s, specName :%s\\n\", p.pattern(), typeName, specName);\n          }\n          mPkg.putSpecNamesReplace(mResId, specName);\n          mPkg.putSpecNamesblock(specName, specName);\n          mResguardBuilder.setInWhiteList(mCurEntryID);\n\n          mType.putSpecResguardName(specName);\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/ARSCDecoder.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Finds index of the string. Returns -1 if the string was not found.\n *\n * @param string input string\n * @return index of the string\n */\n", "func_signal": "public int find(String string)", "code": "{\n  if (string == null) {\n    return -1;\n  }\n  for (int i = 0; i != m_stringOffsets.length; ++i) {\n    int offset = m_stringOffsets[i];\n    int length = getShort(m_strings, offset);\n    if (length != string.length()) {\n      continue;\n    }\n    int j = 0;\n    for (; j != length; ++j) {\n      offset += 2;\n      if (string.charAt(j) != getShort(m_strings, offset)) {\n        break;\n      }\n    }\n    if (j == length) {\n      return i;\n    }\n  }\n  return -1;\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/StringBlock.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * read a long, 64-bits. Like DataInputStream.readLong except little endian.\n *\n * @return little-endian binary long from the datastream.\n * @throws IOException ioexception\n */\n", "func_signal": "@Override\npublic final long readLong() throws IOException", "code": "{\n  dis.readFully(work, 0, 8);\n  return (long) (work[7]) << 56\n         |\n      /* long cast needed or shift done modulo 32 */\n         (long) (work[6] & 0xff) << 48\n         | (long) (work[5] & 0xff) << 40\n         | (long) (work[4] & 0xff) << 32\n         | (long) (work[3] & 0xff) << 24\n         | (long) (work[2] & 0xff) << 16\n         | (long) (work[1] & 0xff) << 8\n         | work[0] & 0xff;\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/mindprod/ledatastream/LEDataInputStream.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Returns the value of the current option, throwing an exception if the value is missing.\n */\n", "func_signal": "public String getRequiredValue(String valueDescription) throws OptionsException", "code": "{\n  if (mLastOptionValue != null) {\n    String result = mLastOptionValue;\n    mLastOptionValue = null;\n    return result;\n  }\n  if (mIndex >= mParams.length) {\n    // No more parameters left\n    throw new OptionsException(valueDescription + \" missing after \" + mLastOptionOriginalForm);\n  }\n  String param = mParams[mIndex];\n  if (\"--\".equals(param)) {\n    // End of options marker\n    throw new OptionsException(valueDescription + \" missing after \" + mLastOptionOriginalForm);\n  }\n  mIndex++;\n  return param;\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/apksigner/OptionsParser.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * resource filtering, filtering duplicate resources, reducing the volume of apk\n */\n", "func_signal": "private MergeDuplicatedResInfo mergeDuplicated(File resRawFile, File resDestFile, String compatibaleraw, String result) throws IOException", "code": "{\n  MergeDuplicatedResInfo filterInfo = null;\n  List<MergeDuplicatedResInfo> mergeDuplicatedResInfoList = mMergeDuplicatedResInfoData.get(resRawFile.length());\n  if (mergeDuplicatedResInfoList != null) {\n    for (MergeDuplicatedResInfo mergeDuplicatedResInfo : mergeDuplicatedResInfoList) {\n      if (mergeDuplicatedResInfo.md5 == null) {\n        mergeDuplicatedResInfo.md5 = Md5Util.getMD5Str(new File(mergeDuplicatedResInfo.filePath));\n      }\n      String resRawFileMd5 = Md5Util.getMD5Str(resRawFile);\n      if (!resRawFileMd5.isEmpty() && resRawFileMd5.equals(mergeDuplicatedResInfo.md5)) {\n        filterInfo = mergeDuplicatedResInfo;\n        filterInfo.md5 = resRawFileMd5;\n        break;\n      }\n    }\n  }\n  if (filterInfo != null) {\n    generalFilterResIDMapping(compatibaleraw, result, filterInfo.originalName, filterInfo.fileName, resRawFile.length());\n    mMergeDuplicatedResCount++;\n    mMergeDuplicatedResTotalSize += resRawFile.length();\n  } else {\n    MergeDuplicatedResInfo info = new MergeDuplicatedResInfo.Builder()\n            .setFileName(result)\n            .setFilePath(resDestFile.getAbsolutePath())\n            .setOriginalName(compatibaleraw)\n            .create();\n    info.fileName = result;\n    info.filePath = resDestFile.getAbsolutePath();\n    info.originalName = compatibaleraw;\n\n    if (mergeDuplicatedResInfoList == null) {\n      mergeDuplicatedResInfoList = new ArrayList<>();\n      mMergeDuplicatedResInfoData.put(resRawFile.length(), mergeDuplicatedResInfoList);\n    }\n    mergeDuplicatedResInfoList.add(info);\n  }\n  return filterInfo;\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/ARSCDecoder.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Returns the name (without leading dashes) of the next option (starting with the very first\n * option) or {@code null} if there are no options left.\n *\n * <p>The value of this option can be obtained via {@link #getRequiredValue(String)},\n * {@link #getRequiredIntValue(String)}, and {@link #getOptionalBooleanValue(boolean)}.\n */\n", "func_signal": "public String nextOption()", "code": "{\n  if (mIndex >= mParams.length) {\n    // No more parameters left\n    return null;\n  }\n  String param = mParams[mIndex];\n  if (!param.startsWith(\"-\")) {\n    // Not an option\n    return null;\n  }\n\n  mIndex++;\n  mLastOptionOriginalForm = param;\n  mLastOptionValue = null;\n  if (param.startsWith(\"--\")) {\n    // FORMAT: --name value OR --name=value\n    if (\"--\".equals(param)) {\n      // End of options marker\n      return null;\n    }\n    int valueDelimiterIndex = param.indexOf('=');\n    if (valueDelimiterIndex != -1) {\n      mLastOptionValue = param.substring(valueDelimiterIndex + 1);\n      mLastOptionOriginalForm = param.substring(0, valueDelimiterIndex);\n      return param.substring(\"--\".length(), valueDelimiterIndex);\n    } else {\n      return param.substring(\"--\".length());\n    }\n  } else {\n    // FORMAT: -name value\n    return param.substring(\"-\".length());\n  }\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/apksigner/OptionsParser.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Returns raw string (without any styling information) at specified index.\n *\n * @param index index\n * @return raw string\n */\n", "func_signal": "public String getString(int index)", "code": "{\n  if (index < 0 || m_stringOffsets == null || index >= m_stringOffsets.length) {\n    return null;\n  }\n  int offset = m_stringOffsets[index];\n  int length;\n\n  if (m_isUTF8) {\n    int[] val = getUtf8(m_strings, offset);\n    offset = val[0];\n    length = val[1];\n  } else {\n    int[] val = getUtf16(m_strings, offset);\n    offset += val[0];\n    length = val[1];\n  }\n  return decodeString(offset, length);\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/StringBlock.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Read an unsigned short, 16 bits. Like DataInputStream.readUnsignedShort\n * except little endian. Note, returns int even though it reads a short.\n *\n * @return little-endian int from the stream.\n * @throws IOException if read fails.\n */\n", "func_signal": "@Override\npublic final int readUnsignedShort() throws IOException", "code": "{\n  dis.readFully(work, 0, 2);\n  return ((work[1] & 0xff) << 8 | (work[0] & 0xff));\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/mindprod/ledatastream/LEDataInputStream.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * @param flags whether read direct\n */\n", "func_signal": "private void readValue(boolean flags, int specNamesId) throws IOException, AndrolibException", "code": "{\n  /* size */\n  mIn.skipCheckShort((short) 8);\n  /* zero */\n  mIn.skipCheckByte((byte) 0);\n  byte type = mIn.readByte();\n  int data = mIn.readInt();\n\n  //\u8fd9\u91cc\u9762\u6709\u51e0\u4e2a\u9650\u5236\uff0c\u4e00\u5bf9\u4e8estring ,id, array\u6211\u4eec\u662f\u77e5\u9053\u80af\u5b9a\u4e0d\u7528\u6539\u7684\uff0c\u7b2c\u4e8c\u770b\u8981\u90a3\u4e2atype\u662f\u5426\u5bf9\u5e94\u6709\u6587\u4ef6\u8def\u5f84\n  if (mPkg.isCanResguard()\n     && flags\n     && type == TypedValue.TYPE_STRING\n     && mShouldResguardForType\n     && mShouldResguardTypeSet.contains(mType.getName())) {\n    if (mTableStringsResguard.get(data) == null) {\n      String raw = mTableStrings.get(data).toString();\n      if (StringUtil.isBlank(raw) || raw.equalsIgnoreCase(\"null\")) return;\n\n      String proguard = mPkg.getSpecRepplace(mResId);\n      //\u8fd9\u4e2a\u8981\u5199\u6b7b\u8fd9\u4e2a\uff0c\u56e0\u4e3aresources.arsc\u91cc\u9762\u5c31\u662f\u7528\u8fd9\u4e2a\n      int secondSlash = raw.lastIndexOf(\"/\");\n      if (secondSlash == -1) {\n        throw new AndrolibException(String.format(\"can not find \\\\ or raw string in res path = %s\", raw));\n      }\n\n      String newFilePath = raw.substring(0, secondSlash);\n\n      if (!mApkDecoder.getConfig().mKeepRoot) {\n        newFilePath = mOldFileName.get(raw.substring(0, secondSlash));\n      }\n      if (newFilePath == null) {\n        System.err.printf(\"can not found new res path, raw=%s\\n\", raw);\n        return;\n      }\n      //\u540c\u7406\u8fd9\u91cc\u4e0d\u80fd\u7528File.separator\uff0c\u56e0\u4e3aresources.arsc\u91cc\u9762\u5c31\u662f\u7528\u8fd9\u4e2a\n      String result = newFilePath + \"/\" + proguard;\n      int firstDot = raw.indexOf(\".\");\n      if (firstDot != -1) {\n        result += raw.substring(firstDot);\n      }\n      String compatibaleraw = new String(raw);\n      String compatibaleresult = new String(result);\n\n      //\u4e3a\u4e86\u9002\u914dwindow\u8981\u505a\u4e00\u6b21\u8f6c\u6362\n      if (!File.separator.contains(\"/\")) {\n        compatibaleresult = compatibaleresult.replace(\"/\", File.separator);\n        compatibaleraw = compatibaleraw.replace(\"/\", File.separator);\n      }\n\n      File resRawFile = new File(mApkDecoder.getOutTempDir().getAbsolutePath() + File.separator + compatibaleraw);\n      File resDestFile = new File(mApkDecoder.getOutDir().getAbsolutePath() + File.separator + compatibaleresult);\n\n      MergeDuplicatedResInfo filterInfo = null;\n      boolean mergeDuplicatedRes = mApkDecoder.getConfig().mMergeDuplicatedRes;\n      if (mergeDuplicatedRes) {\n        filterInfo = mergeDuplicated(resRawFile, resDestFile, compatibaleraw, result);\n        if (filterInfo != null) {\n          resDestFile = new File(filterInfo.filePath);\n          result = filterInfo.fileName;\n        }\n      }\n\n      //\u8fd9\u91cc\u7528\u7684\u662flinux\u7684\u5206\u9694\u7b26\n      HashMap<String, Integer> compressData = mApkDecoder.getCompressData();\n      if (compressData.containsKey(raw)) {\n        compressData.put(result, compressData.get(raw));\n      } else {\n        System.err.printf(\"can not find the compress dataresFile=%s\\n\", raw);\n      }\n\n      if (!resRawFile.exists()) {\n        System.err.printf(\"can not find res file, you delete it? path: resFile=%s\\n\", resRawFile.getAbsolutePath());\n      } else {\n        if (!mergeDuplicatedRes && resDestFile.exists()) {\n          throw new AndrolibException(String.format(\"res dest file is already  found: destFile=%s\",\n             resDestFile.getAbsolutePath()\n          ));\n        }\n        if (filterInfo == null) {\n          FileOperation.copyFileUsingStream(resRawFile, resDestFile);\n        }\n        //already copied\n        mApkDecoder.removeCopiedResFile(resRawFile.toPath());\n        mTableStringsResguard.put(data, result);\n      }\n    }\n  }\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/ARSCDecoder.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Returns the value of the current numeric option, throwing an exception if the value is\n * missing or is not numeric.\n */\n", "func_signal": "public int getRequiredIntValue(String valueDescription) throws OptionsException", "code": "{\n  String value = getRequiredValue(valueDescription);\n  try {\n    return Integer.parseInt(value);\n  } catch (NumberFormatException e) {\n    throw new OptionsException(valueDescription\n                               + \" (\"\n                               + mLastOptionOriginalForm\n                               + \") must be a decimal number: \"\n                               + value);\n  }\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/apksigner/OptionsParser.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * constructor.\n *\n * @param in binary inputstream of little-endian data.\n */\n", "func_signal": "public LEDataInputStream(InputStream in)", "code": "{\n  this.is = in;\n  this.dis = new DataInputStream(in);\n  work = new byte[8];\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/mindprod/ledatastream/LEDataInputStream.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Read an int, 32-bits. Like DataInputStream.readInt except little endian.\n *\n * @return little-endian binary int from the datastream\n * @throws IOException if read fails.\n */\n", "func_signal": "@Override\npublic final int readInt() throws IOException", "code": "{\n  dis.readFully(work, 0, 4);\n  return (work[3]) << 24 | (work[2] & 0xff) << 16 | (work[1] & 0xff) << 8 | (work[0] & 0xff);\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/mindprod/ledatastream/LEDataInputStream.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Read short, 16-bits. Like DataInputStream.readShort except little endian.\n *\n * @return little endian binary short from stream.\n * @throws IOException if read fails.\n */\n", "func_signal": "@Override\npublic final short readShort() throws IOException", "code": "{\n  dis.readFully(work, 0, 2);\n  return (short) ((work[1] & 0xff) << 8 | (work[0] & 0xff));\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/mindprod/ledatastream/LEDataInputStream.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Reads whole (including chunk type) string block from stream. Stream must\n * be at the chunk type.\n *\n * @param reader reader\n * @return stringblock\n * @throws IOException ioexcetpion\n */\n", "func_signal": "public static StringBlock read(ExtDataInput reader) throws IOException", "code": "{\n  reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE, CHUNK_NULL_TYPE);\n  int chunkSize = reader.readInt();\n  int stringCount = reader.readInt();\n  int styleCount = reader.readInt();\n  int flags = reader.readInt();\n  int stringsOffset = reader.readInt();\n  int stylesOffset = reader.readInt();\n\n  StringBlock block = new StringBlock();\n  block.m_isUTF8 = (flags & UTF8_FLAG) != 0;\n  block.m_stringOffsets = reader.readIntArray(stringCount);\n  block.m_stringOwns = new int[stringCount];\n  Arrays.fill(block.m_stringOwns, -1);\n\n  if (styleCount != 0) {\n    block.m_styleOffsets = reader.readIntArray(styleCount);\n  }\n  {\n    int size = ((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;\n\n    if ((size % 4) != 0) {\n      throw new IOException(\"String data size is not multiple of 4 (\" + size + \").\");\n    }\n    block.m_strings = new byte[size];\n\n    reader.readFully(block.m_strings);\n  }\n  if (stylesOffset != 0) {\n    int size = (chunkSize - stylesOffset);\n    if ((size % 4) != 0) {\n      throw new IOException(\"Style data size is not multiple of 4 (\" + size + \").\");\n    }\n    block.m_styles = reader.readIntArray(size / 4);\n  }\n  return block;\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/StringBlock.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Encodes the provided data as a hexadecimal string.\n */\n", "func_signal": "public static String encode(byte[] data, int offset, int length)", "code": "{\n  StringBuilder result = new StringBuilder(length * 2);\n  for (int i = 0; i < length; i++) {\n    byte b = data[offset + i];\n    result.append(HEX_DIGITS[(b >>> 4) & 0x0f]);\n    result.append(HEX_DIGITS[b & 0x0f]);\n  }\n  return result.toString();\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/apksigner/HexEncoding.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Returns the remaining command-line parameters. This is intended to be invoked once\n * {@link #nextOption()} returns {@code null}.\n */\n", "func_signal": "public String[] getRemainingParams()", "code": "{\n  if (mIndex >= mParams.length) {\n    return new String[0];\n  }\n  String param = mParams[mIndex];\n  if (\"--\".equals(param)) {\n    // Skip end of options marker\n    return Arrays.copyOfRange(mParams, mIndex + 1, mParams.length);\n  } else {\n    return Arrays.copyOfRange(mParams, mIndex, mParams.length);\n  }\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/apksigner/OptionsParser.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Gets the value of the current boolean option. Boolean options are not required to have\n * explicitly specified values.\n */\n", "func_signal": "public boolean getOptionalBooleanValue(boolean defaultValue) throws OptionsException", "code": "{\n  if (mLastOptionValue != null) {\n    // --option=value form\n    String stringValue = mLastOptionValue;\n    mLastOptionValue = null;\n    if (\"true\".equals(stringValue)) {\n      return true;\n    } else if (\"false\".equals(stringValue)) {\n      return false;\n    }\n    throw new OptionsException(\"Unsupported value for \"\n                               + mLastOptionOriginalForm\n                               + \": \"\n                               + stringValue\n                               + \". Only true or false supported.\");\n  }\n\n  // --option (true|false) form OR just --option\n  if (mIndex >= mParams.length) {\n    return defaultValue;\n  }\n\n  String stringValue = mParams[mIndex];\n  if (\"true\".equals(stringValue)) {\n    mIndex++;\n    return true;\n  } else if (\"false\".equals(stringValue)) {\n    mIndex++;\n    return false;\n  } else {\n    return defaultValue;\n  }\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/apksigner/OptionsParser.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Read on char. like DataInputStream.readChar except little endian.\n *\n * @return little endian 16-bit unicode char from the stream.\n * @throws IOException if read fails.\n */\n", "func_signal": "@Override\npublic final char readChar() throws IOException", "code": "{\n  dis.readFully(work, 0, 2);\n  return (char) ((work[1] & 0xff) << 8 | (work[0] & 0xff));\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/mindprod/ledatastream/LEDataInputStream.java", "commit_date": "2018-09-04 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Reads whole (including chunk type) string block from stream. Stream must\n * be at the chunk type.\n *\n * @param reader ExtDataInput reader\n * @param out ExtDataOutput out\n * @throws IOException ioexception\n */\n", "func_signal": "public static void writeAll(ExtDataInput reader, ExtDataOutput out) throws IOException", "code": "{\n  out.writeCheckChunkTypeInt(reader, CHUNK_STRINGPOOL_TYPE, CHUNK_NULL_TYPE);\n  int chunkSize = reader.readInt();\n  out.writeInt(chunkSize);\n  out.writeBytes(reader, chunkSize - 8);\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/StringBlock.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * @param flags whether read direct\n */\n", "func_signal": "private void readComplexEntry(boolean flags, int specNamesId) throws IOException, AndrolibException", "code": "{\n  int parent = mIn.readInt();\n  int count = mIn.readInt();\n  for (int i = 0; i < count; i++) {\n    mIn.readInt();\n    readValue(flags, specNamesId);\n  }\n}", "path": "AndResGuard/AndResGuard-core/src/main/java/com/tencent/mm/androlib/res/decoder/ARSCDecoder.java", "commit_date": "2019-07-18 00:00:00", "repo_name": "shwenzhang/AndResGuard", "stars": 8431, "license": "apache-2.0", "language": "java", "size": 8343}
{"docstring": "/**\n * Add boundary(exit) node for current stack frame\n *\n * @param exit boundary node, null will be ignored\n */\n", "func_signal": "public void addExit(BlockNode exit)", "code": "{\n\tif (exit != null) {\n\t\tcurState.exits.add(exit);\n\t}\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Return source blocks of exit edges. <br>\n * Exit nodes belongs to loop (contains in {@code loopBlocks})\n */\n", "func_signal": "public Set<BlockNode> getExitNodes()", "code": "{\n\tSet<BlockNode> nodes = new HashSet<>();\n\tSet<BlockNode> blocks = getLoopBlocks();\n\tfor (BlockNode block : blocks) {\n\t\t// exit: successor node not from this loop, (don't change to getCleanSuccessors)\n\t\tfor (BlockNode s : block.getSuccessors()) {\n\t\t\tif (!blocks.contains(s) && !s.contains(AType.EXC_HANDLER)) {\n\t\t\t\tnodes.add(block);\n\t\t\t}\n\t\t}\n\t}\n\treturn nodes;\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/LoopInfo.java", "commit_date": "2020-03-31 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Return loop exit edges.\n */\n", "func_signal": "public List<Edge> getExitEdges()", "code": "{\n\tList<Edge> edges = new LinkedList<>();\n\tSet<BlockNode> blocks = getLoopBlocks();\n\tfor (BlockNode block : blocks) {\n\t\tfor (BlockNode s : block.getSuccessors()) {\n\t\t\tif (!blocks.contains(s) && !s.contains(AType.EXC_HANDLER)) {\n\t\t\t\tedges.add(new Edge(block, s));\n\t\t\t}\n\t\t}\n\t}\n\treturn edges;\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/LoopInfo.java", "commit_date": "2020-03-31 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * @return null if method can't be analyzed (not loaded)\n */\n", "func_signal": "@Nullable\npublic static MethodInlineAttr process(MethodNode mth)", "code": "{\n\tMethodInlineAttr mia = mth.get(AType.METHOD_INLINE);\n\tif (mia != null) {\n\t\treturn mia;\n\t}\n\tif (canInline(mth)) {\n\t\tList<BlockNode> blocks = mth.getBasicBlocks();\n\t\tif (blocks == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (blocks.size() == 2) {\n\t\t\tBlockNode returnBlock = blocks.get(1);\n\t\t\tif (returnBlock.contains(AFlag.RETURN) || returnBlock.getInstructions().isEmpty()) {\n\t\t\t\tMethodInlineAttr inlined = inlineMth(mth, blocks.get(0), returnBlock);\n\t\t\t\tif (inlined != null) {\n\t\t\t\t\treturn inlined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn MethodInlineAttr.inlineNotNeeded(mth);\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/visitors/MarkMethodsForInline.java", "commit_date": "2020-09-07 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// @formatter:off\n/*\n\tpublic static String test(Context context, int i) {\n\t\tCommonContracts.requireNonNull(context);\n\t\tInputStream inputStream = null;\n\t\ttry {\n\t\t\tinputStream = context.getResources().openRawResource(i);\n\t\t\tScanner useDelimiter = new Scanner(inputStream).useDelimiter(\"\\\\A\");\n\t\t\treturn useDelimiter.hasNext() ? useDelimiter.next() : \"\";\n\t\t} finally {\n\t\t\tif (inputStream != null) {\n\t\t\t\ttry {\n\t\t\t\t\tinputStream.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tl.logException(LogLevel.ERROR, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n*/\n// @formatter:on\n", "func_signal": "@Test\npublic void test()", "code": "{\n\tdisableCompilation();\n\tClassNode cls = getClassNodeFromSmali();\n\tString code = cls.getCode().toString();\n\n\tassertThat(code, not(containsString(\"boolean z = null;\")));\n\tassertThat(code, not(containsString(\"}", "path": "jadx/jadx-core/src/test/java/jadx/tests/integration/trycatch/TestTryCatchFinally10.java", "commit_date": "2019-07-12 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// @formatter:off\n/*\n\tpublic class TestGetterInlineNegative {\n\t\tpublic static final String field = \"some string\";\n\n\t\tpublic static synthetic String getter() {\n\t\t\treturn field;\n\t\t}\n\n\t\tpublic void test() {\n\t\t\tgetter(); // inline will produce 'field;' and fail to compile with 'not a statement' error\n\t\t}\n\n\t\tpublic String test2() {\n\t\t\treturn getter();\n\t\t}\n\t}\n*/\n// @formatter:on\n", "func_signal": "@Test\npublic void test()", "code": "{\n\tClassNode cls = getClassNodeFromSmali();\n\tString code = cls.getCode().toString();\n\n\tassertThat(code, not(containsString(indent() + \"field;\")));\n\tassertThat(code, containsOne(\"return field;\"));\n}", "path": "jadx/jadx-core/src/test/java/jadx/tests/integration/inline/TestGetterInlineNegative.java", "commit_date": "2019-12-28 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * @param printClassName allows to print the original class name as comment (e.g. for inlined\n *                       classes)\n */\n", "func_signal": "public void addClassBody(CodeWriter clsCode, boolean printClassName) throws CodegenException", "code": "{\n\tclsCode.add('{');\n\tsetBodyGenStarted(true);\n\tclsDeclLine = clsCode.getLine();\n\tclsCode.incIndent();\n\tif (printClassName) {\n\t\tclsCode.startLine();\n\t\tclsCode.add(\"/* class \" + cls.getFullName() + \" */\");\n\t}\n\taddFields(clsCode);\n\taddInnerClsAndMethods(clsCode);\n\tclsCode.decIndent();\n\tclsCode.startLine('}');\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Try to detect if user provide custom logback config via -Dlogback.configurationFile=\n */\n", "func_signal": "private static boolean isCustomLogConfig()", "code": "{\n\ttry {\n\t\tString logbackConfig = System.getProperty(\"logback.configurationFile\");\n\t\tif (logbackConfig == null) {\n\t\t\treturn false;\n\t\t}\n\t\tLOG.debug(\"Use custom log config: {}\", logbackConfig);\n\t\treturn true;\n\t} catch (Exception e) {\n\t\tLOG.error(\"Failed to detect custom log config\", e);\n\t}\n\treturn false;\n}", "path": "jadx/jadx-cli/src/main/java/jadx/cli/LogHelper.java", "commit_date": "2019-08-08 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// @formatter:off\n/*\n\tprivate static void test(AutoCloseable closeable) {\n\t\tif (closeable != null) {\n\t\t\ttry {\n\t\t\t\tcloseable.close();\n\t\t\t} catch (Exception unused) {\n\t\t\t}\n\t\t\tSystem.nanoTime();\n\t\t}\n\t}\n*/\n// @formatter:on\n", "func_signal": "@Test\npublic void test()", "code": "{\n\tClassNode cls = getClassNodeFromSmaliWithPkg(\"trycatch\", \"TestTryCatchNoMoveExc2\");\n\tString code = cls.getCode().toString();\n\n\tassertThat(code, containsOne(\"try {\"));\n\tassertThat(code, containsLines(2,\n\t\t\t\"} catch (Exception unused) {\",\n\t\t\t\"}\",\n\t\t\t\"System.nanoTime();\"));\n}", "path": "jadx/jadx-core/src/test/java/jadx/tests/integration/trycatch/TestTryCatchNoMoveExc2.java", "commit_date": "2019-04-29 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Replace call of synthetic constructor with all 'null' args\n * to a non-synthetic or default constructor if possible.\n *\n * @return insn for replacement or null if replace not needed or not possible.\n */\n", "func_signal": "@Nullable\nprivate static ConstructorInsn processConstructor(MethodNode mth, ConstructorInsn co)", "code": "{\n\tMethodNode callMth = mth.root().resolveMethod(co.getCallMth());\n\tif (callMth == null\n\t\t\t|| !callMth.getAccessFlags().isSynthetic()\n\t\t\t|| !allArgsNull(co)) {\n\t\treturn null;\n\t}\n\tClassNode classNode = mth.root().resolveClass(callMth.getParentClass().getClassInfo());\n\tif (classNode == null) {\n\t\treturn null;\n\t}\n\tRegisterArg instanceArg = co.getResult();\n\tif (instanceArg == null) {\n\t\treturn null;\n\t}\n\tboolean passThis = instanceArg.isThis();\n\tString ctrId = \"<init>(\" + (passThis ? TypeGen.signature(instanceArg.getInitType()) : \"\") + \")V\";\n\tMethodNode defCtr = classNode.searchMethodByShortId(ctrId);\n\tif (defCtr == null || defCtr.equals(callMth) || defCtr.getAccessFlags().isSynthetic()) {\n\t\treturn null;\n\t}\n\tConstructorInsn newInsn = new ConstructorInsn(defCtr.getMethodInfo(), co.getCallType());\n\tnewInsn.setResult(co.getResult().duplicate());\n\treturn newInsn;\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ConstructorVisitor.java", "commit_date": "2020-05-21 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// argument type not changed to String\n", "func_signal": "assertThat(code, containsString(\"public int method2(Object obj)", "code": "{\"));\n// cast not eliminated\nassertThat(code, containsString(\"((String) obj).length()\"));\n\t}", "path": "jadx/jadx-core/src/test/java/jadx/tests/integration/others/TestRedundantBrackets.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Return constant literal from {@code jadx.api.plugins.input.data.annotations.EncodedValue}\n *\n * @return LiteralArg, String, ArgType or null\n */\n", "func_signal": "@Nullable\npublic static Object convertToConstValue(RootNode root, EncodedValue encodedValue)", "code": "{\n\tif (encodedValue == null) {\n\t\treturn null;\n\t}\n\tObject value = encodedValue.getValue();\n\tswitch (encodedValue.getType()) {\n\t\tcase ENCODED_NULL:\n\t\t\treturn InsnArg.lit(0, ArgType.OBJECT);\n\t\tcase ENCODED_BOOLEAN:\n\t\t\treturn Boolean.TRUE.equals(value) ? LiteralArg.litTrue() : LiteralArg.litFalse();\n\t\tcase ENCODED_BYTE:\n\t\t\treturn InsnArg.lit((Byte) value, ArgType.BYTE);\n\t\tcase ENCODED_SHORT:\n\t\t\treturn InsnArg.lit((Short) value, ArgType.SHORT);\n\t\tcase ENCODED_CHAR:\n\t\t\treturn InsnArg.lit((Character) value, ArgType.CHAR);\n\t\tcase ENCODED_INT:\n\t\t\treturn InsnArg.lit((Integer) value, ArgType.INT);\n\t\tcase ENCODED_LONG:\n\t\t\treturn InsnArg.lit((Long) value, ArgType.LONG);\n\t\tcase ENCODED_FLOAT:\n\t\t\treturn InsnArg.lit(Float.floatToIntBits((Float) value), ArgType.FLOAT);\n\t\tcase ENCODED_DOUBLE:\n\t\t\treturn InsnArg.lit(Double.doubleToLongBits((Double) value), ArgType.DOUBLE);\n\t\tcase ENCODED_STRING:\n\t\t\t// noinspection RedundantCast\n\t\t\treturn (String) value;\n\n\t\tcase ENCODED_TYPE:\n\t\t\treturn ArgType.parse((String) value);\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/utils/EncodedValueUtils.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// @formatter:off\n/*\n\tpublic final void test() {\n\t\tObject obj = null;\n\t\tObject obj2 = null;\n\t\tsynchronized (obj) {\n\t\t\tsynchronized (obj2) {\n\t\t\t}\n\t\t}\n\t}\n*/\n// @formatter:on\n", "func_signal": "@Test\npublic void test()", "code": "{\n\tassertThat(getClassNodeFromSmali())\n\t\t\t.code()\n\t\t\t.countString(2, \"synchronized\");\n}", "path": "jadx/jadx-core/src/test/java/jadx/tests/integration/synchronize/TestNestedSynchronize.java", "commit_date": "2019-12-15 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Prefer {@link InsnArg#wrapInsnIntoArg(InsnNode)}.\n * <p>\n * This method don't support MOVE and CONST insns!\n */\n", "func_signal": "public static InsnArg wrapArg(InsnNode insn)", "code": "{\n\tRegisterArg resArg = insn.getResult();\n\tInsnArg arg = wrap(insn);\n\tswitch (insn.getType()) {\n\t\tcase CONST:\n\t\tcase MOVE:\n\t\t\tthrow new JadxRuntimeException(\"Don't wrap MOVE or CONST insns: \" + insn);\n\n\t\tcase CONST_STR:\n\t\t\targ.setType(ArgType.STRING);\n\t\t\tif (resArg != null) {\n\t\t\t\tresArg.setType(ArgType.STRING);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase CONST_CLASS:\n\t\t\targ.setType(ArgType.CLASS);\n\t\t\tif (resArg != null) {\n\t\t\t\tresArg.setType(ArgType.CLASS);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tif (resArg != null) {\n\t\t\t\targ.setType(resArg.getType());\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn arg;\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java", "commit_date": "2020-11-16 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// Don't use 'instrList.removeAll(toRemove)' because it will remove instructions by content\n// and here can be several instructions with same content\n", "func_signal": "private static void removeAll(List<InsnNode> insns, List<InsnNode> toRemove)", "code": "{\n\tif (toRemove == null || toRemove.isEmpty()) {\n\t\treturn;\n\t}\n\tfor (InsnNode rem : toRemove) {\n\t\tint insnsCount = insns.size();\n\t\tboolean found = false;\n\t\tfor (int i = 0; i < insnsCount; i++) {\n\t\t\tif (insns.get(i) == rem) {\n\t\t\t\tinsns.remove(i);\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found && Consts.DEBUG_WITH_ERRORS) {\n\t\t\tthrow new JadxRuntimeException(\"Can't remove insn:\"\n\t\t\t\t\t+ NL + \"  \" + rem\n\t\t\t\t\t+ NL + \" not found in list:\"\n\t\t\t\t\t+ NL + \"  \" + Utils.listToString(insns, NL + \"  \"));\n\t\t}\n\t}\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/utils/InsnRemover.java", "commit_date": "2020-09-07 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Remove instructions on 'move' chain until instruction with type 'insnType'\n */\n", "func_signal": "private static InsnNode removeAssignChain(MethodNode mth, InsnNode insn, InsnRemover remover, InsnType insnType)", "code": "{\n\tif (insn == null) {\n\t\treturn null;\n\t}\n\tInsnType type = insn.getType();\n\tif (type == insnType) {\n\t\treturn insn;\n\t}\n\tif (insn.isAttrStorageEmpty()) {\n\t\tremover.addWithoutUnbind(insn);\n\t} else {\n\t\tBlockUtils.replaceInsn(mth, insn, new InsnNode(InsnType.NOP, 0));\n\t}\n\tif (type == InsnType.MOVE) {\n\t\tRegisterArg arg = (RegisterArg) insn.getArg(0);\n\t\treturn removeAssignChain(mth, arg.getAssignInsn(), remover, insnType);\n\t}\n\treturn null;\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/visitors/ConstructorVisitor.java", "commit_date": "2020-05-21 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// TODO: refactor this boilerplate code\n", "func_signal": "public void encodeValue(RootNode root, CodeWriter code, EncodedValue encodedValue)", "code": "{\n\tif (encodedValue == null) {\n\t\tcode.add(\"null\");\n\t\treturn;\n\t}\n\tObject value = encodedValue.getValue();\n\tswitch (encodedValue.getType()) {\n\t\tcase ENCODED_NULL:\n\t\t\tcode.add(\"null\");\n\t\t\tbreak;\n\t\tcase ENCODED_BOOLEAN:\n\t\t\tcode.add(Boolean.TRUE.equals(value) ? \"true\" : \"false\");\n\t\t\tbreak;\n\t\tcase ENCODED_BYTE:\n\t\t\tcode.add(TypeGen.formatByte((Byte) value, false));\n\t\t\tbreak;\n\t\tcase ENCODED_SHORT:\n\t\t\tcode.add(TypeGen.formatShort((Short) value, false));\n\t\t\tbreak;\n\t\tcase ENCODED_CHAR:\n\t\t\tcode.add(getStringUtils().unescapeChar((Character) value));\n\t\t\tbreak;\n\t\tcase ENCODED_INT:\n\t\t\tcode.add(TypeGen.formatInteger((Integer) value, false));\n\t\t\tbreak;\n\t\tcase ENCODED_LONG:\n\t\t\tcode.add(TypeGen.formatLong((Long) value, false));\n\t\t\tbreak;\n\t\tcase ENCODED_FLOAT:\n\t\t\tcode.add(TypeGen.formatFloat((Float) value));\n\t\t\tbreak;\n\t\tcase ENCODED_DOUBLE:\n\t\t\tcode.add(TypeGen.formatDouble((Double) value));\n\t\t\tbreak;\n\t\tcase ENCODED_STRING:\n\t\t\tcode.add(getStringUtils().unescapeString((String) value));\n\t\t\tbreak;\n\t\tcase ENCODED_TYPE:\n\t\t\tclassGen.useType(code, ArgType.parse((String) value));\n\t\t\tcode.add(\".class\");\n\t\t\tbreak;\n\t\tcase ENCODED_ENUM:\n\t\tcase ENCODED_FIELD:\n\t\t\t// must be a static field\n\t\t\tif (value instanceof IFieldData) {\n\t\t\t\tFieldInfo field = FieldInfo.fromData(root, (IFieldData) value);\n\t\t\t\tInsnGen.makeStaticFieldAccess(code, field, classGen);\n\t\t\t} else if (value instanceof FieldInfo) {\n\t\t\t\tInsnGen.makeStaticFieldAccess(code, (FieldInfo) value, classGen);\n\t\t\t} else {\n\t\t\t\tthrow new JadxRuntimeException(\"Unexpected field type class: \" + value.getClass());\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ENCODED_METHOD:\n\t\t\t// TODO\n\t\t\tbreak;\n\t\tcase ENCODED_ARRAY:\n\t\t\tcode.add('{');\n\t\t\tIterator<?> it = ((Iterable<?>) value).iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tEncodedValue v = (EncodedValue) it.next();\n\t\t\t\tencodeValue(cls.root(), code, v);\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tcode.add(\", \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcode.add('}');\n\t\t\tbreak;\n\t\tcase ENCODED_ANNOTATION:\n\t\t\tformatAnnotation(code, (IAnnotation) value);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new JadxRuntimeException(\"Can't decode value: \" + encodedValue.getType() + \" (\" + encodedValue + ')');\n\t}\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// @formatter:off\n/*\n\tprivate boolean showConsent;\n\n\tpublic void write(int b) {\n\t}\n\n\tpublic void writeToParcel(TestBooleanToInt testBooleanToInt) {\n\t\ttestBooleanToInt.write(this.showConsent ? 1 : 0);\n\t}\n*/\n// @formatter:on\n", "func_signal": "@Test\npublic void test()", "code": "{\n\tassertThat(getClassNodeFromSmali())\n\t\t\t.code()\n\t\t\t.containsOne(\"write(this.showConsent ? 1 : 0);\");\n}", "path": "jadx/jadx-core/src/test/java/jadx/tests/integration/conditions/TestBooleanToInt.java", "commit_date": "2020-07-08 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "/**\n * Extract all block dominated by 'dominator' to separate region and mark as try/catch block\n */\n", "func_signal": "private static boolean wrapBlocks(IRegion replaceRegion, TryCatchBlock tb, BlockNode dominator)", "code": "{\n\tif (replaceRegion == null) {\n\t\treturn false;\n\t}\n\tif (replaceRegion instanceof LoopRegion) {\n\t\tLoopRegion loop = (LoopRegion) replaceRegion;\n\t\treturn wrapBlocks(loop.getBody(), tb, dominator);\n\t}\n\tif (replaceRegion instanceof IBranchRegion) {\n\t\treturn wrapBlocks(replaceRegion.getParent(), tb, dominator);\n\t}\n\n\tRegion tryRegion = new Region(replaceRegion);\n\tList<IContainer> subBlocks = replaceRegion.getSubBlocks();\n\tfor (IContainer cont : subBlocks) {\n\t\tif (RegionUtils.hasPathThroughBlock(dominator, cont)) {\n\t\t\tif (isHandlerPath(tb, cont)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttryRegion.getSubBlocks().add(cont);\n\t\t}\n\t}\n\tif (tryRegion.getSubBlocks().isEmpty()) {\n\t\treturn false;\n\t}\n\n\tTryCatchRegion tryCatchRegion = new TryCatchRegion(replaceRegion, tryRegion);\n\ttryRegion.setParent(tryCatchRegion);\n\ttryCatchRegion.setTryCatchBlock(tb.getCatchAttr().getTryBlock());\n\n\t// replace first node by region\n\tIContainer firstNode = tryRegion.getSubBlocks().get(0);\n\tif (!replaceRegion.replaceSubBlock(firstNode, tryCatchRegion)) {\n\t\treturn false;\n\t}\n\tsubBlocks.removeAll(tryRegion.getSubBlocks());\n\n\t// fix parents for tryRegion sub blocks\n\tfor (IContainer cont : tryRegion.getSubBlocks()) {\n\t\tif (cont instanceof AbstractRegion) {\n\t\t\tAbstractRegion aReg = (AbstractRegion) cont;\n\t\t\taReg.setParent(tryRegion);\n\t\t}\n\t}\n\treturn true;\n}", "path": "jadx/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java", "commit_date": "2020-11-07 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}
{"docstring": "// @formatter:off\n/*\n\tpublic void test() {\n\t\tif (this.isSaved) {\n\t\t\tthrow new RuntimeException(\"Error\");\n\t\t}\n\t\tif (LoaderUtils.isContextLoaderAvailable()) {\n\t\t\tthis.savedContextLoader = LoaderUtils.getContextClassLoader();\n\t\t\tClassLoader loader = this;\n\t\t\tif (this.project != null && \"simple\".equals(this.project)) {\n\t\t\t\tloader = getClass().getClassLoader();\n\t\t\t}\n\t\t\tLoaderUtils.setContextClassLoader(loader);\n\t\t\tthis.isSaved = true;\n\t\t}\n\t}\n*/\n// @formatter:on\n", "func_signal": "@Test\npublic void test()", "code": "{\n\tdisableCompilation();\n\tClassNode cls = getClassNodeFromSmaliWithPkg(\"conditions\", \"TestComplexIf2\");\n\tString code = cls.getCode().toString();\n\n\tassertThat(code, containsOne(\"if (this.project != null && \\\"simple\\\".equals(this.project)) {\"));\n}\n}", "path": "jadx/jadx-core/src/test/java/jadx/tests/integration/conditions/TestComplexIf2.java", "commit_date": "2019-04-29 00:00:00", "repo_name": "skylot/jadx", "stars": 38315, "license": "apache-2.0", "language": "java", "size": 21884}