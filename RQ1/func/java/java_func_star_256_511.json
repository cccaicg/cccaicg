{"docstring": "/*\n * \u83b7\u53d6\u8be5\u5e94\u7528\u7684\u6839\u76ee\u5f55\n */\n", "func_signal": "public static String getAppPath()", "code": "{\n\tif(!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){\n\t\treturn \"\";\n\t}\n\tFile sdRoot=Environment.getExternalStorageDirectory();\n\tFile file=new File(sdRoot.getAbsolutePath()+\"/ScanBook\");\n        if (!file.exists())\n           file.mkdir();\n        return file.getAbsolutePath();\n}", "path": "app\\src\\main\\java\\com\\scanbook\\common\\FileUtils.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Resets the animation.\n */\n", "func_signal": "public void resetAnimation()", "code": "{\n    // Cancel all the old animators\n    if(startAngleRotate != null && startAngleRotate.isRunning())\n        startAngleRotate.cancel();\n    if(progressAnimator != null && progressAnimator.isRunning())\n        progressAnimator.cancel();\n    if(indeterminateAnimator != null && indeterminateAnimator.isRunning())\n        indeterminateAnimator.cancel();\n\n    // Determinate animation\n    if(!isIndeterminate)\n    {\n        // The cool 360 swoop animation at the start of the animation\n        startAngle = -90f;\n        startAngleRotate = ValueAnimator.ofFloat(-90f, 270f);\n        startAngleRotate.setDuration(5000);\n        startAngleRotate.setInterpolator(new DecelerateInterpolator(2));\n        startAngleRotate.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                startAngle = (Float) animation.getAnimatedValue();\n                invalidate();\n            }\n        });\n        startAngleRotate.start();\n\n        // The linear animation shown when progress is updated\n        actualProgress = 0f;\n        progressAnimator = ValueAnimator.ofFloat(actualProgress, currentProgress);\n        progressAnimator.setDuration(500);\n        progressAnimator.setInterpolator(new LinearInterpolator());\n        progressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                actualProgress = (Float) animation.getAnimatedValue();\n                invalidate();\n            }\n        });\n        progressAnimator.start();\n    }\n    // Indeterminate animation\n    else\n    {\n        startAngle = -90f;\n        indeterminateSweep = INDETERMINANT_MIN_SWEEP;\n        // Build the whole AnimatorSet\n        indeterminateAnimator = new AnimatorSet();\n        AnimatorSet prevSet = null, nextSet;\n        for(int k=0;k<animSteps;k++)\n        {\n            nextSet = createIndeterminateAnimator(k);\n            AnimatorSet.Builder builder = indeterminateAnimator.play(nextSet);\n            if(prevSet != null)\n                builder.after(prevSet);\n            prevSet = nextSet;\n        }\n\n        // Listen to end of animation so we can infinitely loop\n        indeterminateAnimator.addListener(new AnimatorListenerAdapter() {\n            boolean wasCancelled = false;\n            @Override\n            public void onAnimationCancel(Animator animation) {\n                wasCancelled = true;\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                if(!wasCancelled)\n                    resetAnimation();\n            }\n        });\n        indeterminateAnimator.start();\n    }\n\n\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\CircularProgressView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Sets the color of the progress bar.\n * @param color the color of the progress bar\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n    this.color = color;\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\CircularProgressView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/*\n * \u83b7\u53d6\u7f13\u5b58\u56fe\u7247\u7684\u4f4d\u7f6e\n */\n", "func_signal": "public static String getCachePath()", "code": "{\n\tif(!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){\n\t\treturn \"\";\n\t}\n\tFile file=new File(getAppPath()+\"/cache\");\n        if (!file.exists())\n           file.mkdir();\n        return file.getAbsolutePath();\t\n}", "path": "app\\src\\main\\java\\com\\scanbook\\common\\FileUtils.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/*\n *\t\u626b\u63cf\u7ed3\u679c\u7684\u6d88\u606f\u5904\u7406 \n */\n", "func_signal": "public void handleMessage(Message message)", "code": "{\n  switch (message.what) {\n    case R.id.auto_focus:\n      if (state == State.PREVIEW) {\n        CameraManager.get().requestAutoFocus(this, R.id.auto_focus);\n      }\n      break;\n    case R.id.restart_preview:\n      restartPreviewAndDecode();\n      break;\n    //\u626b\u63cf\u6210\u529f\u7684\u6d88\u606f\n    case R.id.decode_succeeded:\n      state = State.SUCCESS;\n      \n      Bundle bundle = message.getData();\n      Bitmap barcode = bundle == null ? null :(Bitmap) bundle.getParcelable(DecodeThread.BARCODE_BITMAP);\n      \n      String str_result=((Result) message.obj).getText();\n      activity.handleDecode((Result) message.obj, barcode);\n      \n      //\u83b7\u53d6\u5230ISBN\u7801\u540e\u8fd4\u56de\u5230\u4e3bActivity\n  \tIntent intent=new Intent(activity,MainActivity.class);\n\t\tintent.putExtra(\"result\", str_result);\n\t\tactivity.setResult(100,intent);\n\t\tactivity.finish();\n      break;\n      \n    case R.id.decode_failed:\n      Log.i(\"OUTPUT\", \"Got return scan result message\");\n      state = State.PREVIEW;\n      CameraManager.get().requestPreviewFrame(decodeThread.getHandler(), R.id.decode);\n      break;\n    case R.id.return_scan_result:\n      Log.i(\"OUTPUT\", \"Got return scan result message\");\n  \tIntent intent2=new Intent(activity,MainActivity.class);\n\t\tactivity.startActivity(intent2);\n      break;\n  }\n}", "path": "app\\src\\main\\java\\com\\zxing\\decoding\\CaptureActivityHandler.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * set positive button\n *\n * @param text     the name of button\n * @param listener\n */\n", "func_signal": "public void setPositiveButton(String text, final View.OnClickListener listener)", "code": "{\n    Button button = new Button(mContext);\n    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\n    button.setLayoutParams(params);\n    button.setBackgroundResource(R.drawable.material_card);\n    button.setTextColor(Color.argb(255, 35, 159, 242));\n    button.setText(text);\n    button.setGravity(Gravity.CENTER);\n    button.setTextSize(14);\n    button.setPadding(dip2px(12), 0, dip2px(32), dip2px(BUTTON_BOTTOM));\n    button.setOnClickListener(listener);\n    mButtonLayout.addView(button);\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\MaterialDialog.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * \u52a8\u6001\u6d4b\u91cflistview-Item\u7684\u9ad8\u5ea6\n * @param listView\n */\n", "func_signal": "public static void setListViewHeightBasedOnChildren(ListView listView)", "code": "{\n    ListAdapter listAdapter = listView.getAdapter();\n    if (listAdapter == null) {\n        // pre-condition\n        return;\n    }\n\n    int totalHeight = 0;\n    for (int i = 0; i < listAdapter.getCount(); i++) {\n        View listItem = listAdapter.getView(i, null, listView);\n        listItem.measure(0, 0);\n        totalHeight += listItem.getMeasuredHeight();\n    }\n\n    ViewGroup.LayoutParams params = listView.getLayoutParams();\n    params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));\n    listView.setLayoutParams(params);\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\MaterialDialog.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "//\u521d\u6b21\u6253\u5f00\n", "func_signal": "public static void setisFirst(boolean is)", "code": "{\n    SharedPreferences.Editor editor = mSpSetting.edit();\n    editor.putBoolean(\"ISFIRST\",is).commit();\n}", "path": "app\\src\\main\\java\\com\\scanbook\\GlApplication.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Sets the thickness of the progress bar arc.\n * @param thickness the thickness of the progress bar arc\n */\n", "func_signal": "public void setThickness(int thickness)", "code": "{\n    this.thickness = thickness;\n    updateBounds();\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\CircularProgressView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "//\u5df2\u7ecf\u52a0\u8f7d\u7684\u6570\u91cf\n", "func_signal": "protected void onCreate(Bundle savedInstanceState)", "code": "{\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.activity_annotation);\n\n       bookid=getIntent().getStringExtra(\"id\");\n       bookname=getIntent().getStringExtra(\"name\");\n       this.getActionBar().setTitle(\"\u300a\"+bookname+\"\u300b\u7684\u7b14\u8bb0\");\n\n       mSrLayout = (SwipeRefreshLayout) findViewById(R.id.swipe_container);\n\n       mSrLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n           @Override\n           public void onRefresh() {\n               hasNum=0;\n               reqAnnotationList(0,20);\n           }\n       });\n       mSrLayout.setColorScheme(android.R.color.holo_blue_bright,\n               android.R.color.holo_green_light,\n               android.R.color.holo_orange_light,\n               android.R.color.holo_red_light);\n\n       mLvAnnotation=(ListView)findViewById(R.id.lv_annotation);\n       mLvAnnotation.setOnScrollListener(new AbsListView.OnScrollListener(){\n           @Override\n           public void onScroll(AbsListView absListView, int i, int i2, int i3) {\n\n           }\n           @Override\n           public void onScrollStateChanged(AbsListView absListView, int scrollState) {\n               switch (scrollState) {\n                   case AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n                       // \u5224\u65ad\u6eda\u52a8\u5230\u5e95\u90e8\n                       if (mLvAnnotation.getLastVisiblePosition() == (mLvAnnotation.getCount() - 1)) {\n                           mSrLayout.setRefreshing(true);\n                           reqAnnotationList(hasNum,20);\n                       }\n                       break;\n               }\n           }\n       });\n\n\n       new Handler().postDelayed(new Runnable() {\n           @Override public void run() {\n               hasNum=0;\n               mSrLayout.setRefreshing(true);\n               reqAnnotationList(0,20);\n           }\n       }, 200);\n       mAdapter=new AnnotationAdapter(AnnotationListActivity.this,mAnnotations);\n       mLvAnnotation.setAdapter(mAdapter);\n   }", "path": "app\\src\\main\\java\\com\\scanbook\\view\\activity\\AnnotationListActivity.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Set close animation for single button\n *\n * @param promotedAction\n * @param position\n * @return objectAnimator\n */\n", "func_signal": "private ObjectAnimator setCloseAnimation(ImageButton promotedAction, int position)", "code": "{\n\n    ObjectAnimator objectAnimator;\n\n    if(context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {\n\n        objectAnimator = ObjectAnimator.ofFloat(promotedAction, View.TRANSLATION_Y, -px * (promotedActions.size() - position), 0f);\n        objectAnimator.setRepeatCount(0);\n        objectAnimator.setDuration(ANIMATION_TIME * (promotedActions.size() - position));\n\n    } else {\n\n        objectAnimator = ObjectAnimator.ofFloat(promotedAction, View.TRANSLATION_X, -px * (promotedActions.size() - position), 0f);\n        objectAnimator.setRepeatCount(0);\n        objectAnimator.setDuration(ANIMATION_TIME * (promotedActions.size() - position));\n    }\n\n    return objectAnimator;\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\PromotedActionsLibrary.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "// This constructor is used when the class is built from an XML resource.\n", "func_signal": "public ViewfinderView(Context context, AttributeSet attrs)", "code": "{\n\tsuper(context, attrs);\n\n\t// Initialize these once for performance rather than calling them every\n\t// time in onDraw().\n\tpaint = new Paint();\n\tResources resources = getResources();\n\tmaskColor = resources.getColor(R.color.viewfinder_mask);\n\tresultColor = resources.getColor(R.color.result_view);\n\tframeColor = resources.getColor(R.color.viewfinder_frame);\n\tlaserColor = resources.getColor(R.color.viewfinder_laser);\n\tresultPointColor = resources.getColor(R.color.possible_result_points);\n\tscannerAlpha = 0;\n\tpossibleResultPoints = new HashSet<ResultPoint>(5);\n}", "path": "app\\src\\main\\java\\com\\zxing\\view\\ViewfinderView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Sets the progress of the progress bar.\n * @param currentProgress\n */\n", "func_signal": "public void setProgress(float currentProgress)", "code": "{\n    this.currentProgress = currentProgress;\n    // Reset the determinate animation to approach the new currentProgress\n    if(!isIndeterminate)\n    {\n        if(progressAnimator != null && progressAnimator.isRunning())\n            progressAnimator.cancel();\n        progressAnimator = ValueAnimator.ofFloat(actualProgress, currentProgress);\n        progressAnimator.setDuration(500);\n        progressAnimator.setInterpolator(new LinearInterpolator());\n        progressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                actualProgress = (Float) animation.getAnimatedValue();\n                invalidate();\n            }\n        });\n        progressAnimator.start();\n    }\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\CircularProgressView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "// Creates the animators for one step of the animation\n", "func_signal": "private AnimatorSet createIndeterminateAnimator(float step)", "code": "{\n    final float maxSweep = 360f*(animSteps-1)/animSteps + INDETERMINANT_MIN_SWEEP;\n    final float start = -90f + step*(maxSweep-INDETERMINANT_MIN_SWEEP);\n\n    // Extending the front of the arc\n    ValueAnimator frontEndExtend = ValueAnimator.ofFloat(INDETERMINANT_MIN_SWEEP, maxSweep);\n    frontEndExtend.setDuration(animDuration/animSteps/2);\n    frontEndExtend.setInterpolator(new DecelerateInterpolator(1));\n    frontEndExtend.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            indeterminateSweep = (Float) animation.getAnimatedValue();\n            invalidate();\n        }\n    });\n\n    // Overall rotation\n    ValueAnimator rotateAnimator1 = ValueAnimator.ofFloat(step*720f/animSteps, (step+.5f)*720f/animSteps);\n    rotateAnimator1.setDuration(animDuration/animSteps/2);\n    rotateAnimator1.setInterpolator(new LinearInterpolator());\n    rotateAnimator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n        indeterminateRotateOffset = (Float) animation.getAnimatedValue();\n        }\n    });\n\n    // Followed by...\n\n    // Retracting the back end of the arc\n    ValueAnimator backEndRetract = ValueAnimator.ofFloat(start, start+maxSweep-INDETERMINANT_MIN_SWEEP);\n    backEndRetract.setDuration(animDuration/animSteps/2);\n    backEndRetract.setInterpolator(new DecelerateInterpolator(1));\n    backEndRetract.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n        startAngle = (Float) animation.getAnimatedValue();\n        indeterminateSweep = maxSweep - startAngle + start;\n        invalidate();\n        }\n    });\n\n    // More overall rotation\n    ValueAnimator rotateAnimator2 = ValueAnimator.ofFloat((step+.5f)*720f/animSteps, (step+1)*720f/animSteps);\n    rotateAnimator2.setDuration(animDuration/animSteps/2);\n    rotateAnimator2.setInterpolator(new LinearInterpolator());\n    rotateAnimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n        indeterminateRotateOffset = (Float) animation.getAnimatedValue();\n        }\n    });\n\n    AnimatorSet set = new AnimatorSet();\n    set.play(frontEndExtend).with(rotateAnimator1);\n    set.play(backEndRetract).with(rotateAnimator2).after(rotateAnimator1);\n    return set;\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\CircularProgressView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/*\n * \u5173\u95ed\u952e\u76d8\n */\n", "func_signal": "public static void closeKeyBoard(Context context)", "code": "{\n\tInputMethodManager imm = (InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  \n\t//\u5f97\u5230InputMethodManager\u7684\u5b9e\u4f8b \n\tif (imm.isActive()) { \n\t\t//\u5982\u679c\u5f00\u542f \n            imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);\n\t} \n}", "path": "app\\src\\main\\java\\com\\scanbook\\common\\KeyboardUtils.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Set close animation for promoted actions\n */\n", "func_signal": "public AnimatorSet closePromotedActions()", "code": "{\n\n    if (objectAnimator == null){\n        objectAnimatorSetup();\n    }\n\n    AnimatorSet animation = new AnimatorSet();\n\n    for (int i = 0; i < promotedActions.size(); i++) {\n\n        objectAnimator[i] = setCloseAnimation(promotedActions.get(i), i);\n    }\n\n    if (objectAnimator.length == 0) {\n        objectAnimator = null;\n    }\n\n    animation.playTogether(objectAnimator);\n    animation.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animator) {\n            mainImageButton.startAnimation(rotateCloseAnimation);\n            mainImageButton.setClickable(false);\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animator) {\n            mainImageButton.setClickable(true);\n            hidePromotedActions();\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animator) {\n            mainImageButton.setClickable(true);\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animator) {}\n    });\n\n    return animation;\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\PromotedActionsLibrary.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Sets the progress value considered to be 100% of the progress bar.\n * @param maxProgress the maximum progress\n */\n", "func_signal": "public void setMaxProgress(float maxProgress)", "code": "{\n    this.maxProgress = maxProgress;\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\CircularProgressView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * set negative button\n *\n * @param text     the name of button\n * @param listener\n */\n", "func_signal": "public void setNegativeButton(String text, final View.OnClickListener listener)", "code": "{\n    Button button = new Button(mContext);\n    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\n    button.setLayoutParams(params);\n    button.setBackgroundResource(R.drawable.material_card);\n    button.setText(text);\n    button.setTextColor(Color.argb(222, 0, 0, 0));\n    button.setTextSize(14);\n    button.setGravity(Gravity.CENTER);\n    button.setPadding(0, 0, 0, dip2px(8));\n    button.setOnClickListener(listener);\n    if (mButtonLayout.getChildCount() > 0) {\n        params.setMargins(20, 0, 10, dip2px(BUTTON_BOTTOM));\n        button.setLayoutParams(params);\n        mButtonLayout.addView(button, 1);\n    } else {\n        button.setLayoutParams(params);\n        mButtonLayout.addView(button);\n    }\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\MaterialDialog.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Sets whether this CircularProgressView is indeterminate or not.\n * It will reset the animation if the mode has changed.\n * @param isIndeterminate\n */\n", "func_signal": "public void setIndeterminate(boolean isIndeterminate)", "code": "{\n    boolean reset = this.isIndeterminate == isIndeterminate;\n    this.isIndeterminate = isIndeterminate;\n    if(reset)\n        resetAnimation();\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\CircularProgressView.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "/**\n * Set open animation for single button\n *\n * @param promotedAction\n * @param position\n * @return objectAnimator\n */\n", "func_signal": "private ObjectAnimator setOpenAnimation(ImageButton promotedAction, int position)", "code": "{\n\n    ObjectAnimator objectAnimator;\n\n    if(context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {\n\n        objectAnimator = ObjectAnimator.ofFloat(promotedAction, View.TRANSLATION_Y, 0f, -px * (promotedActions.size() - position));\n        objectAnimator.setRepeatCount(0);\n        objectAnimator.setDuration(ANIMATION_TIME * (promotedActions.size() - position));\n\n    } else {\n        objectAnimator = ObjectAnimator.ofFloat(promotedAction, View.TRANSLATION_X, 0f, -px * (promotedActions.size() - position));\n        objectAnimator.setRepeatCount(0);\n        objectAnimator.setDuration(ANIMATION_TIME * (promotedActions.size() - position));\n    }\n\n    return objectAnimator;\n}", "path": "app\\src\\main\\java\\com\\scanbook\\view\\PromotedActionsLibrary.java", "repo_name": "JayFang1993/ScanBook", "stars": 289, "license": "None", "language": "java", "size": 18190}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureRemovesTargetFolderFromTestRunnerClasspath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitClasspath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, not(containsEntry(\"target/classes\")));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n    super.start(context);\n    plugin = this;\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\Activator.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * Called when the activity is first created.\n * @param savedInstanceState If the activity is being re-initialized after \n * previously being shut down then this Bundle contains the data it most \n * recently supplied in onSaveInstanceState(Bundle). <b>Note: Otherwise it is null.</b>\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\t\tLog.i(TAG, StringUtils.capitalize(\"onCreate\"));\n    setContentView(R.layout.main);\n}", "path": "me.gladwell.eclipse.m2e.android.test\\projects\\issue-114\\src\\main\\java\\your\\company\\HelloAndroidActivity.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO refactor: method is too long and deeply nested.\n", "func_signal": "public void orderBuilders()", "code": "{\n    try {\n        IProjectDescription description = project.getDescription();\n        List<ICommand> buildCommands = Arrays.asList(description.getBuildSpec());\n\n        Collections.sort(buildCommands, new Comparator<ICommand>() {\n            public int compare(ICommand command1, ICommand command2) {\n                String builder1 = command1.getBuilderName();\n                String builder2 = command2.getBuilderName();\n\n                if (IMavenConstants.BUILDER_ID.equals(builder1) && toolkit.builder().equals(builder2)) {\n                    return -1;\n                } else if (toolkit.builder().equals(builder1) && IMavenConstants.BUILDER_ID.equals(builder2)) {\n                    return 1;\n                } else if (IMavenConstants.BUILDER_ID.equals(builder1)) {\n                    return 1;\n                } else if (IMavenConstants.BUILDER_ID.equals(builder2)) {\n                    return -1;\n                }\n\n                return 0;\n            }\n        });\n\n        ICommand[] buildSpec = buildCommands.toArray(new ICommand[0]);\n        description.setBuildSpec(buildSpec);\n        project.setDescription(description, null);\n    } catch (CoreException e) {\n        throw new ProjectConfigurationException(e);\n    }\n}", "path": "me.gladwell.eclipse.m2e.android\\src\\main\\java\\me\\gladwell\\eclipse\\m2e\\android\\project\\EclipseAndroidProject.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * Called when the activity is first created.\n * @param savedInstanceState If the activity is being re-initialized after \n * previously being shut down then this Bundle contains the data it most \n * recently supplied in onSaveInstanceState(Bundle). <b>Note: Otherwise it is null.</b>\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\t\tLog.i(TAG, \"onCreate\");\n    setContentView(R.layout.main);\n}", "path": "me.gladwell.eclipse.m2e.android.test\\projects\\test-project-workspace-deps\\src\\main\\java\\de\\akquinet\\android\\archetypes\\HelloAndroidActivity.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureAddsBinaryFolderToTestRunnerClasspath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitClasspath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, containsEntry(\"bin/classes\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureAddsTransitivePlatformProvidedDependenciesToTestRunnerClasspath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitClasspath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, containsEntry(\"httpcore-4.0.1.jar\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n    plugin = null;\n    super.stop(context);\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\Activator.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// quarantined: https://github.com/rgladwell/m2e-android/issues/368\n", "func_signal": "public void ignoreConfigureAddsErrorForNonExistentLibraryProject() throws Exception", "code": "{\n    IProject project = importAndroidProject(TEST_PROJECT_WITH_APKLIB_DEPS);\n\n    assertErrorMarker(project, APKLIB_ERROR_TYPE);\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\LibraryAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO delegate workspace dep resolution to EclipseWorkspaceArtifactRepository\n", "func_signal": "public IDEAndroidProject findOpenWorkspaceDependency(Dependency dependency)", "code": "{\n    for (IProject project : workspace.getRoot().getProjects()) {\n        if (!project.isOpen()) {\n            continue;\n        }\n        IDEAndroidProject androidProject = projectFactory.createAndroidProject(project);\n        if (androidProject.isMavenised()) {\n            MavenProject mavenProject;\n            try {\n                mavenProject = mavenModelManager.readMavenProject(androidProject.getPom(), null);\n            } catch (CoreException e) {\n                throw new ProjectConfigurationException(e);\n            }\n\n            if (StringUtils.equals(dependency.getName(), project.getName())\n                    && StringUtils.equals(dependency.getGroup(), mavenProject.getGroupId())\n                    && dependency.getVersion().equals(mavenProject.getVersion())) {\n                return androidProject;\n            }\n        }\n    }\n\n    throw new DependencyNotFoundInWorkspace(dependency);\n}", "path": "me.gladwell.eclipse.m2e.android\\src\\main\\java\\me\\gladwell\\eclipse\\m2e\\android\\project\\EclipseAndroidWorkspace.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * Called when the activity is first created.\n * @param savedInstanceState If the activity is being re-initialized after \n * previously being shut down then this Bundle contains the data it most \n * recently supplied in onSaveInstanceState(Bundle). <b>Note: Otherwise it is null.</b>\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\t\tLog.i(TAG, StringUtils.capitalize(\"onCreate\"));\n    setContentView(R.layout.main);\n}", "path": "me.gladwell.eclipse.m2e.android.test\\projects\\ignore-gen-warnings\\src\\main\\java\\your\\company\\HelloAndroidActivity.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignorejConfigureAddsAndroidTestSourcepathProviderToTestRunner() throws Exception", "code": "{\n    // given\n    buildAndroidProject(project, IncrementalProjectBuilder.FULL_BUILD);\n    \n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    configuration.launch(ILaunchManager.RUN_MODE, new NullProgressMonitor());\n\n    // then\n    assertEquals(\"me.gladwell.m2e.android.sourcepathProvider\", configuration.getAttribute(ATTR_SOURCE_PATH_PROVIDER, \"\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO move this method to `EclipseAndroidWorkspace`.\n", "func_signal": "private void linkResource(IResource resource, File newFile)", "code": "{\n    try {\n        if (resource.isLinked()) {\n            resource.delete(0, null);\n        }\n\n        if (!resource.getLocation().toFile().equals(newFile) && newFile.exists()) {\n            IPath newPath = null;\n            \n            if (project.getLocation().isPrefixOf(new Path(newFile.getPath()))) {\n                newPath = new Path(\"PROJECT_LOC\").append(new Path(newFile.getPath()).makeRelativeTo(project.getLocation()));\n            } else {\n                newPath = new Path(newFile.getPath());\n            }\n            \n            IStatus status = workspace.validateLinkLocation(resource, newPath);\n            if (!status.matches(Status.ERROR)) {\n                createLink(resource, newPath);\n            } else {\n                throw new ProjectConfigurationException(\"invalid location for link=[\" + resource + \"]\");\n            }\n        }\n\n    } catch (CoreException e) {\n        throw new ProjectConfigurationException(\"cannot update link=[\" + resource + \"]\", e);\n    }\n}", "path": "me.gladwell.eclipse.m2e.android\\src\\main\\java\\me\\gladwell\\eclipse\\m2e\\android\\project\\EclipseAndroidProject.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureAddsPlatformProvidedDependenciesToTestRunnerClasspath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitClasspath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, containsEntry(\"commons-logging-1.1.1.jar\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureAddsRuntimeDependenciesToTestRunnerSourcepath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitSourcepath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, containsEntry(\"commons-lang-2.4.jar\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * Called when the activity is first created.\n * @param savedInstanceState If the activity is being re-initialized after \n * previously being shut down then this Bundle contains the data it most \n * recently supplied in onSaveInstanceState(Bundle). <b>Note: Otherwise it is null.</b>\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\t\tLog.i(TAG, \"onCreate\");\n    setContentView(R.layout.main);\n}", "path": "me.gladwell.eclipse.m2e.android.test\\projects\\issue-68\\android-internaldirassets\\src\\main\\java\\your\\company\\HelloAndroidActivity.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureAddsTransitiveNonRuntimeDependenciesToTestRunnerSourcepath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitSourcepath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, containsEntry(\"hamcrest-core-1.3.jar\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureAddsPlatformProvidedToTestRunnerClasspath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitClasspath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, containsEntry(\"android-4.3.1_r3.jar\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "// TODO Quarantined: move to unit test suite in me.gladwell.eclipse.m2e.android\n", "func_signal": "public void ignoreConfigureAddsNonRuntimeDependenciesToTestRunnerSourcepath() throws Exception", "code": "{\n    // given\n    ILaunchConfiguration configuration = launchManager.getLaunchConfiguration(project.getFile(\"test.launch\"));\n\n    // when\n    IRuntimeClasspathEntry[] resolvedClasspath = provideJUnitSourcepath(configuration);\n\n    // then\n    assertThat(resolvedClasspath, containsEntry(\"mockito-core-1.9.5.jar\"));\n}", "path": "me.gladwell.eclipse.m2e.android.test\\src\\me\\gladwell\\eclipse\\m2e\\android\\test\\ApplicationAndroidMavenPluginTest.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * Called when the activity is first created.\n * @param savedInstanceState If the activity is being re-initialized after \n * previously being shut down then this Bundle contains the data it most \n * recently supplied in onSaveInstanceState(Bundle). <b>Note: Otherwise it is null.</b>\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\t\tLog.i(TAG, \"onCreate\");\n    setContentView(R.layout.main);\n}", "path": "me.gladwell.eclipse.m2e.android.test\\projects\\test-project-apklib-deps-diff-artifact-id\\src\\main\\java\\de\\akquinet\\android\\archetypes\\HelloAndroidActivity.java", "repo_name": "rgladwell/m2e-android", "stars": 337, "license": "epl-1.0", "language": "java", "size": 15469}
{"docstring": "/**\n * Returns 1 if the number is positive, -1 if the number is negative, and 0 otherwise\n * @param iValue The integer to examine.\n * @return The integer's sign.\n */\n", "func_signal": "public static int sign(int iValue)", "code": "{\n    if (iValue > 0) {\n        return 1;\n    }\n    if (iValue < 0) {\n        return -1;\n    }\n    return 0;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Returns the arc cosine of a value.<br>\n * Special cases:\n * <ul><li>If fValue is smaller than -1, then the result is PI.\n * <li>If the argument is greater than 1, then the result is 0.</ul>\n * @param fValue The value to arc cosine.\n * @return The angle, in radians.\n * @see java.lang.Math#acos(double)\n */\n", "func_signal": "public static float acos(float fValue)", "code": "{\n    if (-1.0f < fValue) {\n        if (fValue < 1.0f) {\n            return (float) Math.acos(fValue);\n        }\n\n        return 0.0f;\n    }\n\n    return PI;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Returns the arc sine of a value.<br>\n * Special cases:\n * <ul><li>If fValue is smaller than -1, then the result is -HALF_PI.\n * <li>If the argument is greater than 1, then the result is HALF_PI.</ul>\n * @param fValue The value to arc sine.\n * @return the angle in radians.\n * @see java.lang.Math#asin(double)\n */\n", "func_signal": "public static float asin(float fValue)", "code": "{\n    if (-1.0f < fValue) {\n        if (fValue < 1.0f) {\n            return (float) Math.asin(fValue);\n        }\n\n        return HALF_PI;\n    }\n\n    return -HALF_PI;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Given 3 points in a 2d plane, this function computes if the points going from A-B-C\n * are moving counter clock wise.\n * @param p0 Point 0.\n * @param p1 Point 1.\n * @param p2 Point 2.\n * @return 1 If they are CCW, -1 if they are not CCW, 0 if p2 is between p0 and p1.\n */\n", "func_signal": "public static int counterClockwise(Vector2f p0, Vector2f p1, Vector2f p2)", "code": "{\n    float dx1, dx2, dy1, dy2;\n    dx1 = p1.x - p0.x;\n    dy1 = p1.y - p0.y;\n    dx2 = p2.x - p0.x;\n    dy2 = p2.y - p0.y;\n    if (dx1 * dy2 > dy1 * dx2) {\n        return 1;\n    }\n    if (dx1 * dy2 < dy1 * dx2) {\n        return -1;\n    }\n    if ((dx1 * dx2 < 0) || (dy1 * dy2 < 0)) {\n        return -1;\n    }\n    if ((dx1 * dx1 + dy1 * dy1) < (dx2 * dx2 + dy2 * dy2)) {\n        return 1;\n    }\n    return 0;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Converts a single precision (32 bit) floating point value\n * into half precision (16 bit).\n *\n * <p>Source: <a href=\"http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\">\n * http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf</a><br><strong>broken link</strong>\n *\n * @param half The half floating point value as a short.\n * @return floating point value of the half.\n */\n", "func_signal": "public static float convertHalfToFloat(short half)", "code": "{\n    switch ((int) half) {\n        case 0x0000:\n            return 0f;\n        case 0x8000:\n            return -0f;\n        case 0x7c00:\n            return Float.POSITIVE_INFINITY;\n        case 0xfc00:\n            return Float.NEGATIVE_INFINITY;\n        // TODO: Support for NaN?\n        default:\n            return Float.intBitsToFloat(((half & 0x8000) << 16)\n                    | (((half & 0x7c00) + 0x1C000) << 13)\n                    | ((half & 0x03FF) << 13));\n    }\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**Interpolate a spline between at least 4 control points following the Bezier equation.\n * here is the interpolation matrix\n * m = [ -1.0   3.0  -3.0    1.0 ]\n *     [  3.0  -6.0   3.0    0.0 ]\n *     [ -3.0   3.0   0.0    0.0 ]\n *     [  1.0   0.0   0.0    0.0 ]\n * where T is the curve tension\n * the result is a value between p1 and p3, t=0 for p1, t=1 for p3\n * @param u value from 0 to 1\n * @param p0 control point 0\n * @param p1 control point 1\n * @param p2 control point 2\n * @param p3 control point 3\n * @return Bezier interpolation\n */\n", "func_signal": "public static float interpolateBezier(float u, float p0, float p1, float p2, float p3)", "code": "{\n    float oneMinusU = 1.0f - u;\n    float oneMinusU2 = oneMinusU * oneMinusU;\n    float u2 = u * u;\n    return p0 * oneMinusU2 * oneMinusU\n            + 3.0f * p1 * u * oneMinusU2\n            + 3.0f * p2 * u2 * oneMinusU\n            + p3 * u2 * u;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * A method that computes normal for a triangle defined by three vertices.\n * @param v1 first vertex\n * @param v2 second vertex\n * @param v3 third vertex\n * @return a normal for the face\n */\n", "func_signal": "public static Vector3f computeNormal(Vector3f v1, Vector3f v2, Vector3f v3)", "code": "{\n    Vector3f a1 = v1.subtract(v2);\n    Vector3f a2 = v3.subtract(v2);\n    return a2.crossLocal(a1).normalizeLocal();\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * <code>crossLocal</code> calculates the cross product of this vector\n * with a parameter vector v.\n *\n * @param otherX\n *            x component of the vector to take the cross product of with this.\n * @param otherY\n *            y component of the vector to take the cross product of with this.\n * @param otherZ\n *            z component of the vector to take the cross product of with this.\n * @return this.\n */\n", "func_signal": "public Vector3f crossLocal(float otherX, float otherY, float otherZ)", "code": "{\n    float tempx = ( y * otherZ ) - ( z * otherY );\n    float tempy = ( z * otherX ) - ( x * otherZ );\n    z = (int)((x * otherY) - (y * otherX));\n    x = (int)tempx;\n    y = (int)tempy;\n    return this;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\Vector3f.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Takes an value and expresses it in terms of min to max.\n * \n * @param val -\n *            the angle to normalize (in radians)\n * @return the normalized angle (also in radians)\n */\n", "func_signal": "public static float normalize(float val, float min, float max)", "code": "{\n    if (Float.isInfinite(val) || Float.isNaN(val)) {\n        return 0f;\n    }\n    float range = max - min;\n    while (val > max) {\n        val -= range;\n    }\n    while (val < min) {\n        val += range;\n    }\n    return val;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * trace method, if you want know who call this method.\n */\n", "func_signal": "public static void trace(String traceName)", "code": "{\n    if(!ENABLE_TRACE) {return;}\n    Exception ex = new Exception();\n    StackTraceElement[] traceArr = ex.getStackTrace();\n    _error(\"########## trace begin  ########## \" + traceName);\n    for (StackTraceElement ste : traceArr) {\n        _error(ste.toString());\n    }\n    _error(\"########## trace finish ##########\");\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\LOG.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * @param x\n *            the value whose sign is to be adjusted.\n * @param y\n *            the value whose sign is to be used.\n * @return x with its sign changed to match the sign of y.\n */\n", "func_signal": "public static float copysign(float x, float y)", "code": "{\n    if (y >= 0 && x <= -0) {\n        return -x;\n    } else if (y < 0 && x >= 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "//force stop drag !\n", "func_signal": "public void stopDrag()", "code": "{\n    if (mDragging) {\n        mDragging = false;\n        mDragDeleting = false;\n        mDragDroping = false;\n        mDragView.backToPostion();\n        mDragView.removeView();\n        mTrash.dismissDialog();\n        SidebarController.getInstance(mContext).updateDragWindow(false);\n    }\n}", "path": "src\\com\\smartisanos\\sidebar\\view\\SidebarRootView.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "//format : name_1|name_2| .. |name_n\n", "func_signal": "public String getComponentNames()", "code": "{\n    if (size() <= 0) {\n        return null;\n    }\n    List<String> ls = new ArrayList<String>();\n    for(ComponentName name : mNames){\n        ls.add(name.getClassName());\n    }\n    Collections.sort(ls);\n    StringBuilder sb = new StringBuilder();\n    sb.append(ls.get(0));\n    for(int i = 1; i < ls.size(); ++ i){\n        sb.append(\"|\" + ls.get(i));\n    }\n    return sb.toString();\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\ResolveInfoGroup.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Test if a point is inside a triangle.  1 if the point is on the ccw side,\n * -1 if the point is on the cw side, and 0 if it is on neither.\n * @param t0 First point of the triangle.\n * @param t1 Second point of the triangle.\n * @param t2 Third point of the triangle.\n * @param p The point to test.\n * @return Value 1 or -1 if inside triangle, 0 otherwise.\n */\n", "func_signal": "public static int pointInsideTriangle(Vector2f t0, Vector2f t1, Vector2f t2, Vector2f p)", "code": "{\n    int val1 = counterClockwise(t0, t1, p);\n    if (val1 == 0) {\n        return 1;\n    }\n    int val2 = counterClockwise(t1, t2, p);\n    if (val2 == 0) {\n        return 1;\n    }\n    if (val2 != val1) {\n        return 0;\n    }\n    int val3 = counterClockwise(t2, t0, p);\n    if (val3 == 0) {\n        return 1;\n    }\n    if (val3 != val1) {\n        return 0;\n    }\n    return val3;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Linear interpolation from startValue to endValue by the given percent.\n * Basically: ((1 - percent) * startValue) + (percent * endValue)\n * \n * @param scale\n *            scale value to use. if 1, use endValue, if 0, use startValue.\n * @param startValue\n *            Begining value. 0% of f\n * @param endValue\n *            ending value. 100% of f\n * @return The interpolated value between startValue and endValue.\n */\n", "func_signal": "public static float interpolateLinear(float scale, float startValue, float endValue)", "code": "{\n    if (startValue == endValue) {\n        return startValue;\n    }\n    if (scale <= 0f) {\n        return startValue;\n    }\n    if (scale >= 1f) {\n        return endValue;\n    }\n    return ((1f - scale) * startValue) + (scale * endValue);\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * <code>normalizeLocal</code> makes this vector into a unit vector of\n * itself.\n *\n * @return this.\n */\n", "func_signal": "public Vector3f normalizeLocal()", "code": "{\n    // NOTE: this implementation is more optimized\n    // than the old jme normalize as this method\n    // is commonly used.\n    float length = x * x + y * y + z * z;\n    if (length != 1f && length != 0f){\n        length = 1.0f / FastMath.sqrt(length);\n        x *= length;\n        y *= length;\n        z *= length;\n    }\n    return this;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\Vector3f.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Returns Absolute value of a float.\n * @param fValue The value to abs.\n * @return The abs of the value.\n * @see java.lang.Math#abs(float)\n */\n", "func_signal": "public static float abs(float fValue)", "code": "{\n    if (fValue < 0) {\n        return -fValue;\n    }\n    return fValue;\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "//handle install shortcuts\n", "func_signal": "public static void handleInstallShortcut(Context context, Intent data)", "code": "{\n    Intent launchIntent = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);\n    if (launchIntent == null) {\n        log.error(\"INSTALL_SHORTCUT failed, lose EXTRA_SHORTCUT_INTENT !\");\n        return;\n    }\n    String pkg = launchIntent.getPackage();\n    if (pkg == null || !isSupported(pkg)) {\n        log.error(\"don't support pkg [\"+pkg+\"]\");\n        return;\n    }\n    if (launchIntent.getAction() == null) {\n        launchIntent.setAction(Intent.ACTION_VIEW);\n    } else if (Intent.ACTION_MAIN.equals(launchIntent.getAction()) &&\n            launchIntent.getCategories() != null &&\n            launchIntent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {\n        launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n    }\n    Parcelable bitmap = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON);\n    int avatarSize = context.getResources().getDimensionPixelSize(R.dimen.contact_avatar_size);\n    Bitmap icon = null;\n    if (bitmap != null && bitmap instanceof Bitmap) {\n        icon = (Bitmap) bitmap;\n    } else {\n        Parcelable extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);\n        if (extra != null && extra instanceof Intent.ShortcutIconResource) {\n            try {\n                Intent.ShortcutIconResource iconResource = (Intent.ShortcutIconResource) extra;\n                Resources resources = context.getPackageManager().getResourcesForApplication(iconResource.packageName);\n                final int id = resources.getIdentifier(iconResource.resourceName, null, null);\n                Drawable drawable = getShortcutResIcon(resources, id);\n                if (drawable != null) {\n                    icon = BitmapUtils.drawableToBitmap(drawable, avatarSize, avatarSize);\n                }\n            } catch (Exception e) {\n                log.error(\"Could not load shortcut icon: \" + extra);\n            }\n        }\n    }\n\n    if (icon == null) {\n        icon = BitmapUtils.drawableToBitmap(getDefaultShortcutIcon(), avatarSize, avatarSize);;\n        if (icon == null) {\n            // this should never happen !\n            return;\n        }\n    }\n\n    icon = BitmapUtils.getContactAvatar(context, icon);\n    String name = data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);\n    name = ensureValidName(context, launchIntent, name).toString();\n    String intentUri = launchIntent.toUri(0);\n    log.error(\"handleInstallShortcut [\"+name+\"]\");\n    log.error(\"lunch intent [\"+intentUri+\"]\");\n    WechatContact contact = new WechatContact(context, name, intentUri, icon);\n    contact.setUserId(Utils.getUidFromIntent(data));\n    ContactManager.getInstance(context).addContact(contact);\n}", "path": "src\\com\\smartisanos\\sidebar\\receiver\\ShortcutReceiver.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**\n * Returns the determinant of a 4x4 matrix.\n */\n", "func_signal": "public static float determinant(double m00, double m01, double m02,\n        double m03, double m10, double m11, double m12, double m13,\n        double m20, double m21, double m22, double m23, double m30,\n        double m31, double m32, double m33)", "code": "{\n\n    double det01 = m20 * m31 - m21 * m30;\n    double det02 = m20 * m32 - m22 * m30;\n    double det03 = m20 * m33 - m23 * m30;\n    double det12 = m21 * m32 - m22 * m31;\n    double det13 = m21 * m33 - m23 * m31;\n    double det23 = m22 * m33 - m23 * m32;\n    return (float) (m00 * (m11 * det23 - m12 * det13 + m13 * det12) - m01\n            * (m10 * det23 - m12 * det03 + m13 * det02) + m02\n            * (m10 * det13 - m11 * det03 + m13 * det01) - m03\n            * (m10 * det12 - m11 * det02 + m12 * det01));\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/**Interpolate a spline between at least 4 control points following the Catmull-Rom equation.\n * here is the interpolation matrix\n * m = [ 0.0  1.0  0.0   0.0 ]\n *     [-T    0.0  T     0.0 ]\n *     [ 2T   T-3  3-2T  -T  ]\n *     [-T    2-T  T-2   T   ]\n * where T is the curve tension\n * the result is a value between p1 and p2, t=0 for p1, t=1 for p2\n * @param u value from 0 to 1\n * @param T The tension of the curve\n * @param p0 control point 0\n * @param p1 control point 1\n * @param p2 control point 2\n * @param p3 control point 3\n * @return catmull-Rom interpolation\n */\n", "func_signal": "public static float interpolateCatmullRom(float u, float T, float p0, float p1, float p2, float p3)", "code": "{\n    float c1, c2, c3, c4;\n    c1 = p1;\n    c2 = -1.0f * T * p0 + T * p2;\n    c3 = 2 * T * p0 + (T - 3) * p1 + (3 - 2 * T) * p2 + -T * p3;\n    c4 = -T * p0 + (2 - T) * p1 + (T - 2) * p2 + T * p3;\n\n    return (float) (((c4 * u + c3) * u + c2) * u + c1);\n}", "path": "src\\com\\smartisanos\\sidebar\\util\\anim\\FastMath.java", "repo_name": "SmartisanTech/packages_apps_OneStep", "stars": 444, "license": "other", "language": "java", "size": 2829}
{"docstring": "/** \n * Selects all the text.\n *\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n */\n", "func_signal": "public void selectAll()", "code": "{\n\tcheckWidget();\n\tif (blockSelection) {\n\t\trenderer.calculate(0, content.getLineCount());\n\t\tsetScrollBars(false);\n\t\tint verticalScrollOffset = getVerticalScrollOffset();\n\t\tint left = leftMargin - horizontalScrollOffset;\n\t\tint top = topMargin - verticalScrollOffset;\n\t\tint right = renderer.getWidth() - rightMargin - horizontalScrollOffset;\n\t\tint bottom = renderer.getHeight() - bottomMargin - verticalScrollOffset;\n\t\tsetBlockSelectionLocation(left, top, right, bottom, false);\n\t\treturn;\n\t}\n\tsetSelection(0, Math.max(getCharCount(),0));\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/** \n * Returns the left margin.\n *\n * @return the left margin.\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * \n * @since 3.5\n */\n", "func_signal": "public int getLeftMargin()", "code": "{\n\tcheckWidget();\n\treturn leftMargin - alignmentMargin;\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Gets the top index.\n * <p>\n * The top index is the index of the fully visible line that is currently \n * at the top of the widget or the topmost partially visible line if no line is fully visible. \n * The top index changes when the widget is scrolled. Indexing is zero based.\n * </p>\n *\n * @return the index of the top line\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n */\n", "func_signal": "public int getTopIndex()", "code": "{\n\tcheckWidget();\n\treturn topIndex;\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Sets the receiver's selection foreground color to the color specified\n * by the argument, or to the default system color for the control\n * if the argument is null. \n * <p>\n * Note that this is a <em>HINT</em>. Some platforms do not allow the application\n * to change the selection foreground color.\n * </p>\n * @param color the new color (or null)\n *\n * @exception IllegalArgumentException <ul>\n *    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li> \n * </ul>\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @since 2.1\n */\n", "func_signal": "public void setSelectionForeground (Color color)", "code": "{\n\tcheckWidget ();\n\tif (color != null) {\n\t\tif (color.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n\t}\n\tselectionForeground = color;\n\tresetCache(0, content.getLineCount());\n\tsetCaretLocation();\n\tsuper.redraw();\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Returns the baseline at the given offset, in pixels. \n *\n * @param offset the offset\n * \n * @return baseline the baseline\n * \n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @exception IllegalArgumentException <ul>\n *   <li>ERROR_INVALID_RANGE when the offset is outside the valid range (< 0 or > getCharCount())</li> \n * </ul>\n *  \n * @since 3.2\n */\n", "func_signal": "public int getBaseline(int offset)", "code": "{\n\tcheckWidget();\n\tif (!(0 <= offset && offset <= content.getCharCount())) {\n\t\tSWT.error(SWT.ERROR_INVALID_RANGE);\n\t}\n\tif (isFixedLineHeight()) {\n\t\treturn renderer.getBaseline();\n\t}\n\tint lineIndex = content.getLineAtOffset(offset);\n\tint lineOffset = content.getOffsetAtLine(lineIndex);\n\tTextLayout layout = renderer.getTextLayout(lineIndex);\n\tint lineInParagraph = layout.getLineIndex(Math.min(offset - lineOffset, layout.getText().length()));\n\tFontMetrics metrics = layout.getLineMetrics(lineInParagraph);\n\trenderer.disposeTextLayout(layout);\n\treturn metrics.getAscent() + metrics.getLeading();\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Returns the maximum number of characters that the receiver is capable of holding.\n * \n * @return the text limit\n *\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n */\n", "func_signal": "public int getTextLimit()", "code": "{\n\tcheckWidget();\n\treturn textLimit;\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/** \n * Prints the widget's text to the default printer.\n *\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n */\n", "func_signal": "public void print()", "code": "{\n\tcheckWidget();\n\tPrinter printer = new Printer();\n\tStyledTextPrintOptions options = new StyledTextPrintOptions();\n\toptions.printTextForeground = true;\n\toptions.printTextBackground = true;\n\toptions.printTextFontStyle = true;\n\toptions.printLineBackground = true;\t\n\tnew Printing(this, printer, options).run();\n\tprinter.dispose();\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Sets the tab stops of the specified lines.\n * <p>\n * Should not be called if a <code>LineStyleListener</code> has been set since the listener \n * maintains the line attributes.\n * </p><p>\n * All line attributes are maintained relative to the line text, not the \n * line index that is specified in this method call.\n * During text changes, when entire lines are inserted or removed, the line \n * attributes that are associated with the lines after the change \n * will \"move\" with their respective text. An entire line is defined as \n * extending from the first character on a line to the last and including the \n * line delimiter. \n * </p><p>\n * When two lines are joined by deleting a line delimiter, the top line \n * attributes take precedence and the attributes of the bottom line are deleted. \n * For all other text changes line attributes will remain unchanged.\n * </p>\n *  \n * @param startLine first line the justify is applied to, 0 based\n * @param lineCount number of lines the justify applies to.\n * @param tabStops tab stops\n * \n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @exception IllegalArgumentException <ul>\n *   <li>ERROR_INVALID_ARGUMENT when the specified line range is invalid</li>\n * </ul>\n * @see #setTabStops(int[])\n * @since 3.6\n */\n", "func_signal": "public void setLineTabStops(int startLine, int lineCount, int[] tabStops)", "code": "{\n\tcheckWidget();\n\tif (isListening(ST.LineGetStyle)) return;\n\tif (startLine < 0 || startLine + lineCount > content.getLineCount()) {\n\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);\n\t}\n\tif (tabStops != null) {\n\t\tint pos = 0;\n\t\tint[] newTabs = new int[tabStops.length];\n\t\tfor (int i = 0; i < tabStops.length; i++) {\n\t\t\tif (tabStops[i] < pos) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n\t\t\tnewTabs[i] = pos = tabStops[i];\n\t\t}\n\t\trenderer.setLineTabStops(startLine, lineCount, newTabs);\n\t} else {\n\t\trenderer.setLineTabStops(startLine, lineCount, null);\n\t}\n\tresetCache(startLine, lineCount);\n\tredrawLines(startLine, lineCount, false);\n\tint caretLine = getCaretLine();\n\tif (startLine <= caretLine && caretLine < startLine + lineCount) {\n\t\tsetCaretLocation();\n\t}\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/** \n * Sets the horizontal pixel offset relative to the start of the line.\n * Do nothing if there is no text set.\n * <p>\n * <b>NOTE:</b> The horizontal pixel offset is reset to 0 when new text \n * is set in the widget.\n * </p>\n *\n * @param pixel horizontal pixel offset relative to the start \n * \tof the line.\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @since 2.0\n */\n", "func_signal": "public void setHorizontalPixel(int pixel)", "code": "{\n\tcheckWidget();\n\tif (getCharCount() == 0) {\n\t\treturn;\n\t}\t\n\tif (pixel < 0) {\n\t\tpixel = 0;\n\t}\n\t// allow any value if client area width is unknown or 0. \n\t// offset will be checked in resize handler.\n\t// don't use isVisible since width is known even if widget \n\t// is temporarily invisible\n\tif (clientAreaWidth > 0) {\n\t\tint width = renderer.getWidth();\n\t\t// prevent scrolling if the content fits in the client area.\n\t\t// align end of longest line with right border of client area\n\t\t// if offset is out of range.\n\t\tif (pixel > width - clientAreaWidth) {\n\t\t\tpixel = Math.max(0, width - clientAreaWidth);\n\t\t}\n\t}\n\tscrollHorizontal(pixel - horizontalScrollOffset, true);\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/** \n * Maps a key to an action.\n * <p>\n * One action can be associated with N keys. However, each key can only \n * have one action (key:action is N:1 relation).\n * </p>\n *\n * @param key a key code defined in SWT.java or a character. \n * \tOptionally ORd with a state mask.  Preferred state masks are one or more of\n *  SWT.MOD1, SWT.MOD2, SWT.MOD3, since these masks account for modifier platform \n *  differences.  However, there may be cases where using the specific state masks\n *  (i.e., SWT.CTRL, SWT.SHIFT, SWT.ALT, SWT.COMMAND) makes sense.\n * @param action one of the predefined actions defined in ST.java. \n * \tUse SWT.NULL to remove a key binding.\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n */\n", "func_signal": "public void setKeyBinding(int key, int action)", "code": "{\n\tcheckWidget();\n\tint modifierValue = key & SWT.MODIFIER_MASK;\n\tchar keyChar = (char)(key & SWT.KEY_MASK);\n\tif (Compatibility.isLetter(keyChar)) {\n\t\t// make the keybinding case insensitive by adding it\n\t\t// in its upper and lower case form\n\t\tchar ch = Character.toUpperCase(keyChar);\n\t\tint newKey = ch | modifierValue;\n\t\tif (action == SWT.NULL) {\n\t\t\tkeyActionMap.remove(new Integer(newKey));\n\t\t} else {\n\t\t \tkeyActionMap.put(new Integer(newKey), new Integer(action));\n\t\t}\n\t\tch = Character.toLowerCase(keyChar);\n\t\tnewKey = ch | modifierValue;\n\t\tif (action == SWT.NULL) {\n\t\t\tkeyActionMap.remove(new Integer(newKey));\n\t\t} else {\n\t\t \tkeyActionMap.put(new Integer(newKey), new Integer(action));\n\t\t}\n\t} else {\n\t\tif (action == SWT.NULL) {\n\t\t\tkeyActionMap.remove(new Integer(key));\n\t\t} else {\n\t\t \tkeyActionMap.put(new Integer(key), new Integer(action));\n\t\t}\n\t}\t\t\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Adds a bidirectional segment listener.\n * <p>\n * A BidiSegmentEvent is sent \n * whenever a line of text is measured or rendered. You can \n * specify text ranges in the line that should be treated as if they \n * had a different direction than the surrounding text.\n * This may be used when adjacent segments of right-to-left text should\n * not be reordered relative to each other. \n * E.g., multiple Java string literals in a right-to-left language\n * should generally remain in logical order to each other, that is, the\n * way they are stored. \n * </p>\n *\n * @param listener the listener\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @exception IllegalArgumentException <ul>\n *    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n * </ul>\n * @see BidiSegmentEvent\n * @since 2.0\n */\n", "func_signal": "public void addBidiSegmentListener(BidiSegmentListener listener)", "code": "{\n\tcheckWidget();\n\tif (listener == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);\n\taddListener(ST.LineGetSegments, new StyledTextListener(listener));\n\tresetCache(0, content.getLineCount());\n\tsetCaretLocation();\n\tsuper.redraw();\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/** \n * Returns the color of the margins.\n * \n * @return the color of the margins.\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * \n * @since 3.5\n */\n", "func_signal": "public Color getMarginColor()", "code": "{\n\tcheckWidget();\n\treturn marginColor != null ? marginColor : getBackground();\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Constructs a new instance of this class given its parent\n * and a style value describing its behavior and appearance.\n * <p>\n * The style value is either one of the style constants defined in\n * class <code>SWT</code> which is applicable to instances of this\n * class, or must be built by <em>bitwise OR</em>'ing together \n * (that is, using the <code>int</code> \"|\" operator) two or more\n * of those <code>SWT</code> style constants. The class description\n * lists the style constants that are applicable to the class.\n * Style bits are also inherited from superclasses.\n * </p>\n *\n * @param parent a widget which will be the parent of the new instance (cannot be null)\n * @param style the style of widget to construct\n *\n * @exception IllegalArgumentException <ul>\n *    <li>ERROR_NULL_ARGUMENT - if the parent is null</li>\n * </ul>\n * @exception SWTException <ul>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent</li>\n * </ul>\n *\n * @see SWT#FULL_SELECTION\n * @see SWT#MULTI\n * @see SWT#READ_ONLY\n * @see SWT#SINGLE\n * @see SWT#WRAP\n * @see #getStyle\n */\n", "func_signal": "public StyledText(Composite parent, int style)", "code": "{\n\tsuper(parent, checkStyle(style));\n\t// set the fg in the OS to ensure that these are the same as StyledText, necessary\n\t// for ensuring that the bg/fg the IME box uses is the same as what StyledText uses\n\tsuper.setForeground(getForeground());\n\tsuper.setDragDetect(false);\n\tDisplay display = getDisplay();\n\tfixedLineHeight = true;\n\tif ((style & SWT.READ_ONLY) != 0) {\n\t\tsetEditable(false);\n\t}\n\tleftMargin = rightMargin = isBidiCaret() ? BIDI_CARET_WIDTH - 1: 0;\n\tif ((style & SWT.SINGLE) != 0 && (style & SWT.BORDER) != 0) {\n\t\tleftMargin = topMargin = rightMargin = bottomMargin = 2;\n\t}\n\talignment = style & (SWT.LEFT | SWT.RIGHT | SWT.CENTER);\n\tif (alignment == 0) alignment = SWT.LEFT;\n\tclipboard = new Clipboard(display);\n\tinstallDefaultContent();\n\trenderer = new StyledTextRenderer(getDisplay(), this);\n\trenderer.setContent(content);\n\trenderer.setFont(getFont(), tabLength);\n\time = new IME(this, SWT.NONE);\n\tdefaultCaret = new Caret(this, SWT.NONE);\n\tif ((style & SWT.WRAP) != 0) {\n\t\tsetWordWrap(true);\n\t}\n\tif (isBidiCaret()) {\n\t\tcreateCaretBitmaps();\n\t\tRunnable runnable = new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tint direction = BidiUtil.getKeyboardLanguage() == BidiUtil.KEYBOARD_BIDI ? SWT.RIGHT : SWT.LEFT;\n\t\t\t\tif (direction == caretDirection) return;\n\t\t\t\tif (getCaret() != defaultCaret) return;\n\t\t\t\tPoint newCaretPos = getPointAtOffset(caretOffset);\n\t\t\t\tsetCaretLocation(newCaretPos, direction);\n\t\t\t}\n\t\t};\n\t\tBidiUtil.addLanguageListener(this, runnable);\n\t}\n\tsetCaret(defaultCaret);\t\n\tcalculateScrollBars();\n\tcreateKeyBindings();\n\tsuper.setCursor(display.getSystemCursor(SWT.CURSOR_IBEAM));\n\tinstallListeners();\n\tinitializeAccessible();\n\tsetData(\"DEFAULT_DROP_TARGET_EFFECT\", new StyledTextDropTargetEffect(this));\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Sets the receiver's tab list. Each value in the tab list specifies\n * the space in pixels from the origin of the document to the respective\n * tab stop.  The last tab stop width is repeated continuously.\n * \n * @param tabs the new tab list (or null)\n * \n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @exception IllegalArgumentException <ul>\n *    <li>ERROR_INVALID_ARGUMENT - if a tab stop is negavite or less than the previous stop in the list</li>\n * </ul>\n * \n * @see StyledText#getTabStops()\n * \n * @since 3.6\n */\n", "func_signal": "public void setTabStops(int [] tabs)", "code": "{\n\tcheckWidget();\n\tif (tabs != null) {\n\t\tint pos = 0;\n\t\tint[] newTabs = new int[tabs.length];\n\t\tfor (int i = 0; i < tabs.length; i++) {\n\t\t\tif (tabs[i] < pos) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n\t\t\tnewTabs[i] = pos = tabs[i];\n\t\t}\n\t\tthis.tabs = newTabs;\n\t} else {\n\t\tthis.tabs = null;\n\t}\n\tresetCache(0, content.getLineCount());\n\tsetCaretLocation();\n\tsuper.redraw();\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Sets the receiver's cursor to the cursor specified by the\n * argument.  Overridden to handle the null case since the \n * StyledText widget uses an ibeam as its default cursor.\n *\n * @see Control#setCursor(Cursor)\n */\n", "func_signal": "public void setCursor (Cursor cursor)", "code": "{\n\tcheckWidget();\n\tif (cursor != null && cursor.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n\tthis.cursor = cursor;\n\tif (cursor == null) {\n\t\tDisplay display = getDisplay();\n\t\tint type = blockSelection ? SWT.CURSOR_CROSS : SWT.CURSOR_IBEAM; \n\t\tsuper.setCursor(display.getSystemCursor(type));\n\t} else {\n\t\tsuper.setCursor(cursor);\n\t}\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Adds a line background listener. A LineGetBackground event is sent by the \n * widget to determine the background color for a line.\n *\n * @param listener the listener\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @exception IllegalArgumentException <ul>\n *    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n * </ul>\n */\n", "func_signal": "public void addLineBackgroundListener(LineBackgroundListener listener)", "code": "{\n\tcheckWidget();\n\tif (listener == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);\n\tif (!isListening(ST.LineGetBackground)) {\n\t\trenderer.clearLineBackground(0, content.getLineCount());\n\t}\n\taddListener(ST.LineGetBackground, new StyledTextListener(listener));\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Set the Always Show Scrollbars flag.  True if the scrollbars are \n * always shown even if they are not required.  False if the scrollbars are only \n * visible when some part of the content needs to be scrolled to be seen.\n * The H_SCROLL and V_SCROLL style bits are also required to enable scrollbars in the \n * horizontal and vertical directions.\n * \n * @param show true to show the scrollbars even when not required, false to show scrollbars only when required\n * \n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * \n * @since 3.8\n */\n", "func_signal": "public void setAlwaysShowScrollBars(boolean show)", "code": "{\n\tcheckWidget();\n\tif (show == alwaysShowScroll) return;\n\talwaysShowScroll = show;\n\tsetScrollBars(true);\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/** \n * Returns whether the widget implements double click mouse behavior.\n *\n * @return true if double clicking a word selects the word, false if double clicks\n * have the same effect as regular mouse clicks\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n */\n", "func_signal": "public boolean getDoubleClickEnabled()", "code": "{\n\tcheckWidget();\n\treturn doubleClickEnabled;\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Closes the RTF writer. Once closed no more content can be written.\n * <b>NOTE:</b>  <code>toString()</code> does not return a valid RTF string until \n * <code>close()</code> has been called.\n */\n", "func_signal": "public void close()", "code": "{\n\tif (!isClosed()) {\n\t\twriteHeader();\n\t\twrite(\"\\n}}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "/**\n * Returns the offset of the character at the given location relative \n * to the first character in the document.\n * <p>\n * The return value reflects the character offset that the caret will\n * be placed at if a mouse click occurred at the specified location.\n * If the x coordinate of the location is beyond the center of a character\n * the returned offset will be behind the character.\n * </p>\n *\n * @param point the origin of character bounding box relative to \n * \tthe origin of the widget client area.\n * @return offset of the character at the given location relative \n * \tto the first character in the document.\n * @exception SWTException <ul>\n *    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n *    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n * </ul>\n * @exception IllegalArgumentException <ul>\n *   <li>ERROR_NULL_ARGUMENT when point is null</li>\n *   <li>ERROR_INVALID_ARGUMENT when there is no character at the specified location</li>\n * </ul>\n */\n", "func_signal": "public int getOffsetAtLocation(Point point)", "code": "{\n\tcheckWidget();\n\tif (point == null) {\n\t\tSWT.error(SWT.ERROR_NULL_ARGUMENT);\n\t}\n\tint[] trailing = new int[1];\n\tint offset = getOffsetAtPoint(point.x, point.y, trailing, true);\n\tif (offset == -1) {\n\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);\n\t}\n\treturn offset + trailing[0];\n}", "path": "archive\\StyledText.java", "repo_name": "zheludkovm/LinuxJavaFixes", "stars": 436, "license": "other", "language": "java", "size": 763}
{"docstring": "// --------------------------------------\n// Separate data event\n", "func_signal": "public void dataEvent(TCPClient c)", "code": "{\n\tString[] msg = c.getDataMessage();\n\t// If the message C comes in, then make a new Ball object\n\t// and add to ArrayList\n\tif (msg[0].equals(\"C\")) {\n\t\tballs.add(new Ball(this, client, 0, height / 2));\n\t}\n}", "path": "Most-Pixels-Ever-Examples\\src\\soundinput\\Threshold.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// Our method that quits the thread\n", "func_signal": "public void quit()", "code": "{\n\tSystem.out.println(\"Quitting.\");\n\tisRunning = false; // Setting running to false ends the loop in run()\n\t// In case the thread is waiting. . .\n\tinterrupt();\n}", "path": "Most-Pixels-Ever-Examples\\src\\feeds\\XMLRequest.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// We must implement run, this gets triggered by start()\n", "func_signal": "public void run()", "code": "{\n\n\twhile (isRunning) {\n\t\txml = parent.loadXML(url);\n\t\t// New data is available!\n\t\tisAvailable = true;\t\n\t\ttry {\n\t\t\t// Wait five seconds\n\t\t\tsleep((long) (wait));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tPApplet.println(\"Data returned from: \" + url + \"!\"); // The thread is\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// done when\n\t// we get to the end of\n\t// run()\n}", "path": "Most-Pixels-Ever-Examples\\src\\feeds\\XMLRequest.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "//a simple bounce across the screen\n", "func_signal": "public void calc()", "code": "{\n\tif (y > client.getMHeight()) {\n\t\tyvel *= -1;\n\t\ty = client.getMHeight();\n\t}\n\tx += xvel;\n\ty += yvel;\n\t\n\tyvel += gravity;\n}", "path": "Most-Pixels-Ever-Examples\\src\\fourthclient\\Ball.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// Trying out no synchronize\n", "func_signal": "public void send(String msg)", "code": "{\n\ttry {\n\t\tmsg+=\"\\n\";\n\t\tdos.write(msg.getBytes());\n\t\tdos.flush();\n    } catch (java.net.SocketException e) {\n      // If we've got a broken pipe, remove the connection\n      parent.killConnection(clientID);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Most-Pixels-Ever-Server\\java\\src\\mpe\\server\\Connection.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "/**\n * Register this Taglet.\n * @param tagletMap  the map to register this tag to.\n */\n", "func_signal": "public static void register(Map tagletMap)", "code": "{\n   ExampleTaglet tag = new ExampleTaglet();\n   Taglet t = (Taglet) tagletMap.get(tag.getName());\n   if (t != null) {\n       tagletMap.remove(tag.getName());\n   }\n   tagletMap.put(tag.getName(), tag);\n}", "path": "Most-Pixels-Ever-Processing\\resources\\code\\ExampleTaglet.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// --------------------------------------\n// Triggered by the client whenever a new frame should be rendered.\n// All synchronized drawing should be done here when in auto mode.\n", "func_signal": "public void frameEvent(TCPClient c)", "code": "{\n\tbackground(255);\n\t/*if (c.messageAvailable()) {\n\t\tString[] msg = c.getDataMessage();\n\t\t// If the message C comes in, then make a new Ball object\n\t\t// and add to ArrayList\n\t\tif (msg[0].equals(\"C\")) {\n\t\t\tballs.add(new Ball(this, client, 0, height / 2));\n\t\t}\n\t}*/\n\n\t// Deal with all balls\n\tfor (int i = 0; i < balls.size(); i++) {\n\t\tBall b = (Ball) balls.get(i);\n\t\tb.calc();\n\t\tb.draw();\n\t}\n\n\tif (client.getID() == 0) {\n\t\t// Get the overall volume (between 0 and ??)\n\t\tfloat vol = in.left.level();\n\t\tnoStroke();\n\t\t// If the volume is greater than one and\n\t\t// we are not clapping\n\t\tif (vol > clapLevel && !clapping) {\n\t\t\t// When we are clapping broadcast a \"C\" (this is an arbitrary\n\t\t\t// choice)\n\t\t\tclient.broadcast(\"C\");\n\t\t\tclapping = true; // We are now clapping!\n\t\t\t// If we are finished clapping\n\t\t} else if (clapping && vol < 0.5) {\n\t\t\tclapping = false;\n\t\t}\n\t}\n\n}", "path": "Most-Pixels-Ever-Examples\\src\\soundinput\\Threshold.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// Initialize in the constructor\n", "func_signal": "public Jiggler(PApplet _parent, TCPClient _c, float _x, float _y)", "code": "{\n\t\tparent = _parent;\n\t\tclient = _c;\n\t\tx = _x;\n\t\ty = _y;\n\t\tw = parent.random(4,16);\n\t}", "path": "Most-Pixels-Ever-Examples\\src\\twocameras\\Jiggler.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// --------------------------------------\n", "func_signal": "public void stop()", "code": "{\n\tif (client.getID() == 0) {\n\t\tin.close();\n\t\tminim.stop();\n\t}\n\tsuper.stop();\n}", "path": "Most-Pixels-Ever-Examples\\src\\soundinput\\Threshold.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// --------------------------------------\n// Triggered by the client whenever a new frame should be rendered.\n// All synchronized drawing should be done here when in auto mode.\n", "func_signal": "public void frameEvent(TCPClient c)", "code": "{\n\t// You can read incoming messages here as well\n\t/*if (c.messageAvailable()) {\n\t\tString[] msg = c.getDataMessage();\n\t\tprintln(msg);\n\t\tquote = msg[0];\n\t}*/\n\n\t// clear the screen\n\tbackground(255);\n\n\t// draw the current quote\n\ttext(format(quote), client.getMWidth() / 2,\n\t\t\t(client.getMHeight() - lineHeight * numLines) / 2);\n}", "path": "Most-Pixels-Ever-Examples\\src\\quotes\\QuoteDisplay.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// --------------------------------------\n// Start over\n", "func_signal": "public void resetEvent(TCPClient c)", "code": "{\n\t// All clients must have same randomSeed\n\trandomSeed(1);\n\tclapLevel = 0.05f; // How loud is a clap\n\tthreshold = 0.005f; // How quiet is silence\n\tclapping = false;\n\t\n\tballs = new ArrayList<Ball>();\n}", "path": "Most-Pixels-Ever-Examples\\src\\soundinput\\Threshold.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "//--------------------------------------\n// Separate data event\n", "func_signal": "public void dataEvent(TCPClient c)", "code": "{\n\tString[] msg = c.getDataMessage();\n\tprintln(msg);\n\tquote = msg[0];\t\n}", "path": "Most-Pixels-Ever-Examples\\src\\quotes\\QuoteDisplay.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "/**\n * Given an array of <code>Tag</code>s representing this custom\n * tag, return its string representation.\n * @param tags  the array of <code>Tag</code>s representing of this custom tag.\n */\n", "func_signal": "public String toString(Tag[] tags)", "code": "{\n    if (tags.length == 0) {\n        return null;\n    }\n\t\treturn createHTML(readFile(tags[0].text()));\n}", "path": "Most-Pixels-Ever-Processing\\resources\\code\\ExampleTaglet.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "//a simple bounce across the screen\n", "func_signal": "public void calc()", "code": "{\n\tif (y > client.getMHeight()) {\n\t\tyvel *= -1;\n\t\ty = client.getMHeight();\n\t}\n\tx += xvel;\n\ty += yvel;\n\t\n\tyvel += gravity;\n}", "path": "Most-Pixels-Ever-Examples\\src\\soundinput\\Ball.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "//--------------------------------------\n", "func_signal": "public void setup()", "code": "{\n\t// make a new Client using an XML file\n\tclient = new TCPClient(this, \"mpe\" + ID + \".xml\");\n\n\t// the size is determined by the client's local width and height\n\tsize(client.getLWidth(), client.getLHeight());\n\tsmooth();\n\n\tresetEvent(client);\n\t// IMPORTANT, YOU MUST START THE CLIENT!\n\tclient.start();\n}", "path": "Most-Pixels-Ever-Examples\\src\\video\\ColorTracking.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "//--------------------------------------\n\t// Separate data event\n", "func_signal": "public void dataEvent(TCPClient c)", "code": "{\n\t\tString[] msg = c.getDataMessage();\n\t\tString[] xy = msg[0].split(\",\");\n\t\tx = Integer.parseInt(xy[0]);\n\t\ty = Integer.parseInt(xy[1]);\n}", "path": "Most-Pixels-Ever-Examples\\src\\video\\ColorTracking.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// Display\n", "func_signal": "public void draw()", "code": "{\n\tparent.fill(0,150);\n\tparent.stroke(0);\n\tparent.rectMode(PConstants.CENTER);\n\tparent.rect(x,y,w,w);\n}", "path": "Most-Pixels-Ever-Examples\\src\\twocameras\\Jiggler.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// --------------------------------------\n// Adds newlines before displaying the text to make sure it fits in the\n// window\n", "func_signal": "public String format(String txt)", "code": "{\n\tnumLines = 1;\n\n\tif (textWidth(txt) <= (client.getMWidth() - MARGIN * 2)) {\n\t\treturn txt;\n\t}\n\n\tString[] words = txt.split(\"\\\\s\");\n\tString formatTxt = \"\";\n\tString line = \"\";\n\tint i = 0;\n\twhile (i < words.length) {\n\t\twhile (i < words.length\n\t\t\t\t&& textWidth(line + words[i]) <= (client.getMWidth() - MARGIN * 2)) {\n\t\t\tline += \" \" + words[i];\n\t\t\ti++;\n\t\t}\n\t\t// add a new line\n\t\tformatTxt += line + \"\\n\";\n\t\tnumLines++;\n\t\tline = \"\";\n\t}\n\n\tnumLines--;\n\treturn formatTxt;\n}", "path": "Most-Pixels-Ever-Examples\\src\\quotes\\QuoteDisplay.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "//--------------------------------------\n\t// Start over\n", "func_signal": "public void resetEvent(TCPClient c)", "code": "{\n\t\t// the random seed must be identical for all clients\n\t\trandomSeed(1);\n\t\t\n\t\ttrackColor = color(255,0,0); // Start off tracking for red \n\n\t\t// Only if I am client 0\n\t\tif (client.getID() == 0) {\n\t\t\t// Using the default capture device \n\t\t\tvideo = new Capture(this, width, height, 15); \n\t\t\tvideo.start();\n\t\t}\n\n\t}", "path": "Most-Pixels-Ever-Examples\\src\\video\\ColorTracking.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "// --------------------------------------\n", "func_signal": "public void setup()", "code": "{\n\t// set up the client\n\tclient = new TCPClient(this, \"mpe\" + ID + \".xml\");\n\tsize(client.getLWidth(), client.getLHeight());\n\trandomSeed(3030);\n\n\t// init the drawing functions\n\tsmooth();\n\tnoStroke();\n\tfill(255, 128, 0);\n\tbackground(255);\n\n\t// init the text functions\n\tString[] fonts = PFont.list();\n\tfont = createFont(fonts[(int) random(0, fonts.length)], 48);\n\ttextFont(font, 48);\n\ttextAlign(CENTER);\n\tlineHeight = (int) (textAscent() + textDescent());\n\n\tresetEvent(client);\n\t// start the client\n\tclient.start();\n}", "path": "Most-Pixels-Ever-Examples\\src\\quotes\\QuoteDisplay.java", "repo_name": "shiffman/Most-Pixels-Ever-Processing", "stars": 285, "license": "None", "language": "java", "size": 121145}
{"docstring": "/**\n * Just like assertNull(x), but additionally recording (using\n * threadRecordFailure) any AssertionFailedError thrown, so that\n * the current testcase will Assert.fail.\n */\n", "func_signal": "public void threadAssertNull(Object x)", "code": "{\n    try {\n        Assert.assertNull(x);\n    } catch (AssertionFailedError t) {\n        threadRecordFailure(t);\n        throw t;\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Returns <tt>true</tt> if this queue contains the specified element.\n * More formally, returns <tt>true</tt> if and only if this queue contains\n * at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>. The behavior of\n * this operation is undefined if modified while the operation is in progress.\n *\n * @param o object to be checked for containment in this queue\n * @return <tt>true</tt> if this queue contains the specified element\n * @throws ClassCastException   if the class of the specified element\n *                              is incompatible with this queue\n *                              (<a href=\"../Collection.html#optional-restrictions\">optional</a>)\n * @throws NullPointerException if the specified element is null\n *                              (<a href=\"../Collection.html#optional-restrictions\">optional</a>)\n */\n", "func_signal": "public boolean contains(Object o)", "code": "{\n\n    if (o == null)\n        throw new NullPointerException(\"object can not be null\");\n\n    int read = this.ringIndex.getReadLocation();\n    int write = this.ringIndex.getWriterLocation();\n\n\n    if (read == write)\n        return false;\n\n    if (read < write) {\n\n        for (int location = read; location < write; location++) {\n            if (o.equals(dataLocator.getData(location)))\n                return true;\n        }\n\n        return false;\n    }\n\n    for (int location = read; location < dataLocator.getCapacity(); location++) {\n\n        if (o.equals(dataLocator.getData(location)))\n            return true;\n    }\n\n    for (int location = 0; location < write; location++) {\n\n        if (o.equals(dataLocator.getData(location)))\n            return true;\n    }\n\n\n    return false;\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Returns a policy containing all the permissions we ever need.\n */\n", "func_signal": "public static Policy permissivePolicy()", "code": "{\n    return new AdjustablePolicy\n            // Permissions j.u.c. needs directly\n            (new RuntimePermission(\"modifyThread\"),\n                    new RuntimePermission(\"getClassLoader\"),\n                    new RuntimePermission(\"setContextClassLoader\"),\n                    // Permissions needed to change permissions!\n                    new SecurityPermission(\"getPolicy\"),\n                    new SecurityPermission(\"setPolicy\"),\n                    new RuntimePermission(\"setSecurityManager\"),\n                    // Permissions needed by the junit test harness\n                    new RuntimePermission(\"accessDeclaredMembers\"),\n                    new PropertyPermission(\"*\", \"read\"),\n                    new java.io.FilePermission(\"<<ALL FILES>>\", \"read\"));\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Retrieves and removes the head of this queue, waiting up to the\n * specified wait time if necessary for an element to become available.\n *\n * @param timeout how long to wait before giving up, in units of\n *                <tt>unit</tt>\n * @param unit    a <tt>TimeUnit</tt> determining how to interpret the\n *                <tt>timeout</tt> parameter\n * @return the head of this queue, or throws a <tt>TimeoutException</tt> if the\n * specified waiting time elapses before an element is available\n * @throws InterruptedException                  if interrupted while waiting\n * @throws java.util.concurrent.TimeoutException if timeout time is exceeded\n */\n", "func_signal": "public E poll(long timeout, TimeUnit unit)\n        throws InterruptedException", "code": "{\n\n    final int readLocation = this.consumerReadLocation;\n    int nextReadLocation = 0;\n    try {\n        nextReadLocation = blockForReadSpace(timeout, unit, readLocation);\n    } catch (TimeoutException e) {\n        return null;\n    }\n\n    // purposely non volatile as the read memory barrier occurred when we read 'writeLocation'\n    final E value = dataLocator.getData(readLocation);\n    setReadLocation(nextReadLocation);\n\n    return value;\n\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Returns a new started daemon Thread running the given runnable.\n */\n", "func_signal": "protected Thread newStartedThread(Runnable runnable)", "code": "{\n    Thread t = new Thread(runnable);\n    t.setDaemon(true);\n    t.start();\n    return t;\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Spin-waits up to the specified number of milliseconds for the given\n * thread to enter a wait state: BLOCKED, WAITING, or TIMED_WAITING.\n */\n", "func_signal": "protected void waitForThreadToEnterWaitState(Thread thread, long timeoutMillis)", "code": "{\n    long startTime = System.nanoTime();\n    for (; ; ) {\n        Thread.State s = thread.getState();\n        if (s == Thread.State.BLOCKED ||\n                s == Thread.State.WAITING ||\n                s == Thread.State.TIMED_WAITING)\n            return;\n        else if (s == Thread.State.TERMINATED)\n            Assert.fail(\"Unexpected thread termination\");\n        else if (millisElapsedSince(startTime) > timeoutMillis) {\n            threadAssertTrue(thread.isAlive());\n            return;\n        }\n        Thread.yield();\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public boolean add(E value)", "code": "{\n\n    // volatile read\n    final int writeLocation = ringIndex.getProducerWriteLocation();\n\n    final int nextWriteLocation = getNextWriteLocationThrowIfFull(writeLocation);\n\n    // purposely not volatile\n    dataLocator.setData(writeLocation, value);\n\n    setWriteLocation(nextWriteLocation);\n    return true;\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Waits out termination of a thread pool or Assert.fails doing so.\n */\n", "func_signal": "protected void joinPool(ExecutorService exec)", "code": "{\n    try {\n        exec.shutdown();\n        Assert.assertTrue(\"ExecutorService did not terminate in a timely manner\",\n                exec.awaitTermination(2 * LONG_DELAY_MS, MILLISECONDS));\n    } catch (SecurityException ok) {\n        // Allowed in case test doesn't have privs\n    } catch (InterruptedException ie) {\n        Assert.fail(\"Unexpected InterruptedException\");\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Retrieves and removes the head of this queue, waiting if necessary\n * until an element becomes available.\n * <p/>\n * the reads must always occur on the same thread\n *\n * @return the head of this queue\n * @throws InterruptedException if interrupted while waiting\n */\n", "func_signal": "public E take() throws InterruptedException", "code": "{\n\n    // non volatile read  ( which is quicker )\n    final int readLocation = this.consumerReadLocation;\n\n    // sets the nextReadLocation my moving it on by 1, this may cause it it wrap back to the start.\n    final int nextReadLocation = blockForReadSpace(readLocation);\n\n    // purposely not volatile as the read memory barrier occurred above when we read 'writeLocation'\n    final E value = dataLocator.getData(readLocation);\n\n    setReadLocation(nextReadLocation);\n\n    return value;\n\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Just like assertEquals(x, y), but additionally recording (using\n * threadRecordFailure) any AssertionFailedError thrown, so that\n * the current testcase will Assert.fail.\n */\n", "func_signal": "public void threadAssertEquals(long x, long y)", "code": "{\n    try {\n        Assert.assertEquals(x, y);\n    } catch (AssertionFailedError t) {\n        threadRecordFailure(t);\n        throw t;\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Just like assertEquals(x, y), but additionally recording (using\n * threadRecordFailure) any AssertionFailedError thrown, so that\n * the current testcase will Assert.fail.\n */\n", "func_signal": "public void threadAssertEquals(Object x, Object y)", "code": "{\n    try {\n        Assert.assertEquals(x, y);\n    } catch (AssertionFailedError t) {\n        threadRecordFailure(t);\n        throw t;\n    } catch (Throwable t) {\n        threadUnexpectedException(t);\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Waits for the specified time (in milliseconds) for the thread\n * to terminate (using {@link Thread#join(long)}), else interrupts\n * the thread (in the hope that it may terminate later) and Assert.fails.\n */\n", "func_signal": "protected void awaitTermination(Thread t, long timeoutMillis)", "code": "{\n    try {\n        t.join(timeoutMillis);\n    } catch (InterruptedException ie) {\n        threadUnexpectedException(ie);\n    } finally {\n        if (t.getState() != Thread.State.TERMINATED) {\n            t.interrupt();\n            Assert.fail(\"Test timed out\");\n        }\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public boolean offer(E value)", "code": "{\n\n    // non volatile read  ( which is quicker )\n    final int writeLocation = ringIndex.getProducerWriteLocation();\n\n    // sets the nextWriteLocation my moving it on by 1, this may cause it it wrap back to the start.\n    final int nextWriteLocation = (writeLocation + 1 == dataLocator.getCapacity()) ? 0 : writeLocation + 1;\n\n    if (nextWriteLocation == dataLocator.getCapacity()) {\n\n        if (ringIndex.getReadLocation() == 0)\n            return false;\n\n    } else if (nextWriteLocation == ringIndex.getReadLocation())\n        return false;\n\n    // purposely not volatile see the comment below\n    dataLocator.setData(writeLocation, value);\n\n    setWriteLocation(nextWriteLocation);\n    return true;\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Just like Assert.fail(reason), but additionally recording (using\n * threadRecordFailure) any AssertionFailedError thrown, so that\n * the current testcase will Assert.fail.\n */\n", "func_signal": "public void threadFail(String reason)", "code": "{\n    try {\n        Assert.fail(reason);\n    } catch (AssertionFailedError t) {\n        threadRecordFailure(t);\n        Assert.fail(reason);\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Just like Assert.assertTrue(b), but additionally recording (using\n * threadRecordFailure) any AssertionFailedError thrown, so that\n * the current testcase will Assert.fail.\n */\n", "func_signal": "public void threadAssertTrue(boolean b)", "code": "{\n    try {\n        Assert.assertTrue(b);\n    } catch (AssertionFailedError t) {\n        threadRecordFailure(t);\n        throw t;\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Inserts the specified element into this queue, waiting if necessary\n * for space to become available.\n *\n * @param value the element to add\n * @throws InterruptedException     if interrupted while waiting\n * @throws IllegalArgumentException if some property of the specified\n *                                  element prevents it from being added to this queue\n */\n", "func_signal": "public void put(E value) throws InterruptedException", "code": "{\n\n    final int writeLocation1 = ringIndex.getProducerWriteLocation();\n    final int nextWriteLocation = blockForWriteSpaceInterruptibly(writeLocation1);\n\n    // purposely not volatile see the comment below\n    dataLocator.setData(writeLocation1, value);\n\n    setWriteLocation(nextWriteLocation);\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Extra checks that get done for all test cases.\n * <p/>\n * Triggers test case Assert.failure if any thread assertions have Assert.failed,\n * by rethrowing, in the test harness thread, any exception recorded\n * earlier by threadRecordFailure.\n * <p/>\n * Triggers test case Assert.failure if interrupt status is set in the main thread.\n */\n", "func_signal": "@After\npublic void tearDown() throws Exception", "code": "{\n    Throwable t = threadFailure.getAndSet(null);\n    if (t != null) {\n        if (t instanceof Error)\n            throw (Error) t;\n        else if (t instanceof RuntimeException)\n            throw (RuntimeException) t;\n        else if (t instanceof Exception)\n            throw (Exception) t;\n        else {\n            AssertionFailedError afe =\n                    new AssertionFailedError(t.toString());\n            afe.initCause(t);\n            throw afe;\n        }\n    }\n\n    if (Thread.interrupted())\n        throw new AssertionFailedError(\"interrupt status set in main thread\");\n\n    checkForkJoinPoolThreadLeaks();\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Just like assertSame(x, y), but additionally recording (using\n * threadRecordFailure) any AssertionFailedError thrown, so that\n * the current testcase will Assert.fail.\n */\n", "func_signal": "public void threadAssertSame(Object x, Object y)", "code": "{\n    try {\n        Assert.assertSame(x, y);\n    } catch (AssertionFailedError t) {\n        threadRecordFailure(t);\n        throw t;\n    }\n}", "path": "collections\\src\\test\\java\\net\\openhft\\collections\\jrs166\\JSR166TestCase.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Retrieves, but does not remove, the head of this queue.\n *\n * @param timeout how long to wait before giving up, in units of\n *                <tt>unit</tt>\n * @param unit    a <tt>TimeUnit</tt> determining how to interpret the\n *                <tt>timeout</tt> parameter\n * @return the head of this queue\n * @throws java.util.concurrent.TimeoutException if timeout time is exceeded\n */\n", "func_signal": "public E peek(long timeout, TimeUnit unit)\n        throws InterruptedException, TimeoutException", "code": "{\n\n    // non volatile read  ( which is quicker )\n    final int readLocation = this.consumerReadLocation;\n\n    blockForReadSpace(timeout, unit, readLocation);\n\n    return dataLocator.getData(readLocation);\n\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/**\n * Retrieves and removes the head of this queue, waiting up to the\n * specified wait time if necessary for an element to become available.\n *\n * @return the head of this queue, or <tt>null</tt> if the\n * specified waiting time elapses before an element is available\n */\n", "func_signal": "public E poll()", "code": "{\n\n    final int readLocation = this.consumerReadLocation;\n\n    // sets the nextReadLocation my moving it on by 1, this may cause it it wrap back to the start.\n    final int nextReadLocation = (readLocation + 1 == dataLocator.getCapacity()) ? 0 : readLocation + 1;\n\n    if (ringIndex.getWriterLocation() == readLocation)\n        return null;\n\n    // purposely not volatile as the read memory barrier occurred when we read 'writeLocation'\n    final E value = dataLocator.getData(readLocation);\n    setReadLocation(nextReadLocation);\n\n    return value;\n\n}", "path": "collections-sandbox\\src\\main\\java\\net\\openhft\\chronicle\\sandbox\\queue\\ConcurrentBlockingObjectQueue.java", "repo_name": "peter-lawrey/HugeCollections-OLD", "stars": 272, "license": "None", "language": "java", "size": 11446}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic Object toJson() throws QQException", "code": "{\n\t//[\\\"offpic\\\",\\\"/27d736df-2a59-4007-8701-7218bc70898d\\\",\\\"Beaver.bmp\\\",14173]\n\tJSONArray json = new JSONArray();\n\tjson.put(\"offpic\");\n\tjson.put(filePath);\n\tjson.put(fileName);\n\tjson.put(fileSize);\n\treturn json;\n}", "path": "src\\main\\java\\iqq\\im\\bean\\content\\OffPicItem.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onHttpError(Throwable t)", "code": "{\n    if (!doRetryIt(getErrorCode(t), t)) {\n        notifyActionEvent(QQActionEvent.Type.EVT_ERROR, new QQException(getErrorCode(t), t));\n    }\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected void onHttpStatusOK(QQHttpResponse response) throws QQException,\n\t\tJSONException", "code": "{\n\tString resp = response.getResponseString();\n\tresp = resp.substring(1, resp.length() - 1);\n\tJSONObject json = new JSONObject(resp);\n\tif(json.has(\"k\")) {\n\t\tnotifyActionEvent(QQActionEvent.Type.EVT_OK, json.getString(\"k\"));\n\t} else {\n\t\tnotifyActionEvent(QQActionEvent.Type.EVT_ERROR, QQErrorCode.UNEXPECTED_RESPONSE);\n\t}\n\tSystem.out.println(\"GetWPKeyAction: \" + response.getResponseString());\n}", "path": "src\\main\\java\\iqq\\im\\action\\GetWPKeyAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * <p>onHttpStatusError.</p>\n *\n * @param response a {@link iqq.im.http.QQHttpResponse} object.\n * @throws iqq.im.QQException if any.\n */\n", "func_signal": "protected void onHttpStatusError(QQHttpResponse response) throws QQException", "code": "{\n    if (!doRetryIt(QQErrorCode.ERROR_HTTP_STATUS, null)) {\n        throw new QQException(QQErrorCode.ERROR_HTTP_STATUS);\n    }\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected QQHttpRequest onBuildRequest() throws QQException, JSONException", "code": "{\n\tQQSession session = getContext().getSession();\n\n\tJSONObject json = new JSONObject();\n\tjson.put(\"vfwebqq\", session.getVfwebqq());\n\tjson.put(\"clientid\", session.getClientId()); \n\tjson.put(\"psessionid\", session.getSessionId());\n\t\n\tQQHttpRequest req = createHttpRequest(\"POST\", QQConstants.URL_GET_RECENT_LIST);\n\treq.addPostValue(\"r\", json.toString());\n\treq.addPostValue(\"clientid\", session.getClientId()+\"\");\n\treq.addPostValue(\"psessionid\", session.getSessionId());\n\n\treturn req;\n}", "path": "src\\main\\java\\iqq\\im\\action\\GetRecentListAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void notifyActionEvent(QQActionEvent.Type type, Object target)", "code": "{\n    if (listener != null) {\n        listener.onActionEvent(new QQActionEvent(type, target, actionFuture));\n    }\n\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/* (non-Javadoc)\n * @see iqq.im.action.AbstractHttpAction#onHttpStatusOK(iqq.im.http.QQHttpResponse)\n */\n/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected void onHttpStatusOK(QQHttpResponse response) throws QQException,\n\t\tJSONException", "code": "{\n\tJSONObject json = new JSONObject(response.getResponseString());\n\tList<Object> recents = new ArrayList<Object>();\n\tQQStore store = getContext().getStore();\n        if (json.getInt(\"retcode\") == 0) {\n            JSONArray result = json.getJSONArray(\"result\");\n            for(int i=0; i<result.length(); i++){\n            \t JSONObject rejson = result.getJSONObject(i);\n            \t switch(rejson.getInt(\"type\")){\n            \t case 0:{\t//\u597d\u53cb\n            \t\t QQBuddy buddy = store.getBuddyByUin(rejson.getLong(\"uin\"));\n            \t\t if(buddy != null){\n            \t\t\t recents.add(buddy);\n            \t\t }\n            \t } break;\n            \t \n            \t case 1: {\t//\u7fa4\n            \t\t QQGroup group = store.getGroupByCode(rejson.getLong(\"uin\"));\n            \t\t if(group != null){\n            \t\t\t recents.add(group);\n            \t\t }\n            \t } break;\n            \t \n            \t case 2: {\t//\u8ba8\u8bba\u7ec4\n            \t\t QQDiscuz discuz = store.getDiscuzByDid(rejson.getLong(\"uin\"));\n            \t\t if(discuz != null){\n            \t\t\t recents.add(discuz);\n            \t\t }\n            \t }\n            \t }\n            }\n            notifyActionEvent(QQActionEvent.Type.EVT_OK, recents);\n        }else{\n        \tnotifyActionEvent(QQActionEvent.Type.EVT_ERROR, new QQException(QQErrorCode.UNEXPECTED_RESPONSE));\n        }\n}", "path": "src\\main\\java\\iqq\\im\\action\\GetRecentListAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * \u5148\u4ecegithub\u83b7\u53d6\uff0c\u5982\u679c\u5931\u8d25\u4ece\u672c\u5730\u83b7\u53d6\n *\n * @param url\n * @param localName\n * @return\n * @throws IOException\n */\n", "func_signal": "public static String loadResource(String url, String localName) throws IOException", "code": "{\n    try {\n        return loadResourceFromServer(url);\n    } catch (IOException e) {\n        System.err.println(\"loadResource error url:\" + url + \" localName:\" + localName);\n    }\n    return loadResource(localName);\n}", "path": "src\\main\\java\\iqq\\im\\util\\ResourceUtils.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected QQHttpRequest onBuildRequest() throws QQException, JSONException", "code": "{\n\tQQHttpRequest req = createHttpRequest(\"GET\", QQConstants.URL_GET_WP_KEY);\n\treq.addGetValue(\"r\", \"0.7975904128979892\");\n\treq.addGetValue(\"resp_charset\", \"UTF8\");\n\treq.addGetValue(\"ef\", \"js\");\n\treq.addGetValue(\"sid\", sid);\n\treq.addGetValue(\"Referer\", \"http://mail.qq.com/cgi-bin/frame_html?sid=\" + sid);\n\treturn req;\n}", "path": "src\\main\\java\\iqq\\im\\action\\GetWPKeyAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void fromJson(String text) throws QQException", "code": "{\n\t//[\"offpic\",{\"success\":1,\"file_path\":\"/7acccf74-0fcd-4bbd-b885-03a5cc2f7507\"}]\n\ttry {\n\t\tJSONArray json = new JSONArray(text);\n\t\tJSONObject pic = json.getJSONObject(1);\n\t\tisSuccess = pic.getInt(\"success\") == 1 ? true : false;\n\t\tfilePath = pic.getString(\"file_path\");\n\t} catch (JSONException e) {\n\t\tthrow new QQException(QQErrorCode.JSON_ERROR, e);\n\t}\n\t\n}", "path": "src\\main\\java\\iqq\\im\\bean\\content\\OffPicItem.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * <p>Constructor for AbstractHttpAction.</p>\n *\n * @param context  a {@link iqq.im.core.QQContext} object.\n * @param listener a {@link iqq.im.QQActionListener} object.\n */\n", "func_signal": "public AbstractHttpAction(QQContext context, QQActionListener listener)", "code": "{\n    this.context = context;\n    this.listener = listener;\n    this.retryTimes = 0;\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * <p>createHttpRequest.</p>\n *\n * @param method a {@link java.lang.String} object.\n * @param url    a {@link java.lang.String} object.\n * @return a {@link iqq.im.http.QQHttpRequest} object.\n */\n", "func_signal": "protected QQHttpRequest createHttpRequest(String method, String url)", "code": "{\n    HttpService httpService = (HttpService) getContext().getSerivce(QQService.Type.HTTP);\n    return httpService.createHttpRequest(method, url);\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void fromJson(String text) throws QQException", "code": "{\n\ttry {\n\t\tJSONArray json = new JSONArray(text);\n\t\tid = json.getInt(1);\n\t} catch (JSONException e) {\n\t\tthrow new QQException(QQErrorCode.JSON_ERROR, e);\n\t}\n}", "path": "src\\main\\java\\iqq\\im\\bean\\content\\FaceItem.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onHttpRead(long current, long total)", "code": "{\n    QQActionEventArgs.ProgressArgs progress = new QQActionEventArgs.ProgressArgs();\n    progress.total = total;\n    progress.current = current;\n    notifyActionEvent(QQActionEvent.Type.EVT_READ, progress);\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic QQHttpRequest buildRequest() throws QQException", "code": "{\n    try {\n        return onBuildRequest();\n    } catch (JSONException e) {\n        throw new QQException(QQErrorCode.JSON_ERROR, e);\n    } catch (Throwable e) {\n        throw new QQException(QQErrorCode.UNKNOWN_ERROR, e);\n    }\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onHttpWrite(long current, long total)", "code": "{\n    QQActionEventArgs.ProgressArgs progress = new QQActionEventArgs.ProgressArgs();\n    progress.total = total;\n    progress.current = current;\n    notifyActionEvent(QQActionEvent.Type.EVT_WRITE, progress);\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * <p>Constructor for GetWPKeyAction.</p>\n *\n * @param sid a {@link java.lang.String} object.\n * @param context a {@link iqq.im.core.QQContext} object.\n * @param listener a {@link iqq.im.QQActionListener} object.\n */\n", "func_signal": "public GetWPKeyAction(String sid, QQContext context, QQActionListener listener)", "code": "{\n\tsuper(context, listener);\n\tthis.sid = sid;\n}", "path": "src\\main\\java\\iqq\\im\\action\\GetWPKeyAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic Object toJson() throws QQException", "code": "{\n\tJSONArray json = new JSONArray();\n\tjson.put(\"face\");\n\tjson.put(id);\n\treturn json;\n}", "path": "src\\main\\java\\iqq\\im\\bean\\content\\FaceItem.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onHttpFinish(QQHttpResponse response)", "code": "{\n    try {\n        LOG.debug(response.getContentType());\n        String type = response.getContentType();\n        if (type != null && (type.startsWith(\"application/x-javascript\")\n                || type.startsWith(\"application/json\")\n                || type.indexOf(\"text\") >= 0\n        ) && response.getContentLength() > 0) {\n            LOG.debug(response.getResponseString());\n        }\n\n        if (response.getResponseCode() == QQHttpResponse.S_OK) {\n            onHttpStatusOK(response);\n        } else {\n            onHttpStatusError(response);\n        }\n    } catch (QQException e) {\n        notifyActionEvent(QQActionEvent.Type.EVT_ERROR, e);\n    } catch (JSONException e) {\n        notifyActionEvent(QQActionEvent.Type.EVT_ERROR, new QQException(QQErrorCode.JSON_ERROR, e));\n    } catch (Throwable e) {\n        notifyActionEvent(QQActionEvent.Type.EVT_ERROR, new QQException(QQErrorCode.UNKNOWN_ERROR, e));\n    }\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void cancelRequest()", "code": "{\n    responseFuture.cancel(true);\n    notifyActionEvent(QQActionEvent.Type.EVT_CANCELED, null);\n}", "path": "src\\main\\java\\iqq\\im\\action\\AbstractHttpAction.java", "repo_name": "iqq-team/webqq-core", "stars": 338, "license": "None", "language": "java", "size": 6497}
{"docstring": "/**\n * convert Logcat to integer\n * @param type\n * @return integer \n */\n", "func_signal": "public static int convertLogcatType(int type)", "code": "{\n  switch (type) {\n  case logPriority.DEBUG:\n    return 0;\n  case logPriority.VERBOSE:\n    return 1;\n  case logPriority.INFO:\n    return 2;\n  case logPriority.WARN:\n    return 3;\n  case logPriority.ERROR:\n    return 4;\n  case logPriority.FATAL:\n    return 5;\n  }\n  return 0;\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * get connection type by connectionType\n * @param byte\n * @return String connection type \n */\n", "func_signal": "public static String getConnectionType(byte type)", "code": "{\n  switch (type) {\n  case connectionType.TCPv4:\n    return \"TCP4\";\n  case connectionType.TCPv6:\n    return \"TCP6\";\n  case connectionType.UDPv4:\n    return \"UDP4\";\n  case connectionType.UDPv6:\n    return \"UDP6\";\n  case connectionType.RAWv4:\n    return \"RAW4\";\n  case connectionType.RAWv6:\n    return \"RAW6\";\n  }\n  return \"????\";\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "// Alternative constructor allowing reuse of ByteBuffers\n", "func_signal": "public FlatBufferBuilder(ByteBuffer existing_bb)", "code": "{\n    bb = existing_bb;\n    bb.clear();\n    bb.order(ByteOrder.LITTLE_ENDIAN);\n    space = bb.capacity();\n}", "path": "app\\src\\main\\java\\com\\google\\flatbuffers\\FlatBufferBuilder.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * convert data as memory\n * \n * @param data\n * @return a string with correct format\n *\n * Reference:\n * http://stackoverflow.com/questions/3758606/how-to-convert-byte-size-into-human-readable-format-in-java\n */\n", "func_signal": "@SuppressLint(\"DefaultLocale\")\npublic static String convertToSize(long data, boolean si)", "code": "{\n  int unit = si ? 1000 : 1024;\n  if (data < unit)\n    return data + \" B\";\n  int exp = (int) (Math.log(data) / Math.log(unit));\n  String pre = (si ? \"kMGTPE\" : \"KMGTPE\").charAt(exp - 1) + (si ? \"\" : \"i\");\n  return String.format(\"%.1f %sB\", data / Math.pow(unit, exp), pre);\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * convert IpcAction into integer\n * @param byte\n * @return integer\n */\n", "func_signal": "public static int convertTypeToLoc(byte type)", "code": "{\n  switch (type) {\n  case ipcCategory.LOGCAT_MAIN:\n    return 0;\n  case ipcCategory.LOGCAT_SYSTEM:\n    return 1;\n  case ipcCategory.LOGCAT_EVENT:\n    return 2;\n  case ipcCategory.LOGCAT_RADIO:\n    return 3;\n  case ipcCategory.DMESG:\n    return 4;\n  }\n  return 0;\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * combine IP and port as a string\n * @param String ip\n * @param integer port\n * @return String\n */\n", "func_signal": "public static String convertToIPv4(String ip, int port)", "code": "{\n  // replace IPv6 to IPv4\n  ip = ip.replace(\"::ffff:\", \"\");\n  if (port == 0)\n    return ip + \":*\";\n  return ip + \":\" + port;\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * convert Integer to IpcAction type\n * @param integer\n * @return Logcat\n */\n", "func_signal": "public static byte convertLocToType(int loc)", "code": "{\n  switch (loc) {\n  case 0:\n    return ipcCategory.LOGCAT_MAIN;\n  case 1:\n    return ipcCategory.LOGCAT_SYSTEM;\n  case 2:\n    return ipcCategory.LOGCAT_EVENT;\n  case 3:\n    return ipcCategory.LOGCAT_RADIO;\n  case 4:\n    return ipcCategory.DMESG;\n  }\n\n  return ipcCategory.LOGCAT_MAIN;\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "// This checks a required field has been set in a given table that has\n// just been constructed.\n", "func_signal": "public void required(int table, int field)", "code": "{\n    int table_start = bb.capacity() - table;\n    int vtable_start = table_start - bb.getInt(table_start);\n    boolean ok = bb.getShort(vtable_start + field) != 0;\n    // If this fails, the caller will show what field needs to be set.\n    if (!ok)\n        throw new AssertionError(\"FlatBuffers: field \" + field + \" must be set\");\n}", "path": "app\\src\\main\\java\\com\\google\\flatbuffers\\FlatBufferBuilder.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * Initialize UserInterfaceUtil\n * @param activity\n */\n", "func_signal": "public static void Initialize(Activity activity)", "code": "{\n  if (settings == null)\n    settings = Settings.getInstance(activity.getApplicationContext());\n  if (resource == null)\n    resource = activity.getResources();\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * get dmesg by dmesgLevel\n * @param byte\n * @return String\n */\n", "func_signal": "public static String getDmesgLevel(byte level)", "code": "{\n  switch (level) {\n  case dmesgLevel.DEBUG:\n    return \"DEBUG\";\n  case dmesgLevel.INFORMATION:\n    return \"INFORMATION\";\n  case dmesgLevel.NOTICE:\n    return \"NOTICE\";\n  case dmesgLevel.WARNING:\n    return \"WARNING\";\n  case dmesgLevel.EMERGENCY:\n    return \"EMERGENCY\";\n  case dmesgLevel.ERROR:\n    return \"ERROR\";\n  case dmesgLevel.ALERT:\n    return \"ALERT\";\n  case dmesgLevel.CRITICAL:\n    return \"CRITICAL\";\n  }\n  return \"UNKNOWN\";\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * get priority string by logPriority\n * @param byte\n * @return String\n */\n", "func_signal": "public static String getLogpriority(byte priority)", "code": "{\n  switch (priority) {\n  case logPriority.SILENT:\n    return \"SILENT\";\n  case logPriority.DEFAULT:\n    return \"DEFAULT\";\n  case logPriority.VERBOSE:\n    return \"VERBOSE\";\n  case logPriority.WARN:\n    return \"WARNING\";\n  case logPriority.INFO:\n    return \"INFORMATION\";\n  case logPriority.FATAL:\n    return \"FATAL\";\n  case logPriority.ERROR:\n    return \"ERROR\";\n  case logPriority.DEBUG:\n    return \"DEBUG\";\n  }\n  return \"UNKNOWN\";\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * For custom purposes. Not used by ColorPickerPreference\n * \n * @param color\n * @author Charles Rosaaen\n * @return A string representing the hex value of color, without the alpha\n *         value\n */\n", "func_signal": "public static String convertToRGB(int color)", "code": "{\n  String red = Integer.toHexString(Color.red(color));\n  String green = Integer.toHexString(Color.green(color));\n  String blue = Integer.toHexString(Color.blue(color));\n\n  if (red.length() == 1) {\n    red = \"0\" + red;\n  }\n\n  if (green.length() == 1) {\n    green = \"0\" + green;\n  }\n\n  if (blue.length() == 1) {\n    blue = \"0\" + blue;\n  }\n\n  return \"#\" + red + green + blue;\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "// Adds on offset, relative to where it will be written.\n", "func_signal": "public void addOffset(int off)", "code": "{\n    prep(SIZEOF_INT, 0);  // Ensure alignment is already done.\n    assert off <= offset();\n    off = offset() - off + SIZEOF_INT;\n    putInt(off);\n}", "path": "app\\src\\main\\java\\com\\google\\flatbuffers\\FlatBufferBuilder.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * remove empty string from array\n * \n * @param string\n *          []\n * @return string []\n */\n", "func_signal": "public static String[] eraseEmptyString(String[] data)", "code": "{\n  ArrayList<String> checked = new ArrayList<String>();\n  for (int index = 0; index < data.length; index++) {\n    if (!data[index].trim().isEmpty())\n      checked.add(data[index]);\n  }\n  return checked.toArray(new String[checked.size()]);\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "// Structs are stored inline, so nothing additional is being added. `d` is always 0.\n", "func_signal": "public void addStruct(int voffset, int x, int d)", "code": "{\n    if(x != d) {\n        Nested(x);\n        slot(voffset);\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\flatbuffers\\FlatBufferBuilder.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * convert dmesg to integer\n * @param type\n * @return integer\n */\n", "func_signal": "public static int convertDmesgType(int type)", "code": "{\n  switch (type) {\n  case dmesgLevel.DEBUG:\n    return 0;\n  case dmesgLevel.INFORMATION:\n    return 1;\n  case dmesgLevel.NOTICE:\n    return 2;\n  case dmesgLevel.WARNING:\n    return 3;\n  case dmesgLevel.ALERT:\n    return 4;\n  case dmesgLevel.EMERGENCY:\n    return 5;\n  case dmesgLevel.ERROR:\n    return 6;\n  case dmesgLevel.CRITICAL:\n    return 7;\n  }\n  return 0;\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * remove string from array , if it can't be converted to int\n * \n * @param string\n *          []\n * @return string []\n */\n", "func_signal": "public static String[] eraseNonIntegarString(String[] data)", "code": "{\n  ArrayList<String> checked = new ArrayList<String>();\n  for (int index = 0; index < data.length; index++) {\n    if (convertToInt(data[index]) != 0)\n      checked.add(data[index]);\n  }\n  return checked.toArray(new String[checked.size()]);\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * get status by processStatus\n * @param byte\n * @return status (by char)\n */\n", "func_signal": "public static String getSatusString(byte status)", "code": "{\n  if (resource == null)\n    return \"?\";\n    \n  switch (status) {\n  case processStatus.Running:\n    return resource.getText(R.string.ui_process_status_running).toString();\n  case processStatus.Sleep:\n    return resource.getText(R.string.ui_process_status_sleep).toString();\n  case processStatus.Stopped:\n    return resource.getText(R.string.ui_process_status_stop).toString();\n  case processStatus.Page:\n  case processStatus.Disk:\n    return resource.getText(R.string.ui_process_status_waitio).toString();\n  case processStatus.Zombie:\n    return resource.getText(R.string.ui_process_status_zombie).toString();\n  }\n  return resource.getText(R.string.ui_process_status_unknown).toString();\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * convert string as Integer\n * \n * @param string\n * @return int\n */\n", "func_signal": "public static int convertToInt(String value)", "code": "{\n  try {\n    return Integer.parseInt(value);\n  } catch (Exception e) {\n  }\n  return 0;\n}", "path": "app\\src\\main\\java\\com\\eolwral\\osmonitor\\util\\UserInterfaceUtil.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "// Start with a buffer of size `initial_size`, then grow as required.\n", "func_signal": "public FlatBufferBuilder(int initial_size)", "code": "{\n    if (initial_size <= 0) initial_size = 1;\n    space = initial_size;\n    bb = newByteBuffer(initial_size);\n}", "path": "app\\src\\main\\java\\com\\google\\flatbuffers\\FlatBufferBuilder.java", "repo_name": "eolwral/OSMonitor", "stars": 334, "license": "None", "language": "java", "size": 5141}
{"docstring": "/**\n * Raw data of the dip joint position.\n *\n * @return Raw position\n */\n", "func_signal": "public PVector getRawPositionOfJointDip()", "code": "{\n    return this.leap.convert(this._finger.jointPosition(\n            com.leapmotion.leap.Finger.Joint.JOINT_DIP)\n    );\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Draw the finger with all details.\n *\n * @param radius The radius of the ellipse (2D) or sphere (3D).\n */\n", "func_signal": "public void draw(float radius)", "code": "{\n    PVector start = this.getPosition();\n    PVector end = this.getTipPosition();\n\n    this.parent.noStroke();\n    this.parent.fill(0);\n\n    if (this.leap.is2D) {\n        this.parent.line(start.x, start.y, end.x, end.y);\n    } else {\n        this.parent.line(start.x, start.y, start.z, end.x, end.y, end.z);\n    }\n\n    this.parent.stroke(radius);\n    this.parent.noFill();\n\n    if (this.leap.is2D) {\n        this.parent.ellipseMode(processing.core.PConstants.CENTER);\n        this.parent.ellipse(start.x, start.y, radius, radius);\n        this.parent.ellipse(end.x, end.y, radius, radius);\n    } else {\n        this.parent.sphereDetail(20);\n        this.parent.pushMatrix();\n        this.parent.translate(start.x, start.y, start.z);\n        this.parent.sphere(radius);\n        this.parent.popMatrix();\n        this.parent.pushMatrix();\n        this.parent.translate(end.x, end.y, end.z);\n        this.parent.sphere(radius);\n        this.parent.popMatrix();\n    }\n}", "path": "src\\de\\voidplus\\leapmotion\\Tool.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Raw data of the finger tip position.\n *\n * @return Raw position\n */\n", "func_signal": "public PVector getRawPositionOfJointTip()", "code": "{\n    return this.leap.convert(this._finger.jointPosition(\n            com.leapmotion.leap.Finger.Joint.JOINT_TIP)\n    );\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Draw the type of the finger.\n *\n * @param xShift Shift in x axis\n * @param yShift Shift in y axis\n * @param zShift Shift in z axis\n */\n", "func_signal": "public void drawName(int xShift, int yShift, int zShift)", "code": "{\n    PVector pos = this.getPosition();\n    this.parent.fill(0);\n    this.parent.text(this.getTypeName(), pos.x + xShift, pos.y + yShift, pos.z + zShift);\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get the type index of a gesture.\n *\n * @return Type of gesture\n */\n", "func_signal": "public int getType()", "code": "{\n    if (this.isValid()) {\n        switch (this._gesture.type()) {\n            case TYPE_CIRCLE:\n                return 0;\n            case TYPE_KEY_TAP:\n                return 1;\n            case TYPE_SCREEN_TAP:\n                return 2;\n            case TYPE_SWIPE:\n                return 3;\n            default:\n                return -1;\n        }\n    }\n    return -1;\n}", "path": "src\\de\\voidplus\\leapmotion\\Gesture.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get the index of fingertype (0-4, 0=thumb, 1=index, 2=middle, 3=ring, 4=pinky).\n *\n * @return Index of index\n */\n", "func_signal": "public int getType()", "code": "{\n    com.leapmotion.leap.Finger.Type type = this._finger.type();\n    switch (type) {\n        case TYPE_THUMB:\n            return 0;\n        case TYPE_INDEX:\n            return 1;\n        case TYPE_MIDDLE:\n            return 2;\n        case TYPE_RING:\n            return 3;\n        case TYPE_PINKY:\n            return 4;\n    }\n    return -1;\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get a specific bone by name.\n *\n * @param name \"distal\", \"intermediate\", \"proximal\", \"metacarpal\"\n * @return Single bone or null\n */\n", "func_signal": "public Bone getBone(String name)", "code": "{\n    name = name.toLowerCase();\n    if (name.equals(\"distal\")) {\n        return new Bone(parent, leap, this._finger.bone(\n                com.leapmotion.leap.Bone.Type.TYPE_DISTAL));\n    } else if (name.equals(\"intermediate\")) {\n        return new Bone(parent, leap, this._finger.bone(\n                com.leapmotion.leap.Bone.Type.TYPE_INTERMEDIATE));\n    } else if (name.equals(\"proximal\")) {\n        return new Bone(parent, leap, this._finger.bone(\n                com.leapmotion.leap.Bone.Type.TYPE_PROXIMAL));\n    } else if (name.equals(\"metacarpal\")) {\n        return new Bone(parent, leap, this._finger.bone(\n                com.leapmotion.leap.Bone.Type.TYPE_METACARPAL));\n    }\n    return null;\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get the proximal bone of the finger.\n *\n * @return Single bone\n */\n", "func_signal": "public Bone getProximalBone()", "code": "{\n    return new Bone(parent, leap, this._finger.bone(\n            com.leapmotion.leap.Bone.Type.TYPE_PROXIMAL));\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Draw all joints and bones of a finger.\n *\n * @param radius Radius\n */\n", "func_signal": "public void draw(float radius)", "code": "{\n    this.drawBones();\n    this.drawJoints(radius);\n    this.drawName();\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * The finger tip position in millimeters.\n *\n * @return Position\n */\n", "func_signal": "public PVector getPositionOfJointTip()", "code": "{\n    return this.leap.map(this._finger.jointPosition(\n            com.leapmotion.leap.Finger.Joint.JOINT_TIP)\n    );\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get the metacarpal bone of the finger.\n *\n * @return Single bone\n */\n", "func_signal": "public Bone getMetacarpalBone()", "code": "{\n    return new Bone(parent, leap, this._finger.bone(\n            com.leapmotion.leap.Bone.Type.TYPE_METACARPAL));\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Raw data of the pip joint position.\n *\n * @return Raw position\n */\n", "func_signal": "public PVector getRawPositionOfJointPip()", "code": "{\n    return this.leap.convert(this._finger.jointPosition(\n            com.leapmotion.leap.Finger.Joint.JOINT_PIP)\n    );\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get the name of fingertype (0-4, 0=thumb, 1=index, 2=middle, 3=ring, 4=pinky).\n *\n * @return Name of finger\n */\n", "func_signal": "public String getTypeName()", "code": "{\n    com.leapmotion.leap.Finger.Type type = this._finger.type();\n    switch (type) {\n        case TYPE_THUMB:\n            return \"thumb\";\n        case TYPE_INDEX:\n            return \"index\";\n        case TYPE_MIDDLE:\n            return \"middle\";\n        case TYPE_RING:\n            return \"ring\";\n        case TYPE_PINKY:\n            return \"pinky\";\n    }\n    return \"\";\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get the intermediate bone of the finger.\n *\n * @return Single bone\n */\n", "func_signal": "public Bone getIntermediateBone()", "code": "{\n    return new Bone(parent, leap, this._finger.bone(\n            com.leapmotion.leap.Bone.Type.TYPE_INTERMEDIATE));\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * The dip joint position in millimeters.\n *\n * @return Position\n */\n", "func_signal": "public PVector getPositionOfJointDip()", "code": "{\n    return this.leap.map(this._finger.jointPosition(\n            com.leapmotion.leap.Finger.Joint.JOINT_DIP)\n    );\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * The pip joint position in millimeters.\n *\n * @return Position\n */\n", "func_signal": "public PVector getPositionOfJointPip()", "code": "{\n    return this.leap.map(this._finger.jointPosition(\n            com.leapmotion.leap.Finger.Joint.JOINT_PIP)\n    );\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Raw data of the mcp joint position.\n *\n * @return Raw position\n */\n", "func_signal": "public PVector getRawPositionOfJointMcp()", "code": "{\n    return this.leap.convert(this._finger.jointPosition(\n            com.leapmotion.leap.Finger.Joint.JOINT_MCP)\n    );\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Get a specific bone by numeric index.\n *\n * @param type (0-3, 0=distal, 1=intermediate, 2=proximal, 3=metacarpal).\n * @return Single bone or null\n */\n", "func_signal": "public Bone getBone(int type)", "code": "{\n    switch (type) {\n        case 0:\n            return new Bone(parent, leap, this._finger.bone(\n                    com.leapmotion.leap.Bone.Type.TYPE_DISTAL));\n        case 1:\n            return new Bone(parent, leap, this._finger.bone(\n                    com.leapmotion.leap.Bone.Type.TYPE_INTERMEDIATE));\n        case 2:\n            return new Bone(parent, leap, this._finger.bone(\n                    com.leapmotion.leap.Bone.Type.TYPE_PROXIMAL));\n        case 3:\n            return new Bone(parent, leap, this._finger.bone(\n                    com.leapmotion.leap.Bone.Type.TYPE_METACARPAL));\n    }\n    return null;\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Draw all bones of a finger.\n */\n", "func_signal": "public void drawBones()", "code": "{\n    this.parent.stroke(0, (this.isExtended()) ? 170 : 35);\n    this.getBone(0).draw();\n    this.getBone(1).draw();\n    this.getBone(2).draw();\n    if (this.getType() != 0) { // \u2260thumb\n        this.getBone(3).draw();\n    }\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Draw all joints and bones of a finger.\n *\n * @param radius Radius\n */\n", "func_signal": "public void drawJoints(float radius)", "code": "{\n    this.parent.noStroke();\n    this.parent.fill(0);\n    PVector tip = this.getPositionOfJointTip();\n    PVector mcp = this.getPositionOfJointMcp();\n    PVector pip = this.getPositionOfJointPip();\n    PVector dip = this.getPositionOfJointDip();\n\n    if (this.leap.is2D) {\n        this.parent.ellipseMode(PConstants.CENTER);\n        this.parent.ellipse(tip.x, tip.y, radius, radius);\n        this.parent.ellipse(pip.x, pip.y, radius, radius);\n        this.parent.ellipse(dip.x, dip.y, radius, radius);\n        if (this.getType() != 0) { // \u2260thumb\n            this.parent.ellipse(mcp.x, mcp.y, radius, radius);\n        }\n    } else {\n        this.parent.sphereDetail(20);\n        this.parent.pushMatrix();\n        this.parent.translate(tip.x, tip.y, tip.z);\n        this.parent.sphere(radius);\n        this.parent.popMatrix();\n        this.parent.pushMatrix();\n        this.parent.translate(pip.x, pip.y, pip.z);\n        this.parent.sphere(radius);\n        this.parent.popMatrix();\n        this.parent.pushMatrix();\n        this.parent.translate(dip.x, dip.y, dip.z);\n        this.parent.sphere(radius);\n        this.parent.popMatrix();\n        if (this.getType() != 0) { // \u2260thumb\n            this.parent.pushMatrix();\n            this.parent.translate(mcp.x, mcp.y, mcp.z);\n            this.parent.sphere(radius);\n            this.parent.popMatrix();\n        }\n    }\n}", "path": "src\\de\\voidplus\\leapmotion\\Finger.java", "repo_name": "nok/leap-motion-processing", "stars": 294, "license": "other", "language": "java", "size": 161824}
{"docstring": "/**\n * Adjusts this Edge position such that the resulting window will have the\n * given aspect ratio.\n * \n * @param aspectRatio the aspect ratio to achieve\n */\n", "func_signal": "public void adjustCoordinate(float aspectRatio)", "code": "{\n\n    final float left = Edge.LEFT.getCoordinate();\n    final float top = Edge.TOP.getCoordinate();\n    final float right = Edge.RIGHT.getCoordinate();\n    final float bottom = Edge.BOTTOM.getCoordinate();\n\n    switch (this) {\n        case LEFT:\n            mCoordinate = AspectRatioUtil.calculateLeft(top, right, bottom, aspectRatio);\n            break;\n        case TOP:\n            mCoordinate = AspectRatioUtil.calculateTop(left, right, bottom, aspectRatio);\n            break;\n        case RIGHT:\n            mCoordinate = AspectRatioUtil.calculateRight(left, top, bottom, aspectRatio);\n            break;\n        case BOTTOM:\n            mCoordinate = AspectRatioUtil.calculateBottom(left, top, right, aspectRatio);\n            break;\n    }\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Creates the Paint object for drawing the translucent overlay outside the\n * crop window.\n * \n * @param context the Context\n * @return the new Paint object\n */\n", "func_signal": "public static Paint newBackgroundPaint(Context context)", "code": "{\n\n    final Paint paint = new Paint();\n    paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));\n\n    return paint;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\util\\PaintUtil.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * imageScaleType:\n * EXACTLY :\u56fe\u50cf\u5c06\u5b8c\u5168\u6309\u6bd4\u4f8b\u7f29\u5c0f\u7684\u76ee\u6807\u5927\u5c0f\n * EXACTLY_STRETCHED:\u56fe\u7247\u4f1a\u7f29\u653e\u5230\u76ee\u6807\u5927\u5c0f\u5b8c\u5168\n * IN_SAMPLE_INT:\u56fe\u50cf\u5c06\u88ab\u4e8c\u6b21\u91c7\u6837\u7684\u6574\u6570\u500d\n * IN_SAMPLE_POWER_OF_2:\u56fe\u7247\u5c06\u964d\u4f4e2\u500d\uff0c\u76f4\u5230\u4e0b\u4e00\u51cf\u5c11\u6b65\u9aa4\uff0c\u4f7f\u56fe\u50cf\u66f4\u5c0f\u7684\u76ee\u6807\u5927\u5c0f\n * NONE:\u56fe\u7247\u4e0d\u4f1a\u8c03\u6574\n *\n * @param url\n * @param view\n */\n", "func_signal": "public void displayImage(String url, ImageView view)", "code": "{\n    Glide.with(context).load(url).\n            centerCrop()\n            .crossFade()\n            .override(sWidthPix / spancount, sWidthPix / spancount)\n            .diskCacheStrategy(DiskCacheStrategy.RESULT)\n            .placeholder(R.drawable.loadfaild)\n            .into(view);\n}", "path": "photogallery\\src\\main\\java\\com\\wq\\photo\\adapter\\PhotoAdapter.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Get the resulting x-position of the left edge of the crop window given\n * the handle's position and the image's bounding box and snap radius.\n * \n * @param x the x-position that the left edge is dragged to\n * @param imageRect the bounding box of the image that is being cropped\n * @param imageSnapRadius the snap distance to the image edge (in pixels)\n * @return the actual x-position of the left edge\n */\n", "func_signal": "private static float adjustLeft(float x, Rect imageRect, float imageSnapRadius, float aspectRatio)", "code": "{\n\n    float resultX = x;\n\n    if (x - imageRect.left < imageSnapRadius)\n        resultX = imageRect.left;\n\n    else\n    {\n        // Select the minimum of the three possible values to use\n        float resultXHoriz = Float.POSITIVE_INFINITY;\n        float resultXVert = Float.POSITIVE_INFINITY;\n\n        // Checks if the window is too small horizontally\n        if (x >= Edge.RIGHT.getCoordinate() - MIN_CROP_LENGTH_PX)\n            resultXHoriz = Edge.RIGHT.getCoordinate() - MIN_CROP_LENGTH_PX;\n\n        // Checks if the window is too small vertically\n        if (((Edge.RIGHT.getCoordinate() - x) / aspectRatio) <= MIN_CROP_LENGTH_PX)\n            resultXVert = Edge.RIGHT.getCoordinate() - (MIN_CROP_LENGTH_PX * aspectRatio);\n\n        resultX = Math.min(resultX, Math.min(resultXHoriz, resultXVert));\n    }\n    return resultX;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Determines if this Edge is outside the inner margins of the given bounding\n * rectangle. The margins come inside the actual frame by SNAPRADIUS amount; \n * therefore, determines if the point is outside the inner \"margin\" frame.\n * \n */\n", "func_signal": "public boolean isOutsideMargin(Rect rect, float margin)", "code": "{\n\n    boolean result = false;\n\n    switch (this) {\n        case LEFT:\n            result = mCoordinate - rect.left < margin;\n            break;\n        case TOP:\n            result = mCoordinate - rect.top < margin;\n            break;\n        case RIGHT:\n            result = rect.right - mCoordinate < margin;\n            break;\n        case BOTTOM:\n            result = rect.bottom - mCoordinate < margin;\n            break;\n    }\n    return result;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Get the resulting x-position of the right edge of the crop window given\n * the handle's position and the image's bounding box and snap radius.\n * \n * @param x the x-position that the right edge is dragged to\n * @param imageRect the bounding box of the image that is being cropped\n * @param imageSnapRadius the snap distance to the image edge (in pixels)\n * @return the actual x-position of the right edge\n */\n", "func_signal": "private static float adjustRight(float x, Rect imageRect, float imageSnapRadius, float aspectRatio)", "code": "{\n\n    float resultX = x;\n\n    // If close to the edge\n    if (imageRect.right - x < imageSnapRadius)\n        resultX = imageRect.right;\n\n    else\n    {\n        // Select the maximum of the three possible values to use\n        float resultXHoriz = Float.NEGATIVE_INFINITY;\n        float resultXVert = Float.NEGATIVE_INFINITY;\n\n        // Checks if the window is too small horizontally\n        if (x <= Edge.LEFT.getCoordinate() + MIN_CROP_LENGTH_PX)\n            resultXHoriz = Edge.LEFT.getCoordinate() + MIN_CROP_LENGTH_PX;\n\n        // Checks if the window is too small vertically\n        if (((x - Edge.LEFT.getCoordinate()) / aspectRatio) <= MIN_CROP_LENGTH_PX) {\n            resultXVert = Edge.LEFT.getCoordinate() + (MIN_CROP_LENGTH_PX * aspectRatio);\n        }\n\n        resultX = Math.max(resultX, Math.max(resultXHoriz, resultXVert));\n\n    }\n\n    return resultX;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Determines if this Edge is outside the image frame of the given bounding\n * rectangle.\n */\n", "func_signal": "public boolean isOutsideFrame(Rect rect)", "code": "{\n\n    double margin = 0;\n    boolean result = false;\n\n    switch (this) {\n        case LEFT:\n            result = mCoordinate - rect.left < margin;\n            break;\n        case TOP:\n            result = mCoordinate - rect.top < margin;\n            break;\n        case RIGHT:\n            result = rect.right - mCoordinate < margin;\n            break;\n        case BOTTOM:\n            result = rect.bottom - mCoordinate < margin;\n            break;\n    }\n    return result;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Get the resulting y-position of the bottom edge of the crop window given\n * the handle's position and the image's bounding box and snap radius.\n * \n * @param y the x-position that the bottom edge is dragged to\n * @param imageRect the bounding box of the image that is being cropped\n * @param imageSnapRadius the snap distance to the image edge (in pixels)\n * @return the actual y-position of the bottom edge\n */\n", "func_signal": "private static float adjustBottom(float y, Rect imageRect, float imageSnapRadius, float aspectRatio)", "code": "{\n\n    float resultY = y;\n\n    if (imageRect.bottom - y < imageSnapRadius)\n        resultY = imageRect.bottom;\n    else\n    {\n        // Select the maximum of the three possible values to use\n        float resultYVert = Float.NEGATIVE_INFINITY;\n        float resultYHoriz = Float.NEGATIVE_INFINITY;\n\n        // Checks if the window is too small vertically\n        if (y <= Edge.TOP.getCoordinate() + MIN_CROP_LENGTH_PX)\n            resultYVert = Edge.TOP.getCoordinate() + MIN_CROP_LENGTH_PX;\n\n        // Checks if the window is too small horizontally\n        if (((y - Edge.TOP.getCoordinate()) * aspectRatio) <= MIN_CROP_LENGTH_PX)\n            resultYHoriz = Edge.TOP.getCoordinate() + (MIN_CROP_LENGTH_PX / aspectRatio);\n\n        resultY = Math.max(resultY, Math.max(resultYHoriz, resultYVert));\n    }\n\n    return resultY;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Get the resulting y-position of the top edge of the crop window given the\n * handle's position and the image's bounding box and snap radius.\n * \n * @param y the x-position that the top edge is dragged to\n * @param imageRect the bounding box of the image that is being cropped\n * @param imageSnapRadius the snap distance to the image edge (in pixels)\n * @return the actual y-position of the top edge\n */\n", "func_signal": "private static float adjustTop(float y, Rect imageRect, float imageSnapRadius, float aspectRatio)", "code": "{\n\n    float resultY = y;\n\n    if (y - imageRect.top < imageSnapRadius)\n        resultY = imageRect.top;\n\n    else\n    {\n        // Select the minimum of the three possible values to use\n        float resultYVert = Float.POSITIVE_INFINITY;\n        float resultYHoriz = Float.POSITIVE_INFINITY;\n\n        // Checks if the window is too small vertically\n        if (y >= Edge.BOTTOM.getCoordinate() - MIN_CROP_LENGTH_PX)\n            resultYHoriz = Edge.BOTTOM.getCoordinate() - MIN_CROP_LENGTH_PX;\n\n        // Checks if the window is too small horizontally\n        if (((Edge.BOTTOM.getCoordinate() - y) * aspectRatio) <= MIN_CROP_LENGTH_PX)\n            resultYVert = Edge.BOTTOM.getCoordinate() - (MIN_CROP_LENGTH_PX / aspectRatio);\n\n        resultY = Math.min(resultY, Math.min(resultYHoriz, resultYVert));\n\n    }\n\n    return resultY;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Returns whether or not you can re-scale the image based on whether any edge would be out of bounds.\n * Checks all the edges for a possibility of jumping out of bounds.\n * \n * @param Edge the Edge that is about to be expanded\n * @param imageRect the rectangle of the picture\n * @param aspectratio the desired aspectRatio of the picture.\n * \n * @return whether or not the new image would be out of bounds.\n */\n", "func_signal": "public boolean isNewRectangleOutOfBounds(Edge edge, Rect imageRect, float aspectRatio)", "code": "{\n\n    float offset = edge.snapOffset(imageRect);\n    \n    switch (this) {\n        case LEFT:\n            if (edge.equals(Edge.TOP)) {\n                float top = imageRect.top;\n                float bottom = Edge.BOTTOM.getCoordinate() - offset;\n                float right = Edge.RIGHT.getCoordinate();\n                float left = AspectRatioUtil.calculateLeft(top, right, bottom, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n                \n            }\n            else if (edge.equals(Edge.BOTTOM)) {\n                float bottom = imageRect.bottom;\n                float top = Edge.TOP.getCoordinate() - offset;\n                float right = Edge.RIGHT.getCoordinate();\n                float left = AspectRatioUtil.calculateLeft(top, right, bottom, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n            }\n            break;\n            \n        case TOP:\n            if (edge.equals(Edge.LEFT)) {\n                float left = imageRect.left;\n                float right = Edge.RIGHT.getCoordinate() - offset;\n                float bottom = Edge.BOTTOM.getCoordinate();\n                float top = AspectRatioUtil.calculateTop(left, right, bottom, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n                \n            }\n            else if (edge.equals(Edge.RIGHT)) {\n                float right = imageRect.right;\n                float left = Edge.LEFT.getCoordinate() - offset;\n                float bottom = Edge.BOTTOM.getCoordinate();\n                float top = AspectRatioUtil.calculateTop(left, right, bottom, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n            }\n            break; \n            \n        case RIGHT:\n            if (edge.equals(Edge.TOP)) {\n                float top = imageRect.top;\n                float bottom = Edge.BOTTOM.getCoordinate() - offset;\n                float left = Edge.LEFT.getCoordinate();\n                float right = AspectRatioUtil.calculateRight(left, top, bottom, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n                \n            }\n            else if (edge.equals(Edge.BOTTOM)) {\n                float bottom = imageRect.bottom;\n                float top = Edge.TOP.getCoordinate() - offset;\n                float left = Edge.LEFT.getCoordinate();\n                float right = AspectRatioUtil.calculateRight(left, top, bottom, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n            }\n            break;\n            \n            \n        case BOTTOM:\n            if (edge.equals(Edge.LEFT)) {\n                float left = imageRect.left;\n                float right = Edge.RIGHT.getCoordinate() - offset;\n                float top = Edge.TOP.getCoordinate();\n                float bottom = AspectRatioUtil.calculateBottom(left, top, right, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n                \n            }\n            else if (edge.equals(Edge.RIGHT)) {\n                float right = imageRect.right;\n                float left = Edge.LEFT.getCoordinate() - offset;\n                float top = Edge.TOP.getCoordinate();\n                float bottom = AspectRatioUtil.calculateBottom(left, top, right, aspectRatio);\n                \n                return isOutOfBounds(top, left, bottom, right, imageRect);\n                \n            }\n            break; \n    }\n    return true;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Returns the potential snap offset of snaptoRect, without changing the coordinate.\n * \n * @param imageRect the bounding rectangle of the image to snap to\n * @return the amount (in pixels) that this coordinate was changed (i.e. the\n *         new coordinate minus the old coordinate value)\n */\n", "func_signal": "public float snapOffset(Rect imageRect)", "code": "{\n\n    final float oldCoordinate = mCoordinate;\n    float newCoordinate = oldCoordinate;\n\n    switch (this) {\n        case LEFT:\n            newCoordinate = imageRect.left;\n            break;\n        case TOP:\n            newCoordinate = imageRect.top;\n            break;\n        case RIGHT:\n            newCoordinate = imageRect.right;\n            break;\n        case BOTTOM:\n            newCoordinate = imageRect.bottom;\n            break;\n    }\n\n    final float offset = newCoordinate - oldCoordinate;\n    return offset;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Sets the Edge to the given x-y coordinate but also adjusting for snapping\n * to the image bounds and parent view border constraints.\n * \n * @param x the x-coordinate\n * @param y the y-coordinate\n * @param imageRect the bounding rectangle of the image\n * @param imageSnapRadius the radius (in pixels) at which the edge should\n *            snap to the image\n */\n", "func_signal": "public void adjustCoordinate(float x, float y, Rect imageRect, float imageSnapRadius, float aspectRatio)", "code": "{\n\n    switch (this) {\n        case LEFT:\n            mCoordinate = adjustLeft(x, imageRect, imageSnapRadius, aspectRatio);\n            break;\n        case TOP:\n            mCoordinate = adjustTop(y, imageRect, imageSnapRadius, aspectRatio);\n            break;\n        case RIGHT:\n            mCoordinate = adjustRight(x, imageRect, imageSnapRadius, aspectRatio);\n            break;\n        case BOTTOM:\n            mCoordinate = adjustBottom(y, imageRect, imageSnapRadius, aspectRatio);\n            break;\n    }\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Gets a float array of the 2D coordinates representing a rectangles\n * corners.\n * The order of the corners in the float array is:\n * 0------->1\n * ^        |\n * |        |\n * |        v\n * 3<-------2\n *\n * @param r the rectangle to get the corners of\n * @return the float array of corners (8 floats)\n */\n", "func_signal": "public static float[] getCornersFromRect(RectF r)", "code": "{\n    return new float[]{\n            r.left, r.top,\n            r.right, r.top,\n            r.right, r.bottom,\n            r.left, r.bottom\n    };\n}", "path": "photogallery\\src\\main\\java\\com\\yalantis\\ucrop\\util\\RectUtils.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Creates the Paint object for drawing the crop window border.\n * \n * @param context the Context\n * @return new Paint object\n */\n", "func_signal": "public static Paint newBorderPaint(Context context)", "code": "{\n\n    // Set the line thickness for the crop window border.\n    final float lineThicknessPx = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,\n                                                            DEFAULT_LINE_THICKNESS_DP,\n                                                            context.getResources().getDisplayMetrics());\n\n    final Paint borderPaint = new Paint();\n    borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));\n    borderPaint.setStrokeWidth(lineThicknessPx);\n    borderPaint.setStyle(Paint.Style.STROKE);\n\n    return borderPaint;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\util\\PaintUtil.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Gets a float array of two lengths representing a rectangles width and height\n * The order of the corners in the input float array is:\n * 0------->1\n * ^        |\n * |        |\n * |        v\n * 3<-------2\n *\n * @param corners the float array of corners (8 floats)\n * @return the float array of width and height (2 floats)\n */\n", "func_signal": "public static float[] getRectSidesFromCorners(float[] corners)", "code": "{\n    return new float[]{(float) Math.sqrt(Math.pow(corners[0] - corners[2], 2) + Math.pow(corners[1] - corners[3], 2)),\n            (float) Math.sqrt(Math.pow(corners[2] - corners[4], 2) + Math.pow(corners[3] - corners[5], 2))};\n}", "path": "photogallery\\src\\main\\java\\com\\yalantis\\ucrop\\util\\RectUtils.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Snap this Edge to the given image boundaries.\n * \n * @param imageRect the bounding rectangle of the image to snap to\n * @return the amount (in pixels) that this coordinate was changed (i.e. the\n *         new coordinate minus the old coordinate value)\n */\n", "func_signal": "public float snapToRect(Rect imageRect)", "code": "{\n\n    final float oldCoordinate = mCoordinate;\n\n    switch (this) {\n        case LEFT:\n            mCoordinate = imageRect.left;\n            break;\n        case TOP:\n            mCoordinate = imageRect.top;\n            break;\n        case RIGHT:\n            mCoordinate = imageRect.right;\n            break;\n        case BOTTOM:\n            mCoordinate = imageRect.bottom;\n            break;\n    }\n\n    final float offset = mCoordinate - oldCoordinate;\n    return offset;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\cropwindow\\edge\\Edge.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * this methord must be last call\n *\n * @param pickMode\n * @return\n */\n", "func_signal": "public PickConfig.Builder pickMode(int pickMode)", "code": "{\n    this.pickMode = pickMode;\n    return this;\n}", "path": "photogallery\\src\\main\\java\\com\\wq\\photo\\widget\\PickConfig.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * DIP\u8f6c\u6362\u6210PX\n *\n * @param context\n * @param dipValue\n * @return\n */\n", "func_signal": "public static int dip2px(Context context, float dipValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dipValue * scale + 0.5f);\n}", "path": "photogallery\\src\\main\\java\\com\\wq\\photo\\adapter\\PhotoAdapter.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * DIP\u8f6c\u6362\u6210PX\n *\n * @param context\n * @param dipValue\n * @return\n */\n", "func_signal": "public static int dip2px(Context context, float dipValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dipValue * scale + 0.5f);\n}", "path": "photogallery\\src\\main\\java\\com\\wq\\photo\\adapter\\FloderAdapter.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * Creates the Paint object for drawing the crop window guidelines.\n * \n * @return the new Paint object\n */\n", "func_signal": "public static Paint newGuidelinePaint()", "code": "{\n\n    final Paint paint = new Paint();\n    paint.setColor(Color.parseColor(SEMI_TRANSPARENT));\n    paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);\n\n    return paint;\n}", "path": "photogallery\\src\\main\\java\\com\\edmodo\\cropper\\util\\PaintUtil.java", "repo_name": "wqandroid/wqgallery", "stars": 427, "license": "None", "language": "java", "size": 21059}
{"docstring": "/**\n * \u683c\u5f0f\u5316url,\u66ff\u6362\u8def\u5f84\u53c2\u6570\u7b49\u3002\n *\n * @param shortUrl\n * @return\n */\n", "func_signal": "private String parseUrl(String shortUrl)", "code": "{\n\t// \u66ff\u6362url\u4e2d\u7684\u53c2\u6570\n\tshortUrl = getCommonParam(shortUrl);\n\tif (shortUrl.startsWith(\"http\")) {\n\t\treturn shortUrl;\n\t}\n\tif (rooUrlEndWithSlash == shortUrl.startsWith(\"/\")) {\n\t\tif (rooUrlEndWithSlash) {\n\t\t\tshortUrl = shortUrl.replaceFirst(\"/\", \"\");\n\t\t} else {\n\t\t\tshortUrl = \"/\" + shortUrl;\n\t\t}\n\t}\n\treturn rootUrl + shortUrl;\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\ApiTest.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u83b7\u53d6excel\u8868\u6240\u6709sheet\u6570\u636e\n * @param clz\n * @param path\n * @return\n */\n", "func_signal": "public static <T> List<T> readExcel(Class<T> clz, String path)", "code": "{\n\tSystem.out.println(path);\n\tif (null == path || \"\".equals(path)) {\n\t\treturn null;\n\t}\n\tInputStream is;\n\tWorkbook xssfWorkbook;\n\ttry {\n\t\tis = new FileInputStream(path);\n\t\tif (path.endsWith(\".xls\")) {\n\t\t\txssfWorkbook = new HSSFWorkbook(is);\n\t\t} else {\n\t\t\txssfWorkbook = new XSSFWorkbook(is);\n\t\t}\n\t\tis.close();\n\t\tint sheetNumber = xssfWorkbook.getNumberOfSheets();\n\t\tList<T> allData = new ArrayList<T>();\n\t\tfor (int i = 0; i < sheetNumber; i++) {\n\t\t\tallData.addAll(transToObject(clz, xssfWorkbook,\n\t\t\t\t\txssfWorkbook.getSheetName(i)));\n\t\t}\n\t\treturn allData;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tthrow new RuntimeException(\"\u8f6c\u6362excel\u6587\u4ef6\u5931\u8d25\uff1a\" + e.getMessage());\n\t}\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\ExcelUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u7ec4\u4ef6\u9884\u53c2\u6570\uff08\u5904\u7406__fucn()\u4ee5\u53ca${xxxx}\uff09\n * \n * @param apiDataBean\n * @return\n */\n", "func_signal": "protected String buildParam(String param)", "code": "{\n\t// \u5904\u7406${}\n\tparam = getCommonParam(param);\n\t// Pattern pattern = Pattern.compile(\"__(.*?)\\\\(.*\\\\)\");// \u53d6__\u5f00\u5934\u7684\u51fd\u6570\u6b63\u5219\u8868\u8fbe\u5f0f\n\t// Pattern pattern =\n\t// Pattern.compile(\"__(\\\\w*?)\\\\((\\\\w*,)*(\\\\w*)*\\\\)\");// \u53d6__\u5f00\u5934\u7684\u51fd\u6570\u6b63\u5219\u8868\u8fbe\u5f0f\n\tMatcher m = funPattern.matcher(param);\n\twhile (m.find()) {\n\t\tString funcName = m.group(1);\n\t\tString args = m.group(2);\n\t\tString value;\n\t\t// bodyfile\u5c5e\u4e8e\u7279\u6b8a\u60c5\u51b5\uff0c\u4e0d\u8fdb\u884c\u5339\u914d\uff0c\u5728post\u8bf7\u6c42\u7684\u65f6\u5019\u8fdb\u884c\u5904\u7406\n\t\tif (FunctionUtil.isFunction(funcName)\n\t\t\t\t&& !funcName.equals(\"bodyfile\")) {\n\t\t\t// \u5c5e\u4e8e\u51fd\u6570\u52a9\u624b\uff0c\u8c03\u7528\u90a3\u4e2a\u51fd\u6570\u52a9\u624b\u83b7\u53d6\u3002\n\t\t\tvalue = FunctionUtil.getValue(funcName, args.split(\",\"));\n\t\t\t// \u89e3\u6790\u5bf9\u5e94\u7684\u51fd\u6570\u5931\u8d25\n\t\t\tAssert.assertNotNull(value,\n\t\t\t\t\tString.format(\"\u89e3\u6790\u51fd\u6570\u5931\u8d25\uff1a%s\u3002\", funcName));\n\t\t\tparam = StringUtil.replaceFirst(param, m.group(), value);\n\t\t}\n\t}\n\treturn param;\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\TestBase.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u6839\u636e\u914d\u7f6e\u8bfb\u53d6\u6d4b\u8bd5\u7528\u4f8b\n * \n * @param clz\n *            \u9700\u8981\u8f6c\u6362\u7684\u7c7b\n * @param excelPaths\n *            \u6240\u6709excel\u7684\u8def\u5f84\u914d\u7f6e\n * @param excelName\n *            \u672c\u6b21\u9700\u8981\u8fc7\u6ee4\u7684excel\u6587\u4ef6\u540d\n * @param sheetName\n *            \u672c\u6b21\u9700\u8981\u8fc7\u6ee4\u7684sheet\u540d\n * @return \u8fd4\u56de\u6570\u636e\n * @throws DocumentException\n */\n", "func_signal": "protected <T extends BaseBean> List<T> readExcelData(Class<T> clz,\n\t\tString[] excelPathArr, String[] sheetNameArr)\n\t\tthrows DocumentException", "code": "{\n\tList<T> allExcelData = new ArrayList<T>();// excel\u6587\u4ef6\u6578\u7d44\n\tList<T> temArrayList = new ArrayList<T>();\n\tfor (String excelPath : excelPathArr) {\n\t\tFile file = Paths.get(System.getProperty(\"user.dir\"),\n\t\t\t\texcelPath).toFile();\n\t\ttemArrayList.clear();\n\t\tif (sheetNameArr.length == 0 || sheetNameArr[0] == \"\") {\n\t\t\ttemArrayList = ExcelUtil.readExcel(clz, file.getAbsolutePath());\n\t\t} else {\n\t\t\tfor (String sheetName : sheetNameArr) {\n\t\t\t\ttemArrayList.addAll(ExcelUtil.readExcel(clz,\n\t\t\t\t\t\tfile.getAbsolutePath(), sheetName));\n\t\t\t}\n\t\t}\n\t\ttemArrayList.forEach((bean) -> {\n\t\t\tbean.setExcelName(file.getName());\n\t\t});\n\t\tallExcelData.addAll(temArrayList); // \u5c06excel\u6570\u636e\u6dfb\u52a0\u81f3list\n\t}\n\treturn allExcelData;\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\TestBase.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u6839\u636e\u914d\u7f6e\u751f\u6210\u6b63\u786e\u7684\u6b63\u5219\n * \n * @param fileConf\n * @return\n */\n", "func_signal": "private static String generatePattern(String fileConf)", "code": "{\n\tfileConf = fileConf.trim();\n\t// \u6839\u636e\u914d\u7f6e\u751f\u6210\u6b63\u786e\u7684\u6b63\u5219\n\tfileConf = fileConf.replace('*', '#');\n\tfileConf = fileConf.replaceAll(\"#\", \".*\");// \u5c06*\u53f7\u4e4b\u524d\u52a0\u4e0a.\n\n\treturn fileConf;\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\FileUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u83b7\u53d6\u516c\u5171\u6570\u636e\u6c60\u4e2d\u7684\u6570\u636e\n * \n * @param key\n *            \u516c\u5171\u6570\u636e\u7684key\n * @return \u5bf9\u5e94\u7684value\n */\n", "func_signal": "protected String getSaveData(String key)", "code": "{\n\tif (\"\".equals(key) || !saveDatas.containsKey(key)) {\n\t\treturn null;\n\t} else {\n\t\treturn saveDatas.get(key);\n\t}\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\TestBase.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u968f\u673a\u751f\u6210\u4e00\u4e2a\u6c49\u5b57\n * @return\n */\n", "func_signal": "protected static char getRandomHanZi()", "code": "{\n\tRandom ran = new Random();\n\treturn (char) (0x4e00 + ran.nextInt(HANZI_LENGTH));\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\RandomUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u83b7\u53d6\u683c\u5f0f\u5316\u540e\u7684\u503c\n * \n * @param sourchJson\n * @param key\n * @return\n */\n", "func_signal": "private String getBuildValue(String sourchJson, String key)", "code": "{\n\tkey = key.trim();\n\tMatcher funMatch = funPattern.matcher(key);\n\tif (key.startsWith(\"$.\")) {// jsonpath\n\t\tkey = JSONPath.read(sourchJson, key).toString();\n\t} else if (funMatch.find()) {\n\t\t// String args;\n\t\t// if (funMatch.group(2).startsWith(\"$.\")) {\n\t\t// args = JSONPath.read(sourchJson, funMatch.group(2)).toString();\n\t\t// } else {\n\t\t// args = funMatch.group(2);\n\t\t// }\n\t\tString args = funMatch.group(2);\n\t\tString[] argArr = args.split(\",\");\n\t\tfor (int index = 0; index < argArr.length; index++) {\n\t\t\tString arg = argArr[index];\n\t\t\tif (arg.startsWith(\"$.\")) {\n\t\t\t\targArr[index] = JSONPath.read(sourchJson, arg).toString();\n\t\t\t}\n\t\t}\n\t\tString value = FunctionUtil.getValue(funMatch.group(1), argArr);\n\t\tkey = StringUtil.replaceFirst(key, funMatch.group(), value);\n\n\t}\n\treturn key;\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\TestBase.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \n * @param sourceStr \u5f85\u66ff\u6362\u5b57\u7b26\u4e32\n * @param matchStr  \u5339\u914d\u5b57\u7b26\u4e32\n * @param replaceStr  \u76ee\u6807\u66ff\u6362\u5b57\u7b26\u4e32\n * @return\n */\n", "func_signal": "public static String replaceFirst(String sourceStr,String matchStr,String replaceStr)", "code": "{\n\tint index = sourceStr.indexOf(matchStr);\n\tint matLength = matchStr.length();\n\tint sourLength = sourceStr.length();\n\tString beginStr = sourceStr.substring(0,index);\n\tString endStr = sourceStr.substring(index+matLength,sourLength);\n\tsourceStr = beginStr+replaceStr+endStr;\n\treturn sourceStr;\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\StringUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u591a\u500b\u5339\u914d\u689d\u4ef6\u5339\u914d\u6587\u4ef6\uff08\u53bb\u91cd\uff09\n * \n * @param dir\n * @param fileConfArr\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static List<File> getFilesByConf(String dir, String fileConf)", "code": "{\n\tString[] fileConfArr = fileConf.split(\";\");// \u591a\u4e2a\u914d\u7f6e\u2018;\u2019\u5206\u5f00\n\n\tList<File> list = new ArrayList<File>();\n\tif (fileConfArr != null && fileConfArr.length > 0) {\n\t\tfor (String conftemp : fileConfArr) {\n\t\t\tint at = conftemp.lastIndexOf(\"/\");\n\t\t\tFile file = null;\n\t\t\tString fileContextPath = \"\";\n\t\t\tString contextPath = dir;// \u7edd\u5bf9\u76ee\u5f55\u8def\u5f84\n\t\t\tif (at > 0) {// \u76ee\u5f55\u90e8\u5206\n\t\t\t\tfileContextPath = fileConf.substring(0, at);\n\t\t\t}\n\t\t\tif (StringUtil.isNotEmpty(fileContextPath)) {\n\t\t\t\tcontextPath = contextPath + fileContextPath;\n\t\t\t}\n\t\t\tfile = new File(contextPath);\n\t\t\tString fileNameConf = conftemp.substring(at + 1,\n\t\t\t\t\tconftemp.length());// \u6587\u4ef6\u540d\u914d\u7f6e\n\t\t\tString fileConfTemp = generatePattern(fileNameConf);\n\t\t\tSystem.out.println(fileConfTemp);\n\n\t\t\tPattern p = Pattern.compile(fileConfTemp);\n\t\t\tArrayList<File> listtemp = filePattern(file, p);\n\t\t\tlist.addAll(listtemp);\n\t\t}\n\t}\n\n\treturn removeDuplicate(list);// \u53bb\u91cd\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\FileUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u63d0\u53d6json\u4e32\u4e2d\u7684\u503c\u4fdd\u5b58\u81f3\u516c\u5171\u6c60\u4e2d\n * \n * @param json\n *            \u5c06\u88ab\u63d0\u53d6\u7684json\u4e32\u3002\n * @param allSave\n *            \u6240\u6709\u5c06\u88ab\u4fdd\u5b58\u7684\u6570\u636e\uff1axx=$.jsonpath.xx;oo=$.jsonpath.oo\uff0c\u5c06$.jsonpath.\n *            xx\u63d0\u53d6\u51fa\u6765\u7684\u503c\u5b58\u653e\u81f3\u516c\u5171\u6c60\u7684xx\u4e2d\uff0c\u5c06$.jsonpath.oo\u63d0\u53d6\u51fa\u6765\u7684\u503c\u5b58\u653e\u81f3\u516c\u5171\u6c60\u7684oo\u4e2d\n */\n", "func_signal": "protected void saveResult(String json, String allSave)", "code": "{\n\tif (null == json || \"\".equals(json) || null == allSave\n\t\t\t|| \"\".equals(allSave)) {\n\t\treturn;\n\t}\n\tallSave = getCommonParam(allSave);\n\tString[] saves = allSave.split(\";\");\n\tString key, value;\n\tfor (String save : saves) {\n\t\t// key = save.split(\"=\")[0].trim();\n\t\t// value = JsonPath.read(json,\n\t\t// save.split(\"=\")[1].trim()).toString();\n\t\t// ReportUtil.log(String.format(\"\u5b58\u50a8\u516c\u5171\u53c2\u6570   %s\u503c\u4e3a\uff1a%s.\", key, value));\n\t\t// saveDatas.put(key, value);\n\n\t\tPattern pattern = Pattern.compile(\"([^;=]*)=([^;]*)\");\n\t\tMatcher m = pattern.matcher(save.trim());\n\t\twhile (m.find()) {\n\t\t\tkey = getBuildValue(json, m.group(1));\n\t\t\tvalue = getBuildValue(json, m.group(2));\n\n\t\t\tReportUtil.log(String.format(\"\u5b58\u50a8\u516c\u5171\u53c2\u6570   %s\u503c\u4e3a\uff1a%s.\", key, value));\n\t\t\tsaveDatas.put(key, value);\n\t\t}\n\t}\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\TestBase.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u6839\u636e\u6b63\u5219\u5339\u914d\u6b63\u786e\u7684\u6587\u4ef6\n * \n * @param file\n * @param p\n * @return\n */\n", "func_signal": "private static ArrayList<File> filePattern(File file, Pattern p)", "code": "{\n\tif (file == null) {\n\t\treturn null;\n\t}\n\tif (file.isFile()) {// \u5982\u679c\u662f\u6587\u4ef6\n\t\tMatcher fMatcher = p.matcher(file.getName());\n\t\tif (fMatcher.matches()) {\n\t\t\tArrayList<File> list = new ArrayList<File>();\n\t\t\tlist.add(file);\n\t\t\treturn list;\n\t\t}\n\t} else if (file.isDirectory()) {// \u662f\u76ee\u5f55\n\t\tFile[] files = file.listFiles();\n\t\tif (files != null && files.length > 0) {\n\t\t\tArrayList<File> list = new ArrayList<File>();\n\t\t\tfor (File f : files) {\n\t\t\t\tArrayList<File> rlist = filePattern(f, p);\n\t\t\t\tif (rlist != null) {\n\t\t\t\t\tlist.addAll(rlist);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn list;\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\FileUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u53d6\u516c\u5171\u53c2\u6570 \u5e76\u66ff\u6362\u53c2\u6570\n * \n * @param param\n * @return\n */\n", "func_signal": "protected String getCommonParam(String param)", "code": "{\n\tif (StringUtil.isEmpty(param)) {\n\t\treturn \"\";\n\t}\n\tMatcher m = replaceParamPattern.matcher(param);// \u53d6\u516c\u5171\u53c2\u6570\u6b63\u5219\n\twhile (m.find()) {\n\t\tString replaceKey = m.group(1);\n\t\tString value;\n\t\t// \u4ece\u516c\u5171\u53c2\u6570\u6c60\u4e2d\u83b7\u53d6\u503c\n\t\tvalue = getSaveData(replaceKey);\n\t\t// \u5982\u679c\u516c\u5171\u53c2\u6570\u6c60\u4e2d\u672a\u80fd\u627e\u5230\u5bf9\u5e94\u7684\u503c\uff0c\u8be5\u7528\u4f8b\u5931\u8d25\u3002\n\t\tAssert.assertNotNull(value,\n\t\t\t\tString.format(\"\u683c\u5f0f\u5316\u53c2\u6570\u5931\u8d25\uff0c\u516c\u5171\u53c2\u6570\u4e2d\u627e\u4e0d\u5230%s\u3002\", replaceKey));\n\t\tparam = param.replace(m.group(), value);\n\t}\n\treturn param;\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\TestBase.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u968f\u673a\u751f\u6210\u4e00\u4e2a\u5b57\u6bcd\u6216\u8005\u6570\u5b57\n * @return\n */\n", "func_signal": "protected static char getRandomStr()", "code": "{\n\tRandom ran = new Random();\n\treturn (char) randomBase.charAt(ran.nextInt(62));\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\RandomUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u751f\u6210\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\n * @param arrLength  \u6570\u7ec4\u957f\u5ea6\n * @param paramStr   \n * @return\n */\n", "func_signal": "public static String generateStrArr(int arrLength, String paramStr)", "code": "{\n\tStringBuffer sBuffer = new StringBuffer();\n\tfor (int i = 0; i < arrLength; i++) {\n\t\tsBuffer.append(\"\\\"\").append(paramStr).append(\"\\\"\").append(\",\");\n\t}\n\tint leng = sBuffer.toString().length();\n\treturn sBuffer.toString().substring(0, leng-1);\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\RandomUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6d4b\u8bd5\u6570\u636e\n *\n * @throws Exception\n */\n", "func_signal": "@Parameters(\"envName\")\n@BeforeSuite\npublic void init(@Optional(\"api-config.xml\") String envName) throws Exception", "code": "{\n\tString configFilePath = Paths.get(System.getProperty(\"user.dir\"), envName).toString();\n\tReportUtil.log(\"api config path:\" + configFilePath);\n\tapiConfig = new ApiConfig(configFilePath);\n\t// \u83b7\u53d6\u57fa\u7840\u6570\u636e\n\trootUrl = apiConfig.getRootUrl();\n\trooUrlEndWithSlash = rootUrl.endsWith(\"/\");\n\n\t// \u8bfb\u53d6 param\uff0c\u5e76\u5c06\u503c\u4fdd\u5b58\u5230\u516c\u5171\u6570\u636emap\n\tMap<String, String> params = apiConfig.getParams();\n\tsetSaveDates(params);\n\n\tList<Header> headers = new ArrayList<Header>();\n\tapiConfig.getHeaders().forEach((key, value) -> {\n\t\tHeader header = new BasicHeader(key, value);\n\t\tif(!requestByFormData && key.equalsIgnoreCase(\"content-type\") && value.toLowerCase().contains(\"form-data\")){\n\t\t\trequestByFormData=true;\n\t\t}\n\t\theaders.add(header);\n\t});\n\tpublicHeaders = headers.toArray(new Header[headers.size()]);\n\tclient = new SSLClient();\n\tclient.getParams().setParameter(\n\t\t\tCoreConnectionPNames.CONNECTION_TIMEOUT, 60000); // \u8bf7\u6c42\u8d85\u65f6\n\tclient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, 60000); // \u8bfb\u53d6\u8d85\u65f6\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\ApiTest.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u83b7\u53d6excel\u8868\u6307\u5b9asheet\u8868\u6570\u636e\n * @param clz\n * @param path\n * @param sheetName\n * @return\n */\n", "func_signal": "public static <T> List<T> readExcel(Class<T> clz, String path,\n\t\tString sheetName)", "code": "{\n\tif (null == path || \"\".equals(path)) {\n\t\treturn null;\n\t}\n\tInputStream is;\n\tWorkbook xssfWorkbook;\n\ttry {\n\t\tis = new FileInputStream(path);\n\t\tif (path.endsWith(\".xls\")) {\n\t\t\txssfWorkbook = new HSSFWorkbook(is);\n\t\t} else {\n\t\t\txssfWorkbook = new XSSFWorkbook(is);\n\t\t}\n\t\tis.close();\n\t\treturn transToObject(clz, xssfWorkbook, sheetName);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tthrow new RuntimeException(\"\u8f6c\u6362excel\u6587\u4ef6\u5931\u8d25\uff1a\" + e.getMessage());\n\t}\n\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\ExcelUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u683c\u5f0f\u5316\u53c2\u6570\uff0c\u5982\u679c\u662ffrom-data\u683c\u5f0f\u5219\u5c06\u53c2\u6570\u5c01\u88c5\u5230MultipartEntity\u5426\u5219\u5c01\u88c5\u5230StringEntity\n * @param param \u53c2\u6570\n * @param formData \u662f\u5426\u4f7f\u7528form-data\u683c\u5f0f\n * @return\n * @throws UnsupportedEncodingException\n */\n", "func_signal": "private HttpEntity parseEntity(String param,boolean formData) throws UnsupportedEncodingException", "code": "{\n\tif(formData){\n\t\tMap<String, String> paramMap = JSON.parseObject(param,\n\t\t\t\tHashMap.class);\n\t\tMultipartEntity multiEntity = new MultipartEntity();\n\t\tfor (String key : paramMap.keySet()) {\n\t\t\tString value = paramMap.get(key);\n\t\t\tMatcher m = funPattern.matcher(value);\n\t\t\tif (m.matches() && m.group(1).equals(\"bodyfile\")) {\n\t\t\t\tvalue = m.group(2);\n\t\t\t\tmultiEntity.addPart(key, new FileBody(new File(value)));\n\t\t\t} else {\n\t\t\t\tmultiEntity.addPart(key, new StringBody(paramMap.get(key)));\n\t\t\t}\n\t\t}\n\t\treturn multiEntity;\n\t}else{\n\t\treturn new StringEntity(param, \"UTF-8\");\n\t}\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\ApiTest.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u5c01\u88c5\u8bf7\u6c42\u65b9\u6cd5\n *\n * @param url\n *            \u8bf7\u6c42\u8def\u5f84\n * @param method\n *            \u8bf7\u6c42\u65b9\u6cd5\n * @param param\n *            \u8bf7\u6c42\u53c2\u6570\n * @return \u8bf7\u6c42\u65b9\u6cd5\n * @throws UnsupportedEncodingException\n */\n", "func_signal": "private HttpUriRequest parseHttpRequest(String url, String method, String param) throws UnsupportedEncodingException", "code": "{\n\t// \u5904\u7406url\n\turl = parseUrl(url);\n\tReportUtil.log(\"method:\" + method);\n\tReportUtil.log(\"url:\" + url);\n\tReportUtil.log(\"param:\" + param.replace(\"\\r\\n\", \"\").replace(\"\\n\", \"\"));\n\t//upload\u8868\u793a\u4e0a\u4f20\uff0c\u4e5f\u662f\u4f7f\u7528post\u8fdb\u884c\u8bf7\u6c42\n\tif (\"post\".equalsIgnoreCase(method) || \"upload\".equalsIgnoreCase(method)) {\n\t\t// \u5c01\u88c5post\u65b9\u6cd5\n\t\tHttpPost postMethod = new HttpPost(url);\n\t\tpostMethod.setHeaders(publicHeaders);\n\t\t//\u5982\u679c\u8bf7\u6c42\u5934\u7684content-type\u7684\u503c\u5305\u542bform-data \u6216\u8005 \u8bf7\u6c42\u65b9\u6cd5\u4e3aupload(\u4e0a\u4f20)\u65f6\u91c7\u7528MultipartEntity\u5f62\u5f0f\n\t\tHttpEntity entity  = parseEntity(param,requestByFormData || \"upload\".equalsIgnoreCase(method));\n\t\tpostMethod.setEntity(entity);\n\t\treturn postMethod;\n\t} else if (\"put\".equalsIgnoreCase(method)) {\n\t\t// \u5c01\u88c5put\u65b9\u6cd5\n\t\tHttpPut putMethod = new HttpPut(url);\n\t\tputMethod.setHeaders(publicHeaders);\n\t\tHttpEntity entity  = parseEntity(param,requestByFormData );\n\t\tputMethod.setEntity(entity);\n\t\treturn putMethod;\n\t} else if (\"delete\".equalsIgnoreCase(method)) {\n\t\t// \u5c01\u88c5delete\u65b9\u6cd5\n\t\tHttpDelete deleteMethod = new HttpDelete(url);\n\t\tdeleteMethod.setHeaders(publicHeaders);\n\t\treturn deleteMethod;\n\t} else {\n\t\t// \u5c01\u88c5get\u65b9\u6cd5\n\t\tHttpGet getMethod = new HttpGet(url);\n\t\tgetMethod.setHeaders(publicHeaders);\n\t\treturn getMethod;\n\t}\n}", "path": "src\\test\\java\\test\\com\\sen\\api\\ApiTest.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * \u968f\u673a\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u4e2d\u6587\u7684\u5b57\u7b26\u4e32\n * @param length\n * @return\n */\n", "func_signal": "public static String getRandomText(int length)", "code": "{\n\tRandom random = new Random();\n\tStringBuffer sb = new StringBuffer();\n\tfor (int i = 0; i < length; i++) {\n\t\tint randomNum = random.nextInt(2);\n\t\tchar ch = 0 ;\n\t\tif (randomNum==0) {//\u751f\u6210\u6c49\u5b57\n\t\t\tch = getRandomHanZi();\n\t\t}else if (randomNum==1) {//\u751f\u6210\u6570\u5b57\u6216\u8005\u5b57\u7b26\n\t\t\tch = getRandomStr();\n\t\t}\n\t\tsb.append(String.valueOf(ch));\n\t}\n\treturn sb.toString();\n}", "path": "src\\main\\java\\com\\sen\\api\\utils\\RandomUtil.java", "repo_name": "ChenSen5/api_autotest", "stars": 320, "license": "None", "language": "java", "size": 832}
{"docstring": "/**\n * Show the correct ListView and hide the other, or hide both and show the\n * empty view.\n */\n", "func_signal": "private void chooseListToShow()", "code": "{\n\tmDateOrderedListView.setVisibility(View.GONE);\n\tmSizeOrderedListView.setVisibility(View.GONE);\n\n\tif (mDateSortedCursor == null || mDateSortedCursor.getCount() == 0) {\n\t    mEmptyView.setVisibility(View.VISIBLE);\n\t} else {\n\t    mEmptyView.setVisibility(View.GONE);\n\t    activeListView().setVisibility(View.VISIBLE);\n\t    activeListView().invalidateViews(); // ensure checkboxes get updated\n\t}\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "// expression <- ( expression ) | statement [AND_OR ( expression ) |\n// statement] *\n// | statement [AND_OR expression]*\n", "func_signal": "private static void parseExpression(Lexer lexer)", "code": "{\n\tfor (;;) {\n\t    // ( expression )\n\t    if (lexer.currentToken() == Lexer.TOKEN_OPEN_PAREN) {\n\t\tlexer.advance();\n\t\tparseExpression(lexer);\n\t\tif (lexer.currentToken() != Lexer.TOKEN_CLOSE_PAREN) {\n\t\t    throw new IllegalArgumentException(\n\t\t\t    \"syntax error, unmatched parenthese\");\n\t\t}\n\t\tlexer.advance();\n\t    } else {\n\t\t// statement\n\t\tparseStatement(lexer);\n\t    }\n\t    if (lexer.currentToken() != Lexer.TOKEN_AND_OR) {\n\t\tbreak;\n\t    }\n\t    lexer.advance();\n\t}\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\Helpers.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Send an Intent to open the download currently pointed to by the given\n * cursor.\n */\n", "func_signal": "private void openCurrentDownload(Cursor cursor)", "code": "{\n\tUri localUri = Uri.parse(cursor.getString(mLocalUriColumnId));\n\ttry {\n\t    getContentResolver().openFileDescriptor(localUri, \"r\").close();\n\t} catch (FileNotFoundException exc) {\n\t    Log.d(LOG_TAG,\n\t\t    \"Failed to open download \" + cursor.getLong(mIdColumnId),\n\t\t    exc);\n\t    showFailedDialog(cursor.getLong(mIdColumnId),\n\t\t    getString(R.string.dialog_file_missing_body));\n\t    return;\n\t} catch (IOException exc) {\n\t    // close() failed, not a problem\n\t}\n\n\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\tintent.setDataAndType(localUri, cursor.getString(mMediaTypeColumnId));\n\tintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n\t\t| Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\ttry {\n\t    startActivity(intent);\n\t} catch (ActivityNotFoundException ex) {\n\t    Toast.makeText(this, R.string.download_no_application_title,\n\t\t    Toast.LENGTH_LONG).show();\n\t}\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * @return an OnClickListener to pause the given downloadId from the\n *         Download Manager\n */\n", "func_signal": "private DialogInterface.OnClickListener getPauseClickHandler(\n\t    final long downloadId)", "code": "{\n\treturn new DialogInterface.OnClickListener() {\n\t    @Override\n\t    public void onClick(DialogInterface dialog, int which) {\n\t\tmDownloadManager.pauseDownload(downloadId);\n\t    }\n\t};\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * @return an OnClickListener to delete the given downloadId from the\n *         Download Manager\n */\n", "func_signal": "private DialogInterface.OnClickListener getDeleteClickHandler(\n\t    final long downloadId)", "code": "{\n\treturn new DialogInterface.OnClickListener() {\n\t    @Override\n\t    public void onClick(DialogInterface dialog, int which) {\n\t\tdeleteDownload(downloadId);\n\t    }\n\t};\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * @return the appropriate error message for the failed download pointed to\n *         by cursor\n */\n", "func_signal": "private String getErrorMessage(Cursor cursor)", "code": "{\n\tswitch (cursor.getInt(mReasonColumndId)) {\n\tcase DownloadManager.ERROR_FILE_ALREADY_EXISTS:\n\t    if (isOnExternalStorage(cursor)) {\n\t\treturn getString(R.string.dialog_file_already_exists);\n\t    } else {\n\t\t// the download manager should always find a free filename for\n\t\t// cache downloads,\n\t\t// so this indicates a strange internal error\n\t\treturn getUnknownErrorMessage();\n\t    }\n\n\tcase DownloadManager.ERROR_INSUFFICIENT_SPACE:\n\t    if (isOnExternalStorage(cursor)) {\n\t\treturn getString(R.string.dialog_insufficient_space_on_external);\n\t    } else {\n\t\treturn getString(R.string.dialog_insufficient_space_on_cache);\n\t    }\n\n\tcase DownloadManager.ERROR_DEVICE_NOT_FOUND:\n\t    return getString(R.string.dialog_media_not_found);\n\n\tcase DownloadManager.ERROR_CANNOT_RESUME:\n\t    return getString(R.string.dialog_cannot_resume);\n\n\tdefault:\n\t    return getUnknownErrorMessage();\n\t}\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Check if any of the selected downloads have been deleted from the\n * downloads database, and remove such downloads from the selection.\n */\n", "func_signal": "private void checkSelectionForDeletedEntries()", "code": "{\n\t// gather all existing IDs...\n\tSet<Long> allIds = new HashSet<Long>();\n\tfor (mDateSortedCursor.moveToFirst(); !mDateSortedCursor.isAfterLast(); mDateSortedCursor\n\t\t.moveToNext()) {\n\t    allIds.add(mDateSortedCursor.getLong(mIdColumnId));\n\t}\n\n\t// ...and check if any selected IDs are now missing\n\tfor (Iterator<Long> iterator = mSelectedIds.iterator(); iterator\n\t\t.hasNext();) {\n\t    if (!allIds.contains(iterator.next())) {\n\t\titerator.remove();\n\t    }\n\t}\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Checks whether the filename looks legitimate\n */\n", "func_signal": "public static boolean isFilenameValid(String filename)", "code": "{\n\tfilename = filename.replaceFirst(\"/+\", \"/\"); // normalize leading\n\t\t\t\t\t\t     // slashes\n\treturn filename.startsWith(Environment.getDownloadCacheDirectory()\n\t\t.toString())\n\t\t|| filename.startsWith(Environment\n\t\t\t.getExternalStorageDirectory().toString());\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\Helpers.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * If no group is expanded in the date-sorted list, expand the first one.\n */\n", "func_signal": "private void ensureSomeGroupIsExpanded()", "code": "{\n\tmDateOrderedListView.post(new Runnable() {\n\t    public void run() {\n\t\tif (mDateSortedAdapter.getGroupCount() == 0) {\n\t\t    return;\n\t\t}\n\t\tfor (int group = 0; group < mDateSortedAdapter.getGroupCount(); group++) {\n\t\t    if (mDateOrderedListView.isGroupExpanded(group)) {\n\t\t\treturn;\n\t\t    }\n\t\t}\n\t\tmDateOrderedListView.expandGroup(0);\n\t    }\n\t});\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Delete a download from the Download Manager.\n */\n", "func_signal": "private void deleteDownload(long downloadId)", "code": "{\n\tif (moveToDownload(downloadId)) {\n\t    int status = mDateSortedCursor.getInt(mStatusColumnId);\n\t    boolean isComplete = status == DownloadManager.STATUS_SUCCESSFUL\n\t\t    || status == DownloadManager.STATUS_FAILED;\n\t    String localUri = mDateSortedCursor.getString(mLocalUriColumnId);\n\t    if (isComplete && localUri != null) {\n\t\tString path = Uri.parse(localUri).getPath();\n\t\tif (path.startsWith(Environment.getExternalStorageDirectory()\n\t\t\t.getPath())) {\n\t\t    mDownloadManager.markRowDeleted(downloadId);\n\t\t    return;\n\t\t}\n\t    }\n\t}\n\tmDownloadManager.remove(downloadId);\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Creates a filename (where the file should be saved) from info about a\n * download.\n */\n", "func_signal": "public static String generateSaveFile(Context context, String url,\n\t    String hint, String contentDisposition, String contentLocation,\n\t    String mimeType, int destination, long contentLength,\n\t    boolean isPublicApi) throws GenerateSaveFileError", "code": "{\n\tcheckCanHandleDownload(context, mimeType, destination, isPublicApi);\n\tif (destination == Downloads.DESTINATION_FILE_URI) {\n\t    return getPathForFileUri(url, hint, contentDisposition,\n\t\t    contentLocation, mimeType, destination, contentLength);\n\t} else {\n\t    return chooseFullPath(context, url, hint, contentDisposition,\n\t\t    contentLocation, mimeType, destination, contentLength);\n\t}\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\Helpers.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Called when a dialog for a pending download is canceled.\n */\n", "func_signal": "@Override\npublic void onCancel(DialogInterface dialog)", "code": "{\n\tmQueuedDownloadId = null;\n\tmQueuedDialog = null;\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * @return the root of the filesystem containing the given path\n */\n", "func_signal": "public static File getFilesystemRoot(String path)", "code": "{\n\tFile cache = Environment.getDownloadCacheDirectory();\n\tif (path.startsWith(cache.getPath())) {\n\t    return cache;\n\t}\n\tFile external = Environment.getExternalStorageDirectory();\n\tif (path.startsWith(external.getPath())) {\n\t    return external;\n\t}\n\tthrow new IllegalArgumentException(\n\t\t\"Cannot determine filesystem root for \" + path);\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\Helpers.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Set up the contents of the selection menu based on the current selection.\n */\n", "func_signal": "private void updateSelectionMenu()", "code": "{\n\tint deleteButtonStringId = R.string.delete_download;\n\tif (mSelectedIds.size() == 1) {\n\t    Cursor cursor = mDownloadManager.query(new DownloadManager.Query()\n\t\t    .setFilterById(mSelectedIds.iterator().next()));\n\t    try {\n\t\tcursor.moveToFirst();\n\t\tswitch (cursor.getInt(mStatusColumnId)) {\n\t\tcase DownloadManager.STATUS_FAILED:\n\t\t    deleteButtonStringId = R.string.delete_download;\n\t\t    break;\n\n\t\tcase DownloadManager.STATUS_PENDING:\n\t\t    deleteButtonStringId = R.string.remove_download;\n\t\t    break;\n\n\t\tcase DownloadManager.STATUS_PAUSED:\n\t\tcase DownloadManager.STATUS_RUNNING:\n\t\t    deleteButtonStringId = R.string.cancel_running_download;\n\t\t    break;\n\t\t}\n\t    } finally {\n\t\tcursor.close();\n\t    }\n\t}\n\tmSelectionDeleteButton.setText(deleteButtonStringId);\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * @return an OnClickListener to resume the given downloadId from the\n *         Download Manager\n */\n", "func_signal": "private DialogInterface.OnClickListener getResumeClickHandler(\n\t    final long downloadId)", "code": "{\n\treturn new DialogInterface.OnClickListener() {\n\t    @Override\n\t    public void onClick(DialogInterface dialog, int which) {\n\t\tmDownloadManager.resumeDownload(downloadId);\n\t    }\n\t};\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * @return an OnClickListener to restart the given downloadId in the\n *         Download Manager\n */\n", "func_signal": "private DialogInterface.OnClickListener getRestartClickHandler(\n\t    final long downloadId)", "code": "{\n\treturn new DialogInterface.OnClickListener() {\n\t    @Override\n\t    public void onClick(DialogInterface dialog, int which) {\n\t\tmDownloadManager.restartDownload(downloadId);\n\t    }\n\t};\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "// handle a click from the size-sorted list\n", "func_signal": "@Override\npublic void onItemClick(AdapterView<?> parent, View view, int position,\n\t    long id)", "code": "{\n\tmSizeSortedCursor.moveToPosition(position);\n\thandleItemClick(mSizeSortedCursor);\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "// statement <- COLUMN COMPARE VALUE\n// | COLUMN IS NULL\n", "func_signal": "private static void parseStatement(Lexer lexer)", "code": "{\n\t// both possibilities start with COLUMN\n\tif (lexer.currentToken() != Lexer.TOKEN_COLUMN) {\n\t    throw new IllegalArgumentException(\n\t\t    \"syntax error, expected column name\");\n\t}\n\tlexer.advance();\n\n\t// statement <- COLUMN COMPARE VALUE\n\tif (lexer.currentToken() == Lexer.TOKEN_COMPARE) {\n\t    lexer.advance();\n\t    if (lexer.currentToken() != Lexer.TOKEN_VALUE) {\n\t\tthrow new IllegalArgumentException(\n\t\t\t\"syntax error, expected quoted string\");\n\t    }\n\t    lexer.advance();\n\t    return;\n\t}\n\n\t// statement <- COLUMN IS NULL\n\tif (lexer.currentToken() == Lexer.TOKEN_IS) {\n\t    lexer.advance();\n\t    if (lexer.currentToken() != Lexer.TOKEN_NULL) {\n\t\tthrow new IllegalArgumentException(\n\t\t\t\"syntax error, expected NULL\");\n\t    }\n\t    lexer.advance();\n\t    return;\n\t}\n\n\t// didn't get anything good after COLUMN\n\tthrow new IllegalArgumentException(\"syntax error after column name\");\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\Helpers.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * @return the ListView that should currently be visible.\n */\n", "func_signal": "private ListView activeListView()", "code": "{\n\tif (mIsSortedBySize) {\n\t    return mSizeOrderedListView;\n\t}\n\treturn mDateOrderedListView;\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Requery the database and update the UI.\n */\n", "func_signal": "private void refresh()", "code": "{\n\tmDateSortedCursor.requery();\n\tmSizeSortedCursor.requery();\n\t// Adapters get notification of changes and update automatically\n}", "path": "app\\src\\main\\java\\com\\mozillaonline\\providers\\downloads\\ui\\DownloadList.java", "repo_name": "yxl/DownloadProvider", "stars": 422, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * Reconfigures MediaPlayer according to audio focus settings and\n * starts/restarts it. This method starts/restarts the MediaPlayer\n * respecting the current audio focus state. So if we have focus, it will\n * play normally; if we don't have focus, it will either leave the\n * MediaPlayer paused or set it to a low volume, depending on what is\n * allowed by the current focus settings. This method assumes mPlayer !=\n * null, so if you are calling it, you have to do so from a context where\n * you are sure this is the case.\n */\n", "func_signal": "private void configMediaPlayerState()", "code": "{\n    LogUtils.d(TAG, \"configMediaPlayerState. mAudioFocus=\", mAudioFocus);\n    if (mAudioFocus == AUDIO_NO_FOCUS_NO_DUCK) {\n        // If we don't have audio focus and can't duck, we have to pause,\n        if (mState == PlaybackStateCompat.STATE_PLAYING) {\n            pause();\n        }\n    } else {  // we have audio focus:\n        if (mAudioFocus == AUDIO_NO_FOCUS_CAN_DUCK) {\n            mMediaPlayer.setVolume(VOLUME_DUCK, VOLUME_DUCK); // we'll be relatively quiet\n        } else {\n            if (mMediaPlayer != null) {\n                mMediaPlayer.setVolume(VOLUME_NORMAL, VOLUME_NORMAL); // we can be loud again\n            } // else do something for remote client.\n        }\n        // If we were playing when we lost focus, we need to resume playing.\n        if (mPlayOnFocusGain) {\n            if (mMediaPlayer != null && !mMediaPlayer.isPlaying()) {\n                LogUtils.d(TAG, \"configMediaPlayerState startMediaPlayer. seeking to \",\n                        mCurrentPosition);\n                if (mCurrentPosition == mMediaPlayer.getCurrentPosition()) {\n                    mMediaPlayer.start();\n                    mState = PlaybackStateCompat.STATE_PLAYING;\n                } else {\n                    mMediaPlayer.seekTo(mCurrentPosition);\n                    mState = PlaybackStateCompat.STATE_BUFFERING;\n                }\n            }\n            mPlayOnFocusGain = false;\n        }\n    }\n    if (mCallback != null) {\n        mCallback.onPlaybackStatusChanged(mState);\n    }\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\LocalPlayback.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/* Checks if external storage is available to at least read */\n", "func_signal": "public boolean isExternalStorageReadable()", "code": "{\n    String state = Environment.getExternalStorageState();\n    if (Environment.MEDIA_MOUNTED.equals(state) ||\n            Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n        return true;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\FileUtils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Returns the SSID of the wifi connection, or <code>null</code> if there is no wifi.\n */\n", "func_signal": "public static String getWifiSsid(Context context)", "code": "{\n    WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\n    WifiInfo wifiInfo = wifiManager.getConnectionInfo();\n    if (null != wifiInfo) {\n        return wifiInfo.getSSID();\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Called when media player is done playing current song.\n *\n * @see OnCompletionListener\n */\n", "func_signal": "@Override\npublic void onCompletion(MediaPlayer player)", "code": "{\n    LogUtils.d(TAG, \"onCompletion from MediaPlayer\");\n    // The media player finished playing the current song, so we go ahead\n    // and start the next.\n    if (mCallback != null) {\n        mCallback.onCompletion();\n    }\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\LocalPlayback.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Give up the audio focus.\n */\n", "func_signal": "private void giveUpAudioFocus()", "code": "{\n    LogUtils.d(TAG, \"giveUpAudioFocus\");\n    if (mAudioFocus == AUDIO_FOCUSED) {\n        if (mAudioManager.abandonAudioFocus(this) == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {\n            mAudioFocus = AUDIO_NO_FOCUS_NO_DUCK;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\LocalPlayback.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * @param context to use to check for network connectivity.\n * @return true if connected, false otherwise.\n */\n", "func_signal": "public static boolean isOnline(Context context)", "code": "{\n    ConnectivityManager connMgr = (ConnectivityManager)\n            context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();\n    return (networkInfo != null && networkInfo.isConnected());\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\NetworkHelper.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Called when there's an error playing media. When this happens, the media\n * player goes to the Error state. We warn the user about the error and\n * reset the media player.\n *\n * @see OnErrorListener\n */\n", "func_signal": "@Override\npublic boolean onError(MediaPlayer mp, int what, int extra)", "code": "{\n    LogUtils.e(TAG, \"Media player error: what=\" + what + \", extra=\" + extra);\n    if (mCallback != null) {\n        mCallback.onError(\"MediaPlayer error \" + what + \" (\" + extra + \")\");\n    }\n    return true; // true indicates we handled the error\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\LocalPlayback.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Retrieves a float value from preference manager. If no such key exists, it will return\n * <code>Float.MIN_VALUE</code>.\n *\n * @param context\n * @param key\n * @return\n */\n", "func_signal": "public static float getFloatFromPreference(Context context, String key)", "code": "{\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    return pref.getFloat(key, Float.MIN_VALUE);\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Saves a long value under the provided key in the preference manager. If <code>value</code>\n * is <code>Long.MIN_VALUE</code>, then the provided key will be removed from the preferences.\n *\n * @param context\n * @param key\n * @param value\n */\n", "func_signal": "public static void saveLongToPreference(Context context, String key, long value)", "code": "{\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    if (Long.MIN_VALUE == value) {\n        // we want to remove\n        pref.edit().remove(key).apply();\n    } else {\n        pref.edit().putLong(key, value).apply();\n    }\n\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Retrieves a boolean value from preference manager. If no such key exists, it will return the\n * value provided as <code>defaultValue</code>\n *\n * @param context\n * @param key\n * @param defaultValue\n * @return\n */\n", "func_signal": "public static boolean getBooleanFromPreference(Context context, String key,\n                                               boolean defaultValue)", "code": "{\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    return pref.getBoolean(key, defaultValue);\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Saves a float value under the provided key in the preference manager. If <code>value</code>\n * is <code>Float.MIN_VALUE</code>, then the provided key will be removed from the preferences.\n *\n * @param context\n * @param key\n * @param value\n */\n", "func_signal": "public static void saveFloatToPreference(Context context, String key, float value)", "code": "{\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    if (Float.MIN_VALUE == value) {\n        // we want to remove\n        pref.edit().remove(key).apply();\n    } else {\n        pref.edit().putFloat(key, value).apply();\n    }\n\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/* Checks if external storage is available for read and write */\n", "func_signal": "public boolean isExternalStorageWritable()", "code": "{\n    String state = Environment.getExternalStorageState();\n    if (Environment.MEDIA_MOUNTED.equals(state)) {\n        return true;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\FileUtils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Retrieves a String value from preference manager. If no such key exists, it will return\n * <code>defaultValue</code>.\n *\n * @param context\n * @param key\n * @param defaultValue\n * @return\n */\n", "func_signal": "public static String getStringFromPreference(Context context, String key, String defaultValue)", "code": "{\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    return pref.getString(key, defaultValue);\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Override onNewIntent to get new intent when re-entering\n */\n", "func_signal": "@Override\nprotected void onNewIntent(Intent intent)", "code": "{\n    LogUtils.i(TAG, \"onNewIntent\");\n    if (intent.getStringExtra(Constants.Column.TITLE) != null) {\n        LogUtils.i(TAG, intent.getStringExtra(Constants.Column.TITLE));\n    }\n    super.onNewIntent(intent);\n    setIntent(intent);\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\ui\\LyricExplorerActivity.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Create a random queue.\n *\n * @param musicProvider the provider used for fetching music.\n * @return list containing {@link MediaSessionCompat.QueueItem}'s\n */\n", "func_signal": "public static List<MediaSessionCompat.QueueItem> getRandomQueue(MusicProvider musicProvider)", "code": "{\n    List<MediaMetadataCompat> result = new ArrayList<>();\n\n    for (String genre : musicProvider.getGenres()) {\n        Iterable<MediaMetadataCompat> tracks = musicProvider.getMusicsByGenre(genre);\n        for (MediaMetadataCompat track : tracks) {\n            if (ThreadLocalRandom.current().nextBoolean()) {\n                result.add(track);\n            }\n        }\n    }\n    LogUtils.d(TAG, \"getRandomQueue: result.size=\", result.size());\n\n    Collections.shuffle(result);\n\n    return convertToQueue(result, MEDIA_ID_MUSICS_BY_SEARCH, \"random\");\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\QueueHelper.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Called by AudioManager on audio focus changes.\n * Implementation of {@link android.media.AudioManager.OnAudioFocusChangeListener}\n */\n", "func_signal": "@Override\npublic void onAudioFocusChange(int focusChange)", "code": "{\n    LogUtils.d(TAG, \"onAudioFocusChange. focusChange=\", focusChange);\n    if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {\n        // We have gained focus:\n        mAudioFocus = AUDIO_FOCUSED;\n\n    } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS ||\n            focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT ||\n            focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {\n        // We have lost focus. If we can duck (low playback volume), we can keep playing.\n        // Otherwise, we need to pause the playback.\n        boolean canDuck = focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;\n        mAudioFocus = canDuck ? AUDIO_NO_FOCUS_CAN_DUCK : AUDIO_NO_FOCUS_NO_DUCK;\n\n        // If we are playing, we need to reset media player by calling configMediaPlayerState\n        // with mAudioFocus properly set.\n        if (mState == PlaybackStateCompat.STATE_PLAYING && !canDuck) {\n            // If we don't have audio focus and can't duck, we save the information that\n            // we were playing, so that we can resume playback once we get the focus back.\n            mPlayOnFocusGain = true;\n        }\n    } else {\n        LogUtils.e(TAG, \"onAudioFocusChange: Ignoring unsupported focusChange: \", focusChange);\n    }\n    configMediaPlayerState();\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\LocalPlayback.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Saves a boolean value under the provided key in the preference manager. If <code>value</code>\n * is <code>null</code>, then the provided key will be removed from the preferences.\n *\n * @param context\n * @param key\n * @param value\n */\n", "func_signal": "public static void saveBooleanToPreference(Context context, String key, Boolean value)", "code": "{\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    if (value == null) {\n        // we want to remove\n        pref.edit().remove(key).apply();\n    } else {\n        pref.edit().putBoolean(key, value).apply();\n    }\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Called when MediaPlayer has completed a seek\n *\n * @see OnSeekCompleteListener\n */\n", "func_signal": "@Override\npublic void onSeekComplete(MediaPlayer mp)", "code": "{\n    LogUtils.d(TAG, \"onSeekComplete from MediaPlayer:\", mp.getCurrentPosition());\n    mCurrentPosition = mp.getCurrentPosition();\n    if (mState == PlaybackStateCompat.STATE_BUFFERING) {\n        mMediaPlayer.start();\n        mState = PlaybackStateCompat.STATE_PLAYING;\n    }\n    if (mCallback != null) {\n        mCallback.onPlaybackStatusChanged(mState);\n    }\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\LocalPlayback.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Scale and center-crop a bitmap to fit the given dimensions.\n */\n", "func_signal": "public static Bitmap scaleCenterCrop(Bitmap source, int newHeight, int newWidth)", "code": "{\n    if (source == null) {\n        return null;\n    }\n    int sourceWidth = source.getWidth();\n    int sourceHeight = source.getHeight();\n\n    float xScale = (float) newWidth / sourceWidth;\n    float yScale = (float) newHeight / sourceHeight;\n    float scale = Math.max(xScale, yScale);\n\n    float scaledWidth = scale * sourceWidth;\n    float scaledHeight = scale * sourceHeight;\n\n    float left = (newWidth - scaledWidth) / 2;\n    float top = (newHeight - scaledHeight) / 2;\n\n    RectF targetRect = new RectF(left, top, left + scaledWidth, top + scaledHeight);\n\n    Bitmap destination = Bitmap.createBitmap(newWidth, newHeight, source.getConfig());\n    Canvas canvas = new Canvas(destination);\n    canvas.drawBitmap(source, null, targetRect, null);\n\n    return destination;\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\utils\\Utils.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Try to get the system audio focus.\n */\n", "func_signal": "private void tryToGetAudioFocus()", "code": "{\n    LogUtils.d(TAG, \"tryToGetAudioFocus\");\n    if (mAudioFocus != AUDIO_FOCUSED) {\n        int result = mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\n                AudioManager.AUDIOFOCUS_GAIN);\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {\n            mAudioFocus = AUDIO_FOCUSED;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\markzhai\\lyrichere\\LocalPlayback.java", "repo_name": "markzhai/LyricHere", "stars": 329, "license": "apache-2.0", "language": "java", "size": 5214}
{"docstring": "/**\n * Call when the surface has been destroyed\n */\n", "func_signal": "public void shutdown(GL10 gl)", "code": "{\n    if ( gl != null) {\n        if (mState > STATE_NEW) {\n            int[] textures = new int[1];\n            textures[0] = mTextureID;\n            gl.glDeleteTextures(1, textures, 0);\n            mState = STATE_NEW;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.layout_animations_hideshow);\n\n    final CheckBox hideGoneCB = (CheckBox) findViewById(R.id.hideGoneCB);\n\n    container = new LinearLayout(this);\n    container.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n            ViewGroup.LayoutParams.MATCH_PARENT));\n\n    // Add a slew of buttons to the container. We won't add any more buttons at runtime, but\n    // will just show/hide the buttons we've already created\n    for (int i = 0; i < 4; ++i) {\n        Button newButton = new Button(this);\n        newButton.setText(String.valueOf(i));\n        container.addView(newButton);\n        newButton.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                v.setVisibility(hideGoneCB.isChecked() ? View.GONE : View.INVISIBLE);\n            }\n        });\n    }\n\n    resetTransition();\n\n    ViewGroup parent = (ViewGroup) findViewById(R.id.parent);\n    parent.addView(container);\n\n    Button addButton = (Button) findViewById(R.id.addNewButton);\n    addButton.setOnClickListener(new View.OnClickListener() {\n        public void onClick(View v) {\n            for (int i = 0; i < container.getChildCount(); ++i) {\n                View view = (View) container.getChildAt(i);\n                view.setVisibility(View.VISIBLE);\n            }\n        }\n    });\n\n    CheckBox customAnimCB = (CheckBox) findViewById(R.id.customAnimCB);\n    customAnimCB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            long duration;\n            if (isChecked) {\n                mTransitioner.setStagger(LayoutTransition.CHANGE_APPEARING, 30);\n                mTransitioner.setStagger(LayoutTransition.CHANGE_DISAPPEARING, 30);\n                setupCustomAnimations();\n                duration = 500;\n            } else {\n                resetTransition();\n                duration = 300;\n            }\n            mTransitioner.setDuration(duration);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\animation\\LayoutAnimationsHideShow.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Call to end adding labels. Must be called before drawing starts.\n *\n * @param gl\n */\n", "func_signal": "public void endAdding(GL10 gl)", "code": "{\n    checkState(STATE_ADDING, STATE_INITIALIZED);\n    gl.glBindTexture(GL10.GL_TEXTURE_2D, mTextureID);\n    GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, mBitmap, 0);\n    // Reclaim storage used by bitmap and canvas.\n    mBitmap.recycle();\n    mBitmap = null;\n    mCanvas = null;\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.layout_animations);\n\n    container = new FixedGridLayout(this);\n    container.setClipChildren(false);\n    ((FixedGridLayout)container).setCellHeight(90);\n    ((FixedGridLayout)container).setCellWidth(100);\n    final LayoutTransition transitioner = new LayoutTransition();\n    container.setLayoutTransition(transitioner);\n    defaultAppearingAnim = transitioner.getAnimator(LayoutTransition.APPEARING);\n    defaultDisappearingAnim =\n            transitioner.getAnimator(LayoutTransition.DISAPPEARING);\n    defaultChangingAppearingAnim =\n            transitioner.getAnimator(LayoutTransition.CHANGE_APPEARING);\n    defaultChangingDisappearingAnim =\n            transitioner.getAnimator(LayoutTransition.CHANGE_DISAPPEARING);\n    createCustomAnimations(transitioner);\n    currentAppearingAnim = defaultAppearingAnim;\n    currentDisappearingAnim = defaultDisappearingAnim;\n    currentChangingAppearingAnim = defaultChangingAppearingAnim;\n    currentChangingDisappearingAnim = defaultChangingDisappearingAnim;\n\n    ViewGroup parent = (ViewGroup) findViewById(R.id.parent);\n    parent.addView(container);\n    parent.setClipChildren(false);\n    Button addButton = (Button) findViewById(R.id.addNewButton);\n    addButton.setOnClickListener(new View.OnClickListener() {\n        public void onClick(View v) {\n            Button newButton = new Button(LayoutAnimations.this);\n            newButton.setText(String.valueOf(numButtons++));\n            newButton.setOnClickListener(new View.OnClickListener() {\n                public void onClick(View v) {\n                    container.removeView(v);\n                }\n            });\n            container.addView(newButton, Math.min(1, container.getChildCount()));\n        }\n    });\n\n    CheckBox customAnimCB = (CheckBox) findViewById(R.id.customAnimCB);\n    customAnimCB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            setupTransition(transitioner);\n        }\n    });\n\n    // Check for disabled animations\n    CheckBox appearingCB = (CheckBox) findViewById(R.id.appearingCB);\n    appearingCB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            setupTransition(transitioner);\n        }\n    });\n    CheckBox disappearingCB = (CheckBox) findViewById(R.id.disappearingCB);\n    disappearingCB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            setupTransition(transitioner);\n        }\n    });\n    CheckBox changingAppearingCB = (CheckBox) findViewById(R.id.changingAppearingCB);\n    changingAppearingCB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            setupTransition(transitioner);\n        }\n    });\n    CheckBox changingDisappearingCB = (CheckBox) findViewById(R.id.changingDisappearingCB);\n    changingDisappearingCB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            setupTransition(transitioner);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\animation\\LayoutAnimations.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Handle updating data.\n */\n", "func_signal": "@Override\npublic int update(Uri uri, ContentValues values, String where, String[] whereArgs)", "code": "{\n    SQLiteDatabase db = mOpenHelper.getWritableDatabase();\n    int count;\n    String finalWhere;\n\n    switch (mUriMatcher.match(uri)) {\n        case MAIN:\n            // If URI is main table, update uses incoming where clause and args.\n            count = db.update(MainTable.TABLE_NAME, values, where, whereArgs);\n            break;\n\n        case MAIN_ID:\n            // If URI is for a particular row ID, update is based on incoming\n            // data but modified to restrict to the given ID.\n            finalWhere = DatabaseUtils.concatenateWhere(\n                    MainTable._ID + \" = \" + ContentUris.parseId(uri), where);\n            count = db.update(MainTable.TABLE_NAME, values, finalWhere, whereArgs);\n            break;\n\n        default:\n            throw new IllegalArgumentException(\"Unknown URI \" + uri);\n    }\n\n    getContext().getContentResolver().notifyChange(uri, null);\n\n    return count;\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Handler inserting new data.\n */\n", "func_signal": "@Override\npublic Uri insert(Uri uri, ContentValues initialValues)", "code": "{\n    if (mUriMatcher.match(uri) != MAIN) {\n        // Can only insert into to main URI.\n        throw new IllegalArgumentException(\"Unknown URI \" + uri);\n    }\n\n    ContentValues values;\n\n    if (initialValues != null) {\n        values = new ContentValues(initialValues);\n    } else {\n        values = new ContentValues();\n    }\n\n    if (values.containsKey(MainTable.COLUMN_NAME_DATA) == false) {\n        values.put(MainTable.COLUMN_NAME_DATA, \"\");\n    }\n\n    SQLiteDatabase db = mOpenHelper.getWritableDatabase();\n\n    long rowId = db.insert(MainTable.TABLE_NAME, null, values);\n\n    // If the insert succeeded, the row ID exists.\n    if (rowId > 0) {\n        Uri noteUri = ContentUris.withAppendedId(MainTable.CONTENT_ID_URI_BASE, rowId);\n        getContext().getContentResolver().notifyChange(noteUri, null);\n        return noteUri;\n    }\n\n    throw new SQLException(\"Failed to insert row into \" + uri);\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Call before adding labels. Clears out any existing labels.\n *\n * @param gl\n */\n", "func_signal": "public void beginAdding(GL10 gl)", "code": "{\n    checkState(STATE_INITIALIZED, STATE_ADDING);\n    mLabels.clear();\n    mU = 0;\n    mV = 0;\n    mLineHeight = 0;\n    Bitmap.Config config = mFullColor ?\n            Bitmap.Config.ARGB_4444 : Bitmap.Config.ALPHA_8;\n    mBitmap = Bitmap.createBitmap(mStrikeWidth, mStrikeHeight, config);\n    mCanvas = new Canvas(mBitmap);\n    mBitmap.eraseColor(0);\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Call to add a label\n *\n * @param gl\n * @param text the text of the label\n * @param textPaint the paint of the label\n * @return the id of the label, used to measure and draw the label\n */\n", "func_signal": "public int add(GL10 gl, Drawable background, String text, Paint textPaint,\n        int minWidth, int minHeight)", "code": "{\n    checkState(STATE_ADDING, STATE_ADDING);\n    boolean drawBackground = background != null;\n    boolean drawText = (text != null) && (textPaint != null);\n\n    Rect padding = new Rect();\n    if (drawBackground) {\n        background.getPadding(padding);\n        minWidth = Math.max(minWidth, background.getMinimumWidth());\n        minHeight = Math.max(minHeight, background.getMinimumHeight());\n    }\n\n    int ascent = 0;\n    int descent = 0;\n    int measuredTextWidth = 0;\n    if (drawText) {\n        // Paint.ascent is negative, so negate it.\n        ascent = (int) Math.ceil(-textPaint.ascent());\n        descent = (int) Math.ceil(textPaint.descent());\n        measuredTextWidth = (int) Math.ceil(textPaint.measureText(text));\n    }\n    int textHeight = ascent + descent;\n    int textWidth = Math.min(mStrikeWidth,measuredTextWidth);\n\n    int padHeight = padding.top + padding.bottom;\n    int padWidth = padding.left + padding.right;\n    int height = Math.max(minHeight, textHeight + padHeight);\n    int width = Math.max(minWidth, textWidth + padWidth);\n    int effectiveTextHeight = height - padHeight;\n    int effectiveTextWidth = width - padWidth;\n\n    int centerOffsetHeight = (effectiveTextHeight - textHeight) / 2;\n    int centerOffsetWidth = (effectiveTextWidth - textWidth) / 2;\n\n    // Make changes to the local variables, only commit them\n    // to the member variables after we've decided not to throw\n    // any exceptions.\n\n    int u = mU;\n    int v = mV;\n    int lineHeight = mLineHeight;\n\n    if (width > mStrikeWidth) {\n        width = mStrikeWidth;\n    }\n\n    // Is there room for this string on the current line?\n    if (u + width > mStrikeWidth) {\n        // No room, go to the next line:\n        u = 0;\n        v += lineHeight;\n        lineHeight = 0;\n    }\n    lineHeight = Math.max(lineHeight, height);\n    if (v + lineHeight > mStrikeHeight) {\n        throw new IllegalArgumentException(\"Out of texture space.\");\n    }\n\n    int u2 = u + width;\n    int vBase = v + ascent;\n    int v2 = v + height;\n\n    if (drawBackground) {\n        background.setBounds(u, v, u + width, v + height);\n        background.draw(mCanvas);\n    }\n\n    if (drawText) {\n        mCanvas.drawText(text,\n                u + padding.left + centerOffsetWidth,\n                vBase + padding.top + centerOffsetHeight,\n                textPaint);\n    }\n\n    // We know there's enough space, so update the member variables\n    mU = u + width;\n    mV = v;\n    mLineHeight = lineHeight;\n    mLabels.add(new Label(width, height, ascent,\n            u, v + height, width, -height));\n    return mLabels.size() - 1;\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Begin drawing labels. Sets the OpenGL state for rapid drawing.\n *\n * @param gl\n * @param viewWidth\n * @param viewHeight\n */\n", "func_signal": "public void beginDrawing(GL10 gl, float viewWidth, float viewHeight)", "code": "{\n    checkState(STATE_INITIALIZED, STATE_DRAWING);\n    gl.glBindTexture(GL10.GL_TEXTURE_2D, mTextureID);\n    gl.glShadeModel(GL10.GL_FLAT);\n    gl.glEnable(GL10.GL_BLEND);\n    gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);\n    gl.glColor4x(0x10000, 0x10000, 0x10000, 0x10000);\n    gl.glMatrixMode(GL10.GL_PROJECTION);\n    gl.glPushMatrix();\n    gl.glLoadIdentity();\n    gl.glOrthof(0.0f, viewWidth, 0.0f, viewHeight, 0.0f, 1.0f);\n    gl.glMatrixMode(GL10.GL_MODELVIEW);\n    gl.glPushMatrix();\n    gl.glLoadIdentity();\n    // Magic offsets to promote consistent rasterization.\n    gl.glTranslatef(0.375f, 0.375f, 0.0f);\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Draw a given label at a given x,y position, expressed in pixels, with the\n * lower-left-hand-corner of the view being (0,0).\n *\n * @param gl\n * @param x\n * @param y\n * @param labelID\n */\n", "func_signal": "public void draw(GL10 gl, float x, float y, int labelID)", "code": "{\n    checkState(STATE_DRAWING, STATE_DRAWING);\n    Label label = mLabels.get(labelID);\n    gl.glEnable(GL10.GL_TEXTURE_2D);\n    ((GL11)gl).glTexParameteriv(GL10.GL_TEXTURE_2D,\n            GL11Ext.GL_TEXTURE_CROP_RECT_OES, label.mCrop, 0);\n    ((GL11Ext)gl).glDrawTexiOES((int) x, (int) y, 0,\n            (int) label.width, (int) label.height);\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n *\n * Creates the underlying database with table name and column names taken from the\n * NotePad class.\n */\n", "func_signal": "@Override\npublic void onCreate(SQLiteDatabase db)", "code": "{\n    db.execSQL(\"CREATE TABLE \" + MainTable.TABLE_NAME + \" (\"\n            + MainTable._ID + \" INTEGER PRIMARY KEY,\"\n            + MainTable.COLUMN_NAME_DATA + \" TEXT\"\n            + \");\");\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Create a label maker\n * or maximum compatibility with various OpenGL ES implementations,\n * the strike width and height must be powers of two,\n * We want the strike width to be at least as wide as the widest window.\n *\n * @param fullColor true if we want a full color backing store (4444),\n * otherwise we generate a grey L8 backing store.\n * @param strikeWidth width of strike\n * @param strikeHeight height of strike\n */\n", "func_signal": "public LabelMaker(boolean fullColor, int strikeWidth, int strikeHeight)", "code": "{\n    mFullColor = fullColor;\n    mStrikeWidth = strikeWidth;\n    mStrikeHeight = strikeHeight;\n    mTexelWidth = (float) (1.0 / mStrikeWidth);\n    mTexelHeight = (float) (1.0 / mStrikeHeight);\n    mClearPaint = new Paint();\n    mClearPaint.setARGB(0, 0, 0, 0);\n    mClearPaint.setStyle(Style.FILL);\n    mState = STATE_NEW;\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Return the MIME type for an known URI in the provider.\n */\n", "func_signal": "@Override\npublic String getType(Uri uri)", "code": "{\n    switch (mUriMatcher.match(uri)) {\n        case MAIN:\n            return MainTable.CONTENT_TYPE;\n        case MAIN_ID:\n            return MainTable.CONTENT_ITEM_TYPE;\n        default:\n            throw new IllegalArgumentException(\"Unknown URI \" + uri);\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Global provider initialization.\n */\n", "func_signal": "public SimpleProvider()", "code": "{\n    // Create and initialize URI matcher.\n    mUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n    mUriMatcher.addURI(AUTHORITY, MainTable.TABLE_NAME, MAIN);\n    mUriMatcher.addURI(AUTHORITY, MainTable.TABLE_NAME + \"/#\", MAIN_ID);\n\n    // Create and initialize projection map for all columns.  This is\n    // simply an identity mapping.\n    mNotesProjectionMap = new HashMap<>();\n    mNotesProjectionMap.put(MainTable._ID, MainTable._ID);\n    mNotesProjectionMap.put(MainTable.COLUMN_NAME_DATA, MainTable.COLUMN_NAME_DATA);\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Handle incoming queries.\n */\n", "func_signal": "@Override\npublic Cursor query(Uri uri, String[] projection, String selection,\n        String[] selectionArgs, String sortOrder)", "code": "{\n\n    // Constructs a new query builder and sets its table name\n    SQLiteQueryBuilder qb = new SQLiteQueryBuilder();\n    qb.setTables(MainTable.TABLE_NAME);\n\n    switch (mUriMatcher.match(uri)) {\n        case MAIN:\n            // If the incoming URI is for main table.\n            qb.setProjectionMap(mNotesProjectionMap);\n            break;\n\n        case MAIN_ID:\n            // The incoming URI is for a single row.\n            qb.setProjectionMap(mNotesProjectionMap);\n            qb.appendWhere(MainTable._ID + \"=?\");\n            selectionArgs = DatabaseUtils.appendSelectionArgs(selectionArgs,\n                    new String[] { uri.getLastPathSegment() });\n            break;\n\n        default:\n            throw new IllegalArgumentException(\"Unknown URI \" + uri);\n    }\n\n\n    if (TextUtils.isEmpty(sortOrder)) {\n        sortOrder = MainTable.DEFAULT_SORT_ORDER;\n    }\n\n    SQLiteDatabase db = mOpenHelper.getReadableDatabase();\n\n    Cursor c = qb.query(db, projection, selection, selectionArgs,\n            null /* no group */, null /* no filter */, sortOrder);\n\n    c.setNotificationUri(getContext().getContentResolver(), uri);\n    return c;\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Ends the drawing and restores the OpenGL state.\n *\n * @param gl\n */\n", "func_signal": "public void endDrawing(GL10 gl)", "code": "{\n    checkState(STATE_DRAWING, STATE_INITIALIZED);\n    gl.glDisable(GL10.GL_BLEND);\n    gl.glMatrixMode(GL10.GL_PROJECTION);\n    gl.glPopMatrix();\n    gl.glMatrixMode(GL10.GL_MODELVIEW);\n    gl.glPopMatrix();\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Call to initialize the class.\n * Call whenever the surface has been created.\n *\n * @param gl\n */\n", "func_signal": "public void initialize(GL10 gl)", "code": "{\n    mState = STATE_INITIALIZED;\n    int[] textures = new int[1];\n    gl.glGenTextures(1, textures, 0);\n    mTextureID = textures[0];\n    gl.glBindTexture(GL10.GL_TEXTURE_2D, mTextureID);\n\n    // Use Nearest for performance.\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER,\n            GL10.GL_NEAREST);\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER,\n            GL10.GL_NEAREST);\n\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S,\n            GL10.GL_CLAMP_TO_EDGE);\n    gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T,\n            GL10.GL_CLAMP_TO_EDGE);\n\n    gl.glTexEnvf(GL10.GL_TEXTURE_ENV, GL10.GL_TEXTURE_ENV_MODE,\n            GL10.GL_REPLACE);\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\graphics\\spritetext\\LabelMaker.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n *\n * Demonstrates that the provider must consider what happens when the\n * underlying datastore is changed. In this sample, the database is upgraded the database\n * by destroying the existing data.\n * A real application should upgrade the database in place.\n */\n", "func_signal": "@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)", "code": "{\n\n    // Logs that the database is being upgraded\n    Log.w(TAG, \"Upgrading database from version \" + oldVersion + \" to \"\n            + newVersion + \", which will destroy all old data\");\n\n    // Kills the table and existing data\n    db.execSQL(\"DROP TABLE IF EXISTS notes\");\n\n    // Recreates the database with a new version\n    onCreate(db);\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Perform provider creation.\n */\n", "func_signal": "@Override\npublic boolean onCreate()", "code": "{\n    mOpenHelper = new DatabaseHelper(getContext());\n    // Assumes that any failures will be reported by a thrown exception.\n    return true;\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\app\\LoaderThrottle.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Make a view to hold each row.\n * \n * @see android.widget.ListAdapter#getView(int, android.view.View,\n *      android.view.ViewGroup)\n */\n", "func_signal": "public View getView(int position, View convertView, ViewGroup parent)", "code": "{\n    TextView text;\n    \n    if (convertView == null) {\n        text = (TextView)mInflater.inflate(android.R.layout.simple_list_item_1, parent, false);\n    } else {\n        text = (TextView)convertView;\n    }\n\n    if (!mBusy) {\n        text.setText(mStrings[position]);\n        // Null tag means the view has the correct data\n        text.setTag(null);\n    } else {\n        text.setText(\"Loading...\");\n        // Non-null tag means the view still needs to load it's data\n        text.setTag(this);\n    }\n\n    return text;\n}", "path": "app\\src\\main\\java\\com\\example\\android\\apis\\view\\List13.java", "repo_name": "THEONE10211024/ApiDemos", "stars": 435, "license": "None", "language": "java", "size": 10019}
{"docstring": "/**\n * Process a touch event received by the parent view. This method will\n * dispatch callback events as needed before returning. The parent view's\n * onTouchEvent implementation should call this.\n *\n * @param ev The touch event received by the parent view\n */\n", "func_signal": "public void processTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // Since the parent is already directly processing this touch\n            // event,\n            // there is no reason to delay for a slop before dragging.\n            // Start immediately if possible.\n            tryCaptureViewForDrag(toCapture, pointerId);\n\n            final int edgesTouched = mInitialEdgeTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                // If we're idle we can do anything! Treat it like a normal\n                // down event.\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                tryCaptureViewForDrag(toCapture, pointerId);\n\n                final int edgesTouched = mInitialEdgeTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (isCapturedViewUnder((int) x, (int) y)) {\n                // We're still tracking a captured view. If the same view is\n                // under this\n                // point, we'll swap to controlling it with this pointer\n                // instead.\n                // (This will still work if we're \"catching\" a settling\n                // view.)\n\n                tryCaptureViewForDrag(mCapturedView, pointerId);\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            if (mDragState == STATE_DRAGGING) {\n                final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);\n                final float x = MotionEventCompat.getX(ev, index);\n                final float y = MotionEventCompat.getY(ev, index);\n                final int idx = (int) (x - mLastMotionX[mActivePointerId]);\n                final int idy = (int) (y - mLastMotionY[mActivePointerId]);\n\n                dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);\n\n                saveLastMotion(ev);\n            } else {\n                // Check to see if any pointer is now over a draggable view.\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    final float dx = x - mInitialMotionX[pointerId];\n                    final float dy = y - mInitialMotionY[pointerId];\n\n                    reportNewEdgeDrags(dx, dy, pointerId);\n                    if (mDragState == STATE_DRAGGING) {\n                        // Callback might have started an edge drag.\n                        break;\n                    }\n\n                    final View toCapture = findTopChildUnder((int) x, (int) y);\n                    if (checkTouchSlop(toCapture, dx, dy)\n                            && tryCaptureViewForDrag(toCapture, pointerId)) {\n                        break;\n                    }\n                }\n                saveLastMotion(ev);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {\n                // Try to find another pointer that's still holding on to\n                // the captured view.\n                int newActivePointer = INVALID_POINTER;\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int id = MotionEventCompat.getPointerId(ev, i);\n                    if (id == mActivePointerId) {\n                        // This one's going away, skip.\n                        continue;\n                    }\n\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    if (findTopChildUnder((int) x, (int) y) == mCapturedView\n                            && tryCaptureViewForDrag(mCapturedView, id)) {\n                        newActivePointer = mActivePointerId;\n                        break;\n                    }\n                }\n\n                if (newActivePointer == INVALID_POINTER) {\n                    // We didn't find another pointer still touching the\n                    // view, release it.\n                    releaseViewForPointerUp();\n                }\n            }\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP: {\n            if (mDragState == STATE_DRAGGING) {\n                releaseViewForPointerUp();\n            }\n            cancel();\n            break;\n        }\n\n        case MotionEvent.ACTION_CANCEL: {\n            if (mDragState == STATE_DRAGGING) {\n                dispatchViewReleased(0, 0);\n            }\n            cancel();\n            break;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Scroll out contentView and finish the activity\n */\n", "func_signal": "public void scrollToFinishActivity()", "code": "{\n    final int childWidth = mContentView.getWidth();\n    final int childHeight = mContentView.getHeight();\n\n    int left = 0, top = 0;\n    if ((mEdgeFlag & EDGE_LEFT) != 0) {\n        left = childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_LEFT;\n    } else if ((mEdgeFlag & EDGE_RIGHT) != 0) {\n        left = -childWidth - mShadowRight.getIntrinsicWidth() - OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_RIGHT;\n    } else if ((mEdgeFlag & EDGE_BOTTOM) != 0) {\n        top = -childHeight - mShadowBottom.getIntrinsicHeight() - OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_BOTTOM;\n    }\n\n    mDragHelper.smoothSlideViewTo(mContentView, left, top);\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\SwipeBackLayout.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Set scroll threshold, we will close the activity, when scrollPercent over\n * this value\n *\n * @param threshold\n */\n", "func_signal": "public void setScrollThresHold(float threshold)", "code": "{\n    if (threshold >= 1.0f || threshold <= 0) {\n        throw new IllegalArgumentException(\"Threshold value should be between 0 and 1.0\");\n    }\n    mScrollThreshold = threshold;\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\SwipeBackLayout.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v      View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for\n *               scrollability (true), or just its children (false).\n * @param dx     Delta scrolled in pixels along the X axis\n * @param dy     Delta scrolled in pixels along the Y axis\n * @param x      X coordinate of the active touch point\n * @param y      Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int dy, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance\n        // first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft()\n                    && x + scrollX < child.getRight()\n                    && y + scrollY >= child.getTop()\n                    && y + scrollY < child.getBottom()\n                    && canScroll(child, true, dx, dy, x + scrollX - child.getLeft(), y\n                    + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV\n            && (ViewCompat.canScrollHorizontally(v, -dx) || ViewCompat.canScrollVertically(v,\n            -dy));\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Check if we've crossed a reasonable touch slop for the given child view.\n * If the child cannot be dragged along the horizontal or vertical axis,\n * motion along that axis will not count toward the slop check.\n *\n * @param child Child to check\n * @param dx    Motion since initial position along X axis\n * @param dy    Motion since initial position along Y axis\n * @return true if the touch slop has been crossed\n */\n", "func_signal": "private boolean checkTouchSlop(View child, float dx, float dy)", "code": "{\n    if (child == null) {\n        return false;\n    }\n    final boolean checkHorizontal = mCallback.getViewHorizontalDragRange(child) > 0;\n    final boolean checkVertical = mCallback.getViewVerticalDragRange(child) > 0;\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Check if this event as provided to the parent view's\n * onInterceptTouchEvent should cause the parent to intercept the touch\n * event stream.\n *\n * @param ev MotionEvent provided to onInterceptTouchEvent\n * @return true if the parent view should return true from\n * onInterceptTouchEvent\n */\n", "func_signal": "public boolean shouldInterceptTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            saveInitialMotion(x, y, pointerId);\n\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            // Catch a settling view if possible.\n            if (toCapture == mCapturedView && mDragState == STATE_SETTLING) {\n                tryCaptureViewForDrag(toCapture, pointerId);\n            }\n\n            final int edgesTouched = mInitialEdgeTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                final int edgesTouched = mInitialEdgeTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (mDragState == STATE_SETTLING) {\n                // Catch a settling view if possible.\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                if (toCapture == mCapturedView) {\n                    tryCaptureViewForDrag(toCapture, pointerId);\n                }\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            // First to cross a touch slop over a draggable view wins. Also\n            // report edge drags.\n            final int pointerCount = MotionEventCompat.getPointerCount(ev);\n            for (int i = 0; i < pointerCount; i++) {\n                final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                final float x = MotionEventCompat.getX(ev, i);\n                final float y = MotionEventCompat.getY(ev, i);\n                final float dx = x - mInitialMotionX[pointerId];\n                final float dy = y - mInitialMotionY[pointerId];\n\n                reportNewEdgeDrags(dx, dy, pointerId);\n                if (mDragState == STATE_DRAGGING) {\n                    // Callback might have started an edge drag\n                    break;\n                }\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                if (toCapture != null && checkTouchSlop(toCapture, dx, dy)\n                        && tryCaptureViewForDrag(toCapture, pointerId)) {\n                    break;\n                }\n            }\n            saveLastMotion(ev);\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP:\n        case MotionEvent.ACTION_CANCEL: {\n            cancel();\n            break;\n        }\n    }\n\n    return mDragState == STATE_DRAGGING;\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Settle the captured view based on standard free-moving fling behavior.\n * The caller should invoke {@link #continueSettling(boolean)} on each\n * subsequent frame to continue the motion until it returns false.\n *\n * @param minLeft Minimum X position for the view's left edge\n * @param minTop  Minimum Y position for the view's top edge\n * @param maxLeft Maximum X position for the view's left edge\n * @param maxTop  Maximum Y position for the view's top edge\n */\n", "func_signal": "public void flingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot flingCapturedView outside of a call to \"\n                + \"Callback#onViewReleased\");\n    }\n\n    mScroller.fling(mCapturedView.getLeft(), mCapturedView.getTop(),\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),\n            minLeft, maxLeft, minTop, maxTop);\n\n    setDragState(STATE_SETTLING);\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Capture a specific child view for dragging within the parent. The\n * callback will be notified but\n * {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#tryCaptureView(View, int)}\n * will not be asked permission to capture this view.\n *\n * @param childView       Child view to capture\n * @param activePointerId ID of the pointer that is dragging the captured\n *                        child view\n */\n", "func_signal": "public void captureChildView(View childView, int activePointerId)", "code": "{\n    if (childView.getParent() != mParentView) {\n        throw new IllegalArgumentException(\"captureChildView: parameter must be a descendant \"\n                + \"of the ViewDragHelper's tracked parent view (\" + mParentView + \")\");\n    }\n\n    mCapturedView = childView;\n    mActivePointerId = activePointerId;\n    mCallback.onViewCaptured(childView, activePointerId);\n    setDragState(STATE_DRAGGING);\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Check if any pointer tracked in the current gesture has crossed the\n * required slop threshold.\n * <p>\n * This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only\n * rely on the results of this method after all currently available touch\n * data has been provided to one of these two methods.\n * </p>\n *\n * @param directions Combination of direction flags, see\n *                   {@link #DIRECTION_HORIZONTAL}, {@link #DIRECTION_VERTICAL},\n *                   {@link #DIRECTION_ALL}\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions)", "code": "{\n    final int count = mInitialMotionX.length;\n    for (int i = 0; i < count; i++) {\n        if (checkTouchSlop(directions, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Apps should use ViewDragHelper.create() to get a new instance. This will\n * allow VDH to use internal compatibility implementations for different\n * platform versions.\n *\n * @param context   Context to initialize config-dependent params from\n * @param forParent Parent view to monitor\n */\n", "func_signal": "private ViewDragHelper(Context context, ViewGroup forParent, Callback cb)", "code": "{\n    if (forParent == null) {\n        throw new IllegalArgumentException(\"Parent view may not be null\");\n    }\n    if (cb == null) {\n        throw new IllegalArgumentException(\"Callback may not be null\");\n    }\n\n    mParentView = forParent;\n    mCallback = cb;\n\n    final ViewConfiguration vc = ViewConfiguration.get(context);\n    final float density = context.getResources().getDisplayMetrics().density;\n    mEdgeSize = (int) (EDGE_SIZE * density + 0.5f);\n\n    mTouchSlop = vc.getScaledTouchSlop();\n    mMaxVelocity = vc.getScaledMaximumFlingVelocity();\n    mMinVelocity = vc.getScaledMinimumFlingVelocity();\n    mScroller = ScrollerCompat.create(context, sInterpolator);\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Set a color to use for the scrim that obscures primary content while a\n * drawer is open.\n *\n * @param color Color to use in 0xAARRGGBB format.\n */\n", "func_signal": "public void setScrimColor(int color)", "code": "{\n    mScrimColor = color;\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\SwipeBackLayout.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position. The\n * appropriate velocity from prior motion will be taken into account. If\n * this method returns true, the caller should invoke\n * {@link #continueSettling(boolean)} on each subsequent frame to continue\n * the motion until it returns false. If this method returns false there is\n * no further work to do to complete the movement.\n *\n * @param finalLeft Settled left edge position for the captured view\n * @param finalTop  Settled top edge position for the captured view\n * @return true if animation should continue through\n * {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean settleCapturedViewAt(int finalLeft, int finalTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot settleCapturedViewAt outside of a call to \"\n                + \"Callback#onViewReleased\");\n    }\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop,\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax. If the value is below\n * the minimum, it will be clamped to zero. If the value is above the\n * maximum, it will be clamped to the maximum.\n *\n * @param value  Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private int clampMag(int value, int absMin, int absMax)", "code": "{\n    final int absValue = Math.abs(value);\n    if (absValue < absMin)\n        return 0;\n    if (absValue > absMax)\n        return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Determine if the supplied view is under the given point in the parent\n * view's coordinate system.\n *\n * @param view Child view of the parent to hit test\n * @param x    X position to test in the parent's coordinate system\n * @param y    Y position to test in the parent's coordinate system\n * @return true if the supplied view is under the given point, false\n * otherwise\n */\n", "func_signal": "public boolean isViewUnder(View view, int x, int y)", "code": "{\n    if (view == null) {\n        return false;\n    }\n    return x >= view.getLeft() && x < view.getRight() && y >= view.getTop()\n            && y < view.getBottom();\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n *\n * @param forParent   Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be\n *                    about detecting the start of a drag. Larger values are more\n *                    sensitive. 1.0f is normal.\n * @param cb          Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n    final ViewDragHelper helper = create(forParent, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * The result of a call to this method is equivalent to\n * {@link #processTouchEvent(MotionEvent)} receiving an\n * ACTION_CANCEL event.\n */\n", "func_signal": "public void cancel()", "code": "{\n    mActivePointerId = INVALID_POINTER;\n    clearMotionHistory();\n\n    if (mVelocityTracker != null) {\n        mVelocityTracker.recycle();\n        mVelocityTracker = null;\n    }\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Sets the sensitivity of the dragger.\n *\n * @param context     The application context.\n * @param sensitivity value between 0 and 1, the final value for touchSlop =\n *                    ViewConfiguration.getScaledTouchSlop * (1 / s);\n */\n", "func_signal": "public void setSensitivity(Context context, float sensitivity)", "code": "{\n    float s = Math.max(0f, Math.min(1.0f, sensitivity));\n    ViewConfiguration viewConfiguration = ViewConfiguration.get(context);\n    mTouchSlop = (int) (viewConfiguration.getScaledTouchSlop() * (1 / s));\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Set a drawable used for edge shadow.\n *\n * @param shadow    Drawable to use\n * @param edgeFlag Combination of edge flags describing the edge to set\n * @see #EDGE_LEFT\n * @see #EDGE_RIGHT\n * @see #EDGE_BOTTOM\n */\n", "func_signal": "public void setShadow(Drawable shadow, int edgeFlag)", "code": "{\n    if ((edgeFlag & EDGE_LEFT) != 0) {\n        mShadowLeft = shadow;\n    } else if ((edgeFlag & EDGE_RIGHT) != 0) {\n        mShadowRight = shadow;\n    } else if ((edgeFlag & EDGE_BOTTOM) != 0) {\n        mShadowBottom = shadow;\n    }\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\SwipeBackLayout.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Move the captured settling view by the appropriate amount for the current\n * time. If <code>continueSettling</code> returns true, the caller should\n * call it again on the ic_zhihu_essay_next frame to continue.\n *\n * @param deferCallbacks true if state callbacks should be deferred via\n *                       posted message. Set this to true if you are calling this\n *                       method from {@link View#computeScroll()} or\n *                       similar methods invoked as part of layout or drawing.\n * @return true if settle is still in progress\n */\n", "func_signal": "public boolean continueSettling(boolean deferCallbacks)", "code": "{\n    if (mDragState == STATE_SETTLING) {\n        boolean keepGoing = mScroller.computeScrollOffset();\n        final int x = mScroller.getCurrX();\n        final int y = mScroller.getCurrY();\n        final int dx = x - mCapturedView.getLeft();\n        final int dy = y - mCapturedView.getTop();\n\n        if (dx != 0) {\n            mCapturedView.offsetLeftAndRight(dx);\n        }\n        if (dy != 0) {\n            mCapturedView.offsetTopAndBottom(dy);\n        }\n\n        if (dx != 0 || dy != 0) {\n            mCallback.onViewPositionChanged(mCapturedView, x, y, dx, dy);\n        }\n\n        if (keepGoing && x == mScroller.getFinalX() && y == mScroller.getFinalY()) {\n            // Close enough. The interpolator/scroller might think we're\n            // still moving\n            // but the user sure doesn't.\n            mScroller.abortAnimation();\n            keepGoing = mScroller.isFinished();\n        }\n\n        if (!keepGoing) {\n            if (deferCallbacks) {\n                mParentView.post(mSetIdleRunnable);\n            } else {\n                setDragState(STATE_IDLE);\n            }\n        }\n    }\n\n    return mDragState == STATE_SETTLING;\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\ViewDragHelper.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Removes a listener from the set of listeners\n *\n * @param listener\n */\n", "func_signal": "public void removeSwipeListener(SwipeListener listener)", "code": "{\n    if (mListeners == null) {\n        return;\n    }\n    mListeners.remove(listener);\n}", "path": "app\\src\\main\\java\\com\\susion\\boring\\base\\view\\swipebacklayout\\SwipeBackLayout.java", "repo_name": "SusionSuc/Boring", "stars": 295, "license": "None", "language": "java", "size": 37715}
{"docstring": "/**\n * Make a heart-beat expand animation.\n * @param duration\n * @return\n */\n", "func_signal": "public static Animator heartbeatExpandAnimator(int duration)", "code": "{\n    AnimatorSet animatorSet = new AnimatorSet();\n    ObjectAnimator xExpandAnimator = new ObjectAnimator();\n    xExpandAnimator.setPropertyName(\"scaleX\");\n    xExpandAnimator.setFloatValues(0.5f, 1.0f);\n    ObjectAnimator yExpandAnimator = new ObjectAnimator();\n    yExpandAnimator.setPropertyName(\"scaleY\");\n    yExpandAnimator.setFloatValues(0.5f, 1.0f);\n    animatorSet.play(xExpandAnimator).with(yExpandAnimator);\n    animatorSet.setDuration(duration);\n    animatorSet.setInterpolator(new DampingInterpolator());\n\n    return animatorSet;\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\GeneralAnimatorGenerator.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**Default to draw a circle*/\n", "func_signal": "public Particle()", "code": "{\n    mCircleRadius = 5;\n    init();\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\Particle.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Make a damping vibration animation.\n * @param duration\n * @return\n */\n", "func_signal": "public static ValueAnimator dampingValueAnimator(long duration)", "code": "{\n    ValueAnimator valueAnimator = ValueAnimator.ofFloat(0, 1);\n    valueAnimator.setDuration(duration);\n    valueAnimator.setInterpolator(new DampingInterpolator());\n    return valueAnimator;\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\GeneralAnimatorGenerator.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Init the particle field.\n */\n", "func_signal": "private void initParticleField(Context context, AttributeSet attributeSet)", "code": "{\n    BaseOneParticleInitializer initializerOne = new BaseOneParticleInitializer();\n    initializerOne.setParticleBitmap(bitmapDisappearDust);\n    BaseOneParticleInitializer initializerTwo = new BaseOneParticleInitializer();\n    initializerTwo.setParticleBitmap(bitmapDisappearDust);\n    BaseOneParticleInitializer initializerThree = new BaseOneParticleInitializer();\n    initializerThree.setParticleBitmap(bitmapDisappearDust);\n    BaseOneParticleInitializer initializerFour = new BaseOneParticleInitializer();\n    initializerFour.setParticleBitmap(bitmapDisappearDust);\n    BaseOneParticleInitializer initializerFive = new BaseOneParticleInitializer();\n    initializerFive.setParticleBitmap(bitmapDisappearDust);\n    BaseOneParticleInitializer initializerSix = new BaseOneParticleInitializer();\n    initializerSix.setParticleBitmap(bitmapDisappearDust);\n    BaseOneParticleInitializer initializerSeven = new BaseOneParticleInitializer();\n    initializerSeven.setParticleBitmap(bitmapDisappearDust);\n    BaseOneParticleInitializer initializerEight = new BaseOneParticleInitializer();\n    initializerEight.setParticleBitmap(bitmapDisappearDust);\n    mParticleInitializers = new ArrayList<>();\n    mParticleInitializers.add(initializerOne);\n    mParticleInitializers.add(initializerTwo);\n    mParticleInitializers.add(initializerThree);\n    mParticleInitializers.add(initializerFour);\n    mParticleInitializers.add(initializerFive);\n    mParticleInitializers.add(initializerSix);\n    mParticleInitializers.add(initializerSeven);\n    mParticleInitializers.add(initializerEight);\n    //Default circle.\n    mParticleField = new ParticleField.ViewGenerator()\n            .setContext(context)\n            .setAttributeSet(attributeSet)\n            .setParticleNumbers(8)\n            .generate();\n    //Custom bitmap.\n    mDisappearField = new ParticleField.ViewGenerator()\n            .setContext(context)\n            .setAttributeSet(attributeSet)\n            .setParticleInitializers(mParticleInitializers)\n            .generate();\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\ParticleHeartView.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * \u83b7\u53d6ViewPagerIndicator\u7684\u4e2a\u6027\u5316\u8bbe\u7f6e\u503c\n * @param context\n * @param attrs\n */\n", "func_signal": "private void handleTypedArray(Context context, AttributeSet attrs)", "code": "{\n    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.PointIndicator);\n    mIndicatorWidth = typedArray.getDimensionPixelOffset(R.styleable.PointIndicator_indicator_width, -1);\n    mIndicatorHeight = typedArray.getDimensionPixelOffset(R.styleable.PointIndicator_indicator_height, -1);\n    mIndicatorMargin = typedArray.getDimensionPixelOffset(R.styleable.PointIndicator_indicator_gap, -1);\n    mIndicatorBackgroundResId = typedArray.getResourceId(R.styleable.PointIndicator_indicator_selected_src, R.drawable.white_radius);\n    mIndicatorUnselectedBackgroundResId = typedArray.getResourceId(R.styleable.PointIndicator_indicator_unselected_src, R.drawable.white_radius);\n    mAnimatorResId = typedArray.getResourceId(R.styleable.PointIndicator_indicator_animator, R.animator.scale_with_alpha);\n    typedArray.recycle();\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ViewPagerIndicator\\PointIndicator.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * \u5c06dp\u8f6c\u6362\u4e3apx.\n * @param value\n * @return\n */\n", "func_signal": "private int dip2px(float value)", "code": "{\n    float scale = getResources().getDisplayMetrics().density;\n    return (int) (value * scale + 0.5f);\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ViewPagerIndicator\\PointIndicator.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Adjust the size based on measureSpec.\n * @param desiredSize\n * @param measureSpec\n * @return\n */\n", "func_signal": "public static int getAdjustedSize(int desiredSize, int measureSpec)", "code": "{\n    int result = desiredSize;\n    switch(View.MeasureSpec.getMode(measureSpec)){\n        case View.MeasureSpec.AT_MOST:\n            result = Math.min(desiredSize, View.MeasureSpec.getSize(measureSpec));\n            break;\n        case View.MeasureSpec.EXACTLY:\n            result = View.MeasureSpec.getSize(measureSpec);\n            break;\n        case View.MeasureSpec.UNSPECIFIED:\n            break;\n    }\n    return result;\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ToolBox\\Utils.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * To get random argb modifier which used to draw a color-gradient particle.\n * @return\n */\n", "func_signal": "private ArgbModifier getRandomArgbModifier()", "code": "{\n    int firstRandomInt = random.nextInt(2);\n    int secondRandomInt = random.nextInt(2);\n    return new ArgbModifier(colorGroup[firstRandomInt], colorGroup[secondRandomInt]);\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\ParticleHeartView.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**If this view is attached to window, and before the state chaned the rippling is play,\n * start animation automatically.\n */\n", "func_signal": "@Override\nprotected void onAttachedToWindow()", "code": "{\n    super.onAttachedToWindow();\n    if (isRippling){\n        startAnimation();\n    }\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\RippleCircle\\RippleCircle.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * \u7ed8\u5236Indicator\n */\n", "func_signal": "private void createIndicators()", "code": "{\n    removeAllViews();\n    if (mIndicatorNum <= 0){\n        return;\n    }\n    //handle currentItem for Infinite\n    int currentItem = convertForInifite(mViewPager.getCurrentItem());\n    for (int i = 0; i < mIndicatorNum; i++){\n        if (currentItem == i){\n            //\u9009\u4e2d\n            addIndicator(mIndicatorBackgroundResId, mImmediateAnimatorSelected);\n        }else{\n            addIndicator(mIndicatorUnselectedBackgroundResId, mImmediateAnimatorUnselected);\n        }\n    }\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ViewPagerIndicator\\PointIndicator.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Init the valueAnimator.\n */\n", "func_signal": "private void initAnimation(long duration)", "code": "{\n    //Define a value animator to controll the motion.\n    mParticleAnimator = ValueAnimator.ofInt(0, (int)duration);\n    mParticleAnimator.setDuration(duration);\n    mParticleAnimator.setInterpolator(new DecelerateInterpolator());\n    mParticleAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            if (isPraised) {\n                //Cause onAnimationStart change this.\n                outputFollowCircleParameter(animation.getAnimatedFraction());\n            }\n            postInvalidate();\n        }\n    });\n    mParticleAnimator.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animation) {\n            //changed to praised.\n            if (!isPraised) {\n                mCenterBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.icon_praised);\n                centerBitmapHalfWidth = mCenterBitmap.getWidth() / 2;\n                centerBitmapHalfHeight = mCenterBitmap.getHeight() / 2;\n            }else{\n                mCenterBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.icon_un_praised);\n                centerBitmapHalfWidth = mCenterBitmap.getWidth() / 2;\n                centerBitmapHalfHeight = mCenterBitmap.getHeight() / 2;\n            }\n            isPraised = !isPraised;\n            isQuiet = !isQuiet;\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            isQuiet = !isQuiet;\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n            isQuiet = !isQuiet;\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n\n        }\n    });\n    mHeartbeatAnimator = GeneralAnimatorGenerator.dampingValueAnimator(duration);\n    mHeartbeatAnimator.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n\n        }\n    });\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\ParticleHeartView.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * For view re-create, you should save the text currently showed on window which might be changed during a series of processing.\n * @return\n */\n", "func_signal": "@Override\nprotected Parcelable onSaveInstanceState()", "code": "{\n    Bundle bundle = new Bundle();\n    bundle.putBoolean(\"isRippling\", isRippling);\n    bundle.putParcelable(\"superState\", super.onSaveInstanceState());\n    return bundle;\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\RippleCircle\\RippleCircle.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Start progressing animation separately.\n */\n", "func_signal": "private void startProgressingAnimation()", "code": "{\n    if (animationState == STATE_PROGRESSING || !isWindowFocused){\n        return;\n    }\n    if (mProgressingController == null){\n        initProgressingAnimationController();\n    }\n    if (mProgressingController.isRunning()) {\n        mProgressingController.end();\n        mProgressingController.cancel();\n    }\n    mProgressingController.start();\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ShrinkButton\\ShrinkButton.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Start back-expanding animation.\n */\n", "func_signal": "private void startExpandingAnimation()", "code": "{\n    if (!isWindowFocused)   return;\n    if (mExpandingController == null){\n        initExpandingAnimationController();\n    }\n    if (mExpandingController.isRunning() || mExpandingController.isStarted()){\n        mExpandingController.end();\n        mExpandingController.cancel();\n    }\n    mExpandingController.start();\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ShrinkButton\\ShrinkButton.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Stop all animations including shrinking and progressing.\n */\n", "func_signal": "public void stop()", "code": "{\n    if (mShrinkingController != null && mShrinkingController.isRunning()){\n        mShrinkingController.end();\n        mShrinkingController.cancel();\n    }\n    if (mProgressingController != null && mProgressingController.isRunning()){\n        mProgressingController.end();\n        mProgressingController.cancel();\n    }\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ShrinkButton\\ShrinkButton.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Start the whole series of animation, include shrinking and progrssing.\n */\n", "func_signal": "public void startWholeAnimation()", "code": "{\n    if (animationState > 0 || !isWindowFocused){\n        return;\n    }\n    //Initial those animation fraction firstly.\n    initAnimationParameters();\n    if (mShrinkingController == null || mProgressingController == null){\n        initShrinkingAnimationController();\n        initProgressingAnimationController();\n    }\n    if (mShrinkingController.isRunning() || mProgressingController.isRunning()){\n        mShrinkingController.end();\n        mShrinkingController.cancel();\n        mProgressingController.end();\n        mProgressingController.cancel();\n    }\n    mShrinkingController.start();\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ShrinkButton\\ShrinkButton.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Make a shrink animation.\n * @param duration\n * @return\n */\n", "func_signal": "public static Animator shrinkAnimator(int duration)", "code": "{\n    AnimatorSet animatorSet = new AnimatorSet();\n    ObjectAnimator xExpandAnimator = new ObjectAnimator();\n    xExpandAnimator.setPropertyName(\"scaleX\");\n    xExpandAnimator.setFloatValues(1.0f, 0.5f);\n    ObjectAnimator yExpandAnimator = new ObjectAnimator();\n    yExpandAnimator.setPropertyName(\"scaleY\");\n    yExpandAnimator.setFloatValues(1.0f, 0.5f);\n    animatorSet.play(xExpandAnimator).with(yExpandAnimator);\n    animatorSet.setDuration(duration);\n    animatorSet.setInterpolator(new AnticipateInterpolator());\n    return animatorSet;\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\GeneralAnimatorGenerator.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * \u6dfb\u52a0\u5355\u4e2a\u6307\u793a\u5668\n * @param backgroundResId\n * @param animator\n */\n", "func_signal": "private void addIndicator(@DrawableRes int backgroundResId, Animator animator)", "code": "{\n    if (animator.isRunning()){\n        animator.end();\n        animator.cancel();\n    }\n    View indicator = new View(getContext());\n    indicator.setBackgroundResource(backgroundResId);\n    addView(indicator, mIndicatorWidth, mIndicatorHeight);\n    LayoutParams lp = (LayoutParams) indicator.getLayoutParams();\n    if (mOrientation == LinearLayout.HORIZONTAL){\n        lp.leftMargin = mIndicatorMargin;\n        lp.rightMargin = mIndicatorMargin;\n    }else if (mOrientation == LinearLayout.VERTICAL){\n        lp.topMargin = mIndicatorMargin;\n        lp.bottomMargin = mIndicatorMargin;\n    }\n    indicator.setLayoutParams(lp);\n    animator.setTarget(indicator);\n    animator.start();\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ViewPagerIndicator\\PointIndicator.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Init the how particles would act motion.\n */\n", "func_signal": "private void initParticleMotion()", "code": "{\n    mParticleMotionControllers = new ArrayList<>();\n    mDisappearParticleMotionControllers = new ArrayList<>();\n    int littleOffset = 10;\n    int offsetOne = 0;\n    int smallStarOffsetToCenter = offsetOne + 5;\n    /**Small ones*/\n    ParticleMotionController disappear1 = new ParticleMotionController();\n    disappear1.setNumber(0);\n    disappear1.addModifier(new TranslateModifier(centerX - smallStarOffsetToCenter - bitmapDisappearDustHalfWidth,\n            centerY - bitmapDisappearDustHalfHeight,\n            centerX - smallStarOffsetToCenter - smallStarTranslateDistance - bitmapDisappearDustHalfWidth,\n            centerY - bitmapDisappearDustHalfHeight));\n    mDisappearParticleMotionControllers.add(disappear1);\n    ParticleMotionController disappear2 = new ParticleMotionController();\n    disappear2.setNumber(1);\n    disappear2.addModifier(new TranslateModifier(centerX - bitmapDisappearDustHalfWidth,\n            centerY - smallStarOffsetToCenter - bitmapDisappearDustHalfHeight,\n            centerX - bitmapDisappearDustHalfWidth,\n            centerY - smallStarOffsetToCenter - smallStarTranslateDistance - bitmapDisappearDustHalfHeight));\n    mDisappearParticleMotionControllers.add(disappear2);\n    ParticleMotionController disappear3 = new ParticleMotionController();\n    disappear3.setNumber(2);\n    disappear3.addModifier(new TranslateModifier(centerX + smallStarOffsetToCenter - bitmapDisappearDustHalfWidth,\n            centerY - bitmapDisappearDustHalfHeight,\n            centerX + smallStarOffsetToCenter + smallStarTranslateDistance - bitmapDisappearDustHalfWidth,\n            centerY - bitmapDisappearDustHalfHeight));\n    mDisappearParticleMotionControllers.add(disappear3);\n    ParticleMotionController disappear4 = new ParticleMotionController();\n    disappear4.setNumber(3);\n    disappear4.addModifier(new TranslateModifier(centerX - bitmapDisappearDustHalfWidth,\n            centerY + smallStarOffsetToCenter - bitmapDisappearDustHalfHeight,\n            centerX - bitmapDisappearDustHalfWidth,\n            centerY + smallStarOffsetToCenter + smallStarTranslateDistance - bitmapDisappearDustHalfHeight));\n    mDisappearParticleMotionControllers.add(disappear4);\n    ParticleMotionController info1 = new ParticleMotionController();\n    info1.setNumber(0);\n    info1.addModifier(new TranslateModifier(centerX - littleOffset,\n            centerY,\n            centerX - smallStarTranslateDistance - littleOffset,\n            centerY));\n    mParticleMotionControllers.add(info1);\n    ParticleMotionController info2 = new ParticleMotionController();\n    info2.setNumber(1);\n    info2.addModifier(new TranslateModifier(centerX,\n            centerY  - littleOffset,\n            centerX,\n            centerY - smallStarTranslateDistance  - littleOffset));\n    mParticleMotionControllers.add(info2);\n    ParticleMotionController info3 = new ParticleMotionController();\n    info3.setNumber(2);\n    mParticleMotionControllers.add(info3);\n    info3.addModifier(new TranslateModifier(centerX + littleOffset,\n            centerY,\n            centerX + smallStarTranslateDistance + littleOffset,\n            centerY));\n    ParticleMotionController info4 = new ParticleMotionController();\n    info4.setNumber(3);\n    info4.addModifier(new TranslateModifier(centerX,\n            centerY + littleOffset,\n            centerX,\n            centerY + smallStarTranslateDistance + littleOffset));\n    mParticleMotionControllers.add(info4);\n    for (int i = 0; i < 4; i++){\n        mParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.8f, 0.8f + 0.2f * random.nextFloat()));\n        mParticleMotionControllers.get(i).addModifier(new AlphaModifier(255, 100));\n        random.setSeed(System.currentTimeMillis() + i * 100);\n        mParticleMotionControllers.get(i).addModifier(getRandomArgbModifier());\n    }\n    for (int i = 0; i < 4; i++){\n        mDisappearParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.2f, 0.2f + 0.1f * random.nextFloat()));\n        mDisappearParticleMotionControllers.get(i).addModifier(new AlphaModifier(255, 100));\n    }\n    /**Big ones*/\n    ParticleMotionController disappear5 = new ParticleMotionController();\n    disappear5.setNumber(4);\n    disappear5.addModifier(new TranslateModifier(centerX - offsetOne - bitmapDisappearDustHalfWidth,\n            centerY - offsetOne - bitmapDisappearDustHalfHeight - offsetForHeartCenter,\n            centerX - offsetOne - bigStarTranslateDistance - bitmapDisappearDustHalfWidth,\n            centerY - offsetOne - bigStarTranslateDistance - bitmapDisappearDustHalfHeight - offsetForHeartCenter));\n    mDisappearParticleMotionControllers.add(disappear5);\n    ParticleMotionController disappear6 = new ParticleMotionController();\n    disappear6.setNumber(5);\n    disappear6.addModifier(new TranslateModifier(centerX + offsetOne - bitmapDisappearDustHalfWidth,\n            centerY - offsetOne - bitmapDisappearDustHalfHeight - offsetForHeartCenter,\n            centerX + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfWidth,\n            centerY - offsetOne - bigStarTranslateDistance - bitmapDisappearDustHalfHeight - offsetForHeartCenter));\n    mDisappearParticleMotionControllers.add(disappear6);\n    ParticleMotionController disappear7 = new ParticleMotionController();\n    disappear7.setNumber(6);\n    disappear7.addModifier(new TranslateModifier(centerX + offsetOne - bitmapDisappearDustHalfWidth,\n            centerY + offsetOne - bitmapDisappearDustHalfHeight - offsetForHeartCenter,\n            centerX + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfWidth,\n            centerY + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfHeight - offsetForHeartCenter));\n    mDisappearParticleMotionControllers.add(disappear7);\n    ParticleMotionController disappear8 = new ParticleMotionController();\n    disappear8.setNumber(7);\n    disappear8.addModifier(new TranslateModifier(centerX - offsetOne - bitmapDisappearDustHalfWidth,\n            centerY + offsetOne - bitmapDisappearDustHalfHeight - offsetForHeartCenter,\n            centerX - offsetOne - bigStarTranslateDistance - bitmapDisappearDustHalfWidth,\n            centerY + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfHeight - offsetForHeartCenter));\n    mDisappearParticleMotionControllers.add(disappear8);\n    ParticleMotionController info5 = new ParticleMotionController();\n    info5.setNumber(4);\n    info5.addModifier(new TranslateModifier(centerX - littleOffset,\n            centerY - littleOffset,\n            (float)(centerX - bigStarTranslateDistance * Math.sin(Math.PI / 4) - littleOffset ),\n            (float)(centerY - bigStarTranslateDistance * Math.sin(Math.PI / 4)) - littleOffset));\n    mParticleMotionControllers.add(info5);\n    ParticleMotionController info6 = new ParticleMotionController();\n    info6.setNumber(5);\n    info6.addModifier(new TranslateModifier(centerX + littleOffset,\n            centerY - littleOffset,\n            (float)(centerX + bigStarTranslateDistance * Math.sin(Math.PI / 4) + littleOffset),\n            (float)(centerY - bigStarTranslateDistance * Math.sin(Math.PI / 4)) - littleOffset));\n    mParticleMotionControllers.add(info6);\n    ParticleMotionController info7 = new ParticleMotionController();\n    info7.setNumber(6);\n    info7.addModifier(new TranslateModifier(centerX + littleOffset,\n            centerY + littleOffset,\n            (float)(centerX + bigStarTranslateDistance * Math.sin(Math.PI / 4) + littleOffset),\n            (float)(centerY + bigStarTranslateDistance * Math.sin(Math.PI / 4)) + littleOffset));\n    mParticleMotionControllers.add(info7);\n    ParticleMotionController info8 = new ParticleMotionController();\n    info8.setNumber(7);\n    info8.addModifier(new TranslateModifier(centerX - littleOffset,\n            centerY + littleOffset,\n            (float)(centerX - bigStarTranslateDistance * Math.sin(Math.PI / 4) - littleOffset),\n            (float)(centerY + bigStarTranslateDistance * Math.sin(Math.PI / 4)) + littleOffset));\n    mParticleMotionControllers.add(info8);\n    for (int i = 4; i < mParticleMotionControllers.size(); i++){\n        if (i < 8) {\n            mParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.9f, 0.9f + 0.3f * random.nextFloat()));\n            mParticleMotionControllers.get(i).addModifier(new AlphaModifier(240, 200));\n            random.setSeed(System.currentTimeMillis() + i * 100);\n            mParticleMotionControllers.get(i).addModifier(getRandomArgbModifier());\n        }\n    }\n    for (int i = 4; i < mDisappearParticleMotionControllers.size(); i++){\n        if (i < 8) {\n            mDisappearParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.3f, 0.3f + 0.1f * random.nextFloat()));\n            mDisappearParticleMotionControllers.get(i).addModifier(new AlphaModifier(240, 200));\n        }\n    }\n    /**Set to particle*/\n    if (mParticleMotionControllers.size() != mParticleField.getmParticles().size()){\n        return;\n    }\n    for (int i = 0; i < mParticleField.getmParticles().size(); i++){\n        mParticleField.getmParticles().get(i).setModifiers(mParticleMotionControllers.get(i).getModifierList());\n    }\n    if (mDisappearParticleMotionControllers.size() != mDisappearField.getmParticles().size()){\n        return;\n    }\n    for (int i = 0; i < mDisappearField.getmParticles().size(); i++){\n        mDisappearField.getmParticles().get(i).setModifiers(mDisappearParticleMotionControllers.get(i).getModifierList());\n    }\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\Particle\\ParticleHeartView.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * Use HSV to calculate the color transition.\n * @param startColor startColor\n * @param endColor  endColor\n * @param fraction fraction\n * @return int current color.\n */\n", "func_signal": "private int currentColorDuringTransition(int startColor, int endColor, float fraction)", "code": "{\n    final float[] from = new float[3], to = new float[3];\n    //fetch startColor\n    Color.colorToHSV(startColor, from);\n    //fetch endColor\n    Color.colorToHSV(endColor, to);\n    final float[] hsv = new float[3];\n    hsv[0] = from[0] + (to[0] - from[0]) * fraction;\n    hsv[1] = from[1] + (to[1] - from[1]) * fraction;\n    hsv[2] = from[2] + (to[2] - from[2]) * fraction;\n    return Color.HSVToColor(hsv);\n}", "path": "indicatorbox-library\\src\\main\\java\\com\\wusp\\indicatorbox_library\\ProgressBar\\LineProgressBar.java", "repo_name": "wusp/IndicatorBox", "stars": 427, "license": "mit", "language": "java", "size": 3614}
{"docstring": "/**\n * \u521d\u59cb\u5316\u788e\u7247\n */\n", "func_signal": "private void initFragment(Bundle savedInstanceState)", "code": "{\n    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n    if (savedInstanceState != null) {\n        minePicFragment = (MinePicFragment) getSupportFragmentManager().findFragmentByTag(\"minePicFragment\");\n    } else {\n        minePicFragment = new MinePicFragment();\n        transaction.add(R.id.fl_body, minePicFragment, \"minePicFragment\");\n    }\n    transaction.commitAllowingStateLoss();\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\UserInfoActivity.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u52a8\u6001\u7684\u8bbe\u7f6e\u72b6\u6001\u680f  \u5b9e\u73b0\u6c89\u6d78\u5f0f\u72b6\u6001\u680f\n *\n */\n", "func_signal": "private void initState()", "code": "{\n    bindingView.llBar.setVisibility(View.VISIBLE);\n    //\u83b7\u53d6\u5230\u72b6\u6001\u680f\u7684\u9ad8\u5ea6\n    int statusHeight = Utils.getStatusBarHeight(getActivity());\n    //\u52a8\u6001\u7684\u8bbe\u7f6e\u9690\u85cf\u5e03\u5c40\u7684\u9ad8\u5ea6\n    LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) bindingView.llBar.getLayoutParams();\n    params.height = statusHeight;\n    bindingView.llBar.setLayoutParams(params);\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\fragment\\PhotoFragment.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u5728\u8fd9\u91cc\u5b9e\u73b0Fragment\u6570\u636e\u7684\u7f13\u52a0\u8f7d.\n */\n", "func_signal": "@Override\npublic void setUserVisibleHint(boolean isVisibleToUser)", "code": "{\n    super.setUserVisibleHint(isVisibleToUser);\n    mIsVisible = getUserVisibleHint();\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\base\\BaseFragment.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u5207\u6362\n */\n", "func_signal": "private void SwitchTo(int position)", "code": "{\n    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n    switch (position) {\n        //\u9996\u9875\n        case 0:\n            hideShowFragment(transaction, fourFragment, thirdFragment, secondFragment, homeFragment);\n            Utils.setStatusTextColor(false, MainActivity.this);\n            break;\n        //\u6d3b\u52a8\u9875\n        case 1:\n            hideShowFragment(transaction, homeFragment, thirdFragment, fourFragment, secondFragment);\n            Utils.setStatusTextColor(true, MainActivity.this);\n            break;\n        //\u76f8\u518c\n        case 2:\n            hideShowFragment(transaction, homeFragment, fourFragment, secondFragment, thirdFragment);\n            Utils.setStatusTextColor(true, MainActivity.this);\n            break;\n        //\u6211\u7684\n        case 3:\n            hideShowFragment(transaction, homeFragment, secondFragment, thirdFragment, fourFragment);\n            Utils.setStatusTextColor(false, MainActivity.this);\n            break;\n        default:\n            break;\n    }\n\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\MainActivity.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u52a8\u6001\u7684\u8bbe\u7f6e\u72b6\u6001\u680f  \u5b9e\u73b0\u6c89\u6d78\u5f0f\u72b6\u6001\u680f\n *\n */\n", "func_signal": "private void initState()", "code": "{\n    bindingView.llBar.setVisibility(View.VISIBLE);\n    //\u83b7\u53d6\u5230\u72b6\u6001\u680f\u7684\u9ad8\u5ea6\n    int statusHeight = Utils.getStatusBarHeight(getActivity());\n    //\u52a8\u6001\u7684\u8bbe\u7f6e\u9690\u85cf\u5e03\u5c40\u7684\u9ad8\u5ea6\n    LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) bindingView.llBar.getLayoutParams();\n    params.height = statusHeight;\n    bindingView.llBar.setLayoutParams(params);\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\fragment\\ActiveFragment.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u5224\u65ad\u624b\u673a\u662f\u5426\u662f\u5c0f\u7c73\n * @return\n */\n", "func_signal": "public static boolean isMIUI()", "code": "{\n    try {\n        final BuildProperties prop = BuildProperties.newInstance();\n        return prop.getProperty(KEY_MIUI_VERSION_CODE, null) != null\n                || prop.getProperty(KEY_MIUI_VERSION_NAME, null) != null\n                || prop.getProperty(KEY_MIUI_INTERNAL_STORAGE, null) != null;\n    } catch (final IOException e) {\n        return false;\n    }\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u521d\u59cb\u5316tab\n */\n", "func_signal": "private void initTab()", "code": "{\n    for (int i = 0; i < mTitles.length; i++) {\n        mTabEntities.add(new TabEntity(mTitles[i], mIconSelectIds[i], mIconUnselectIds[i]));\n    }\n    bindingView.tabLayout.setTabData(mTabEntities);\n    //\u70b9\u51fb\u76d1\u542c\n    bindingView.tabLayout.setOnTabSelectListener(new OnTabSelectListener() {\n        @Override\n        public void onTabSelect(int position) {\n            SwitchTo(position);\n        }\n\n        @Override\n        public void onTabReselect(int position) {\n        }\n    });\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\MainActivity.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * @param activity\n * @param useThemestatusBarColor   \u662f\u5426\u8981\u72b6\u6001\u680f\u7684\u989c\u8272\uff0c\u4e0d\u8bbe\u7f6e\u5219\u4e3a\u900f\u660e\u8272\n * @param withoutUseStatusBarColor \u662f\u5426\u4e0d\u9700\u8981\u4f7f\u7528\u72b6\u6001\u680f\u4e3a\u6697\u8272\u8c03\n */\n", "func_signal": "public static void setStatusBar(Activity activity, boolean useThemestatusBarColor, boolean withoutUseStatusBarColor)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {//5.0\u53ca\u4ee5\u4e0a\n        View decorView = activity.getWindow().getDecorView();\n        int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n        decorView.setSystemUiVisibility(option);\n        if (useThemestatusBarColor) {\n            activity.getWindow().setStatusBarColor(activity.getResources().getColor(R.color.white));\n        } else {\n            activity.getWindow().setStatusBarColor(Color.TRANSPARENT);\n        }\n    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {//4.4\u52305.0\n        WindowManager.LayoutParams localLayoutParams = activity.getWindow().getAttributes();\n        localLayoutParams.flags = (WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS | localLayoutParams.flags);\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !withoutUseStatusBarColor) {\n        activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n    }\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u542b\u6709Bundle\u901a\u8fc7Class\u8df3\u8f6c\u754c\u9762\n **/\n", "func_signal": "public void startActivityForResult(Class<?> cls, Bundle bundle,\n                                   int requestCode)", "code": "{\n    Intent intent = new Intent();\n    intent.setClass(getActivity(), cls);\n    if (bundle != null) {\n        intent.putExtras(bundle);\n    }\n    startActivityForResult(intent, requestCode);\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\base\\BaseFragment.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u83b7\u53d6\u5e95\u90e8\u5bfc\u822a\u680f\u9ad8\u5ea6\n *\n * @return\n */\n", "func_signal": "public static int getNavigationBarHeight(Context context)", "code": "{\n    Resources resources = context.getResources();\n    int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n    //\u83b7\u53d6NavigationBar\u7684\u9ad8\u5ea6\n    navigationHeight = resources.getDimensionPixelSize(resourceId);\n    return navigationHeight;\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u8bbe\u7f6etitlebar\n */\n", "func_signal": "protected void setToolBar()", "code": "{\n    setSupportActionBar(mBaseBinding.toolBar);\n    ActionBar actionBar = getSupportActionBar();\n    if (actionBar != null) {\n        //\u53bb\u9664\u9ed8\u8ba4Title\u663e\u793a\n        actionBar.setDisplayShowTitleEnabled(false);\n        actionBar.setDisplayHomeAsUpEnabled(false);\n//            actionBar.setHomeAsUpIndicator(R.drawable.nav_icon_return);\n    }\n    mBaseBinding.backBtn.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            try {\n                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n                if (imm.isActive()) {   //\u5982\u679c\u4e3atrue,\u5219\u662f\u952e\u76d8\u6b63\u5728\u663e\u793a\n                    //\u8f6f\u4ef6\u76d8\u5904\u4e8e\u663e\u793a\u72b6\u6001\n                    ((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(BaseActivity.this.getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS); //\u9690\u85cf\u952e\u76d8\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            onBackPressed();\n        }\n    });\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\base\\BaseActivity.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u6807\u9898\u680f\u53f3\u4e0a\u89d2\u56fe\u6807\u8bbe\u7f6e\n * @param iconRes\n */\n", "func_signal": "public void setRightBtn(int iconRes)", "code": "{\n    mBaseBinding.titlebarRightTv.setVisibility(View.VISIBLE);\n    mBaseBinding.titlebarRightTv.setBackgroundDrawable(getResources().getDrawable(iconRes));\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\base\\BaseActivity.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u6539\u53d8\u5c0f\u7c73\u7684\u72b6\u6001\u680f\u5b57\u4f53\u989c\u8272\u4e3a\u9ed1\u8272, \u8981\u6c42MIUI6\u4ee5\u4e0a  lightStatusBar\u4e3a\u771f\u65f6\u8868\u793a\u9ed1\u8272\u5b57\u4f53\n */\n", "func_signal": "private static void processMIUI(boolean lightStatusBar, Activity activity)", "code": "{\n    Class<? extends Window> clazz = activity.getWindow().getClass();\n    try {\n        int darkModeFlag;\n        Class<?> layoutParams = Class.forName(\"android.view.MiuiWindowManager$LayoutParams\");\n        Field field = layoutParams.getField(\"EXTRA_FLAG_STATUS_BAR_DARK_MODE\");\n        darkModeFlag = field.getInt(layoutParams);\n        Method extraFlagField = clazz.getMethod(\"setExtraFlags\",int.class,int.class);\n        extraFlagField.invoke(activity.getWindow(), lightStatusBar? darkModeFlag : 0, darkModeFlag);\n    } catch (Exception ignored) {\n        ignored.printStackTrace();\n    }\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u8bbe\u7f6e\u6807\u9898\n * @param text\n */\n", "func_signal": "public void setTitle(CharSequence text)", "code": "{\n    mBaseBinding.toolBar.setTitle(\"\");\n    mBaseBinding.titleTv.setText(text);\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\base\\BaseActivity.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u542b\u6709Bundle\u901a\u8fc7Class\u8df3\u8f6c\u754c\u9762\n **/\n", "func_signal": "public void startActivity(Class<?> cls, Bundle bundle)", "code": "{\n    Intent intent = new Intent();\n    intent.setClass(getActivity(), cls);\n    if (bundle != null) {\n        intent.putExtras(bundle);\n    }\n    startActivity(intent);\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\base\\BaseFragment.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u6539\u53d8\u9b45\u65cf\u7684\u72b6\u6001\u680f\u5b57\u4f53\u4e3a\u9ed1\u8272\uff0c\u8981\u6c42FlyMe4\u4ee5\u4e0a\n */\n", "func_signal": "private static void processFlyMe(boolean isLightStatusBar, Activity activity)", "code": "{\n    WindowManager.LayoutParams lp = activity.getWindow().getAttributes();\n    try {\n        Class<?> instance = Class.forName(\"android.view.WindowManager$LayoutParams\");\n        int value = instance.getDeclaredField(\"MEIZU_FLAG_DARK_STATUS_BAR_ICON\").getInt(lp);\n        Field field = instance.getDeclaredField(\"meizuFlags\");\n        field.setAccessible(true);\n        int origin = field.getInt(lp);\n        if (isLightStatusBar) {\n            field.set(lp, origin | value);\n        } else {\n            field.set(lp, (~value) & origin);\n        }\n    } catch (Exception ignored) {\n        ignored.printStackTrace();\n    }\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u901a\u8fc7\u53cd\u5c04\u7684\u65b9\u5f0f\u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6\n *\n * @return\n */\n", "func_signal": "public static int getStatusBarHeight(Context context)", "code": "{\n    try {\n        Class<?> c = Class.forName(\"com.android.internal.R$dimen\");\n        Object obj = c.newInstance();\n        Field field = c.getField(\"status_bar_height\");\n        int x = Integer.parseInt(field.get(obj).toString());\n        return context.getResources().getDimensionPixelSize(x);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return 0;\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u521d\u59cb\u5316\u788e\u7247\n */\n", "func_signal": "private void initFragment(Bundle savedInstanceState)", "code": "{\n    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n    int currentTabPosition = 0;\n    if (savedInstanceState != null) {\n        homeFragment = (HomeFragment) getSupportFragmentManager().findFragmentByTag(\"homeFragment\");\n        secondFragment = (ActiveFragment) getSupportFragmentManager().findFragmentByTag(\"secondFragment\");\n        thirdFragment = (PhotoFragment) getSupportFragmentManager().findFragmentByTag(\"thirdFragment\");\n        fourFragment = (MineFragment) getSupportFragmentManager().findFragmentByTag(\"fourFragment\");\n        currentTabPosition = savedInstanceState.getInt(Utils.HOME_CURRENT_TAB_POSITION);\n    } else {\n        homeFragment = new HomeFragment();\n        secondFragment = new ActiveFragment();\n        thirdFragment = new PhotoFragment();\n        fourFragment = new MineFragment();\n\n        transaction.add(R.id.fl_body, homeFragment, \"homeFragment\");\n        transaction.add(R.id.fl_body, secondFragment, \"secondFragment\");\n        transaction.add(R.id.fl_body, thirdFragment, \"thirdFragment\");\n        transaction.add(R.id.fl_body, fourFragment, \"fourFragment\");\n    }\n    transaction.commit();\n    SwitchTo(currentTabPosition);\n    bindingView.tabLayout.setCurrentTab(currentTabPosition);\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\MainActivity.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "//\u83b7\u53d6\u662f\u5426\u5b58\u5728NavigationBar\n", "func_signal": "public static boolean checkDeviceHasNavigationBar(Context context)", "code": "{\n    boolean hasNavigationBar = false;\n    Resources rs = context.getResources();\n    int id = rs.getIdentifier(\"config_showNavigationBar\", \"bool\", \"android\");\n    if (id > 0) {\n        hasNavigationBar = rs.getBoolean(id);\n    }\n    try {\n        Class systemPropertiesClass = Class.forName(\"android.os.SystemProperties\");\n        Method m = systemPropertiesClass.getMethod(\"get\", String.class);\n        String navBarOverride = (String) m.invoke(systemPropertiesClass, \"qemu.hw.mainkeys\");\n        if (\"1\".equals(navBarOverride)) {\n            hasNavigationBar = false;\n        } else if (\"0\".equals(navBarOverride)) {\n            hasNavigationBar = true;\n        }\n    } catch (Exception e) {\n\n    }\n    return hasNavigationBar;\n\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * \u5224\u65ad\u624b\u673a\u662f\u5426\u662f\u9b45\u65cf\n * @return\n */\n", "func_signal": "public static boolean isFlyme()", "code": "{\n    try {\n        // Invoke Build.hasSmartBar()\n        final Method method = Build.class.getMethod(\"hasSmartBar\");\n        return method != null;\n    } catch (final Exception e) {\n        return false;\n    }\n}", "path": "StatusBarTextColorChange\\app\\src\\main\\java\\com\\smilexie\\statusbartextcolorchange\\util\\Utils.java", "repo_name": "xiewenfeng/statusbartextcolorchange", "stars": 264, "license": "None", "language": "java", "size": 373}
{"docstring": "/**\n * attempts to execute a Tasker task (fails silently if Tasker is disabled, not installed, or if the task does not exist)\n * @param task  the exact name of the Tasker task\n * @param params  values of any params will be available to the Tasker task in variables %par1, %par2, etc.\n */\n", "func_signal": "public void taskerExecuteTask(final String task, final String[] params)", "code": "{\n    if (D) Log.d(TAG, \"taskerExecuteTask() : task= \" + task + \" params.length= \" + params.length);\n\n    new Handler().post(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                TaskerIntent intent = new TaskerIntent(task);\n\n                for (String param : params) {\n                    intent.addParameter(param);\n                }\n\n                mAppContext.sendBroadcast(intent);\n            } catch (Exception e) {\n                Log.e(TAG, \"taskerExecuteTask() : unexpected exception : exception= \" + e.getMessage(), e);\n\n                if (!mSilentErrors) {\n                    final String text = mAppName + \": \" + mAppContext.getString(R.string.msg_error_tasker) + \" \" + task;\n                    Toast.makeText(mAppContext, text, Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    });\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\car_bus_interface\\AndroidActions.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * set the value of an application-wide state item\n *\n * @param appContext  the application context\n * @param keyResId  a resource identifier from strings_class_app_state.xml (example: R.string.app_state_b_some_item)\n * @param value  the value to store\n */\n", "func_signal": "public static void setString(final Context appContext, final int keyResId, final String value)", "code": "{\n    if (DD) Log.d(TAG, \"getPreferences()\");\n\n    getPreferences(appContext).edit().putString(appContext.getString(keyResId), value).apply();\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\helpers\\AppState.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// for testing that Tasker is enabled and external access is allowed\n", "func_signal": "private static boolean prefSet( Context context, String col )", "code": "{\n\n    String [] proj = new String [] { col };\n\n    Cursor c = context.getContentResolver().query( Uri.parse( TASKER_PREFS_URI ), proj, null, null, null );\n\n    boolean acceptingFlag = false;\n\n    if ( c == null )\n        Log.w( TAG, \"no cursor for \" + TASKER_PREFS_URI );\n    else {\n        c.moveToFirst();\n\n        if ( Boolean.TRUE.toString().equals( c.getString( 0 ) ) )\n            acceptingFlag = true;\n\n        c.close();\n    }\n\n    return acceptingFlag;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// Arbitrary specification of (local) variable names and values\n", "func_signal": "public TaskerIntent addLocalVariable( String name, String value )", "code": "{\n\n    ArrayList<String> names, values;\n\n    if ( hasExtra( EXTRA_VAR_NAMES_LIST ) ) {\n        names = getStringArrayListExtra( EXTRA_VAR_NAMES_LIST );\n        values = getStringArrayListExtra( EXTRA_VAR_VALUES_LIST );\n    }\n    else {\n        names = new ArrayList<String>();\n        values = new ArrayList<String>();\n\n        putStringArrayListExtra( EXTRA_VAR_NAMES_LIST, names );\n        putStringArrayListExtra( EXTRA_VAR_VALUES_LIST, values );\n    }\n\n    names.add( name );\n    values.add( value );\n\n    return this;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// Use with startActivity to retrieve Tasker from Android market\n", "func_signal": "public static Intent getTaskerInstallIntent( boolean marketFlag )", "code": "{\n\n    return new Intent(\n            Intent.ACTION_VIEW,\n            Uri.parse(\n                    marketFlag ?\n                            ( ( SDKVersion() == CUPCAKE_SDK_VERSION ) ? TASKER_MARKET_URL_CUPCAKE : TASKER_MARKET_URL ) :\n                            TASKER_DOWNLOAD_URL\n            )\n    );\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// public access deprecated, use TaskerIntent.testSend() instead\n", "func_signal": "public static boolean havePermission( Context c )", "code": "{\n    return c.checkPermission( PERMISSION_RUN_TASKS, Process.myPid(), Process.myUid() ) ==\n            PackageManager.PERMISSION_GRANTED;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// int arg\n", "func_signal": "public TaskerIntent addArg( int arg )", "code": "{\n    Bundle b = getActionBundle();\n\n    if ( b != null )\n        b.putInt( ARG_INDEX_PREFIX + Integer.toString( argCount++ ), arg );\n\n    return this;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// string arg\n", "func_signal": "public TaskerIntent addArg( String arg )", "code": "{\n\n    Bundle b = getActionBundle();\n\n    if ( b != null )\n        b.putString( ARG_INDEX_PREFIX + Integer.toString( argCount++ ), arg );\n\n    return this;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * like AppState.getString() for Booleans\n */\n", "func_signal": "public static boolean getBoolean(final Context appContext, final int keyResId, final boolean defaultValue)", "code": "{\n    if (DD) Log.d(TAG, \"getPreferences()\");\n\n    return getPreferences(appContext).getBoolean(appContext.getString(keyResId), defaultValue);\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\helpers\\AppState.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * simulate a device/keyboard button (requires root)\n * @param keyCode  one of the android.view.KeyEvent.KEYCODE_* constants\n */\n", "func_signal": "public void sysSimulateButton(final int keyCode)", "code": "{\n    if (D) Log.d(TAG, \"sysSimulateButton() : keyCode= \" + keyCode);\n\n    sysExecuteCommand(\"su -c input keyevent \" + keyCode);\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\car_bus_interface\\AndroidActions.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// Tasker has different package names for Play Store and non- versions\n// for historical reasons\n", "func_signal": "public static String getInstalledTaskerPackage( Context context )", "code": "{\n\n    String foundPackage = null;\n\n    try {\n        context.getPackageManager().getPackageInfo( TASKER_PACKAGE, 0 );\n        foundPackage = TASKER_PACKAGE;\n    }\n    catch ( PackageManager.NameNotFoundException e ) {\n    }\n\n    try {\n        context.getPackageManager().getPackageInfo( TASKER_PACKAGE_MARKET, 0 );\n        foundPackage = TASKER_PACKAGE_MARKET;\n    }\n    catch ( PackageManager.NameNotFoundException e ) {\n    }\n\n    return foundPackage;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// Sets subsequently %par1, %par2 etc\n", "func_signal": "public TaskerIntent addParameter( String value )", "code": "{\n\n    int index = 1;\n\n    if ( getExtras().containsKey( EXTRA_VAR_NAMES_LIST ) )\n        index = getExtras().getStringArrayList( EXTRA_VAR_NAMES_LIST ).size() + 1;\n\n    Log.d(TAG, \"index: \" + index );\n\n    addLocalVariable( \"%\" + PARAM_VAR_NAME_PREFIX + index, value );\n\n    return this;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// Application arg\n", "func_signal": "public TaskerIntent addArg( String pkg, String cls )", "code": "{\n    Bundle b = getActionBundle();\n\n    if ( b != null ) {\n        StringBuilder builder = new StringBuilder();\n        builder.append( APP_ARG_PREFIX ).\n                append( pkg ). append( \",\" ). append( cls );\n        b.putString( ARG_INDEX_PREFIX + Integer.toString( argCount++ ), b.toString() );\n    }\n\n    return this;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * simulate a MEDIA device/keyboard button via root or non-root method\n * @param keyCode  any of the android.view.KeyEvent.KEYCODE_MEDIA_* constants (must be a MEDIA one)\n * @param useRootMethod  root method works most consistently, otherwise may not work correctly when multiple media players are present (gives focus to the default one)\n */\n", "func_signal": "public void sysSimulateMediaButton(final int keyCode, final boolean useRootMethod)", "code": "{\n    if (D) Log.d(TAG, \"sysSimulateMediaButton() : keyCode= \" + keyCode + \" useRootMethod= \" + useRootMethod);\n\n    if (useRootMethod) {\n        try {\n            sysSimulateButton(keyCode);\n        } catch (Exception ignored) {}\n    } else {\n        new Handler().post(new Runnable() {\n            @Override\n            public void run() {\n                try{\n                    final long now = SystemClock.uptimeMillis();\n\n                    Intent intent = new Intent(Intent.ACTION_MEDIA_BUTTON, null);\n                    KeyEvent event = new KeyEvent(now, now, KeyEvent.ACTION_DOWN, keyCode, 0);\n                    intent.putExtra(Intent.EXTRA_KEY_EVENT, event);\n                    mAppContext.sendOrderedBroadcast(intent, null);\n\n                    intent = new Intent(Intent.ACTION_MEDIA_BUTTON, null);\n                    event = new KeyEvent(now, now, KeyEvent.ACTION_UP, keyCode, 0);\n                    intent.putExtra(Intent.EXTRA_KEY_EVENT, event);\n                    mAppContext.sendOrderedBroadcast(intent, null);\n                } catch (Exception e) {\n                    Log.e(TAG, \"sysSimulateMediaButton() : unexpected exception : exception= \" + e.getMessage(), e);\n\n                    if (!mSilentErrors) {\n                        final String text = mAppName + \": \" + mAppContext.getString(R.string.msg_error_simulating_media_btn) + \" \" + keyCode;\n                        Toast.makeText(mAppContext, text, Toast.LENGTH_SHORT).show();\n                    }\n                }\n            }\n        });\n    }\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\car_bus_interface\\AndroidActions.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * send a very basic implicit intent (useful for operations like opening a URL, dialing a phone number, etc.)\n * @param action  full string representation of the intent action, examples: \"android.intent.action.DIAL\", \"android.intent.action.VIEW\", etc.\n * @param uri  the intent data URI string, examples: \"tel:123\", \"http://google.com\", etc.\n */\n", "func_signal": "public void sysSendImplicitIntent(final String action, final Uri uri)", "code": "{\n    if (D) Log.d(TAG, \"sysSendImplicitIntent() : action= \" + action + \" uri= \" + uri.toString());\n\n    new Handler().post(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                Intent intent = new Intent(action, uri);\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                mAppContext.startActivity(intent);\n            } catch (Exception e) {\n                Log.e(TAG, \"sysSendImplicitIntent() : unexpected exception : exception= \" + e.getMessage(), e);\n\n                if (!mSilentErrors) {\n                    final String text = mAppName + \": \" + mAppContext.getString(R.string.msg_error_implicit_intent) + \" \" + action + \" / \" + uri;\n                    Toast.makeText(mAppContext, text, Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    });\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\car_bus_interface\\AndroidActions.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * switches to most recent running app (like ALT+TAB shortcut on PC)\n */\n", "func_signal": "public void sysSwitchToLastApp()", "code": "{\n    if (D) Log.d(TAG, \"sysSwitchToLastApp()\");\n\n    new Handler().post(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                final String ANDROID = \"android\";\n                final String ANDROID_UI = \"com.android.systemui\";\n                final String ANDROID_LAUNCHER = \"com.android.launcher\";\n\n                //find the current launcher's package name\n                String launcherPackageName = ANDROID_LAUNCHER;\n\n                Intent intent = new Intent(Intent.ACTION_MAIN);\n                intent.addCategory(Intent.CATEGORY_HOME);\n                ActivityManager activityManager = (ActivityManager)mAppContext.getSystemService(Context.ACTIVITY_SERVICE);\n                ResolveInfo resolveInfo = mAppContext.getPackageManager().resolveActivity(intent, intent.getFlags());\n\n                if (resolveInfo.activityInfo != null && resolveInfo.activityInfo.packageName != \"\") {\n                    launcherPackageName = resolveInfo.activityInfo.packageName;\n                }\n\n                if (D) Log.d(TAG, \"sysSwitchToLastApp() : launcherPackageName = \" + launcherPackageName);\n\n                //ignore system-ui components (keyboard) and the launcher (home screen) as possible apps to switch to\n                String[] neverSwitchToPackageNames = {launcherPackageName, mAppContext.getApplicationInfo().packageName, ANDROID, ANDROID_UI, \"\"};\n\n                //iterate recent apps\n                String packageName;\n                String frontPackageName = \"\";\n\n                List<ActivityManager.RunningTaskInfo> tasks = activityManager.getRunningTasks(5);\n                //List<ActivityManager.RecentTaskInfo> tasks = activityManager.getRecentTasks(5, ActivityManager.RECENT_IGNORE_UNAVAILABLE);\n                \n                for (ActivityManager.RunningTaskInfo task: tasks){\n                    packageName = task.topActivity.getPackageName();\n                    //packageName = task.baseIntent.getComponent().getPackageName();\n                    if (D) Log.d(TAG, \"sysSwitchToLastApp() : packageName = \" + packageName);\n\n                    //never switch to a dead or invalid app\n                    if (task.id > 0 && !Arrays.asList(neverSwitchToPackageNames).contains(packageName)) {\n                        //switch to the most-recent valid app that isn't already in the front\n                        if (frontPackageName != \"\" && packageName != frontPackageName) {\n                            if (D) Log.d(TAG, \"sysSwitchToLastApp() : winner! packageName, task.id = \" + packageName + \", \" + task.id);\n                            activityManager.moveTaskToFront(task.id, ActivityManager.MOVE_TASK_NO_USER_ACTION);\n                            break;\n                        }\n                    }\n\n                    //prevent dead apps and system-ui type components showing up as the front app (because we want the real foreground app)\n                    if (task.id > 0 && packageName != ANDROID && packageName != ANDROID_UI) {\n                        frontPackageName = packageName;\n                    }\n                }\n\n                /*\n                todo: above code will not work on Lollipop or newer, refactor to include alternative way of getting task history...\n                code below is from stackexchange: http://stackoverflow.com/questions/24590533/how-to-get-recent-tasks-on-android-l\n\n                //todo: prompt user to grant access for this app to access usage data\n                ...\n\n                //launch the correct settings area so user can grant access\n                Intent intent2 = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);\n                mAppContext.sendBroadcast(intent2);\n\n                String topPackageName ;\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                    UsageStatsManager mUsageStatsManager = (UsageStatsManager)getSystemService(\"usagestats\");\n                    long time = System.currentTimeMillis();\n\n                    // We get usage stats for the last 10 seconds\n                    List<UsageStats> stats = mUsageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_DAILY, time - 1000*10, time);\n\n                    // Sort the stats by the last time used\n                    if(stats != null) {\n                        SortedMap<Long,UsageStats> mySortedMap = new TreeMap<Long,UsageStats>();\n                        for (UsageStats usageStats : stats) {\n                            mySortedMap.put(usageStats.getLastTimeUsed(),usageStats);\n                        }\n                        if(mySortedMap != null && !mySortedMap.isEmpty()) {\n                            topPackageName =  mySortedMap.get(mySortedMap.lastKey()).getPackageName();\n                        }\n                    }\n                }\n                */\n            } catch (Exception e) {\n                Log.e(TAG, \"sysSwitchToLastApp() : unexpected exception : exception= \" + e.getMessage(), e);\n\n                if (!mSilentErrors) {\n                    final String text = mAppName + \": \" + mAppContext.getString(R.string.msg_error_last_app);\n                    Toast.makeText(mAppContext, text, Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    });\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\car_bus_interface\\AndroidActions.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * like AppState.setString() for Booleans\n */\n", "func_signal": "public static void setBoolean(final Context appContext, final int keyResId, final boolean value)", "code": "{\n    if (DD) Log.d(TAG, \"getPreferences()\");\n\n    getPreferences(appContext).edit().putBoolean(appContext.getString(keyResId), value).apply();\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\helpers\\AppState.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// test we can send a TaskerIntent to Tasker\n// use *before* sending an intent\n// still need to test the *result after* sending intent\n", "func_signal": "public static Status testStatus( Context c )", "code": "{\n\n    Status result;\n\n    if ( ! taskerInstalled( c ) )\n        result = Status.NotInstalled;\n    else if ( ! havePermission( c ) )\n        result = Status.NoPermission;\n    else if ( ! TaskerIntent.prefSet( c, PROVIDER_COL_NAME_ENABLED ) )\n        result = Status.NotEnabled;\n    else if ( ! TaskerIntent.prefSet( c, PROVIDER_COL_NAME_EXTERNAL_ACCESS ) )\n        result = Status.AccessBlocked;\n    else if ( ! new TaskerIntent( \"\" ).receiverExists( c ) )\n        result = Status.NoReceiver;\n    else\n        result = Status.OK;\n\n    return result;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * execute a shell command\n * @param command  the command string. if root is required, begin with \"su -c\"\n */\n", "func_signal": "public void sysExecuteCommand(final String command)", "code": "{\n    if (D) Log.d(TAG, \"sysExecuteCommand() : command= \" + command);\n\n    new Handler().post(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                Runtime.getRuntime().exec(command);\n            } catch (Exception e) {\n                Log.e(TAG, \"sysExecuteCommand() : unexpected exception : exception= \" + e.getMessage(), e);\n\n                if (!mSilentErrors) {\n                    final String text = mAppName + \": \" + mAppContext.getString(R.string.msg_error_executing_command) + \" \" + command;\n                    Toast.makeText(mAppContext, text, Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    });\n}", "path": "Android Studio Project\\app\\src\\main\\java\\com\\theksmith\\android\\car_bus_interface\\AndroidActions.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "// boolean arg\n", "func_signal": "public TaskerIntent addArg( boolean arg )", "code": "{\n    Bundle b = getActionBundle();\n\n    if ( b != null )\n        b.putBoolean( ARG_INDEX_PREFIX + Integer.toString( argCount++ ), arg );\n\n    return this;\n}", "path": "Android Studio Project\\app\\src\\main\\java\\net\\dinglisch\\android\\tasker\\TaskerIntent.java", "repo_name": "theksmith/CarBusInterface", "stars": 267, "license": "mit", "language": "java", "size": 2378}
{"docstring": "/**\n * \u2de81(\u02fd\u2de8)\n *\n * @param intervals\n * @param interval\n * @return\n */\n", "func_signal": "public List<Interval> insert(List<Interval> intervals, Interval interval)", "code": "{\n    List<Interval> result = new ArrayList<>();\n    boolean saveInterval = false;\n    for (Interval i : intervals) {\n        if (interval.start > i.end) {\n            result.add(i);\n            continue;\n        }\n        if (interval.end < i.start) {\n            if (!saveInterval) {\n                result.add(interval);\n                saveInterval = true;\n            }\n            result.add(i);\n            continue;\n        }\n        if (interval.start <= i.end) {\n            interval.start = Math.min(interval.start, i.start);\n        }\n        if (interval.end >= i.start) {\n            interval.end = Math.max(interval.end, i.end);\n        }\n    }\n    if (!saveInterval) result.add(interval);\n    return result;\n}", "path": "src\\leetcode_algorithm\\q057_InsertInteval.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u0436\u0434\u05b8\u013c\u013c\u06a3\u013c\n", "func_signal": "public void writeToFile()", "code": "{\n    if (!this.isEmpty())\n\t\t\ttry {\n            FileOutputStream fout = new FileOutputStream(this.filename);// \u013c\u05bd\n            ObjectOutputStream objout = new ObjectOutputStream(fout);// \u05bd\n            Iterator<Friend> it = this.iterator();\n            while (it.hasNext())\n                // \u03b4\u04b5\u043a\u052a\u02a6\n                objout.writeObject(it.next());// \u0434\u04bb\n            objout.close();\n            fout.close();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace();\n\t\t\t}\n\t}", "path": "src\\phonebook\\PhoneBookTreeSet.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u063ei\u0435j\u0435\u052a\n", "func_signal": "public int get(int i, int j)", "code": "{\n\tif (i < 0 || i >= this.rows || j < 0 || j >= this.columns)\n\t\tthrow new IndexOutOfBoundsException(\"\u052a\u0635\u043b\u053d\");\n\tCrossNode p = this.rowheads[i];// \u00f5i\u0435\n\twhile (p != null) {// \u02f3\n\t\tif (p.data.column == j)// \u04b5\n\t\t\treturn p.data.value;\n\t\tp = p.right;\n\n\t}\n\treturn 0;// \u00fb\u04b5\uda9f\udd7b0\n}", "path": "src\\array\\CrossLinkedSparseMatrix.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u00ferow\u0435column\u052a\u05b5\u03aavalue\n", "func_signal": "public void set(int row, int column, int value)", "code": "{\n\tif (value == 0)\n\t\treturn;\n\tif (rows >= this.rows || column >= this.columns)\n\t\tthrow new IllegalArgumentException(\"\u052a\u043b\u053d\");\n\t// \u06b5row\u0432\u05b8\u052a\u98ec\u0123\u0423\u0435\u0432\ubd7d\u052a\u013d\n\tTriple elem = new Triple(row, column, value);\n\tCrossNode rhead = this.rowheads[row];// rhead\u05b8row\u0435\u0135\u04bb\n\tif (rhead == null || rhead.data.column > column) {\n\t\tthis.rowheads[row] = new CrossNode(elem, rhead, null);\n\t\tinsertColumnHead(this.rowheads[row]);// \u00fd\u06b5\ubd7d\u0435\u0135\n\t\treturn;\n\t}\n\tCrossNode front = null, p = rhead;\n\twhile (p != null && p.data.column <= column) {// \ubd65\u02f3\n\t\tif (p.data.column == column) {// \u04b5\u013e\u052a\u05b5\n\t\t\tp.data.value = value;\n\t\t\treturn;\n\t\t}\n\t\tfront = p;// frontp\u01f0\n\t\tp = p.right;\n\t}\n\tfront.right = new CrossNode(elem, p, null);// fornt\u05ae\u052a\u38ec\u043c\u03b2\n\tinsertColumnHead(front.right);// \u00fd\ubd7d\u0435\u0135\n}", "path": "src\\array\\CrossLinkedSparseMatrix.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// x\udb4e\udf37\u05f4\u03b3\u05b5\u0136\udb4e\udf31\u023dComparaotr\u023d\n", "func_signal": "public Friend search(Friend x, Comparator<Friend> c)", "code": "{\n    Iterator<Friend> it = this.iterator();\n    while (it.hasNext()) {// \u03b4\u04b5\u043a\u052a\u02b1\n        Friend f = it.next();\n        if (c.compare(f, x) == 0)// \u0271\u023dc\u05b8\u023d\u03f9\n            return f;\n    }\n    return null;// \u03b4\u04b5\u02b1null\n}", "path": "src\\phonebook\\PhoneBookTreeSet.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// n\n", "func_signal": "public static int[] random(int n)", "code": "{\n\tint[] table = new int[n];\n\tfor (int i = 0; i < n; i++) {\n\t\ttable[i] = (int) (Math.random() * 100);\n\t}\n\treturn table;\n}", "path": "src\\sort\\IntRandom.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// node\u06b5\u3d7d\u04e6\u0435\n", "func_signal": "private void insertColumnHead(CrossNode node)", "code": "{\n\tTriple elem = node.data;\n\tCrossNode chead = this.columnshead[elem.column];// \u00f5column\u0435\n\tif (chead == null || chead.data.row > elem.row) {// \u0571\u0377\n\t\tthis.columnshead[elem.column] = node;\n\t\tif (chead != null)\n\t\t\tnode.down = chead.down;\n\t} else {// \u043c\u03b2\n\t\tCrossNode front = chead, p = front.down;// frontp\u01f0\n\t\twhile (p != null && p.data.row <= elem.row) {// \u02f3\n\t\t\tfront = p;\n\t\t\tp = p.down;\n\t\t}\n\t\tfront.down = node;// node\ubd7dfront\u05ae\u043c\u03b2\n\t\tnode.down = p;\n\t}\n}", "path": "src\\array\\CrossLinkedSparseMatrix.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u01f0smat\u04e3this+=smat\n", "func_signal": "public void add(CrossLinkedSparseMatrix smat)", "code": "{\n\tif (this.rows != smat.rows || this.columns != smat.columns)\n\t\tthrow new IllegalArgumentException(\"\u036c\");\n\tfor (int i = 0; i < this.rows; i++) {// \u04f2\u03f2\n\t\tCrossNode rhead = this.rowheads[i];// \u0221\u01f0i\u0435\n\t\tCrossNode q = smat.rowheads[i];// \u00f2i\u0435\n\t\tif (q == null)\n\t\t\tcontinue;\n\t\tif (rhead == null || rhead.data.column > q.data.column) {// \u0571\u0377\n\t\t\trhead = new CrossNode(new Triple(q.data), rhead, null);\n\t\t\tthis.rowheads[i] = rhead;\n\t\t\tinsertColumnHead(rhead);\n\t\t\tq = q.right;\n\t\t}\n\t\tCrossNode front = null, p = rhead;// \u043c\u03b2\n\t\twhile (p != null && q != null) {\n\t\t\tif (p.data.column == q.data.column) {// \u02be\u036c\u03bb\n\t\t\t\tp.data.value += q.data.value;// \u052a\u05b5\u052a\u05b5\n\t\t\t\tif (p.data.value == 0)// \u052a\u05b5\u03aa0\n\t\t\t\t\tif (front == null) {\n\t\t\t\t\t\tthis.rowheads[i] = p.right;\n\t\t\t\t\t\tremoveColumnHeads(p);// \u04e6\u0135\u027enode\n\t\t\t\t\t\tp = p.right;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfront.right = p.right;// \u04fa\u052a\u0632\u04aa\u6d22\u027ep\n\t\t\t\t\t\tremoveColumnHeads(p);// \u04e6\u0435\u0135\u027enode\n\t\t\t\t\t\tp = front.right;\n\t\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfront = p;// frontp\u01f0\n\t\t\t\t\tp = p.right;\n\t\t\t\t}\n\t\t\t\tq = q.right;\n\t\t\t} else if (p.data.column < q.data.column) {\n\t\t\t\tfront = p;\n\t\t\t\tp = p.right;// \u01f0\u052a\u05b5\u0421p\u01b6\u05b5\u052a\n\t\t\t} else {\n\t\t\t\t// \u05b5q\u3ca2\ubd7dfront\u05ae\udb4e\udf38\u05b5\u052a\n\t\t\t\tfront.right = new CrossNode(new Triple(q.data), p, null);\n\t\t\t\tq = q.right;\n\t\t\t\tinsertColumnHead(front.right);\n\t\t\t}\n\t\t}\n\n\t\twhile (q != null) {// smat\u02a3\u3e34\u01b2\ubd7d\u01f0\u03b2\n\t\t\tfront.right = new CrossNode(new Triple(q.data), null, null);\n\t\t\tinsertColumnHead(front.right);\n\t\t\tfront = front.right;\n\t\t\tq = q.right;\n\t\t}\n\t}\n\n}", "path": "src\\array\\CrossLinkedSparseMatrix.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "/**\n * \u2de81 (\u02fd\u2de8\u0779\u9de8)\n *\n * @param root\n * @return\n */\n", "func_signal": "public int maxDepth(TreeNode root)", "code": "{\n    if (root == null) return 0;\n    return 1 + Math.max(maxDepth(root.right), maxDepth(root.left));\n}", "path": "src\\leetcode_algorithm\\q104_MaximumDepthOfBinaryTree.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "/**\n * \u2de81\n * @param prices\n * @return\n */\n", "func_signal": "public int maxProfit(int[] prices)", "code": "{\n    int total = 0;\n    for(int i = 0; i<prices.length-1;i++) {\n        if(prices[i+1] > prices[i]) total+=prices[i+1]-prices[i];\n    }\n    return total;\n}", "path": "src\\leetcode_algorithm\\q122_BestTimeToBuyAndSellStock2.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u05b8\u013c\u0436\u0221\u04f5\n", "func_signal": "private void readFromFile()", "code": "{\n    try {\n        FileInputStream fin = new FileInputStream(this.filename);// \u013c\u05bd\n        ObjectInputStream objin = new ObjectInputStream(fin);// \u05bd\n        while (true)\n            // \u0221\u03b4\u02b1\n            try {\n                this.add((Friend) objin.readObject());// \u0221\u04bb\u04f5\n            } catch (Exception e) {\n                break;\n            }// \u04bbClassCastFoundExceptionEOFEException\ucce3\n        objin.close();\n        fin.close();\n\t\t} catch (IOException e) {\n        e.printStackTrace();// \u05b8\u013c\u02b1\u03aa\n    }\n}", "path": "src\\phonebook\\PhoneBookTreeSet.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "/**\n * \u2de82(\u01bc\u2de8)\n *\n * @param intervals\n * @param newINterval\n * @return\n */\n", "func_signal": "public List<Interval> insert2(List<Interval> intervals, Interval newINterval)", "code": "{\n    List<Interval> result = new LinkedList<>();\n    int i = 0;\n    while (i < intervals.size() && intervals.get(i).end < newINterval.start)\n        result.add(intervals.get(i++));\n    while (i < intervals.size() && intervals.get(i).start <= newINterval.end) {\n        newINterval = new Interval(Math.min(newINterval.start, intervals.get(i).start),\n                Math.max(newINterval.end, intervals.get(i).end));\n        i++;\n    }\n    result.add(newINterval);\n    while (i < intervals.size()) result.add(intervals.get(i++));\n    return result;\n}", "path": "src\\leetcode_algorithm\\q057_InsertInteval.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "/**\n * \u2de82 \u057b\n *\n * @param root\n * @return\n */\n", "func_signal": "public int maxDepth1(TreeNode root)", "code": "{\n    if (root == null) return 0;\n    Stack<TreeNode> stack = new Stack<>();\n    Stack<Integer> value = new Stack<>();\n    stack.push(root);\n    int max = 0;\n    while (!stack.isEmpty()) {\n        TreeNode node = stack.pop();\n        int temp = value.pop();\n        max = Math.max(temp, max);\n        if (node.left != null) {\n            stack.push(node.left);\n            value.push(temp + 1);\n        }\n        if (node.right != null) {\n            stack.push(node.right);\n            value.push(temp + 1);\n        }\n    }\n    return max;\n}", "path": "src\\leetcode_algorithm\\q104_MaximumDepthOfBinaryTree.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "//\n", "func_signal": "public CrossLinkedSparseMatrix(int rows, int columns)", "code": "{// rowscolumns\n\tif (rows <= 0 || columns <= 0)\n\t\tthrow new IllegalArgumentException(\"\");\n\tthis.rows = rows;\n\tthis.columns = columns;\n\tthis.rowheads = new CrossNode[this.rows];// \u05b8\u013f\u02f3\u052anul\n\tthis.columnshead = new CrossNode[this.columns];// \u05b8\u013f\u02f3\u052anull\n}", "path": "src\\array\\CrossLinkedSparseMatrix.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u02bd\n", "func_signal": "public Polynomial plus(Polynomial poly)", "code": "{\n\tPolynomial cpoly = new Polynomial(this);// \ueffd\n\tcpoly.add(poly);\n\treturn cpoly;// \u0636\n}", "path": "src\\list\\Polynomial.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u013c\n", "func_signal": "public PhoneBookTreeSet(String filename)", "code": "{\n        super();// \u057ccomparable\u04ff\u1e69\n        this.filename = filename;\n        this.readFromFile();// \u05b8\u013c\u0436\u0221\u04f5\n    }", "path": "src\\phonebook\\PhoneBookTreeSet.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u04e6\u0435\u0135\u027enode\u06b5\n", "func_signal": "private void removeColumnHeads(CrossNode node)", "code": "{\n\tTriple elem = node.data;\n\tCrossNode chead = this.columnshead[elem.column];// \u00f5column\u0435\n\tif (chead.data.row == elem.row) {// \u0377\u027echead!=null\n\t\tthis.columnshead[elem.column] = node.down;// \u027e\u0377\n\t} else {\n\t\tCrossNode front = chead, p = front.down;// frontp\u01f0\n\t\twhile (p != null && p.data.row < elem.row) {// \u02f3\n\t\t\tfront = p;\n\t\t\tp = p.down;\n\t\t}\n\t\tif (p != null && p.data.row == elem.row)// p\u03aa\u04b5\n\t\t\tfront.down = node.down;// \u027efront\u05aenode\u38ec\u043c\u03b2\u027e\n\t}\n}", "path": "src\\array\\CrossLinkedSparseMatrix.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u0636\u02bd\u05b7\n", "func_signal": "public String toString()", "code": "{\n\tString str = \"\";\n\tNode<TermX> p = this.list.head.next;\n\twhile (p != null) {\n\t\tstr += p.data.toString();\n\t\tp = p.next;\n\t}\n\treturn str;\n}", "path": "src\\list\\Polynomial.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \uceaf\u0776\u02bd\u043c\n", "func_signal": "public Polynomial(String polystr)", "code": "{\n\tthis();\n\tif (polystr == null || polystr.length() == 0)\n\t\treturn;\n\tNode<TermX> rear = this.list.head;\n\tint start = 0, end = 0;// start-end\u04f4\u03aa\u04bb\n\twhile (start < polystr.length() && end < polystr.length()) {\n\t\tint i = polystr.indexOf('+', end + 1);// \u05b7+\u05b7\u0434end+1\u02bc\n\t\tif (i == -1)// \u03b4\u04b5\u05b8\u05b7\n\t\t\ti = polystr.length();\n\t\tint j = polystr.indexOf('-', end + 1);\n\t\tif (j == -1)\n\t\t\tj = polystr.length();\n\t\tend = i < j ? i : j;// end\u03aa\u04bb+-\u0175\n\t\trear.next = new Node<TermX>(\n\t\t\t\tnew TermX(polystr.substring(start, end)), null);\n\t\t// \u03b2\ub8ecstart-end\u04f4\u03aa\u04bb\u06b5\u3d34\u052a\u0636\n\t\trear = rear.next;\n\t\tstart = end;\n\t}\n}", "path": "src\\list\\Polynomial.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "// \u02bd\u023f\n", "func_signal": "public Polynomial(Polynomial poly)", "code": "{\n\tthis();// \u0575\u05bb\u0377\n\tNode<TermX> p = poly.list.head.next;\n\tNode<TermX> rear = this.list.head;\n\twhile (p != null) {\n\t\trear.next = new Node<TermX>(new TermX(p.data), null);\n\t\trear = rear.next;\n\t\tp = p.next;\n\t}\n}", "path": "src\\list\\Polynomial.java", "repo_name": "doubleview/data-structure", "stars": 402, "license": "None", "language": "java", "size": 837}
{"docstring": "/**\n * @param docVersion docVersion is optional - if specified, this is set & used if redis doesn't\n *          know the doc's version\n */\n", "func_signal": "private void redisSubmitScript(String docType, String docId, JsonObject opData, Long docVersion,\n    final AsyncResultHandler<Void> callback)", "code": "{\n  redis.eval(submitScript, 3, opData.getString(Key.SESSION_ID), getVersionKey(docType, docId),\n      getOpsKey(docType, docId), opData.getNumber(\"seq\"), opData.getNumber(Key.VERSION), opData\n          .encode(), // oplog entry\n      docVersion, new Handler<Message<JsonObject>>() {\n        @Override\n        public void handle(Message<JsonObject> reply) {\n          DefaultFutureResult<Void> result = new DefaultFutureResult<Void>().setHandler(callback);\n          JsonObject body = reply.body();\n          if (!\"ok\".equals(body.getString(\"status\"))) {\n            result.setFailure(new ReplyException(ReplyFailure.RECIPIENT_FAILURE, body\n                .getString(\"status\")\n                + \": \" + body.getString(\"message\")));\n            return;\n          }\n          if (body.getString(\"value\") != null) {\n            result.setFailure(new ReplyException(ReplyFailure.RECIPIENT_FAILURE, body\n                .getString(\"value\")));\n            return;\n          }\n          result.setResult(null);\n        }\n      });\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\persistence\\RedisDriver.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param serialized The serialized event object.\n */\n", "func_signal": "public ObjectChangedEventImpl(JsonObject serialized)", "code": "{\n  super(serialized.set(\"type\", EventType.OBJECT_CHANGED.name()).set(\"bubbles\", true));\n  this.events = serialized.getArray(\"events\");\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\impl\\ObjectChangedEventImpl.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * This is a fetch that doesn't check the oplog to see if the snapshot is out of date. It will be\n * higher performance, but in some error conditions it may return an outdated snapshot.\n */\n", "func_signal": "private void lazyFetch(String docType, String docId,\n                       final AsyncResultHandler<JsonObject> callback)", "code": "{\n  storage.getSnapshot(docType, docId, null, new AsyncResultHandler<JsonObject>() {\n    @Override\n    public void handle(AsyncResult<JsonObject> ar) {\n      if (ar.succeeded() && ar.result() == null) {\n        callback.handle(new DefaultFutureResult<JsonObject>(new JsonObject().putNumber(\n            Key.VERSION, 0)));\n        return;\n      }\n      callback.handle(ar);\n    }\n  });\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\impl\\OperationProcessor.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Brings the state variable to the given value.\n * \n * <p>\n * Verifies that other member variables are are in the correct state.\n */\n", "func_signal": "private void setState(State newState)", "code": "{\n  // Check transitioning from valid old state\n  State oldState = state;\n  assert oldState.to.contains(newState) : \"Invalid state transition \" + oldState + \" -> \"\n      + newState;\n\n  // Check consistency of variables with new state\n  checkState(newState);\n  state = newState;\n\n  switch (newState) {\n    case ACKED:\n      if (oldState != State.UNINITIALISED) {\n        listener.onSaveStateChanged(false, queue.hasQueuedClientOps());\n      }\n      break;\n    case WAITING_ACK:\n      listener.onSaveStateChanged(true, queue.hasQueuedClientOps());\n      break;\n    default:\n      break;\n  }\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\channel\\OperationChannel.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * The ops are stored in redis as JSON strings without versions. They're returned with the final\n * version at the end of the lua table.\n */\n", "func_signal": "private JsonArray processRedisOps(long docVersion, List<String> ops)", "code": "{\n  long startVersion = docVersion - ops.size();\n  JsonArray toRtn = new JsonArray();\n  for (String op : ops) {\n    toRtn.addObject(new JsonObject(op).putNumber(Key.VERSION, startVersion++));\n  }\n  return toRtn;\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\persistence\\RedisDriver.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Submit an operation on the named docType/docId document.\n *\n * @param opData should probably contain a v: field (if it doesn't, it defaults to the current\n *               version).\n * @param callback called with {v:, ops:[], snapshot:{}}\n */\n", "func_signal": "public void submit(String docType, String docId, final JsonObject opData,\n                   final AsyncResultHandler<JsonObject> callback)", "code": "{\n  retrySubmit(new JsonArray(), docType, docId, createOperation(opData), opData\n      .getLong(Key.VERSION), callback);\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\impl\\OperationProcessor.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Sends unacknowledged ops and transitions to the WAITING_ACK state\n */\n", "func_signal": "private void sendUnackedOps()", "code": "{\n  O unackedClientOp = queue.unackedClientOp();\n  assert unackedClientOp != null;\n  logger.log(Level.FINE, \"Sending \" + unackedClientOp + \" @\" + queue.version());\n\n  JsonObject delta =\n      Json.createObject().set(\"action\", \"post\").set(Key.ID, id).set(Key.OP_DATA,\n          ((JsonObject) unackedClientOp.toJson()).set(Key.VERSION, queue.version()));\n  bus.send(Constants.Topic.STORE, delta, new Handler<Message<JsonObject>>() {\n    @Override\n    public void handle(Message<JsonObject> message) {\n      if (!isConnected()) {\n        return;\n      }\n      maybeEagerlyHandleAck(message.body().getNumber(Key.VERSION));\n    }\n  });\n  setState(State.WAITING_ACK);\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\channel\\OperationChannel.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param serialized The serialized event object.\n */\n", "func_signal": "protected BaseModelEventImpl(JsonObject serialized)", "code": "{\n  this.type = EventType.valueOf(serialized.getString(\"type\"));\n  this.target = serialized.getString(\"target\");\n  this.sessionId = serialized.getString(\"sessionId\");\n  this.userId = serialized.getString(\"userId\");\n  this.isLocal = serialized.getBoolean(\"isLocal\");\n  this.bubbles = serialized.getBoolean(\"bubbles\");\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\impl\\BaseModelEventImpl.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param serialized The serialized event object.\n */\n", "func_signal": "public ValueChangedEventImpl(JsonObject serialized)", "code": "{\n  super(serialized.set(\"type\", EventType.VALUE_CHANGED.name()).set(\"bubbles\", false));\n  this.property = serialized.getString(\"property\");\n  this.newValue = serialized.get(\"newValue\");\n  this.oldValue = serialized.get(\"oldValue\");\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\impl\\ValueChangedEventImpl.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param serialized The serialized event object.\n */\n", "func_signal": "public TextDeletedEventImpl(JsonObject serialized)", "code": "{\n  super(serialized.set(\"type\", EventType.TEXT_DELETED.name()).set(\"bubbles\", false));\n  this.index = (int) serialized.getNumber(\"index\");\n  this.text = serialized.getString(\"text\");\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\impl\\TextDeletedEventImpl.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param serialized The serialized event object.\n */\n", "func_signal": "public ValuesRemovedEventImpl(JsonObject serialized)", "code": "{\n  super(serialized.set(\"type\", EventType.VALUES_REMOVED.name()).set(\"bubbles\", false));\n  this.index = (int) serialized.getNumber(\"index\");\n  this.values = serialized.getArray(\"values\");\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\impl\\ValuesRemovedEventImpl.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @return true if there are no queued or unacknowledged ops\n */\n", "func_signal": "private boolean isClean()", "code": "{\n  checkConnected();\n  boolean ret = !queue.hasQueuedClientOps() && queue.unackedClientOp() == null;\n  // isClean() implies ALL_ACKED\n  assert !ret || state == State.ACKED;\n  return ret;\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\channel\\OperationChannel.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Great - now we're in the situation that we can actually submit the operation to the database.\n * If this method succeeds, it should update any persistant oplogs before calling the callback to\n * tell us about the successful commit. I could make this API more complicated, enabling the\n * function to return actual operations and whatnot, but its quite rare to actually need to\n * transform data on the server at this point.\n */\n", "func_signal": "private void doSubmit(final JsonArray transformedOps, final String docType,\n                      final String docId, final CollaborativeOperation operation, final long applyAt,\n                      final DocumentBridge snapshot, final AsyncResultHandler<JsonObject> callback)", "code": "{\n  final JsonObject opData =\n      new JsonObject(((JreJsonObject) operation.toJson()).toNative()).putNumber(Key.VERSION,\n                                                                                applyAt);\n  storage.atomicSubmit(docType, docId, opData, new AsyncResultHandler<Void>() {\n    @Override\n    public void handle(AsyncResult<Void> ar) {\n      if (ar.failed()) {\n        if (\"Transform needed\".equals(ar.cause().getMessage())) {\n          // Between our fetch and our call to atomicSubmit, another client\n          // submitted an operation. This should be pretty rare. Calling\n          // retry() here will re-fetch the snapshot again (not necessary),\n          // but its a rare enough case that its not worth optimizing.\n          retrySubmit(transformedOps, docType, docId, operation, applyAt, callback);\n        } else {\n          callback.handle(new DefaultFutureResult<JsonObject>(ar.cause()));\n        }\n        return;\n      }\n      log.finest(\"Wrote op @\" + applyAt);\n      final JsonObject root = new JsonObject(((JreJsonObject) snapshot.toJson()).toNative());\n      JsonObject snapshotData = new JsonObject().putNumber(Key.VERSION, applyAt + 1)\n          .putObject(DeltaStorage.ROOT, root).putArray(\n              Key.SNAPSHOT, new JsonArray(((JreJsonArray) snapshot.toSnapshot()).toNative()));\n      writeSnapshotAfterSubmit(docType, docId, snapshotData, opData,\n                               new AsyncResultHandler<Void>() {\n        @Override\n        public void handle(AsyncResult<Void> ar) {\n          // What do we do if the snapshot write fails? We've already committed the operation -\n          // its done and dusted. We probably shouldn't re-run polling queries now. Really, no\n          // matter what we do here things are going to be a little bit broken, depending on the\n          // behaviour we trap in finish.\n\n          // Its sort of too late to error out if the snapshotdb can't take our op - the op has\n          // been commited.\n\n          // postSubmit is for things like publishing the operation over pubsub. We should\n          // probably make this asyncronous.\n          storage.postSubmit(docType, docId, opData, root);\n          log.finest(\"Wrote snapshot @\" + (applyAt + 1));\n          callback.handle(new DefaultFutureResult<JsonObject>(new JsonObject().putNumber(\n              Key.VERSION, applyAt).putArray(Key.OPS, transformedOps).putObject(\n              Key.SNAPSHOT, root)));\n        }\n      });\n    }\n  });\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\impl\\OperationProcessor.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Internal method for updating the persistant oplog. This should only be called after\n * atomicSubmit (above).\n */\n", "func_signal": "private void writeOpToPersistence(final String docType, final String docId,\n    final JsonObject opData, final AsyncResultHandler<Void> callback)", "code": "{\n  elasticSearch.getVersion(docType, docId, new AsyncResultHandler<Long>() {\n    @Override\n    public void handle(AsyncResult<Long> ar) {\n      if (ar.failed()) {\n        callback.handle(new DefaultFutureResult<Void>(ar.cause()));\n        return;\n      }\n      long docVersion = ar.result().longValue();\n      long opVersion = opData.getLong(Key.VERSION).longValue();\n      if (docVersion == opVersion) {\n        storage.writeOp(docType, docId, opData, callback);\n      } else {\n        assert docVersion < opVersion;\n        // Its possible (though unlikely) that ops will be missing from the oplog if the redis\n        // script succeeds but the process crashes before the persistant oplog is given the new\n        // operations. In this case, backfill the persistant oplog with the data in redis.\n        log.info(\"populating oplog [\" + docVersion + \", \" + opVersion + \"]\");\n        redisGetOps(docType, docId, docVersion, opVersion, new AsyncResultHandler<JsonObject>() {\n          @Override\n          public void handle(AsyncResult<JsonObject> ar) {\n            if (ar.failed()) {\n              callback.handle(new DefaultFutureResult<Void>(ar.cause()));\n              return;\n            }\n            JsonArray ops = ar.result().getArray(Key.OPS).addObject(opData);\n            final CountingCompletionHandler<Void> countDownLatch =\n                new CountingCompletionHandler<Void>((VertxInternal) vertx, ops.size());\n            countDownLatch.setHandler(callback);\n            for (Object op : ops) {\n              storage.writeOp(docType, docId, (JsonObject) op, new AsyncResultHandler<Void>() {\n                @Override\n                public void handle(AsyncResult<Void> ar) {\n                  if (ar.failed()) {\n                    countDownLatch.failed(ar.cause());\n                  } else {\n                    countDownLatch.complete();\n                  }\n                }\n              });\n            }\n          }\n        });\n      }\n    }\n  });\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\persistence\\RedisDriver.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param document The document being saved.\n * @param serialized The serialized event object.\n */\n", "func_signal": "public DocumentSaveStateChangedEventImpl(Document document, JsonObject serialized)", "code": "{\n  this.isSaving = serialized.getBoolean(\"isSaving\");\n  this.isPending = serialized.getBoolean(\"isPending\");;\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\impl\\DocumentSaveStateChangedEventImpl.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * After we submit an operation, reset redis's TTL so the data is allowed to expire.\n */\n", "func_signal": "private void redisSetExpire(String docType, String docId, long version,\n    final AsyncResultHandler<Void> opt_callback)", "code": "{\n  redis.eval(setExpireScript, 2, getVersionKey(docType, docId), getOpsKey(docType, docId),\n      version, new Handler<Message<JsonObject>>() {\n        @Override\n        public void handle(Message<JsonObject> reply) {\n          if (opt_callback == null) {\n            return;\n          }\n          JsonObject body = reply.body();\n          if (!\"ok\".equals(body.getString(\"status\"))) {\n            opt_callback.handle(new DefaultFutureResult<Void>(new ReplyException(\n                ReplyFailure.RECIPIENT_FAILURE, body.getString(\"message\"))));\n            return;\n          }\n          opt_callback.handle(new DefaultFutureResult<Void>((Void) null));\n        }\n      });\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\persistence\\RedisDriver.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Pushes the queued client ops into the unacked ops, clearing the queued ops.\n * \n * @return see {@link #unackedClientOp()}\n */\n", "func_signal": "public O pushQueuedOpsToUnacked()", "code": "{\n  assert unackedClientOp == null : \"Queue contains unacknowledged operation: \" + unackedClientOp;\n\n  unackedClientOp = transformer.compose(queuedClientOps);\n  queuedClientOps = Json.createArray();\n\n  return unackedClientOp();\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\channel\\TransformQueue.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param opData {v:, op:, sid:, seq:, uid:}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void writeOp(String docType, String docId, JsonObject opData,\n    final AsyncResultHandler<Void> callback)", "code": "{\n  Long v = opData.getLong(Key.VERSION);\n  assert v != null;\n  JsonObject index =\n      new JsonObject().putString(\"action\", \"index\").putString(\"_index\", INDEX).putString(\"_type\",\n          getOpsType(docType)).putString(\"_id\", getOpId(docId, v)).putString(\"op_type\", \"create\")\n          .putBoolean(\"refresh\", true).putObject(\"source\",\n              opData.putString(DOC_ID, docId).putArray(_OP,\n                  new JsonArray((List<Object>) opData.removeField(Key.OP))));\n  eb.sendWithTimeout(address, index, StoreModule.REPLY_TIMEOUT,\n      new Handler<AsyncResult<Message<JsonObject>>>() {\n        @Override\n        public void handle(AsyncResult<Message<JsonObject>> ar) {\n          handleVoidCallback(callback, ar);\n        }\n      });\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\persistence\\ElasticSearchDriver.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * @param serialized The serialized event object.\n */\n", "func_signal": "public ValuesAddedEventImpl(JsonObject serialized)", "code": "{\n  super(serialized.set(\"type\", EventType.VALUES_ADDED.name()).set(\"bubbles\", false));\n  this.index = (int) serialized.getNumber(\"index\");\n  this.values = serialized.getArray(\"values\");\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\impl\\ValuesAddedEventImpl.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Follows same semantics as getOps elsewhere - returns ops [from, to). May not return all\n * operations in this range.\n */\n", "func_signal": "private void redisGetOps(String docType, String docId, Long from, Long to,\n    final AsyncResultHandler<JsonObject> callback)", "code": "{\n  final DefaultFutureResult<JsonObject> futureResult =\n      new DefaultFutureResult<JsonObject>().setHandler(callback);\n  if (to == null) {\n    to = -1L;\n  } else {\n    // Early abort if the range is flat.\n    if (to >= 0 && (from >= to || to == 0)) {\n      futureResult.setResult(new JsonObject().putNumber(Key.VERSION, null).putArray(Key.OPS,\n          new JsonArray()));\n      return;\n    }\n    to--;\n  }\n\n  redis.eval(getOpsScript, 2, getVersionKey(docType, docId), getOpsKey(docType, docId), from, to,\n      new Handler<Message<JsonObject>>() {\n        @Override\n        public void handle(Message<JsonObject> reply) {\n          JsonObject body = reply.body();\n          if (!\"ok\".equals(body.getString(\"status\"))) {\n            futureResult.setFailure(new ReplyException(ReplyFailure.RECIPIENT_FAILURE, body\n                .getString(\"message\")));\n            return;\n          }\n          JsonArray value = body.getArray(\"value\");\n          JsonObject result;\n          if (value == null) {\n            // No data in redis. Punt to the persistant oplog.\n            result =\n                new JsonObject().putNumber(Key.VERSION, null).putArray(Key.OPS, new JsonArray());\n          } else {\n            // Version of the document is at the end of the results list.\n            List<?> list = value.toList();\n            Long docVersion = (Long) list.remove(list.size() - 1);\n            @SuppressWarnings(\"unchecked\")\n            JsonArray ops = processRedisOps(docVersion, (List<String>) list);\n            result = new JsonObject().putNumber(Key.VERSION, docVersion).putArray(Key.OPS, ops);\n          }\n          futureResult.setResult(result);\n        }\n      });\n}", "path": "src\\main\\java\\com\\goodow\\realtime\\store\\server\\persistence\\RedisDriver.java", "repo_name": "goodow/realtime-store", "stars": 267, "license": "None", "language": "java", "size": 1336}
{"docstring": "/**\n * Add POST parameters to the given HttpRequest.\n * \n * @param request\n */\n", "func_signal": "private void applyPostParameters(final HttpRequest request)", "code": "{\n\tfinal Iterator<Entry<String, String>> iterator = mPostParameters\n\t\t\t.entrySet().iterator();\n\n\twhile (iterator.hasNext()) {\n\t\tfinal Entry<String, String> entry = iterator.next();\n\t\tfinal StringBuffer buf = new StringBuffer();\n\t\tLn.d(\"Applying POST parameters: %s\", entry.getKey());\n\t\tbuf.append(entry.getKey());\n\t\tbuf.append('=');\n\t\tbuf.append(entry.getValue());\n\t\trequest.send(buf.toString());\n\t}\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\api\\AbstractSoundcloudApiQueryImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Read an entire stream to end and assemble in a string.\n * \n * @param is\n *            Stream to read.\n * @return Entire stream contents.\n */\n", "func_signal": "protected static String convertStreamToString(final InputStream is)", "code": "{\n\t/*\n\t * To convert the InputStream to String we use the\n\t * BufferedReader.readLine() method. We iterate until the BufferedReader\n\t * returns null, which means there's no more data to read. Each line\n\t * will appended to a StringBuilder and returned as String.\n\t */\n\tfinal BufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\tis));\n\tfinal StringBuilder sb = new StringBuilder();\n\n\tString line = null;\n\tString newline = System.getProperty(\"line.seperator\");\n\tif (newline == null) {\n\t\tnewline = NEWLINE_FALLBACK;\n\t}\n\ttry {\n\t\twhile ((line = reader.readLine()) != null) {\n\t\t\tsb.append(line);\n\t\t\tsb.append(newline);\n\t\t}\n\t} catch (final IOException e) {\n\t\tLn.e(e);\n\t} finally {\n\t\ttry {\n\t\t\tis.close();\n\t\t} catch (final IOException e) {\n\t\t\tLn.e(e);\n\t\t}\n\t}\n\n\treturn sb.toString();\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\api\\AbstractSoundcloudApiQueryImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n *\n * @param source        the data to convert\n * @param off           offset in array where conversion should begin\n * @param len           length of data to convert\n * @param alphabet      is the encoding alphabet\n * @param maxLineLength maximum length of one line.\n * @return the BASE64-encoded byte array\n */\n", "func_signal": "public static byte[] encode(byte[] source, int off, int len, byte[] alphabet,\n                            int maxLineLength)", "code": "{\n\t    int lenDiv3 = (len + 2) / 3; // ceil(len / 3)\n    int len43 = lenDiv3 * 4;\n    byte[] outBuff = new byte[len43 // Main 4:3\n\t\t        + (len43 / maxLineLength)]; // New lines\n\n\t    int d = 0;\n    int e = 0;\n    int len2 = len - 2;\n    int lineLength = 0;\n    for (; d < len2; d += 3, e += 4) {\n\n        // The following block of code is the same as\n        // encode3to4( source, d + off, 3, outBuff, e, alphabet );\n        // but inlined for faster encoding (~20% improvement)\n        int inBuff =\n                ((source[d + off] << 24) >>> 8)\n\t\t                    | ((source[d + 1 + off] << 24) >>> 16)\n\t\t                    | ((source[d + 2 + off] << 24) >>> 24);\n\t        outBuff[e] = alphabet[(inBuff >>> 18)];\n        outBuff[e + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n        outBuff[e + 2] = alphabet[(inBuff >>> 6) & 0x3f];\n        outBuff[e + 3] = alphabet[(inBuff) & 0x3f];\n\n        lineLength += 4;\n        if (lineLength == maxLineLength) {\n            outBuff[e + 4] = NEW_LINE;\n            e++;\n            lineLength = 0;\n        } // end if: end of line\n    } // end for: each piece of array\n\n    if (d < len) {\n        encode3to4(source, d + off, len - d, outBuff, e, alphabet);\n\n        lineLength += 4;\n        if (lineLength == maxLineLength) {\n            // Add a last newline\n            outBuff[e + 4] = NEW_LINE;\n            e++;\n        }\n        e += 4;\n    }\n\n    assert (e == outBuff.length);\n    return outBuff;\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Base64.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Add to the given baseView, but only if the application is non-adfree.\n *\n * @param baseView The view you want to see your ads in.\n * @return True if added to layout, false if not.\n */\n", "func_signal": "public boolean addToViewIfRequired(final ViewGroup baseView)", "code": "{\n\tfinal boolean showAds = !mPreferencesProvider.get().isAdFree();\n\tif (showAds) {\n\t\taddToView(baseView);\n\t}\n\n\treturn showAds;\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\ui\\AdViewManager.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Verifies that the data was signed with the given signature, and returns the verified\n * purchase. The data is in JSON format and signed with a private key. The data also contains\n * the {@link PurchaseState} and product ID of the purchase.\n *\n * @param base64PublicKey the base64-encoded public key to use for verifying.\n * @param signedData      the signed JSON string (signed, not encrypted)\n * @param signature       the signature for the data, signed with the private key\n */\n", "func_signal": "public static boolean verifyPurchase(String base64PublicKey, String signedData, String signature)", "code": "{\n    if (TextUtils.isEmpty(signedData) || TextUtils.isEmpty(base64PublicKey) ||\n            TextUtils.isEmpty(signature)) {\n        Log.e(TAG, \"Purchase verification failed: missing data.\");\n        return false;\n    }\n\n    PublicKey key = Security.generatePublicKey(base64PublicKey);\n    return Security.verify(key, signedData, signature);\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Security.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n *\n * @param source    the data to convert\n * @param off       offset in array where conversion should begin\n * @param len       length of data to convert\n * @param alphabet  the encoding alphabet\n * @param doPadding is {@code true} to pad result with '=' chars if it does not fall on 3 byte\n *                  boundaries\n * @since 1.4\n */\n", "func_signal": "public static String encode(byte[] source, int off, int len, byte[] alphabet,\n                            boolean doPadding)", "code": "{\n\t    byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);\n    int outLen = outBuff.length;\n\n    // If doPadding is false, set length to truncate '='\n    // padding characters\n    while (doPadding == false && outLen > 0) {\n        if (outBuff[outLen - 1] != '=') {\n            break;\n        }\n        outLen -= 1;\n    }\n\n    return new String(outBuff, 0, outLen);\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Base64.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Generates a PublicKey instance from a string containing the Base64-encoded public key.\n *\n * @param encodedPublicKey Base64-encoded public key\n * @throws IllegalArgumentException if encodedPublicKey is invalid\n */\n", "func_signal": "public static PublicKey generatePublicKey(String encodedPublicKey)", "code": "{\n    try {\n        byte[] decodedKey = Base64.decode(encodedPublicKey);\n        KeyFactory keyFactory = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);\n        return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException(e);\n    } catch (InvalidKeySpecException e) {\n        Log.e(TAG, \"Invalid key specification.\");\n        throw new IllegalArgumentException(e);\n    } catch (Base64DecoderException e) {\n        Log.e(TAG, \"Base64 decoding failed.\");\n        throw new IllegalArgumentException(e);\n    }\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Security.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Encodes up to three bytes of the array <var>source</var> and writes the resulting four Base64\n * bytes to <var>destination</var>. The source and destination arrays can be manipulated\n * anywhere along their length by specifying <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays are large enough to accommodate\n * <var>srcOffset</var> + 3 for the <var>source</var> array or <var>destOffset</var> + 4 for the\n * <var>destination</var> array. The actual number of significant bytes in your array is given\n * by <var>numSigBytes</var>.\n *\n * @param source      the array to convert\n * @param srcOffset   the index where conversion begins\n * @param numSigBytes the number of significant bytes in your array\n * @param destination the array to hold the conversion\n * @param destOffset  the index where output will be put\n * @param alphabet    is the encoding alphabet\n * @return the <var>destination</var> array\n * @since 1.3\n */\n", "func_signal": "private static byte[] encode3to4(byte[] source, int srcOffset,\n                                 int numSigBytes, byte[] destination, int destOffset, byte[] alphabet)", "code": "{\n\t    //           1         2         3\n    // 01234567890123456789012345678901 Bit position\n    // --------000000001111111122222222 Array position from threeBytes\n    // --------|    ||    ||    ||    | Six bit groups to index alphabet\n    //          >>18  >>12  >> 6  >> 0  Right shift necessary\n    //                0x3f  0x3f  0x3f  Additional AND\n\n    // Create buffer with zero-padding if there are only one or two\n    // significant bytes passed in the array.\n    // We have to shift left 24 in order to flush out the 1's that appear\n    // when Java treats a value as negative that is cast from a byte to an int.\n    int inBuff =\n            (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)\n\t\t                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)\n\t\t                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);\n\n\t    switch (numSigBytes) {\n        case 3:\n            destination[destOffset] = alphabet[(inBuff >>> 18)];\n            destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n            destination[destOffset + 2] = alphabet[(inBuff >>> 6) & 0x3f];\n            destination[destOffset + 3] = alphabet[(inBuff) & 0x3f];\n            return destination;\n        case 2:\n            destination[destOffset] = alphabet[(inBuff >>> 18)];\n            destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n            destination[destOffset + 2] = alphabet[(inBuff >>> 6) & 0x3f];\n            destination[destOffset + 3] = EQUALS_SIGN;\n            return destination;\n        case 1:\n            destination[destOffset] = alphabet[(inBuff >>> 18)];\n            destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n            destination[destOffset + 2] = EQUALS_SIGN;\n            destination[destOffset + 3] = EQUALS_SIGN;\n            return destination;\n        default:\n            return destination;\n    } // end switch\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Base64.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Add multipart parameters to the given HttpRequest.\n * \n * @param request\n */\n", "func_signal": "private void applyPartParameters(final HttpRequest request)", "code": "{\n\tfinal Iterator<Entry<String, File>> iterator = mPartParameters\n\t\t\t.entrySet().iterator();\n\n\twhile (iterator.hasNext()) {\n\t\tfinal Entry<String, File> entry = iterator.next();\n\t\tLn.d(\"Applying multipart parameter %s.\", entry.getKey());\n\t\tfinal File file = entry.getValue();\n\t\trequest.part(entry.getKey(), file.getName(), file,\n\t\t\t\t\"application/octet-stream\");\n\t}\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\api\\AbstractSoundcloudApiQueryImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Decodes data from Base64 notation.\n *\n * @param s the string to decode (decoded in default encoding)\n * @return the decoded data\n * @since 1.4\n */\n", "func_signal": "public static byte[] decode(String s) throws Base64DecoderException", "code": "{\n    byte[] bytes = s.getBytes();\n    return decode(bytes, 0, bytes.length);\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Base64.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Properly wrap the stream accounting for GZIP.\n * \n * @param is\n *            Stream to wrap.\n * @param gzip\n *            Whether or not to include a GZIP wrapper.\n * @return Wrapped stream.\n * @throws IOException\n */\n", "func_signal": "protected static InputStream getWrappedInputStream(final InputStream is,\n\t\tfinal boolean gzip) throws IOException", "code": "{\n\tif (gzip) {\n\t\treturn new BufferedInputStream(new GZIPInputStream(is));\n\t} else {\n\t\treturn new BufferedInputStream(is);\n\t}\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\api\\AbstractSoundcloudApiQueryImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Decodes data from web safe Base64 notation. Web safe encoding uses '-' instead of '+', '_'\n * instead of '/'\n *\n * @param s the string to decode (decoded in default encoding)\n * @return the decoded data\n */\n", "func_signal": "public static byte[] decodeWebSafe(String s) throws Base64DecoderException", "code": "{\n    byte[] bytes = s.getBytes();\n    return decodeWebSafe(bytes, 0, bytes.length);\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Base64.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Creates a new download manager request based on the given uri.\n *\n * @param uri\n * @return\n * @throws IOException If directory can't be used for saving the file.\n */\n", "func_signal": "@TargetApi(11)\nprivate DownloadManager.Request createDownloadRequest(final Uri uri) throws IOException", "code": "{\n\tfinal Request request = new Request(uri);\n\n\tsetRequestStorage(request);\n\trequest.setTitle(mTrack.getTitle());\n\trequest.setDescription(mContext.getString(R.string.download_description));\n\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\t\t// We have an audio file, please scan it!\n\t\trequest.allowScanningByMediaScanner();\n\t}\n\n\treturn request;\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\TrackDownloaderImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Sends the GET request to the resource and tries converting it to the\n * requested entity from JSON.\n * \n * @param parameters\n * @throws APIException\n */\n", "func_signal": "protected ResolveEntity executeGet(final Map<String, String> parameters)\n\t\tthrows APIException", "code": "{\n\tfinal URLWrapper url;\n\ttry {\n\t\turl = buildUrl(RESOURCE_URL, parameters);\n\t} catch (final MalformedURLException e) {\n\t\t// This is okay to crash the app, because this error can only be\n\t\t// caused by static values.\n\t\tLn.e(e);\n\t\tthrow new IllegalArgumentException(e);\n\t}\n\n\treturn mResolveQueryFactory.create(url, HttpMethod.GET, TYPE_TOKEN)\n\t\t\t.execute(HttpURLConnection.HTTP_MOVED_TEMP);\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\api\\service\\ResolveService.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Executes the POST request. Instead of using the bare HttpURLConnection\n * API, we use our modified HttpRequest client to be able to upload with\n * multipart and other cool things.\n * \n * @return\n * @throws APIException\n */\n", "func_signal": "protected HttpURLConnection executePost() throws APIException", "code": "{\n\tLn.d(\"Executing POST against URL \" + mUrl.toString());\n\tfinal HttpRequest request = HttpRequest.post(mUrl);\n\n\tsetupPostRequest(request);\n\n\tif (mSendCallback != null) {\n\t\trequest.setSendCallback(mSendCallback);\n\t}\n\n\tif (mPartParameters.size() > 0) {\n\t\tapplyPostParametersAsPart(request);\n\t\tapplyPartParameters(request);\n\t} else {\n\t\tapplyPostParameters(request);\n\t}\n\n\ttry {\n\t\trequest.closeOutput();\n\t} catch (final IOException e) {\n\t\tthrow new APIException(e, -1);\n\t}\n\treturn request.getConnection();\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\api\\AbstractSoundcloudApiQueryImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Check if the given path is writable and attempts to create it.\n */\n", "func_signal": "public static boolean checkAndCreateTypePath(final File path)", "code": "{\n\tif (!path.exists()) {\n\t\tLn.i(\"Path %s doesn't exist, creating...\", path.toString());\n\t\tif (!path.mkdirs()) {\n\t\t\tLn.w(\"Creating directory failed!\");\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (BuildConfig.DEBUG) {\n\t\tLn.d(\"checkAndCreateTypePath isDirectory:\" + path.isDirectory());\n\t\tLn.d(\"checkAndCreateTypePath canWrite:\" + path.canWrite());\n\t}\n\treturn path.isDirectory() && path.canWrite();\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\TrackDownloaderImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see net.rdrei.android.scdl2.TrackDownloader#enqueue()\n */\n", "func_signal": "@Override\npublic void enqueue() throws IOException", "code": "{\n\tfinal StartDownloadTask startDownloadTask = new StartDownloadTask(mHandler);\n\tstartDownloadTask.execute();\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\TrackDownloaderImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Executes a GET request and returns the expected Entity.\n * \n * @param parameters\n * @param expected\n * @return\n * @throws APIException\n */\n", "func_signal": "protected HttpURLConnection executeGet() throws APIException", "code": "{\n\tLn.d(\"Executing GET against URL \" + mUrl.toString());\n\ttry {\n\t\tfinal URLConnection connection = mUrl.openConnection();\n\n\t\tsetupGetConnection(connection);\n\n\t\treturn (HttpURLConnection) connection;\n\t} catch (final IOException e) {\n\t\tthrow new APIException(e, -1);\n\t}\n}", "path": "scdl\\src\\main\\java\\net\\rdrei\\android\\scdl2\\api\\AbstractSoundcloudApiQueryImpl.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Decodes four bytes from array <var>source</var> and writes the resulting bytes (up to three\n * of them) to <var>destination</var>. The source and destination arrays can be manipulated\n * anywhere along their length by specifying <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays are large enough to accommodate\n * <var>srcOffset</var> + 4 for the <var>source</var> array or <var>destOffset</var> + 3 for the\n * <var>destination</var> array. This method returns the actual number of bytes that were\n * converted from the Base64 encoding.\n *\n * @param source      the array to convert\n * @param srcOffset   the index where conversion begins\n * @param destination the array to hold the conversion\n * @param destOffset  the index where output will be put\n * @param decodabet   the decodabet for decoding Base64 content\n * @return the number of decoded bytes converted\n * @since 1.3\n */\n", "func_signal": "private static int decode4to3(byte[] source, int srcOffset,\n                              byte[] destination, int destOffset, byte[] decodabet)", "code": "{\n\t    // Example: Dk==\n    if (source[srcOffset + 2] == EQUALS_SIGN) {\n        int outBuff =\n                ((decodabet[source[srcOffset]] << 24) >>> 6)\n\t\t                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);\n\n\t        destination[destOffset] = (byte) (outBuff >>> 16);\n        return 1;\n    } else if (source[srcOffset + 3] == EQUALS_SIGN) {\n        // Example: DkL=\n        int outBuff =\n                ((decodabet[source[srcOffset]] << 24) >>> 6)\n\t\t                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)\n\t\t                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);\n\n\t        destination[destOffset] = (byte) (outBuff >>> 16);\n        destination[destOffset + 1] = (byte) (outBuff >>> 8);\n        return 2;\n    } else {\n        // Example: DkLE\n        int outBuff =\n                ((decodabet[source[srcOffset]] << 24) >>> 6)\n\t\t                    | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)\n\t\t                    | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)\n\t\t                    | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);\n\n\t        destination[destOffset] = (byte) (outBuff >> 16);\n        destination[destOffset + 1] = (byte) (outBuff >> 8);\n        destination[destOffset + 2] = (byte) (outBuff);\n        return 3;\n    }\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Base64.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * Decodes Base64 content using the supplied decodabet and returns the decoded byte array.\n *\n * @param source    the Base64 encoded data\n * @param off       the offset of where to begin decoding\n * @param len       the length of characters to decode\n * @param decodabet the decodabet for decoding Base64 content\n * @return decoded data\n */\n", "func_signal": "public static byte[] decode(byte[] source, int off, int len, byte[] decodabet)\n        throws Base64DecoderException", "code": "{\n    int len34 = len * 3 / 4;\n    byte[] outBuff = new byte[2 + len34]; // Upper limit on size of output\n    int outBuffPosn = 0;\n\n    byte[] b4 = new byte[4];\n    int b4Posn = 0;\n    int i = 0;\n    byte sbiCrop = 0;\n    byte sbiDecode = 0;\n    for (i = 0; i < len; i++) {\n        sbiCrop = (byte) (source[i + off] & 0x7f); // Only the low seven bits\n        sbiDecode = decodabet[sbiCrop];\n\n        if (sbiDecode >= WHITE_SPACE_ENC) { // White space Equals sign or better\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // An equals sign (for padding) must not occur at position 0 or 1\n                // and must be the last byte[s] in the encoded value\n                if (sbiCrop == EQUALS_SIGN) {\n                    int bytesLeft = len - i;\n                    byte lastByte = (byte) (source[len - 1 + off] & 0x7f);\n                    if (b4Posn == 0 || b4Posn == 1) {\n                        throw new Base64DecoderException(\n                                \"invalid padding byte '=' at byte offset \" + i);\n                    } else if ((b4Posn == 3 && bytesLeft > 2)\n                            || (b4Posn == 4 && bytesLeft > 1)) {\n                        throw new Base64DecoderException(\n                                \"padding byte '=' falsely signals end of encoded value \"\n                                        + \"at offset \" + i);\n                    } else if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {\n                        throw new Base64DecoderException(\n                                \"encoded value has invalid trailing byte\");\n                    }\n                    break;\n                }\n\n                b4[b4Posn++] = sbiCrop;\n                if (b4Posn == 4) {\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, decodabet);\n                    b4Posn = 0;\n                }\n            }\n        } else {\n            throw new Base64DecoderException(\"Bad Base64 input character at \" + i\n                    + \": \" + source[i + off] + \"(decimal)\");\n        }\n    }\n\n    // Because web safe encoding allows non padding base64 encodes, we\n    // need to pad the rest of the b4 buffer with equal signs when\n    // b4Posn != 0.  There can be at most 2 equal signs at the end of\n    // four characters, so the b4 buffer must have two or three\n    // characters.  This also catches the case where the input is\n    // padded with EQUALS_SIGN\n    if (b4Posn != 0) {\n        if (b4Posn == 1) {\n            throw new Base64DecoderException(\"single trailing character at offset \"\n                    + (len - 1));\n        }\n        b4[b4Posn++] = EQUALS_SIGN;\n        outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, decodabet);\n    }\n\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}", "path": "scdl\\src\\main\\java\\com\\android\\vending\\billing\\Base64.java", "repo_name": "passy/scdl", "stars": 303, "license": "gpl-3.0", "language": "java", "size": 31336}
{"docstring": "/**\n * \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u52a8\u753b\n * @param inAnimator\n * @param outAnimator\n */\n", "func_signal": "public void setCustomAnimator(BaseViewAnimator inAnimator, BaseViewAnimator outAnimator)", "code": "{\n    mInAnimator = inAnimator;\n    mOutAnimator = outAnimator;\n    mIsCustomAnimator = true;\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\animate\\AnimatorPresenter.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u548c ViewPager \u8fdb\u884c\u8054\u52a8\uff0c\u6ce8\u610f\u7b2c1\u4e2a\u5b50\u89c6\u56fe\u5fc5\u987b\u4e3a ViewPager \u6216\u5b83\u7684\u5b50\u7c7b\uff0c\n * \u66ff\u6362\u4e3a {@link #attachViewPager}\n * @param isInteract \u662f\u5426\u8054\u52a8\n */\n", "func_signal": "@Deprecated\npublic void interactWithViewPager(boolean isInteract)", "code": "{\n    if (!_isViewPager(mMainView)) {\n        throw new IllegalArgumentException(\"The first child view must be ViewPager.\");\n    }\n    if (mViewPagerListener != null) {\n        ((ViewPager) mMainView).removeOnPageChangeListener(mViewPagerListener);\n    }\n    if (!isInteract) {\n        mViewPagerListener = null;\n        return;\n    }\n    mViewPagerListener = new ViewPager.SimpleOnPageChangeListener() {\n\n        boolean isRightSlide = true;\n        float mLastOffset = 0;\n        int status = ViewPager.SCROLL_STATE_IDLE;\n        int curDragViewTop;\n\n        @Override\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n            if (status != ViewPager.SCROLL_STATE_IDLE && !mIsCustomAnimator) {\n                // \u5224\u65ad\u62d6\u62fd\u8fc7\u754c\u7684\u65b9\u5411\n                if (Math.abs(positionOffset - mLastOffset) > 0.8f &&\n                        status == ViewPager.SCROLL_STATE_DRAGGING) {\n                    if (positionOffset > 0.5f) {\n                        isRightSlide = false;\n                    } else {\n                        isRightSlide = true;\n                    }\n                }\n                float percent;\n                if (isRightSlide) {\n                    percent = positionOffset;\n                    if (positionOffset == 0 && status == ViewPager.SCROLL_STATE_SETTLING && mLastOffset > 0.5f) {\n                        percent = 1.0f;\n                    }\n                } else {\n                    percent = 1 - positionOffset;\n                    if (positionOffset == 0 && status == ViewPager.SCROLL_STATE_SETTLING && mLastOffset > 0.5f) {\n                        percent = 0;\n                    }\n                }\n                _hideDragView(percent, curDragViewTop);\n                mLastOffset = positionOffset;\n            }\n        }\n\n        @Override\n        public void onPageScrollStateChanged(int state) {\n            if (state == ViewPager.SCROLL_STATE_IDLE && !mIsCustomAnimator) {\n                isRightSlide = true;\n                mLastOffset = 0;\n                // \u5982\u679c\u624b\u52a8\u8c03\u7528\u9000\u51fa\u52a8\u753b\u5219\u4e0d\u505a\u81ea\u52a8\u542f\u52a8\u52a8\u753b\n                if (mDragStatus == STATUS_EXIT && !mIsDoOutAnim && mMode != MODE_DRAG_OUTSIDE) {\n                    _showDragView(mAutoAnimateDelay);\n                }\n            } else {\n                if (mDragStatus == STATUS_EXIT) {\n                    getHandler().removeCallbacks(mShowRunnable);\n                }\n                if (state == ViewPager.SCROLL_STATE_DRAGGING) {\n                    curDragViewTop = mDragView.getTop();\n                }\n            }\n            status = state;\n        }\n    };\n    ((ViewPager) mMainView).addOnPageChangeListener(mViewPagerListener);\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u542f\u52a8\u9000\u51fa\u52a8\u753b\n * \u6ce8\u610f\uff1a\u8c03\u7528\u4e86\u9000\u51fa\u52a8\u753b\u5219\u9ed8\u8ba4\u5173\u95ed\u81ea\u52a8\u542f\u52a8\u52a8\u753b\u6548\u679c\n */\n", "func_signal": "public void startOutAnim()", "code": "{\n    mIsDoOutAnim = true;\n    mAnimPresenter.startOutAnim(mDragView);\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u5224\u65ad\u89c6\u56fe\u662f\u5426\u4e3a ViewPager \u6216\u5b83\u7684\u5b50\u7c7b\n *\n * @param view View\n * @return\n */\n", "func_signal": "private boolean _isViewPager(View view)", "code": "{\n    boolean isViewPager = false;\n    if (view instanceof ViewPager) {\n        isViewPager = true;\n    } else {\n        ViewParent parent = view.getParent();\n        while (parent != null) {\n            if (parent instanceof ViewPager) {\n                isViewPager = true;\n                break;\n            }\n        }\n    }\n    return isViewPager;\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u548c ViewPager \u8fdb\u884c\u8054\u52a8\n *\n * @param attachViewPager \u5173\u8054 ViewPager\n */\n", "func_signal": "public void attachViewPager(ViewPager attachViewPager)", "code": "{\n    if (!_isViewPager(attachViewPager)) {\n        throw new IllegalArgumentException(\"The first child view must be ViewPager.\");\n    }\n    mAttachViewPager = attachViewPager;\n    if (mViewPagerListener != null) {\n        mAttachViewPager.removeOnPageChangeListener(mViewPagerListener);\n    }\n    mViewPagerListener = new ViewPager.SimpleOnPageChangeListener() {\n\n        boolean isRightSlide = true;\n        float mLastOffset = 0;\n        int status = ViewPager.SCROLL_STATE_IDLE;\n        int curDragViewTop;\n\n        @Override\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n            if (status != ViewPager.SCROLL_STATE_IDLE && !mIsCustomAnimator) {\n                // \u5224\u65ad\u62d6\u62fd\u8fc7\u754c\u7684\u65b9\u5411\n                if (Math.abs(positionOffset - mLastOffset) > 0.8f &&\n                        status == ViewPager.SCROLL_STATE_DRAGGING) {\n                    if (positionOffset > 0.5f) {\n                        isRightSlide = false;\n                    } else {\n                        isRightSlide = true;\n                    }\n                }\n                float percent;\n                if (isRightSlide) {\n                    percent = positionOffset;\n                    if (positionOffset == 0 && status == ViewPager.SCROLL_STATE_SETTLING && mLastOffset > 0.5f) {\n                        percent = 1.0f;\n                    }\n                } else {\n                    percent = 1 - positionOffset;\n                    if (positionOffset == 0 && status == ViewPager.SCROLL_STATE_SETTLING && mLastOffset > 0.5f) {\n                        percent = 0;\n                    }\n                }\n                _hideDragView(percent, curDragViewTop);\n                mLastOffset = positionOffset;\n            }\n        }\n\n        @Override\n        public void onPageScrollStateChanged(int state) {\n            if (state == ViewPager.SCROLL_STATE_IDLE && !mIsCustomAnimator) {\n                isRightSlide = true;\n                mLastOffset = 0;\n                // \u5982\u679c\u624b\u52a8\u8c03\u7528\u9000\u51fa\u52a8\u753b\u5219\u4e0d\u505a\u81ea\u52a8\u542f\u52a8\u52a8\u753b\n                if (mDragStatus == STATUS_EXIT && !mIsDoOutAnim && mMode != MODE_DRAG_OUTSIDE) {\n                    _showDragView(mAutoAnimateDelay);\n                }\n            } else {\n                if (mDragStatus == STATUS_EXIT) {\n                    getHandler().removeCallbacks(mShowRunnable);\n                }\n                if (state == ViewPager.SCROLL_STATE_DRAGGING) {\n                    curDragViewTop = mDragView.getTop();\n                }\n            }\n            status = state;\n        }\n    };\n    mAttachViewPager.addOnPageChangeListener(mViewPagerListener);\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u52a8\u753b\n *\n * @param inAnimator  \u8fdb\u5165\u52a8\u753b\n * @param outAnimator \u9000\u51fa\u52a8\u753b\n */\n", "func_signal": "public void setCustomAnimator(CustomViewAnimator inAnimator, CustomViewAnimator outAnimator)", "code": "{\n    mIsCustomAnimator = true;\n    mAnimPresenter.setCustomAnimator(inAnimator, outAnimator);\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u542f\u52a8\u8fdb\u5165\u52a8\u753b\n */\n", "func_signal": "public void startInAnim()", "code": "{\n    mIsDoOutAnim = false;\n    mAnimPresenter.startInAnim(mDragView);\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u8bbe\u7f6e\u52a8\u753b\n * @param animatorMode\n */\n", "func_signal": "public void setAnimatorMode(@AnimatorMode int animatorMode)", "code": "{\n    mAnimatorMode = animatorMode;\n    mIsCustomAnimator = false;\n    switch (animatorMode) {\n        case DragSlopLayout.SLIDE_BOTTOM:\n            mInAnimator = new SlideInBottomAnimator();\n            mOutAnimator = new SlideOutBottomAnimator();\n            break;\n        case DragSlopLayout.SLIDE_LEFT:\n            mInAnimator = new SlideInLeftAnimator();\n            mOutAnimator = new SlideOutLeftAnimator();\n            break;\n        case DragSlopLayout.SLIDE_RIGHT:\n            mInAnimator = new SlideInRightAnimator();\n            mOutAnimator = new SlideOutRightAnimator();\n            break;\n        case DragSlopLayout.FADE:\n            mInAnimator = new FadeInAnimator();\n            mOutAnimator = new FadeOutAnimator();\n            break;\n        case DragSlopLayout.FLIP_X:\n            mInAnimator = new FlipInXAnimator();\n            mOutAnimator = new FlipOutXAnimator();\n            break;\n        case DragSlopLayout.FLIP_Y:\n            mInAnimator = new FlipInYAnimator();\n            mOutAnimator = new FlipOutYAnimator();\n            break;\n        case DragSlopLayout.ZOOM:\n            mInAnimator = new ZoomInAnimator();\n            mOutAnimator = new ZoomOutAnimator();\n            break;\n        case DragSlopLayout.ZOOM_LEFT:\n            mInAnimator = new ZoomInLeftAnimator();\n            mOutAnimator = new ZoomOutLeftAnimator();\n            break;\n        case DragSlopLayout.ZOOM_RIGHT:\n            mInAnimator = new ZoomInRightAnimator();\n            mOutAnimator = new ZoomOutRightAnimator();\n            break;\n    }\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\animate\\AnimatorPresenter.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u6a21\u7cca\u89c6\u56fe\n *\n * @param view\n */\n", "func_signal": "private void _blurView(View view)", "code": "{\n    final int width = view.getWidth();\n    final int height = view.getHeight();\n    if (width == 0 || height == 0) {\n        return;\n    }\n    if (mBlurringCanvas == null || mBitmapToBlur == null\n            || mBlurredViewWidth != width || mBlurredViewHeight != height) {\n\n        mBlurredViewWidth = width;\n        mBlurredViewHeight = height;\n        int scaledWidth = width / mSampleFactor;\n        int scaledHeight = height / mSampleFactor;\n\n        // The following manipulation is to avoid some RenderScript artifacts at the edge.\n        scaledWidth = scaledWidth - scaledWidth % 4 + 4;\n        scaledHeight = scaledHeight - scaledHeight % 4 + 4;\n\n        mBitmapToBlur = Bitmap.createBitmap(scaledWidth, scaledHeight, Bitmap.Config.ARGB_8888);\n        if (mBitmapToBlur == null) {\n            throw new RuntimeException(\"Create bitmap failure!\");\n        }\n        mBlurringCanvas = new Canvas(mBitmapToBlur);\n        mBlurringCanvas.scale(1.0f / mSampleFactor, 1.0f / mSampleFactor);\n        mBlurInput = Allocation.createFromBitmap(mRenderScript, mBitmapToBlur,\n                Allocation.MipmapControl.MIPMAP_NONE, Allocation.USAGE_SCRIPT);\n        mBlurOutput = Allocation.createTyped(mRenderScript, mBlurInput.getType());\n\n        // \u80cc\u666f\u4e3a ColorDrawable \u5219\u8bbe\u7f6e\u5bf9\u5e94\u989c\u8272\uff0c\u5426\u5219\u8bbe\u4e3a\u900f\u660e\n        if (view.getBackground() != null && view.getBackground() instanceof ColorDrawable) {\n            mBitmapToBlur.eraseColor(((ColorDrawable) view.getBackground()).getColor());\n        } else {\n            mBitmapToBlur.eraseColor(Color.TRANSPARENT);\n        }\n    }\n    // \u5c06\u76ee\u6807\u89c6\u56fe\u7684\u80cc\u666f\u7ed8\u5236\u5230 mBitmapToBlur\n    view.draw(mBlurringCanvas);\n    // \u6a21\u7cca\u5904\u7406\n    mBlurInput.copyFrom(mBitmapToBlur);\n    mBlurScript.setInput(mBlurInput);\n    mBlurScript.forEach(mBlurOutput);\n    mBlurOutput.copyTo(mBitmapToBlur);\n    // \u653e\u5927\u56de\u539f\u56fe\u5927\u5c0f\n    Bitmap blurredBitmap = BitmapUtils.zoom(mBitmapToBlur, width, height);\n    // \u5c06\u6a21\u7cca\u7684 Bitmap \u8f6c\u5316\u4e3a ClipDrawable\n    Drawable drawable = new BitmapDrawable(getResources(), blurredBitmap);\n    mBlurDrawable = new ClipDrawable(drawable, Gravity.BOTTOM, ClipDrawable.VERTICAL);\n    if (mDragStatus == STATUS_EXPANDED) {\n        if (mIsBlurFull) {\n            mBlurDrawable.setLevel(10000);\n        } else {\n            final int visibleHeight = mHeight - mDragView.getTop();\n            final int blurLevel = (int) ((visibleHeight * 1.0f / mMainView.getHeight()) * 10000);\n            mBlurDrawable.setLevel(blurLevel);\n        }\n        mBlurDrawable.setAlpha(255);\n    } else {\n        mBlurDrawable.setLevel(0);\n        mBlurDrawable.setAlpha(0);\n    }\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u8bbe\u7f6e\u4f7f\u80fd\u6a21\u7cca\u6548\u679c\n *\n * @param enableBlur\n */\n", "func_signal": "public void setEnableBlur(boolean enableBlur)", "code": "{\n    if (mEnableBlur == enableBlur) {\n        return;\n    }\n    mEnableBlur = enableBlur;\n    if (mEnableBlur) {\n        mBlurView.setVisibility(VISIBLE);\n        if (mRenderScript == null || mBlurScript == null) {\n            mRenderScript = RenderScript.create(getContext());\n            mBlurScript = ScriptIntrinsicBlur.create(mRenderScript, Element.U8_4(mRenderScript));\n            mBlurScript.setRadius(mBlurRadius);\n        }\n        mMainView.post(new Runnable() {\n            @Override\n            public void run() {\n                _handleBlurInThread();\n            }\n        });\n    } else {\n        mBlurView.setVisibility(GONE);\n        if (mBitmapToBlur != null) {\n            mBitmapToBlur.recycle();\n            mBitmapToBlur = null;\n        }\n        if (mBlurDrawable != null) {\n            mBlurDrawable = null;\n        }\n    }\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u5224\u65ad\u89c6\u56fe\u662f\u5426\u4e3a ScrollView or NestedScrollView \u6216\u5b83\u7684\u5b50\u7c7b\n *\n * @param view View\n * @return\n */\n", "func_signal": "private boolean _isScrollView(View view)", "code": "{\n    boolean isScrollView = false;\n    if (view instanceof ScrollView || view instanceof NestedScrollView) {\n        isScrollView = true;\n    } else {\n        ViewParent parent = view.getParent();\n        while (parent != null) {\n            if (parent instanceof ScrollView || parent instanceof NestedScrollView) {\n                isScrollView = true;\n                break;\n            }\n        }\n    }\n    return isScrollView;\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u914d\u7f6e\u6c34\u5e73\u5217\u8868RecyclerView\n * @param view\n */\n", "func_signal": "public static void initRecyclerViewH(Context context, RecyclerView view, boolean isDivided,\n                                     RecyclerView.Adapter adapter)", "code": "{\n    LinearLayoutManager layoutManager = new LinearLayoutManager(context);\n    layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);\n    view.setLayoutManager(layoutManager);\n    view.setItemAnimator(new DefaultItemAnimator());\n    if (isDivided) {\n        view.addItemDecoration(new DividerItemDecoration(context, DividerItemDecoration.HORIZONTAL_LIST));\n    }\n    view.setAdapter(adapter);\n}", "path": "simple\\src\\main\\java\\com\\dl7\\simple\\drag\\utils\\RecyclerViewHelper.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u542f\u52a8\u9000\u51fa\u52a8\u753b\n * @param target \u76ee\u6807View\n */\n", "func_signal": "public void startOutAnim(View target)", "code": "{\n    if (mIsCustomAnimator) {\n        mOutAnimator.setTarget(null)\n                .start();\n    } else {\n        mOutAnimator.setTarget(target)\n                .setStartDelay(mStartDelay)\n                .setDuration(mDuration)\n                .setInterpolator(mInterpolator)\n                .start();\n    }\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\animate\\AnimatorPresenter.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u914d\u7f6e\u7011\u5e03\u6d41\u5217\u8868RecyclerView\n * @param view\n */\n", "func_signal": "public static void initRecyclerViewSV(Context context, RecyclerView view, boolean isDivided,\n                                      RecyclerView.Adapter adapter, int column)", "code": "{\n    StaggeredGridLayoutManager layoutManager = new StaggeredGridLayoutManager(column, StaggeredGridLayoutManager.VERTICAL);\n    view.setLayoutManager(layoutManager);\n    view.setItemAnimator(new DefaultItemAnimator());\n    if (isDivided) {\n        view.addItemDecoration(new DividerItemDecoration(context, DividerItemDecoration.VERTICAL_LIST));\n    }\n    view.setAdapter(adapter);\n}", "path": "simple\\src\\main\\java\\com\\dl7\\simple\\drag\\utils\\RecyclerViewHelper.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u62d6\u62fd\u4f4d\u79fb\u76d1\u542c\n *\n * @param visibleHeight \u5f53\u524d\u53ef\u89c1\u9ad8\u5ea6\n * @param percent       \u767e\u5206\u6bd4\n */\n", "func_signal": "private void _dragPositionChanged(int visibleHeight, float percent)", "code": "{\n    if (mDragViewTop == 0) {\n        mLastDragViewTop = mHeight - visibleHeight;\n    }\n    mDragViewTop = mHeight - visibleHeight;\n    // \u62d6\u62fd\u8ddd\u79bb\u8d85\u8fc7\u6700\u5c0f\u6ed1\u52a8\u8ddd\u79bb\u5219\u8fdb\u884c\u5224\u65ad\n    if (Math.abs(mDragViewTop - mLastDragViewTop) > mMinTouchSlop) {\n        mIsUp = (mDragViewTop < mLastDragViewTop);\n        mLastDragViewTop = mDragViewTop;\n    }\n    if (mEnableBlur && mBlurDrawable != null) {\n        if (visibleHeight < mFixHeight) {\n            return;\n        }\n        if (mIsBlurFull) {\n            mBlurDrawable.setLevel(10000);\n        } else {\n            final int blurLevel = (int) ((visibleHeight * 1.0f / mMainView.getHeight()) * 10000);\n            mBlurDrawable.setLevel(blurLevel);\n        }\n        mBlurDrawable.setAlpha((int) (percent * 255));\n    }\n    if (visibleHeight >= 0) {\n        ViewCompat.setTranslationY(mMainView, -visibleHeight * (1 - mCollapseParallax));\n    }\n    if (mDragPositionListener != null) {\n        mDragPositionListener.onDragPosition(visibleHeight, percent, mIsUp);\n    }\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\DragSlopLayout.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u542f\u52a8\u8fdb\u5165\u52a8\u753b\n * @param target \u76ee\u6807View\n */\n", "func_signal": "public void startInAnim(View target)", "code": "{\n    if (mIsCustomAnimator) {\n        mInAnimator.setTarget(null)\n                .start();\n    } else {\n        mInAnimator.setTarget(target)\n                .setStartDelay(mStartDelay)\n                .setDuration(mDuration)\n                .setInterpolator(mInterpolator)\n                .start();\n    }\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\animate\\AnimatorPresenter.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u52a8\u753b 1\n */\n", "func_signal": "private void _handleCustomOne()", "code": "{\n    mDsLayout.setCustomAnimator(new CustomViewAnimator() {\n        @Override\n        protected Animator doAnimator() {\n            ObjectAnimator one = ObjectAnimator.ofFloat(mIvFavorite, \"translationX\", mDsLayout.getWidth(), -100, 50, 0);\n            ObjectAnimator two = ObjectAnimator.ofFloat(mIvDownload, \"translationX\", mDsLayout.getWidth(), -100, 50, 0);\n            two.setStartDelay(100);\n            ObjectAnimator three = ObjectAnimator.ofFloat(mIvPraise, \"translationX\", mDsLayout.getWidth(), -100, 50, 0);\n            three.setStartDelay(200);\n            ObjectAnimator four = ObjectAnimator.ofFloat(mIvShare, \"translationX\", mDsLayout.getWidth(), -100, 50, 0);\n            four.setStartDelay(300);\n            AnimatorSet animatorSet = new AnimatorSet();\n            animatorSet.setDuration(700);\n            animatorSet.playTogether(one, two, three, four);\n            return animatorSet;\n        }\n    }, new CustomViewAnimator() {\n        @Override\n        protected Animator doAnimator() {\n            ObjectAnimator one = ObjectAnimator.ofFloat(mIvFavorite, \"translationX\", 0, mDsLayout.getWidth());\n            one.setStartDelay(300);\n            ObjectAnimator two = ObjectAnimator.ofFloat(mIvDownload, \"translationX\", 0, mDsLayout.getWidth());\n            two.setStartDelay(200);\n            ObjectAnimator three = ObjectAnimator.ofFloat(mIvPraise, \"translationX\", 0, mDsLayout.getWidth());\n            three.setStartDelay(100);\n            ObjectAnimator four = ObjectAnimator.ofFloat(mIvShare, \"translationX\", 0, mDsLayout.getWidth());\n            AnimatorSet animatorSet = new AnimatorSet();\n            animatorSet.setDuration(700);\n            animatorSet.playTogether(four, three, two, one);\n            return animatorSet;\n        }\n    });\n}", "path": "simple\\src\\main\\java\\com\\dl7\\simple\\drag\\activity\\AnimateActivity.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u6e05\u9664\u6240\u6709\u6570\u636e\n */\n", "func_signal": "public void cleanItems()", "code": "{\n    mDatas.clear();\n    notifyDataSetChanged();\n}", "path": "simple\\src\\main\\java\\com\\dl7\\simple\\drag\\adapter\\BaseRecyclerAdapter.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u79fb\u9664\u4e00\u6761\u6570\u636e\n * @param position \u4f4d\u7f6e\n */\n", "func_signal": "public void removeItem(int position)", "code": "{\n    if (position > mDatas.size() - 1) {\n        return;\n    }\n    mDatas.remove(position);\n    notifyItemRemoved(position);\n}", "path": "simple\\src\\main\\java\\com\\dl7\\simple\\drag\\adapter\\BaseRecyclerAdapter.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u5904\u7406\u52a8\u753b\u5e27\n * @param percent \u767e\u5206\u6bd4\n */\n", "func_signal": "public void handleAnimateFrame(View target, float percent)", "code": "{\n    ViewGroup parent = (ViewGroup) target.getParent();\n    float alpha = 1.0f * (1 - percent);\n    float translationX = 0;\n    float translationY = 0;\n    float rotationX = 0;\n    float rotationY = 0;\n    float scale = 1.0f;\n\n    switch (mAnimatorMode) {\n        case DragSlopLayout.SLIDE_BOTTOM:\n            translationY = target.getHeight() * percent;\n            break;\n\n        case DragSlopLayout.SLIDE_LEFT:\n            translationX = - parent.getWidth() * percent;\n            break;\n\n        case DragSlopLayout.SLIDE_RIGHT:\n            translationX = parent.getWidth() * percent;\n            break;\n\n        case DragSlopLayout.FADE:\n            break;\n\n        case DragSlopLayout.FLIP_X:\n            rotationX = 90 * percent;\n            break;\n\n        case DragSlopLayout.FLIP_Y:\n            rotationY = 90 * percent;\n            break;\n\n        case DragSlopLayout.ZOOM:\n            scale = 0.3f + 0.7f * (1 - percent);\n            break;\n\n        case DragSlopLayout.ZOOM_LEFT:\n            alpha = Math.min(1.0f, alpha * 2);\n            final float valueL = parent.getWidth() * 0.2f;\n            if (percent < 0.5f) {\n                scale = 1 - percent;\n                translationX = percent * 2 * valueL;\n            } else {\n                scale = (1 - percent) * 0.8f + 0.1f;\n                translationX = valueL - (percent * 2 - 1.0f) * parent.getWidth() * 1.2f;\n            }\n            break;\n        case DragSlopLayout.ZOOM_RIGHT:\n            alpha = Math.min(1.0f, alpha * 2);\n            final float valueR = -parent.getWidth() * 0.2f;\n            if (percent < 0.5f) {\n                scale = 1 - percent;\n                translationX = percent * 2 * valueR;\n            } else {\n                scale = (1 - percent) * 0.8f + 0.1f;\n                translationX = valueR + (percent * 2 - 1.0f) * parent.getWidth() * 1.2f;\n            }\n            break;\n    }\n\n    ViewCompat.setAlpha(target, alpha);\n    ViewCompat.setTranslationX(target, translationX);\n    ViewCompat.setTranslationY(target, translationY);\n    ViewCompat.setRotationX(target, rotationX);\n    ViewCompat.setRotationY(target, rotationY);\n    ViewCompat.setScaleX(target, scale);\n    ViewCompat.setScaleY(target, scale);\n}", "path": "dragsloplayout\\src\\main\\java\\com\\dl7\\drag\\animate\\AnimatorPresenter.java", "repo_name": "Rukey7/DragSlopLayout", "stars": 358, "license": "None", "language": "java", "size": 44545}
{"docstring": "/**\n * \u7ed9\u4f5c\u8005\u53d1\u9001\u90ae\u4ef6 \u53cd\u9988\u610f\u89c1\n *\n * @param context\n */\n", "func_signal": "public static void gotoSendOpinion(final Activity context)", "code": "{\n\n    Intent emailIntent = new Intent(Intent.ACTION_SENDTO);\n    emailIntent.setType(\"plain/text\");\n    emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{\"gudong.name@gmail.com\"});\n    emailIntent.putExtra(Intent.EXTRA_SUBJECT, context.getString(R.string.title_email_opinion));\n\n    try {\n        context.startActivity(emailIntent);\n    } catch (ActivityNotFoundException e) {\n        new AlertDialog.Builder(context)\n                .setTitle(R.string.title_point)\n                .setMessage(\"\u610f\u89c1\u53cd\u9988\u9700\u8981\u4f60\u5b89\u88c5\u90ae\u4ef6\u5ba2\u6237\u7aef\uff0c\u68c0\u6d4b\u5230\u4f60\u7684\u624b\u673a\u5c1a\u672a\u4f7f\u7528\u4efb\u4f55\u90ae\u4ef6\u5ba2\u6237\u7aef\uff0c\u4f60\u53ef\u4ee5\u7acb\u5373\u53bb\u914d\u7f6e\u624b\u673a\u81ea\u5e26\u7684\u90ae\u4ef6\u5e94\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u6211\u4e2a\u4eba\u4e3b\u9875\u7684\u65b9\u5f0f\uff0c\u8ddf\u6211\u53d6\u5f97\u8054\u7cfb\uff0c\u518d\u6b21\u611f\u8c22\u4f60\u5bf9 AppPlus \u652f\u6301\uff01\\n\\n\u6211\u7684\u4e3b\u9875\u5730\u5740\uff1agudong.name\")\n                .setPositiveButton(R.string.dialog_know,null)\n                .setNegativeButton(R.string.dialog_cancel,null)\n                .setNeutralButton(context.getString(R.string.action_visit_host), new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        NavigationManager.openUrl(context,\"http://gudong.name/\");\n                    }\n                })\n                .show();\n    }\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\control\\NavigationManager.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * open app detail info\n *\n * @param packageName\n */\n", "func_signal": "public static void openAppDetail(Context context, String packageName)", "code": "{\n    Intent intent = new Intent();\n    final int apiLevel = Build.VERSION.SDK_INT;\n    if (apiLevel >= 9) {\n        intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n                | Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        Uri uri = Uri.fromParts(SCHEME, packageName, null);\n        intent.setData(uri);\n    } else {\n        final String appPkgName = (apiLevel == 8 ? APP_PKG_NAME_22\n                : APP_PKG_NAME_21);\n        intent.setAction(Intent.ACTION_VIEW);\n        intent.setClassName(APP_DETAILS_PACKAGE_NAME,\n                APP_DETAILS_CLASS_NAME);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.putExtra(appPkgName, packageName);\n    }\n    context.startActivity(intent);\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\control\\NavigationManager.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u4e3aAndroid 4.4\u4ee5\u4e0a\u8bbe\u5907\u4f7f\u7528\u6c89\u6d78\u65f6\u6548\u679c\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.KITKAT)\nprivate void setTintLayout()", "code": "{\n    mBarTintManager = new SystemBarTintManager(this);\n    mBarTintManager.setStatusBarTintEnabled(true);\n    mBarTintManager.setNavigationBarTintEnabled(true);\n    mBarTintManager.setTintColor(Utils.getThemePrimaryColor(this));\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\activity\\BaseActivity.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u7ed9\u670b\u53cb\u5206\u4eab\n */\n", "func_signal": "public static void gotoShare(Activity activity)", "code": "{\n    Intent sendIntent = new Intent();\n    sendIntent.setAction(Intent.ACTION_SEND);\n    sendIntent.setType(\"text/*\");\n    sendIntent.putExtra(Intent.EXTRA_TEXT, \"App+\uff0c\u4e00\u6b3e\u4e0d\u9519\u7684App\u7ba1\u7406\u5e94\u7528\");\n    activity.startActivity(sendIntent);\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\control\\NavigationManager.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u4e3a\u5217\u8868\u8bbe\u7f6e\u6570\u636e\n */\n", "func_signal": "public void setData(List<AppEntity> result, int type)", "code": "{\n    if (result == null) {\n        loadingDataError(getErrorInfo(type));\n        return;\n    }\n    if (result.isEmpty()) {\n        loadingDataEmpty(getEmptyInfo(type));\n    }\n\n    mAdapter.update(result);\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\fragment\\AppListFragment.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u7684\u4e3b\u9898\u6570\u7ec4\uff0c\u6bcf\u4e00\u79cd\u989c\u8272\u5bf9\u5e94\u4e86\u591c\u95f4\u6a21\u5f0f\u548c\u65e5\u95f4\u6a21\u5f0f\n * \u76ee\u524d\u591c\u95f4\u6a21\u5f0f\u5df2\u7ecf\u4e0d\u505a\u4e86\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684\u4e3b\u9898\u5728\u76ee\u524d\u9879\u76ee\u4e2d\u662f\u7528\u4e0d\u5230\u7684\n * @return\n */\n", "func_signal": "public static int[]themeArr()", "code": "{\n    return new int[]{\n            R.style.LightRed,\n            R.style.LightPink,\n            R.style.LightPurple,\n            R.style.LightDeepPurple,\n            R.style.LightIndigo,\n            R.style.LightBlue,\n            R.style.LightLightBlue,\n            R.style.LightCyan,\n            R.style.LightTeal,\n            R.style.LightGreen,\n            R.style.LightLightGreen,\n            R.style.LightLime,\n            R.style.LightYellow,\n            R.style.LightAmber,\n            R.style.LightOrange,\n            R.style.LightDeepOrange,\n            R.style.LightBrown,\n            R.style.LightGrey,\n            R.style.LightBlueGrey,\n    };\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\control\\ThemeControl.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * copy file\n * @param source\n * @param dest\n * @throws IOException\n */\n", "func_signal": "public static void copyFileUsingFileChannels(File source, File dest)\n        throws IOException", "code": "{\n    FileChannel inputChannel = null;\n    FileChannel outputChannel = null;\n    try {\n        inputChannel = new FileInputStream(source).getChannel();\n        outputChannel = new FileOutputStream(dest).getChannel();\n        outputChannel.transferFrom(inputChannel, 0, inputChannel.size());\n    } finally {\n        inputChannel.close();\n        outputChannel.close();\n    }\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\utils\\FileUtil.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u4f20\u9001\u5b89\u88c5\u5305\n * @param entity\n */\n", "func_signal": "public static void shareApk(Activity activity, AppEntity entity)", "code": "{\n    final File srcFile = new File(entity.getSrcPath());\n    if(!srcFile.exists()){\n        Snackbar.make(activity.getWindow().getDecorView(),String.format(activity.getString(R.string.fail_share_app),entity.getAppName()),Snackbar.LENGTH_LONG).show();\n        return;\n    }\n    Intent intent = new Intent();\n    intent.setAction(Intent.ACTION_SEND);\n    intent.putExtra(Intent.EXTRA_STREAM,Uri.fromFile(new File(entity.getSrcPath())));\n    intent.setType(\"application/vnd.android.package-archive\");\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    activity.startActivity(Intent.createChooser(intent, FormatUtil.warpChooserTitle(activity,entity.getAppName())));\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\utils\\ActionUtil.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * export apk file\n * @param entity\n */\n", "func_signal": "public static void exportApk(final Activity activity,AppEntity entity)", "code": "{\n    //\u5224\u65adsd\u5361\u662f\u5426\u6302\u8f7d\n    if (!FileUtil.isSdCardOnMounted()) {\n        DialogUtil.showSinglePointDialog(activity, activity.getString(R.string.dialog_message_no_sdcard));\n        return;\n    }\n\n    final File srcFile = new File(entity.getSrcPath());\n    if(!srcFile.exists()){\n        Snackbar.make(activity.getWindow().getDecorView(),String.format(activity.getString(R.string.fail_export_app),entity.getAppName()),Snackbar.LENGTH_LONG).show();\n        return;\n    }\n    File exportParentFile = FileUtil.createDir(FileUtil.getSDPath(),FileUtil.KEY_EXPORT_DIR);\n\n    String exportFileName = entity.getAppName().concat(\"_\").concat(entity.getVersionName()).concat(\".apk\");\n    final File exportFile = new File(exportParentFile, exportFileName);\n    String contentInfo = String.format(activity.getString(R.string.dialog_message_file_exist), exportFileName, exportFile.getParentFile().getAbsolutePath());\n    if (exportFile.exists()) {\n        new AlertDialog.Builder(activity)\n                .setTitle(R.string.title_point)\n                .setMessage(contentInfo)\n                .setPositiveButton(R.string.dialog_action_exist_not_override, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n\n                    }\n                })\n                .setNegativeButton(R.string.dialog_action_exist_override, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        copyFile(activity,srcFile, exportFile);\n                    }\n                })\n                .setNeutralButton(R.string.dialog_action_exist_watch_now, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        NavigationManager.browseFile(activity,exportFile.getParentFile());\n                    }\n                })\n                .show();\n    } else {\n        String pointInfo = String.format(activity.getString(R.string.dialog_message_export),entity.getAppName(),exportFile.getParentFile().getAbsolutePath());\n        new AlertDialog.Builder(activity)\n                .setTitle(R.string.title_point)\n                .setMessage(pointInfo)\n                .setPositiveButton(R.string.dialog_confirm_export, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        copyFile(activity,srcFile, exportFile);\n                    }\n                })\n                .setNegativeButton(R.string.dialog_cancel,null)\n                .show();\n\n    }\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\utils\\ActionUtil.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u8bbe\u7f6etoolbar\u5c5e\u6027\n * @param title \u6807\u9898\n * @param showHome \u662f\u5426\u8fd4\u56de\n */\n", "func_signal": "public void setupToolBar(int title,boolean showHome)", "code": "{\n    setTitle(getString(title));\n    setDisplayHomeEnable(showHome);\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\activity\\BaseActivity.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * create a CustomWebViewDialog with a neutral button\n * @param dialogTitle\n * @param htmlFileName\n * @param accentColor\n * @param neutralText neutral button text\n * @param neutralListener click listener\n * @return\n */\n", "func_signal": "public static CustomWebViewDialog create(String dialogTitle, String htmlFileName, int accentColor, String positiveText, DialogInterface.OnClickListener positiveListener, String neutralText, DialogInterface.OnClickListener neutralListener)", "code": "{\n    CustomWebViewDialog dialog = new CustomWebViewDialog();\n    Bundle args = new Bundle();\n    args.putString(\"dialogTitle\", dialogTitle);\n    args.putString(\"htmlFileName\", htmlFileName);\n    args.putInt(\"accentColor\", accentColor);\n\n    args.putString(\"positiveText\", positiveText);\n    dialog.setPositiveClickCallback(positiveListener);\n\n    args.putString(\"neutralText\", neutralText);\n    dialog.setNeutralClickCallback(neutralListener);\n\n    dialog.setArguments(args);\n    return dialog;\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\fragment\\CustomWebViewDialog.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u91cd\u542fActivity\uff0c\u91cd\u65b0\u6267\u884c\u4e00\u6b21Activity\u7684\u751f\u547d\u5468\u671f\n */\n", "func_signal": "public void reload()", "code": "{\n    Intent intent = getIntent();\n    overridePendingTransition(0, 0);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n    finish();\n    overridePendingTransition(0, 0);\n    startActivity(intent);\n\n//      recreate();\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\activity\\BaseActivity.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * create a custom dialog use web view load layout by html file\n *\n * @param dialogTitle  dialog title\n * @param htmlFileName html file name\n * @param accentColor  accent color\n * @return a instance of CustomWebViewDialog\n */\n", "func_signal": "public static CustomWebViewDialog create(String dialogTitle, String htmlFileName, int accentColor)", "code": "{\n    CustomWebViewDialog dialog = new CustomWebViewDialog();\n    Bundle args = new Bundle();\n    args.putString(\"dialogTitle\", dialogTitle);\n    args.putString(\"htmlFileName\", htmlFileName);\n    args.putInt(\"accentColor\", accentColor);\n    dialog.setArguments(args);\n    return dialog;\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\fragment\\CustomWebViewDialog.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * Check the state of currently pending and running animations. If there are none\n * pending/running, call {@link #dispatchAnimationsFinished()} to notify any\n * listeners.\n */\n", "func_signal": "private void dispatchFinishedWhenDone()", "code": "{\n    if (!isRunning()) {\n        dispatchAnimationsFinished();\n    }\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\helper\\AppItemAnimator.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * copy file\n * @param source\n * @param dest\n * @throws IOException\n */\n", "func_signal": "public static Observable<Boolean> copyFileUsingFileChannelsAsyn(final File source,final  File dest)\n        throws IOException", "code": "{\n    return RxUtil.makeObservable(new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n            FileChannel inputChannel = null;\n            FileChannel outputChannel = null;\n            try {\n                inputChannel = new FileInputStream(source).getChannel();\n                outputChannel = new FileOutputStream(dest).getChannel();\n                outputChannel.transferFrom(inputChannel, 0, inputChannel.size());\n            } finally {\n                inputChannel.close();\n                outputChannel.close();\n            }\n            return true;\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\utils\\FileUtil.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u5224\u65adsd\u5361\u662f\u4e0d\u662f\u5904\u4e8e\u6302\u8f7d\u72b6\u6001\n * @return\n */\n", "func_signal": "public static boolean isSdCardOnMounted()", "code": "{\n    String status = Environment.getExternalStorageState();\n    if (status.equals(Environment.MEDIA_MOUNTED)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\utils\\FileUtil.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u5b89\u88c5APK\n * @param entity\n */\n", "func_signal": "public static void installApp(Activity activity, AppEntity entity)", "code": "{\n    final File srcFile = new File(entity.getSrcPath());\n    if(!srcFile.exists()){\n        Snackbar.make(activity.getWindow().getDecorView(),String.format(activity.getString(R.string.fail_install_app),entity.getAppName()),Snackbar.LENGTH_LONG).show();\n        return;\n    }\n\n    Intent mIntent = new Intent();\n    mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    mIntent.setAction(Intent.ACTION_VIEW);\n    mIntent.setDataAndType(Uri.fromFile(srcFile),\n            \"application/vnd.android.package-archive\");\n    activity.startActivity(mIntent);\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\utils\\ActionUtil.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * create a directory\n * @param parent parent directory\n * @param directoryName child directory name,it must a directory not file name\n */\n", "func_signal": "public static File createDir(String parent,String directoryName)", "code": "{\n    File createdFile = new File(parent, directoryName);\n    if (!createdFile.exists()) {\n        createdFile.mkdir();\n    }\n    return createdFile;\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\utils\\FileUtil.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u53bb\u8bc4\u5206\n *\n * @param activity\n */\n", "func_signal": "public static void gotoMarket(Activity activity, String packageName)", "code": "{\n    Uri uri = Uri.parse(\"market://details?id=\" + packageName);\n    Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    activity.startActivity(intent);\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\control\\NavigationManager.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * \u6d4f\u89c8\u6587\u4ef6\u5939\n *\n * @param file\n */\n", "func_signal": "public static void browseFile(Context context, File file)", "code": "{\n    Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\n    Uri uri = Uri.fromFile(file);\n    intent.setDataAndType(uri, \"file/*\");\n    context.startActivity(intent);\n}", "path": "app\\src\\main\\java\\com\\gudong\\appkit\\ui\\control\\NavigationManager.java", "repo_name": "maoruibin/AppPlus", "stars": 430, "license": "mit", "language": "java", "size": 3526}
{"docstring": "/**\n * Returns an action to subscribe to an observable to assert if it emits an element matching a given {@code matcher}     *\n *\n * @param matcher The matcher to use for the assertion\n * @param matched A callback for when the assertion is matched\n * @param <T>     The type of the observable\n * @return The action to subscribe to a materialized observable to assert if a given event is emitted.\n */\n", "func_signal": "public static <T> Action1<Notification<T>> expect(final RxMatcher<Notification<T>> matcher, final Action1<Notification<T>> matched)", "code": "{\n    return new Action1<Notification<T>>() {\n\n        private boolean noMatch = true;\n\n        @Override\n        public void call(Notification<T> notification) {\n            if (matcher.matches(notification)) {\n                noMatch = false;\n                matched.call(notification);\n            }\n            if (notification.getKind() == Notification.Kind.OnCompleted && noMatch) {\n                throw new RuntimeException(\"Expected \" + matcher.description() + \" but completed without matching\");\n            }\n        }\n    };\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Asserts that a given {@code observable} emits an element matching a given {@code matcher}\n *\n * @param matcher    The matcher to use for the assertion\n * @param observable The observable to assert against\n * @param <T>        The type of the observable\n */\n", "func_signal": "public static <T> void expect(RxMatcher<Notification<T>> matcher, Observable<T> observable)", "code": "{\n    observable.materialize()\n            .subscribe(expect(matcher));\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Injects the events from {@code source} into the mocked {@code observable} and wait for an event matching {@code matcher}\n * If an event not matching {@code matcher} is received an exception is thrown.\n *\n * @param matcher A matcher defining what event we are expecting to receive.\n * @return A Then object to chain any Espresso actions to execute once {@code observable} received an event matching {@code matcher}\n */\n", "func_signal": "public Then expectOnly(RxMatcher<Notification<T>> matcher)", "code": "{\n    expectOnlyMatching(matcher);\n    mock.sendEventsFrom(source).to(observable);\n    return new Then();\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\Expect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Injects the events from {@code source} into the mocked {@code observable} and wait for an event matching {@code matcher}\n * If no event matching {@code matcher} goes through the {@code observable} then the test hangs until an event {@code onCompleted}\n * is emitted by the Observable at this points an exception is thrown.\n *\n * @param matcher A matcher defining what event we are expecting to receive.\n * @return A Then object to chain any Espresso actions to execute once {@code observable} received an event matching {@code matcher}\n */\n", "func_signal": "public Then expect(RxMatcher<Notification<T>> matcher)", "code": "{\n    expectAnyMatching(matcher);\n    mock.sendEventsFrom(source).to(observable);\n    return new Then();\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\Expect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Returns the current value of the Subject if there is such a value and\n * the subject hasn't terminated yet.\n * <p>The can return {@code null} for various reasons. Use {@link #hasValue()}, {@link #hasThrowable()}\n * and {@link #hasCompleted()} to determine if such {@code null} is a valid value, there was an\n * exception or the Subject terminated (with or without receiving any value). \n * @return the current value or {@code null} if the Subject doesn't have a value,\n * has terminated or has an actual {@code null} as a valid value.\n */\n", "func_signal": "@Experimental\npublic T getValue()", "code": "{\n    Object o = state.get();\n    if (nl.isNext(o)) {\n        return nl.getValue(o);\n    }\n    return null;\n}", "path": "core\\src\\main\\java\\rx\\subjects\\ClearableBehaviorSubject.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * @param clazz The class of the type {@code T} of the observable to assert against\n * @param <T>   The type of the observable to assert against\n * @return a matcher matching any onError event\n */\n", "func_signal": "public static <T> RxMatcher<Notification<T>> anyError(Class<T> clazz)", "code": "{\n    return new RxMatcher<Notification<T>>() {\n        @Override\n        public boolean matches(Notification<T> actual) {\n            return actual.getKind() == Notification.Kind.OnError;\n        }\n\n        @Override\n        public String description() {\n            return \"Notification with kind \" + Notification.Kind.OnError;\n        }\n    };\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Check if the Subject has a value.\n * <p>Use the {@link #getValue()} method to retrieve such a value.\n * <p>Note that unless {@link #hasCompleted()} or {@link #hasThrowable()} returns true, the value\n * retrieved by {@code getValue()} may get outdated.\n * @return true if and only if the subject has some value and hasn't terminated yet.\n */\n", "func_signal": "@Experimental\npublic boolean hasValue()", "code": "{\n    Object o = state.get();\n    return nl.isNext(o);\n}", "path": "core\\src\\main\\java\\rx\\subjects\\ClearableBehaviorSubject.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Checks the two objects for equality by delegating to their respective\n * {@link Object#equals(Object)} methods.\n *\n * @param o the {@link Pair} to which this one is to be checked for equality\n * @return true if the underlying objects of the Pair are both considered\n *         equal\n */\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n\n    Pair pair = (Pair) o;\n\n    if (first != null ? !first.equals(pair.first) : pair.first != null) {\n        return false;\n    }\n    if (second != null ? !second.equals(pair.second) : pair.second != null) {\n        return false;\n    }\n\n    return true;\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\mock\\Pair.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * @param clazz The class of the type {@code T} to match\n * @param <T>   The type to match\n * @return a matcher matching any onNext event of a given type {@code T}\n */\n", "func_signal": "public static <T> RxMatcher<Notification<T>> any(Class<T> clazz)", "code": "{\n    return new RxMatcher<Notification<T>>() {\n        @Override\n        public boolean matches(Notification<T> actual) {\n            return actual.getKind() == Notification.Kind.OnNext;\n        }\n\n        @Override\n        public String description() {\n            return \"Notification with kind \" + Notification.Kind.OnNext;\n        }\n    };\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Check if the Subject has terminated with an exception.\n * @return true if the subject has received a throwable through {@code onError}.\n */\n", "func_signal": "@Experimental\npublic boolean hasThrowable()", "code": "{\n    Object o = state.get();\n    return nl.isError(o);\n}", "path": "core\\src\\main\\java\\rx\\subjects\\ClearableBehaviorSubject.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Asserts that a given {@code observable} emits an element matching a given {@code matcher}     *\n *\n * @param matcher    The matcher to use for the assertion\n * @param observable The observable to assert against\n * @param matched    A callback for when the assertion is matched\n * @param <T>        The type of the observable\n */\n", "func_signal": "public static <T> void expect(final RxMatcher<Notification<T>> matcher, final Observable<T> observable, final Action1<Notification<T>> matched)", "code": "{\n    observable.materialize()\n            .subscribe(expect(matcher, matched));\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Asserts that a given {@code observable} emits only elements matching a given {@code matcher}     *\n *\n * @param matcher    The matcher to use for the assertion\n * @param observable The observable to assert against\n * @param matched    A callback for when the assertion is matched\n * @param <T>        The type of the observable\n */\n", "func_signal": "public static <T> void expectOnly(final RxMatcher<Notification<T>> matcher, final Observable<T> observable, final Action1<Notification<T>> matched)", "code": "{\n    observable.materialize()\n            .subscribe(expectOnly(matcher, matched));\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Returns the Throwable that terminated the Subject.\n * @return the Throwable that terminated the Subject or {@code null} if the\n * subject hasn't terminated yet or it terminated normally.\n */\n", "func_signal": "@Experimental\npublic Throwable getThrowable()", "code": "{\n    Object o = state.get();\n    if (nl.isError(o)) {\n        return nl.getError(o);\n    }\n    return null;\n}", "path": "core\\src\\main\\java\\rx\\subjects\\ClearableBehaviorSubject.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Asserts that a given {@code observable} emits only elements matching a given {@code matcher}\n *\n * @param matcher    The matcher to use for the assertion\n * @param observable The observable to assert against\n * @param <T>        The type of the observable\n */\n", "func_signal": "public static <T> void expectOnly(RxMatcher<Notification<T>> matcher, Observable<T> observable)", "code": "{\n    observable.materialize()\n            .subscribe(expectOnly(matcher));\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Unregisters the error reThrower\n */\n", "func_signal": "public static void unregister()", "code": "{\n    RxJavaPlugins instance = RxJavaPlugins.getInstance();\n    RxJavaSchedulersHook schedulersHook = instance.getSchedulersHook();\n    RxJavaObservableExecutionHook observableExecutionHook = instance.getObservableExecutionHook();\n    instance.reset();\n    instance.registerObservableExecutionHook(observableExecutionHook);\n    instance.registerSchedulersHook(schedulersHook);\n}", "path": "core\\src\\main\\java\\rx\\plugins\\RxErrorRethrower.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Setup the injection of the events from the {@code source} into the mocked {@code observable}\n *\n * @param source An observable providing the events to inject\n * @return An Expect object to trigger the injection and setup what event to expect and wait for.\n */\n", "func_signal": "public Expect<T> withEventsFrom(Observable<T> source)", "code": "{\n    expect = new Expect<>(mock, source, observable);\n    expect.registerIdleTransitionCallback(\n            new ResourceCallback() {\n                @Override\n                public void onTransitionToIdle() {\n                    resourceCallback.onTransitionToIdle();\n                }\n            }\n    );\n    return expect;\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\With.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Constructor for a Pair.\n *\n * @param first the first object in the Pair\n * @param second the second object in the pair\n */\n", "func_signal": "public Pair(F first, S second)", "code": "{\n    this.first = first;\n    this.second = second;\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\mock\\Pair.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Check if the Subject has terminated normally.\n * @return true if the subject completed normally via {@code onCompleted()}\n */\n", "func_signal": "@Experimental\npublic boolean hasCompleted()", "code": "{\n    Object o = state.get();\n    return nl.isCompleted(o);\n}", "path": "core\\src\\main\\java\\rx\\subjects\\ClearableBehaviorSubject.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * @param clazz      The class of the type {@code T} of the observable to assert against\n * @param errorClazz The class of the type {@code V} of the error to match\n * @param <T>        The type of the observable to assert against\n * @param <V>\n * @return a matcher matching any onError event with an error a given type {@code V}\n */\n", "func_signal": "public static <T, V extends Throwable> RxMatcher<Notification<T>> anyError(Class<T> clazz, final Class<V> errorClazz)", "code": "{\n    return new RxMatcher<Notification<T>>() {\n        @Override\n        public boolean matches(Notification<T> actual) {\n            return actual.hasThrowable() && actual.getThrowable().getClass().isAssignableFrom(errorClazz);\n        }\n\n        @Override\n        public String description() {\n            return \"Notification with error of type \" + errorClazz.getName();\n        }\n    };\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Returns an action to subscribe to an observable to assert if it emits only elements matching a given {@code matcher}     *\n *\n * @param matcher The matcher to use for the assertion\n * @param matched A callback for when the assertion is matched\n * @param <T>     The type of the observable\n * @return The action to subscribe to a materialized observable to assert if a given event is emitted.\n */\n", "func_signal": "public static <T> Action1<Notification<T>> expectOnly(final RxMatcher<Notification<T>> matcher, final Action1<Notification<T>> matched)", "code": "{\n    return new Action1<Notification<T>>() {\n        @Override\n        public void call(Notification<T> notification) {\n            if (matcher.matches(notification)) {\n                matched.call(notification);\n            } else {\n                throw new RuntimeException(\"Expected \" + matcher.description() + \" but got \" + notification);\n            }\n        }\n    };\n}", "path": "core\\src\\main\\java\\com\\novoda\\rxpresso\\matcher\\RxExpect.java", "repo_name": "novoda/rxpresso", "stars": 364, "license": "other", "language": "java", "size": 128}
{"docstring": "/**\n * Look up the UUID for a given username.\n * @param playerName The name to look up.\n * @return The UUID, or null on failure.\n */\n", "func_signal": "public static UUID getUUID(String playerName)", "code": "{\n    if (uuidCache.containsKey(playerName)) {\n        return uuidCache.get(playerName);\n    }\n    uuidCache.put(playerName, PlayerDataFetcher.getUUID(playerName));\n    return uuidCache.get(playerName);\n}", "path": "src\\main\\java\\net\\glowstone\\entity\\meta\\profile\\ProfileCache.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Gets the block light level of a block within this chunk.\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @param y The Y coordinate.\n * @return The block light level.\n */\n", "func_signal": "public byte getBlockLight(int x, int z, int y)", "code": "{\n    ChunkSection section = getSection(y);\n    return section == null ? 0 : section.blockLight.get(section.index(x, y, z));\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Sets the biome of a column within this chunk,\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @param biome The biome.\n */\n", "func_signal": "public void setBiome(int x, int z, int biome)", "code": "{\n    if (biomes == null) return;\n    biomes[z * WIDTH + x] = (byte) biome;\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Gets the type of a block within this chunk.\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @param y The Y coordinate.\n * @return The type.\n */\n", "func_signal": "public int getType(int x, int z, int y)", "code": "{\n    ChunkSection section = getSection(y);\n    return section == null ? 0 : (section.types[section.index(x, y, z)] >> 4);\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Reads a chunk from its region file.\n * @param chunk The GlowChunk to read into.\n * @return Whether the\n * @throws IOException if an I/O error occurs.\n */\n", "func_signal": "@Override\npublic boolean read(GlowChunk chunk) throws IOException", "code": "{\n    int x = chunk.getX(), z = chunk.getZ();\n    RegionFile region = cache.getRegionFile(x, z);\n    int regionX = x & (REGION_SIZE - 1);\n    int regionZ = z & (REGION_SIZE - 1);\n    if (!region.hasChunk(regionX, regionZ)) {\n        return false;\n    }\n\n    DataInputStream in = region.getChunkDataInputStream(regionX, regionZ);\n\n    CompoundTag levelTag;\n    try (NBTInputStream nbt = new NBTInputStream(in, false)) {\n        CompoundTag root = nbt.readCompound();\n        levelTag = root.getCompound(\"Level\");\n    }\n\n    // read the vertical sections\n    List<CompoundTag> sectionList = levelTag.getCompoundList(\"Sections\");\n    ChunkSection[] sections = new ChunkSection[16];\n    for (CompoundTag sectionTag : sectionList) {\n        int y = sectionTag.getByte(\"Y\");\n        byte[] rawTypes = sectionTag.getByteArray(\"Blocks\");\n        NibbleArray extTypes = sectionTag.containsKey(\"Add\") ? new NibbleArray(sectionTag.getByteArray(\"Add\")) : null;\n        NibbleArray data = new NibbleArray(sectionTag.getByteArray(\"Data\"));\n        NibbleArray blockLight = new NibbleArray(sectionTag.getByteArray(\"BlockLight\"));\n        NibbleArray skyLight = new NibbleArray(sectionTag.getByteArray(\"SkyLight\"));\n\n        char[] types = new char[rawTypes.length];\n        for (int i = 0; i < rawTypes.length; i++) {\n            types[i] = (char) (((extTypes == null ? 0 : extTypes.get(i)) << 12) | ((rawTypes[i] & 0xff) << 4) | data.get(i));\n        }\n        sections[y] = new ChunkSection(types, skyLight, blockLight);\n    }\n\n    // initialize the chunk\n    chunk.initializeSections(sections);\n    chunk.setPopulated(levelTag.getBool(\"TerrainPopulated\"));\n\n    // read biomes\n    if (levelTag.isByteArray(\"Biomes\")) {\n        chunk.setBiomes(levelTag.getByteArray(\"Biomes\"));\n    }\n    // read height map\n    if (levelTag.isIntArray(\"HeightMap\")) {\n        chunk.setHeightMap(levelTag.getIntArray(\"HeightMap\"));\n    } else {\n        chunk.automaticHeightMap();\n    }\n\n    // read entities\n    if (levelTag.isList(\"Entities\", TagType.COMPOUND)) {\n        for (CompoundTag entityTag : levelTag.getCompoundList(\"Entities\")) {\n            try {\n                // note that creating the entity is sufficient to add it to the world\n                EntityStorage.loadEntity(chunk.getWorld(), entityTag);\n            } catch (Exception e) {\n                String id = entityTag.isString(\"id\") ? entityTag.getString(\"id\") : \"<missing>\";\n                if (e.getMessage() != null && e.getMessage().startsWith(\"Unknown entity type to load:\")) {\n                    GlowServer.logger.warning(\"Unknown entity in \" + chunk + \": \" + id);\n                } else {\n                    GlowServer.logger.log(Level.WARNING, \"Error loading entity in \" + chunk + \": \" + id, e);\n                }\n            }\n        }\n    }\n\n    // read tile entities\n    List<CompoundTag> storedTileEntities = levelTag.getCompoundList(\"TileEntities\");\n    for (CompoundTag tileEntityTag : storedTileEntities) {\n        int tx = tileEntityTag.getInt(\"x\");\n        int ty = tileEntityTag.getInt(\"y\");\n        int tz = tileEntityTag.getInt(\"z\");\n        TileEntity tileEntity = chunk.getEntity(tx & 0xf, ty, tz & 0xf);\n        if (tileEntity != null) {\n            try {\n                tileEntity.loadNbt(tileEntityTag);\n            } catch (Exception ex) {\n                String id = tileEntityTag.isString(\"id\") ? tileEntityTag.getString(\"id\") : \"<missing>\";\n                GlowServer.logger.log(Level.SEVERE, \"Error loading tile entity at \" + tileEntity.getBlock() + \": \" + id, ex);\n            }\n        } else {\n            String id = tileEntityTag.isString(\"id\") ? tileEntityTag.getString(\"id\") : \"<missing>\";\n            GlowServer.logger.warning(\"Unknown tile entity at \" + chunk.getWorld().getName() + \",\" + tx + \",\" + ty + \",\" + tz + \": \" + id);\n        }\n    }\n\n    return true;\n}", "path": "src\\main\\java\\net\\glowstone\\io\\anvil\\AnvilChunkIoService.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Gets the sky light level of a block within this chunk.\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @param y The Y coordinate.\n * @return The sky light level.\n */\n", "func_signal": "public byte getSkyLight(int x, int z, int y)", "code": "{\n    ChunkSection section = getSection(y);\n    return section == null ? 0 : section.skyLight.get(section.index(x, y, z));\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Sets the metadata of a block within this chunk.\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @param y The Y coordinate.\n * @param metaData The metadata.\n */\n", "func_signal": "public void setMetaData(int x, int z, int y, int metaData)", "code": "{\n    if (metaData < 0 || metaData >= 16)\n        throw new IllegalArgumentException(\"Metadata out of range: \" + metaData);\n    ChunkSection section = getSection(y);\n    if (section == null) return;  // can't set metadata on an empty section\n    int index = section.index(x, y, z);\n    int type = section.types[index];\n    if (type == 0) return;  // can't set metadata on air\n    section.types[index] = (char) ((type & 0xfff0) | metaData);\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Get the height map value of a column within this chunk.\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @return The height map value.\n */\n", "func_signal": "public int getHeight(int x, int z)", "code": "{\n    if (heightMap == null && !load()) return 0;\n    return heightMap[z * WIDTH + x] & 0xff;\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Attempt to get the tile entity located at the given coordinates.\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @param y The Y coordinate.\n * @return A GlowBlockState if the entity exists, or null otherwise.\n */\n", "func_signal": "public TileEntity getEntity(int x, int y, int z)", "code": "{\n    if (y >= DEPTH || y < 0) return null;\n    load();\n    return tileEntities.get(coordToIndex(x, z, y));\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Get the Material corresponding to the specified item identifier.\n * @param name the identifier.\n * @return the Material, or null.\n */\n", "func_signal": "public static Material getItem(String name)", "code": "{\n    if (!items.containsKey(name)) {\n        return null;\n    }\n    return Material.getMaterial(items.get(name));\n}", "path": "src\\main\\java\\net\\glowstone\\constants\\ItemIds.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Get the string identifier for a specified Material.\n * @param mat the Material.\n * @return the identifier.\n */\n", "func_signal": "public static String getName(Material mat)", "code": "{\n    Validate.notNull(mat, \"Material cannot be null\");\n    return names.get(mat.getId());\n}", "path": "src\\main\\java\\net\\glowstone\\constants\\ItemIds.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Recount the amount of non-air blocks in the chunk section.\n */\n", "func_signal": "public void recount()", "code": "{\n    count = 0;\n    for (char type : types) {\n        if (type != 0) {\n            count++;\n        }\n    }\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Calculate the index into internal arrays for the given coordinates.\n */\n", "func_signal": "public int index(int x, int y, int z)", "code": "{\n    if (x < 0 || z < 0 || x >= WIDTH || z >= HEIGHT) {\n        throw new IndexOutOfBoundsException(\"Coords (x=\" + x + \",z=\" + z + \") out of section bounds\");\n    }\n    return ((y & 0xf) << 8) | (z << 4) | x;\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Create an inventory view for a player.\n * @param player The player.\n * @param type   The inventory type.\n * @param top    The top inventory.\n * @param bottom The bottom inventory.\n */\n", "func_signal": "public GlowInventoryView(HumanEntity player, InventoryType type, Inventory top, Inventory bottom)", "code": "{\n    this.player = player;\n    this.type = type;\n    this.top = top;\n    this.bottom = bottom;\n}", "path": "src\\main\\java\\net\\glowstone\\inventory\\GlowInventoryView.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * If needed, create a new tile entity at the given location.\n */\n", "func_signal": "private void createEntity(int cx, int cy, int cz, int type)", "code": "{\n    BlockType blockType = ItemTable.instance().getBlock(type);\n    if (blockType == null) return;\n\n    try {\n        TileEntity entity = blockType.createTileEntity(this, cx, cy, cz);\n        if (entity == null) return;\n\n        tileEntities.put(coordToIndex(cx, cz, cy), entity);\n    } catch (Exception ex) {\n        GlowServer.logger.log(Level.SEVERE, \"Unable to initialize tile entity for \" + type, ex);\n    }\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Automatically fill the height map after chunks have been initialized.\n */\n", "func_signal": "public void automaticHeightMap()", "code": "{\n    // determine max Y chunk section at a time\n    int sy = sections.length - 1;\n    for (; sy >= 0; --sy) {\n        if (sections[sy] != null) {\n            break;\n        }\n    }\n    int y = (sy + 1) * 16;\n    for (int x = 0; x < WIDTH; ++x) {\n        for (int z = 0; z < HEIGHT; ++z) {\n            heightMap[z * WIDTH + x] = (byte) lowerHeightMap(x, y, z);\n        }\n    }\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Sets the type of a block within this chunk.\n * @param x The X coordinate.\n * @param z The Z coordinate.\n * @param y The Y coordinate.\n * @param type The type.\n */\n", "func_signal": "public void setType(int x, int z, int y, int type)", "code": "{\n    if (type < 0 || type > 0xfff)\n        throw new IllegalArgumentException(\"Block type out of range: \" + type);\n\n    ChunkSection section = getSection(y);\n    if (section == null) {\n        if (type == 0) {\n            // don't need to create chunk for air\n            return;\n        } else {\n            // create new ChunkSection for this y coordinate\n            int idx = y >> 4;\n            if (y < 0 || y >= DEPTH || idx >= sections.length) {\n                // y is out of range somehow\n                return;\n            }\n            sections[idx] = section = new ChunkSection();\n        }\n    }\n\n    // destroy any tile entity there\n    int tileEntityIndex = coordToIndex(x, z, y);\n    if (tileEntities.containsKey(tileEntityIndex)) {\n        tileEntities.remove(tileEntityIndex).destroy();\n    }\n\n    // update the air count and height map\n    int index = section.index(x, y, z);\n    int heightIndex = z * WIDTH + x;\n    if (type == 0) {\n        if (section.types[index] != 0) {\n            section.count--;\n        }\n        if (heightMap[heightIndex] == y + 1) {\n            // erased just below old height map -> lower\n            heightMap[heightIndex] = (byte) lowerHeightMap(x, y, z);\n        }\n    } else {\n        if (section.types[index] == 0) {\n            section.count++;\n        }\n        if (heightMap[heightIndex] <= y) {\n            // placed between old height map and top -> raise\n            heightMap[heightIndex] = (byte) Math.min(y + 1, 255);\n        }\n    }\n    // update the type - also sets metadata to 0\n    section.types[index] = (char) (type << 4);\n\n    if (type == 0 && section.count == 0) {\n        // destroy the empty section\n        sections[y / SEC_DEPTH] = null;\n        return;\n    }\n\n    // create a new tile entity if we need\n    createEntity(x, y, z, type);\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Initialize this chunk from the given sections.\n * @param initSections The ChunkSections to use.\n */\n", "func_signal": "public void initializeSections(ChunkSection[] initSections)", "code": "{\n    if (isLoaded()) {\n        GlowServer.logger.log(Level.SEVERE, \"Tried to initialize already loaded chunk (\" + x + \",\" + z + \")\", new Throwable());\n        return;\n    }\n    //GlowServer.logger.log(Level.INFO, \"Initializing chunk ({0},{1})\", new Object[]{x, z});\n\n    sections = new ChunkSection[DEPTH / SEC_DEPTH];\n    System.arraycopy(initSections, 0, sections, 0, Math.min(sections.length, initSections.length));\n\n    biomes = new byte[WIDTH * HEIGHT];\n    heightMap = new byte[WIDTH * HEIGHT];\n\n    // tile entity initialization\n    for (int i = 0; i < sections.length; ++i) {\n        if (sections[i] == null) continue;\n        int by = 16 * i;\n        for (int cx = 0; cx < WIDTH; ++cx) {\n            for (int cz = 0; cz < HEIGHT; ++cz) {\n                for (int cy = by; cy < by + 16; ++cy) {\n                    createEntity(cx, cy, cz, getType(cx, cz, cy));\n                }\n            }\n        }\n    }\n}", "path": "src\\main\\java\\net\\glowstone\\GlowChunk.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Tests that more specific metadata always appears later.\n */\n", "func_signal": "@Test\npublic void testOrdering()", "code": "{\n    HashMap<Class<?>, MetadataIndex> seen = new HashMap<>();\n\n    for (MetadataIndex index : MetadataIndex.values()) {\n        Class<?> clazz = index.getAppliesTo();\n\n        for (Map.Entry<Class<?>, MetadataIndex> entry : seen.entrySet()) {\n            if (clazz != entry.getKey() && clazz.isAssignableFrom(entry.getKey())) {\n                fail(\"Index \" + index + \"(\" + clazz.getSimpleName() + \") follows index \" + entry.getValue() + \"(\" + entry.getKey().getSimpleName() + \") which it parents\");\n            }\n        }\n\n        if (!seen.containsKey(clazz)) {\n            seen.put(clazz, index);\n        }\n    }\n}", "path": "src\\test\\java\\net\\glowstone\\entity\\MetadataIndexTest.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Convert an ItemStack which may have a type that is unrepresentable as\n * an item to one that does, or to null if this is not possible.\n * @param stack The stack to sanitize.\n * @return The sanitized stack, or null.\n */\n", "func_signal": "public static ItemStack sanitize(ItemStack stack)", "code": "{\n    if (stack == null || stack.getType() == null || stack.getType() == Material.AIR) {\n        return null;\n    }\n    Material item = getItem(getName(stack.getType()));\n    if (item == null) {\n        return null;\n    }\n    if (item != stack.getType()) {\n        stack = stack.clone();\n        stack.setType(item);\n    }\n    return stack;\n}", "path": "src\\main\\java\\net\\glowstone\\constants\\ItemIds.java", "repo_name": "GlowstoneMC/Glowstone-Legacy", "stars": 365, "license": "other", "language": "java", "size": 13257}
{"docstring": "/**\n * Returns a string representation of this map.  The string\n * representation consists of a list of key-value mappings (in no\n * particular order) enclosed in braces (\"{@code {}}\").  Adjacent\n * mappings are separated by the characters {@code \", \"} (comma\n * and space).  Each key-value mapping is rendered as the key\n * followed by an equals sign (\"{@code =}\") followed by the\n * associated value.\n *\n * @return a string representation of this map\n */\n", "func_signal": "public String toString()", "code": "{\n    Traverser<K,V,Object> it = new Traverser<K,V,Object>(this);\n    StringBuilder sb = new StringBuilder();\n    sb.append('{');\n    Object v;\n    if ((v = it.advance()) != null) {\n        for (;;) {\n            Object k = it.nextKey;\n            sb.append(k == this ? \"(this Map)\" : k);\n            sb.append('=');\n            sb.append(v == this ? \"(this Map)\" : v);\n            if ((v = it.advance()) == null)\n                break;\n            sb.append(',').append(' ');\n        }\n    }\n    return sb.append('}').toString();\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Maps the specified key to the specified value in this table.\n * Neither the key nor the value can be null.\n *\n * <p>The value can be retrieved by calling the {@code get} method\n * with a key that is equal to the original key.\n *\n * @param key key with which the specified value is to be associated\n * @param value value to be associated with the specified key\n * @return the previous value associated with {@code key}, or\n *         {@code null} if there was no mapping for {@code key}\n * @throws NullPointerException if the specified key or value is null\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\") public V put(K key, V value)", "code": "{\n    if (key == null || value == null)\n        throw new NullPointerException();\n    return (V)internalPut(key, value);\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Returns the number of mappings. This method should be used\n * instead of {@link #size} because a ConcurrentHashMapV8 may\n * contain more mappings than can be represented as an int. The\n * value returned is a snapshot; the actual count may differ if\n * there are ongoing concurrent insertions or removals.\n *\n * @return the number of mappings\n */\n", "func_signal": "public long mappingCount()", "code": "{\n    long n = counter.sum();\n    return (n < 0L) ? 0L : n; // ignore transient negative values\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Splits a normal bin with list headed by e into lo and hi parts;\n * installs in given table.\n */\n", "func_signal": "private static void splitBin(Node[] nextTab, int i, Node e)", "code": "{\n    int bit = nextTab.length >>> 1; // bit to split on\n    int runBit = e.hash & bit;\n    Node lastRun = e, lo = null, hi = null;\n    for (Node p = e.next; p != null; p = p.next) {\n        int b = p.hash & bit;\n        if (b != runBit) {\n            runBit = b;\n            lastRun = p;\n        }\n    }\n    if (runBit == 0)\n        lo = lastRun;\n    else\n        hi = lastRun;\n    for (Node p = e; p != lastRun; p = p.next) {\n        int ph = p.hash & HASH_BITS;\n        Object pk = p.key, pv = p.val;\n        if ((ph & bit) == 0)\n            lo = new Node(ph, pk, pv, lo);\n        else\n            hi = new Node(ph, pk, pv, hi);\n    }\n    setTabAt(nextTab, i, lo);\n    setTabAt(nextTab, i + bit, hi);\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/** From CLR */\n", "func_signal": "private void rotateRight(TreeNode p)", "code": "{\n    if (p != null) {\n        TreeNode l = p.left, pp, lr;\n        if ((lr = p.left = l.right) != null)\n            lr.parent = p;\n        if ((pp = l.parent = p.parent) == null)\n            root = l;\n        else if (pp.right == p)\n            pp.right = l;\n        else\n            pp.left = l;\n        l.right = p;\n        p.parent = l;\n    }\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Returns the value to which the specified key is mapped,\n * or {@code null} if this map contains no mapping for the key.\n *\n * <p>More formally, if this map contains a mapping from a key\n * {@code k} to a value {@code v} such that {@code key.equals(k)},\n * then this method returns {@code v}; otherwise it returns\n * {@code null}.  (There can be at most one such mapping.)\n *\n * @throws NullPointerException if the specified key is null\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\") public V get(Object key)", "code": "{\n    if (key == null)\n        throw new NullPointerException();\n    return (V)internalGet(key);\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Returns a power of two table size for the given desired capacity.\n * See Hackers Delight, sec 3.2\n */\n", "func_signal": "private static final int tableSizeFor(int c)", "code": "{\n    int n = c - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Creates a new, empty map with an initial table size\n * accommodating the specified number of elements without the need\n * to dynamically resize.\n *\n * @param initialCapacity The implementation performs internal\n * sizing to accommodate this many elements.\n * @throws IllegalArgumentException if the initial capacity of\n * elements is negative\n */\n", "func_signal": "public ConcurrentHashMapV8(int initialCapacity)", "code": "{\n    if (initialCapacity < 0)\n        throw new IllegalArgumentException();\n    int cap = ((initialCapacity >= (MAXIMUM_CAPACITY >>> 1)) ?\n            MAXIMUM_CAPACITY :\n            tableSizeFor(initialCapacity + (initialCapacity >>> 1) + 1));\n    this.counter = new LongAdder();\n    this.sizeCtl = cap;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/** Implementation for compute */\n", "func_signal": "@SuppressWarnings(\"unchecked\") private final Object internalCompute\n(K k, boolean onlyIfPresent, BiFun<? super K, ? super V, ? extends V> mf)", "code": "{\n    int h = spread(k.hashCode());\n    Object val = null;\n    int delta = 0;\n    int count = 0;\n    for (Node[] tab = table;;) {\n        Node f; int i, fh; Object fk;\n        if (tab == null)\n            tab = initTable();\n        else if ((f = tabAt(tab, i = (tab.length - 1) & h)) == null) {\n            if (onlyIfPresent)\n                break;\n            Node node = new Node(fh = h | LOCKED, k, null, null);\n            if (casTabAt(tab, i, null, node)) {\n                try {\n                    count = 1;\n                    if ((val = mf.apply(k, null)) != null) {\n                        node.val = val;\n                        delta = 1;\n                    }\n                } finally {\n                    if (delta == 0)\n                        setTabAt(tab, i, null);\n                    if (!node.casHash(fh, h)) {\n                        node.hash = h;\n                        synchronized (node) { node.notifyAll(); };\n                    }\n                }\n            }\n            if (count != 0)\n                break;\n        }\n        else if ((fh = f.hash) == MOVED) {\n            if ((fk = f.key) instanceof TreeBin) {\n                TreeBin t = (TreeBin)fk;\n                t.acquire(0);\n                try {\n                    if (tabAt(tab, i) == f) {\n                        count = 1;\n                        TreeNode p = t.getTreeNode(h, k, t.root);\n                        Object pv;\n                        if (p == null) {\n                            if (onlyIfPresent)\n                                break;\n                            pv = null;\n                        } else\n                            pv = p.val;\n                        if ((val = mf.apply(k, (V)pv)) != null) {\n                            if (p != null)\n                                p.val = val;\n                            else {\n                                count = 2;\n                                delta = 1;\n                                t.putTreeNode(h, k, val);\n                            }\n                        }\n                        else if (p != null) {\n                            delta = -1;\n                            t.deleteTreeNode(p);\n                        }\n                    }\n                } finally {\n                    t.release(0);\n                }\n                if (count != 0)\n                    break;\n            }\n            else\n                tab = (Node[])fk;\n        }\n        else if ((fh & LOCKED) != 0) {\n            checkForResize();\n            f.tryAwaitLock(tab, i);\n        }\n        else if (f.casHash(fh, fh | LOCKED)) {\n            try {\n                if (tabAt(tab, i) == f) {\n                    count = 1;\n                    for (Node e = f, pred = null;; ++count) {\n                        Object ek, ev;\n                        if ((e.hash & HASH_BITS) == h &&\n                                (ev = e.val) != null &&\n                                ((ek = e.key) == k || k.equals(ek))) {\n                            val = mf.apply(k, (V)ev);\n                            if (val != null)\n                                e.val = val;\n                            else {\n                                delta = -1;\n                                Node en = e.next;\n                                if (pred != null)\n                                    pred.next = en;\n                                else\n                                    setTabAt(tab, i, en);\n                            }\n                            break;\n                        }\n                        pred = e;\n                        if ((e = e.next) == null) {\n                            if (!onlyIfPresent && (val = mf.apply(k, null)) != null) {\n                                pred.next = new Node(h, k, val, null);\n                                delta = 1;\n                                if (count >= TREE_THRESHOLD)\n                                    replaceWithTreeBin(tab, i, k);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally {\n                if (!f.casHash(fh | LOCKED, fh)) {\n                    f.hash = fh;\n                    synchronized (f) { f.notifyAll(); };\n                }\n            }\n            if (count != 0) {\n                if (tab.length <= 64)\n                    count = 2;\n                break;\n            }\n        }\n    }\n    if (delta != 0) {\n        counter.add((long)delta);\n        if (count > 1)\n            checkForResize();\n    }\n    return val;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Returns {@code true} if this map maps one or more keys to the\n * specified value. Note: This method may require a full traversal\n * of the map, and is much slower than method {@code containsKey}.\n *\n * @param value value whose presence in this map is to be tested\n * @return {@code true} if this map maps one or more keys to the\n *         specified value\n * @throws NullPointerException if the specified value is null\n */\n", "func_signal": "public boolean containsValue(Object value)", "code": "{\n    if (value == null)\n        throw new NullPointerException();\n    Object v;\n    Traverser<K,V,Object> it = new Traverser<K,V,Object>(this);\n    while ((v = it.advance()) != null) {\n        if (v == value || value.equals(v))\n            return true;\n    }\n    return false;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * If table is too small and not already resizing, creates next\n * table and transfers bins.  Rechecks occupancy after a transfer\n * to see if another resize is already needed because resizings\n * are lagging additions.\n */\n", "func_signal": "private final void checkForResize()", "code": "{\n    Node[] tab; int n, sc;\n    while ((tab = table) != null &&\n            (n = tab.length) < MAXIMUM_CAPACITY &&\n            (sc = sizeCtl) >= 0 && counter.sum() >= (long)sc &&\n            UNSAFE.compareAndSwapInt(this, sizeCtlOffset, sc, -1)) {\n        try {\n            if (tab == table) {\n                table = rebuild(tab);\n                sc = (n << 1) - (n >>> 1);\n            }\n        } finally {\n            sizeCtl = sc;\n        }\n    }\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Reconstitutes the instance from a stream (that is, deserializes it).\n * @param s the stream\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\") private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException", "code": "{\n    s.defaultReadObject();\n    this.segments = null; // unneeded\n    // initialize transient final field\n    UNSAFE.putObjectVolatile(this, counterOffset, new LongAdder());\n\n    // Create all nodes, then place in table once size is known\n    long size = 0L;\n    Node p = null;\n    for (;;) {\n        K k = (K) s.readObject();\n        V v = (V) s.readObject();\n        if (k != null && v != null) {\n            int h = spread(k.hashCode());\n            p = new Node(h, k, v, p);\n            ++size;\n        }\n        else\n            break;\n    }\n    if (p != null) {\n        boolean init = false;\n        int n;\n        if (size >= (long)(MAXIMUM_CAPACITY >>> 1))\n            n = MAXIMUM_CAPACITY;\n        else {\n            int sz = (int)size;\n            n = tableSizeFor(sz + (sz >>> 1) + 1);\n        }\n        int sc = sizeCtl;\n        boolean collide = false;\n        if (n > sc &&\n                UNSAFE.compareAndSwapInt(this, sizeCtlOffset, sc, -1)) {\n            try {\n                if (table == null) {\n                    init = true;\n                    Node[] tab = new Node[n];\n                    int mask = n - 1;\n                    while (p != null) {\n                        int j = p.hash & mask;\n                        Node next = p.next;\n                        Node q = p.next = tabAt(tab, j);\n                        setTabAt(tab, j, p);\n                        if (!collide && q != null && q.hash == p.hash)\n                            collide = true;\n                        p = next;\n                    }\n                    table = tab;\n                    counter.add(size);\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            if (collide) { // rescan and convert to TreeBins\n                Node[] tab = table;\n                for (int i = 0; i < tab.length; ++i) {\n                    int c = 0;\n                    for (Node e = tabAt(tab, i); e != null; e = e.next) {\n                        if (++c > TREE_THRESHOLD &&\n                                (e.key instanceof Comparable)) {\n                            replaceWithTreeBin(tab, i, e.key);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (!init) { // Can only happen if unsafely published.\n            while (p != null) {\n                internalPut(p.key, p.val);\n                p = p.next;\n            }\n        }\n    }\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * If the specified key is not already associated with a value,\n * computes its value using the given mappingFunction and enters\n * it into the map unless null.  This is equivalent to\n * <pre> {@code\n * if (map.containsKey(key))\n *   return map.get(key);\n * value = mappingFunction.apply(key);\n * if (value != null)\n *   map.put(key, value);\n * return value;}</pre>\n *\n * except that the action is performed atomically.  If the\n * function returns {@code null} no mapping is recorded. If the\n * function itself throws an (unchecked) exception, the exception\n * is rethrown to its caller, and no mapping is recorded.  Some\n * attempted update operations on this map by other threads may be\n * blocked while computation is in progress, so the computation\n * should be short and simple, and must not attempt to update any\n * other mappings of this Map. The most appropriate usage is to\n * construct a new object serving as an initial mapped value, or\n * memoized result, as in:\n *\n *  <pre> {@code\n * map.computeIfAbsent(key, new Fun<K, V>() {\n *   public V map(K k) { return new Value(f(k)); }});}</pre>\n *\n * @param key key with which the specified value is to be associated\n * @param mappingFunction the function to compute a value\n * @return the current (existing or computed) value associated with\n *         the specified key, or null if the computed value is null\n * @throws NullPointerException if the specified key or mappingFunction\n *         is null\n * @throws IllegalStateException if the computation detectably\n *         attempts a recursive update to this map that would\n *         otherwise never complete\n * @throws RuntimeException or Error if the mappingFunction does so,\n *         in which case the mapping is left unestablished\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\") public V computeIfAbsent\n(K key, Fun<? super K, ? extends V> mappingFunction)", "code": "{\n    if (key == null || mappingFunction == null)\n        throw new NullPointerException();\n    return (V)internalComputeIfAbsent(key, mappingFunction);\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Creates a new map with the same mappings as the given map.\n *\n * @param m the map\n */\n", "func_signal": "public ConcurrentHashMapV8(Map<? extends K, ? extends V> m)", "code": "{\n    this.counter = new LongAdder();\n    this.sizeCtl = DEFAULT_CAPACITY;\n    internalPutAll(m);\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Compares the specified object with this map for equality.\n * Returns {@code true} if the given object is a map with the same\n * mappings as this map.  This operation may return misleading\n * results if either map is concurrently modified during execution\n * of this method.\n *\n * @param o object to be compared for equality with this map\n * @return {@code true} if the specified object is equal to this map\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if (o != this) {\n        if (!(o instanceof Map))\n            return false;\n        Map<?,?> m = (Map<?,?>) o;\n        Traverser<K,V,Object> it = new Traverser<K,V,Object>(this);\n        Object val;\n        while ((val = it.advance()) != null) {\n            Object v = m.get(it.nextKey);\n            if (v == null || (v != val && !v.equals(val)))\n                return false;\n        }\n        for (Map.Entry<?,?> e : m.entrySet()) {\n            Object mk, mv, v;\n            if ((mk = e.getKey()) == null ||\n                    (mv = e.getValue()) == null ||\n                    (v = internalGet(mk)) == null ||\n                    (mv != v && !mv.equals(v)))\n                return false;\n        }\n    }\n    return true;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Tests if the specified object is a key in this table.\n *\n * @param  key   possible key\n * @return {@code true} if and only if the specified object\n *         is a key in this table, as determined by the\n *         {@code equals} method; {@code false} otherwise\n * @throws NullPointerException if the specified key is null\n */\n", "func_signal": "public boolean containsKey(Object key)", "code": "{\n    if (key == null)\n        throw new NullPointerException();\n    return internalGet(key) != null;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Returns the value to which the specified key is mapped,\n * or the given defaultValue if this map contains no mapping for the key.\n *\n * @param key the key\n * @param defaultValue the value to return if this map contains\n * no mapping for the given key\n * @return the mapping for the key, if present; else the defaultValue\n * @throws NullPointerException if the specified key is null\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\") public V getValueOrDefault(Object key, V defaultValue)", "code": "{\n    if (key == null)\n        throw new NullPointerException();\n    V v = (V) internalGet(key);\n    return v == null ? defaultValue : v;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/*\n * Moves and/or copies the nodes in each bin to new table. See\n * above for explanation.\n *\n * @return the new table\n */\n", "func_signal": "private static final Node[] rebuild(Node[] tab)", "code": "{\n    int n = tab.length;\n    Node[] nextTab = new Node[n << 1];\n    Node fwd = new Node(MOVED, nextTab, null, null);\n    int[] buffer = null;       // holds bins to revisit; null until needed\n    Node rev = null;           // reverse forwarder; null until needed\n    int nbuffered = 0;         // the number of bins in buffer list\n    int bufferIndex = 0;       // buffer index of current buffered bin\n    int bin = n - 1;           // current non-buffered bin or -1 if none\n\n    for (int i = bin;;) {      // start upwards sweep\n        int fh; Node f;\n        if ((f = tabAt(tab, i)) == null) {\n            if (bin >= 0) {    // Unbuffered; no lock needed (or available)\n                if (!casTabAt(tab, i, f, fwd))\n                    continue;\n            }\n            else {             // transiently use a locked forwarding node\n                Node g = new Node(MOVED|LOCKED, nextTab, null, null);\n                if (!casTabAt(tab, i, f, g))\n                    continue;\n                setTabAt(nextTab, i, null);\n                setTabAt(nextTab, i + n, null);\n                setTabAt(tab, i, fwd);\n                if (!g.casHash(MOVED|LOCKED, MOVED)) {\n                    g.hash = MOVED;\n                    synchronized (g) { g.notifyAll(); }\n                }\n            }\n        }\n        else if ((fh = f.hash) == MOVED) {\n            Object fk = f.key;\n            if (fk instanceof TreeBin) {\n                TreeBin t = (TreeBin)fk;\n                boolean validated = false;\n                t.acquire(0);\n                try {\n                    if (tabAt(tab, i) == f) {\n                        validated = true;\n                        splitTreeBin(nextTab, i, t);\n                        setTabAt(tab, i, fwd);\n                    }\n                } finally {\n                    t.release(0);\n                }\n                if (!validated)\n                    continue;\n            }\n        }\n        else if ((fh & LOCKED) == 0 && f.casHash(fh, fh|LOCKED)) {\n            boolean validated = false;\n            try {              // split to lo and hi lists; copying as needed\n                if (tabAt(tab, i) == f) {\n                    validated = true;\n                    splitBin(nextTab, i, f);\n                    setTabAt(tab, i, fwd);\n                }\n            } finally {\n                if (!f.casHash(fh | LOCKED, fh)) {\n                    f.hash = fh;\n                    synchronized (f) { f.notifyAll(); };\n                }\n            }\n            if (!validated)\n                continue;\n        }\n        else {\n            if (buffer == null) // initialize buffer for revisits\n                buffer = new int[TRANSFER_BUFFER_SIZE];\n            if (bin < 0 && bufferIndex > 0) {\n                int j = buffer[--bufferIndex];\n                buffer[bufferIndex] = i;\n                i = j;         // swap with another bin\n                continue;\n            }\n            if (bin < 0 || nbuffered >= TRANSFER_BUFFER_SIZE) {\n                f.tryAwaitLock(tab, i);\n                continue;      // no other options -- block\n            }\n            if (rev == null)   // initialize reverse-forwarder\n                rev = new Node(MOVED, tab, null, null);\n            if (tabAt(tab, i) != f || (f.hash & LOCKED) == 0)\n                continue;      // recheck before adding to list\n            buffer[nbuffered++] = i;\n            setTabAt(nextTab, i, rev);     // install place-holders\n            setTabAt(nextTab, i + n, rev);\n        }\n\n        if (bin > 0)\n            i = --bin;\n        else if (buffer != null && nbuffered > 0) {\n            bin = -1;\n            i = buffer[bufferIndex = --nbuffered];\n        }\n        else\n            return nextTab;\n    }\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Saves the state of the {@code ConcurrentHashMapV8} instance to a\n * stream (i.e., serializes it).\n * @param s the stream\n * @serialData\n * the key (Object) and value (Object)\n * for each key-value mapping, followed by a null pair.\n * The key-value mappings are emitted in no particular order.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\") private void writeObject(java.io.ObjectOutputStream s)\n        throws java.io.IOException", "code": "{\n    if (segments == null) { // for serialization compatibility\n        segments = (Segment<K,V>[])\n                new Segment<?,?>[DEFAULT_CONCURRENCY_LEVEL];\n        for (int i = 0; i < segments.length; ++i)\n            segments[i] = new Segment<K,V>(LOAD_FACTOR);\n    }\n    s.defaultWriteObject();\n    Traverser<K,V,Object> it = new Traverser<K,V,Object>(this);\n    Object v;\n    while ((v = it.advance()) != null) {\n        s.writeObject(it.nextKey);\n        s.writeObject(v);\n    }\n    s.writeObject(null);\n    s.writeObject(null);\n    segments = null; // throw away\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "/**\n * Sets our entry's value and writes through to the map. The\n * value to return is somewhat arbitrary here. Since we do not\n * necessarily track asynchronous changes, the most recent\n * \"previous\" value could be different from what we return (or\n * could even have been removed in which case the put will\n * re-establish). We do not and cannot guarantee more.\n */\n", "func_signal": "public final V setValue(V value)", "code": "{\n    if (value == null) throw new NullPointerException();\n    V v = val;\n    val = value;\n    map.put(key, value);\n    return v;\n}", "path": "ext\\org\\jruby\\ext\\thread_safe\\jsr166e\\ConcurrentHashMapV8.java", "repo_name": "headius/thread_safe", "stars": 283, "license": "apache-2.0", "language": "java", "size": 453}
{"docstring": "// =======================================\n// ============ String\u6570\u636e \u8bfb\u5199 ==============\n// =======================================\n/**\n * \u4fdd\u5b58 String\u6570\u636e \u5230 \u7f13\u5b58\u4e2d\n * \n * @param key\n *            \u4fdd\u5b58\u7684key\n * @param value\n *            \u4fdd\u5b58\u7684String\u6570\u636e\n */\n", "func_signal": "public void put(String key, String value)", "code": "{\n\tFile file = mCache.newFile(key);\n\tBufferedWriter out = null;\n\ttry {\n\t\tout = new BufferedWriter(new FileWriter(file), 1024);\n\t\tout.write(value);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (out != null) {\n\t\t\ttry {\n\t\t\t\tout.flush();\n\t\t\t\tout.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tmCache.put(file);\n\t}\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * set pattern\n * @param mode (details see the DisplayMode)\n     */\n", "func_signal": "public void setPattern(DisplayMode mode)", "code": "{\n\tswitch (mode) {\n\t\tcase DEFAULT:\n\t\t\tfor(Cell cell: sCells) {\n\t\t\t\tcell.setStatus(Cell.STATE_NORMAL);\n\t\t\t}\n\t\t\tsCells.clear();\n\t\t\tbreak;\n\t\tcase NORMAL:\n\t\t\tbreak;\n\t\tcase ERROR:\n\t\t\tfor(Cell cell : sCells) {\n\t\t\t\tcell.setStatus(Cell.STATE_CHECK_ERROR);\n\t\t\t}\n\t\t\tbreak;\n\t}\n\tthis.handleStealthMode();\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * \u5224\u65ad\u7f13\u5b58\u7684byte\u6570\u636e\u662f\u5426\u5230\u671f\n * \n * @param data\n * @return true\uff1a\u5230\u671f\u4e86 false\uff1a\u8fd8\u6ca1\u6709\u5230\u671f\n */\n", "func_signal": "private static boolean isDue(byte[] data)", "code": "{\n\tString[] strs = getDateInfoFromDate(data);\n\tif (strs != null && strs.length == 2) {\n\t\tString saveTimeStr = strs[0];\n\t\twhile (saveTimeStr.startsWith(\"0\")) {\n\t\t\tsaveTimeStr = saveTimeStr.substring(1, saveTimeStr.length());\n\t\t}\n\t\tlong saveTime = Long.valueOf(saveTimeStr);\n\t\tlong deleteAfter = Long.valueOf(strs[1]);\n\t\tif (System.currentTimeMillis() > saveTime + deleteAfter * 1000) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * \u8bfb\u53d6 Serializable\u6570\u636e\n * \n * @param key\n * @return Serializable \u6570\u636e\n */\n", "func_signal": "public Object getAsObject(String key)", "code": "{\n\tbyte[] data = getAsBinary(key);\n\tif (data != null) {\n\t\tByteArrayInputStream bais = null;\n\t\tObjectInputStream ois = null;\n\t\ttry {\n\t\t\tbais = new ByteArrayInputStream(data);\n\t\t\tois = new ObjectInputStream(bais);\n\t\t\tObject reObject = ois.readObject();\n\t\t\treturn reObject;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (bais != null)\n\t\t\t\t\tbais.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (ois != null)\n\t\t\t\t\tois.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * handle haptic feedback\n * (if mEnableHapticFeedback true: has haptic else not have haptic)\n */\n", "func_signal": "private void handleHapticFeedback()", "code": "{\n\tif(mEnableHapticFeedback) {\n\t\tperformHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,\n\t\t\t\tHapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING |\n\t\t\t\t\t\tHapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n\t}\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * \u8bfb\u53d6 bitmap \u6570\u636e\n * \n * @param key\n * @return bitmap \u6570\u636e\n */\n", "func_signal": "public Bitmap getAsBitmap(String key)", "code": "{\n\tif (getAsBinary(key) == null) {\n\t\treturn null;\n\t}\n\treturn Utils.Bytes2Bimap(getAsBinary(key));\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * draw line not include circle (check whether the cell between two cells )\n * @param preCell\n * @param nextCell\n * @param canvas\n     * @param paint\n     */\n", "func_signal": "private void drawLine(Cell preCell, Cell nextCell, Canvas canvas, Paint paint)", "code": "{\n\tCell centerCell = getCellBetweenTwoCells(preCell, nextCell);\n\tif(centerCell != null && sCells.contains(centerCell)) {\n\t\tdrawLineNotIncludeCircle(centerCell, preCell, canvas, paint);\n\t\tdrawLineNotIncludeCircle(centerCell, nextCell, canvas, paint);\n\t} else {\n\t\tdrawLineNotIncludeCircle(preCell, nextCell, canvas, paint);\n\t}\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * initialize\n     */\n", "func_signal": "private void init()", "code": "{\n\tthis.initCellSize();\n\tthis.init9Cells();\n\tthis.initPaints();\n\tthis.initPaths();\n\tthis.initMatrixs();\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * handle action down\n * @param ex\n * @param ey\n     */\n", "func_signal": "private void handleActionDown(float ex, float ey)", "code": "{\n\tisActionMove = false;\n\tisActionDown = true;\n\tisActionUp = false;\n\n\tthis.setPattern(DisplayMode.DEFAULT);\n\n\tif(this.patterListener != null) {\n\t\tthis.patterListener.onPatternStart();\n\t}\n\n\tCell cell = checkSelectCell(ex, ey);\n\tif(cell != null) {\n\t\taddSelectedCell(cell);\n\t}\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * draw triangle\n * @param preCell the previous selected cell\n * @param nextCell the next selected cell\n * @param canvas\n     * @param paint\n     */\n", "func_signal": "@Deprecated\nprivate void drawTriangle(Cell preCell, Cell nextCell, Canvas canvas, Paint paint)", "code": "{\n\tfloat distance = LockPatternUtil.getDistanceBetweenTwoPoints\n\t\t\t(preCell.getX(), preCell.getY(), nextCell.getX(), nextCell.getY());\n\tfloat x = this.cellInnerRadius * 2 / distance * (nextCell.getX() - preCell.getX()) + preCell.getX();\n\tfloat y = this.cellInnerRadius * 2 / distance * (nextCell.getY() - preCell.getY()) + preCell.getY();\n\n\tfloat angleX = LockPatternUtil.getAngleLineIntersectX(\n\t\t\tpreCell.getX(), preCell.getY(), nextCell.getX(), nextCell.getY(), distance);\n\tfloat angleY = LockPatternUtil.getAngleLineIntersectY(\n\t\t\tpreCell.getX(), preCell.getY(), nextCell.getX(), nextCell.getY(), distance);\n\tfloat x1, y1, x2, y2;\n\t//slide right down\n\tif (angleX >= 0 && angleX <= 90 && angleY >=0 && angleY <= 90 ) {\n\t\tx1 = x - (float)(cellInnerRadius * Math.cos(Math.toRadians(angleX - 30)));\n\t\ty1 = y - (float)(cellInnerRadius * Math.sin(Math.toRadians(angleX - 30)));\n\t\tx2 = x - (float)(cellInnerRadius * Math.sin(Math.toRadians(angleY - 30)));\n\t\ty2 = y - (float)(cellInnerRadius * Math.cos(Math.toRadians(angleY - 30)));\n\t}\n\t//slide right up\n\telse if (angleX >= 0 && angleX <= 90 && angleY > 90 && angleY <= 180) {\n\t\tx1 = x - (float)(cellInnerRadius * Math.cos(Math.toRadians(angleX + 30)));\n\t\ty1 = y + (float)(cellInnerRadius * Math.sin(Math.toRadians(angleX + 30)));\n\t\tx2 = x - (float)(cellInnerRadius * Math.sin(Math.toRadians(180 - angleY + 30)));\n\t\ty2 = y + (float)(cellInnerRadius * Math.cos(Math.toRadians(180 - angleY + 30)));\n\t}\n\t//slide left up\n\telse if (angleX > 90 && angleX <= 180 && angleY >= 90 && angleY < 180) {\n\t\tx1 = x + (float)(cellInnerRadius * Math.cos(Math.toRadians(180 - angleX - 30)));\n\t\ty1 = y + (float)(cellInnerRadius * Math.sin(Math.toRadians(180 - angleX - 30)));\n\t\tx2 = x + (float)(cellInnerRadius * Math.sin(Math.toRadians(180 - angleY - 30)));\n\t\ty2 = y + (float)(cellInnerRadius * Math.cos(Math.toRadians(180 - angleY - 30)));\n\t}\n\t//slide left down\n\telse {\n\t\tx1 = x + (float)(cellInnerRadius * Math.cos(Math.toRadians(180 - angleX + 30)));\n\t\ty1 = y - (float)(cellInnerRadius * Math.sin(Math.toRadians(180 - angleX + 30)));\n\t\tx2 = x + (float)(cellInnerRadius * Math.sin(Math.toRadians(angleY + 30)));\n\t\ty2 = y - (float)(cellInnerRadius * Math.cos(Math.toRadians(angleY + 30)));\n\t}\n\ttrianglePath.reset();\n\ttrianglePath.moveTo(x, y);\n\ttrianglePath.lineTo(x1, y1);\n\ttrianglePath.lineTo(x2, y2);\n\ttrianglePath.close();\n\tcanvas.drawPath(trianglePath, paint);\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * draw line not include circle (the line do not show inside the circle)\n * @param preCell\n * @param nextCell\n * @param canvas\n * @param paint\n */\n", "func_signal": "private void drawLineNotIncludeCircle(Cell preCell, Cell nextCell, Canvas canvas, Paint paint)", "code": "{\n\tfloat distance = LockPatternUtil.getDistanceBetweenTwoPoints(\n\t\t\tpreCell.getX(), preCell.getY(), nextCell.getX(), nextCell.getY());\n\tfloat x1 = this.cellRadius / distance * (nextCell.getX() - preCell.getX()) + preCell.getX();\n\tfloat y1 = this.cellRadius / distance * (nextCell.getY() - preCell.getY()) + preCell.getY() ;\n\tfloat x2 = (distance - this.cellRadius) / distance *\n\t\t\t(nextCell.getX() - preCell.getX()) + preCell.getX();\n\tfloat y2 = (distance - this.cellRadius) / distance *\n\t\t\t(nextCell.getY() - preCell.getY()) + preCell.getY();\n\tcanvas.drawLine(x1, y1, x2, y2, paint);\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/*\n * byte[] \u2192 Bitmap\n */\n", "func_signal": "private static Bitmap Bytes2Bimap(byte[] b)", "code": "{\n\tif (b.length == 0) {\n\t\treturn null;\n\t}\n\treturn BitmapFactory.decodeByteArray(b, 0, b.length);\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/*\n * Bitmap \u2192 Drawable\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\nprivate static Drawable bitmap2Drawable(Bitmap bm)", "code": "{\n\tif (bm == null) {\n\t\treturn null;\n\t}\n\tBitmapDrawable bd=new BitmapDrawable(bm);\n\tbd.setTargetDensity(bm.getDensity());\n\treturn new BitmapDrawable(bm);\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * \u8bfb\u53d6JSONObject\u6570\u636e\n * \n * @param key\n * @return JSONObject\u6570\u636e\n */\n", "func_signal": "public JSONObject getAsJSONObject(String key)", "code": "{\n\tString JSONString = getAsString(key);\n\ttry {\n\t\tJSONObject obj = new JSONObject(JSONString);\n\t\treturn obj;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * \u8bfb\u53d6 Drawable \u6570\u636e\n * \n * @param key\n * @return Drawable \u6570\u636e\n */\n", "func_signal": "public Drawable getAsDrawable(String key)", "code": "{\n\tif (getAsBinary(key) == null) {\n\t\treturn null;\n\t}\n\treturn Utils.bitmap2Drawable(Utils.Bytes2Bimap(getAsBinary(key)));\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * check user's touch moving is or not in the area of cells \n * @param x\n * @param y\n * @return\n */\n", "func_signal": "private Cell checkSelectCell(float x, float y)", "code": "{\n\tfor (int i = 0; i < mCells.length; i++) {\n\t\tfor (int j = 0; j < mCells[i].length; j++) {\n\t\t\tCell cell = mCells[i][j];\n\t\t\tif (LockPatternUtil.checkInRound(cell.x, cell.y, 80, x, y, this.cellRadius/4)) {\n\t\t\t\treturn cell;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * \u83b7\u53d6\u7f13\u5b58\u6587\u4ef6\n * \n * @param key\n * @return value \u7f13\u5b58\u7684\u6587\u4ef6\n */\n", "func_signal": "public File file(String key)", "code": "{\n\tFile f = mCache.newFile(key);\n\tif (f.exists())\n\t\treturn f;\n\treturn null;\n}", "path": "app\\src\\main\\java\\com\\star\\demo\\util\\cache\\ACache.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * draw line follow finger\n * (do not draw line inside the selected cell,\n * but it is only the starting cell not the other's cell)\n * @param preCell\n * @param canvas\n * @param paint\n     */\n", "func_signal": "private void drawLineFollowFinger(Cell preCell, Canvas canvas, Paint paint)", "code": "{\n\tfloat distance = LockPatternUtil.getDistanceBetweenTwoPoints(\n\t\t\tpreCell.getX(),preCell.getY(),movingX,movingY);\n\tif(distance > this.cellRadius) {\n\t\tfloat x1 = this.cellRadius / distance * (movingX - preCell.getX()) + preCell.getX();\n\t\tfloat y1 = this.cellRadius / distance * (movingY - preCell.getY()) + preCell.getY() ;\n\t\tcanvas.drawLine(x1, y1, movingX, movingY, paint);\n\t}\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * delay clear pattern\n * @param delay the delay time (if delay less than 0, it will be 600L)\n     */\n", "func_signal": "public void postClearPatternRunnable(long delay)", "code": "{\n\tif(delay >= 0L){\n\t\tdelayTime = delay;\n\t}\n\tthis.removeCallbacks(mClearPatternRunnable);\n\tthis.postDelayed(mClearPatternRunnable, delayTime);\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * initialize the view size (include the view width and the view height fro the AttributeSet)\n * @param context\n * @param attrs\n     */\n", "func_signal": "@Deprecated\nprivate void initViewSize(Context context, AttributeSet attrs)", "code": "{\n\tfor(int i = 0; i < attrs.getAttributeCount(); i ++){\n\t\tString name = attrs.getAttributeName(i);\n\t\tif(\"layout_width\".equals(name)){\n\t\t\tString value = attrs.getAttributeValue(i);\n\t\t\tthis.width = LockPatternUtil.changeSize(context, value);\n\t\t}\n\t\tif(\"layout_height\".equals(attrs.getAttributeName(i))){\n\t\t\tString value = attrs.getAttributeValue(i);\n\t\t\tthis.height = LockPatternUtil.changeSize(context, value);\n\t\t}\n\t}\n\t//check the width is or not equals height.\n\t//if not throw exception\n\tif (this.width != this.height) {\n\t\tthrow new IllegalArgumentException(\"the width must be equals height\");\n\t}\n}", "path": "lockpattern\\src\\main\\java\\com\\star\\lockpattern\\widget\\LockPatternView.java", "repo_name": "sym900728/LockPattern", "stars": 260, "license": "None", "language": "java", "size": 1203}
{"docstring": "/**\n * onResume should be called in {@link Activity#onResume()}\n */\n", "func_signal": "public void onResume()", "code": "{\n    LogUtil.d(TAG, \"onResume\");\n    mMedia.setStateChangeListener(this);\n    mMedia.onResume(mRenderView,getContext());\n    mBrightness = mMedia.getCurrentBrightness();\n    WindowManager.LayoutParams lp = ((Activity) mContext.get()).getWindow().getAttributes();\n    lp.screenBrightness = (float) mBrightness;\n    ((Activity) mContext.get()).getWindow().setAttributes(lp);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ParsingVideoView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "//abcvod.abcnews.com/i/abcnews/130929_tw_zarif_1003_,500,700,900,1200,1600,2000,2500,.mp4.csmil/index_6_av.m3u8\";\n", "func_signal": "public static String download(String u, String filename)", "code": "{\n        InputStream input = null;\n        OutputStream output = null;\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(u);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.connect();\n\n            // expect HTTP 200 OK, so we don't mistakenly save error report\n            // instead of the file\n            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                return null;\n            }\n\n            // this will be useful to display download percentage\n            // might be -1: server did not report the length\n            int fileLength = connection.getContentLength();\n\n            // download the file\n            input = connection.getInputStream();\n\n            output = new FileOutputStream(Environment.getExternalStorageDirectory().getPath()\n                    + filename);\n\n            byte data[] = new byte[4096];\n            long total = 0;\n            int count;\n            while ((count = input.read(data)) != -1) {\n                total += count;\n                output.write(data, 0, count);\n            }\n            System.err.println(\"total count \" + total);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            try {\n                if (output != null)\n                    output.close();\n                if (input != null)\n                    input.close();\n            } catch (IOException ignored) {\n            }\n\n            if (connection != null)\n                connection.disconnect();\n        }\n        return new File(Environment.getExternalStorageDirectory().getPath()\n                + filename).getPath();\n    }", "path": "sample\\src\\androidTest\\java\\com\\hustunique\\sample\\TestUtil.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * release specific player playing url\n *\n * @param url the target url\n */\n", "func_signal": "public void onDestroy(String url)", "code": "{\n    mRenderView.clear();\n    mRenderView = null;\n    destroyPlayerByURL(url);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\media\\ParsingMediaManager.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * Play video via {@link IVideoInfo}\n * @param info see {@link IVideoInfo} for details\n */\n", "func_signal": "public void play(IVideoInfo info)", "code": "{\n    mUri = info.getUri();\n    mMedia.play(info);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ParsingVideoView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "// TODO: 3/7/17 usage of impl_err\n", "func_signal": "private String errToStr(int framework_err, int impl_err)", "code": "{\n    String msg = null;\n    if (framework_err == MediaPlayer.MEDIA_ERROR_IO) {\n        msg = \"IO Error\";\n    } else if (framework_err == MediaPlayer.MEDIA_ERROR_MALFORMED) {\n        msg = \"Bitstream unsupported\";\n    } else if (framework_err == MediaPlayer.MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK) {\n        msg = \"Invalid progressive playback\";\n    } else if (framework_err == MediaPlayer.MEDIA_ERROR_TIMED_OUT) {\n        msg = \"Operation time out\";\n    } else if (framework_err == MediaPlayer.MEDIA_ERROR_SERVER_DIED) {\n        msg = \"MediaPlayer died\";\n    } else if (framework_err == MediaPlayer.MEDIA_ERROR_UNSUPPORTED) {\n        msg = \"File spec is not supported in the media framework\";\n    } else if (framework_err == MediaPlayer.MEDIA_ERROR_UNKNOWN) {\n        msg = \"Unknown error\";\n    }\n    return msg;\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\media\\ParsingPlayerProxy.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * Play remote video according to url.\n *\n * @param url url specified the video.\n */\n", "func_signal": "public void play(String url)", "code": "{\n    mUri = url;\n    mMedia.play(url);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ParsingVideoView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "// turn black when resume to this activity\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n    super.onResume();\n    mVideoView.onResume();\n}", "path": "sample\\src\\main\\java\\com\\hustunique\\sample\\MainActivity.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * onPause should be called in {@link Activity#onPause()}\n */\n", "func_signal": "public void onPause()", "code": "{\n    LogUtil.d(TAG, \"onPause\");\n    onBufferingEnd();\n    if (mTargetFullScreen) {\n        mTargetFullScreen = false;\n        return;\n    }\n    if (mTargetTinyScreen)\n        return;\n\n    mMedia.onPause();\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ParsingVideoView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * onDestroy should be called in {@link Activity#onDestroy()}\n */\n", "func_signal": "public void onDestroy()", "code": "{\n    LogUtil.d(TAG, \"onDestroy\");\n    if (mFullscreen || Settings.System.getInt(getContext().getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0) == 1)\n        return;\n    mMedia.onDestroy(mUri);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ParsingVideoView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * replace {@link TextureRenderView} on this {@link ParsingVideoView}\n */\n", "func_signal": "private void replaceRenderView()", "code": "{\n    ViewGroup vp = (ViewGroup) getChildAt(0);\n    ViewGroup.LayoutParams lp = mRenderView.getLayoutParams();\n    mRenderView = new TextureRenderView(mContext.get());\n    mRenderView.setOnVideoChangeListener(this);\n    vp.addView(mRenderView, lp);\n    RelativeLayout.LayoutParams controllerLp = new RelativeLayout.LayoutParams(mControllerView.getWidth(), mControllerView.getHeight());\n    controllerLp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);\n    controllerLp.addRule(RelativeLayout.ALIGN_PARENT_LEFT);\n    controllerLp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);\n    mControllerView.setLayoutParams(controllerLp);\n    vp.removeView(mControllerView);\n    vp.addView(mControllerView, controllerLp);\n    mMedia.configureRenderView(mRenderView);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ParsingVideoView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "// Check error if response return error data\n", "func_signal": "private void checkError(JsonObject data)", "code": "{\n    if (data.has(\"error\")) {\n        LogUtil.e(TAG, \"extract error: \" + data.toString());\n        JsonObject jsonObject = data.getAsJsonObject(\"error\");\n        String errorMsg = jsonObject.get(\"note\").getAsString();\n        // TODO: 1/25/17 Try to avoid hard-coding\n        if (errorMsg.contains(\"\u8be5\u89c6\u9891\u5df2\u7ecf\u52a0\u5bc6\")) {\n            throw new ExtractException(\"Youku said: Sorry, this video is private\");\n        } else if (errorMsg.contains(\"\u62b1\u6b49,\u8be5\u89c6\u9891\u4ec5\u9650\u4e2d\u56fd\u5927\u9646\u5730\u533a\u64ad\u653e,\u8bf7\u60a8\u89c2\u770b\u5176\u4ed6\u89c6\u9891!\")) {\n            throw new ExtractException(\"Youku said: Sorry, this video is available in China only\");\n        } else {\n            throw new ExtractException(\"Youku server reported error \" + jsonObject.get(\"error\").getAsString());\n        }\n    }\n\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\parser\\extractor\\YoukuExtractor.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * Release current used player\n */\n", "func_signal": "private void releasePlayer()", "code": "{\n    if (mPlayer != null) {\n        mPlayer.reset();\n        mPlayer.release();\n        mPlayer = null;\n        mCurrentState = STATE_IDLE;\n        AudioManager am = (AudioManager) mContextRef.get().getApplicationContext().getSystemService(Context.AUDIO_SERVICE);\n        am.abandonAudioFocus(null);\n    }\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\media\\ParsingPlayerProxy.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "//--------------------\n// Layout & Measure\n//--------------------\n", "func_signal": "@Override\npublic void setVideoSize(int videoWidth, int videoHeight)", "code": "{\n    if (videoWidth > 0 && videoHeight > 0) {\n        mMeasureHelper.setVideoSize(videoWidth, videoHeight);\n        requestLayout();\n    }\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\TextureRenderView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "// for override in inheritance\n", "func_signal": "protected void initView()", "code": "{\n    mPauseButton = (ImageButton) findViewById(R.id.pause);\n    mProgress = (SeekBar) findViewById(R.id.mediacontroller_progress);\n    mEndTime = (TextView) findViewById(R.id.time);\n    mCurrentTime = (TextView) findViewById(R.id.time_current);\n    mFullscreenButton = (ImageButton) findViewById(R.id.fullscreen);\n    mPauseButton.requestFocus();\n    mPauseButton.setOnClickListener(mPauseListener);\n    mProgress.setOnSeekBarChangeListener(mSeekListener);\n    mProgress.setMax(1000);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ControllerView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "// Though it is not recommended in EJ\n", "func_signal": "@Override\nprotected void finalize() throws Throwable", "code": "{\n    super.finalize();\n    IjkMediaPlayer.native_profileEnd();\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\media\\ParsingPlayer.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "//--------------------\n// Accessibility\n//--------------------\n", "func_signal": "@Override\npublic void onInitializeAccessibilityEvent(AccessibilityEvent event)", "code": "{\n    super.onInitializeAccessibilityEvent(event);\n    event.setClassName(TextureRenderView.class.getName());\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\TextureRenderView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * Change video quality in {@link Quality}\n *\n * @param quality the quality, specified in {@link Quality}\n * @param bitmap the bitmap you want to render on view\n */\n", "func_signal": "public void setQuality(@Quality int quality, Bitmap bitmap)", "code": "{\n    mBitmap = bitmap;\n    mCurrentPlayerProxy.setQuality(quality);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\media\\ParsingMediaManager.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * Write a ffconcat config file\n *\n * @param fileName config fileName\n * @param content  the content of config\n * @param callback the loading callback\n */\n", "func_signal": "public void write(String fileName, String content, LoadingCallback<String> callback)", "code": "{\n    LogUtil.i(TAG, \"set temp file content: \\n\" + content);\n    Callable<String> task = createWriteTask(fileName, content, callback);\n    mFileService.submit(task);\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\io\\ParsingFileManager.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "// this may not be testable because it generates string randomly.\n", "func_signal": "private String getYsuid()", "code": "{\n    StringBuilder sb = new StringBuilder();\n    int time = (int) (new Date().getTime() / 1000);\n    sb.append(time);\n    Random random = new Random();\n    for (int i = 0; i < 3; i++) {\n        int offset = random.nextInt(letterTable.length);\n        char c = letterTable[offset];\n        sb.append(c);\n    }\n    return sb.toString();\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\parser\\extractor\\YoukuExtractor.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * change quality but you should ensure you have playing the url before,\n * because we use {@link IVideoInfo} loaded.\n *\n * @param q\n */\n", "func_signal": "public void setQuality(int q)", "code": "{\n    LogUtil.d(TAG, \"setQuality:\" + q);\n    // if q = current quality,nothing need be changed\n    if (mMedia.getQuality() != q) {\n        Bitmap bitmap = mRenderView.getBitmap();\n        replaceRenderView();\n        onTogglePlayingState();\n        mMedia.setQuality(q, bitmap);\n    }\n}", "path": "parsingplayer\\src\\main\\java\\com\\hustunique\\parsingplayer\\player\\view\\ParsingVideoView.java", "repo_name": "TedaLIEz/ParsingPlayer", "stars": 357, "license": "lgpl-2.1", "language": "java", "size": 836}
{"docstring": "/**\n * parse create procedure parameters\n * @param parameters\n */\n", "func_signal": "private void parserParameters(List<MySqlParameter> parameters)", "code": "{\n\tfor (;;) {\n\t\tMySqlParameter parameter = new MySqlParameter();\n\n\t\tif (lexer.token() == Token.CURSOR) {\n\t\t\tlexer.nextToken();\n\n\t\t\tparameter.setName(this.exprParser.name());\n\n\t\t\taccept(Token.IS);\n\t\t\tSQLSelect select = this.createSQLSelectParser().select();\n\n\t\t\tSQLDataTypeImpl dataType = new SQLDataTypeImpl();\n\t\t\tdataType.setName(\"CURSOR\");\n\t\t\tparameter.setDataType(dataType);\n\n\t\t\tparameter.setDefaultValue(new SQLQueryExpr(select));\n\t\t\t\n\t\t} else if (lexer.token() == Token.IN || lexer.token() == Token.OUT || lexer.token() == Token.INOUT) {\n\t\t\t\n\t\t\tif(lexer.token()==Token.IN)\n\t\t\t{\n\t\t\t\tparameter.setParamType(ParameterType.IN);\n\t\t\t}\n\t\t\telse if(lexer.token()==Token.OUT)\n\t\t\t{\n\t\t\t\tparameter.setParamType(ParameterType.OUT);\n\t\t\t}\n\t\t\telse if(lexer.token()==Token.INOUT)\n\t\t\t{\n\t\t\t\tparameter.setParamType(ParameterType.INOUT);\n\t\t\t}\n\t\t\tlexer.nextToken();\n\n\t\t\tparameter.setName(this.exprParser.name());\n\n\t\t\tparameter.setDataType(this.exprParser.parseDataType());\n\t\t} else {\n\t\t\tparameter.setParamType(ParameterType.DEFAULT);//default parameter type is in\n\t\t\tparameter.setName(this.exprParser.name());\n\t\t\tparameter.setDataType(this.exprParser.parseDataType());\n\n\t\t\tif (lexer.token() == Token.COLONEQ) {\n\t\t\t\tlexer.nextToken();\n\t\t\t\tparameter.setDefaultValue(this.exprParser.expr());\n\t\t\t}\n\t\t}\n\n\t\tparameters.add(parameter);\n\t\tif (lexer.token() == Token.COMMA || lexer.token() == Token.SEMI) {\n\t\t\tlexer.nextToken();\n\t\t}\n\n\t\tif (lexer.token() != Token.BEGIN && lexer.token() != Token.RPAREN) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse create procedure statement\n */\n", "func_signal": "public MySqlCreateProcedureStatement parseCreateProcedure()", "code": "{\n\t/**\n\t * CREATE OR REPALCE PROCEDURE SP_NAME(parameter_list) BEGIN block_statement END\n\t */\n\tMySqlCreateProcedureStatement stmt = new MySqlCreateProcedureStatement();\n\n\taccept(Token.CREATE);\n\tif (lexer.token() == Token.OR) {\n\t\tlexer.nextToken();\n\t\taccept(Token.REPLACE);\n\t\tstmt.setOrReplace(true);\n\t}\n\n\taccept(Token.PROCEDURE);\n\n\tstmt.setName(this.exprParser.name());\n\n\tif (lexer.token() == Token.LPAREN) {// match \"(\"\n\t\tlexer.nextToken();\n\t\tparserParameters(stmt.getParameters());\n\t\taccept(Token.RPAREN);// match \")\"\n\t}\n\tMySqlBlockStatement block = this.parseBlock();\n\n\tstmt.setBlock(block);\n\n\treturn stmt;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse cursor declare statement\n * @return\n */\n", "func_signal": "public MySqlCursorDeclareStatement parseCursorDeclare()", "code": "{\n\tMySqlCursorDeclareStatement stmt=new MySqlCursorDeclareStatement();\n\taccept(Token.DECLARE);\n\t\n\tstmt.setCursorName(exprParser.name().getSimpleName());\n\t\n\taccept(Token.CURSOR);\n\t\n\taccept(Token.FOR);\n\t\n\tstmt.setSelect(parseSelect());\n\t\n\taccept(Token.SEMI);\n\t\n\treturn stmt;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * \u521b\u5efaSequenceId\n * \n * @author gaoxianglong\n * \n * @param id\n *            \u552f\u4e00\u5e8f\u5217\n * \n * @param idcNum\n *            IDC\u673a\u623f\u7f16\u7801, \u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684idc\u673a\u623f,3\u4f4d\u6570\u5b57\u957f\u5ea6\n * \n * @param type\n *            \u4e1a\u52a1\u7c7b\u522b,6\u4f4d\u6570\u5b57\u957f\u5ea6\n * \n * @return long \u8fd4\u56de\u751f\u6210\u768419\u4f4d\u6570\u5b57\u957f\u5ea6\u7684sequenceId\n */\n", "func_signal": "private long createSequenceId(Long id, int idcNum, int type)", "code": "{\n\tif (null != str)\n\t\tstr.delete(0, str.length());\n\tfinal int length = 10 - String.valueOf(id).length();\n\t/* \u552f\u4e00\u5e8f\u5217\u9ad8\u4f4d\u88650 */\n\tfor (int i = 0; i < length; i++)\n\t\tstr.append(\"0\");\n\tstr.append(id);\n\tstr.insert(0, idcNum);\n\tstr.insert(3, type);\n\treturn Long.parseLong(str.toString());\n}", "path": "src\\main\\java\\com\\sharksharding\\util\\sequence\\zookeeper\\CreateZookeeperSequenceId.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * \u901a\u8fc7\u5b9a\u4e49\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u6301\u4e45\u5c42\u65b9\u6cd5\u540d\u79f0\u83b7\u53d6\u6307\u5b9a\u7684sql\u4fe1\u606f\n * \n * @author gaoxianglong\n * \n * @param key\n *            sql\u914d\u7f6e\u6587\u4ef6\u7684\u68c0\u7d22\u6761\u4ef6\n * \n * @param params\n *            \u53c2\u6570\u96c6\u5408\n * \n * @return String \u6307\u5b9a\u7684sql\u8bed\u53e5\n */\n", "func_signal": "public String getSql(String key, Map<String, ?> params)", "code": "{\n\tfinal String sql = RenderSQLTemplate.render(sqlMap.get(key), params);\n\t/* \u9a8c\u8bc1SQL\u8bed\u53e5WHERE\u6761\u4ef6\u540e\u9762\u662f\u5426\u5e26\u53c2\u6570 */\n\treturn SQLIsWhereColumn.isColumn(sql) ? sql : null;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\SQLTemplate.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse assign statement\n */\n", "func_signal": "public SQLSetStatement parseAssign()", "code": "{\n\taccept(Token.SET);\n\tSQLSetStatement stmt = new SQLSetStatement(getDbType());\n\tparseAssignItems(stmt.getItems(), stmt);\n\treturn stmt;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse case statement\n * @return MySqlCaseStatement\n */\n", "func_signal": "public MySqlCaseStatement parseCase()", "code": "{\n\tMySqlCaseStatement stmt=new MySqlCaseStatement();\n\taccept(Token.CASE);\n\t\n\tif(lexer.token()==Token.WHEN)// grammar 1\n\t{\n\t\twhile (lexer.token() == Token.WHEN) {\n\t\t\t\n\t\t\tMySqlWhenStatement when=new MySqlWhenStatement();\n\t\t\t//when expr\n\t\t\twhen.setCondition(exprParser.expr());\n\t\t\t\n\t\t\taccept(Token.THEN);\n\t\t\t\n\t\t\t//when block\n\t\t\tparseProcedureStatementList(when.getStatements());\n\t\t\t\n\t\t\tstmt.addWhenStatement(when);\n\t\t}\n\t\tif(lexer.token()==Token.ELSE)\n\t\t{\n\t\t\t//parse else block\n\t\t\tMySqlElseStatement elseStmt=new MySqlElseStatement();\n\t\t\tparseProcedureStatementList(elseStmt.getStatements());\n\t\t\tstmt.setElseItem(elseStmt);\n\t\t}\n\t}\n\telse// grammar 2\n\t{\n\t\t//case expr\n\t\tstmt.setCondition(exprParser.expr());\n\t\t\n\t\twhile (lexer.token() == Token.WHEN) {\n\t\t\taccept(Token.WHEN);\n\t\t\tMySqlWhenStatement when=new MySqlWhenStatement();\n\t\t\t//when expr\n\t\t\twhen.setCondition(exprParser.expr());\n\t\t\t\n\t\t\taccept(Token.THEN);\n\t\t\t\n\t\t\t//when block\n\t\t\tparseProcedureStatementList(when.getStatements());\n\t\t\t\n\t\t\tstmt.addWhenStatement(when);\n\t\t}\n\t\tif(lexer.token()==Token.ELSE)\n\t\t{\n\t\t\taccept(Token.ELSE);\n\t\t\t//else block\n\t\t\tMySqlElseStatement elseStmt=new MySqlElseStatement();\n\t\t\tparseProcedureStatementList(elseStmt.getStatements());\n\t\t\tstmt.setElseItem(elseStmt);\n\t\t}\n\t}\n\taccept(Token.END);\n\taccept(Token.CASE);\n\taccept(Token.SEMI);\n\treturn stmt;\n\t\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse while statement\n * @return MySqlWhileStatement\n */\n", "func_signal": "public MySqlWhileStatement parseWhile()", "code": "{\n\taccept(Token.WHILE);\n\tMySqlWhileStatement stmt = new MySqlWhileStatement();\n\n\tstmt.setCondition(this.exprParser.expr());\n\n\taccept(Token.DO);\n\n\tthis.parseProcedureStatementList(stmt.getStatements());\n\n\taccept(Token.END);\n\n\taccept(Token.WHILE);\n\t\n\taccept(Token.SEMI);\n\n\treturn stmt;\n\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse if statement\n * @return MySqlIfStatement\n */\n", "func_signal": "public MySqlIfStatement parseIf()", "code": "{\n\taccept(Token.IF);\n\n\tMySqlIfStatement stmt = new MySqlIfStatement();\n\n\tstmt.setCondition(this.exprParser.expr());\n\n\taccept(Token.THEN);\n\n\tthis.parseProcedureStatementList(stmt.getStatements());\n\n\twhile (lexer.token() == Token.ELSE) {\n\t\tlexer.nextToken();\n\n\t\tif (lexer.token() == Token.IF) {\n\t\t\tlexer.nextToken();\n\n\t\t\tMySqlElseIfStatement elseIf = new MySqlElseIfStatement();\n\n\t\t\telseIf.setCondition(this.exprParser.expr());\n\n\t\t\taccept(Token.THEN);\n\t\t\tthis.parseProcedureStatementList(elseIf.getStatements());\n\n\t\t\tstmt.getElseIfList().add(elseIf);\n\t\t} else {\n\t\t\tMySqlElseStatement elseItem = new MySqlElseStatement();\n\t\t\tthis.parseProcedureStatementList(elseItem.getStatements());\n\t\t\tstmt.setElseItem(elseItem);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\taccept(Token.END);\n\taccept(Token.IF);\n\taccept(Token.SEMI);\n\n\treturn stmt;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "// ////////////////////\n", "func_signal": "public boolean visit(SQLBetweenExpr x)", "code": "{\n    x.getTestExpr().accept(this);\n\n    if (x.isNot()) {\n        print(\" NOT BETWEEN \");\n    } else {\n        print(\" BETWEEN \");\n    }\n\n    x.getBeginExpr().accept(this);\n    print(\" AND \");\n    x.getEndExpr().accept(this);\n\n    return false;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\visitor\\SQLASTOutputVisitor.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * \u4f7f\u7528dom4j\u89e3\u6790xml\u6587\u4ef6\n * \n * @author gaoxianglong\n * \n * @param in\n *            \u5b57\u8282\u8f93\u5165\u6d41\n * \n * @exception XmlResolveException\n * \n * @return void\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate void resolveXml(InputStream in)", "code": "{\n\tif (null == in)\n\t\treturn;\n\tDocument document = null;\n\tSAXReader saxReader = new SAXReader();\n\ttry {\n\t\tdocument = saxReader.read(in);\n\t} catch (DocumentException e) {\n\t\tthrow new XmlResolveException(\"xml resolve fail\");\n\t}\n\tElement root = document.getRootElement();\n\tList<Element> elements = root.selectNodes(xpathExpression);\n\tif (!elements.isEmpty()) {\n\t\tfor (Element element : elements) {\n\t\t\tfinal String sql = element.attribute(name).getValue();\n\t\t\tsqlMap.put(sql, element.getText());\n\t\t}\n\t} else {\n\t\tthrow new XmlResolveException(\"element <sql/> not found\");\n\t}\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\SQLTemplate.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * \u901a\u8fc7\u53cd\u5411\u7d22\u5f15\u8868\u68c0\u7d22\u51fa\u4e3b\u8868\u7684\u8def\u7531\u6761\u4ef6\n * \n * @author gaoxianglong\n */\n", "func_signal": "public void testQuery()", "code": "{\n\ttry {\n\t\tMap<String, Object> params = new HashMap<String, Object>();\n\t\tparams.put(\"email\", email);\n\t\tparams.put(\"email_hash\", Math.abs(email.hashCode()));\n\t\tList<EmailInfo> emails = emailDao.getEmail(params);\n\t\tif (!emails.isEmpty()) {\n\t\t\tEmailInfo email = emails.get(0);\n\t\t\tlong uid = email.getUid();\n\t\t\tSystem.out.println(\"uid-->\" + uid);\n\t\t\tparams = new HashMap<String, Object>();\n\t\t\tparams.put(\"uid\", sequenceid);\n\t\t\tList<UserInfo> users = userDao.getUserInfo(params);\n\t\t\tif (!users.isEmpty()) {\n\t\t\t\tUserInfo user = users.get(0);\n\t\t\t\tSystem.out.println(\"userName-->\" + user.getUserName());\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"query data fail\", e);\n\t}\n}", "path": "src\\test\\java\\com\\test\\sharksharding\\use\\Main.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse select into\n */\n", "func_signal": "public MySqlSelectIntoStatement parseSelectInto()", "code": "{\n\tMySqlSelectIntoParser parse=new MySqlSelectIntoParser(this.exprParser);\t\t\n\treturn parse.parseSelectInto();\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * \u57fa\u4e8eSpring Aop\u7684\u65b9\u5f0f\u5bf9org.springframework.jdbc.core.JdbcTemplate\u7c7b\u4e0b\u6240\u6709\u7684update()\n * \u65b9\u6cd5\u8fdb\u884c\u62e6\u622a\n * \n * @author gaoxianglong\n * \n * @param proceedingJoinPoint\n *            \u59d4\u6258\u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\n * \n * @exception Throwable\n * \n * @return Object\n */\n", "func_signal": "@Around(\"execution(* org.springframework.jdbc.core.JdbcTemplate.update*(..))\")\npublic Object interceptUpdateSQL(ProceedingJoinPoint proceedingJoinPoint)", "code": "{\n\tObject result = null;\n\t/* \u6267\u884c\u8def\u7531\u68c0\u6d4b */\n\tif (isRoute(proceedingJoinPoint)) {\n\t\tresult = sqlExecute.execute(proceedingJoinPoint, true);\n\t} else {\n\t\ttry {\n\t\t\tlogger.debug(\"no need for routing\");\n\t\t\tresult = proceedingJoinPoint.proceed(proceedingJoinPoint.getArgs());\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn result;\n}", "path": "src\\main\\java\\com\\sharksharding\\core\\shard\\SQLExecuterInterceptor.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * \u751f\u6210kratos\u7684\u6838\u5fc3\u4fe1\u606f\u914d\u7f6e\u6587\u4ef6\n * \n * @author gaoxianglong\n * \n * @exception Exception\n * \n * @return boolean \u751f\u6210\u7ed3\u679c\n */\n", "func_signal": "public boolean createCoreXml(File savePath)", "code": "{\n\tboolean result = false;\n\ttry {\n\t\t/* \u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u7684\u6839\u76ee\u5f55<beans/>\u6807\u7b7e */\n\t\tBeans beans = new Beans();\n\t\t/* \u521b\u5efa<bean/>\u5b50\u6807\u7b7e */\n\t\tBean bean0 = new Bean();\n\t\tbean0.setId(\"jdbcTemplate\");\n\t\tbean0.setClass_(\"org.springframework.jdbc.core.JdbcTemplate\");\n\t\t/* \u521b\u5efa<property/>\u5b50\u6807\u7b7e */\n\t\tProperty dataSource = new Property();\n\t\tdataSource.setName(\"dataSource\");\n\t\tdataSource.setRef(\"dataSourceGroup\");\n\t\tList<Property> propertys = new ArrayList<Property>();\n\t\tpropertys.add(dataSource);\n\t\tbean0.setProperty(propertys);\n\n\t\tBean bean1 = new Bean();\n\t\tbean1.setId(\"shardRule\");\n\t\tbean1.setClass_(\"com.sharksharding.core.shard.ShardRule\");\n\t\tbean1.setInit_method(\"init\");\n\t\t/* \u521b\u5efa<property/>\u5b50\u6807\u7b7e */\n\t\tProperty isShard = new Property();\n\t\tisShard.setName(\"isShard\");\n\t\tisShard.setValue(\"true\");\n\t\tProperty wr_index = new Property();\n\t\twr_index.setName(\"wr_index\");\n\t\twr_index.setValue(this.getWr_index());\n\t\tProperty shardMode = new Property();\n\t\tshardMode.setName(\"shardMode\");\n\t\tshardMode.setValue(this.isShardMode());\n\t\tProperty consistent = new Property();\n\t\tconsistent.setName(\"consistent\");\n\t\tconsistent.setValue(this.getConsistent());\n\t\tProperty dbRuleArray = new Property();\n\t\tdbRuleArray.setName(\"dbRuleArray\");\n\t\tdbRuleArray.setValue(this.getDbRuleArray());\n\t\tProperty tbRuleArray = new Property();\n\t\ttbRuleArray.setName(\"tbRuleArray\");\n\t\ttbRuleArray.setValue(this.getTbRuleArray());\n\t\tProperty tbSuffix = new Property();\n\t\ttbSuffix.setName(\"tbSuffix\");\n\t\ttbSuffix.setValue(this.getTbSuffix());\n\t\tpropertys = new ArrayList<Property>();\n\t\tpropertys.add(isShard);\n\t\tpropertys.add(wr_index);\n\t\tpropertys.add(shardMode);\n\t\tpropertys.add(consistent);\n\t\tpropertys.add(dbRuleArray);\n\t\tpropertys.add(tbRuleArray);\n\t\tpropertys.add(tbSuffix);\n\t\tbean1.setProperty(propertys);\n\t\t/* \u521b\u5efa<constructor_arg/>\u5b50\u6807\u7b7e */\n\t\t// ConstructorArg constructor_arg = new ConstructorArg();\n\t\t// constructor_arg.setName(\"isShard\");\n\t\t// constructor_arg.setValue(this.isShard());\n\t\t// bean1.setConstructor_arg(constructor_arg);\n\t\t/* \u521b\u5efa<bean/>\u5b50\u6807\u7b7e */\n\t\tBean bean2 = new Bean();\n\t\tbean2.setId(\"dataSourceGroup\");\n\t\tbean2.setClass_(\"com.sharksharding.core.config.SharkDatasourceGroup\");\n\t\t/* \u521b\u5efa<property/>\u5b50\u6807\u7b7e */\n\t\tProperty targetDataSources = new Property();\n\t\ttargetDataSources.setName(\"targetDataSources\");\n\t\t/* \u521b\u5efa<map/>\u5b50\u6807\u7b7e */\n\t\tMap map = new Map();\n\t\tmap.setKey_type(\"java.lang.Integer\");\n\t\tList<Entry> entrys = new ArrayList<Entry>();\n\t\tfor (int i = 0; i < Integer.parseInt(dbSize); i++) {\n\t\t\t/* \u521b\u5efa<entry/>\u5b50\u6807\u7b7e */\n\t\t\tEntry entry = new Entry();\n\t\t\tentry.setKey(String.valueOf(i));\n\t\t\tentry.setValue_ref(\"dataSource\" + (i + 1));\n\t\t\tentrys.add(entry);\n\t\t}\n\t\tmap.setEntry(entrys);\n\t\ttargetDataSources.setMap(map);\n\t\tpropertys = new ArrayList<Property>();\n\t\tpropertys.add(targetDataSources);\n\t\tbean2.setProperty(propertys);\n\t\t/* \u521b\u5efa<bean/>\u5b50\u6807\u7b7e */\n\t\tBean bean3 = new Bean();\n\t\tbean3.setId(\"sqlTemplate\");\n\t\tbean3.setClass_(\"com.sharksharding.sql.SQLTemplate\");\n\t\t/* \u521b\u5efa<constructor_arg/>\u5b50\u6807\u7b7e */\n\t\tConstructorArg constructor_arg1 = new ConstructorArg();\n\t\tconstructor_arg1.setName(\"path\");\n\t\tconstructor_arg1.setValue(this.getSqlPath());\n\t\tbean3.setConstructor_arg(constructor_arg1);\n\t\tList<Bean> beanList = new ArrayList<Bean>();\n\t\tbeanList.add(bean0);\n\t\tbeanList.add(bean1);\n\t\tbeanList.add(bean2);\n\t\tbeanList.add(bean3);\n\t\tbeans.setBean(beanList);\n\t\tif (this.getIsShow())\n\t\t\tmarshaller.marshal(beans, System.out);\n\t\tmarshaller.marshal(beans, savePath);\n\t\tresult = true;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "path": "src\\main\\java\\com\\sharksharding\\util\\xml\\CreateCoreXml.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse loop statement with label\n */\n", "func_signal": "public MySqlBlockStatement parseBlock(String label)", "code": "{\n        MySqlBlockStatement block = new MySqlBlockStatement();\n        block.setLabelName(label);\n        accept(Token.BEGIN);\n        parseProcedureStatementList(block.getStatementList());\n        accept(Token.END);\n        acceptIdentifier(label);\n        return block;\n    }", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse repeat statement\n * @return\n */\n", "func_signal": "public MySqlRepeatStatement parseRepeat()", "code": "{\n\tMySqlRepeatStatement repeatStmt=new MySqlRepeatStatement(); \n\taccept(Token.REPEAT);\n\tparseProcedureStatementList(repeatStmt.getStatements());\n\taccept(Token.UNTIL);\n\trepeatStmt.setCondition(exprParser.expr());\n\taccept(Token.END);\n\taccept(Token.REPEAT);\n\taccept(Token.SEMI);\n\treturn repeatStmt;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse iterate statement\n */\n", "func_signal": "public MySqlIterateStatement parseIterate()", "code": "{\n\taccept(Token.ITERATE);\n\tMySqlIterateStatement iterateStmt=new MySqlIterateStatement();\n\titerateStmt.setLabelName(exprParser.name().getSimpleName());\n\taccept(Token.SEMI);\n\treturn iterateStmt;\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * \u63d2\u5165\u53cd\u5411\u7d22\u5f15\u8868\u548c\u4e3b\u8868\n * \n * @author gaoxianglong\n */\n", "func_signal": "public @Test void testInsert()", "code": "{\n\ttry {\n\t\tMap<String, Object> params = new HashMap<String, Object>();\n\t\tparams.put(\"email\", email);\n\t\tparams.put(\"email_hash\", Math.abs(email.hashCode()));\n\t\tparams.put(\"uid\", sequenceid);\n\t\temailDao.setEmail(params);\n\t\tlogger.info(\"insert table:email_test success\");\n\t\tparams = new HashMap<String, Object>();\n\t\tparams.put(\"uid\", sequenceid);\n\t\tparams.put(\"userName\", \"gxl\");\n\t\tuserDao.setUserInfo(params);\n\t\tlogger.info(\"insert table:userinfo_test success\");\n\t\ttestQuery();\n\t\t/* \u7b49\u5f85\u53d1\u90ae\u4ef6 */\n\t\tThread.sleep(10000);\n\t} catch (Exception e) {\n\t\tlogger.error(\"insert data fail\", e);\n\t}\n}", "path": "src\\test\\java\\com\\test\\sharksharding\\use\\Main.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * parse while statement with label\n * @return MySqlWhileStatement\n */\n", "func_signal": "public MySqlWhileStatement parseWhile(String label)", "code": "{\n\taccept(Token.WHILE);\n\t\n\tMySqlWhileStatement stmt = new MySqlWhileStatement();\n\n\tstmt.setLabelName(label);\n\t\n\tstmt.setCondition(this.exprParser.expr());\n\n\taccept(Token.DO);\n\n\tthis.parseProcedureStatementList(stmt.getStatements());\n\n\taccept(Token.END);\n\n\taccept(Token.WHILE);\n\t\n\tacceptIdentifier(label);\n\t\n\taccept(Token.SEMI);\n\n\treturn stmt;\n\n}", "path": "src\\main\\java\\com\\sharksharding\\sql\\dialect\\mysql\\parser\\MySqlStatementParser.java", "repo_name": "gaoxianglong/shark", "stars": 499, "license": "apache-2.0", "language": "java", "size": 17775}
{"docstring": "/**\n * whether you can fling away your Magnet towards the bottom of the screen\n * @param shoudlFling\n * @return\n */\n", "func_signal": "public Builder setShouldFlingAway(boolean shoudlFling)", "code": "{\n    magnet.shouldFlingAway = shoudlFling;\n    return this;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * whether your magnet sticks to the edge of your screen when you release it\n * @param shouldStick\n * @return\n */\n", "func_signal": "public Builder setShouldStickToWall(boolean shouldStick)", "code": "{\n    magnet.shouldStickToWall = shouldStick;\n    return this;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n *\n * @param shouldBeResponsive\n * @return\n */\n", "func_signal": "public Builder setRemoveIconShouldBeResponsive(boolean shouldBeResponsive)", "code": "{\n    magnet.mRemoveView.shouldBeResponsive = shouldBeResponsive;\n    return this;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "// Once complete, see if ImageView is still around and set bitmap.\n", "func_signal": "@Override\nprotected void onPostExecute(Bitmap bitmap)", "code": "{\n    if (bitmap != null) {\n    \tmImageView.setImageBitmap(bitmap);\n    }\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\demo\\wrong\\AsyncTaskOutOfMemoryActivity.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * Set the position of the Magnet.\n * Note: must be called **after** {@link #show()} is called.\n * This will call {@link IconCallback#onMove(float, float)} on your listener\n * @param x the x position\n * @param y the y position\n * @param animate whether the Magnet should animate to that position. If false the Magnet\n *                will simply just set its coordinates to the given position\n */\n", "func_signal": "public void setPosition(int x, int y, boolean animate)", "code": "{\n    if(animate) {\n        mAnimator.start(x, y);\n    } else {\n        mLayoutParams.x = x;\n        mLayoutParams.y = y;\n        mWindowManager.updateViewLayout(mIconView, mLayoutParams);\n        if (mListener != null) {\n            mListener.onMove(mLayoutParams.x, mLayoutParams.y);\n        }\n    }\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * Show the Magnet i.e. add it to the Window\n */\n", "func_signal": "public void show()", "code": "{\n    addToWindow(mIconView);\n    updateSize();\n    if(mInitialX != -1 || mInitialY != -1) {\n        setPosition(mInitialX, mInitialY, true);\n    } else {\n        goToWall();\n    }\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * log.v\n */\n", "func_signal": "public void v(String msg)", "code": "{\n\tif (debug) {\n\t\tString message = createMessage(msg);\n\t\tLog.v(tag, message);\n\t}\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\Logger.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * log.d\n */\n", "func_signal": "public void w(String msg)", "code": "{\n\tif (debug) {\n\t\tString message = createMessage(msg);\n\t\tLog.w(tag, message);\n\t}\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\Logger.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * Destroys the magnet - removes the view from the WindowManager and calls\n * {@link IconCallback#onIconDestroyed()}\n */\n", "func_signal": "public void destroy()", "code": "{\n    mWindowManager.removeView(mIconView);\n    if (mRemoveView != null) {\n        mRemoveView.destroy();\n    }\n    if (mListener != null) {\n        mListener.onIconDestroyed();\n    }\n    mContext = null;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * getTotalPss\uff0c5.0+\u4f7f\u7528\u5f00\u6e90\u7684android-processes\u89e3\u51b3\u65b9\u6848\uff0c5.0\u4ee5\u4e0b\u4f7f\u7528\u7cfb\u7edfapi\n *\n * @param processName\n * @return\n */\n", "func_signal": "public static long getTotalPss(String processName)", "code": "{\n\n\tActivityManager activityMgr = (ActivityManager) App.getAppContext().getSystemService(Context.ACTIVITY_SERVICE);\n\n\tif (Build.VERSION.SDK_INT >= 21) {\n\t\tList<AndroidAppProcess> list = ProcessManager.getRunningAppProcesses();\n\n\t\tif (list != null) {\n\t\t\tfor (AndroidAppProcess processInfo : list) {\n\t\t\t\tif (processInfo.name.equals(processName)) {\n\t\t\t\t\tint pid = processInfo.pid;\n\t\t\t\t\tMemoryInfo[] memoryInfos = activityMgr.getProcessMemoryInfo(new int[]{pid});\n\n\t\t\t\t\tMemoryInfo memoryInfo = memoryInfos[0];\n\t\t\t\t\tint totalPss = memoryInfo.getTotalPss();\n\n\t\t\t\t\treturn totalPss;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tList<RunningAppProcessInfo> list = activityMgr.getRunningAppProcesses();\n\t\tif (list != null) {\n\t\t\tfor (RunningAppProcessInfo processInfo : list) {\n\n\t\t\t\tif (processInfo.processName.equals(processName)) {\n\t\t\t\t\tint pid = processInfo.pid;\n\t\t\t\t\tMemoryInfo[] memoryInfos = activityMgr.getProcessMemoryInfo(new int[] { pid });\n\n\t\t\t\t\tMemoryInfo memoryInfo = memoryInfos[0];\n\t\t\t\t\tint totalPss = memoryInfo.getTotalPss();\n\n\t\t\t\t\treturn totalPss;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn -1;\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\MemoryUtil.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * \u83b7\u53d6\u53ef\u7528\u5185\u5b58\n * \n */\n", "func_signal": "public static long getAvailableMemory()", "code": "{\n\n\tActivityManager activityManager = (ActivityManager) App.getAppContext()\n\t\t\t.getSystemService(Context.ACTIVITY_SERVICE);\n\n\tActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();\n\tactivityManager.getMemoryInfo(mi);\n\n\treturn mi.availMem;\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\MemoryUtil.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * you can set a custom remove icon shadow or use the default one\n * @param shadow\n * @return\n */\n", "func_signal": "public Builder setRemoveIconShadow(int shadow)", "code": "{\n    magnet.mRemoveView.setShadowBG(shadow);\n    return this;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * log.i\n */\n", "func_signal": "public void i(String msg)", "code": "{\n\tif (debug) {\n\t\tString message = createMessage(msg);\n\t\tLog.i(tag, message);\n\t}\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\Logger.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * Use an xml layout to provide the button view\n * @param iconViewRes the layout id of the icon\n * @return\n */\n", "func_signal": "public Builder setIconView(int iconViewRes)", "code": "{\n    magnet.mIconView = LayoutInflater.from(magnet.mContext).inflate(iconViewRes, null);\n    magnet.mIconView.setOnTouchListener(magnet);\n    return this;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * log.e\n */\n", "func_signal": "public void e(String msg)", "code": "{\n\t// if (debug) {\n\tString message = createMessage(msg);\n\tLog.e(tag, message);\n\t// }\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\Logger.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "// Decode image in background.\n", "func_signal": "@Override\nprotected Bitmap doInBackground(Integer... params)", "code": "{\n    data = params[0];\n    return BitmapUtils.decodeSampledBitmapFromResource(getResources(), data, 100, 100);\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\demo\\wrong\\AsyncTaskOutOfMemoryActivity.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * getTotalPss\uff0c5.0+\u4f7f\u7528\u5f00\u6e90\u7684android-processes\u89e3\u51b3\u65b9\u6848\uff0c5.0\u4ee5\u4e0b\u4f7f\u7528\u7cfb\u7edfapi\n *\n * @param processNameList\n * @return\n */\n", "func_signal": "public static HashMap<String, Long> getTotalPss(ArrayList<String> processNameList)", "code": "{\n\n\tHashMap<String, Long> resultMap = new HashMap<>();\n\tActivityManager activityMgr = (ActivityManager) App.getAppContext().getSystemService(Context.ACTIVITY_SERVICE);\n\n\tif (Build.VERSION.SDK_INT >= 21) {\n\t\tList<AndroidAppProcess> list = ProcessManager.getRunningAppProcesses();\n\n\t\tif (list != null) {\n\t\t\tfor (AndroidAppProcess processInfo : list) {\n\n\t\t\t\tif (processNameList.contains(processInfo.name)) {\n\t\t\t\t\tint pid = processInfo.pid;\n\t\t\t\t\tMemoryInfo[] memoryInfos = activityMgr.getProcessMemoryInfo(new int[]{pid});\n\n\t\t\t\t\tMemoryInfo memoryInfo = memoryInfos[0];\n\t\t\t\t\tint totalPss = memoryInfo.getTotalPss();\n\n\t\t\t\t\tresultMap.put(processInfo.name, new Long(totalPss));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tList<RunningAppProcessInfo> list = activityMgr.getRunningAppProcesses();\n\t\tif (list != null) {\n\t\t\tfor (RunningAppProcessInfo processInfo : list) {\n\n\t\t\t\tif (Constants.PROCESS_NAME_LIST.contains(processInfo.processName)) {\n\t\t\t\t\tint pid = processInfo.pid;\n\t\t\t\t\tMemoryInfo[] memoryInfos = activityMgr.getProcessMemoryInfo(new int[] { pid });\n\n\t\t\t\t\tMemoryInfo memoryInfo = memoryInfos[0];\n\t\t\t\t\tint totalPss = memoryInfo.getTotalPss();\n\n\t\t\t\t\tresultMap.put(processInfo.processName, new Long(totalPss));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn resultMap;\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\MemoryUtil.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * you can set a custom remove icon or use the default one\n * @param removeIconResId\n * @return\n */\n", "func_signal": "public Builder setRemoveIconResId(int removeIconResId)", "code": "{\n    magnet.mRemoveView.setIconResId(removeIconResId);\n    return this;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * Callback for when the icon moves, or when it isis flung away and destroyed\n * @param callback\n * @return\n */\n", "func_signal": "public Builder setIconCallback(IconCallback callback)", "code": "{\n    magnet.mListener = callback;\n    return this;\n}", "path": "magnet\\src\\main\\java\\com\\premnirmal\\Magnet\\Magnet.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * log.d\n */\n", "func_signal": "public void d(String msg)", "code": "{\n\tif (debug) {\n\t\tString message = createMessage(msg);\n\t\tLog.d(tag, message);\n\t}\n}", "path": "app\\src\\main\\java\\com\\cundong\\memory\\util\\Logger.java", "repo_name": "cundong/MemoryMonitor", "stars": 311, "license": "None", "language": "java", "size": 4141}
{"docstring": "/**\n * remove a specific SpringConfig from the registry\n * @param springConfig the of the SpringConfig to remove\n * @return true if the SpringConfig was removed, false if it was not present.\n */\n", "func_signal": "public boolean removeSpringConfig(SpringConfig springConfig)", "code": "{\n  if (springConfig == null) {\n    throw new IllegalArgumentException(\"springConfig is required\");\n  }\n  return mSpringConfigMap.remove(springConfig) != null;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\SpringConfigRegistry.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * add a SpringConfig to the registry\n *\n * @param springConfig SpringConfig to add to the registry\n * @param configName name to give the SpringConfig in the registry\n * @return true if the SpringConfig was added, false if a config with that name is already\n *    present.\n */\n", "func_signal": "public boolean addSpringConfig(SpringConfig springConfig, String configName)", "code": "{\n  if (springConfig == null) {\n    throw new IllegalArgumentException(\"springConfig is required\");\n  }\n  if (configName == null) {\n    throw new IllegalArgumentException(\"configName is required\");\n  }\n  if (mSpringConfigMap.containsKey(springConfig)) {\n    return false;\n  }\n  mSpringConfigMap.put(springConfig, configName);\n  return true;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\SpringConfigRegistry.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * remove a listener\n * @param listenerToRemove to remove\n * @return the spring for chaining\n */\n", "func_signal": "public Spring removeListener(SpringListener listenerToRemove)", "code": "{\n  if (listenerToRemove == null) {\n    throw new IllegalArgumentException(\"listenerToRemove is required\");\n  }\n  mListeners.remove(listenerToRemove);\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * remove all of the listeners\n * @return the spring for chaining\n */\n", "func_signal": "public Spring removeAllListeners()", "code": "{\n  mListeners.clear();\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * constructor for the SpringConfig\n * @param tension tension value for the SpringConfig\n * @param friction friction value for the SpringConfig\n */\n", "func_signal": "public SpringConfig(double tension, double friction)", "code": "{\n  this.tension = tension;\n  this.friction = friction;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\SpringConfig.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * Force the spring to clamp at its end value to avoid overshooting the target value.\n * @param overshootClampingEnabled whether or not to enable overshoot clamping\n * @return the spring for chaining\n */\n", "func_signal": "public Spring setOvershootClampingEnabled(boolean overshootClampingEnabled)", "code": "{\n  mOvershootClampingEnabled = overshootClampingEnabled;\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * A helper to make creating a SpringConfig easier with values mapping to the Origami values.\n * @param qcTension tension as defined in the Quartz Composition\n * @param qcFriction friction as defined in the Quartz Composition\n * @return a SpringConfig that maps to these values\n */\n", "func_signal": "public static SpringConfig fromOrigamiTensionAndFriction(double qcTension, double qcFriction)", "code": "{\n  return new SpringConfig(\n      OrigamiValueConverter.tensionFromOrigamiValue(qcTension),\n      OrigamiValueConverter.frictionFromOrigamiValue(qcFriction)\n  );\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\SpringConfig.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * Sets the speed at which the spring should be considered at rest.\n * @param restSpeedThreshold speed pixels per second\n * @return the spring for chaining\n */\n", "func_signal": "public Spring setRestSpeedThreshold(double restSpeedThreshold)", "code": "{\n  mRestSpeedThreshold = restSpeedThreshold;\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * set the rest value to determine the displacement for the spring\n * @param endValue the endValue for the spring\n * @return the spring for chaining\n */\n", "func_signal": "public Spring setEndValue(double endValue)", "code": "{\n  if (mEndValue == endValue && isAtRest()) {\n    return this;\n  }\n  mStartValue = getCurrentValue();\n  mEndValue = endValue;\n  mSpringSystem.activateSpring(this.getId());\n  for (SpringListener listener : mListeners) {\n    listener.onSpringEndStateChange(this);\n  }\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * Map a value within a given range to another range.\n * @param value the value to map\n * @param fromLow the low end of the range the value is within\n * @param fromHigh the high end of the range the value is within\n * @param toLow the low end of the range to map to\n * @param toHigh the high end of the range to map to\n * @return the mapped value\n */\n", "func_signal": "public static double mapValueFromRangeToRange(\n    double value,\n    double fromLow,\n    double fromHigh,\n    double toLow,\n    double toHigh)", "code": "{\n  double fromRangeSize = fromHigh - fromLow;\n  double toRangeSize = toHigh - toLow;\n  double valueScale = (value - fromLow) / fromRangeSize;\n  return toLow + (valueScale * toRangeSize);\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\SpringUtil.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * Set the displaced value to determine the displacement for the spring from the rest value.\n * This value is retained and used to calculate the displacement ratio.\n * This also updates the start value of the Spring.\n * @param currentValue the new start and current value for the spring\n * @return the spring for chaining\n */\n", "func_signal": "public Spring setCurrentValue(double currentValue)", "code": "{\n  mStartValue = currentValue;\n  mCurrentState.position = currentValue;\n  mSpringSystem.activateSpring(this.getId());\n  for (SpringListener listener : mListeners) {\n    listener.onSpringUpdate(this);\n  }\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * add a listener\n * @param newListener to add\n * @return the spring for chaining\n */\n", "func_signal": "public Spring addListener(SpringListener newListener)", "code": "{\n  if (newListener == null) {\n    throw new IllegalArgumentException(\"newListener is required\");\n  }\n  mListeners.add(newListener);\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * Check if the spring is overshooting beyond its target.\n * @return true if the spring is overshooting its target\n */\n", "func_signal": "public boolean isOvershooting()", "code": "{\n  return (mStartValue < mEndValue && getCurrentValue() > mEndValue) ||\n      (mStartValue > mEndValue && getCurrentValue() < mEndValue);\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * Set the spring to be at rest by making its end value equal to its current value and setting\n * velocity to 0.\n */\n", "func_signal": "public Spring setAtRest()", "code": "{\n  mEndValue = mCurrentState.position;\n  mTempState.position = mCurrentState.position;\n  mCurrentState.velocity = 0;\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * set the velocity on the spring in pixels per second\n * @return the spring for chaining\n */\n", "func_signal": "public Spring setVelocity(double velocity)", "code": "{\n  mCurrentState.velocity = velocity;\n  mSpringSystem.activateSpring(this.getId());\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * check if the current state is at rest\n * @return is the spring at rest\n */\n", "func_signal": "public boolean isAtRest()", "code": "{\n  return Math.abs(mCurrentState.velocity) <= mRestSpeedThreshold &&\n      getDisplacementDistanceForState(mCurrentState) <= mDisplacementFromRestThreshold;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * set the threshold of displacement from rest below which the spring should be considered at rest\n * @param displacementFromRestThreshold displacement to consider resting below\n * @return the spring for chaining\n */\n", "func_signal": "public Spring setRestDisplacementThreshold(double displacementFromRestThreshold)", "code": "{\n  mDisplacementFromRestThreshold = displacementFromRestThreshold;\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * linear interpolation between the previous and current physics state based on the amount of\n * timestep remaining after processing the rendering delta time in timestep sized chunks.\n * @param alpha from 0 to 1, where 0 is the previous state, 1 is the current state\n */\n", "func_signal": "private void interpolate(double alpha)", "code": "{\n  mCurrentState.position = mCurrentState.position * alpha + mPreviousState.position *(1-alpha);\n  mCurrentState.velocity = mCurrentState.velocity * alpha + mPreviousState.velocity *(1-alpha);\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * set the config class\n * @param springConfig config class for the spring\n * @return this Spring instance for chaining\n */\n", "func_signal": "public Spring setSpringConfig(SpringConfig springConfig)", "code": "{\n  if (springConfig == null) {\n    throw new IllegalArgumentException(\"springConfig is required\");\n  }\n  mSpringConfig = springConfig;\n  return this;\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\Spring.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**\n * Create an Android {@link SpringLooper} for the detected Android platform.\n * @return a SpringLooper\n */\n", "func_signal": "public static SpringLooper createSpringLooper()", "code": "{\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n    return ChoreographerAndroidSpringLooper.create();\n  } else {\n    return LegacyAndroidSpringLooper.create();\n  }\n}", "path": "library\\src\\main\\java\\com\\facebook\\rebound\\AndroidSpringLooperFactory.java", "repo_name": "zhaozhentao/KugouLayout", "stars": 296, "license": "mit", "language": "java", "size": 21341}
{"docstring": "/**     \n * @description \u027e\u0377\u0636\u0377\u052a\u0635\u05b5\n * @author rico       \n * @created 2017519 8:25:47     \n * @return     \n */\n", "func_signal": "public E pop()", "code": "{\n\tif (!isEmpty()) {\n\t\tE temp = (E) queue[0];\n\t\tfor (int i = 0; i < size - 1; i++) {\n\t\t\tqueue[i] = queue[i+1];\n\t\t}\n\t\tqueue[size-1] = null;\n\t\tsize--;\n\t\treturn temp;\n\t}\n\treturn null;\n}", "path": "src\\cn\\edu\\tju\\rico\\queue\\SeqQueue.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u0479\u057b,\u02b9\u0421\u05b5\u057b\n * @author rico       \n * @param data     \n */\n", "func_signal": "public void push(E data, Comparator<? super E> c)", "code": "{\n\tpush(data);\n\tif(min == null){\n\t\tmin = new LinkedStack<E>();\n\t}\n\tif(min.peek() == null){\n\t\tmin.push(data);\n\t}else if(c.compare(this.peek().data, min.peek().data) < 0){\n\t\tmin.push(data);\n\t}\n}", "path": "src\\cn\\edu\\tju\\rico\\stack\\LinkedStack.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**\n * @description \u027e\u01b6\n * @author rico\n * @created 201763 8:43:29\n * @param target\n * @param node\n * @return\n */\n", "func_signal": "public TreeNode remove(int target, TreeNode node)", "code": "{\n\tTreeNode tmp = null;\n\tif (node != null) {\n\t\tif (target < node.data) { // \u027e\n\t\t\tnode.left = remove(target, node.left);\n\t\t} else if (target > node.data) { // \u027e\n\t\t\tnode.right = remove(target, node.right);\n\t\t} else if (node.left != null && node.right != null) { // \u04b5\u027e\u38ec\u03aa\n\t\t\t// \u04b5\u0534\u027e\u04bb(\u0421)\n\t\t\ttmp = node.right;\n\t\t\twhile (tmp.left != null) {\n\t\t\t\ttmp = tmp.left;\n\t\t\t}\n\n\t\t\t// \u0421\u3cb9\u03bb\u027e\n\t\t\tnode.data = tmp.data;\n\n\t\t\t// \u027e\u027e\u03f2\u03bb\n\t\t\tnode.right = remove(node.data, node.right);\n\t\t} else {\n\t\t\tif (node.left == null) {\n\t\t\t\tnode = node.right;\n\t\t\t} else {\n\t\t\t\tnode = node.left;\n\t\t\t}\n\t\t}\n\t}\n\treturn node;\n}", "path": "src\\cn\\edu\\tju\\rico\\BinarySearchTree\\BinarySearchTree.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u04e1\u057b\n * @author rico       \n */\n", "func_signal": "public void print()", "code": "{\n\tNode<E> index = top;\n\twhile (index != null) {\n\t\tSystem.out.print(index.data + \" \");\n\t\tindex = index.next;\n\t}\n\tSystem.out.println();\n}", "path": "src\\cn\\edu\\tju\\rico\\stack\\LinkedStack.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "// \n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\t\n\tLinkedStack<Integer> stack = new LinkedStack<Integer>();\n\tComparator<Integer> c = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tif(o1 > o2)\n\t\t\t\treturn 1;\n\t\t\telse if(o1 < o2)\n\t\t\t\treturn -1;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\t};\n\t\n\tstack.push(7,c);\n\tstack.push(6,c);\n\tstack.push(8,c);\n\tstack.push(5,c);\n\tstack.push(3,c);\n\t\n\tSystem.out.println(\"\u052d\u057b(\u052a\u057b\u052a)\");\n\tstack.print();\n\tSystem.out.println();\n\t\n\tSystem.out.println(\"\u057b\u052a\u0623\");\n\tSystem.out.println(stack.peek());\n\tSystem.out.println(\"\u057b\u0435\u0421\u05b5\" + stack.min());\n\tSystem.out.println();\n\n\tSystem.out.println(\"\u027e\u057b\u052a\u063a\");\n\tstack.pop(c);\n\tstack.print();\n\tSystem.out.println(\"\u057b\u0435\u0421\u05b5\" + stack.min());\n\tSystem.out.println();\n}", "path": "src\\cn\\edu\\tju\\rico\\test\\LinkedStackTest.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u027e\u057b\u052a\n * @author rico       \n * @return\n * @throws Exception     \n */\n", "func_signal": "public Node<E> pop()", "code": "{\n\tif (isEmpty()) {\n\t\treturn null;\n\t}\n\n\tNode<E> node = top;\n\ttop = top.next;\n\tnode.next = null;\n\tsize--;\n\treturn node;\n}", "path": "src\\cn\\edu\\tju\\rico\\stack\\LinkedStack.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**\n * @description \u0132\n * @author rico\n * @created 201763 5:55:05\n * @param target\n * @param node\n * @return\n */\n", "func_signal": "public TreeNode insert(int target, TreeNode node)", "code": "{\n\tif (search(target, node) == null) {\n\t\tif (node == null) {\n\t\t\treturn new TreeNode(target);\n\t\t} else {\n\t\t\tif (target < node.data) {\n\t\t\t\tnode.left = insert(target, node.left);\n\t\t\t} else {\n\t\t\t\tnode.right = insert(target, node.right);\n\t\t\t}\n\t\t}\n\t}\n\treturn node;\n}", "path": "src\\cn\\edu\\tju\\rico\\BinarySearchTree\\BinarySearchTree.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u052a\u0635\u03b2\n * @author rico       \n * @created 2017519 8:25:32     \n * @param data     \n */\n", "func_signal": "public void put(E data)", "code": "{\n\tif(!isFull()){\n\t\tqueue[size] = data;\n\t\tsize ++;\n\t}\n}", "path": "src\\cn\\edu\\tju\\rico\\queue\\SeqQueue.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**\n * @description \u3de8\u0779\u3de8\n * @author rico\n * @created 201763 3:27:43\n * @param target\n *            \u013f\u05b5\n * @param root\n *            \u0138\n * @return\n */\n", "func_signal": "public TreeNode search(int target, TreeNode root)", "code": "{\n\tTreeNode result = null;\n\tif (root != null) { // \u0779\u05b9\n\t\tif (target == root.data) { // \u0779\u05b9\n\t\t\tresult = root;\n\t\t\treturn result;\n\t\t} else if (target < root.data) { // \u013f\u05b5\u0421\u06b8\u05b5\n\t\t\tresult = search(target, root.left);\n\t\t} else { // \u013f\u05b5\u06b8\u05b5\n\t\t\tresult = search(target, root.right);\n\t\t}\n\t}\n\treturn result;\n}", "path": "src\\cn\\edu\\tju\\rico\\BinarySearchTree\\BinarySearchTree.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u0636\u0377\u052a\n * @author rico       \n * @created 2017519 8:26:01     \n * @return     \n */\n", "func_signal": "public E peek()", "code": "{\n\tif (!isEmpty()) {\n\t\treturn (E) queue[0];\n\t}\n\treturn null;\n}", "path": "src\\cn\\edu\\tju\\rico\\queue\\SeqQueue.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "// \n", "func_signal": "public SeqQueue(int maxSize)", "code": "{\n\t\tthis.maxSize = maxSize;\n\t\tqueue = new Object[maxSize];\n\t}", "path": "src\\cn\\edu\\tju\\rico\\queue\\SeqQueue.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u00b7\u9ca2\u3de8\n * @author rico       \n * @created 2017520 3:59:16     \n * @param target \u06b4\u6d22\u9ca2\n * @param left \u04bb\u0135\u04bb\u052a\u03bb\n * @param mid  \u04bb\u04bb\u052a\u03bb\n * @param right  \u06b6\u04bb\u052a\u03bb\n * @return     \n */\n", "func_signal": "public static int[] merge(int[] target, int left, int mid, int right)", "code": "{\n\t\n\t// \u04aa\u04bb\u052d\u04bb\u0138\u057c\n\tint[] temp = Arrays.copyOf(target, target.length);\n\t\n\t// s1,s2\u01fc\u05b8\ub8ecindex \u01f4\u05b8\n\tint s1 = left;\n\tint s2 = mid + 1;\n\tint index = left;\n\t\n\t// \u03b4\ua8ec\u023d\n\twhile(s1 <= mid && s2 <= right){\n\t\tif(temp[s1] <= temp[s2]){   // \u0236\n\t\t\ttarget[index++] = temp[s1++];\n\t\t}else{\n\t\t\ttarget[index++] = temp[s2++];\n\t\t}\n\t}\n\t\n\t//\u04bb\u03b4\ua8ec\n\twhile(s1 <= mid){\n\t\ttarget[index++] = temp[s1++];\n\t}\n\t\n\t//\u06b6\u03b4\ua8ec\n\twhile(s2 <= right){\n\t\ttarget[index++] = temp[s2++];\n\t}\n\treturn target;\n}", "path": "src\\cn\\edu\\tju\\rico\\sort\\MergeSort.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u057b\u052a(\u05b4\u027e)\n * @author rico       \n * @return     \n */\n", "func_signal": "public Node<E> peek()", "code": "{\n\tif (isEmpty()) {\n\t\treturn null;\n\t}\n\treturn top;\n}", "path": "src\\cn\\edu\\tju\\rico\\stack\\LinkedStack.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "//\u057b\n", "func_signal": "public E pop() throws Exception", "code": "{\n\tif(stack.isEmpty()){\n\t\tthrow new Exception(\"\u057b...\");\n\t}\n\t\n\treturn stack.pop();\n}", "path": "src\\cn\\edu\\tju\\rico\\stack\\LinkedListStack.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**\n * @description \u04e1\n * @author rico\n * @created 201763 6:08:42\n * @param node\n */\n", "func_signal": "public void printTree(TreeNode node)", "code": "{\n\tif (node != null) {\n\t\tSystem.out.print(node.data);\n\t\tif (node.left != null || node.right != null) {\n\t\t\tSystem.out.print(\"(\");\n\t\t\tprintTree(node.left);\n\t\t\tSystem.out.print(\",\");\n\t\t\tprintTree(node.right);\n\t\t\tSystem.out.print(\")\");\n\t\t}\n\t}\n}", "path": "src\\cn\\edu\\tju\\rico\\BinarySearchTree\\BinarySearchTree.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u9ca2\u3de8(\u0779\u3de8)\u0225\u05bd\u28ec\u03f2\n * @author rico       \n * @created 2017520 4:04:52     \n * @param target \n * @param left  \u02bc\u03bb\n * @param right  \u05b9\u03bb\n * @return     \n */\n", "func_signal": "public static int[] mergeSort(int[] target, int left, int right)", "code": "{\n\t\n\tif(right > left){           // \u0779\u05b9\n\t\tint mid = (left + right)/2;\n\t\tmergeSort(target, left, mid);   // \u9ca2\u04bb\n\t\tmergeSort(target, mid+1, right);   // \u9ca2\u06b6\n\t\treturn merge(target,left,mid,right);  // \u03f2\u0433\u052d\n\t}\n\treturn target;\n}", "path": "src\\cn\\edu\\tju\\rico\\sort\\MergeSort.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**\n * @description \u0779\u3de8\n * @author rico\n * @created 201763 3:52:54\n * @param root\n */\n", "func_signal": "public void inOrder(TreeNode node)", "code": "{\n\tif (node != null) {\n\t\tinOrder(node.left);\n\t\tSystem.out.print(root.data + \" \");\n\t\tinOrder(node.right);\n\t}\n}", "path": "src\\cn\\edu\\tju\\rico\\BinarySearchTree\\BinarySearchTree.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u027e\u057b\u052a,\u02b9\u0421\u05b5\u057b\n * @author rico       \n * @return\n * @throws Exception     \n */\n", "func_signal": "public Node<E> pop(Comparator<? super E> c)", "code": "{\n\tNode<E> temp = this.pop();\n\tif(temp != null && min.peek() != null){\n\t\tif(c.compare(temp.data, min.peek().data) == 0){\n\t\t\tmin.pop();\n\t\t}\n\t}\n\treturn temp;\n}", "path": "src\\cn\\edu\\tju\\rico\\stack\\LinkedStack.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**\n * @description \u05aa\u0439\n * @author rico\n * @created 201763 6:15:06\n * @param input\n */\n", "func_signal": "public void createBinarySearchTree(int[] input)", "code": "{\n\tif (input != null) {\n\t\tfor (int i = 0; i < input.length; i++) {\n\t\t\troot = insert(input[i], root);\n\t\t}\n\t}\n}", "path": "src\\cn\\edu\\tju\\rico\\BinarySearchTree\\BinarySearchTree.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**     \n * @description \u0479\u057b\n * @author rico       \n * @param data     \n */\n", "func_signal": "public void push(E data)", "code": "{\n\tNode<E> node = new Node<E>(data); \n\t// \u00bc\u052a\u05b8\u057b\u052a\n\tnode.next = top;\n\ttop = node;\n\tsize++;\n}", "path": "src\\cn\\edu\\tju\\rico\\stack\\LinkedStack.java", "repo_name": "githubofrico/DataStructure", "stars": 453, "license": "None", "language": "java", "size": 53}
{"docstring": "/**\n * Constructs a new RandomAccessFileSeekableSource.\n * @param raf\n */\n", "func_signal": "public RandomAccessFileSeekableSource(RandomAccessFile raf)", "code": "{\n    if (raf == null)\n        throw new NullPointerException(\"raf\");\n    this.raf = raf;\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\repackage\\com\\nothome\\delta\\RandomAccessFileSeekableSource.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Returns true if the mouse has been pressed on this control. Equivalent of MouseListener.mousePressed(MouseEvent\n * e).\n */\n", "func_signal": "@Override\npublic boolean mousePressed(Minecraft par1Minecraft, int par2, int par3)", "code": "{\n    if (super.mousePressed(par1Minecraft, par2, par3))\n    {\n        this.sliderValue = (float)(par2 - (this.xPosition + 4)) / (float)(this.width - 8);\n        updateSlider();\n        this.dragging = true;\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\client\\config\\GuiSlider.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "// internal class/functionality, do not use\n", "func_signal": "public static boolean confirm(String text)", "code": "{\n    StartupQuery query = new StartupQuery(text, new AtomicBoolean());\n    query.execute();\n    return query.getResult();\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\StartupQuery.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Hook called when spawning a Villager, sets it's profession to a random registered profession.\n *\n * @param entity The new entity\n * @param rand The world's RNG\n */\n", "func_signal": "public static void setRandomProfession(EntityVillager entity, Random rand)", "code": "{\n    Set<String> entries = INSTANCE.professions.getKeys();\n    int prof = rand.nextInt(entries.size());\n    //TODO: Grab id range from internal registry\n    entity.setProfession(rand.nextInt(5));\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\registry\\VillagerRegistry.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Returns a full list of all listeners for all priority levels.\n * Including all parent listeners.\n *\n * List is returned in proper priority order.\n *\n * Automatically rebuilds the internal Array cache if its information is out of date.\n *\n * @return Array containing listeners\n */\n", "func_signal": "public IEventListener[] getListeners()", "code": "{\n    if (shouldRebuild()) buildCache();\n    return listeners;\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\eventhandler\\ListenerList.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Find the container that associates with the supplied mod object\n * @param mod\n */\n", "func_signal": "public ModContainer findContainerFor(Object mod)", "code": "{\n    if (mod instanceof String)\n    {\n        return Loader.instance().getIndexedModList().get(mod);\n    }\n    else\n    {\n        return Loader.instance().getReversedModObjectList().get(mod);\n    }\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\FMLCommonHandler.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Fired when the mouse button is dragged. Equivalent of MouseListener.mouseDragged(MouseEvent e).\n */\n", "func_signal": "@Override\nprotected void mouseDragged(Minecraft par1Minecraft, int par2, int par3)", "code": "{\n    if (this.visible)\n    {\n        if (this.dragging)\n        {\n            this.sliderValue = (par2 - (this.xPosition + 4)) / (float)(this.width - 8);\n            updateSlider();\n        }\n\n        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);\n        this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)), this.yPosition, 0, 66, 4, 20);\n        this.drawTexturedModalRect(this.xPosition + (int)(this.sliderValue * (float)(this.width - 8)) + 4, this.yPosition, 196, 66, 4, 20);\n    }\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\client\\config\\GuiSlider.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Loads a lang file, first searching for a marker to enable the 'extended' format {escape charaters}\n * If the marker is not found it simply returns and let the vanilla code load things.\n * The Marker is 'PARSE_ESCAPES' by itself on a line starting with '#' as such:\n * #PARSE_ESCAPES\n *\n * @param table The Map to load each key/value pair into.\n * @param inputstream Input stream containing the lang file.\n * @return A new InputStream that vanilla uses to load normal Lang files, Null if this is a 'enhanced' file and loading is done.\n */\n", "func_signal": "public InputStream loadLanguage(Map<String, String> table, InputStream inputstream) throws IOException", "code": "{\n    byte[] data = IOUtils.toByteArray(inputstream);\n\n    boolean isEnhanced = false;\n    for (String line : IOUtils.readLines(new ByteArrayInputStream(data), Charsets.UTF_8))\n    {\n        if (!line.isEmpty() && line.charAt(0) == '#')\n        {\n            line = line.substring(1).trim();\n            if (line.equals(\"PARSE_ESCAPES\"))\n            {\n                isEnhanced = true;\n                break;\n            }\n        }\n    }\n\n    if (!isEnhanced)\n        return new ByteArrayInputStream(data);\n\n    Properties props = new Properties();\n    props.load(new InputStreamReader(new ByteArrayInputStream(data), Charsets.UTF_8));\n    for (Entry e : props.entrySet())\n    {\n        table.put((String)e.getKey(), (String)e.getValue());\n    }\n    props.clear();\n    return null;\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\FMLCommonHandler.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Return a read only cast view of the supplied ungeneric collection, based on the element type given\n * @param coll The collection to cast\n * @param elementType the supertype contained in the collection\n * @return a collection asserting that type relationship\n */\n", "func_signal": "public static <T> Collection<T> wrap(@SuppressWarnings(\"rawtypes\") Collection coll, Class<T> elementType)", "code": "{\n    Collection<?> asGeneric = coll;\n    return Collections2.transform(asGeneric, new TypeCastFunction<T>(elementType));\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\functions\\CollectionWrapperFactory.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * @param mainMenu\n */\n", "func_signal": "public GuiModList(GuiScreen mainMenu)", "code": "{\n    this.mainMenu = mainMenu;\n    this.mods = new ArrayList<ModContainer>();\n    FMLClientHandler.instance().addSpecialModEntries(mods);\n    // Add child mods to their parent's list\n    for (ModContainer mod : Loader.instance().getModList())\n    {\n        if (mod.getMetadata() != null && mod.getMetadata().parentMod == null && !Strings.isNullOrEmpty(mod.getMetadata().parent))\n        {\n            String parentMod = mod.getMetadata().parent;\n            ModContainer parentContainer = Loader.instance().getIndexedModList().get(parentMod);\n            if (parentContainer != null)\n            {\n                mod.getMetadata().parentMod = parentContainer;\n                parentContainer.getMetadata().childMods.add(mod);\n                continue;\n            }\n        }\n        else if (mod.getMetadata() != null && mod.getMetadata().parentMod != null)\n        {\n            continue;\n        }\n        mods.add(mod);\n    }\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\client\\GuiModList.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "// Doesn't work at all.\n", "func_signal": "public void registerVillagerSkin(int villagerId, ResourceLocation villagerSkin)", "code": "{\n       if (newVillagers == null)\n       {\n           newVillagers = Maps.newHashMap();\n       }\n       newVillagers.put(villagerId, villagerSkin);\n   }", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\registry\\VillagerRegistry.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Draws this button to the screen.\n */\n", "func_signal": "@Override\npublic void drawButton(Minecraft mc, int mouseX, int mouseY)", "code": "{\n    if (this.visible)\n    {\n        this.hovered = mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;\n        int k = this.getHoverState(this.hovered);\n        GuiUtils.drawContinuousTexturedBox(buttonTextures, this.xPosition, this.yPosition, 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.zLevel);\n        this.mouseDragged(mc, mouseX, mouseY);\n        int color = 14737632;\n\n        if (packedFGColour != 0)\n        {\n            color = packedFGColour;\n        }\n        else if (!this.enabled)\n        {\n            color = 10526880;\n        }\n        else if (this.hovered)\n        {\n            color = 16777120;\n        }\n\n        String buttonText = this.displayString;\n        int strWidth = mc.fontRendererObj.getStringWidth(buttonText);\n        int ellipsisWidth = mc.fontRendererObj.getStringWidth(\"...\");\n\n        if (strWidth > width - 6 && strWidth > ellipsisWidth)\n            buttonText = mc.fontRendererObj.trimStringToWidth(buttonText, width - 6 - ellipsisWidth).trim() + \"...\";\n\n        this.drawCenteredString(mc.fontRendererObj, buttonText, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, color);\n    }\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\client\\config\\GuiButtonExt.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "// Doesn't work at all.\n", "func_signal": "public void registerVillagerId(int id)", "code": "{\n       if (newVillagerIds.contains(id))\n       {\n           FMLLog.severe(\"Attempt to register duplicate villager id %d\", id);\n           throw new RuntimeException();\n       }\n       newVillagerIds.add(id);\n   }", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\registry\\VillagerRegistry.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Return the effective side for the context in the game. This is dependent\n * on thread analysis to try and determine whether the code is running in the\n * server or not. Use at your own risk\n */\n", "func_signal": "public Side getEffectiveSide()", "code": "{\n    Thread thr = Thread.currentThread();\n    if (thr.getName().equals(\"Server thread\") || thr.getName().startsWith(\"Netty Server IO\"))\n    {\n        return Side.SERVER;\n    }\n\n    return Side.CLIENT;\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\FMLCommonHandler.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Delayed System.exit() until the server is actually stopped/done saving.\n *\n * For internal use only!\n *\n * @param retVal Exit code for System.exit()\n */\n", "func_signal": "public void handleExit(int retVal)", "code": "{\n    CountDownLatch latch = exitLatch;\n\n    if (latch != null)\n    {\n        try\n        {\n            FMLLog.info(\"Waiting for the server to terminate/save.\");\n            if (!latch.await(10, TimeUnit.SECONDS))\n            {\n                FMLLog.warning(\"The server didn't stop within 10 seconds, exiting anyway.\");\n            }\n            else\n            {\n                FMLLog.info(\"Server terminated.\");\n            }\n        }\n        catch (InterruptedException e)\n        {\n            FMLLog.warning(\"Interrupted wait, exiting.\");\n        }\n    }\n\n    System.exit(retVal);\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\FMLCommonHandler.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Return a read only cast view of the supplied ungeneric list, based on the element type given\n * @param list The list to cast\n * @param elementType the supertype contained in the list\n * @return a list asserting that type relationship\n */\n", "func_signal": "public static <T> List<T> wrap(@SuppressWarnings(\"rawtypes\") List list, Class<T> elementType)", "code": "{\n    List<?> asGeneric = list;\n    return Lists.transform(asGeneric, new TypeCastFunction<T>(elementType));\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\functions\\CollectionWrapperFactory.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Utility method to generate a regular packet from a custom packet. Basically, it writes the packet through the\n * outbound side which should have a message to message codec present (such as {@link FMLIndexedMessageToMessageCodec},\n * transforming from mod packets to standard {@link FMLProxyPacket}s.\n *\n * This is mostly useful in cases where vanilla expects a packet, such as the TileEntity getDescriptionPacket.\n *\n * @param object The inbound packet\n * @return A Packet suitable for passing to vanilla network code.\n */\n", "func_signal": "public Packet generatePacketFrom(Object object)", "code": "{\n    OutboundTarget outboundTarget = attr(FMLOutboundHandler.FML_MESSAGETARGET).getAndSet(OutboundTarget.NOWHERE);\n    writeOutbound(object);\n    Packet pkt = (Packet) outboundMessages().poll();\n    attr(FMLOutboundHandler.FML_MESSAGETARGET).set(outboundTarget);\n    return pkt;\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\network\\FMLEmbeddedChannel.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "// Doesn't work at all.\n", "func_signal": "public static ResourceLocation getVillagerSkin(int villagerType, ResourceLocation defaultSkin)", "code": "{\n       if (instance().newVillagers != null && instance().newVillagers.containsKey(villagerType))\n       {\n           return instance().newVillagers.get(villagerType);\n       }\n       return defaultSkin;\n   }", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\registry\\VillagerRegistry.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Raise an exception\n */\n", "func_signal": "public void raiseException(Throwable exception, String message, boolean stopGame)", "code": "{\n    FMLLog.log(Level.ERROR, exception, \"Something raised an exception. The message was '%s'. 'stopGame' is %b\", message, stopGame);\n    if (stopGame)\n    {\n        getSidedDelegate().haltGame(message,exception);\n    }\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\FMLCommonHandler.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Returns a ArrayList containing all listeners for this event,\n * and all parent events for the specified priority.\n *\n * The list is returned with the listeners for the children events first.\n *\n * @param priority The Priority to get\n * @return ArrayList containing listeners\n */\n", "func_signal": "public ArrayList<IEventListener> getListeners(EventPriority priority)", "code": "{\n    ArrayList<IEventListener> ret = new ArrayList<IEventListener>(priorities.get(priority.ordinal()));\n    if (parent != null)\n    {\n        ret.addAll(parent.getListeners(priority));\n    }\n    return ret;\n}", "path": "src\\main\\java\\net\\minecraftforge\\fml\\common\\eventhandler\\ListenerList.java", "repo_name": "MinecraftForge/FML", "stars": 433, "license": "other", "language": "java", "size": 26767}
{"docstring": "/**\n * Animate the view <code>child</code> to the given (left, top) position.\n * If this method returns true, the caller should invoke {@link #continueSettling(boolean)}\n * on each subsequent frame to continue the motion until it returns false. If this method\n * returns false there is no further work to do to complete the movement.\n *\n * <p>This operation does not count as a capture event, though {@link #getCapturedView()}\n * will still report the sliding view while the slide is in progress.</p>\n *\n * @param child Child view to capture and animate\n * @param finalLeft Final left position of child\n * @param finalTop Final top position of child\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean smoothSlideViewTo(View child, int finalLeft, int finalTop)", "code": "{\n    mCapturedView = child;\n    mActivePointerId = INVALID_POINTER;\n\n    boolean continueSliding = forceSettleCapturedViewAt(finalLeft, finalTop, 0, 0);\n    if (!continueSliding && mDragState == STATE_IDLE && mCapturedView != null) {\n        // If we're in an IDLE state to begin with and aren't moving anywhere, we\n        // end up having a non-null capturedView with an IDLE dragState\n        mCapturedView = null;\n    }\n\n    return continueSliding;\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "//add by Komi--------------------------------------------------\n", "func_signal": "public boolean smoothSlideViewTo(View child, int startLeft, int startTop, int finalLeft, int finalTop)", "code": "{\n    mCapturedView = child;\n    mActivePointerId = INVALID_POINTER;\n\n    return forceSettleCapturedViewAt(startLeft, startTop, finalLeft, finalTop, 0, 0);\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "//\u624b\u6307\u91ca\u653e\u7684\u65f6\u5019\u56de\u8c03\n", "func_signal": "@Override\npublic void onViewReleased(View releasedChild, float xvel, float yvel)", "code": "{\n\n    final int maxWidth = getWidth();\n    final int maxHeight = getHeight();\n\n    int hThreshold = (int) (releasedChild.getWidth() * mConfig.getDistanceThresholdPercent());\n    int vThreshold = (int) (releasedChild.getHeight() * mConfig.getDistanceThresholdPercent());\n    boolean hOverVelocityThreshold = Math.abs(yvel) > mConfig.getVelocityThreshold();\n    boolean vOverVelocityThreshold = Math.abs(xvel) > mConfig.getVelocityThreshold();\n    float velocityThreshold = mConfig.getVelocityThreshold();\n\n    boolean hWrapped = isWrappedViewHorizontal(releasedChild);\n    boolean vWrapped = isWrappedViewVertical(releasedChild);\n\n    final int left = releasedChild.getLeft();\n    final int top = releasedChild.getTop();\n\n    int endLeft = mConfig.getPosition().onViewReleasedHorizontal(hWrapped, maxWidth, left, slidableChildLeft, xvel, hThreshold, hOverVelocityThreshold, velocityThreshold);\n    int endTop = mConfig.getPosition().onViewReleasedVertical(vWrapped, maxHeight, top, slidableChildTop, yvel, vThreshold, vOverVelocityThreshold, velocityThreshold);\n\n    mDragHelper.settleCapturedViewAt(endLeft, endTop);\n\n    invalidate();\n\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\Slider.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Determine if the supplied view is under the given point in the\n * parent view's coordinate system.\n *\n * @param view Child view of the parent to hit test\n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return true if the supplied view is under the given point, false otherwise\n */\n", "func_signal": "public boolean isViewUnder(View view, int x, int y)", "code": "{\n    if (view == null) {\n        return false;\n    }\n    return x >= view.getLeft() &&\n            x < view.getRight() &&\n            y >= view.getTop() &&\n            y < view.getBottom();\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Check if any pointer tracked in the current gesture has crossed\n * the required slop threshold.\n *\n * <p>This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only rely on\n * the results of this method after all currently available touch data\n * has been provided to one of these two methods.</p>\n *\n * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},\n *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions)", "code": "{\n    final int count = mInitialMotionX.length;\n    for (int i = 0; i < count; i++) {\n        if (checkTouchSlop(directions, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "//\u5bf9mSlideChild\u79fb\u52a8\u65f6\u7684\u8fb9\u754c\u8303\u56f4\u8fdb\u884c\u63a7\u5236\n", "func_signal": "@Override\npublic int clampViewPositionHorizontal(View child, int left, int dx)", "code": "{\n    boolean hWrapped = isWrappedViewHorizontal(child);\n    return mConfig.getPosition().clampViewPositionHorizontal(getWidth(), left, slidableChildLeft, hWrapped);\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\Slider.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Check if we've crossed a reasonable touch slop for the given child view.\n * If the child cannot be dragged along the horizontal or vertical axis, motion\n * along that axis will not count toward the slop check.\n *\n * @param child Child to check\n * @param dx Motion since initial position along X axis\n * @param dy Motion since initial position along Y axis\n * @return true if the touch slop has been crossed\n */\n", "func_signal": "private boolean checkTouchSlop(View child, float dx, float dy)", "code": "{\n    if (child == null) {\n        return false;\n    }\n    final boolean checkHorizontal = mCallback.getViewHorizontalDragRange(child) > 0;\n    final boolean checkVertical = mCallback.getViewVerticalDragRange(child) > 0;\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Capture a specific child view for dragging within the parent. The callback will be notified\n * but {@link Callback#tryCaptureView(View, int)} will not be asked permission to\n * capture this view.\n *\n * @param childView Child view to capture\n * @param activePointerId ID of the pointer that is dragging the captured child view\n */\n", "func_signal": "public void captureChildView(View childView, int activePointerId)", "code": "{\n    if (childView.getParent() != mParentView) {\n        throw new IllegalArgumentException(\"captureChildView: parameter must be a descendant \" +\n                \"of the ViewDragHelper's tracked parent view (\" + mParentView + \")\");\n    }\n\n    mCapturedView = childView;\n    mActivePointerId = activePointerId;\n    mCallback.onViewCaptured(childView, activePointerId);\n    setDragState(STATE_DRAGGING);\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n *\n * @param finalLeft Target left position for the captured view\n * @param finalTop Target top position for the captured view\n * @param xvel Horizontal velocity\n * @param yvel Vertical velocity\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "private boolean forceSettleCapturedViewAt(int finalLeft, int finalTop, int xvel, int yvel)", "code": "{\n    final int startLeft = mCapturedView.getLeft();\n    final int startTop = mCapturedView.getTop();\n    final int dx = finalLeft - startLeft;\n    final int dy = finalTop - startTop;\n\n    if (dx == 0 && dy == 0) {\n        // Nothing to do. Send callbacks, be done.\n        mScroller.abortAnimation();\n        setDragState(STATE_IDLE);\n        return false;\n    }\n\n    final int duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);\n    mScroller.startScroll(startLeft, startTop, dx, dy, duration);\n\n    setDragState(STATE_SETTLING);\n    return true;\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "//\u5f53mSlideChild\u4f4d\u7f6e\u53d8\u5316\u65f6\uff0c\u4f1a\u56de\u8c03\u8fd9\u4e2a\u51fd\u6570\n", "func_signal": "@Override\npublic void onViewPositionChanged(View changedView, int left, int top, int dx, int dy)", "code": "{\n\n    boolean hWrapped = isWrappedViewHorizontal(changedView);\n    boolean vWrapped = isWrappedViewVertical(changedView);\n\n    int slideLeft = hWrapped ? left - slidableChildLeft : left;\n    int slideTop = vWrapped ? top - slidableChildTop : top;\n\n    mScrollPercent = mConfig.getPosition().onViewPositionChanged(changedView.getWidth(), changedView.getHeight(), slideLeft, slideTop);\n\n    if (mListener != null) mListener.onSlideChange(mScrollPercent);\n    if (configListener != null) configListener.onSlideChange(mScrollPercent);\n    invalidate();\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\Slider.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels along the X axis\n * @param dy Delta scrolled in pixels along the Y axis\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int dy, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, dy, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && (ViewCompat.canScrollHorizontally(v, -dx) ||\n            ViewCompat.canScrollVertically(v, -dy));\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Like all callback events this must happen on the UI thread, but release\n * involves some extra semantics. During a release (mReleaseInProgress)\n * is the only time it is valid to call {@link #settleCapturedViewAt(int, int)}\n * or {@link #flingCapturedView(int, int, int, int)}.\n */\n", "func_signal": "private void dispatchViewReleased(float xvel, float yvel)", "code": "{\n    mReleaseInProgress = true;\n    mCallback.onViewReleased(mCapturedView, xvel, yvel);\n    mReleaseInProgress = false;\n\n    if (mDragState == STATE_DRAGGING) {\n        // onViewReleased didn't call a method that would have changed this. Go idle.\n        setDragState(STATE_IDLE);\n    }\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n * The appropriate velocity from prior motion will be taken into account.\n * If this method returns true, the caller should invoke {@link #continueSettling(boolean)}\n * on each subsequent frame to continue the motion until it returns false. If this method\n * returns false there is no further work to do to complete the movement.\n *\n * @param finalLeft Settled left edge position for the captured view\n * @param finalTop Settled top edge position for the captured view\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean settleCapturedViewAt(int finalLeft, int finalTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot settleCapturedViewAt outside of a call to \" +\n                \"Callback#onViewReleased\");\n    }\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop,\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax.\n * If the value is below the minimum, it will be clamped to zero.\n * If the value is above the maximum, it will be clamped to the maximum.\n *\n * @param value Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private int clampMag(int value, int absMin, int absMax)", "code": "{\n    final int absValue = Math.abs(value);\n    if (absValue < absMin) return 0;\n    if (absValue > absMax) return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * \u6839\u636e\u624b\u52bf\u843d\u70b9\u5224\u65ad\u662f\u5426\u53ef\u5212\u8d77slidableChild\n *\n * @param ev MotionEvent\u4e8b\u4ef6\n * @return \u662f\u5426\u53ef\u5212\u8d77slidableChild\n */\n", "func_signal": "private boolean canDragFromEdge(MotionEvent ev)", "code": "{\n\n    float x = ev.getX();\n    float y = ev.getY();\n\n    int width = Math.min(mSlidableChild.getWidth(), getWidth());\n    int height = Math.min(mSlidableChild.getHeight(), getHeight());\n    float range = mConfig.getPosition().getViewSize(x, y, width, height, slidableChildLeft, slidableChildTop);\n    mConfig.setEdgeSize(range);\n\n    return mConfig.getPosition().canDragFromEdge(slidableChildLeft, slidableChildTop, x, y, range, mConfig.getEdgeSize());\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\Slider.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "//\u76f4\u63a5\u4f5c\u4e3aactivity\u7684parent\u52a0\u5165\u7528 replaceToActivity\u66ff\u4ee3\n", "func_signal": "@Deprecated\nprivate void addToActivity(Slider slider)", "code": "{\n    ViewGroup root = (ViewGroup) getRootView();\n\n    getUiActivity().getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n        root.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n    } else {\n        root.setBackground(null);\n    }\n    ViewGroup decorChild = (ViewGroup) root.getChildAt(0);\n    root.removeView(decorChild);\n    slider.addView(decorChild);\n    decorChild.setBackgroundColor(Color.WHITE);\n    root.addView(slider, 0);\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ui\\adapter\\SliderActivityAdapter.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Move the captured settling view by the appropriate amount for the current time.\n * If <code>continueSettling</code> returns true, the caller should call it again\n * on the next frame to continue.\n *\n * @param deferCallbacks true if state callbacks should be deferred via posted message.\n *                       Set this to true if you are calling this method from\n *                       {@link View#computeScroll()} or similar methods\n *                       invoked as part of layout or drawing.\n * @return true if settle is still in progress\n */\n", "func_signal": "public boolean continueSettling(boolean deferCallbacks)", "code": "{\n    if (mDragState == STATE_SETTLING) {\n        boolean keepGoing = mScroller.computeScrollOffset();\n        final int x = mScroller.getCurrX();\n        final int y = mScroller.getCurrY();\n        final int dx = x - mCapturedView.getLeft();\n        final int dy = y - mCapturedView.getTop();\n\n        if (dx != 0) {\n            mCapturedView.offsetLeftAndRight(dx);\n        }\n        if (dy != 0) {\n            mCapturedView.offsetTopAndBottom(dy);\n        }\n\n        if (dx != 0 || dy != 0) {\n            mCallback.onViewPositionChanged(mCapturedView, x, y, dx, dy);\n        }\n\n        if (keepGoing && x == mScroller.getFinalX() && y == mScroller.getFinalY()) {\n            // Close enough. The interpolator/scroller might think we're still moving\n            // but the user sure doesn't.\n            mScroller.abortAnimation();\n            keepGoing = false;\n        }\n\n        if (!keepGoing) {\n            if (deferCallbacks) {\n                mParentView.post(mSetIdleRunnable);\n            } else {\n                setDragState(STATE_IDLE);\n            }\n        }\n    }\n\n    return mDragState == STATE_SETTLING;\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n *\n * @param forParent Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be about detecting\n *                    the start of a drag. Larger values are more sensitive. 1.0f is normal.\n * @param cb Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n    final ViewDragHelper helper = create(forParent, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\ViewDragHelper.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * \u9501\u5b9aslider,\u4e0d\u80fd\u6ed1\u52a8\n */\n", "func_signal": "public void lock()", "code": "{\n    mDragHelper.abort();\n    mConfig.setSlidable(false);\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\Slider.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * \u89e3\u9501slider\uff0c\u53ef\u4ee5\u6ed1\u52a8\n */\n", "func_signal": "public void unlock()", "code": "{\n    mDragHelper.abort();\n    mConfig.setSlidable(true);\n}", "path": "slider\\src\\main\\java\\com\\komi\\slider\\Slider.java", "repo_name": "KobeKomi/Slider", "stars": 301, "license": "None", "language": "java", "size": 7428}
{"docstring": "/**\n * Tests for Predicates.contains(Pattern) and .containsPattern(String).\n * We assume the regex level works, so there are only trivial tests of that\n * aspect.\n * TODO: Fix comment style once annotation stripper is fixed.\n */\n", "func_signal": "@GwtIncompatible(\"Predicates.containsPattern\")\npublic void testContainsPattern_apply()", "code": "{\n\tPredicate<CharSequence> isFoobar = Predicates.containsPattern(\"^Fo.*o.*bar$\");\n\tassertTrue(isFoobar.test(\"Foxyzoabcbar\"));\n\tassertFalse(isFoobar.test(\"Foobarx\"));\n}", "path": "test\\com\\diffplug\\common\\base\\PredicatesTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** @see #findByPath(Object...) */\n", "func_signal": "public TreeNode<T> findByPath(List<T> path)", "code": "{\n\tOptional<TreeNode<T>> result = TreeQuery.findByPath(treeDef(), this, TreeNode::getContent, path, Function.identity());\n\tif (result.isPresent()) {\n\t\treturn result.get();\n\t} else {\n\t\tthrow new IllegalArgumentException(this.toString() + \" has no element with path \" + path);\n\t}\n}", "path": "src\\com\\diffplug\\common\\base\\TreeNode.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Creates a PrintWriter which passes its content to this StringPrinter. */\n", "func_signal": "public PrintWriter toPrintWriter()", "code": "{\n\tboolean autoflush = true;\n\treturn new PrintWriter(toWriter(), autoflush);\n}", "path": "src\\com\\diffplug\\common\\base\\StringPrinter.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/**\n * Tests for Predicates.instanceOf(x).\n * TODO: Fix the comment style after fixing annotation stripper to remove\n * comments properly.  Currently, all tests before the comments are removed\n * as well.\n */\n", "func_signal": "@GwtIncompatible(\"Predicates.instanceOf\")\npublic void testIsInstanceOf_apply()", "code": "{\n\tPredicate<Object> isInteger = Predicates.instanceOf(Integer.class);\n\n\tassertTrue(isInteger.test(1));\n\tassertFalse(isInteger.test(2.0f));\n\tassertFalse(isInteger.test(\"\"));\n\tassertFalse(isInteger.test(null));\n}", "path": "test\\com\\diffplug\\common\\base\\PredicatesTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/*\n * Tests for Predicates.not(predicate).\n */\n", "func_signal": "public void testNot_apply()", "code": "{\n\tassertEvalsToTrue(Predicates.not(FALSE));\n\tassertEvalsToFalse(Predicates.not(TRUE));\n\tassertEvalsLikeOdd(Predicates.not(Predicates.not(isOdd())));\n}", "path": "test\\com\\diffplug\\common\\base\\PredicatesTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Create a fresh instance of DurianPlugins for each test, and save the system properties that we're gonna futz with. */\n", "func_signal": "@Before\npublic void before()", "code": "{\n\tDurianPlugins.resetForTesting();\n\tfor (Class<?> plugin : pluginsToStore) {\n\t\tString key = DurianPlugins.PROPERTY_PREFIX + plugin.getCanonicalName();\n\t\t// store the current value\n\t\tOptional<String> value = Optional.ofNullable(System.getProperty(key));\n\t\tstate.put(plugin, value);\n\t\t// then clear the property\n\t\tSystem.clearProperty(key);\n\t}\n}", "path": "test\\com\\diffplug\\common\\base\\DurianPluginsTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "// varargs\n", "func_signal": "public void testAnd_arrayDefensivelyCopied()", "code": "{\n\t\tPredicate[] array = {Predicates.alwaysFalse()};\n\t\tPredicate<Object> predicate = Predicates.and(array);\n\t\tassertFalse(predicate.test(1));\n\t\tarray[0] = Predicates.alwaysTrue();\n\t\tassertFalse(predicate.test(1));\n\t}", "path": "test\\com\\diffplug\\common\\base\\PredicatesTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Removes this TreeNode from its parent. */\n", "func_signal": "public void removeFromParent()", "code": "{\n\tObjects.requireNonNull(parent);\n\tparent.children.remove(this);\n\tparent = null;\n}", "path": "src\\com\\diffplug\\common\\base\\TreeNode.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Restore the system properties. */\n", "func_signal": "@After\npublic void after()", "code": "{\n\tfor (Class<?> plugin : pluginsToStore) {\n\t\tString key = DurianPlugins.PROPERTY_PREFIX + plugin.getCanonicalName();\n\t\t// restore the stored value\n\t\tOptional<String> value = state.get(plugin);\n\t\tif (value.isPresent()) {\n\t\t\tSystem.setProperty(key, value.get());\n\t\t} else {\n\t\t\tSystem.clearProperty(key);\n\t\t}\n\t}\n\tDurianPlugins.resetForTesting();\n}", "path": "test\\com\\diffplug\\common\\base\\DurianPluginsTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/**\n * Creates a converter using the given functions,\n * with the given name shown in \"toString()\".\n */\n", "func_signal": "public static <A, B> ConverterNullable<A, B> from(\n\t\tFunction<? super A, ? extends B> forwardFunction,\n\t\tFunction<? super B, ? extends A> backwardFunction,\n\t\tString name)", "code": "{\n\treturn new ConverterNullable<A, B>() {\n\t\t@Override\n\t\tpublic B convert(A a) {\n\t\t\treturn forwardFunction.apply(a);\n\t\t}\n\n\t\t@Override\n\t\tpublic A revert(B b) {\n\t\t\treturn backwardFunction.apply(b);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn name;\n\t\t}\n\t};\n}", "path": "src\\com\\diffplug\\common\\base\\ConverterNullable.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/**\n * Creates an OutputStream which will print its content to the given StringPrinter, encoding bytes according to the given Charset.\n * Doesn't matter if you close the stream or not, because StringPrinter doesn't have a close().\n * <p>\n * Strings are sent to the consumer as soon as their constituent bytes are written to this OutputStream.\n * <p>\n * The implementation is lifted from Apache commons-io.  Many thanks to them!\n */\n", "func_signal": "public OutputStream toOutputStream(Charset charset)", "code": "{\n\tCharsetDecoder decoder = charset.newDecoder()\n\t\t\t.onMalformedInput(CodingErrorAction.REPLACE)\n\t\t\t.onUnmappableCharacter(CodingErrorAction.REPLACE)\n\t\t\t.replaceWith(\"?\");\n\n\tByteBuffer decoderIn = ByteBuffer.allocate(DECODER_BUFFER);\n\tCharBuffer decoderOut = CharBuffer.allocate(DECODER_BUFFER);\n\treturn new OutputStream() {\n\t\t@Override\n\t\tpublic void write(final int b) throws IOException {\n\t\t\twrite(new byte[]{(byte) b});\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(byte[] b) throws IOException {\n\t\t\twrite(b, 0, b.length);\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(byte[] b, int off, int len) throws IOException {\n\t\t\twhile (len > 0) {\n\t\t\t\tfinal int c = Math.min(len, decoderIn.remaining());\n\t\t\t\tdecoderIn.put(b, off, c);\n\t\t\t\tprocessInput(false);\n\t\t\t\tlen -= c;\n\t\t\t\toff += c;\n\t\t\t}\n\t\t\tflushOutput();\n\t\t}\n\n\t\tprivate void processInput(final boolean endOfInput) throws IOException {\n\t\t\t// Prepare decoderIn for reading\n\t\t\tdecoderIn.flip();\n\t\t\tCoderResult coderResult;\n\t\t\twhile (true) {\n\t\t\t\tcoderResult = decoder.decode(decoderIn, decoderOut, endOfInput);\n\t\t\t\tif (coderResult.isOverflow()) {\n\t\t\t\t\tflushOutput();\n\t\t\t\t} else if (coderResult.isUnderflow()) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t// The decoder is configured to replace malformed input and unmappable characters,\n\t\t\t\t\t// so we should not get here.\n\t\t\t\t\tthrow new IOException(\"Unexpected coder result\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Discard the bytes that have been read\n\t\t\tdecoderIn.compact();\n\t\t}\n\n\t\tprivate void flushOutput() throws IOException {\n\t\t\tif (decoderOut.position() > 0) {\n\t\t\t\tconsumer.accept(new String(decoderOut.array(), 0, decoderOut.position()));\n\t\t\t\tdecoderOut.rewind();\n\t\t\t}\n\t\t}\n\t};\n}", "path": "src\\com\\diffplug\\common\\base\\StringPrinter.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Prints the string and a newline (always '\\n'). */\n", "func_signal": "public void println(String line)", "code": "{\n\tconsumer.accept(line);\n\tconsumer.accept(\"\\n\");\n}", "path": "src\\com\\diffplug\\common\\base\\StringPrinter.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Creates a Writer which passes its content to this StringPrinter. */\n", "func_signal": "public Writer toWriter()", "code": "{\n\treturn new Writer() {\n\t\t@Override\n\t\tpublic Writer append(char c) {\n\t\t\tconsumer.accept(new String(new char[]{c}));\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic Writer append(CharSequence csq) {\n\t\t\tif (csq instanceof String) {\n\t\t\t\tconsumer.accept((String) csq);\n\t\t\t} else {\n\t\t\t\tconsumer.accept(toStringSafely(csq));\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic Writer append(CharSequence csq, int start, int end) {\n\t\t\tif (csq instanceof String) {\n\t\t\t\tconsumer.accept(((String) csq).substring(start, end));\n\t\t\t} else {\n\t\t\t\tconsumer.accept(toStringSafely(csq.subSequence(start, end)));\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tprivate String toStringSafely(CharSequence csq) {\n\t\t\tString asString = csq.toString();\n\t\t\tif (asString.length() == csq.length()) {\n\t\t\t\treturn asString;\n\t\t\t} else {\n\t\t\t\t// It's pretty easy to implement CharSequence.toString() incorrectly \n\t\t\t\t// http://stackoverflow.com/a/15870428/1153071\n\t\t\t\t// but for String, we know we won't have them, thus the fast-path above\n\t\t\t\tErrors.log().accept(new IllegalArgumentException(csq.getClass() + \" did not implement toString() correctly.\"));\n\t\t\t\tchar[] chars = new char[csq.length()];\n\t\t\t\tfor (int i = 0; i < chars.length; ++i) {\n\t\t\t\t\tchars[i] = csq.charAt(i);\n\t\t\t\t}\n\t\t\t\treturn new String(chars);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() throws IOException {}\n\n\t\t@Override\n\t\tpublic void flush() throws IOException {}\n\n\t\t@Override\n\t\tpublic void write(char[] cbuf, int off, int len) throws IOException {\n\t\t\tconsumer.accept(new String(cbuf, off, len));\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(String str) {\n\t\t\tconsumer.accept(str);\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(String str, int off, int len) {\n\t\t\tconsumer.accept(str.substring(off, off + len));\n\t\t}\n\t};\n}", "path": "src\\com\\diffplug\\common\\base\\StringPrinter.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Recursively sorts all children using the given comparator of TreeNode. */\n", "func_signal": "public void sortChildrenByNode(Comparator<TreeNode<T>> comparator)", "code": "{\n\tCollections.sort(children, comparator);\n\tfor (TreeNode<T> child : children) {\n\t\tchild.sortChildrenByNode(comparator);\n\t}\n}", "path": "src\\com\\diffplug\\common\\base\\TreeNode.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "// compilation test\n", "func_signal": "public void testIn_compilesWithExplicitSupertype()", "code": "{\n\t\tCollection<Number> nums = ImmutableSet.of();\n\t\tPredicate<Number> p1 = Predicates.in(nums);\n\t\tPredicate<Object> p2 = Predicates.<Object> in(nums);\n\t\t// The next two lines are not expected to compile.\n\t\t// Predicate<Integer> p3 = Predicates.in(nums);\n\t\t// Predicate<Integer> p4 = Predicates.<Integer>in(nums);\n\t}", "path": "test\\com\\diffplug\\common\\base\\PredicatesTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/**\n * Searches breadth-first for the TreeNode with the given content.\n * \n * @throws IllegalArgumentException if no such node exists\n */\n", "func_signal": "public TreeNode<T> findByContent(T content)", "code": "{\n\tOptional<TreeNode<T>> opt = TreeStream.breadthFirst(treeDef(), this).filter(node -> node.getContent().equals(content)).findFirst();\n\tif (opt.isPresent()) {\n\t\treturn opt.get();\n\t} else {\n\t\tthrow new IllegalArgumentException(this.toString() + \" has no child with content \" + content);\n\t}\n}", "path": "src\\com\\diffplug\\common\\base\\TreeNode.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Creates a PrintStream of the given charset, which passes its content to this StringPrinter. */\n", "func_signal": "public PrintStream toPrintStream(Charset charset)", "code": "{\n\treturn Errors.rethrow().get(() -> {\n\t\treturn new PrintStream(toOutputStream(charset), true, charset.name());\n\t});\n}", "path": "src\\com\\diffplug\\common\\base\\StringPrinter.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/** Easy way to create a String using a StringPrinter. */\n", "func_signal": "public static String buildString(Consumer<StringPrinter> printer)", "code": "{\n\tStringBuilder builder = new StringBuilder();\n\tprinter.accept(new StringPrinter(builder::append));\n\treturn builder.toString();\n}", "path": "src\\com\\diffplug\\common\\base\\StringPrinter.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/*\n * Tests for Predicates.equalTo(x).\n */\n", "func_signal": "public void testIsEqualTo_apply()", "code": "{\n\tPredicate<Integer> isOne = Predicates.equalTo(1);\n\n\tassertTrue(isOne.test(1));\n\tassertFalse(isOne.test(2));\n\tassertFalse(isOne.test(null));\n}", "path": "test\\com\\diffplug\\common\\base\\PredicatesTest.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "////////////////\n// Test stuff //\n////////////////\n/**\n * Creates a hierarchy of {@code TreeNode<String>} using an easy-to-read array of strings.\n * <p>\n * Spaces are used to represent parent / child relationships, e.g.\n * <pre>\n * TreeNode&lt;String&gt; root = createTestData(\n *     \"root\",\n *     \" bigNode1\",\n *     \" bigNode2\",\n *     \"  child1\",\n *     \"  child2\",\n *     \" bigNode3\"\n * );\n * </pre>\n * There can only be one root node, and that is the node that is returned.\n */\n", "func_signal": "public static TreeNode<String> createTestData(String... testData)", "code": "{\n\tList<String> test = Arrays.asList(testData);\n\n\t// make the first node (which should have 0 leading spaces)\n\tassert (test.size() > 0);\n\tassert (0 == TreeNode.leadingSpaces(test.get(0)));\n\n\tTreeNode<String> rootNode = new TreeNode<>(null, test.get(0));\n\tTreeNode<String> lastNode = rootNode;\n\tint lastSpaces = 0;\n\n\tfor (int i = 1; i < test.size(); ++i) {\n\t\tint newSpaces = TreeNode.leadingSpaces(test.get(i));\n\t\tString name = test.get(i).substring(newSpaces);\n\t\tif (newSpaces == lastSpaces + 1) {\n\t\t\t// one level deeper, so the last guy should be the parent\n\t\t\tlastNode = new TreeNode<>(lastNode, name);\n\t\t\tlastSpaces = newSpaces;\n\t\t} else if (newSpaces <= lastSpaces) {\n\t\t\t// any level back up, or the same level\n\t\t\tTreeNode<String> properParent = lastNode.getParent();\n\t\t\tint diff = lastSpaces - newSpaces;\n\t\t\tfor (int j = 0; j < diff; ++j) {\n\t\t\t\tproperParent = properParent.getParent();\n\t\t\t}\n\t\t\tlastNode = new TreeNode<>(properParent, name);\n\t\t\tlastSpaces = newSpaces;\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Last element \\\"\" + test.get(i - 1) + \"\\\"\"\n\t\t\t\t\t+ \" and this element \\\"\" + test.get(i) + \"\\\" have too many spaces between them.\");\n\t\t}\n\t}\n\treturn rootNode;\n}", "path": "src\\com\\diffplug\\common\\base\\TreeNode.java", "repo_name": "diffplug/durian", "stars": 269, "license": "apache-2.0", "language": "java", "size": 25288}
{"docstring": "/**\n * \u89e6\u6478\u5bf9\u7126\u7684\u8ba1\u7b97\n *\n * @param x\n * @param min\n * @param max\n * @return\n */\n", "func_signal": "private int clamp(int x, int min, int max)", "code": "{\n    if (x < min) {\n        return min;\n    } else if (x > max) {\n        return max;\n    } else {\n        return x;\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\listener\\TextureViewTouchEvent.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u521d\u59cb\u5316\n *\n * @param v\n */\n", "func_signal": "private void initUIAndListener(View v)", "code": "{\n    mTextureView = (MyTextureView) v.findViewById(R.id.textureview);\n    mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);//\u8bbe\u7f6e\u76d1\u542c\u5668\n\n    mSeekBarTextView = (TextView) v.findViewById(R.id.txt_sb_txt);\n    mSeekBarTextView.setVisibility(View.INVISIBLE);\n\n    mWindowTextView = (AnimationTextView) v.findViewById(R.id.txt_window_txt);\n    mWindowTextView.setVisibility(View.INVISIBLE);\n    mWindowTextView.setmAnimation(mScaleWindowAnimation);\n    mWindowTextView.setmMainHandler(mMainHandler);\n\n    mFocusImage = (AnimationImageView) v.findViewById(R.id.img_focus);\n    mFocusImage.setVisibility(View.INVISIBLE);\n    mFocusImage.setmMainHandler(mMainHandler);\n    mFocusImage.setmAnimation(mScaleFocusAnimation);\n\n    mLayoutBottom = (RelativeLayout) v.findViewById(R.id.layout_bottom);\n\n    mLayoutAf = (LinearLayout) v.findViewById(R.id.layout_focus);\n    Switch switchAf = (Switch) v.findViewById(R.id.switch_focus);\n    SeekBar sbAf = (SeekBar) v.findViewById(R.id.sb_focus);\n\n    LinearLayout layoutAe = (LinearLayout) v.findViewById(R.id.layout_ae);\n    Switch switchAe = (Switch) v.findViewById(R.id.switch_ae);\n    SeekBar sbAe = (SeekBar) v.findViewById(R.id.sb_ae);\n\n    LinearLayout layoutAwb = (LinearLayout) v.findViewById(R.id.layout_awb);\n    mAwbSb = (AwbSeekBar) v.findViewById(R.id.sb_awb);\n\n    mLayoutIso = (LinearLayout) v.findViewById(R.id.layout_iso);\n    Switch switchIso = (Switch) v.findViewById(R.id.switch_iso);\n    SeekBar sbIso = (SeekBar) v.findViewById(R.id.sb_iso);\n\n    LinearLayout layoutZoom = (LinearLayout) v.findViewById(R.id.layout_zoom);\n    SeekBar sbZoom = (SeekBar) v.findViewById(R.id.sb_zoom);\n\n    LinearLayout layoutZoom2 = (LinearLayout) v.findViewById(R.id.layout_zoom_2);\n    SeekBar sbZoom2 = (SeekBar) v.findViewById(R.id.sb_zoom_2);\n\n    mLayoutCapture = (RelativeLayout) v.findViewById(R.id.layout_capture);\n\n    ImageView btnSetting = (ImageView) v.findViewById(R.id.btn_setting);\n    final ImageView btnCapture = (ImageView) v.findViewById(R.id.btn_capture);\n    ImageView btnChangeCamera = (ImageView) v.findViewById(R.id.btn_change_camera);\n    ImageView btnFocus = (ImageView) v.findViewById(R.id.btn_focus);\n    ImageView btnAe = (ImageView) v.findViewById(R.id.btn_ae);\n    ImageView btnAwb = (ImageView) v.findViewById(R.id.btn_awb);\n    ImageView btnIso = (ImageView) v.findViewById(R.id.btn_iso);\n    ImageView btnZoom = (ImageView) v.findViewById(R.id.btn_zoom);\n    ImageView btnZoom2 = (ImageView) v.findViewById(R.id.btn_zoom_2);\n    ImageView btnAlbum = (ImageView) v.findViewById(R.id.btn_album);\n    ImageView btnFlashLight = (ImageView) v.findViewById(R.id.btn_flashlight);\n    mBtnEffect = (ImageView) v.findViewById(R.id.btn_effect);\n    mBtnFlash = (ImageView) v.findViewById(R.id.btn_flash);\n    mBtnSense = (ImageView) v.findViewById(R.id.btn_sense);\n\n    btnCapture.setOnTouchListener(new View.OnTouchListener() {\n        @Override\n        public boolean onTouch(View view, MotionEvent event) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_DOWN:\n                    btnCapture.setImageResource(R.drawable.btn_cam_pressed);\n                    try {\n                        takePicture();\n                    } catch (CameraAccessException e) {\n                        e.printStackTrace();\n                    }\n                    Log.i(\"setOnTouchListener\", \"MotionEvent.ACTION_DOWN\");\n                    break;\n                case MotionEvent.ACTION_UP:\n                    btnCapture.setImageResource(R.drawable.btn_cam);\n                    continuePreview();\n                    Log.i(\"setOnTouchListener\", \"MotionEvent.ACTION_UP\");\n                    break;\n            }\n            return true;\n        }\n    });\n    //button\n    btnSetting.setOnClickListener(this);\n    btnChangeCamera.setOnClickListener(this);\n    btnFocus.setOnClickListener(this);\n    btnAe.setOnClickListener(this);\n    btnAwb.setOnClickListener(this);\n    btnIso.setOnClickListener(this);\n    btnZoom.setOnClickListener(this);\n    btnZoom2.setOnClickListener(this);\n    mBtnEffect.setOnClickListener(this);\n    mBtnFlash.setOnClickListener(this);\n    btnAlbum.setOnClickListener(this);\n    mBtnSense.setOnClickListener(this);\n    btnFlashLight.setOnClickListener(this);\n    //switch\n    MyOnCheckedChangeListener myOnClickChangeListener = new MyOnCheckedChangeListener();\n    switchAf.setOnCheckedChangeListener(myOnClickChangeListener);\n    switchAe.setOnCheckedChangeListener(myOnClickChangeListener);\n    switchIso.setOnCheckedChangeListener(myOnClickChangeListener);\n    switchAf.setChecked(true);\n    switchAe.setChecked(true);\n    switchIso.setChecked(true);\n    //seekbar\n    MySeekBarListener listener = new MySeekBarListener();\n    sbAf.setOnSeekBarChangeListener(listener);\n    sbAe.setOnSeekBarChangeListener(listener);\n    sbIso.setOnSeekBarChangeListener(listener);\n    sbZoom.setOnSeekBarChangeListener(listener);\n    sbZoom2.setOnSeekBarChangeListener(listener);\n    sbAf.setEnabled(false);\n    sbIso.setEnabled(false);\n    sbAf.setMax(100);\n    sbAe.setMax(100);\n    sbIso.setMax(100);\n    sbZoom.setMax(100);\n    sbZoom2.setMax(100);\n    sbAf.setProgress(50);\n    sbAe.setProgress(50);\n    sbIso.setProgress(50);\n    sbZoom.setProgress(0);\n    sbZoom2.setProgress(0);\n    //list ,add\n    mLayoutList = new ArrayList<View>();\n    mLayoutList.add(mLayoutBottom);//\u4f4d\u7f6e0\n    mLayoutList.add(mLayoutAf);//\u4f4d\u7f6e1\n    mLayoutList.add(layoutAe);//\u4f4d\u7f6e2\n    mLayoutList.add(layoutAwb);//\u4f4d\u7f6e3\n    mLayoutList.add(mLayoutIso);//\u4f4d\u7f6e4\n    mLayoutList.add(layoutZoom);//\u4f4d\u7f6e5\n    mLayoutList.add(layoutZoom2);//\u4f4d\u7f6e6\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u5c06previewBuilder\u4e2d\u4fee\u6539\u7684\u53c2\u6570\u8bbe\u7f6e\u5230captureBuilder\u4e2d\n */\n", "func_signal": "private void previewBuilder2CaptureBuilder()", "code": "{\n    //AWB\n    mCaptureBuilder.set(CaptureRequest.CONTROL_AWB_MODE, mPreviewBuilder.get(CaptureRequest.CONTROL_AWB_MODE));\n    //AE\n//        if (mPreviewBuilder.get(CaptureRequest.CONTROL_AE_MODE) == CameraMetadata.CONTROL_AE_MODE_OFF) {\n    //\u66dd\u5149\u65f6\u95f4\n    mCaptureBuilder.set(CaptureRequest.SENSOR_EXPOSURE_TIME, mPreviewBuilder.get(CaptureRequest.SENSOR_EXPOSURE_TIME));\n//        } else if (mPreviewBuilder.get(CaptureRequest.CONTROL_AE_MODE) == CameraMetadata.CONTROL_AE_MODE_ON) {\n    //\u66dd\u5149\u589e\u76ca\n    mCaptureBuilder.set(CaptureRequest.CONTROL_AE_EXPOSURE_COMPENSATION, mPreviewBuilder.get(CaptureRequest.CONTROL_AE_EXPOSURE_COMPENSATION));\n//        }\n    //AF\n//        if (mPreviewBuilder.get(CaptureRequest.CONTROL_AF_MODE) == CameraMetadata.CONTROL_AF_MODE_OFF) {\n    //\u624b\u52a8\u805a\u7126\u7684\u503c\n    mCaptureBuilder.set(CaptureRequest.LENS_FOCUS_DISTANCE, mPreviewBuilder.get(CaptureRequest.LENS_FOCUS_DISTANCE));\n//        }\n    //effects\n    mCaptureBuilder.set(CaptureRequest.CONTROL_EFFECT_MODE, mPreviewBuilder.get(CaptureRequest.CONTROL_EFFECT_MODE));\n    //ISO\n    mCaptureBuilder.set(CaptureRequest.SENSOR_SENSITIVITY, mPreviewBuilder.get(CaptureRequest.SENSOR_SENSITIVITY));\n    //AF REGIONS\n    mCaptureBuilder.set(CaptureRequest.CONTROL_AF_REGIONS, mPreviewBuilder.get(CaptureRequest.CONTROL_AF_REGIONS));\n//        mCaptureBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER, CameraMetadata.CONTROL_AF_TRIGGER_START);\n    //AE REGIONS\n    mCaptureBuilder.set(CaptureRequest.CONTROL_AE_REGIONS, mPreviewBuilder.get(CaptureRequest.CONTROL_AE_REGIONS));\n//        mCaptureBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER, CameraMetadata.CONTROL_AE_PRECAPTURE_TRIGGER_START);\n    //SCENSE\n    mCaptureBuilder.set(CaptureRequest.CONTROL_SCENE_MODE, mPreviewBuilder.get(CaptureRequest.CONTROL_SCENE_MODE));\n    //zoom\n    mCaptureBuilder.set(CaptureRequest.SCALER_CROP_REGION, mPreviewBuilder.get(CaptureRequest.SCALER_CROP_REGION));\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u5173\u95ed\u76f8\u673a\n */\n", "func_signal": "private void closeCamera()", "code": "{\n    if (null != mCameraDevice) {\n        mCameraDevice.close();\n        mCameraDevice = null;\n    }\n    if (mHandler != null) {\n        try {\n            //\u5173\u95ed\u7ebf\u7a0b\n            mHandlerThread.quitSafely();\n            mHandlerThread.join();\n            mHandlerThread = null;\n            mHandler = null;\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u7ee7\u7eed\u9884\u89c8\n */\n", "func_signal": "private void continuePreview()", "code": "{\n    mState = STATE_PREVIEW;\n    try {\n        mCameraDevice.createCaptureSession(Arrays.asList(mSurface), mSessionPreviewStateCallback, mHandler);\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u5f97\u5230CameraCharacteristics\u7b49\u4fe1\u606f\uff0c\u8bbe\u7f6e\u663e\u793a\u5927\u5c0f\n *\n * @throws CameraAccessException\n */\n", "func_signal": "private void setUpCameraOutputs(int width, int height) throws CameraAccessException", "code": "{\n    mFormat = mSp.getInt(\"format\", 256);\n    //\u63cf\u8ff0CameraDevice\u5c5e\u6027\n    mCameraCharacteristics = mCameraManager.getCameraCharacteristics(mCameraId);\n    //\u6d41\u914d\u7f6e\n    StreamConfigurationMap map = mCameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n    if (mCameraId.equals(\"0\") && mFormat == ImageFormat.JPEG) {\n        mlargest = Collections.max(Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)), new CompareSizesByArea());\n        mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class), width, height, mlargest);\n    } else if (mCameraId.equals(\"0\") && mFormat == ImageFormat.RAW_SENSOR) {\n        mlargest = Collections.max(Arrays.asList(map.getOutputSizes(ImageFormat.RAW_SENSOR)), new CompareSizesByArea());\n        mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class), width, height, mlargest);\n    } else {\n//            mPreviewSize = new Size(1280, 720);\n        mlargest = Collections.max(Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)), new CompareSizesByArea());\n        mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class), width, height, mlargest);\n    }\n    int orientation = getResources().getConfiguration().orientation;\n    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {\n        mTextureView.fitWindow(mPreviewSize.getWidth(), mPreviewSize.getHeight());\n    } else {\n        mTextureView.fitWindow(mPreviewSize.getHeight(), mPreviewSize.getWidth());\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u5b98\u65b9sample\u4e2d\u7684\n *\n * @param viewWidth\n * @param viewHeight\n */\n", "func_signal": "private void configureTransform(int viewWidth, int viewHeight)", "code": "{\n    Activity activity = getActivity();\n    if (null == mTextureView || null == mPreviewSize || null == activity) {\n        return;\n    }\n    int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n    Matrix matrix = new Matrix();\n    RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);\n    RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());\n    float centerX = viewRect.centerX();\n    float centerY = viewRect.centerY();\n    if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {\n        bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());\n        matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);\n        float scale = Math.max(\n                (float) viewHeight / mPreviewSize.getHeight(),\n                (float) viewWidth / mPreviewSize.getWidth());\n        matrix.postScale(scale, scale, centerX, centerY);\n        matrix.postRotate(90 * (rotation - 2), centerX, centerY);\n    }\n    mTextureView.setTransform(matrix);\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * Sets the aspect ratio for this view. The size of the view will be measured based on the ratio\n * calculated from the parameters. Note that the actual sizes of parameters don't matter, that\n * is, calling setAspectRatio(2, 3) and setAspectRatio(4, 6) make the same result.\n *\n * @param width  Relative horizontal size\n * @param height Relative vertical size\n */\n", "func_signal": "public void setAspectRatio(int width, int height)", "code": "{\n    if (width < 0 || height < 0) {\n        throw new IllegalArgumentException(\"Size cannot be negative.\");\n    }\n    mRatioWidth = width;\n    mRatioHeight = height;\n    requestLayout();\n}", "path": "camera2\\src\\main\\java\\us\\yydcdut\\camera2\\view\\AutoFitTextureView.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u4fdd\u5b58\n *\n * @param bytes\n * @param file\n * @throws java.io.IOException\n */\n", "func_signal": "private void save(byte[] bytes, File file) throws IOException", "code": "{\n    Log.i(\"JpegSaver\", \"save\");\n    OutputStream os = null;\n    try {\n        os = new FileOutputStream(file);\n        os.write(bytes);\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (os != null) {\n            os.close();\n        }\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\listener\\JpegReaderListener.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u4fdd\u5b58\n *\n * @param bytes\n * @param file\n * @throws java.io.IOException\n */\n", "func_signal": "private void save(byte[] bytes, File file) throws IOException", "code": "{\n    Log.i(\"JpegSaver\", \"save\");\n    OutputStream os = null;\n    try {\n        os = new FileOutputStream(file);\n        os.write(bytes);\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (os != null) {\n            os.close();\n        }\n    }\n}", "path": "camera2\\src\\main\\java\\us\\yydcdut\\camera2\\ImageSaver.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u521b\u5efajpeg\u7684\u6587\u4ef6\n *\n * @return\n */\n", "func_signal": "private File createJpeg()", "code": "{\n    long time = System.currentTimeMillis();\n    int random = new Random().nextInt(1000);\n    File dir = new File(Environment.getExternalStorageDirectory() + \"/Android_L_Test/jpeg/\");\n    Log.i(\"JpegSaver\", time + \"_\" + random + \".jpg\");\n    return new File(dir, time + \"_\" + random + \".jpg\");\n}", "path": "camera2\\src\\main\\java\\us\\yydcdut\\camera2\\ImageSaver.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u521d\u59cb\u5316seekbar\u4e0a\u7684\u4e00\u4e9b\u53c2\u6570\n */\n", "func_signal": "private void initSeekBarValue()", "code": "{\n    valueAF = 5.0f;\n    valueAETime = (214735991 - 13231) / 2;\n    valueISO = (10000 - 100) / 2;\n    valueAE = 0;\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u521d\u59cb\u5316&&\u663e\u793adialog\n */\n", "func_signal": "private void initDialogLoading()", "code": "{\n    View v = getLayoutInflater().inflate(R.layout.loading_dialog, null);\n    ImageView imageView = (ImageView) v.findViewById(R.id.img_loading);\n    LinearLayout linearLayout = (LinearLayout) v.findViewById(R.id.liner_dialog);\n    Animation animation = AnimationUtils.loadAnimation(MyActivity.this, R.anim.dialog_loading);\n    imageView.setAnimation(animation);\n    mDialog = new Dialog(MyActivity.this, R.style.loading_dialog);\n    mDialog.setCancelable(false);\n    mDialog.setContentView(linearLayout, new LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.FILL_PARENT,\n            LinearLayout.LayoutParams.FILL_PARENT));\n    if (mDialog != null && !mDialog.isShowing()) {\n        mDialog.show();\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\MyActivity.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u8bbe\u7f6e\u7126\u76d1\u542c\u5668\n * TextureView\u7684touch\n * awbseekbar\u7684change\n */\n", "func_signal": "private void setListener()", "code": "{\n    //\u5f00\u59cb\u663e\u793a\u7684\u65f6\u5019\u5c06\u89e6\u6478\u53d8\u7126\u76d1\u542c\u5668\u8bbe\u7f6e\u4e86\n    mTextureView.setmMyTextureViewTouchEvent(new TextureViewTouchEvent(mCameraCharacteristics, mTextureView, mPreviewBuilder, mCameraCaptureSession, mHandler, mPreviewSessionCallback));\n    mAwbSb.setmOnAwbSeekBarChangeListener(new AwbSeekBarChangeListener(getActivity(), mSeekBarTextView, mPreviewBuilder, mCameraCaptureSession, mHandler, mPreviewSessionCallback));\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u5f00\u59cbPreview\n */\n", "func_signal": "private void startPreview()", "code": "{\n    try {\n        mPreviewBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\n        //TEMPLATE_PREVIEW--->\u521b\u5efa\u4e00\u4e2a\u8bf7\u6c42\u9002\u5408\u76f8\u673a\u9884\u89c8\u7a97\u53e3\u3002\n        mPreviewBuilder.addTarget(mSurface);\n        //\u521d\u59cb\u5316\u53c2\u6570\n        initPreviewBuilder();\n        //3A--->auto\n        mPreviewBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);\n        //3A\n        mPreviewBuilder.set(CaptureRequest.CONTROL_AF_MODE, CameraMetadata.CONTROL_AF_MODE_AUTO);\n        mPreviewBuilder.set(CaptureRequest.CONTROL_AE_MODE, CameraMetadata.CONTROL_AE_MODE_ON);\n        mPreviewBuilder.set(CaptureRequest.CONTROL_AWB_MODE, CameraMetadata.CONTROL_AWB_MODE_AUTO);\n        //\u521b\u5efa\u62cd\u7167\u4f1a\u8bdd\uff0c\u4e00\u65e6CameraCaptureSession\u521b\u5efa,\u53ef\u4ee5\u63d0\u4ea4\u8bf7\u6c42\uff08capture\u3001captureBurst,\u6216setRepeatingBurst\uff09\u3002\n        mState = STATE_PREVIEW;\n        mCameraDevice.createCaptureSession(Arrays.asList(mSurface), mSessionPreviewStateCallback, mHandler);\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u5224\u65ad\u7236\u6587\u4ef6\u662f\u5426\u5b58\u5728\n */\n", "func_signal": "private void checkParentDir()", "code": "{\n    File dir = new File(Environment.getExternalStorageDirectory() + \"/Android_L_Test/\");\n    if (!dir.exists()) {\n        dir.mkdir();\n    }\n}", "path": "camera2\\src\\main\\java\\us\\yydcdut\\camera2\\ImageSaver.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u521b\u5efajpeg\u7684\u6587\u4ef6\n *\n * @return\n */\n", "func_signal": "private File createJpeg()", "code": "{\n    long time = System.currentTimeMillis();\n    int random = new Random().nextInt(1000);\n    File dir = new File(Environment.getExternalStorageDirectory() + \"/Android_L_Test/jpeg/\");\n    Log.i(\"JpegSaver\", time + \"_\" + random + \".jpg\");\n    return new File(dir, time + \"_\" + random + \".jpg\");\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\listener\\JpegReaderListener.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u83b7\u5f97mFocusImage\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\n */\n", "func_signal": "private void initFocusImage()", "code": "{\n    RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);\n    layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n    mFocusImage.setLayoutParams(layoutParams);\n    mFocusImage.initFocus();\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\ui\\DisplayFragment.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u5224\u65ad\u6587\u4ef6\u5939\u662f\u5426\u5b58\u5728\n */\n", "func_signal": "private void checkJpegDir()", "code": "{\n    File dir = new File(Environment.getExternalStorageDirectory() + \"/Android_L_Test/jpeg/\");\n    if (!dir.exists()) {\n        dir.mkdir();\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\listener\\JpegReaderListener.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * \u66f4\u65b0\u9884\u89c8\n */\n", "func_signal": "private void updatePreview()", "code": "{\n    try {\n        mCameraCaptureSession.setRepeatingRequest(mPreviewBuilder.build(), mPreviewSessionCallback, mHandler);\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    } catch (Exception e) {\n        e.printStackTrace();\n        Log.i(\"updatePreview\", \"ExceptionExceptionException\");\n    }\n}", "path": "app\\src\\main\\java\\us\\yydcdut\\androidltest\\listener\\TextureViewTouchEvent.java", "repo_name": "pinguo-yuyidong/Camera2", "stars": 413, "license": "None", "language": "java", "size": 1172}
{"docstring": "/**\n * Constructs a {@code SafeOnClickListener} which logs thrown Throwables.\n *\n * @param logTag     The tag used to log\n * @param logMessage The message to log before the stack trace\n */\n", "func_signal": "public SafeOnClickListener(String logTag, String logMessage)", "code": "{\n    mLogTag = logTag;\n    mLogMessage = logMessage;\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\misc\\SafeOnClickListener.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/* ScrimController stuff */\n", "func_signal": "public static void setScrimBehind(Object scrimController)", "code": "{\n    mScrimBehind = (View) XposedHelpers.getObjectField(scrimController, \"mScrimBehind\");\n    mScrimBehindHelper = ScrimHelper.getInstance(mScrimBehind);\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\systemui\\notifications\\ScrimHelper.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Set the color that should be shown by this view.\n *\n * @param color\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n    mColor = color;\n    invalidate();\n}", "path": "app\\src\\main\\java\\net\\margaritov\\preference\\colorpicker\\ColorPickerPanelView.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Adds the AutoCompleteTextView widget of this preference to the dialog's view.\n *\n * @param dialogView The dialog view.\n */\n", "func_signal": "protected void onAddEditTextToDialogView(View dialogView, AutoCompleteTextView editText)", "code": "{\n    ViewGroup container = (ViewGroup) dialogView\n            .findViewById(R.id.autocomplete_edittext_container);\n    if (container != null) {\n        container.addView(editText, ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.WRAP_CONTENT);\n    }\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\preferences\\AutoCompleteEditTextPreference.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Instantiates a ContactPreference that displays an emergency contact, taking in a Context and\n * the Uri.\n */\n", "func_signal": "public ContactPreference(Context context, @NonNull Uri contactUri)", "code": "{\n    super(context);\n    setOrder(DEFAULT_ORDER);\n\n    setUri(contactUri);\n\n    setWidgetLayoutResource(R.layout.preference_user_delete_widget);\n    setPersistent(false);\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\preferences\\ContactPreference.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Calls the contact.\n */\n", "func_signal": "public void callContact()", "code": "{\n    Intent callIntent =\n            new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:\" + mContact.getPhoneNumber()));\n    if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {\n        // TODO: Consider calling\n        //    ActivityCompat#requestPermissions\n        // here to request the missing permissions, and then overriding\n        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n        //                                          int[] grantResults)\n        // to handle the case where the user grants the permission. See the documentation\n        // for ActivityCompat#requestPermissions for more details.\n        return;\n    }\n    getContext().startActivity(callIntent);\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\preferences\\ContactPreference.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/** Shows the dialog to remove the contact, restoring it from {@code state} if it's not null. */\n", "func_signal": "private void showRemoveContactDialog(Bundle state)", "code": "{\n    if (mRemoveContactDialog == null) {\n        return;\n    }\n    if (state != null) {\n        mRemoveContactDialog.onRestoreInstanceState(state);\n    }\n    mRemoveContactDialog.show();\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\preferences\\ContactPreference.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Constructs a {@code SafeRunnable} which logs thrown Throwables.\n *\n * @param logTag The tag used to log\n * @param logMessage The message to log before the stack trace\n */\n", "func_signal": "public SafeRunnable(String logTag, String logMessage)", "code": "{\n    mLogTag = logTag;\n    mLogMessage = logMessage;\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\misc\\SafeRunnable.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/** Listener to be informed when a contact preference should be deleted. */\n", "func_signal": "public void setRemoveContactPreferenceListener(\n        RemoveContactPreferenceListener removeContactListener)", "code": "{\n    mRemoveContactPreferenceListener = removeContactListener;\n    if (mRemoveContactPreferenceListener == null) {\n        mRemoveContactDialog = null;\n        return;\n    }\n    if (mRemoveContactDialog != null) {\n        return;\n    }\n    // Create the remove contact dialog\n    AlertDialog.Builder builder = new AlertDialog.Builder(getContext());\n    builder.setNegativeButton(getContext().getString(R.string.cancel), null);\n    builder.setPositiveButton(getContext().getString(R.string.remove),\n            new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialogInterface,\n                                    int which) {\n                    if (mRemoveContactPreferenceListener != null) {\n                        mRemoveContactPreferenceListener\n                                .onRemoveContactPreference(ContactPreference.this);\n                    }\n                }\n            });\n    builder.setMessage(String.format(getContext().getString(R.string.remove_contact),\n            mContact.getName()));\n    mRemoveContactDialog = builder.create();\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\preferences\\ContactPreference.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * @param timeZone the timezone we are in\n * @return the timepoint in millis at UTC at midnight in the current timezone\n */\n", "func_signal": "private long computeNextMidnight(TimeZone timeZone)", "code": "{\n    Calendar c = Calendar.getInstance();\n    c.add(Calendar.DAY_OF_MONTH, 1);\n    c.set(Calendar.HOUR_OF_DAY, 0);\n    c.set(Calendar.MINUTE, 0);\n    c.set(Calendar.SECOND, 0);\n    c.set(Calendar.MILLISECOND, 0);\n    return c.getTimeInMillis();\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\systemui\\notifications\\RelativeDateTimeView.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Saves the text to the {@link SharedPreferences}.\n *\n * @param text The text to save\n */\n", "func_signal": "public void setText(String text)", "code": "{\n    // Always persist/notify the first time.\n    final boolean changed = !TextUtils.equals(mText, text);\n    if (changed || !mTextSet) {\n        mText = text;\n        mTextSet = true;\n        persistString(text);\n        if (changed) {\n            notifyDependencyChange(shouldDisableDependents());\n            notifyChanged();\n        }\n    }\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\preferences\\AutoCompleteEditTextPreference.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/** Reloads all the preferences by reading the value from the shared preferences. */\n", "func_signal": "public void reloadFromPreference()", "code": "{\n    for (String preferenceKey : PreferenceKeys.KEYS_EDIT_EMERGENCY_INFO) {\n        ReloadablePreferenceInterface preference = (ReloadablePreferenceInterface)\n                findPreference(preferenceKey);\n        if (preference != null) {\n            preference.reloadFromPreference();\n        }\n    }\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\edit\\EditEmergencyInfoFragment.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "//private int mColor = 0xff000000;\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_add_tile);\n\n    mWarning = (TextView) findViewById(R.id.warning);\n    mSpec = (EditText) findViewById(R.id.spec);\n\n    findViewById(R.id.dim).setOnClickListener(this);\n    findViewById(R.id.qs_up).setOnClickListener(this);\n    findViewById(R.id.add).setOnClickListener(this);\n\n    updateBackgroundColor();\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\AddTileActivity.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Displays a contact card for the contact.\n */\n", "func_signal": "public void displayContact()", "code": "{\n    Intent contactIntent = new Intent(Intent.ACTION_VIEW);\n    contactIntent.setData(mContact.getContactLookupUri());\n    getContext().startActivity(contactIntent);\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\preferences\\ContactPreference.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * DON'T OVERRIDE THIS! Override {@link #runSafe()} instead.\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    try {\n        runSafe();\n    } catch (Throwable t) {\n        if (mLogTag != null) XposedHook.logE(mLogTag, mLogMessage, t);\n    }\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\misc\\SafeRunnable.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * DON'T OVERRIDE THIS! Override {@link #onClickSafe(View)} instead.\n */\n", "func_signal": "@Override\npublic void onClick(View v)", "code": "{\n    try {\n        onClickSafe(v);\n    } catch (Throwable t) {\n        if (mLogTag != null) XposedHook.logE(mLogTag, mLogMessage, t);\n    }\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\misc\\SafeOnClickListener.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "// Return the date difference for the two times in a given timezone.\n", "func_signal": "private static int dayDistance(TimeZone timeZone, long startTime,\n                               long endTime)", "code": "{\n    return getJulianDay(endTime, timeZone.getOffset(endTime) / 1000)\n            - getJulianDay(startTime, timeZone.getOffset(startTime) / 1000);\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\systemui\\notifications\\RelativeDateTimeView.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Returns a {@link Contact} that contains all the relevant information of the contact indexed\n * by {@code @contactUri}.\n */\n", "func_signal": "public static Contact getContact(Context context, Uri contactUri)", "code": "{\n    String phoneNumber = null;\n    String phoneType = null;\n    String name = null;\n    Bitmap photo = null;\n    final Uri contactLookupUri =\n            ContactsContract.Contacts.getLookupUri(context.getContentResolver(),\n                    contactUri);\n    Cursor cursor = context.getContentResolver().query(\n            contactUri,\n            new String[]{ContactsContract.Contacts.DISPLAY_NAME,\n                    ContactsContract.CommonDataKinds.Phone.NUMBER,\n                    ContactsContract.CommonDataKinds.Phone.TYPE,\n                    ContactsContract.CommonDataKinds.Phone.LABEL,\n                    ContactsContract.CommonDataKinds.Photo.PHOTO_ID},\n            null, null, null);\n    try {\n        if (cursor.moveToNext()) {\n            name = cursor.getString(0);\n            phoneNumber = cursor.getString(1);\n            phoneType = ContactsContract.CommonDataKinds.Phone.getTypeLabel(\n                    context.getResources(),\n                    cursor.getInt(2),\n                    cursor.getString(3)).toString();\n            Long photoId = cursor.getLong(4);\n            if (photoId != null && photoId > 0) {\n                Uri photoUri = ContentUris.withAppendedId(ContactsContract.Data.CONTENT_URI,\n                        photoId);\n                Cursor cursor2 = context.getContentResolver().query(\n                        photoUri,\n                        new String[]{ContactsContract.Contacts.Photo.PHOTO},\n                        null, null, null);\n                try {\n                    if (cursor2.moveToNext()) {\n                        byte[] data = cursor2.getBlob(0);\n                        photo = BitmapFactory.decodeStream(new ByteArrayInputStream(data));\n                    }\n                } finally {\n                    if (cursor2 != null) {\n                        cursor2.close();\n                    }\n                }\n            }\n        }\n    } finally {\n        if (cursor != null) {\n            cursor.close();\n        }\n    }\n    return new Contact(contactLookupUri, contactUri, name, phoneNumber, phoneType, photo);\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\EmergencyContactManager.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * Set the color of the border surrounding the panel.\n *\n * @param color\n */\n", "func_signal": "public void setBorderColor(int color)", "code": "{\n    mBorderColor = color;\n    invalidate();\n}", "path": "app\\src\\main\\java\\net\\margaritov\\preference\\colorpicker\\ColorPickerPanelView.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/** Constructs a new contact. */\n", "func_signal": "public Contact(Uri contactLookupUri,\n               Uri contactUri,\n               String name,\n               String phoneNumber,\n               String phoneType,\n               Bitmap photo)", "code": "{\n    mContactLookupUri = contactLookupUri;\n    mContactUri = contactUri;\n    mName = name;\n    mPhoneNumber = phoneNumber;\n    mPhoneType = phoneType;\n    mPhoto = photo;\n}", "path": "app\\src\\main\\java\\tk\\wasdennnoch\\androidn_ify\\ui\\emergency\\EmergencyContactManager.java", "repo_name": "wasdennnoch/AndroidN-ify", "stars": 267, "license": "None", "language": "java", "size": 44693}
{"docstring": "/**\n * This is a wrapper around the new stopForeground method, using the older\n * APIs if it is not available.\n */\n", "func_signal": "private void stopForegroundCompat(int id)", "code": "{\n    // If we have the new stopForeground API, then use it.\n    if (mStopForeground != null) {\n        try {\n            mStopForeground.invoke(this, Boolean.TRUE);\n        } catch (InvocationTargetException e) {\n            // Should not happen.\n            log.d(e, \"Unable to invoke stopForeground\");\n        } catch (IllegalAccessException e) {\n            // Should not happen.\n            log.d(e, \"Unable to invoke stopForeground\");\n        }\n        return;\n    }\n\n    // Fall back on the old API.  Note to cancel BEFORE changing the\n    // foreground state, since we could be killed at that point.\n    mNM.cancel(id);\n    if (mSetForeground != null) {\n    \ttry {\n\t\t\tmSetForeground.invoke(this, Boolean.FALSE);\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// Should not happen.\n            log.d(e, \"Unable to invoke setForeground\");\n\t\t} catch (InvocationTargetException e) {\n\t\t\t// Should not happen.\n            log.d(e, \"Unable to invoke setForeground\");\n\t\t}\n    }\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\LogcatRecordingService.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Sorts the content of this adapter using the specified comparator.\n *\n * @param comparator The comparator used to sort the objects contained\n *        in this adapter.\n */\n", "func_signal": "public void sort(Comparator<? super LogLine> comparator)", "code": "{\n\tthis.mComparator = comparator;\n    Collections.sort(mObjects, comparator);\n    if (mNotifyOnChange) notifyDataSetChanged();        \n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\data\\LogLineAdapter.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Get all the log filenames, order by last modified descending\n * @return\n */\n", "func_signal": "public static List<String> getLogFilenames()", "code": "{\n\t\n\tFile catlogDir = getSavedLogsDirectory();\n\t\n\tFile[] filesArray = catlogDir.listFiles();\n\t\n\tif (filesArray == null) {\n\t\treturn Collections.emptyList();\n\t}\n\t\n\tList<File> files = new ArrayList<File>(Arrays.asList(filesArray));\n\t\n\tCollections.sort(files, new Comparator<File>(){\n\n\t\t@Override\n\t\tpublic int compare(File object1, File object2) {\n\t\t\treturn new Long(object2.lastModified()).compareTo(object1.lastModified());\n\t\t}});\n\t\n\tList<String> result = new ArrayList<String>();\n\t\n\tfor (File file : files) {\n\t\tresult.add(file.getName());\n\t}\n\t\n\treturn result;\n\t\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\helper\\SaveLogHelper.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/*\n    * Replace all occurances of the searchString in the originalString with the replaceString.  Faster than the\n    * String.replace() method.  Does not use regexes.\n    * <p/>\n    * If your searchString is empty, this will spin forever.\n    *\n    *\n    * @param originalString\n    * @param searchString\n    * @param replaceString\n    * @return\n    */\n", "func_signal": "public static String replace(String originalString, String searchString, String replaceString)", "code": "{\n       StringBuilder sb = new StringBuilder(originalString);\n       int index = sb.indexOf(searchString);\n       while (index != -1) {\n           sb.replace(index, index + searchString.length(), replaceString);\n           index += replaceString.length();\n           index = sb.indexOf(searchString, index);\n       }\n       return sb.toString();\n   }", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\util\\StringUtil.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "// This is the old onStart method that will be called on the pre-2.0\n// platform.\n", "func_signal": "@Override\npublic void onStart(Intent intent, int startId)", "code": "{\n\tlog.d(\"onStart()\");\n\tsuper.onStart(intent, startId);\n    handleCommand(intent);\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\LogcatRecordingService.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public int getCount()", "code": "{\n\tsynchronized (mLock) {\n\t\treturn mObjects.size();\n\t}\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\data\\LogLineAdapter.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n     * {@inheritDoc}\n     */\n", "func_signal": "public Filter getFilter()", "code": "{\n        if (mFilter == null) {\n            mFilter = new ArrayFilter();\n        }\n        return mFilter;\n    }", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\data\\LogLineAdapter.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Remove all elements from the list.\n */\n", "func_signal": "public void clear()", "code": "{\n    if (mOriginalValues != null) {\n        synchronized (mLock) {\n            mOriginalValues.clear();\n            mObjects.clear();\n        }\n    } else {\n        mObjects.clear();\n    }\n    if (mNotifyOnChange) notifyDataSetChanged();\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\data\\LogLineAdapter.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Copies all bytes from the input stream to the output stream. Does not\n * close or flush either stream.\n * \n * Taken from Google Guava ByteStreams.java\n * \n * @param from\n *            the input stream to read from\n * @param to\n *            the output stream to write to\n * @return the number of bytes copied\n * @throws IOException\n *             if an I/O error occurs\n */\n", "func_signal": "private static long copy(InputStream from, OutputStream to)\tthrows IOException", "code": "{\n\tbyte[] buf = new byte[BUFFER];\n\tlong total = 0;\n\twhile (true) {\n\t\tint r = from.read(buf);\n\t\tif (r == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tto.write(buf, 0, r);\n\t\ttotal += r;\n\t}\n\treturn total;\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\helper\\SaveLogHelper.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Adds the specified object at the end of the array.\n *\n * @param object The object to add at the end of the array.\n */\n", "func_signal": "public void add(LogLine object)", "code": "{\n    if (mOriginalValues != null) {\n        synchronized (mLock) {\n            mOriginalValues.add(object);\n            mObjects.add(object);\n            \n            if (mNotifyOnChange) notifyDataSetChanged();\n        }\n    } else {\n        mObjects.add(object);\n        if (mNotifyOnChange) notifyDataSetChanged();\n    }\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\data\\LogLineAdapter.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Exec the arguments, using root if necessary.\n * @param args\n */\n", "func_signal": "public static Process exec(List<String> args) throws IOException", "code": "{\n\t// since JellyBean, sudo is required to read other apps' logs\n\tif (VersionHelper.getVersionSdkIntCompat() >= VersionHelper.VERSION_JELLYBEAN\n\t\t\t&& !SuperUserHelper.isFailedToObtainRoot()) {\n\t\tProcess process = Runtime.getRuntime().exec(\"su\");\n\t\t\n\t\tPrintStream outputStream = null;\n\t\ttry {\n\t\t\toutputStream = new PrintStream(new BufferedOutputStream(process.getOutputStream(), 8192));\n\t\t\toutputStream.println(TextUtils.join(\" \", args));\n\t\t\toutputStream.flush();\n\t\t} finally {\n\t\t\tif (outputStream != null) {\n\t\t\t\toutputStream.close();\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn process;\n\t}\n\treturn Runtime.getRuntime().exec(ArrayUtil.toArray(args, String.class));\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\helper\\RuntimeHelper.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * This is a wrapper around the new startForeground method, using the older\n * APIs if it is not available.\n */\n", "func_signal": "private void startForegroundCompat(int id, Notification notification)", "code": "{\n    // If we have the new startForeground API, then use it.\n    if (mStartForeground != null) {\n        try {\n            mStartForeground.invoke(this, Integer.valueOf(id), notification);\n        } catch (InvocationTargetException e) {\n            // Should not happen.\n            log.d(e, \"Unable to invoke startForeground\");\n        } catch (IllegalAccessException e) {\n            // Should not happen.\n            log.d(e, \"Unable to invoke startForeground\");\n        }\n        return;\n    }\n\n    // Fall back on the old API.\n    if (mSetForeground != null) {\n    \ttry {\n\t\t\tmSetForeground.invoke(this, Boolean.TRUE);\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// Should not happen.\n            log.d(e, \"Unable to invoke setForeground\");\n\t\t} catch (InvocationTargetException e) {\n\t\t\t// Should not happen.\n            log.d(e, \"Unable to invoke setForeground\");\n\t\t}\n    }\n    mNM.notify(id, notification);\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\LogcatRecordingService.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * same as the String.split(), except it doesn't use regexes, so it's faster.\n *\n * @param str       - the string to split up\n * @param delimiter the delimiter\n * @return the split string\n */\n", "func_signal": "public static String[] split(String str, String delimiter)", "code": "{\n    List<String> result = new ArrayList<String>();\n    int lastIndex = 0;\n    int index = str.indexOf(delimiter);\n    while (index != -1) {\n        result.add(str.substring(lastIndex, index));\n        lastIndex = index + delimiter.length();\n        index = str.indexOf(delimiter, index + delimiter.length());\n    }\n    result.add(str.substring(lastIndex, str.length()));\n\n    return ArrayUtil.toArray(result, String.class);\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\util\\StringUtil.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * I used to save logs to /sdcard/catlog_saved_logs.  Now it's /sdcard/catlog/saved_logs.  Move any files that\n * need to be moved to the new directory.\n * \n * @param sdcardDir\n * @param savedLogsDir\n */\n", "func_signal": "public static synchronized void moveLogsFromLegacyDirIfNecessary()", "code": "{\n\tFile sdcardDir = Environment.getExternalStorageDirectory();\n\tFile legacyDir = new File(sdcardDir, LEGACY_SAVED_LOGS_DIR);\n\t\n\t\n\tif (legacyDir.exists() && legacyDir.isDirectory()) {\n\t\tFile savedLogsDir = getSavedLogsDirectory();\n\t\tfor (File file : legacyDir.listFiles()) {\n\t\t\tfile.renameTo(new File(savedLogsDir, file.getName()));\n\t\t}\n\t\tlegacyDir.delete();\n\t}\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\helper\\SaveLogHelper.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "// copied from Java 6 source\n", "func_signal": "public static int[] copyOfRange(int[] original, int start, int end)", "code": "{\n         if (start <= end) {\n             if (original.length >= start && 0 <= start) {\n                 int length = end - start;\n                 int copyLength = Math.min(length, original.length - start);\n                 int[] copy = new int[length];\n                 System.arraycopy(original, start, copy, 0, copyLength);\n                 return copy;\n             }\n             throw new ArrayIndexOutOfBoundsException();\n         }\n         throw new IllegalArgumentException();\n     }", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\util\\ArrayUtil.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Pad the specified number of spaces to the input string to make it that length\n * @param input\n * @param size\n * @return\n */\n", "func_signal": "public static String padLeft(String input, int size)", "code": "{\n\t\n\tif (input.length() > size) {\n\t\tthrow new IllegalArgumentException(\"input must be shorter than or equal to the number of spaces: \" + size);\n\t}\n\t\n\tStringBuilder sb = new StringBuilder();\n\tfor (int i = input.length(); i < size; i ++) {\n\t\tsb.append(\" \");\n\t}\n\treturn sb.append(input).toString();\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\util\\StringUtil.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Optimization for when you have TextViews that truncate, per\n * http://www.martinadamek.com/2011/01/05/performance-of-android-listview-containing-textviews/\n * @param str\n * @param textView\n * @return\n */\n", "func_signal": "private CharSequence ellipsizeString(CharSequence str, TextView textView)", "code": "{\n\t\n\tint width = textView.getWidth() - textView.getCompoundPaddingLeft() - textView.getCompoundPaddingRight();\n\t\n\t\treturn ellipsizeString(str, width, textView.getPaint());\n\t}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\data\\LogLineAdapter.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * manually tell us if the service is running or not\n * @param context\n * @param serviceRunning\n */\n", "func_signal": "public static void updateWidgets(Context context, boolean serviceRunning)", "code": "{\n\n\tint[] appWidgetIds = findAppWidgetIds(context);\n\t\n\tupdateWidgets(context, appWidgetIds, serviceRunning);\n\t\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\helper\\WidgetHelper.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * Return true if we have root in jelly bean.\n * @param context\n * @return\n */\n", "func_signal": "public static boolean getJellybeanRootRan(Context context)", "code": "{\n\tSharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n\treturn sharedPrefs.getBoolean(context.getString(R.string.pref_ran_jellybean_su_update), false);\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\helper\\PreferenceHelper.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * same as String.contains, but ignores case.\n * @param str\n * @param query\n * @return\n */\n", "func_signal": "public static boolean containsIgnoreCase(String str, String query)", "code": "{\n\tif (str != null && query != null) {\n\t\tint limit = str.length() - query.length() + 1;\n\t\tfor (int i = 0; i < limit; i++) {\n\t\t\tif (matchesIgnoreCase(str, query, i)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "path": "Catlog\\src\\com\\nolanlawson\\logcat\\util\\StringUtil.java", "repo_name": "nolanlawson/Catlog", "stars": 474, "license": "None", "language": "java", "size": 2598}
{"docstring": "/**\n * \u751f\u6210\u6587\u672c\u8f93\u5165\u6846\n */\n", "func_signal": "private EditText createEditText(String hint)", "code": "{\n    EditText editText = new SEDeletableEditText(getContext());\n    editText.setTag(viewTagID++);\n    editText.setHint(hint);\n    editText.setGravity(Gravity.TOP);\n    editText.setCursorVisible(true);\n    editText.setBackgroundResource(android.R.color.transparent);\n    editText.setTextColor(Color.parseColor(\"#333333\"));\n    editText.setTextSize(14);\n    editText.setOnKeyListener(editTextKeyListener);\n    editText.setOnFocusChangeListener(focusListener);\n\n    // \u8c03\u6574EditText\u7684\u5916\u8fb9\u8ddd\n    LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(\n            LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n    lp.bottomMargin = DEFAULT_MARGING;\n    lp.leftMargin = DEFAULT_MARGING;\n    lp.rightMargin= DEFAULT_MARGING;\n    editText.setLayoutParams(lp);\n\n    return editText;\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u63d2\u5165\u4e00\u5f20\u56fe\u7247\n */\n", "func_signal": "private void insertImage(String imagePath)", "code": "{\n    String lastEditStr = lastFocusEdit.getText().toString();\n    int cursorIndex = lastFocusEdit.getSelectionStart();\n    String lastStr = lastEditStr.substring(0, cursorIndex).trim();\n    int lastEditIndex = containerLayout.indexOfChild(lastFocusEdit);\n\n    if (lastEditStr.length() == 0 || lastStr.length() == 0) {\n        // \u5982\u679cEditText\u4e3a\u7a7a\uff0c\u6216\u8005\u5149\u6807\u5df2\u7ecf\u9876\u5728\u4e86editText\u7684\u6700\u524d\u9762\uff0c\u5219\u76f4\u63a5\u63d2\u5165\u56fe\u7247\uff0c\u5e76\u4e14EditText\u4e0b\u79fb\u5373\u53ef\n        insertImageViewAtIndex(lastEditIndex, imagePath, false);\n    } else {\n        // \u5982\u679cEditText\u975e\u7a7a\u4e14\u5149\u6807\u4e0d\u5728\u6700\u9876\u7aef\uff0c\u5219\u9700\u8981\u6dfb\u52a0\u65b0\u7684imageView\u548cEditText\n        lastFocusEdit.setText(lastStr);\n        String editStr2 = lastEditStr.substring(cursorIndex).trim();\n        if (containerLayout.getChildCount() - 1 == lastEditIndex || editStr2.length() > 0) {\n            lastFocusEdit = insertEditTextAtIndex(lastEditIndex + 1, editStr2);\n            lastFocusEdit.requestFocus();\n            lastFocusEdit.setSelection(0);\n        }\n        insertImageViewAtIndex(lastEditIndex + 1, imagePath, false);\n    }\n    processSoftKeyBoard(false);\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u83b7\u53d6\u6392\u5e8f\u4e4b\u524d\u5b50View\u7684LayoutParams\u7528\u4e8e\u8fd8\u539f\u5b50View\u5927\u5c0f\n * @param child\n * @return\n */\n", "func_signal": "private ViewGroup.LayoutParams resetChildLayoutParams(View child)", "code": "{\n    ViewGroup.LayoutParams layoutParams = child.getLayoutParams();\n    if (child instanceof RelativeLayout) { // \u56fe\u7247\n        layoutParams.height = DEFAULT_IMAGE_HEIGHT;\n    }\n    if (child instanceof EditText) { // \u6587\u672c\u7f16\u8f91\u6846\n        child.setFocusable(true);\n        child.setFocusableInTouchMode(true);\n        if (child == lastFocusEdit) {\n            child.requestFocus();\n        }\n        child.setBackgroundDrawable(editTextBackground);\n        layoutParams.height = editTextHeightArray.get(Integer.parseInt(child.getTag().toString()));\n    }\n    return layoutParams;\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u521b\u5efa\u56fe\u7247\u6587\u672c\u5185\u5bb9\u5bb9\u5668\n * @return\n */\n", "func_signal": "@NonNull\n    private LinearLayout createContaniner()", "code": "{\n    LayoutParams layoutParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n    final LinearLayout containerLayout = new LinearLayout(getContext()) {\n        @Override\n        public boolean onInterceptTouchEvent(MotionEvent ev) {\n            return viewDragHelper.shouldInterceptTouchEvent(ev);\n        }\n\n        @Override\n        public boolean onTouchEvent(MotionEvent event) {\n            viewDragHelper.processTouchEvent(event);\n            int action = event.getAction();\n            switch (action) {\n                case MotionEvent.ACTION_DOWN:\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    if (isSort) {\n                        currRawY = event.getRawY();\n                        if (currRawY > containerBottomVal) { // \u5185\u5bb9\u4e0a\u6eda\u52a8\n                            scrollVector = DEFAULT_SCROLL_SPEED;\n                            startOverEdgeAutoScroll();\n                        } else if (currRawY < containerTopVal) { // \u5185\u5bb9\u4e0b\u6eda\u52a8\n                            scrollVector = -DEFAULT_SCROLL_SPEED;\n                            startOverEdgeAutoScroll();\n                        }else {\n                            stopOverEdgeAutoScroll();\n                        }\n                    }\n                    break;\n                case MotionEvent.ACTION_UP:\n                    stopOverEdgeAutoScroll();\n                    break;\n            }\n            return true;\n        }\n\n        @Override\n        public boolean dispatchTouchEvent(MotionEvent ev) {\n            if (isSort) {\n                getParent().requestDisallowInterceptTouchEvent(true);\n            } else {\n                getParent().requestDisallowInterceptTouchEvent(false);\n            }\n            return super.dispatchTouchEvent(ev);\n        }\n\n\n    };\n    containerLayout.setPadding(0, DEFAULT_MARGING, 0, DEFAULT_MARGING);\n    containerLayout.setOrientation(LinearLayout.VERTICAL);\n    containerLayout.setBackgroundColor(Color.WHITE);\n    containerLayout.setLayoutParams(layoutParams);\n    setupLayoutTransitions(containerLayout);\n    return containerLayout;\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u9690\u85cf\u6216\u8005\u663e\u793a\u8f6f\u952e\u76d8\n * @param isShow true:\u663e\u793a\uff0cfalse:\u9690\u85cf\n */\n", "func_signal": "public void processSoftKeyBoard(boolean isShow)", "code": "{\n    InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    if (isShow) {\n        imm.showSoftInput(lastFocusEdit, InputMethodManager.SHOW_FORCED);\n    } else {\n        imm.hideSoftInputFromWindow(lastFocusEdit.getWindowToken(), 0);\n    }\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u7f16\u8f91\u5668\u4e2d\u56fe\u7247\u6570\u91cf\n * @return\n */\n", "func_signal": "@Override\npublic int getImageCount()", "code": "{\n    int imageCount = 0;\n    int num = containerLayout.getChildCount();\n    for (int index = 0; index < num; index++) {\n        View child = containerLayout.getChildAt(index);\n        if (child instanceof RelativeLayout)\n            imageCount++;\n    }\n    return imageCount;\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u505c\u6b62ScrollView\u7684\u81ea\u52a8\u6eda\u52a8\n */\n", "func_signal": "private void stopOverEdgeAutoScroll()", "code": "{\n    if (isAutoScroll) {\n        scheduledExecutorService.shutdownNow();\n        isAutoScroll = false;\n    }\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u7f16\u8f91\u5668\u5185\u5bb9\u662f\u5426\u4e3a\u7a7a\n * @return\n */\n", "func_signal": "@Override\npublic boolean isContentEmpty()", "code": "{\n    boolean isEmpty = true;\n    int num = containerLayout.getChildCount();\n    for (int index = 0; index < num; index++) {\n        View itemView = containerLayout.getChildAt(index);\n        if (itemView instanceof ImageView) continue;\n        if (itemView instanceof EditText) {\n            EditText item = (EditText) itemView;\n            if (!TextUtils.isEmpty(item.getText().toString().trim())) {\n                isEmpty = false;\n                break;\n            }\n        } else if (itemView instanceof RelativeLayout) {\n            ImageView item = (ImageView) ((RelativeLayout) itemView).getChildAt(0);\n            if (!TextUtils.isEmpty(item.getTag().toString())) {\n                isEmpty = false;\n                break;\n            }\n        }\n    }\n    return isEmpty;\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u6839\u636e\u7edd\u5bf9\u8def\u5f84\u6dfb\u52a0\u4e00\u5f20\u56fe\u7247\n *\n * @param imagePath\n */\n", "func_signal": "@Override\npublic void addImage(String imagePath)", "code": "{\n    prepareAddImage();\n    insertImage(imagePath);\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u5728\u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0ImageView\n */\n", "func_signal": "private void insertImageViewAtIndex(int index, String imagePath, boolean isBatch)", "code": "{\n    if (index > 0) {\n        View currChild = containerLayout.getChildAt(index);\n        // \u5f53\u524dindex\u4f4d\u7f6e\u7684child\u662fImageView\uff0c\u5219\u5728\u63d2\u5165\u672cImageView\u7684\u65f6\u5019\uff0c\u591a\u63d2\u5165\u4e00\u4e2a\u56fe\u6807\uff0c\u7528\u4e8e\u5c06\u6765\u53ef\u4ee5\u63d2\u5165EditText\n        if (currChild instanceof RelativeLayout) {\n            insertEditTextImageView(index);\n        }\n\n        int lastIndex = index - 1;\n        View child = containerLayout.getChildAt(lastIndex);\n        // index\u4f4d\u7f6e\u7684\u4e0a\u4e00\u4e2achild\u662fImageView\uff0c\u5219\u5728\u63d2\u5165\u672cImageView\u7684\u65f6\u5019\uff0c\u591a\u63d2\u5165\u4e00\u4e2a\u56fe\u6807\uff0c\u7528\u4e8e\u5c06\u6765\u53ef\u4ee5\u63d2\u5165EditText\n        if (child instanceof RelativeLayout) {\n            insertEditTextImageView(index++);\n        }\n    }\n\n    final RelativeLayout imageLayout = createImageLayout();\n    ImageView imageView = (ImageView) imageLayout.getChildAt(0);\n    PointF pointF = new PointF();\n    pointF.x = getWidth() - 2 * DEFAULT_MARGING;\n    pointF.y = DEFAULT_IMAGE_HEIGHT;\n    imageLoader.loadImage(imagePath, imageView, pointF);\n    imageView.setTag(imagePath);\n\n    final int finalIndex = index;\n    if (isBatch) {\n        // \u6279\u91cf\u63d2\u5165\u9700\u8981\u7acb\u5373\u6267\u884c\uff0c\u5426\u5219index\u9519\u8bef\uff08\u820d\u5f03\u52a8\u753b\u6548\u679c\uff09\n        containerLayout.addView(imageLayout, finalIndex);\n    } else {\n        // \u5355\u5f20\u63d2\u5165onActivityResult\u65e0\u6cd5\u89e6\u53d1\u52a8\u753b\uff0c\u6b64\u5904post\u5904\u7406\n        containerLayout.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                containerLayout.addView(imageLayout, finalIndex);\n            }\n        }, 200);\n    }\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u91cd\u65b0\u6392\u5217Child\u7684\u4f4d\u7f6e\uff0c\u66f4\u65b0{@link #indexArray} \u4e2dview\u7684\u4e0b\u6807\u987a\u5e8f\n */\n", "func_signal": "private void resetChildPostion()", "code": "{\n    indexArray.clear();\n    View child;\n    int tagID, sortIndex;\n    int childCount = containerLayout.getChildCount();\n    for (int i = 0; i < childCount; i++) {\n        child = containerLayout.getChildAt(i);\n        tagID = Integer.parseInt(child.getTag().toString());\n        sortIndex = (preSortPositionArray.get(tagID) - DEFAULT_MARGING) / (SIZE_REDUCE_VIEW + DEFAULT_MARGING);\n        indexArray.put(i, sortIndex);\n    }\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u521b\u5efa\u6807\u9898\u680fViewGroup\u4ee5\u53ca\u6807\u9898\u680f\u4e2d\u7f16\u8f91\u6807\u9898\u7684EditText\u548c\u5b57\u6570\u63d0\u9192\u7684TextView\n */\n", "func_signal": "private void initTitleLayout()", "code": "{\n\n    // \u521b\u5efa\u6807\u9898\u680f\u7684ViewGroup\n    titleLayout = new LinearLayout(getContext());\n    titleLayout.setOrientation(LinearLayout.VERTICAL);\n    titleLayout.setPadding(0, DEFAULT_MARGING, 0, DEFAULT_MARGING);\n\n    LinearLayout.LayoutParams titleLayoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n    titleLayout.setLayoutParams(titleLayoutParams);\n\n    parentLayout.addView(titleLayout);\n\n    // \u6807\u9898\u680f\u7684ViewGroup\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u663e\u793a\u5b57\u6570\u9650\u5236\u7684\u63d0\u9192TextView(\u5148\u521b\u5efa\uff0c\u5f85\u5148\u63d2\u5165\u6807\u9898\u680fEditText\u4e4b\u540e\u518d\u63d2\u5165tvTextLimit)\n    final TextView tvTextLimit = new TextView(getContext());\n    tvTextLimit.setText(String.format(\"0/%d\", TITLE_WORD_LIMIT_COUNT));\n    tvTextLimit.setTextColor(Color.parseColor(\"#aaaaaa\"));\n    tvTextLimit.setTextSize(13);\n\n    LinearLayout.LayoutParams textLimitLayoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n    textLimitLayoutParams.rightMargin = DEFAULT_MARGING;\n    textLimitLayoutParams.gravity = Gravity.RIGHT;\n    tvTextLimit.setLayoutParams(textLimitLayoutParams);\n\n    // \u6807\u9898\u680f\u7684ViewGroup\u4e2d\u6dfb\u52a0\u4e00\u4e2aEditText\uff0c\u7528\u6765\u586b\u5199\u6807\u9898\u6587\u672c\n    etTitle = new SEDeletableEditText(getContext());\n    etTitle.setHint(\"\u8bf7\u8f93\u5165\u5e16\u5b50\u6807\u9898\");\n    etTitle.setGravity(Gravity.TOP);\n    etTitle.setCursorVisible(true);\n    InputFilter[] filters = {new InputFilter.LengthFilter(TITLE_WORD_LIMIT_COUNT)};\n    etTitle.setFilters(filters);\n    etTitle.setBackgroundResource(android.R.color.transparent);\n    etTitle.setTextColor(Color.parseColor(\"#333333\"));\n    etTitle.setTextSize(14);\n    etTitle.addTextChangedListener(new TextWatcher() {\n        @Override\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n        @Override\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n            String titleStr = etTitle.getText().toString();\n            tvTextLimit.setText(String.format(\"%d/%d\", titleStr.length(), TITLE_WORD_LIMIT_COUNT));\n        }\n\n        @Override\n        public void afterTextChanged(Editable s) {}\n    });\n\n    LinearLayout.LayoutParams editTitleLayoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n    editTitleLayoutParams.leftMargin = DEFAULT_MARGING;\n    editTitleLayoutParams.rightMargin = DEFAULT_MARGING;\n    etTitle.setLayoutParams(editTitleLayoutParams);\n\n    titleLayout.addView(etTitle);\n\n    titleLayout.addView(tvTextLimit);\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u6279\u91cf\u63d2\u5165\u4e00\u7ec4\u56fe\u7247\n * @param imagePathList\n */\n", "func_signal": "private void insertBatchImage(List<String> imagePathList)", "code": "{\n    String imagePath;\n    for (int i = 0; i < imagePathList.size(); i++) {\n        imagePath = imagePathList.get(i);\n        insertImageViewAtIndex(containerLayout.indexOfChild(lastFocusEdit), imagePath, true);\n    }\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u521d\u59cb\u5316ContainerLayout\u6587\u672c\u5185\u5bb9\u5bb9\u5668\n */\n", "func_signal": "private void initContainerLayout()", "code": "{\n    containerLayout = createContaniner();\n    parentLayout.addView(containerLayout);\n\n    EditText firstEdit = createEditText(\"\u8bf7\u8f93\u5165\u5e16\u5b50\u5185\u5bb9\");\n    editTextHeightArray.put(Integer.parseInt(firstEdit.getTag().toString()), ViewGroup.LayoutParams.WRAP_CONTENT);\n    editTextBackground = firstEdit.getBackground();\n    containerLayout.addView(firstEdit);\n    lastFocusEdit = firstEdit;\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u521d\u59cb\u5316transition\u52a8\u753b\n */\n", "func_signal": "private void setupLayoutTransitions(LinearLayout containerLayout)", "code": "{\n    mTransitioner = new LayoutTransition();\n    containerLayout.setLayoutTransition(mTransitioner);\n    mTransitioner.setDuration(300);\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u5904\u7406\u8f6f\u952e\u76d8backSpace\u56de\u9000\u4e8b\u4ef6\n *\n * @param editTxt \u5149\u6807\u6240\u5728\u7684\u6587\u672c\u8f93\u5165\u6846\n */\n", "func_signal": "private void onBackspacePress(EditText editTxt)", "code": "{\n\n    int startSelection = editTxt.getSelectionStart();\n    // \u53ea\u6709\u5728\u5149\u6807\u5df2\u7ecf\u9876\u5230\u6587\u672c\u8f93\u5165\u6846\u7684\u6700\u524d\u65b9\uff0c\u5728\u5224\u5b9a\u662f\u5426\u5220\u9664\u4e4b\u524d\u7684\u56fe\u7247\uff0c\u6216\u4e24\u4e2aView\u5408\u5e76\n    if (startSelection == 0) {\n        int editIndex = containerLayout.indexOfChild(editTxt);\n        View preView = containerLayout.getChildAt(editIndex - 1); // \u5982\u679ceditIndex-1<0,\n        // \u5219\u8fd4\u56de\u7684\u662fnull\n        if (null != preView) {\n            if (preView instanceof RelativeLayout || preView instanceof ImageView) {\n                // \u5149\u6807EditText\u7684\u4e0a\u4e00\u4e2aview\u5bf9\u5e94\u7684\u662f\u56fe\u7247\u6216\u8005\u662f\u4e00\u4e2a\u201c\u5c06\u6765\u53ef\u7f16\u8f91\u6587\u672c\u201d\u7684\u56fe\u6807\n                onImageDeleteClick(preView);\n            } else if (preView instanceof EditText) {\n                // \u5149\u6807EditText\u7684\u4e0a\u4e00\u4e2aview\u5bf9\u5e94\u7684\u8fd8\u662f\u6587\u672c\u6846EditText\n                String str1 = editTxt.getText().toString();\n                EditText preEdit = (EditText) preView;\n                String str2 = preEdit.getText().toString();\n\n                // \u5408\u5e76\u6587\u672cview\u65f6\uff0c\u4e0d\u9700\u8981transition\u52a8\u753b\n                containerLayout.setLayoutTransition(null);\n                containerLayout.removeView(editTxt);\n                containerLayout.setLayoutTransition(mTransitioner); // \u6062\u590dtransition\u52a8\u753b\n\n                // \u6587\u672c\u5408\u5e76\n                preEdit.setText(str2 + str1);\n                preEdit.requestFocus();\n                preEdit.setSelection(str2.length(), str2.length());\n                lastFocusEdit = preEdit;\n            }\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u521d\u59cb\u5316\u5206\u5272\u7ebf\uff08\u7528\u6765\u5206\u5f00\u6807\u9898\u680fViewGroup\u4e0e\u5185\u5bb9\u5bb9\u5668ViewGroup\uff09\n */\n", "func_signal": "private void initLineView()", "code": "{\n    // \u7236\u5bb9\u5668\u4e2d\u4e2d\u6dfb\u52a0\u4e00\u6761\u5206\u5272\u7ebf\u7528\u6765\u5206\u5f00\u6807\u9898\u680fViewGroup\u4e0e\u5185\u5bb9\u5bb9\u5668ViewGroup\n    View lineView = new View(getContext());\n    lineView.setBackgroundColor(Color.parseColor(\"#dddddd\"));\n\n    LinearLayout.LayoutParams lineLayoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, 1);\n    lineLayoutParams.leftMargin = DEFAULT_MARGING;\n    lineLayoutParams.rightMargin = DEFAULT_MARGING;\n    lineView.setLayoutParams(lineLayoutParams);\n    parentLayout.addView(lineView);\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u5728\u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u201c\u5c06\u6765\u7528\u4e8e\u7f16\u8f91\u6587\u5b57\u7684\u56fe\u7247\u201d\n * @param index\n */\n", "func_signal": "private void insertEditTextImageView(int index)", "code": "{\n    ImageView ivInsertEditText = createInsertEditTextImageView();\n    containerLayout.addView(ivInsertEditText, index);\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * dp\u548cpixel\u8f6c\u6362\n *\n * @param dipValue dp\u503c\n * @return \u50cf\u7d20\u503c\n */\n", "func_signal": "private int dip2px(float dipValue)", "code": "{\n    float m = getContext().getResources().getDisplayMetrics().density;\n    return (int) (dipValue * m + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * \u6839\u636e\u56fe\u7247\u7edd\u5bf9\u8def\u5f84\u96c6\u5408\u6279\u91cf\u6dfb\u52a0\u4e00\u7ec4\u56fe\u7247\n * @param imageList\n */\n", "func_signal": "@Override\npublic void addImageList(List<String> imageList)", "code": "{\n    if (imageList == null || imageList.isEmpty()) return;\n    prepareAddImage();\n\n    String lastEditStr = lastFocusEdit.getText().toString();\n    int cursorIndex = lastFocusEdit.getSelectionStart();\n    String lastStr = lastEditStr.substring(0, cursorIndex).trim();\n    int lastEditIndex = containerLayout.indexOfChild(lastFocusEdit);\n\n    if (lastEditStr.length() == 0 || lastStr.length() == 0) {\n        // \u5982\u679cEditText\u4e3a\u7a7a\uff0c\u6216\u8005\u5149\u6807\u5df2\u7ecf\u9876\u5728\u4e86editText\u7684\u6700\u524d\u9762\uff0c\u5219\u76f4\u63a5\u63d2\u5165\u56fe\u7247\n        insertBatchImage(imageList);\n    } else {\n        // \u5982\u679cEditText\u975e\u7a7a\u4e14\u5149\u6807\u4e0d\u5728\u6700\u9876\u7aef\uff0c\u5219\u6dfb\u52a0\u8be5\u7ec4\u56fe\u7247\u540e\uff0c\u6700\u540e\u63d2\u5165\u4e00\u4e2aEditText\n        lastFocusEdit.setText(lastStr);\n        String editStr2 = lastEditStr.substring(cursorIndex).trim();\n        if (containerLayout.getChildCount() - 1 == lastEditIndex || editStr2.length() > 0) {\n            lastFocusEdit = insertEditTextAtIndex(lastEditIndex + 1, editStr2);\n            lastFocusEdit.requestFocus();\n            lastFocusEdit.setSelection(0);\n        }\n        insertBatchImage(imageList);\n    }\n}", "path": "app\\src\\main\\java\\com\\hitomi\\sortricheditor\\view\\editor\\SortRichEditor.java", "repo_name": "Hitomis/SortRichEditor", "stars": 323, "license": "None", "language": "java", "size": 183526}
{"docstring": "/**\n * Set a color to use for the scrim that obscures primary content while a\n * drawer is open.\n * \n * @param color Color to use in 0xAARRGGBB format.\n */\n", "func_signal": "public void setScrimColor(int color)", "code": "{\n    mScrimColor = color;\n    invalidate();\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\SwipeBackLayout.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Set a drawable used for edge shadow.\n * \n * @param shadow Drawable to use\n * @param edgeFlags Combination of edge flags describing the edge to set\n * @see #EDGE_LEFT\n * @see #EDGE_RIGHT\n * @see #EDGE_BOTTOM\n */\n", "func_signal": "public void setShadow(Drawable shadow, int edgeFlag)", "code": "{\n    if ((edgeFlag & EDGE_LEFT) != 0) {\n        mShadowLeft = shadow;\n    } else if ((edgeFlag & EDGE_RIGHT) != 0) {\n        mShadowRight = shadow;\n    } else if ((edgeFlag & EDGE_BOTTOM) != 0) {\n        mShadowBottom = shadow;\n    }\n    invalidate();\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\SwipeBackLayout.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Scroll out contentView and finish the activity\n */\n", "func_signal": "public void scrollToFinishActivity()", "code": "{\n    final int childWidth = mContentView.getWidth();\n    final int childHeight = mContentView.getHeight();\n\n    int left = 0, top = 0;\n    if ((mEdgeFlag & EDGE_LEFT) != 0) {\n        left = childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_LEFT;\n    } else if ((mEdgeFlag & EDGE_RIGHT) != 0) {\n        left = -childWidth - mShadowRight.getIntrinsicWidth() - OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_RIGHT;\n    } else if ((mEdgeFlag & EDGE_BOTTOM) != 0) {\n        top = -childHeight - mShadowBottom.getIntrinsicHeight() - OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_BOTTOM;\n    }\n\n    mDragHelper.smoothSlideViewTo(mContentView, left, top);\n    invalidate();\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\SwipeBackLayout.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position. The\n * appropriate velocity from prior motion will be taken into account. If\n * this method returns true, the caller should invoke\n * {@link #continueSettling(boolean)} on each subsequent frame to continue\n * the motion until it returns false. If this method returns false there is\n * no further work to do to complete the movement.\n * \n * @param finalLeft Settled left edge position for the captured view\n * @param finalTop Settled top edge position for the captured view\n * @return true if animation should continue through\n *         {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean settleCapturedViewAt(int finalLeft, int finalTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot settleCapturedViewAt outside of a call to \"\n                + \"Callback#onViewReleased\");\n    }\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop,\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax. If the value is below\n * the minimum, it will be clamped to zero. If the value is above the\n * maximum, it will be clamped to the maximum.\n * \n * @param value Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private float clampMag(float value, float absMin, float absMax)", "code": "{\n    final float absValue = Math.abs(value);\n    if (absValue < absMin)\n        return 0;\n    if (absValue > absMax)\n        return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Check if any of the edges specified were initially touched in the\n * currently active gesture. If there is no currently active gesture this\n * method will return false.\n * \n * @param edges Edges to check for an initial edge touch. See\n *            {@link #EDGE_LEFT}, {@link #EDGE_TOP}, {@link #EDGE_RIGHT},\n *            {@link #EDGE_BOTTOM} and {@link #EDGE_ALL}\n * @return true if any of the edges specified were initially touched in the\n *         current gesture\n */\n", "func_signal": "public boolean isEdgeTouched(int edges)", "code": "{\n    final int count = mInitialEdgesTouched.length;\n    for (int i = 0; i < count; i++) {\n        if (isEdgeTouched(edges, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * The result of a call to this method is equivalent to\n * {@link #processTouchEvent(android.view.MotionEvent)} receiving an\n * ACTION_CANCEL event.\n */\n", "func_signal": "public void cancel()", "code": "{\n    mActivePointerId = INVALID_POINTER;\n    clearMotionHistory();\n\n    if (mVelocityTracker != null) {\n        mVelocityTracker.recycle();\n        mVelocityTracker = null;\n    }\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n * \n * @param forParent Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be\n *            about detecting the start of a drag. Larger values are more\n *            sensitive. 1.0f is normal.\n * @param cb Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n    final ViewDragHelper helper = create(forParent, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Set scroll threshold, we will close the activity, when scrollPercent over\n * this value\n * \n * @param threshold\n */\n", "func_signal": "public void setScrollThresHold(float threshold)", "code": "{\n    if (threshold >= 1.0f || threshold <= 0) {\n        throw new IllegalArgumentException(\"Threshold value should be between 0 and 1.0\");\n    }\n    mScrollThreshold = threshold;\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\SwipeBackLayout.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Process a touch event received by the parent view. This method will\n * dispatch callback events as needed before returning. The parent view's\n * onTouchEvent implementation should call this.\n * \n * @param ev The touch event received by the parent view\n */\n", "func_signal": "public void processTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // Since the parent is already directly processing this touch\n            // event,\n            // there is no reason to delay for a slop before dragging.\n            // Start immediately if possible.\n            tryCaptureViewForDrag(toCapture, pointerId);\n\n            final int edgesTouched = mInitialEdgesTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                // If we're idle we can do anything! Treat it like a normal\n                // down event.\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                tryCaptureViewForDrag(toCapture, pointerId);\n\n                final int edgesTouched = mInitialEdgesTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (isCapturedViewUnder((int) x, (int) y)) {\n                // We're still tracking a captured view. If the same view is\n                // under this\n                // point, we'll swap to controlling it with this pointer\n                // instead.\n                // (This will still work if we're \"catching\" a settling\n                // view.)\n\n                tryCaptureViewForDrag(mCapturedView, pointerId);\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            if (mDragState == STATE_DRAGGING) {\n                final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);\n                final float x = MotionEventCompat.getX(ev, index);\n                final float y = MotionEventCompat.getY(ev, index);\n                final int idx = (int) (x - mLastMotionX[mActivePointerId]);\n                final int idy = (int) (y - mLastMotionY[mActivePointerId]);\n\n                dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);\n\n                saveLastMotion(ev);\n            } else {\n                // Check to see if any pointer is now over a draggable view.\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    final float dx = x - mInitialMotionX[pointerId];\n                    final float dy = y - mInitialMotionY[pointerId];\n\n                    reportNewEdgeDrags(dx, dy, pointerId);\n                    if (mDragState == STATE_DRAGGING) {\n                        // Callback might have started an edge drag.\n                        break;\n                    }\n\n                    final View toCapture = findTopChildUnder((int) x, (int) y);\n                    if (checkTouchSlop(toCapture, dx, dy)\n                            && tryCaptureViewForDrag(toCapture, pointerId)) {\n                        break;\n                    }\n                }\n                saveLastMotion(ev);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {\n                // Try to find another pointer that's still holding on to\n                // the captured view.\n                int newActivePointer = INVALID_POINTER;\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int id = MotionEventCompat.getPointerId(ev, i);\n                    if (id == mActivePointerId) {\n                        // This one's going away, skip.\n                        continue;\n                    }\n\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    if (findTopChildUnder((int) x, (int) y) == mCapturedView\n                            && tryCaptureViewForDrag(mCapturedView, id)) {\n                        newActivePointer = mActivePointerId;\n                        break;\n                    }\n                }\n\n                if (newActivePointer == INVALID_POINTER) {\n                    // We didn't find another pointer still touching the\n                    // view, release it.\n                    releaseViewForPointerUp();\n                }\n            }\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP: {\n            if (mDragState == STATE_DRAGGING) {\n                releaseViewForPointerUp();\n            }\n            cancel();\n            break;\n        }\n\n        case MotionEvent.ACTION_CANCEL: {\n            if (mDragState == STATE_DRAGGING) {\n                dispatchViewReleased(0, 0);\n            }\n            cancel();\n            break;\n        }\n    }\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax. If the value is below\n * the minimum, it will be clamped to zero. If the value is above the\n * maximum, it will be clamped to the maximum.\n * \n * @param value Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private int clampMag(int value, int absMin, int absMax)", "code": "{\n    final int absValue = Math.abs(value);\n    if (absValue < absMin)\n        return 0;\n    if (absValue > absMax)\n        return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * {@link #cancel()}, but also abort all motion in progress and snap to the\n * end of any animation.\n */\n", "func_signal": "public void abort()", "code": "{\n    cancel();\n    if (mDragState == STATE_SETTLING) {\n        final int oldX = mScroller.getCurrX();\n        final int oldY = mScroller.getCurrY();\n        mScroller.abortAnimation();\n        final int newX = mScroller.getCurrX();\n        final int newY = mScroller.getCurrY();\n        mCallback.onViewPositionChanged(mCapturedView, newX, newY, newX - oldX, newY - oldY);\n    }\n    setDragState(STATE_IDLE);\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Removes a listener from the set of listeners\n * \n * @param listener\n */\n", "func_signal": "public void removeSwipeListener(SwipeListener listener)", "code": "{\n    if (mListeners == null) {\n        return;\n    }\n    mListeners.remove(listener);\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\SwipeBackLayout.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Find the topmost child under the given point within the parent view's\n * coordinate system. The child order is determined using\n * {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#getOrderedChildIndex(int)}\n * .\n * \n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return The topmost child view under (x, y) or null if none found.\n */\n", "func_signal": "public View findTopChildUnder(int x, int y)", "code": "{\n    final int childCount = mParentView.getChildCount();\n    for (int i = childCount - 1; i >= 0; i--) {\n        final View child = mParentView.getChildAt(mCallback.getOrderedChildIndex(i));\n        if (x >= child.getLeft() && x < child.getRight() && y >= child.getTop()\n                && y < child.getBottom()) {\n            return child;\n        }\n    }\n    return null;\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Check if the specified pointer tracked in the current gesture has crossed\n * the required slop threshold.\n * <p>\n * This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or\n * {@link #processTouchEvent(android.view.MotionEvent)}. You should only\n * rely on the results of this method after all currently available touch\n * data has been provided to one of these two methods.\n * </p>\n * \n * @param directions Combination of direction flags, see\n *            {@link #DIRECTION_HORIZONTAL}, {@link #DIRECTION_VERTICAL},\n *            {@link #DIRECTION_ALL}\n * @param pointerId ID of the pointer to slop check as specified by\n *            MotionEvent\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions, int pointerId)", "code": "{\n    if (!isPointerDown(pointerId)) {\n        return false;\n    }\n\n    final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL;\n    final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL;\n\n    final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId];\n    final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId];\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Determine if the supplied view is under the given point in the parent\n * view's coordinate system.\n * \n * @param view Child view of the parent to hit test\n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return true if the supplied view is under the given point, false\n *         otherwise\n */\n", "func_signal": "public boolean isViewUnder(View view, int x, int y)", "code": "{\n    if (view == null) {\n        return false;\n    }\n    return x >= view.getLeft() && x < view.getRight() && y >= view.getTop()\n            && y < view.getBottom();\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Convert a translucent themed Activity\n * {@link android.R.attr#windowIsTranslucent} back from opaque to\n * translucent following a call to {@link #convertActivityFromTranslucent()}\n * .\n * <p>\n * Calling this allows the Activity behind this one to be seen again. Once\n * all such Activities have been redrawn\n * <p>\n * This call has no effect on non-translucent activities or on activities\n * with the {@link android.R.attr#windowIsFloating} attribute.\n */\n", "func_signal": "public void convertActivityToTranslucent()", "code": "{\n    try {\n        Class<?>[] classes = Activity.class.getDeclaredClasses();\n        Class<?> translucentConversionListenerClazz = null;\n        for (Class clazz : classes) {\n            if (clazz.getSimpleName().contains(\"TranslucentConversionListener\")) {\n                translucentConversionListenerClazz = clazz;\n            }\n        }\n        Method method = Activity.class.getDeclaredMethod(\"convertToTranslucent\",\n                translucentConversionListenerClazz);\n        method.setAccessible(true);\n        method.invoke(mActivity, new Object[] {\n            null\n        });\n    } catch (Throwable t) {\n    }\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\app\\SwipeBackActivityHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Enable edge tracking for the selected edges of the parent view. The\n * callback's\n * {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#onEdgeTouched(int, int)}\n * and\n * {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#onEdgeDragStarted(int, int)}\n * methods will only be invoked for edges for which edge tracking has been\n * enabled.\n * \n * @param edgeFlags Combination of edge flags describing the edges to watch\n * @see #EDGE_LEFT\n * @see #EDGE_RIGHT\n * @see #EDGE_BOTTOM\n */\n", "func_signal": "public void setEdgeTrackingEnabled(int edgeFlags)", "code": "{\n    mEdgeFlag = edgeFlags;\n    mDragHelper.setEdgeTrackingEnabled(mEdgeFlag);\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\SwipeBackLayout.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Apps should use ViewDragHelper.create() to get a new instance. This will\n * allow VDH to use internal compatibility implementations for different\n * platform versions.\n * \n * @param context Context to initialize config-dependent params from\n * @param forParent Parent view to monitor\n */\n", "func_signal": "private ViewDragHelper(Context context, ViewGroup forParent, Callback cb)", "code": "{\n    if (forParent == null) {\n        throw new IllegalArgumentException(\"Parent view may not be null\");\n    }\n    if (cb == null) {\n        throw new IllegalArgumentException(\"Callback may not be null\");\n    }\n\n    mParentView = forParent;\n    mCallback = cb;\n\n    final ViewConfiguration vc = ViewConfiguration.get(context);\n    final float density = context.getResources().getDisplayMetrics().density;\n    mEdgeSize = (int) (EDGE_SIZE * density + 0.5f);\n\n    mTouchSlop = vc.getScaledTouchSlop();\n    mMaxVelocity = vc.getScaledMaximumFlingVelocity();\n    mMinVelocity = vc.getScaledMinimumFlingVelocity();\n    mScroller = ScrollerCompat.create(context, sInterpolator);\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Animate the view <code>child</code> to the given (left, top) position. If\n * this method returns true, the caller should invoke\n * {@link #continueSettling(boolean)} on each subsequent frame to continue\n * the motion until it returns false. If this method returns false there is\n * no further work to do to complete the movement.\n * <p>\n * This operation does not count as a capture event, though\n * {@link #getCapturedView()} will still report the sliding view while the\n * slide is in progress.\n * </p>\n * \n * @param child Child view to capture and animate\n * @param finalLeft Final left position of child\n * @param finalTop Final top position of child\n * @return true if animation should continue through\n *         {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean smoothSlideViewTo(View child, int finalLeft, int finalTop)", "code": "{\n    mCapturedView = child;\n    mActivePointerId = INVALID_POINTER;\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop, 0, 0);\n}", "path": "extras\\SwipeLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "gonjay/rubychina4android", "stars": 277, "license": "None", "language": "java", "size": 33034}
{"docstring": "/**\n * Use Tango camera intrinsics to calculate the projection Matrix for the Rajawali scene.\n */\n", "func_signal": "private static float[] projectionMatrixFromCameraIntrinsics(TangoCameraIntrinsics intrinsics)", "code": "{\n    // Uses frustumM to create a projection matrix taking into account calibrated camera\n    // intrinsic parameter.\n    // Reference: http://ksimek.github.io/2013/06/03/calibrated_cameras_in_opengl/\n    float near = 0.1f;\n    float far = 100;\n\n    // Adjust camera intrinsics according to rotation from color camera to display.\n    double cx = intrinsics.cx;\n    double cy = intrinsics.cy;\n    double width = intrinsics.width;\n    double height = intrinsics.height;\n    double fx = intrinsics.fx;\n    double fy = intrinsics.fy;\n\n    double xscale = near / fx;\n    double yscale = near / fy;\n\n    double xoffset = (cx - (width / 2.0)) * xscale;\n    // Color camera's coordinates has y pointing downwards so we negate this term.\n    double yoffset = -(cy - (height / 2.0)) * yscale;\n\n    float m[] = new float[16];\n    Matrix.frustumM(m, 0,\n            (float) (xscale * -width / 2.0 - xoffset),\n            (float) (xscale * width / 2.0 - xoffset),\n            (float) (yscale * -height / 2.0 - yoffset),\n            (float) (yscale * height / 2.0 - yoffset), near, far);\n    return m;\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Initialize Tango Service as a normal Android Service.\n */\n", "func_signal": "private void bindTangoService()", "code": "{\n    // Since we call mTango.disconnect() in onStop, this will unbind Tango Service, so every\n    // time onStart gets called we should create a new Tango object.\n    mTango = new Tango(MarkerDetectionActivity.this, new Runnable() {\n        // Pass in a Runnable to be called from UI thread when Tango is ready. This Runnable\n        // will be running on a new thread.\n        // When Tango is ready, we can call Tango functions safely here only when there\n        // are no UI thread changes involved.\n        @Override\n        public void run() {\n            // Synchronize against disconnecting while the service is being used in the\n            // OpenGL thread or in the UI thread.\n            synchronized (MarkerDetectionActivity.this) {\n                try {\n                  mConfig = setupTangoConfig(mTango);\n                  mTango.connect(mConfig);\n                  startupTango();\n                  TangoSupport.initialize(mTango);\n                  mIsConnected = true;\n                  setDisplayRotation();\n                } catch (TangoOutOfDateException e) {\n                    Log.e(TAG, getString(R.string.exception_out_of_date), e);\n                    showsToastAndFinishOnUiThread(R.string.exception_out_of_date);\n                } catch (TangoErrorException e) {\n                    Log.e(TAG, getString(R.string.exception_tango_error), e);\n                    showsToastAndFinishOnUiThread(R.string.exception_tango_error);\n                } catch (TangoInvalidException e) {\n                    Log.e(TAG, getString(R.string.exception_tango_invalid), e);\n                    showsToastAndFinishOnUiThread(R.string.exception_tango_invalid);\n                }\n            }\n        }\n    });\n}", "path": "java_marker_detection_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\markerdetection\\MarkerDetectionActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Result for requesting camera permission.\n */\n", "func_signal": "@Override\npublic void onRequestPermissionsResult(int requestCode, String[] permissions,\n                                       int[] grantResults)", "code": "{\n    if (hasCameraPermission()) {\n        bindTangoService();\n    } else {\n        Toast.makeText(this, \"Java Model Correspondence Example requires camera permission\",\n                Toast.LENGTH_LONG).show();\n    }\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Request the necessary permissions for this app.\n */\n", "func_signal": "private void requestCameraPermission()", "code": "{\n    if (ActivityCompat.shouldShowRequestPermissionRationale(this, CAMERA_PERMISSION)) {\n        showRequestPermissionRationale();\n    } else {\n        ActivityCompat.requestPermissions(this, new String[]{CAMERA_PERMISSION},\n                CAMERA_PERMISSION_CODE);\n    }\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Set up the callback listeners for the Tango Service and obtain other parameters required\n * after Tango connection.\n * Listen to updates from the RGB camera and Point Cloud.\n */\n", "func_signal": "private void startupTango()", "code": "{\n    // No need to add any coordinate frame pairs since we are not\n    // using pose data. So just initialize.\n    ArrayList<TangoCoordinateFramePair> framePairs =\n            new ArrayList<TangoCoordinateFramePair>();\n    mTango.connectListener(framePairs, new OnTangoUpdateListener() {\n        @Override\n        public void onPoseAvailable(TangoPoseData pose) {\n            // We are not using onPoseAvailable for this app.\n        }\n\n        @Override\n        public void onFrameAvailable(int cameraId) {\n            // Check if the frame available is for the camera we want and update its frame\n            // on the view.\n            if (cameraId == TangoCameraIntrinsics.TANGO_CAMERA_COLOR) {\n                // Mark a camera frame as available for rendering in the OpenGL thread\n                mIsFrameAvailableTangoThread.set(true);\n                mSurfaceView.requestRender();\n            }\n        }\n\n        @Override\n        public void onXyzIjAvailable(TangoXyzIjData xyzIj) {\n            // We are not using onXyzIjAvailable for this app.\n        }\n\n        @Override\n        public void onPointCloudAvailable(TangoPointCloudData pointCloud) {\n            // Save the cloud and point data for later use.\n            mPointCloudManager.updatePointCloud(pointCloud);\n        }\n\n        @Override\n        public void onTangoEvent(TangoEvent event) {\n            // We are not using onTangoEvent for this app.\n        }\n    });\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Reset the example to the beginning.\n */\n", "func_signal": "public synchronized void reset(View view)", "code": "{\n    if (mZRotationAnimator != null) {\n        mZRotationAnimator.cancel();\n    }\n    mHouseModel = new HouseModel();\n    mOpenGlTHouse = new float[16];\n    mDestPointList = new ArrayList<float[]>();\n    mCorrespondenceDone = false;\n    mModelUpdated = true;\n    mModelZRotation = 0;\n    mResetButton.setVisibility(View.GONE);\n    mAddButton.setVisibility(View.VISIBLE);\n    mUndoButton.setVisibility(View.VISIBLE);\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Animate rotation value to show the next point of the model to make the correspondence.\n */\n", "func_signal": "private void startRotationAnimation(float start, float end)", "code": "{\n    if (mZRotationAnimator != null) {\n        mZRotationAnimator.cancel();\n    }\n    mZRotationAnimator = ValueAnimator.ofFloat(start, end);\n    mZRotationAnimator.setDuration(1500);\n    mZRotationAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        public void onAnimationUpdate(ValueAnimator animation) {\n            Float value = (Float) animation.getAnimatedValue();\n            mModelZRotation = value;\n        }\n    });\n    mZRotationAnimator.start();\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Connects the view and renderer to the color camara and callbacks.\n */\n", "func_signal": "private void connectRenderer()", "code": "{\n    // Register a Rajawali Scene Frame Callback to update the scene camera pose whenever a new\n    // RGB frame is rendered.\n    // (@see https://github.com/Rajawali/Rajawali/wiki/Scene-Frame-Callbacks)\n    mRenderer.getCurrentScene().registerFrameCallback(new ASceneFrameCallback() {\n        @Override\n        public void onPreFrame(long sceneTime, double deltaTime) {\n            // Prevent concurrent access to {@code mIsFrameAvailableTangoThread} from the Tango\n            // callback thread and service disconnection from an onPause event.\n            try {\n                synchronized (ModelCorrespondenceActivity.this) {\n                    // Don't execute any Tango API actions if we're not connected to the\n                    // service.\n                    if (!mIsConnected) {\n                        return;\n                    }\n\n                    // Set up scene camera projection to match RGB camera intrinsics.\n                    if (!mRenderer.isSceneCameraConfigured()) {\n                        TangoCameraIntrinsics intrinsics =\n                                TangoSupport.getCameraIntrinsicsBasedOnDisplayRotation(\n                                        TangoCameraIntrinsics.TANGO_CAMERA_COLOR,\n                                        mDisplayRotation);\n                        mRenderer.setProjectionMatrix(\n                                projectionMatrixFromCameraIntrinsics(intrinsics));\n                    }\n\n                    // Connect the camera texture to the OpenGL Texture if necessary.\n                    // NOTE: When the OpenGL context is recycled, Rajawali may re-generate the\n                    // texture with a different ID.\n                    if (mConnectedTextureIdGlThread != mRenderer.getTextureId()) {\n                        mTango.connectTextureId(TangoCameraIntrinsics.TANGO_CAMERA_COLOR,\n                                mRenderer.getTextureId());\n                        mConnectedTextureIdGlThread = mRenderer.getTextureId();\n                        Log.d(TAG, \"connected to texture id: \" + mRenderer.getTextureId());\n                    }\n\n                    // If there is a new RGB camera frame available, update the texture with\n                    // it.\n                    if (mIsFrameAvailableTangoThread.compareAndSet(true, false)) {\n                        mRgbTimestampGlThread =\n                                mTango.updateTexture(TangoCameraIntrinsics.TANGO_CAMERA_COLOR);\n                    }\n\n                    // If a new RGB frame has been rendered, update the camera pose to match.\n                    if (mRgbTimestampGlThread > mCameraPoseTimestamp) {\n                        // Calculate the camera color pose at the camera frame update time in\n                        // OpenGL engine.\n                        TangoPoseData lastFramePose = TangoSupport.getPoseAtTime(\n                                mRgbTimestampGlThread,\n                                TangoPoseData.COORDINATE_FRAME_START_OF_SERVICE,\n                                TangoPoseData.COORDINATE_FRAME_CAMERA_COLOR,\n                                TangoSupport.ENGINE_OPENGL,\n                                TangoSupport.ENGINE_OPENGL,\n                                mDisplayRotation);\n\n                        if (lastFramePose.statusCode == TangoPoseData.POSE_VALID) {\n                            // Update the camera pose from the renderer.\n                            mRenderer.updateRenderCameraPose(lastFramePose);\n                            mCameraPoseTimestamp = lastFramePose.timestamp;\n                            // While the correspondence is not done, fix the model to the upper\n                            // right corner of the screen by following the camera.\n                            if (!mCorrespondenceDone) {\n                                TangoSupport.MatrixTransformData transform =\n                                        TangoSupport.getMatrixTransformAtTime(\n                                                mCameraPoseTimestamp,\n                                                TangoPoseData.COORDINATE_FRAME_START_OF_SERVICE,\n                                                TangoPoseData.COORDINATE_FRAME_CAMERA_COLOR,\n                                                TangoSupport.ENGINE_OPENGL,\n                                                TangoSupport.ENGINE_OPENGL,\n                                                mDisplayRotation);\n                                if (transform.statusCode == TangoPoseData.POSE_VALID) {\n                                    // Place it in the top left corner, and rotate and scale it\n                                    // accordingly.\n                                    float[] rgbTHouse = calculateModelTransformFixedToCam\n                                            (mDisplayRotation);\n                                    // Combine the two transforms.\n                                    float[] openGlTHouse = new float[16];\n                                    Matrix.multiplyMM(openGlTHouse, 0, transform.matrix,\n                                            0, rgbTHouse, 0);\n                                    mOpenGlTHouse = openGlTHouse;\n                                    mModelUpdated = true;\n                                } else {\n                                    Log.w(TAG, \"Can't get camera transform at time: \" +\n                                            mCameraPoseTimestamp);\n                                }\n                            }\n                        } else {\n                            Log.w(TAG, \"Can't get device pose at time: \" +\n                                    mRgbTimestampGlThread);\n                        }\n                    }\n\n                    // If the model was updated then it must be re-rendered.\n                    if (mModelUpdated) {\n                        mRenderer.updateModelRendering(mHouseModel, mOpenGlTHouse,\n                                mDestPointList);\n                        mModelUpdated = false;\n                    }\n                }\n                // Avoid crashing the application due to unhandled exceptions.\n            } catch (TangoErrorException e) {\n                Log.e(TAG, \"Tango API call error within the OpenGL render thread\", e);\n            } catch (Throwable t) {\n                Log.e(TAG, \"Exception on the OpenGL thread\", t);\n            }\n        }\n\n        @Override\n        public void onPreDraw(long sceneTime, double deltaTime) {\n\n        }\n\n        @Override\n        public void onPostFrame(long sceneTime, double deltaTime) {\n\n        }\n\n        @Override\n        public boolean callPreFrame() {\n            return true;\n        }\n    });\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Connects the view and renderer to the color camara and callbacks.\n */\n", "func_signal": "private void setupRenderer()", "code": "{\n    // Register a Rajawali Scene Frame Callback to update the scene camera pose whenever a new\n    // RGB frame is rendered.\n    // (@see https://github.com/Rajawali/Rajawali/wiki/Scene-Frame-Callbacks)\n    mRenderer.getCurrentScene().registerFrameCallback(new ASceneFrameCallback() {\n        @Override\n        public void onPreFrame(long sceneTime, double deltaTime) {\n            // NOTE: This is called from the OpenGL render thread after all the renderer\n            // onRender callbacks have a chance to run and before scene objects are rendered\n            // into the scene.\n\n            // Prevent concurrent access to {@code mIsFrameAvailableTangoThread} from the Tango\n            // callback thread and service disconnection from an onPause event.\n            try {\n                synchronized (MarkerDetectionActivity.this) {\n                    // Don't execute tango API actions if we're not connected to the service.\n                    if (!mIsConnected) {\n                        return;\n                    }\n\n                    // Set up scene camera projection to match RGB camera intrinsics.\n                    if (!mRenderer.isSceneCameraConfigured()) {\n                        TangoCameraIntrinsics intrinsics =\n                                TangoSupport.getCameraIntrinsicsBasedOnDisplayRotation(\n                                        TangoCameraIntrinsics.TANGO_CAMERA_COLOR,\n                                        mDisplayRotation);\n                        mRenderer.setProjectionMatrix(\n                                projectionMatrixFromCameraIntrinsics(intrinsics));\n                    }\n                    // Connect the camera texture to the OpenGL Texture if necessary\n                    // NOTE: When the OpenGL context is recycled, Rajawali may regenerate the\n                    // texture with a different ID.\n                    if (mConnectedTextureIdGlThread != mRenderer.getTextureId()) {\n                        mTango.connectTextureId(TangoCameraIntrinsics.TANGO_CAMERA_COLOR,\n                                mRenderer.getTextureId());\n                        mConnectedTextureIdGlThread = mRenderer.getTextureId();\n                        Log.d(TAG, \"connected to texture id: \" + mRenderer.getTextureId());\n                    }\n\n                    // If there is a new RGB camera frame available, update the texture\n                    // with it.\n                    if (mIsFrameAvailableTangoThread.compareAndSet(true, false)) {\n                        mRgbTimestampGlThread =\n                                mTango.updateTexture(TangoCameraIntrinsics.TANGO_CAMERA_COLOR);\n                    }\n\n                    // If a new RGB frame has been rendered, update the camera pose to match.\n                    if (mRgbTimestampGlThread > mCameraPoseTimestamp) {\n                        // Calculate the camera color pose at the camera frame update time in\n                        // OpenGL engine.\n                        TangoPoseData lastFramePose = TangoSupport.getPoseAtTime(\n                                mRgbTimestampGlThread,\n                                TangoPoseData.COORDINATE_FRAME_AREA_DESCRIPTION,\n                                TangoPoseData.COORDINATE_FRAME_CAMERA_COLOR,\n                                TangoSupport.ENGINE_OPENGL,\n                                TangoSupport.ENGINE_OPENGL,\n                                mDisplayRotation);\n                        if (lastFramePose.statusCode == TangoPoseData.POSE_VALID) {\n                            // Update the camera pose from the renderer\n                            mRenderer.updateRenderCameraPose(lastFramePose);\n                            mCameraPoseTimestamp = lastFramePose.timestamp;\n\n                            // Update renderer with new markers.\n                            mRenderer.updateMarkers(mMarkerList);\n                        } else {\n                            // When the pose status is not valid, it indicates the tracking has\n                            // been lost. In this case, we simply stop rendering.\n                            //\n                            // This is also the place to display UI to suggest the user walk\n                            // to recover tracking.\n                            Log.w(TAG, \"Can't get device pose at time: \" +\n                                    mRgbTimestampGlThread);\n                        }\n                    }\n                }\n\n                // Avoid crashing the application due to unhandled exceptions.\n            } catch (TangoErrorException e) {\n                Log.e(TAG, \"Tango API call error within the OpenGL render thread\", e);\n            } catch (Throwable t) {\n                Log.e(TAG, \"Exception on the OpenGL thread\", t);\n            }\n        }\n\n        @Override\n        public void onPreDraw(long sceneTime, double deltaTime) {\n\n        }\n\n        @Override\n        public void onPostFrame(long sceneTime, double deltaTime) {\n\n        }\n\n        @Override\n        public boolean callPreFrame() {\n            return true;\n        }\n    });\n\n    mSurfaceView.setSurfaceRenderer(mRenderer);\n}", "path": "java_marker_detection_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\markerdetection\\MarkerDetectionActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Set the color camera background texture rotation and save the camera to display rotation.\n */\n", "func_signal": "private void setDisplayRotation()", "code": "{\n    Display display = getWindowManager().getDefaultDisplay();\n    mDisplayRotation = display.getRotation();\n\n    // We also need to update the camera texture UV coordinates. This must be run in the OpenGL\n    // thread.\n    mSurfaceView.queueEvent(new Runnable() {\n        @Override\n        public void run() {\n            if (mIsConnected) {\n                mRenderer.updateColorCameraTextureUvGlThread(mDisplayRotation);\n            }\n        }\n    });\n}", "path": "java_marker_detection_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\markerdetection\\MarkerDetectionActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Set up the callback listeners for the Tango Service and obtain other parameters required\n * after Tango connection.\n * Listen to updates from the RGB camera.\n */\n", "func_signal": "private void startupTango()", "code": "{\n    // No need to add any coordinate frame pairs since we aren't using pose data from callbacks.\n    ArrayList<TangoCoordinateFramePair> framePairs = new ArrayList<TangoCoordinateFramePair>();\n\n    mTango.connectListener(framePairs, new OnTangoUpdateListener() {\n        @Override\n        public void onPoseAvailable(TangoPoseData pose) {\n            // We are not using onPoseAvailable for this app.\n        }\n\n        @Override\n        public void onXyzIjAvailable(TangoXyzIjData xyzIj) {\n            // We are not using onXyzIjAvailable for this app.\n        }\n\n        @Override\n        public void onPointCloudAvailable(TangoPointCloudData pointCloud) {\n            // We are not using onPointCloudAvailable for this app.\n        }\n\n        @Override\n        public void onTangoEvent(TangoEvent event) {\n            // We are not using onTangoEvent for this app.\n        }\n\n        @Override\n        public void onFrameAvailable(int cameraId) {\n            // Check if the frame available is for the camera we want and update its frame\n            // on the view.\n            if (cameraId == TangoCameraIntrinsics.TANGO_CAMERA_COLOR) {\n                // Now that we are receiving onFrameAvailable callbacks, we can switch\n                // to RENDERMODE_WHEN_DIRTY to drive the render loop from this callback.\n                // This will result in a frame rate of approximately 30FPS, in synchrony with\n                // the RGB camera driver.\n                // If you need to render at a higher rate (i.e., if you want to render complex\n                // animations smoothly) you  can use RENDERMODE_CONTINUOUSLY throughout the\n                // application lifecycle.\n                if (mSurfaceView.getRenderMode() != GLSurfaceView.RENDERMODE_WHEN_DIRTY) {\n                    mSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n                }\n\n                // Mark a camera frame as available for rendering in the OpenGL thread.\n                mIsFrameAvailableTangoThread.set(true);\n                // Trigger a Rajawali render to update the scene with the new RGB data.\n                mSurfaceView.requestRender();\n            }\n        }\n    });\n    mTango.experimentalConnectOnFrameListener(\n        TangoCameraIntrinsics.TANGO_CAMERA_COLOR, new Tango.OnFrameAvailableListener() {\n          @Override\n          public void onFrameAvailable(TangoImageBuffer tangoImageBuffer, int i) {\n              mCurrentImageBuffer = copyImageBuffer(tangoImageBuffer);\n\n              // Detect markers in background thread\n              detectMarkers();\n          }\n\n          TangoImageBuffer copyImageBuffer(TangoImageBuffer imageBuffer) {\n            ByteBuffer clone = ByteBuffer.allocateDirect(imageBuffer.data.capacity());\n            imageBuffer.data.rewind();\n            clone.put(imageBuffer.data);\n            imageBuffer.data.rewind();\n            clone.flip();\n            return new TangoImageBuffer(imageBuffer.width, imageBuffer.height,\n                imageBuffer.stride, imageBuffer.frameNumber, imageBuffer.timestamp,\n                imageBuffer.format, clone, imageBuffer.exposureDurationNs);\n          }\n        });\n}", "path": "java_marker_detection_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\markerdetection\\MarkerDetectionActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "// Pass in a Runnable to be called from UI thread when Tango is ready; this Runnable\n// will be running on a new thread.\n// When Tango is ready, we can call Tango functions safely here only when there are no\n// UI thread changes involved.\n", "func_signal": "@Override\npublic void run()", "code": "{\n    // Synchronize against disconnecting while the service is being used in the OpenGL\n    // thread or in the UI thread.\n    synchronized (ModelCorrespondenceActivity.this) {\n        try {\n            mConfig = setupTangoConfig(mTango);\n            mTango.connect(mConfig);\n            startupTango();\n            TangoSupport.initialize(mTango);\n            connectRenderer();\n            mIsConnected = true;\n            setDisplayRotation();\n        } catch (TangoOutOfDateException e) {\n            Log.e(TAG, getString(R.string.exception_out_of_date), e);\n            showsToastAndFinishOnUiThread(R.string.exception_out_of_date);\n        } catch (TangoErrorException e) {\n            Log.e(TAG, getString(R.string.exception_tango_error), e);\n            showsToastAndFinishOnUiThread(R.string.exception_tango_error);\n        } catch (TangoInvalidException e) {\n            Log.e(TAG, getString(R.string.exception_tango_invalid), e);\n            showsToastAndFinishOnUiThread(R.string.exception_tango_invalid);\n        }\n    }\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * If the user has declined the permission before, we have to explain that the app needs this\n * permission.\n */\n", "func_signal": "private void showRequestPermissionRationale()", "code": "{\n    final AlertDialog dialog = new AlertDialog.Builder(this)\n            .setMessage(\"Java Marker Detection Example requires camera permission\")\n            .setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialogInterface, int i) {\n                    ActivityCompat.requestPermissions(MarkerDetectionActivity.this,\n                            new String[]{CAMERA_PERMISSION}, CAMERA_PERMISSION_CODE);\n                }\n            })\n            .create();\n    dialog.show();\n}", "path": "java_marker_detection_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\markerdetection\\MarkerDetectionActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * This method handles when the user clicks the add point button. It will try to find a point\n * using the point cloud and the TangoSupportLibrary in the aimed location with the crosshair.\n * The resulting point will be shown in AR as a red sphere.\n */\n", "func_signal": "public void addPoint(View view)", "code": "{\n    // Set the point position at the center of the screen.\n    float u = .5f;\n    float v = .5f;\n    try {\n        synchronized (this) {\n            // Take a point measurement by using the TangoSupportLibrary and the point cloud\n            // data.\n            float[] point = doPointMeasurement(u, v, mRgbTimestampGlThread);\n            // If the measurement was successful add it to the list and render a sphere.\n            if (point != null) {\n                mDestPointList.add(point);\n                mModelUpdated = true;\n                // Rotate the model to show the next correspondence point to be added.\n                startRotationAnimation(mModelZRotation, mDestPointList.size() * 90);\n            } else {\n                Toast.makeText(this, \"Could not measure depth point\", Toast.LENGTH_LONG).show();\n                Log.w(TAG, \"Could not measure point\");\n            }\n            // If it's the last point, find the correspondence.\n            if (mDestPointList.size() == mHouseModel.getNumberOfPoints()) {\n                findCorrespondence();\n                mAddButton.setVisibility(View.GONE);\n                mUndoButton.setVisibility(View.GONE);\n                mResetButton.setVisibility(View.VISIBLE);\n            }\n        }\n    } catch (TangoException t) {\n        Toast.makeText(getApplicationContext(),\n                R.string.failed_measurement,\n                Toast.LENGTH_SHORT).show();\n        Log.e(TAG, getString(R.string.failed_measurement), t);\n    } catch (SecurityException t) {\n        Toast.makeText(getApplicationContext(),\n                R.string.failed_permissions,\n                Toast.LENGTH_SHORT).show();\n        Log.e(TAG, getString(R.string.failed_permissions), t);\n    }\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Calculate the transform needed to place the model in the upper left corner of the camera,\n * and rotate it to show the next point to make the correspondence.\n */\n", "func_signal": "private float[] calculateModelTransformFixedToCam(int mDisplayRotation)", "code": "{\n    // Translate to the upper left corner and ahead of the cam if the device is in landscape\n    // mode or to the upper center if it is in portrait mode.\n    float[] rgbTHouse = new float[16];\n    Matrix.setIdentityM(rgbTHouse, 0);\n    if (mDisplayRotation == Surface.ROTATION_0 || mDisplayRotation == Surface.ROTATION_180) {\n        Matrix.translateM(rgbTHouse, 0, 0f, 1.2f, -4);\n    } else {\n        Matrix.translateM(rgbTHouse, 0, -1.5f, 0.3f, -4);\n    }\n\n    // Rotate it 180 degrees around the Z axis to show the front of the house as default\n    // orientation.\n    Matrix.rotateM(rgbTHouse, 0, 180, 0, 0, 1);\n    // Rotate it around the X axis so it looks better as seen from above.\n    Matrix.rotateM(rgbTHouse, 0, 70, 1, 0, 0);\n    // Rotate it around the Z axis to show the next correspondence point to be added.\n    Matrix.rotateM(rgbTHouse, 0, -mModelZRotation, 0, 0, 1);\n    // Scale it to a proper size.\n    Matrix.scaleM(rgbTHouse, 0, 0.03f, 0.03f, 0.03f);\n    return rgbTHouse;\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Discard the last recorded point.\n */\n", "func_signal": "public synchronized void undoPoint(View view)", "code": "{\n    if (!mDestPointList.isEmpty()) {\n        mDestPointList.remove(mDestPointList.size() - 1);\n        mModelUpdated = true;\n        // Rotate the model in reverse to show the next correspondence point to be added.\n        startRotationAnimation(mModelZRotation, mDestPointList.size() * 90);\n    }\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Result for requesting camera permission.\n */\n", "func_signal": "@Override\npublic void onRequestPermissionsResult(int requestCode, String[] permissions,\n                                       int[] grantResults)", "code": "{\n    if (hasCameraPermission()) {\n        bindTangoService();\n    } else {\n        Toast.makeText(this, \"Java Marker Detection Example requires camera permission\",\n                Toast.LENGTH_LONG).show();\n    }\n}", "path": "java_marker_detection_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\markerdetection\\MarkerDetectionActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Sets up the tango configuration object. Make sure mTango object is initialized before\n * making this call.\n */\n", "func_signal": "private TangoConfig setupTangoConfig(Tango tango)", "code": "{\n    // Use default configuration for Tango Service (motion tracking), plus low latency\n    // IMU integration, color camera, and depth.\n    TangoConfig config = tango.getConfig(TangoConfig.CONFIG_TYPE_DEFAULT);\n    // NOTE: Low latency integration is necessary to achieve a\n    // precise alignment of virtual objects with the RGB image and\n    // produce a good AR effect.\n    config.putBoolean(TangoConfig.KEY_BOOLEAN_LOWLATENCYIMUINTEGRATION, true);\n    config.putBoolean(TangoConfig.KEY_BOOLEAN_COLORCAMERA, true);\n    config.putBoolean(TangoConfig.KEY_BOOLEAN_DEPTH, true);\n    config.putInt(TangoConfig.KEY_INT_DEPTH_MODE, TangoConfig.TANGO_DEPTH_MODE_POINT_CLOUD);\n\n    return config;\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Check to see if we have the necessary permissions for this app; ask for them if we don't.\n *\n * @return True if we have the necessary permissions, false if we don't.\n */\n", "func_signal": "private boolean checkAndRequestPermissions()", "code": "{\n    if (!hasCameraPermission()) {\n        requestCameraPermission();\n        return false;\n    }\n    return true;\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Set the color camera background texture rotation and save the display rotation.\n */\n", "func_signal": "private void setDisplayRotation()", "code": "{\n    Display display = getWindowManager().getDefaultDisplay();\n    mDisplayRotation = display.getRotation();\n\n    // We also need to update the camera texture UV coordinates. This must be run in the OpenGL\n    // thread.\n    mSurfaceView.queueEvent(new Runnable() {\n        @Override\n        public void run() {\n            if (mIsConnected) {\n                mRenderer.updateColorCameraTextureUvGlThread(mDisplayRotation);\n            }\n        }\n    });\n}", "path": "java_model_correspondence_example\\app\\src\\main\\java\\com\\projecttango\\examples\\java\\modelcorrespondence\\ModelCorrespondenceActivity.java", "repo_name": "googlearchive/tango-examples-java", "stars": 498, "license": "None", "language": "java", "size": 263071}
{"docstring": "/**\n * Initializes the DiskCache by scanning for all files currently in the\n * specified root directory. Creates the root directory if necessary.\n */\n", "func_signal": "public synchronized void initialize()", "code": "{\n    if (!mRootDirectory.exists()) {\n        if (!mRootDirectory.mkdirs()) {\n            NetroidLog.e(\"Unable to create cache dir %s\", mRootDirectory.getAbsolutePath());\n        }\n        return;\n    }\n\n    File[] files = mRootDirectory.listFiles();\n    if (files == null) {\n        return;\n    }\n    for (File file : files) {\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(file);\n            CacheHeader entry = CacheHeader.readHeader(fis);\n            if (entry.isExpired()) {\n                file.delete();\n            } else {\n                entry.size = file.length();\n                putEntry(entry.key, entry);\n            }\n        } catch (IOException e) {\n            file.delete();\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n            } catch (IOException ignored) {\n            }\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Cancels all requests in this queue with the given tag. Tag must be non-null\n * and equality is by identity.\n */\n", "func_signal": "public void cancelAll(final Object tag)", "code": "{\n    if (tag == null) {\n        throw new IllegalArgumentException(\"Cannot cancelAll with a null tag\");\n    }\n    cancelAll(new RequestFilter() {\n        @Override\n        public boolean apply(Request<?> request) {\n            return request.getTag() == tag;\n        }\n    });\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\RequestQueue.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Writes the contents of this CacheHeader to the specified OutputStream.\n */\n", "func_signal": "public boolean writeHeader(OutputStream os)", "code": "{\n    try {\n        writeInt(os, CACHE_MAGIC);\n        writeString(os, key);\n        writeLong(os, expireTime);\n        writeString(os, charset);\n        os.flush();\n        return true;\n    } catch (IOException e) {\n        NetroidLog.d(\"%s\", e.toString());\n        return false;\n    }\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Perform given request as blocking mode. Note make sure won't invoke on main thread.\n */\n", "func_signal": "public static void perform(Request request)", "code": "{\n    // you might want to keep the ExecutorDelivery instance as Field, but it's\n    // cheap constructing every time, depends how often you use this way.\n    RequestPerformer.perform(request, Netroid.getNetwork(), new ExecutorDelivery(new Executor() {\n        @Override\n        public void execute(Runnable command) {\n            // invoke run() directly.\n            command.run();\n        }\n    }));\n}", "path": "sample\\src\\main\\java\\com\\vincestyling\\netroid\\sample\\netroid\\Netroid.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Sets URL of the image that should be loaded into this view. Note that calling this will\n * immediately either set the cached image (if available) or the default image specified by\n * {@link NetworkImageView#setDefaultImageResId(int)} on the view.\n * <p/>\n * NOTE: If applicable, {@link NetworkImageView#setDefaultImageResId(int)} and\n * {@link NetworkImageView#setErrorImageResId(int)} should be called prior to calling\n * this function.\n *\n * @param url         The URL that should be loaded into this ImageView.\n * @param imageLoader ImageLoader that will be used to make the request.\n */\n", "func_signal": "public void setImageUrl(String url, ImageLoader imageLoader)", "code": "{\n    mUrl = url;\n    mImageLoader = imageLoader;\n    // The URL has potentially changed. See if we need to load it.\n    loadImageIfNecessary(false);\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\widget\\NetworkImageView.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Prunes the cache to fit the amount of bytes specified.\n *\n * @param neededSpace The amount of bytes we are trying to fit into the cache.\n */\n", "func_signal": "private void pruneIfNeeded(int neededSpace)", "code": "{\n    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {\n        return;\n    }\n    if (NetroidLog.DEBUG) {\n        NetroidLog.v(\"Pruning old cache entries.\");\n    }\n\n    long before = mTotalSize;\n    int prunedFiles = 0;\n    long startTime = SystemClock.elapsedRealtime();\n\n    Iterator<Map.Entry<String, CacheHeader>> iterator = mEntries.entrySet().iterator();\n    while (iterator.hasNext()) {\n        Map.Entry<String, CacheHeader> entry = iterator.next();\n        CacheHeader e = entry.getValue();\n        boolean deleted = getFileForKey(e.key).delete();\n        if (deleted) {\n            mTotalSize -= e.size;\n        } else {\n            NetroidLog.d(\"Could not delete cache entry for key=%s, filename=%s\",\n                    e.key, getFilenameForKey(e.key));\n        }\n        iterator.remove();\n        prunedFiles++;\n\n        if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {\n            break;\n        }\n    }\n\n    if (NetroidLog.DEBUG) {\n        NetroidLog.v(\"pruned %d files, %d bytes, %d ms\",\n                prunedFiles, (mTotalSize - before), SystemClock.elapsedRealtime() - startTime);\n    }\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Ensures there is enough space in the buffer for the given number of additional bytes.\n */\n", "func_signal": "private void expand(int i)", "code": "{\n    /* Can the buffer handle @i more bytes, if not expand it */\n    if (count + i <= buf.length) {\n        return;\n    }\n    byte[] newbuf = mPool.getBuf((count + i) * 2);\n    System.arraycopy(buf, 0, newbuf, 0, count);\n    mPool.returnBuf(buf);\n    buf = newbuf;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\toolbox\\PoolingByteArrayOutputStream.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Simple wrapper around {@link InputStream#read()} that throws EOFException\n * instead of returning -1.\n */\n", "func_signal": "private static int read(InputStream is) throws IOException", "code": "{\n    int b = is.read();\n    if (b == -1) {\n        throw new EOFException();\n    }\n    return b;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * @param httpStack      HTTP stack to be used\n * @param bytePoolSize   Size of buffer pool that improves GC performance in copy operations.\n * @param defaultCharset when Http Header doesn't offer the 'Content-Type:Charset', it will be use.\n */\n", "func_signal": "public BasicNetwork(HttpStack httpStack, int bytePoolSize, String defaultCharset)", "code": "{\n    ByteArrayPool.init(bytePoolSize);\n    mDefaultCharset = defaultCharset;\n    mHttpStack = httpStack;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\toolbox\\BasicNetwork.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Invalidates an entry in the cache.\n *\n * @param key        Cache key\n * @param expireTime The new expireTime\n */\n", "func_signal": "public synchronized void invalidate(String key, long expireTime)", "code": "{\n    Entry entry = getEntry(key);\n    if (Entry.invalidate(entry, expireTime)) {\n        putEntry(key, entry);\n    }\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Creates a new network dispatcher thread.  You must call {@link #start()}\n * in order to begin processing.\n *\n * @param queue    Queue of incoming requests for triage\n * @param network  Network interface to use for performing requests\n * @param cache    Cache interface to use for writing responses to cache\n * @param delivery Delivery interface to use for posting responses\n */\n", "func_signal": "public NetworkDispatcher(BlockingQueue<Request> queue,\n                         Network network, DiskCache cache,\n                         Delivery delivery)", "code": "{\n    mQueue = queue;\n    mCache = cache;\n    mNetwork = network;\n    mDelivery = delivery;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\NetworkDispatcher.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Reads the header off of an InputStream and returns a CacheHeader object.\n *\n * @param is The InputStream to read from.\n * @throws IOException\n */\n", "func_signal": "public static CacheHeader readHeader(InputStream is) throws IOException", "code": "{\n    CacheHeader entry = new CacheHeader();\n    int magic = readInt(is);\n    if (magic != CACHE_MAGIC) {\n        // don't bother deleting, it'll get pruned eventually\n        throw new IOException();\n    }\n    entry.key = readString(is);\n    entry.expireTime = readLong(is);\n    entry.charset = readString(is);\n    return entry;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Reads the contents of an InputStream into a byte[].\n */\n", "func_signal": "private static byte[] streamToBytes(InputStream in, int length) throws IOException", "code": "{\n    byte[] bytes = new byte[length];\n    int count;\n    int pos = 0;\n    while (pos < length && ((count = in.read(bytes, pos, length - pos)) != -1)) {\n        pos += count;\n    }\n    if (pos != length) {\n        throw new IOException(\"Expected \" + length + \" bytes, read \" + pos + \" bytes\");\n    }\n    return bytes;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Forces this dispatcher to quit immediately.  If any requests are still in\n * the queue, they are not guaranteed to be processed.\n */\n", "func_signal": "public void quit()", "code": "{\n    mQuit = true;\n    interrupt();\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\NetworkDispatcher.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Creates a pseudo-unique filename for the specified cache key.\n *\n * @param key The key to generate a file name for.\n * @return A pseudo-unique filename.\n */\n", "func_signal": "private String getFilenameForKey(String key)", "code": "{\n    int firstHalfLength = key.length() / 2;\n    String localFilename = String.valueOf(key.substring(0, firstHalfLength).hashCode());\n    localFilename += String.valueOf(key.substring(firstHalfLength).hashCode());\n    return localFilename;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Constructs a new {@code ByteArrayOutputStream} with a default size of {@code size} bytes. If\n * more than {@code size} bytes are written to this instance, the underlying byte array will\n * expand.\n *\n * @param size initial size for the underlying byte array. The value will be pinned to a default\n *             minimum size.\n */\n", "func_signal": "public PoolingByteArrayOutputStream(ByteArrayPool pool, int size)", "code": "{\n    mPool = pool;\n    buf = mPool.getBuf(Math.max(size, DEFAULT_SIZE));\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\toolbox\\PoolingByteArrayOutputStream.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Clears the cache. Deletes all cached files from disk.\n */\n", "func_signal": "public synchronized void clearCache()", "code": "{\n    File[] files = mRootDirectory.listFiles();\n    if (files != null) {\n        for (File file : files) {\n            file.delete();\n        }\n    }\n    mEntries.clear();\n    mTotalSize = 0;\n    NetroidLog.d(\"Cache cleared.\");\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Creates a new network response.\n *\n * @param statusCode the HTTP status code\n * @param data       Response body\n * @param charset    The response body charset, parse by http header\n */\n", "func_signal": "public NetworkResponse(int statusCode, byte[] data, String charset)", "code": "{\n    this.statusCode = statusCode;\n    this.data = data;\n    this.charset = charset;\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\NetworkResponse.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Adds a Request to the dispatch queue.\n *\n * @param request The request to service\n * @return The passed-in request\n */\n", "func_signal": "public Request add(Request request)", "code": "{\n    // Tag the request as belonging to this queue and add it to the set of current requests.\n    request.setRequestQueue(this);\n    synchronized (mCurrentRequests) {\n        mCurrentRequests.add(request);\n    }\n\n    // Process requests in the order they are added.\n    request.setSequence(getSequenceNumber());\n    request.addMarker(\"add-to-queue\");\n\n    // If the request is uncacheable or forceUpdate, skip the cache queue and go straight to the network.\n    if (request.isForceUpdate() || !request.shouldCache()) {\n        mDelivery.postNetworking(request);\n        mNetworkQueue.add(request);\n        return request;\n    }\n\n    // Insert request into stage if there's already a request with the same cache key in flight.\n    synchronized (mWaitingRequests) {\n        String cacheKey = request.getCacheKey();\n        if (mWaitingRequests.containsKey(cacheKey)) {\n            // There is already a request in flight. Queue up.\n            Queue<Request> stagedRequests = mWaitingRequests.get(cacheKey);\n            if (stagedRequests == null) {\n                stagedRequests = new LinkedList<Request>();\n            }\n            stagedRequests.add(request);\n            mWaitingRequests.put(cacheKey, stagedRequests);\n            if (NetroidLog.DEBUG) {\n                NetroidLog.v(\"Request for cacheKey=%s is in flight, putting on hold.\", cacheKey);\n            }\n        } else {\n            // Insert 'null' queue for this cacheKey, indicating there is now a request in\n            // flight.\n            mWaitingRequests.put(cacheKey, null);\n            mCacheQueue.add(request);\n        }\n        return request;\n    }\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\RequestQueue.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "/**\n * Returns the cache entry with the specified key if it exists, null otherwise.\n */\n", "func_signal": "public synchronized Entry getEntry(String key)", "code": "{\n    CacheHeader entry = mEntries.get(key);\n    // if the entry does not exist, return.\n    if (entry == null) {\n        return null;\n    }\n\n    File file = getFileForKey(key);\n    CountingInputStream cis = null;\n    try {\n        cis = new CountingInputStream(new FileInputStream(file));\n        CacheHeader.readHeader(cis); // eat header\n        byte[] data = streamToBytes(cis, (int) (file.length() - cis.bytesRead));\n        return entry.toCacheEntry(data);\n    } catch (IOException e) {\n        NetroidLog.d(\"%s: %s\", file.getAbsolutePath(), e.toString());\n        removeEntry(key);\n        return null;\n    } finally {\n        if (cis != null) {\n            try {\n                cis.close();\n            } catch (IOException ioe) {\n            }\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\vincestyling\\netroid\\cache\\DiskCache.java", "repo_name": "vince-styling/Netroid", "stars": 286, "license": "None", "language": "java", "size": 1637}
{"docstring": "// result is RInt scalar (or RDouble +-infinity)\n", "func_signal": "public RAny extreme(RInt arg, ASTNode ast)", "code": "{\n    int size = arg.size();\n    if (size == 0) {\n        RContext.warning(ast, RError.NO_NONMISSING_MAX);\n        return emptySetExtreme();\n    }\n    int res = arg.getInt(0);\n    for (int i = 1; i < size; i++) {\n        int v = arg.getInt(i);\n        res = extreme(v, res);\n        if (v == RInt.NA) { return RInt.BOXED_NA; }\n    }\n    return RInt.RIntFactory.getScalar(res);\n}", "path": "src\\r\\builtins\\ExtremeBase.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// TODO This has to be changed for partial matching so that exact is checked also for vectors\n", "func_signal": "@Override public void visit(AccessVector a)", "code": "{\n    SplitArgumentList sa = splitArgumentList(a.getArgs(), false);\n\n    if (sa.convertedExpressions.length == 1) { // vector\n\n        // TODO: should support \"exact\" and \"drop\"\n        if (a.isSubset()) {\n            // expressions like b[x == c]\n            // FIXME: add more variations of this\n            ASTNode indexNode = a.getArgs().first().getValue();\n            if (indexNode instanceof EQ) {\n                EQ eqNode = (EQ) indexNode;\n                if (eqNode.getRHS() instanceof Constant) {\n                    RAny cv = ((Constant) eqNode.getRHS()).getValue();\n                    if (cv instanceof RDouble && ((RDouble) cv).size() == 1) {\n                        double c = ((RDouble) cv).getDouble(0);\n                        if (RDouble.RDoubleUtils.isFinite(c)) {\n                            result = new ReadVector.LogicalEqualitySelection(a, createTree(a.getVector()), createTree(eqNode.getLHS()), c);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (a.getArgs().first().getValue() instanceof Colon && a.isSubset()) {\n            result = new ReadVector.SimpleIntSimpleRangeSelection(a, createTree(a.getVector()), sa.convertedExpressions, a.isSubset());\n        } else {\n            RNode e = sa.convertedExpressions[0];\n            if (e instanceof r.nodes.exec.Constant) {\n                RAny v = (RAny) e.execute(null);\n                if (v instanceof RDouble || v instanceof RInt) {\n                    RInt iv = v.asInt();\n                    if (iv.size() == 1) {\n                        int index = v.asInt().getInt(0);\n                        if (index > 0) {\n                            result = new ReadVector.SimpleConstantScalarIntSelection(a, createTree(a.getVector()), sa.convertedExpressions, index, a.isSubset());\n                            return;\n                        }\n                    }\n                }\n            }\n            result = new ReadVector.DoubleBaseSimpleSelection.ScalarIntSelection(a, createTree(a.getVector()), sa.convertedExpressions, a.isSubset());\n        }\n        return;\n    }\n    // array & matrix read\n    if (sa.convertedExpressions.length >= 2) { // array or matrix ?\n\n        RNode drop = null;\n        RNode exact = null;\n        RNode[] selectors = new RNode[sa.convertedExpressions.length];\n        int[] nodeIndexes = new int[selectors.length];\n\n        RNode[] nodes = sa.convertedExpressions;\n        RSymbol[] names = sa.convertedNames;\n        int dims = 0;\n\n        for (int i = 0; i < nodes.length; i++) {\n            if (names[i] == RSymbol.DROP_SYMBOL) {\n                assert Utils.check(drop == null); // GNU-R allows multiple occurrences\n                drop = nodes[i];\n            } else if (names[i] == RSymbol.EXACT_SYMBOL) {\n                assert Utils.check(exact == null); // GNU-R allows multiple occurrences\n                exact = nodes[i];\n            } else {\n                selectors[dims] = nodes[i];\n                nodeIndexes[dims] = i;\n                ++dims;\n            }\n        }\n\n        assert Utils.check(dims != 0); // FIXME: GNU-R supports this\n\n        if (dims == 2) { // if matrix read, use the specialized matrix form\n            if (a.isSubset() && selectors[0] == null && selectors[1] != null) { // matrix column\n                result = new ReadArray.MatrixColumnSubset(a, createTree(a.getVector()), selectors[1], Selector.createDropOptionNode(a, drop), Selector.createExactOptionNode(a, exact));\n                return;\n\n            }\n            if (a.isSubset() && selectors[0] != null && selectors[1] == null) {\n                result = new ReadArray.MatrixRowSubset(a, createTree(a.getVector()), selectors[0], Selector.createDropOptionNode(a, drop), Selector.createExactOptionNode(a, exact));\n                return;\n            }\n\n            // special handling of m[a:b, c:d]\n            ASTNode node0 = a.getArgs().getNode(nodeIndexes[0]);\n            ASTNode node1 = a.getArgs().getNode(nodeIndexes[1]);\n\n            if (a.isSubset() && node0 != null && node1 != null && node0 instanceof Colon && node1 instanceof Colon) {\n                Colon rows = (Colon) node0;\n                Colon cols = (Colon) node1;\n                result = new ReadArray.MatrixSequenceSubset(a, createTree(a.getVector()), createTree(rows.getLHS()), createTree(rows.getRHS()), createTree(cols.getLHS()),\n                        createTree(cols.getRHS()), Selector.createDropOptionNode(a, drop), Selector.createExactOptionNode(a, exact));\n                return;\n\n            }\n\n            Selector.SelectorNode selectorIExpr = Selector.createSelectorNode(a, a.isSubset(), selectors[0]);\n            Selector.SelectorNode selectorJExpr = Selector.createSelectorNode(a, a.isSubset(), selectors[1]);\n\n            if (!a.isSubset()) {\n                result = new ReadArray.MatrixSubscript(a, createTree(a.getVector()), selectorIExpr, selectorJExpr, Selector.createDropOptionNode(a, drop), Selector.createExactOptionNode(a, exact));\n            } else {\n                result = new ReadArray.MatrixRead(a, a.isSubset(), createTree(a.getVector()), selectorIExpr, selectorJExpr, Selector.createDropOptionNode(a, drop), Selector.createExactOptionNode(\n                        a, exact));\n            }\n            return;\n        }\n        // otherwise use array read\n        if (isArrayColumnSubset(a.isSubset(), selectors, dims)) {\n            result = new ReadArray.ArrayColumnSubset(a, createTree(a.getVector()), dims, selectors[dims - 1], Selector.createDropOptionNode(a, drop), Selector.createExactOptionNode(a, exact));\n            return;\n        }\n\n        Selector.SelectorNode[] selNodes = new Selector.SelectorNode[dims];\n        for (int i = 0; i < selNodes.length; ++i) {\n            selNodes[i] = Selector.createSelectorNode(a, a.isSubset(), selectors[i]);\n        }\n\n        result = new ReadArray.GenericRead(a, a.isSubset(), createTree(a.getVector()), selNodes, Selector.createDropOptionNode(a, drop), Selector.createExactOptionNode(a, exact));\n        return;\n    }\n    if (sa.convertedExpressions.length == 0) {\n        if (a.isSubset()) {\n            result = createTree(a.getVector());\n            return;\n        } else {\n            throw RError.getInvalidSubscriptType(a, \"symbol\");\n        }\n\n    }\n    Utils.nyi(\"unsupported indexing style\");\n}", "path": "src\\r\\nodes\\tools\\BuildExecutableTree.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/**\n * @param name\n *            operation's name\n * @param parameters\n *            name of the parameters, can be empty but not null.\n * @param required\n *            array of argument names that are required. If null, same as parameters\n */\n", "func_signal": "protected CallFactory(String name, String[] parameters, String[] required)", "code": "{\n    this.name = RSymbol.getSymbol(name);\n    this.parameters = RSymbol.getSymbols(parameters);\n    this.required = required == null ? this.parameters : RSymbol.getSymbols(required);\n    boolean dotdot = false;\n    if (this.required != this.parameters) {\n        for (RSymbol r : this.required) {\n            boolean match = false;\n            for (RSymbol p : this.parameters) {\n                match |= r == p;\n            }\n            if (!match) { throw Utils.nyi(\"Internal error in builtin definition for \" + name + \"required list has extra values\"); }\n        }\n    }\n    RSymbol[] minPs = new RSymbol[parameters.length];\n    int pos = 0;\n    for (RSymbol p : this.parameters) {\n        dotdot |= p == RSymbol.THREE_DOTS_SYMBOL;\n        if (!dotdot) minPs[pos++] = p;\n    }\n    int min = 0;\n    for (int i = 0; i < pos; i++) {\n        for (RSymbol r : this.required) {\n            if (minPs[i] == r) {\n                min++;\n                break;\n            }\n        }\n    }\n    maxParameters = dotdot ? Integer.MAX_VALUE : parameters.length;\n    minParameters = min;\n}", "path": "src\\r\\builtins\\CallFactory.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// replaces trailing return statements just by the argument value\n// introduces IfReturnRest if enabled\n//\n// FIXME: this will not optimize nested if-return-rest constructs (nested within the true branch)\n", "func_signal": "private RNode buildSequence(Sequence origSequence, ASTNode[] exprs, int from, int to, boolean introduceIfReturnRest)", "code": "{\n    RNode[] rexprs = new RNode[exprs.length - from];\n    int i = from;\n    for (; i < to; i++) {\n        ASTNode e = exprs[i];\n\n        if (introduceIfReturnRest && e instanceof If && !RETURN_SYMBOL.builtinIsOverridden()) {\n            If ifExpr = (If) e;\n            if (i < to - 1 && ifExpr.getFalseCase() == null) {\n                // if (cond) { .... } ; remaining   - we don't know yet if there is a return\n                ASTNode trueBranch = ifExpr.getTrueCase();\n                RNode truePart = null;\n                RNode returnCallArg = returnCallArgument(trueBranch);\n                if (returnCallArg != null) {\n                    truePart = null;\n                } else if (trueBranch instanceof Sequence) {\n                    Sequence trueSequence = (Sequence) trueBranch;\n                    ASTNode[] trueExprs = trueSequence.getExprs();\n                    if (trueExprs.length > 1) {\n                        // FIXME: in theory we could be looking recursively into the tree, but recovery would then become hard\n                        ASTNode lastTrueExpr = trueExprs[trueExprs.length - 1];\n                        returnCallArg = returnCallArgument(lastTrueExpr);\n                        if (returnCallArg != null) {\n                            truePart = buildSequence(trueSequence, trueExprs, 0, trueExprs.length - 1, false);\n                        }\n                    }\n                }\n\n                if (returnCallArg != null) {\n                    // if (cond) { .... ; return(returnCallArg) } ; remaining   (no we know there is a return in the true branch\n                    RNode remainingSubsequence = buildSequence(origSequence, exprs, i + 1, to, true);\n                    RNode newIf = new r.nodes.exec.If.IfReturnRest.ReturnBuiltin(e, createLazyTree(ifExpr.getCond()), truePart,\n                            returnCallArg, remainingSubsequence);\n                    rexprs[i - from] = newIf;\n                    if (DEBUG_RETURN) System.err.println(\"Converted if with return, new if is \" + PrettyPrinter.prettyPrint(newIf.getAST()));\n                    i++;\n                    break;\n                }\n            }\n        }\n        if (i == to - 1 && isTrailingInAFunction(origSequence) && !RETURN_SYMBOL.builtinIsOverridden()) {\n            // last element of a sequence - could it be a trailing return?\n            // this optimization is done only for returns known to be trailing in the original AST tree, before introducing\n            // IfReturnRest ; such returns will still be trailing in after the introduction of IfReturnRest\n\n            RNode returnCallArg = returnCallArgument(e);\n            if (returnCallArg != null) {\n                rexprs[i - from] = returnCallArg; // TODO: listener for return override\n                final RNode lreturnCallArg = returnCallArg;\n                final ASTNode lreturnCallAST = e;\n                SymbolChangeListener listener = new SymbolChangeListener() {\n                    public boolean onChange(RSymbol symbol) {\n                        RNode oldNode = lreturnCallArg;\n                        while(oldNode.getNewNode() != null) {\n                            oldNode = oldNode.getNewNode();\n                        }\n                        RNode[] newArgExprs = new RNode[] { oldNode };\n                        RNode parent = oldNode.getParent();\n                        oldNode.clearParentPointer(); // FIXME: this sucks, but function call does not support insertion on argument\n\n                            // we can ignore names because return ignores them\n                        RNode fullReturnCall = r.nodes.exec.FunctionCall.FACTORY.create(lreturnCallAST, new RSymbol[]{null}, newArgExprs);\n\n                        parent.changeChildPointer(oldNode, fullReturnCall);\n                        return false;\n                    }\n                };\n\n                RETURN_SYMBOL.addChangeListener(listener);\n                if (DEBUG_RETURN) System.err.println(\"Removed trailing return \" + PrettyPrinter.prettyPrint(e));\n                continue;\n            }\n        }\n        rexprs[i - from] = createTree(e);\n    }\n    int length = i - from;\n    RNode[] newRExprs = new RNode[length];\n    System.arraycopy(rexprs, 0, newRExprs, 0, length);\n    return createSequenceFor(origSequence, newRExprs);\n}", "path": "src\\r\\nodes\\tools\\BuildExecutableTree.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// args has length at least 2\n", "func_signal": "public RAny extreme(RAny[] args, ASTNode ast)", "code": "{\n    int size = args.length;\n    RAny res = extreme(args[0], ast);\n    for (int i = 1; i < size; i++) {\n        res = extreme(res, extreme(args[i], ast));\n    }\n    return res;\n}", "path": "src\\r\\builtins\\ExtremeBase.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/**\n * Add all non-special attributes to content and names.\n */\n", "func_signal": "private static void fillAttributes(RAny[] content, RSymbol[] names, int start, Map<RSymbol, RAny> map)", "code": "{\n    int i = start;\n    for (Map.Entry<RSymbol, RAny> entry : map.entrySet()) {\n        content[i] = entry.getValue();\n        names[i] = entry.getKey();\n        i++;\n    }\n}", "path": "src\\r\\builtins\\Attributes.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/** For debugging. */\n", "func_signal": "@Override public String toString()", "code": "{\n    String res = \"[\";\n    for (int i = 0; i < parameters.length; i++) {\n        res += parameters[i] + \"=\" + paramPositions[i] + ((i == parameters.length - 1) ? \"\" : \",\");\n    }\n    return res + \"]\";\n}", "path": "src\\r\\builtins\\CallFactory.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// result is RDouble scalar\n", "func_signal": "public RAny extreme(RDouble arg, ASTNode ast)", "code": "{\n    int size = arg.size();\n    if (size == 0) {\n        RContext.warning(ast, RError.NO_NONMISSING_MAX);\n        return emptySetExtreme();\n    }\n    double res = arg.getDouble(0);\n    for (int i = 1; i < size; i++) {\n        double d = arg.getDouble(i);\n        res = extreme(d, res);\n        if (RDouble.RDoubleUtils.arithIsNA(d)) { return RDouble.BOXED_NA; }\n    }\n    return RDouble.RDoubleFactory.getScalar(res);\n}", "path": "src\\r\\builtins\\ExtremeBase.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/**\n * This method will extract names and dimensions attributes from the value argument. Argument start indicates where\n * in the content and names arrays the inserts should be made.\n */\n", "func_signal": "private static void fillSpecialAttributes(RAny[] content, RSymbol[] names, int start, RAny value)", "code": "{\n    if (!(value instanceof RArray)) { return; } // When is this the case?\n    RArray arr = (RArray) value;\n    int i = start;\n    if (arr.dimensions() != null) {\n        content[i] = dimensionsAsVector(arr.dimensions());\n        names[i] = RSymbol.DIM_SYMBOL;\n        i++;\n    }\n    if (arr.names() != null) {\n        content[i] = namesAsVector(arr.names());\n        names[i] = RSymbol.NAMES_SYMBOL;\n    }\n}", "path": "src\\r\\builtins\\Attributes.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// result is RInt scalar (or RDouble +-infinity)\n", "func_signal": "public RAny extreme(RLogical arg, ASTNode ast)", "code": "{\n    int size = arg.size();\n    if (size == 0) {\n        RContext.warning(ast, RError.NO_NONMISSING_MAX);\n        return emptySetExtreme();\n    }\n    int res = arg.getLogical(0);\n    for (int i = 1; i < size; i++) {\n        int v = arg.getLogical(i);\n        if (v > res) {\n            res = v;\n        }\n        if (v == RLogical.NA) { return RInt.BOXED_NA; }\n    }\n    return RInt.RIntFactory.getScalar(res);\n}", "path": "src\\r\\builtins\\ExtremeBase.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// invoke the builtin for given arguments, which may change between subsequent calls\n// used for dynamic invocations (calls that include dots, do.call, etc)\n", "func_signal": "public Object invokeDynamic(Frame frame, RSymbol[] names, RAny[] values, ASTNode ast)", "code": "{\n    // dummy base implementation - builtins should override\n    int len = values.length;\n    RNode[] exprs = new RNode[len];\n    for (int i = 0; i < len; i++) {\n        RAny value = values[i];\n        ASTNode dummyAST = new r.nodes.ast.Constant(value);\n        exprs[i] = new r.nodes.exec.Constant(dummyAST, value);\n    }\n    final RNode builtinNode = create(ast, names, exprs);\n\n    // the root node is needed because the builtin may overwrite itself using replace\n    RNode rootNode = new BaseR(ast) {\n\n        @Child RNode node = adoptChild(builtinNode);\n\n        @Override\n        public final Object execute(Frame builtinFrame) {\n            return node.execute(builtinFrame);\n        }\n\n        @Override\n        protected <N extends RNode> N replaceChild(RNode oldNode, N newNode) {\n            assert oldNode != null;\n            if (node == oldNode) {\n                node = newNode;\n                return adoptInternal(newNode);\n            }\n            return super.replaceChild(oldNode, newNode);\n        }\n    };\n    return rootNode.execute(frame);\n}", "path": "src\\r\\builtins\\CallFactory.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// result is RDouble, RInt or RString scalar\n", "func_signal": "public RAny extreme(RAny arg, ASTNode ast)", "code": "{\n    if (arg instanceof RDouble) { return extreme((RDouble) arg, ast); }\n    if (arg instanceof RInt) { return extreme((RInt) arg, ast); }\n    if (arg instanceof RLogical) { return extreme((RLogical) arg, ast); }\n    if (arg instanceof RString) { return extreme((RString) arg, ast); }\n    throw RError.getInvalidTypeArgument(ast, arg.typeOf());\n}", "path": "src\\r\\builtins\\ExtremeBase.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// result is RString scalar\n", "func_signal": "public RAny extreme(RString arg, ASTNode ast)", "code": "{\n    int size = arg.size();\n    if (size == 0) {\n        RContext.warning(ast, RError.NO_NONMISSING_MAX);\n        return emptySetExtreme();\n    }\n    String res = arg.getString(0);\n    for (int i = 1; i < size; i++) {\n        String s = arg.getString(i);\n        if (s != RString.NA) {\n            res = extreme(s, res);\n        } else {\n            return RString.BOXED_NA;\n        }\n    }\n    return RString.RStringFactory.getScalar(res);\n}", "path": "src\\r\\builtins\\ExtremeBase.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// parses a logical argument to a builtin that is not checked for validity and is used in the GNU-R code\n// of a builtin written in R; this can never exactly match the GNU-R semantics\n// perhaps error messages should be made explicit in a spec, instead\n", "func_signal": "public static boolean parseUncheckedLogical(RAny arg, ASTNode ast)", "code": "{\n    RLogical l = arg.asLogical();\n    int size = l.size();\n    if (size >= 1) {\n        int v = l.getLogical(0);\n        if (v == RLogical.NA) {\n            throw RError.getUnexpectedNA(ast);\n        }\n        if (size > 1) {\n            RContext.warning(ast, RError.LENGTH_GT_1);\n        }\n        return (v == RLogical.TRUE);\n    }\n    throw RError.getUnexpectedNA(ast);\n}", "path": "src\\r\\builtins\\CallFactory.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/**\n * Converts the field update ($ selector on topmost lhf of assignment a$x = xyz).\n */\n", "func_signal": "@Override public void visit(UpdateField u)", "code": "{\n    /// FIXME this uses the old variant of $ selector that works also on vectors. Should be replaced.\n    FieldAccess fa = u.getVector();\n    ASTNode varAccess = fa.lhs();\n    if (!(varAccess instanceof SimpleAccessVariable)) {\n        Utils.nyi(\"expecting vector name for vector update\"); // TODO: support expressions like x$a$b <- 10\n    }\n    RSymbol var = ((SimpleAccessVariable) varAccess).getSymbol();\n    result = new r.nodes.exec.UpdateVector.DollarListUpdate(u, u.isSuper(), var, createTree(varAccess), RSymbol.getSymbol(fa.fieldName()), createTree(u.getRHS()));\n}", "path": "src\\r\\nodes\\tools\\BuildExecutableTree.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/** When there are no custom attributes. */\n", "func_signal": "private static RAny specialAttributesAsList(RAny value)", "code": "{\n    int size = countSpecialAttributes(value);\n    if (size == 0) { return RNull.getNull(); } // no custom attributes\n    RAny[] acontent = new RAny[size];\n    RSymbol[] anames = new RSymbol[size];\n    fillSpecialAttributes(acontent, anames, 0, value);\n    return RList.RListFactory.getFor(acontent, null, RArray.Names.create(anames));\n}", "path": "src\\r\\builtins\\Attributes.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// takes RDouble, RInt, RString scalars\n// returns RDouble, RInt or RString scalar\n", "func_signal": "public RAny extreme(RAny scalar0, RAny scalar1)", "code": "{ // FIXME: does this preserve NA's ?\n    if (scalar0 instanceof RDouble) {\n        if (scalar1 instanceof RDouble) {\n            return RDouble.RDoubleFactory.getScalar(extreme(((RDouble) scalar0).getDouble(0), ((RDouble) scalar1).getDouble(0)));\n        } else if (scalar1 instanceof RInt) {\n            return RDouble.RDoubleFactory.getScalar(extreme(((RDouble) scalar0).getDouble(0), Convert.int2double(((RInt) scalar1).getInt(0))));\n        } else {\n            return RString.RStringFactory.getScalar(extreme(Convert.double2string(((RDouble) scalar0).getDouble(0)), ((RString) scalar1).getString(0)));\n        }\n    }\n    if (scalar0 instanceof RInt) {\n        if (scalar1 instanceof RDouble) {\n            return RDouble.RDoubleFactory.getScalar(extreme(Convert.int2double(((RInt) scalar0).getInt(0)), ((RDouble) scalar1).getDouble(0)));\n        } else if (scalar1 instanceof RInt) {\n            return RInt.RIntFactory.getScalar(extreme(((RInt) scalar0).getInt(0), ((RInt) scalar1).getInt(0)));\n        } else {\n            return RString.RStringFactory.getScalar(extreme(Convert.int2string(((RInt) scalar0).getInt(0)), ((RString) scalar1).getString(0)));\n        }\n    }\n    // scalar0 instance of RString\n    if (scalar1 instanceof RDouble) {\n        return RString.RStringFactory.getScalar(extreme(((RString) scalar0).getString(0), Convert.double2string(((RDouble) scalar1).getDouble(0))));\n    } else if (scalar1 instanceof RInt) {\n        return RString.RStringFactory.getScalar(extreme(((RString) scalar0).getString(0), Convert.int2string(((RInt) scalar1).getInt(0))));\n    } else {\n        return RString.RStringFactory.getScalar(extreme(((RString) scalar0).getString(0), ((RString) scalar1).getString(0)));\n    }\n\n}", "path": "src\\r\\builtins\\ExtremeBase.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "// intended for detecting whether a return statement if executed, will be executed last in a function\n", "func_signal": "private boolean isTrailingInAFunction(ASTNode n)", "code": "{\n    ASTNode parent = n.getParent();\n    if (parent == null) {\n        return false; // (?) but this should not have return anyway\n    }\n    if (parent instanceof Function) {\n        return true;\n    }\n    if (parent instanceof Sequence) {\n        Sequence parentSeq = (Sequence) parent;\n        ASTNode[] exprs = parentSeq.getExprs();\n        return (exprs[exprs.length - 1] == n) && isTrailingInAFunction(parentSeq);\n    }\n    if (parent instanceof If) {\n        If parentIf = (If) parent;\n        ASTNode trueBranch = parentIf.getTrueCase();\n        ASTNode falseBranch = parentIf.getFalseCase();\n        return ((trueBranch == n || falseBranch == n ) && isTrailingInAFunction(parentIf));\n    }\n    return false;\n}", "path": "src\\r\\nodes\\tools\\BuildExecutableTree.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/** Return the index in the formal parameter list of one particular formal parameter. */\n", "func_signal": "private int ix(RSymbol p)", "code": "{\n    for (int i = 0; i < parameters.length; i++) {\n        if (parameters[i] == p) { return i; }\n    }\n    throw new Error(p + \" not found in \" + this);\n}", "path": "src\\r\\builtins\\CallFactory.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/**\n * Return the count of special attributes present. There are at most two: \"dimensions\" and \"names\"\n */\n", "func_signal": "private static int countSpecialAttributes(RAny a)", "code": "{\n    if (!(a instanceof RArray)) { return 0; }\n    RArray arr = (RArray) a;\n    int i = arr.dimensions() == null ? 0 : 1;\n    int j = arr.names() == null ? 0 : 1;\n    return i + j;\n}", "path": "src\\r\\builtins\\Attributes.java", "repo_name": "allr/purdue-fastr", "stars": 268, "license": "other", "language": "java", "size": 17656}
{"docstring": "/**\n * List the names of the entries in the given {@link JarInputStream} that begin with the\n * specified {@code path}. Entries will match with or without a leading slash.\n * \n * @param jar The JAR input stream\n * @param path The leading path to match\n * @return The names of all the matching entries\n * @throws IOException If I/O errors occur\n */\n", "func_signal": "protected List<String> listResources(JarInputStream jar, String path) throws IOException", "code": "{\n  // Include the leading and trailing slash when matching names\n  if (!path.startsWith(\"/\")) {\n    path = \"/\" + path;\n  }\n  if (!path.endsWith(\"/\")) {\n    path = path + \"/\";\n  }\n\n  // Iterate over the entries and collect those that begin with the requested path\n  List<String> resources = new ArrayList<String>();\n  for (JarEntry entry; (entry = jar.getNextJarEntry()) != null;) {\n    if (!entry.isDirectory()) {\n      // Add leading slash if it's missing\n      String name = entry.getName();\n      if (!name.startsWith(\"/\")) {\n        name = \"/\" + name;\n      }\n\n      // Check file name\n      if (name.startsWith(path)) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Found resource: \" + name);\n        }\n        // Trim leading slash\n        resources.add(name.substring(1));\n      }\n    }\n  }\n  return resources;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\io\\DefaultVFS.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "/*\n * Creates a logging version of a PreparedStatement\n *\n * @param stmt - the statement\n * @param sql  - the sql statement\n * @return - the proxy\n */\n", "func_signal": "public static PreparedStatement newInstance(PreparedStatement stmt, Log statementLog, int queryStack)", "code": "{\n  InvocationHandler handler = new PreparedStatementLogger(stmt, statementLog, queryStack);\n  ClassLoader cl = PreparedStatement.class.getClassLoader();\n  return (PreparedStatement) Proxy.newProxyInstance(cl, new Class[]{PreparedStatement.class, CallableStatement.class}, handler);\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\logging\\jdbc\\PreparedStatementLogger.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "// MULTIPLE RESULT SETS\n", "func_signal": "private void linkToParents(ResultSet rs, ResultMapping parentMapping, Object rowValue) throws SQLException", "code": "{\n  CacheKey parentKey = createKeyForMultipleResults(rs, parentMapping, parentMapping.getColumn(), parentMapping.getForeignColumn());\n  List<PendingRelation> parents = pendingRelations.get(parentKey);\n  if (parents != null) {\n    for (PendingRelation parent : parents) {\n      if (parent != null && rowValue != null) {\n          linkObjects(parent.metaObject, parent.propertyMapping, rowValue);\n      }\n    }\n  }\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// HANDLE OUTPUT PARAMETER\n//\n", "func_signal": "@Override\npublic void handleOutputParameters(CallableStatement cs) throws SQLException", "code": "{\n  final Object parameterObject = parameterHandler.getParameterObject();\n  final MetaObject metaParam = configuration.newMetaObject(parameterObject);\n  final List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n  for (int i = 0; i < parameterMappings.size(); i++) {\n    final ParameterMapping parameterMapping = parameterMappings.get(i);\n    if (parameterMapping.getMode() == ParameterMode.OUT || parameterMapping.getMode() == ParameterMode.INOUT) {\n      if (ResultSet.class.equals(parameterMapping.getJavaType())) {\n        handleRefCursorOutputParameter((ResultSet) cs.getObject(i + 1), parameterMapping, metaParam);\n      } else {\n        final TypeHandler<?> typeHandler = parameterMapping.getTypeHandler();\n        metaParam.setValue(parameterMapping.getProperty(), typeHandler.getResult(cs, i + 1));\n      }\n    }\n  }\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// DISCRIMINATOR\n//\n", "func_signal": "public ResultMap resolveDiscriminatedResultMap(ResultSet rs, ResultMap resultMap, String columnPrefix) throws SQLException", "code": "{\n  Set<String> pastDiscriminators = new HashSet<String>();\n  Discriminator discriminator = resultMap.getDiscriminator();\n  while (discriminator != null) {\n    final Object value = getDiscriminatorValue(rs, discriminator, columnPrefix);\n    final String discriminatedMapId = discriminator.getMapIdFor(String.valueOf(value));\n    if (configuration.hasResultMap(discriminatedMapId)) {\n      resultMap = configuration.getResultMap(discriminatedMapId);\n      Discriminator lastDiscriminator = discriminator;\n      discriminator = resultMap.getDiscriminator();\n      if (discriminator == lastDiscriminator || !pastDiscriminators.add(discriminatedMapId)) {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  return resultMap;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "/**\n * Returns true if the resource located at the given URL is a JAR file.\n * \n * @param url The URL of the resource to test.\n * @param buffer A buffer into which the first few bytes of the resource are read. The buffer\n *            must be at least the size of {@link #JAR_MAGIC}. (The same buffer may be reused\n *            for multiple calls as an optimization.)\n */\n", "func_signal": "protected boolean isJar(URL url, byte[] buffer)", "code": "{\n  InputStream is = null;\n  try {\n    is = url.openStream();\n    is.read(buffer, 0, JAR_MAGIC.length);\n    if (Arrays.equals(buffer, JAR_MAGIC)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Found JAR: \" + url);\n      }\n      return true;\n    }\n  } catch (Exception e) {\n    // Failure to read the stream means this is not a JAR\n  } finally {\n    if (is != null) {\n      try {\n        is.close();\n      } catch (Exception e) {\n        // Ignore\n      }\n    }\n  }\n\n  return false;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\io\\DefaultVFS.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// HANDLE ROWS FOR SIMPLE RESULTMAP\n//\n", "func_signal": "private void handleRowValues(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler<?> resultHandler, RowBounds rowBounds, ResultMapping parentMapping) throws SQLException", "code": "{\n  if (resultMap.hasNestedResultMaps()) {\n    ensureNoRowBounds();\n    checkResultHandler();\n    handleRowValuesForNestedResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);\n  } else {\n    handleRowValuesForSimpleResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);\n  }\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "/**\n * @author Clinton Begin\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface Options", "code": "{\n  boolean useCache() default true;\n\n  boolean flushCache() default false;\n\n  ResultSetType resultSetType() default ResultSetType.FORWARD_ONLY;\n\n  StatementType statementType() default StatementType.PREPARED;\n\n  int fetchSize() default -1;\n\n  int timeout() default -1;\n\n  boolean useGeneratedKeys() default false;\n\n  String keyProperty() default \"id\";\n\n  String keyColumn() default \"\";\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\annotations\\Options.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// GET VALUE FROM ROW FOR SIMPLE RESULT MAP\n//\n", "func_signal": "private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap) throws SQLException", "code": "{\n  final ResultLoaderMap lazyLoader = new ResultLoaderMap();\n  Object resultObject = createResultObject(rsw, resultMap, lazyLoader, null);\n  if (resultObject != null && !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) {\n    final MetaObject metaObject = configuration.newMetaObject(resultObject);\n    boolean foundValues = !resultMap.getConstructorResultMappings().isEmpty();\n    if (shouldApplyAutomaticMappings(resultMap, false)) {\n      foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, null) || foundValues;\n    }\n    foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, null) || foundValues;\n    foundValues = lazyLoader.size() > 0 || foundValues;\n    resultObject = foundValues ? resultObject : null;\n    return resultObject;\n  }\n  return resultObject;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// GET VALUE FROM ROW FOR NESTED RESULT MAP\n//\n", "func_signal": "private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap, CacheKey combinedKey, CacheKey absoluteKey, String columnPrefix, Object partialObject) throws SQLException", "code": "{\n  final String resultMapId = resultMap.getId();\n  Object resultObject = partialObject;\n  if (resultObject != null) {\n    final MetaObject metaObject = configuration.newMetaObject(resultObject);\n    putAncestor(absoluteKey, resultObject, resultMapId, columnPrefix);\n    applyNestedResultMappings(rsw, resultMap, metaObject, columnPrefix, combinedKey, false);\n    ancestorObjects.remove(absoluteKey);\n  } else {\n    final ResultLoaderMap lazyLoader = new ResultLoaderMap();\n    resultObject = createResultObject(rsw, resultMap, lazyLoader, columnPrefix);\n    if (resultObject != null && !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) {\n      final MetaObject metaObject = configuration.newMetaObject(resultObject);\n      boolean foundValues = !resultMap.getConstructorResultMappings().isEmpty();\n      if (shouldApplyAutomaticMappings(resultMap, true)) {\n        foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, columnPrefix) || foundValues;\n      }\n      foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, columnPrefix) || foundValues;\n      putAncestor(absoluteKey, resultObject, resultMapId, columnPrefix);\n      foundValues = applyNestedResultMappings(rsw, resultMap, metaObject, columnPrefix, combinedKey, true) || foundValues;\n      ancestorObjects.remove(absoluteKey);\n      foundValues = lazyLoader.size() > 0 || foundValues;\n      resultObject = foundValues ? resultObject : null;\n    }\n    if (combinedKey != CacheKey.NULL_CACHE_KEY) {\n      nestedResultObjects.put(combinedKey, resultObject);\n    }\n  }\n  return resultObject;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// NESTED QUERY\n//\n", "func_signal": "private Object getNestedQueryConstructorValue(ResultSet rs, ResultMapping constructorMapping, String columnPrefix) throws SQLException", "code": "{\n  final String nestedQueryId = constructorMapping.getNestedQueryId();\n  final MappedStatement nestedQuery = configuration.getMappedStatement(nestedQueryId);\n  final Class<?> nestedQueryParameterType = nestedQuery.getParameterMap().getType();\n  final Object nestedQueryParameterObject = prepareParameterForNestedQuery(rs, constructorMapping, nestedQueryParameterType, columnPrefix);\n  Object value = null;\n  if (nestedQueryParameterObject != null) {\n    final BoundSql nestedBoundSql = nestedQuery.getBoundSql(nestedQueryParameterObject);\n    final CacheKey key = executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT, nestedBoundSql);\n    final Class<?> targetType = constructorMapping.getJavaType();\n    final ResultLoader resultLoader = new ResultLoader(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);\n    value = resultLoader.loadResult();\n  }\n  return value;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "/**\n * Attempts to deconstruct the given URL to find a JAR file containing the resource referenced\n * by the URL. That is, assuming the URL references a JAR entry, this method will return a URL\n * that references the JAR file containing the entry. If the JAR cannot be located, then this\n * method returns null.\n * \n * @param url The URL of the JAR entry.\n * @return The URL of the JAR file, if one is found. Null if not.\n * @throws MalformedURLException\n */\n", "func_signal": "protected URL findJarForResource(URL url) throws MalformedURLException", "code": "{\n  if (log.isDebugEnabled()) {\n    log.debug(\"Find JAR URL: \" + url);\n  }\n\n  // If the file part of the URL is itself a URL, then that URL probably points to the JAR\n  try {\n    for (;;) {\n      url = new URL(url.getFile());\n      if (log.isDebugEnabled()) {\n        log.debug(\"Inner URL: \" + url);\n      }\n    }\n  } catch (MalformedURLException e) {\n    // This will happen at some point and serves as a break in the loop\n  }\n\n  // Look for the .jar extension and chop off everything after that\n  StringBuilder jarUrl = new StringBuilder(url.toExternalForm());\n  int index = jarUrl.lastIndexOf(\".jar\");\n  if (index >= 0) {\n    jarUrl.setLength(index + 4);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Extracted JAR URL: \" + jarUrl);\n    }\n  }\n  else {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Not a JAR: \" + jarUrl);\n    }\n    return null;\n  }\n\n  // Try to open and test it\n  try {\n    URL testUrl = new URL(jarUrl.toString());\n    if (isJar(testUrl)) {\n      return testUrl;\n    }\n    else {\n      // WebLogic fix: check if the URL's file exists in the filesystem.\n      if (log.isDebugEnabled()) {\n        log.debug(\"Not a JAR: \" + jarUrl);\n      }\n      jarUrl.replace(0, jarUrl.length(), testUrl.getFile());\n      File file = new File(jarUrl.toString());\n\n      // File name might be URL-encoded\n      if (!file.exists()) {\n        try {\n          file = new File(URLEncoder.encode(jarUrl.toString(), \"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n          throw new RuntimeException(\"Unsupported encoding?  UTF-8?  That's unpossible.\");\n        }\n      }\n\n      if (file.exists()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Trying real file: \" + file.getAbsolutePath());\n        }\n        testUrl = file.toURI().toURL();\n        if (isJar(testUrl)) {\n          return testUrl;\n        }\n      }\n    }\n  } catch (MalformedURLException e) {\n    log.warn(\"Invalid JAR URL: \" + jarUrl);\n  }\n\n  if (log.isDebugEnabled()) {\n    log.debug(\"Not a JAR: \" + jarUrl);\n  }\n  return null;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\io\\DefaultVFS.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "/*\n * Creates a logging version of a Statement\n *\n * @param stmt - the statement\n * @return - the proxy\n */\n", "func_signal": "public static Statement newInstance(Statement stmt, Log statementLog, int queryStack)", "code": "{\n  InvocationHandler handler = new StatementLogger(stmt, statementLog, queryStack);\n  ClassLoader cl = Statement.class.getClassLoader();\n  return (Statement) Proxy.newProxyInstance(cl, new Class[]{Statement.class}, handler);\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\logging\\jdbc\\StatementLogger.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// NESTED RESULT MAP (JOIN MAPPING)\n//\n", "func_signal": "private boolean applyNestedResultMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String parentPrefix, CacheKey parentRowKey, boolean newObject)", "code": "{\n  boolean foundValues = false;\n  for (ResultMapping resultMapping : resultMap.getPropertyResultMappings()) {\n    final String nestedResultMapId = resultMapping.getNestedResultMapId();\n    if (nestedResultMapId != null && resultMapping.getResultSet() == null) {\n      try {\n        final String columnPrefix = getColumnPrefix(parentPrefix, resultMapping);\n        final ResultMap nestedResultMap = getNestedResultMap(rsw.getResultSet(), nestedResultMapId, columnPrefix);\n        CacheKey rowKey = null;\n        Object ancestorObject = null;\n        if (ancestorColumnPrefix.containsKey(nestedResultMapId)) {\n          rowKey = createRowKey(nestedResultMap, rsw, ancestorColumnPrefix.get(nestedResultMapId));\n          ancestorObject = ancestorObjects.get(rowKey);\n        }\n        if (ancestorObject != null) {\n          if (newObject) {\n            linkObjects(metaObject, resultMapping, ancestorObject); // issue #385\n          }\n        } else {\n          rowKey = createRowKey(nestedResultMap, rsw, columnPrefix);\n          final CacheKey combinedKey = combineKeys(rowKey, parentRowKey);\n          Object rowValue = nestedResultObjects.get(combinedKey);\n          boolean knownValue = (rowValue != null);\n          instantiateCollectionPropertyIfAppropriate(resultMapping, metaObject); // mandatory            \n          if (anyNotNullColumnHasValue(resultMapping, columnPrefix, rsw.getResultSet())) {\n            rowValue = getRowValue(rsw, nestedResultMap, combinedKey, rowKey, columnPrefix, rowValue);\n            if (rowValue != null && !knownValue) {\n              linkObjects(metaObject, resultMapping, rowValue);\n              foundValues = true;\n            }\n          }\n        }\n      } catch (SQLException e) {\n        throw new ExecutorException(\"Error getting nested result map values for '\" + resultMapping.getProperty() + \"'.  Cause: \" + e, e);\n      }\n    }\n  }\n  return foundValues;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// HANDLE NESTED RESULT MAPS\n//\n", "func_signal": "private void handleRowValuesForNestedResultMap(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler<?> resultHandler, RowBounds rowBounds, ResultMapping parentMapping) throws SQLException", "code": "{\n  final DefaultResultContext<Object> resultContext = new DefaultResultContext<Object>();\n  skipRows(rsw.getResultSet(), rowBounds);\n  Object rowValue = null;\n  while (shouldProcessMoreRows(resultContext, rowBounds) && rsw.getResultSet().next()) {\n    final ResultMap discriminatedResultMap = resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, null);\n    final CacheKey rowKey = createRowKey(discriminatedResultMap, rsw, null);\n    Object partialObject = nestedResultObjects.get(rowKey);\n    // issue #577 && #542\n    if (mappedStatement.isResultOrdered()) {\n      if (partialObject == null && rowValue != null) {\n        nestedResultObjects.clear();\n        storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());\n      }\n      rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, rowKey, null, partialObject);\n    } else {\n      rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, rowKey, null, partialObject);\n      if (partialObject == null) {\n        storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());\n      }\n    }\n  }\n  if (rowValue != null && mappedStatement.isResultOrdered() && shouldProcessMoreRows(resultContext, rowBounds)) {\n    storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());\n  }\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//  @Ignore(\"See http://code.google.com/p/mybatis/issues/detail?id=614\")\n", "func_signal": "@Test\n  public void serializeAndDeserializeObjectsWithoutAggressiveLazyLoadingWithoutPreloadingAttribute() \n  throws Exception", "code": "{\n    SqlSession sqlSession = createSessionWithoutAggressiveLazyLoading();\n    try {\n        //expected problem with deserializing\n      testSerializeWithoutPreloadingAttribute(sqlSession);\n      } finally {\n        sqlSession.close();\n      }\n  }", "path": "search-mybatis-mybatis\\src\\test\\java\\org\\apache\\ibatis\\submitted\\serializecircular\\SerializeCircularTest.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// HANDLE RESULT SETS\n//\n/**\n * \u5bf9\u6570\u636e\u5e93\u8fd4\u56de\u96c6\u8fdb\u884c\u5c01\u88c5\n */\n", "func_signal": "@Override\npublic List<Object> handleResultSets(Statement stmt) throws SQLException", "code": "{\n  ErrorContext.instance().activity(\"handling results\").object(mappedStatement.getId());\n\n  final List<Object> multipleResults = new ArrayList<Object>();\n\n  int resultSetCount = 0;\n  ResultSetWrapper rsw = getFirstResultSet(stmt);\n\n  List<ResultMap> resultMaps = mappedStatement.getResultMaps();\n  int resultMapCount = resultMaps.size();\n  validateResultMapsCount(rsw, resultMapCount);\n  while (rsw != null && resultMapCount > resultSetCount) {\n    ResultMap resultMap = resultMaps.get(resultSetCount);\n    handleResultSet(rsw, resultMap, multipleResults, null);\n    rsw = getNextResultSet(stmt);\n    cleanUpAfterHandlingResultSet();\n    resultSetCount++;\n  }\n\n  String[] resultSets = mappedStatement.getResulSets();\n  if (resultSets != null) {\n    while (rsw != null && resultSetCount < resultSets.length) {\n      ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);\n      if (parentMapping != null) {\n        String nestedResultMapId = parentMapping.getNestedResultMapId();\n        ResultMap resultMap = configuration.getResultMap(nestedResultMapId);\n        handleResultSet(rsw, resultMap, null, parentMapping);\n      }\n      rsw = getNextResultSet(stmt);\n      cleanUpAfterHandlingResultSet();\n      resultSetCount++;\n    }\n  }\n\n  return collapseSingleResultList(multipleResults);\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// UNIQUE RESULT KEY\n//\n", "func_signal": "private CacheKey createRowKey(ResultMap resultMap, ResultSetWrapper rsw, String columnPrefix) throws SQLException", "code": "{\n  final CacheKey cacheKey = new CacheKey();\n  cacheKey.update(resultMap.getId());\n  List<ResultMapping> resultMappings = getResultMappingsForRowKey(resultMap);\n  if (resultMappings.size() == 0) {\n    if (Map.class.isAssignableFrom(resultMap.getType())) {\n      createRowKeyForMap(rsw, cacheKey);\n    } else {\n      createRowKeyForUnmappedProperties(resultMap, rsw, cacheKey, columnPrefix);\n    }\n  } else {\n    createRowKeyForMappedProperties(resultMap, rsw, cacheKey, resultMappings, columnPrefix);\n  }\n  return cacheKey;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// PROPERTY MAPPINGS\n//\n", "func_signal": "private boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, ResultLoaderMap lazyLoader, String columnPrefix)\n    throws SQLException", "code": "{\n  final List<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);\n  boolean foundValues = false;\n  final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();\n  for (ResultMapping propertyMapping : propertyMappings) {\n    String column = prependPrefix(propertyMapping.getColumn(), columnPrefix);\n    if (propertyMapping.getNestedResultMapId() != null) {\n      // the user added a column attribute to a nested result map, ignore it\n      column = null;\n    }\n    if (propertyMapping.isCompositeResult()\n        || (column != null && mappedColumnNames.contains(column.toUpperCase(Locale.ENGLISH)))\n        || propertyMapping.getResultSet() != null) {\n      Object value = getPropertyMappingValue(rsw.getResultSet(), metaObject, propertyMapping, lazyLoader, columnPrefix);\n      // issue #541 make property optional\n      final String property = propertyMapping.getProperty();\n      // issue #377, call setter on nulls\n      if (value != DEFERED\n          && property != null\n          && (value != null || (configuration.isCallSettersOnNulls() && !metaObject.getSetterType(property).isPrimitive()))) {\n        metaObject.setValue(property, value);\n      }\n      if (value != null || value == DEFERED) {\n        foundValues = true;\n      }\n    }\n  }\n  return foundValues;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "//\n// INSTANTIATION & CONSTRUCTOR MAPPING\n//\n", "func_signal": "private Object createResultObject(ResultSetWrapper rsw, ResultMap resultMap, ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException", "code": "{\n  final List<Class<?>> constructorArgTypes = new ArrayList<Class<?>>();\n  final List<Object> constructorArgs = new ArrayList<Object>();\n  final Object resultObject = createResultObject(rsw, resultMap, constructorArgTypes, constructorArgs, columnPrefix);\n  if (resultObject != null && !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) {\n    final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();\n    for (ResultMapping propertyMapping : propertyMappings) {\n      // issue gcode #109 && issue #149\n      if (propertyMapping.getNestedQueryId() != null && propertyMapping.isLazy()) {\n        return configuration.getProxyFactory().createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);\n      }\n    }\n  }\n  return resultObject;\n}", "path": "search-mybatis-mybatis\\src\\main\\java\\org\\apache\\ibatis\\executor\\resultset\\DefaultResultSetHandler.java", "repo_name": "nero520/mybatis", "stars": 477, "license": "None", "language": "java", "size": 1636}
{"docstring": "/**\n * Stops the server.\n */\n", "func_signal": "public void stop()", "code": "{\n\ttry {\n\t\tmyServerSocket.close();\n\t\tmyThread.join();\n\t} catch (Throwable e) {\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Convenience method that makes an InputStream out of given text.\n */\n", "func_signal": "public Response(String status, String mimeType, String txt)", "code": "{\n\tthis.status = status;\n\tthis.mimeType = mimeType;\n\ttry {\n\t\tthis.data = new ByteArrayInputStream(txt.getBytes(\"UTF-8\"));\n\t} catch (java.io.UnsupportedEncodingException uee) {\n\t\tuee.printStackTrace();\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "// Media playback controls\n", "func_signal": "public void play()", "code": "{\n\tif (rampWebSocketClient != null) {\n\t\trampWebSocketClient.send(\"[\\\"ramp\\\",{\\\"type\\\":\\\"PLAY\\\", \\\"cmd_id\\\":\" + commandId + \"}]\");\n\t\tcommandId++;\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\RampClient.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Decodes the sent headers and loads the data into java Properties' key\n * - value pairs\n **/\n", "func_signal": "private void decodeHeader(BufferedReader in, Properties pre,\n\t\tProperties parms, Properties header)\n\t\tthrows InterruptedException", "code": "{\n\ttry {\n\t\t// Read the request line\n\t\tString inLine = in.readLine();\n\t\tif (inLine == null)\n\t\t\treturn;\n\t\tStringTokenizer st = new StringTokenizer(inLine);\n\t\tif (!st.hasMoreTokens())\n\t\t\tsendError(HTTP_BADREQUEST,\n\t\t\t\t\t\"BAD REQUEST: Syntax error. Usage: GET /example/file.html\");\n\n\t\tString method = st.nextToken();\n\t\tpre.put(\"method\", method);\n\n\t\tif (!st.hasMoreTokens())\n\t\t\tsendError(HTTP_BADREQUEST,\n\t\t\t\t\t\"BAD REQUEST: Missing URI. Usage: GET /example/file.html\");\n\n\t\tString uri = st.nextToken();\n\n\t\t// Decode parameters from the URI\n\t\tint qmi = uri.indexOf('?');\n\t\tif (qmi >= 0) {\n\t\t\tdecodeParms(uri.substring(qmi + 1), parms);\n\t\t\turi = decodePercent(uri.substring(0, qmi));\n\t\t} else\n\t\t\turi = decodePercent(uri);\n\n\t\t// If there's another token, it's protocol version,\n\t\t// followed by HTTP headers. Ignore version but parse headers.\n\t\t// NOTE: this now forces header names lowercase since they are\n\t\t// case insensitive and vary by client.\n\t\tif (st.hasMoreTokens()) {\n\t\t\tString line = in.readLine();\n\t\t\twhile (line != null && line.trim().length() > 0) {\n\t\t\t\tint p = line.indexOf(':');\n\t\t\t\tif (p >= 0)\n\t\t\t\t\theader.put(line.substring(0, p).trim()\n\t\t\t\t\t\t\t.toLowerCase(), line.substring(p + 1)\n\t\t\t\t\t\t\t.trim());\n\t\t\t\tline = in.readLine();\n\t\t\t}\n\t\t}\n\n\t\tpre.put(\"uri\", uri);\n\t} catch (IOException ioe) {\n\t\tsendError(\n\t\t\t\tHTTP_INTERNALERROR,\n\t\t\t\t\"SERVER INTERNAL ERROR: IOException: \"\n\t\t\t\t\t\t+ ioe.getMessage());\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Override this to customize the server.\n * <p>\n * \n * (By default, this delegates to serveFile() and allows directory listing.)\n * \n * @param uri\n *            Percent-decoded URI without parameters, for example\n *            \"/index.cgi\"\n * @param method\n *            \"GET\", \"POST\" etc.\n * @param parms\n *            Parsed, percent decoded parameters from URI and, in case of\n *            POST, data.\n * @param header\n *            Header entries, percent decoded\n * @return HTTP response, see class Response for details\n */\n", "func_signal": "public Response serve(String uri, String method, Properties header,\n\t\tProperties parms, Properties files)", "code": "{\n\tSystem.out.println(method + \" '\" + uri + \"' \");\n\n\tEnumeration e = header.propertyNames();\n\twhile (e.hasMoreElements()) {\n\t\tString value = (String) e.nextElement();\n\t\tSystem.out.println(\"  HDR: '\" + value + \"' = '\"\n\t\t\t\t+ header.getProperty(value) + \"'\");\n\t}\n\te = parms.propertyNames();\n\twhile (e.hasMoreElements()) {\n\t\tString value = (String) e.nextElement();\n\t\tSystem.out.println(\"  PRM: '\" + value + \"' = '\"\n\t\t\t\t+ parms.getProperty(value) + \"'\");\n\t}\n\te = files.propertyNames();\n\twhile (e.hasMoreElements()) {\n\t\tString value = (String) e.nextElement();\n\t\tSystem.out.println(\"  UPLOADED: '\" + value + \"' = '\"\n\t\t\t\t+ files.getProperty(value) + \"'\");\n\t}\n\treturn serveFile(uri, header, new File(\".\"), true);\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Starts a HTTP server to given port.\n * <p>\n * Throws an IOException if the socket is already in use\n */\n", "func_signal": "public HttpServer(int port) throws IOException", "code": "{\n\tmyTcpPort = port;\n\tthis.myRootDir = new File(\"/\");\n\tmyServerSocket = new ServerSocket(myTcpPort);\n\tmyThread = new Thread(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\twhile (true)\n\t\t\t\t\tnew HTTPSession(myServerSocket.accept());\n\t\t\t} catch (IOException ioe) {\n\t\t\t}\n\t\t}\n\t});\n\tmyThread.setDaemon(true);\n\tmyThread.start();\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "// Load media\n", "func_signal": "public void load(String url)", "code": "{\n\tif (rampWebSocketClient != null) {\n\t\tif (isChromeCast) {\n\t\t\trampWebSocketClient\n\t\t\t\t\t.send(\"[\\\"cv\\\",{\\\"type\\\":\\\"launch_service\\\",\\\"message\\\":{\\\"action\\\":\\\"launch\\\",\\\"activityType\\\":\\\"video_playback\\\",\\\"activityId\\\":\\\"\"\n\t\t\t\t\t\t\t+ activityId + \"\\\",\\\"senderId\\\":\\\"\" + senderId\n\t\t\t\t\t\t\t+ \"\\\",\\\"receiverId\\\":\\\"local:1\\\",\\\"disconnectPolicy\\\":\\\"stop\\\",\\\"initParams\\\":{\\\"mediaUrl\\\":\\\"\" + url\n\t\t\t\t\t\t\t+ \"\\\",\\\"currentTime\\\":0,\\\"duration\\\":0,\\\"pause\\\":false,\\\"muted\\\":false,\\\"volume\\\":1}}}]\");\n\t\t} else {\n\t\t\trampWebSocketClient.send(\"[\\\"ramp\\\",{\\\"title\\\":\\\"Video\\\",\\\"src\\\":\\\"\" + url + \"\\\",\\\"type\\\":\\\"LOAD\\\",\\\"cmd_id\\\":\" + commandId\n\t\t\t\t\t+ \",\\\"autoplay\\\":true}]\");\n\t\t\tcommandId++;\n\t\t}\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\RampClient.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * It returns the offset separating multipart file headers from the\n * file's data.\n **/\n", "func_signal": "private int stripMultipartHeaders(byte[] b, int offset)", "code": "{\n\tint i = 0;\n\tfor (i = offset; i < b.length; i++) {\n\t\tif (b[i] == '\\r' && b[++i] == '\\n' && b[++i] == '\\r'\n\t\t\t\t&& b[++i] == '\\n')\n\t\t\tbreak;\n\t}\n\treturn i + 1;\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "// RampWebSocketListener callbacks\n", "func_signal": "public void onMessage(String message)", "code": "{\n\tLog.d(LOG_TAG, \"onMessage: message\" + message);\n\n\t// http://code.google.com/p/json-simple/\n\tJSONParser parser = new JSONParser();\n\ttry {\n\t\tObject obj = parser.parse(new StringReader(message));\n\t\tJSONArray array = (JSONArray) obj;\n\t\tif (array.get(0).equals(PROTOCOL_CM)) {\n\t\t\tLog.d(LOG_TAG, PROTOCOL_CM);\n\t\t\tJSONObject body = (JSONObject) array.get(1);\n\t\t\t// [\"cm\",{\"type\":\"ping\"}]\n\t\t\tif (body.get(TYPE).equals(PING)) {\n\t\t\t\trampWebSocketClient.send(\"[\\\"cm\\\",{\\\"type\\\":\\\"pong\\\"}]\");\n\t\t\t}\n\t\t} else if (array.get(0).equals(PROTOCOL_RAMP)) {\n\t\t\t// [\"ramp\",{\"cmd_id\":0,\"type\":\"STATUS\",\"status\":{\"event_sequence\":2,\"state\":0}}]\n\t\t\tLog.d(LOG_TAG, PROTOCOL_RAMP);\n\t\t\tJSONObject body = (JSONObject) array.get(1);\n\t\t\tif (body.get(TYPE).equals(STATUS)) {\n\t\t\t\t// Long cmd_id = (Long)body.get(\"cmd_id\");\n\t\t\t\t// commandId = cmd_id.intValue();\n\t\t\t\tif (!gotStatus) {\n\t\t\t\t\tgotStatus = true;\n\t\t\t\t\t// rampWebSocketClient.send(\"[\\\"ramp\\\",{\\\"type\\\":\\\"LOAD\\\",\\\"cmd_id\\\":\"+commandId+\",\\\"autoplay\\\":true}] \");\n\t\t\t\t\t// commandId++;\n\t\t\t\t}\n\t\t\t} else if (body.get(TYPE).equals(RESPONSE)) {\n\t\t\t\t// [\"ramp\",{\"cmd_id\":7,\"type\":\"RESPONSE\",\"status\":{\"event_sequence\":38,\"state\":2,\"content_id\":\"http://192.168.0.50:8080/video.mp4\",\"current_time\":6.465110778808594,\n\t\t\t\t// \"duration\":27.37066650390625,\"volume\":1,\"muted\":false,\"time_progress\":true,\"title\":\"Video\"}}]\n\t\t\t\tJSONObject status = (JSONObject) body.get(RESPONSE_STATUS);\n\t\t\t\tif (status.get(RESPONSE_CURRENT_TIME) instanceof Double) {\n\t\t\t\t\tDouble current_time = (Double) status.get(RESPONSE_CURRENT_TIME);\n\t\t\t\t\tDouble duration = (Double) status.get(RESPONSE_DURATION);\n\t\t\t\t\tif (duration != null) {\n\t\t\t\t\t\tflingFrame.setDuration(duration.intValue());\n\t\t\t\t\t}\n\t\t\t\t\tif (current_time != null) {\n\t\t\t\t\t\tflingFrame.updateTime(current_time.intValue());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLong current_time = (Long) status.get(RESPONSE_CURRENT_TIME);\n\t\t\t\t\tDouble duration = (Double) status.get(RESPONSE_DURATION);\n\t\t\t\t\tif (duration != null) {\n\t\t\t\t\t\tflingFrame.setDuration(duration.intValue());\n\t\t\t\t\t}\n\t\t\t\t\tif (current_time != null) {\n\t\t\t\t\t\tflingFrame.updateTime(current_time.intValue());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (array.get(0).equals(PROTOCOL_CV)) {  // ChromeCast default receiver events\n\t\t\tLog.d(LOG_TAG, PROTOCOL_CV);\n\t\t\tJSONObject body = (JSONObject) array.get(1);\n\t\t\tif (body.get(TYPE).equals(ACTIVITY)) {\n\t\t\t\t// [\"cv\",{\"type\":\"activity\",\"message\":{\"type\":\"timeupdate\",\"activityId\":\"d82cede3-ec23-4f73-8abc-343dd9ca6dbb\",\"state\":{\"mediaUrl\":\"http://192.168.0.50:8087/cast.webm\",\"videoUrl\":\"http://192.168.0.50:8087/cast.webm\",\n\t\t\t\t// \"currentTime\":20.985000610351562,\"duration\":null,\"pause\":false,\"muted\":false,\"volume\":1,\"paused\":false}}}]\n\t\t\t\tJSONObject activityMessage = (JSONObject) body.get(ACTIVITY_MESSAGE);\n\t\t\t\tif (activityMessage!=null) {\n\t\t\t\t\tJSONObject activityMessageType = (JSONObject) activityMessage.get(TYPE);\n\t\t\t\t\tif (activityMessageType.equals(ACTIVITY_TIME_UPDATE)) {\n\t\t\t\t\t\tJSONObject activityMessageTypeState = (JSONObject) activityMessage.get(ACTIVITY_STATE);\n\t\t\t\t\t\tif (activityMessageTypeState.get(RESPONSE_CURRENT_TIME) instanceof Double) {\n\t\t\t\t\t\t\tDouble current_time = (Double) activityMessageTypeState.get(ACTIVITY_CURRENT_TIME);\n\t\t\t\t\t\t\tDouble duration = (Double) activityMessageTypeState.get(ACTIVITY_DURATION);\n\t\t\t\t\t\t\tif (duration != null) {\n\t\t\t\t\t\t\t\tflingFrame.setDuration(duration.intValue());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_time != null) {\n\t\t\t\t\t\t\t\tflingFrame.updateTime(current_time.intValue());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tLong current_time = (Long) activityMessageTypeState.get(ACTIVITY_CURRENT_TIME);\n\t\t\t\t\t\t\tDouble duration = (Double) activityMessageTypeState.get(ACTIVITY_DURATION);\n\t\t\t\t\t\t\tif (duration != null) {\n\t\t\t\t\t\t\t\tflingFrame.setDuration(duration.intValue());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_time != null) {\n\t\t\t\t\t\t\t\tflingFrame.updateTime(current_time.intValue());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLog.e(LOG_TAG, \"parse JSON\", e);\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\RampClient.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Retrieves the content of a sent file and saves it to a temporary\n * file. The full path to the saved file is returned.\n **/\n", "func_signal": "private String saveTmpFile(byte[] b, int offset, int len)", "code": "{\n\tString path = \"\";\n\tif (len > 0) {\n\t\tString tmpdir = System.getProperty(\"java.io.tmpdir\");\n\t\ttry {\n\t\t\tFile temp = File.createTempFile(\"NanoHTTPD\", \"\", new File(\n\t\t\t\t\ttmpdir));\n\t\t\tOutputStream fstream = new FileOutputStream(temp);\n\t\t\tfstream.write(b, offset, len);\n\t\t\tfstream.close();\n\t\t\tpath = temp.getAbsolutePath();\n\t\t} catch (Exception e) { // Catch exception if any\n\t\t\tSystem.err.println(\"Error: \" + e.getMessage());\n\t\t}\n\t}\n\treturn path;\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/*\";\n\tprivate static final String HEADER_ACCEPT_LANGUAGE = \"Accept-Language\";\n\tprivate static final String HEADER_ACCEPT_LANGUAGE_VALUE = \"en-US,en;q=0.8\";\n\tprivate static final String HEADER_CONTENT_TYPE = \"Content-Type\";\n\tprivate static final String HEADER_CONTENT_TYPE_JSON_VALUE = \"application/json\";\n\tprivate static final String HEADER_CONTENT_TYPE_TEXT_VALUE = \"text/plain\";\n\n\tprivate String connectionServiceUrl;\n\tprivate String state;\n\tprivate String protocol;\n\tprivate String response;\n\tprivate boolean started;\n\tprivate boolean closed;\n\tprivate boolean doPlay;\n\n\tprivate RampWebSocketClient rampWebSocketClient;\n\tprivate int commandId = 1;\n\tprivate String app;\n\tprivate String activityId;\n\tprivate String senderId;\n\tprivate boolean isChromeCast;\n\tprivate boolean gotStatus;\n\n\tprivate Thread infoThread;\n\tprivate DialServer dialServer;\n\tprivate FlingFrame flingFrame;\n\n\tpublic RampClient(FlingFrame flingFrame) {\n\t\tthis.flingFrame = flingFrame;\n\t\tthis.senderId = UUID.randomUUID().toString();\n\t}\n\n\tpublic void launchApp(String app, DialServer dialServer) {\n\t\tthis.app = app;\n\t\tthis.isChromeCast = app.equals(FlingFrame.CHROMECAST);\n\t\tthis.dialServer = dialServer;\n\t\tthis.activityId = UUID.randomUUID().toString();\n\t\ttry {\n\t\t\tString device = \"http://\" + dialServer.getIpAddress().getHostAddress() + \":\" + dialServer.getPort();\n\t\t\tLog.d(LOG_TAG, \"device=\" + device);\n\t\t\tLog.d(LOG_TAG, \"apps url=\" + dialServer.getAppsUrl());\n\n\t\t\t// application instance url\n\t\t\tString location = null;\n\n\t\t\tDefaultHttpClient defaultHttpClient = HttpRequestHelper.createHttpClient();\n\t\t\tCustomRedirectHandler handler = new CustomRedirectHandler();\n\t\t\tdefaultHttpClient.setRedirectHandler(handler);\n\t\t\tBasicHttpContext localContext = new BasicHttpContext();\n\n\t\t\t// check if any app is running\n\t\t\tHttpGet httpGet = new HttpGet(dialServer.getAppsUrl());\n\t\t\thttpGet.setHeader(HEADER_CONNECTION, HEADER_CONNECTION_VALUE);\n\t\t\thttpGet.setHeader(HEADER_USER_AGENT, HEADER_USER_AGENT_VALUE);\n\t\t\thttpGet.setHeader(HEADER_ACCEPT, HEADER_ACCEPT_VALUE);\n\t\t\thttpGet.setHeader(HEADER_DNT, HEADER_DNT_VALUE);\n\t\t\thttpGet.setHeader(HEADER_ACCEPT_ENCODING, HEADER_ACCEPT_ENCODING_VALUE);\n\t\t\thttpGet.setHeader(HEADER_ACCEPT_LANGUAGE, HEADER_ACCEPT_LANGUAGE_VALUE);\n\t\t\tHttpResponse httpResponse = defaultHttpClient.execute(httpGet);\n\t\t\tif (httpResponse != null) {\n\t\t\t\tint responseCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\t\tLog.d(LOG_TAG, \"get response code=\" + httpResponse.getStatusLine().getStatusCode());\n\t\t\t\tif (responseCode == 204) {\n\t\t\t\t\t// nothing is running\n\t\t\t\t} else if (responseCode == 200) {\n\t\t\t\t\t// app is running\n\n\t\t\t\t\t// Need to get real URL after a redirect\n\t\t\t\t\t// http://stackoverflow.com/a/10286025/594751\n\t\t\t\t\tString lastUrl = dialServer.getAppsUrl();\n\t\t\t\t\tif (handler.lastRedirectedUri != null) {\n\t\t\t\t\t\tlastUrl = handler.lastRedirectedUri.toString();\n\t\t\t\t\t\tLog.d(LOG_TAG, \"lastUrl=\" + lastUrl);\n\t\t\t\t\t}\n\n\t\t\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\t\tLog.d(LOG_TAG, \"get response=\" + response);\n\t\t\t\t\tparseXml(new StringReader(response));\n\n\t\t\t\t\tHeader[] headers = httpResponse.getAllHeaders();\n\t\t\t\t\tfor (int i = 0; i < headers.length; i++) {\n\t\t\t\t\t\tLog.d(LOG_TAG, headers[i].getName() + \"=\" + headers[i].getValue());\n\t\t\t\t\t}\n\n\t\t\t\t\t// stop the app instance\n\t\t\t\t\tHttpDelete httpDelete = new HttpDelete(lastUrl);\n\t\t\t\t\thttpResponse = defaultHttpClient.execute(httpDelete);\n\t\t\t\t\tif (httpResponse != null) {\n\t\t\t\t\t\tLog.d(LOG_TAG, \"delete response code=\" + httpResponse.getStatusLine().getStatusCode());\n\t\t\t\t\t\tresponse = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\t\t\tLog.d(LOG_TAG, \"delete response=\" + response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLog.d(LOG_TAG, \"no delete response\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tLog.i(LOG_TAG, \"no get response\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if app is installed on device\n\t\t\tint responseCode = getAppStatus(defaultHttpClient, dialServer.getAppsUrl() + app);\n\t\t\tif (responseCode != 200) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tparseXml(new StringReader(response));\n\t\t\tLog.d(LOG_TAG, \"state=\" + state);\n\n\t\t\t// start the app with POST\n\t\t\tHttpPost httpPost = new HttpPost(dialServer.getAppsUrl() + app);\n\t\t\thttpPost.setHeader(HEADER_CONNECTION, HEADER_CONNECTION_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ORIGN, HEADER_ORIGIN_VALUE);\n\t\t\thttpPost.setHeader(HEADER_USER_AGENT, HEADER_USER_AGENT_VALUE);\n\t\t\thttpPost.setHeader(HEADER_DNT, HEADER_DNT_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ACCEPT_ENCODING, HEADER_ACCEPT_ENCODING_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ACCEPT, HEADER_ACCEPT_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ACCEPT_LANGUAGE, HEADER_ACCEPT_LANGUAGE_VALUE);\n\t\t\thttpPost.setHeader(HEADER_CONTENT_TYPE, HEADER_CONTENT_TYPE_TEXT_VALUE);\n\t\t\tif (isChromeCast) {\n\t\t\t\t//httpPost.setEntity(new StringEntity(\"v=release-d4fa0a24f89ec5ba83f7bf3324282c8d046bf612&id=local%3A1&idle=windowclose\"));\n\t\t\t\thttpPost.setEntity(new StringEntity(\"v=release-d4fa0a24f89ec5ba83f7bf3324282c8d046bf612&id=local%3A1\"));\n\t\t\t}\n\n\t\t\thttpResponse = defaultHttpClient.execute(httpPost, localContext);\n\t\t\tif (httpResponse != null) {\n\t\t\t\tLog.d(LOG_TAG, \"post response code=\" + httpResponse.getStatusLine().getStatusCode());\n\t\t\t\tresponse = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\tLog.d(LOG_TAG, \"post response=\" + response);\n\t\t\t\tHeader[] headers = httpResponse.getHeaders(\"LOCATION\");\n\t\t\t\tif (headers.length > 0) {\n\t\t\t\t\tlocation = headers[0].getValue();\n\t\t\t\t\tLog.d(LOG_TAG, \"post response location=\" + location);\n\t\t\t\t}\n\n\t\t\t\theaders = httpResponse.getAllHeaders();\n\t\t\t\tfor (int i = 0; i < headers.length; i++) {\n\t\t\t\t\tLog.d(LOG_TAG, headers[i].getName() + \"=\" + headers[i].getValue());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLog.i(LOG_TAG, \"no post response\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Keep trying to get the app status until the\n\t\t\t// connection service URL is available\n\t\t\tstate = STATE_STOPPED;\n\t\t\tdo {\n\t\t\t\tresponseCode = getAppStatus(defaultHttpClient, dialServer.getAppsUrl() + app);\n\t\t\t\tif (responseCode != 200) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tparseXml(new StringReader(response));\n\t\t\t\tLog.d(LOG_TAG, \"state=\" + state);\n\t\t\t\tLog.d(LOG_TAG, \"connectionServiceUrl=\" + connectionServiceUrl);\n\t\t\t\tLog.d(LOG_TAG, \"protocol=\" + protocol);\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t} while (state.equals(STATE_RUNNING) && connectionServiceUrl == null);\n\n\t\t\tif (connectionServiceUrl == null) {\n\t\t\t\tLog.i(LOG_TAG, \"connectionServiceUrl is null\");\n\t\t\t\treturn; // oops, something went wrong\n\t\t\t}\n\n\t\t\t// get the websocket URL\n\t\t\tString webSocketAddress = null;\n\t\t\thttpPost = new HttpPost(connectionServiceUrl); // \"http://192.168.0.17:8008/connection/YouTube\"\n\t\t\thttpPost.setHeader(HEADER_CONNECTION, HEADER_CONNECTION_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ORIGN, HEADER_ORIGIN_VALUE);\n\t\t\thttpPost.setHeader(HEADER_USER_AGENT, HEADER_USER_AGENT_VALUE);\n\t\t\thttpPost.setHeader(HEADER_DNT, HEADER_DNT_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ACCEPT_ENCODING, HEADER_ACCEPT_ENCODING_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ACCEPT, HEADER_ACCEPT_VALUE);\n\t\t\thttpPost.setHeader(HEADER_ACCEPT_LANGUAGE, HEADER_ACCEPT_LANGUAGE_VALUE);\n\t\t\thttpPost.setHeader(HEADER_CONTENT_TYPE, HEADER_CONTENT_TYPE_JSON_VALUE);\n\t\t\thttpPost.setEntity(new StringEntity(\"{\\\"channel\\\":0,\\\"senderId\\\":{\\\"appName\\\":\\\"\" + app + \"\\\", \\\"senderId\\\":\\\"\" + senderId + \"\\\"}}\"));\n\n\t\t\thttpResponse = defaultHttpClient.execute(httpPost, localContext);\n\t\t\tif (httpResponse != null) {\n\t\t\t\tresponseCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\t\tLog.d(LOG_TAG, \"post response code=\" + responseCode);\n\t\t\t\tif (responseCode == 200) {\n\t\t\t\t\t// should return JSON payload\n\t\t\t\t\tresponse = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\t\tLog.d(LOG_TAG, \"post response=\" + response);\n\t\t\t\t\tHeader[] headers = httpResponse.getAllHeaders();\n\t\t\t\t\tfor (int i = 0; i < headers.length; i++) {\n\t\t\t\t\t\tLog.d(LOG_TAG, headers[i].getName() + \"=\" + headers[i].getValue());\n\t\t\t\t\t}\n\n\t\t\t\t\t// http://code.google.com/p/json-simple/\n\t\t\t\t\tJSONParser parser = new JSONParser();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tObject obj = parser.parse(new StringReader(response)); // {\"URL\":\"ws://192.168.0.17:8008/session?33\",\"pingInterval\":0}\n\t\t\t\t\t\tJSONObject jsonObject = (JSONObject) obj;\n\t\t\t\t\t\twebSocketAddress = (String) jsonObject.get(\"URL\");\n\t\t\t\t\t\tLog.d(LOG_TAG, \"webSocketAddress: \" + webSocketAddress);\n\t\t\t\t\t\tlong pingInterval = (Long) jsonObject.get(\"pingInterval\"); // TODO\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tLog.e(LOG_TAG, \"parse JSON\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLog.i(LOG_TAG, \"no post response\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make a web socket connection for doing RAMP\n\t\t\t// to control media playback\n\t\t\tthis.started = false;\n\t\t\tthis.closed = false;\n\t\t\tthis.gotStatus = false;\n\t\t\tif (webSocketAddress != null) {\n\t\t\t\t// https://github.com/TooTallNate/Java-WebSocket\n\t\t\t\tURI uri = URI.create(webSocketAddress);\n\n\t\t\t\trampWebSocketClient = new RampWebSocketClient(uri, this);\n\n\t\t\t\tnew Thread(new Runnable() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tThread t = new Thread(rampWebSocketClient);\n\t\t\t\t\t\tt.start();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tt.join();\n\t\t\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\trampWebSocketClient.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}).start();\n\t\t\t} else {\n\t\t\t\tLog.i(LOG_TAG, \"webSocketAddress is null\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tLog.e(LOG_TAG, \"launchApp\", e);\n\t\t}\n\t}\n\n\tpublic void closeCurrentApp() {\n\t\tif (dialServer != null) {\n\t\t\ttry {\n\t\t\t\tDefaultHttpClient defaultHttpClient = HttpRequestHelper.createHttpClient();\n\t\t\t\tCustomRedirectHandler handler = new CustomRedirectHandler();\n\t\t\t\tdefaultHttpClient.setRedirectHandler(handler);\n\t\t\t\tBasicHttpContext localContext = new BasicHttpContext();\n\n\t\t\t\t// check if any app is running\n\t\t\t\tHttpGet httpGet = new HttpGet(dialServer.getAppsUrl());\n\t\t\t\thttpGet.setHeader(HEADER_CONNECTION, HEADER_CONNECTION_VALUE);\n\t\t\t\thttpGet.setHeader(HEADER_USER_AGENT, HEADER_USER_AGENT_VALUE);\n\t\t\t\thttpGet.setHeader(HEADER_ACCEPT, HEADER_ACCEPT_VALUE);\n\t\t\t\thttpGet.setHeader(HEADER_DNT, HEADER_DNT_VALUE);\n\t\t\t\thttpGet.setHeader(HEADER_ACCEPT_ENCODING, HEADER_ACCEPT_ENCODING_VALUE);\n\t\t\t\thttpGet.setHeader(HEADER_ACCEPT_LANGUAGE, HEADER_ACCEPT_LANGUAGE_VALUE);\n\t\t\t\tHttpResponse httpResponse = defaultHttpClient.execute(httpGet);\n\t\t\t\tif (httpResponse != null) {\n\t\t\t\t\tint responseCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\t\t\tLog.d(LOG_TAG, \"get response code=\" + httpResponse.getStatusLine().getStatusCode());\n\t\t\t\t\tif (responseCode == 204) {\n\t\t\t\t\t\t// nothing is running\n\t\t\t\t\t} else if (responseCode == 200) {\n\t\t\t\t\t\t// app is running\n\n\t\t\t\t\t\t// Need to get real URL after a redirect\n\t\t\t\t\t\t// http://stackoverflow.com/a/10286025/594751\n\t\t\t\t\t\tString lastUrl = dialServer.getAppsUrl();\n\t\t\t\t\t\tif (handler.lastRedirectedUri != null) {\n\t\t\t\t\t\t\tlastUrl = handler.lastRedirectedUri.toString();\n\t\t\t\t\t\t\tLog.d(LOG_TAG, \"lastUrl=\" + lastUrl);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\t\t\tLog.d(LOG_TAG, \"get response=\" + response);\n\t\t\t\t\t\tparseXml(new StringReader(response));\n\n\t\t\t\t\t\tHeader[] headers = httpResponse.getAllHeaders();\n\t\t\t\t\t\tfor (int i = 0; i < headers.length; i++) {\n\t\t\t\t\t\t\tLog.d(LOG_TAG, headers[i].getName() + \"=\" + headers[i].getValue());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// stop the app instance\n\t\t\t\t\t\tHttpDelete httpDelete = new HttpDelete(lastUrl);\n\t\t\t\t\t\thttpResponse = defaultHttpClient.execute(httpDelete);\n\t\t\t\t\t\tif (httpResponse != null) {\n\t\t\t\t\t\t\tLog.d(LOG_TAG, \"delete response code=\" + httpResponse.getStatusLine().getStatusCode());\n\t\t\t\t\t\t\tresponse = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\t\t\t\tLog.d(LOG_TAG, \"delete response=\" + response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tLog.d(LOG_TAG, \"no delete response\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tLog.i(LOG_TAG, \"no get response\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.e(LOG_TAG, \"closeCurrentApp\", e);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Do HTTP GET for app status to determine response code and response body\n\t * \n\t * @param defaultHttpClient\n\t * @param url\n\t * @return\n\t */\n", "func_signal": "private int getAppStatus(DefaultHttpClient defaultHttpClient, String url)", "code": "{\n\t\tint responseCode = 200;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\tHttpResponse httpResponse = defaultHttpClient.execute(httpGet);\n\t\t\tif (httpResponse != null) {\n\t\t\t\tresponseCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\t\tLog.d(LOG_TAG, \"get response code=\" + responseCode);\n\t\t\t\tresponse = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\tLog.d(LOG_TAG, \"get response=\" + response);\n\t\t\t} else {\n\t\t\t\tLog.i(LOG_TAG, \"no get response\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLog.e(LOG_TAG, \"getAppStatus\", e);\n\t\t}\n\t\treturn responseCode;\n\t}", "path": "src\\com\\entertailion\\java\\fling\\RampClient.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Decodes the Multipart Body data and put it into java Properties' key\n * - value pairs.\n **/\n", "func_signal": "private void decodeMultipartData(String boundary, byte[] fbuf,\n\t\tBufferedReader in, Properties parms, Properties files)\n\t\tthrows InterruptedException", "code": "{\n\ttry {\n\t\tint[] bpositions = getBoundaryPositions(fbuf,\n\t\t\t\tboundary.getBytes());\n\t\tint boundarycount = 1;\n\t\tString mpline = in.readLine();\n\t\twhile (mpline != null) {\n\t\t\tif (mpline.indexOf(boundary) == -1)\n\t\t\t\tsendError(\n\t\t\t\t\t\tHTTP_BADREQUEST,\n\t\t\t\t\t\t\"BAD REQUEST: Content type is multipart/form-data but next chunk does not start with boundary. Usage: GET /example/file.html\");\n\t\t\tboundarycount++;\n\t\t\tProperties item = new Properties();\n\t\t\tmpline = in.readLine();\n\t\t\twhile (mpline != null && mpline.trim().length() > 0) {\n\t\t\t\tint p = mpline.indexOf(':');\n\t\t\t\tif (p != -1)\n\t\t\t\t\titem.put(mpline.substring(0, p).trim()\n\t\t\t\t\t\t\t.toLowerCase(), mpline.substring(p + 1)\n\t\t\t\t\t\t\t.trim());\n\t\t\t\tmpline = in.readLine();\n\t\t\t}\n\t\t\tif (mpline != null) {\n\t\t\t\tString contentDisposition = item\n\t\t\t\t\t\t.getProperty(\"content-disposition\");\n\t\t\t\tif (contentDisposition == null) {\n\t\t\t\t\tsendError(\n\t\t\t\t\t\t\tHTTP_BADREQUEST,\n\t\t\t\t\t\t\t\"BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html\");\n\t\t\t\t}\n\t\t\t\tStringTokenizer st = new StringTokenizer(\n\t\t\t\t\t\tcontentDisposition, \"; \");\n\t\t\t\tProperties disposition = new Properties();\n\t\t\t\twhile (st.hasMoreTokens()) {\n\t\t\t\t\tString token = st.nextToken();\n\t\t\t\t\tint p = token.indexOf('=');\n\t\t\t\t\tif (p != -1)\n\t\t\t\t\t\tdisposition.put(token.substring(0, p).trim()\n\t\t\t\t\t\t\t\t.toLowerCase(), token.substring(p + 1)\n\t\t\t\t\t\t\t\t.trim());\n\t\t\t\t}\n\t\t\t\tString pname = disposition.getProperty(\"name\");\n\t\t\t\tpname = pname.substring(1, pname.length() - 1);\n\n\t\t\t\tString value = \"\";\n\t\t\t\tif (item.getProperty(\"content-type\") == null) {\n\t\t\t\t\twhile (mpline != null\n\t\t\t\t\t\t\t&& mpline.indexOf(boundary) == -1) {\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t\tif (mpline != null) {\n\t\t\t\t\t\t\tint d = mpline.indexOf(boundary);\n\t\t\t\t\t\t\tif (d == -1)\n\t\t\t\t\t\t\t\tvalue += mpline;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tvalue += mpline.substring(0, d - 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (boundarycount > bpositions.length)\n\t\t\t\t\t\tsendError(HTTP_INTERNALERROR,\n\t\t\t\t\t\t\t\t\"Error processing request\");\n\t\t\t\t\tint offset = stripMultipartHeaders(fbuf,\n\t\t\t\t\t\t\tbpositions[boundarycount - 2]);\n\t\t\t\t\tString path = saveTmpFile(fbuf, offset,\n\t\t\t\t\t\t\tbpositions[boundarycount - 1] - offset - 4);\n\t\t\t\t\tfiles.put(pname, path);\n\t\t\t\t\tvalue = disposition.getProperty(\"filename\");\n\t\t\t\t\tvalue = value.substring(1, value.length() - 1);\n\t\t\t\t\tdo {\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t} while (mpline != null\n\t\t\t\t\t\t\t&& mpline.indexOf(boundary) == -1);\n\t\t\t\t}\n\t\t\t\tparms.put(pname, value);\n\t\t\t}\n\t\t}\n\t} catch (IOException ioe) {\n\t\tsendError(\n\t\t\t\tHTTP_INTERNALERROR,\n\t\t\t\t\"SERVER INTERNAL ERROR: IOException: \"\n\t\t\t\t\t\t+ ioe.getMessage());\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Decodes parameters in percent-encoded URI-format ( e.g.\n * \"name=Jack%20Daniels&pass=Single%20Malt\" ) and adds them to given\n * Properties. NOTE: this doesn't support multiple identical keys due to\n * the simplicity of Properties -- if you need multiples, you might want\n * to replace the Properties with a Hashtable of Vectors or such.\n */\n", "func_signal": "private void decodeParms(String parms, Properties p)\n\t\tthrows InterruptedException", "code": "{\n\tif (parms == null)\n\t\treturn;\n\n\tStringTokenizer st = new StringTokenizer(parms, \"&\");\n\twhile (st.hasMoreTokens()) {\n\t\tString e = st.nextToken();\n\t\tint sep = e.indexOf('=');\n\t\tif (sep >= 0) {\n\t\t\tp.put(decodePercent(e.substring(0, sep)).trim(),\n\t\t\t\t\tdecodePercent(e.substring(sep + 1)));\n\t\t}\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Decodes the percent encoding scheme. <br/>\n * For example: \"an+example%20string\" -> \"an example string\"\n */\n", "func_signal": "private String decodePercent(String str) throws InterruptedException", "code": "{\n\ttry {\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tchar c = str.charAt(i);\n\t\t\tswitch (c) {\n\t\t\tcase '+':\n\t\t\t\tsb.append(' ');\n\t\t\t\tbreak;\n\t\t\tcase '%':\n\t\t\t\tsb.append((char) Integer.parseInt(\n\t\t\t\t\t\tstr.substring(i + 1, i + 3), 16));\n\t\t\t\ti += 2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsb.append(c);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t} catch (Exception e) {\n\t\tsendError(HTTP_BADREQUEST, \"BAD REQUEST: Bad percent-encoding.\");\n\t\treturn null;\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * URL-encodes everything between \"/\"-characters. Encodes spaces as '%20'\n * instead of '+'.\n */\n", "func_signal": "protected String encodeUri(String uri)", "code": "{\n\tString newUri = \"\";\n\tStringTokenizer st = new StringTokenizer(uri, \"/ \", true);\n\twhile (st.hasMoreTokens()) {\n\t\tString tok = st.nextToken();\n\t\tif (tok.equals(\"/\"))\n\t\t\tnewUri += \"/\";\n\t\telse if (tok.equals(\" \"))\n\t\t\tnewUri += \"%20\";\n\t\telse {\n\t\t\tnewUri += URLEncoder.encode(tok);\n\t\t\t// For Java 1.4 you'll want to use this instead:\n\t\t\t// try { newUri += URLEncoder.encode( tok, \"UTF-8\" ); } catch (\n\t\t\t// java.io.UnsupportedEncodingException uee ) {}\n\t\t}\n\t}\n\treturn newUri;\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Basic constructor.\n */\n", "func_signal": "public Response(String status, String mimeType, InputStream data)", "code": "{\n\tthis.status = status;\n\tthis.mimeType = mimeType;\n\tthis.data = data;\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Serves file from homeDir and its' subdirectories (only). Uses only URI,\n * ignores all headers and HTTP parameters.\n */\n", "func_signal": "public Response serveFile(String uri, Properties header, File homeDir,\n\t\tboolean allowDirectoryListing)", "code": "{\n\tResponse res = null;\n\n\t// Make sure we won't die of an exception later\n\tif (!homeDir.isDirectory())\n\t\tres = new Response(HTTP_INTERNALERROR, MIME_PLAINTEXT,\n\t\t\t\t\"INTERNAL ERRROR: serveFile(): given homeDir is not a directory.\");\n\n\tif (res == null) {\n\t\t// Remove URL arguments\n\t\turi = uri.trim().replace(File.separatorChar, '/');\n\t\tif (uri.indexOf('?') >= 0)\n\t\t\turi = uri.substring(0, uri.indexOf('?'));\n\n\t\t// Prohibit getting out of current directory\n\t\tif (uri.startsWith(\"..\") || uri.endsWith(\"..\")\n\t\t\t\t|| uri.indexOf(\"../\") >= 0)\n\t\t\tres = new Response(HTTP_FORBIDDEN, MIME_PLAINTEXT,\n\t\t\t\t\t\"FORBIDDEN: Won't serve ../ for security reasons.\");\n\t}\n\n\tFile f = new File(homeDir, uri);\n\tif (res == null && !f.exists())\n\t\tres = new Response(HTTP_NOTFOUND, MIME_PLAINTEXT,\n\t\t\t\t\"Error 404, file not found.\");\n\n\t// List the directory, if necessary\n\tif (res == null && f.isDirectory()) {\n\t\t// Browsers get confused without '/' after the\n\t\t// directory, send a redirect.\n\t\tif (!uri.endsWith(\"/\")) {\n\t\t\turi += \"/\";\n\t\t\tres = new Response(HTTP_REDIRECT, MIME_HTML,\n\t\t\t\t\t\"<html><body>Redirected: <a href=\\\"\" + uri + \"\\\">\"\n\t\t\t\t\t\t\t+ uri + \"</a></body></html>\");\n\t\t\tres.addHeader(\"Location\", uri);\n\t\t}\n\n\t\tif (res == null) {\n\t\t\t// First try index.html and index.htm\n\t\t\tif (new File(f, \"index.html\").exists())\n\t\t\t\tf = new File(homeDir, uri + \"/index.html\");\n\t\t\telse if (new File(f, \"index.htm\").exists())\n\t\t\t\tf = new File(homeDir, uri + \"/index.htm\");\n\t\t\t// No index file, list the directory if it is readable\n\t\t\telse if (allowDirectoryListing && f.canRead()) {\n\t\t\t\tString[] files = f.list();\n\t\t\t\tString msg = \"<html><body><h1>Directory \" + uri\n\t\t\t\t\t\t+ \"</h1><br/>\";\n\n\t\t\t\tif (uri.length() > 1) {\n\t\t\t\t\tString u = uri.substring(0, uri.length() - 1);\n\t\t\t\t\tint slash = u.lastIndexOf('/');\n\t\t\t\t\tif (slash >= 0 && slash < u.length())\n\t\t\t\t\t\tmsg += \"<b><a href=\\\"\"\n\t\t\t\t\t\t\t\t+ uri.substring(0, slash + 1)\n\t\t\t\t\t\t\t\t+ \"\\\">..</a></b><br/>\";\n\t\t\t\t}\n\n\t\t\t\tif (files != null) {\n\t\t\t\t\tfor (int i = 0; i < files.length; ++i) {\n\t\t\t\t\t\tFile curFile = new File(f, files[i]);\n\t\t\t\t\t\tboolean dir = curFile.isDirectory();\n\t\t\t\t\t\tif (dir) {\n\t\t\t\t\t\t\tmsg += \"<b>\";\n\t\t\t\t\t\t\tfiles[i] += \"/\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmsg += \"<a href=\\\"\" + encodeUri(uri + files[i])\n\t\t\t\t\t\t\t\t+ \"\\\">\" + files[i] + \"</a>\";\n\n\t\t\t\t\t\t// Show file size\n\t\t\t\t\t\tif (curFile.isFile()) {\n\t\t\t\t\t\t\tlong len = curFile.length();\n\t\t\t\t\t\t\tmsg += \" &nbsp;<font size=2>(\";\n\t\t\t\t\t\t\tif (len < 1024)\n\t\t\t\t\t\t\t\tmsg += len + \" bytes\";\n\t\t\t\t\t\t\telse if (len < 1024 * 1024)\n\t\t\t\t\t\t\t\tmsg += len / 1024 + \".\"\n\t\t\t\t\t\t\t\t\t\t+ (len % 1024 / 10 % 100) + \" KB\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tmsg += len / (1024 * 1024) + \".\" + len\n\t\t\t\t\t\t\t\t\t\t% (1024 * 1024) / 10 % 100 + \" MB\";\n\n\t\t\t\t\t\t\tmsg += \")</font>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmsg += \"<br/>\";\n\t\t\t\t\t\tif (dir)\n\t\t\t\t\t\t\tmsg += \"</b>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmsg += \"</body></html>\";\n\t\t\t\tres = new Response(HTTP_OK, MIME_HTML, msg);\n\t\t\t} else {\n\t\t\t\tres = new Response(HTTP_FORBIDDEN, MIME_PLAINTEXT,\n\t\t\t\t\t\t\"FORBIDDEN: No directory listing.\");\n\t\t\t}\n\t\t}\n\t}\n\n\ttry {\n\t\tif (res == null) {\n\t\t\t// Get MIME type from file name extension, if possible\n\t\t\tString mime = null;\n\t\t\tint dot = f.getCanonicalPath().lastIndexOf('.');\n\t\t\tif (dot >= 0)\n\t\t\t\tmime = (String) theMimeTypes.get(f.getCanonicalPath()\n\t\t\t\t\t\t.substring(dot + 1).toLowerCase());\n\t\t\tif (mime == null)\n\t\t\t\tmime = MIME_DEFAULT_BINARY;\n\n\t\t\t// Support (simple) skipping:\n\t\t\tlong startFrom = 0;\n\t\t\tlong endAt = -1;\n\t\t\tString range = header.getProperty(\"range\");\n\t\t\tif (range != null) {\n\t\t\t\tif (range.startsWith(\"bytes=\")) {\n\t\t\t\t\trange = range.substring(\"bytes=\".length());\n\t\t\t\t\tint minus = range.indexOf('-');\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (minus > 0) {\n\t\t\t\t\t\t\tstartFrom = Long.parseLong(range.substring(0,\n\t\t\t\t\t\t\t\t\tminus));\n\t\t\t\t\t\t\tendAt = Long.parseLong(range\n\t\t\t\t\t\t\t\t\t.substring(minus + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Change return code and add Content-Range header when skipping\n\t\t\t// is requested\n\t\t\tlong fileLen = f.length();\n\t\t\tif (range != null && startFrom >= 0) {\n\t\t\t\tif (startFrom >= fileLen) {\n\t\t\t\t\tres = new Response(HTTP_RANGE_NOT_SATISFIABLE,\n\t\t\t\t\t\t\tMIME_PLAINTEXT, \"\");\n\t\t\t\t\tres.addHeader(\"Content-Range\", \"bytes 0-0/\" + fileLen);\n\t\t\t\t} else {\n\t\t\t\t\tif (endAt < 0)\n\t\t\t\t\t\tendAt = fileLen - 1;\n\t\t\t\t\tlong newLen = endAt - startFrom + 1;\n\t\t\t\t\tif (newLen < 0)\n\t\t\t\t\t\tnewLen = 0;\n\n\t\t\t\t\tfinal long dataLen = newLen;\n\t\t\t\t\tFileInputStream fis = new FileInputStream(f) {\n\t\t\t\t\t\tpublic int available() throws IOException {\n\t\t\t\t\t\t\treturn (int) dataLen;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tfis.skip(startFrom);\n\n\t\t\t\t\tres = new Response(HTTP_PARTIALCONTENT, mime, fis);\n\t\t\t\t\tres.addHeader(\"Content-Length\", \"\" + dataLen);\n\t\t\t\t\tres.addHeader(\"Content-Range\", \"bytes \" + startFrom\n\t\t\t\t\t\t\t+ \"-\" + endAt + \"/\" + fileLen);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tres = new Response(HTTP_OK, mime, new FileInputStream(f));\n\t\t\t\tres.addHeader(\"Content-Length\", \"\" + fileLen);\n\t\t\t}\n\t\t}\n\t} catch (IOException ioe) {\n\t\tres = new Response(HTTP_FORBIDDEN, MIME_PLAINTEXT,\n\t\t\t\t\"FORBIDDEN: Reading file failed.\");\n\t}\n\n\tres.addHeader(\"Accept-Ranges\", \"bytes\"); // Announce that the file\n\t\t\t\t\t\t\t\t\t\t\t\t// server accepts partial\n\t\t\t\t\t\t\t\t\t\t\t\t// content requestes\n\treturn res;\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Returns an error message as a HTTP response and throws\n * InterruptedException to stop further request processing.\n */\n", "func_signal": "private void sendError(String status, String msg)\n\t\tthrows InterruptedException", "code": "{\n\tsendResponse(status, MIME_PLAINTEXT, null,\n\t\t\tnew ByteArrayInputStream(msg.getBytes()));\n\tthrow new InterruptedException();\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Find the byte positions where multipart boundaries start.\n **/\n", "func_signal": "public int[] getBoundaryPositions(byte[] b, byte[] boundary)", "code": "{\n\tint matchcount = 0;\n\tint matchbyte = -1;\n\tVector matchbytes = new Vector();\n\tfor (int i = 0; i < b.length; i++) {\n\t\tif (b[i] == boundary[matchcount]) {\n\t\t\tif (matchcount == 0)\n\t\t\t\tmatchbyte = i;\n\t\t\tmatchcount++;\n\t\t\tif (matchcount == boundary.length) {\n\t\t\t\tmatchbytes.addElement(Integer.valueOf(matchbyte));\n\t\t\t\tmatchcount = 0;\n\t\t\t\tmatchbyte = -1;\n\t\t\t}\n\t\t} else {\n\t\t\ti -= matchcount;\n\t\t\tmatchcount = 0;\n\t\t\tmatchbyte = -1;\n\t\t}\n\t}\n\tint[] ret = new int[matchbytes.size()];\n\tfor (int i = 0; i < ret.length; i++) {\n\t\tret[i] = ((Integer) matchbytes.elementAt(i)).intValue();\n\t}\n\treturn ret;\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * Sends given response to the socket.\n */\n", "func_signal": "private void sendResponse(String status, String mime,\n\t\tProperties header, InputStream data)", "code": "{\n\ttry {\n\t\tif (status == null)\n\t\t\tthrow new Error(\"sendResponse(): Status can't be null.\");\n\n\t\tOutputStream out = mySocket.getOutputStream();\n\t\tPrintWriter pw = new PrintWriter(out);\n\t\tpw.print(\"HTTP/1.0 \" + status + \" \\r\\n\");\n\n\t\tif (mime != null)\n\t\t\tpw.print(\"Content-Type: \" + mime + \"\\r\\n\");\n\n\t\tif (header == null || header.getProperty(\"Date\") == null)\n\t\t\tpw.print(\"Date: \" + gmtFrmt.format(new Date()) + \"\\r\\n\");\n\n\t\tif (header != null) {\n\t\t\tEnumeration e = header.keys();\n\t\t\twhile (e.hasMoreElements()) {\n\t\t\t\tString key = (String) e.nextElement();\n\t\t\t\tString value = header.getProperty(key);\n\t\t\t\tpw.print(key + \": \" + value + \"\\r\\n\");\n\t\t\t}\n\t\t}\n\n\t\tpw.print(\"\\r\\n\");\n\t\tpw.flush();\n\n\t\tif (data != null) {\n\t\t\tint pending = data.available(); // This is to support\n\t\t\t\t\t\t\t\t\t\t\t// partial sends, see\n\t\t\t\t\t\t\t\t\t\t\t// serveFile()\n\t\t\tbyte[] buff = new byte[2048];\n\t\t\twhile (pending > 0) {\n\t\t\t\tint read = data.read(buff, 0, ((pending > 2048) ? 2048\n\t\t\t\t\t\t: pending));\n\t\t\t\tif (read <= 0)\n\t\t\t\t\tbreak;\n\t\t\t\tout.write(buff, 0, read);\n\t\t\t\tpending -= read;\n\t\t\t}\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t\tif (data != null)\n\t\t\tdata.close();\n\t} catch (IOException ioe) {\n\t\t// Couldn't write? No can do.\n\t\ttry {\n\t\t\tmySocket.close();\n\t\t} catch (Throwable t) {\n\t\t}\n\t}\n}", "path": "src\\com\\entertailion\\java\\fling\\HttpServer.java", "repo_name": "NoRulesJustFeels/Fling", "stars": 348, "license": "None", "language": "java", "size": 3324}
{"docstring": "/**\n * \u89e3\u6790xml,\u8fd4\u56de\u7b2c\u4e00\u7ea7\u5143\u7d20\u952e\u503c\u5bf9\u3002\u5982\u679c\u7b2c\u4e00\u7ea7\u5143\u7d20\u6709\u5b50\u8282\u70b9\uff0c\u5219\u6b64\u8282\u70b9\u7684\u503c\u662f\u5b50\u8282\u70b9\u7684xml\u6570\u636e\u3002\n */\n", "func_signal": "public static SortedMap<String,String> parseXmlToMap(String strXml)", "code": "{\n    if (null == strXml || \"\".equals(strXml)) {\n        return new TreeMap<String, String>();\n    }\n\n    SortedMap<String, String> m = new TreeMap<String, String>();\n\n    StringReader read = new StringReader(strXml);\n    SAXBuilder builder = new SAXBuilder();\n    Document doc;\n    try {\n        doc = builder.build(read);\n    } catch (JDOMException e) {\n        throw new RuntimeException(e);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n    Element root = doc.getRootElement();\n    List<Element> list = root.getChildren();\n    for (Element e : list) {\n        String k = e.getName();\n        String v = e.getChildren().isEmpty() ? e.getTextNormalize() : getChildrenText(e.getChildren());\n        m.put(k, v);\n    }\n\n    //\u5173\u95ed\u6d41\n    read.close();\n\n    return m;\n}", "path": "src\\main\\java\\spring\\boot\\pay\\common\\XmlHelper.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "// @CheckIpEndpoint\n", "func_signal": "public void tradeAliBank(HttpServletRequest request, HttpServletResponse response, String data) throws Exception", "code": "{\n\n\tValidateResult result = this.validateTradeDataForAliBank(data,request);\n\n\tif (result.getTrade() == null) {\n\n\t\treturn;\n\t}\n\n\t\n\tResultModel processResult = this.tradeService.doTrade(result.getTrade());\n\t// ResultModel processResult =ResultModel.successModel(\"32343\");\n\tif (!processResult.isSuccess()) {\n\t\treturn;\n\t}\n\n\t// if (trade.getPayType() == PayType.ALI_PAY_NetBank ||\n\t// trade.getPayType() == PayType.ALI_PAY_WAP) {\n\tresponse.setContentType(\"text/html; charset=UTF-8\");\n\tresponse.setCharacterEncoding(\"UTF-8\");\n\tresponse.getWriter().write(new String(processResult.getBody().toString().getBytes(), \"UTF-8\"));\n\t// response.getOutputStream().flush();\n\t// response.getOutputStream().close();\n\t// }\n\n\t/*\n\t * if (trade.getPayType() == PayType.WX_PAY_JSAPI) {\n\t * response.setContentType(\"text/html; charset=UTF-8\");\n\t * response.setCharacterEncoding(\"UTF-8\"); String\n\t * jsapiData=handleJSAPI(processResult.getBody().toString());\n\t * \n\t * response.getOutputStream().print(new String(jsapiData.getBytes(),\n\t * \"UTF-8\")); response.getOutputStream().flush();\n\t * response.getOutputStream().close();\n\t * \n\t * }\n\t */\n\n\treturn;\n\n}", "path": "src\\main\\java\\spring\\boot\\pay\\controller\\TradeController.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u521b\u5efamd5\u6458\u8981,\u89c4\u5219\u662f:\u6309\u53c2\u6570\u540d\u79f0a-z\u6392\u5e8f,\u9047\u5230\u7a7a\u503c\u7684\u53c2\u6570\u4e0d\u53c2\u52a0\u7b7e\u540d\u3002\n */\n", "func_signal": "public static String createSign(SortedMap<String, String> packageParams)", "code": "{\n    StringBuilder sb = new StringBuilder();\n\n    for (Map.Entry<String, String> entry : packageParams.entrySet()) {\n\n        String k = entry.getKey();\n        String v = entry.getValue();\n        if (null != v && !\"\".equals(v) && !\"sign\".equals(k) && !\"key\".equals(k)) {\n            sb.append(k).append(\"=\").append(v).append(\"&\");\n        }\n    }\n    \n  //  String key=\"1Q2w3e4r5t6y7u8i9Oa1s2d3f4g5h6j7\";\n    sb.append(\"key=\"+WxPayProperties.KEY);\n //  \u5546\u6237key\u5373\u5bc6\u94a5\uff1a \n    return WXMD5.MD5Encode(sb.toString())\n            .toUpperCase();\n\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayHelper.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "// @CheckIpEndpoint\n", "func_signal": "public String trade(HttpServletRequest request, HttpServletResponse response, String data) throws Exception", "code": "{\n\n\tValidateResult result = this.validateTradeDataForWx(data, request);\n\n\tif (result.getTrade() == null) {\n\n\t\treturn result.getResult();\n\t}\n\n\tResultModel processResult = this.tradeService.doTrade(result.getTrade());\n\n\tif (!processResult.isSuccess()) {\n\t\treturn ProtectData.AESEncrypt(Constant.AESkeyStr, toFailureJson(processResult.getBody().toString()));\n\t}\n\n\treturn ProtectData.AESEncrypt(Constant.AESkeyStr, toSuccessJson(processResult.getBody().toString()));\n\n}", "path": "src\\main\\java\\spring\\boot\\pay\\controller\\TradeController.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u6839\u636e\u9884\u652f\u4ed8\u4fe1\u606f\u521b\u5efa\u7528\u4e8e\u652f\u4ed8\u7684json\u4e32\n * \n * @param packageStr\n *            \u9884\u652f\u4ed8\u4fe1\u606f\n * @return \u7528\u4e8e\u63d0\u4ea4\u7ed9\u5fae\u4fe1\u8fdb\u884c\u652f\u4ed8\u7684json\u4e32\n */\n", "func_signal": "private String cretePayJson(String packageStr)", "code": "{\n\n\tSortedMap<String, String> map = new TreeMap<>();\n\tString timestamp = String.valueOf(System.currentTimeMillis() / 1000);\n\tmap.put(\"appId\", WxPayProperties.APP_ID);\n\tmap.put(\"nonceStr\", WxPayHelper.getNonceStr());\n\tmap.put(\"timeStamp\", timestamp);\n\tmap.put(\"package\", packageStr);\n\tmap.put(\"signType\", \"MD5\");\n\n\treturn String.format(PAY_TEMPLATE, WxPayProperties.APP_ID, timestamp, map.get(\"nonceStr\"), packageStr,\n\t\t\tWxPayHelper.createSign(map));\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayService.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 yyyyMMddHHmmss\n *\n * @return String\n */\n", "func_signal": "public static String getCurrTime()", "code": "{\n    Date now = new Date();\n    SimpleDateFormat outFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    return outFormat.format(now);\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayHelper.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * @param content\n * @param charset\n * @return\n * @throws SignatureException\n * @throws UnsupportedEncodingException \n */\n", "func_signal": "private static byte[] getContentBytes(String content, String charset)", "code": "{\n    if (charset == null || \"\".equals(charset)) {\n        return content.getBytes();\n    }\n    try {\n        return content.getBytes(charset);\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"MD5\u7b7e\u540d\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef,\u6307\u5b9a\u7684\u7f16\u7801\u96c6\u4e0d\u5bf9,\u60a8\u76ee\u524d\u6307\u5b9a\u7684\u7f16\u7801\u96c6\u662f:\" + charset);\n    }\n}", "path": "src\\main\\java\\spring\\boot\\pay\\common\\encrypt\\AliMD5.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u7b7e\u540d\u5b57\u7b26\u4e32\n * @param text \u9700\u8981\u7b7e\u540d\u7684\u5b57\u7b26\u4e32\n * @param sign \u7b7e\u540d\u7ed3\u679c\n * @param key \u5bc6\u94a5\n * @param input_charset \u7f16\u7801\u683c\u5f0f\n * @return \u7b7e\u540d\u7ed3\u679c\n */\n", "func_signal": "public static boolean verify(String text, String sign, String key, String input_charset)", "code": "{\n\ttext = text + key;\n\tString mysign = DigestUtils.md5Hex(getContentBytes(text, input_charset));\n\tif(mysign.equals(sign)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", "path": "src\\main\\java\\spring\\boot\\pay\\common\\encrypt\\AliMD5.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u83b7\u53d6\u968f\u673a\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String getNonceStr()", "code": "{\n    // \u968f\u673a\u6570\n    String currTime = getCurrTime();\n    // 8\u4f4d\u65e5\u671f\n    String strTime = currTime.substring(8, currTime.length());\n    // \u56db\u4f4d\u968f\u673a\u6570\n    String strRandom = buildRandom(4) + \"\";\n    // 10\u4f4d\u5e8f\u5217\u53f7,\u53ef\u4ee5\u81ea\u884c\u8c03\u6574\u3002\n    return strTime + strRandom;\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayHelper.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "// @CheckIpEndpoint\n", "func_signal": "public void tradeWXJS(HttpServletRequest request, HttpServletResponse response, String data) throws Exception", "code": "{\n\n\t\n\tValidateResult result = this.validateTradeDataForWxjs(data,request);\n\n\tif (result.getTrade() == null) {\n\n\t\treturn;\n\t}\n\n\t\n\tResultModel processResult = this.tradeService.doTrade(result.getTrade());\n\t// ResultModel processResult =ResultModel.successModel(\"32343\");\n\tif (!processResult.isSuccess()) {\n\t\treturn;\n\t}\n\n\n\t\n\n\t response.setContentType(\"text/html; charset=UTF-8\");\n\t response.setCharacterEncoding(\"UTF-8\"); String\n\t jsapiData=handleJSAPI(processResult.getBody().toString());\n\t PrintWriter out = response.getWriter(); \n\t  out.print(jsapiData);\n\t  out.close();\n\t //response.getOutputStream().print(new String(jsapiData.getBytes(),\n\t//  \"UTF-8\"));\n\t //response.getOutputStream().flush();\n\t // response.getOutputStream().close();\n\t\n\t  return;\n\n}", "path": "src\\main\\java\\spring\\boot\\pay\\controller\\TradeController.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u53d6\u51fa\u4e00\u4e2a\u6307\u5b9a\u957f\u5ea6\u5927\u5c0f\u7684\u968f\u673a\u6b63\u6574\u6570.\n * @param length int \u8bbe\u5b9a\u6240\u53d6\u51fa\u968f\u673a\u6570\u7684\u957f\u5ea6\u3002length\u5c0f\u4e8e11\n * @return int \u8fd4\u56de\u751f\u6210\u7684\u968f\u673a\u6570\u3002\n */\n", "func_signal": "public static int buildRandom(int length)", "code": "{\n    int num = 1;\n    double random = Math.random();\n    if (random < 0.1) {\n        random = random + 0.1;\n    }\n    for (int i = 0; i < length; i++) {\n        num = num * 10;\n    }\n    return (int) ((random * num));\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayHelper.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u521b\u5efa\u9884\u652f\u4ed8\u8bf7\u6c42\u7684xml\u53c2\u6570\n */\n", "func_signal": "private String createXmlParams4PrePay(Trade trade)", "code": "{\n\n\tSortedMap<String, String> params = new TreeMap<String, String>();\n\tparams.put(\"appid\", WxPayProperties.APP_ID);\n\tparams.put(\"body\", trade.getBody());\n\tparams.put(\"mch_id\", WxPayProperties.MCH_ID);\n\tparams.put(\"nonce_str\", WxPayHelper.getNonceStr());\n\tparams.put(\"notify_url\", WxPayProperties.DOMAIN + WxPayProperties.NOTIFY_URL);\n\tparams.put(\"out_trade_no\", trade.getOrderId());\n\tLOGGER.error(\"\u652f\u4ed8\u53c2\u6570\" + WxPayProperties.DOMAIN + WxPayProperties.NOTIFY_URL);\n\tif (PayType.WX_PAY_JSAPI == trade.getPayType()) {\n\t\tparams.put(\"openid\", trade.getOpenId());\n\t}\n\n\tparams.put(\"spbill_create_ip\", trade.getIp());\n\tparams.put(\"total_fee\", String.valueOf(MoneyFormat.yuan2fen(String.valueOf(trade.getTotalFee()))));\n\n\tif (PayType.WX_PAY_QC == trade.getPayType()) {\n\t\tparams.put(\"trade_type\", WxPayProperties.TRADE_TYPE_QC);\n\t} else {\n\t\tparams.put(\"trade_type\", WxPayProperties.TRADE_TYPE_JSAPI);\n\t}\n        \n\ttrade.setRequestTime(java.time.LocalDateTime.now());\n\tparams.put(\"time_start\", trade.getRequestTime().format(DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\")));\n\tif(trade.getOrderType()!=-1){\n\tparams.put(\"time_expire\",\n\t\t\ttrade.getRequestTime().plusSeconds(45).format(DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\")));\n\t\t\t// params.put(\"limit_pay\",\"no_credit\");//\u6307\u5b9a\u4e0d\u80fd\u4f7f\u7528\u4fe1\u7528\u5361\u652f\u4ed8\n\t}\n\t\n\treturn WxPayHelper.getRequestXml(params);\n\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayService.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u83b7\u53d6\u7cfb\u7edf\u5f53\u671f\u5e74\u6708\u65e5(\u7cbe\u786e\u5230\u5929)\uff0c\u683c\u5f0f\uff1ayyyyMMdd\n * @return\n */\n", "func_signal": "public static String getDate()", "code": "{\n\tDate date=new Date();\n\tDateFormat df=new SimpleDateFormat(dtShort);\n\treturn df.format(date);\n}", "path": "src\\main\\java\\alipay\\util\\UtilDate.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "// @CheckIpEndpoint\n", "func_signal": "public void tradeAliDirect(HttpServletRequest request, HttpServletResponse response, String data) throws Exception", "code": "{\n\n\tValidateResult result =  this.validateTradeDataForAliDirect(data,request);\n\n\tif (result.getTrade() == null) {\n\n\t\treturn;\n\t}\n\t\n\tResultModel processResult = this.tradeService.doTrade(result.getTrade());\n\t\n\tif (!processResult.isSuccess()) {\n\t\treturn;\n\t}\n\n\n\tresponse.setContentType(\"text/html; charset=UTF-8\");\n\tresponse.setCharacterEncoding(\"UTF-8\");\n\tLOGGER.error(\"ALI_PAY_Direct exec here\");\n\tSystem.out.println(\"ALI_PAY_Direct exec here\");\n\tresponse.getWriter().write(new String(processResult.getBody().toString().getBytes(), \"UTF-8\"));\n\tLOGGER.error(\"ALI_PAY_Direct exec ok\");\n\tSystem.out.println(\"ALI_PAY_Direct exec ok\");\n\t\n\treturn;\n\n}", "path": "src\\main\\java\\spring\\boot\\pay\\controller\\TradeController.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u8fd4\u56de\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4(\u7cbe\u786e\u5230\u6beb\u79d2),\u4f5c\u4e3a\u4e00\u4e2a\u552f\u4e00\u7684\u8ba2\u5355\u7f16\u53f7\n * @return\n *      \u4ee5yyyyMMddHHmmss\u4e3a\u683c\u5f0f\u7684\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4\n */\n", "func_signal": "public  static String getOrderNum()", "code": "{\n\t\tDate date=new Date();\n\t\tDateFormat df=new SimpleDateFormat(dtLong);\n\t\treturn df.format(date);\n\t}", "path": "src\\main\\java\\alipay\\util\\UtilDate.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u53d1\u9001https\u8bf7\u6c42\u5230\u5fae\u4fe1\u83b7\u53d6 \u9884\u652f\u4ed8id\n */\n", "func_signal": "private Map<String, String> acquirePrePayReturnInfo(String xmlParam)", "code": "{\n\n\tString str = HttpClient.execute(xmlParam, WxPayProperties.WX_PRE_PAY_URL, 1);\n\n\tMap<String, String> map = XmlHelper.parseXmlToMap(str);\n\tmap.put(\"return\", str);\n\n\treturn map;\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayService.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u6839\u636e\u652f\u4ed8\u4fe1\u606f \u751f\u6210\u5fae\u4fe1\u652f\u4ed8\u7684\u8bf7\u6c42\u4e32\n */\n", "func_signal": "public ResultModel getPayJson(Trade trade)", "code": "{\n\n\t\n\t\n\tString xmlParams = createXmlParams4PrePay(trade);\n\ttrade.setRequestContent(xmlParams);\n\ttrade.setTradeStatus(PayTask.STATUS_ACCEPTED);\n\n\tif (StringUtils.isBlank(trade.getOrderId())) {\n\n\t\t//\u9519\u8bef\u5904\u7406\n\t}\n\ttradeDao.checkOrderStatus(trade);\n\tif (trade.getTradeStatus() != -1) {// \u4ea4\u6613\u8868\u4e2d\u6ca1\u8ba2\u5355\uff0c\u5219\u63d2\u5165\u8ba2\u5355\n\t\ttradeDao.save(trade);\n\t}\n\t\n\n\tMap<String, String> map = acquirePrePayReturnInfo(xmlParams);\n\tString prePayId = map.get(\"prepay_id\");\n\tString codeUrl = map.get(\"code_url\");\n\n\ttrade.setReturnContent(map.get(\"return\"));\n\ttradeDao.updateReturnContent(trade);\n\tLOGGER.error(\"\u83b7\u53d6\u9884\u652f\u4ed8id\u5931\u8d25,xmlParams is:{},resp is:{}\", xmlParams, map.get(\"return\"));\n\tif (prePayId == null) {\n\t\tLOGGER.error(\"\u83b7\u53d6\u9884\u652f\u4ed8id\u5931\u8d25,xmlParams is:{},resp is:{}\", xmlParams, map.get(\"return\"));\n\n\t\ttradeDao.updateStatus(PayTask.STATUS_FirstFailed_pre, trade.getOrderId());\n\n\t\treturn ResultModel.failModel(\"\u83b7\u53d6\u9884\u652f\u4ed8id\u5931\u8d25\");\n\t}\n\n\tif (trade.getPayType() == PayType.WX_PAY_QC) {\n\n\t\tif (codeUrl == null) {\n\n\t\t\tLOGGER.error(\"\u83b7\u53d6\u4e8c\u7ef4\u7801\u8fde\u63a5\u5931\u8d25,xmlParams is:{},resp is:{}\", xmlParams, map.get(\"return\"));\n\n\t\t\ttradeDao.updateStatus(PayTask.STATUS_FirstFailed_qc, trade.getOrderId());\n\n\t\t\treturn ResultModel.failModel(\"\u83b7\u53d6\u4e8c\u7ef4\u7801\u8fde\u63a5\u5931\u8d25\");\n\t\t} else {\n\n\t\t\tString wxPayParam = cretePayJson(\"prepay_id=\" + prePayId + \"$code_url=\" + codeUrl);\n\n\t\t\treturn ResultModel.successModel(wxPayParam);\n\t\t}\n\t}\n\n\tif (trade.getPayType() == PayType.WX_PAY_JSAPI) {\n\t\treturn ResultModel.successModel(prePayId);\n\t}\n\n\tString wxPayParam = cretePayJson(\"prepay_id=\" + prePayId);\n\n\treturn ResultModel.successModel(wxPayParam);\n}", "path": "src\\main\\java\\spring\\boot\\pay\\thirdparty\\wxpay\\WxPayService.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u7b7e\u540d\u5b57\u7b26\u4e32\n * @param text \u9700\u8981\u7b7e\u540d\u7684\u5b57\u7b26\u4e32\n * @param key \u5bc6\u94a5\n * @param input_charset \u7f16\u7801\u683c\u5f0f\n * @return \u7b7e\u540d\u7ed3\u679c\n */\n", "func_signal": "public static String sign(String text, String key, String input_charset)", "code": "{\n\ttext = text + key;\n    return DigestUtils.md5Hex(getContentBytes(text, input_charset));\n}", "path": "src\\main\\java\\spring\\boot\\pay\\common\\encrypt\\AliMD5.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u83b7\u53d6\u5b50\u7ed3\u70b9\u7684xml\n * @param children\n * @return String\n */\n", "func_signal": "private static String getChildrenText(List<Element> children)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    if (!children.isEmpty()) {\n        for (Element e : children) {\n            String name = e.getName();\n            String value = e.getTextNormalize();\n            List<Element> list = e.getChildren();\n            sb.append(\"<\").append(name).append(\">\");\n            if (!list.isEmpty()) {\n                sb.append(getChildrenText(list));\n            }\n            sb.append(value);\n            sb.append(\"</\").append(name).append(\">\");\n        }\n    }\n\n    return sb.toString();\n}", "path": "src\\main\\java\\spring\\boot\\pay\\common\\XmlHelper.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * \u4ea7\u751f\u968f\u673a\u7684\u4e09\u4f4d\u6570\n * @return\n */\n", "func_signal": "public static String getThree()", "code": "{\n\tRandom rad=new Random();\n\treturn rad.nextInt(1000)+\"\";\n}", "path": "src\\main\\java\\alipay\\util\\UtilDate.java", "repo_name": "softprog/spring-boot-pay", "stars": 330, "license": "None", "language": "java", "size": 66}
{"docstring": "/**\n * Initializes this static object with the Context of the calling Activity.\n *\n * @param context The Activity which wants to use the camera.\n */\n", "func_signal": "public static void init(Context context)", "code": "{\n    if (cameraManager == null) {\n        cameraManager = new CameraManager(context);\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u6253\u5f00\u6216\u5173\u95ed\u95ea\u5149\u706f\n *\n * @param open \u63a7\u5236\u662f\u5426\u6253\u5f00\n * @return \u6253\u5f00\u6216\u5173\u95ed\u5931\u8d25\uff0c\u5219\u8fd4\u56defalse\u3002\n */\n", "func_signal": "public boolean setFlashLight(boolean open)", "code": "{\n    if (camera == null) {\n        return false;\n    }\n    Camera.Parameters parameters = camera.getParameters();\n    if (parameters == null) {\n        return false;\n    }\n    List<String> flashModes = parameters.getSupportedFlashModes();\n    // Check if camera flash exists\n    if (null == flashModes || 0 == flashModes.size()) {\n        // Use the screen as a flashlight (next best thing)\n        return false;\n    }\n    String flashMode = parameters.getFlashMode();\n    if (open) {\n        if (Camera.Parameters.FLASH_MODE_TORCH.equals(flashMode)) {\n            return true;\n        }\n        // Turn on the flash\n        if (flashModes.contains(Camera.Parameters.FLASH_MODE_TORCH)) {\n            parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);\n            camera.setParameters(parameters);\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        if (Camera.Parameters.FLASH_MODE_OFF.equals(flashMode)) {\n            return true;\n        }\n        // Turn on the flash\n        if (flashModes.contains(Camera.Parameters.FLASH_MODE_OFF)) {\n            parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);\n            camera.setParameters(parameters);\n            return true;\n        } else\n            return false;\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Asks the camera hardware to begin drawing preview frames to the screen.\n */\n", "func_signal": "public void startPreview()", "code": "{\n    if (camera != null && !previewing) {\n        camera.startPreview();\n        previewing = true;\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Closes the camera driver if still in use.\n */\n", "func_signal": "public void closeDriver()", "code": "{\n    if (camera != null) {\n        FlashlightManager.disableFlashlight();\n        camera.release();\n        camera = null;\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Asks the camera hardware to perform an autofocus.\n *\n * @param handler The Handler to notify when the autofocus completes.\n * @param message The message to deliver.\n */\n", "func_signal": "public void requestAutoFocus(Handler handler, int message)", "code": "{\n    if (camera != null && previewing) {\n        autoFocusCallback.setHandler(handler, message);\n        //Log.d(TAG, \"Requesting auto-focus callback\");\n        camera.autoFocus(autoFocusCallback);\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u8fdb\u5165\u7cfb\u7edf\u88c1\u526a\n * @param inputUri \u9700\u8981\u88c1\u526a\u7684\u56fe\u7247\u8def\u5f84\n * @param outputUri \u88c1\u526a\u540e\u56fe\u7247\u8def\u5f84 Environment.getExternalStorageDirectory() + \"/image.jpg\")\n * @param width \u88c1\u526a\u540e\u5bbd\u5ea6(px)\n * @param height \u88c1\u526a\u540e\u9ad8\u5ea6(px)\n */\n", "func_signal": "private void startActivityForImageCut(Activity activity, int requestCode,\n                                      Uri inputUri, Uri outputUri,\n                                      int width, int height)", "code": "{\n    Intent intent = new Intent(\"com.android.camera.action.CROP\");\n    intent.setDataAndType(inputUri, \"image/*\");\n    // \u4e0b\u9762\u8fd9\u4e2acrop=true\u662f\u8bbe\u7f6e\u5728\u5f00\u542f\u7684Intent\u4e2d\u8bbe\u7f6e\u663e\u793a\u7684VIEW\u53ef\u88c1\u526a\n    intent.putExtra(\"crop\", \"true\");\n    intent.putExtra(\"scale\", true); // \u53bb\u9ed1\u8fb9\n    intent.putExtra(\"scaleUpIfNeeded\", true); // \u53bb\u9ed1\u8fb9\n    // aspectX aspectY \u662f\u5bbd\u9ad8\u7684\u6bd4\u4f8b\n    intent.putExtra(\"aspectX\", 1); // \u8f93\u51fa\u662fX\u65b9\u5411\u7684\u6bd4\u4f8b\n    intent.putExtra(\"aspectY\", 1);\n    // outputX outputY \u662f\u88c1\u526a\u56fe\u7247\u5bbd\u9ad8\uff0c\u5207\u5fcc\u4e0d\u8981\u518d\u6539\u52a8\u4e0b\u5217\u6570\u5b57\uff0c\u4f1a\u5361\u6b7b\n    intent.putExtra(\"outputX\", width); // \u8f93\u51faX\u65b9\u5411\u7684\u50cf\u7d20\n    intent.putExtra(\"outputY\", height);\n    intent.putExtra(\"outputFormat\", Bitmap.CompressFormat.JPEG.toString());\n    intent.putExtra(\"noFaceDetection\", true);\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, outputUri);\n    intent.putExtra(\"return-data\", false); // \u8bbe\u7f6e\u4e3a\u4e0d\u8fd4\u56de\u6570\u636e\n    activity.startActivityForResult(intent, requestCode);\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\common\\ActionUtils.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * A single preview frame will be returned to the handler supplied. The data will arrive as byte[]\n * in the message.obj field, with width and height encoded as message.arg1 and message.arg2,\n * respectively.\n *\n * @param handler The handler to send the message to.\n * @param message The what field of the message to be sent.\n */\n", "func_signal": "public void requestPreviewFrame(Handler handler, int message)", "code": "{\n    if (camera != null && previewing) {\n        previewCallback.setHandler(handler, message);\n        if (useOneShotPreviewCallback) {\n            camera.setOneShotPreviewCallback(previewCallback);\n        } else {\n            camera.setPreviewCallback(previewCallback);\n        }\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Tells the camera to stop drawing preview frames.\n */\n", "func_signal": "public void stopPreview()", "code": "{\n    if (camera != null && previewing) {\n        if (!useOneShotPreviewCallback) {\n            camera.setPreviewCallback(null);\n        }\n        camera.stopPreview();\n        previewCallback.setHandler(null, 0);\n        autoFocusCallback.setHandler(null, 0);\n        previewing = false;\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u8fdb\u5165\u7cfb\u7edf\u62cd\u7167 (\u8f93\u51fa\u4e3aBitmap)\n * Tips: \u8fd4\u56de\u7684Bitmap\u5e76\u975e\u539f\u56fe\u7684Bitmap\u800c\u662f\u7ecf\u8fc7\u538b\u7f29\u7684Bitmap\n * @param activity\n */\n", "func_signal": "public static void startActivityForCamera(Activity activity, int requestCode)", "code": "{\n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    intent.addCategory(Intent.CATEGORY_DEFAULT);\n    activity.startActivityForResult(intent, requestCode);\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\common\\ActionUtils.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u6253\u5f00\u76f8\u518c\n */\n", "func_signal": "public void openGallery()", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M\n            && checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)\n            != PackageManager.PERMISSION_GRANTED) {\n        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\n                REQUEST_PERMISSION_PHOTO);\n    } else {\n        ActionUtils.startActivityForGallery(mActivity, ActionUtils.PHOTO_REQUEST_GALLERY);\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\CaptureActivity.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u8fdb\u5165\u7cfb\u7edf\u62cd\u7167\n * @param activity\n * @param outputUri \u7167\u7247\u8f93\u51fa\u8def\u5f84 Environment.getExternalStorageDirectory() + \"/image.jpg\")\n */\n", "func_signal": "public static void startActivityForCamera(Activity activity, int requestCode, Uri outputUri)", "code": "{\n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    intent.addCategory(Intent.CATEGORY_DEFAULT);\n    // \u5236\u5b9a\u56fe\u7247\u4fdd\u5b58\u8def\u5f84\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, outputUri);\n    activity.startActivityForResult(intent, requestCode);\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\common\\ActionUtils.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u8bbe\u7f6e\u95ea\u5149\u706f\u662f\u5426\u6253\u5f00\n * @param open\n */\n", "func_signal": "public void setFlashLightOpen(boolean open)", "code": "{\n    if (flashLightOpen == open) return;\n\n    flashLightOpen = !flashLightOpen;\n    CameraManager.get().setFlashLight(open);\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\CaptureActivity.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Decode the data within the viewfinder rectangle, and time how long it took. For efficiency,\n * reuse the same reader objects from one decode to the next.\n *\n * @param data   The YUV preview frame.\n * @param width  The width of the preview frame.\n * @param height The height of the preview frame.\n */\n", "func_signal": "private void decode(byte[] data, int width, int height)", "code": "{\n    long start = System.currentTimeMillis();\n    Result rawResult = null;\n\n    //modify here\n    byte[] rotatedData = new byte[data.length];\n    for (int y = 0; y < height; y++) {\n        for (int x = 0; x < width; x++)\n            rotatedData[x * height + height - y - 1] = data[x + y * width];\n    }\n    int tmp = width; // Here we are swapping, that's the difference to #11\n    width = height;\n    height = tmp;\n\n    PlanarYUVLuminanceSource source = CameraManager.get().buildLuminanceSource(rotatedData, width, height);\n    BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));\n    try {\n        rawResult = multiFormatReader.decodeWithState(bitmap);\n    } catch (ReaderException re) {\n        // continue\n    } finally {\n        multiFormatReader.reset();\n    }\n\n    if (rawResult != null) {\n        long end = System.currentTimeMillis();\n        Log.d(TAG, \"Found barcode (\" + (end - start) + \" ms):\\n\" + rawResult.toString());\n        Message message = Message.obtain(activity.getHandler(), R.id.decode_succeeded, rawResult);\n        Bundle bundle = new Bundle();\n        bundle.putParcelable(DecodeThread.BARCODE_BITMAP, source.renderCroppedGreyscaleBitmap());\n        message.setData(bundle);\n        //Log.d(TAG, \"Sending decode succeeded message...\");\n        message.sendToTarget();\n    } else {\n        Message message = Message.obtain(activity.getHandler(), R.id.decode_failed);\n        message.sendToTarget();\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\decoding\\DecodeHandler.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u5207\u6362\u6563\u5149\u706f\u72b6\u6001\n */\n", "func_signal": "public void toggleFlashLight()", "code": "{\n    if (flashLightOpen) {\n        setFlashLightOpen(false);\n    } else {\n        setFlashLightOpen(true);\n    }\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\CaptureActivity.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u8fdb\u5165\u7cfb\u7edf\u56fe\u5e93\n * @param activity\n */\n", "func_signal": "public static void startActivityForGallery(Activity activity, int requestCode)", "code": "{\n    // \u5f39\u51fa\u7cfb\u7edf\u56fe\u5e93\n    Intent i = new Intent(Intent.ACTION_PICK,\n            MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n    activity.startActivityForResult(i, requestCode);\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\common\\ActionUtils.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Like {@link #getFramingRect} but coordinates are in terms of the preview frame,\n * not UI / screen.\n *\n * \u83b7\u53d6\u626b\u63cf\u5b9e\u9645\u6709\u6548\u533a\u57df\n */\n", "func_signal": "public Rect getFramingRectInPreview()", "code": "{\n    if (framingRectInPreview == null) {\n        Rect rect = new Rect(getFramingRect(ViewfinderView.RECT_OFFSET_X, ViewfinderView.RECT_OFFSET_Y));\n        Point cameraResolution = configManager.getCameraResolution();\n        Point screenResolution = configManager.getScreenResolution();\n        //modify here\n//      rect.left = rect.left * cameraResolution.x / screenResolution.x;\n//      rect.right = rect.right * cameraResolution.x / screenResolution.x;\n//      rect.top = rect.top * cameraResolution.y / screenResolution.y;\n//      rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;\n        rect.left = rect.left * cameraResolution.y / screenResolution.x;\n        rect.right = rect.right * cameraResolution.y / screenResolution.x;\n        rect.top = rect.top * cameraResolution.x / screenResolution.y;\n        rect.bottom = rect.bottom * cameraResolution.x / screenResolution.y;\n        framingRectInPreview = rect;\n    }\n    return framingRectInPreview;\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Handler scan result\n *\n * @param result\n * @param barcode\n */\n", "func_signal": "public void handleDecode(Result result, Bitmap barcode)", "code": "{\n    inactivityTimer.onActivity();\n    playBeepSoundAndVibrate();\n    String resultString = result.getText();\n    handleResult(resultString);\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\CaptureActivity.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Calculates the framing rect which the UI should draw to show the user where to place the\n * barcode. This target helps with alignment as well as forces the user to hold the device\n * far enough away to ensure the image will be in focus.\n *\n * @return The rectangle to draw on screen in window coordinates.\n *\n * \u83b7\u53d6\u626b\u63cf\u6846\u663e\u793a\u4f4d\u7f6e \u9ed8\u8ba4\u4f4d\u7f6e\u4e3a\u5c4f\u5e55\u4e2d\u95f4\n */\n", "func_signal": "public Rect getFramingRect(int offsetX, int offsetY)", "code": "{\n    Point screenResolution = configManager.getScreenResolution();\n    if (framingRect == null) {\n        // \u9b45\u65cf\u7b49\u673a\u578b\u62d2\u7eddcamera\u6743\u9650\u540escreenResolution\u8fd4\u56denull\n        if (screenResolution == null) {\n            return null;\n        }\n        if (camera == null) {\n            return null;\n        }\n        int width = screenResolution.x * 3 / 4;\n        if (width < MIN_FRAME_WIDTH) {\n            width = MIN_FRAME_WIDTH;\n        } else if (width > MAX_FRAME_WIDTH) {\n            width = MAX_FRAME_WIDTH;\n        }\n        int height = screenResolution.y * 3 / 4;\n        if (height < MIN_FRAME_HEIGHT) {\n            height = MIN_FRAME_HEIGHT;\n        } else if (height > MAX_FRAME_HEIGHT) {\n            height = MAX_FRAME_HEIGHT;\n        }\n        int leftOffset = (screenResolution.x - width) / 2;\n        int topOffset = (screenResolution.y - height) / 2;\n        framingRect = new Rect(leftOffset + offsetX,\n                topOffset + offsetY,\n                leftOffset + width + offsetX,\n                topOffset + height + offsetY);\n        Log.d(TAG, \"Calculated framing rect: \" + framingRect);\n    }\n    return framingRect;\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u68c0\u67e5\u662f\u5426\u83b7\u5f97\u6444\u50cf\u5934\u6743\u9650\n * @return\n */\n", "func_signal": "public int checkCameraPermission()", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        return context.checkSelfPermission(Manifest.permission.CAMERA);\n    } else {\n        if (camera == null) {\n            return PackageManager.PERMISSION_DENIED;\n        }\n    }\n    return PackageManager.PERMISSION_GRANTED;\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\zxing\\camera\\CameraManager.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Called when the activity is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n    mActivity = this;\n    hasSurface = false;\n    inactivityTimer = new InactivityTimer(this);\n    CameraManager.init(getApplication());\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        if (checkSelfPermission(Manifest.permission.CAMERA)\n                != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(new String[]{Manifest.permission.CAMERA},\n                    REQUEST_PERMISSION_CAMERA);\n        }\n    }\n\n    initView();\n}", "path": "qrcodelib\\src\\main\\java\\io\\github\\xudaojie\\qrcodelib\\CaptureActivity.java", "repo_name": "XuDaojie/QRCode-Android", "stars": 366, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Set the pattern explicitly (rather than waiting for the user to input a pattern).\n *\n * @param displayMode How to display the pattern.\n * @param pattern     The pattern.\n */\n", "func_signal": "public void setPattern(DisplayMode displayMode, List<Cell> pattern)", "code": "{\n    mPattern.clear();\n    mPattern.addAll(pattern);\n    clearPatternDrawLookup();\n    for (Cell cell : pattern) {\n        mPatternDrawLookup[cell.row][cell.column] = true;\n    }\n\n    setDisplayMode(displayMode);\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Creates new instance.\n *\n * @param start    start value.\n * @param end      end value.\n * @param duration duration, in milliseconds. This should not be long, as delay value between animation frame is\n *                 just 1 millisecond.\n */\n", "func_signal": "public FloatAnimator(float start, float end, long duration)", "code": "{\n    mStartValue = start;\n    mEndValue = end;\n    mDuration = duration;\n\n    mAnimatedValue = mStartValue;\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Starts animating.\n */\n", "func_signal": "public void start()", "code": "{\n    if (mHandler != null)\n        return;\n\n    notifyAnimationStart();\n\n    mStartTime = System.currentTimeMillis();\n\n    mHandler = new Handler();\n    mHandler.post(new Runnable() {\n\n        @Override\n        public void run() {\n            final Handler handler = mHandler;\n            if (handler == null) return;\n\n            final long elapsedTime = System.currentTimeMillis() - mStartTime;\n            if (elapsedTime > mDuration) {\n                mHandler = null;\n                notifyAnimationEnd();\n            } else {\n                float fraction = mDuration > 0 ? (float) (elapsedTime) / mDuration : 1f;\n                float delta = mEndValue - mStartValue;\n                mAnimatedValue = mStartValue + delta * fraction;\n\n                notifyAnimationUpdate();\n                handler.postDelayed(this, ANIMATION_DELAY);\n            }\n        }// run()\n\n    });\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "// onAnimationUpdate()\n", "func_signal": "@Override\n                public void onAnimationEnd(FloatAnimator animator)", "code": "{\n                    if (endRunnable != null)\n                        endRunnable.run();\n                }", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Notifies all listeners that animation ends.\n */\n", "func_signal": "protected void notifyAnimationEnd()", "code": "{\n    final List<EventListener> listeners = mEventListeners;\n    if (listeners != null) {\n        for (EventListener listener : listeners)\n            listener.onAnimationEnd(this);\n    }// if\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Reset all pattern state.\n */\n", "func_signal": "private void resetPattern()", "code": "{\n    mPattern.clear();\n    clearPatternDrawLookup();\n    mPatternDisplayMode = DisplayMode.Correct;\n    invalidate();\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * @param row    number or row\n * @param column number of column\n */\n", "func_signal": "private Cell(int row, int column)", "code": "{\n    checkRange(row, column);\n    this.row = row;\n    this.column = column;\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * @param row    The row of the cell.\n * @param column The column of the cell.\n */\n", "func_signal": "public static synchronized Cell of(int row, int column)", "code": "{\n    checkRange(row, column);\n    return sCells[row][column];\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Notifies all listeners that animation updates.\n */\n", "func_signal": "protected void notifyAnimationUpdate()", "code": "{\n    final List<EventListener> listeners = mEventListeners;\n    if (listeners != null) {\n        for (EventListener listener : listeners)\n            listener.onAnimationUpdate(this);\n    }// if\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Constructor called from {@link MaterialLockView#onSaveInstanceState()}\n */\n", "func_signal": "private SavedState(Parcelable superState, String serializedPattern,\n                   int displayMode, boolean inputEnabled, boolean inStealthMode,\n                   boolean tactileFeedbackEnabled)", "code": "{\n    super(superState);\n    mSerializedPattern = serializedPattern;\n    mDisplayMode = displayMode;\n    mInputEnabled = inputEnabled;\n    mInStealthMode = inStealthMode;\n    mTactileFeedbackEnabled = tactileFeedbackEnabled;\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Set the display mode of the current pattern. This can be useful, for instance, after detecting a pattern to tell\n * this view whether change the in progress result to correct or wrong.\n *\n * @param displayMode The display mode.\n */\n", "func_signal": "public void setDisplayMode(DisplayMode displayMode)", "code": "{\n    mPatternDisplayMode = displayMode;\n    if (displayMode == DisplayMode.Animate) {\n        if (mPattern.size() == 0) {\n            throw new IllegalStateException(\n                    \"you must have a pattern to \"\n                            + \"animate if you want to set the display mode to animate\");\n        }\n        mAnimatingPeriodStart = SystemClock.elapsedRealtime();\n        final Cell first = mPattern.get(0);\n        mInProgressX = getCenterXForColumn(first.column);\n        mInProgressY = getCenterYForRow(first.row);\n        clearPatternDrawLookup();\n    }\n    invalidate();\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Helper method to find the row that y falls into.\n *\n * @param y The y coordinate\n * @return The row that y falls in, or -1 if it falls in no row.\n */\n", "func_signal": "private int getRowHit(float y)", "code": "{\n\n    final float squareHeight = mSquareHeight;\n    float hitSize = squareHeight * mHitFactor;\n\n    float offset = getPaddingTop() + (squareHeight - hitSize) / 2f;\n    for (int i = 0; i < LOCK_SIZE; i++) {\n\n        final float hitTop = offset + squareHeight * i;\n        if (y >= hitTop && y <= hitTop + hitSize) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "// helper method to find which cell a point maps to\n", "func_signal": "private Cell checkForNewHit(float x, float y)", "code": "{\n\n    final int rowHit = getRowHit(y);\n    if (rowHit < 0) {\n        return null;\n    }\n    final int columnHit = getColumnHit(x);\n    if (columnHit < 0) {\n        return null;\n    }\n\n    if (mPatternDrawLookup[rowHit][columnHit]) {\n        return null;\n    }\n    return Cell.of(rowHit, columnHit);\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Clear the pattern lookup table.\n */\n", "func_signal": "private void clearPatternDrawLookup()", "code": "{\n    for (int i = 0; i < LOCK_SIZE; i++) {\n        for (int j = 0; j < LOCK_SIZE; j++) {\n            mPatternDrawLookup[i][j] = false;\n        }\n    }\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Cancels animating.\n */\n", "func_signal": "public void cancel()", "code": "{\n    if (mHandler == null) return;\n\n    mHandler.removeCallbacksAndMessages(null);\n    mHandler = null;\n\n    notifyAnimationCancel();\n    notifyAnimationEnd();\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Notifies all listeners that animation starts.\n */\n", "func_signal": "protected void notifyAnimationStart()", "code": "{\n    final List<EventListener> listeners = mEventListeners;\n    if (listeners != null) {\n        for (EventListener listener : listeners)\n            listener.onAnimationStart(this);\n    }// if\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Determines whether the point x, y will add a new point to the current pattern (in addition to finding the cell,\n * also makes heuristic choices such as filling in gaps based on current pattern).\n *\n * @param x The x coordinate.\n * @param y The y coordinate.\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.ECLAIR)\nprivate Cell detectAndAddHit(float x, float y)", "code": "{\n    final Cell cell = checkForNewHit(x, y);\n    if (cell != null) {\n\n        // check for gaps in existing pattern\n        Cell fillInGapCell = null;\n        final ArrayList<Cell> pattern = mPattern;\n        if (!pattern.isEmpty()) {\n            final Cell lastCell = pattern.get(pattern.size() - 1);\n            int dRow = cell.row - lastCell.row;\n            int dColumn = cell.column - lastCell.column;\n\n            int fillInRow = lastCell.row;\n            int fillInColumn = lastCell.column;\n\n            if (Math.abs(dRow) == 2 && Math.abs(dColumn) != 1) {\n                fillInRow = lastCell.row + ((dRow > 0) ? 1 : -1);\n            }\n\n            if (Math.abs(dColumn) == 2 && Math.abs(dRow) != 1) {\n                fillInColumn = lastCell.column + ((dColumn > 0) ? 1 : -1);\n            }\n\n            fillInGapCell = Cell.of(fillInRow, fillInColumn);\n        }\n\n        if (fillInGapCell != null\n                && !mPatternDrawLookup[fillInGapCell.row][fillInGapCell.column]) {\n            addCellToPattern(fillInGapCell);\n        }\n        addCellToPattern(cell);\n        if (mEnableHapticFeedback) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ECLAIR)\n                performHapticFeedback(\n                        HapticFeedbackConstants.VIRTUAL_KEY,\n                        HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING\n                                | HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);\n        }\n        return cell;\n    }\n    return null;\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Adds event listener.\n *\n * @param listener the listener.\n */\n", "func_signal": "public void addEventListener(@Nullable EventListener listener)", "code": "{\n    if (listener == null) return;\n\n    mEventListeners.add(listener);\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Helper method to find the column x fallis into.\n *\n * @param x The x coordinate.\n * @return The column that x falls in, or -1 if it falls in no column.\n */\n", "func_signal": "private int getColumnHit(float x)", "code": "{\n    final float squareWidth = mSquareWidth;\n    float hitSize = squareWidth * mHitFactor;\n\n    float offset = getPaddingLeft() + (squareWidth - hitSize) / 2f;\n    for (int i = 0; i < LOCK_SIZE; i++) {\n\n        final float hitLeft = offset + squareWidth * i;\n        if (x >= hitLeft && x <= hitLeft + hitSize) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Constructor called from {@link #CREATOR}\n */\n", "func_signal": "private SavedState(Parcel in)", "code": "{\n    super(in);\n    mSerializedPattern = in.readString();\n    mDisplayMode = in.readInt();\n    mInputEnabled = (Boolean) in.readValue(null);\n    mInStealthMode = (Boolean) in.readValue(null);\n    mTactileFeedbackEnabled = (Boolean) in.readValue(null);\n}", "path": "materiallockview\\src\\main\\java\\com\\amnix\\materiallockview\\MaterialLockView.java", "repo_name": "AmniX/MaterialPatternllockView", "stars": 259, "license": "apache-2.0", "language": "java", "size": 261}
{"docstring": "/**\n * Gets an named grid instance. If grid name is {@code null} or empty string,\n * then default no-name grid will be returned. Note that caller of this method\n * should not assume that it will return the same instance every time.\n * <p>\n * Note that Java VM can run multiple grid instances and every grid instance (and its\n * node) can belong to a different grid. Grid name defines what grid a particular grid\n * instance (and correspondingly its node) belongs to.\n *\n * @param name Grid name to which requested grid instance belongs to. If {@code null},\n *      then grid instance belonging to a default no-name grid will be returned.\n * @return An instance of named grid. This method never returns\n *      {@code null}.\n * @throws GridIllegalStateException Thrown if default grid was not properly\n *      initialized or grid instance was stopped or was not started.\n */\n", "func_signal": "public static Grid grid(@Nullable String name) throws GridIllegalStateException", "code": "{\n    GridNamedInstance grid = name != null ? grids.get(name) : dfltGrid;\n\n    Grid res;\n\n    if (grid == null || (res = grid.grid()) == null)\n        throw new GridIllegalStateException(\"Grid instance was not properly started \" +\n            \"or was already stopped: \" + name);\n\n    return res;\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Start Grid for interop scenario.\n *\n * @param springCfgPath Spring config path.\n * @param gridName Grid name.\n * @param cfgClo Configuration closure.\n * @return Started Grid.\n * @throws GridException If failed.\n */\n", "func_signal": "public static Grid startInterop(@Nullable String springCfgPath, @Nullable String gridName,\n    GridClosure<GridConfiguration, GridConfiguration> cfgClo)\n    throws GridException", "code": "{\n    URL url = resolveSpringUrl(springCfgPath);\n\n    return start(url, gridName, null, cfgClo);\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * @param out Object output.\n * @throws IOException If failed.\n */\n", "func_signal": "@SuppressWarnings(\"TypeMayBeWeakened\")\nprivate void writeFieldsCollection(ObjectOutput out) throws IOException", "code": "{\n    assert fields;\n\n    out.writeInt(data != null ? data.size() : -1);\n\n    if (data == null)\n        return;\n\n    for (Object o : data) {\n        List<GridIndexingEntity<?>> list = (List<GridIndexingEntity<?>>)o;\n\n        out.writeInt(list.size());\n\n        for (GridIndexingEntity<?> idxEnt : list) {\n            try {\n                out.writeObject(idxEnt.value());\n            }\n            catch (GridSpiException e) {\n                throw new IOException(\"Failed to write indexing entity: \" + idxEnt, e);\n            }\n        }\n    }\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\cache\\query\\GridCacheQueryResponse.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * @param in Object input.\n * @return Read collection.\n * @throws IOException If failed.\n * @throws ClassNotFoundException If failed.\n */\n", "func_signal": "private Collection<Object> readFieldsCollection(ObjectInput in) throws IOException, ClassNotFoundException", "code": "{\n    assert fields;\n\n    int size = in.readInt();\n\n    if (size == -1)\n        return null;\n\n    Collection<Object> res = new ArrayList<>(size);\n\n    for (int i = 0; i < size; i++) {\n        int size0 = in.readInt();\n\n        Collection<Object> col = new ArrayList<>(size0);\n\n        for (int j = 0; j < size0; j++)\n            col.add(in.readObject());\n\n        assert col.size() == size0;\n\n        res.add(col);\n    }\n\n    assert res.size() == size;\n\n    return res;\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\cache\\query\\GridCacheQueryResponse.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@SuppressWarnings(\"all\")\n@Override public boolean writeTo(ByteBuffer buf)", "code": "{\n    commState.setBuffer(buf);\n\n    if (!super.writeTo(buf))\n        return false;\n\n    if (!commState.typeWritten) {\n        if (!commState.putByte(directType()))\n            return false;\n\n        commState.typeWritten = true;\n    }\n\n    switch (commState.idx) {\n        case 2:\n            if (dataBytes != null) {\n                if (commState.it == null) {\n                    if (!commState.putInt(dataBytes.size()))\n                        return false;\n\n                    commState.it = dataBytes.iterator();\n                }\n\n                while (commState.it.hasNext() || commState.cur != NULL) {\n                    if (commState.cur == NULL)\n                        commState.cur = commState.it.next();\n\n                    if (!commState.putByteArray((byte[])commState.cur))\n                        return false;\n\n                    commState.cur = NULL;\n                }\n\n                commState.it = null;\n            } else {\n                if (!commState.putInt(-1))\n                    return false;\n            }\n\n            commState.idx++;\n\n        case 3:\n            if (!commState.putByteArray(errBytes))\n                return false;\n\n            commState.idx++;\n\n        case 4:\n            if (!commState.putBoolean(fields))\n                return false;\n\n            commState.idx++;\n\n        case 5:\n            if (!commState.putBoolean(finished))\n                return false;\n\n            commState.idx++;\n\n        case 6:\n            if (metaDataBytes != null) {\n                if (commState.it == null) {\n                    if (!commState.putInt(metaDataBytes.size()))\n                        return false;\n\n                    commState.it = metaDataBytes.iterator();\n                }\n\n                while (commState.it.hasNext() || commState.cur != NULL) {\n                    if (commState.cur == NULL)\n                        commState.cur = commState.it.next();\n\n                    if (!commState.putByteArray((byte[])commState.cur))\n                        return false;\n\n                    commState.cur = NULL;\n                }\n\n                commState.it = null;\n            } else {\n                if (!commState.putInt(-1))\n                    return false;\n            }\n\n            commState.idx++;\n\n        case 7:\n            if (!commState.putLong(reqId))\n                return false;\n\n            commState.idx++;\n\n    }\n\n    return true;\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\cache\\query\\GridCacheQueryResponse.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Registers delegate Mbean instance for {@link GridGain}.\n *\n * @param srv MBeanServer where mbean should be registered.\n * @throws GridException If registration failed.\n */\n", "func_signal": "private void registerFactoryMbean(MBeanServer srv) throws GridException", "code": "{\n    synchronized (mbeans) {\n        GridMBeanServerData data = mbeans.get(srv);\n\n        if (data == null) {\n            try {\n                GridGainMBean mbean = new GridGainMBeanAdapter();\n\n                ObjectName objName = U.makeMBeanName(\n                    null,\n                    \"Kernal\",\n                    GridGain.class.getSimpleName()\n                );\n\n                // Make check if MBean was already registered.\n                if (!srv.queryMBeans(objName, null).isEmpty())\n                    throw new GridException(\"MBean was already registered: \" + objName);\n                else {\n                    objName = U.registerMBean(\n                        srv,\n                        null,\n                        \"Kernal\",\n                        GridGain.class.getSimpleName(),\n                        mbean,\n                        GridGainMBean.class\n                    );\n\n                    data = new GridMBeanServerData(objName);\n\n                    mbeans.put(srv, data);\n\n                    if (log.isDebugEnabled())\n                        log.debug(\"Registered MBean: \" + objName);\n                }\n            }\n            catch (JMException e) {\n                throw new GridException(\"Failed to register MBean.\", e);\n            }\n        }\n\n        assert data != null;\n\n        data.addGrid(name);\n        data.setCounter(data.getCounter() + 1);\n    }\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Loads first found grid configuration specified within given Spring XML configuration file.\n * <p>\n * Usually Spring XML configuration file will contain only one Grid definition. Note that\n * Grid configuration bean(s) is retrieved form configuration file by type, so the name of\n * the Grid configuration bean is ignored.\n *\n * @param springCfgUrl Spring XML configuration file path or URL. This cannot be {@code null}.\n * @return First found configuration and Spring context used to load it.\n * @throws GridException If grid could not be started or configuration\n *      read. This exception will be thrown also if grid with given name has already\n *      been started or Spring XML configuration file is invalid.\n */\n", "func_signal": "public static GridBiTuple<GridConfiguration, GridSpringResourceContext> loadConfiguration(URL springCfgUrl)\n    throws GridException", "code": "{\n    GridBiTuple<Collection<GridConfiguration>, ? extends GridSpringResourceContext> t = loadConfigurations(springCfgUrl);\n\n    return F.t(F.first(t.get1()), t.get2());\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Gets states of named grid. If name is {@code null}, then state of\n * default no-name grid is returned.\n *\n * @param name Grid name. If name is {@code null}, then state of\n *      default no-name grid is returned.\n * @return Grid state.\n */\n", "func_signal": "public static GridGainState state(@Nullable String name)", "code": "{\n    GridNamedInstance grid = name != null ? grids.get(name) : dfltGrid;\n\n    if (grid == null) {\n        GridGainState state = name != null ? gridStates.get(name) : dfltGridState;\n\n        return state != null ? state : STOPPED;\n    }\n\n    return grid.state();\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override public boolean equals(Object o)", "code": "{\n    if (this == o)\n        return true;\n    if (o == null || getClass() != o.getClass())\n        return false;\n\n    GridHadoopCounterAdapter cntr = (GridHadoopCounterAdapter)o;\n\n    if (!grp.equals(cntr.grp))\n        return false;\n    if (!name.equals(cntr.name))\n        return false;\n\n    return true;\n}", "path": "modules\\hadoop\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\hadoop\\counter\\GridHadoopCounterAdapter.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Removes lsnr added by {@link #addListener(GridGainListener)} method.\n *\n * @param lsnr Listener to remove.\n * @return {@code true} if lsnr was added before, {@code false} otherwise.\n */\n", "func_signal": "public static boolean removeListener(GridGainListener lsnr)", "code": "{\n    A.notNull(lsnr, \"lsnr\");\n\n    return lsnrs.remove(lsnr);\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Creates utility system cache configuration.\n *\n * @return Utility system cache configuration.\n */\n", "func_signal": "private GridCacheConfiguration utilitySystemCache()", "code": "{\n    GridCacheConfiguration cache = new GridCacheConfiguration();\n\n    cache.setName(CU.UTILITY_CACHE_NAME);\n    cache.setCacheMode(REPLICATED);\n    cache.setAtomicityMode(TRANSACTIONAL);\n    cache.setSwapEnabled(false);\n    cache.setQueryIndexEnabled(false);\n    cache.setPreloadMode(SYNC);\n    cache.setWriteSynchronizationMode(FULL_SYNC);\n    cache.setAffinity(new GridCacheRendezvousAffinityFunction(false, 100));\n\n    return cache;\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override public void finishUnmarshal(GridCacheContext<K, V> ctx, ClassLoader ldr) throws GridException", "code": "{\n    super.finishUnmarshal(ctx, ldr);\n\n    if (errBytes != null)\n        err = ctx.marshaller().unmarshal(errBytes, ldr);\n\n    metadata = unmarshalCollection(metaDataBytes, ctx, ldr);\n    data = fields ? unmarshalFieldsCollection(dataBytes, ctx, ldr) : unmarshalCollection(dataBytes, ctx, ldr);\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\cache\\query\\GridCacheQueryResponse.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Starts all grids specified within given Spring XML configuration file. If grid with given name\n * is already started, then exception is thrown. In this case all instances that may\n * have been started so far will be stopped too.\n * <p>\n * Usually Spring XML configuration file will contain only one Grid definition. Note that\n * Grid configuration bean(s) is retrieved form configuration file by type, so the name of\n * the Grid configuration bean is ignored.\n *\n * @param springCfgPath Spring XML configuration file path or URL. This cannot be {@code null}.\n * @param gridName Grid name that will override default.\n * @param springCtx Optional Spring application context, possibly {@code null}.\n *      Spring bean definitions for bean injection are taken from this context.\n *      If provided, this context can be injected into grid tasks and grid jobs using\n *      {@link GridSpringApplicationContextResource @GridSpringApplicationContextResource} annotation.\n * @return Started grid. If Spring configuration contains multiple grid instances,\n *      then the 1st found instance is returned.\n * @throws GridException If grid could not be started or configuration\n *      read. This exception will be thrown also if grid with given name has already\n *      been started or Spring XML configuration file is invalid.\n */\n", "func_signal": "public static Grid start(String springCfgPath, @Nullable String gridName,\n    @Nullable GridSpringResourceContext springCtx) throws GridException", "code": "{\n    URL url = resolveSpringUrl(springCfgPath);\n\n    return start(url, gridName, springCtx);\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Gets grid instance without waiting its initialization.\n *\n * @param name Grid name.\n * @return Grid instance.\n */\n", "func_signal": "public static GridKernal gridx(@Nullable String name)", "code": "{\n    GridNamedInstance grid = name != null ? grids.get(name) : dfltGrid;\n\n    GridKernal res;\n\n    if (grid == null || (res = grid.gridx()) == null)\n        throw new IllegalStateException(\"Grid instance was not properly started or was already stopped: \" + name);\n\n    return res;\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException", "code": "{\n    grp = in.readUTF();\n    name = in.readUTF();\n    readValue(in);\n}", "path": "modules\\hadoop\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\hadoop\\counter\\GridHadoopCounterAdapter.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Stops executor services if they has been started.\n *\n * @param log Grid logger.\n */\n", "func_signal": "private void stopExecutors0(GridLogger log)", "code": "{\n    assert log != null;\n\n    /*\n     * If it was us who started the executor services than we\n     * stop it. Otherwise, we do no-op since executor service\n     * was started before us.\n     */\n    if (isAutoExecSvc || execSvcShutdown) {\n        U.shutdownNow(getClass(), execSvc, log);\n\n        execSvc = null;\n    }\n\n    if (isAutoSysSvc || sysSvcShutdown) {\n        U.shutdownNow(getClass(), sysExecSvc, log);\n\n        sysExecSvc = null;\n    }\n\n    if (isAutoMgmtSvc || mgmtSvcShutdown) {\n        U.shutdownNow(getClass(), mgmtExecSvc, log);\n\n        mgmtExecSvc = null;\n    }\n\n    if (isAutoP2PSvc || p2pSvcShutdown) {\n        U.shutdownNow(getClass(), p2pExecSvc, log);\n\n        p2pExecSvc = null;\n    }\n\n    if (isAutoGgfsSvc || ggfsSvcShutdown) {\n        U.shutdownNow(getClass(), ggfsExecSvc, log);\n\n        ggfsExecSvc = null;\n    }\n\n    if (isAutoRestSvc || restSvcShutdown) {\n        U.shutdownNow(getClass(), restExecSvc, log);\n\n        restExecSvc = null;\n    }\n\n    if (isAutoUtilityCacheSvc || utilityCacheSvcShutdown) {\n        U.shutdownNow(getClass(), utilityCacheExecSvc, log);\n\n        utilityCacheExecSvc = null;\n    }\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@SuppressWarnings(\"TypeMayBeWeakened\")\n@Nullable private Collection<Object> unmarshalFieldsCollection(@Nullable Collection<byte[]> byteCol,\n    GridCacheContext<K, V> ctx, ClassLoader ldr) throws GridException", "code": "{\n    assert ctx != null;\n    assert ldr != null;\n\n    Collection<Object> col = unmarshalCollection(byteCol, ctx, ldr);\n    Collection<Object> col0 = null;\n\n    if (col != null) {\n        col0 = new ArrayList<>(col.size());\n\n        for (Object o : col) {\n            List<Object> list = (List<Object>)o;\n            List<Object> list0 = new ArrayList<>(list.size());\n\n            for (Object obj : list)\n                list0.add(obj != null ? ctx.marshaller().unmarshal((byte[])obj, ldr) : null);\n\n            col0.add(list0);\n        }\n    }\n\n    return col0;\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\cache\\query\\GridCacheQueryResponse.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * @param spis SPI implementations.\n * @throws GridException Thrown in case if multi-instance is not supported.\n */\n", "func_signal": "private void ensureMultiInstanceSupport(GridSpi[] spis) throws GridException", "code": "{\n    for (GridSpi spi : spis)\n        ensureMultiInstanceSupport(spi);\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Adds a lsnr for grid life cycle events.\n * <p>\n * Note that unlike other listeners in GridGain this listener will be\n * notified from the same thread that triggers the state change. Because of\n * that it is the responsibility of the user to make sure that listener logic\n * is light-weight and properly handles (catches) any runtime exceptions, if any\n * are expected.\n *\n * @param lsnr Listener for grid life cycle events. If this listener was already added\n *      this method is no-op.\n */\n", "func_signal": "public static void addListener(GridGainListener lsnr)", "code": "{\n    A.notNull(lsnr, \"lsnr\");\n\n    lsnrs.add(lsnr);\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\GridGainEx.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override public void prepareMarshal(GridCacheContext<K, V> ctx) throws GridException", "code": "{\n    super.prepareMarshal(ctx);\n\n    if (err != null)\n        errBytes = ctx.marshaller().marshal(err);\n\n    metaDataBytes = marshalCollection(metadata, ctx);\n    dataBytes = fields ? marshalFieldsCollection(data, ctx) : marshalCollection(data, ctx);\n\n    if (ctx.deploymentEnabled() && !F.isEmpty(data)) {\n        for (Object o : data) {\n            if (o instanceof Map.Entry) {\n                Map.Entry e = (Map.Entry)o;\n\n                prepareObject(e.getKey(), ctx);\n                prepareObject(e.getValue(), ctx);\n            }\n        }\n    }\n}", "path": "modules\\core\\src\\main\\java\\org\\gridgain\\grid\\kernal\\processors\\cache\\query\\GridCacheQueryResponse.java", "repo_name": "gridgain/gridgain-old", "stars": 272, "license": "None", "language": "java", "size": 110387}
{"docstring": "/**\n * Return fragment with respect to Position .\n */\n", "func_signal": "@Override\npublic Fragment getItem(int position)", "code": "{\n    switch (position){\n        case 0 : return new BaseSettings().setPreferenceId(R.xml.data_prefs);\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Tabs\\DataTabFragment.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Transform a bitmap.\n *\n * @param bitmap The bitmap to be transformed\n * @param matrix The matrix containing the transformation to be applied\n * @return The transformed bitmap\n */\n", "func_signal": "public static Bitmap transformBitmap(Bitmap bitmap, Matrix matrix)", "code": "{\n    try {\n        Bitmap transformed = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);\n        bitmap.recycle();\n        return transformed;\n    } catch (OutOfMemoryError e) {\n        XposedUtils.log(\"Out of memory, original bitmap returned\", e);\n        return bitmap;\n    }\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Return fragment with respect to Position .\n */\n", "func_signal": "@Override\npublic Fragment getItem(int position)", "code": "{\n    if (Preferences.getLicenceUsingID(MainActivity.getDeviceId()) == 2) {\n        switch (position){\n            case 0 : return new BaseSettings().setPreferenceId(R.xml.premium_prefs);\n            case 1 : return new BaseSettings().setPreferenceId(R.xml.deluxe_prefs);\n        }\n    } else {\n        switch (position){\n            case 0 : return new BaseSettings().setPreferenceId(R.xml.premium_prefs);\n            case 1 : return new BaseSettings().setPreferenceId(R.xml.na_prefs);\n        }\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Tabs\\DeluxeTabFragment.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Write a throwable to the Xposed Log, even when debugging is disabled.\n *\n * @param throwable The throwable to log\n */\n", "func_signal": "public static void log(Throwable throwable)", "code": "{\n    try {\n        XposedBridge.log(throwable);\n    } catch (Throwable t) {\n        Log.e(\"SNAPPREFS\", \"Throwable: \" + throwable.getMessage());\n        throwable.printStackTrace();\n    }\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Logger.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * This method returns the title of the tab according to the position.\n */\n", "func_signal": "@Override\npublic CharSequence getPageTitle(int position)", "code": "{\n\n    switch (position){\n        case 0 :\n            return \"Data saving\";\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Tabs\\DataTabFragment.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Creates a bitmap with the resolution of the device and the given bitmap centered. The bitmap is not resized.\n *\n * @param bitmap The bitmap to be used as source\n * @return The adjusted bitmap\n */\n", "func_signal": "public Bitmap adjustmentMethodNone(Bitmap bitmap)", "code": "{\n    float scale = 1;\n    float xTrans = (targetWidth / 2) - (bitmap.getWidth() / 2);\n    float yTrans = (targetHeight / 2) - (bitmap.getHeight() / 2);\n    return adjustmentMethodScale(bitmap, scale, xTrans, yTrans);\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Creates a bitmap with the resolution of the device and puts the given bitmap using the scale, x- and y-transitions.\n *\n * @param bitmap The bitmap to be used as source\n * @param scale  The scale the image has to be enlarged or reduced\n * @param xTrans The x-transition\n * @param yTrans The y-transition\n * @return The adjusted bitmap\n */\n", "func_signal": "public Bitmap adjustmentMethodScale(Bitmap bitmap, float scale, float xTrans, float yTrans)", "code": "{\n    // we are going to scale the image down and place a black background behind it\n    Bitmap background = Bitmap.createBitmap(targetWidth, targetHeight, Bitmap.Config.ARGB_8888);\n    background.eraseColor(Color.BLACK);\n    Canvas canvas = new Canvas(background);\n\n    Matrix transform = new Matrix();\n    transform.preScale(scale, scale);\n    transform.postTranslate(xTrans, yTrans);\n    Paint paint = new Paint();\n    paint.setFilterBitmap(true);\n    canvas.drawBitmap(bitmap, transform, paint);\n    bitmap.recycle();\n    return background;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Write a throwable with a message to the Xposed Log, even when debugging is disabled.\n *\n * @param message   The message to log\n * @param throwable The throwable to log after the message\n */\n", "func_signal": "public static void log(String message, Throwable throwable)", "code": "{\n    log(message, true, true);\n    log(throwable);\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Logger.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Creates a bitmap with the resolution of the device and the given bitmap scaled. The bitmap is not cropped.\n *\n * @param bitmap The bitmap to be used as source\n * @return The adjusted bitmap\n */\n", "func_signal": "public Bitmap adjustmentMethodScale(Bitmap bitmap)", "code": "{\n    float scale = targetWidth / (float) bitmap.getWidth();\n    float xTrans = 0;\n    float yTrans = (targetHeight / 2) - ((scale * bitmap.getHeight()) / 2);\n    return adjustmentMethodScale(bitmap, scale, xTrans, yTrans);\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * This method returns the title of the tab according to the position.\n */\n", "func_signal": "@Override\npublic CharSequence getPageTitle(int position)", "code": "{\n\n    switch (position){\n        case 0 :\n            return \"Text\";\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Tabs\\TextTabFragment.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Return fragment with respect to Position .\n */\n", "func_signal": "@Override\npublic Fragment getItem(int position)", "code": "{\n    switch (position){\n        case 0 : return new BaseSettings().setPreferenceId(R.xml.text_prefs);\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Tabs\\TextTabFragment.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * This method returns the title of the tab according to the position.\n */\n", "func_signal": "@Override\npublic CharSequence getPageTitle(int position)", "code": "{\n\n    switch (position){\n        case 0 :\n            return \"Premium\";\n        case 1 :\n            return \"Deluxe\";\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Tabs\\DeluxeTabFragment.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Prints a title in a line width of at least {@link #printWidth} with areas before and after filled with '#'s\n *\n * @param message The message to print in the title\n */\n", "func_signal": "public static void printTitle(String message, LogType logType)", "code": "{\n    logType.removeTag();\n    log(\"\", logType);\n    printFilledRow(logType);\n    printMessage(message, logType);\n    printFilledRow(logType);\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Logger.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Rotate a bitmap\n *\n * @param bitmap  The bitmap to be rotated\n * @param degrees The number of the degrees the bitmap should be rotated\n * @return The rotated bitmap\n */\n", "func_signal": "public static Bitmap rotateBitmap(Bitmap bitmap, int degrees)", "code": "{\n    Matrix matrix = new Matrix();\n    matrix.setRotate(degrees);\n    return transformBitmap(bitmap, matrix);\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Reads the orientation flag from the Exif-data and rotates and translates the bitmap according to this.\n *\n * @param bitmap The bitmap to be rotated\n * @param path   The path to the image\n * @return The transformed bitmap\n * @throws IOException File not found\n */\n", "func_signal": "public static Bitmap rotateUsingExif(Bitmap bitmap, String path) throws IOException", "code": "{\n    Matrix matrix = new Matrix();\n    ExifInterface exifInterface = new ExifInterface(path);\n    int orientation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);\n    XposedUtils.log(\"Exif rotation tag: \" + orientation);\n\n    // See http://sylvana.net/jpegcrop/exif_orientation.html for more information about the values of the Exif Orientation Tag\n    switch (orientation) {\n        case ExifInterface.ORIENTATION_FLIP_HORIZONTAL:\n            matrix.setScale(-1, 1);\n            break;\n        case ExifInterface.ORIENTATION_ROTATE_180:\n            matrix.setRotate(180);\n            break;\n        case ExifInterface.ORIENTATION_FLIP_VERTICAL:\n            matrix.setRotate(180);\n            matrix.postScale(-1, 1);\n            break;\n        case ExifInterface.ORIENTATION_TRANSPOSE:\n            matrix.setRotate(90);\n            matrix.postScale(-1, 1);\n            break;\n        case ExifInterface.ORIENTATION_ROTATE_90:\n            matrix.setRotate(90);\n            break;\n        case ExifInterface.ORIENTATION_TRANSVERSE:\n            matrix.setRotate(-90);\n            matrix.postScale(-1, 1);\n            break;\n        case ExifInterface.ORIENTATION_ROTATE_270:\n            matrix.setRotate(-90);\n            break;\n        default:\n            return bitmap;\n    }\n\n    return transformBitmap(bitmap, matrix);\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "//Right after the text is changed\n", "func_signal": "@Override\npublic void afterTextChanged(Editable s)", "code": "{\n    //Store the text on a String\n    String text = s.toString();\n\n    //Get the length of the String\n    int length = s.length();\n\n    //*If the String length is bigger than zero and it's not composed only by the following characters: A to F and/or 0 to 9 *//*\n    if (!text.matches(\"[a-fA-F0-9]+\") && length > 0) {\n        //Delete the last character\n        s.delete(length - 1, length);\n    }\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\PaintTools.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Write debug information to the Xposed Log if enabled or forced by the parameter.\n *\n * @param message The message you want to log\n * @param prefix  Whether it should be prefixed by the log-tag\n * @param forced  Whether to force log and thus overrides the debug setting\n */\n", "func_signal": "public static void log(String message, boolean prefix, boolean forced)", "code": "{\n    try {\n        if (!Preferences.getBool(Preferences.Prefs.DEBUGGING) && !forced)\n            return;\n\n    } catch (Throwable t) {\n        Log.d(\"SNAPPREFS\", \"Tried to log before fully loaded: [\" + message + \"]\");\n        return;\n    }\n\n    if (prefix) {\n        message = LOG_TAG + message;\n    }\n\n    try {\n        XposedBridge.log(message);\n    } catch (Throwable e) {\n        Log.d(\"snapprefs\", message);\n    }\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Logger.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Crop the bitmap to the right aspect ratio using the device resolution.\n *\n * @param bitmap The bitmap to be cropped\n * @return The cropped bitmap\n */\n", "func_signal": "public Bitmap adjustmentMethodCrop(Bitmap bitmap)", "code": "{\n    int width = bitmap.getWidth();\n    int height = bitmap.getHeight();\n    int imageToDisplayRatio = (width * targetHeight) - (height * targetWidth);\n    if (imageToDisplayRatio > 0) {\n        // i.e., width/height > targetWidth/targetHeight, so have to crop from left and right:\n        int newWidth = (targetWidth * height / targetHeight);\n        XposedUtils.log(\"New width after cropping left and right: \" + newWidth);\n        bitmap = Bitmap.createBitmap(bitmap, (width - newWidth) / 2, 0, newWidth, height);\n    } else if (imageToDisplayRatio < 0) {\n        // i.e., width/height < targetWidth/targetHeight, so have to crop from top and bottom:\n        int newHeight = (targetHeight * width / targetWidth);\n        XposedUtils.log(\"New height after cropping top and bottom: \" + newHeight);\n        bitmap = Bitmap.createBitmap(bitmap, 0, (height - newHeight) / 2, width, newHeight);\n    }\n\n    /* If the image properly covers the Display rectangle, we mark it as a \"large\" image\n     * and are going to scale it down. We make this distinction because we don't wanna\n     * scale the image up if it is smaller than the Display rectangle. */\n    boolean largeImage = ((width > targetWidth) & (height > targetHeight));\n    if (largeImage) {\n        XposedUtils.log(\"Large image, scaling down\");\n        bitmap = Bitmap.createScaledBitmap(bitmap, targetWidth, targetHeight, true);\n    }\n    return bitmap;\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * Initializes the ImageUtils class, sets the device resolution in specific.\n *\n * @param context The context used to access resources\n */\n", "func_signal": "@SuppressWarnings(\"SuspiciousNameCombination\")\npublic ImageUtils(Context context)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    targetWidth = dm.widthPixels;\n    targetHeight = dm.heightPixels;\n\n    XposedUtils.log(\"Display metrics: \" + targetWidth + \" x \" + targetHeight + \" (w x h)\");\n    // DisplayMetrics' values depend on the phone's tilt, so we normalize them to Portrait mode\n    if (targetWidth > targetHeight) {\n        XposedUtils.log(\"Normalizing display metrics to Portrait mode.\");\n        targetWidth = dm.heightPixels;\n        targetHeight = dm.widthPixels;\n    }\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Util\\ImageUtils.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/*public static void readCurrentFile() throws IOException, IllegalAccessException {\n    File file = new File(Preferences.getSavePath() + \"/ObfuscationFile.json\");\n\n    FileInputStream in = new FileInputStream(file);\n    JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n\n    Class[] classes = Obfuscator.class.getClasses();\n\n    reader.beginArray();\n\n    reader.beginObject();\n\n    String currentClass = null;\n\n    while(reader.hasNext())\n    {\n        if( reader.peek() == JsonToken.NAME)\n        String fieldName = reader.nextName();\n\n        readAndSet(reader, currentClass, fieldName);\n    }\n\n    for( Class clazz : classes ) {\n        reader.name(clazz.getSimpleName());\n\n        Field[] fields = clazz.getFields();\n\n        reader.beginObject();\n        for( Field field : fields ) {\n            writeObject(reader, field.getName(), field.get(null));\n        }\n        reader.endObject();\n    }\n    reader.endObject();\n    reader.endArray();\n}*/\n", "func_signal": "public static void writeObject( JsonWriter writer, String name, Object obj) throws IOException", "code": "{\n    if(obj instanceof Boolean)\n        writer.name(name).value((boolean) obj);\n    else if(obj instanceof Integer)\n        writer.name(name).value((int) obj);\n    else if(obj instanceof String)\n        writer.name(name).value((String) obj);\n    else if(obj instanceof Double)\n        writer.name(name).value((double) obj);\n    else if(obj instanceof Float)\n        writer.name(name).value((float) obj);\n}", "path": "app\\src\\main\\java\\com\\marz\\snapprefs\\Obfuscator.java", "repo_name": "marzika/Snapprefs", "stars": 266, "license": "gpl-3.0", "language": "java", "size": 14844}
{"docstring": "/**\n * \u521d\u59cb\u5316\u5e76\u542f\u52a8\u7ebf\u7a0b\u72b6\u6001\u7edf\u8ba1Job\u3002\n */\n", "func_signal": "private void startThreadStateJob()", "code": "{\n    if (! _threadPoolConfig.getThreadStateSwitch()) {\n        return;\n    }\n    \n    _threadStateJob = new ThreadStateJob(_threadPoolConfig.getThreadStateInterval());\n    _threadStateJob.init();\n    Thread jobThread = new Thread(_threadStateJob);\n    jobThread.setName(\"threadpool4j-threadstate\");\n    jobThread.start();\n    \n    _logger.info(\"start job 'threadpool4j-threadstate' success\");\n}", "path": "src\\cn\\aofeng\\threadpool4j\\ThreadPoolImpl.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * 1\u3001\u6240\u6709\u53c2\u6570\u5747\u7b26\u5408\u8981\u6c42\u3002\n * 2\u3001\u7ebf\u7a0b\u6c60\u5b58\u5728\u3002\n * 3\u3001\u6267\u884c\u4e24\u4e2a\u5f02\u6b65\u4efb\u52a1\u3002\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u4e24\u4e2a\u5f02\u6b65\u4efb\u52a1\u5747\u8fd4\u56de\u6b63\u786e\u7684\u6267\u884c\u7ed3\u679c\n * </pre>\n * @throws ExecutionException \n * @throws InterruptedException \n */\n", "func_signal": "@Test\npublic void testInvokeAll() throws InterruptedException, ExecutionException", "code": "{\n    Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n    tasks.add(createCallable());\n    tasks.add(createCallable());\n    List<Future<Integer>> futures = _threadPool.invokeAll(tasks, 2, TimeUnit.SECONDS);\n    int result = 0;\n    for (Future<Integer> future : futures) {\n        result += future.get();\n    }\n    \n    assertEquals(18, result);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u7ebf\u7a0b\u6c60\u540d\u79f0\u4e3a\"   \"\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInvokeAll4ThreadpoolNotExists()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"thread pool ThreadPoolNotExists not exists\");\n    \n    Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n    tasks.add(createCallable());\n    _threadPool.invokeAll(tasks, 2, TimeUnit.SECONDS, \"ThreadPoolNotExists\");\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u63d0\u4ea4\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1\u7ed9\u9ed8\u8ba4\u7684\u7ebf\u7a0b\u6c60\u6267\u884c <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u4e3anull\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testSubmitCallable4TaskIsNull()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"task is null\");\n    \n    Callable<?> task = null;\n    _threadPool.submit(task);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u63d0\u4ea4\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1\u7ed9\u6307\u5b9a\u7684\u7ebf\u7a0b\u6c60\u6267\u884c <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u4e3a{@link Callable}\uff1b\u7ebf\u7a0b\u6c60\u540d\u4e3a\"ThreadpoolNotExists\"\uff0c\u4f46\u5b9e\u9645\u4e0d\u5b58\u5728\u8fd9\u4e2a\u7ebf\u7a0b\u6c60\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testSubmitCallableString4ThreadpoolNameNotExists()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"thread pool ThreadpoolNotExists not exists\");\n    \n    Callable<?> task = createCallable();\n    _threadPool.submit(task, \"ThreadpoolNotExists\");\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5217\u8868\u4e3a\u7a7a\u5217\u8868\uff08\u5bb9\u91cf\u4e3a0\uff09\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInvokeAll4TaskListIsEmpty()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"task list is null or empty\");\n    \n    Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n    _threadPool.invokeAll(tasks, 1, TimeUnit.SECONDS);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6307\u5b9a\u540d\u79f0\u7684\u7ebf\u7a0b\u6c60\u7684\u914d\u7f6e\u662f\u5426\u5b58\u5728\u3002\n * \n * @return \u5982\u679c\u6307\u5b9a\u540d\u79f0\u7684\u7ebf\u7a0b\u6c60\u7684\u914d\u7f6e\u5b58\u5728\u8fd4\u56detrue\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56defalse\uff1b\u5982\u679c\u4f20\u5165\u7684\u7ebf\u7a0b\u6c60\u540d\u79f0\u4e3anull\u4e5f\u8fd4\u56defalse\u3002\n */\n", "func_signal": "public boolean containsPool(String poolName)", "code": "{\n    if (null == poolName || null == _multiThreadPoolInfo || _multiThreadPoolInfo.isEmpty()) {\n        return false;\n    }\n    \n    return _multiThreadPoolInfo.containsKey(poolName);\n}", "path": "src\\cn\\aofeng\\threadpool4j\\ThreadPoolConfig.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u8d85\u65f6\u65f6\u95f4\u5c0f\u4e8e0\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInvokeAll4TimeoutLessThanZero()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"timeout less than or equals zero\");\n    \n    Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n    tasks.add(createCallable());\n    _threadPool.invokeAll(tasks, -1, TimeUnit.SECONDS);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u961f\u5217\u6ee1\uff0c\u6267\u884c\u5931\u8d25\u5904\u7406\u5668 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u4e3a{@link Runnable}\uff0c\u63d0\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\u540d\"default\"\u6267\u884c\u3002\u961f\u5217\u6ee1\uff0c\u629b\u51fa{@link RejectedExecutionException}\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u7684run\u65b9\u6cd5\u88ab\u8c03\u75281\u6b21\uff1b\u5931\u8d25\u5904\u7406\u5668\u88ab\u6267\u884c1\u6b21\u3002\n * </pre>\n * @throws InterruptedException \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void testSubmitRunnableStringFailHandler() throws InterruptedException", "code": "{\n    String threadpoolName = \"defalut\";\n    Runnable taskMock = Mockito.mock(Runnable.class);\n    FailHandler<Runnable> handlerMock = Mockito.mock(FailHandler.class);\n    \n    ThreadPoolImpl threadPoolMockImpl = Mockito.spy(_threadPool);\n    Mockito.when(threadPoolMockImpl.getThreadPool(threadpoolName)).thenReturn(Executors.newSingleThreadExecutor());\n    Mockito.when(threadPoolMockImpl.submit(taskMock, threadpoolName)).thenThrow(RejectedExecutionException.class);\n    \n    threadPoolMockImpl.submit(taskMock, threadpoolName, handlerMock);\n    Thread.sleep(1000); // \u5f02\u6b65\u64cd\u4f5c\uff0c\u9700\u7b49\u5f85\u4e00\u4f1a\u513f\n    \n    Mockito.verify(taskMock, Mockito.times(1)).run(); // \u671f\u671b\u4efb\u52a1\u7684run\u65b9\u6cd5\u88ab\u8c03\u75281\u6b21\n    Mockito.verify(handlerMock, Mockito.times(1)).execute(taskMock); // \u671f\u671b\u5931\u8d25\u5904\u7406\u5668\u7684execute\u65b9\u6cd5\u88ab\u8c03\u75281\u6b21\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u8d85\u65f6\u65f6\u95f4\u7b49\u4e8e0\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInvokeAll4TimeoutEqualsZero()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"timeout less than or equals zero\");\n    \n    Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n    tasks.add(createCallable());\n    _threadPool.invokeAll(tasks, 0, TimeUnit.SECONDS);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u63d0\u4ea4\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1\u7ed9\u6307\u5b9a\u7684\u7ebf\u7a0b\u6c60\u6267\u884c <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u4e3a{@link Runnable}\uff1b\u7ebf\u7a0b\u6c60\u540d\u4e3a\"ThreadpoolNotExists\"\uff0c\u4f46\u5b9e\u9645\u4e0d\u5b58\u5728\u8fd9\u4e2a\u7ebf\u7a0b\u6c60\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testSubmitRunnableString4ThreadpoolNameNotExists()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"thread pool ThreadpoolNotExists not exists\");\n    \n    Runnable task = createRunnable();\n    _threadPool.submit(task, \"ThreadpoolNotExists\");\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u63d0\u4ea4\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1\u7ed9\u6307\u5b9a\u7684\u7ebf\u7a0b\u6c60\u6267\u884c <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u4e3anull\uff1b\u7ebf\u7a0b\u6c60\u4e3adefault\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testSubmitCallableString4TaskIsNull()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"task is null\");\n    \n    Callable<?> task = null;\n    _threadPool.submit(task, \"default\");\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u8bfb\u53d6\u7ebf\u7a0b\u6c60\u914d\u7f6e\u6587\u4ef6 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * 1\u30012.2.0\u7248\u672c\u7684\u914d\u7f6e\u6587\u4ef6\n * 2\u3001\u6709\u7ebf\u7a0b\u6c60\u72b6\u6001\u8f93\u51fa\u5f00\u5173\uff08threadpoolstate\u8282\u70b9\uff09\uff0c\u914d\u7f6e\u4e3aon\n * 3\u3001\u6709\u7ebf\u7a0b\u72b6\u6001\u8f93\u51fa\u5f00\u5173\uff08threadstate\u8282\u70b9\uff09\uff0c\u914d\u7f6e\u4e3aon\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * 1\u3001\u6709\u4e24\u4e2a\u7ebf\u7a0b\u6c60\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5206\u522b\u662fdefault\u548cother\u3002\n * 2\u3001\u7ebf\u7a0b\u6c60\u72b6\u6001\u8f93\u51fa\u5f00\u5173\u7684\u503c\u4e3atrue\uff0c\u8f93\u51fa\u95f4\u9694\u4e3a120\u79d2\u3002\n * 3\u3001\u7ebf\u7a0b\u72b6\u6001\u8f93\u51fa\u5f00\u5173\u7684\u503c\u4e3atrue\uff0c\u8f93\u51fa\u95f4\u9694\u4e3a180\u79d2\u3002\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInit42_5_0()", "code": "{\n    _threadPoolConfig._configFile = \"/cn/aofeng/threadpool4j/threadpool4j_2.5.0.xml\";\n    _threadPoolConfig.init();\n    assertEquals(2, _threadPoolConfig._multiThreadPoolInfo.size());\n    \n    // default\u7ebf\u7a0b\u6c60\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._multiThreadPoolInfo.containsKey(\"default\"));\n    ThreadPoolInfo defaultInfo = _threadPoolConfig._multiThreadPoolInfo.get(\"default\");\n    assertEquals(10, defaultInfo.getCoreSize());\n    assertEquals(100, defaultInfo.getMaxSize());\n    assertEquals(15, defaultInfo.getThreadKeepAliveTime());\n    assertEquals(100000, defaultInfo.getQueueSize());\n    \n    // other\u7ebf\u7a0b\u6c60\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._multiThreadPoolInfo.containsKey(\"other\"));\n    ThreadPoolInfo otherInfo = _threadPoolConfig._multiThreadPoolInfo.get(\"other\");\n    assertEquals(20, otherInfo.getCoreSize());\n    assertEquals(200, otherInfo.getMaxSize());\n    assertEquals(25, otherInfo.getThreadKeepAliveTime());\n    assertEquals(200000, otherInfo.getQueueSize());\n    \n    // \u7ebf\u7a0b\u6c60\u72b6\u6001\u7edf\u8ba1\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._threadPoolStateSwitch);\n    assertEquals(160, _threadPoolConfig._threadPoolStateInterval);\n    \n    // \u7ebf\u7a0b\u72b6\u6001\u7edf\u8ba1\u914d\u7f6e\u4fe1\u606f\n    assertFalse(_threadPoolConfig._threadStateSwitch);\n    assertEquals(260, _threadPoolConfig._threadStateInterval);\n    \n    // \u7ebf\u7a0b\u5806\u6808\u6536\u96c6\u914d\u7f6e\u4fe1\u606f\n    assertFalse(_threadPoolConfig._threadStackSwitch);\n    assertEquals(360, _threadPoolConfig._threadStackInterval);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolConfigTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u7ebf\u7a0b\u6c60\u540d\u79f0\u4e3a\"   \"\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInvokeAll4ThreadpoolNameIsEmpty()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"thread pool name is empty\");\n    \n    Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n    tasks.add(createCallable());\n    _threadPool.invokeAll(tasks, 2, TimeUnit.SECONDS, \"   \");\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5217\u8868\u4e3anull\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInvokeAll4TaskListIsNull()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"task list is null or empty\");\n    \n    Collection<Callable<Integer>> tasks = null;\n    _threadPool.invokeAll(tasks, 1, TimeUnit.SECONDS);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u961f\u5217\u6ee1\uff0c\u6267\u884c\u5931\u8d25\u5904\u7406\u5668 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u4e3a{@link Callable}\uff0c\u63d0\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\u540d\"default\"\u6267\u884c\u3002\u961f\u5217\u6ee1\uff0c\u629b\u51fa{@link RejectedExecutionException}\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u7684run\u65b9\u6cd5\u88ab\u8c03\u75281\u6b21\uff1b\u5931\u8d25\u5904\u7406\u5668\u88ab\u6267\u884c1\u6b21\u3002\n * </pre>\n * @throws Exception \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void testSubmitCallableStringFailHandler() throws Exception", "code": "{\n    String threadpoolName = \"defalut\";\n    Callable<Object> taskMock = Mockito.mock(Callable.class);\n    FailHandler<Callable<Object>> handlerMock = Mockito.mock(FailHandler.class);\n    \n    ThreadPoolImpl threadPoolMockImpl = Mockito.spy(_threadPool);\n    Mockito.when(threadPoolMockImpl.getThreadPool(threadpoolName)).thenReturn(Executors.newSingleThreadExecutor());\n    Mockito.when(threadPoolMockImpl.submit(taskMock, threadpoolName)).thenThrow(RejectedExecutionException.class);\n    \n    threadPoolMockImpl.submit(taskMock, threadpoolName, handlerMock);\n    Thread.sleep(1000); // \u5f02\u6b65\u64cd\u4f5c\uff0c\u9700\u7b49\u5f85\u4e00\u4f1a\u513f\n    \n    Mockito.verify(taskMock, Mockito.times(1)).call(); // \u671f\u671b\u4efb\u52a1\u7684run\u65b9\u6cd5\u88ab\u8c03\u75281\u6b21\n    Mockito.verify(handlerMock, Mockito.times(1)).execute(taskMock); // \u671f\u671b\u5931\u8d25\u5904\u7406\u5668\u7684execute\u65b9\u6cd5\u88ab\u8c03\u75281\u6b21\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u8bfb\u53d6\u7ebf\u7a0b\u6c60\u914d\u7f6e\u6587\u4ef6 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * 1\u30011.5.0\u7248\u672c\u7684\u914d\u7f6e\u6587\u4ef6\n * 2\u3001\u6709\u7ebf\u7a0b\u6c60\u72b6\u6001\u8f93\u51fa\u5f00\u5173\uff08threadpoolstate\u8282\u70b9\uff09\uff0c\u914d\u7f6e\u4e3aon\n * 3\u3001\u6709\u7ebf\u7a0b\u72b6\u6001\u8f93\u51fa\u5f00\u5173\uff08threadstate\u8282\u70b9\uff09\uff0c\u914d\u7f6e\u4e3aon\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * 1\u3001\u6709\u4e24\u4e2a\u7ebf\u7a0b\u6c60\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5206\u522b\u662fdefault\u548cother\u3002\n * 2\u3001\u7ebf\u7a0b\u6c60\u72b6\u6001\u8f93\u51fa\u5f00\u5173\u7684\u503c\u4e3atrue\uff0c\u8f93\u51fa\u95f4\u9694\u4e3a120\u79d2\u3002\n * 3\u3001\u7ebf\u7a0b\u72b6\u6001\u8f93\u51fa\u5f00\u5173\u7684\u503c\u4e3atrue\uff0c\u8f93\u51fa\u95f4\u9694\u4e3a180\u79d2\u3002\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInit41_5_0()", "code": "{\n    _threadPoolConfig._configFile = \"/cn/aofeng/threadpool4j/threadpool4j_1.5.0.xml\";\n    _threadPoolConfig.init();\n    assertEquals(2, _threadPoolConfig._multiThreadPoolInfo.size());\n    \n    // default\u7ebf\u7a0b\u6c60\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._multiThreadPoolInfo.containsKey(\"default\"));\n    ThreadPoolInfo defaultInfo = _threadPoolConfig._multiThreadPoolInfo.get(\"default\");\n    assertEquals(30, defaultInfo.getCoreSize());\n    assertEquals(150, defaultInfo.getMaxSize());\n    assertEquals(5, defaultInfo.getThreadKeepAliveTime());\n    assertEquals(100000, defaultInfo.getQueueSize());\n    \n    // other\u7ebf\u7a0b\u6c60\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._multiThreadPoolInfo.containsKey(\"other\"));\n    ThreadPoolInfo otherInfo = _threadPoolConfig._multiThreadPoolInfo.get(\"other\");\n    assertEquals(10, otherInfo.getCoreSize());\n    assertEquals(100, otherInfo.getMaxSize());\n    assertEquals(10, otherInfo.getThreadKeepAliveTime());\n    assertEquals(10000, otherInfo.getQueueSize());\n    \n    // \u7ebf\u7a0b\u6c60\u72b6\u6001\u7edf\u8ba1\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._threadPoolStateSwitch);\n    assertEquals(120, _threadPoolConfig._threadPoolStateInterval);\n    \n    // \u7ebf\u7a0b\u72b6\u6001\u7edf\u8ba1\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._threadStateSwitch);\n    assertEquals(180, _threadPoolConfig._threadStateInterval);\n    \n    // \u7ebf\u7a0b\u5806\u6808\u6536\u96c6\u914d\u7f6e\u4fe1\u606f\n    assertFalse(_threadPoolConfig._threadStackSwitch);\n    assertEquals(60, _threadPoolConfig._threadStackInterval);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolConfigTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u8bfb\u53d6\u7ebf\u7a0b\u6c60\u914d\u7f6e\u6587\u4ef6 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * 1\u30011.5.0\u7248\u672c\u7684\u914d\u7f6e\u6587\u4ef6\n * 2\u3001\u6709\u7ebf\u7a0b\u6c60\u72b6\u6001\u8f93\u51fa\u5f00\u5173\uff08threadpoolstate\u8282\u70b9\uff09\uff0c\u914d\u7f6e\u4e3aon\n * 3\u3001\u6709\u7ebf\u7a0b\u72b6\u6001\u8f93\u51fa\u5f00\u5173\uff08threadstate\u8282\u70b9\uff09\uff0c\u914d\u7f6e\u4e3aoff\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * 1\u3001\u6709\u4e24\u4e2a\u7ebf\u7a0b\u6c60\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5206\u522b\u662fdefault\u548chello\u3002\n * 2\u3001\u7ebf\u7a0b\u6c60\u72b6\u6001\u8f93\u51fa\u5f00\u5173\u7684\u503c\u4e3atrue\uff0c\u8f93\u51fa\u95f4\u9694\u4e3a120\u79d2\u3002\n * 3\u3001\u7ebf\u7a0b\u72b6\u6001\u8f93\u51fa\u5f00\u5173\u7684\u503c\u4e3afalse\uff0c\u8f93\u51fa\u95f4\u9694\u4e3a100\u79d2\u3002\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInit41_5_0CloseThreadStateSwitch()", "code": "{\n    _threadPoolConfig._configFile = \"/cn/aofeng/threadpool4j/threadpool4j_1.5.0_closethreadstate.xml\";\n    _threadPoolConfig.init();\n    assertEquals(2, _threadPoolConfig._multiThreadPoolInfo.size());\n    \n    // default\u7ebf\u7a0b\u6c60\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._multiThreadPoolInfo.containsKey(\"default\"));\n    ThreadPoolInfo defaultInfo = _threadPoolConfig._multiThreadPoolInfo.get(\"default\");\n    assertEquals(30, defaultInfo.getCoreSize());\n    assertEquals(150, defaultInfo.getMaxSize());\n    assertEquals(5, defaultInfo.getThreadKeepAliveTime());\n    assertEquals(100000, defaultInfo.getQueueSize());\n    \n    // hello\u7ebf\u7a0b\u6c60\u914d\u7f6e\u4fe1\u606f\n    assertTrue(_threadPoolConfig._multiThreadPoolInfo.containsKey(\"hello\"));\n    ThreadPoolInfo otherInfo = _threadPoolConfig._multiThreadPoolInfo.get(\"hello\");\n    assertEquals(10, otherInfo.getCoreSize());\n    assertEquals(100, otherInfo.getMaxSize());\n    assertEquals(10, otherInfo.getThreadKeepAliveTime());\n    assertEquals(10000, otherInfo.getQueueSize());\n    \n    // \u7ebf\u7a0b\u6c60\u72b6\u6001\u7edf\u8ba1\u914d\u7f6e\u4fe1\u606f\n    assertFalse(_threadPoolConfig._threadPoolStateSwitch);\n    assertEquals(120, _threadPoolConfig._threadPoolStateInterval);\n    \n    // \u7ebf\u7a0b\u72b6\u6001\u7edf\u8ba1\u914d\u7f6e\u4fe1\u606f\n    assertFalse(_threadPoolConfig._threadStateSwitch);\n    assertEquals(100, _threadPoolConfig._threadStateInterval);\n    \n    // \u7ebf\u7a0b\u5806\u6808\u6536\u96c6\u914d\u7f6e\u4fe1\u606f\n    assertFalse(_threadPoolConfig._threadStackSwitch);\n    assertEquals(60, _threadPoolConfig._threadStackInterval);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolConfigTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u5728\u7ebf\u7a0b\u6c60\"default\"\u4e2d\u6267\u884c\u591a\u4e2a\u9700\u8981\u8fd4\u56de\u503c\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u7ebf\u7a0b\u6c60\u540d\u79f0\u4e3anull\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testInvokeAll4ThreadpoolNameIsNull()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"thread pool name is empty\");\n    \n    Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n    tasks.add(createCallable());\n    _threadPool.invokeAll(tasks, 2, TimeUnit.SECONDS, null);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * \u6d4b\u8bd5\u7528\u4f8b\uff1a\u63d0\u4ea4\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1\u7ed9\u6307\u5b9a\u7684\u7ebf\u7a0b\u6c60\u6267\u884c <br/>\n * \u524d\u7f6e\u6761\u4ef6\uff1a\n * <pre>\n * \u4efb\u52a1\u5bf9\u8c61\u4e3a{@link Callable}\uff1b\u7ebf\u7a0b\u6c60\u540d\u4e3anull\n * </pre>\n * \n * \u6d4b\u8bd5\u7ed3\u679c\uff1a\n * <pre>\n * \u629b\u51fa{@link IllegalArgumentException}\u5f02\u5e38\n * </pre>\n */\n", "func_signal": "@Test\npublic void testSubmitCallableString4ThreadpoolNameIsNull()", "code": "{\n    _expectedEx.expect(IllegalArgumentException.class);\n    _expectedEx.expectMessage(\"thread pool name is empty\");\n    \n    Callable<?> task = createCallable();\n    _threadPool.submit(task, null);\n}", "path": "test\\cn\\aofeng\\threadpool4j\\ThreadPoolTest.java", "repo_name": "aofeng/threadpool4j", "stars": 304, "license": "apache-2.0", "language": "java", "size": 7710}
{"docstring": "/**\n * Test : verify the PreconditionException is thrown when pending = false\n *\n * @throws Exception\n */\n", "func_signal": "public void testActionCheckPreCondition2() throws Exception", "code": "{\n    Instrumentation inst = Services.get().get(InstrumentationService.class).get();\n\n    WorkflowJobBean job = this.addRecordToWfJobTable(WorkflowJob.Status.RUNNING, WorkflowInstance.Status.RUNNING);\n    WorkflowActionBean action = super.addRecordToWfActionTable(job.getId(), \"1\", WorkflowAction.Status.RUNNING);\n\n    ActionCheckXCommand checkCmd = new ActionCheckXCommand(action.getId());\n\n    Long counterVal = new Long(0);\n\n    try {\n        counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    } catch (NullPointerException e){\n        //counter might be null\n    }\n\n    assertEquals(new Long(0), new Long(counterVal));\n\n    checkCmd.call();\n\n    //precondition failed because of pending = false\n    counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    assertEquals(new Long(1), new Long(counterVal));\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\wf\\TestActionCheckXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Set pending flag to false for the actions that are START_RETRY or\n * START_MANUAL or END_RETRY or END_MANUAL\n * <p/>\n *\n * @param store WorkflowStore\n * @param id workflow id\n * @param actionId workflow action id\n * @throws StoreException\n */\n", "func_signal": "public static void setPendingFalseForActions(WorkflowStore store, String id, String actionId) throws StoreException", "code": "{\n    List<WorkflowActionBean> actions = store.getRetryAndManualActions(id);\n    for (WorkflowActionBean action : actions) {\n        if (actionId != null && actionId.equals(action.getId())) {\n            // this action has been changed in handleNonTransient()\n            continue;\n        }\n        else {\n            action.resetPendingOnly();\n        }\n        store.updateAction(action);\n    }\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\command\\wf\\SuspendCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Create an empty context.\n */\n", "func_signal": "public Context()", "code": "{\n    vars = new HashMap<String, Object>();\n    functions = new HashMap<String, Method>();\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\util\\ELEvaluator.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Instruments the memory locks service.\n *\n * @param instr instance to instrument the memory locks service to.\n */\n", "func_signal": "public void instrument(Instrumentation instr)", "code": "{\n    final MemoryLocks finalLocks = this.locks;\n    instr.addVariable(INSTRUMENTATION_GROUP, \"locks\", new Instrumentation.Variable<Long>() {\n        public Long getValue() {\n            return (long) finalLocks.size();\n        }\n    });\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\service\\MemoryLocksService.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Resolve a variable name. Used by the EL evaluator implemenation. <p/>\n *\n * @param name variable name.\n * @return the variable value.\n * @throws ELException thrown if the variable is not defined in the context.\n */\n", "func_signal": "public Object resolveVariable(String name) throws ELException", "code": "{\n    if (!vars.containsKey(name)) {\n        throw new ELException(XLog.format(\"variable [{0}] cannot be resolved\", name));\n    }\n    return vars.get(name);\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\util\\ELEvaluator.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * The constructor for class {@link BundleActionsGetJPAExecutor}\n *\n * @param bundleId bundle job id\n */\n", "func_signal": "public BundleActionsGetJPAExecutor(String bundleId)", "code": "{\n    ParamChecker.notNull(bundleId, \"bundleId\");\n    this.bundleId = bundleId;\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\executor\\jpa\\BundleActionsGetJPAExecutor.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Test : purge succeeded coord job and action successfully\n *\n * @throws Exception\n */\n", "func_signal": "public void testSucCoordPurgeXCommand() throws Exception", "code": "{\n    CoordinatorJobBean job = addRecordToCoordJobTable(CoordinatorJob.Status.SUCCEEDED, false, false);\n    CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, CoordinatorAction.Status.SUCCEEDED,\n            \"coord-action-get.xml\", 0);\n\n    JPAService jpaService = Services.get().get(JPAService.class);\n    assertNotNull(jpaService);\n    CoordJobGetJPAExecutor coordJobGetExecutor = new CoordJobGetJPAExecutor(job.getId());\n    CoordActionGetJPAExecutor coordActionGetExecutor = new CoordActionGetJPAExecutor(action.getId());\n\n    job = jpaService.execute(coordJobGetExecutor);\n    action = jpaService.execute(coordActionGetExecutor);\n    assertEquals(job.getStatus(), CoordinatorJob.Status.SUCCEEDED);\n    assertEquals(action.getStatus(), CoordinatorAction.Status.SUCCEEDED);\n\n    new CoordPurgeXCommand(7, 10).call();\n\n    try {\n        job = jpaService.execute(coordJobGetExecutor);\n        fail(\"Job should be purged. Should fail.\");\n    }\n    catch (JPAExecutorException je) {\n        // Job doesn't exist. Exception is expected.\n    }\n\n    try {\n        jpaService.execute(coordActionGetExecutor);\n        fail(\"Action should be purged. Should fail.\");\n    }\n    catch (JPAExecutorException je) {\n        // Job doesn't exist. Exception is expected.\n    }\n\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\coord\\TestCoordPurgeXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Add a function to the context. <p/>\n *\n * @param prefix function prefix.\n * @param functionName function name.\n * @param method method that will be invoked for the function, it must be a static and public method.\n */\n", "func_signal": "public void addFunction(String prefix, String functionName, Method method)", "code": "{\n    if ((method.getModifiers() & (Modifier.PUBLIC | Modifier.STATIC)) != (Modifier.PUBLIC | Modifier.STATIC)) {\n        throw new IllegalArgumentException(XLog.format(\"Method[{0}] must be public and static\", method));\n    }\n    prefix = (prefix.length() > 0) ? prefix + \":\" : \"\";\n    functions.put(prefix + functionName, method);\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\util\\ELEvaluator.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Test : purge coord job and action failed\n *\n * @throws Exception\n */\n", "func_signal": "public void testCoordPurgeXCommandFailed() throws Exception", "code": "{\n    CoordinatorJobBean job = addRecordToCoordJobTable(CoordinatorJob.Status.RUNNING, false, false);\n    CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, CoordinatorAction.Status.SUCCEEDED,\n            \"coord-action-get.xml\", 0);\n\n    JPAService jpaService = Services.get().get(JPAService.class);\n    assertNotNull(jpaService);\n    CoordJobGetJPAExecutor coordJobGetExecutor = new CoordJobGetJPAExecutor(job.getId());\n    CoordActionGetJPAExecutor coordActionGetExecutor = new CoordActionGetJPAExecutor(action.getId());\n\n    job = jpaService.execute(coordJobGetExecutor);\n    action = jpaService.execute(coordActionGetExecutor);\n    assertEquals(job.getStatus(), CoordinatorJob.Status.RUNNING);\n    assertEquals(action.getStatus(), CoordinatorAction.Status.SUCCEEDED);\n\n    new CoordPurgeXCommand(7, 10).call();\n\n    try {\n        job = jpaService.execute(coordJobGetExecutor);\n    }\n    catch (JPAExecutorException je) {\n        fail(\"Job should not be purged. Should fail.\");\n    }\n\n    try {\n        jpaService.execute(coordActionGetExecutor);\n    }\n    catch (JPAExecutorException je) {\n        fail(\"Action should not be purged. Should fail.\");\n    }\n\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\coord\\TestCoordPurgeXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Suspend the workflow job and pending flag to false for the actions that\n * are START_RETRY or START_MANUAL or END_RETRY or END_MANUAL\n *\n * @param store WorkflowStore\n * @param workflow WorkflowJobBean\n * @param id String\n * @param actionId String\n * @throws WorkflowException\n * @throws StoreException\n */\n", "func_signal": "public static void suspendJob(WorkflowStore store, WorkflowJobBean workflow, String id, String actionId)\n        throws WorkflowException, StoreException", "code": "{\n    if (workflow.getStatus() == WorkflowJob.Status.RUNNING) {\n        workflow.getWorkflowInstance().suspend();\n        WorkflowInstance wfInstance = workflow.getWorkflowInstance();\n        ((LiteWorkflowInstance) wfInstance).setStatus(WorkflowInstance.Status.SUSPENDED);\n        workflow.setStatus(WorkflowJob.Status.SUSPENDED);\n        workflow.setWorkflowInstance(wfInstance);\n\n        setPendingFalseForActions(store, id, actionId);\n    }\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\command\\wf\\SuspendCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Test : verify the PreconditionException is thrown when job != RUNNING\n *\n * @throws Exception\n */\n", "func_signal": "public void testActionCheckPreCondition4() throws Exception", "code": "{\n    Instrumentation inst = Services.get().get(InstrumentationService.class).get();\n\n    WorkflowJobBean job = this.addRecordToWfJobTable(WorkflowJob.Status.FAILED, WorkflowInstance.Status.FAILED);\n    WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", WorkflowAction.Status.PREP);\n\n    ActionCheckXCommand checkCmd = new ActionCheckXCommand(action.getId());\n\n    Long counterVal = new Long(0);\n\n    try {\n        counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    } catch (NullPointerException e){\n        //counter might be null\n    }\n\n    assertEquals(new Long(0), new Long(counterVal));\n\n    checkCmd.call();\n\n    //precondition failed because of job != RUNNING\n    counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    assertEquals(new Long(1), new Long(counterVal));\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\wf\\TestActionCheckXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/* (non-Javadoc)\n * @see org.apache.oozie.command.XCommand#execute()\n */\n", "func_signal": "@Override\nprotected Void execute() throws CommandException", "code": "{\n    transitToNext();\n    try {\n        suspendChildren();\n        updateJob();\n    } finally {\n        notifyParent();\n    }\n    return null;\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\command\\SuspendTransitionXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Resolve a function prefix:name. Used by the EL evaluator implementation. <p/>\n *\n * @param prefix function prefix.\n * @param name function name.\n * @return the method associated to the function.\n */\n", "func_signal": "public Method resolveFunction(String prefix, String name)", "code": "{\n    if (prefix.length() > 0) {\n        name = prefix + \":\" + name;\n    }\n    return functions.get(name);\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\util\\ELEvaluator.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "// map(WritableComparable, Writable, OutputCollector, Reporter)\n// OutputCollector.collect(WritableComparable,Writable)\n// sorted outputs are always stored in a simple (key-len, key, value-len,\n// value) format\n", "func_signal": "public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter)\n        throws IOException", "code": "{\n    String line = value.toString();\n    StringTokenizer tokenizer = new StringTokenizer(line);\n    while (tokenizer.hasMoreTokens()) {\n        word.set(tokenizer.nextToken());\n        output.collect(word, one);\n    }\n}", "path": "examples\\src\\main\\java\\org\\apache\\oozie\\example\\DemoMapper.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Test : purge failed coord job and action successfully\n *\n * @throws Exception\n */\n", "func_signal": "public void testFailCoordPurgeXCommand() throws Exception", "code": "{\n    CoordinatorJobBean job = addRecordToCoordJobTable(CoordinatorJob.Status.FAILED, false, false);\n    CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, CoordinatorAction.Status.FAILED,\n            \"coord-action-get.xml\", 0);\n\n    JPAService jpaService = Services.get().get(JPAService.class);\n    assertNotNull(jpaService);\n    CoordJobGetJPAExecutor coordJobGetExecutor = new CoordJobGetJPAExecutor(job.getId());\n    CoordActionGetJPAExecutor coordActionGetExecutor = new CoordActionGetJPAExecutor(action.getId());\n\n    job = jpaService.execute(coordJobGetExecutor);\n    action = jpaService.execute(coordActionGetExecutor);\n    assertEquals(job.getStatus(), CoordinatorJob.Status.FAILED);\n    assertEquals(action.getStatus(), CoordinatorAction.Status.FAILED);\n\n    new CoordPurgeXCommand(7, 10).call();\n\n    try {\n        job = jpaService.execute(coordJobGetExecutor);\n        fail(\"Job should be purged. Should fail.\");\n    }\n    catch (JPAExecutorException je) {\n        // Job doesn't exist. Exception is expected.\n    }\n\n    try {\n        jpaService.execute(coordActionGetExecutor);\n        fail(\"Action should be purged. Should fail.\");\n    }\n    catch (JPAExecutorException je) {\n        // Job doesn't exist. Exception is expected.\n    }\n\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\coord\\TestCoordPurgeXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Test : verify the PreconditionException is thrown when action != RUNNING\n *\n * @throws Exception\n */\n", "func_signal": "public void testActionCheckPreCondition3() throws Exception", "code": "{\n    Instrumentation inst = Services.get().get(InstrumentationService.class).get();\n\n    WorkflowJobBean job = this.addRecordToWfJobTable(WorkflowJob.Status.RUNNING, WorkflowInstance.Status.RUNNING);\n    WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", WorkflowAction.Status.PREP);\n\n    ActionCheckXCommand checkCmd = new ActionCheckXCommand(action.getId());\n\n    Long counterVal = new Long(0);\n\n    try{\n        counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    } catch (NullPointerException e){\n        //counter might be null\n    }\n\n    assertEquals(new Long(0), new Long(counterVal));\n\n    checkCmd.call();\n\n    //precondition failed because of action != RUNNING\n    counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    assertEquals(new Long(1), new Long(counterVal));\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\wf\\TestActionCheckXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Test : verify the PreconditionException is thrown when actionCheckDelay > 0\n *\n * @throws Exception\n */\n", "func_signal": "public void testActionCheckPreCondition1() throws Exception", "code": "{\n    Instrumentation inst = Services.get().get(InstrumentationService.class).get();\n\n    WorkflowJobBean job = this.addRecordToWfJobTable(WorkflowJob.Status.RUNNING, WorkflowInstance.Status.RUNNING);\n    WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), \"1\", WorkflowAction.Status.PREP);\n\n    ActionCheckXCommand checkCmd = new ActionCheckXCommand(action.getId(), 10);\n\n    Long counterVal = new Long(0);\n\n    try {\n        counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    } catch (NullPointerException e){\n        //counter might be null\n    }\n\n    assertEquals(new Long(0), new Long(counterVal));\n\n    checkCmd.call();\n\n    //precondition failed because of actionCheckDelay > 0\n    counterVal = inst.getCounters().get(XCommand.INSTRUMENTATION_GROUP).get(checkCmd.getName() + \".preconditionfailed\").getValue();\n    assertEquals(new Long(1), new Long(counterVal));\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\wf\\TestActionCheckXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/* (non-Javadoc)\n * @see org.apache.oozie.executor.jpa.JPAExecutor#execute(javax.persistence.EntityManager)\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic List<BundleActionBean> execute(EntityManager em) throws JPAExecutorException", "code": "{\n    List<BundleActionBean> baBeans;\n    try {\n        Query q = em.createNamedQuery(\"GET_BUNDLE_ACTIONS_FOR_BUNDLE\");\n        q.setParameter(\"bundleId\", bundleId);\n        baBeans = q.getResultList();\n    }\n    catch (Exception e) {\n        throw new JPAExecutorException(ErrorCode.E0603, e);\n    }\n\n    return baBeans;\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\executor\\jpa\\BundleActionsGetJPAExecutor.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Transit job to suspended from running or to prepsuspended from prep.\n *\n * @see org.apache.oozie.command.TransitionXCommand#transitToNext()\n */\n", "func_signal": "@Override\npublic void transitToNext()", "code": "{\n    if (job == null) {\n        job = this.getJob();\n    }\n    if (job.getStatus() == Job.Status.PREP) {\n        job.setStatus(Job.Status.PREPSUSPENDED);\n    }\n    else if (job.getStatus() == Job.Status.RUNNING) {\n        job.setStatus(Job.Status.SUSPENDED);\n    }\n    job.setPending();\n}", "path": "core\\src\\main\\java\\org\\apache\\oozie\\command\\SuspendTransitionXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Test : purge killed coord job and action successfully\n *\n * @throws Exception\n */\n", "func_signal": "public void testKillCoordPurgeXCommand() throws Exception", "code": "{\n    CoordinatorJobBean job = addRecordToCoordJobTable(CoordinatorJob.Status.KILLED, false, false);\n    CoordinatorActionBean action = addRecordToCoordActionTable(job.getId(), 1, CoordinatorAction.Status.KILLED,\n            \"coord-action-get.xml\", 0);\n\n    JPAService jpaService = Services.get().get(JPAService.class);\n    assertNotNull(jpaService);\n    CoordJobGetJPAExecutor coordJobGetExecutor = new CoordJobGetJPAExecutor(job.getId());\n    CoordActionGetJPAExecutor coordActionGetExecutor = new CoordActionGetJPAExecutor(action.getId());\n\n    job = jpaService.execute(coordJobGetExecutor);\n    action = jpaService.execute(coordActionGetExecutor);\n    assertEquals(job.getStatus(), CoordinatorJob.Status.KILLED);\n    assertEquals(action.getStatus(), CoordinatorAction.Status.KILLED);\n\n    new CoordPurgeXCommand(7, 10).call();\n\n    try {\n        job = jpaService.execute(coordJobGetExecutor);\n        fail(\"Job should be purged. Should fail.\");\n    }\n    catch (JPAExecutorException je) {\n        // Job doesn't exist. Exception is expected.\n    }\n\n    try {\n        jpaService.execute(coordActionGetExecutor);\n        fail(\"Action should be purged. Should fail.\");\n    }\n    catch (JPAExecutorException je) {\n        // Job doesn't exist. Exception is expected.\n    }\n\n}", "path": "core\\src\\test\\java\\org\\apache\\oozie\\command\\coord\\TestCoordPurgeXCommand.java", "repo_name": "YahooArchive/oozie", "stars": 375, "license": "apache-2.0", "language": "java", "size": 23375}
{"docstring": "/**\n * Get out of keyboard mode. If there is nothing in typedTimes, revert to TimePicker's time.\n * @param changeDisplays If true, update the displays with the relevant time.\n */\n", "func_signal": "private void finishKbMode(boolean updateDisplays)", "code": "{\n    mInKbMode = false;\n    if (!mTypedTimes.isEmpty()) {\n        int values[] = getEnteredTime(null);\n        mTimePicker.setTime(values[0], values[1]);\n        if (!mIs24HourMode) {\n            mTimePicker.setAmOrPm(values[2]);\n        }\n        mTypedTimes.clear();\n    }\n    if (updateDisplays) {\n        updateDisplay(false);\n        mTimePicker.trySettingInputEnabled(true);\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\TimePickerDialog.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Get the currently-entered time, as integer values of the hours and minutes typed.\n * @param enteredZeros A size-2 boolean array, which the caller should initialize, and which\n * may then be used for the caller to know whether zeros had been explicitly entered as either\n * hours of minutes. This is helpful for deciding whether to show the dashes, or actual 0's.\n * @return A size-3 int array. The first value will be the hours, the second value will be the\n * minutes, and the third will be either TimePickerDialog.AM or TimePickerDialog.PM.\n */\n", "func_signal": "private int[] getEnteredTime(Boolean[] enteredZeros)", "code": "{\n    int amOrPm = -1;\n    int startIndex = 1;\n    if (!mIs24HourMode && isTypedTimeFullyLegal()) {\n        int keyCode = mTypedTimes.get(mTypedTimes.size() - 1);\n        if (keyCode == getAmOrPmKeyCode(AM)) {\n            amOrPm = AM;\n        } else if (keyCode == getAmOrPmKeyCode(PM)){\n            amOrPm = PM;\n        }\n        startIndex = 2;\n    }\n    int minute = -1;\n    int hour = -1;\n    for (int i = startIndex; i <= mTypedTimes.size(); i++) {\n        int val = getValFromKeyCode(mTypedTimes.get(mTypedTimes.size() - i));\n        if (i == startIndex) {\n            minute = val;\n        } else if (i == startIndex+1) {\n            minute += 10*val;\n            if (enteredZeros != null && val == 0) {\n                enteredZeros[1] = true;\n            }\n        } else if (i == startIndex+2) {\n            hour = val;\n        } else if (i == startIndex+3) {\n            hour += 10*val;\n            if (enteredZeros != null && val == 0) {\n                enteredZeros[0] = true;\n            }\n        }\n    }\n\n    int[] ret = {hour, minute, amOrPm};\n    return ret;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\TimePickerDialog.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Check if the time that has been typed so far is completely legal, as is.\n */\n", "func_signal": "private boolean isTypedTimeFullyLegal()", "code": "{\n    if (mIs24HourMode) {\n        // For 24-hour mode, the time is legal if the hours and minutes are each legal. Note:\n        // getEnteredTime() will ONLY call isTypedTimeFullyLegal() when NOT in 24hour mode.\n        int[] values = getEnteredTime(null);\n        return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);\n    } else {\n        // For AM/PM mode, the time is legal if it contains an AM or PM, as those can only be\n        // legally added at specific times based on the tree's algorithm.\n        return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) ||\n                mTypedTimes.contains(getAmOrPmKeyCode(PM)));\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\TimePickerDialog.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Set the internal value as either AM or PM, and update the AM/PM circle displays.\n * @param amOrPm\n */\n", "func_signal": "public void setAmOrPm(int amOrPm)", "code": "{\n    mAmPmCirclesView.setAmOrPm(amOrPm);\n    mAmPmCirclesView.invalidate();\n    setValueForItem(AMPM_INDEX, amOrPm);\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Called by the picker for updating the header display.\n */\n", "func_signal": "@Override\npublic void onValueSelected(int pickerIndex, int newValue, boolean autoAdvance)", "code": "{\n    if (pickerIndex == HOUR_INDEX) {\n        setHour(newValue, false);\n        String announcement = String.format(\"%d\", newValue);\n        if (mAllowAutoAdvance && autoAdvance) {\n            setCurrentItemShowing(MINUTE_INDEX, true, true, false);\n            announcement += \". \" + mSelectMinutes;\n        }\n        Utils.tryAccessibilityAnnounce(mTimePicker, announcement);\n    } else if (pickerIndex == MINUTE_INDEX){\n        setMinute(newValue);\n    } else if (pickerIndex == AMPM_INDEX) {\n        updateAmPmDisplay(newValue);\n    } else if (pickerIndex == ENABLE_PICKER_INDEX) {\n        if (!isTypedTimeFullyLegal()) {\n            mTypedTimes.clear();\n        }\n        finishKbMode(true);\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\TimePickerDialog.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Create a tree for deciding what keys can legally be typed.\n */\n", "func_signal": "private void generateLegalTimesTree()", "code": "{\n    // Create a quick cache of numbers to their keycodes.\n    int k0 = KeyEvent.KEYCODE_0;\n    int k1 = KeyEvent.KEYCODE_1;\n    int k2 = KeyEvent.KEYCODE_2;\n    int k3 = KeyEvent.KEYCODE_3;\n    int k4 = KeyEvent.KEYCODE_4;\n    int k5 = KeyEvent.KEYCODE_5;\n    int k6 = KeyEvent.KEYCODE_6;\n    int k7 = KeyEvent.KEYCODE_7;\n    int k8 = KeyEvent.KEYCODE_8;\n    int k9 = KeyEvent.KEYCODE_9;\n\n    // The root of the tree doesn't contain any numbers.\n    mLegalTimesTree = new Node();\n    if (mIs24HourMode) {\n        // We'll be re-using these nodes, so we'll save them.\n        Node minuteFirstDigit = new Node(k0, k1, k2, k3, k4, k5);\n        Node minuteSecondDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        // The first digit must be followed by the second digit.\n        minuteFirstDigit.addChild(minuteSecondDigit);\n\n        // The first digit may be 0-1.\n        Node firstDigit = new Node(k0, k1);\n        mLegalTimesTree.addChild(firstDigit);\n\n        // When the first digit is 0-1, the second digit may be 0-5.\n        Node secondDigit = new Node(k0, k1, k2, k3, k4, k5);\n        firstDigit.addChild(secondDigit);\n        // We may now be followed by the first minute digit. E.g. 00:09, 15:58.\n        secondDigit.addChild(minuteFirstDigit);\n\n        // When the first digit is 0-1, and the second digit is 0-5, the third digit may be 6-9.\n        Node thirdDigit = new Node(k6, k7, k8, k9);\n        // The time must now be finished. E.g. 0:55, 1:08.\n        secondDigit.addChild(thirdDigit);\n\n        // When the first digit is 0-1, the second digit may be 6-9.\n        secondDigit = new Node(k6, k7, k8, k9);\n        firstDigit.addChild(secondDigit);\n        // We must now be followed by the first minute digit. E.g. 06:50, 18:20.\n        secondDigit.addChild(minuteFirstDigit);\n\n        // The first digit may be 2.\n        firstDigit = new Node(k2);\n        mLegalTimesTree.addChild(firstDigit);\n\n        // When the first digit is 2, the second digit may be 0-3.\n        secondDigit = new Node(k0, k1, k2, k3);\n        firstDigit.addChild(secondDigit);\n        // We must now be followed by the first minute digit. E.g. 20:50, 23:09.\n        secondDigit.addChild(minuteFirstDigit);\n\n        // When the first digit is 2, the second digit may be 4-5.\n        secondDigit = new Node(k4, k5);\n        firstDigit.addChild(secondDigit);\n        // We must now be followd by the last minute digit. E.g. 2:40, 2:53.\n        secondDigit.addChild(minuteSecondDigit);\n\n        // The first digit may be 3-9.\n        firstDigit = new Node(k3, k4, k5, k6, k7, k8, k9);\n        mLegalTimesTree.addChild(firstDigit);\n        // We must now be followed by the first minute digit. E.g. 3:57, 8:12.\n        firstDigit.addChild(minuteFirstDigit);\n    } else {\n        // We'll need to use the AM/PM node a lot.\n        // Set up AM and PM to respond to \"a\" and \"p\".\n        Node ampm = new Node(getAmOrPmKeyCode(AM), getAmOrPmKeyCode(PM));\n\n        // The first hour digit may be 1.\n        Node firstDigit = new Node(k1);\n        mLegalTimesTree.addChild(firstDigit);\n        // We'll allow quick input of on-the-hour times. E.g. 1pm.\n        firstDigit.addChild(ampm);\n\n        // When the first digit is 1, the second digit may be 0-2.\n        Node secondDigit = new Node(k0, k1, k2);\n        firstDigit.addChild(secondDigit);\n        // Also for quick input of on-the-hour times. E.g. 10pm, 12am.\n        secondDigit.addChild(ampm);\n\n        // When the first digit is 1, and the second digit is 0-2, the third digit may be 0-5.\n        Node thirdDigit = new Node(k0, k1, k2, k3, k4, k5);\n        secondDigit.addChild(thirdDigit);\n        // The time may be finished now. E.g. 1:02pm, 1:25am.\n        thirdDigit.addChild(ampm);\n\n        // When the first digit is 1, the second digit is 0-2, and the third digit is 0-5,\n        // the fourth digit may be 0-9.\n        Node fourthDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        thirdDigit.addChild(fourthDigit);\n        // The time must be finished now. E.g. 10:49am, 12:40pm.\n        fourthDigit.addChild(ampm);\n\n        // When the first digit is 1, and the second digit is 0-2, the third digit may be 6-9.\n        thirdDigit = new Node(k6, k7, k8, k9);\n        secondDigit.addChild(thirdDigit);\n        // The time must be finished now. E.g. 1:08am, 1:26pm.\n        thirdDigit.addChild(ampm);\n\n        // When the first digit is 1, the second digit may be 3-5.\n        secondDigit = new Node(k3, k4, k5);\n        firstDigit.addChild(secondDigit);\n\n        // When the first digit is 1, and the second digit is 3-5, the third digit may be 0-9.\n        thirdDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        secondDigit.addChild(thirdDigit);\n        // The time must be finished now. E.g. 1:39am, 1:50pm.\n        thirdDigit.addChild(ampm);\n\n        // The hour digit may be 2-9.\n        firstDigit = new Node(k2, k3, k4, k5, k6, k7, k8, k9);\n        mLegalTimesTree.addChild(firstDigit);\n        // We'll allow quick input of on-the-hour-times. E.g. 2am, 5pm.\n        firstDigit.addChild(ampm);\n\n        // When the first digit is 2-9, the second digit may be 0-5.\n        secondDigit = new Node(k0, k1, k2, k3, k4, k5);\n        firstDigit.addChild(secondDigit);\n\n        // When the first digit is 2-9, and the second digit is 0-5, the third digit may be 0-9.\n        thirdDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9);\n        secondDigit.addChild(thirdDigit);\n        // The time must be finished now. E.g. 2:57am, 9:30pm.\n        thirdDigit.addChild(ampm);\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\TimePickerDialog.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Try to vibrate. To prevent this becoming a single continuous vibration, nothing will\n * happen if we have vibrated very recently.\n */\n", "func_signal": "public void tryVibrate()", "code": "{\n    if (mAllowVibration && mVibrator != null) {\n        long now = SystemClock.uptimeMillis();\n        // We want to try to vibrate each individual tick discretely.\n        if (now - mLastVibrate >= 125) {\n            mVibrator.vibrate(5);\n            mLastVibrate = now;\n        }\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Set either the hour or the minute. Will set the internal value, and set the selection.\n */\n", "func_signal": "private void setItem(int index, int value)", "code": "{\n    if (index == HOUR_INDEX) {\n        setValueForItem(HOUR_INDEX, value);\n        int hourDegrees = (value % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;\n        mHourRadialSelectorView.setSelection(hourDegrees, isHourInnerCircle(value), false);\n        mHourRadialSelectorView.invalidate();\n    } else if (index == MINUTE_INDEX) {\n        setValueForItem(MINUTE_INDEX, value);\n        int minuteDegrees = value * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;\n        mMinuteRadialSelectorView.setSelection(minuteDegrees, false, false);\n        mMinuteRadialSelectorView.invalidate();\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Split up the 360 degrees of the circle among the 60 selectable values. Assigns a larger\n * selectable area to each of the 12 visible values, such that the ratio of space apportioned\n * to a visible value : space apportioned to a non-visible value will be 14 : 4.\n * E.g. the output of 30 degrees should have a higher range of input associated with it than\n * the output of 24 degrees, because 30 degrees corresponds to a visible number on the clock\n * circle (5 on the minutes, 1 or 13 on the hours).\n */\n", "func_signal": "private void preparePrefer30sMap()", "code": "{\n    // We'll split up the visible output and the non-visible output such that each visible\n    // output will correspond to a range of 14 associated input degrees, and each non-visible\n    // output will correspond to a range of 4 associate input degrees, so visible numbers\n    // are more than 3 times easier to get than non-visible numbers:\n    // {354-359,0-7}:0, {8-11}:6, {12-15}:12, {16-19}:18, {20-23}:24, {24-37}:30, etc.\n    //\n    // If an output of 30 degrees should correspond to a range of 14 associated degrees, then\n    // we'll need any input between 24 - 37 to snap to 30. Working out from there, 20-23 should\n    // snap to 24, while 38-41 should snap to 36. This is somewhat counter-intuitive, that you\n    // can be touching 36 degrees but have the selection snapped to 30 degrees; however, this\n    // inconsistency isn't noticeable at such fine-grained degrees, and it affords us the\n    // ability to aggressively prefer the visible values by a factor of more than 3:1, which\n    // greatly contributes to the selectability of these values.\n\n    // Our input will be 0 through 360.\n    mSnapPrefer30sMap = new int[361];\n\n    // The first output is 0, and each following output will increment by 6 {0, 6, 12, ...}.\n    int snappedOutputDegrees = 0;\n    // Count of how many inputs we've designated to the specified output.\n    int count = 1;\n    // How many input we expect for a specified output. This will be 14 for output divisible\n    // by 30, and 4 for the remaining output. We'll special case the outputs of 0 and 360, so\n    // the caller can decide which they need.\n    int expectedCount = 8;\n    // Iterate through the input.\n    for (int degrees = 0; degrees < 361; degrees++) {\n        // Save the input-output mapping.\n        mSnapPrefer30sMap[degrees] = snappedOutputDegrees;\n        // If this is the last input for the specified output, calculate the next output and\n        // the next expected count.\n        if (count == expectedCount) {\n            snappedOutputDegrees += 6;\n            if (snappedOutputDegrees == 360) {\n                expectedCount = 7;\n            } else if (snappedOutputDegrees % 30 == 0) {\n                expectedCount = 14;\n            } else {\n                expectedCount = 4;\n            }\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Get the item (hours or minutes) that is currently showing.\n */\n", "func_signal": "public int getCurrentItemShowing()", "code": "{\n    if (mCurrentItemShowing != HOUR_INDEX && mCurrentItemShowing != MINUTE_INDEX) {\n        Log.e(TAG, \"Current item showing was unfortunately set to \"+mCurrentItemShowing);\n        return -1;\n    }\n    return mCurrentItemShowing;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Initialize the Layout with starting values.\n * @param context\n * @param initialHoursOfDay\n * @param initialMinutes\n * @param is24HourMode\n */\n", "func_signal": "public void initialize(Context context, int initialHoursOfDay, int initialMinutes,\n        boolean is24HourMode)", "code": "{\n    if (mTimeInitialized) {\n        Log.e(TAG, \"Time has already been initialized.\");\n        return;\n    }\n    mIs24HourMode = is24HourMode;\n\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n        mHideAmPm = mIs24HourMode;\n    } else {\n        mHideAmPm = mAccessibilityManager.isTouchExplorationEnabled()? true : mIs24HourMode;\n    }\n\n    // Initialize the circle and AM/PM circles if applicable.\n    mCircleView.initialize(context, mHideAmPm);\n    mCircleView.invalidate();\n    if (!mHideAmPm) {\n        mAmPmCirclesView.initialize(context, initialHoursOfDay < 12? AM : PM);\n        mAmPmCirclesView.invalidate();\n    }\n\n    // Initialize the hours and minutes numbers.\n    Resources res = context.getResources();\n    int[] hours = {12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    int[] hours_24 = {0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};\n    int[] minutes = {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55};\n    String[] hoursTexts = new String[12];\n    String[] innerHoursTexts = new String[12];\n    String[] minutesTexts = new String[12];\n    for (int i = 0; i < 12; i++) {\n        hoursTexts[i] = is24HourMode?\n                String.format(\"%02d\", hours_24[i]) : String.format(\"%d\", hours[i]);\n        innerHoursTexts[i] = String.format(\"%d\", hours[i]);\n        minutesTexts[i] = String.format(\"%02d\", minutes[i]);\n    }\n    mHourRadialTextsView.initialize(res,\n            hoursTexts, (is24HourMode? innerHoursTexts : null), mHideAmPm, true);\n    mHourRadialTextsView.invalidate();\n    mMinuteRadialTextsView.initialize(res, minutesTexts, null, mHideAmPm, false);\n    mMinuteRadialTextsView.invalidate();\n\n    // Initialize the currently-selected hour and minute.\n    setValueForItem(HOUR_INDEX, initialHoursOfDay);\n    setValueForItem(MINUTE_INDEX, initialMinutes);\n    int hourDegrees = (initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;\n    mHourRadialSelectorView.initialize(context, mHideAmPm, is24HourMode, true,\n            hourDegrees, isHourInnerCircle(initialHoursOfDay));\n    int minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;\n    mMinuteRadialSelectorView.initialize(context, mHideAmPm, false, false,\n            minuteDegrees, false);\n\n    mTimeInitialized = true;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * If the hours are showing, return the current hour. If the minutes are showing, return the\n * current minute.\n */\n", "func_signal": "private int getCurrentlyShowingValue()", "code": "{\n    int currentIndex = getCurrentItemShowing();\n    if (currentIndex == HOUR_INDEX) {\n        return mCurrentHoursOfDay;\n    } else if (currentIndex == MINUTE_INDEX) {\n        return mCurrentMinutes;\n    } else {\n        return -1;\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Get the keycode value for AM and PM in the current language.\n */\n", "func_signal": "private int getAmOrPmKeyCode(int amOrPm)", "code": "{\n    // Cache the codes.\n    if (mAmKeyCode == -1 || mPmKeyCode == -1) {\n        // Find the first character in the AM/PM text that is unique.\n        KeyCharacterMap kcm = KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD);\n        char amChar;\n        char pmChar;\n        for (int i = 0; i < Math.max(mAmText.length(), mPmText.length()); i++) {\n            amChar = mAmText.toLowerCase(Locale.getDefault()).charAt(i);\n            pmChar = mPmText.toLowerCase(Locale.getDefault()).charAt(i);\n            if (amChar != pmChar) {\n                KeyEvent[] events = kcm.getEvents(new char[]{amChar, pmChar});\n                // There should be 4 events: a down and up for both AM and PM.\n                if (events != null && events.length == 4) {\n                    mAmKeyCode = events[0].getKeyCode();\n                    mPmKeyCode = events[2].getKeyCode();\n                } else {\n                    Log.e(TAG, \"Unable to find keycodes for AM and PM.\");\n                }\n                break;\n            }\n        }\n    }\n    if (amOrPm == AM) {\n        return mAmKeyCode;\n    } else if (amOrPm == PM) {\n        return mPmKeyCode;\n    }\n\n    return -1;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\TimePickerDialog.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Traverse the tree to see if the keys that have been typed so far are legal as is,\n * or may become legal as more keys are typed (excluding backspace).\n */\n", "func_signal": "private boolean isTypedTimeLegalSoFar()", "code": "{\n    Node node = mLegalTimesTree;\n    for (int keyCode : mTypedTimes) {\n        node = node.canReach(keyCode);\n        if (node == null) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\TimePickerDialog.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * For the currently showing view (either hours or minutes), re-calculate the position for the\n * selector, and redraw it at that position. The input degrees will be snapped to a selectable\n * value.\n * @param degrees Degrees which should be selected.\n * @param isInnerCircle Whether the selection should be in the inner circle; will be ignored\n * if there is no inner circle.\n * @param forceToVisibleValue Even if the currently-showing circle allows for fine-grained\n * selection (i.e. minutes), force the selection to one of the visibly-showing values.\n * @param forceDrawDot The dot in the circle will generally only be shown when the selection\n * is on non-visible values, but use this to force the dot to be shown.\n * @return The value that was selected, i.e. 0-23 for hours, 0-59 for minutes.\n */\n", "func_signal": "private int reselectSelector(int degrees, boolean isInnerCircle,\n        boolean forceToVisibleValue, boolean forceDrawDot)", "code": "{\n    if (degrees == -1) {\n        return -1;\n    }\n    int currentShowing = getCurrentItemShowing();\n\n    int stepSize;\n    boolean allowFineGrained = !forceToVisibleValue && (currentShowing == MINUTE_INDEX);\n    if (allowFineGrained) {\n        degrees = snapPrefer30s(degrees);\n    } else {\n        degrees = snapOnly30s(degrees, 0);\n    }\n\n    RadialSelectorView radialSelectorView;\n    if (currentShowing == HOUR_INDEX) {\n        radialSelectorView = mHourRadialSelectorView;\n        stepSize = HOUR_VALUE_TO_DEGREES_STEP_SIZE;\n    } else {\n        radialSelectorView = mMinuteRadialSelectorView;\n        stepSize = MINUTE_VALUE_TO_DEGREES_STEP_SIZE;\n    }\n    radialSelectorView.setSelection(degrees, isInnerCircle, forceDrawDot);\n    radialSelectorView.invalidate();\n\n\n    if (currentShowing == HOUR_INDEX) {\n        if (mIs24HourMode) {\n            if (degrees == 0 && isInnerCircle) {\n                degrees = 360;\n            } else if (degrees == 360 && !isInnerCircle) {\n                degrees = 0;\n            }\n        } else if (degrees == 0) {\n            degrees = 360;\n        }\n    } else if (degrees == 360 && currentShowing == MINUTE_INDEX) {\n        degrees = 0;\n    }\n\n    int value = degrees / stepSize;\n    if (currentShowing == HOUR_INDEX && mIs24HourMode && !isInnerCircle && degrees != 0) {\n        value += 12;\n    }\n    return value;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Measure the view to end up as a square, based on the minimum of the height and width.\n */\n", "func_signal": "@Override\npublic void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    int measuredWidth = MeasureSpec.getSize(widthMeasureSpec);\n    int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n    int measuredHeight = MeasureSpec.getSize(heightMeasureSpec);\n    int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n    int minDimension = Math.min(measuredWidth, measuredHeight);\n\n    super.onMeasure(MeasureSpec.makeMeasureSpec(minDimension, widthMode),\n            MeasureSpec.makeMeasureSpec(minDimension, heightMode));\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Returns mapping of any input degrees (0 to 360) to one of 60 selectable output degrees,\n * where the degrees corresponding to visible numbers (i.e. those divisible by 30) will be\n * weighted heavier than the degrees corresponding to non-visible numbers.\n * See {@link #preparePrefer30sMap()} documentation for the rationale and generation of the\n * mapping.\n */\n", "func_signal": "private int snapPrefer30s(int degrees)", "code": "{\n    if (mSnapPrefer30sMap == null) {\n        return -1;\n    }\n    return mSnapPrefer30sMap[degrees];\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Set touch input as enabled or disabled, for use with keyboard mode.\n */\n", "func_signal": "public boolean trySettingInputEnabled(boolean inputEnabled)", "code": "{\n    if (mDoingTouch && !inputEnabled) {\n        // If we're trying to disable input, but we're in the middle of a touch event,\n        // we'll allow the touch event to continue before disabling input.\n        return false;\n    }\n    mInputEnabled = inputEnabled;\n    mGrayBox.setVisibility(inputEnabled? View.INVISIBLE : View.VISIBLE);\n    return true;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Set the internal value for the hour, minute, or AM/PM.\n */\n", "func_signal": "private void setValueForItem(int index, int value)", "code": "{\n    if (index == HOUR_INDEX) {\n        mCurrentHoursOfDay = value;\n    } else if (index == MINUTE_INDEX){\n        mCurrentMinutes = value;\n    } else if (index == AMPM_INDEX) {\n        if (value == AM) {\n            mCurrentHoursOfDay = mCurrentHoursOfDay % 12;\n        } else if (value == PM) {\n            mCurrentHoursOfDay = (mCurrentHoursOfDay % 12) + 12;\n        }\n    }\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "/**\n * Returns mapping of any input degrees (0 to 360) to one of 12 visible output degrees (all\n * multiples of 30), where the input will be \"snapped\" to the closest visible degrees.\n * @param degrees The input degrees\n * @param forceAboveOrBelow The output may be forced to either the higher or lower step, or may\n * be allowed to snap to whichever is closer. Use 1 to force strictly higher, -1 to force\n * strictly lower, and 0 to snap to the closer one.\n * @return output degrees, will be a multiple of 30\n */\n", "func_signal": "private int snapOnly30s(int degrees, int forceHigherOrLower)", "code": "{\n    int stepSize = HOUR_VALUE_TO_DEGREES_STEP_SIZE;\n    int floor = (degrees / stepSize) * stepSize;\n    int ceiling = floor + stepSize;\n    if (forceHigherOrLower == 1) {\n        degrees = ceiling;\n    } else if (forceHigherOrLower == -1) {\n        if (degrees == floor) {\n            floor -= stepSize;\n        }\n        degrees = floor;\n    } else {\n        if ((degrees - floor) < (ceiling - degrees)) {\n            degrees = floor;\n        } else {\n            degrees = ceiling;\n        }\n    }\n    return degrees;\n}", "path": "library\\GoogleDateTimePickers\\src\\mirko\\android\\datetimepicker\\time\\RadialPickerLayout.java", "repo_name": "Mirkoddd/GoogleDateTimePickers", "stars": 364, "license": "None", "language": "java", "size": 3254}
{"docstring": "//\u53d1\u9001\u6587\u672c\u90ae\u4ef6 subject:\u90ae\u4ef6\u4e3b\u9898; text:\u90ae\u4ef6\u5185\u5bb9\n", "func_signal": "public void sendTextMail(String subject,String text,String ... personList)", "code": "{\n    threadPoolTaskExecutor.execute(() -> {\n        try {\n            SimpleMailMessage message = new SimpleMailMessage();\n            message.setFrom(username);\n            message.setTo(personList);\n            message.setSubject(subject);\n            message.setText(text);\n            log.info(\"\u53d1\u9001\u6587\u672c\u90ae\u4ef6:{}\", \"\u90ae\u4ef6\u53d1\u9001\u5f00\u59cb\");\n            javaMailSender.send(message);\n\n        } catch (Exception e) {\n            log.warn(\"\u53d1\u9001\u6587\u672c\u90ae\u4ef6\u90ae\u4ef6\u5931\u8d25=exception:{}\", e);\n        }\n    });\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\MailSendService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "//\u53d1\u9001\u5e26\u9644\u4ef6\u7684\u90ae\u4ef6 subject:\u90ae\u4ef6\u4e3b\u9898; text:\u90ae\u4ef6\u5185\u5bb9 ; file:\u9644\u4ef6\n", "func_signal": "public void sendFileMail(String subject, String text, File file,String[] personList)", "code": "{\n    threadPoolTaskExecutor.execute(() -> {\n        try {\n\n            MimeMessage msg = javaMailSender.createMimeMessage();\n            MimeMessageHelper helper = new MimeMessageHelper(msg,true);\n\n            helper.setFrom(username);\n            helper.setTo(personList);\n            helper.setSubject(subject);\n            helper.setText(text);\n\n            //\u52a0\u5165\u9644\u4ef6\n            if(file!=null) helper.addAttachment(file.getName(), file);\n\n            log.info(\"\u53d1\u9001\u542b\u9644\u4ef6\u90ae\u4ef6:{}\", \"\u90ae\u4ef6\u53d1\u9001\u5f00\u59cb\");\n\n            javaMailSender.send(msg);\n\n        } catch (Exception e) {\n            log.warn(\"\u53d1\u9001\u542b\u9644\u4ef6\u90ae\u4ef6\u5931\u8d25=exception:{}\", e);\n        }\n    });\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\MailSendService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * check whether input is a valid URL\n *\n * @author bob.li.0718@gmail.com\n * @param urlString urlString\n * @return true means yes, otherwise no.\n */\n", "func_signal": "private boolean isUrl(String urlString)", "code": "{\n\ttry {\n\t\tnew URL(urlString);\n\t\treturn true;\n\t} catch (MalformedURLException mue) {\n\t\treturn false;\n\t}\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\webmagic\\downloader\\WebDriverPool.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * \u68c0\u67e5\u9a8c\u8bc1\u662f\u5426\u6709\u6548\u671f\n * \n * @param sender \u53d1\u9001\u624b\u673a\u624b\u673a\u53f7\n * @param code \u9a8c\u8bc1\u7801\n * @return\n */\n", "func_signal": "public boolean isRightSmsCode(String sender, String code)", "code": "{\n\tList<Captcha> list = captchaDao.getCaptchBySender(sender);\n\tif (list.size() == 0) {\n\t\treturn false;\n\t}\n\tCaptcha captcha = list.get(0);\n\tif (captcha == null || !captcha.getCaptcha().equals(code)) {\n\t\treturn false;\n\t}\n\tLong ExpireTime = captcha.getExpireTime().getTime();\n\tLong systime = System.currentTimeMillis();\n\tif (systime > ExpireTime) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\SmsCodeService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "//\u52a0\u8f7d\u89d2\u8272\u5bf9\u5e94\u7684\u8d44\u6e90\n", "func_signal": "@PostConstruct\npublic void loadResourceDefine()", "code": "{\n    resourceMap = new HashMap<String, Collection<ConfigAttribute>>();\n    List<ScurityResource> resourceList = resourceService.getAllResource();\n    for (ScurityResource resource:resourceList) {\n        List<Map<String,Object>> roleResList = roleResourceService.getRoleByRes(resource.getResourceId());\n        String[] codes = resource.getResourceCode().split(\";\");\n        for (String str:codes) {\n            Collection<ConfigAttribute> att = new ArrayList<ConfigAttribute>();\n            for (Map<String,Object> map:roleResList) {\n                ConfigAttribute ca = new SecurityConfig(map.get(\"roleName\").toString());\n                att.add(ca);\n            }\n\n            if (roleResList.size() == 0){\n                resourceMap.put(str,null);\n                break;\n            }\n\n            resourceMap.put(str,att);\n        }\n     }\n}", "path": "boss\\src\\main\\java\\com\\qiya\\boss\\scurity\\MyInvocationSecurityMetadataSource.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n *\n * @return\n * @throws InterruptedException\n */\n", "func_signal": "public WebDriver get() throws InterruptedException", "code": "{\n\tcheckRunning();\n\tWebDriver poll = innerQueue.poll();\n\tif (poll != null) {\n\t\treturn poll;\n\t}\n\tif (webDriverList.size() < capacity) {\n\t\tsynchronized (webDriverList) {\n\t\t\tif (webDriverList.size() < capacity) {\n\n\t\t\t\t// add new WebDriver instance into pool\n\t\t\t\ttry {\n\t\t\t\t\tconfigure();\n\t\t\t\t\tinnerQueue.add(mDriver);\n\t\t\t\t\twebDriverList.add(mDriver);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\n\t\t\t\t// ChromeDriver e = new ChromeDriver();\n\t\t\t\t// WebDriver e = getWebDriver();\n\t\t\t\t// innerQueue.add(e);\n\t\t\t\t// webDriverList.add(e);\n\t\t\t}\n\t\t}\n\n\t}\n\treturn innerQueue.take();\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\webmagic\\downloader\\WebDriverPool.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "//        resourceMap = new HashMap<String, Collection<ConfigAttribute>>();\n//        if (roleService!=null){\n//            List<ScurityRole> roleList=roleService.getAllRoles();\n//            if (roleList.size()>0){\n//                for (ScurityRole role:roleList) {\n////                    Collection<ConfigAttribute> atts = new ArrayList<ConfigAttribute>();\n////                    ConfigAttribute ca = new SecurityConfig(role.getRoleName());\n////                    atts.add(ca);\n//                    //\u83b7\u53d6\u5f53\u524d\u89d2\u8272\u5fd7\u613f\n//                    List<Map<String,Object>>resourceList=roleResourceService.getResourceByRole(role.getRoleId());\n//                    //\u904d\u5386\u8d44\u6e90\n//                    for (Map<String,Object> map:resourceList) {\n//                        String code=map.get(\"url\").toString();\n//                        String[] codes=code.split(\";\");\n//                        for (String str:codes) {\n//                            if (resourceMap.get(str)!=null){\n//                                Collection<ConfigAttribute> att = resourceMap.get(str);\n//                                ConfigAttribute ca1 = new SecurityConfig(role.getRoleName());\n//                                att.add(ca1);\n//                                //resourceMap.put(str,att);\n//                            }else {\n//                                Collection<ConfigAttribute> atts = new ArrayList<ConfigAttribute>();\n//                                ConfigAttribute ca = new SecurityConfig(role.getRoleName());\n//                                atts.add(ca);\n//                                resourceMap.put(str,atts);\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//    }\n", "func_signal": "public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException", "code": "{\n        // object is a URL.\n        String url = ((FilterInvocation) object).getRequestUrl();\n        Iterator<String> ite = resourceMap.keySet().iterator();\n        while (ite.hasNext()) {\n            String resURL = ite.next();\n            if (antUrlPathMatcher.pathMatchesUrl(url, resURL)) {\n                if (resourceMap.get(resURL) == null) {   //\u5f53\u83dc\u5355\u8d44\u6e90\u6ca1\u6709\u5206\u914d\u6743\u9650\u65f6\u629b\u51fa403\u5f02\u5e38\n\n                    throw new AccessDeniedException(\"\u6ca1\u6709\u6743\u9650\u8bbf\u95ee!\");\n                }\n\n                Collection<ConfigAttribute> returnCollection = resourceMap.get(resURL);\n                return returnCollection;\n            }\n        }\n        return null;\n    }", "path": "boss\\src\\main\\java\\com\\qiya\\boss\\scurity\\MyInvocationSecurityMetadataSource.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * Register spider for monitor.\n *\n * @param spiders spiders\n * @return this\n */\n", "func_signal": "public synchronized MySpiderMonitor register(Spider... spiders) throws JMException", "code": "{\n\tfor (Spider spider : spiders) {\n\t\tMyMonitorSpiderListener monitorSpiderListener = new MyMonitorSpiderListener();\n\t\tif (spider.getSpiderListeners() == null) {\n\t\t\tList<SpiderListener> spiderListeners = new ArrayList<SpiderListener>();\n\t\t\tspiderListeners.add(monitorSpiderListener);\n\t\t\tspider.setSpiderListeners(spiderListeners);\n\t\t} else {\n\t\t\tspider.getSpiderListeners().add(monitorSpiderListener);\n\t\t}\n            MySpiderStatus spiderStatusMBean = getSpiderStatusMBean(spider, monitorSpiderListener);\n\t\tregisterMBean(spiderStatusMBean);\n\t\tspiderStatuses.put(spider.getUUID(),spiderStatusMBean);\n\t}\n\treturn this;\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\webmagic\\monitor\\MySpiderMonitor.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\n * \n * @param mobile \u624b\u673a\u53f7\u7801\n */\n", "func_signal": "public void sendCaptchaCode(String mobile)", "code": "{\n\n\t//\u751f\u6210\u9a8c\u8bc1\u7801\n\tString code = getCode(); // \u9a8c\u8bc1\u7801\n\t//\u53d1\u9001\u9a8c\u8bc1\u7801\n\tsmsService.verify(code,exptime,mobile);\n\t//\u4fdd\u5b58\u9a8c\u8bc1\u7801\u4fe1\u606f\n\tCaptcha captcha = new Captcha();\n\tcaptcha.setCaptcha(code);\n\tcaptcha.setSender(mobile);\n\tCalendar nowTime = Calendar.getInstance();\n\tnowTime.add(Calendar.MINUTE, exptime);\n\tcaptcha.setExpireTime(nowTime.getTime());\n\tcaptchaDao.save(captcha);\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\SmsCodeService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\n *\n * @param mobile \u624b\u673a\u53f7\u7801\n */\n", "func_signal": "public void sendSmsCode(String mobile)", "code": "{\n\n\t//\u751f\u6210\u9a8c\u8bc1\u7801\n\tString code = getCode(); // \u9a8c\u8bc1\u7801\n\t//\u53d1\u9001\u9a8c\u8bc1\u7801\n\tString content=\"\u60a8\u7684\u9a8c\u8bc1\u7801\u4e3a\"+code+\",\u6709\u6548\u671f\u4e3a\"+exptime+\"\u5206\u949f\u3002\";\n\tsmsUtil.sendMessage(mobile,content);\n\t//\u4fdd\u5b58\u9a8c\u8bc1\u7801\u4fe1\u606f\n\tCaptcha captcha = new Captcha();\n\tcaptcha.setCaptcha(code);\n\tcaptcha.setSender(mobile);\n\tCalendar nowTime = Calendar.getInstance();\n\tnowTime.add(Calendar.MINUTE, exptime);\n\tcaptcha.setExpireTime(nowTime.getTime());\n\tcaptchaDao.save(captcha);\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\SmsCodeService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * \u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801\u662f\u5426\u6b63\u786e\n * \n * @param sender\n * @param code\n */\n", "func_signal": "public void checkSmsCode(String sender, String code)", "code": "{\n\tif (!isRightSmsCode(sender, code)) {\n\t\tthrow new CustomBizException(\"\u77ed\u4fe1\u9a8c\u8bc1\u7801\u4e0d\u6b63\u786e!\");\n\t}\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\SmsCodeService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "//\tpublic static void main(String[] args) {\n//\t\tString s=\"<a style='width: 10px'> Title</a>\";\n//\t\tString regex=\"(?<=\\\\<|\\\\<\\\\/)a(?=\\\\>)\";\n//\t\tSystem.out.println(s.replaceAll(regex, \"b\"));\n//\n//\t\tString regex3=\t\"width: \\\\d+[.\\\\d+px]\";\n//\t\tSystem.out.println(s.replaceAll(regex3, \"width: auto\"));\n//\t}\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\tString s=\"<a style='width: 10px'> Title</a>\";\n\t\tString regex=\"(?<=\\\\<|\\\\<\\\\/)a(?=\\\\>|)|(?<=\\\\<|\\\\<\\\\/)a(?<=\\\\s+>)\";\n\t\tSystem.out.println(s.replaceAll(regex, \"b\"));\n\n\t\tString regex3=\t\"width: \\\\d+[.\\\\d+]px\";\n\t\tSystem.out.println(s.replaceAll(regex3, \"width: auto\"));\n\t}", "path": "middletier\\src\\test\\java\\com\\qiya\\test\\JsonTest.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * \u9a8c\u8bc1\u53d1\u9001\u65f6\u95f4\n * \n * @param sender\n */\n", "func_signal": "public boolean isSendCaptchaTime(String sender)", "code": "{\n\tList<Captcha> list = captchaDao.getCaptchBySender(sender);\n\tif (list.size() == 0) {\n\t\treturn false;\n\t}\n\tCaptcha captcha = list.get(0);\n\t// \u8fc7\u671f\u65f6\u95f4\u51cf\u53bb\u4e09\u5206\u949f\u7b49\u4e8e\n\tLong createtime = (captcha.getExpireTime().getTime()) / 1000 - exptime * 60;\n\tLong systime = System.currentTimeMillis() / 1000;\n\tLong diff = systime - createtime;\n\tif (diff <= 60 * intervaltime) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\SmsCodeService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * set sleep time to wait until load success\n *\n * @param sleepTime sleepTime\n * @return this\n */\n", "func_signal": "public SeleniumDownloader setSleepTime(int sleepTime)", "code": "{\n\tthis.sleepTime = sleepTime;\n\treturn this;\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\webmagic\\downloader\\SeleniumDownloader.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "// \u901a\u7528\u53c2\u6570\u8d4b\u503c\n", "func_signal": "protected void render(PageUI pu, ModelAndView model)", "code": "{\n\n    model.addObject(\"env\", this.sysService.getActiveProfile());\n\n    model.addObject(\"title\", pu.getPageTitle());\n    model.addObject(\"entity\", pu.getEntity());\n    model.addObject(\"action\", pu.getAction());\n    model.addObject(\"pageType\", pu.getPageType());\n    model.addObject(\"jsFile\", this.getJsFile(pu.getEntity(), pu.getAction()));\n    model.addObject(\"_navMainMenuData\", \"\"); // \u5f53\u524d\u7528\u6237\n\n    //String phone= SecurityContextHolder.getContext().getAuthentication().getName();\n//        List<Map<String,Object>> roleList=roleService.getRoleInfoByUser(userService.getUserInfo(phone).getId());\n//\n//\n//        List<Map<String,Object>> mapList=userRoleService.getMenu(roleList);\n//\n//        model.addAttribute(\"menu\",mapList);\n\n    model.addObject(\"userName\", \"\");\n}", "path": "boss\\src\\main\\java\\com\\qiya\\boss\\fwapi\\controller\\EntityPageController.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/*\n * \u83b7\u53d6\u6570\u636e\u6e90\u5217\u8868\uff1a\u5355\u5c42\n */\n", "func_signal": "public List<DataSourceOption> getList(String name, Map<String, String> requestParamMap)", "code": "{\n\tswitch (name) {\n\t\tcase \"Site\":\n\t\t\treturn siteService.getDataSourceList();\n\n\t\tdefault:\n\t\t\treturn super.getList(name ,requestParamMap);\n\t}\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\manager\\DataSourceManager.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * Configure the GhostDriver, and initialize a WebDriver instance. This part of code comes from GhostDriver. https://github.com/detro/ghostdriver/tree/master/test/java/src/test/java/ghostdriver\n *\n * @author bob.li.0718@gmail.com\n * @throws IOException\n */\n", "func_signal": "public void configure() throws IOException", "code": "{\n\t// Read config file\n\tsConfig = new Properties();\n\tString configFile = DEFAULT_CONFIG_FILE;\n\tif (System.getProperty(\"selenuim_config\") != null) {\n\t\tconfigFile = System.getProperty(\"selenuim_config\");\n\t}\n\tsConfig.load(new FileReader(configFile));\n\n\t// Prepare capabilities\n\tsCaps = new DesiredCapabilities();\n\tsCaps.setJavascriptEnabled(true);\n\tsCaps.setCapability(\"takesScreenshot\", false);\n\n\tString driver = sConfig.getProperty(\"driver\", DRIVER_PHANTOMJS);\n\n\t// Fetch PhantomJS-specific configuration parameters\n\tif (driver.equals(DRIVER_PHANTOMJS)) {\n\t\t// \"phantomjs_exec_path\"\n\t\tif (sConfig.getProperty(\"phantomjs_exec_path\") != null) {\n\t\t\tsCaps.setCapability(PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY, sConfig.getProperty(\"phantomjs_exec_path\"));\n\t\t} else {\n\t\t\tthrow new IOException(String.format(\"Property '%s' not set!\", PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY));\n\t\t}\n\t\t// \"phantomjs_driver_path\"\n\t\tif (sConfig.getProperty(\"phantomjs_driver_path\") != null) {\n\t\t\tSystem.out.println(\"Test will use an external GhostDriver\");\n\t\t\tsCaps.setCapability(PhantomJSDriverService.PHANTOMJS_GHOSTDRIVER_PATH_PROPERTY, sConfig.getProperty(\"phantomjs_driver_path\"));\n\t\t} else {\n\t\t\tSystem.out.println(\"Test will use PhantomJS internal GhostDriver\");\n\t\t}\n\t}\n\n\t// Disable \"web-security\", enable all possible \"ssl-protocols\" and\n\t// \"ignore-ssl-errors\" for PhantomJSDriver\n\t// sCaps.setCapability(PhantomJSDriverService.PHANTOMJS_CLI_ARGS, new\n\t// String[] {\n\t// \"--web-security=false\",\n\t// \"--ssl-protocol=any\",\n\t// \"--ignore-ssl-errors=true\"\n\t// });\n\n\tArrayList<String> cliArgsCap = new ArrayList<String>();\n\tcliArgsCap.add(\"--web-security=false\");\n\tcliArgsCap.add(\"--ssl-protocol=any\");\n\tcliArgsCap.add(\"--ignore-ssl-errors=true\");\n\tsCaps.setCapability(PhantomJSDriverService.PHANTOMJS_CLI_ARGS, cliArgsCap);\n\n\t// Control LogLevel for GhostDriver, via CLI arguments\n\tsCaps.setCapability(PhantomJSDriverService.PHANTOMJS_GHOSTDRIVER_CLI_ARGS, new String[] { \"--logLevel=\" + (sConfig.getProperty(\"phantomjs_driver_loglevel\") != null ? sConfig.getProperty(\"phantomjs_driver_loglevel\") : \"INFO\") });\n\n\t// String driver = sConfig.getProperty(\"driver\", DRIVER_PHANTOMJS);\n\n\t// Start appropriate Driver\n\tif (isUrl(driver)) {\n\t\tsCaps.setBrowserName(\"phantomjs\");\n\t\tmDriver = new RemoteWebDriver(new URL(driver), sCaps);\n\t} else if (driver.equals(DRIVER_FIREFOX)) {\n\t\tmDriver = new FirefoxDriver(sCaps);\n\t} else if (driver.equals(DRIVER_CHROME)) {\n\t\tmDriver = new ChromeDriver(sCaps);\n\t} else if (driver.equals(DRIVER_PHANTOMJS)) {\n\t\tmDriver = new PhantomJSDriver(sCaps);\n\t}\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\webmagic\\downloader\\WebDriverPool.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * set sleep time to wait until load success\n *\n * @param sleepTime sleepTime\n * @return this\n */\n", "func_signal": "public WeChatSeleniumDownloader setSleepTime(int sleepTime)", "code": "{\n\tthis.sleepTime = sleepTime;\n\treturn this;\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\webmagic\\downloader\\WeChatSeleniumDownloader.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * \u68c0\u9a8c\u53d1\u9001\u662f\u5426\u9891\u7e41\n * \n * @param sender\n * @return\n */\n", "func_signal": "public void checkSendCaptchaTime(String sender)", "code": "{\n\tif (isSendCaptchaTime(sender)) {\n\t\tthrow new CustomBizException(ApiCodeEnum.FAIL, \"\u9a8c\u8bc1\u7801\u53d1\u9001\u9891\u7e41!\");\n\t}\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\SmsCodeService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "// \u968f\u673a\u751f\u4ea7\u9a8c\u8bc1\u7801\n", "func_signal": "public String getCode()", "code": "{\n\tString salt = \"\";\n\tString[] code = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" };\n\tRandom rd = new Random();\n\tfor (int i = 0; i < 6; i++) {\n\t\tsalt = salt + code[rd.nextInt(code.length - 1)];\n\t}\n\treturn salt;\n}", "path": "middletier\\src\\main\\java\\com\\qiya\\middletier\\service\\SmsCodeService.java", "repo_name": "qiyaTech/javaCrawling", "stars": 306, "license": "None", "language": "java", "size": 95417}
{"docstring": "/**\n * Send an {@link android.util.Log#ERROR} log message.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n */\n", "func_signal": "public static int e(String tag, String msg)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.e(tag, msg);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send a {@link android.util.Log#INFO} log message and log the exception.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n * @param tr  An exception to log\n */\n", "func_signal": "public static int i(String tag, String msg, Throwable tr)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.i(tag, msg, tr);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * the url file need to create(no database record for this url file)\n *\n * @param url      file url\n * @param fileName file name\n * @param saveDir  saveDir\n * @param fileSize fileSize\n */\n", "func_signal": "public static void onDetectNewDownloadFile(final String url, final String fileName, final String saveDir, \n                                           final long fileSize, final OnDetectBigUrlFileListener \n                                                   nnDetectBigUrlFileListener)", "code": "{\n    if (nnDetectBigUrlFileListener == null) {\n        return;\n    }\n    Handler handler = new Handler(Looper.getMainLooper());\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            if (nnDetectBigUrlFileListener == null) {\n                return;\n            }\n            nnDetectBigUrlFileListener.onDetectNewDownloadFile(url, fileName, saveDir, fileSize);\n        }\n    });\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\listener\\OnDetectBigUrlFileListener.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send a {@link android.util.Log#DEBUG} log message and log the exception.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n * @param tr  An exception to log\n */\n", "func_signal": "public static int d(String tag, String msg, Throwable tr)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.d(tag, msg, tr);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send a {@link android.util.Log#WARN} log message and log the exception.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param tr  An exception to log\n */\n", "func_signal": "public static int w(String tag, Throwable tr)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.w(tag, tr);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * notifyMoveDownloadFileFailed\n */\n", "func_signal": "private void notifyMoveDownloadFileFailed(DownloadFileInfo downloadFileInfo, MoveDownloadFileFailReason \n        failReason, OnMoveDownloadFileListener onMoveDownloadFileListener)", "code": "{\n    // main thread notify caller\n    OnMoveDownloadFileListener.MainThreadHelper.onMoveDownloadFileFailed(downloadFileInfo, failReason, \n            onMoveDownloadFileListener);\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\file_move\\DownloadMoveManager.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * move a download\n *\n * @param url                        file url\n * @param newDirPath                 new dir path\n * @param onMoveDownloadFileListener OnMoveDownloadFilesListener impl\n */\n", "func_signal": "public void move(String url, final String newDirPath, final OnMoveDownloadFileListener onMoveDownloadFileListener)", "code": "{\n\n    final String finalUrl = url;\n\n    // the download task has been stopped\n    if (!mDownloadTaskPauseable.isDownloading(url)) {\n\n        Log.d(TAG, TAG + \".move \u4e0b\u8f7d\u4efb\u52a1\u5df2\u7ecf\u6682\u505c\uff0c\u53ef\u4ee5\u76f4\u63a5\u79fb\u52a8\uff0curl:\" + url);\n\n        singleMoveInternal(url, newDirPath, onMoveDownloadFileListener);\n    } else {\n\n        Log.d(TAG, TAG + \".move \u9700\u8981\u5148\u6682\u505c\u4e0b\u8f7d\u4efb\u52a1\u540e\u79fb\u52a8\uff0curl:\" + url);\n\n        // pause first\n        mDownloadTaskPauseable.pause(url, new OnStopFileDownloadTaskListener() {\n            @Override\n            public void onStopFileDownloadTaskSucceed(String url) {\n\n                Log.d(TAG, TAG + \".move \u6682\u505c\u4e0b\u8f7d\u4efb\u52a1\u6210\u529f\uff0c\u5f00\u59cb\u79fb\u52a8\uff0curl:\" + finalUrl);\n\n                singleMoveInternal(finalUrl, newDirPath, onMoveDownloadFileListener);\n            }\n\n            @Override\n            public void onStopFileDownloadTaskFailed(String url, StopDownloadFileTaskFailReason failReason) {\n\n                if (failReason != null) {\n                    if (StopDownloadFileTaskFailReason.TYPE_TASK_HAS_BEEN_STOPPED.equals(failReason.getType())) {\n                        // has been stopped, so can restart normally\n                        singleMoveInternal(finalUrl, newDirPath, onMoveDownloadFileListener);\n                        return;\n                    }\n                }\n\n                Log.d(TAG, TAG + \".move \u6682\u505c\u4e0b\u8f7d\u4efb\u52a1\u5931\u8d25\uff0c\u65e0\u6cd5\u79fb\u52a8\uff0curl:\" + finalUrl);\n\n                // otherwise error occur, notify caller\n                notifyMoveDownloadFileFailed(getDownloadFile(finalUrl), new OnMoveDownloadFileFailReason\n                        (finalUrl, failReason), onMoveDownloadFileListener);\n            }\n        });\n    }\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\file_move\\DownloadMoveManager.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send an {@link android.util.Log#INFO} log message.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n */\n", "func_signal": "public static int i(String tag, String msg)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.i(tag, msg);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send a {@link android.util.Log#WARN} log message and log the exception.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n * @param tr  An exception to log\n */\n", "func_signal": "public static int w(String tag, String msg, Throwable tr)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.w(tag, msg, tr);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send a {@link android.util.Log#VERBOSE} log message.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n */\n", "func_signal": "public static int v(String tag, String msg)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.v(tag, msg);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "// get model data(may come from server)\n", "func_signal": "private List<CustomVideoInfo> getModelData()", "code": "{\n\n    List<CustomVideoInfo> customVideoInfos = new ArrayList<CustomVideoInfo>();\n\n    String url1 = \"http://182.254.149.157/ftp/image/shop/product/\u513f\u7ae5\u82f1\u8bed\u5347\u534e&\uffe5.apk\";\n    CustomVideoInfo customVideoInfo1 = new CustomVideoInfo(1, url1, \"2015-10-11 13:20:12\", \"2015-10-11 14:10:50\");\n    customVideoInfos.add(customVideoInfo1);\n\n    String url2 = \"http://dldir1.qq.com/weixin/android/weixin638android680.apk\";\n    CustomVideoInfo customVideoInfo2 = new CustomVideoInfo(2, url2, \"2015-10-11 13:20:12\", \"2015-10-11 14:10:50\");\n    customVideoInfos.add(customVideoInfo2);\n\n    String url3 = \"http://dlsw.baidu.com/sw-search-sp/soft/e2/25726/iQIYIMedia_002_4.3.11.1447139777.dmg\";\n    CustomVideoInfo customVideoInfo3 = new CustomVideoInfo(1, url3, \"2015-10-11 13:20:12\", \"2015-10-11 14:10:50\");\n    customVideoInfos.add(customVideoInfo3);\n\n    return customVideoInfos;\n}", "path": "FileDownloaderDemo2\\src\\main\\java\\org\\wlf\\filedownloader_demo2\\custom_model\\CustomModelActivity.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * config RetryDownloadTimes\n *\n * @param retryDownloadTimes DownloadTaskSize at the same time, please set 0 to {@link\n *                           #MAX_RETRY_DOWNLOAD_TIMES}, if not set, default is {@link\n *                           #DEFAULT_RETRY_DOWNLOAD_TIMES}, set 0 means not retry\n * @return the builder\n */\n", "func_signal": "public BaseDownloadConfigBuilder configRetryDownloadTimes(int retryDownloadTimes)", "code": "{\n    if (retryDownloadTimes >= 0 && retryDownloadTimes <= MAX_RETRY_DOWNLOAD_TIMES) {\n        this.mRetryDownloadTimes = retryDownloadTimes;\n    } else if (retryDownloadTimes > MAX_RETRY_DOWNLOAD_TIMES) {\n        this.mRetryDownloadTimes = MAX_RETRY_DOWNLOAD_TIMES;\n    } else if (retryDownloadTimes < 0) {\n        this.mRetryDownloadTimes = 0;\n    } else {\n        Log.i(getClass().getSimpleName(), \"configRetryDownloadTimes \u914d\u7f6e\u4e0b\u8f7d\u5931\u8d25\u91cd\u8bd5\u6b21\u6570\u5931\u8d25\uff0cretryDownloadTimes\uff1a\" + \n                retryDownloadTimes);\n    }\n    return this;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\BaseDownloadConfigBuilder.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "// init FileDownloader\n", "func_signal": "private void initFileDownloader()", "code": "{\n\n    // 1.create FileDownloadConfiguration.Builder\n    Builder builder = new FileDownloadConfiguration.Builder(this);\n\n    // 2.config FileDownloadConfiguration.Builder\n    // config the download path\n    builder.configFileDownloadDir(Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator +\n            \"FileDownloader2\");\n    // builder.configFileDownloadDir(\"/storage/sdcard1/FileDownloader2\");\n\n    // allow 3 download task at the same time\n    builder.configDownloadTaskSize(3);\n\n    // config retry download times when failed\n    builder.configRetryDownloadTimes(5);\n\n    // enable debug mode\n    //builder.configDebugMode(true);\n\n    // config connect timeout\n    //builder.configConnectTimeout(25000); // 25s\n\n    // 3.init FileDownloader with the configuration\n    // build FileDownloadConfiguration with the builder\n    FileDownloadConfiguration configuration = builder.build();\n    FileDownloader.init(configuration);\n}", "path": "FileDownloaderDemo2\\src\\main\\java\\org\\wlf\\filedownloader_demo2\\FileDownloadApplication.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "// init ImageLoader\n", "func_signal": "private void initImageLoader()", "code": "{\n    // Create global configuration and initialize ImageLoader with this config\n    ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this).build();\n    ImageLoader.getInstance().init(config);\n}", "path": "FileDownloaderDemo2\\src\\main\\java\\org\\wlf\\filedownloader_demo2\\FileDownloadApplication.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * move a download\n */\n", "func_signal": "private void singleMoveInternal(String url, String newDirPath, OnMoveDownloadFileListener \n        onMoveDownloadFileListener)", "code": "{\n    // create a move download task\n    MoveDownloadFileTask moveDownloadFileTask = new MoveDownloadFileTask(url, newDirPath, mDownloadFileMover);\n    moveDownloadFileTask.setOnMoveDownloadFileListener(onMoveDownloadFileListener);\n    // run the task\n    addAndRunTask(moveDownloadFileTask);\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\file_move\\DownloadMoveManager.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * DetectUrlFileFailed\n *\n * @param url        file url\n * @param failReason fail reason\n */\n", "func_signal": "public static void onDetectUrlFileFailed(final String url, final DetectBigUrlFileFailReason failReason, final\nOnDetectBigUrlFileListener nnDetectBigUrlFileListener)", "code": "{\n    if (nnDetectBigUrlFileListener == null) {\n        return;\n    }\n    Handler handler = new Handler(Looper.getMainLooper());\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            if (nnDetectBigUrlFileListener == null) {\n                return;\n            }\n            nnDetectBigUrlFileListener.onDetectUrlFileFailed(url, failReason);\n        }\n    });\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\listener\\OnDetectBigUrlFileListener.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * config connect timeout\n *\n * @param connectTimeout please set {@link#MIN_CONNECT_TIMEOUT} to {@link#MAX_CONNECT_TIMEOUT}, if not set,\n *                       default is {@link#DEFAULT_CONNECT_TIMEOUT}, millisecond\n * @return the builder\n */\n", "func_signal": "public BaseDownloadConfigBuilder configConnectTimeout(int connectTimeout)", "code": "{\n    if (connectTimeout >= MIN_CONNECT_TIMEOUT && connectTimeout <= MAX_CONNECT_TIMEOUT) {\n        mConnectTimeout = connectTimeout;\n    } else if (connectTimeout > MAX_CONNECT_TIMEOUT) {\n        mConnectTimeout = MAX_CONNECT_TIMEOUT;\n    } else if (connectTimeout < MIN_CONNECT_TIMEOUT) {\n        mConnectTimeout = MIN_CONNECT_TIMEOUT;\n    } else {\n        Log.i(getClass().getSimpleName(), \"configConnectTimeout \u914d\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u5931\u8d25\uff0cconnectTimeout\uff1a\" + connectTimeout);\n    }\n\n    return this;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\BaseDownloadConfigBuilder.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send a {@link android.util.Log#WARN} log message.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n */\n", "func_signal": "public static int w(String tag, String msg)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.w(tag, msg);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Send a {@link android.util.Log#ERROR} log message and log the exception.\n *\n * @param tag Used to identify the source of a log message.  It usually identifies\n *            the class or activity where the log call occurs.\n * @param msg The message you would like logged.\n * @param tr  An exception to log\n */\n", "func_signal": "public static int e(String tag, String msg, Throwable tr)", "code": "{\n    if (sIsDebugMode) {\n        return android.util.Log.e(tag, msg, tr);\n    }\n    return -1;\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\base\\Log.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * the url file exist(it is in database record)\n *\n * @param url file url\n */\n", "func_signal": "public static void onDetectUrlFileExist(final String url, final OnDetectBigUrlFileListener \n        nnDetectBigUrlFileListener)", "code": "{\n    if (nnDetectBigUrlFileListener == null) {\n        return;\n    }\n    Handler handler = new Handler(Looper.getMainLooper());\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            if (nnDetectBigUrlFileListener == null) {\n                return;\n            }\n            nnDetectBigUrlFileListener.onDetectUrlFileExist(url);\n        }\n    });\n}", "path": "FileDownloader\\src\\main\\java\\org\\wlf\\filedownloader\\listener\\OnDetectBigUrlFileListener.java", "repo_name": "wlfcolin/file-downloader", "stars": 382, "license": "apache-2.0", "language": "java", "size": 11233}
{"docstring": "/**\n * Retrieve the Connection via JBoss' {@code getUnderlyingStatement} method.\n */\n", "func_signal": "@Override\npublic Statement getNativeStatement(Statement stmt) throws SQLException", "code": "{\n\tif (this.wrappedStatementClass.isAssignableFrom(stmt.getClass())) {\n\t\treturn (Statement) ReflectionUtils.invokeJdbcMethod(this.getUnderlyingStatementMethod, stmt);\n\t}\n\treturn stmt;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\support\\nativejdbc\\JBossNativeJdbcExtractor.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Create an array of MapSqlParameterSource objects populated with data from the\n * values passed in. This will define what is included in a batch operation.\n * @param valueMaps array of Maps containing the values to be used\n * @return an array of SqlParameterSource\n */\n", "func_signal": "public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps)", "code": "{\n\tMapSqlParameterSource[] batch = new MapSqlParameterSource[valueMaps.length];\n\tfor (int i = 0; i < valueMaps.length; i++) {\n\t\tMap<String, ?> valueMap = valueMaps[i];\n\t\tbatch[i] = new MapSqlParameterSource(valueMap);\n\t}\n\treturn batch;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\core\\namedparam\\SqlParameterSourceUtils.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Retrieve the Connection via JBoss' {@code getUnderlyingConnection} method.\n */\n", "func_signal": "@Override\nprotected Connection doGetNativeConnection(Connection con) throws SQLException", "code": "{\n\tif (this.wrappedConnectionClass.isAssignableFrom(con.getClass())) {\n\t\treturn (Connection) ReflectionUtils.invokeJdbcMethod(this.getUnderlyingConnectionMethod, con);\n\t}\n\treturn con;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\support\\nativejdbc\\JBossNativeJdbcExtractor.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Create a new SqlOutParameter.\n * @param name name of the parameter, as used in input and output maps\n * @param sqlType SQL type of the parameter according to java.sql.Types\n * @param typeName the type name of the parameter (optional)\n * @param sqlReturnType custom value handler for complex type (optional)\n */\n", "func_signal": "public SqlOutParameter(String name, int sqlType, String typeName, SqlReturnType sqlReturnType)", "code": "{\n\tsuper(name, sqlType, typeName);\n\tthis.sqlReturnType = sqlReturnType;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\core\\SqlOutParameter.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Add multiple scripts to execute to initialize or clean up the database.\n * @param scripts the scripts to execute; never {@code null}\n */\n", "func_signal": "public void addScripts(Resource... scripts)", "code": "{\n\tassertContentsOfScriptArray(scripts);\n\tgetScripts().addAll(Arrays.asList(scripts));\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Add a script to execute to initialize or clean up the database.\n * @param script the path to an SQL script; never {@code null}\n */\n", "func_signal": "public void addScript(Resource script)", "code": "{\n\tAssert.notNull(script, \"Script must not be null\");\n\tgetScripts().add(script);\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Construct a new {@code ResourceDatabasePopulator} with default settings\n * for the supplied scripts.\n * @param scripts the scripts to execute to initialize or clean up the database;\n * never {@code null}\n * @since 4.0.3\n */\n", "func_signal": "public ResourceDatabasePopulator(Resource... scripts)", "code": "{\n\tthis();\n\tsetScripts(scripts);\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Construct a new {@code ResourceDatabasePopulator} with the supplied values.\n * @param continueOnError flag to indicate that all failures in SQL should be\n * logged but not cause a failure\n * @param ignoreFailedDrops flag to indicate that a failed SQL {@code DROP}\n * statement can be ignored\n * @param sqlScriptEncoding the encoding for the supplied SQL scripts; may\n * be {@code null} or <em>empty</em> to indicate platform encoding\n * @param scripts the scripts to execute to initialize or clean up the database;\n * never {@code null}\n * @since 4.0.3\n */\n", "func_signal": "public ResourceDatabasePopulator(boolean continueOnError, boolean ignoreFailedDrops, String sqlScriptEncoding,\n\t\tResource... scripts)", "code": "{\n\tthis(scripts);\n\tthis.continueOnError = continueOnError;\n\tthis.ignoreFailedDrops = ignoreFailedDrops;\n\tsetSqlScriptEncoding(sqlScriptEncoding);\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Create a wrapped value if parameter has type information, plain object if not.\n * @param source the source of paramer values and type information\n * @param parameterName the name of the parameter\n * @return the value object\n */\n", "func_signal": "public static Object getTypedValue(SqlParameterSource source, String parameterName)", "code": "{\n\tint sqlType = source.getSqlType(parameterName);\n\tif (sqlType != SqlParameterSource.TYPE_UNKNOWN) {\n\t\tif (source.getTypeName(parameterName) != null) {\n\t\t\treturn new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName));\n\t\t}\n\t\telse {\n\t\t\treturn new SqlParameterValue(sqlType, source.getValue(parameterName));\n\t\t}\n\t}\n\telse {\n\t\treturn source.getValue(parameterName);\n\t}\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\core\\namedparam\\SqlParameterSourceUtils.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Set the scripts to execute to initialize or clean up the database,\n * replacing any previously added scripts.\n * @param scripts the scripts to execute; never {@code null}\n */\n", "func_signal": "public void setScripts(Resource... scripts)", "code": "{\n\tassertContentsOfScriptArray(scripts);\n\t// Ensure that the list is modifiable\n\tthis.scripts = new ArrayList<Resource>(Arrays.asList(scripts));\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * This constructor retrieves JBoss JDBC wrapper classes,\n * so we can get the underlying vendor connection using reflection.\n */\n", "func_signal": "public JBossNativeJdbcExtractor()", "code": "{\n\tString prefix = JBOSS_JCA_PREFIX;\n\ttry {\n\t\t// trying JBoss 7 jca package first...\n\t\tthis.wrappedConnectionClass = getClass().getClassLoader().loadClass(prefix + \"WrappedConnection\");\n\t}\n\tcatch (ClassNotFoundException ex) {\n\t\t// JBoss 7 jca package not found -> try traditional resource package.\n\t\tprefix = JBOSS_RESOURCE_PREFIX;\n\t\ttry {\n\t\t\tthis.wrappedConnectionClass = getClass().getClassLoader().loadClass(prefix + \"WrappedConnection\");\n\t\t}\n\t\tcatch (ClassNotFoundException ex2) {\n\t\t\tthrow new IllegalStateException(\"Could not initialize JBossNativeJdbcExtractor: neither JBoss 7's [\" +\n\t\t\t\t\tJBOSS_JCA_PREFIX + \".WrappedConnection] nor traditional JBoss [\" + JBOSS_RESOURCE_PREFIX +\n\t\t\t\t\t\".WrappedConnection] found\");\n\t\t}\n\t}\n\ttry {\n\t\tthis.wrappedStatementClass = getClass().getClassLoader().loadClass(prefix + \"WrappedStatement\");\n\t\tthis.wrappedResultSetClass = getClass().getClassLoader().loadClass(prefix + \"WrappedResultSet\");\n\t\tthis.getUnderlyingConnectionMethod =\n\t\t\tthis.wrappedConnectionClass.getMethod(\"getUnderlyingConnection\", (Class[]) null);\n\t\tthis.getUnderlyingStatementMethod =\n\t\t\tthis.wrappedStatementClass.getMethod(\"getUnderlyingStatement\", (Class[]) null);\n\t\tthis.getUnderlyingResultSetMethod =\n\t\t\tthis.wrappedResultSetClass.getMethod(\"getUnderlyingResultSet\", (Class[]) null);\n\t}\n\tcatch (Exception ex) {\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"Could not initialize JBossNativeJdbcExtractor because of missing JBoss API methods/classes: \" + ex);\n\t}\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\support\\nativejdbc\\JBossNativeJdbcExtractor.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Create a Map of case insensitive parameter names together with the original name.\n * @param parameterSource the source of paramer names\n * @return the Map that can be used for case insensitive matching of parameter names\n */\n", "func_signal": "public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource)", "code": "{\n\tMap<String, String> caseInsensitiveParameterNames = new HashMap<String, String>();\n\tif (parameterSource instanceof BeanPropertySqlParameterSource) {\n\t\tString[] propertyNames = ((BeanPropertySqlParameterSource)parameterSource).getReadablePropertyNames();\n\t\tfor (int i = 0; i < propertyNames.length; i++) {\n\t\t\tString name = propertyNames[i];\n\t\t\tcaseInsensitiveParameterNames.put(name.toLowerCase(), name);\n\t\t}\n\t}\n\telse if (parameterSource instanceof MapSqlParameterSource) {\n\t\tfor (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {\n\t\t\tcaseInsensitiveParameterNames.put(name.toLowerCase(), name);\n\t\t}\n\t}\n\treturn caseInsensitiveParameterNames;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\core\\namedparam\\SqlParameterSourceUtils.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Set the end delimiter that identifies block comments within the SQL\n * scripts.\n * <p>Defaults to <code>\"*&#47;\"</code>.\n * @param blockCommentEndDelimiter the end delimiter for block comments;\n * never {@code null} or empty\n * @since 4.0.3\n * @see #setBlockCommentStartDelimiter\n */\n", "func_signal": "public void setBlockCommentEndDelimiter(String blockCommentEndDelimiter)", "code": "{\n\tAssert.hasText(blockCommentEndDelimiter, \"BlockCommentEndDelimiter must not be null or empty\");\n\tthis.blockCommentEndDelimiter = blockCommentEndDelimiter;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Execute this {@code ResourceDatabasePopulator} against the given\n * {@link DataSource}.\n * <p>Delegates to {@link DatabasePopulatorUtils#execute}.\n * @param dataSource the {@code DataSource} to execute against; never {@code null}\n * @throws ScriptException if an error occurs\n * @since 4.1\n * @see #populate(Connection)\n */\n", "func_signal": "public void execute(DataSource dataSource) throws ScriptException", "code": "{\n\tAssert.notNull(dataSource, \"DataSource must not be null\");\n\tDatabasePopulatorUtils.execute(this, dataSource);\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Create a new instance of the {@link SingleDataSourceLookup} class.\n * @param dataSource the single {@link DataSource} to wrap\n */\n", "func_signal": "public SingleDataSourceLookup(DataSource dataSource)", "code": "{\n\tAssert.notNull(dataSource, \"DataSource must not be null\");\n\tthis.dataSource = dataSource;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\lookup\\SingleDataSourceLookup.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * {@inheritDoc}\n * @see #execute(DataSource)\n */\n", "func_signal": "@Override\npublic void populate(Connection connection) throws ScriptException", "code": "{\n\tAssert.notNull(connection, \"Connection must not be null\");\n\tfor (Resource script : getScripts()) {\n\t\tScriptUtils.executeSqlScript(connection, encodeScript(script), this.continueOnError,\n\t\t\tthis.ignoreFailedDrops, this.commentPrefix, this.separator, this.blockCommentStartDelimiter,\n\t\t\tthis.blockCommentEndDelimiter);\n\t}\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * {@link EncodedResource} is not a sub-type of {@link Resource}. Thus we\n * always need to wrap each script resource in an {@code EncodedResource}\n * using the configured {@linkplain #setSqlScriptEncoding encoding}.\n * @param script the script to wrap; never {@code null}\n */\n", "func_signal": "private EncodedResource encodeScript(Resource script)", "code": "{\n\tAssert.notNull(script, \"Script must not be null\");\n\treturn new EncodedResource(script, this.sqlScriptEncoding);\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Retrieve the Connection via JBoss' {@code getUnderlyingResultSet} method.\n */\n", "func_signal": "@Override\npublic ResultSet getNativeResultSet(ResultSet rs) throws SQLException", "code": "{\n\tif (this.wrappedResultSetClass.isAssignableFrom(rs.getClass())) {\n\t\treturn (ResultSet) ReflectionUtils.invokeJdbcMethod(this.getUnderlyingResultSetMethod, rs);\n\t}\n\treturn rs;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\support\\nativejdbc\\JBossNativeJdbcExtractor.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Create an array of BeanPropertySqlParameterSource objects populated with data\n * from the values passed in. This will define what is included in a batch operation.\n * @param beans object array of beans containing the values to be used\n * @return an array of SqlParameterSource\n */\n", "func_signal": "public static SqlParameterSource[] createBatch(Object[] beans)", "code": "{\n\tBeanPropertySqlParameterSource[] batch = new BeanPropertySqlParameterSource[beans.length];\n\tfor (int i = 0; i < beans.length; i++) {\n\t\tObject bean = beans[i];\n\t\tbatch[i] = new BeanPropertySqlParameterSource(bean);\n\t}\n\treturn batch;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\core\\namedparam\\SqlParameterSourceUtils.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * Set the start delimiter that identifies block comments within the SQL\n * scripts.\n * <p>Defaults to {@code \"/*\"}.\n * @param blockCommentStartDelimiter the start delimiter for block comments;\n * never {@code null} or empty\n * @since 4.0.3\n * @see #setBlockCommentEndDelimiter\n */\n", "func_signal": "public void setBlockCommentStartDelimiter(String blockCommentStartDelimiter)", "code": "{\n\tAssert.hasText(blockCommentStartDelimiter, \"BlockCommentStartDelimiter must not be null or empty\");\n\tthis.blockCommentStartDelimiter = blockCommentStartDelimiter;\n}", "path": "test-resources\\sample-codebases\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\ResourceDatabasePopulator.java", "repo_name": "ftomassetti/effectivejava", "stars": 503, "license": "apache-2.0", "language": "java", "size": 14595}
{"docstring": "/**\n * @ast method \n * \n */\n", "func_signal": "public EmptyType(Modifiers p0, beaver.Symbol p1, Opt<Access> p2, List<BodyDecl> p3)", "code": "{\n  setChild(p0, 0);\n  setID(p1);\n  setChild(p2, 1);\n  setChild(p3, 2);\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * Utility method for adding an edge to maps representing the CFG.\n * \n * @param unitToSuccs The {@link Map} from {@link Unit}s to {@link List}s\n *                    of their successors.\n *\n * @param unitToPreds The {@link Map} from {@link Unit}s to {@link List}s\n *                    of their successors.\n *\n * @param head     The {@link Unit} from which the edge starts.\n *\n * @param tail     The {@link Unit} to which the edge flows.\n */\n", "func_signal": "protected void addEdge(Map<Unit,List<Unit>> unitToSuccs, Map<Unit,List<Unit>> unitToPreds,\n\t\t\t   Unit head, Unit tail)", "code": "{\n\tList<Unit> headsSuccs = unitToSuccs.get(head);\n\tif (headsSuccs == null) {\n\t    headsSuccs = new ArrayList<Unit>(3); // We expect this list to\n\t\t\t\t\t   // remain short.\n\t    unitToSuccs.put(head, headsSuccs);\n\t}\n\tif (! headsSuccs.contains(tail)) {\n\t    headsSuccs.add(tail);\n\t    List<Unit> tailsPreds = unitToPreds.get(tail);\n\t    if (tailsPreds == null) {\n\t\ttailsPreds = new ArrayList<Unit>();\n\t\tunitToPreds.put(tail, tailsPreds);\n\t    }\n\t    tailsPreds.add(head);\n\t}\n}", "path": "soot\\src\\soot\\toolkits\\graph\\UnitGraph.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * @apilevel low-level\n * @ast method \n * \n */\n", "func_signal": "public void addBodyDeclNoTransform(BodyDecl node)", "code": "{\n  List<BodyDecl> list = getBodyDeclListNoTransform();\n  list.addChild(node);\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/***\n * Static method to create AndroidMethod from Soot method signature\n * \n * @param signature The Soot method signature\n * @return The new AndroidMethod object\n */\n", "func_signal": "public static AndroidMethod createFromSignature(String signature)", "code": "{\n\tif (!signature.startsWith(\"<\"))\n\t\tsignature = \"<\" + signature;\n\tif (!signature.endsWith(\">\"))\n\t\tsignature = signature + \">\";\n\t\n\tSootMethodAndClass smac = SootMethodRepresentationParser.v()\n\t\t\t.parseSootMethodString(signature);\n\treturn new AndroidMethod(smac.getMethodName(), smac.getParameters(),\n\t\t\tsmac.getReturnType(), smac.getClassName());\n}", "path": "soot-infoflow-android\\src\\soot\\jimple\\infoflow\\android\\data\\AndroidMethod.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * @ast method \n * @aspect PrettyPrint\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java1.4Frontend/PrettyPrint.jadd:216\n */\n", "func_signal": "public void toString(StringBuffer s)", "code": "{\n  s.append(indent());\n  s.append(\";\");\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/*\n  Nomair A. Naeem 19-FEB-2005\n  Added to support aggregation of conditions\n*/\n", "func_signal": "public void replace(SETNodeLabel label,ASTCondition condition, List<Object> body)", "code": "{\n\tthis.body=body;\n\tsubBodies= new ArrayList<Object>();\n\tsubBodies.add(body);\n\tset_Condition(condition);\n\tset_Label(label);\n}", "path": "soot\\src\\soot\\dava\\internal\\AST\\ASTIfNode.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n *   Performs the work that is required to construct any sort of \n *   <tt>UnitGraph</tt>.\n *\n *   @param body The body of the method for which to construct a \n *               control flow graph.\n */\n", "func_signal": "protected UnitGraph( Body body)", "code": "{\n\tthis.body = body;\n\tunitChain = body.getUnits();\n    method = body.getMethod();\n    if(Options.v().verbose())\n\t    G.v().out.println(\"[\" + method.getName() + \"]     Constructing \" + \n\t\t\t      this.getClass().getName() + \"...\");\n  \n}", "path": "soot\\src\\soot\\toolkits\\graph\\UnitGraph.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * Initializes the child array to the correct size.\n * Initializes List and Opt nta children.\n * @apilevel internal\n * @ast method\n * @ast method \n * \n */\n", "func_signal": "public void init$Children()", "code": "{\n  children = new ASTNode[3];\n  setChild(new Opt(), 1);\n  setChild(new List(), 2);\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * Replaces the BodyDecl list element at index {@code i} with the new node {@code node}.\n * @param node The new node to replace the old list element.\n * @param i The list index of the node to be replaced.\n * @apilevel high-level\n * @ast method \n * \n */\n", "func_signal": "public void setBodyDecl(BodyDecl node, int i)", "code": "{\n  List<BodyDecl> list = getBodyDeclList();\n  list.setChild(node, i);\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/* End of public methods. */\n/* End of package methods. */\n", "func_signal": "private boolean computeP2Set( final VarNode v, ArrayList<VarNode> path )", "code": "{\n    boolean ret = false;\n\n    if( path.contains( v ) ) {\n//            for( Iterator<VarNode> nIt = path.iterator(); nIt.hasNext(); ) {\n//                final Node n = nIt.next();\n    //        if( n != v ) n.mergeWith( v );\n//            }\n        return false;\n    }\n\n    if( currentIteration == varNodeToIteration.get(v) ) return false;\n    varNodeToIteration.put(v, currentIteration);\n\n    path.add( v );\n    if( v.getP2Set().isEmpty() ) {\n        Node[] srcs = pag.allocInvLookup( v );\n        for (Node element : srcs) {\n            ret = v.makeP2Set().add( element ) | ret;\n        }\n    }\n    {\n        Node[] srcs = pag.simpleInvLookup( v );\n        for (Node element : srcs) {\n            VarNode src = (VarNode) element;\n            ret = computeP2Set( src, path ) | ret;\n            ret = v.makeP2Set().addAll( src.getP2Set(), null ) | ret;\n        }\n    }\n    {\n        Node[] srcs = pag.loadInvLookup( v );\n        for (Node element : srcs) {\n            final FieldRefNode src = (FieldRefNode) element;\n            ret = src.getBase().getP2Set().forall( new P2SetVisitor() {\n            public final void visit( Node n ) {\n                AllocNode an = (AllocNode) n;\n                AllocDotField adf = \n                    pag.makeAllocDotField( an, src.getField() );\n                returnValue = v.makeP2Set().addAll( adf.getP2Set(), null ) | returnValue;\n            }} ) | ret;\n        }\n    }\n    path.remove(path.size()-1);\n    return ret;\n}", "path": "soot\\src\\soot\\jimple\\spark\\solver\\PropCycle.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/*\n  Nomair A Naeem 20-FEB-2005\n  Added for UselessLabeledBlockRemover\n*/\n", "func_signal": "public void replaceBody(List<Object> body)", "code": "{\n\tthis.body=body;\n\tsubBodies=new ArrayList<Object>();\n\tsubBodies.add(body);\n}", "path": "soot\\src\\soot\\dava\\internal\\AST\\ASTIfNode.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * @ast method \n * \n */\n", "func_signal": "public EmptyType(Modifiers p0, String p1, Opt<Access> p2, List<BodyDecl> p3)", "code": "{\n  setChild(p0, 0);\n  setID(p1);\n  setChild(p2, 1);\n  setChild(p3, 2);\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n *  Look for a path in graph,  from def to use. \n *  This path has to lie inside an extended basic block \n *  (and this property implies uniqueness.). The path returned \n *   includes from and to.\n *\n *  @param from start point for the path.\n *  @param to   end point for the path. \n *  @return null if there is no such path.\n */\n", "func_signal": "public List<Unit> getExtendedBasicBlockPathBetween(Unit from, Unit to)", "code": "{\n      UnitGraph g = this;\n      \n    // if this holds, we're doomed to failure!!!\n    if (g.getPredsOf(to).size() > 1)\n      return null;\n\n    // pathStack := list of succs lists\n    // pathStackIndex := last visited index in pathStack\n    LinkedList<Unit> pathStack = new LinkedList<Unit>();\n    LinkedList<Integer> pathStackIndex = new LinkedList<Integer>();\n\n    pathStack.add(from);\n    pathStackIndex.add(new Integer(0));\n\n    int psiMax = (g.getSuccsOf(pathStack.get(0))).size();\n    int level = 0;\n    while (pathStackIndex.get(0).intValue() != psiMax)\n      {\n        int p = (pathStackIndex.get(level)).intValue();\n\n        List<Unit> succs = g.getSuccsOf((pathStack.get(level)));\n        if (p >= succs.size())\n          {\n            // no more succs - backtrack to previous level.\n\n            pathStack.remove(level);\n            pathStackIndex.remove(level);\n\n            level--;\n            int q = pathStackIndex.get(level).intValue();\n            pathStackIndex.set(level, new Integer(q+1));\n            continue;\n          }\n\n        Unit betweenUnit = (Unit)(succs.get(p));\n\n        // we win!\n        if (betweenUnit == to)\n          {\n            pathStack.add(to);\n            return pathStack;\n          }\n\n        // check preds of betweenUnit to see if we should visit its kids.\n        if (g.getPredsOf(betweenUnit).size() > 1)\n          {\n            pathStackIndex.set(level, new Integer(p+1));\n            continue;\n          }\n\n        // visit kids of betweenUnit.\n        level++;\n        pathStackIndex.add(new Integer(0));\n        pathStack.add(betweenUnit);\n      }\n    return null;\n  }", "path": "soot\\src\\soot\\toolkits\\graph\\UnitGraph.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * Append an element to the BodyDecl list.\n * @param node The element to append to the BodyDecl list.\n * @apilevel high-level\n * @ast method \n * \n */\n", "func_signal": "public void addBodyDecl(BodyDecl node)", "code": "{\n  List<BodyDecl> list = (parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();\n  list.addChild(node);\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/*\n  Nomair A. Naeem 17-FEB-05\n  Needed because of change of grammar of condition being stored as a ASTCondition rather \n  than the ConditionExpr which was the case before\n*/\n", "func_signal": "public ASTIfNode( SETNodeLabel label, ASTCondition condition, List<Object> body)", "code": "{\n\tsuper( label, condition);\n\tthis.body = body;\n\n\tsubBodies.add( body);\n}", "path": "soot\\src\\soot\\dava\\internal\\AST\\ASTIfNode.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/** Actually does the propagation. */\n", "func_signal": "public final void propagate()", "code": "{\n    ofcg = pag.getOnFlyCallGraph();\n    boolean verbose = pag.getOpts().verbose();\n    Collection<VarNode> bases = new HashSet<VarNode>();\n    for( FieldRefNode frn : pag.getFieldRefNodeNumberer() ) {\n        bases.add( frn.getBase() );\n    }\n    bases = new ArrayList<VarNode>( bases );\n    int iteration = 0;\n    boolean changed;\n    boolean finalIter = false;\n\tdo {\n        changed = false;\n        iteration++;\n        currentIteration = new Integer( iteration );\n        if( verbose ) G.v().out.println( \"Iteration: \"+iteration );\n        for (VarNode v : bases) {\n            changed = computeP2Set( (VarNode) v.getReplacement(), new ArrayList<VarNode>() ) | changed;\n        }\n        if( ofcg != null ) throw new RuntimeException( \"NYI\" );\n        if( verbose ) G.v().out.println( \"Processing stores\" );\n        for (Object object : pag.storeSources()) {\n            final VarNode src = (VarNode) object;\n            Node[] targets = pag.storeLookup( src );\n            for (Node element0 : targets) {\n                final FieldRefNode target = (FieldRefNode) element0;\n                changed = target.getBase().makeP2Set().forall( new P2SetVisitor() {\n                public final void visit( Node n ) {\n                        AllocDotField nDotF = pag.makeAllocDotField( \n                            (AllocNode) n, target.getField() );\n                        nDotF.makeP2Set().addAll( src.getP2Set(), null );\n                    }\n                } ) | changed;\n            }\n        }\n        if( !changed && !finalIter ) {\n            finalIter = true;\n            if( verbose ) G.v().out.println( \"Doing full graph\" );\n            bases = new ArrayList<VarNode>(pag.getVarNodeNumberer().size());\n            for( VarNode v : pag.getVarNodeNumberer() ) {\n                bases.add( v );\n            }\n            changed = true;\n        }\n\t} while( changed );\n}", "path": "soot\\src\\soot\\jimple\\spark\\solver\\PropCycle.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * <p>Utility method used in the construction of {@link UnitGraph}s, to be\n * called only after the unitToPreds and unitToSuccs maps have\n * been built.</p>\n *\n * <p><code>UnitGraph</code> provides an implementation of\n * <code>buildHeadsAndTails()</code> which defines the graph's set\n * of heads to include the first {@link Unit} in the graph's body,\n * together with any other <tt>Unit</tt> which has no predecessors.\n * It defines the graph's set of tails to include all\n * <tt>Unit</tt>s with no successors.  Subclasses of\n * <code>UnitGraph</code> may override this method to change the\n * criteria for classifying a node as a head or tail.</p>\n */\n", "func_signal": "protected void buildHeadsAndTails()", "code": "{\n\tList<Unit> tailList = new ArrayList<Unit>();\n\tList<Unit> headList = new ArrayList<Unit>();\n\n\tfor (Unit s : unitChain ) {\n\t    List<Unit> succs = unitToSuccs.get(s);\n\t    if(succs.isEmpty()) {\n\t\ttailList.add(s);\n\t    }\n\t    List<Unit> preds = unitToPreds.get(s);\n\t    if(preds.isEmpty()) {\n\t\theadList.add(s);\n\t    }\n\t}\n\n\t// Add the first Unit, even if it is the target of\n\t// a branch.\n\tif (!unitChain.isEmpty()) {\n\t\tUnit entryPoint = (Unit) unitChain.getFirst();\n\t\tif (! headList.contains(entryPoint)) {\n\t\t    headList.add(entryPoint);\n\t\t}\n\t}\n\n\ttails = Collections.unmodifiableList(tailList);\n\theads = Collections.unmodifiableList(headList);\n}", "path": "soot\\src\\soot\\toolkits\\graph\\UnitGraph.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * Utility method that produces a new map from the {@link Unit}s\n * of this graph's body to the union of the values stored in the\n * two argument {@link Map}s, used to combine the maps of\n * exceptional and unexceptional predecessors and successors into\n * maps of all predecessors and successors. The values stored in\n * both argument maps must be {@link List}s of {@link Unit}s,\n * which are assumed not to contain any duplicate <tt>Unit</tt>s.\n * \n * @param mapA      The first map to be combined. \n *\n * @param mapB\tThe second map to be combined.\n */\n", "func_signal": "protected Map<Unit,List<Unit>> combineMapValues\n\t(Map<Unit,List<Unit>> mapA, Map<Unit,List<Unit>> mapB)", "code": "{\n\t// The duplicate screen \n\tMap<Unit,List<Unit>> result = new HashMap<Unit,List<Unit>>(mapA.size() * 2 + 1, 0.7f);\n\tfor (Unit unit : unitChain) {\n\t    List<Unit> listA = mapA.get(unit);\n\t    if (listA == null) {\n\t\tlistA = Collections.emptyList();\n\t    }\n\t    List<Unit> listB = mapB.get(unit);\n\t    if (listB == null) {\n\t\tlistB = Collections.emptyList();\n\t    }\n\n\t    int resultSize = listA.size() + listB.size();\n\t    if (resultSize == 0) {\n\t\tresult.put(unit, Collections.<Unit>emptyList());\n\t    } else {\n\t\tList<Unit> resultList = new ArrayList<Unit>(resultSize);\n\t\tList<Unit> list = null;\n\t\t// As a minor optimization of the duplicate screening, \n\t\t// copy the longer list first.\n\t\tif (listA.size() >= listB.size()) {\n\t\t    resultList.addAll(listA);\n\t\t    list = listB;\n\t\t} else {\n\t\t    resultList.addAll(listB);\n\t\t    list = listA;\n\t\t}\n\t\tfor (Unit element : list) {\n\t\t    // It is possible for there to be both an exceptional\n\t\t    // and an unexceptional edge connecting two Units\n\t\t    // (though probably not in a class generated by\n\t\t    // javac), so we need to screen for duplicates. On the\n\t\t    // other hand, we expect most of these lists to have\n\t\t    // only one or two elements, so it doesn't seem worth\n\t\t    // the cost to build a Set to do the screening.\n\t\t    if (! resultList.contains(element)) {\n\t\t\tresultList.add(element);\n\t\t    }\n\t\t}\n\t\tresult.put(unit, Collections.unmodifiableList(resultList));\n\t    }\n\t}\n\treturn result;\n}", "path": "soot\\src\\soot\\toolkits\\graph\\UnitGraph.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * Utility method for <tt>UnitGraph</tt> constructors. It computes\n * the edges corresponding to unexceptional control flow.\n *\n * @param unitToSuccs A {@link Map} from {@link Unit}s to \n *                    {@link List}s of {@link Unit}s. This is\n *\t                  an ``out parameter''; callers must pass an empty\n *                    {@link Map}. <tt>buildUnexceptionalEdges</tt> will\n *                    add a mapping for every <tt>Unit</tt> in the\n *                    body to a list of its unexceptional successors.\n *\n * @param unitToPreds A {@link Map} from {@link Unit}s to \n *                    {@link List}s of {@link Unit}s. This is an \n *                    ``out parameter''; callers must pass an empty \n *                    {@link Map}. <tt>buildUnexceptionalEdges</tt> will\n *                    add a mapping for every <tt>Unit</tt> in the body\n *                    to a list of its unexceptional predecessors.\n */\n", "func_signal": "protected void buildUnexceptionalEdges(Map<Unit,List<Unit>> unitToSuccs, Map<Unit,List<Unit>> unitToPreds)", "code": "{\n\n\t// Initialize the predecessor sets to empty\n\tfor (Unit u : unitChain) {\n\t    unitToPreds.put(u, new ArrayList<Unit>());\n\t}\n\t\n\tIterator<Unit> unitIt = unitChain.iterator();\n\tUnit currentUnit, nextUnit;\n            \n\tnextUnit = unitIt.hasNext() ? (Unit) unitIt.next(): null;\n            \n\twhile(nextUnit != null) {\n\t    currentUnit = nextUnit;\n\t    nextUnit = unitIt.hasNext() ? (Unit) unitIt.next(): null;\n                \n\t    List<Unit> successors = new ArrayList<Unit>();\n                \n\t    if( currentUnit.fallsThrough() ) {\n\t\t// Add the next unit as the successor\n\t\tif(nextUnit != null) {\n\t\t    successors.add(nextUnit);\n\t\t    unitToPreds.get(nextUnit).add(currentUnit);\n\t\t}\n\t    }\n                    \n\t    if( currentUnit.branches() ) {\n\t\tfor (UnitBox targetBox : currentUnit.getUnitBoxes()) {\n\t\t    Unit target = targetBox.getUnit();\n\t\t    // Arbitrary bytecode can branch to the same\n\t\t    // target it falls through to, so we screen for duplicates:\n\t\t    if (! successors.contains(target)) {\n\t\t\tsuccessors.add(target);\n\t\t\tList<Unit> preds = unitToPreds.get(target);\n\t\t\tif (preds == null)\n\t\t\t\tthrow new RuntimeException(\"Unit graph contains jump to non-existing target\");\n\t\t\tpreds.add(currentUnit);\n\t\t    }\n\t\t}\n\t    }\n\n\t    // Store away successors\n\t    unitToSuccs.put(currentUnit, successors);\n\t}\n}", "path": "soot\\src\\soot\\toolkits\\graph\\UnitGraph.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * JastAdd-internal setter for lexeme ID using the Beaver parser.\n * @apilevel internal\n * @ast method \n * \n */\n", "func_signal": "public void setID(beaver.Symbol symbol)", "code": "{\n  if(symbol.value != null && !(symbol.value instanceof String))\n    throw new UnsupportedOperationException(\"setID is only valid for String lexemes\");\n  tokenString_ID = (String)symbol.value;\n  IDstart = symbol.getStart();\n  IDend = symbol.getEnd();\n}", "path": "soot\\generated\\jastadd\\soot\\JastAddJ\\EmptyType.java", "repo_name": "flankerhqd/JAADAS", "stars": 333, "license": "other", "language": "java", "size": 52643}
{"docstring": "/**\n * Links the visualizer to a player\n * @param player - MediaPlayer instance to link to\n */\n", "func_signal": "public void link(MediaPlayer player)", "code": "{\n  if(player == null)\n  {\n    throw new NullPointerException(\"Cannot link to null MediaPlayer\");\n  }\n\n  // Create the Visualizer object and attach it to our media player.\n  mVisualizer = new Visualizer(player.getAudioSessionId());\n  mVisualizer.setCaptureSize(Visualizer.getCaptureSizeRange()[1]);\n\n  // Pass through Visualizer data to VisualizerView\n  Visualizer.OnDataCaptureListener captureListener = new Visualizer.OnDataCaptureListener()\n  {\n    @Override\n    public void onWaveFormDataCapture(Visualizer visualizer, byte[] bytes,\n        int samplingRate)\n    {\n      updateVisualizer(bytes);\n    }\n\n    @Override\n    public void onFftDataCapture(Visualizer visualizer, byte[] bytes,\n        int samplingRate)\n    {\n      updateVisualizerFFT(bytes);\n    }\n  };\n\n  mVisualizer.setDataCaptureListener(captureListener,\n      Visualizer.getMaxCaptureRate() / 2, true, true);\n\n  // Enabled Visualizer and disable when we're done with the stream\n  mVisualizer.setEnabled(true);\n  player.setOnCompletionListener(new MediaPlayer.OnCompletionListener()\n  {\n    @Override\n    public void onCompletion(MediaPlayer mediaPlayer)\n    {\n      mVisualizer.setEnabled(false);\n    }\n  });\n}", "path": "lib\\src\\com\\skd\\androidrecording\\visualizer\\VisualizerView.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "/**\n * Pass FFT data to the visualizer. Typically this will be obtained from the\n * Android Visualizer.OnDataCaptureListener call back. See\n * {@link Visualizer.OnDataCaptureListener#onFftDataCapture }\n * @param bytes\n */\n", "func_signal": "public void updateVisualizerFFT(byte[] bytes)", "code": "{\n  mFFTBytes = bytes;\n  invalidate();\n}", "path": "lib\\src\\com\\skd\\androidrecording\\visualizer\\VisualizerView.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// return a string representation of the invoking Complex object\n", "func_signal": "public String toString()", "code": "{\n    if (im == 0) return re + \"\";\n    if (re == 0) return im + \"i\";\n    if (im <  0) return re + \" - \" + (-im) + \"i\";\n    return re + \" + \" + im + \"i\";\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// create a new object with the given real and imaginary parts\n", "func_signal": "public Complex(double real, double imag)", "code": "{\n    re = real;\n    im = imag;\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// compute the inverse FFT of x[], assuming its length is a power of 2\n", "func_signal": "public static Complex[] ifft(Complex[] x)", "code": "{\n    int N = x.length;\n    Complex[] y = new Complex[N];\n\n    // take conjugate\n    for (int i = 0; i < N; i++) {\n        y[i] = x[i].conjugate();\n    }\n\n    // compute forward FFT\n    y = fft(y);\n\n    // take conjugate again\n    for (int i = 0; i < N; i++) {\n        y[i] = y[i].conjugate();\n    }\n\n    // divide by N\n    for (int i = 0; i < N; i++) {\n        y[i] = y[i].times(1.0 / N);\n    }\n\n    return y;\n\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\FFT.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "/**\n * Call to release the resources used by VisualizerView. Like with the\n * MediaPlayer it is good practice to call this method\n */\n", "func_signal": "public void release()", "code": "{\n  if (mVisualizer != null) {\n  \tmVisualizer.release();\n  }\n}", "path": "lib\\src\\com\\skd\\androidrecording\\visualizer\\VisualizerView.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// return a / b\n", "func_signal": "public Complex divides(Complex b)", "code": "{\n    Complex a = this;\n    return a.times(b.reciprocal());\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// display an array of Complex numbers to standard output\n", "func_signal": "public static void show(Complex[] x, String title)", "code": "{\n    System.out.println(title);\n    System.out.println(\"-------------------\");\n    for (int i = 0; i < x.length; i++) {\n        System.out.println(x[i]);\n    }\n    System.out.println();\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\FFT.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// compute the circular convolution of x and y\n", "func_signal": "public static Complex[] cconvolve(Complex[] x, Complex[] y)", "code": "{\n\n    // should probably pad x and y with 0s so that they have same length\n    // and are powers of 2\n    if (x.length != y.length) { throw new RuntimeException(\"Dimensions don't agree\"); }\n\n    int N = x.length;\n\n    // compute FFT of each sequence\n    Complex[] a = fft(x);\n    Complex[] b = fft(y);\n\n    // point-wise multiply\n    Complex[] c = new Complex[N];\n    for (int i = 0; i < N; i++) {\n        c[i] = a[i].times(b[i]);\n    }\n\n    // compute inverse FFT\n    return ifft(c);\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\FFT.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// compute the linear convolution of x and y\n", "func_signal": "public static Complex[] convolve(Complex[] x, Complex[] y)", "code": "{\n    Complex ZERO = new Complex(0, 0);\n\n    Complex[] a = new Complex[2*x.length];\n    for (int i = 0;        i <   x.length; i++) a[i] = x[i];\n    for (int i = x.length; i < 2*x.length; i++) a[i] = ZERO;\n\n    Complex[] b = new Complex[2*y.length];\n    for (int i = 0;        i <   y.length; i++) b[i] = y[i];\n    for (int i = y.length; i < 2*y.length; i++) b[i] = ZERO;\n\n    return cconvolve(a, b);\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\FFT.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// return a new Complex object whose value is (this + b)\n", "func_signal": "public Complex plus(Complex b)", "code": "{\n    Complex a = this;             // invoking object\n    double real = a.re + b.re;\n    double imag = a.im + b.im;\n    return new Complex(real, imag);\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// compute the FFT of x[], assuming its length is a power of 2\n", "func_signal": "public static Complex[] fft(Complex[] x)", "code": "{\n    int N = x.length;\n\n    // base case\n    if (N == 1) return new Complex[] { x[0] };\n\n    // radix 2 Cooley-Tukey FFT\n    if (N % 2 != 0) { throw new RuntimeException(\"N is not a power of 2\"); }\n\n    // fft of even terms\n    Complex[] even = new Complex[N/2];\n    for (int k = 0; k < N/2; k++) {\n        even[k] = x[2*k];\n    }\n    Complex[] q = fft(even);\n\n    // fft of odd terms\n    Complex[] odd  = even;  // reuse the array\n    for (int k = 0; k < N/2; k++) {\n        odd[k] = x[2*k + 1];\n    }\n    Complex[] r = fft(odd);\n\n    // combine\n    Complex[] y = new Complex[N];\n    for (int k = 0; k < N/2; k++) {\n        double kth = -2 * k * Math.PI / N;\n        Complex wk = new Complex(Math.cos(kth), Math.sin(kth));\n        y[k]       = q[k].plus(wk.times(r[k]));\n        y[k + N/2] = q[k].minus(wk.times(r[k]));\n    }\n    return y;\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\FFT.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "/**\n * Pass data to the visualizer. Typically this will be obtained from the\n * Android Visualizer.OnDataCaptureListener call back. See\n * {@link Visualizer.OnDataCaptureListener#onWaveFormDataCapture }\n * @param bytes\n */\n", "func_signal": "public void updateVisualizer(byte[] bytes)", "code": "{\n  mBytes = bytes;\n  invalidate();\n}", "path": "lib\\src\\com\\skd\\androidrecording\\visualizer\\VisualizerView.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// sample client for testing\n", "func_signal": "public static void main(String[] args)", "code": "{\n    Complex a = new Complex(5.0, 6.0);\n    Complex b = new Complex(-3.0, 4.0);\n\n    System.out.println(\"a            = \" + a);\n    System.out.println(\"b            = \" + b);\n    System.out.println(\"Re(a)        = \" + a.re());\n    System.out.println(\"Im(a)        = \" + a.im());\n    System.out.println(\"b + a        = \" + b.plus(a));\n    System.out.println(\"a - b        = \" + a.minus(b));\n    System.out.println(\"a * b        = \" + a.times(b));\n    System.out.println(\"b * a        = \" + b.times(a));\n    System.out.println(\"a / b        = \" + a.divides(b));\n    System.out.println(\"(a / b) * b  = \" + a.divides(b).times(b));\n    System.out.println(\"conj(a)      = \" + a.conjugate());\n    System.out.println(\"|a|          = \" + a.abs());\n    System.out.println(\"tan(a)       = \" + a.tan());\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "/*********************************************************************\n *  Test client and sample execution\n *\n *  % java FFT 4\n *  x\n *  -------------------\n *  -0.03480425839330703\n *  0.07910192950176387\n *  0.7233322451735928\n *  0.1659819820667019\n *\n *  y = fft(x)\n *  -------------------\n *  0.9336118983487516\n *  -0.7581365035668999 + 0.08688005256493803i\n *  0.44344407521182005\n *  -0.7581365035668999 - 0.08688005256493803i\n *\n *  z = ifft(y)\n *  -------------------\n *  -0.03480425839330703\n *  0.07910192950176387 + 2.6599344570851287E-18i\n *  0.7233322451735928\n *  0.1659819820667019 - 2.6599344570851287E-18i\n *\n *  c = cconvolve(x, x)\n *  -------------------\n *  0.5506798633981853\n *  0.23461407150576394 - 4.033186818023279E-18i\n *  -0.016542951108772352\n *  0.10288019294318276 + 4.033186818023279E-18i\n *\n *  d = convolve(x, x)\n *  -------------------\n *  0.001211336402308083 - 3.122502256758253E-17i\n *  -0.005506167987577068 - 5.058885073636224E-17i\n *  -0.044092969479563274 + 2.1934338938072244E-18i\n *  0.10288019294318276 - 3.6147323062478115E-17i\n *  0.5494685269958772 + 3.122502256758253E-17i\n *  0.240120239493341 + 4.655566391833896E-17i\n *  0.02755001837079092 - 2.1934338938072244E-18i\n *  4.01805098805014E-17i\n *\n *********************************************************************/\n", "func_signal": "public static void main(String[] args)", "code": "{ \n     int N = Integer.parseInt(args[0]);\n     Complex[] x = new Complex[N];\n\n     // original data\n     for (int i = 0; i < N; i++) {\n         x[i] = new Complex(i, 0);\n         x[i] = new Complex(-2*Math.random() + 1, 0);\n     }\n     show(x, \"x\");\n\n     // FFT of original data\n     Complex[] y = fft(x);\n     show(y, \"y = fft(x)\");\n\n     // take inverse FFT\n     Complex[] z = ifft(y);\n     show(z, \"z = ifft(y)\");\n\n     // circular convolution of x with itself\n     Complex[] c = cconvolve(x, x);\n     show(c, \"c = cconvolve(x, x)\");\n\n     // linear convolution of x with itself\n     Complex[] d = convolve(x, x);\n     show(d, \"d = convolve(x, x)\");\n }", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\FFT.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "/**\n * Call this to make the visualizer flash. Useful for flashing at the start\n * of a song/loop etc...\n */\n", "func_signal": "public void flash()", "code": "{\n  mFlash = true;\n  invalidate();\n}", "path": "lib\\src\\com\\skd\\androidrecording\\visualizer\\VisualizerView.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// return a new Complex object whose value is (this * b)\n", "func_signal": "public Complex times(Complex b)", "code": "{\n    Complex a = this;\n    double real = a.re * b.re - a.im * b.im;\n    double imag = a.re * b.im + a.im * b.re;\n    return new Complex(real, imag);\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// a static version of plus\n", "func_signal": "public static Complex plus(Complex a, Complex b)", "code": "{\n    double real = a.re + b.re;\n    double imag = a.im + b.im;\n    Complex sum = new Complex(real, imag);\n    return sum;\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// return a new Complex object whose value is (this - b)\n", "func_signal": "public Complex minus(Complex b)", "code": "{\n    Complex a = this;\n    double real = a.re - b.re;\n    double imag = a.im - b.im;\n    return new Complex(real, imag);\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "// return a new Complex object whose value is the reciprocal of this\n", "func_signal": "public Complex reciprocal()", "code": "{\n    double scale = re*re + im*im;\n    return new Complex(re / scale, -im / scale);\n}", "path": "lib\\src\\com\\skd\\androidrecording\\fft\\Complex.java", "repo_name": "steelkiwi/AndroidRecording", "stars": 418, "license": "apache-2.0", "language": "java", "size": 744}
{"docstring": "/**\n * Return the point at the center of the zoomed image. The PointF coordinates range\n * in value between 0 and 1 and the focus point is denoted as a fraction from the left \n * and top of the view. For example, the top left corner of the image would be (0, 0). \n * And the bottom right corner would be (1, 1).\n * @return PointF representing the scroll position of the zoomed image.\n */\n", "func_signal": "public PointF getScrollPosition()", "code": "{\n\tDrawable drawable = getDrawable();\n\tif (drawable == null) {\n\t\treturn null;\n\t}\n\tint drawableWidth = drawable.getIntrinsicWidth();\n    int drawableHeight = drawable.getIntrinsicHeight();\n    \n    PointF point = transformCoordTouchToBitmap(viewWidth / 2, viewHeight / 2, true);\n    point.x /= drawableWidth;\n    point.y /= drawableHeight;\n    return point;\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Inverse of transformCoordTouchToBitmap. This function will transform the coordinates in the\n * drawable's coordinate system to the view's coordinate system.\n * @param bx x-coordinate in original bitmap coordinate system\n * @param by y-coordinate in original bitmap coordinate system\n * @return Coordinates of the point in the view's coordinate system.\n */\n", "func_signal": "private PointF transformCoordBitmapToTouch(float bx, float by)", "code": "{\n    matrix.getValues(m);        \n    float origW = getDrawable().getIntrinsicWidth();\n    float origH = getDrawable().getIntrinsicHeight();\n    float px = bx / origW;\n    float py = by / origH;\n    float finalX = m[Matrix.MTRANS_X] + getImageWidth() * px;\n    float finalY = m[Matrix.MTRANS_Y] + getImageHeight() * py;\n    return new PointF(finalX , finalY);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "// Rotates the bitmap by the specified degree.\n// If a new bitmap is created, the original bitmap is recycled.\n", "func_signal": "public static Bitmap rotate(Bitmap b, int degrees)", "code": "{\n    if (degrees != 0 && b != null) {\n        Matrix m = new Matrix();\n        m.setRotate(degrees, (float) b.getWidth() / 2, (float) b.getHeight() / 2);\n        try {\n            Bitmap b2 = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), m, true);\n            if (b != b2) {\n                b.recycle();\n                b = b2;\n            }\n        } catch (OutOfMemoryError ex) {\n            // We have no memory to rotate. Return the original bitmap.\n        }\n    }\n    return b;\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\Util.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Set the min zoom multiplier. Default value: 1.\n * @param min min zoom multiplier.\n */\n", "func_signal": "public void setMinZoom(float min)", "code": "{\n\tminScale = min;\n\tsuperMinScale = SUPER_MIN_MULTIPLIER * minScale;\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Set zoom to the specified scale. Image will be centered around the point\n * (focusX, focusY). These floats range from 0 to 1 and denote the focus point\n * as a fraction from the left and top of the view. For example, the top left \n * corner of the image would be (0, 0). And the bottom right corner would be (1, 1).\n * @param scale\n * @param focusX\n * @param focusY\n * @param scaleType\n */\n", "func_signal": "public void setZoom(float scale, float focusX, float focusY, ScaleType scaleType)", "code": "{\n\t//\n\t// setZoom can be called before the image is on the screen, but at this point, \n\t// image and view sizes have not yet been calculated in onMeasure. Thus, we should\n\t// delay calling setZoom until the view has been measured.\n\t//\n\tif (!onDrawReady) {\n\t\tdelayedZoomVariables = new ZoomVariables(scale, focusX, focusY, scaleType);\n\t\treturn;\n\t}\n\t\n\tif (scaleType != mScaleType) {\n\t\tsetScaleType(scaleType);\n\t}\n\tresetZoom();\n\tscaleImage(scale, viewWidth / 2, viewHeight / 2, true);\n\tmatrix.getValues(m);\n\tm[Matrix.MTRANS_X] = -((focusX * getImageWidth()) - (viewWidth * 0.5f));\n\tm[Matrix.MTRANS_Y] = -((focusY * getImageHeight()) - (viewHeight * 0.5f));\n\tmatrix.setValues(m);\n\tfixTrans();\n\tsetImageMatrix(matrix);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Reset zoom and translation to initial state.\n */\n", "func_signal": "public void resetZoom()", "code": "{\n\tnormalizedScale = 1;\n\tfitImageToView();\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Interpolate the current targeted zoom and get the delta\n * from the current zoom.\n * @param t\n * @return\n */\n", "func_signal": "private double calculateDeltaScale(float t)", "code": "{\n\tdouble zoom = startZoom + t * (targetZoom - startZoom);\n\treturn zoom / normalizedScale;\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * After rotating, the matrix needs to be translated. This function finds the area of image \n * which was previously centered and adjusts translations so that is again the center, post-rotation.\n * \n * @param axis Matrix.MTRANS_X or Matrix.MTRANS_Y\n * @param trans the value of trans in that axis before the rotation\n * @param prevImageSize the width/height of the image before the rotation\n * @param imageSize width/height of the image after rotation\n * @param prevViewSize width/height of view before rotation\n * @param viewSize width/height of view after rotation\n * @param drawableSize width/height of drawable\n */\n", "func_signal": "private void translateMatrixAfterRotate(int axis, float trans, float prevImageSize, float imageSize, int prevViewSize, int viewSize, int drawableSize)", "code": "{\n\tif (imageSize < viewSize) {\n    \t//\n    \t// The width/height of image is less than the view's width/height. Center it.\n    \t//\n    \tm[axis] = (viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;\n    \t\n    } else if (trans > 0) {\n    \t//\n    \t// The image is larger than the view, but was not before rotation. Center it.\n    \t//\n    \tm[axis] = -((imageSize - viewSize) * 0.5f);\n    \t\n    } else {\n    \t//\n    \t// Find the area of the image which was previously centered in the view. Determine its distance\n    \t// from the left/top side of the view as a fraction of the entire image's width/height. Use that percentage\n    \t// to calculate the trans in the new view width/height.\n    \t//\n    \tfloat percentage = (Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;\n    \tm[axis] = -((percentage * imageSize) - (viewSize * 0.5f));\n    }\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Set zoom parameters equal to another TouchImageView. Including scale, position,\n * and ScaleType.\n * @param\n */\n", "func_signal": "public void setZoom(TouchImageView img)", "code": "{\n\tPointF center = img.getScrollPosition();\n\tsetZoom(img.getCurrentZoom(), center.x, center.y, img.getScaleType());\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Return a Rect representing the zoomed image.\n * @return rect representing zoomed image\n */\n", "func_signal": "public RectF getZoomedRect()", "code": "{\n\tif (mScaleType == ScaleType.FIT_XY) {\n\t\tthrow new UnsupportedOperationException(\"getZoomedRect() not supported with FIT_XY\");\n\t}\n\tPointF topLeft = transformCoordTouchToBitmap(0, 0, true);\n\tPointF bottomRight = transformCoordTouchToBitmap(viewWidth, viewHeight, true);\n\t\n\tfloat w = getDrawable().getIntrinsicWidth();\n\tfloat h = getDrawable().getIntrinsicHeight();\n\treturn new RectF(topLeft.x / w, topLeft.y / h, bottomRight.x / w, bottomRight.y / h);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Set view dimensions based on layout params\n * \n * @param mode \n * @param size\n * @param drawableWidth\n * @return\n */\n", "func_signal": "private int setViewSize(int mode, int size, int drawableWidth)", "code": "{\n\tint viewSize;\n\tswitch (mode) {\n\t\tcase MeasureSpec.EXACTLY:\n\t\t\tviewSize = size;\n\t\t\tbreak;\n\t\t\t\n\t\tcase MeasureSpec.AT_MOST:\n\t\t\tviewSize = Math.min(drawableWidth, size);\n\t\t\tbreak;\n\t\t\t\n\t\tcase MeasureSpec.UNSPECIFIED:\n\t\t\tviewSize = drawableWidth;\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\tviewSize = size;\n\t\t \tbreak;\n\t\t}\n\treturn viewSize;\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Set the max zoom multiplier. Default value: 3.\n * @param max max zoom multiplier.\n */\n", "func_signal": "public void setMaxZoom(float max)", "code": "{\n    maxScale = max;\n    superMaxScale = SUPER_MAX_MULTIPLIER * maxScale;\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Use interpolator to get t\n * @return\n */\n", "func_signal": "private float interpolate()", "code": "{\n\tlong currTime = System.currentTimeMillis();\n\tfloat elapsed = (currTime - startTime) / ZOOM_TIME;\n\telapsed = Math.min(1f, elapsed);\n\treturn interpolator.getInterpolation(elapsed);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Performs boundary checking and fixes the image matrix if it \n * is out of bounds.\n */\n", "func_signal": "private void fixTrans()", "code": "{\n    matrix.getValues(m);\n    float transX = m[Matrix.MTRANS_X];\n    float transY = m[Matrix.MTRANS_Y];\n    \n    float fixTransX = getFixTrans(transX, viewWidth-30, getImageWidth());\n    float fixTransY = getFixTrans(transY, viewHeight, getImageHeight());\n    \n    if (fixTransX != 0 || fixTransY != 0) {\n        matrix.postTranslate(fixTransX, fixTransY);\n    }\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * This function will transform the coordinates in the touch event to the coordinate \n * system of the drawable that the imageview contain\n * @param x x-coordinate of touch event\n * @param y y-coordinate of touch event\n * @param clipToBitmap Touch event may occur within view, but outside image content. True, to clip return value\n * \t\t\tto the bounds of the bitmap size.\n * @return Coordinates of the point touched, in the coordinate system of the original drawable.\n */\n", "func_signal": "private PointF transformCoordTouchToBitmap(float x, float y, boolean clipToBitmap)", "code": "{\n     matrix.getValues(m);\n     float origW = getDrawable().getIntrinsicWidth();\n     float origH = getDrawable().getIntrinsicHeight();\n     float transX = m[Matrix.MTRANS_X];\n     float transY = m[Matrix.MTRANS_Y];\n     float finalX = ((x - transX) * origW) / getImageWidth();\n     float finalY = ((y - transY) * origH) / getImageHeight();\n     \n     if (clipToBitmap) {\n    \t finalX = Math.min(Math.max(finalX, 0), origW);\n    \t finalY = Math.min(Math.max(finalY, 0), origH);\n     }\n     \n     return new PointF(finalX , finalY);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * If the normalizedScale is equal to 1, then the image is made to fit the screen. Otherwise,\n * it is made to fit the screen according to the dimensions of the previous image matrix. This\n * allows the image to maintain its zoom after rotation.\n */\n", "func_signal": "private void fitImageToView()", "code": "{\n\tDrawable drawable = getDrawable();\n    if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {\n    \treturn;\n    }\n    if (matrix == null || prevMatrix == null) {\n    \treturn;\n    }\n    \n    int drawableWidth = drawable.getIntrinsicWidth();\n    int drawableHeight = drawable.getIntrinsicHeight();\n\t\n\t//\n\t// Scale image for view\n\t//\n    float scaleX = (float) viewWidth / drawableWidth;\n    float scaleY = (float) viewHeight / drawableHeight;\n    \n    switch (mScaleType) {\n    case CENTER:\n    \tscaleX = scaleY = 1;\n    \tbreak;\n    \t\n    case CENTER_CROP:\n    \tscaleX = scaleY = Math.max(scaleX, scaleY);\n    \tbreak;\n    \t\n    case CENTER_INSIDE:\n    \tscaleX = scaleY = Math.min(1, Math.min(scaleX, scaleY));\n    \t\n    case FIT_CENTER:\n    \tscaleX = scaleY = Math.min(scaleX, scaleY);\n    \tbreak;\n    \t\n    case FIT_XY:\n    \tbreak;\n    \t\n\tdefault:\n\t\t//\n\t\t// FIT_START and FIT_END not supported\n\t\t//\n\t\tthrow new UnsupportedOperationException(\"TouchImageView does not support FIT_START or FIT_END\");\n    \t\n    }\n\n    //\n    // Center the image\n    //\n    float redundantXSpace = viewWidth - (scaleX * drawableWidth);\n    float redundantYSpace = viewHeight - (scaleY * drawableHeight);\n    matchViewWidth = viewWidth - redundantXSpace;\n    matchViewHeight = viewHeight - redundantYSpace;\n    if (!isZoomed() && !imageRenderedAtLeastOnce) {\n    \t//\n    \t// Stretch and center image to fit view\n    \t//\n    \tmatrix.setScale(scaleX, scaleY);\n    \tmatrix.postTranslate(redundantXSpace / 2, redundantYSpace / 2);\n    \tnormalizedScale = 1;\n    \t\n    } else {\n    \t//\n    \t// These values should never be 0 or we will set viewWidth and viewHeight\n    \t// to NaN in translateMatrixAfterRotate. To avoid this, call savePreviousImageValues\n    \t// to set them equal to the current values.\n    \t//\n    \tif (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {\n    \t\tsavePreviousImageValues();\n    \t}\n    \t\n    \tprevMatrix.getValues(m);\n    \t\n    \t//\n    \t// Rescale Matrix after rotation\n    \t//\n    \tm[Matrix.MSCALE_X] = matchViewWidth / drawableWidth * normalizedScale;\n    \tm[Matrix.MSCALE_Y] = matchViewHeight / drawableHeight * normalizedScale;\n    \t\n    \t//\n    \t// TransX and TransY from previous matrix\n    \t//\n        float transX = m[Matrix.MTRANS_X];\n        float transY = m[Matrix.MTRANS_Y];\n        \n        //\n        // Width\n        //\n        float prevActualWidth = prevMatchViewWidth * normalizedScale;\n        float actualWidth = getImageWidth();\n        translateMatrixAfterRotate(Matrix.MTRANS_X, transX, prevActualWidth, actualWidth, prevViewWidth, viewWidth, drawableWidth);\n        \n        //\n        // Height\n        //\n        float prevActualHeight = prevMatchViewHeight * normalizedScale;\n        float actualHeight = getImageHeight();\n        translateMatrixAfterRotate(Matrix.MTRANS_Y, transY, prevActualHeight, actualHeight, prevViewHeight, viewHeight, drawableHeight);\n        \n        //\n        // Set the matrix to the adjusted scale and translate values.\n        //\n        matrix.setValues(m);\n    }\n    fixTrans();\n    setImageMatrix(matrix);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * When transitioning from zooming from focus to zoom from center (or vice versa)\n * the image can become unaligned within the view. This is apparent when zooming\n * quickly. When the content size is less than the view size, the content will often\n * be centered incorrectly within the view. fixScaleTrans first calls fixTrans() and \n * then makes sure the image is centered correctly within the view.\n */\n", "func_signal": "private void fixScaleTrans()", "code": "{\n\tfixTrans();\n\tmatrix.getValues(m);\n\tif (getImageWidth() < viewWidth) {\n\t\tm[Matrix.MTRANS_X] = (viewWidth - getImageWidth()) / 2;\n\t}\n\t\n\tif (getImageHeight() < viewHeight) {\n\t\tm[Matrix.MTRANS_Y] = (viewHeight - getImageHeight()) / 2;\n\t}\n\tmatrix.setValues(m);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Convert a dp float value to pixels\n * @param context\n * @param dp\n * @return the responsive pixels\n */\n", "func_signal": "public static int dp2px(Context context, float dp)", "code": "{\n    float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n    return Math.round(px);\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\Util.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Save the current matrix and view dimensions\n * in the prevMatrix and prevView variables.\n */\n", "func_signal": "private void savePreviousImageValues()", "code": "{\n\tif (matrix != null && viewHeight != 0 && viewWidth != 0) {\n\t    \tmatrix.getValues(m);\n\t    \tprevMatrix.setValues(m);\n\t    \tprevMatchViewHeight = matchViewHeight;\n\t        prevMatchViewWidth = matchViewWidth;\n\t        prevViewHeight = viewHeight;\n\t        prevViewWidth = viewWidth;\n\t}\n}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\TouchImageView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "//center transparent area draw by a bitmap\n", "func_signal": "public AvatarRectView(Context context, int avatarSize)", "code": "{\n\t\tsuper(context);\n\t\tthis.mAvatarSize = avatarSize;\n\n\t\t//init the mask Rectangles\n\t\trectArray = new Rect[8];\n\t\tfor(int i = 0 ; i < rectArray.length ; i++){\n\t\t\trectArray[i] = new Rect();\n\t\t}\n\n\t\tcenterBitmap = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.head_photo_preview_circle_mask);\n\t\tcenterRect = new Rect(0, 0, centerBitmap.getWidth(), centerBitmap.getHeight());\n\n\t}", "path": "imagepickerModule\\src\\main\\java\\com\\pizidea\\imagepicker\\widget\\AvatarRectView.java", "repo_name": "easonline/AndroidImagePicker", "stars": 399, "license": "None", "language": "java", "size": 671}
{"docstring": "/**\n * Set progress line stroke width\n *\n * @param strokeWidth width for progress line\n */\n", "func_signal": "public void setProgressLineStrokeWidth(float strokeWidth)", "code": "{\n    mProgressLineView.setProgressLineStrokeWidth(strokeWidth);\n    requestLayout();\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set progress complete line stroke width from dimen resources\n *\n * @param strokeWidthRes dimen resource width for complete progress line\n */\n", "func_signal": "public Builder setProgressCompleteLineStrokeWidthResource(@DimenRes int strokeWidthRes)", "code": "{\n    playLayout.setProgressCompleteLineStrokeWidthResource(strokeWidthRes);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Check if we have necessary permissions.\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN)\nprivate void checkReadStoragePermission()", "code": "{\n    if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)  != PackageManager.PERMISSION_GRANTED) {\n        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {\n            DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    if (which == DialogInterface.BUTTON_POSITIVE) {\n                        ActivityCompat.requestPermissions(MusicListActivity.this, new String[] { Manifest.permission.READ_EXTERNAL_STORAGE }, EXT_STORAGE_PERMISSION_REQ_CODE);\n                    } else if (which == DialogInterface.BUTTON_NEGATIVE) {\n                        onPermissionsNotGranted();\n                    }\n                    dialog.dismiss();\n                }\n            };\n            new AlertDialog.Builder(this)\n                    .setTitle(R.string.permissions_title)\n                    .setMessage(R.string.read_ext_permissions_message)\n                    .setPositiveButton(R.string.btn_continue, onClickListener)\n                    .setNegativeButton(R.string.btn_cancel, onClickListener)\n                    .setCancelable(false)\n                    .show();\n            return;\n        }\n        ActivityCompat.requestPermissions(MusicListActivity.this, new String[] { Manifest.permission.READ_EXTERNAL_STORAGE }, EXT_STORAGE_PERMISSION_REQ_CODE);\n        return;\n    }\n    loadMusic();\n}", "path": "sample\\src\\main\\java\\com\\cleveroad\\sample\\MusicListActivity.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set medium diffuser color\n *\n * @param color Color for medium diffuser\n */\n", "func_signal": "public Builder setMediumDiffuserColor(@ColorInt int color)", "code": "{\n    playLayout.setMediumDiffuserColor(color);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Permissions not granted. Quit.\n */\n", "func_signal": "private void onPermissionsNotGranted()", "code": "{\n    Toast.makeText(this, R.string.toast_permissions_not_granted, Toast.LENGTH_SHORT).show();\n    finish();\n}", "path": "sample\\src\\main\\java\\com\\cleveroad\\sample\\MusicListActivity.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set color for progress ball indicator\n *\n * @param color Color for progress ball indicator\n */\n", "func_signal": "public void setProgressBallColor(int color)", "code": "{\n    color = Color.argb(255, Color.red(color), Color.green(color), Color.blue(color));\n    mProgressLineView.setProgressBallColor(color);\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set shadow width for medium diffuser\n *\n * @param shadowWidth shadow width for big diffuser\n */\n", "func_signal": "public void setMediumDiffuserShadowWidth(int shadowWidth)", "code": "{\n    this.mMediumDiffuserShadowWidth = shadowWidth;\n    mMediumDiffuserImageView.setShadowSize(shadowWidth);\n    requestLayout();\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set shadow width for big diffuser\n *\n * @param shadowWidth shadow width for big diffuser\n */\n", "func_signal": "public Builder setBigDiffuserShadowWidth(int shadowWidth)", "code": "{\n    playLayout.setBigDiffuserShadowWidth(shadowWidth);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set shadow width for big small with dimension\n *\n * @param shadowWidthRes dimen resource shadow width for small diffuser\n */\n", "func_signal": "public Builder setSmallDiffuserShadowWidthResource(@DimenRes int shadowWidthRes)", "code": "{\n    playLayout.setSmallDiffuserShadowWidthResource(shadowWidthRes);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set shadow provider\n */\n", "func_signal": "public Builder setShadowProvider(@NonNull ShadowPercentageProvider provider)", "code": "{\n    playLayout.setShadowProvider(provider);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set shadow percentages for diffusers.\n *\n * @param bigDiffuserShadowPercentage    shadow percentage for big diffuser (0.0f - 1.0f)\n * @param mediumDiffuserShadowPercentage shadow percentage for medium diffuser (0.0f - 1.0f)\n * @param smallDiffuserShadowPercentage  shadow percentage for small diffuser (0.0f - 1.0f)\n */\n", "func_signal": "@Override\npublic void shadowChanged(float bigDiffuserShadowPercentage, float mediumDiffuserShadowPercentage, float smallDiffuserShadowPercentage)", "code": "{\n    mBigShadowDrawable.setShadowSizeMultiplier(Utils.betweenZeroOne(bigDiffuserShadowPercentage) * (1 - BIG_DIFFUSER_MIN_SHADOW_PERCENT) + BIG_DIFFUSER_MIN_SHADOW_PERCENT);\n    mMediumShadowDrawable.setShadowSizeMultiplier(Utils.betweenZeroOne(mediumDiffuserShadowPercentage) * (1 - MEDIUM_DIFFUSER_MIN_SHADOW_PERCENT) + MEDIUM_DIFFUSER_MIN_SHADOW_PERCENT);\n    mSmallShadowDrawable.setShadowSizeMultiplier(Utils.betweenZeroOne(smallDiffuserShadowPercentage) * (1 - SMALL_DIFFUSER_MIN_SHADOW_PERCENT) + SMALL_DIFFUSER_MIN_SHADOW_PERCENT);\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set shadow width for big medium with dimension\n *\n * @param shadowWidth dimen resource shadow width for medium diffuser\n */\n", "func_signal": "public Builder setMediumDiffuserShadowWidthResource(@DimenRes int shadowWidth)", "code": "{\n    playLayout.setMediumDiffuserShadowWidthResource(shadowWidth);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set progress line color from resource\n *\n * @param colorRes Color res Color for progress line\n */\n", "func_signal": "public Builder setProgressLineColorResource(@ColorRes int colorRes)", "code": "{\n    playLayout.setProgressLineColorResource(colorRes);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set padding for progress line\n *\n * @param padding Padding for progress line\n */\n", "func_signal": "public void setProgressLinePadding(int padding)", "code": "{\n    mProgressLineView.setPadding(padding);\n    requestLayout();\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Sets the content of this ImageView to the specified Uri.\n *\n * @param uri the Uri of an image, or null to clear the content\n */\n", "func_signal": "public Builder setImageURI(@Nullable Uri uri)", "code": "{\n    playLayout.setImageURI(uri);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set medium diffuser color\n *\n * @param color Color for medium diffuser\n */\n", "func_signal": "public void setMediumDiffuserColor(@ColorInt int color)", "code": "{\n    mMediumDiffuserImageView.setColor(color);\n    mMediumDiffuserImageView.invalidate();\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set big diffuser color from color resources\n *\n * @param colorRes Color resource color for big diffuser\n */\n", "func_signal": "public Builder setBigDiffuserColorResource(@ColorRes int colorRes)", "code": "{\n    playLayout.setBigDiffuserColorResource(colorRes);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set progress complete line stroke width\n *\n * @param strokeWidth width for complete progress line\n */\n", "func_signal": "public Builder setProgressCompleteLineStrokeWidth(float strokeWidth)", "code": "{\n    playLayout.setProgressCompleteLineStrokeWidth(strokeWidth);\n    return this;\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set size for buttons (shuffle, previous, next, repeat)\n *\n * @param buttonsSize Size for buttons\n */\n", "func_signal": "public void setButtonsSize(int buttonsSize)", "code": "{\n    this.mButtonsSize = buttonsSize;\n    requestLayout();\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Set progress complete line stroke width\n *\n * @param strokeWidth width for complete progress line\n */\n", "func_signal": "public void setProgressCompleteLineStrokeWidth(float strokeWidth)", "code": "{\n    mProgressLineView.setProgressCompleteLineStrokeWidth(strokeWidth);\n    requestLayout();\n}", "path": "play_widget\\src\\main\\java\\com\\cleveroad\\play_widget\\PlayLayout.java", "repo_name": "Cleveroad/PlayWidget", "stars": 366, "license": "mit", "language": "java", "size": 1913}
{"docstring": "/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\n", "func_signal": "public static byte[] decodeFromFile( String filename )\nthrows java.io.IOException", "code": "{\n    \n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try\n    {\n        // Set up some useful variables\n        java.io.File file = new java.io.File( filename );\n        byte[] buffer = null;\n        int length   = 0;\n        int numBytes = 0;\n        \n        // Check for size of file\n        if( file.length() > Integer.MAX_VALUE )\n        {\n            throw new java.io.IOException( \"File is too big for this convenience method (\" + file.length() + \" bytes).\" );\n        }   // end if: file too big for int index\n        buffer = new byte[ (int)file.length() ];\n        \n        // Open a stream\n        bis = new Base64.InputStream( \n                  new java.io.BufferedInputStream( \n                  new java.io.FileInputStream( file ) ), Base64.DECODE );\n        \n        // Read until done\n        while( ( numBytes = bis.read( buffer, length, 4096 ) ) >= 0 ) {\n            length += numBytes;\n        }   // end while\n        \n        // Save in a variable to return\n        decodedData = new byte[ length ];\n        System.arraycopy( buffer, 0, decodedData, 0, length );\n        \n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bis.close(); } catch( Exception e) {}\n    }   // end finally\n    \n    return decodedData;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Encodes up to the first three bytes of array <var>threeBytes</var>\n * and returns a four-byte array in Base64 notation.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.\n * The array <var>threeBytes</var> needs only be as big as\n * <var>numSigBytes</var>.\n * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\n *\n * @param b4 A reusable byte array to reduce array instantiation\n * @param threeBytes the array to convert\n * @param numSigBytes the number of significant bytes in your array\n * @return four byte array in Base64 notation.\n * @since 1.5.1\n */\n", "func_signal": "private static byte[] encode3to4( byte[] b4, byte[] threeBytes, int numSigBytes, int options )", "code": "{\n    encode3to4( threeBytes, 0, numSigBytes, b4, 0, options );\n    return b4;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Closes connection with server\n */\n", "func_signal": "public void close()", "code": "{\n\tthis.readyState = WebSocket.WEBSOCKET_STATE_CLOSING;\n\n\t// close socket channel\n\ttry {\n\t\tthis.socketChannel.close();\n\t} catch (IOException e) {\n\t\tthis.onError(e);\n\t}\n\tthis.running = false;\n\tselector.wakeup();\n\n\t// fire onClose method\n\tthis.onClose();\n\n\tthis.readyState = WebSocket.WEBSOCKET_STATE_CLOSED;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\WebSocket.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Convenience method for encoding data to a file.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * @param dataToEncode byte array of data to encode in base64 form\n * @param filename Filename for saving encoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if dataToEncode is null\n * @since 2.1\n */\n", "func_signal": "public static void encodeToFile( byte[] dataToEncode, String filename )\nthrows java.io.IOException", "code": "{\n    \n    if( dataToEncode == null ){\n        throw new NullPointerException( \"Data to encode was null.\" );\n    }   // end iff\n    \n    Base64.OutputStream bos = null;\n    try {\n        bos = new Base64.OutputStream( \n              new java.io.FileOutputStream( filename ), Base64.ENCODE );\n        bos.write( dataToEncode );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and throw to execute finally{} block\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bos.close(); } catch( Exception e ){}\n    }   // end finally\n    \n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.\n *\n * @param infile Input file\n * @param outfile Output file\n * @throws java.io.IOException if there is an error\n * @since 2.2\n */\n", "func_signal": "public static void decodeFileToFile( String infile, String outfile )\nthrows java.io.IOException", "code": "{\n    \n    byte[] decoded = Base64.decodeFromFile( infile );\n    java.io.OutputStream out = null;\n    try{\n        out = new java.io.BufferedOutputStream(\n              new java.io.FileOutputStream( outfile ) );\n        out.write( decoded );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch\n    finally {\n        try { out.close(); }\n        catch( Exception ex ){}\n    }   // end finally    \n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\n", "func_signal": "public static byte[] encodeBytesToBytes( byte[] source, int off, int len, int options ) throws java.io.IOException", "code": "{\n\n    if( source == null ){\n        throw new NullPointerException( \"Cannot serialize a null array.\" );\n    }   // end if: null\n\n    if( off < 0 ){\n        throw new IllegalArgumentException( \"Cannot have negative offset: \" + off );\n    }   // end if: off < 0\n\n    if( len < 0 ){\n        throw new IllegalArgumentException( \"Cannot have length offset: \" + len );\n    }   // end if: len < 0\n\n    if( off + len > source.length  ){\n        throw new IllegalArgumentException(\n        String.format( \"Cannot have offset of %d and length of %d with array of length %d\", off,len,source.length));\n    }   // end if: off < 0\n\n\n\n    // Compress?\n    if( (options & GZIP) != 0 ) {\n        java.io.ByteArrayOutputStream  baos  = null;\n        java.util.zip.GZIPOutputStream gzos  = null;\n        Base64.OutputStream            b64os = null;\n\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream( baos, ENCODE | options );\n            gzos  = new java.util.zip.GZIPOutputStream( b64os );\n\n            gzos.write( source, off, len );\n            gzos.close();\n        }   // end try\n        catch( java.io.IOException e ) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        }   // end catch\n        finally {\n            try{ gzos.close();  } catch( Exception e ){}\n            try{ b64os.close(); } catch( Exception e ){}\n            try{ baos.close();  } catch( Exception e ){}\n        }   // end finally\n\n        return baos.toByteArray();\n    }   // end if: compress\n\n    // Else, don't compress. Better not to use streams at all then.\n    else {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        int encLen = ( len / 3 ) * 4 + ( len % 3 > 0 ? 4 : 0 ); // Bytes needed for actual encoding\n        if( breakLines ){\n            encLen += encLen / MAX_LINE_LENGTH; // Plus extra newline characters\n        }\n        byte[] outBuff = new byte[ encLen ];\n\n\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for( ; d < len2; d+=3, e+=4 ) {\n            encode3to4( source, d+off, 3, outBuff, e, options );\n\n            lineLength += 4;\n            if( breakLines && lineLength >= MAX_LINE_LENGTH )\n            {\n                outBuff[e+4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }   // end if: end of line\n        }   // en dfor: each piece of array\n\n        if( d < len ) {\n            encode3to4( source, d+off, len - d, outBuff, e, options );\n            e += 4;\n        }   // end if: some padding needed\n\n\n        // Only resize array if we didn't guess it right.\n        if( e <= outBuff.length - 1 ){\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff,0, finalOut,0,e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    \n    }   // end else: don't compress\n\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Builds text for javascript engine to invoke proper event method with\n * proper data.\n *\n * @param event\n *            websocket event (onOpen, onMessage etc.)\n * @param msg\n *            Text message received from websocket server\n * @return\n */\n", "func_signal": "private String buildJavaScriptData(String event, String msg)", "code": "{\n\tString b64EncodedMsg = \"Error!\";\n\ttry{\n\t\tif(msg != null) {\n\t\t\tb64EncodedMsg = Base64.encodeBytes(msg.getBytes(UTF8_CHARSET));\n\t\t}\n\t} catch(Exception e) {\n\t\te.printStackTrace();\n\t}\n\tString _d = \"javascript:WebSocket.\" + event + \"(\" + \"{\" + \"\\\"_target\\\":\\\"\" + id + \"\\\",\"\n\t\t\t+ \"\\\"_data\\\":'\" + b64EncodedMsg + \"'\" + \"}\" + \")\";\n\treturn _d;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\WebSocket.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\n", "func_signal": "public static byte[] decode( byte[] source )\nthrows java.io.IOException", "code": "{\n    byte[] decoded = null;\n//        try {\n        decoded = decode( source, 0, source.length, Base64.NO_OPTIONS );\n//        } catch( java.io.IOException ex ) {\n//            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n//        }\n    return decoded;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Calls {@link #write(int)} repeatedly until <var>len</var> \n * bytes are written.\n *\n * @param theBytes array from which to read bytes\n * @param off offset for array\n * @param len max number of bytes to read into array\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write( byte[] theBytes, int off, int len ) \nthrows java.io.IOException", "code": "{\n    // Encoding suspended?\n    if( suspendEncoding ) {\n        this.out.write( theBytes, off, len );\n        return;\n    }   // end if: supsended\n    \n    for( int i = 0; i < len; i++ ) {\n        write( theBytes[ off + i ] );\n    }   // end for: each byte written\n    \n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Decodes four bytes from array <var>source</var>\n * and writes the resulting bytes (up to three of them)\n * to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying \n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 4 for\n * the <var>source</var> array or <var>destOffset</var> + 3 for\n * the <var>destination</var> array.\n * This method returns the actual number of bytes that \n * were converted from the Base64 encoding.\n\t * <p>This is the lowest level of the decoding methods with\n\t * all possible parameters.</p>\n * \n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n\t * @param options alphabet type is pulled from this (standard, url-safe, ordered)\n * @return the number of decoded bytes converted\n * @throws NullPointerException if source or destination arrays are null\n * @throws IllegalArgumentException if srcOffset or destOffset are invalid\n *         or there is not enough room in the array.\n * @since 1.3\n */\n", "func_signal": "private static int decode4to3( \nbyte[] source, int srcOffset, \nbyte[] destination, int destOffset, int options )", "code": "{\n    \n    // Lots of error checking and exception throwing\n    if( source == null ){\n        throw new NullPointerException( \"Source array was null.\" );\n    }   // end if\n    if( destination == null ){\n        throw new NullPointerException( \"Destination array was null.\" );\n    }   // end if\n    if( srcOffset < 0 || srcOffset + 3 >= source.length ){\n        throw new IllegalArgumentException( String.format(\n        \"Source array with length %d cannot have offset of %d and still process four bytes.\", source.length, srcOffset ) );\n    }   // end if\n    if( destOffset < 0 || destOffset +2 >= destination.length ){\n        throw new IllegalArgumentException( String.format(\n        \"Destination array with length %d cannot have offset of %d and still store three bytes.\", destination.length, destOffset ) );\n    }   // end if\n    \n    \n    byte[] DECODABET = getDecodabet( options ); \n\t\n    // Example: Dk==\n    if( source[ srcOffset + 2] == EQUALS_SIGN ) {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1] ] << 24 ) >>> 12 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1] ] & 0xFF ) << 12 );\n        \n        destination[ destOffset ] = (byte)( outBuff >>> 16 );\n        return 1;\n    }\n    \n    // Example: DkL=\n    else if( source[ srcOffset + 3 ] == EQUALS_SIGN ) {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n      //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1 ] ] & 0xFF ) << 12 )\n                      | ( ( DECODABET[ source[ srcOffset + 2 ] ] & 0xFF ) <<  6 );\n        \n        destination[ destOffset     ] = (byte)( outBuff >>> 16 );\n        destination[ destOffset + 1 ] = (byte)( outBuff >>>  8 );\n        return 2;\n    }\n    \n    // Example: DkLE\n    else {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n      //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 )\n      //              | ( ( DECODABET[ source[ srcOffset + 3 ] ] << 24 ) >>> 24 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1 ] ] & 0xFF ) << 12 )\n                      | ( ( DECODABET[ source[ srcOffset + 2 ] ] & 0xFF ) <<  6)\n                      | ( ( DECODABET[ source[ srcOffset + 3 ] ] & 0xFF )      );\n\n        \n        destination[ destOffset     ] = (byte)( outBuff >> 16 );\n        destination[ destOffset + 1 ] = (byte)( outBuff >>  8 );\n        destination[ destOffset + 2 ] = (byte)( outBuff       );\n\n        return 3;\n    }\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n *  \n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len, int options ) throws java.io.IOException", "code": "{\n    byte[] encoded = encodeBytesToBytes( source, off, len, options );\n\n    // Return value according to relevant encoding.\n    try {\n        return new String( encoded, PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue) {\n        return new String( encoded );\n    }   // end catch\n    \n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n * writing it to the <code>encoded</code> CharBuffer.\n * This is an experimental feature. Currently it does not\n * pass along any options (such as {@link #DO_BREAK_LINES}\n * or {@link #GZIP}.\n *\n * @param raw input buffer\n * @param encoded output buffer\n * @since 2.3\n */\n", "func_signal": "public static void encode( java.nio.ByteBuffer raw, java.nio.CharBuffer encoded )", "code": "{\n    byte[] raw3 = new byte[3];\n    byte[] enc4 = new byte[4];\n\n    while( raw.hasRemaining() ){\n        int rem = Math.min(3,raw.remaining());\n        raw.get(raw3,0,rem);\n        Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS );\n        for( int i = 0; i < 4; i++ ){\n            encoded.put( (char)(enc4[i] & 0xFF) );\n        }\n    }   // end input remaining\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\n", "func_signal": "public static byte[] decode( String s, int options ) throws java.io.IOException", "code": "{\n    \n    if( s == null ){\n        throw new NullPointerException( \"Input string was null.\" );\n    }   // end if\n    \n    byte[] bytes;\n    try {\n        bytes = s.getBytes( PREFERRED_ENCODING );\n    }   // end try\n    catch( java.io.UnsupportedEncodingException uee ) {\n        bytes = s.getBytes();\n    }   // end catch\n\t\t//</change>\n    \n    // Decode\n    bytes = decode( bytes, 0, bytes.length, options );\n    \n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if( (bytes != null) && (bytes.length >= 4) && (!dontGunzip) ) {\n        \n        int head = ((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if( java.util.zip.GZIPInputStream.GZIP_MAGIC == head )  {\n            java.io.ByteArrayInputStream  bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int    length = 0;\n\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream( bytes );\n                gzis = new java.util.zip.GZIPInputStream( bais );\n\n                while( ( length = gzis.read( buffer ) ) >= 0 ) {\n                    baos.write(buffer,0,length);\n                }   // end while: reading input\n\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n\n            }   // end try\n            catch( java.io.IOException e ) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            }   // end catch\n            finally {\n                try{ baos.close(); } catch( Exception e ){}\n                try{ gzis.close(); } catch( Exception e ){}\n                try{ bais.close(); } catch( Exception e ){}\n            }   // end finally\n\n        }   // end if: gzipped\n    }   // end if: bytes.length >= 2\n    \n    return bytes;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Calls {@link #read()} repeatedly until the end of stream\n * is reached or <var>len</var> bytes are read.\n * Returns number of bytes read into array or -1 if\n * end of stream is encountered.\n *\n * @param dest array to hold values\n * @param off offset for array\n * @param len max number of bytes to read into array\n * @return bytes read into array or -1 if end of stream is encountered.\n * @since 1.3\n */\n", "func_signal": "@Override\npublic int read( byte[] dest, int off, int len ) \nthrows java.io.IOException", "code": "{\n    int i;\n    int b;\n    for( i = 0; i < len; i++ ) {\n        b = read();\n        \n        if( b >= 0 ) {\n            dest[off + i] = (byte) b;\n        }\n        else if( i == 0 ) {\n            return -1;\n        }\n        else {\n            break; // Out of 'for' loop\n        } // Out of 'for' loop\n    }   // end for: each byte read\n    return i;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\n", "func_signal": "public static byte[] encodeBytesToBytes( byte[] source )", "code": "{\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes( source, 0, source.length, Base64.NO_OPTIONS );\n    } catch( java.io.IOException ex ) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Called when an entire text frame has been received.\n *\n * @param msg\n *            Message from websocket server\n */\n", "func_signal": "public void onMessage(String msg)", "code": "{\n\tfinal String data = msg;\n\tLog.v(\"websocket\", \"Received a message: \" + msg);\n\tappView.post(new Runnable() {\n        public void run() {\n            if(keyboardIsShowing){\n            \tMessage message = new Message();\n            \tmessage.obj = buildJavaScriptData(EVENT_ON_MESSAGE, data);\n            \tmessage.what = 3;\n            \thandler.sendMessage(message);\n            } else {\n            \tappView.loadUrl(buildJavaScriptData(EVENT_ON_MESSAGE, data));\n            }\n        }\n    });\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\WebSocket.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/** \n * Flushes and closes (I think, in the superclass) the stream. \n *\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void close() throws java.io.IOException", "code": "{\n    // 1. Ensure that pending characters are written\n    flushBase64();\n\n    // 2. Actually close the stream\n    // Base class both flushes and closes.\n    super.close();\n    \n    buffer = null;\n    out    = null;\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Returns one of the _SOMETHING_ALPHABET byte arrays depending on\n * the options specified.\n * It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE\n * in which case one of them will be picked, though there is\n * no guarantee as to which one will be picked.\n */\n", "func_signal": "private final static byte[] getAlphabet( int options )", "code": "{\n    if ((options & URL_SAFE) == URL_SAFE) {\n        return _URL_SAFE_ALPHABET;\n    } else if ((options & ORDERED) == ORDERED) {\n        return _ORDERED_ALPHABET;\n    } else {\n        return _STANDARD_ALPHABET;\n    }\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n * writing it to the <code>encoded</code> ByteBuffer.\n * This is an experimental feature. Currently it does not\n * pass along any options (such as {@link #DO_BREAK_LINES}\n * or {@link #GZIP}.\n *\n * @param raw input buffer\n * @param encoded output buffer\n * @since 2.3\n */\n", "func_signal": "public static void encode( java.nio.ByteBuffer raw, java.nio.ByteBuffer encoded )", "code": "{\n    byte[] raw3 = new byte[3];\n    byte[] enc4 = new byte[4];\n\n    while( raw.hasRemaining() ){\n        int rem = Math.min(3,raw.remaining());\n        raw.get(raw3,0,rem);\n        Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS );\n        encoded.put(enc4);\n    }   // end input remaining\n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.\n *\n * @param infile Input file\n * @param outfile Output file\n * @throws java.io.IOException if there is an error\n * @since 2.2\n */\n", "func_signal": "public static void encodeFileToFile( String infile, String outfile )\nthrows java.io.IOException", "code": "{\n    \n    String encoded = Base64.encodeFromFile( infile );\n    java.io.OutputStream out = null;\n    try{\n        out = new java.io.BufferedOutputStream(\n              new java.io.FileOutputStream( outfile ) );\n        out.write( encoded.getBytes(\"US-ASCII\") ); // Strict, 7-bit output.\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch\n    finally {\n        try { out.close(); }\n        catch( Exception ex ){}\n    }   // end finally    \n}", "path": "src\\com\\strumsoft\\websocket\\phonegap\\Base64.java", "repo_name": "anismiles/websocket-android-phonegap", "stars": 321, "license": "mit", "language": "java", "size": 224}
{"docstring": "/**\n * Sets the click intent to start (using\n * {@link android.content.Context#startActivity(android.content.Intent)}) when the user clicks\n * the status in DashClock. The activity represented by this intent will be started in a new\n * task and should be exported. Default null.\n */\n", "func_signal": "public ExtensionData clickIntent(Intent clickIntent)", "code": "{\n    mClickIntent = clickIntent;\n    return this;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Serializes the contents of this object to a {@link Bundle}.\n */\n", "func_signal": "public Bundle toBundle()", "code": "{\n    Bundle data = new Bundle();\n    data.putBoolean(KEY_VISIBLE, mVisible);\n    data.putInt(KEY_ICON, mIcon);\n    data.putString(KEY_ICON_URI, (mIconUri == null ? null : mIconUri.toString()));\n    data.putString(KEY_STATUS, mStatus);\n    data.putString(KEY_EXPANDED_TITLE, mExpandedTitle);\n    data.putString(KEY_EXPANDED_BODY, mExpandedBody);\n    data.putString(KEY_CLICK_INTENT, (mClickIntent == null) ? null : mClickIntent.toUri(0));\n    data.putString(KEY_CONTENT_DESCRIPTION, mContentDescription);\n    return data;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Sets the ID of the drawable resource within the extension's package that represents this\n * data. The icon should be entirely white, with alpha, and about 48x48 dp. It will be\n * scaled down as needed. If there is no contextual icon representation of the data, simply\n * use the extension or app icon. If an {@link #iconUri(Uri) iconUri} is provided, it\n * will take precedence over this value. Default 0.\n *\n * @see #iconUri(Uri)\n */\n", "func_signal": "public ExtensionData icon(int icon)", "code": "{\n    mIcon = icon;\n    return this;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Returns the display name for the contact with the given ID and/or the given address\n * (phone number). One or both parameters should be provided.\n */\n", "func_signal": "private String getDisplayNameForContact(long contactId, String address)", "code": "{\n    String displayName = address;\n\n    if (contactId > 0) {\n        Cursor contactCursor = tryOpenContactsCursorById(contactId);\n        if (contactCursor != null) {\n            if (contactCursor.moveToFirst()) {\n                displayName = contactCursor.getString(RawContactsQuery.DISPLAY_NAME);\n            } else {\n                contactId = 0;\n            }\n            contactCursor.close();\n        }\n    }\n\n    if (contactId <= 0) {\n        Cursor contactCursor = tryOpenContactsCursorByAddress(address);\n        if (contactCursor != null) {\n            if (contactCursor.moveToFirst()) {\n                displayName = contactCursor.getString(ContactsQuery.DISPLAY_NAME);\n            }\n            contactCursor.close();\n        }\n    }\n\n    return displayName;\n}", "path": "main\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\phone\\SmsExtension.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Check if the installed Gmail app supports querying for label information.\n *\n * @param c an application Context\n * @return true if it's safe to make label API queries\n */\n", "func_signal": "public static boolean canReadLabels(Context c)", "code": "{\n    boolean supported = false;\n\n    try {\n        final PackageInfo info = c.getPackageManager().getPackageInfo(PACKAGE,\n                PackageManager.GET_PROVIDERS | PackageManager.GET_PERMISSIONS);\n        boolean allowRead = false;\n        if (info.permissions != null) {\n            for (int i = 0, len = info.permissions.length; i < len; i++) {\n                final PermissionInfo perm = info.permissions[i];\n                if (PERMISSION.equals(perm.name)\n                        && perm.protectionLevel < PermissionInfo.PROTECTION_SIGNATURE) {\n                    allowRead = true;\n                    break;\n                }\n            }\n        }\n        if (allowRead && info.providers != null) {\n            for (int i = 0, len = info.providers.length; i < len; i++) {\n                final ProviderInfo provider = info.providers[i];\n                if (AUTHORITY.equals(provider.authority) &&\n                        TextUtils.equals(PERMISSION, provider.readPermission)) {\n                    supported = true;\n                }\n            }\n        }\n    } catch (NameNotFoundException e) {\n        // Gmail app not found\n    }\n    return supported;\n}", "path": "main\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\gmail\\GmailContract.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Sets the content:// URI of the bitmap representing this data. This takes precedence over\n * the regular {@link #icon(int) icon resource ID} if set. This resource will be loaded\n * using {@link android.content.ContentResolver#openFileDescriptor(android.net.Uri, String)} and\n * {@link android.graphics.BitmapFactory#decodeFileDescriptor(java.io.FileDescriptor)}. See the\n * {@link #icon(int) icon} method for guidelines on the styling of this bitmap.\n *\n * @since Protocol Version 2 (API r2.x)\n */\n", "func_signal": "public ExtensionData iconUri(Uri iconUri)", "code": "{\n    mIconUri = iconUri;\n    return this;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Serializes the contents of this object to JSON.\n */\n", "func_signal": "public JSONObject serialize() throws JSONException", "code": "{\n    JSONObject data = new JSONObject();\n    data.put(KEY_VISIBLE, mVisible);\n    data.put(KEY_ICON, mIcon);\n    data.put(KEY_ICON_URI, (mIconUri == null ? null : mIconUri.toString()));\n    data.put(KEY_STATUS, mStatus);\n    data.put(KEY_EXPANDED_TITLE, mExpandedTitle);\n    data.put(KEY_EXPANDED_BODY, mExpandedBody);\n    data.put(KEY_CLICK_INTENT, (mClickIntent == null) ? null : mClickIntent.toUri(0));\n    data.put(KEY_CONTENT_DESCRIPTION, mContentDescription);\n    return data;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Replaces the set of active extensions with the given list.\n */\n", "func_signal": "public void setActiveExtensions(Set<ComponentName> extensions)", "code": "{\n    // Join external and internal extensions\n    Set<ComponentName> allExtensions = new HashSet<>(getInternalActiveExtensionNames());\n    for (ComponentName cn : extensions) {\n        if (!allExtensions.contains(cn)) {\n            allExtensions.add(cn);\n        }\n    }\n\n    Map<ComponentName, ExtensionListing> infos = new HashMap<>();\n    for (ExtensionListing info : getAvailableExtensions()) {\n        infos.put(info.componentName(), info);\n    }\n\n    Set<ComponentName> activeExtensionNames = getActiveExtensionNames();\n    if (activeExtensionNames.equals(allExtensions)) {\n        LOGD(TAG, \"No change to list of active extensions.\");\n        return;\n    }\n\n    // Clear cached data for any no-longer-active extensions.\n    for (ComponentName cn : activeExtensionNames) {\n        if (!allExtensions.contains(cn)) {\n            destroyExtensionData(cn);\n        }\n    }\n\n    // Set the new list of active extensions, loading cached data if necessary.\n    List<ExtensionWithData> newActiveExtensions = new ArrayList<>();\n\n    for (ComponentName cn : allExtensions) {\n        if (mExtensionInfoMap.containsKey(cn)) {\n            newActiveExtensions.add(mExtensionInfoMap.get(cn));\n        } else {\n            ExtensionWithData ewd = new ExtensionWithData();\n            ewd.listing = infos.get(cn);\n            if (ewd.listing == null) {\n                ewd.listing = new ExtensionListing();\n                ewd.listing.componentName(cn);\n            }\n            ewd.latestData = deserializeExtensionData(ewd.listing.componentName());\n            newActiveExtensions.add(ewd);\n        }\n    }\n\n    mExtensionInfoMap.clear();\n    for (ExtensionWithData ewd : newActiveExtensions) {\n        mExtensionInfoMap.put(ewd.listing.componentName(), ewd);\n    }\n\n    synchronized (mActiveExtensions) {\n        mActiveExtensions.clear();\n        mActiveExtensions.addAll(newActiveExtensions);\n    }\n\n    LOGD(TAG, \"List of active extensions has changed.\");\n    notifyOnChangeListeners(null);\n}", "path": "main\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\ExtensionManager.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Deserializes the given JSON representation of extension data, populating this\n * object.\n */\n", "func_signal": "public void deserialize(JSONObject data) throws JSONException", "code": "{\n    this.mVisible = data.optBoolean(KEY_VISIBLE);\n    this.mIcon = data.optInt(KEY_ICON);\n    String iconUriString = data.optString(KEY_ICON_URI);\n    this.mIconUri = TextUtils.isEmpty(iconUriString) ? null : Uri.parse(iconUriString);\n    this.mStatus = data.optString(KEY_STATUS);\n    this.mExpandedTitle = data.optString(KEY_EXPANDED_TITLE);\n    this.mExpandedBody = data.optString(KEY_EXPANDED_BODY);\n    try {\n        this.mClickIntent = Intent.parseUri(data.optString(KEY_CLICK_INTENT), 0);\n    } catch (URISyntaxException ignored) {\n    }\n    this.mContentDescription = data.optString(KEY_CONTENT_DESCRIPTION);\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Sets the short string representing this data, to be shown in DashClock's collapsed form.\n * Should be no longer than a few characters. For example, if your {@link #expandedTitle()} is\n * \"45\u00b0, Sunny\", your status could simply be \"45\u00b0\". Alternatively, if the status contains a\n * single newline, DashClock may break it up over two lines and use a smaller font. This should\n * be avoided where possible in favor of an {@link #expandedTitle(String)}. Default null.\n */\n", "func_signal": "public ExtensionData status(String status)", "code": "{\n    mStatus = status;\n    return this;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Sets the expanded title representing this data. Generally a longer form of\n * {@link #status()}. Can be multiple lines, although DashClock will cap the number of lines\n * shown. If this is not set, DashClock will just use the {@link #status()}.\n * Default null.\n */\n", "func_signal": "public ExtensionData expandedTitle(String expandedTitle)", "code": "{\n    mExpandedTitle = expandedTitle;\n    return this;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * When the preference's value is changed, trigger the given listener. The listener is also\n * immediately called with the preference's current value upon calling this method.\n */\n", "func_signal": "public static void setAndCallPreferenceChangeListener(Preference preference,\n        Preference.OnPreferenceChangeListener listener)", "code": "{\n    // Set the listener to watch for value changes.\n    preference.setOnPreferenceChangeListener(listener);\n\n    // Trigger the listener immediately with the preference's\n    // current value.\n    listener.onPreferenceChange(preference,\n            PreferenceManager\n                    .getDefaultSharedPreferences(preference.getContext())\n                    .getString(preference.getKey(), \"\"));\n}", "path": "main\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\configuration\\BaseSettingsActivity.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Returns true if the two provided data objects are equal (or both null).\n */\n", "func_signal": "public static boolean equals(ExtensionData x, ExtensionData y)", "code": "{\n    if (x == null || y == null) {\n        return x == y;\n    } else {\n        return x.equals(y);\n    }\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Updates and caches the user-visible data for a given extension.\n */\n", "func_signal": "public boolean updateExtensionData(ComponentName cn, ExtensionData data)", "code": "{\n    data.clean();\n\n    ExtensionWithData ewd = mExtensionInfoMap.get(cn);\n    if (ewd != null && !ExtensionData.equals(ewd.latestData, data)) {\n        ewd.latestData = data;\n        serializeExtensionData(ewd.listing.componentName(), data);\n        notifyOnChangeListeners(ewd.listing.componentName());\n        return true;\n    }\n    return false;\n}", "path": "main\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\ExtensionManager.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Deserializes the given {@link Bundle} representation of extension data, populating this\n * object.\n */\n", "func_signal": "public void fromBundle(Bundle src)", "code": "{\n    this.mVisible = src.getBoolean(KEY_VISIBLE, true);\n    this.mIcon = src.getInt(KEY_ICON);\n    String iconUriString = src.getString(KEY_ICON_URI);\n    this.mIconUri = TextUtils.isEmpty(iconUriString) ? null : Uri.parse(iconUriString);\n    this.mStatus = src.getString(KEY_STATUS);\n    this.mExpandedTitle = src.getString(KEY_EXPANDED_TITLE);\n    this.mExpandedBody = src.getString(KEY_EXPANDED_BODY);\n    try {\n        this.mClickIntent = Intent.parseUri(src.getString(KEY_CLICK_INTENT), 0);\n    } catch (URISyntaxException ignored) {\n    }\n    this.mContentDescription = src.getString(KEY_CONTENT_DESCRIPTION);\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Sets the expanded body text (below the expanded title), representing this data. Can span\n * multiple lines, although DashClock will cap the number of lines shown. Default null.\n */\n", "func_signal": "public ExtensionData expandedBody(String expandedBody)", "code": "{\n    mExpandedBody = expandedBody;\n    return this;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Replaces the set of active extensions with the given list.\n */\n", "func_signal": "public void setInternalActiveExtensions(List<ComponentName> extensions)", "code": "{\n    StringBuilder sb = new StringBuilder();\n\n    for (ComponentName extension : extensions) {\n        if (sb.length() > 0) {\n            sb.append(\",\");\n        }\n        sb.append(extension.flattenToString());\n    }\n\n    mDefaultPreferences.edit()\n            .putString(PREF_ACTIVE_EXTENSIONS, sb.toString())\n            .apply();\n    new BackupManager(mApplicationContext).dataChanged();\n\n    mInternalActiveExtensions.clear();\n    mInternalActiveExtensions.addAll(extensions);\n    setActiveExtensions(getActiveExtensionNames());\n}", "path": "main\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\ExtensionManager.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Cleans up this object's data according to the size limits described by\n * {@link #MAX_STATUS_LENGTH}, {@link #MAX_EXPANDED_TITLE_LENGTH}, etc.\n */\n", "func_signal": "public void clean()", "code": "{\n    if (!TextUtils.isEmpty(mStatus)\n            && mStatus.length() > MAX_STATUS_LENGTH) {\n        mStatus = mStatus.substring(0, MAX_STATUS_LENGTH);\n    }\n    if (!TextUtils.isEmpty(mExpandedTitle)\n            && mExpandedTitle.length() > MAX_EXPANDED_TITLE_LENGTH) {\n        mExpandedTitle = mExpandedTitle.substring(0, MAX_EXPANDED_TITLE_LENGTH);\n    }\n    if (!TextUtils.isEmpty(mExpandedBody)\n            && mExpandedBody.length() > MAX_EXPANDED_BODY_LENGTH) {\n        mExpandedBody = mExpandedBody.substring(0, MAX_EXPANDED_BODY_LENGTH);\n    }\n    if (!TextUtils.isEmpty(mContentDescription)\n            && mContentDescription.length() > MAX_EXPANDED_BODY_LENGTH) {\n        mContentDescription = mContentDescription.substring(0, MAX_CONTENT_DESCRIPTION_LENGTH);\n    }\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * Sets the content description for this data. This content description will replace the\n * {@link #status()}, {@link #expandedTitle()} and {@link #expandedBody()} for accessibility\n * purposes.\n *\n * @see android.view.View#setContentDescription(CharSequence)\n * @since Protocol Version 2 (API v2.x)\n */\n", "func_signal": "public ExtensionData contentDescription(String contentDescription)", "code": "{\n    mContentDescription = contentDescription;\n    return this;\n}", "path": "api\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\api\\ExtensionData.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "/**\n * De-activates active extensions that are unsupported or are no longer installed.\n */\n", "func_signal": "public boolean cleanupExtensions()", "code": "{\n    Set<ComponentName> availableExtensions = new HashSet<>();\n    for (ExtensionListing info : getAvailableExtensions()) {\n        // Ensure the extension protocol version is supported. If it isn't, don't allow its use.\n        if (!info.compatible()) {\n            LOGW(TAG, \"Extension '\" + info.title() + \"' using unsupported protocol version \"\n                    + info.protocolVersion() + \".\");\n            continue;\n        }\n        availableExtensions.add(info.componentName());\n    }\n\n    boolean cleanupRequired = false;\n    Set<ComponentName> newActiveExtensions = new HashSet<>();\n\n    synchronized (mActiveExtensions) {\n        for (ExtensionWithData ewd : mActiveExtensions) {\n            if (availableExtensions.contains(ewd.listing.componentName())) {\n                newActiveExtensions.add(ewd.listing.componentName());\n            } else {\n                cleanupRequired = true;\n            }\n        }\n    }\n\n    if (cleanupRequired) {\n        setActiveExtensions(newActiveExtensions);\n        return true;\n    }\n\n    return false;\n}", "path": "main\\src\\main\\java\\com\\google\\android\\apps\\dashclock\\ExtensionManager.java", "repo_name": "romannurik/dashclock", "stars": 482, "license": "apache-2.0", "language": "java", "size": 5921}
{"docstring": "// real meat\n", "func_signal": "public MethodDeclaration handle(final MethodBinding abstractMethod, final AnnotationValues<AutoGenMethodStub> annotation, final Annotation source,\n\t\tfinal EclipseNode annotationNode)", "code": "{\n\tfinal EclipseType type = EclipseType.typeOf(annotationNode, source);\n\tfinal Statement<?> statement;\n\tif (annotation.getInstance().throwException()) {\n\t\tstatement = Throw(New(Type(UnsupportedOperationException.class)).withArgument(String(\"This method is not implemented yet.\")));\n\t} else {\n\t\tstatement = ReturnDefault();\n\t}\n\tMethodDeclaration method = (MethodDeclaration) type.editor().injectMethod(MethodDecl(abstractMethod).implementing().withStatement(statement));\n\n\ttype.editor().rebuild();\n\n\treturn method;\n}", "path": "src\\eclipse\\lombok\\eclipse\\handlers\\HandleAutoGenMethodStub.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Lock Conditions\n * \n * <pre>\n * void methodAnnotatedWithAwait() throws java.lang.InterruptedException {\n *   this.&lt;LOCK_NAME&gt;.lock();\n *   try {\n *     while (this.&lt;CONDITION_METHOD&gt;()) {\n *       this.&lt;CONDITION_NAME&gt;.await();\n *     }\n * \n *     // method body\n * \n *   } finally {\n *     this.&lt;LOCK_NAME&gt;.unlock();\n *   }\n * }\n * \n * <pre>\n */\n", "func_signal": "@Target(METHOD)\n@Retention(SOURCE)\npublic @interface Await", "code": "{\n\t/**\n\t * Name of the condition.\n\t * <p>\n\t * If no condition with the specified name exists a new {@link java.util.concurrent.locks.Condition Condition} will\n\t * be created, using this name.\n\t */\n\tString conditionName();\n\n\t/**\n\t * Specifies the place to put the await-block, default is {@link lombok.Position BEFORE}.\n\t * <p>\n\t * Supported positions:\n\t * <ul>\n\t * <li>{@link lombok.Position BEFORE} - before the method body</li>\n\t * <li>{@link lombok.Position AFTER} - after the method body</li>\n\t * </ul>\n\t */\n\tPosition pos() default lombok.Position.BEFORE;\n\n\t/**\n\t * Name of the lock, default is {@code $<CONDITION_NAME>Lock}.\n\t * <p>\n\t * If no lock with the specified name exists a new {@link java.util.concurrent.locks.Lock Lock} will be created,\n\t * using this name.\n\t */\n\tString lockName() default \"\";\n\n\t/**\n\t * Method to verify if the condition is met.\n\t * <p>\n\t * The method must return a {@code boolean} and may not require any parameters.\n\t */\n\tString conditionMethod();\n}", "path": "src\\core\\lombok\\Await.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Lock Conditions\n * \n * <pre>\n * void methodAnnotatedWithSignal() {\n *   this.&lt;LOCK_NAME&gt;.lock();\n *   try {\n * \n *     // method body\n * \n *     this.&lt;CONDITION_NAME&gt;.signal();\n *   } finally {\n *     this.&lt;LOCK_NAME&gt;.unlock();\n *   }\n * }\n * \n * <pre>\n */\n", "func_signal": "@Target(METHOD)\n@Retention(SOURCE)\npublic @interface Signal", "code": "{\n\t/**\n\t * Name of the condition.\n\t * <p>\n\t * If no condition with the specified name exists a new {@link java.util.concurrent.locks.Condition Condition} will\n\t * be created, using this name.\n\t */\n\tString value();\n\n\t/**\n\t * Specifies the place to put the await-block, default is {@link lombok.Position AFTER}.\n\t * <p>\n\t * Supported positions:\n\t * <ul>\n\t * <li>{@link lombok.Position BEFORE} - before the method body</li>\n\t * <li>{@link lombok.Position AFTER} - after the method body</li>\n\t * </ul>\n\t */\n\tPosition pos() default lombok.Position.AFTER;\n\n\t/**\n\t * Name of the lock, default is {@code $<CONDITION_NAME>Lock}.\n\t * <p>\n\t * If no lock with the specified name exists a new {@link java.util.concurrent.locks.Lock Lock} will be created,\n\t * using this name.\n\t */\n\tString lockName() default \"\";\n}", "path": "src\\core\\lombok\\Signal.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * <pre>\n * null        -> null\n *             ->\n * IOInterface -> IOInterface\n * Irony       -> Irony\n * IObject     -> Object\n * \n * {@code [I]([A-Z][a-z].*)}\n * \n * <pre>\n */\n", "func_signal": "public static String interfaceName(final String s)", "code": "{\n\tif (Is.empty(s) || (s.length() <= 2)) return s;\n\treturn ((s.charAt(0) == 'I') && isUpperCase(s.charAt(1)) && isLowerCase(s.charAt(2))) ? s.substring(1) : s;\n}", "path": "src\\core\\lombok\\core\\util\\Names.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "// error handling only\n", "func_signal": "@Override\npublic void handle(final AnnotationValues<AutoGenMethodStub> annotation, final Annotation source, final EclipseNode annotationNode)", "code": "{\n\tfinal EclipseType type = EclipseType.typeOf(annotationNode, source);\n\tif (type.isInterface() || type.isAnnotation()) {\n\t\tannotationNode.addError(canBeUsedOnClassAndEnumOnly(AutoGenMethodStub.class));\n\t}\n}", "path": "src\\eclipse\\lombok\\eclipse\\handlers\\HandleAutoGenMethodStub.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Removes the interface from javac's AST (it remains in lombok's AST), then removes any import statement that\n * imports this exact interface (not star imports).\n */\n", "func_signal": "public static void markInterfaceAsProcessed(final JavacNode typeNode, final Class<?> interfazeType)", "code": "{\n\tif (inNetbeansEditor(typeNode)) return;\n\tJCClassDecl typeDecl = null;\n\tif (typeNode.get() instanceof JCClassDecl) typeDecl = (JCClassDecl) typeNode.get();\n\tif (typeDecl != null) {\n\t\tListBuffer<JCExpression> newImplementing = ListBuffer.lb();\n\t\tfor (JCExpression exp : typeDecl.implementing) {\n\t\t\tif (!(exp.toString().equals(interfazeType.getName()) || exp.toString().equals(interfazeType.getSimpleName()))) newImplementing.append(exp);\n\t\t}\n\t\ttypeDecl.implementing = newImplementing.toList();\n\t}\n}", "path": "src\\javac\\lombok\\javac\\handlers\\Javac.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Checks if there is an entry point with the provided name.\n * \n * @param methodName\n *            the entry point name to check for.\n * @param node\n *            Any node that represents the Type to look in, or any child node thereof.\n */\n", "func_signal": "public boolean entrypointExists(final String methodName, final TYPE_TYPE type)", "code": "{\n\tfor (METHOD_TYPE method : type.methods()) {\n\t\tif (method.isStatic() && method.returns(\"void\") && method.name().equals(methodName)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\core\\lombok\\core\\handlers\\EntrypointHandler.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Lock Conditions\n * \n * <pre>\n * void methodAnnotatedWithAwait() throws java.lang.InterruptedException {\n *   this.&lt;LOCK_NAME&gt;.lock();\n *   try {\n *     while (this.&lt;AWAIT_CONDITION_METHOD&gt;()) {\n *       this.&lt;AWAIT_CONDITION_NAME&gt;.await();\n *     }\n * \n *     // method body\n * \n *     this.&lt;SIGNAL_CONDITION_NAME&gt;.signal();\n *   } finally {\n *     this.&lt;LOCK_NAME&gt;.unlock();\n *   }\n * }\n * \n * <pre>\n */\n", "func_signal": "@Target(METHOD)\n@Retention(SOURCE)\npublic @interface AwaitBeforeAndSignalAfter", "code": "{\n\n\t/**\n\t * Name of the lock, default is {@code $<AWAIT_CONDITION_NAME><SIGNAL_CONDITION_NAME>Lock}.\n\t * <p>\n\t * If no lock with the specified name exists a new {@link java.util.concurrent.locks.Lock Lock} will be created,\n\t * using this name.\n\t */\n\tString lockName() default \"\";\n\n\t/**\n\t * Name of the signal-condition.\n\t * <p>\n\t * If no condition with the specified name exists a new {@link java.util.concurrent.locks.Condition Condition} will\n\t * be created, using this name.\n\t */\n\tString signalConditionName();\n\n\t/**\n\t * Name of the await-condition.\n\t * <p>\n\t * If no condition with the specified name exists a new {@link java.util.concurrent.locks.Condition Condition} will\n\t * be created, using this name.\n\t */\n\tString awaitConditionName();\n\n\t/**\n\t * Method to verify if the await-condition is met.\n\t * <p>\n\t * The method must return a {@code boolean} and may not require any parameters.\n\t */\n\tString awaitConditionMethod();\n}", "path": "src\\core\\lombok\\AwaitBeforeAndSignalAfter.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Handles the following scenarios:\n * <ol>\n * <li>\n * \n * <pre>\n * case 2:\n * case 3:                  => merge 2 and 3 into 4\n * case 4:\n *   bodyOf4();\n * </pre>\n * \n * </li>\n * <li>\n * \n * <pre>\n * case 2:\n *   $state = 5;            => merge 2 into 5\n *   continue;\n * // case 3-4\n * case 5:\n *   bodyOf5();\n * </pre>\n * \n * </li>\n * </ol>\n */\n", "func_signal": "public void optimizeStateChanges()", "code": "{\n\tint count = cases.size();\n\tfor (Map.Entry<NumberLiteral, Case> entry : labelLiterals.entrySet()) {\n\t\tCase label = entry.getValue();\n\t\twhile (label.getPattern() != null) {\n\t\t\tif (label.getStatements().isEmpty()) {\n\t\t\t\tNumberLiteral literal = (NumberLiteral) label.getPattern();\n\t\t\t\tint i = (Integer) literal.getNumber() + 1;\n\t\t\t\tif (i < count) {\n\t\t\t\t\tlabel = cases.get(i);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tCase next = getLabel(getStateFromAssignment(label.getStatements().get(0)));\n\t\t\t\tint numberOfStatements = label.getStatements().size();\n\t\t\t\tif ((next != null) && ((numberOfStatements == 1) || ((numberOfStatements > 1) && (label.getStatements().get(1) instanceof Continue)))) {\n\t\t\t\t\tlabel = next;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tentry.setValue(label);\n\t\tif (label.getPattern() != null) {\n\t\t\tusedLabels.add(label);\n\t\t}\n\t}\n}", "path": "src\\core\\lombok\\core\\handlers\\YieldHandler.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "// for now only works for void or boolean\n", "func_signal": "private boolean matchesReturnType(final MethodBinding method, final String forcedReturnType)", "code": "{\n\tif (forcedReturnType == null) return true;\n\tif (\"void\".equals(forcedReturnType)) return method.returnType.id == TypeIds.T_void;\n\tif (\"boolean\".equals(forcedReturnType)) return method.returnType.id == TypeIds.T_boolean;\n\treturn false;\n}", "path": "src\\eclipse\\lombok\\eclipse\\handlers\\HandleActionFunctionAndPredicate.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Put on any type to make lombok-pg create a fluent interface builder for it.\n * <p>\n * Before:\n * \n * <pre>\n * &#064;lombok.Builder\n * class Foo {\n * \tprivate final String a;\n * \tprivate final int b;\n * \tprivate String optionalC = &quot;default&quot;;\n * \tprivate java.util.List&lt;java.lang.Long&gt; optionalD;\n * }\n * </pre>\n * \n * After:\n * \n * <pre>\n * class Foo {\n * \tprivate final String a;\n * \tprivate final int b;\n * \tprivate String optionalC;\n * \tprivate java.util.List&lt;java.lang.Long&gt; optionalD;\n * \n * \tprivate Foo(final $Builder builder) {\n * \t\tsuper();\n * \t\tthis.a = builder.a;\n * \t\tthis.b = builder.b;\n * \t\tthis.optionalVal1 = builder.optionalVal1;\n * \t\tthis.optionalVal2 = builder.optionalVal2;\n * \t}\n * \n * \tpublic static interface $ADef {\n * \t\tpublic $BDef a(final String a);\n * \t}\n * \n * \tpublic static interface $BDef {\n * \t\tpublic $OptionalDef b(final int b);\n * \t}\n * \n * \tpublic static interface $OptionalDef {\n * \t\tpublic $OptionalDef optionalC(final String optionalC);\n * \n * \t\tpublic $OptionalDef optionalD(final java.util.List&lt;java.lang.Long&gt; optionalD);\n * \n * \t\tpublic Foo build();\n * \t}\n * \n * \tprivate static class $Builder implements $ADef, $BDef, $OptionalDef {\n * \t\tprivate String a;\n * \t\tprivate int b;\n * \t\tprivate String optionalC = &quot;default&quot;;\n * \t\tprivate java.util.List&lt;java.lang.Long&gt; optionalD;\n * \n * \t\tpublic $BDef a(final String a) {\n * \t\t\tthis.a = a;\n * \t\t\treturn this;\n * \t\t}\n * \n * \t\tpublic $OptionalDef b(final int b) {\n * \t\t\tthis.b = b;\n * \t\t\treturn this;\n * \t\t}\n * \n * \t\tpublic $OptionalDef optionalC(final String optionalC) {\n * \t\t\tthis.optionalC = optionalC;\n * \t\t\treturn this;\n * \t\t}\n * \n * \t\tpublic $OptionalDef optionalD(final java.util.List&lt;java.lang.Long&gt; optionalD) {\n * \t\t\tthis.optionalD = optionalD;\n * \t\t\treturn this;\n * \t\t}\n * \n * \t\tpublic Foo build() {\n * \t\t\treturn new Foo(this);\n * \t\t}\n * \t}\n * \n * \tpublic static $ADef create() {\n * \t\treturn new $Builder();\n * \t}\n * }\n * </pre>\n * <p>\n * <b>Note:</b> For each field that is a initialized collection( or map), the methods add/addAll( or put/putAll) will be\n * generated instead of the fluent-set method. This behavior can be disabled via {@link #convenientMethods()\n * convenientMethods = false}.\n */\n", "func_signal": "@Target(TYPE)\n@Retention(SOURCE)\npublic @interface Builder", "code": "{\n\t/**\n\t * If you want the create-method to be non-public, you can specify an alternate access level here.\n\t */\n\tlombok.AccessLevel value() default lombok.AccessLevel.PUBLIC;\n\n\t/**\n\t * If specified all builder methods will be prefixed with this string.\n\t * <p>\n\t * A common example would be {@code @Builder(prefix=\"with\")} which will generate builder methods like\n\t * {@code .withValue(value)}.\n\t */\n\tString prefix() default \"\";\n\n\t/**\n\t * Any fields listed here will not appear in the builder.\n\t */\n\tString[] exclude() default {};\n\n\t/**\n\t * If you don't want collection-specific methods (add, addAll, put, putAll) you can disable them here.\n\t */\n\tboolean convenientMethods() default true;\n\n\t/**\n\t * For each method listed here a method will appear in the builder.\n\t * <p>\n\t * A common example would be <code>@Builder(callMethods={\"execute\", \"toString\"})</code> which would allow something\n\t * like:\n\t * \n\t * <pre>\n\t * Java.java().jar(\"test.jar\").Xbootclasspatha(\"libs/asm.jar\").execute()}", "path": "src\\core\\lombok\\Builder.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Given the name of a field, return the 'base name' of that field. For example, {@code fFoobar} becomes\n * {@code foobar} if {@code f} is in the prefix list. For prefixes that end in a letter character, the next\n * character must be a non-lowercase character (i.e. {@code hashCode} is not {@code ashCode} even if {@code h} is in\n * the prefix list, but {@code hAshcode} would become {@code ashCode}). The first prefix that matches is used. If\n * the prefix list is empty, or the empty string is in the prefix list and no prefix before it matches, the\n * fieldName will be returned verbatim.\n * \n * If no prefix matches and the empty string is not in the prefix list and the prefix list is not empty,\n * {@code null} is returned.\n * \n * @param fieldName\n *            The full name of a field.\n * @param prefixes\n *            A list of prefixes, usually provided by the {@code Accessors} settings annotation, listing field\n *            prefixes.\n * @return The base name of the field.\n */\n", "func_signal": "public static String removePrefix(String fieldName, String[] prefixes)", "code": "{\n\tif (Is.empty(prefixes)) return fieldName;\n\tfor (final String prefix : prefixes) {\n\t\tif (prefix.isEmpty()) return fieldName;\n\t\tif (!fieldName.startsWith(prefix)) continue;\n\t\tchar followupChar = fieldName.charAt(prefix.length());\n\t\tif (isLetter(prefix.charAt(prefix.length() - 1)) && isLowerCase(followupChar)) continue;\n\t\treturn toLowerCase(followupChar) + fieldName.substring(prefix.length() + 1, fieldName.length());\n\t}\n\treturn null;\n}", "path": "src\\core\\lombok\\core\\util\\Names.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * <pre>\n * null  ->\n *       ->\n *   s   -> s\n * </pre>\n */\n", "func_signal": "public static String trim(final String s)", "code": "{\n\tif (s == null) return \"\";\n\telse return s.trim();\n}", "path": "src\\core\\lombok\\core\\util\\Names.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "// for now only works for primitive return types\n", "func_signal": "private boolean matchesReturnType(final Type methodType, final String forcedReturnType)", "code": "{\n\tif (forcedReturnType == null) return true;\n\treturn forcedReturnType.equals(methodType.getReturnType().toString());\n}", "path": "src\\javac\\lombok\\javac\\handlers\\HandleActionFunctionAndPredicate.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Determines the {@link Class} of a type argument of a given class by using the super type token pattern.\n */\n", "func_signal": "public static Class<?> getClassFor(final Class<?> clazz, final int typeArgumentIndex)", "code": "{\n\tfinal Type type = getTypeFor(clazz, typeArgumentIndex);\n\tfinal Class<?> result = getClassFor(type);\n\treturn result == null ? Object.class : result;\n}", "path": "src\\core\\lombok\\TypeArguments.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Creates an entrypoint like this:\n * \n * <pre>\n * public static void &lt;NAME&gt;(&lt;PARAMETER&gt;) throws java.lang.Throwable {\n *   new &lt;TYPENAME&gt;().&lt;METHODNAME&gt;(&lt;ARGUMENTS&gt;);\n * }\n * </pre>\n * \n * @param type\n *            Type\n * @param name\n *            name of the entrypoint (\"main\", \"premain, \"agentmain\")\n * @param methodName\n *            name of method that should be called in the entrypoint\n * @param paramProvider\n *            parameter provider used for the entrypoint\n * @param argsProvider\n *            argument provider used for the constructor\n */\n", "func_signal": "public void createEntrypoint(final TYPE_TYPE type, final String name, final String methodName, final Parameters params, final Arguments args)", "code": "{\n\tif (entrypointExists(name, type)) {\n\t\treturn;\n\t}\n\n\ttype.editor().injectMethod(MethodDecl(Type(\"void\"), name).makePublic().makeStatic().withArguments(params.get(name)).withThrownException(Type(\"java.lang.Throwable\")) //\n\t\t\t.withStatement(Call(New(Type(type.name())), methodName).withArguments(args.get(name))));\n}", "path": "src\\core\\lombok\\core\\handlers\\EntrypointHandler.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Handles the following scenarios:\n * <ol>\n * <li>\n * \n * <pre>\n * case 2:\n *   bodyOf2();\n *   // doesn't end with\n *   //continue;\n *   // or                  => case 2:\n *   //return true;              bodyOf2();\n * case 3:                       bodyOf3();\n *   bodyOf3();\n * </pre>\n * \n * </li>\n * <li>\n * \n * <pre>\n * case 2:\n *   bodyOf2();             => case 2:\n *   continue;                   bodyOf2();\n *   unreachableBodyOf2();       continue;\n * </pre>\n * \n * </li>\n * </ol>\n */\n", "func_signal": "public void optimizeSuccessiveStates()", "code": "{\n\tCase previous = null;\n\tfor (int i = 0, id = 0, iend = cases.size(); i < iend; i++) {\n\t\tCase label = cases.get(i);\n\t\tif (!usedLabels.contains(label) && (previous != null)) {\n\t\t\tStatement<?> last = previous.getStatements().get(previous.getStatements().size() - 1);\n\t\t\tif (!label.getStatements().isEmpty() && Is.noneOf(last, Continue.class, Return.class)) {\n\t\t\t\tprevious.withStatements(label.getStatements());\n\t\t\t}\n\t\t\tcases.set(i, null);\n\t\t\tcontinue;\n\t\t}\n\t\tNumberLiteral literal = (NumberLiteral) label.getPattern();\n\t\tliteral.setNumber(id++);\n\t\tif (previous == null) {\n\t\t\tprevious = label;\n\t\t\tcontinue;\n\t\t}\n\t\tboolean found = false;\n\t\tboolean remove = false;\n\t\tList<Statement<?>> list = previous.getStatements();\n\t\tfor (Iterator<Statement<?>> iter = list.iterator(); iter.hasNext();) {\n\t\t\tStatement<?> statement = iter.next();\n\t\t\tif (remove || (found && (statement instanceof Continue))) {\n\t\t\t\tremove = true;\n\t\t\t\titer.remove();\n\t\t\t} else {\n\t\t\t\tfound = getLabel(getStateFromAssignment(statement)) == label;\n\t\t\t}\n\t\t}\n\t\tprevious = label;\n\t}\n}", "path": "src\\core\\lombok\\core\\handlers\\YieldHandler.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Simplifies rethrowing {@link Exception Exceptions} by wrapping them.\n * <p>\n * With lombok:\n * \n * <pre>\n * &#64;Rethrow(IOException.class)\n * void testMethod() {\n *   // do something\n * }\n * \n * void testMethod() throw IOException as RuntimeException {\n *   // do something\n * }\n * </pre>\n * \n * Vanilla Java:\n * \n * <pre>\n * void testMethod() {\n * \ttry {\n * \t\t// do something\n * \t} catch (IOException e1) {\n * \t\tthrow new RuntimeException(e1);\n * \t}\n * }\n * </pre>\n */\n", "func_signal": "@Target(METHOD)\n@Retention(SOURCE)\npublic @interface Rethrow", "code": "{\n\t/**\n\t * Specifies the exception types, that should be caught and rethrown. Default is {@code Exception.class}.\n\t */\n\tClass<? extends Exception>[] value() default {};\n\n\t/**\n\t * Specifies the exception type, that wraps the caught exceptions. Default is {@code RuntimeException.class}.\n\t */\n\tClass<? extends Exception> as() default RuntimeException.class;\n\n\t/**\n\t * Specifies the message used for the new exception, default is no message.\n\t */\n\tString message() default \"\";\n}", "path": "src\\core\\lombok\\Rethrow.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "// to support both:\n// javac 1.6 - M(node).ClassDef(JCModifiers, Name, List<JCTypeParameter>, JCTree, List<JCExpression>, List<JCTree>)\n// and javac 1.7 - M(node).ClassDef(JCModifiers, Name, List<JCTypeParameter>, JCExpression, List<JCExpression>,\n// List<JCTree>)\n", "func_signal": "private JCClassDecl createClassDef(final lombok.ast.Node<?> node, final JCModifiers mods, final Name name, final List<JCTypeParameter> typarams, final JCExpression extending,\n\t\tfinal List<JCExpression> implementing, final List<JCTree> defs)", "code": "{\n\ttry {\n\t\tMethod classDefMethod = null;\n\t\tfor (Method method : TreeMaker.class.getMethods()) {\n\t\t\tif (\"ClassDef\".equals(method.getName())) {\n\t\t\t\tclassDefMethod = method;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (classDefMethod == null) throw new IllegalStateException();\n\t\treturn (JCClassDecl) classDefMethod.invoke(M(node), mods, name, typarams, extending, implementing, defs);\n\t} catch (final Exception e) {\n\t\tthrow new IllegalStateException(e);\n\t}\n}", "path": "src\\javac\\lombok\\javac\\handlers\\ast\\JavacASTMaker.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Two popular singleton templates.\n * <p>\n * Since not much code is generated, the annotation also acts as documentation.\n * <p>\n * With lombok:\n * \n * <pre>\n * &#064;Singleton\n * class MySingleton {\n * \tpublic MySingleton() {\n * \t}\n * }\n * </pre>\n * \n * Vanilla Java:\n * \n * <pre>\n * enum MySingleton {\n * \tINSTANCE;\n * \tMySingleton() {\n * \t}\n * \n * \tpublic static MySingleton getInstance() {\n * \t\treturn INSTANCE;\n * \t}\n * }\n * </pre>\n * <p>\n * <b>Note:</b> If you don't like the enum approach, try the holder approach using<br>\n * <code>@Singleton(style = {@link Singleton.Style#HOLDER})</code>.\n */\n", "func_signal": "@Target(TYPE)\n@Retention(SOURCE)\npublic @interface Singleton", "code": "{\n\t/** Specifies the singleton-style to use, default is ENUM. */\n\tStyle style() default Style.ENUM;\n\n\tpublic static enum Style {\n\t\t/**\n\t\t * <pre>\n\t\t * enum SingletonEnumExample {\n\t\t * \tINSTANCE;\n\t\t * \n\t\t * \tpublic static SingletonEnumExample getInstance() {\n\t\t * \t\treturn INSTANCE;\n\t\t * \t}\n\t\t * }\n\t\t * </pre>\n\t\t */\n\t\tENUM,\n\t\t/**\n\t\t * <pre>\n\t\t * class SingletonHolderExample {\n\t\t * \n\t\t * \tprivate static class SingletonHolderExampleHolder {\n\t\t * \t\tprivate static final SingletonHolderExample INSTANCE = new SingletonHolderExample();\n\t\t * \t}\n\t\t * \n\t\t * \tpublic static SingletonHolderExample getInstance() {\n\t\t * \t\treturn SingletonHolderExampleHolder.INSTANCE;\n\t\t * \t}\n\t\t * }\n\t\t * </pre>\n\t\t */\n\t\tHOLDER;\n\t}\n}", "path": "src\\core\\lombok\\Singleton.java", "repo_name": "peichhorn/lombok-pg", "stars": 320, "license": "other", "language": "java", "size": 4776}
{"docstring": "/**\n * Retrieve the scaling size for the image dependent on the ScaleType.<br />\n * <br/>\n * If CROP: sides are same size or bigger than output's sides<br />\n * Else   : sides are same size or smaller than output's sides\n */\n", "func_signal": "private int[] getScaleSize(int width, int height)", "code": "{\n    float newWidth;\n    float newHeight;\n\n    float withRatio = (float) width / mOutputWidth;\n    float heightRatio = (float) height / mOutputHeight;\n\n    boolean adjustWidth = mScaleType == ScaleType.CENTER_CROP\n            ? withRatio > heightRatio : withRatio < heightRatio;\n\n    if (adjustWidth) {\n        newHeight = mOutputHeight;\n        newWidth = (newHeight / height) * width;\n    } else {\n        newWidth = mOutputWidth;\n        newHeight = (newWidth / width) * height;\n    }\n    return new int[]{Math.round(newWidth), Math.round(newHeight)};\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/*\n * (non-Javadoc)\n * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDestroy()\n */\n", "func_signal": "@Override\npublic void onDestroy()", "code": "{\n    destroyFramebuffers();\n    for (GPUImageFilter filter : mFilters) {\n        filter.destroy();\n    }\n    super.onDestroy();\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageFilterGroup.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/*\n * (non-Javadoc)\n * @see\n * jp.co.cyberagent.android.gpuimage.GPUImageFilter#onOutputSizeChanged(int,\n * int)\n */\n", "func_signal": "@Override\npublic void onOutputSizeChanged(final int width, final int height)", "code": "{\n    super.onOutputSizeChanged(width, height);\n    if (mFrameBuffers != null) {\n        destroyFramebuffers();\n    }\n    mFrameBuffers = new int[mFilters.size() - 1];\n    mFrameBufferTextures = new int[mFilters.size() - 1];\n\n    for (int i = 0; i < mFilters.size() - 1; i++) {\n        mFilters.get(i).onOutputSizeChanged(width, height);\n        GLES20.glGenFramebuffers(1, mFrameBuffers, i);\n        GLES20.glGenTextures(1, mFrameBufferTextures, i);\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i]);\n        GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, width, height, 0,\n                GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, null);\n        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n                GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);\n        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n                GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);\n        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n                GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);\n        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n                GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);\n\n        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);\n        GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0,\n                GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i], 0);\n\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);\n        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);\n    }\n    mFilters.get(mFilters.size() - 1).onOutputSizeChanged(width, height);\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageFilterGroup.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Request the preview to be rendered again.\n */\n", "func_signal": "public void requestRender()", "code": "{\n    if (mGlSurfaceView != null) {\n        mGlSurfaceView.requestRender();\n    }\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Checks if OpenGL ES 2.0 is supported on the current device.\n * \n * @param context the context\n * @return true, if successful\n */\n", "func_signal": "private boolean supportsOpenGLES2(final Context context)", "code": "{\n    final ActivityManager activityManager = (ActivityManager)\n            context.getSystemService(Context.ACTIVITY_SERVICE);\n    final ConfigurationInfo configurationInfo =\n            activityManager.getDeviceConfigurationInfo();\n    return configurationInfo.reqGlEsVersion >= 0x20000;\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "// TODO Should be an xml attribute. But then GPUImage can not be distributed as .jar anymore.\n", "func_signal": "public void setRatio(float ratio)", "code": "{\n    mRatio = ratio;\n    requestLayout();\n    mGPUImage.deleteImage();\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageView.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/*\n * (non-Javadoc)\n * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDraw(int,\n * java.nio.FloatBuffer, java.nio.FloatBuffer)\n */\n", "func_signal": "@Override\npublic void onDraw(final int textureId, final FloatBuffer cubeBuffer,\n        final FloatBuffer textureBuffer)", "code": "{\n    runPendingOnDrawTasks();\n    if (!isInitialized() || mFrameBuffers == null || mFrameBufferTextures == null) {\n        return;\n    }\n    int previousTexture = textureId;\n    for (int i = 0; i < mFilters.size() - 1; i++) {\n        GPUImageFilter filter = mFilters.get(i);\n        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);\n        GLES20.glClearColor(0, 0, 0, 1);\n        filter.onDraw(previousTexture, mGLCubeBuffer,\n                (i == 0 && mFilters.size() % 2 == 0) ? mGLTextureFlipBuffer : mGLTextureBuffer);\n        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);\n        previousTexture = mFrameBufferTextures[i];\n    }\n    mFilters.get(mFilters.size() - 1).onDraw(previousTexture, cubeBuffer, textureBuffer);\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageFilterGroup.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/** A safe way to get an instance of the Camera object. */\n", "func_signal": "private Camera getCameraInstance(final int id)", "code": "{\n    Camera c = null;\n    try {\n        c = mCameraHelper.openCamera(id);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return c;\n}", "path": "sample\\src\\jp\\co\\cyberagent\\android\\gpuimage\\sample\\activity\\ActivityCamera.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Sets the image on which the filter should be applied.\n * \n * @param bitmap the new image\n */\n", "func_signal": "public void setImage(final Bitmap bitmap)", "code": "{\n    setImage(bitmap, false);\n    mCurrentBitmap = bitmap;\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Gets the images for multiple filters on a image. This can be used to\n * quickly get thumbnail images for filters. <br />\n * Whenever a new Bitmap is ready, the listener will be called with the\n * bitmap. The order of the calls to the listener will be the same as the\n * filter order.\n * \n * @param bitmap the bitmap on which the filters will be applied\n * @param filters the filters which will be applied on the bitmap\n * @param listener the listener on which the results will be notified\n */\n", "func_signal": "public static void getBitmapForMultipleFilters(final Bitmap bitmap,\n        final List<GPUImageFilter> filters, final ResponseListener<Bitmap> listener)", "code": "{\n    if (filters.isEmpty()) {\n        return;\n    }\n    GPUImageRenderer renderer = new GPUImageRenderer(filters.get(0));\n    renderer.setImageBitmap(bitmap, false);\n    PixelBuffer buffer = new PixelBuffer(bitmap.getWidth(), bitmap.getHeight());\n    buffer.setRenderer(renderer);\n\n    for (GPUImageFilter filter : filters) {\n        renderer.setFilter(filter);\n        listener.response(buffer.getBitmap());\n        filter.destroy();\n    }\n    renderer.deleteImage();\n    buffer.destroy();\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Sets the GLSurfaceView which will display the preview.\n * \n * @param view the GLSurfaceView\n */\n", "func_signal": "public void setGLSurfaceView(final GLSurfaceView view)", "code": "{\n    mGlSurfaceView = view;\n    mGlSurfaceView.setEGLContextClientVersion(2);\n    mGlSurfaceView.setRenderer(mRenderer);\n    mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n    mGlSurfaceView.requestRender();\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * This sets the scale type of GPUImage. This has to be run before setting the image.\n * If image is set and scale type changed, image needs to be reset.\n *\n * @param scaleType The new ScaleType\n */\n", "func_signal": "public void setScaleType(ScaleType scaleType)", "code": "{\n    mScaleType = scaleType;\n    mRenderer.setScaleType(scaleType);\n    mRenderer.deleteImage();\n    mCurrentBitmap = null;\n    requestRender();\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**    \n * Instantiates a new GPUImage object.   \n * \n * @param context the context\n */\n", "func_signal": "public GPUImage(final Context context)", "code": "{  \n    if (!supportsOpenGLES2(context)) {\n        throw new IllegalStateException(\"OpenGL ES 2.0 is not supported on this phone.\");\n    }\n \n    mContext = context; \n    mFilter = new GPUImageFilter();\n    mRenderer = new GPUImageRenderer(mFilter);\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * @param mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level\n */\n", "func_signal": "public void setMix(final float mix)", "code": "{\n    mMix = mix;\n    setFloat(mMixLocation, mMix);\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageMixBlendFilter.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Sets the up camera to be connected to GPUImage to get a filtered preview.\n * \n * @param camera the camera\n * @param degrees by how many degrees the image should be rotated\n * @param flipHorizontal if the image should be flipped horizontally\n * @param flipVertical if the image should be flipped vertically\n */\n", "func_signal": "public void setUpCamera(final Camera camera, final int degrees, final boolean flipHorizontal,\n        final boolean flipVertical)", "code": "{\n    mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);\n    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {\n        setUpCameraGingerbread(camera);\n    } else {\n        camera.setPreviewCallback(mRenderer);\n        camera.startPreview();\n    }\n    Rotation rotation = Rotation.NORMAL;\n    switch (degrees) {\n        case 90:\n            rotation = Rotation.ROTATION_90;\n            break;\n        case 180:\n            rotation = Rotation.ROTATION_180;\n            break;\n        case 270:\n            rotation = Rotation.ROTATION_270;\n            break;\n    }\n    mRenderer.setRotationCamera(rotation, flipHorizontal, flipVertical);\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Set the filter to be applied on the image.\n *\n * @param filter Filter that should be applied on the image.\n */\n", "func_signal": "public void setFilter(GPUImageFilter filter)", "code": "{\n    mFilter = filter;\n    mGPUImage.setFilter(filter);\n    requestRender();\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageView.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Gets the given bitmap with current filter applied as a Bitmap.\n * \n * @param bitmap the bitmap on which the current filter should be applied\n * @return the bitmap with filter applied\n */\n", "func_signal": "public Bitmap getBitmapWithFilterApplied(final Bitmap bitmap)", "code": "{\n    if (mGlSurfaceView != null) {\n        mRenderer.deleteImage();\n        final Semaphore lock = new Semaphore(0);\n        mRenderer.runOnDraw(new Runnable() {\n\n            @Override\n            public void run() {\n                mFilter.destroy();\n                lock.release();\n            }\n        });\n        requestRender();\n\n        try {\n            lock.acquire();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    GPUImageRenderer renderer = new GPUImageRenderer(mFilter);\n    renderer.setRotation(Rotation.NORMAL,\n            mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());\n    renderer.setScaleType(mScaleType);\n    PixelBuffer buffer = new PixelBuffer(bitmap.getWidth(), bitmap.getHeight());\n    buffer.setRenderer(renderer);\n    renderer.setImageBitmap(bitmap, false);\n    Bitmap result = buffer.getBitmap();\n    mFilter.destroy();\n    renderer.deleteImage();\n    buffer.destroy();\n\n    mRenderer.setFilter(mFilter);\n    if (mCurrentBitmap != null) {\n        mRenderer.setImageBitmap(mCurrentBitmap, false);\n    }\n    requestRender();\n\n    return result;\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/*\n * (non-Javadoc)\n * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onInit()\n */\n", "func_signal": "@Override\npublic void onInit()", "code": "{\n    super.onInit();\n    for (GPUImageFilter filter : mFilters) {\n        filter.init();\n    }\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageFilterGroup.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Sets the filter which should be applied to the image which was (or will\n * be) set by setImage(...).\n * \n * @param filter the new filter\n */\n", "func_signal": "public void setFilter(final GPUImageFilter filter)", "code": "{\n    mFilter = filter;\n    mRenderer.setFilter(mFilter);\n    requestRender();\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImage.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * Instantiates a new GPUImageFilterGroup with the given filters.\n *\n * @param filters the filters which represent this filter\n */\n", "func_signal": "public GPUImageFilterGroup(final List<GPUImageFilter> filters)", "code": "{\n    mFilters = filters;\n    mGLCubeBuffer = ByteBuffer.allocateDirect(CUBE.length * 4)\n            .order(ByteOrder.nativeOrder())\n            .asFloatBuffer();\n    mGLCubeBuffer.put(CUBE).position(0);\n\n    mGLTextureBuffer = ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4)\n            .order(ByteOrder.nativeOrder())\n            .asFloatBuffer();\n    mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);\n\n    float[] flipTexture = TextureRotationUtil.getRotation(Rotation.NORMAL, false, true);\n    mGLTextureFlipBuffer = ByteBuffer.allocateDirect(flipTexture.length * 4)\n            .order(ByteOrder.nativeOrder())\n            .asFloatBuffer();\n    mGLTextureFlipBuffer.put(flipTexture).position(0);\n}", "path": "library\\src\\jp\\co\\cyberagent\\android\\gpuimage\\GPUImageFilterGroup.java", "repo_name": "sangmingming/android-instagram-filter", "stars": 364, "license": "None", "language": "java", "size": 9869}
{"docstring": "/**\n * auto scroll direction, default is {@link #RIGHT} *\n */\n", "func_signal": "public Builder direction(int direction)", "code": "{\n    this.direction = direction;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * set custome view binder\n * @param viewBinder\n * @return\n */\n", "func_signal": "public Builder viewBinder(ViewBinder viewBinder)", "code": "{\n    this.viewBinder = viewBinder;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * Determines the width of this view\n *\n * @param measureSpec\n *            A measureSpec packed into an int\n * @return The width of the view, honoring constraints from measureSpec\n */\n", "func_signal": "private int measureLong(int measureSpec)", "code": "{\n    int result;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {\n        //We were told how big to be\n        result = specSize;\n    } else {\n        //Calculate the width according the views count\n        final int count = mRecyleAdapter.getRealCount();\n        result = (int)(getPaddingLeft() + getPaddingRight()\n                + (count * 2 * mRadius) + (count - 1) * mRadius + 1);\n        //Respect AT_MOST value if that was what is called for by measureSpec\n        if (specMode == MeasureSpec.AT_MOST) {\n            result = Math.min(result, specSize);\n        }\n    }\n    return result;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\indicator\\CircleIndicator.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * get the item index of viewpager by given offset\n *\n * @param offset the real index of pages\n * @return\n */\n", "func_signal": "private int getIndex(int offset)", "code": "{\n    return getRealCount() * PAGE_COUNT_FACTOR / 2 -\n            (getRealCount() * PAGE_COUNT_FACTOR / 2 % getRealCount\n                    ()) + offset;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\InfiniteIndicator.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "//To save resource ,you should release the res\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n    super.onPause();\n    mAnimCircleIndicator.stop();\n}", "path": "demo\\src\\main\\java\\test\\UpdateSliderActivity.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * @param context\n * @param dipValue\n * @return\n */\n", "func_signal": "public static int dip2px(Context context, float dipValue)", "code": "{\n    if (context == null) {\n        return (int) dipValue;\n    }\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dipValue * scale + 0.5f);\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\ViewUtils.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "//To avoid memory leak ,you should release the res\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n    super.onPause();\n    mAnimCircleIndicator.stop();\n    mAnimLineIndicator.stop();\n}", "path": "demo\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\AnimIndicatorActivity.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * whether auto scroll when initialize done *\n */\n", "func_signal": "public Builder isAutoScroll(boolean isAutoScroll)", "code": "{\n    this.isAutoScroll = isAutoScroll;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/*\n * (non-Javadoc)\n *\n * @see android.view.View#onMeasure(int, int)\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    if (mOrientation == HORIZONTAL) {\n        setMeasuredDimension(measureLong(widthMeasureSpec), measureShort(heightMeasureSpec));\n    } else {\n        setMeasuredDimension(measureShort(widthMeasureSpec), measureLong(heightMeasureSpec));\n    }\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\indicator\\CircleIndicator.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * remove messages before, keeps one message is running at most\n **/\n", "func_signal": "private void sendScrollMessage(long delayTimeInMills)", "code": "{\n    handler.removeMessages(MSG_SCROLL);\n    handler.sendEmptyMessageDelayed(MSG_SCROLL, delayTimeInMills);\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\InfiniteIndicator.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * set page change listener\n * @param onPageChangeListener\n * @return\n */\n", "func_signal": "public Builder onPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener)", "code": "{\n    this.onPageChangeListener = onPageChangeListener;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * Determines the height of this view\n *\n * @param measureSpec\n *            A measureSpec packed into an int\n * @return The height of the view, honoring constraints from measureSpec\n */\n", "func_signal": "private int measureShort(int measureSpec)", "code": "{\n    int result;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    if (specMode == MeasureSpec.EXACTLY) {\n        //We were told how big to be\n        result = specSize;\n    } else {\n        //Measure the height\n        result = (int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);\n        //Respect AT_MOST value if that was what is called for by measureSpec\n        if (specMode == MeasureSpec.AT_MOST) {\n            result = Math.min(result, specSize);\n        }\n    }\n    return result;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\indicator\\CircleIndicator.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * set whether is loop when reaching the last or first item, default is true\n *\n * @param isLoop\n */\n", "func_signal": "public Builder isLoop(boolean isLoop)", "code": "{\n    this.isLoop = isLoop;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * scroll only once\n */\n", "func_signal": "public void scrollOnce()", "code": "{\n    PagerAdapter adapter = mViewPager.getAdapter();\n    int currentItem = mViewPager.getCurrentItem();\n\n    int totalCount;\n    if (adapter == null || (totalCount = adapter.getCount()) <= 1) {\n        return;\n    }\n\n    int nextItem = (configuration.getDirection() == IndicatorConfiguration.LEFT)\n            ? --currentItem\n            : ++currentItem;\n\n    if (nextItem < 0) {\n        if (configuration.isLoop()) {\n            mViewPager.setCurrentItem(totalCount - 1);\n        }\n    } else if (nextItem == totalCount) {\n        if (configuration.isLoop()) {\n            mViewPager.setCurrentItem(0);\n        }\n    } else {\n        mViewPager.setCurrentItem(nextItem, true);\n    }\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\InfiniteIndicator.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "//In case memory leak ,you should release the res\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n    super.onPause();\n    mAnimCircleIndicator.stop();\n}", "path": "demo\\src\\main\\java\\test\\AddSliderActivity.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * Makes sure that the size of scrapViews does not exceed the size of activeViews.\n * (This can happen if an adapter does not recycle its views).\n */\n", "func_signal": "private void pruneScrapViews()", "code": "{\n  final int maxViews = activeViews.length;\n  final int viewTypeCount = this.viewTypeCount;\n  final SparseArray<View>[] scrapViews = this.scrapViews;\n  for (int i = 0; i < viewTypeCount; ++i) {\n    final SparseArray<View> scrapPile = scrapViews[i];\n    int size = scrapPile.size();\n    final int extras = size - maxViews;\n    size--;\n    for (int j = 0; j < extras; j++) {\n      scrapPile.remove(scrapPile.keyAt(size--));\n    }\n  }\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\recycle\\RecycleBin.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * whether stop auto scroll while touching, default is true *\n */\n", "func_signal": "public Builder isStopWhileTouch(boolean isStopScrollWhenTouch)", "code": "{\n    this.isStopWhileTouch = isStopScrollWhenTouch;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * modify duration of ViewPager\n */\n", "func_signal": "private void setScroller()", "code": "{\n    try {\n        Field scrollerField = ViewPager.class.getDeclaredField(\"mScroller\");\n        scrollerField.setAccessible(true);\n        Field interpolatorField = ViewPager.class.getDeclaredField(\"sInterpolator\");\n        interpolatorField.setAccessible(true);\n        scroller = new DurationScroller(getContext(), (Interpolator) interpolatorField.get(null));\n        scrollerField.set(mViewPager, scroller);\n        scroller.setScrollDurationFactor(configuration.getScrollFactor());\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\InfiniteIndicator.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * set page click listener for responsing\n * @param onPageClickListener\n * @return\n */\n", "func_signal": "public Builder onPageClickListener(OnPageClickListener onPageClickListener)", "code": "{\n    this.onPageClickListener = onPageClickListener;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * set the indicator for your page,default will not draw,or you can use\n * default indicator ,and you should set isDrawIndicator true\n * @param indicator\n * @return\n */\n", "func_signal": "private Builder indicator(View indicator)", "code": "{\n    this.indicator = indicator;\n    return this;\n}", "path": "library\\src\\main\\java\\cn\\lightsky\\infiniteindicator\\IndicatorConfiguration.java", "repo_name": "lightSky/InfiniteIndicator", "stars": 488, "license": "None", "language": "java", "size": 30645}
{"docstring": "/**\n * Cancel pending timer and if the timer has already activated, run another runnable to\n * pop the view.\n *\n * @param view\n */\n", "func_signal": "private void cancelPendingTimer(@NonNull final View view)", "code": "{\n    longHoldTimer.cancel();\n    if (longHoldRunnable != null) {\n        longHoldRunnable = new Runnable() {\n            @Override\n            public void run() {\n                peekShown = false;\n                pop(view, position);\n                longHoldRunnable = null;\n            }\n        };\n        builder.activity.runOnUiThread(longHoldRunnable);\n    }\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Animate the peek view in and send a on pop event.\n * Reset all the views and after the peek view has animated out, reset it's position.\n *\n * @param longClickView the view that was long clicked\n * @param index         the view that long clicked\n */\n", "func_signal": "protected void pop(@NonNull View longClickView, int index)", "code": "{\n    if (onGeneralActionListener != null)\n        onGeneralActionListener.onPop(longClickView, index);\n\n    if (currentHoldAndReleaseView != null && onHoldAndReleaseListener != null)\n        onHoldAndReleaseListener.onRelease(currentHoldAndReleaseView.getView(), currentHoldAndReleaseView.getPosition());\n\n    resetTimers();\n\n    peekAnimationHelper.animatePop(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            resetViews();\n            animation.cancel();\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n        }\n    }, ANIMATION_POP_DURATION);\n\n    popTime = System.currentTimeMillis();\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Reset all views back to their initial values, this done after the onPeek has popped.\n */\n", "func_signal": "private void resetViews()", "code": "{\n    peekLayout.setVisibility(View.GONE);\n    downX = 0;\n    downY = 0;\n\n    for (int i = 0; i < longHoldViews.size(); i++) {\n        Timer longHoldTimer = longHoldViews.get(i).getLongHoldTimer();\n        if (longHoldTimer != null) {\n            longHoldTimer.cancel();\n            longHoldViews.get(i).setLongHoldTimer(null);\n        }\n    }\n\n    if (peekViewOriginalPosition != null) {\n        peekView.setX(peekViewOriginalPosition[0]);\n        peekView.setY(peekViewOriginalPosition[1]);\n    }\n    peekView.setScaleX(0.85f);\n    peekView.setScaleY(0.85f);\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Peek layout resource id, which will be inflated into the onPeek view\n *\n * @param peekLayoutId id of the onPeek layout resource\n * @return\n */\n", "func_signal": "public Builder peekLayout(@LayoutRes int peekLayoutId)", "code": "{\n    this.peekLayoutId = peekLayoutId;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Set the accepted fling types, defaults to both being true.\n */\n", "func_signal": "public Builder flingTypes(boolean allowUpwardsFling, boolean allowDownwardsFling)", "code": "{\n    this.allowUpwardsFling = allowUpwardsFling;\n    this.allowDownwardsFling = allowDownwardsFling;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Create the PeekAndPop object\n *\n * @return the PeekAndPop object\n */\n", "func_signal": "public PeekAndPop build()", "code": "{\n    if (peekLayoutId == -1) {\n        throw new IllegalArgumentException(\"No peekLayoutId specified.\");\n    }\n    return new PeekAndPop(this);\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * A listener for the on long hold views to receive onLongHold actions.\n *\n * @param onLongHoldListener\n * @return\n */\n", "func_signal": "public Builder onLongHoldListener(@NonNull OnLongHoldListener onLongHoldListener)", "code": "{\n    this.onLongHoldListener = onLongHoldListener;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Check all the long hold views to see if they are being held and if so for how long\n * they have been held and send a long hold event if over the long hold duration.\n *\n * @param position\n */\n", "func_signal": "private void checkLongHoldViews(final int position)", "code": "{\n    for (int i = 0; i < longHoldViews.size(); i++) {\n        final LongHoldView longHoldView = longHoldViews.get(i);\n        boolean viewInBounds = DimensionUtil.pointInViewBounds(longHoldView.getView(), downX, downY);\n\n        if (viewInBounds && longHoldView.getLongHoldTimer() == null) {\n            long duration = customLongHoldDuration != -1 ? customLongHoldDuration : LONG_HOLD_DURATION;\n            longHoldView.startLongHoldViewTimer(this, position, duration);\n            onLongHoldListener.onEnter(longHoldView.getView(), position);\n        } else if (!viewInBounds && longHoldView.getLongHoldTimer() != null) {\n            longHoldView.getLongHoldTimer().cancel();\n            longHoldView.setLongHoldTimer(null);\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Blur the background when showing the peek view, defaults to true.\n * Setting this to false may increase performance.\n *\n * @param blurBackground\n * @return\n */\n", "func_signal": "public Builder blurBackground(boolean blurBackground)", "code": "{\n    this.blurBackground = blurBackground;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Set an onClick and onTouch listener for each long click view.\n */\n", "func_signal": "protected void initialiseGestureListeners()", "code": "{\n    for (int i = 0; i < builder.longClickViews.size(); i++) {\n        initialiseGestureListener(builder.longClickViews.get(i), -1);\n    }\n    gestureDetector.setIsLongpressEnabled(false);\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Animate the peek view upwards when a it is flung, defaults to true.\n *\n * @param animateFling\n * @return\n */\n", "func_signal": "public Builder animateFling(boolean animateFling)", "code": "{\n    this.animateFling = animateFling;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Inflate the peekView, add it to the peekLayout with a shaded/blurred background,\n * bring it to the front and set the peekLayout to have an alpha of 0. Get the peekView's\n * original Y position for use when dragging.\n * <p/>\n * If a flingToActionViewLayoutId is supplied, inflate the flingToActionViewLayoutId.\n */\n", "func_signal": "protected void initialisePeekView()", "code": "{\n    LayoutInflater inflater = LayoutInflater.from(builder.activity);\n    contentView = (ViewGroup) builder.activity.findViewById(android.R.id.content).getRootView();\n\n    // Center onPeek view in the onPeek layout and add to the container view group\n    peekLayout = (FrameLayout) inflater.inflate(R.layout.peek_background, contentView, false);\n    peekView = inflater.inflate(builder.peekLayoutId, peekLayout, false);\n    peekView.setId(R.id.peek_view);\n\n    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) peekView.getLayoutParams();\n    layoutParams.gravity = Gravity.CENTER;\n    if (orientation == Configuration.ORIENTATION_LANDSCAPE)\n        layoutParams.topMargin = peekViewMargin;\n\n    peekLayout.addView(peekView, layoutParams);\n    contentView.addView(peekLayout);\n\n    peekLayout.setVisibility(View.GONE);\n    peekLayout.setAlpha(0);\n    peekLayout.requestLayout();\n\n    peekAnimationHelper = new PeekAnimationHelper(builder.activity.getApplicationContext(), peekLayout, peekView);\n\n    bringViewsToFront();\n    initialiseViewTreeObserver();\n    resetViews();\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * A listener for when the onPeek view is dragged enough.\n *\n * @param onFlingToActionListener\n * @return\n */\n", "func_signal": "public Builder onFlingToActionListener(@NonNull OnFlingToActionListener onFlingToActionListener)", "code": "{\n    this.onFlingToActionListener = onFlingToActionListener;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Start the longHoldTimer, if it reaches the long hold duration, peek\n *\n * @param view\n */\n", "func_signal": "private void startTimer(@NonNull final View view)", "code": "{\n    longHoldTimer = new Timer();\n    longHoldTimer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n            peekShown = true;\n            longHoldRunnable = new Runnable() {\n                @Override\n                public void run() {\n                    if (peekShown) {\n                        peek(view, position);\n                        longHoldRunnable = null;\n                    }\n                }\n            };\n            builder.activity.runOnUiThread(longHoldRunnable);\n        }\n    }, LONG_CLICK_DURATION);\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * If the container view is situated within another view that receives touch events (like a scroll view),\n * the touch events required for the onPeek and onPop will not work correctly so use this method to disallow\n * touch events from the parent view.\n *\n * @param parentViewGroup The parentView that you wish to disallow touch events to (Usually a scroll view, recycler view etc.)\n * @return\n */\n", "func_signal": "public Builder parentViewGroupToDisallowTouchEvents(@NonNull ViewGroup parentViewGroup)", "code": "{\n    this.parentViewGroup = parentViewGroup;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * A listener for the hold and release views to receive onRelease actions.\n *\n * @param onHoldAndReleaseListener\n * @return\n */\n", "func_signal": "public Builder onHoldAndReleaseListener(@NonNull OnHoldAndReleaseListener onHoldAndReleaseListener)", "code": "{\n    this.onHoldAndReleaseListener = onHoldAndReleaseListener;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * A listener for the onPeek and onPop actions.\n *\n * @param onGeneralActionListener\n * @return\n */\n", "func_signal": "public Builder onGeneralActionListener(@NonNull OnGeneralActionListener onGeneralActionListener)", "code": "{\n    this.onGeneralActionListener = onGeneralActionListener;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * If lollipop or above, use elevation to bring peek views to the front\n */\n", "func_signal": "private void bringViewsToFront()", "code": "{\n    if (Build.VERSION.SDK_INT >= 21) {\n        peekLayout.setElevation(10f);\n        peekView.setElevation(10f);\n    } else {\n        peekLayout.bringToFront();\n        peekView.bringToFront();\n        contentView.requestLayout();\n        contentView.invalidate();\n    }\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Views which will show the peek view when long clicked\n *\n * @param longClickViews One or more views to handle on long click events\n * @return\n */\n", "func_signal": "public Builder longClickViews(@NonNull View... longClickViews)", "code": "{\n    for (int i = 0; i < longClickViews.length; i++) {\n        this.longClickViews.add(longClickViews[i]);\n    }\n    return this;\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Animate the peek view in and send an on peek event\n *\n * @param longClickView the view that was long clicked\n * @param index         the view that long clicked\n */\n", "func_signal": "protected void peek(@NonNull View longClickView, int index)", "code": "{\n    if (onGeneralActionListener != null)\n        onGeneralActionListener.onPeek(longClickView, index);\n\n    peekLayout.setVisibility(View.VISIBLE);\n\n    cancelClick(longClickView);\n\n    if (Build.VERSION.SDK_INT >= 17 && blurBackground)\n        blurBackground();\n    else if (Build.VERSION.SDK_INT < 17 && blurBackground)\n        Log.e(\"PeekAndPop\", \"Unable to blur background, device version below 17\");\n\n    peekAnimationHelper.animatePeek(ANIMATION_PEEK_DURATION);\n\n    if (builder.parentViewGroup != null)\n        builder.parentViewGroup.requestDisallowInterceptTouchEvent(true);\n\n    // Reset the touch coordinates to prevent accidental long hold actions on long hold views\n    downX = 0;\n    downY = 0;\n\n    gestureListener.setView(longClickView);\n    gestureListener.setPosition(index);\n}", "path": "library\\src\\main\\java\\com\\peekandpop\\shalskar\\peekandpop\\PeekAndPop.java", "repo_name": "shalskar/PeekAndPop", "stars": 497, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * @return Info about the page at the current scroll position.\n *         This can be synthetic for a missing middle page; the 'object' field can be null.\n */\n", "func_signal": "private ItemInfo infoForCurrentScrollPosition()", "code": "{\n    final int width = getWidth();\n    final float scrollOffset = width > 0 ? (float) getScrollX() / width : 0;\n    final float marginOffset = width > 0 ? (float) mPageMargin / width : 0;\n    int lastPos = -1;\n    float lastOffset = 0.f;\n    float lastWidth = 0.f;\n    boolean first = true;\n\n    ItemInfo lastItem = null;\n    for (int i = 0; i < mItems.size(); i++) {\n        ItemInfo ii = mItems.get(i);\n        float offset;\n        if (!first && ii.position != lastPos + 1) {\n            // Create a synthetic item for a missing page.\n            ii = mTempItem;\n            ii.offset = lastOffset + lastWidth + marginOffset;\n            ii.position = lastPos + 1;\n            ii.widthFactor = mAdapter.getPageWidth(ii.position);\n            i--;\n        }\n        offset = ii.offset;\n\n        final float leftBound = offset;\n        final float rightBound = offset + ii.widthFactor + marginOffset;\n        if (first || scrollOffset >= leftBound) {\n            if (scrollOffset < rightBound || i == mItems.size() - 1) {\n                return ii;\n            }\n        } else {\n            return lastItem;\n        }\n        first = false;\n        lastPos = ii.position;\n        lastOffset = offset;\n        lastWidth = ii.widthFactor;\n        lastItem = ii;\n    }\n\n    return lastItem;\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && ViewCompat.canScrollHorizontally(v, -dx);\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * We only want the current page that is being shown to be focusable.\n */\n", "func_signal": "@Override\nprotected boolean onRequestFocusInDescendants(int direction,\n                                              Rect previouslyFocusedRect)", "code": "{\n    int index;\n    int increment;\n    int end;\n    int count = getChildCount();\n    if ((direction & FOCUS_FORWARD) != 0) {\n        index = 0;\n        increment = 1;\n        end = count;\n    } else {\n        index = count - 1;\n        increment = -1;\n        end = -1;\n    }\n    for (int i = index; i != end; i += increment) {\n        View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem) {\n                if (child.requestFocus(direction, previouslyFocusedRect)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set the number of pages that should be retained to either side of the\n * current page in the view hierarchy in an idle state. Pages beyond this\n * limit will be recreated from the adapter when needed.\n *\n * <p>This is offered as an optimization. If you know in advance the number\n * of pages you will need to support or have lazy-loading mechanisms in place\n * on your pages, tweaking this setting can have benefits in perceived smoothness\n * of paging animations and interaction. If you have a small number of pages (3-4)\n * that you can keep active all at once, less time will be spent in layout for\n * newly created view subtrees as the user pages back and forth.</p>\n *\n * <p>You should keep this limit low, especially if your pages have complex layouts.\n * This setting defaults to 1.</p>\n *\n * @param limit How many pages will be kept offscreen in an idle state.\n */\n", "func_signal": "public void setOffscreenPageLimit(int limit)", "code": "{\n    if (limit < DEFAULT_OFFSCREEN_PAGES) {\n        Log.w(TAG, \"Requested offscreen page limit \" + limit + \" too small; defaulting to \" +\n                DEFAULT_OFFSCREEN_PAGES);\n        limit = DEFAULT_OFFSCREEN_PAGES;\n    }\n    if (limit != mOffscreenPageLimit) {\n        mOffscreenPageLimit = limit;\n        populate();\n    }\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * This method will be invoked when the current page is scrolled, either as part\n * of a programmatically initiated smooth scroll or a user initiated touch scroll.\n * If you override this method you must call through to the superclass implementation\n * (e.g. super.onPageScrolled(position, offset, offsetPixels)) before onPageScrolled\n * returns.\n *\n * @param position Position index of the first page currently being displayed.\n *                 Page position+1 will be visible if positionOffset is nonzero.\n * @param offset Value from [0, 1) indicating the offset from the page at position.\n * @param offsetPixels Value in pixels indicating the offset from position.\n */\n", "func_signal": "protected void onPageScrolled(int position, float offset, int offsetPixels)", "code": "{\n    // Offset any decor views if needed - keep them on-screen at all times.\n    if (mDecorChildCount > 0) {\n        final int scrollX = getScrollX();\n        int paddingLeft = getPaddingLeft();\n        int paddingRight = getPaddingRight();\n        final int width = getWidth();\n        final int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = getChildAt(i);\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n            if (!lp.isDecor) continue;\n\n            final int hgrav = lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;\n            int childLeft = 0;\n            switch (hgrav) {\n                default:\n                    childLeft = paddingLeft;\n                    break;\n                case Gravity.LEFT:\n                    childLeft = paddingLeft;\n                    paddingLeft += child.getWidth();\n                    break;\n                case Gravity.CENTER_HORIZONTAL:\n                    childLeft = Math.max((width - child.getMeasuredWidth()) / 2,\n                            paddingLeft);\n                    break;\n                case Gravity.RIGHT:\n                    childLeft = width - paddingRight - child.getMeasuredWidth();\n                    paddingRight += child.getMeasuredWidth();\n                    break;\n            }\n            childLeft += scrollX;\n\n            final int childOffset = childLeft - child.getLeft();\n            if (childOffset != 0) {\n                child.offsetLeftAndRight(childOffset);\n            }\n        }\n    }\n\n    if (mOnPageChangeListener != null) {\n        mOnPageChangeListener.onPageScrolled(position, offset, offsetPixels);\n    }\n    if (mInternalPageChangeListener != null) {\n        mInternalPageChangeListener.onPageScrolled(position, offset, offsetPixels);\n    }\n\n    if (mPageTransformer != null) {\n        final int scrollX = getScrollX();\n        final int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = getChildAt(i);\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n            if (lp.isDecor) continue;\n\n            final float transformPos = (float) (child.getLeft() - scrollX) / getClientWidth();\n            mPageTransformer.transformPage(child, transformPos);\n        }\n    }\n\n    mCalledSuper = true;\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set a PagerAdapter that will supply views for this pager as needed.\n *\n * @param adapter Adapter to use\n */\n", "func_signal": "public void setAdapter(PagerAdapter adapter)", "code": "{\n    if (mAdapter != null) {\n        mAdapter.unregisterDataSetObserver(mObserver);\n        mAdapter.startUpdate(this);\n        for (int i = 0; i < mItems.size(); i++) {\n            final ItemInfo ii = mItems.get(i);\n            mAdapter.destroyItem(this, ii.position, ii.object);\n        }\n        mAdapter.finishUpdate(this);\n        mItems.clear();\n        removeNonDecorViews();\n        mCurItem = 0;\n        scrollTo(0, 0);\n    }\n\n    final PagerAdapter oldAdapter = mAdapter;\n    mAdapter = adapter;\n    mExpectedAdapterCount = 0;\n\n    if (mAdapter != null) {\n        if (mObserver == null) {\n            mObserver = new PagerObserver();\n        }\n        mAdapter.registerDataSetObserver(mObserver);\n        mPopulatePending = false;\n        final boolean wasFirstLayout = mFirstLayout;\n        mFirstLayout = true;\n        mExpectedAdapterCount = mAdapter.getCount();\n        if (mRestoredCurItem >= 0) {\n            mAdapter.restoreState(mRestoredAdapterState, mRestoredClassLoader);\n            setCurrentItemInternal(mRestoredCurItem, false, true);\n            mRestoredCurItem = -1;\n            mRestoredAdapterState = null;\n            mRestoredClassLoader = null;\n        } else if (!wasFirstLayout) {\n            populate();\n        } else {\n            requestLayout();\n        }\n    }\n\n    if (mAdapterChangeListener != null && oldAdapter != adapter) {\n        mAdapterChangeListener.onAdapterChanged(oldAdapter, adapter);\n    }\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set a {@link PageTransformer} that will be called for each attached page whenever\n * the scroll position is changed. This allows the application to apply custom property\n * transformations to each page, overriding the default sliding look and feel.\n *\n * <p><em>Note:</em> Prior to Android 3.0 the property animation APIs did not exist.\n * As a result, setting a PageTransformer prior to Android 3.0 (API 11) will have no effect.</p>\n *\n * @param reverseDrawingOrder true if the supplied PageTransformer requires page views\n *                            to be drawn from last to first instead of first to last.\n * @param transformer PageTransformer that will modify each page's animation properties\n */\n", "func_signal": "public void setPageTransformer(boolean reverseDrawingOrder, PageTransformer transformer)", "code": "{\n    if (Build.VERSION.SDK_INT >= 11) {\n        final boolean hasTransformer = transformer != null;\n        final boolean needsPopulate = hasTransformer != (mPageTransformer != null);\n        mPageTransformer = transformer;\n        setChildrenDrawingOrderEnabledCompat(hasTransformer);\n        if (hasTransformer) {\n            mDrawingOrder = reverseDrawingOrder ? DRAW_ORDER_REVERSE : DRAW_ORDER_FORWARD;\n        } else {\n            mDrawingOrder = DRAW_ORDER_DEFAULT;\n        }\n        if (needsPopulate) populate();\n    }\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set the currently selected page. If the ViewPager has already been through its first\n * layout with its current adapter there will be a smooth animated transition between\n * the current item and the specified item.\n *\n * @param item Item index to select\n */\n", "func_signal": "public void setCurrentItem(int item)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, !mFirstLayout, false);\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * End a fake drag of the pager.\n *\n * @see #beginFakeDrag()\n * @see #fakeDragBy(float)\n */\n", "func_signal": "public void endFakeDrag()", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    final VelocityTracker velocityTracker = mVelocityTracker;\n    velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);\n    int initialVelocity = (int) VelocityTrackerCompat.getXVelocity(\n            velocityTracker, mActivePointerId);\n    mPopulatePending = true;\n    final int width = getClientWidth();\n    final int scrollX = getScrollX();\n    final ItemInfo ii = infoForCurrentScrollPosition();\n    final int currentPage = ii.position;\n    final float pageOffset = (((float) scrollX / width) - ii.offset) / ii.widthFactor;\n    final int totalDelta = (int) (mLastMotionX - mInitialMotionX);\n    int nextPage = determineTargetPage(currentPage, pageOffset, initialVelocity,\n            totalDelta);\n    setCurrentItemInternal(nextPage, true, true, initialVelocity);\n    endDrag();\n\n    mFakeDragging = false;\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScrollSuper(View v, boolean checkV, int dx, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollY = v.getScrollX();\n        final int scrollX = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n//                if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n//                        y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n//                        canScrollSuper(child, true, dx, x + scrollX - child.getLeft(),\n//                                y + scrollY - child.getTop())) {\n            if (x + scrollX >= child.getTop() && x + scrollX < child.getBottom() &&\n                    y + scrollY >= child.getLeft() && y + scrollY < child.getRight() &&\n                    canScrollSuper(child, true, dx, x + scrollX - child.getTop(),\n                            y + scrollY - child.getLeft())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && ViewCompat.canScrollHorizontally(v, -dx);\n}\n\n\nprotected boolean canScroll(View v, boolean checkV, int dx, int x, int y) {\n    return canScrollSuper(v, checkV, dx, x, y);\n}\n\n\n@Override\npublic boolean dispatchKeyEvent(KeyEvent event) {\n    // Let the focused view and/or our descendants get the key first\n    return super.dispatchKeyEvent(event) || executeKeyEvent(event);\n}\n\n/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n *\n * @param event The key event to execute.\n * @return Return true if the event was handled, else false.\n */\npublic boolean executeKeyEvent(KeyEvent event) {\n    boolean handled = false;\n    if (event.getAction() == KeyEvent.ACTION_DOWN) {\n        switch (event.getKeyCode()) {\n            case KeyEvent.KEYCODE_DPAD_LEFT:\n                handled = arrowScroll(FOCUS_LEFT);\n                break;\n            case KeyEvent.KEYCODE_DPAD_RIGHT:\n                handled = arrowScroll(FOCUS_RIGHT);\n                break;\n            case KeyEvent.KEYCODE_TAB:\n                if (Build.VERSION.SDK_INT >= 11) {\n                    // The focus finder had a bug handling FOCUS_FORWARD and FOCUS_BACKWARD\n                    // before Android 3.0. Ignore the tab key on those devices.\n                    if (KeyEventCompat.hasNoModifiers(event)) {\n                        handled = arrowScroll(FOCUS_FORWARD);\n                    } else if (KeyEventCompat.hasModifiers(event, KeyEvent.META_SHIFT_ON)) {\n                        handled = arrowScroll(FOCUS_BACKWARD);\n                    }\n                }\n                break;\n        }\n    }\n    return handled;\n}\n\npublic boolean arrowScroll(int direction) {\n    View currentFocused = findFocus();\n    if (currentFocused == this) {\n        currentFocused = null;\n    } else if (currentFocused != null) {\n        boolean isChild = false;\n        for (ViewParent parent = currentFocused.getParent(); parent instanceof ViewGroup;\n             parent = parent.getParent()) {\n            if (parent == this) {\n                isChild = true;\n                break;\n            }\n        }\n        if (!isChild) {\n            // This would cause the focus search down below to fail in fun ways.\n            final StringBuilder sb = new StringBuilder();\n            sb.append(currentFocused.getClass().getSimpleName());\n            for (ViewParent parent = currentFocused.getParent(); parent instanceof ViewGroup;\n                 parent = parent.getParent()) {\n                sb.append(\" => \").append(parent.getClass().getSimpleName());\n            }\n            Log.e(TAG, \"arrowScroll tried to find focus based on non-child \" +\n                    \"current focused view \" + sb.toString());\n            currentFocused = null;\n        }\n    }\n\n    boolean handled = false;\n\n    View nextFocused = FocusFinder.getInstance().findNextFocus(this, currentFocused,\n            direction);\n    if (nextFocused != null && nextFocused != currentFocused) {\n        if (direction == View.FOCUS_LEFT) {\n            // If there is nothing to the left, or this is causing us to\n            // jump to the right, then what we really want to do is page left.\n            final int nextLeft = getChildRectInPagerCoordinates(mTempRect, nextFocused).left;\n            final int currLeft = getChildRectInPagerCoordinates(mTempRect, currentFocused).left;\n            if (currentFocused != null && nextLeft >= currLeft) {\n                handled = pageLeft();\n            } else {\n                handled = nextFocused.requestFocus();\n            }\n        } else if (direction == View.FOCUS_RIGHT) {\n            // If there is nothing to the right, or this is causing us to\n            // jump to the left, then what we really want to do is page right.\n            final int nextLeft = getChildRectInPagerCoordinates(mTempRect, nextFocused).left;\n            final int currLeft = getChildRectInPagerCoordinates(mTempRect, currentFocused).left;\n            if (currentFocused != null && nextLeft <= currLeft) {\n                handled = pageRight();\n            } else {\n                handled = nextFocused.requestFocus();\n            }\n        }\n    } else if (direction == FOCUS_LEFT || direction == FOCUS_BACKWARD) {\n        // Trying to move left and nothing there; try to page.\n        handled = pageLeft();\n    } else if (direction == FOCUS_RIGHT || direction == FOCUS_FORWARD) {\n        // Trying to move right and nothing there; try to page.\n        handled = pageRight();\n    }\n    if (handled) {\n        playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));\n    }\n    return handled;\n}\n\nprivate Rect getChildRectInPagerCoordinates(Rect outRect, View child) {\n    if (outRect == null) {\n        outRect = new Rect();\n    }\n    if (child == null) {\n        outRect.set(0, 0, 0, 0);\n        return outRect;\n    }\n    outRect.left = child.getLeft();\n    outRect.right = child.getRight();\n    outRect.top = child.getTop();\n    outRect.bottom = child.getBottom();\n\n    ViewParent parent = child.getParent();\n    while (parent instanceof ViewGroup && parent != this) {\n        final ViewGroup group = (ViewGroup) parent;\n        outRect.left += group.getLeft();\n        outRect.right += group.getRight();\n        outRect.top += group.getTop();\n        outRect.bottom += group.getBottom();\n\n        parent = group.getParent();\n    }\n    return outRect;\n}\n\nboolean pageLeft() {\n    if (mCurItem > 0) {\n        setCurrentItem(mCurItem-1, true);\n        return true;\n    }\n    return false;\n}\n\nboolean pageRight() {\n    if (mAdapter != null && mCurItem < (mAdapter.getCount()-1)) {\n        setCurrentItem(mCurItem+1, true);\n        return true;\n    }\n    return false;\n}\n\n/**\n * We only want the current page that is being shown to be focusable.\n */\n@Override\npublic void addFocusables(ArrayList<View> views, int direction, int focusableMode) {\n    final int focusableCount = views.size();\n\n    final int descendantFocusability = getDescendantFocusability();\n\n    if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {\n        for (int i = 0; i < getChildCount(); i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() == VISIBLE) {\n                ItemInfo ii = infoForChild(child);\n                if (ii != null && ii.position == mCurItem) {\n                    child.addFocusables(views, direction, focusableMode);\n                }\n            }\n        }\n    }\n\n    // we add ourselves (if focusable) in all cases except for when we are\n    // FOCUS_AFTER_DESCENDANTS and there are some descendants focusable.  this is\n    // to avoid the focus search finding layouts when a more precise search\n    // among the focusable children would be more interesting.\n    if (\n            descendantFocusability != FOCUS_AFTER_DESCENDANTS ||\n                    // No focusable descendants\n                    (focusableCount == views.size())) {\n        // Note that we can't call the superclass here, because it will\n        // add all views in.  So we need to do the same thing View does.\n        if (!isFocusable()) {\n            return;\n        }\n        if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE &&\n                isInTouchMode() && !isFocusableInTouchMode()) {\n            return;\n        }\n        if (views != null) {\n            views.add(this);\n        }\n    }\n}\n\n/**\n * We only want the current page that is being shown to be touchable.\n */\n@Override\npublic void addTouchables(ArrayList<View> views) {\n    // Note that we don't call super.addTouchables(), which means that\n    // we don't call View.addTouchables().  This is okay because a ViewPager\n    // is itself not touchable.\n    for (int i = 0; i < getChildCount(); i++) {\n        final View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem) {\n                child.addTouchables(views);\n            }\n        }\n    }\n}\n\n/**\n * We only want the current page that is being shown to be focusable.\n */\n@Override\nprotected boolean onRequestFocusInDescendants(int direction,\n                                              Rect previouslyFocusedRect) {\n    int index;\n    int increment;\n    int end;\n    int count = getChildCount();\n    if ((direction & FOCUS_FORWARD) != 0) {\n        index = 0;\n        increment = 1;\n        end = count;\n    } else {\n        index = count - 1;\n        increment = -1;\n        end = -1;\n    }\n    for (int i = index; i != end; i += increment) {\n        View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem) {\n                if (child.requestFocus(direction, previouslyFocusedRect)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n@Override\npublic boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {\n    // Dispatch scroll events from this ViewPager.\n    if (event.getEventType() == AccessibilityEventCompat.TYPE_VIEW_SCROLLED) {\n        return super.dispatchPopulateAccessibilityEvent(event);\n    }\n\n    // Dispatch all other accessibility events from the current page.\n    final int childCount = getChildCount();\n    for (int i = 0; i < childCount; i++) {\n        final View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            final ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem &&\n                    child.dispatchPopulateAccessibilityEvent(event)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n@Override\nprotected ViewGroup.LayoutParams generateDefaultLayoutParams() {\n    return new LayoutParams();\n}\n\n@Override\nprotected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {\n    return generateDefaultLayoutParams();\n}\n\n@Override\nprotected boolean checkLayoutParams(ViewGroup.LayoutParams p) {\n    return p instanceof LayoutParams && super.checkLayoutParams(p);\n}\n\n@Override\npublic ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) {\n    return new LayoutParams(getContext(), attrs);\n}\n\nclass MyAccessibilityDelegate extends AccessibilityDelegateCompat {\n\n    @Override\n    public void onInitializeAccessibilityEvent(View host, AccessibilityEvent event) {\n        super.onInitializeAccessibilityEvent(host, event);\n        event.setClassName(VerticalViewPager.class.getName());\n        final AccessibilityRecordCompat recordCompat = AccessibilityRecordCompat.obtain();\n        recordCompat.setScrollable(canScroll());\n        if (event.getEventType() == AccessibilityEventCompat.TYPE_VIEW_SCROLLED\n                && mAdapter != null) {\n            recordCompat.setItemCount(mAdapter.getCount());\n            recordCompat.setFromIndex(mCurItem);\n            recordCompat.setToIndex(mCurItem);\n        }\n    }\n\n    @Override\n    public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCompat info) {\n        super.onInitializeAccessibilityNodeInfo(host, info);\n        info.setClassName(VerticalViewPager.class.getName());\n        info.setScrollable(canScroll());\n        if (canScrollHorizontally(1)) {\n            info.addAction(AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD);\n        }\n        if (canScrollHorizontally(-1)) {\n            info.addAction(AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD);\n        }\n    }\n\n    @Override\n    public boolean performAccessibilityAction(View host, int action, Bundle args) {\n        if (super.performAccessibilityAction(host, action, args)) {\n            return true;\n        }\n        switch (action) {\n            case AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD: {\n                if (canScrollHorizontally(1)) {\n                    setCurrentItem(mCurItem + 1);\n                    return true;\n                }\n            } return false;\n            case AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD: {\n                if (canScrollHorizontally(-1)) {\n                    setCurrentItem(mCurItem - 1);\n                    return true;\n                }\n            } return false;\n        }\n        return false;\n    }\n\n    private boolean canScroll() {\n        return (mAdapter != null) && (mAdapter.getCount() > 1);\n    }\n}\n\nprivate class PagerObserver extends DataSetObserver {\n    @Override\n    public void onChanged() {\n        dataSetChanged();\n    }\n    @Override\n    public void onInvalidated() {\n        dataSetChanged();\n    }\n}\n\n/**\n * Layout parameters that should be supplied for views added to a\n * ViewPager.\n */\npublic static class LayoutParams extends ViewGroup.LayoutParams {\n    /**\n     * true if this view is a decoration on the pager itself and not\n     * a view supplied by the adapter.\n     */\n    public boolean isDecor;\n\n    /**\n     * Gravity setting for use on decor views only:\n     * Where to position the view page within the overall ViewPager\n     * container; constants are defined in {@link android.view.Gravity}.\n     */\n    public int gravity;\n\n    /**\n     * Width as a 0-1 multiplier of the measured pager width\n     */\n    float widthFactor = 0.f;\n\n    /**\n     * true if this view was added during layout and needs to be measured\n     * before being positioned.\n     */\n    boolean needsMeasure;\n\n    /**\n     * Adapter position this view is for if !isDecor\n     */\n    int position;\n\n    /**\n     * Current child index within the ViewPager that this view occupies\n     */\n    int childIndex;\n\n    public LayoutParams() {\n        super(FILL_PARENT, FILL_PARENT);\n    }\n\n    public LayoutParams(Context context, AttributeSet attrs) {\n        super(context, attrs);\n\n        final TypedArray a = context.obtainStyledAttributes(attrs, LAYOUT_ATTRS);\n        gravity = a.getInteger(0, Gravity.TOP);\n        a.recycle();\n    }\n}\n\nstatic class ViewPositionComparator implements Comparator<View> {\n    @Override\n    public int compare(View lhs, View rhs) {\n        final LayoutParams llp = (LayoutParams) lhs.getLayoutParams();\n        final LayoutParams rlp = (LayoutParams) rhs.getLayoutParams();\n        if (llp.isDecor != rlp.isDecor) {\n            return llp.isDecor ? 1 : -1;\n        }\n        return llp.position - rlp.position;\n    }\n}\n\nprivate class VerticalPageTransformer implements PageTransformer{\n    public void transformPage(View view, float position){\n        int pageWidth = view.getWidth();\n        int pageHeight = view.getHeight();\n\n        if(position < -1){ // [-Infinity,-1)\n            view.setAlpha(0);\n        }else if(position <= 1){ // [-1,1]\n            view.setAlpha(1);\n            view.setTranslationX(pageWidth * -position);\n            float yPosition = position * pageHeight;\n            view.setTranslationY(yPosition);\n        }\n    }\n}\n\nprivate VerticalPageTransformer pageTransformer;\n\nprivate void init(){\n    pageTransformer = new VerticalPageTransformer();\n    setPageTransformer(true, pageTransformer);\n    setOverScrollMode(OVER_SCROLL_NEVER);\n}\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * @return Info about the page at the current scroll position.\n *         This can be synthetic for a missing middle page; the 'object' field can be null.\n */\n", "func_signal": "private ItemInfo infoForCurrentScrollPosition()", "code": "{\n    final int width = getClientWidth();\n    final float scrollOffset = width > 0 ? (float) getScrollX() / width : 0;\n    final float marginOffset = width > 0 ? (float) mPageMargin / width : 0;\n    int lastPos = -1;\n    float lastOffset = 0.f;\n    float lastWidth = 0.f;\n    boolean first = true;\n\n    ItemInfo lastItem = null;\n    for (int i = 0; i < mItems.size(); i++) {\n        ItemInfo ii = mItems.get(i);\n        float offset;\n        if (!first && ii.position != lastPos + 1) {\n            // Create a synthetic item for a missing page.\n            ii = mTempItem;\n            ii.offset = lastOffset + lastWidth + marginOffset;\n            ii.position = lastPos + 1;\n            ii.widthFactor = mAdapter.getPageWidth(ii.position);\n            i--;\n        }\n        offset = ii.offset;\n\n        final float leftBound = offset;\n        final float rightBound = offset + ii.widthFactor + marginOffset;\n        if (first || scrollOffset >= leftBound) {\n            if (scrollOffset < rightBound || i == mItems.size() - 1) {\n                return ii;\n            }\n        } else {\n            return lastItem;\n        }\n        first = false;\n        lastPos = ii.position;\n        lastOffset = offset;\n        lastWidth = ii.widthFactor;\n        lastItem = ii;\n    }\n\n    return lastItem;\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Fake drag by an offset in pixels. You must have called {@link #beginFakeDrag()} first.\n *\n * @param xOffset Offset in pixels to drag by.\n * @see #beginFakeDrag()\n * @see #endFakeDrag()\n */\n", "func_signal": "public void fakeDragBy(float xOffset)", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    mLastMotionX += xOffset;\n\n    float oldScrollX = getScrollX();\n    float scrollX = oldScrollX - xOffset;\n    final int width = getClientWidth();\n\n    float leftBound = width * mFirstOffset;\n    float rightBound = width * mLastOffset;\n\n    final ItemInfo firstItem = mItems.get(0);\n    final ItemInfo lastItem = mItems.get(mItems.size() - 1);\n    if (firstItem.position != 0) {\n        leftBound = firstItem.offset * width;\n    }\n    if (lastItem.position != mAdapter.getCount() - 1) {\n        rightBound = lastItem.offset * width;\n    }\n\n    if (scrollX < leftBound) {\n        scrollX = leftBound;\n    } else if (scrollX > rightBound) {\n        scrollX = rightBound;\n    }\n    // Don't lose the rounded component\n    mLastMotionX += scrollX - (int) scrollX;\n    scrollTo((int) scrollX, getScrollY());\n    pageScrolled((int) scrollX);\n\n    // Synthesize an event for the VelocityTracker.\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(mFakeDragBeginTime, time, MotionEvent.ACTION_MOVE,\n            mLastMotionX, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set the currently selected page. If the ViewPager has already been through its first\n * layout with its current adapter there will be a smooth animated transition between\n * the current item and the specified item.\n *\n * @param item Item index to select\n */\n", "func_signal": "public void setCurrentItem(int item)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, !mFirstLayout, false);\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Fake drag by an offset in pixels. You must have called {@link #beginFakeDrag()} first.\n *\n * @param xOffset Offset in pixels to drag by.\n * @see #beginFakeDrag()\n * @see #endFakeDrag()\n */\n", "func_signal": "public void fakeDragBy(float xOffset)", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    mLastMotionX += xOffset;\n\n    float oldScrollX = getScrollX();\n    float scrollX = oldScrollX - xOffset;\n    final int width = getWidth();\n\n    float leftBound = width * mFirstOffset;\n    float rightBound = width * mLastOffset;\n\n    final ItemInfo firstItem = mItems.get(0);\n    final ItemInfo lastItem = mItems.get(mItems.size() - 1);\n    if (firstItem.position != 0) {\n        leftBound = firstItem.offset * width;\n    }\n    if (lastItem.position != mAdapter.getCount() - 1) {\n        rightBound = lastItem.offset * width;\n    }\n\n    if (scrollX < leftBound) {\n        scrollX = leftBound;\n    } else if (scrollX > rightBound) {\n        scrollX = rightBound;\n    }\n    // Don't lose the rounded component\n    mLastMotionX += scrollX - (int) scrollX;\n    scrollTo((int) scrollX, getScrollY());\n    pageScrolled((int) scrollX);\n\n    // Synthesize an event for the VelocityTracker.\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(mFakeDragBeginTime, time, MotionEvent.ACTION_MOVE,\n            mLastMotionX, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Start a fake drag of the pager.\n *\n * <p>A fake drag can be useful if you want to synchronize the motion of the ViewPager\n * with the touch scrolling of another view, while still letting the ViewPager\n * control the snapping motion and fling behavior. (e.g. parallax-scrolling tabs.)\n * Call {@link #fakeDragBy(float)} to simulate the actual drag motion. Call\n * {@link #endFakeDrag()} to complete the fake drag and fling as necessary.\n *\n * <p>During a fake drag the ViewPager will ignore all touch events. If a real drag\n * is already in progress, this method will return false.\n *\n * @return true if the fake drag began successfully, false if it could not be started.\n *\n * @see #fakeDragBy(float)\n * @see #endFakeDrag()\n */\n", "func_signal": "public boolean beginFakeDrag()", "code": "{\n    if (mIsBeingDragged) {\n        return false;\n    }\n    mFakeDragging = true;\n    setScrollState(SCROLL_STATE_DRAGGING);\n    mInitialMotionX = mLastMotionX = 0;\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    } else {\n        mVelocityTracker.clear();\n    }\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n    mFakeDragBeginTime = time;\n    return true;\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set a PagerAdapter that will supply views for this pager as needed.\n *\n * @param adapter Adapter to use\n */\n", "func_signal": "public void setAdapter(PagerAdapter adapter)", "code": "{\n    if (mAdapter != null) {\n        mAdapter.unregisterDataSetObserver(mObserver);\n        mAdapter.startUpdate(this);\n        for (int i = 0; i < mItems.size(); i++) {\n            final ItemInfo ii = mItems.get(i);\n            mAdapter.destroyItem(this, ii.position, ii.object);\n        }\n        mAdapter.finishUpdate(this);\n        mItems.clear();\n        removeNonDecorViews();\n        mCurItem = 0;\n        scrollTo(0, 0);\n    }\n\n    final PagerAdapter oldAdapter = mAdapter;\n    mAdapter = adapter;\n\n    if (mAdapter != null) {\n        if (mObserver == null) {\n            mObserver = new PagerObserver();\n        }\n        mAdapter.registerDataSetObserver(mObserver);\n        mPopulatePending = false;\n        mFirstLayout = true;\n        if (mRestoredCurItem >= 0) {\n            mAdapter.restoreState(mRestoredAdapterState, mRestoredClassLoader);\n            setCurrentItemInternal(mRestoredCurItem, false, true);\n            mRestoredCurItem = -1;\n            mRestoredAdapterState = null;\n            mRestoredClassLoader = null;\n        } else {\n            populate();\n        }\n    }\n\n    if (mAdapterChangeListener != null && oldAdapter != adapter) {\n        mAdapterChangeListener.onAdapterChanged(oldAdapter, adapter);\n    }\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set the currently selected page.\n *\n * @param item Item index to select\n * @param smoothScroll True to smoothly scroll to the new item, false to transition immediately\n */\n", "func_signal": "public void setCurrentItem(int item, boolean smoothScroll)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, smoothScroll, false);\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\VerticalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set a drawable that will be used to fill the margin between pages.\n *\n * @param d Drawable to display between pages\n */\n", "func_signal": "public void setPageMarginDrawable(Drawable d)", "code": "{\n    mMarginDrawable = d;\n    if (d != null) refreshDrawableState();\n    setWillNotDraw(d == null);\n    invalidate();\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Start a fake drag of the pager.\n *\n * <p>A fake drag can be useful if you want to synchronize the motion of the ViewPager\n * with the touch scrolling of another view, while still letting the ViewPager\n * control the snapping motion and fling behavior. (e.g. parallax-scrolling tabs.)\n * Call {@link #fakeDragBy(float)} to simulate the actual drag motion. Call\n * {@link #endFakeDrag()} to complete the fake drag and fling as necessary.\n *\n * <p>During a fake drag the ViewPager will ignore all touch events. If a real drag\n * is already in progress, this method will return false.\n *\n * @return true if the fake drag began successfully, false if it could not be started.\n *\n * @see #fakeDragBy(float)\n * @see #endFakeDrag()\n */\n", "func_signal": "public boolean beginFakeDrag()", "code": "{\n    if (mIsBeingDragged) {\n        return false;\n    }\n    mFakeDragging = true;\n    setScrollState(SCROLL_STATE_DRAGGING);\n    mInitialMotionX = mLastMotionX = 0;\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    } else {\n        mVelocityTracker.clear();\n    }\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n    mFakeDragBeginTime = time;\n    return true;\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/**\n * Set the currently selected page.\n *\n * @param item Item index to select\n * @param smoothScroll True to smoothly scroll to the new item, false to transition immediately\n */\n", "func_signal": "public void setCurrentItem(int item, boolean smoothScroll)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, smoothScroll, false);\n}", "path": "DoubleViewPager\\src\\main\\java\\com\\emoiluj\\doubleviewpager\\HorizontalViewPager.java", "repo_name": "juliome10/DoubleViewPager", "stars": 265, "license": "apache-2.0", "language": "java", "size": 7787}
{"docstring": "/** Called when user clicks the Send button */\n", "func_signal": "public void sendData(@SuppressWarnings(\"unused\") View view)", "code": "{\n  Intent intent = new Intent(this, DisplayActivity.class);\n  EditText editText = (EditText) findViewById(R.id.send_data_edit_text);\n  intent.putExtra(EXTRA_DATA, editText.getText().toString());\n  startActivity(intent);\n}", "path": "espresso-tester\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\tester\\SendActivity.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Sets up intent spying, lifecycle monitoring, and argument registry.\n *\n * Subclasses must call up to onCreate(). This oncreate method does not call start()\n * it is the subclasses responsibility to call start if it desires.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle arguments)", "code": "{\n  Log.i(LOG_TAG, \"Instrumentation Started!\");\n  tryLoadingIntentSpy();\n  InstrumentationRegistry.registerInstance(this);\n  ActivityLifecycleMonitorRegistry.registerInstance(lifecycleMonitor);\n\n  handlerForMainLooper = new Handler(Looper.getMainLooper());\n  mainThread = Thread.currentThread();\n  executorService = Executors.newCachedThreadPool();\n  Looper.myQueue().addIdleHandler(idleHandler);\n  super.onCreate(arguments);\n}", "path": "espresso-runner\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\testrunner\\GoogleInstrumentation.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "// NOTE: we need to keep a count of activities between the start\n// and stop lifecycle internal to our instrumentation. Exiting the test\n// process with activities in this state can cause crashes/flakiness\n// that would impact a subsequent test run.\n", "func_signal": "@Override\npublic void callActivityOnStart(Activity activity)", "code": "{\n  startedActivityCounter.incrementAndGet();\n  try {\n    super.callActivityOnStart(activity);\n    lifecycleMonitor.signalLifecycleChange(Stage.STARTED, activity);\n  } catch (RuntimeException re) {\n    startedActivityCounter.decrementAndGet();\n    throw re;\n  }\n}", "path": "espresso-runner\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\testrunner\\GoogleInstrumentation.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Prints the current state of this resource to the logcat at info level.\n */\n", "func_signal": "public void dumpStateToLogs()", "code": "{\n  StringBuilder message = new StringBuilder(\"Resource: \")\n      .append(resourceName)\n      .append(\" inflight transaction count: \")\n      .append(counter.get());\n  if (0 == becameBusyAt) {\n    Log.i(TAG, message.append(\" and has never been busy!\").toString());\n  } else {\n    message.append(\" and was last busy at: \")\n        .append(becameBusyAt);\n    if (0 == becameIdleAt) {\n      Log.w(TAG, message.append(\" AND NEVER WENT IDLE!\").toString());\n    } else {\n      message.append(\" and last went idle at: \")\n          .append(becameIdleAt);\n      Log.i(TAG, message.toString());\n    }\n  }\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\contrib\\CountingIdlingResource.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Returns a generic {@link ViewAssertion} that asserts that the descendant views selected by the\n * selector match the specified matcher.\n *\n *  Example: onView(rootView).check(selectedDescendantsMatch(\n * not(isAssignableFrom(TextView.class)), hasContentDescription()));\n */\n", "func_signal": "public static ViewAssertion selectedDescendantsMatch(\n    final Matcher<View> selector, final Matcher<View> matcher)", "code": "{\n  return new ViewAssertion() {\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void check(Optional<View> view, Optional<NoMatchingViewException> noViewException) {\n      Preconditions.checkArgument(view.isPresent());\n      View rootView = view.get();\n\n      final Predicate<View> viewPredicate = new Predicate<View>() {\n        @Override\n        public boolean apply(View input) {\n          return selector.matches(input);\n        }\n      };\n\n      Iterator<View> selectedViewIterator =\n          Iterables.filter(breadthFirstViewTraversal(rootView), viewPredicate).iterator();\n\n      List<View> nonMatchingViews = new ArrayList<View>();\n      while (selectedViewIterator.hasNext()) {\n        View selectedView = selectedViewIterator.next();\n\n        if (!matcher.matches(selectedView)) {\n          nonMatchingViews.add(selectedView);\n        }\n      }\n\n      if (nonMatchingViews.size() > 0) {\n        String errorMessage = HumanReadables.getViewHierarchyErrorMessage(rootView,\n            Optional.of(nonMatchingViews),\n            String.format(\"At least one view did not match the required matcher: %s\", matcher),\n            Optional.of(\"****DOES NOT MATCH****\"));\n        throw new AssertionFailedError(errorMessage);\n      }\n    }\n  };\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\assertion\\ViewAssertions.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Returns an action that performs a swipe left-to-right across the vertical center of the\n * view.<br>\n * <br>\n * View constraints:\n * <ul>\n * <li>must be displayed on screen\n * <ul>\n */\n", "func_signal": "public static ViewAction swipeRight()", "code": "{\n  return new GeneralSwipeAction(Swipe.FAST, GeneralLocation.CENTER_LEFT,\n      GeneralLocation.CENTER_RIGHT, Press.FINGER);\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\action\\ViewActions.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Ensures we've onStopped() all activities which were onStarted().\n *\n * According to Activity's contract, the process is not killable between onStart and onStop.\n * Breaking this contract (which finish() will if you let it) can cause bad behaviour (including\n * a full restart of system_server).\n *\n * We give the app 2 seconds to stop all its activities, then we proceed.\n */\n", "func_signal": "protected void waitForActivitiesToComplete()", "code": "{\n  long endTime = System.currentTimeMillis() + MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP;\n  int currentActivityCount = startedActivityCounter.get();\n\n  while (currentActivityCount > 0 && System.currentTimeMillis() < endTime) {\n    try {\n      Log.i(LOG_TAG, \"Unstopped activity count: \" + currentActivityCount);\n      Thread.sleep(MILLIS_TO_POLL_FOR_ACTIVITY_STOP);\n      currentActivityCount = startedActivityCounter.get();\n    } catch (InterruptedException ie) {\n      Log.i(LOG_TAG, \"Abandoning activity wait due to interruption.\", ie);\n      break;\n    }\n  }\n\n  if (currentActivityCount > 0) {\n    dumpThreadStateToOutputs(\"ThreadState-unstopped.txt\");\n    Log.w(LOG_TAG, String.format(\"Still %s activities active after waiting %s ms.\",\n        currentActivityCount, MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP));\n  }\n}", "path": "espresso-runner\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\testrunner\\GoogleInstrumentation.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * This implementation of onStart() will guarantee that the Application's onCreate method\n * has completed when it returns.\n * Subclasses should call super.onStart() before executing any code that touches the application\n * and it's state.\n */\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n  super.onStart();\n\n  // Due to the way Android initializes instrumentation - all instrumentations have the\n  // possibility of seeing the Application and its classes in an inconsistent state. Specifically\n  // ActivityThread creates Instrumentation first, initializes it, and calls\n  // instrumentation.onCreate(). After it does that, it calls\n  // instrumentation.callApplicationOnCreate() which ends up calling the application's\n  // onCreateMethod.\n  //\n  // So, Android's InstrumentationTestRunner's onCreate method() spawns a separate thread to\n  // execute tests. This causes tests to start accessing the application and its classes while\n  // the ActivityThread is calling callApplicationOnCreate() in its own thread.\n  //\n  // This makes it possible for tests to see the application in a state that is normally never\n  // visible: pre-application.onCreate() and during application.onCreate()).\n  //\n  // *phew* that sucks! Here we waitForOnIdleSync() to ensure onCreate has completed before we\n  // start executing tests.\n  waitForIdleSync();\n}", "path": "espresso-runner\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\testrunner\\GoogleInstrumentation.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Creates a CountingIdlingResource.\n *\n * @param resourceName the resource name this resource should report to Espresso.\n * @param debugCounting if true increment & decrement calls will print trace information to logs.\n */\n", "func_signal": "public CountingIdlingResource(String resourceName, boolean debugCounting)", "code": "{\n  this.resourceName = checkNotNull(resourceName);\n  this.debugCounting = debugCounting;\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\contrib\\CountingIdlingResource.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Returns a generic {@link ViewAssertion} that asserts that a view exists in the view hierarchy\n * and is matched by the given view matcher.\n */\n", "func_signal": "public static ViewAssertion matches(final Matcher<? super View> viewMatcher)", "code": "{\n  checkNotNull(viewMatcher);\n  return new ViewAssertion() {\n    @Override\n    public void check(Optional<View> view, Optional<NoMatchingViewException> noViewException) {\n      StringDescription description = new StringDescription();\n      description.appendText(\"'\");\n      viewMatcher.describeTo(description);\n      if (noViewException.isPresent()) {\n        description.appendText(String.format(\n            \"' check could not be performed because view '%s' was not found.\\n\", viewMatcher));\n        Log.e(TAG, description.toString());\n        throw noViewException.get();\n      } else {\n        // TODO(user): ideally, we should append the matcher used to find the view\n        // This can be done in DefaultFailureHandler (just like we currently to with\n        // PerformException)\n        description.appendText(\"' doesn't match the selected view.\");\n        assertThat(description.toString(), view.get(), viewMatcher);\n      }\n    }\n  };\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\assertion\\ViewAssertions.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/** Called when user clicks the Send button */\n", "func_signal": "public void sendButtonClicked(@SuppressWarnings(\"unused\") View view)", "code": "{\n  Intent intent = new Intent(this, DisplayActivity.class);\n  EditText editText = (EditText) findViewById(R.id.sendtext_simple);\n  intent.putExtra(EXTRA_DATA, editText.getText().toString());\n  startActivity(intent);\n}", "path": "espresso-sample\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\testapp\\SimpleActivity.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/* junit hides the cause constructor. */\n", "func_signal": "public AssertionFailedWithCauseError(String message, Throwable cause)", "code": "{\n  super(message);\n  initCause(cause);\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\base\\DefaultFailureHandler.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Ensures all activities launched in this instrumentation are finished before the instrumentation\n * exits.\n *\n * Subclasses who override this method should do their finish processing and then call\n * super.finish to invoke this logic. Not waiting for all activities to finish() before exiting\n * can cause device wide instability.\n */\n", "func_signal": "@Override\npublic void finish(int resultCode, Bundle results)", "code": "{\n  if (finished) {\n    Log.w(LOG_TAG, \"finish called 2x!\");\n    return;\n  } else {\n    finished = true;\n  }\n\n  handlerForMainLooper.post(new ActivityFinisher());\n\n  long startTime = System.currentTimeMillis();\n  waitForActivitiesToComplete();\n  long endTime = System.currentTimeMillis();\n  Log.i(LOG_TAG, String.format(\"waitForActivitiesToComplete() took: %sms\", endTime - startTime));\n  ActivityLifecycleMonitorRegistry.registerInstance(null);\n  super.finish(resultCode, results);\n}", "path": "espresso-runner\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\testrunner\\GoogleInstrumentation.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Returns an action that performs a single click on the view.\n *\n * If the click takes longer than the 'long press' duration (which is possible) the provided\n * rollback action is invoked on the view and a click is attempted again.\n *\n * This is only necessary if the view being clicked on has some different behaviour for long press\n * versus a normal tap.\n *\n * For example - if a long press on a particular view element opens a popup menu -\n * ViewActions.pressBack() may be an acceptable rollback action.\n *\n * <br>\n * View constraints:\n * <ul>\n * <li>must be displayed on screen</li>\n * <li>any constraints of the rollbackAction</li>\n * <ul>\n */\n", "func_signal": "public static ViewAction click(ViewAction rollbackAction)", "code": "{\n  checkNotNull(rollbackAction);\n  return new GeneralClickAction(Tap.SINGLE, GeneralLocation.CENTER, Press.FINGER,\n      rollbackAction);\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\action\\ViewActions.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Returns an action that performs a swipe right-to-left across the vertical center of the\n * view.<br>\n * <br>\n * View constraints:\n * <ul>\n * <li>must be displayed on screen\n * <ul>\n */\n", "func_signal": "public static ViewAction swipeLeft()", "code": "{\n  return new GeneralSwipeAction(Swipe.FAST, GeneralLocation.CENTER_RIGHT,\n      GeneralLocation.CENTER_LEFT, Press.FINGER);\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\action\\ViewActions.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Returns an assert that ensures the view matcher does not find any matching view in the\n * hierarchy.\n */\n", "func_signal": "public static ViewAssertion doesNotExist()", "code": "{\n  return new ViewAssertion() {\n    @Override\n    public void check(Optional<View> view, Optional<NoMatchingViewException> noView) {\n      if (view.isPresent()) {\n        assertThat(\"View is present in the hierarchy: \" + HumanReadables.describe(view.get()),\n            true, is(false));\n      }\n    }\n  };\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\assertion\\ViewAssertions.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Decrements the count of in-flight transactions to the resource being monitored.\n *\n * If this operation results in the counter falling below 0 - an exception is raised.\n *\n * @throws IllegalStateException if the counter is below 0.\n */\n", "func_signal": "public void decrement()", "code": "{\n  int counterVal = counter.decrementAndGet();\n\n  if (counterVal == 0) {\n    // we've gone from non-zero to zero. That means we're idle now! Tell espresso.\n    if (null != resourceCallback) {\n      resourceCallback.onTransitionToIdle();\n    }\n    becameIdleAt = SystemClock.uptimeMillis();\n  }\n\n  if (debugCounting) {\n    if (counterVal == 0) {\n      Log.i(TAG, \"Resource: \" + resourceName + \" went idle! (Time spent not idle: \" +\n          (becameIdleAt - becameBusyAt) + \")\");\n    } else {\n      Log.i(TAG, \"Resource: \" + resourceName + \" in-use-count decremented to: \" + counterVal);\n    }\n  }\n  checkState(counterVal > -1, \"Counter has been corrupted!\");\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\contrib\\CountingIdlingResource.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * When the error is coming from espresso, it is more user friendly to:\n * 1. propagate assertions as assertions\n * 2. swap the stack trace of the error to that of current thread (which will show\n * directly where the actual problem is)\n */\n", "func_signal": "private Throwable getUserFriendlyError(Throwable error, Matcher<View> viewMatcher)", "code": "{\n  if (error instanceof PerformException) {\n    // Re-throw the exception with the viewMatcher (used to locate the view) as the view\n    // description (makes the error more readable). The reason we do this here: not all creators\n    // of PerformException have access to the viewMatcher.\n    throw new PerformException.Builder()\n      .from((PerformException) error)\n      .withViewDescription(viewMatcher.toString())\n      .build();\n  }\n\n  if (error instanceof AssertionError) {\n    // reports Failure instead of Error.\n    // assertThat(...) throws an AssertionFailedError.\n    error = new AssertionFailedWithCauseError(error.getMessage(), error);\n  }\n\n  error.setStackTrace(Thread.currentThread().getStackTrace());\n  return error;\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\base\\DefaultFailureHandler.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Constructs {@link TypeTextAction} with given string. If the string is empty it results in no-op\n * (nothing is typed).\n *\n * @param stringToBeTyped String To be typed by {@link TypeTextAction}\n * @param tapToFocus indicates whether a tap should be sent to the underlying view before typing.\n */\n", "func_signal": "public TypeTextAction(String stringToBeTyped, boolean tapToFocus)", "code": "{\n  checkNotNull(stringToBeTyped);\n  this.stringToBeTyped = stringToBeTyped;\n  this.tapToFocus = tapToFocus;\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\action\\TypeTextAction.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Increments the count of in-flight transactions to the resource being monitored.\n *\n * This method can be called from any thread.\n */\n", "func_signal": "public void increment()", "code": "{\n  int counterVal = counter.getAndIncrement();\n  if (0 == counterVal) {\n    becameBusyAt = SystemClock.uptimeMillis();\n  }\n\n  if (debugCounting) {\n    Log.i(TAG, \"Resource: \" + resourceName + \" in-use-count incremented to: \" + (counterVal + 1));\n  }\n}", "path": "espresso\\src\\main\\java\\com\\google\\android\\apps\\common\\testing\\ui\\espresso\\contrib\\CountingIdlingResource.java", "repo_name": "JakeWharton/double-espresso", "stars": 341, "license": "apache-2.0", "language": "java", "size": 11899}
{"docstring": "/**\n * Set the bounds of the component\n */\n", "func_signal": "private void setupBounds(int layout_width, int layout_height)", "code": "{\n    int paddingTop = getPaddingTop();\n    int paddingBottom = getPaddingBottom();\n    int paddingLeft = getPaddingLeft();\n    int paddingRight = getPaddingRight();\n\n    if (!fillRadius) {\n        // Width should equal to Height, find the min value to setup the circle\n        int minValue = Math.min(layout_width - paddingLeft - paddingRight,\n                layout_height - paddingBottom - paddingTop);\n\n        int circleDiameter = Math.min(minValue, circleRadius * 2 - barWidth * 2);\n\n        // Calc the Offset if needed for centering the wheel in the available space\n        int xOffset = (layout_width - paddingLeft - paddingRight - circleDiameter) / 2 + paddingLeft;\n        int yOffset = (layout_height - paddingTop - paddingBottom - circleDiameter) / 2 + paddingTop;\n\n        circleBounds = new RectF(xOffset + barWidth,\n                yOffset + barWidth,\n                xOffset + circleDiameter - barWidth,\n                yOffset + circleDiameter - barWidth);\n    } else {\n        circleBounds = new RectF(paddingLeft + barWidth,\n                paddingTop + barWidth,\n                layout_width - paddingRight - barWidth,\n                layout_height - paddingBottom - barWidth);\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Set the progress to a specific value,\n * the bar will smoothly animate until that value\n *\n * @param progress the progress between 0 and 1\n */\n", "func_signal": "public void setProgress(float progress)", "code": "{\n    if (isSpinning) {\n        mProgress = 0.0f;\n        isSpinning = false;\n\n        runCallback();\n    }\n\n    if (progress > 1.0f) {\n        progress -= 1.0f;\n    } else if (progress < 0) {\n        progress = 0;\n    }\n\n    if (progress == mTargetProgress) {\n        return;\n    }\n\n    // If we are currently in the right position\n    // we set again the last time animated so the\n    // animation starts smooth from here\n    if (mProgress == mTargetProgress) {\n        lastTimeAnimated = SystemClock.uptimeMillis();\n    }\n\n    mTargetProgress = Math.min(progress * 360.0f, 360.0f);\n\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Use onSizeChanged instead of onAttachedToWindow to get the dimensions of the view,\n * because this method is called after measuring the dimensions of MATCH_PARENT & WRAP_CONTENT.\n * Use this dimensions to setup the bounds and paints.\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n    super.onSizeChanged(w, h, oldw, oldh);\n\n    setupBounds(w, h);\n    setupPaints();\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "//----------------------------------\n//Animation stuff\n//----------------------------------\n", "func_signal": "protected void onDraw(Canvas canvas)", "code": "{\n    super.onDraw(canvas);\n\n    canvas.drawArc(circleBounds, 360, 360, false, rimPaint);\n\n    boolean mustInvalidate = false;\n\n    if (isSpinning) {\n        //Draw the spinning bar\n        mustInvalidate = true;\n\n        long deltaTime = (SystemClock.uptimeMillis() - lastTimeAnimated);\n        float deltaNormalized = deltaTime * spinSpeed / 1000.0f;\n\n        updateBarLength(deltaTime);\n\n        mProgress += deltaNormalized;\n        if (mProgress > 360) {\n            mProgress -= 360f;\n\n            // A full turn has been completed\n            // we run the callback with -1 in case we want to\n            // do something, like changing the color\n            runCallback(-1.0f);\n        }\n        lastTimeAnimated = SystemClock.uptimeMillis();\n\n        float from = mProgress - 90;\n        float length = barLength + barExtraLength;\n\n        if (isInEditMode()) {\n            from = 0;\n            length = 135;\n        }\n\n        canvas.drawArc(circleBounds, from, length, false,\n                barPaint);\n    } else {\n        float oldProgress = mProgress;\n\n        if (mProgress != mTargetProgress) {\n            //We smoothly increase the progress bar\n            mustInvalidate = true;\n\n            float deltaTime = (float) (SystemClock.uptimeMillis() - lastTimeAnimated) / 1000;\n            float deltaNormalized = deltaTime * spinSpeed;\n\n            mProgress = Math.min(mProgress + deltaNormalized, mTargetProgress);\n            lastTimeAnimated = SystemClock.uptimeMillis();\n        }\n\n        if (oldProgress != mProgress) {\n            runCallback();\n        }\n\n        float offset = 0.0f;\n        float progress = mProgress;\n        if (!linearProgress) {\n            float factor = 2.0f;\n            offset = (float) (1.0f - Math.pow(1.0f - mProgress / 360.0f, 2.0f * factor)) * 360.0f;\n            progress = (float) (1.0f - Math.pow(1.0f - mProgress / 360.0f, factor)) * 360.0f;\n        }\n\n        if (isInEditMode()) {\n            progress = 360;\n        }\n\n        canvas.drawArc(circleBounds, offset - 90, progress, false, barPaint);\n    }\n\n    if (mustInvalidate) {\n        invalidate();\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Sets the color of the wheel's contour\n *\n * @param rimColor the color for the wheel\n */\n", "func_signal": "public void setRimColor(int rimColor)", "code": "{\n    this.rimColor = rimColor;\n    setupPaints();\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Sets the determinate progress mode\n *\n * @param isLinear if the progress should increase linearly\n */\n", "func_signal": "public void setLinearProgress(boolean isLinear)", "code": "{\n    linearProgress = isLinear;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Set the progress to a specific value,\n * the bar will be set instantly to that value\n *\n * @param progress the progress between 0 and 1\n */\n", "func_signal": "public void setInstantProgress(float progress)", "code": "{\n    if (isSpinning) {\n        mProgress = 0.0f;\n        isSpinning = false;\n    }\n\n    if (progress > 1.0f) {\n        progress -= 1.0f;\n    } else if (progress < 0) {\n        progress = 0;\n    }\n\n    if (progress == mTargetProgress) {\n        return;\n    }\n\n    mTargetProgress = Math.min(progress * 360.0f, 360.0f);\n    mProgress = mTargetProgress;\n    lastTimeAnimated = SystemClock.uptimeMillis();\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Turn off spin mode\n */\n", "func_signal": "public void stopSpinning()", "code": "{\n    isSpinning = false;\n    mProgress = 0.0f;\n    mTargetProgress = 0.0f;\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Sets the width of the spinning bar\n *\n * @param barWidth the spinning bar width in pixels\n */\n", "func_signal": "public void setBarWidth(int barWidth)", "code": "{\n    this.barWidth = barWidth;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * The constructor for the ProgressWheel\n *\n * @param context\n * @param attrs\n */\n", "func_signal": "public MaterialProgressBar(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n//        parseAttributes(context.obtainStyledAttributes(attrs,\n//                R.styleable.ProgressWheel));\n    parseAttributes();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Set the properties of the paints we're using to\n * draw the progress wheel\n */\n", "func_signal": "private void setupPaints()", "code": "{\n    barPaint.setColor(barColor);\n    barPaint.setAntiAlias(true);\n    barPaint.setStyle(Style.STROKE);\n    barPaint.setStrokeWidth(barWidth);\n\n    rimPaint.setColor(rimColor);\n    rimPaint.setAntiAlias(true);\n    rimPaint.setStyle(Style.STROKE);\n    rimPaint.setStrokeWidth(rimWidth);\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "//----------------------------------\n//Setting up stuff\n//----------------------------------\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n    int viewWidth = circleRadius + this.getPaddingLeft() + this.getPaddingRight();\n    int viewHeight = circleRadius + this.getPaddingTop() + this.getPaddingBottom();\n\n    int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n    int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n    int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    int width;\n    int height;\n\n    //Measure Width\n    if (widthMode == MeasureSpec.EXACTLY) {\n        //Must be this size\n        width = widthSize;\n    } else if (widthMode == MeasureSpec.AT_MOST) {\n        //Can't be bigger than...\n        width = Math.min(viewWidth, widthSize);\n    } else {\n        //Be whatever you want\n        width = viewWidth;\n    }\n\n    //Measure Height\n    if (heightMode == MeasureSpec.EXACTLY || widthMode == MeasureSpec.EXACTLY) {\n        //Must be this size\n        height = heightSize;\n    } else if (heightMode == MeasureSpec.AT_MOST) {\n        //Can't be bigger than...\n        height = Math.min(viewHeight, heightSize);\n    } else {\n        //Be whatever you want\n        height = viewHeight;\n    }\n\n    setMeasuredDimension(width, height);\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Correct ImageInfo Use in {@link com.brucetoo.imagebrowse.ImageBrowseDialogFragment}\n * @param rootLocation  root view's location in screen\n * @param statusBarHeight use status bar's height if {@link com.brucetoo.imagebrowse.ImageBrowseDialogFragment#onActivityCreated(Bundle)}\n *                        no set fragment fullscreen flag...\n */\n", "func_signal": "public void correct(int[] rootLocation, int statusBarHeight)", "code": "{\n    mRect.left = mRect.left + rootLocation[0];\n    mRect.right = mRect.right + rootLocation[0];\n    mRect.top = mRect.top + rootLocation[1] - statusBarHeight;\n    mRect.bottom = mRect.bottom + rootLocation[1] - statusBarHeight;\n\n    mLocalRect.left = mLocalRect.left + rootLocation[0];\n    mLocalRect.right = mLocalRect.right + rootLocation[0];\n    mLocalRect.top = mLocalRect.top + rootLocation[1] - statusBarHeight;\n    mLocalRect.bottom = mLocalRect.bottom + rootLocation[1] - statusBarHeight;\n\n    mImgRect.left = mImgRect.left + rootLocation[0];\n    mImgRect.right = mImgRect.right + rootLocation[0];\n    mImgRect.top = mImgRect.top + rootLocation[1] - statusBarHeight;\n    mImgRect.bottom = mImgRect.bottom + rootLocation[1] - statusBarHeight;\n\n    mWidgetRect.left = mWidgetRect.left + rootLocation[0];\n    mWidgetRect.right = mWidgetRect.right + rootLocation[0];\n    mWidgetRect.top = mWidgetRect.top + rootLocation[1] - statusBarHeight;\n    mWidgetRect.bottom = mWidgetRect.bottom + rootLocation[1] - statusBarHeight;\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\imagebrowse\\widget\\ImageInfo.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Sets the radius of the wheel\n *\n * @param circleRadius the expected radius, in pixels\n */\n", "func_signal": "public void setCircleRadius(int circleRadius)", "code": "{\n    this.circleRadius = circleRadius;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "// Great way to save a view's state http://stackoverflow.com/a/7089687/1991053\n", "func_signal": "@Override\npublic Parcelable onSaveInstanceState()", "code": "{\n    Parcelable superState = super.onSaveInstanceState();\n\n    WheelSavedState ss = new WheelSavedState(superState);\n\n    // We save everything that can be changed at runtime\n    ss.mProgress = this.mProgress;\n    ss.mTargetProgress = this.mTargetProgress;\n    ss.isSpinning = this.isSpinning;\n    ss.spinSpeed = this.spinSpeed;\n    ss.barWidth = this.barWidth;\n    ss.barColor = this.barColor;\n    ss.rimWidth = this.rimWidth;\n    ss.rimColor = this.rimColor;\n    ss.circleRadius = this.circleRadius;\n    ss.linearProgress = this.linearProgress;\n    ss.fillRadius = this.fillRadius;\n\n    return ss;\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Sets the color of the spinning bar\n *\n * @param barColor The spinning bar color\n */\n", "func_signal": "public void setBarColor(int barColor)", "code": "{\n    this.barColor = barColor;\n    setupPaints();\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Sets the width of the wheel's contour\n *\n * @param rimWidth the width in pixels\n */\n", "func_signal": "public void setRimWidth(int rimWidth)", "code": "{\n    this.rimWidth = rimWidth;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Reset the count (in increment mode)\n */\n", "func_signal": "public void resetCount()", "code": "{\n    mProgress = 0.0f;\n    mTargetProgress = 0.0f;\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Parse the attributes passed to the view from the XML\n */\n", "func_signal": "private void parseAttributes()", "code": "{\n    // We transform the default values from DIP to pixels\n    DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();\n    barWidth = dpToPx(barWidth,getResources());\n    rimWidth = dpToPx(rimWidth,getResources());\n    circleRadius = dpToPx(circleRadius,getResources());\n    fillRadius = false;\n\n    float baseSpinSpeed = spinSpeed / 360.0f;\n    spinSpeed = baseSpinSpeed * 360;\n\n    //barSpinCycleTime = barSpinCycleTime;\n\n//        barColor = a.getColor(R.styleable.ProgressWheel_matProg_barColor, barColor);\n//\n//        rimColor = a.getColor(R.styleable.ProgressWheel_matProg_rimColor, rimColor);\n\n    linearProgress = false;\n\n  //  if (a.getBoolean(R.styleable.ProgressWheel_matProg_progressIndeterminate, false)) {\n        spin();\n  //  }\n\n    // Recycle\n//        a.recycle();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "/**\n * Puts the view on spin mode\n */\n", "func_signal": "public void spin()", "code": "{\n    lastTimeAnimated = SystemClock.uptimeMillis();\n    isSpinning = true;\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\brucetoo\\activityanimation\\widget\\MaterialProgressBar.java", "repo_name": "brucetoo/ImageBrowse", "stars": 320, "license": "None", "language": "java", "size": 23645}
{"docstring": "// TODO: uncomment\n// public DirectMessage sendDirectMessage(String text) throws WeiboException\n// {\n// return weibo.sendDirectMessage(this.getName(), text);\n// }\n", "func_signal": "public static List<User> constructUsers(Response res, Weibo weibo)\n\t\tthrows HttpException", "code": "{\n\tDocument doc = res.asDocument();\n\tif (isRootNodeNilClasses(doc)) {\n\t\treturn new ArrayList<User>(0);\n\t} else {\n\t\ttry {\n\t\t\tensureRootNodeNameIs(\"users\", doc);\n\t\t\t// NodeList list =\n\t\t\t// doc.getDocumentElement().getElementsByTagName(\n\t\t\t// \"user\");\n\t\t\t// int size = list.getLength();\n\t\t\t// List<User> users = new ArrayList<User>(size);\n\t\t\t// for (int i = 0; i < size; i++) {\n\t\t\t// users.add(new User(res, (Element) list.item(i), weibo));\n\t\t\t// }\n\n\t\t\t// \u53bb\u9664\u6389\u5d4c\u5957\u7684bug\n\t\t\tNodeList list = doc.getDocumentElement().getChildNodes();\n\t\t\tList<User> users = new ArrayList<User>(list.getLength());\n\t\t\tNode node;\n\t\t\tfor (int i = 0; i < list.getLength(); i++) {\n\t\t\t\tnode = list.item(i);\n\t\t\t\tif (node.getNodeName().equals(\"user\")) {\n\t\t\t\t\tusers.add(new User(res, (Element) node, weibo));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn users;\n\t\t} catch (HttpException te) {\n\t\t\tif (isRootNodeNilClasses(doc)) {\n\t\t\t\treturn new ArrayList<User>(0);\n\t\t\t} else {\n\t\t\t\tthrow te;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\User.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/* modify by sycheng add \"\".equals(str) */\n", "func_signal": "protected static String getChildString(String str, Element elem)", "code": "{\n\tString str2 = getTextContent(str, elem);\n\tif (null == str2 || \"\".equals(str2) || \"null\".equals(str)) {\n\t\treturn \"\";\n\t} else {\n\t\treturn String.valueOf(str2);\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\WeiboResponse.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// for HasFavorite interface\n", "func_signal": "public void doFavorite(String action, String id)", "code": "{\n\tif (mFavTask != null\n\t\t\t&& mFavTask.getStatus() == GenericTask.Status.RUNNING) {\n\t\treturn;\n\t} else {\n\t\tif (!TextUtils.isEmpty(id)) {\n\t\t\tLog.d(TAG, \"doFavorite.\");\n\t\t\tmFavTask = new TweetCommonTask.FavoriteTask(this);\n\t\t\tmFavTask.setListener(mFavTaskListener);\n\n\t\t\tTaskParams param = new TaskParams();\n\t\t\tparam.put(\"action\", action);\n\t\t\tparam.put(\"id\", id);\n\t\t\tmFavTask.execute(param);\n\t\t}\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\StatusActivity.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// FIXME: \u8fd9\u91cc\u7528\u7684\u662f\u4e00\u4e2a\u4e13\u6709\u7684ugly\u5b9e\u73b0\n", "func_signal": "public String getString(String name) throws Exception", "code": "{\n\tPattern p = Pattern\n\t\t\t.compile(String.format(\"<%s>(.*?)</%s>\", name, name));\n\tMatcher m = p.matcher(this.str);\n\tif (m.find()) {\n\t\treturn m.group(1);\n\t} else {\n\t\tthrow new Exception(String.format(\"<%s> value not found\", name));\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\RefuseError.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// factory\n", "func_signal": "public static MyActivityFlipper create(Activity activity)", "code": "{\n\tMyActivityFlipper flipper = new MyActivityFlipper(activity);\n\tflipper.addActivity(BrowseActivity.class);\n\tflipper.addActivity(TwitterActivity.class);\n\tflipper.addActivity(MentionActivity.class);\n\n\tflipper.setToastResource(new int[] { R.drawable.point_left,\n\t\t\tR.drawable.point_center, R.drawable.point_right });\n\n\tflipper.setInAnimation(R.anim.push_left_in);\n\tflipper.setOutAnimation(R.anim.push_left_out);\n\tflipper.setPreviousInAnimation(R.anim.push_right_in);\n\tflipper.setPreviousOutAnimation(R.anim.push_right_out);\n\treturn flipper;\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\ui\\module\\MyActivityFlipper.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// Handle \"yyyy-MM-dd'T'HH:mm:ss.SSS\" from sqlite\n", "func_signal": "public static final Date parseDateTimeFromSqlite(String dateString)", "code": "{\n\ttry {\n\t\tLog.v(TAG, String.format(\"in parseDateTime, dateString=%s\",\n\t\t\t\tdateString));\n\t\treturn TwitterDatabase.DB_DATE_FORMATTER.parse(dateString);\n\t} catch (ParseException e) {\n\t\tLog.w(TAG, \"Could not parse Twitter date string: \" + dateString);\n\t\treturn null;\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\util\\DateTimeHelper.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// if exists\n", "func_signal": "public static Intent createIntent(Tweet tweet)", "code": "{\n\t\tIntent intent = new Intent(LAUNCH_ACTION);\n\t\tintent.putExtra(EXTRA_TWEET, tweet);\n\t\treturn intent;\n\t}", "path": "src\\com\\ch_linghu\\fanfoudroid\\StatusActivity.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * Get Database\n * \n * @param context\n * @return\n */\n", "func_signal": "public static synchronized FanDatabase getInstance(Context context)", "code": "{\n\tif (null == sInstance) {\n\t\tsInstance = new FanDatabase(context);\n\t}\n\treturn sInstance;\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\db2\\FanDatabase.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * Returns the url of the user\n * \n * @return the url of the user\n */\n", "func_signal": "public URL getURL()", "code": "{\n\ttry {\n\t\treturn new URL(url);\n\t} catch (MalformedURLException ex) {\n\t\treturn null;\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\User.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// TODO:\u589e\u52a0\u4ece\u6e38\u6807\u89e3\u6790User\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u548cdata\u91ccUser\u8f6c\u6362\u4e00\u6761\u6570\u636e\n", "func_signal": "public static User parseUser(Cursor cursor)", "code": "{\n\tif (null == cursor || 0 == cursor.getCount() || cursor.getCount() > 1) {\n\t\tLog.w(\"User.ParseUser\",\n\t\t\t\t\"Cann't parse Cursor, bacause cursor is null or empty.\");\n\t}\n\tcursor.moveToFirst();\n\tUser u = new User();\n\tu.id = cursor.getString(cursor.getColumnIndex(UserInfoTable._ID));\n\tu.name = cursor.getString(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_USER_NAME));\n\tu.screenName = cursor.getString(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_USER_SCREEN_NAME));\n\tu.location = cursor.getString(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_LOCALTION));\n\tu.description = cursor.getString(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_DESCRIPTION));\n\tu.profileImageUrl = cursor.getString(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_PROFILE_IMAGE_URL));\n\tu.url = cursor\n\t\t\t.getString(cursor.getColumnIndex(UserInfoTable.FIELD_URL));\n\tu.isProtected = (0 == cursor.getInt(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_PROTECTED))) ? false : true;\n\tu.followersCount = cursor.getInt(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_FOLLOWERS_COUNT));\n\n\tu.friendsCount = cursor.getInt(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_FRIENDS_COUNT));\n\tu.favouritesCount = cursor.getInt(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_FAVORITES_COUNT));\n\tu.statusesCount = cursor.getInt(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_STATUSES_COUNT));\n\tu.following = (0 == cursor.getInt(cursor\n\t\t\t.getColumnIndex(UserInfoTable.FIELD_FOLLOWING))) ? false : true;\n\n\ttry {\n\t\tString createAtStr = cursor.getString(cursor\n\t\t\t\t.getColumnIndex(MessageTable.FIELD_CREATED_AT));\n\t\tif (createAtStr != null) {\n\t\t\tu.createdAt = TwitterDatabase.DB_DATE_FORMATTER\n\t\t\t\t\t.parse(createAtStr);\n\t\t}\n\n\t} catch (ParseException e) {\n\t\tLog.w(\"User\", \"Invalid created at data.\");\n\t}\n\treturn u;\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\User.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * \u83b7\u5f97\u7167\u7247\u9875\u9762\u4e2d\u7684\u7167\u7247\u94fe\u63a5\n * \n * @param pageHtml\n *            \u7167\u7247\u9875\u9762\u6587\u672c\n * @return \u7167\u7247\u94fe\u63a5\uff0c\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56denull\n */\n", "func_signal": "public static String getPhotoURL(String pageHtml)", "code": "{\n\tMatcher m = PHOTO_SRC_LINK.matcher(pageHtml);\n\tif (m.find()) {\n\t\treturn m.group(1);\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\StatusActivity.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/* modify by sycheng add \"\".equals(str) */\n", "func_signal": "protected static int getChildInt(String str, Element elem)", "code": "{\n\tString str2 = getTextContent(str, elem);\n\tif (null == str2 || \"\".equals(str2) || \"null\".equals(str)) {\n\t\treturn -1;\n\t} else {\n\t\treturn Integer.valueOf(str2);\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\WeiboResponse.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// sub menu\n// protected void createInsertPhotoDialog() {\n//\n// final CharSequence[] items = {\n// getString(R.string.write_label_take_a_picture),\n// getString(R.string.write_label_choose_a_picture) };\n//\n// AlertDialog.Builder builder = new AlertDialog.Builder(this);\n// builder.setTitle(getString(R.string.write_label_insert_picture));\n// builder.setItems(items, new DialogInterface.OnClickListener() {\n// public void onClick(DialogInterface dialog, int item) {\n// // Toast.makeText(getApplicationContext(), items[item],\n// // Toast.LENGTH_SHORT).show();\n// switch (item) {\n// case 0:\n// openImageCaptureMenu();\n// break;\n// case 1:\n// openPhotoLibraryMenu();\n// }\n// }\n// });\n// AlertDialog alert = builder.create();\n// alert.show();\n// }\n", "func_signal": "@Override\nprotected boolean _onCreate(Bundle savedInstanceState)", "code": "{\n\tLog.d(TAG, \"onCreate.\");\n\tif (super._onCreate(savedInstanceState)) {\n\t\t// init View\n\t\tsetContentView(R.layout.write_dm);\n\t\tmNavbar = new NavBar(NavBar.HEADER_STYLE_WRITE, this);\n\n\t\t// Intent & Action & Extras\n\t\tIntent intent = getIntent();\n\t\tBundle extras = intent.getExtras();\n\n\t\t// View\n\t\tmProgressText = (TextView) findViewById(R.id.progress_text);\n\t\tmTweetEditText = (EditText) findViewById(R.id.tweet_edit);\n\n\t\tTwitterDatabase db = getDb();\n\n\t\t// FIXME: \u6682\u65f6\u53d6\u6d88\u6536\u4ef6\u4eba\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\n\t\t// FIXME: \u53ef\u6839\u636e\u76ee\u524d\u4ee5\u540e\u5185\u5bb9\u91cd\u65b0\u5b8c\u6210\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\n\t\t// mToEdit = (AutoCompleteTextView) findViewById(R.id.to_edit);\n\t\t// Cursor cursor = db.getFollowerUsernames(\"\");\n\t\t// // startManagingCursor(cursor);\n\t\t// mFriendsAdapter = new FriendsAdapter(this, cursor);\n\t\t// mToEdit.setAdapter(mFriendsAdapter);\n\n\t\tmToEdit = (TextView) findViewById(R.id.to_edit);\n\n\t\t// Update status\n\t\tmTweetEdit = new TweetEdit(mTweetEditText,\n\t\t\t\t(TextView) findViewById(R.id.chars_text));\n\t\tmTweetEdit.setOnKeyListener(editEnterHandler);\n\t\tmTweetEdit.addTextChangedListener(new MyTextWatcher(\n\t\t\t\tWriteDmActivity.this));\n\n\t\t// With extras\n\t\tif (extras != null) {\n\t\t\tString to = extras.getString(EXTRA_USER);\n\t\t\tif (!TextUtils.isEmpty(to)) {\n\t\t\t\tmToEdit.setText(to);\n\t\t\t\tmTweetEdit.requestFocus();\n\t\t\t}\n\t\t}\n\n\t\tView.OnClickListener sendListenner = new View.OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tdoSend();\n\t\t\t}\n\t\t};\n\n\t\tmSendButton = (Button) findViewById(R.id.top_send_btn);\n\t\tmSendButton.setOnClickListener(sendListenner);\n\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\WriteDmActivity.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * \u83b7\u5f97\u6d88\u606f\u4e2d\u7684\u7167\u7247\u9875\u9762\u94fe\u63a5\n * \n * @param tweet\n *            \u6d88\u606f\n * @param size\n *            \u7167\u7247\u5c3a\u5bf8\n * @return \u7167\u7247\u9875\u9762\u7684\u94fe\u63a5\uff0c\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56denull\n */\n", "func_signal": "public static String getPhotoPageLink(String text, String size)", "code": "{\n\tMatcher m = PHOTO_PAGE_LINK.matcher(text);\n\tif (m.find()) {\n\t\tString THUMBNAIL = TwitterApplication.mContext\n\t\t\t\t.getString(R.string.pref_photo_preview_type_thumbnail);\n\t\tString MIDDLE = TwitterApplication.mContext\n\t\t\t\t.getString(R.string.pref_photo_preview_type_middle);\n\t\tString ORIGINAL = TwitterApplication.mContext\n\t\t\t\t.getString(R.string.pref_photo_preview_type_original);\n\t\tif (size.equals(THUMBNAIL) || size.equals(MIDDLE)) {\n\t\t\treturn \"http://m.fanfou.com\" + m.group(1);\n\t\t} else if (size.endsWith(ORIGINAL)) {\n\t\t\treturn m.group(0);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\StatusActivity.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// Create All tables\n", "func_signal": "private static void createAllTables(SQLiteDatabase db)", "code": "{\n\tdb.execSQL(StatusesTable.getCreateSQL());\n\tdb.execSQL(StatusesPropertyTable.getCreateSQL());\n\tdb.execSQL(UserTable.getCreateSQL());\n\tdb.execSQL(DirectMessageTable.getCreateSQL());\n\tdb.execSQL(FollowRelationshipTable.getCreateSQL());\n\tdb.execSQL(TrendTable.getCreateSQL());\n\tdb.execSQL(SavedSearchTable.getCreateSQL());\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\db2\\FanDatabase.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * Close Database\n */\n", "func_signal": "public void close()", "code": "{\n\tif (null != sInstance) {\n\t\tmOpenHelper.close();\n\t\tsInstance = null;\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\db2\\FanDatabase.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * \n * @param res\n * @return\n * @throws HttpException\n */\n", "func_signal": "public static UserWapper constructWapperUsers(Response res)\n\t\tthrows HttpException", "code": "{\n\tJSONObject jsonUsers = res.asJSONObject(); // asJSONArray();\n\ttry {\n\t\tJSONArray user = jsonUsers.getJSONArray(\"users\");\n\t\tint size = user.length();\n\t\tList<User> users = new ArrayList<User>(size);\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tusers.add(new User(user.getJSONObject(i)));\n\t\t}\n\t\tlong previousCursor = jsonUsers.getLong(\"previous_curosr\");\n\t\tlong nextCursor = jsonUsers.getLong(\"next_cursor\");\n\t\tif (nextCursor == -1) { // \u517c\u5bb9\u4e0d\u540c\u6807\u7b7e\u540d\u79f0\n\t\t\tnextCursor = jsonUsers.getLong(\"nextCursor\");\n\t\t}\n\t\treturn new UserWapper(users, previousCursor, nextCursor);\n\t} catch (JSONException jsone) {\n\t\tthrow new HttpException(jsone);\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\User.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * Get Database Connection\n * \n * @param writeable\n * @return\n */\n", "func_signal": "public SQLiteDatabase getDb(boolean writeable)", "code": "{\n\tif (writeable) {\n\t\treturn mOpenHelper.getWritableDatabase();\n\t} else {\n\t\treturn mOpenHelper.getReadableDatabase();\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\db2\\FanDatabase.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * Returns the profile image url of the user\n * \n * @return the profile image url of the user\n */\n", "func_signal": "public URL getProfileImageURL()", "code": "{\n\ttry {\n\t\treturn new URL(profileImageUrl);\n\t} catch (MalformedURLException ex) {\n\t\treturn null;\n\t}\n}", "path": "src\\com\\ch_linghu\\fanfoudroid\\fanfou\\User.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "// TODO: Z -> z ?\n", "func_signal": "public static final Date parseDateTime(String dateString)", "code": "{\n\t\ttry {\n\t\t\tLog.v(TAG, String.format(\"in parseDateTime, dateString=%s\",\n\t\t\t\t\tdateString));\n\t\t\treturn TWITTER_DATE_FORMATTER.parse(dateString);\n\t\t} catch (ParseException e) {\n\t\t\tLog.w(TAG, \"Could not parse Twitter date string: \" + dateString);\n\t\t\treturn null;\n\t\t}\n\t}", "path": "src\\com\\ch_linghu\\fanfoudroid\\util\\DateTimeHelper.java", "repo_name": "fanfoudroid/fanfoudroid", "stars": 366, "license": "None", "language": "java", "size": 6862}
{"docstring": "/**\n * \u5c06\u6587\u4ef6\u7f16\u7801\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\n * @param uploadFile\n * @return\n */\n", "func_signal": "public static final String encode(UploadFile uploadFile)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(uploadFile.getFileType());\n    sb.append(SPERATOR);\n    sb.append(encode(uploadFile.getContent()));\n    return sb.toString();\n}", "path": "rop\\src\\main\\java\\com\\rop\\request\\UploadFileUtils.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u5bf9\u767b\u5f55\u8bf7\u6c42\u8fdb\u884c\u8ba4\u8bc1,\u5728\u5b50\u7c7b\u7684{@link #logon(com.rop.RopRequest)}\u8c03\u7528.\n * @param request\n * @return\n */\n", "func_signal": "protected AuthResponse  authentication(T request)", "code": "{\n    String appKey = request.getRopRequestContext().getAppKey();\n    AuthenticationManager authenticationManager = getAuthenticationManager(appKey);\n    AuthRequest authRequest = toAuthRequest(request);\n    return authenticationManager.authenticate(authRequest);\n}", "path": "rop\\src\\main\\java\\com\\rop\\session\\AuthenticationService.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u83b7\u53d6ropRequest\u5bf9\u8c61\u7684\u5bf9\u5e94\u7684\u53c2\u6570\u5217\u8868\n *\n * @param ropRequest\n * @param mf\n * @return\n */\n", "func_signal": "private Map<String, String> toParamValueMap(RopRequest ropRequest, MessageFormat mf)", "code": "{\n    List<Field> fields = requestAllFields.get(ropRequest.getClass());\n    Map<String, String> params = new HashMap<String, String>();\n    for (Field field : fields) {\n        RopConverter convertor = getConvertor(field.getType());\n        Object fieldValue = ReflectionUtils.getField(field, ropRequest);\n        if (fieldValue != null) {\n            if (convertor != null) {//\u6709\u5bf9\u5e94\u8f6c\u6362\u5668\n                String strParamValue = (String) convertor.unconvert(fieldValue);\n                params.put(field.getName(), strParamValue);\n            } else if (field.getType().isAnnotationPresent(XmlRootElement.class) ||\n                    field.getType().isAnnotationPresent(XmlType.class)) {\n                String message = MessageMarshallerUtils.getMessage(fieldValue, mf);\n                params.put(field.getName(), message);\n            } else {\n                params.put(field.getName(), fieldValue.toString());\n            }\n        }\n    }\n    return params;\n}", "path": "rop\\src\\main\\java\\com\\rop\\client\\DefaultRopClient.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u5bf9\u670d\u52a1\u540d\u8fdb\u884c\u6807\u51c6\u5316\u5904\u7406\uff1a\u5982book.upload\u8f6c\u6362\u4e3abook-upload\uff0c\n *\n * @param method\n * @return\n */\n", "func_signal": "protected String transform(String method)", "code": "{\n    if(method != null){\n        method = method.replace(\".\", \"-\");\n        return method;\n    }else{\n        return \"LACK_METHOD\";\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\response\\ErrorResponse.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u5c06{@link RopRequest}\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n *\n * @param object\n * @param format\n * @return\n */\n", "func_signal": "public static String getMessage(Object object, MessageFormat format)", "code": "{\n    if (object == null) {\n        return \"NONE MSG\";\n    }\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    try {\n        if (format == MessageFormat.json) {\n            JsonGenerator jsonGenerator = jsonObjectMapper.getJsonFactory().createJsonGenerator(bos, JsonEncoding.UTF8);\n            jsonObjectMapper.writeValue(jsonGenerator, object);\n        } else {\n            xmlRopResponseMarshaller.marshaller(object, bos);\n        }\n        return bos.toString(UTF_8);\n    } catch (Throwable e) {\n        throw new RopException(e);\n    } finally {\n        try {\n            bos.close();\n        } catch (IOException ee) {\n            logger.error(\"\u6d88\u606f\u8f6c\u6362\u5f02\u5e38\", ee);\n        }\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\marshaller\\MessageMarshallerUtils.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u83b7\u53d6ropRequest\u5bf9\u8c61\u7684\u5bf9\u5e94\u7684\u53c2\u6570\u5217\u8868\n *\n * @param ropRequest\n * @param mf\n * @return\n */\n", "func_signal": "private Map<String, String> toParamValueMap(RopRequest ropRequest, MessageFormat mf)", "code": "{\n    List<Field> fields = requestAllFields.get(ropRequest.getClass());\n    Map<String, String> params = new HashMap<String, String>();\n    for (Field field : fields) {\n        RopConverter convertor = getConvertor(field.getType());\n        Object fieldValue = ReflectionUtils.getField(field, ropRequest);\n        if (fieldValue != null) {\n            if (convertor != null) {//\u6709\u5bf9\u5e94\u8f6c\u6362\u5668\n                String strParamValue = (String) convertor.unconvert(fieldValue);\n                params.put(field.getName(), strParamValue);\n            } else if (field.getType().isAnnotationPresent(XmlRootElement.class) ||\n                    field.getType().isAnnotationPresent(XmlType.class)) {\n                String message = MessageMarshallerUtils.getMessage(fieldValue, mf);\n                params.put(field.getName(), message);\n            } else {\n                params.put(field.getName(), fieldValue.toString());\n            }\n        }\n    }\n    return params;\n}", "path": "rop\\src\\main\\java\\com\\rop\\client\\DefaultRopClient.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u5728\u6570\u636e\u7ed1\u5b9a\u540e\uff0c\u670d\u52a1\u65b9\u6cd5\u8c03\u7528\u524d\u6267\u884c\u8be5\u62e6\u622a\u65b9\u6cd5\n *\n * @param ropRequestContext\n */\n", "func_signal": "public void beforeService(RopRequestContext ropRequestContext)", "code": "{\n    System.out.println(\"beforeService ...\");\n\n    if (\"jhonson\".equals(ropRequestContext.getParamValue(\"userName\"))) {\n        InterceptorResponse response = new InterceptorResponse();\n        response.setTestField(\"the userName can't be jhonson!\");\n        //\u8bbe\u7f6e\u4e86RopResponse\u540e\uff0c\u540e\u7eed\u7684\u670d\u52a1\u5c06\u4e0d\u6267\u884c\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2aRopResponse\u54cd\u5e94\n        ropRequestContext.setRopResponse(response);\n    }\n}", "path": "rop-sample\\src\\main\\java\\com\\rop\\sample\\ReservedUserNameInterceptor.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u5c06\u8bf7\u6c42\u5bf9\u8c61\u8f6c\u6362\u4e3aString\n *\n * @param allParams\n * @return\n */\n", "func_signal": "public static String asUrlString(Map<String,String> allParams)", "code": "{\n    StringBuilder sb = new StringBuilder(256);\n    boolean first = true;\n    for (Map.Entry<String, String> entry : allParams.entrySet()) {\n        if (!first) {\n            sb.append(\"&\");\n        }\n        first = false;\n        sb.append(entry.getKey());\n        sb.append(\"=\");\n        sb.append(entry.getValue());\n    }\n    return sb.toString();\n}", "path": "rop\\src\\main\\java\\com\\rop\\marshaller\\MessageMarshallerUtils.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u521b\u5efa\u5ba2\u6237\u7aef\u5bf9\u8c61\n * @param appKey\n * @param secret\n */\n", "func_signal": "public RopSampleClient(String appKey,String secret)", "code": "{\n    ropClient = new DefaultRopClient(SERVER_URL, appKey, secret);\n    ropClient.setFormatParamName(\"messageFormat\");\n    ropClient.addRopConvertor(new TelephoneConverter());\n}", "path": "rop-sample\\src\\main\\java\\com\\rop\\sample\\client\\RopSampleClient.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u767b\u5f55\u7cfb\u7edf\n *\n * @return\n */\n", "func_signal": "public String logon(String userName, String password)", "code": "{\n    LogonRequest ropRequest = new LogonRequest();\n    ropRequest.setUserName(\"tomson\");\n    ropRequest.setPassword(\"123456\");\n    CompositeResponse response = ropClient.buildClientRequest().get(ropRequest, LogonResponse.class, \"user.logon\", \"1.0\");\n    String sessionId = ((LogonResponse) response.getSuccessResponse()).getSessionId();\n    ropClient.setSessionId(sessionId);\n    return sessionId;\n}", "path": "rop-sample\\src\\main\\java\\com\\rop\\sample\\client\\RopSampleClient.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u6839\u636e\u6587\u4ef6\u6784\u9020\n * @param file\n */\n", "func_signal": "public UploadFile(File file)", "code": "{\n    try {\n        this.content = FileCopyUtils.copyToByteArray(file);\n        this.fileType = file.getName().substring(file.getName().lastIndexOf('.')+1);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\request\\UploadFile.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u7684\u7c7b\u578b\n *\n * @param encodeFile\n * @return\n */\n", "func_signal": "public static final String getFileType(String encodeFile)", "code": "{\n    int speratorIndex = encodeFile.indexOf(SPERATOR);\n    if (speratorIndex > -1) {\n        String fileType = encodeFile.substring(0, speratorIndex);\n        return fileType.toLowerCase();\n    } else {\n        throw new IllegalUploadFileFormatException(\"\u6587\u4ef6\u683c\u5f0f\u4e0d\u5bf9\uff0c\u6b63\u786e\u683c\u5f0f\u4e3a\uff1a<\u6587\u4ef6\u683c\u5f0f>@<\u6587\u4ef6\u5185\u5bb9>\");\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\request\\UploadFileUtils.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u5c06\u8bf7\u6c42\u5bf9\u8c61\u8f6c\u6362\u4e3aString\n *\n * @param request\n * @param format\n * @return\n */\n", "func_signal": "public static String getMessage(RopRequest request, MessageFormat format)", "code": "{\n    try {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n        if (format == MessageFormat.json) {\n            if (request.getRopRequestContext() != null) {\n                jsonObjectMapper.writeValue(bos, request.getRopRequestContext().getAllParams());\n            } else {\n                return \"\";\n            }\n        } else {\n            if (request.getRopRequestContext() != null) {\n                xmlObjectMapper.writeValue(bos, request.getRopRequestContext().getAllParams());\n            } else {\n                return \"\";\n            }\n        }\n        return bos.toString(UTF_8);\n    } catch (Exception e) {\n        throw new RopException(e);\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\marshaller\\MessageMarshallerUtils.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u6700\u7b80\u5355\u7684\u914d\u7f6e\n *\n * @param serviceRouter\n */\n", "func_signal": "@Test\npublic void testSimplestConfig()", "code": "{\n    assertNotNull(serviceRouter);\n    RopContext ropContext = serviceRouter.getRopContext();\n    assertNotNull(ropContext);\n    assertTrue(ropContext.isSignEnable());\n    assertNotNull(serviceRouter.getApplicationContext());\n    assertEquals(serviceRouter.getExtErrorBasename(), \"i18n/rop/ropError\");\n    assertEquals(serviceRouter.getListeners().size(), 0);\n    assertEquals(serviceRouter.getInterceptors().size(), 0);\n    assertNotNull(serviceRouter.getFormattingConversionService());\n    assertFalse(serviceRouter.getFormattingConversionService().canConvert(String.class, Telephone.class));\n    assertTrue(serviceRouter.isSignEnable());\n    assertNotNull(serviceRouter.getSecurityManager());\n    assertNotNull(serviceRouter.getRopEventMulticaster());\n    assertNotNull(serviceRouter.getThreadPoolExecutor());\n    assertEquals(serviceRouter.getThreadPoolExecutor().getCorePoolSize(), 200);\n    assertEquals(serviceRouter.getThreadPoolExecutor().getMaximumPoolSize(),500);\n    assertEquals(serviceRouter.getThreadPoolExecutor().getKeepAliveTime(TimeUnit.SECONDS),5 * 60);\n}", "path": "rop-sample\\src\\test\\java\\com\\rop\\config\\RopNamespaceHandlerIT.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u8c03\u7528ROP\u670d\u52a1\u65b9\u6cd5\n *\n * @param ropRequest\n * @return\n */\n", "func_signal": "public Object invokeServiceMethod(RopRequest ropRequest)", "code": "{\n    try {\n        RopRequestContext ropRequestContext = ropRequest.getRopRequestContext();\n        //\u5206\u6790\u4e0a\u4e0b\u6587\u4e2d\u7684\u9519\u8bef\n        ServiceMethodHandler serviceMethodHandler = ropRequestContext.getServiceMethodHandler();\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"\u6267\u884c\" + serviceMethodHandler.getHandler().getClass() +\n                    \".\" + serviceMethodHandler.getHandlerMethod().getName());\n        }\n        if (serviceMethodHandler.isHandlerMethodWithParameter()) {\n            return serviceMethodHandler.getHandlerMethod().invoke(\n                    serviceMethodHandler.getHandler(),ropRequest);\n        } else {\n            return serviceMethodHandler.getHandlerMethod().invoke(serviceMethodHandler.getHandler());\n        }\n    } catch (Throwable e) {\n        if (e instanceof InvocationTargetException) {\n            InvocationTargetException inve = (InvocationTargetException) e;\n            throw new RuntimeException(inve.getTargetException());\n        } else {\n            throw new RuntimeException(e);\n        }\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\impl\\AnnotationServiceMethodAdapter.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * @param subErrorCode \u5b50\u9519\u8bef\u4ee3\u7801\n * @param subErrorKey  \u5b50\u9519\u8bef\u4fe1\u606f\u952e\n * @param locale       \u672c\u5730\u5316\n * @param params       \u672c\u5730\u5316\u6d88\u606f\u53c2\u6570\n * @return\n */\n", "func_signal": "public static SubError getSubError(String subErrorCode, String subErrorKey, Locale locale, Object... params)", "code": "{\n    try {\n        String parsedSubErrorMessage = messageSourceAccessor.getMessage(subErrorKey, params, locale);\n        return new SubError(subErrorCode, parsedSubErrorMessage);\n    } catch (NoSuchMessageException e) {\n        logger.error(\"\u4e0d\u5b58\u5728\u5bf9\u5e94\u7684\u9519\u8bef\u952e\uff1a{}\uff0c\u8bf7\u68c0\u67e5\u662f\u5426\u6b63\u786e\u914d\u7f6e\u4e86\u5e94\u7528\u7684\u9519\u8bef\u8d44\u6e90\uff0c\" +\n                \"\u9ed8\u8ba4\u4f4d\u7f6e\uff1ai18n/rop/ropError\", subErrorCode);\n        throw e;\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\security\\SubErrors.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u5bf9\u8bf7\u6c42\u53c2\u6570\u8fdb\u884c\u7b7e\u540d\n *\n * @param ropRequestClass\n * @param appSecret\n * @param form\n * @return\n */\n", "func_signal": "private String sign(Class<?> ropRequestClass, String appSecret, Map<String, String> form)", "code": "{\n    List<String> ignoreFieldNames = requestIgnoreSignFieldNames.get(ropRequestClass);\n    return RopUtils.sign(form, ignoreFieldNames, appSecret);\n}", "path": "rop\\src\\main\\java\\com\\rop\\client\\DefaultRopClient.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * @param fileTypes\n * @param maxSize \u6700\u5927\u6587\u4ef6\u5927\u5c0f\uff0c\u5355\u4f4d\u4e3ak\n */\n", "func_signal": "public DefaultFileUploadController(List<String> fileTypes, int maxSize)", "code": "{\n    ArrayList<String> tempFileTypes = new ArrayList<String>(fileTypes.size());\n    for (String fileType : fileTypes) {\n        tempFileTypes.add(fileType.toLowerCase());\n    }\n    this.fileTypes = tempFileTypes;\n    this.maxSize = maxSize;\n}", "path": "rop\\src\\main\\java\\com\\rop\\security\\DefaultFileUploadController.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u7684\u5b57\u8282\u6570\u7ec4\n *\n * @param encodeFile\n * @return\n */\n", "func_signal": "public static final byte[] decode(String encodeFile)", "code": "{\n    int speratorIndex = encodeFile.indexOf(SPERATOR);\n    if (speratorIndex > -1) {\n        String content = encodeFile.substring(speratorIndex + 1);\n        return Base64.decodeBase64(content);\n    } else {\n        throw new IllegalUploadFileFormatException(\"\u6587\u4ef6\u683c\u5f0f\u4e0d\u5bf9\uff0c\u6b63\u786e\u683c\u5f0f\u4e3a\uff1a<\u6587\u4ef6\u683c\u5f0f>@<\u6587\u4ef6\u5185\u5bb9>\");\n    }\n}", "path": "rop\\src\\main\\java\\com\\rop\\request\\UploadFileUtils.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "/**\n * \u83b7\u53d6ropRequest\u5bf9\u5e94\u7684\u53c2\u6570\u540d\u5217\u8868\n *\n * @param ropRequest\n * @param mf\n * @return\n */\n", "func_signal": "private Map<String, String> getParamFields(RopRequest ropRequest, MessageFormat mf)", "code": "{\n    if (!requestAllFields.containsKey(ropRequest.getClass())) {\n        parseRopRequestClass(ropRequest);\n    }\n    return toParamValueMap(ropRequest, mf);\n}", "path": "rop\\src\\main\\java\\com\\rop\\client\\DefaultRopClient.java", "repo_name": "itstamen/rop", "stars": 424, "license": "None", "language": "java", "size": 20019}
{"docstring": "// =============================================================================================\n// Overridden methods\n// ==\n", "func_signal": "@Override\nprotected void afterLayoutInflated(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super.afterLayoutInflated(context, attrs, defStyle);\n\n    final CharSequence completionHint;\n    final int completionThreshold;\n    final int popupBackground;\n    final int dropDownWidth;\n    final int dropDownHeight;\n\n    if (attrs == null) {\n        completionHint = \"\";\n        completionThreshold = 1;\n        dropDownHeight = ViewGroup.LayoutParams.WRAP_CONTENT;\n        dropDownWidth = ViewGroup.LayoutParams.WRAP_CONTENT;\n        popupBackground = getDefaultPopupBackgroundResId();\n    } else {\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.FloatingLabelAutoCompleteTextView, defStyle, 0);\n        completionHint = a.getText(R.styleable.FloatingLabelAutoCompleteTextView_android_completionHint);\n        completionThreshold = a.getInt(R.styleable.FloatingLabelAutoCompleteTextView_android_completionThreshold, 1);\n        dropDownHeight = a.getDimensionPixelSize(R.styleable.FloatingLabelAutoCompleteTextView_android_dropDownHeight, ViewGroup.LayoutParams.WRAP_CONTENT);\n        dropDownWidth = a.getDimensionPixelSize(R.styleable.FloatingLabelAutoCompleteTextView_android_dropDownWidth, ViewGroup.LayoutParams.WRAP_CONTENT);\n        popupBackground = a.getResourceId(R.styleable.FloatingLabelAutoCompleteTextView_android_popupBackground, getDefaultPopupBackgroundResId());\n        a.recycle();\n    }\n\n    final AutoCompleteTextView inputWidget = getInputWidget();\n    inputWidget.setCompletionHint(completionHint);\n    inputWidget.setThreshold(completionThreshold);\n    inputWidget.setDropDownWidth(dropDownWidth);\n    inputWidget.setDropDownHeight(dropDownHeight);\n    inputWidget.setDropDownBackgroundResource(popupBackground);\n    inputWidget.addTextChangedListener(new EditTextWatcher());\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\autocomplete\\FloatingLabelAutoCompleteTextView.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// Lifecycle\n// ==\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_chooser);\n\n    adapter = new ArrayAdapter<Product>(this, android.R.layout.simple_list_item_1, AVAILABLE_PRODUCTS);\n    setListAdapter(adapter);\n}", "path": "demo\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\demo\\chooser\\ItemChooserActivity.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// Fragment methods\n// ==\n", "func_signal": "@Override\npublic void onPause()", "code": "{\n    // Persist the new selected items in the arguments\n    getArguments().putParcelable(ARG_SELECTED_INSTANT, getSelectedInstant());\n\n    super.onPause();\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\instantpicker\\TimePickerFragment.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// ViewGroup overrides\n// ==\n", "func_signal": "@Override\npublic void addView(View child)", "code": "{\n    if (initCompleted) {\n        throw new UnsupportedOperationException(\"You cannot add child views to a FloatLabel\");\n    } else {\n        super.addView(child);\n    }\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\FloatingLabelWidgetBase.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Specifies a new LabelAnimator to handle calls to show/hide the label\n *\n * @param labelAnimator LabelAnimator to use; null causes use of the default LabelAnimator\n */\n", "func_signal": "public void setLabelAnimator(LabelAnimator labelAnimator)", "code": "{\n    if (labelAnimator == null) {\n        this.labelAnimator = new DefaultLabelAnimator();\n    } else {\n        if (this.labelAnimator != null) {\n            labelAnimator.setLabelAnchored(getInputWidget(), getFloatingLabel(), this.labelAnimator.isAnchored());\n        }\n        this.labelAnimator = labelAnimator;\n    }\n\n    if (isInEditMode()) {\n        this.labelAnimator.setLabelAnchored(getInputWidget(), getFloatingLabel(), false);\n    }\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\FloatingLabelWidgetBase.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Delegate method for the floating label animator\n */\n", "func_signal": "public void floatLabel()", "code": "{\n    if (!isLaidOut) return;\n    getLabelAnimator().floatLabel(getInputWidget(), getFloatingLabel());\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\FloatingLabelWidgetBase.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Delegate method for the floating label animator\n */\n", "func_signal": "public void setLabelAnchored(boolean isAnchored)", "code": "{\n    if (!isLaidOut) return;\n    getLabelAnimator().setLabelAnchored(getInputWidget(), getFloatingLabel(), isAnchored);\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\FloatingLabelWidgetBase.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// Dialog listeners\n// ==\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected void notifyInstantSelected()", "code": "{\n    if (getActivity() instanceof InstantPickerListener) {\n        ((InstantPickerListener<TimeInstantT>) getActivity()).onInstantSelected(getPickerId(), getSelectedInstant());\n    }\n\n    if (getParentFragment() instanceof InstantPickerListener) {\n        ((InstantPickerListener<TimeInstantT>) getParentFragment()).onInstantSelected(getPickerId(), getSelectedInstant());\n    }\n\n    if (getTargetFragment() instanceof InstantPickerListener) {\n        ((InstantPickerListener<TimeInstantT>) getTargetFragment()).onInstantSelected(getPickerId(), getSelectedInstant());\n    }\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\instantpicker\\TimePickerFragment.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// Event handlers\n// ==\n", "func_signal": "@Override\nprotected void onListItemClick(ListView l, View v, int position, long id)", "code": "{\n    Product selectedItem = adapter.getItem(position);\n\n    Intent res = new Intent();\n    res.putExtra(RES_SELECTED_PRODUCT, selectedItem);\n    setResult(Activity.RESULT_OK, res);\n    finish();\n}", "path": "demo\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\demo\\chooser\\ItemChooserActivity.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Create a new time picker\n *\n * @param pickerId        The id of the item picker\n * @param selectedInstant The positions of the items already selected\n * @return The arguments bundle\n */\n", "func_signal": "public static <TimeInstantT extends TimeInstant> TimePickerFragment newInstance(int pickerId, TimeInstantT selectedInstant)", "code": "{\n    TimePickerFragment f = new TimePickerFragment();\n\n    Bundle args = new Bundle();\n    args.putInt(ARG_PICKER_ID, pickerId);\n    args.putParcelable(ARG_SELECTED_INSTANT, selectedInstant);\n    f.setArguments(args);\n\n    return f;\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\instantpicker\\TimePickerFragment.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Initialise the widget: read attributes, inflate layout and set the basic properties\n *\n * @param context\n * @param attrs\n * @param defStyle\n */\n", "func_signal": "protected void init(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    // Load custom attributes\n    final int layoutId;\n    final CharSequence floatLabelText;\n    final int floatLabelTextAppearance;\n    final int floatLabelTextColor;\n    final float floatLabelTextSize;\n\n    if (attrs == null) {\n        layoutId = getDefaultLayoutId();\n        isFloatOnFocusEnabled = true;\n        floatLabelText = null;\n        floatLabelTextAppearance = -1;\n        floatLabelTextColor = 0x66000000;\n        floatLabelTextSize = getResources().getDimensionPixelSize(R.dimen.flw_defaultLabelTextSize);\n    } else {\n        final TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.FloatingLabelWidgetBase, defStyle, 0);\n\n        layoutId = a.getResourceId(R.styleable.FloatingLabelWidgetBase_android_layout, getDefaultLayoutId());\n        isFloatOnFocusEnabled = a.getBoolean(R.styleable.FloatingLabelWidgetBase_flw_floatOnFocus, true);\n        floatLabelText = a.getText(R.styleable.FloatingLabelWidgetBase_flw_labelText);\n        floatLabelTextColor = a.getColor(R.styleable.FloatingLabelWidgetBase_flw_labelTextColor, 0x66000000);\n        floatLabelTextAppearance = a.getResourceId(R.styleable.FloatingLabelWidgetBase_flw_labelTextAppearance, -1);\n        floatLabelTextSize = a.getDimension(R.styleable.FloatingLabelWidgetBase_flw_labelTextSize, getResources().getDimensionPixelSize(R.dimen.flw_defaultLabelTextSize));\n\n        a.recycle();\n    }\n\n    inflateWidgetLayout(context, layoutId);\n\n    getFloatingLabel().setFocusableInTouchMode(false);\n    getFloatingLabel().setFocusable(false);\n\n    setLabelAnimator(getDefaultLabelAnimator());\n    setLabelText(floatLabelText);\n    if (floatLabelTextAppearance != -1) {\n        setLabelTextAppearance(getContext(), floatLabelTextAppearance);\n    }\n    setLabelColor(floatLabelTextColor);\n    setLabelTextSize(TypedValue.COMPLEX_UNIT_PX, floatLabelTextSize);\n\n    afterLayoutInflated(context, attrs, defStyle);\n\n    isLaidOut = false;\n    getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            isLaidOut = true;\n            setInitialWidgetState();\n            if (Build.VERSION.SDK_INT >= 16) {\n                getViewTreeObserver().removeOnGlobalLayoutListener(this);\n            } else {\n                getViewTreeObserver().removeGlobalOnLayoutListener(this);\n            }\n        }\n    });\n\n    // Mark init as complete to prevent accidentally breaking the view by\n    // adding children\n    initCompleted = true;\n    onInitCompleted();\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\FloatingLabelWidgetBase.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// Overridden methods\n// ==\n", "func_signal": "@Override\nprotected void afterLayoutInflated(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super.afterLayoutInflated(context, attrs, defStyle);\n\n    final int inputType;\n\n    if (attrs == null) {\n        inputType = InputType.TYPE_CLASS_TEXT;\n    } else {\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.FloatingLabelEditText, defStyle, 0);\n        inputType = a.getInt(R.styleable.FloatingLabelEditText_android_inputType, InputType.TYPE_CLASS_TEXT);\n        a.recycle();\n    }\n\n    final EditText inputWidget = getInputWidget();\n    inputWidget.setInputType(inputType);\n    inputWidget.addTextChangedListener(new EditTextWatcher());\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\edittext\\FloatingLabelEditText.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Inflate the widget layout and make sure we have everything in there\n *\n * @param context  The context\n * @param layoutId The id of the layout to inflate\n */\n", "func_signal": "private void inflateWidgetLayout(Context context, int layoutId)", "code": "{\n    inflate(context, layoutId, this);\n\n    floatingLabel = (TextView) findViewById(R.id.flw_floating_label);\n    if (floatingLabel == null) {\n        throw new RuntimeException(\"Your layout must have a TextView whose ID is @id/flw_floating_label\");\n    }\n\n    View iw = findViewById(R.id.flw_input_widget);\n    if (iw == null) {\n        throw new RuntimeException(\"Your layout must have an input widget whose ID is @id/flw_input_widget\");\n    }\n    try {\n        inputWidget = (InputWidgetT) iw;\n    } catch (ClassCastException e) {\n        throw new RuntimeException(\"The input widget is not of the expected type\");\n    }\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\FloatingLabelWidgetBase.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// Factory methods\n// ==\n", "func_signal": "public static Intent newIntent(Context context)", "code": "{\n    Intent i = new Intent(context, ItemChooserActivity.class);\n    return i;\n}", "path": "demo\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\demo\\chooser\\ItemChooserActivity.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Set the indices of the items currently selected\n *\n * @param indices The positions of the selected items within the available item list\n */\n", "func_signal": "public void setSelectedIndices(int[] indices)", "code": "{\n    selectedIndices = indices;\n    onSelectedItemsChanged();\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\itempicker\\FloatingLabelItemPicker.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "// =============================================================================================\n// State\n// ==\n", "func_signal": "@Override\nprotected void onRestoreInstanceState(Parcelable state)", "code": "{\n    if (state instanceof Bundle) {\n        final Bundle savedState = (Bundle) state;\n        if (savedState.getBoolean(SAVE_STATE_TAG, false)) {\n            // Save our state for later since children will have theirs restored after this\n            // and having more than one FloatLabel in an Activity or Fragment means you have\n            // multiple views of the same ID\n            this.savedState = savedState;\n\n            restoreAdditionalInstanceState(savedState);\n\n            super.onRestoreInstanceState(savedState.getParcelable(SAVE_STATE_KEY_PARENT));\n            return;\n        }\n    }\n\n    super.onRestoreInstanceState(state);\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\FloatingLabelWidgetBase.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Refreshes the widget state when the selection changes\n */\n", "func_signal": "protected void onSelectedItemsChanged()", "code": "{\n    final Collection<ItemT> selectedItems = getSelectedItems();\n    if (selectedItems.isEmpty()) {\n        anchorLabel();\n        getInputWidget().setText(\"\");\n    } else {\n        getInputWidget().setText(getItemPrinter().printCollection(selectedItems));\n        floatLabel();\n    }\n    if (itemPickerListener != null) itemPickerListener.onSelectionChanged(this, selectedItems);\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\itempicker\\FloatingLabelItemPicker.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Called when the text within the input widget is updated\n *\n * @param s The new text\n */\n", "func_signal": "protected void onTextChanged(String s)", "code": "{\n    if (!isFloatOnFocusEnabled()) {\n        if (s.length() == 0) {\n            anchorLabel();\n        } else {\n            floatLabel();\n        }\n    }\n    if (editTextListener != null) editTextListener.onTextChanged(this, s);\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\edittext\\FloatingLabelEditText.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Called when the text within the input widget is updated\n *\n * @param s The new text\n */\n", "func_signal": "protected void onTextChanged(String s)", "code": "{\n    if(!isFloatOnFocusEnabled()){\n        if (s.length() == 0) {\n            anchorLabel();\n        } else {\n            floatLabel();\n        }\n    }\n\n    if (editTextListener != null) editTextListener.onTextChanged(this, s);\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\autocomplete\\FloatingLabelAutoCompleteTextView.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * Get the items currently selected\n *\n * @return\n */\n", "func_signal": "public Collection<ItemT> getSelectedItems()", "code": "{\n    if (availableItems == null || selectedIndices == null || selectedIndices.length == 0) {\n        return new ArrayList<ItemT>(0);\n    }\n\n    ArrayList<ItemT> items = new ArrayList<ItemT>(selectedIndices.length);\n    for (int index : selectedIndices) {\n        items.add(availableItems.get(index));\n    }\n    return items;\n}", "path": "library\\src\\main\\java\\com\\marvinlabs\\widget\\floatinglabel\\itempicker\\FloatingLabelItemPicker.java", "repo_name": "marvinlabs/android-floatinglabel-widgets", "stars": 449, "license": "apache-2.0", "language": "java", "size": 1018}
{"docstring": "/**\n * \u53c2\u8003:http://blog.csdn.net/job_hesc/article/details/46242117\n */\n", "func_signal": "private void ReadVideoFileByRxjava()", "code": "{\n    Observable.just(rootFile)\n        .flatMap(new Func1<File, Observable<File>>() {\n            @Override\n            public Observable<File> call(File file) {\n                return RxUtil.listFiles(file);\n            }\n        })\n        .subscribe(\n            new Subscriber<File>() {\n                @Override\n                public void onCompleted() {\n                    Log.d(\"danxx\", \"onCompleted\");\n                    if (videoBeans.size() > 0) {\n//                            mAdapter.setData(videoBeans);\n//                            mAdapter.notifyDataSetChanged();\n                    } else {\n                        Toast.makeText(VideoListActivity.this, \"sorry,\u6ca1\u6709\u8bfb\u53d6\u5230\u89c6\u9891\u6587\u4ef6!\", Toast.LENGTH_LONG).show();\n                    }\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                }\n\n                @Override\n                public void onNext(File file) {\n                    String name = file.getName();\n                    String size = FileUtils.showFileSize(file.length());\n                    String path = file.getPath();\n                    videoBeans.add(new VideoBean(name, path, size));\n                    Log.d(\"danxx\", \"name--->\" + name);\n                }\n            }\n        );\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\VideoListActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n *\n * @param mvpView  \u628aActivity\u6216\u8005Fragment\u7684\u5f15\u7528\u590d\u5236\u8fc7\u6765\uff0c\u65b9\u4fbf\u5728\u8c03\u7528View\u63a5\u53e3\u505a\u56de\u8c03\n */\n", "func_signal": "@Override\npublic void attachView(T mvpView)", "code": "{\n    Log.d(\"danxx\",\"attachView\");\n    this.mMvpView = mvpView;\n    /****/\n    this.mCompositeSubscription = new CompositeSubscription();\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\mvp\\BasePresenter.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * Use this factory method to create a new instance of\n * this fragment using the provided parameters.\n *\n * @param param1 Parameter 1.\n * @param param2 Parameter 2.\n * @return A new instance of fragment SettingsFragment.\n */\n", "func_signal": "public static SettingsFragment newInstance(String param1, String param2)", "code": "{\n    SettingsFragment fragment = new SettingsFragment();\n    Bundle args = new Bundle();\n    args.putString(ARG_PARAM1, param1);\n    args.putString(ARG_PARAM2, param2);\n    fragment.setArguments(args);\n    return fragment;\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\SettingsFragment.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * Initialize the view in the layout\n *\n * @param savedInstanceState savedInstanceState\n */\n", "func_signal": "@Override\nprotected void initViews(Bundle savedInstanceState)", "code": "{\n    getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n    Intent intent = getIntent();\n    url = intent.getStringExtra(\"url\");\n    name = intent.getStringExtra(\"name\");\n    photoView = (PhotoView) findViewById(R.id.img);\n    // \u542f\u7528\u56fe\u7247\u7f29\u653e\u529f\u80fd\n    photoView.enable();\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\MeizhiDetailActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u6dfb\u52a0subscriber\u8ba2\u9605\u8005\u5230mCompositeSubscription\uff0c\n * \u65b9\u4fbf\u5728detachView\u7684\u65f6\u5019\u53d6\u6d88\u8ba2\u9605\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u9732\n * @param subscriber\n */\n", "func_signal": "public void addSubscriberToCompositeSubscription(Subscription subscriber)", "code": "{\n    if(subscriber != null){\n        this.mCompositeSubscription.add(subscriber);\n    }\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\mvp\\BasePresenter.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u5f53\u5927\u5c0f\u5c4f\u5207\u6362\u65f6\u5904\u7406\n * @param newConfig\n */\n", "func_signal": "@Override\npublic void onConfigurationChanged(Configuration newConfig)", "code": "{\n    super.onConfigurationChanged(newConfig);\n    if (mdPlayer != null) {\n        /**\n         * \u5728activity\u4e2d\u76d1\u542c\u5230\u6a2a\u7ad6\u5c4f\u53d8\u5316\u65f6\u8c03\u7528\u64ad\u653e\u5668\u7684\u76d1\u542c\u65b9\u6cd5\u6765\u5b9e\u73b0\u64ad\u653e\u5668\u5927\u5c0f\u5207\u6362\n         */\n        mdPlayer.onConfigurationChanged(newConfig);\n        if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\n            showActionBar();\n            fullScreen.setVisibility(View.GONE);\n            fullScreen.removeAllViews();\n            videoRecyclerView.setVisibility(View.VISIBLE);\n            if (postion <= mLayoutManager.findLastVisibleItemPosition()\n                    && postion >= mLayoutManager.findFirstVisibleItemPosition()) {\n                View view = videoRecyclerView.findViewHolderForAdapterPosition(postion).itemView;\n                FrameLayout frameLayout = (FrameLayout) view.findViewById(R.id.adapter_super_video);\n                frameLayout.removeAllViews();\n                ViewGroup last = (ViewGroup) mdPlayer.getParent();//\u627e\u5230videoitemview\u7684\u7236\u7c7b\uff0c\u7136\u540eremove\n                if (last != null) {\n                    last.removeAllViews();\n                }\n                frameLayout.addView(mdPlayer);\n            }\n            int mShowFlags =\n                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                            | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n            fullScreen.setSystemUiVisibility(mShowFlags);\n        } else {\n            ViewGroup viewGroup = (ViewGroup) mdPlayer.getParent();\n            if (viewGroup == null)\n                return;\n            hideActionBar();\n            viewGroup.removeAllViews();\n            fullScreen.addView(mdPlayer);\n            fullScreen.setVisibility(View.VISIBLE);\n            int mHideFlags =\n                    View.SYSTEM_UI_FLAG_LOW_PROFILE\n                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                            | View.SYSTEM_UI_FLAG_FULLSCREEN\n                            | View.SYSTEM_UI_FLAG_IMMERSIVE\n                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n                    ;\n            fullScreen.setSystemUiVisibility(mHideFlags);\n        }\n    } else {\n        fullScreen.setVisibility(View.GONE);\n    }\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\RecyclerVideoViewActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * Initialize the view in the layout\n *\n * @param savedInstanceState savedInstanceState\n */\n", "func_signal": "@Override\nprotected void initViews(Bundle savedInstanceState)", "code": "{\n    getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n    Intent intent = getIntent();\n    path = intent.getStringExtra(\"path\");\n    tvFilePath = (TextView) findViewById(R.id.tvFilePath);\n    videoListView = (RecyclerView) findViewById(R.id.videoListView);\n    mAdapter = new VideoListAdapter();\n    mLayoutManager = new LinearLayoutManager(this);\n    mLayoutManager.setOrientation(OrientationHelper.VERTICAL);\n    videoListView.setLayoutManager(mLayoutManager);\n    videoListView.setAdapter(mAdapter);\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\VideoListActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * Initialize the Activity data\n */\n", "func_signal": "@Override\nprotected void initData()", "code": "{\n\n    // \u7981\u7528\u56fe\u7247\u7f29\u653e\u529f\u80fd (\u9ed8\u8ba4\u4e3a\u7981\u7528\uff0c\u4f1a\u8ddf\u666e\u901a\u7684ImageView\u4e00\u6837\uff0c\u7f29\u653e\u529f\u80fd\u9700\u624b\u52a8\u8c03\u7528enable()\u542f\u7528)\n//        photoView.disenable();\n    // \u83b7\u53d6\u56fe\u7247\u4fe1\u606f\n    Info info = photoView.getInfo();\n    // \u4ece\u666e\u901a\u7684ImageView\u4e2d\u83b7\u53d6Info\n    //Info info = PhotoView.getImageViewInfo(ImageView);\n    // \u4ece\u4e00\u5f20\u56fe\u7247\u4fe1\u606f\u53d8\u5316\u5230\u73b0\u5728\u7684\u56fe\u7247\uff0c\u7528\u4e8e\u56fe\u7247\u70b9\u51fb\u540e\u653e\u5927\u6d4f\u89c8\uff0c\u5177\u4f53\u4f7f\u7528\u53ef\u4ee5\u53c2\u7167demo\u7684\u4f7f\u7528\n    photoView.animaFrom(info);\n    // \u4ece\u73b0\u5728\u7684\u56fe\u7247\u53d8\u5316\u5230\u6240\u7ed9\u5b9a\u7684\u56fe\u7247\u4fe1\u606f\uff0c\u7528\u4e8e\u56fe\u7247\u653e\u5927\u540e\u70b9\u51fb\u7f29\u5c0f\u5230\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u5177\u4f53\u4f7f\u7528\u53ef\u4ee5\u53c2\u7167demo\u7684\u4f7f\u7528\n    photoView.animaTo(info, new Runnable() {\n        @Override\n        public void run() {\n            //\u52a8\u753b\u5b8c\u6210\u76d1\u542c\n        }\n    });\n    // \u83b7\u53d6/\u8bbe\u7f6e \u52a8\u753b\u6301\u7eed\u65f6\u95f4\n    photoView.setAnimaDuring(200);\n    int d = photoView.getAnimaDuring();\n    // \u83b7\u53d6/\u8bbe\u7f6e \u6700\u5927\u7f29\u653e\u500d\u6570\n    photoView.setMaxScale( 4.0f );\n    float maxScale = photoView.getMaxScale();\n    // \u8bbe\u7f6e\u52a8\u753b\u7684\u63d2\u5165\u5668\n//        photoView.setInterpolator(Interpolator interpolator);\n    setTitle(name);\n    if(!TextUtils.isEmpty(url)){\n        Picasso.with(MeizhiDetailActivity.this).load(\"http://tnfs.tngou.net/image\" + url).into(photoView);\n    }\n    this.picturePresenter = new PicturePresenter();\n    this.picturePresenter.attachView(this);\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\MeizhiDetailActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u521b\u5efaitem view\n *\n * @param parent\n * @param viewType\n * @return\n */\n", "func_signal": "@Override\nprotected BaseRecyclerViewHolder createItem(ViewGroup parent, int viewType)", "code": "{\n    View view = LayoutInflater.from(VideoListActivity.this).inflate(R.layout.item_videos_layout, parent, false);\n    MyViewHolder viewHolder = new MyViewHolder(view);\n    return viewHolder;\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\VideoListActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u7ed1\u5b9a\u6570\u636e\n *\n * @param holder\n * @param position\n */\n", "func_signal": "@Override\nprotected void bindData(BaseRecyclerViewHolder holder, int position)", "code": "{\n    ((MyViewHolder) holder).tvName.setText(getItemData(position).name);\n    ((MyViewHolder) holder).tvSize.setText(getItemData(position).size);\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\VideoListActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u83b7\u53d6\u6570\u636e\u6210\u529f\u540e\u56de\u8c03\n *\n * @param data\n */\n", "func_signal": "@Override\npublic void getDataSuccess(List<? extends Model> data)", "code": "{\n    mAdapter.setData((List<VideoBean>) data);\n    mAdapter.notifyDataSetChanged();\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\VideoListActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/*********\n * Umeng *\n *********/\n", "func_signal": "public void onResume()", "code": "{\n    super.onResume();\n    MobclickAgent.onResume(this);\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\MeizhiDetailActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u56fe\u7247\u4fdd\u5b58\u5230\u672c\u5730\u5931\u8d25\u540e\u56de\u8c03\n *\n * @param e\n */\n", "func_signal": "@Override\npublic void onSaveError(Throwable e)", "code": "{\n    e.printStackTrace();\n    showToast(\"\u56fe\u7247\u4fdd\u5b58\u5931\u8d25\uff01\");\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\MeizhiDetailActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u5f53recyclerView\u7684item\u6dfb\u52a0\u5230\u5c4f\u5e55\u662f\u5206\u60c5\u51b5\u5904\u7406\u89c6\u9891\u64ad\u653e\u5668\n * @param view\n */\n", "func_signal": "@Override\npublic void onChildViewAttachedToWindow(View view)", "code": "{\n    int index = videoRecyclerView.getChildAdapterPosition(view);\n    View controlview = view.findViewById(R.id.adapter_player_control);\n    if (controlview == null) {\n        return;\n    }\n    view.findViewById(R.id.adapter_player_control).setVisibility(View.VISIBLE);\n    if (index == postion) {\n        FrameLayout frameLayout = (FrameLayout) view.findViewById(R.id.adapter_super_video);\n        frameLayout.removeAllViews();\n        if (mdPlayer != null &&\n                ((mdPlayer.isPlaying()) || mdPlayer.getVideoStatus() == IjkVideoView.STATE_PAUSED)) {\n            view.findViewById(R.id.adapter_player_control).setVisibility(View.GONE);\n        }\n        if (mdPlayer.getVideoStatus() == IjkVideoView.STATE_PAUSED) {\n            if (mdPlayer.getParent() != null)\n                ((ViewGroup) mdPlayer.getParent()).removeAllViews();\n            frameLayout.addView(mdPlayer);\n            return;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\RecyclerVideoViewActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u4e0b\u9762\u7684\u8fd9\u51e0\u4e2aActivity\u7684\u751f\u547d\u72b6\u6001\u5f88\u91cd\u8981\n */\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n    super.onPause();\n    if (mdPlayer != null) {\n        mdPlayer.onPause();\n    }\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\RecyclerVideoViewActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * Initialize the View of the listener\n */\n", "func_signal": "@Override\nprotected void initListeners()", "code": "{\n    photoView.setOnLongClickListener(new View.OnLongClickListener() {\n        @Override\n        public boolean onLongClick(View v) {\n            new AlertDialog.Builder(MeizhiDetailActivity.this).setMessage(\"\u786e\u5b9a\u4fdd\u5b58\u56fe\u7247\u5230\u672c\u5730?\")\n            .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    dialog.dismiss();\n                }\n            })\n            .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    if(photoView.getDrawable() != null){\n                        Log.d(\"danxx\" ,\"\u5f00\u59cb\u4fdd\u5b58\uff01\uff01\");\n                        bitmap = ImageTools.drawableToBitmap(photoView.getDrawable());\n                        if(bitmap!=null){\n                            picturePresenter.savePicture(bitmap,MeizhiDetailActivity.this,getApplication());\n                        }else{\n                            showToast(\"\u4fdd\u5b58\u5931\u8d25\uff01\");\n                        }\n                        dialog.dismiss();\n                    }else{\n                        showToast(\"\u56fe\u7247\u8fd8\u5728\u52a0\u8f7d\u4e2d\uff0c\u8bf7\u7a0d\u540e\u91cd\u8bd5\uff01\");\n                        dialog.dismiss();\n                    }\n                }\n            }).show();\n            return false;\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\MeizhiDetailActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * Initialize the Activity data\n */\n", "func_signal": "@Override\nprotected void initData()", "code": "{\n    videoFilePresenter = new VideoFilePresenter();\n    videoFilePresenter.attachView(this);\n    if (path != null && !TextUtils.isEmpty(path)) {\n        tvFilePath.setText(path);\n        rootFile = new File(path);\n//            ReadVideoFileByRxjava();\n        videoFilePresenter.getVideoData(rootFile);\n    }\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\VideoListActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u5f53item\u79bb\u5f00\u5c4f\u5e55\u65f6\u505c\u6b62\u89c6\u9891\u64ad\u653e\u5668\u5e76\u91ca\u653e\u64ad\u653e\u5668\uff0c\u5e76\u663e\u793a\u64ad\u653e\u5668\u6309\u94ae\n * @param view\n */\n", "func_signal": "@Override\npublic void onChildViewDetachedFromWindow(View view)", "code": "{\n    int index = videoRecyclerView.getChildAdapterPosition(view);\n    if ((index) == postion) {\n        if (true) {\n            if (mdPlayer != null) {\n                mdPlayer.stop();\n                mdPlayer.release();\n                mdPlayer.showView(R.id.adapter_player_control);\n            }\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\RecyclerVideoViewActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * Initialize the View of the listener\n */\n", "func_signal": "@Override\nprotected void initListeners()", "code": "{\n    mAdapter.setOnItemClickListener(new BaseRecyclerViewAdapter.OnItemClickListener() {\n        @Override\n        public void onItemClick(int position, Object data) {\n            VideoActivity.intentTo(VideoListActivity.this, ((VideoBean) data).path, ((VideoBean) data).name);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\VideoListActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u6dfb\u52a0\u6d4b\u8bd5\u6570\u636e\n * @return\n */\n", "func_signal": "private List<VideoListBean> setData()", "code": "{\n    dataList.clear();\n    VideoListBean bean0 = new VideoListBean();\n    bean0.setVideoUrl(\"http://uc-baobab.wdjcdn.com/1471337537665_b596ac9c.mp4?t=1475424855&k=8d74c859203ccd57\");\n    dataList.add(bean0);\n    VideoListBean bean00 = new VideoListBean();\n    bean00.setVideoUrl(\"http://ips.ifeng.com/video19.ifeng.com/video09/2014/06/16/1989823-102-086-0009.mp4\");\n    dataList.add(bean00);\n    VideoListBean bean1 = new VideoListBean();\n    bean1.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=9502&editionType=normal\");\n    dataList.add(bean1);\n    VideoListBean bean2 = new VideoListBean();\n    bean2.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=9508&editionType=normal\");\n    dataList.add(bean2);\n    VideoListBean bean3 = new VideoListBean();\n    bean3.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=8438&editionType=normal\");\n    dataList.add(bean3);\n    VideoListBean bean4 = new VideoListBean();\n    bean4.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=8340&editionType=normal\");\n    dataList.add(bean4);\n    VideoListBean bean5 = new VideoListBean();\n    bean5.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=9392&editionType=normal\");\n    dataList.add(bean5);\n    VideoListBean bean6 = new VideoListBean();\n    bean6.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=7524&editionType=normal\");\n    dataList.add(bean6);\n    VideoListBean bean7 = new VideoListBean();\n    bean7.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=9444&editionType=normal\");\n    dataList.add(bean7);\n    VideoListBean bean8 = new VideoListBean();\n    bean8.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=9442&editionType=normal\");\n    dataList.add(bean8);\n    VideoListBean bean9 = new VideoListBean();\n    bean9.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=8530&editionType=normal\");\n    dataList.add(bean9);\n    VideoListBean bean10 = new VideoListBean();\n    bean10.setVideoUrl(\"http://baobab.wandoujia.com/api/v1/playUrl?vid=9418&editionType=normal\");\n    dataList.add(bean10);\n    return dataList;\n}", "path": "app\\src\\main\\java\\com\\danxx\\mdplayer\\ui\\RecyclerVideoViewActivity.java", "repo_name": "Dawish/MDPlayer", "stars": 466, "license": "None", "language": "java", "size": 19580}
{"docstring": "/**\n * \u67e5\u770bhdfs\u6587\u4ef6\u5185\u5bb9\n *\n * @param remoteFile hdfs\u6587\u4ef6\u8def\u5f84\n */\n", "func_signal": "public static void cat(String remoteFile) throws IOException", "code": "{\n    Path path = new Path(remoteFile);\n    FileSystem fs = FileSystem.get(URI.create(HDFS), conf);\n    FSDataInputStream fsdis = null;\n    System.out.println(\"cat: \" + remoteFile);\n    try {\n        fsdis = fs.open(path);\n        IOUtils.copyBytes(fsdis, System.out, 4096, false);\n    } finally {\n        IOUtils.closeStream(fsdis);\n        fs.close();\n    }\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HdfsUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * svd\u63a8\u8350\u7b97\u6cd5\n */\n", "func_signal": "public static RecommenderBuilder svd(DataModel dataModel) throws TasteException", "code": "{\n    System.out.println(\"svd\");\n    RecommenderBuilder recommenderBuilder = RecommendFactory.getSVDRecommenderBuidler(new ALSWRFactorizer(dataModel, 5, 0.05, 10));\n    RecommendUtil.evaluate(EvaluatorType.AVERAGE_ABSOLUTE_DIFFERENCE, recommenderBuilder, null, dataModel, 0.7);\n    RecommendUtil.statsEvaluator(recommenderBuilder, null, dataModel, 2);\n    return recommenderBuilder;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendEvaluator.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u5bf9\u6570\u4f3c\u7136\u76f8\u4f3c\u5ea6+\u6700\u8fd1\u8ddd\u79bb\u90bb\u5c45+usercf\n */\n", "func_signal": "public static RecommenderBuilder userLoglikelihood(DataModel dataModel) throws TasteException", "code": "{\n    System.out.println(\"userLoglikelihood\");\n    UserSimilarity userSimilarity = RecommendFactory.getUserSimilarity(SimilarityType.LOGLIKELIHOOD, dataModel);\n    UserNeighborhood userNeighborhood = RecommendFactory.getUserNeighborhood(NeighborhoodType.NEAREST,\n            RecommendUtil.NEIGHBORHOOD_NUM, userSimilarity, dataModel);\n    RecommenderBuilder recommenderBuilder = RecommendFactory.getUserRecommenderBuidler(false, userSimilarity, userNeighborhood);\n    RecommendUtil.evaluate(EvaluatorType.AVERAGE_ABSOLUTE_DIFFERENCE, recommenderBuilder, null, dataModel, 0.7);\n    RecommendUtil.statsEvaluator(recommenderBuilder, null, dataModel, 2);\n    return recommenderBuilder;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendEvaluator.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u91c7\u75284\u4e2areducer,count\u4ea4\u7ed9\u6700\u540e\u4e00\u4e2a\n */\n", "func_signal": "@Override\npublic int getPartition(Text key, IntWritable value, int numReduceTasks)", "code": "{\n    if (key.equals(new Text(\"count\"))) {\n        return 1;\n    } else {\n        //\u5176\u4f59\u4f7f\u7528\u9ed8\u8ba4\u7684\u5206\u533a\u65b9\u5f0f,\u6b64\u65f6\u4f20\u9012\u7684\u5206\u533a\u6570\u5e94\u8be5-1\n        return super.getPartition(key, value, numReduceTasks - 1);\n    }\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mr\\weiboad\\CalcTFAndN.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u521b\u5efa\u6587\u4ef6\n *\n * @param file    \u6587\u4ef6\u540d\n * @param content \u6587\u4ef6\u5185\u5bb9\n */\n", "func_signal": "public static void createFile(String file, String content) throws IOException", "code": "{\n    FileSystem fs = FileSystem.get(URI.create(HDFS), conf);\n    byte[] buff = content.getBytes();\n    FSDataOutputStream os = null;\n    try {\n        os = fs.create(new Path(file));\n        os.write(buff, 0, buff.length);\n        System.out.println(\"Create: \" + file);\n    } finally {\n        if (os != null)\n            os.close();\n    }\n    fs.close();\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HdfsUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u4ecehdfs\u4e0b\u8f7d\u6587\u4ef6\u5230\u672c\u5730\n *\n * @param remote hdfs\u6587\u4ef6\u8def\u5f84\n * @param local  \u672c\u5730\u76ee\u6807\u8def\u5f84\n */\n", "func_signal": "public static void download(String remote, String local) throws IOException", "code": "{\n    Path path = new Path(remote);\n    FileSystem fs = FileSystem.get(URI.create(HDFS), conf);\n    fs.copyToLocalFile(path, new Path(local));\n    System.out.println(\"download: from\" + remote + \" to \" + local);\n    fs.close();\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HdfsUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * tanimoto\u76f8\u4f3c\u5ea6+itemcf\n */\n", "func_signal": "public static RecommenderBuilder itemTanimoto(DataModel dataModel) throws TasteException, IOException", "code": "{\n    System.out.println(\"itemTanimoto\");\n    ItemSimilarity itemSimilarity = RecommendFactory.getItemSimilarity(SimilarityType.TANIMOTO, dataModel);\n    RecommenderBuilder recommenderBuilder = RecommendFactory.getItemRecommenderBuidler(false, itemSimilarity);\n    RecommendUtil.evaluate(EvaluatorType.AVERAGE_ABSOLUTE_DIFFERENCE, recommenderBuilder, null, dataModel, 0.7);\n    RecommendUtil.statsEvaluator(recommenderBuilder, null, dataModel, 2);\n    return recommenderBuilder;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendEvaluator.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u663e\u793a\u63a8\u8350\u7ed3\u679c\n * */\n", "func_signal": "public static void result(long uid, RecommenderBuilder rb, DataModel dataModel) throws TasteException", "code": "{\n    List<RecommendedItem> recommendedItemList = rb.buildRecommender(dataModel).recommend(uid, RecommendUtil.RECOMMENDER_NUM);\n    RecommendUtil.showRecommendResult(uid, recommendedItemList, false);\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendResult.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u8ba1\u7b97unixtime\u4e24\u4e24\u4e4b\u95f4\u7684\u65f6\u95f4\u5dee\n *\n * @param sortDatas key\u4e3aunixtime,value\u4e3apos\n * @return key\u4e3apos, value\u4e3a\u8be5pos\u7684\u505c\u7559\u65f6\u95f4\n */\n", "func_signal": "public static HashMap<String, Float> calcStayTime(TreeMap<Long, String> sortDatas)", "code": "{\n    HashMap<String, Float> resMap = new HashMap<String, Float>();\n    Iterator<Long> iter = sortDatas.keySet().iterator();\n    Long currentTimeflag = iter.next();\n    //\u904d\u5386treemap\n    while (iter.hasNext()) {\n        Long nextTimeflag = iter.next();\n        float diff = (nextTimeflag - currentTimeflag) / 60.0f;\n        //\u8d85\u8fc760\u5206\u949f\u8fc7\u6ee4\u4e0d\u8ba1\n        if (diff <= 60.0) {\n            String currentPos = sortDatas.get(currentTimeflag);\n            if (resMap.containsKey(currentPos)) {\n                resMap.put(currentPos, resMap.get(currentPos) + diff);\n            } else {\n                resMap.put(currentPos, diff);\n            }\n        }\n        currentTimeflag = nextTimeflag;\n    }\n    return resMap;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HadoopUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u6570\u636e\u683c\u5f0f\u5316\u7684\u65b9\u6cd5,\u5e76\u63d0\u4f9b\u4e86\u9a8c\u8bc1\u6570\u636e\u5408\u6cd5\u6027\u7684\u6d41\u7a0b\n * @param line \u6bcf\u884c\u6570\u636e\n * @param isPos \u8be5\u884c\u6570\u636e\u662fPOS\u8fd8\u662fNET\n * @param date \u8981\u5904\u7406\u7684\u65e5\u5fd7(\u53ea\u5904\u7406\u8fd9\u4e2a\u65e5\u671f\u7684\u6570\u636e)\n * @param timepoint \u8981\u7edf\u8ba1\u7684\u65f6\u95f4\u6bb5,\u683c\u5f0f\u4e3a[09,18,24],\u8868\u793a\u7edf\u8ba100-09,09-18,18-24\u4e09\u4e2a\u65f6\u95f4\u6bb5\u7684\u4fe1\u606f\n * */\n", "func_signal": "public void format(String line, Boolean isPos, String date, String[] timepoint) throws LineException", "code": "{\n    String[] words = line.split(\"\\t\");\n    //\u6839\u636e\u4e0d\u540c\u6570\u636e\u7684\u683c\u5f0f\u622a\u53d6\u9700\u8981\u7684\u4fe1\u606f\n    if (isPos) {\n        this.imsi = words[0];\n        this.pos = words[3];\n        this.time = words[4];\n    } else {\n        this.imsi = words[0];\n        this.pos = words[2];\n        this.time = words[3];\n    }\n    //\u5982\u679c\u4e0d\u662f\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e,\u5219\u8fc7\u6ee4\u5e76\u7edf\u8ba1\u5f02\u5e38\n    if (!this.time.startsWith(date)) {\n        throw new LineException(\"Incorrect datetime!\", -1);\n    }\n    //\u5c06\u5b57\u7b26\u4e32\u7684time\u5b57\u6bb5\u8f6c\u6210\u65f6\u95f4\u7c7b\u578b\u7684day\u5b57\u6bb5,\u5982\u679c\u8be5\u65f6\u95f4\u683c\u5f0f\u4e0d\u6b63\u786e,\u5219\u8fc7\u6ee4\u5e76\u7edf\u8ba1\u5f02\u5e38\n    try {\n        this.day = this.simpleDateFormat.parse(this.time);\n    } catch (ParseException e) {\n        throw new LineException(\"Incorrect date format!\", 0);\n    }\n\n    //\u6839\u636etime\u5b57\u6bb5\u8ba1\u7b97timeflag\u8fc7\u7a0b\n    //\u4ecetime\u4e2d\u83b7\u5f97\u5f53\u524d\u7684\u5c0f\u65f6\u4fe1\u606f\n    Integer hour = Integer.valueOf(time.split(\" \")[1].split(\":\")[0]);\n    //\u5728\u6570\u636e\u957f\u5ea6\u4e2d\u5faa\u73af\n    for (int i = 0; i < timepoint.length; i++) {\n        if (Integer.parseInt(timepoint[i]) <= hour) {\n            try {\n                //\u5982\u679c\u5927\u4e8e\u5f53\u524d\u65f6\u95f4\u6bb5,\u5219\u6682\u65f6\u8bbe\u7f6e\u4e3a[\u5f53\u524d\u65f6\u95f4]-[\u5f53\u524d\u65f6\u6bb5+1],\u5728\u4e0b\u4e2a\u5faa\u73af\u4e2d\u7ee7\u7eed\u5224\u65ad\n                //\u9700\u8981\u8003\u8651\u5230hour\u5927\u4e8e\u6700\u5927\u65f6\u6bb5\u7684\u60c5\u51b5,\u629b\u51fa\u5f02\u5e38\u8fdb\u884c\u7edf\u8ba1\n                this.timeflag = timepoint[i] + \"-\" + timepoint[i + 1];\n            } catch (Exception ex) {\n                throw new LineException(\"Current hour is bigger than the max-timepoint!\", 1);\n            }\n        } else {\n            //\u5982\u679c\u5c0f\u4e8e\u5f53\u524d\u65f6\u6bb5,\u5219\u5fc5\u5b9a\u662f[\u5f53\u524d\u65f6\u6bb5-1]-[\u5f53\u524d\u65f6\u6bb5]\n            //\u5982\u679c\u662f\u4e00\u6b21\u5faa\u73af,\u5219\u5e94\u8be5\u662f\u4ece00\u65f6\u6bb5\u5f00\u59cb\n            if (i == 0) {\n                this.timeflag = \"00-\" + timepoint[i];\n            } else {\n                this.timeflag = timepoint[i - 1] + \"-\" + timepoint[i];\n            }\n            break;\n        }\n    }\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mr\\posnet\\LineFormater.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u66fc\u54c8\u987f\u8ddd\u79bb+itermcf\n */\n", "func_signal": "public static RecommenderBuilder itemCityBlock(DataModel dataModel) throws TasteException", "code": "{\n    System.out.println(\"itemCityBlock\");\n    ItemSimilarity itemSimilarity = RecommendFactory.getItemSimilarity(SimilarityType.CITYBLOCK, dataModel);\n    RecommenderBuilder recommenderBuilder = RecommendFactory.getItemRecommenderBuidler(false, itemSimilarity);\n    RecommendUtil.evaluate(EvaluatorType.AVERAGE_ABSOLUTE_DIFFERENCE, recommenderBuilder, null, dataModel, 0.7);\n    RecommendUtil.statsEvaluator(recommenderBuilder, null, dataModel, 2);\n    return recommenderBuilder;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendEvaluator.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u521b\u5efa\u6587\u4ef6\u5939\n *\n * @param folder \u6587\u4ef6\u5939\u540d\n */\n", "func_signal": "public static void mkdirs(String folder) throws IOException", "code": "{\n    Path path = new Path(folder);\n    FileSystem fs = FileSystem.get(URI.create(HDFS), conf);\n    if (!fs.exists(path)) {\n        fs.mkdirs(path);\n        System.out.println(\"Create: \" + folder);\n    }\n    fs.close();\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HdfsUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u6b63\u5f0f\u7684map\u8fc7\u7a0b\u4e4b\u524d\u5148\u83b7\u5f97count\u548cdf\u7684\u6570\u636e\n */\n", "func_signal": "@Override\nprotected void setup(Context context) throws IOException, InterruptedException", "code": "{\n    super.setup(context);\n    URI[] uris = context.getCacheFiles();\n    if (uris != null) {\n        for (URI uri : uris) {\n            //df\u6587\u4ef6\n            if (uri.getPath().endsWith(\"part-r-00000\")) {\n                Path path = new Path(uri);\n                BufferedReader bufferedReader = new BufferedReader(new FileReader(path.getName()));\n                String s = bufferedReader.readLine();\n                if (s.startsWith(\"count\")) {\n                    String[] words = s.split(\"\\t\");\n                    countMap.put(words[0], Integer.parseInt(words[1]));\n                }\n            } else if (uri.getPath().endsWith(\"part-r-00001\")) {\n                Path path = new Path(uri);\n                BufferedReader bufferedReader = new BufferedReader(new FileReader(path.getName()));\n                String s;\n                while ((s = bufferedReader.readLine()) != null) {\n                    String[] words = s.split(\"\\t\");\n                    dfMap.put(words[0], Integer.parseInt(words[1]));\n                }\n            }\n        }\n    }\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mr\\weiboad\\CalcTotal.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u590d\u5236\u672c\u5730\u6587\u4ef6\u5230hdfs\n *\n * @param local  \u672c\u5730\u6587\u4ef6\u8def\u5f84\n * @param remote hdfs\u76ee\u6807\u8def\u5f84\n */\n", "func_signal": "public static void copyFile(String local, String remote) throws IOException", "code": "{\n    FileSystem fs = FileSystem.get(URI.create(HDFS), conf);\n    fs.copyFromLocalFile(new Path(local), new Path(remote));\n    System.out.println(\"copy from: \" + local + \" to \" + remote);\n    fs.close();\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HdfsUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u5217\u51fa\u8be5\u8def\u5f84\u7684\u6587\u4ef6\u4fe1\u606f\n *\n * @param folder \u6587\u4ef6\u5939\u540d\n */\n", "func_signal": "public static void ls(String folder) throws IOException", "code": "{\n    Path path = new Path(folder);\n    FileSystem fs = FileSystem.get(URI.create(HDFS), conf);\n    FileStatus[] list = fs.listStatus(path);\n    System.out.println(\"ls: \" + folder);\n    System.out.println(\"==========================================================\");\n    for (FileStatus f : list) {\n        System.out.printf(\"name: %s, folder: %s, size: %d\\n\", f.getPath(), f.isDirectory(), f.getLen());\n    }\n    System.out.println(\"==========================================================\");\n    fs.close();\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HdfsUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u66fc\u54c8\u987f\u8ddd\u79bb+\u6700\u8fd1\u8ddd\u79bb\u90bb\u5c45+usercf\n */\n", "func_signal": "public static RecommenderBuilder userCityBlock(DataModel dataModel) throws TasteException", "code": "{\n    System.out.println(\"userCityBlock\");\n    UserSimilarity userSimilarity = RecommendFactory.getUserSimilarity(SimilarityType.CITYBLOCK, dataModel);\n    UserNeighborhood userNeighborhood = RecommendFactory.getUserNeighborhood(NeighborhoodType.NEAREST\n            , RecommendUtil.NEIGHBORHOOD_NUM, userSimilarity, dataModel);\n    RecommenderBuilder recommenderBuilder = RecommendFactory.getUserRecommenderBuidler(false, userSimilarity\n            , userNeighborhood);\n    RecommendUtil.evaluate(EvaluatorType.AVERAGE_ABSOLUTE_DIFFERENCE, recommenderBuilder, null\n            , dataModel, 0.7);\n    RecommendUtil.statsEvaluator(recommenderBuilder, null, dataModel, 2);\n    return recommenderBuilder;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendEvaluator.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u5bf9\u6570\u4f3c\u7136\u76f8\u4f3c\u5ea6+itemcf\n */\n", "func_signal": "public static RecommenderBuilder itemLoglikelihood(DataModel dataModel) throws TasteException", "code": "{\n    System.out.println(\"itemLoglikelihood\");\n    ItemSimilarity itemSimilarity = RecommendFactory.getItemSimilarity(SimilarityType.LOGLIKELIHOOD, dataModel);\n    RecommenderBuilder recommenderBuilder = RecommendFactory.getItemRecommenderBuidler(false, itemSimilarity);\n    RecommendUtil.evaluate(EvaluatorType.AVERAGE_ABSOLUTE_DIFFERENCE, recommenderBuilder, null, dataModel, 0.7);\n    RecommendUtil.statsEvaluator(recommenderBuilder, null, dataModel, 2);\n    return recommenderBuilder;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendEvaluator.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u5c06map\u9636\u6bb5\u4f20\u9012\u8fc7\u6765\u7684\u6570\u636e\u6309\u7167unixtime\u4ece\u5c0f\u5230\u5927\u6392\u5e8f(\u4f7f\u7528TreeMap)\n *\n * @param context reducer\u7684context\u4e0a\u4e0b\u6587,\u7528\u4e8e\u8bbe\u7f6ecounter\n * @param values  map\u9636\u6bb5\u4f20\u9012\u8fc7\u6765\u7684\u6570\u636e\n * @return key\u4e3aunixtime, value\u4e3apos\n */\n", "func_signal": "public static TreeMap<Long, String> getSortedData(Reducer.Context context, Iterable<Text> values)", "code": "{\n    TreeMap<Long, String> sortedData = new TreeMap<Long, String>();\n    for (Text v : values) {\n        String[] vs = v.toString().split(\",\");\n        try {\n            sortedData.put(Long.parseLong(vs[1]), vs[0]);\n        } catch (NumberFormatException num) {\n            context.getCounter(Counter.TIMESKIP).increment(1);\n        }\n    }\n    return sortedData;\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HadoopUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u663e\u793a\u8fc7\u6ee4\u65f6\u95f4\u4e4b\u540e\u7684\u63a8\u8350\u7ed3\u679c\n * */\n", "func_signal": "public static void dataFilterResult(long uid, RecommenderBuilder rb, DataModel dataModel, String filePath) throws IOException, TasteException", "code": "{\n    Set<Long> jobIds = RecommendUtil.filteOutDateRecores(filePath);\n    IDRescorer rescorer = new JobRecorer(jobIds);\n    List<RecommendedItem> recommendedItemList = rb.buildRecommender(dataModel).recommend(uid, RecommendUtil.RECOMMENDER_NUM, rescorer);\n    RecommendUtil.showRecommendResult(uid, recommendedItemList, false);\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\mahout\\mr\\recommend\\RecommendResult.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "/**\n * \u91cd\u547d\u540d\u6587\u4ef6\n * @param src \u6e90\u6587\u4ef6\u540d\n * @param dst \u76ee\u6807\u6587\u4ef6\u540d\n * */\n", "func_signal": "public static void rename(String src, String dst) throws IOException", "code": "{\n    Path name1 = new Path(src);\n    Path name2 = new Path(dst);\n    FileSystem fs = FileSystem.get(URI.create(HDFS), conf);\n    fs.rename(name1, name2);\n    System.out.println(\"Rename: from \" + src + \" to \" + dst);\n    fs.close();\n}", "path": "src\\main\\java\\info\\xiaohei\\www\\HdfsUtil.java", "repo_name": "xiaohei-info/MapReduce", "stars": 383, "license": "None", "language": "java", "size": 3500}
{"docstring": "//    @BindView(R.id.btn_add_account)\n//    Button mBtnAddAccount;\n//    @BindView(R.id.btn_manage_account)\n//    Button mBtnManageAccount;\n//    @BindView(R.id.username)\n//    EditText mUsername;\n//    @BindView(R.id.password)\n//    EditText mPassword;\n//    @BindView(R.id.iv_back_account)\n//    ImageView ivBackAccount;\n//\n//\n//    /**\n//     * \u7528\u6237\u540d\n//     */\n//    private String Username;\n//    /**\n//     * \u5bc6\u7801\n//     */\n//    private String Password;\n//    private AccountBean mAccountBean;\n//    private List<AccountBean> mAccountList;\n//    private AccountRecyclerAdapter mAccountRecyclerAdapter;\n//\n//\n//\n//    @Override\n//    public void onCreate(Bundle savedInstanceState) {\n//        super.onCreate(savedInstanceState);\n//        setContentView(R.layout.activity_login);\n//        ButterKnife.bind(this);\n//        mAccountList = new ArrayList<>();\n//\n//    }\n//\n//\n//    @OnClick({R.id.iv_back_account, R.id.btn_add_account, R.id.btn_manage_account})\n//    public void onViewClicked(View view) {\n//        switch (view.getId()) {\n//            case R.id.iv_back_account:\n//                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n//                imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n//                outAnimation();\n//                break;\n//            case R.id.btn_add_account:\n//                Username = mUsername.getText().toString().trim();\n//                Password = mPassword.getText().toString().trim();\n//                if (TextUtils.isEmpty(Username) || TextUtils.isEmpty(Password)) {\n//                    MyToast.show(AccountManageActivity.this, \"\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\");\n//                    return;\n//                } else {\n//                    //\u6dfb\u52a0\u6570\u636e\u5e93\n//                    AccountDao accountDao = new AccountDao(AccountManageActivity.this);\n////                    //\u83b7\u53d6\u50a8\u5b58\u7684\u5185\u5bb9\n////                    String mContentUserName = PrefUtils.getString(AccountManageActivity.this, \"ContentUserName\", null);\n////                    String mContentPassWord = PrefUtils.getString(AccountManageActivity.this, \"ContentPassWord\", null);\n//                    if (accountDao.queryOne(Username)) {\n//                        MyToast.show(AccountManageActivity.this, \"\u8f93\u5165\u5185\u5bb9\u91cd\u590d\");\n//                        return;\n//                    } else {\n//\n//                        //\u6dfb\u52a0\u5185\u5bb9\u5230\u5b9e\u4f8b\u4e2d\n//                        mAccountBean = new AccountBean();\n//                        mAccountBean.setUserName(Username);\n//                        mAccountBean.setPassWord(Password);\n//                        //\u6dfb\u52a0\u6570\u636e\u5e93\n//                        accountDao.add(mAccountBean);\n//                        //\u6570\u636e\u6dfb\u52a0\u5230\u96c6\u5408\u5e76\u7f6e\u9876\u9009\u4e2d\uff0c\u5e76\u5237\u65b0\u754c\u9762\n////                        mAccountList.add(0, mAccountBean);\n//                        mUsername.setText(\"\");\n//                        mPassword.setText(\"\");\n//                    }\n//                }\n//                break;\n//            case R.id.btn_manage_account:\n//                inAnimation(LoginActivity.class);\n//                break;\n//        }\n//\n//    }\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_attention);\n    ButterKnife.bind(this);\n    initDate();\n    mAttentionAdapter = new AttentionAdapter(AccountManageActivity.this, mDatasTitle, mDatasContent);\n    attentionRclv.setLayoutManager(new LinearLayoutManager(this));\n    attentionRclv.setAdapter(mAttentionAdapter);\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\activity\\AccountManageActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n *  \u7ed1\u5b9a\u5e76\u7ed9ViewHolder\u8d4b\u503c\n * @param holder\n * @param position\n */\n", "func_signal": "@Override\npublic void onBindViewHolder(RecyclerView.ViewHolder holder, final int position)", "code": "{\n    final  PublicNumViewHolder publicNumViewHolder = (PublicNumViewHolder) holder;\n    //\u8bbe\u7f6e\u5185\u5bb9\n    publicNumViewHolder.tvContent.setText(mPublicNumBeanList.get(position).getPublicNumName());\n    /**\n     * \u70b9\u51fb\u5220\u9664\n     */\n    publicNumViewHolder.tvDelete.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n\n            //\u5220\u9664\u6570\u636e\u5e93\n            PublicNumDao friendCircleDao = new PublicNumDao(mContext);\n            friendCircleDao.delete(mPublicNumBeanList.get(position));\n\n            //\u5237\u65b0\u754c\u9762\uff08\u4e0d\u80fd\u591f\u5237\u65b0\uff0c\u7528\u79fb\u9664\u5220\u9664\u9879\uff0c\u5728\u91cd\u65b0\u52a0\u8f7d\uff09\n            mPublicNumBeanList.remove(position);\n            notifyDataSetChanged();\n            //\u5173\u95ed\u6ed1\u52a8\n            SwipeLayoutManager.create().closeLayout();\n        }\n    });\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\adapter\\PublicNumAdapter.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u8df3\u8f6c\u5e76\u5c55\u793a\u52a8\u753b\n *\n * @param cls\n */\n", "func_signal": "public void inAnimation(Class<?> cls)", "code": "{\n    startActivity(new Intent(mActivity, cls));\n    mActivity.overridePendingTransition(R.anim.anim_in, R.anim.anim_out);\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\base\\BaseQQFragment.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u8df3\u8f6cQQ\u4e3b\u754c\u9762\n */\n", "func_signal": "public void intentQq()", "code": "{\n    Intent qqIntent = new Intent();\n    ComponentName cmp = new ComponentName(\"com.tencent.mobileqq\", \"com.tencent.mobileqq.activity.SplashActivity\");\n    qqIntent.setAction(Intent.ACTION_MAIN);\n    qqIntent.addCategory(Intent.CATEGORY_LAUNCHER);\n    qqIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    qqIntent.setComponent(cmp);\n    startActivity(qqIntent);\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\base\\BaseQQFragment.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u521d\u59cb\u5316\u670d\u52a1\u6309\u94ae\u5f00\u542f\u7684\u72b6\u6001\n */\n", "func_signal": "private void initOpenState()", "code": "{\n    if (isServiceOpening(AutoSwitchNumberActivity.this)) {\n\n        mIvBegin.setOn(true);   //\u6253\u5f00\n\n    } else {\n\n        mIvBegin.setOn(false);  //\u5173\u95ed\n    }\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\activity\\AutoSwitchNumberActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u521b\u5efaViewHolder\n *\n * @param parent\n * @param viewType\n * @return\n */\n", "func_signal": "@Override\npublic RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType)", "code": "{\n    View view = getLayoutInflater().inflate(R.layout.friend_circle_item, parent, false);\n    AccountViewHolder accountViewHolder = new AccountViewHolder(view);\n    accountViewHolder.setIsRecyclable(false);\n    return accountViewHolder;\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\adapter\\AccountRecyclerAdapter.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u7ed1\u5b9a\u5e76\u7ed9ViewHolder\u8d4b\u503c\n *\n * @param holder\n * @param position\n */\n", "func_signal": "@Override\npublic void onBindViewHolder(RecyclerView.ViewHolder holder, final int position)", "code": "{\n    final AccountViewHolder accountViewHolder = (AccountViewHolder) holder;\n    //\u8bbe\u7f6e\u5185\u5bb9\n    accountViewHolder.mTvContent.setText(mAccountList.get(position).getAccount());\n    if (position == 0) {\n        //\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u6761\u76ee\u7f6e\u9876\u9009\u4e2d\n        accountViewHolder.mTvContent.setTextColor(Color.parseColor(\"#F58505\"));\n        accountViewHolder.mIvSelectOne.setVisibility(View.VISIBLE);\n    }\n\n    /**\n     * \u70b9\u51fb\u5e94\u7528\n     */\n    accountViewHolder.mTvEdit.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n\n            //\u66f4\u65b0\u9002\u914d\u5668\uff0c\u4e0e\u6570\u636e\u5e93\u540c\u6b65\n            AccountUpdateBean.AutoAccountBean remove = mAccountList.remove(position);\n            mAccountList.add(0, remove);\n            notifyDataSetChanged();\n\n            //\u5185\u5bb9\u50a8\u5b58\u5230SP\n            mAccountUserName = accountViewHolder.mTvContent.getText().toString().trim();\n            PrefUtils.putString(mContext, \"currentaccount\", mAccountUserName);\n\n        }\n    });\n\n    /**\n     * \u70b9\u51fb\u5220\u9664\n     */\n    accountViewHolder.mTvDelete.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n\n            mDelete.Delete(position);\n//                //\u5220\u9664\u6570\u636e\u5e93\n//                AccountDao accountDao = new AccountDao(mContext);\n//                accountDao.delete(mAccountList.get(position));\n            //\u5237\u65b0\u754c\u9762\uff08\u4e0d\u80fd\u591f\u5237\u65b0\uff0c\u7528\u79fb\u9664\u5220\u9664\u9879\uff0c\u5728\u91cd\u65b0\u52a0\u8f7d\uff09\n            mAccountList.remove(position);\n            notifyDataSetChanged();\n            //\u5173\u95ed\u6ed1\u52a8\n            SwipeLayoutManager.create().closeLayout();\n\n        }\n    });\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\adapter\\AccountRecyclerAdapter.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "//true \u6d4b\u8bd5                 false  \u4e0a\u7ebf\n", "func_signal": "public static void v(String tag, String msg)", "code": "{\n        if (flag) {\n            Log.v(tag, msg);\n        }\n    }", "path": "app\\src\\main\\java\\vicmob\\micropowder\\utils\\MyLogger.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u521d\u59cb\u5316RecyclerView\n */\n", "func_signal": "private void initRecyclerView()", "code": "{\n    mRvContent.setLayoutManager(new LinearLayoutManager(this));         //\u8bbe\u7f6e\u5e03\u5c40\u7ba1\u7406\u5668\n\n    mRvContent.addItemDecoration(new DividerItemDecoration(this));      //\u8bbe\u7f6e\u5206\u5272\u7ebf\u6837\u5f0f\n    if (app.mAccountList.size() > 0 && app.mAccountList != null) { //\u5982\u679c\u7f51\u7edc\u83b7\u53d6\u6210\u529f\n        AccountRecyclerAdapter = new AccountRecyclerAdapter(AutoSwitchNumberActivity.this, app.mAccountList, new Delete() {\n            @Override\n            public void Delete(int position) {\n                deleteThread(app.mAccountList.get(position).getAccountId()+\"\");\n            }\n        });   //\u6dfb\u52a0RecyclerView\u9002\u914d\u5668\n        mRvContent.setAdapter(AccountRecyclerAdapter);\n    }\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\activity\\AutoSwitchNumberActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u5220\u9664\u6570\u636e\n *\n * @param\n */\n", "func_signal": "public void deleteThread(final String id)", "code": "{\n    Log.i(\"zw\",id);\n    Thread th = new Thread() {\n        @Override\n        public void run() {\n            OkHttpUtils\n                    .post()\n                    .url(Url.deleteAccountUrl)\n                    .addParams(\"accountId\", id)\n                    .build()\n                    .execute(new StringCallback() {\n                        @Override\n                        public void onError(Call call, Exception e, int id) {\n\n                        }\n\n                        @Override\n                        public void onResponse(String response, int id) {\n                            Boolean success = MyJsonUtil.getBeanByJson(response);\n                            if (success) {\n                                MyToast.show(AutoSwitchNumberActivity.this, \"\u5220\u9664\u6210\u529f\");\n                            }\n                        }\n                    });\n        }\n    };\n    th.start();\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\activity\\AutoSwitchNumberActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onSaveInstanceState(Bundle outState)", "code": "{\n\tsuper.onSaveInstanceState(outState);\n\tmHelper.onSaveInstanceState(outState);\n}", "path": "library-slidingmenu\\src\\com\\jeremyfeinstein\\slidingmenu\\lib\\app\\SlidingActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u5e03\u5c40\u4ea4\u4e92\u65f6\u8c03\u7528\u6309\u94ae\u7684\u76d1\u542c\n */\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n    super.onResume();\n\n    SwitchChanged();\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\activity\\AutoSwitchNumberActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tmHelper = new SlidingActivityHelper(this);\n\tmHelper.onCreate(savedInstanceState);\n}", "path": "library-slidingmenu\\src\\com\\jeremyfeinstein\\slidingmenu\\lib\\app\\SlidingActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u521b\u5efaViewHolder\n * @param parent\n * @param viewType\n * @return\n */\n", "func_signal": "@Override\npublic RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType)", "code": "{\n    View view = getLayoutInflater().inflate(R.layout.public_item, parent, false);\n    PublicNumViewHolder publicNumViewHolder = new PublicNumViewHolder(view);\n    publicNumViewHolder.setIsRecyclable(false);\n    return publicNumViewHolder;\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\adapter\\PublicNumAdapter.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onPostCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\npublic void onPostCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onPostCreate(savedInstanceState);\n\tmHelper.onPostCreate(savedInstanceState);\n}", "path": "library-slidingmenu\\src\\com\\jeremyfeinstein\\slidingmenu\\lib\\app\\SlidingActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#findViewById(int)\n */\n", "func_signal": "@Override\npublic View findViewById(int id)", "code": "{\n\tView v = super.findViewById(id);\n\tif (v != null)\n\t\treturn v;\n\treturn mHelper.findViewById(id);\n}", "path": "library-slidingmenu\\src\\com\\jeremyfeinstein\\slidingmenu\\lib\\app\\SlidingActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onKeyUp(int, android.view.KeyEvent)\n */\n", "func_signal": "@Override\npublic boolean onKeyUp(int keyCode, KeyEvent event)", "code": "{\n\tboolean b = mHelper.onKeyUp(keyCode, event);\n\tif (b) return b;\n\treturn super.onKeyUp(keyCode, event);\n}", "path": "library-slidingmenu\\src\\com\\jeremyfeinstein\\slidingmenu\\lib\\app\\SlidingActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u8fd4\u56de\u5e76\u5c55\u793a\u52a8\u753b\n */\n", "func_signal": "public void outAnimation()", "code": "{\n    mActivity.finish();\n    mActivity.overridePendingTransition(R.anim.anim_in, R.anim.anim_out);\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\base\\BaseQQFragment.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * \u5f00\u5173\u72b6\u6001\u53d1\u751f\u6539\u53d8\n */\n", "func_signal": "private void SwitchChanged()", "code": "{\n    mIvBegin.setOnSwitchStateChangeListener(new ShSwitchView.OnSwitchStateChangeListener() {\n        @Override\n        public void onSwitchStateChange(boolean isOn) {\n            startActivity(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS));  //\u8df3\u8f6c\u670d\u52a1\u754c\u9762\n        }\n    });\n}", "path": "app\\src\\main\\java\\vicmob\\micropowder\\ui\\activity\\AutoSwitchNumberActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)\n */\n", "func_signal": "@Override\npublic void setContentView(View v, LayoutParams params)", "code": "{\n\tsuper.setContentView(v, params);\n\tmHelper.registerAboveContentView(v, params);\n}", "path": "library-slidingmenu\\src\\com\\jeremyfeinstein\\slidingmenu\\lib\\app\\SlidingActivity.java", "repo_name": "Nicky213Zhang/WeChatAssist", "stars": 374, "license": "None", "language": "java", "size": 19083}
{"docstring": "/**\n * Generate a value suitable for use in {@link View#setId(int)}\n * This value will not collide with ID values generated at build time by aapt for R.id.\n *\n * @return a generated ID value\n */\n", "func_signal": "private static int generateCompatViewId()", "code": "{\n    for (; ; ) {\n        final int result = sNextGeneratedId.get();\n        int newValue = result + 1;\n        /**\n         * ID number larger than 0x00FFFFFF is reserved for static views defined in the /res xml files.\n         * Android doesn't want you to use 0 as a view's id, and it needs to be flipped before 0x01000000 to avoid\n         * the conflicts with static resource IDs\n         */\n        if (newValue > 0x00FFFFFF) {\n            newValue = 1; // Roll over to 1, not 0.\n        }\n        if (sNextGeneratedId.compareAndSet(result, newValue)) {\n            return result;\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewUtils.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Clear PinBoxes focus\n */\n", "func_signal": "public void resetChildrenFocus()", "code": "{\n    for (int pinBoxesId : pinBoxesIds) {\n        EditText pin = (EditText) findViewById(pinBoxesId);\n        pin.setOnFocusChangeListener(this);\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinView.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * This method sets the desired functionalities of {@link PinView} to make easy.\n *\n * @param pinViewSettings Object with all functionalities to make easy.\n */\n", "func_signal": "public void setSettings(PinViewSettings pinViewSettings)", "code": "{\n    mPinViewSettings = pinViewSettings;\n    setColorTextPinBoxes(mPinViewSettings.getColorTextPinBox(), false);\n    setColorTitles(mPinViewSettings.getColorTextTitles(), false);\n    setCustomDrawablePinBox(mPinViewSettings.getCustomDrawablePinBox(), false);\n    setColorSplit(mPinViewSettings.getColorSplit(), false);\n    setDeleteOnClick(mPinViewSettings.isDeleteOnClick());\n    setNativePinBox(mPinViewSettings.isNativePinBox(), false);\n    setMaskPassword(mPinViewSettings.isMaskPassword(), false);\n    setKeyboardMandatory(mPinViewSettings.isKeyboardMandatory());\n    setNumberCharacters(mPinViewSettings.getNumberCharacters(), false);\n    setSplit(mPinViewSettings.getSplit(), false);\n    setSizeSplit(mPinViewSettings.getSizeSplit(), false);\n    setTextSizePinBoxes(mPinViewSettings.getTextSizePinBox(), false);\n    setTextSizeTitles(mPinViewSettings.getTextSizeTitles(), false);\n\n    setTitles(mPinViewSettings.getPinTitles());\n    setPin(mPinViewSettings.getNumberPinBoxes());\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinView.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * This method inflates the PinView\n *\n * @param context {@link PinViewBaseHelper} needs a context to inflate the layout\n */\n", "func_signal": "private void createView(Context context)", "code": "{\n    ((LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.pin_view, this,\n            true);\n    inputMethodManager = (InputMethodManager) getContext().getSystemService(Service.INPUT_METHOD_SERVICE);\n    mLinearLayoutPinTexts = (LinearLayout) findViewById(R.id.ll_pin_texts);\n    mLinearLayoutPinBoxes = (LinearLayout) findViewById(R.id.ll_pin_edit_texts);\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Save the state of {@link PinView} when orientation screen changed.\n */\n", "func_signal": "@Override\npublic Parcelable onSaveInstanceState()", "code": "{\n\n    Bundle bundle = new Bundle();\n    bundle.putParcelable(\"instanceState\", super.onSaveInstanceState());\n    saveSettings();\n    bundle.putParcelable(\"stateSettings\", mPinViewSettings);\n    //save everything\n    bundle.putString(\"statePinResults\", getPinResults());\n    return bundle;\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinView.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Clear PinBoxes values\n */\n", "func_signal": "public void clear()", "code": "{\n\n    for (int i = 0; i < mNumberPinBoxes; i++) {\n        getPinBox(i).getText().clear();\n    }\n    checkPinBoxesAvailableOrder();\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinView.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Set titles (see {@link TextView}) values to add to {@link PinView}, with all attributes.\n *\n * @param titles string array with the titles values\n */\n", "func_signal": "@Override\npublic void setTitles(String[] titles)", "code": "{\n    if(titles!=null){\n        mLinearLayoutPinTexts.removeAllViews();\n        mPinTitles = titles;\n        pinTitlesIds = new int[titles.length];\n        for (int i = 0; i < titles.length; i++) {\n            mLinearLayoutPinTexts.addView(generatePinText(i, titles), i);\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinView.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Retrieve styles attributes\n */\n", "func_signal": "private void getAttributes(Context context, AttributeSet attrs)", "code": "{\n    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.PinView);\n\n    if (typedArray != null) {\n        try {\n            mNumberPinBoxes = typedArray\n                    .getInteger(R.styleable.PinView_numberPinBoxes, PinViewSettings.DEFAULT_NUMBER_PIN_BOXES);\n            mMaskPassword = typedArray\n                    .getBoolean(R.styleable.PinView_password, PinViewSettings.DEFAULT_MASK_PASSWORD);\n            mNumberCharacters = typedArray\n                    .getInteger(R.styleable.PinView_numberCharacters, PinViewSettings.DEFAULT_NUMBER_CHARACTERS);\n            mSplit = typedArray.getString(R.styleable.PinView_split);\n            mKeyboardMandatory = typedArray\n                    .getBoolean(R.styleable.PinView_keyboardMandatory, PinViewSettings.DEFAULT_KEYBOARD_MANDATORY);\n            mDeleteOnClick = typedArray\n                    .getBoolean(R.styleable.PinView_deleteOnClick, PinViewSettings.DEFAULT_DELETE_ON_CLICK);\n            mNativePinBox = typedArray\n                    .getBoolean(R.styleable.PinView_nativePinBox, PinViewSettings.DEFAULT_NATIVE_PIN_BOX);\n            mCustomDrawablePinBox = typedArray\n                    .getResourceId(R.styleable.PinView_drawablePinBox, PinViewSettings.DEFAULT_CUSTOM_PIN_BOX);\n            mColorTextPinBoxes = typedArray\n                    .getColor(R.styleable.PinView_colorTextPinBox,\n                            getResources().getColor(PinViewSettings.DEFAULT_TEXT_COLOR_PIN_BOX));\n            mColorTextTitles = typedArray\n                    .getColor(R.styleable.PinView_colorTextTitles,\n                            getResources().getColor(PinViewSettings.DEFAULT_TEXT_COLOR_TITLES));\n            mColorSplit = typedArray\n                    .getColor(R.styleable.PinView_colorSplit,\n                            getResources().getColor(PinViewSettings.DEFAULT_COLOR_SPLIT));\n            mTextSizePinBoxes = typedArray\n                    .getDimension(R.styleable.PinView_textSizePinBox,\n                            getResources().getDimension(PinViewSettings.DEFAULT_TEXT_SIZE_PIN_BOX));\n            mTextSizeTitles = typedArray\n                    .getDimension(R.styleable.PinView_textSizeTitles,\n                            getResources().getDimension(PinViewSettings.DEFAULT_TEXT_SIZE_TITLES));\n            mSizeSplit = typedArray\n                    .getDimension(R.styleable.PinView_sizeSplit,\n                            getResources().getDimension(PinViewSettings.DEFAULT_SIZE_SPLIT));\n\n            int titles;\n            titles = typedArray.getResourceId(R.styleable.PinView_titles, -1);\n            if (titles != -1) {\n                setTitles(getResources().getStringArray(titles));\n            }\n\n            if (this.mNumberPinBoxes != 0) {\n                setPin(this.mNumberPinBoxes);\n            }\n\n        } catch (Exception e) {\n            Log.e(LOG_TAG, \"Error while creating the view PinView: \", e);\n        } finally {\n            typedArray.recycle();\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Hides the already popped up keyboard from the screen.\n *\n * @param context Context to get current focus.\n */\n", "func_signal": "public static void hideKeyboard(Context context)", "code": "{\n    try {\n        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n        View currentFocus = ((Activity) context).getCurrentFocus();\n        if (imm != null && currentFocus != null) {\n            IBinder windowToken = currentFocus.getWindowToken();\n            if (windowToken != null) {\n                imm.hideSoftInputFromWindow(windowToken, 0);\n            }\n        }\n    } catch (Exception e) {\n        Log.e(LOG_TAG, \"Can't even hide keyboard \" + e.getMessage());\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewUtils.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * While {@link View#generateViewId()} require API Level >= 17, this tool is compatibe with all API.\n *\n * According to current API Level, it decide weather using system API or not. So you can use {@link\n * #generateViewId()} and {@link View#generateViewId()} in the\n * same time and don't worry about getting same id.\n *\n * @return Id\n */\n", "func_signal": "public static int generateViewId()", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        return generateCompatViewId();\n    } else {\n        return View.generateViewId();\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewUtils.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Check if you have written or have deleted (in the latter case, there would be to do nothing).\n * If you have written, you have to move to the following free PinBox {@link EditText} or to do other\n * action if there are no empty values.\n */\n", "func_signal": "@Override\npublic void onTextChanged(CharSequence s, int start, int before, int count)", "code": "{\n\n    if (findFocus() != null) {\n        currentFocus = Integer.parseInt(findFocus().getTag().toString());\n    }\n\n    if (count == 1 && s.length() == mNumberCharacters) {\n        if (currentFocus == (mNumberPinBoxes - 1) || currentFocus == 0) {\n            checkPinBoxesAvailableOrder();\n        } else {\n            checkPinBoxesAvailable();\n        }\n\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * This method inflates the PinView to be visible from Preview Layout\n *\n * @param context {@link PinViewBaseHelper} needs a context to inflate Edit layout\n */\n", "func_signal": "private void createEditModeView(Context context)", "code": "{\n    ((LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n            .inflate(R.layout.pin_view_edit_mode, this,\n                    true);\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Set focus on an empty PinBox or notify that {@link PinView} is completed.\n *\n * @param index PinBox position\n */\n", "func_signal": "private void chooseNextAction(int index)", "code": "{\n    if (index == -1) {\n        notifyPinViewCompleted();\n    } else {\n        moveToPinBox(index);\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Check for an empty PinBox {@link EditText} from the current PinBox.\n * Set focus in the next empty PinBox or notify that {@link PinView} is completed.\n */\n", "func_signal": "private void checkPinBoxesAvailable()", "code": "{\n\n    int index = -1;\n    int i = currentFocus + 1;\n    while (i != currentFocus) {\n\n        if (i > (mNumberPinBoxes - 1)) {\n            i = 0;\n        }\n\n        if (pinBoxIsEmpty(i)) {\n            index = i;\n            break;\n        }\n        i++;\n    }\n    chooseNextAction(index);\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * This method converts device specific pixels to density independent pixels.\n *\n * @param px      A value in px (pixels) unit. Which we need to convert into db\n * @param context Context to get resources and device specific display metrics\n * @return A float value to represent dp equivalent to px value\n */\n", "func_signal": "public static float convertPixelToDp(Context context, float px)", "code": "{\n    Resources resources = context.getResources();\n    DisplayMetrics metrics = resources.getDisplayMetrics();\n    return px / (metrics.densityDpi / 160f);\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewUtils.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Retrieve the state of {@link PinView} when orientation screen changed.\n */\n", "func_signal": "@Override\npublic void onRestoreInstanceState(Parcelable state)", "code": "{\n\n    if (state instanceof Bundle) {\n        Bundle bundle = (Bundle) state;\n        //load everything\n        PinViewSettings pinViewSettings = bundle.getParcelable(\"stateSettings\");\n        if (pinViewSettings != null) {\n            setSettings(pinViewSettings);\n        }\n        String pinResults = bundle.getString(\"statePinResults\");\n        setPinResults(pinResults);\n        state = bundle.getParcelable(\"instanceState\");\n    }\n    super.onRestoreInstanceState(state);\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinView.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Set a PinBox with all attributes\n *\n * @param editText to set attributes\n */\n", "func_signal": "private void setStylePinBox(EditText editText)", "code": "{\n    editText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(mNumberCharacters)});\n\n    if (mMaskPassword) {\n        editText.setTransformationMethod(PasswordTransformationMethod.getInstance());\n    }\n    else{\n        editText.setTransformationMethod(HideReturnsTransformationMethod.getInstance());\n    }\n\n    if (mNativePinBox) {\n        if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN) {\n            //noinspection deprecation\n            editText.setBackgroundDrawable(new EditText(getContext()).getBackground());\n        } else {\n            editText.setBackground(new EditText(getContext()).getBackground());\n        }\n    } else {\n        editText.setBackgroundResource(mCustomDrawablePinBox);\n    }\n\n    if (mColorTextPinBoxes != PinViewSettings.DEFAULT_TEXT_COLOR_PIN_BOX) {\n        editText.setTextColor(mColorTextPinBoxes);\n    }\n    editText.setTextSize(PinViewUtils.convertPixelToDp(getContext(), mTextSizePinBoxes));\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Set a Split with all attributes\n *\n * @param split to set attributes\n */\n", "func_signal": "private void setStylesSplit(TextView split)", "code": "{\n    if(split!=null){\n        split.setText(mSplit);\n        split.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,\n                ViewGroup.LayoutParams.MATCH_PARENT));\n        split.setGravity(Gravity.CENTER_VERTICAL);\n        if (mColorSplit != PinViewSettings.DEFAULT_COLOR_SPLIT) {\n            split.setTextColor(mColorSplit);\n        }\n        split.setTextSize(PinViewUtils.convertPixelToDp(getContext(), mSizeSplit));\n    }\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Keyboard back button\n */\n", "func_signal": "@Override\npublic boolean dispatchKeyEventPreIme(KeyEvent event)", "code": "{\n\n    if (mKeyboardMandatory) {\n        if (getContext() != null) {\n            InputMethodManager imm = (InputMethodManager) getContext()\n                    .getSystemService(Context.INPUT_METHOD_SERVICE);\n\n            if (imm.isActive() && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {\n                setImeVisibility(true);\n                return true;\n            }\n        }\n    }\n    return super.dispatchKeyEventPreIme(event);\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinViewBaseHelper.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n * Save current attributes in {@link PinView#mPinViewSettings}\n */\n", "func_signal": "private void saveSettings()", "code": "{\n    mPinViewSettings = new PinViewSettings.Builder()\n            .withColorSplit(mColorSplit)\n            .withColorTextPinBox(mColorTextPinBoxes)\n            .withColorTextTitles(mColorTextTitles)\n            .withCustomDrawablePinBox(mCustomDrawablePinBox)\n            .withDeleteOnClick(isDeleteOnClick())\n            .withNativePinBox(isNativePinBox())\n            .withSplit(getSplit())\n            .withMaskPassword(isMaskPassword())\n            .withKeyboardMandatory(isKeyboardMandatory())\n            .withNumberCharacters(getNumberCharacters())\n            .withSizeSplit(getSizeSplit())\n            .withTextSizePinBox(getTextSizePinBoxes())\n            .withTextSizeTitles(getTextSizeTitles())\n            .withNumberPinBoxes(getNumberPinBoxes())\n            .withPinTitles(getPinTitles())\n            .build();\n}", "path": "library\\src\\main\\java\\com\\dpizarro\\pinview\\library\\PinView.java", "repo_name": "DavidPizarro/PinView", "stars": 288, "license": "apache-2.0", "language": "java", "size": 9875}
{"docstring": "/**\n */\n", "func_signal": "private void loadMedia()", "code": "{\n    if (isSaveState) {\n        isSaveState = false;\n        Media media = mMediaPlayer.getMedia();\n        if (media != null && !media.isReleased()) {\n            canSeek = true;\n            canPause = true;\n            canInfo = true;\n            return;\n        }\n    }\n    //http://www.baidu\n    //rtmp://58.61.150.198/live/Livestream\n    // ftp://www.baidu\n    // sdcard/mp4.mp4\n    if (path.contains(\"://\")) {\n        final Media media = new Media(libVLC, Uri.parse(path));\n        if (Build.VERSION.SDK_INT <= KITKAT) {\n            media.setHWDecoderEnabled(false, false);\n        }\n\n        media.setEventListener(mMediaListener);\n        media.parseAsync(Media.Parse.FetchNetwork, 5 * 1000);\n        mMediaPlayer.setMedia(media);\n        media.release();\n    } else {\n        final Media media = new Media(libVLC, path);\n        if (Build.VERSION.SDK_INT <= KITKAT) {\n            media.setHWDecoderEnabled(false, false);\n        }\n        media.setEventListener(mMediaListener);\n        //    media.parseAsync(Media.Parse.FetchLocal);\n        mMediaPlayer.setMedia(media);\n        media.release();\n    }\n\n}", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcVideoPlayer.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Disable pause or seek buttons if the stream cannot be paused or seeked.\n * This requires the control interface to be a MediaPlayerControlExt\n */\n", "func_signal": "private void disableUnsupportedButtons()", "code": "{\n    if (mPlayer == null) {\n        return;\n    }\n\n    try {\n        if (mPauseButton != null && !mPlayer.canPause()) {\n            mPauseButton.setEnabled(false);\n        }\n        /*if (mRewButton != null && !mPlayer.canSeekBackward()) {\n            mRewButton.setEnabled(false);\n        }\n        if (mFfwdButton != null && !mPlayer.canSeekForward()) {\n            mFfwdButton.setEnabled(false);\n        }*/\n    } catch (IncompatibleClassChangeError ex) {\n        // We were given an old version of the interface, that doesn't have\n        // the canPause/canSeekXYZ methods. This is OK, it just means we\n        // assume the media can be paused and seeked, and so we don't disable\n        // the buttons.\n    }\n}", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcControllerView.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "//private int size;\n", "func_signal": "@Override\n public boolean onTouchEvent(MotionEvent event)", "code": "{\n     show(sDefaultTimeout);\n     return true;\n }", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcControllerView.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "// FIXME, this is INCORRECT, @headers are ignored\n", "func_signal": "public void setDataSource(Context context, Uri uri, Map<String, String> headers)\n        throws IOException, IllegalArgumentException, SecurityException, IllegalStateException", "code": "{\n    mCurrentMedia = new Media(mLibVLC, uri);\n    mMediaPlayer.setMedia(mCurrentMedia);\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\media\\MediaPlayer.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Starts the discovery. This MediaDiscoverer should be alive (not released).\n *\n * @return true the service is started\n */\n", "func_signal": "public boolean start()", "code": "{\n    if (isReleased())\n        throw new IllegalStateException(\"MediaDiscoverer is released\");\n    return nativeStart();\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\MediaDiscoverer.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Cancel the dump of the Uri.\n * Don't call this method if you already received the {@link Listener#onFinish(boolean)} callback.\n */\n", "func_signal": "@MainThread\npublic void cancel()", "code": "{\n    mMediaPlayer.stop();\n    mMediaPlayer.release();\n    mLibVLC.release();\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\util\\Dumper.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Stops the discovery. This MediaDiscoverer should be alive (not released).\n * (You can also call {@link #release() to stop the discovery directly}.\n */\n", "func_signal": "public void stop()", "code": "{\n    if (isReleased())\n        throw new IllegalStateException(\"MediaDiscoverer is released\");\n    nativeStop();\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\MediaDiscoverer.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * \u97f3\u4e50\u5f00\u59cb\u64ad\u653e\n *\n * @param playing\n */\n", "func_signal": "public void setPause(boolean playing)", "code": "{\n    if (playing) {//\u97f3\u4e50\u5f00\u59cb\n        pause();\n    }\n}", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcVideoPlayer.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n *\n * @param m Should not be released\n */\n", "func_signal": "protected MediaList(Media m)", "code": "{\n    nativeNewFromMedia(m);\n    init();\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\MediaList.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Increment internal ref count of the native object.\n * @return true if media is retained\n */\n", "func_signal": "public synchronized final boolean retain()", "code": "{\n    if (mNativeRefCount > 0) {\n        mNativeRefCount++;\n        return true;\n    } else\n        return false;\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\VLCObject.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n *\n * @param md Should not be released\n */\n", "func_signal": "protected MediaList(MediaDiscoverer md)", "code": "{\n    nativeNewFromMediaDiscoverer(md);\n    init();\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\MediaList.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Show the controller on screen. It will go away\n * automatically after 'timeout' milliseconds of inactivity.\n *\n * @param timeout The timeout in milliseconds. Use 0 to show\n *                the controller until hide() is called.\n */\n", "func_signal": "public void show(int timeout)", "code": "{\n    if (!mShowing ) {\n        setProgress();\n        if (mPauseButton != null) {\n            mPauseButton.requestFocus();\n        }\n        disableUnsupportedButtons();\n\n        /*LayoutParams tlp = new LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.WRAP_CONTENT,\n                Gravity.BOTTOM\n        );*/\n\n        controller.setVisibility(VISIBLE);\n        mShowing = true;\n    }\n    updatePausePlay();\n    updateFullScreen();\n\n    // cause the progress bar to be updated even if mShowing\n    // was already true.  This happens, for example, if we're\n    // paused with the progress bar showing the user hits play.\n    mHandler.sendEmptyMessage(SHOW_PROGRESS);\n\n    Message msg = mHandler.obtainMessage(FADE_OUT);\n    if (timeout != 0) {\n        mHandler.removeMessages(FADE_OUT);\n        mHandler.sendMessageDelayed(msg, timeout);\n    }\n}", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcControllerView.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Get the MediaList associated with the MediaDiscoverer.\n * This MediaDiscoverer should be alive (not released).\n *\n * @return MediaList. This MediaList should be released with {@link #release()}.\n */\n", "func_signal": "public MediaList getMediaList()", "code": "{\n    synchronized (this) {\n        if (mMediaList != null) {\n            mMediaList.retain();\n            return mMediaList;\n        }\n    }\n    final MediaList mediaList = new MediaList(this);\n    synchronized (this) {\n        mMediaList = mediaList;\n        mMediaList.retain();\n        return mMediaList;\n    }\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\MediaDiscoverer.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Release the native object if ref count is 1.\n *\n * After this call, native calls are not possible anymore.\n * You can still call others methods to retrieve cached values.\n * For example: if you parse, then release a media, you'll still be able to retrieve all Metas or Tracks infos.\n */\n", "func_signal": "public final void release()", "code": "{\n    int refCount = -1;\n    synchronized (this) {\n        if (mNativeRefCount == 0)\n            return;\n        if (mNativeRefCount > 0) {\n            refCount = --mNativeRefCount;\n        }\n        // clear event list\n        if (refCount == 0)\n            setEventListener(null);\n    }\n    if (refCount == 0) {\n        // detach events when not synchronized since onEvent is executed synchronized\n        nativeDetachEvents();\n        synchronized (this) {\n            onReleaseNative();\n        }\n    }\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\VLCObject.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Create a Dumper that will download an Uri into a local filesystem path\n * @param uri the Uri to dump\n * @param filepath local filesystem path where to dump the Uri\n * @param listener listener in order to be notified when the dump is finished\n */\n", "func_signal": "@MainThread\npublic Dumper(Uri uri, String filepath, Listener listener)", "code": "{\n    if (uri == null || filepath == null || listener == null)\n        throw new IllegalArgumentException(\"arguments shouldn't be null\");\n    mListener = listener;\n\n    ArrayList<String> options = new ArrayList<>(8);\n    options.add(\"--demux\");\n    options.add(\"dump2,none\");\n    options.add(\"--demuxdump-file\");\n    options.add(filepath);\n    options.add(\"--no-video\");\n    options.add(\"--no-audio\");\n    options.add(\"--no-spu\");\n    options.add(\"-vvv\");\n    mLibVLC = new LibVLC(null, options);\n\n    final Media media = new Media(mLibVLC, uri);\n    mMediaPlayer = new MediaPlayer(media);\n    mMediaPlayer.setEventListener(new MediaPlayer.EventListener() {\n        @Override\n        public void onEvent(MediaPlayer.Event event) {\n            switch (event.type) {\n                case MediaPlayer.Event.Buffering:\n                    mListener.onProgress(event.getBuffering());\n                    break;\n                case MediaPlayer.Event.EncounteredError:\n                case MediaPlayer.Event.EndReached:\n                    mListener.onFinish(event.type == MediaPlayer.Event.EndReached);\n                    cancel();\n                    break;\n            }\n\n        }\n    });\n    media.release();\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\util\\Dumper.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Set the view that acts as the anchor for the control view.\n * This can for example be a VideoView, or your Activity's main view\n */\n", "func_signal": "public void setControllerView(VlcVideoView videoView)", "code": "{\n\n\n    Logger.e(videoView.getWidth()+videoView.getHeight()+\"\");\n    controller= makeControllerView();\n    LayoutParams bottom = new LayoutParams(\n            ViewGroup.LayoutParams.MATCH_PARENT,\n            ViewGroup.LayoutParams.WRAP_CONTENT,\n            Gravity.BOTTOM\n    );\n    addView(controller, bottom);\n\n    controller.setVisibility(GONE);\n}", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcControllerView.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Get a Media at specified index.\n *\n * @param index index of the media\n * @return Media hold by MediaList. This Media should be released with {@link #release()}.\n */\n", "func_signal": "public synchronized Media getMediaAt(int index)", "code": "{\n    if (index < 0 || index >= getCount())\n        throw new IndexOutOfBoundsException();\n    final Media media = mMediaArray.get(index);\n    media.retain();\n    return media;\n}", "path": "vlcplayer\\src\\main\\java\\org\\videolan\\libvlc\\MediaList.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Remove the controller from the screen.\n */\n", "func_signal": "public void hide()", "code": "{\n    try {\n        controller.setVisibility(GONE);\n        mHandler.removeMessages(SHOW_PROGRESS);\n    } catch (IllegalArgumentException ex) {\n        Log.w(\"MediaController\", \"already removed\");\n    }\n    mShowing = false;\n}", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcControllerView.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "//baobab.wdjcdn.com/1456317490140jiyiyuetai_x264.mp4\";\n", "func_signal": "@Override\n    protected void onCreate(Bundle savedInstanceState)", "code": "{\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        VlcControllerView controllerView= (VlcControllerView) findViewById(R.id.controllerView);\n        videoView = (VlcVideoView) findViewById(R.id.videoView);\n        controller=new VlcMediaController(controllerView,videoView);\n        videoView.setMediaListenerEvent(controller);\n        videoView.startPlay(path);\n        controller.setFullScreenListener(new FullScreenListener() {\n            @Override\n            public void Fullscreen(boolean fullscreen) {\n                if (fullscreen) {\n                    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);\n                } else {\n                    getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n                }\n            }\n        });\n    }", "path": "app\\src\\main\\java\\com\\yplayer\\activity\\VideoPlayerActivity.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Create the view that holds the widgets that control playback.\n * Derived classes can override this to create their own.\n *\n * @return The controller view.\n * @hide This doesn't work as advertised\n */\n", "func_signal": "protected View makeControllerView()", "code": "{\n    LayoutInflater inflate = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    controller = inflate.inflate(R.layout.layout_controller, null);\n    initControllerView(controller);\n    return controller;\n}", "path": "vlcplayer\\src\\main\\java\\com\\vlcplayer\\VlcControllerView.java", "repo_name": "ymcao/YaPlayer", "stars": 264, "license": "None", "language": "java", "size": 78859}
{"docstring": "/**\n * Sets the {@link #mClockwiseArcColor} and invalidates the view\n *\n * @param color The hex color to set\n */\n", "func_signal": "public void setClockwiseReachedArcColor(int color)", "code": "{\n    this.mClockwiseArcColor = color;\n    initializePainters();\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Animate the change in progress of this view\n *\n * @param start    The value to start from, between 0-100\n * @param end      The value to set it to, between 0-100\n * @param duration The the time to run the animation over\n */\n", "func_signal": "public void animateProgress(int start, int end, int duration)", "code": "{\n    List<Boolean> list = new ArrayList<>();\n    list.add(true);\n    mCirclePieceFillList = list;\n    setProgress(0);\n    AnimatorSet set = new AnimatorSet();\n    set.playTogether(Glider.glide(Skill.QuadEaseInOut, duration, ObjectAnimator.ofFloat(this, \"progress\", start, end)));\n    set.setDuration(duration);\n    set = addListenersToSet(set);\n    set.start();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mStartLineEnabled} and invalidates the view. {@link #mStartLineEnabled}\n * defaults to true\n *\n * @param startLineEnabled True to display the line, false otherwise.\n */\n", "func_signal": "public void setStartLineEnabled(boolean startLineEnabled)", "code": "{\n    this.mStartLineEnabled = startLineEnabled;\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Convert from dp to pixels according to device density\n *\n * @param dp The length in dip to convert\n * @return The pixel equivalent for this device\n */\n", "func_signal": "public float dp2px(float dp)", "code": "{\n    final float scale = getResources().getDisplayMetrics().density;\n    return dp * scale + 0.5f;\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mClockwiseReachedArcWidth} and invalidates the view\n *\n * @param width The height in dp to set\n */\n", "func_signal": "public void setClockwiseReachedArcWidth(float width)", "code": "{\n    mClockwiseReachedArcWidth = width;\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * @param newProgress\n */\n", "func_signal": "public void setProgress(float newProgress)", "code": "{\n    if (mCirclePieceFillList != null && mCirclePieceFillList.size() > 0) {\n        if (mProgressSweepList == null || mProgressSweepList.size() != mCirclePieceFillList.size()) {\n            mProgressSweepList = new ArrayList<>();\n            for (int ps = 0; ps < mCirclePieceFillList.size(); ps++) {\n                mProgressSweepList.add(new ProgressSweep(newProgress, ps));\n            }\n        } else {\n            mProgressSweepList.get(0).enforceBounds(newProgress);\n            for (int ps = 0; ps < mCirclePieceFillList.size(); ps++) {\n                if (mProgressSweepList.get(ps) == null) {\n                    mProgressSweepList.set(ps, new ProgressSweep(newProgress, ps));\n                }\n                mProgressSweepList.get(ps).updateAngles(ps);\n            }\n        }\n    } else {\n        mCirclePieceFillList = new ArrayList<>();\n        mProgressSweepList = new ArrayList<>();\n        mCirclePieceFillList.add(false);\n        mProgressSweepList.add(new ProgressSweep(0, 0));\n    }\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Enforce the progress boundary at the max value allowed\n */\n", "func_signal": "public void enforceBounds(float newProgress)", "code": "{\n    if (Math.abs(newProgress) == Math.abs(mMax)) {\n        return;\n    }\n    progress = newProgress % mMax;\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mClockwiseOutlineArcColor} and invalidates the view\n *\n * @param color The hex color to set\n */\n", "func_signal": "public void setClockwiseOutlineArcColor(int color)", "code": "{\n    this.mClockwiseOutlineArcColor = color;\n    initializePainters();\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Initializes the paints used for the bars\n */\n", "func_signal": "private void initializePainters()", "code": "{\n    mClockwiseReachedArcPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    mClockwiseReachedArcPaint.setColor(mClockwiseArcColor);\n    mClockwiseReachedArcPaint.setAntiAlias(true);\n    mClockwiseReachedArcPaint.setStrokeWidth(mClockwiseReachedArcWidth);\n    mClockwiseReachedArcPaint.setStyle(Paint.Style.STROKE);\n\n    mCounterClockwiseReachedArcPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    mCounterClockwiseReachedArcPaint.setColor(mCounterClockwiseArcColor);\n    mCounterClockwiseReachedArcPaint.setAntiAlias(true);\n    mCounterClockwiseReachedArcPaint.setStrokeWidth(mCounterClockwiseReachedArcWidth);\n    mCounterClockwiseReachedArcPaint.setStyle(Paint.Style.STROKE);\n\n    mClockwiseOutlineArcPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    mClockwiseOutlineArcPaint.setColor(mClockwiseOutlineArcColor);\n    mClockwiseOutlineArcPaint.setAntiAlias(true);\n    mClockwiseOutlineArcPaint.setStrokeWidth(mClockwiseOutlineArcWidth);\n    mClockwiseOutlineArcPaint.setStyle(Paint.Style.STROKE);\n\n    mCounterClockwiseOutlineArcPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    mCounterClockwiseOutlineArcPaint.setColor(mCounterClockwiseOutlineArcColor);\n    mCounterClockwiseOutlineArcPaint.setAntiAlias(true);\n    mCounterClockwiseOutlineArcPaint.setStrokeWidth(mCounterClockwiseOutlineArcWidth);\n    mCounterClockwiseOutlineArcPaint.setStyle(Paint.Style.STROKE);\n\n    mCircleFillPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    mCircleFillPaint.setColor(mCircleFillColor);\n    mCircleFillPaint.setAntiAlias(true);\n    mCircleFillPaint.setStyle(Paint.Style.FILL);\n\n    //Defaults\n    mReachedArcPaint = mClockwiseReachedArcPaint;\n    mOutlineArcPaint = mClockwiseOutlineArcPaint;\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Adds the current listeners to the {@link android.animation.AnimatorSet}\n * before animation starts\n *\n * @param set The set to add listeners to\n * @return The set with listeners added\n */\n", "func_signal": "protected AnimatorSet addListenersToSet(AnimatorSet set)", "code": "{\n    if (set != null) {\n        set.addListener(this);\n        if (mListeners != null) {\n            for (Animator.AnimatorListener listener : mListeners) {\n                set.addListener(listener);\n            }\n        }\n    }\n    return set;\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Update the angles of the arcs\n */\n", "func_signal": "public void updateAngles(int piecePosition)", "code": "{\n    if (progress >= 0) {\n        int numPiece = mCirclePieceFillList.size();\n        if (mCirclePieceFillList.get(piecePosition)) {\n            reachedStart = (START_12 + ((360f / numPiece) * piecePosition)) % 360f;\n            reachedSweep = (progress / mMax * 360f) / numPiece;\n            outlineStart = (reachedStart + reachedSweep) % 360f;\n            outlineSweep = (360f / numPiece) - reachedSweep;\n        } else {\n            reachedStart = (START_12 + ((360f / numPiece) * piecePosition)) % 360f;\n            reachedSweep = 0;\n            outlineStart = (reachedStart + reachedSweep) % 360f;\n            outlineSweep = 360f / numPiece;\n        }\n        //paints\n        mReachedArcPaint = mClockwiseReachedArcPaint;\n        mOutlineArcPaint = mClockwiseOutlineArcPaint;\n    } else {\n        reachedSweep = Math.abs(progress / mMax * 360f);\n        reachedStart = START_12 - reachedSweep;\n        outlineStart = START_12;\n        outlineSweep = 360f - reachedSweep;\n\n        //paints\n        mReachedArcPaint = mCounterClockwiseReachedArcPaint;\n        mOutlineArcPaint = mCounterClockwiseOutlineArcPaint;\n    }\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mPrefix}\n *\n * @param prefix The prefix\n */\n", "func_signal": "public void setPrefix(String prefix)", "code": "{\n    if (prefix == null)\n        mPrefix = \"\";\n    else {\n        mPrefix = prefix;\n    }\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Calculates the coordinates of {@link android.graphics.RectF} that\n * are perfectly within the available window\n *\n * @param offset Half the width of the pain stroke\n * @return The rectF\n */\n", "func_signal": "private RectF getArcRect(float offset)", "code": "{\n    RectF workingSurface = new RectF();\n    workingSurface.left = getPaddingLeft() + offset;\n    workingSurface.top = getPaddingTop() + offset;\n    workingSurface.right = getWidth() - getPaddingRight() - offset;\n    workingSurface.bottom = getHeight() - getPaddingBottom() - offset;\n\n    float width = workingSurface.right - workingSurface.left;\n    float height = workingSurface.bottom - workingSurface.top;\n\n    this.mDiameter = Math.min(width, height);\n    float radius = mDiameter / 2;\n    float centerX = width / 2;\n    float centerY = height / 2;\n\n    //float left, float top, float right, float bottom\n    return new RectF(centerX - radius + offset, centerY - radius + offset, centerX + radius + offset, centerY + radius + offset);\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mClockwiseOutlineArcWidth} and invalidates the view\n *\n * @param width The height in dp to set\n */\n", "func_signal": "public void setClockwiseOutlineArcWidth(float width)", "code": "{\n    mClockwiseOutlineArcWidth = width;\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Loads the styles and attributes defined in the xml tag of this class\n *\n * @param attrs        The attributes to read from\n * @param defStyleAttr The styles to read from\n */\n", "func_signal": "public void loadStyledAttributes(AttributeSet attrs, int defStyleAttr)", "code": "{\n    if (attrs != null) {\n        final TypedArray attributes = mContext.getTheme().obtainStyledAttributes(attrs, R.styleable.CircularViewPager,\n                defStyleAttr, 0);\n\n        mStartLineEnabled = attributes.getBoolean(R.styleable.CircularViewPager_progress_start_line_enabled, true);\n\n        mClockwiseArcColor = attributes.getColor(R.styleable.CircularViewPager_progress_arc_clockwise_color, default_clockwise_reached_color);\n        mCounterClockwiseArcColor = attributes.getColor(R.styleable.CircularViewPager_progress_arc_counter_clockwise_color, default_counter_clockwise_reached_color);\n        mClockwiseOutlineArcColor = attributes.getColor(R.styleable.CircularViewPager_progress_arc_clockwise_outline_color, default_clockwise_outline_color);\n        mCounterClockwiseOutlineArcColor = attributes.getColor(R.styleable.CircularViewPager_progress_arc_counter_clockwise_outline_color, default_counter_clockwise_outline_color);\n\n        mClockwiseReachedArcWidth = attributes.getDimension(R.styleable.CircularViewPager_progress_arc_clockwise_width, default_reached_arc_width);\n        mCounterClockwiseReachedArcWidth = attributes.getDimension(R.styleable.CircularViewPager_progress_arc_counter_clockwise_width, default_reached_arc_width);\n        mClockwiseOutlineArcWidth = attributes.getDimension(R.styleable.CircularViewPager_progress_arc_clockwise_outline_width, default_outline_arc_width);\n        mCounterClockwiseOutlineArcWidth = attributes.getDimension(R.styleable.CircularViewPager_progress_arc_counter_clockwise_outline_width, default_outline_arc_width);\n\n        mCircleFillColor = attributes.getColor(R.styleable.CircularViewPager_progress_pager_fill_circle_color, default_circle_fill_color);\n        mCircleFillMode = attributes.getInt(R.styleable.CircularViewPager_progress_pager_fill_mode, default_circle_fill_mode);\n        cicleFillEnable(mCircleFillColor != default_circle_fill_color);\n\n        setMax(attributes.getInt(R.styleable.CircularViewPager_progress_arc_max, 100));\n        setProgress(attributes.getInt(R.styleable.CircularViewPager_arc_progress, 0));\n\n        attributes.recycle();\n\n        initializePainters();\n    }\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mCounterClockwiseOutlineArcColor} and invalidates the view\n *\n * @param color The hex color to set\n */\n", "func_signal": "public void setCounterClockwiseOutlineArcColor(int color)", "code": "{\n    this.mCounterClockwiseOutlineArcColor = color;\n    initializePainters();\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mMax} and invalidates the view\n *\n * @param max The height in dp to set\n */\n", "func_signal": "public void setMax(int max)", "code": "{\n    if (max > 0) {\n        this.mMax = max;\n        invalidate();\n    }\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mCounterClockwiseReachedArcWidth} and invalidates the view\n *\n * @param width The height in dp to set\n */\n", "func_signal": "public void setCounterClockwiseReachedArcWidth(float width)", "code": "{\n    this.mCounterClockwiseReachedArcWidth = width;\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mCircleFillColor} and invalidates the view\n *\n * @param color The hex color to set\n */\n", "func_signal": "public void setCircleFillColor(int color)", "code": "{\n    this.mCircleFillColor = color;\n    cicleFillEnable(mCircleFillColor != default_circle_fill_color);\n    initializePainters();\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Sets the {@link #mCounterClockwiseArcColor} and invalidates the view\n *\n * @param color The hex color to set\n */\n", "func_signal": "public void setCounterClockwiseArcColor(int color)", "code": "{\n    this.mCounterClockwiseArcColor = color;\n    initializePainters();\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\github\\omadahealth\\circularbarpager\\library\\CircularBar.java", "repo_name": "omadahealth/CircularBarPager", "stars": 414, "license": "mit", "language": "java", "size": 5050}
{"docstring": "/**\n * Error checking tests for constructor.\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\n@Test\npublic void constructorErrorTest()", "code": "{\n    // word length too small\n    try {\n        new BigEndianAscendingWordDeserializer(0/*wordLength, below minimum of 1*/, 0/*bytePadding, arbitrary*/, new byte[1]/*bytes, arbitrary, not used here*/);\n        fail(\"Should complain about too-short words.\");\n    } catch(final IllegalArgumentException e) {\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n    }\n\n    // word length too large\n    try {\n        new BigEndianAscendingWordDeserializer(65/*wordLength, above maximum of 64*/, 0/*bytePadding, arbitrary*/, new byte[1]/*bytes, arbitrary, not used here*/);\n        fail(\"Should complain about too-long words.\");\n    } catch(final IllegalArgumentException e) {\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n    }\n\n    // byte padding negative\n    try {\n        new BigEndianAscendingWordDeserializer(5/*wordLength, arbitrary*/, -1/*bytePadding, too small*/, new byte[1]/*bytes, arbitrary, not used here*/);\n        fail(\"Should complain about negative byte padding.\");\n    } catch(final IllegalArgumentException e) {\n        assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\serialization\\BigEndianAscendingWordDeserializerTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n/**\n * Tests {@link BitVector#registerIterator()}\n */\n", "func_signal": "@Test\npublic void registerIteratorTest()", "code": "{\n    { // scoped locally for sanity\n        // NOTE:  registers are only 5bits wide\n        final BitVector vector1 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n        final BitVector vector2 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n        final BitVector vector3 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n        final BitVector vector4 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n\n        for(int i=0; i<128/*2^7*/; i++) {\n            vector1.setRegister(i, 0x1F);\n            vector2.setRegister(i, (i & 0x1F));\n            vector3.setRegister(i, ((127 - i) & 0x1F));\n            vector4.setRegister(i, 0x15);\n        }\n\n        final LongIterator registerIterator1 = vector1.registerIterator();\n        final LongIterator registerIterator2 = vector2.registerIterator();\n        final LongIterator registerIterator3 = vector3.registerIterator();\n        final LongIterator registerIterator4 = vector4.registerIterator();\n        for(int i=0; i<128/*2^7*/; i++) {\n            assertEquals(registerIterator1.hasNext(), true);\n            assertEquals(registerIterator2.hasNext(), true);\n            assertEquals(registerIterator3.hasNext(), true);\n            assertEquals(registerIterator4.hasNext(), true);\n\n            assertEquals(registerIterator1.next(), 0x1F);\n            assertEquals(registerIterator2.next(), (i & 0x1F));\n            assertEquals(registerIterator3.next(), ((127 - i) & 0x1F));\n            assertEquals(registerIterator4.next(), 0x15);\n        }\n        assertEquals(registerIterator1.hasNext(), false/*no more*/);\n        assertEquals(registerIterator2.hasNext(), false/*no more*/);\n        assertEquals(registerIterator3.hasNext(), false/*no more*/);\n        assertEquals(registerIterator4.hasNext(), false/*no more*/);\n    }\n\n    { // scoped locally for sanity\n        // Vectors that are shorter than one word\n        assertIterator(1, 12/* 1*12=12 bits, fewer than a single word */);\n        assertIterator(2, 12/* 2*12=24 bits, fewer than a single word */);\n        assertIterator(3, 12/* 3*12=36 bits, fewer than a single word */);\n        assertIterator(4, 12/* 4*12=48 bits, fewer than a single word */);\n\n        // Vectors that don't fit exactly into longs\n        assertIterator(5, 16/* 5*16=80 bits */);\n        assertIterator(5, 32/* 5*32=160 bits */);\n    }\n\n    // Iterate over vectors that are padded\n}", "path": "src\\test\\java\\net\\agkn\\hll\\util\\BitVectorTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "/**\n * Smoke test using 64-bit short words and special word values.\n */\n", "func_signal": "@Test\npublic void smokeTest64BitWord()", "code": "{\n    final BigEndianAscendingWordSerializer serializer =\n        new BigEndianAscendingWordSerializer(64/*wordLength*/,\n                                             5/*wordCount*/,\n                                             0/*bytePadding, arbitrary*/);\n\n    // Check that the sign bit is being preserved.\n    serializer.writeWord(-1L);\n    serializer.writeWord(-112894714L);\n\n    // Check \"special\" values\n    serializer.writeWord(0L);\n    serializer.writeWord(Long.MAX_VALUE);\n    serializer.writeWord(Long.MIN_VALUE);\n\n    final byte[] bytes = serializer.getBytes();\n\n    final BigEndianAscendingWordDeserializer deserializer =\n        new BigEndianAscendingWordDeserializer(64/*wordLength*/, 0/*bytePadding*/, bytes);\n\n    assertEquals(deserializer.totalWordCount(), 5/*wordCount*/);\n\n    assertEquals(deserializer.readWord(), -1L);\n    assertEquals(deserializer.readWord(), -112894714L);\n    assertEquals(deserializer.readWord(), 0L);\n    assertEquals(deserializer.readWord(), Long.MAX_VALUE);\n    assertEquals(deserializer.readWord(), Long.MIN_VALUE);\n}", "path": "src\\test\\java\\net\\agkn\\hll\\serialization\\BigEndianAscendingWordDeserializerTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "/**\n * Smoke test for {@link HLL#cardinality()} and the proper use of the\n * uncorrected estimator\n */\n", "func_signal": "@Test\npublic void normalRangeSmokeTest()", "code": "{\n    final int log2m = 11;\n    final int regwidth = 5;\n    // regwidth = 5, so hash space is\n    // log2m + (2^5 - 1 - 1), so L = log2m + 30\n    final int l = log2m + 30;\n    final int m = (1 << log2m);\n    final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n\n    // all registers at 'medium' value\n    {\n        final int registerValue = 7/*chosen to ensure neither correction kicks in*/;\n        for(int i=0; i<m; i++) {\n            hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i, registerValue));\n        }\n\n        final long cardinality = hll.cardinality();\n\n\n        // Simplified estimator when all registers take same value: alpha / (m/2^val)\n        final double estimator = HLLUtil.alphaMSquared(m)/((double)m/Math.pow(2, registerValue));\n\n        // Assert conditions for uncorrected range\n        assertTrue(estimator <= Math.pow(2, l)/30);\n        assertTrue(estimator > (5 * m /(double)2));\n\n        final long expected = (long)Math.ceil(estimator);\n        assertEquals(cardinality, expected);\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\FullHLLTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n/**\n * @param wordLength the length in bits of the words to be deserialized. Must\n *        be less than or equal to 64 and greater than or equal to 1.\n * @param bytePadding the number of leading bytes that pad the serialized words.\n *        Must be greater than or equal to zero.\n * @param bytes the byte array containing the serialized words. Cannot be\n *        <code>null</code>.\n */\n", "func_signal": "public BigEndianAscendingWordDeserializer(final int wordLength, final int bytePadding, final byte[] bytes)", "code": "{\n    if((wordLength < 1) || (wordLength > 64)) {\n        throw new IllegalArgumentException(\"Word length must be >= 1 and <= 64. (was: \" + wordLength + \")\");\n    }\n\n    if(bytePadding < 0) {\n        throw new IllegalArgumentException(\"Byte padding must be >= zero. (was: \" + bytePadding + \")\");\n    }\n\n    this.wordLength = wordLength;\n    this.bytes = bytes;\n    this.bytePadding = bytePadding;\n\n    final int dataBytes = (bytes.length - bytePadding);\n    final long dataBits = (dataBytes * BITS_PER_BYTE);\n\n    this.wordCount = (int)(dataBits/wordLength);\n\n    currentWordIndex = 0;\n}", "path": "src\\main\\java\\net\\agkn\\hll\\serialization\\BigEndianAscendingWordDeserializer.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "/**\n * Smoke test for {@link HLL#cardinality()} and the proper use of the large\n * range correction.\n */\n", "func_signal": "@Test\npublic void largeRangeSmokeTest()", "code": "{\n    final int log2m = 12;\n    final int regwidth = 5;\n    // regwidth = 5, so hash space is\n    // log2m + (2^5 - 1 - 1), so L = log2m + 30\n    final int l = log2m + 30;\n    final int m = (1 << log2m);\n    final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n\n    {\n        final int registerValue = 31/*chosen to ensure large correction kicks in*/;\n        for(int i=0; i<m; i++) {\n            hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i, registerValue));\n        }\n\n        final long cardinality = hll.cardinality();\n\n\n        // Simplified estimator when all registers take same value: alpha / (m/2^val)\n        final double estimator = HLLUtil.alphaMSquared(m)/((double)m/Math.pow(2, registerValue));\n\n        // Assert conditions for large range\n\n        assertTrue(estimator > Math.pow(2,l)/30);\n\n        // Large range correction: -2^L * log(1 - E/2^L)\n        final long expected = (long)Math.ceil(-1.0 * Math.pow(2, l) * Math.log(1.0 - estimator/Math.pow(2, l)));\n        assertEquals(cardinality, expected);\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\FullHLLTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ------------------------------------------------------------------------\n/**\n * Runs a test which serializes and deserializes random word values.\n *\n * @param wordLength the length of words to test\n * @param bytePadding the number of bytes padding the byte array\n * @param wordCount the number of word values to test\n * @param seed the seed to the random value generator\n */\n", "func_signal": "private static void runRandomTest(final int wordLength, final int bytePadding, final int wordCount, final long seed)", "code": "{\n    final Random random = new Random(seed);\n    final Random verificationRandom = new Random(seed);\n\n    final long wordMask;\n    if(wordLength == 64) {\n        wordMask = ~0L;\n    } else {\n        wordMask = (1L << wordLength) - 1L;\n    }\n\n    final BigEndianAscendingWordSerializer serializer =\n        new BigEndianAscendingWordSerializer(wordLength/*wordLength, arbitrary*/,\n                                             wordCount,\n                                             bytePadding/*bytePadding, arbitrary*/);\n\n    for(int i=0; i<wordCount; i++) {\n        final long value = random.nextLong() & wordMask;\n        serializer.writeWord(value);\n    }\n\n    final byte[] bytes = serializer.getBytes();\n\n    final BigEndianAscendingWordDeserializer deserializer =\n        new BigEndianAscendingWordDeserializer(wordLength, bytePadding, bytes);\n\n    assertEquals(deserializer.totalWordCount(), wordCount);\n    for(int i=0; i<wordCount; i++) {\n        assertEquals(deserializer.readWord(), (verificationRandom.nextLong() & wordMask));\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\serialization\\BigEndianAscendingWordDeserializerTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// TODO union test\n/**\n * Smoke test for {@link HLL#cardinality(int)} and the proper use of the\n * small range correction.\n */\n", "func_signal": "@Test\npublic void smallRangeSmokeTest()", "code": "{\n    final int log2m = 11;\n    final int m = (1 << log2m);\n    final int regwidth = 5;\n\n    // only one register set\n    {\n        final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n        hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 0/*ix*/, 1/*val*/));\n\n        final long cardinality = hll.cardinality();\n\n        // Trivially true that small correction conditions hold: one register\n        // set implies zeroes exist, and estimator trivially smaller than 5m/2.\n        // Small range correction: m * log(m/V)\n        final long expected = (long)Math.ceil(m * Math.log((double)m / (m - 1)/*# of zeroes*/));\n        assertEquals(cardinality, expected);\n    }\n\n    // all but one register set\n    {\n        final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n        for(int i=0; i<(m - 1); i++) {\n            hll.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i/*ix*/, 1/*val*/));\n        }\n\n        // Trivially true that small correction conditions hold: all but\n        // one register set implies a zero exists, and estimator trivially\n        // smaller than 5m/2 since it's alpha / ((m-1)/2)\n        final long cardinality = hll.cardinality();\n\n        // Small range correction: m * log(m/V)\n        final long expected = (long)Math.ceil(m * Math.log((double)m / 1/*# of zeroes*/));\n        assertEquals(cardinality, expected);\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\FullHLLTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n/**\n * Tests {@link BitVector#setMaxRegister(long, long)}\n */\n", "func_signal": "@Test\npublic void setMaxRegisterTest()", "code": "{\n    final BitVector vector = new BitVector(5/*width*/, 128/*count, 2^7*/);\n\n    vector.setRegister(0, 10);\n    // should replace with a larger value\n    vector.setMaxRegister(0, 11);\n    assertEquals(vector.getRegister(0), 11);\n    // should not replace with a smaller or equal value\n    vector.setMaxRegister(0, 9);\n    assertEquals(vector.getRegister( 0), 11);\n    vector.setMaxRegister(0, 11);\n    assertEquals(vector.getRegister(0), 11);\n}", "path": "src\\test\\java\\net\\agkn\\hll\\util\\BitVectorTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n/**\n * Tests {@link HLL#clear()}.\n */\n", "func_signal": "@Test\npublic void clearTest()", "code": "{\n    final int regwidth = 5;\n    final int log2m = 4/*16 registers per counter*/;\n    final int m = 1 << log2m;\n\n    final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n    final BitVector bitVector = (BitVector)getInternalState(hll, \"probabilisticStorage\")/*for testing convenience*/;\n    for(int i=0; i<m; i++)\n        bitVector.setRegister(i, i);\n\n    hll.clear();\n    for(int i=0; i<m; i++){\n        assertEquals(bitVector.getRegister(i), 0L/*default value of register*/);\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\FullHLLTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ************************************************************************\n/**\n * Computes the bit-width of HLL registers necessary to estimate a set of\n * the specified cardinality.\n *\n * @param  expectedUniqueElements an upper bound on the number of unique\n *         elements that are expected.  This must be greater than zero.\n * @return a register size in bits (i.e. <code>log2(log2(n))</code>)\n */\n", "func_signal": "public static int registerBitSize(final long expectedUniqueElements)", "code": "{\n    return Math.max(HLL.MINIMUM_REGWIDTH_PARAM,\n                    (int)Math.ceil(NumberUtil.log2(NumberUtil.log2(expectedUniqueElements))));\n}", "path": "src\\main\\java\\net\\agkn\\hll\\util\\HLLUtil.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "/**\n * @param schemaVersion the schema version number of the HLL. This must\n *        be greater than or equal to zero.\n * @param type the {@link HLLType type} of the HLL. This cannot\n *        be <code>null</code>.\n * @param registerCountLog2 the log-base-2 register count parameter for\n *        probabilistic HLLs. This must be greater than or equal to zero.\n * @param registerWidth the register width parameter for probabilistic\n *        HLLs. This must be greater than or equal to zero.\n * @param log2ExplicitCutoff the log-base-2 of the explicit cardinality cutoff,\n *        if it is explicitly defined. (If <code>explicitOff</code> or\n *        <code>explicitAuto</code> is <code>true</code> then this has no\n *        meaning.)\n * @param explicitOff the flag for 'explicit off'-mode, where the\n *        {@link HLLType#EXPLICIT} representation is not used. Both this and\n *        <code>explicitAuto</code> cannot be <code>true</code> at the same\n *        time.\n * @param explicitAuto the flag for 'explicit auto'-mode, where the\n *        {@link HLLType#EXPLICIT} representation's promotion cutoff is\n *        determined based on in-memory size automatically. Both this and\n *        <code>explicitOff</code> cannot be <code>true</code> at the same\n *        time.\n * @param sparseEnabled the flag for 'sparse-enabled'-mode, where the\n *        {@link HLLType#SPARSE} representation is used.\n */\n", "func_signal": "public HLLMetadata(final int schemaVersion,\n                   final HLLType type,\n                   final int registerCountLog2,\n                   final int registerWidth,\n                   final int log2ExplicitCutoff,\n                   final boolean explicitOff,\n                   final boolean explicitAuto,\n                   final boolean sparseEnabled)", "code": "{\n    this.schemaVersion = schemaVersion;\n    this.type = type;\n    this.registerCountLog2 = registerCountLog2;\n    this.registerWidth = registerWidth;\n    this.log2ExplicitCutoff = log2ExplicitCutoff;\n    this.explicitOff = explicitOff;\n    this.explicitAuto = explicitAuto;\n    this.sparseEnabled = sparseEnabled;\n}", "path": "src\\main\\java\\net\\agkn\\hll\\serialization\\HLLMetadata.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ************************************************************************\n// Assertion Helpers\n/**\n * Asserts that the two HLLs are register-wise equal.\n */\n", "func_signal": "private static void assertElementsEqual(final HLL hllA, final HLL hllB)", "code": "{\n    final BitVector bitVectorA = (BitVector)getInternalState(hllA, \"probabilisticStorage\")/*for testing convenience*/;\n    final BitVector bitVectorB = (BitVector)getInternalState(hllA, \"probabilisticStorage\")/*for testing convenience*/;\n\n    final LongIterator iterA = bitVectorA.registerIterator();\n    final LongIterator iterB = bitVectorB.registerIterator();\n\n    for(;iterA.hasNext() && iterB.hasNext();) {\n        assertEquals(iterA.next(), iterB.next());\n    }\n    assertFalse(iterA.hasNext());\n    assertFalse(iterB.hasNext());\n}", "path": "src\\test\\java\\net\\agkn\\hll\\FullHLLTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "/**\n * Tests {@link BitVector#getRegister(long)} and {@link BitVector#setRegister(long, long)}.\n */\n", "func_signal": "@Test\npublic void getSetRegisterTest()", "code": "{\n    { // locally scoped for sanity\n        // NOTE:  registers are only 5bits wide\n        final BitVector vector1 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n        final BitVector vector2 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n        final BitVector vector3 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n        final BitVector vector4 = new BitVector(5/*width*/, 128/*count, 2^7*/);\n\n        for(int i=0; i<128/*2^7*/; i++) {\n            vector1.setRegister(i, 0x1F);\n            vector2.setRegister(i, (i & 0x1F));\n            vector3.setRegister(i, ((127 - i) & 0x1F));\n            vector4.setRegister(i, 0x15);\n        }\n\n        for(int i=0; i<128/*2^7*/; i++) {\n            assertEquals(vector1.getRegister(i), 0x1F);\n            assertEquals(vector2.getRegister(i), (i & 0x1F));\n            assertEquals(vector3.getRegister(i), ((127 - i) & 0x1F));\n            assertEquals(vector4.getRegister(i), 0x15);\n        }\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\util\\BitVectorTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n/**\n * Tests the bounds on a register's value for a given raw input value.\n */\n", "func_signal": "@Test\npublic void registerValueTest()", "code": "{\n    final int log2m = 4/*small enough to make testing easy (addRaw() shifts by one byte)*/;\n\n    // register width 4 (the minimum size)\n    { // scoped locally for sanity\n        final int regwidth = 4;\n        final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n        final BitVector bitVector = (BitVector)getInternalState(hll, \"probabilisticStorage\")/*for testing convenience*/;\n\n        // lower-bounds of the register\n        hll.addRaw(0x000000000000001L/*'j'=1*/);\n        assertEquals(bitVector.getRegister(1/*'j'*/), 0);\n\n        hll.addRaw(0x0000000000000012L/*'j'=2*/);\n        assertEquals(bitVector.getRegister(2/*'j'*/), 1);\n\n        hll.addRaw(0x0000000000000023L/*'j'=3*/);\n        assertEquals(bitVector.getRegister(3/*'j'*/), 2);\n\n        hll.addRaw(0x0000000000000044L/*'j'=4*/);\n        assertEquals(bitVector.getRegister(4/*'j'*/), 3);\n\n        hll.addRaw(0x0000000000000085L/*'j'=5*/);\n        assertEquals(bitVector.getRegister(5/*'j'*/), 4);\n\n        // upper-bounds of the register\n        // NOTE:  bear in mind that BitVector itself does ensure that\n        //        overflow of a register is prevented\n        hll.addRaw(0x0000000000010006L/*'j'=6*/);\n        assertEquals(bitVector.getRegister(6/*'j'*/), 13);\n\n        hll.addRaw(0x0000000000020007L/*'j'=7*/);\n        assertEquals(bitVector.getRegister(7/*'j'*/), 14);\n\n        hll.addRaw(0x0000000000040008L/*'j'=8*/);\n        assertEquals(bitVector.getRegister(8/*'j'*/), 15);\n\n        hll.addRaw(0x0000000000080009L/*'j'=9*/);\n        assertEquals(bitVector.getRegister(9/*'j'*/), 15/*overflow*/);\n\n        // sanity checks to ensure that no other bits above the lowest-set\n        // bit matters\n        // NOTE:  same as case 'j = 6' above\n        hll.addRaw(0x000000000003000AL/*'j'=10*/);\n        assertEquals(bitVector.getRegister(10/*'j'*/), 13);\n\n        hll.addRaw(0x000000000011000BL/*'j'=11*/);\n        assertEquals(bitVector.getRegister(11/*'j'*/), 13);\n    }\n\n    // register width 5\n    { // scoped locally for sanity\n        final int regwidth = 5;\n        final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n        final BitVector bitVector = (BitVector)getInternalState(hll, \"probabilisticStorage\")/*for testing convenience*/;\n\n        // lower-bounds of the register\n        hll.addRaw(0x0000000000000001L/*'j'=1*/);\n        assertEquals(bitVector.getRegister(1/*'j'*/), 0);\n\n        hll.addRaw(0x0000000000000012L/*'j'=2*/);\n        assertEquals(bitVector.getRegister(2/*'j'*/), 1);\n\n        hll.addRaw(0x0000000000000023L/*'j'=3*/);\n        assertEquals(bitVector.getRegister(3/*'j'*/), 2);\n\n        hll.addRaw(0x0000000000000044L/*'j'=4*/);\n        assertEquals(bitVector.getRegister(4/*'j'*/), 3);\n\n        hll.addRaw(0x0000000000000085L/*'j'=5*/);\n        assertEquals(bitVector.getRegister(5/*'j'*/), 4);\n\n        // upper-bounds of the register\n        // NOTE:  bear in mind that BitVector itself does ensure that\n        //        overflow of a register is prevented\n        hll.addRaw(0x0000000100000006L/*'j'=6*/);\n        assertEquals(bitVector.getRegister(6/*'j'*/), 29);\n\n        hll.addRaw(0x0000000200000007L/*'j'=7*/);\n        assertEquals(bitVector.getRegister(7/*'j'*/), 30);\n\n        hll.addRaw(0x0000000400000008L/*'j'=8*/);\n        assertEquals(bitVector.getRegister(8/*'j'*/), 31);\n\n        hll.addRaw(0x0000000800000009L/*'j'=9*/);\n        assertEquals(bitVector.getRegister(9/*'j'*/), 31/*overflow*/);\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\FullHLLTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n// Serialization\n/**\n * Tests {@link HLL#toBytes(ISchemaVersion)} and {@link HLL#fromBytes(byte[])}.\n */\n", "func_signal": "@Test\npublic void toFromBytesTest()", "code": "{\n    final int log2m = 11/*arbitrary*/;\n    final int regwidth = 5;\n\n    final ISchemaVersion schemaVersion = SerializationUtil.DEFAULT_SCHEMA_VERSION;\n    final HLLType type = HLLType.FULL;\n    final int padding = schemaVersion.paddingBytes(type);\n    final int dataByteCount = ProbabilisticTestUtil.getRequiredBytes(regwidth, (1 << log2m)/*aka 2^log2m = m*/);\n    final int expectedByteCount = padding + dataByteCount;\n\n    {// Should work on an empty element\n        final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n        final byte[] bytes = hll.toBytes(schemaVersion);\n\n        // assert output length is correct\n        assertEquals(bytes.length, expectedByteCount);\n\n        final HLL inHLL = HLL.fromBytes(bytes);\n\n        // assert register values correct\n        assertElementsEqual(hll, inHLL);\n    }\n    {// Should work on a partially filled element\n        final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n\n        for(int i=0; i<3; i++) {\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, i, (i+9));\n            hll.addRaw(rawValue);\n        }\n\n        final byte[] bytes = hll.toBytes(schemaVersion);\n\n        // assert output length is correct\n        assertEquals(bytes.length, expectedByteCount);\n\n        final HLL inHLL = HLL.fromBytes(bytes);\n\n        // assert register values correct\n        assertElementsEqual(hll, inHLL);\n    }\n    {// Should work on a full set\n        final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary, unused*/, HLLType.FULL);\n\n        for(int i=0; i<(1 << log2m)/*aka 2^log2m*/; i++) {\n            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, i, (i % 9) + 1);\n            hll.addRaw(rawValue);\n        }\n\n        final byte[] bytes = hll.toBytes(schemaVersion);\n\n        // assert output length is correct\n        assertEquals(bytes.length, expectedByteCount);\n\n        final HLL inHLL = HLL.fromBytes(bytes);\n\n        // assert register values correct\n        assertElementsEqual(hll, inHLL);\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\FullHLLTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n/* (non-Javadoc)\n * @see net.agkn.hll.serialization.IWordDeserializer#readWord()\n */\n", "func_signal": "@Override\npublic long readWord()", "code": "{\n    final long word = readWord(currentWordIndex);\n    currentWordIndex++;\n\n    return word;\n}", "path": "src\\main\\java\\net\\agkn\\hll\\serialization\\BigEndianAscendingWordDeserializer.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "/**\n * Runs a test which serializes and deserializes ascending (from zero) word values.\n *\n * @param wordLength the length of words to test\n * @param bytePadding the number of bytes padding the byte array\n * @param wordCount the number of word values to test\n */\n", "func_signal": "private static void runAscendingTest(final int wordLength, final int bytePadding, final int wordCount)", "code": "{\n    final long wordMask;\n    if(wordLength == 64) {\n        wordMask = ~0L;\n    } else {\n        wordMask = (1L << wordLength) - 1L;\n    }\n\n    final BigEndianAscendingWordSerializer serializer =\n        new BigEndianAscendingWordSerializer(wordLength/*wordLength, arbitrary*/,\n                                             wordCount,\n                                             bytePadding/*bytePadding, arbitrary*/);\n\n    for(long i=0; i<wordCount; i++) {\n        serializer.writeWord(i & wordMask);\n    }\n\n    final byte[] bytes = serializer.getBytes();\n\n    final BigEndianAscendingWordDeserializer deserializer =\n        new BigEndianAscendingWordDeserializer(wordLength, bytePadding, bytes);\n\n    assertEquals(deserializer.totalWordCount(), wordCount);\n    for(long i=0; i<wordCount; i++) {\n        assertEquals(deserializer.readWord(), i & wordMask);\n    }\n}", "path": "src\\test\\java\\net\\agkn\\hll\\serialization\\BigEndianAscendingWordDeserializerTest.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ========================================================================\n/**\n * Computes the 'alpha-m-squared' constant used by the HyperLogLog algorithm.\n *\n * @param  m this must be a power of two, cannot be less than\n *         16 (2<sup>4</sup>), and cannot be greater than 65536 (2<sup>16</sup>).\n * @return gamma times <code>registerCount</code> squared where gamma is\n *         based on the value of <code>registerCount</code>.\n * @throws IllegalArgumentException if <code>registerCount</code> is less\n *         than 16.\n */\n", "func_signal": "public static double alphaMSquared(final int m)", "code": "{\n    switch(m) {\n        case 1/*2^0*/:\n        case 2/*2^1*/:\n        case 4/*2^2*/:\n        case 8/*2^3*/:\n            throw new IllegalArgumentException(\"'m' cannot be less than 16 (\" + m + \" < 16).\");\n\n        case 16/*2^4*/:\n            return 0.673 * m * m;\n\n        case 32/*2^5*/:\n            return 0.697 * m * m;\n\n        case 64/*2^6*/:\n            return 0.709 * m * m;\n\n        default/*>2^6*/:\n            return (0.7213 / (1.0 + 1.079 / m)) * m * m;\n    }\n}", "path": "src\\main\\java\\net\\agkn\\hll\\util\\HLLUtil.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// ------------------------------------------------------------------------\n/**\n * Reads the word at the specified sequence position (zero-indexed).\n *\n * @param  position the zero-indexed position of the word to be read. This\n *         must be greater than or equal to zero.\n * @return the value of the serialized word at the specified position.\n */\n", "func_signal": "private long readWord(final int position)", "code": "{\n    if(position < 0) {\n        throw new ArrayIndexOutOfBoundsException(position);\n    }\n\n    // First bit of the word\n    final long firstBitIndex = (position * wordLength);\n    final int firstByteIndex = (bytePadding + (int)(firstBitIndex / BITS_PER_BYTE));\n    final int firstByteSkipBits = (int)(firstBitIndex % BITS_PER_BYTE);\n\n    // Last bit of the word\n    final long lastBitIndex = (firstBitIndex + wordLength - 1);\n    final int lastByteIndex = (bytePadding + (int)(lastBitIndex / BITS_PER_BYTE));\n    final int lastByteBitsToConsume;\n\n    final int bitsAfterByteBoundary = (int)((lastBitIndex + 1) % BITS_PER_BYTE);\n    // If the word terminates at the end of the last byte, consume the whole\n    // last byte.\n    if(bitsAfterByteBoundary == 0) {\n        lastByteBitsToConsume = BITS_PER_BYTE;\n    } else {\n        // Otherwise, only consume what is necessary.\n        lastByteBitsToConsume = bitsAfterByteBoundary;\n    }\n\n    if(lastByteIndex >= bytes.length) {\n        throw new ArrayIndexOutOfBoundsException(\"Word out of bounds of backing array.\");\n    }\n\n    // Accumulator\n    long value = 0;\n\n    // --------------------------------------------------------------------\n    // First byte\n    final int bitsRemainingInFirstByte = (BITS_PER_BYTE - firstByteSkipBits);\n    final int bitsToConsumeInFirstByte = Math.min(bitsRemainingInFirstByte, wordLength);\n    long firstByte = (long)bytes[firstByteIndex];\n\n    // Mask off the bits to skip in the first byte.\n    final long firstByteMask = ((1L << bitsRemainingInFirstByte) - 1L);\n    firstByte &= firstByteMask;\n    // Right-align relevant bits of first byte.\n    firstByte >>>= (bitsRemainingInFirstByte - bitsToConsumeInFirstByte);\n\n    value |= firstByte;\n\n    // If the first byte contains the whole word, short-circuit.\n    if(firstByteIndex == lastByteIndex) {\n        return value;\n    }\n\n    // --------------------------------------------------------------------\n    // Middle bytes\n    final int middleByteCount = (lastByteIndex - firstByteIndex - 1);\n    for(int i=0; i<middleByteCount; i++) {\n        final long middleByte = (bytes[firstByteIndex + i + 1] & BYTE_MASK);\n        // Push middle byte onto accumulator.\n        value <<= BITS_PER_BYTE;\n        value |= middleByte;\n    }\n\n    // --------------------------------------------------------------------\n    // Last byte\n    long lastByte = (bytes[lastByteIndex] & BYTE_MASK);\n    lastByte >>= (BITS_PER_BYTE - lastByteBitsToConsume);\n    value <<= lastByteBitsToConsume;\n    value |= lastByte;\n    return value;\n}", "path": "src\\main\\java\\net\\agkn\\hll\\serialization\\BigEndianAscendingWordDeserializer.java", "repo_name": "aggregateknowledge/java-hll", "stars": 303, "license": "apache-2.0", "language": "java", "size": 427}
{"docstring": "// both local and clustered execution\n", "func_signal": "private static boolean isEmptyMap(Map<String, List<ErrorInfo>> map)", "code": "{\n\tfor (final Map.Entry<String, List<ErrorInfo>> outerEntry : map\n\t\t.entrySet()) {\n\t    final List<ErrorInfo> errors = outerEntry.getValue();\n\t    if (errors != null && !errors.isEmpty())\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\utilities\\StormWrapper.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "// change from here down\n", "func_signal": "private PLCQueryPlan chooseQueryPlan(Map map)", "code": "{\n\tString queryName = SystemParameters.getString(map, \"DIP_QUERY_NAME\");\n\tPLCQueryPlan generator = null;\n\tif (queryName.equalsIgnoreCase(\"hyracks\")) {\n\t    generator = new Hyracks(map);\n\t} else {\n\t    throw new RuntimeException(\"Unsupported query plan \" + queryName\n\t\t    + \"!\");\n\t}\n\treturn generator;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\ewh\\main\\PullStatisticCollector.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * TODO FOR ALEKSANDAR 1) Renamings is only used for Theta-joins, you dont\n * need it for M-bucket 2) _mAdvisor needs to be different for you, this is\n * the \"Partitioning scheme and Decision core\"\n */\n", "func_signal": "protected void preProcess()", "code": "{\n\tlogicalMappings = new int[_numOfJoinWorkersTasks];\n\tfor (int i = 0; i < logicalMappings.length; i++)\n\t    logicalMappings[i] = i;\n\n\tfinal int[] initialDims = ThetaJoinUtilities.getDimensions(_initialDim);\n\t_mAdvisor = new TheoreticalAdvisorNew(_numOfJoinWorkersTasks,\n\t\tinitialDims[0], initialDims[1], _conf);\n\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\thetajoin\\adaptive\\storm_component\\ThetaReshufflerAdvisedEpochs.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * This method is used for emitting data to a random row or column\n */\n", "func_signal": "protected void updateStatisticsAndEmit(String inputComponentIndex,\n\t    int[] currDim, String inputTupleString, String inputTupleHash)", "code": "{\n\n\tlong deltaRel1, deltaRel2;\n\tint interchangingIndex;\n\tboolean isFirstRel;\n\n\tif (_firstEmitterIndex.equals(inputComponentIndex)) {\n\t    _currentFirstRelationCount++;\n\t    interchangingIndex = 1;\n\t    deltaRel1 = _reshufflerParallelism;\n\t    deltaRel2 = 0;\n\t    isFirstRel = true;\n\t} else if (_secondEmitterIndex.equals(inputComponentIndex)) {\n\t    _currentSecondRelationCount++;\n\t    interchangingIndex = 2;\n\t    deltaRel1 = 0;\n\t    deltaRel2 = _reshufflerParallelism;\n\t    isFirstRel = false;\n\t} else\n\t    throw new RuntimeException(\"Not suitable inputComponentIndex\");\n\n\tif (_taskIDLogicalIndex == 0) {\n\t    _mAdvisor.updateTuples(deltaRel1, deltaRel2);\n\t}\n\n\tfinal int[] taskIndices = Advisor.getAssignedReducers(isFirstRel,\n\t\t_numOfJoinWorkersTasks, currDim[0], currDim[1]);\n\tfor (int i = 0; i < taskIndices.length; i++) {\n\t    final Values tplSend = new Values(inputComponentIndex,\n\t\t    MyUtilities.stringToTuple(inputTupleString, _conf),\n\t\t    inputTupleHash, _currentEpochNumber, _currentDimExcDis);\n\t    appendTimestampNew(tplSend);\n\t    _collector.emitDirect(_taskPhysicalMapping.get(fooLogicalMappings(\n\t\t    logicalMappings, taskIndices[i])),\n\t\t    SystemParameters.ThetaDataReshufflerToJoiner, tplSend);\n\t}\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\thetajoin\\adaptive\\storm_component\\ThetaReshufflerAdvisedEpochs.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * Returns \"TableSchemaName.ColumnName\"\n */\n", "func_signal": "public String getFullSchemaColumnName(Column column)", "code": "{\n\tfinal String columnName = column.getColumnName();\n\tfinal String tableCompName = ParserUtil.getComponentName(column);\n\tfinal String tableSchemaName = getSchemaName(tableCompName);\n\treturn tableSchemaName + \".\" + columnName;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\util\\TableAliasName.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * Get all component names\n */\n", "func_signal": "public List<String> getComponentNames()", "code": "{\n\tfinal List<String> result = new ArrayList<String>();\n\tfor (final Iterator iter = _nameSchemaList.entrySet().iterator(); iter\n\t\t.hasNext();) {\n\t    final Map.Entry<String, String> entry = (Map.Entry<String, String>) iter\n\t\t    .next();\n\t    result.add(entry.getKey());\n\t}\n\treturn result;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\util\\TableAliasName.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "// all the staff below are only for local execution\n", "func_signal": "private static void localKillTopology(Map conf, String topologyName)", "code": "{\n\tfinal long endTime = System.currentTimeMillis();\n\tLOG.info(\"Running time (sec):\" + ((endTime - startTime) / 1000));\n\tint result = LocalMergeResults.localPrintAndCompare(conf);\n\t// Should be killed with the following two lines\n\t// cluster.killTopology(topologyName);\n\t// cluster.shutdown();\n\t// However, it will never stop, so we use:\n\tSystem.exit(result);\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\utilities\\StormWrapper.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * This list of tables is provided from SQLVisitor It won't work if we\n * obtain a list of tables from a list of columns using the method\n * column.getTable()\n */\n", "func_signal": "public TableAliasName(List<Table> tableList, String queryName)", "code": "{\n\t_queryName = queryName;\n\tfor (final Table table : tableList) {\n\t    final String tableCompName = ParserUtil.getComponentName(table);\n\t    final String tableSchemaName = table.getWholeTableName();\n\t    _nameSchemaList.put(tableCompName, tableSchemaName);\n\t}\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\util\\TableAliasName.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "// if we are in local mode, we cannot obtain these information\n", "func_signal": "public static void writeStormStats(Map conf)", "code": "{\n\tfinal Client client = getNimbusStub(conf);\n\tfinal StringBuilder sb = new StringBuilder(\"\");\n\n\ttry {\n\t    final ClusterSummary clusterInfo = client.getClusterInfo();\n\t    final int numOfTopologies = clusterInfo.get_topologies_size();\n\t    sb.append(\"In total there is \").append(numOfTopologies)\n\t\t    .append(\" topologies.\\n\");\n\n\t    final Iterator<TopologySummary> topologyIter = clusterInfo\n\t\t    .get_topologies_iterator();\n\t    while (topologyIter.hasNext()) {\n\t\tfinal TopologySummary topologySummary = topologyIter.next();\n\n\t\t// print out basic information about topologies\n\t\tfinal String topologyName = topologySummary.get_name();\n\t\tsb.append(\"For topology \").append(topologyName).append(\":\\n\");\n\t\tfinal int numTasks = topologySummary.get_num_tasks();\n\t\tsb.append(numTasks).append(\" tasks, \");\n\t\tfinal int numWorkers = topologySummary.get_num_workers();\n\t\tsb.append(numWorkers).append(\" workers, \");\n\t\tfinal int uptimeSecs = topologySummary.get_uptime_secs();\n\t\tsb.append(uptimeSecs).append(\" uptime seconds.\\n\");\n\n\t\tfinal String topologyID = topologySummary.get_id();\n\t\tfinal String topologyConf = client.getTopologyConf(topologyID);\n\t\tsb.append(\"Topology configuration is \\n\");\n\t\tsb.append(topologyConf);\n\t\tsb.append(\"\\n\");\n\n\t\tfinal TopologyInfo topologyInfo = client\n\t\t\t.getTopologyInfo(topologyID);\n\n\t\t// print more about each task\n\t\tfinal Iterator<ExecutorSummary> execIter = topologyInfo\n\t\t\t.get_executors_iterator();\n\t\tboolean globalFailed = false;\n\t\twhile (execIter.hasNext()) {\n\t\t    final ExecutorSummary execSummary = execIter.next();\n\t\t    final String componentId = execSummary.get_component_id();\n\t\t    sb.append(\"component_id:\").append(componentId).append(\", \");\n\t\t    final ExecutorInfo execInfo = execSummary\n\t\t\t    .get_executor_info();\n\t\t    final int taskStart = execInfo.get_task_start();\n\t\t    final int taskEnd = execInfo.get_task_end();\n\t\t    sb.append(\"task_id(s) for this executor:\")\n\t\t\t    .append(taskStart).append(\"-\").append(taskEnd)\n\t\t\t    .append(\", \");\n\t\t    final String host = execSummary.get_host();\n\t\t    sb.append(\"host:\").append(host).append(\", \");\n\t\t    final int port = execSummary.get_port();\n\t\t    sb.append(\"port:\").append(port).append(\", \");\n\t\t    final int uptime = execSummary.get_uptime_secs();\n\t\t    sb.append(\"uptime:\").append(uptime).append(\"\\n\");\n\t\t    sb.append(\"\\n\");\n\n\t\t    // printing failing statistics, if there are failed tuples\n\t\t    final ExecutorStats es = execSummary.get_stats();\n\t\t    if (es == null)\n\t\t\tsb.append(\"No info about failed tuples\\n\");\n\t\t    else {\n\t\t\tfinal ExecutorSpecificStats stats = es.get_specific();\n\t\t\tboolean isEmpty;\n\t\t\tObject objFailed;\n\t\t\tif (stats.is_set_spout()) {\n\t\t\t    final Map<String, Map<String, Long>> failed = stats\n\t\t\t\t    .get_spout().get_failed();\n\t\t\t    objFailed = failed;\n\t\t\t    isEmpty = isEmptyMapMap(failed);\n\t\t\t} else {\n\t\t\t    final Map<String, Map<GlobalStreamId, Long>> failed = stats\n\t\t\t\t    .get_bolt().get_failed();\n\t\t\t    objFailed = failed;\n\t\t\t    isEmpty = isEmptyMapMap(failed);\n\t\t\t}\n\t\t\tif (!isEmpty) {\n\t\t\t    sb.append(\"ERROR: There are some failed tuples: \")\n\t\t\t\t    .append(objFailed).append(\"\\n\");\n\t\t\t    globalFailed = true;\n\t\t\t}\n\t\t    }\n\t\t}\n\n\t\t// is there at least one component where something failed\n\t\tif (!globalFailed)\n\t\t    sb.append(\"OK: No tuples failed so far.\\n\");\n\t\telse\n\t\t    sb.append(\"ERROR: Some tuples failed!\\n\");\n\n\t\t// print topology errors\n\t\tfinal Map<String, List<ErrorInfo>> errors = topologyInfo\n\t\t\t.get_errors();\n\t\tif (!isEmptyMap(errors))\n\t\t    sb.append(\"ERROR: There are some errors in topology: \")\n\t\t\t    .append(errors).append(\"\\n\");\n\t\telse\n\t\t    sb.append(\"OK: No errors in the topology.\\n\");\n\n\t    }\n\t    sb.append(\"\\n\\n\");\n\n\t    final String strStats = sb.toString();\n\t    LOG.info(strStats);\n\t} catch (final TException ex) {\n\t    LOG.info(\"writeStats:\" + MyUtilities.getStackTrace(ex));\n\t} catch (final NotAliveException ex) {\n\t    LOG.info(MyUtilities.getStackTrace(ex));\n\t}\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\utilities\\StormWrapper.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "// invoked from the new Interface (QueryPlan not QueryBuilder)\n//   be careful if there are aliases of the same table\n", "func_signal": "public DataSourceComponent(String tableName, Map conf)", "code": "{\n\tthis(tableName.toUpperCase(),\n       // dataPath + tableName + extension);\n       new FileReaderProvider(SystemParameters.getString(conf, \"DIP_DATA_PATH\")),\n       tableName + SystemParameters.getString(conf, \"DIP_EXTENSION\"));\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\components\\DataSourceComponent.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * This method is used for sending the migrated data\n */\n", "func_signal": "protected void forwardTuple(String inputComponentIndex,\n\t    Tuple stormTupleRcv, String inputTupleString, String inputTupleHash)", "code": "{\n\tfinal int sourceID = logicalMappings[_taskPhysicalMapping\n\t\t.indexOf(stormTupleRcv.getSourceTask())];\n\tfinal int[] taskIndices;\n\tif (_firstEmitterIndex.equals(inputComponentIndex))\n\t    taskIndices = _currentAction\n\t\t    .getRowExchangeReducersByNewId(sourceID);\n\telse if (_secondEmitterIndex.equals(inputComponentIndex))\n\t    taskIndices = _currentAction\n\t\t    .getColumnExchangeReducersByNewId(sourceID);\n\telse\n\t    throw new RuntimeException(\n\t\t    \"inputComponentIndex does not conform with any relation\");\n\tfor (int i = 0; i < taskIndices.length; i++) {\n\t    final Values tplSend = new Values(inputComponentIndex,\n\t\t    MyUtilities.stringToTuple(inputTupleString, _conf),\n\t\t    inputTupleHash, _currentEpochNumber, _currentDimExcDis);\n\t    appendTimestampMigration(stormTupleRcv, tplSend);\n\t    _collector.emitDirect(_taskPhysicalMapping.get(fooLogicalMappings(\n\t\t    logicalMappings, taskIndices[i])),\n\t\t    SystemParameters.ThetaDataMigrationReshufflerToJoiner,\n\t\t    tplSend);\n\t}\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\thetajoin\\adaptive\\storm_component\\ThetaReshufflerAdvisedEpochs.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "// level from the root\n", "func_signal": "private void visit(Component comp, int level)", "code": "{\n\tif (_maxLevel < level)\n\t    _maxLevel = level;\n\n\tif (comp instanceof DataSourceComponent)\n\t    _dsList.add((DataSourceComponent) comp);\n\telse {\n\t    _clList.add(new CompLevel(comp, level));\n\n\t    for (final Component parent : comp.getParents())\n\t\tvisit(parent, level + 1);\n\t}\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\optimizers\\index\\LevelAssigner.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/**\n * The Reshuffler can send: 1) Normal Datastream tuples (from\n * previouslayers) to the ThetaJoiner 2) Migrated Datastream tuples (from\n * the ThetaJoinerDynamic) 3) Aggregated Counts to the ThetaMappingAssigner\n * 4) Signal (stop, proceed(migrate data), DataMigrationEnded) /Mapping to\n * the ThetaJoinerDynamic\n */\n", "func_signal": "@Override\npublic void declareOutputFields(OutputFieldsDeclarer declarer)", "code": "{\n\t// 0) LAST_ACK and EOF datastreams\n\tfinal ArrayList<String> EOFStreamFields = new ArrayList<String>();\n\tEOFStreamFields.add(StormComponent.COMP_INDEX);\n\tEOFStreamFields.add(StormComponent.TUPLE);\n\tEOFStreamFields.add(StormComponent.HASH);\n\tif (MyUtilities.isCustomTimestampMode(_conf))\n\t    EOFStreamFields.add(StormComponent.TIMESTAMP);\n\tdeclarer.declare(new Fields(EOFStreamFields));\n\n\t// 1) Theta Datastream tuples\n\tfinal ArrayList<String> dataStreamFields = new ArrayList<String>();\n\tdataStreamFields.add(StormComponent.COMP_INDEX);\n\tdataStreamFields.add(StormComponent.TUPLE);\n\tdataStreamFields.add(StormComponent.HASH);\n\tdataStreamFields.add(StormComponent.EPOCH);\n\tdataStreamFields.add(StormComponent.DIM);\n\tif (MyUtilities.isCustomTimestampMode(_conf))\n\t    dataStreamFields.add(StormComponent.TIMESTAMP);\n\tdeclarer.declareStream(SystemParameters.ThetaDataReshufflerToJoiner,\n\t\ttrue, new Fields(dataStreamFields)); // direct streams\n\n\t// 2) Theta Datastream tuples, migrated data\n\tfinal ArrayList<String> thetaStreamFields = new ArrayList<String>();\n\tthetaStreamFields.add(StormComponent.COMP_INDEX);\n\tthetaStreamFields.add(StormComponent.TUPLE);\n\tthetaStreamFields.add(StormComponent.HASH);\n\tthetaStreamFields.add(StormComponent.EPOCH);\n\tthetaStreamFields.add(StormComponent.DIM);\n\tif (MyUtilities.isCustomTimestampMode(_conf))\n\t    thetaStreamFields.add(StormComponent.TIMESTAMP);\n\tdeclarer.declareStream(\n\t\tSystemParameters.ThetaDataMigrationReshufflerToJoiner, true,\n\t\tnew Fields(thetaStreamFields)); // direct streams\n\n\t// 3) Signal to Joiners\n\tdeclarer.declareStream(SystemParameters.ThetaReshufflerSignal,\n\t\tnew Fields(StormComponent.RESH_SIGNAL, StormComponent.MAPPING));\n\n\t// 4)Advisor related\n\tdeclarer.declareStream(SystemParameters.ThetaSynchronizerSignal,\n\t\tnew Fields(StormComponent.RESH_SIGNAL, StormComponent.MAPPING));\n\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\thetajoin\\adaptive\\storm_component\\ThetaReshufflerAdvisedEpochs.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * Not used outside this class. For a field N1.NATIONNAME, columnName is\n * NATIONNAME List<ColumnNameType> is from a Schema Table (TPCH.nation)\n */\n", "func_signal": "public int indexOf(List<ColumnNameType> tupleSchema, String columnName)", "code": "{\n\tfor (int i = 0; i < tupleSchema.size(); i++)\n\t    if (tupleSchema.get(i).getName().equals(columnName))\n\t\treturn i;\n\treturn ParserUtil.NOT_FOUND;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\optimizers\\index\\IndexTranslator.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * For a given component and column, find out the index of that column in a\n * given component. not meant to be used with projections - EarlyProjection\n * is the very last thing done on the plan tupleSchema is not used here\n * (it's used for Cost-based optimizer, where each component updates the\n * schema after each operator)\n */\n", "func_signal": "public int getColumnIndex(Column column, Component requestor)", "code": "{\n\tfinal String columnName = column.getColumnName();\n\tfinal String tblCompName = ParserUtil.getComponentName(column);\n\tfinal String tableSchemaName = _tan.getSchemaName(tblCompName);\n\tfinal List<ColumnNameType> columns = _schema\n\t\t.getTableSchema(tableSchemaName);\n\n\tfinal int originalIndex = indexOf(columns, columnName);\n\n\t// finding originator by name in the list of ancestors\n\tfinal List<DataSourceComponent> sources = requestor\n\t\t.getAncestorDataSources();\n\tComponent originator = null;\n\tfor (final DataSourceComponent source : sources)\n\t    if (source.getName().equals(tblCompName)) {\n\t\toriginator = source;\n\t\tbreak;\n\t    }\n\n\tif (requestor.equals(originator))\n\t    return originalIndex;\n\telse\n\t    return getChildIndex(originalIndex, originator, requestor);\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\optimizers\\index\\IndexTranslator.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "// order them such that the first component after dataSource has height 1,\n// ..., the root has the highest height\n", "func_signal": "private void orderComponents()", "code": "{\n\tfor (final CompLevel cl : _clList) {\n\t    final int level = cl.getLevel();\n\t    final int newLevel = _maxLevel - level;\n\t    cl.setLevel(newLevel);\n\t}\n\tCollections.sort(_clList);\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\optimizers\\index\\LevelAssigner.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "// all below are only for cluster execution\n", "func_signal": "private static Client getNimbusStub(Map conf)", "code": "{\n\tfinal boolean distributed = SystemParameters.getBoolean(conf,\n\t\t\"DIP_DISTRIBUTED\");\n\n\tfinal String nimbusHost = SystemParameters.getString(conf,\n\t\tConfig.NIMBUS_HOST);\n\tfinal int nimbusThriftPort = SystemParameters.NIMBUS_THRIFT_PORT;\n\n\tif (distributed) {\n\t    NimbusClient nimbus = null;\n\t    try {\n\t\tMap<String, String> securityMap = new HashMap<String, String>();\n\t\tsecurityMap.put(\"storm.thrift.transport\",\n\t\t\t\"backtype.storm.security.auth.SimpleTransportPlugin\");\n\t\tnimbus = new NimbusClient(securityMap, nimbusHost,\n\t\t\tnimbusThriftPort);\n\t    } catch (TTransportException e) {\n\t\tLOG.info(MyUtilities.getStackTrace(e));\n\t\tSystem.exit(1);\n\t    }\n\t    final Client client = nimbus.getClient();\n\t    return client;\n\t} else\n\t    throw new RuntimeException(\n\t\t    \"Call getNimbusStub only in cluster mode.\");\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\utilities\\StormWrapper.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * This returns true if expr is available in inputTupleSchema, or if all of\n * its subexpressions are availabe in inputTupleSchema so that expr can be\n * built out of subexpressions and constants\n */\n", "func_signal": "public boolean isAllSubsMine(Expression expr)", "code": "{\n\tif (_nt.contains(_inputTupleSchema, expr))\n\t    return true;\n\n\t// unrecognized Column\n\tif (expr instanceof Column)\n\t    return false;\n\n\tfinal List<Expression> subExprs = ParserUtil.getSubExpressions(expr);\n\tif (subExprs == null)\n\t    // constants - it can be built from my inputTupleSchema\n\t    return true;\n\n\t// for all other we have to check\n\tfor (final Expression subExpr : subExprs)\n\t    if (!isAllSubsMine(subExpr))\n\t\treturn false;\n\n\t// all of subexpressions are mine\n\treturn true;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\visitors\\jsql\\MaxSubExpressionsVisitor.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/*\n * Is component already hashed by hashIndexes (does its parent sends tuples\n * hashed by hashIndexes). hashIndexes are indexes wrt component. If returns\n * true not only if hashes are equivalent, but also if the parent groups\n * tuples exactly the same as the affected component, with addition of some\n * more columns. This means that Join and Aggregation can be performed on\n * the same node. Inspiration taken from the Nephele paper.\n */\n", "func_signal": "public boolean isHashedBy(Component component, List<Integer> hashIndexes)", "code": "{\n\tfinal Component[] parents = component.getParents();\n\tif (parents != null) {\n\t    // if both parents have only hashIndexes, they point to the same\n\t    // indexes in the child\n\t    // so we choose arbitrarily first parent\n\t    final Component parent = parents[0];\n\t    final List<Integer> parentHashes = parent.getHashIndexes();\n\t    if (parent.getHashExpressions() == null) {\n\t\tfinal List<Integer> parentHashIndexes = new ArrayList<Integer>();\n\t\tfor (final int parentHash : parentHashes)\n\t\t    parentHashIndexes.add(getChildIndex(parentHash, parent,\n\t\t\t    component));\n\t\treturn isSuperset(parentHashIndexes, hashIndexes);\n\t    }\n\t}\n\t// if there are HashExpressions, we don't bother to do analysis, we know\n\t// it's false\n\treturn false;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\api\\sql\\optimizers\\index\\IndexTranslator.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/* For renamings */\n", "func_signal": "private int fooLogicalMappings(int[] renamings2, int k)", "code": "{\n\tfor (int i = 0; i < renamings2.length; ++i)\n\t    if (renamings2[i] == k)\n\t\treturn i;\n\treturn -1;\n}", "path": "squall-core\\src\\main\\java\\ch\\epfl\\data\\squall\\thetajoin\\adaptive\\storm_component\\ThetaReshufflerAdvisedEpochs.java", "repo_name": "epfldata/squall", "stars": 267, "license": "apache-2.0", "language": "java", "size": 194398}
{"docstring": "/** \u8bbe\u7f6e\u81ea\u5df1\u56fe\u6807\u548c\u70b9\u51fb\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u91cd\u590d\u8c03\u7528\u6dfb\u52a0\u591a\u6b21 */\n", "func_signal": "public void setCustomerLogo(Bitmap logo, String label, OnClickListener ocl)", "code": "{\n\tCustomerLogo cl = new CustomerLogo();\n\tcl.logo = logo;\n\tcl.label = label;\n\tcl.listener = ocl;\n\tArrayList<CustomerLogo> customers = ResHelper.forceCast(params.get(\"customers\"));\n\tcustomers.add(cl);\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\OnekeyShare.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/**\n * \u4e8c\u884c\u5236\u8f6c\u5b57\u7b26\u4e32\n *\n * @param b\n * @return\n */\n", "func_signal": "private static String byte2String(byte[] b)", "code": "{\n    StringBuilder hs = new StringBuilder();\n    String stmp;\n    for (int n = 0; b != null && n < b.length; n++) {\n        stmp = Integer.toHexString(b[n] & 0XFF);\n        if (stmp.length() == 1)\n            hs.append('0');\n        hs.append(stmp);\n    }\n    return hs.toString().toUpperCase(Locale.CHINA);\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\utils\\DESUtil.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/**\n * DES\u7b97\u6cd5\uff0c\u52a0\u5bc6\n *\n * @param data\n *         \u5f85\u52a0\u5bc6\u5b57\u7b26\u4e32\n * @param key\n *            \u52a0\u5bc6\u79c1\u94a5\uff0c\u957f\u5ea6\u4e0d\u80fd\u591f\u5c0f\u4e8e8\u4f4d\n * @return \u52a0\u5bc6\u540e\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u4e00\u822c\u7ed3\u5408Base64\u7f16\u7801\u4f7f\u7528\n\n * @throws Exception\n */\n", "func_signal": "public static String encode(String key, String data)", "code": "{\n    if (data == null)\n        return null;\n    try {\n        DESKeySpec dks = new DESKeySpec(key.getBytes());\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        // key\u7684\u957f\u5ea6\u4e0d\u80fd\u591f\u5c0f\u4e8e8\u4f4d\u5b57\u8282\n        Key secretKey = keyFactory.generateSecret(dks);\n        Cipher cipher = Cipher.getInstance(ALGORITHM_DES);\n        IvParameterSpec iv = new IvParameterSpec(\"12345678\".getBytes());\n        AlgorithmParameterSpec paramSpec = iv;\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, paramSpec);\n        byte[] bytes = cipher.doFinal(data.getBytes());\n        return byte2String(bytes);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return data;\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\utils\\DESUtil.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "//\u5b9e\u73b0\u5237\u65b0\u6570\u636e\u529f\u80fd\n", "func_signal": "public void freshData()", "code": "{\n    status = STATUS_FRESH ;\n    builder.curPage = 1 ;\n\n    builder.putParams(\"curPage\" , builder.curPage) ;\n    getData();\n\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\utils\\Pager.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** \u7f16\u8f91\u754c\u9762\uff0c\u663e\u793a\u7684\u56fe\u7247 */\n", "func_signal": "private void showThumb(Bitmap pic)", "code": "{\n\tPicViewerPage page = new PicViewerPage(impl);\n\tpage.setImageBitmap(pic);\n\tpage.show(activity, null);\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\themes\\classic\\EditPage.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** imagePath\u662f\u672c\u5730\u7684\u56fe\u7247\u8def\u5f84\uff0c\u9664Linked-In\u5916\u7684\u6240\u6709\u5e73\u53f0\u90fd\u652f\u6301\u8fd9\u4e2a\u5b57\u6bb5 */\n", "func_signal": "public void setImagePath(String imagePath)", "code": "{\n\tif(!TextUtils.isEmpty(imagePath)) {\n\t\tparams.put(\"imagePath\", imagePath);\n\t}\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\OnekeyShare.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** \u8bbe\u7f6e\u89c6\u9891\u7f51\u7edc\u5730\u5740 */\n", "func_signal": "public void setVideoUrl(String url)", "code": "{\n\tparams.put(\"url\", url);\n\tparams.put(\"shareType\", Platform.SHARE_VIDEO);\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\OnekeyShare.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "//\u5bf9MaterialRefreshLayout\u6dfb\u52a0\u4e8b\u4ef6\u3002\u5b9e\u73b0\u4e0a\u6ed1\u548c\u4e0b\u62c9\u3002\n", "func_signal": "public void setMaterialRefreshLayoutListener (MaterialRefreshLayout materialRefreshLayout )", "code": "{\n    materialRefreshLayout.setLoadMore(true);\n    materialRefreshLayout.setMaterialRefreshListener(new MaterialRefreshListener() {\n        @Override\n        public void onRefresh(MaterialRefreshLayout materialRefreshLayout) {\n\n            Toast.makeText(materialRefreshLayout.getContext() , materialRefreshLayout.getContext().getString(R.string.page_ref) , Toast.LENGTH_SHORT).show();\n            freshData() ;\n        }\n\n        @Override\n        public void onRefreshLoadMore(MaterialRefreshLayout materialRefreshLayout) {\n\n            if( builder.curPage*builder.pageSize < builder.totalCount ){\n                Toast.makeText(materialRefreshLayout.getContext() , materialRefreshLayout.getContext().getString(R.string.page_loadmore) , Toast.LENGTH_SHORT).show();\n                loadMore() ;\n            }else {\n                materialRefreshLayout.finishRefreshLoadMore();\n                Toast.makeText(materialRefreshLayout.getContext() , materialRefreshLayout.getContext().getString(R.string.page_notmore) , Toast.LENGTH_SHORT).show();\n            }\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\utils\\Pager.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** \u53d6\u6d88\u5206\u4eab\u65f6\uff0c\u6267\u884c\u7684\u65b9\u6cd5 */\n", "func_signal": "private void cancelAndFinish()", "code": "{\n\t// \u5206\u4eab\u5931\u8d25\u7684\u7edf\u8ba1\n\tShareSDK.logDemoEvent(5, platform);\n\tfinish();\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\themes\\classic\\EditPage.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "//\u83b7\u5f97view\u5b9e\u4f8b\u5bf9\u8c61\u3002\u5728views\u91cc\u67e5\u627e\uff0c\u5982\u679c\u5b58\u5728\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5b9e\u4f8b\u5316\u4e00\u4e2a\uff0c\u5e76\u5c06\u5b9e\u4f8b\u5316\u7ed3\u679c\u8fd4\u56de\u3002\n", "func_signal": "private < T extends View> T findView (int resId)", "code": "{\n\n    if ( views.get(resId) == null ){\n        View view = itemView.findViewById(resId) ;\n        views.put(resId , view);\n        //\u7ed9\u65b0\u5f97\u5230\u7684view\u589e\u52a0\u70b9\u51fb\u4e8b\u4ef6\n        view.setOnClickListener(this);\n    }\n\n   return (T) views.get(resId) ;\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\base\\BaseViewHolder.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "//\u5b9e\u73b0\u52a0\u8f7d\u66f4\u591a\u529f\u80fd\n", "func_signal": "public void loadMore()", "code": "{\n    status = STATUS_LOADMARE ;\n    builder.curPage = builder.curPage + 1 ;\n\n    builder.putParams(\"curPage\" , builder.curPage) ;\n    getData();\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\utils\\Pager.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** \u6dfb\u52a0\u4e00\u4e2a\u9690\u85cf\u7684platform */\n", "func_signal": "public void addHiddenPlatform(String platform)", "code": "{\n\tHashMap<String, String> hiddenPlatforms = ResHelper.forceCast(params.get(\"hiddenPlatforms\"));\n\thiddenPlatforms.put(platform, platform);\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\OnekeyShare.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** @ \u597d\u53cb\u65f6\uff0c\u5c55\u793a\u7684\u597d\u53cb\u5217\u8868 */\n", "func_signal": "private void showFriendList()", "code": "{\n\tFriendListPage page;\n\tint orientation = activity.getResources().getConfiguration().orientation;\n\tif (orientation == Configuration.ORIENTATION_PORTRAIT) {\n\t\tpage = new FriendListPagePort(impl);\n\t} else {\n\t\tpage = new FriendListPageLand(impl);\n\t}\n\tpage.setPlatform(platform);\n\tpage.showForResult(MobSDK.getContext(), null, this);\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\themes\\classic\\EditPage.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** \u8bbe\u7f6e\u4e00\u4e2a\u5c06\u88ab\u622a\u56fe\u5206\u4eab\u7684View , surfaceView\u662f\u622a\u4e0d\u4e86\u56fe\u7247\u7684*/\n", "func_signal": "public void setViewToShare(View viewToShare)", "code": "{\n\ttry {\n\t\tBitmap bm = BitmapHelper.captureView(viewToShare, viewToShare.getWidth(), viewToShare.getHeight());\n\t\tparams.put(\"viewToShare\", bm);\n\t} catch (Throwable e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\OnekeyShare.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/**\n * \u4e8c\u8fdb\u5236\u8f6c\u5316\u621016\u8fdb\u5236\n *\n * @param b\n * @return\n */\n", "func_signal": "private static byte[] byte2hex(byte[] b)", "code": "{\n    if ((b.length % 2) != 0)\n        throw new IllegalArgumentException();\n    byte[] b2 = new byte[b.length / 2];\n    for (int n = 0; n < b.length; n += 2) {\n        String item = new String(b, n, 2);\n        b2[n / 2] = (byte) Integer.parseInt(item, 16);\n    }\n    return b2;\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\utils\\DESUtil.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** \u6267\u884c\u5206\u4eab\u65f6\u7684\u65b9\u6cd5 */\n", "func_signal": "private void shareAndFinish()", "code": "{\n\tint resId = ResHelper.getStringRes(activity, \"ssdk_oks_sharing\");\n\tif (resId > 0) {\n\t\tToast.makeText(activity, resId, Toast.LENGTH_SHORT).show();\n\t}\n\n\tif (isDisableSSO()) {\n\t\tplatform.SSOSetting(true);\n\t}\n\tplatform.setPlatformActionListener(getCallback());\n\tplatform.share(sp);\n\n\tfinish();\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\themes\\classic\\EditPage.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "//\u5c55\u793a\u5f97\u5230\u7684\u6570\u636e\n", "func_signal": "public <T> void showData(List<T> mData , int totalPage , int pageSize)", "code": "{\n\n    switch (status){\n        case STATUS_NORMAL :\n\n            if (builder.onPageListener !=null ){\n                builder.onPageListener.loadNormal(mData , totalPage ,pageSize);\n            }\n\n            break;\n        case STATUS_LOADMARE :\n\n            if (builder.onPageListener !=null ){\n                builder.onPageListener.loadMoreData(mData , totalPage ,pageSize);\n            }\n            builder.materialRefreshLayout.finishRefreshLoadMore();\n            status = STATUS_NORMAL ;\n            break;\n        case STATUS_FRESH :\n\n            if (builder.onPageListener !=null ){\n                builder.onPageListener.refData(mData , totalPage ,pageSize);\n            }\n            builder.materialRefreshLayout.finishRefresh();\n            status = STATUS_NORMAL ;\n            break;\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\utils\\Pager.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/**\n * \u521d\u59cb\u5316tab\u4fe1\u606f\n */\n", "func_signal": "public void initTab ()", "code": "{\n    //\u6307\u5b9afragmentTabHost\u4e2d\u5b9e\u9645\u7684FragmentLayout\u3002\n    fragmentTabHost.setup(this , getSupportFragmentManager() , R.id.realTabContent);\n\n    TabIndicator HomeTab = new TabIndicator(R.string.tab_home , R.drawable.tab_home_image, HomeFragment.class) ;\n    TabIndicator SearchTab = new TabIndicator(R.string.tab_hot , R.drawable.tab_search_image, HotFragment.class) ;\n    TabIndicator ClassifyTab = new TabIndicator(R.string.tab_assort , R.drawable.tab_classify_image, AssortFragment.class) ;\n    TabIndicator ShoppingBikeTab = new TabIndicator(R.string.tab_cart , R.drawable.tab_shoppingbike_image, CartFragment.class) ;\n    TabIndicator MineTab = new TabIndicator(R.string.tab_mine , R.drawable.tab_user_image, MineFragment.class) ;\n\n    tabIndicators.add(HomeTab) ;\n    tabIndicators.add(SearchTab) ;\n    tabIndicators.add(ClassifyTab) ;\n    tabIndicators.add(ShoppingBikeTab) ;\n    tabIndicators.add(MineTab) ;\n\n    //\u5c06\u6bcf\u4e00\u4e2aTab\u88c5\u5165fragmentTabHost\n    for(TabIndicator tabIndicator : tabIndicators){\n        View view = LayoutInflater.from(mContext).inflate(R.layout.tab_indicator_view , null ) ;\n        tabPhoto = (ImageView) view.findViewById(R.id.tab_photo);\n        tabTitle = (TextView) view.findViewById(R.id.tab_title) ;\n\n        tabPhoto.setBackgroundResource(tabIndicator.getTabPhoto());\n        tabTitle.setText(tabIndicator.getTabTitle());\n\n        //\u5411fragmentTableHost\u4e2d\u6dfb\u52a0\u4e00\u4e2aTabSpec\n        fragmentTabHost.addTab(fragmentTabHost.newTabSpec(getString(tabIndicator.getTabTitle())).setIndicator(view) , tabIndicator.getFragment() , null );\n        //\u6267\u884c\u7ed3\u675f\n    }\n\n    fragmentTabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener() {\n        @Override\n        public void onTabChanged(String tabId) {\n\n            if(tabId == getString(R.string.tab_cart)){\n\n                if (cartFragment == null){\n\n                    Fragment fragment = getSupportFragmentManager().findFragmentByTag(getString(R.string.tab_cart)) ;\n\n                    if (fragment != null ){\n                        cartFragment = (CartFragment) fragment;\n                        cartFragment.refRecyclerView();\n                    }\n                }else {\n                    cartFragment.refRecyclerView();\n                }\n            }\n        }\n    });\n\n}", "path": "app\\src\\main\\java\\com\\example\\cne_shop\\activity\\ShopMainActivity.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** \u52a8\u6001\u9002\u914d\u7f16\u8f91\u754c\u9762\u7684\u9ad8\u5ea6 */\n", "func_signal": "public void run()", "code": "{\n\tint height = svContent.getChildAt(0).getHeight();\n\tRelativeLayout.LayoutParams lp = ResHelper.forceCast(svContent.getLayoutParams());\n\tif (height > maxBodyHeight && lp.height != maxBodyHeight) {\n\t\tlp.height = maxBodyHeight;\n\t\tsvContent.setLayoutParams(lp);\n\t} else if (height < maxBodyHeight && lp.height == maxBodyHeight) {\n\t\tlp.height = LayoutParams.WRAP_CONTENT;\n\t\tsvContent.setLayoutParams(lp);\n\t}\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\themes\\classic\\EditPage.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/** imageUrl\u662f\u56fe\u7247\u7684\u7f51\u7edc\u8def\u5f84\uff0c\u65b0\u6d6a\u5fae\u535a\u3001\u4eba\u4eba\u7f51\u3001QQ\u7a7a\u95f4\u548cLinked-In\u652f\u6301\u6b64\u5b57\u6bb5 */\n", "func_signal": "public void setImageUrl(String imageUrl)", "code": "{\n\tif (!TextUtils.isEmpty(imageUrl)) {\n\t\tparams.put(\"imageUrl\", imageUrl);\n\t}\n}", "path": "sharesdk\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\OnekeyShare.java", "repo_name": "15829238397/CN5E-shop", "stars": 312, "license": "None", "language": "java", "size": 90168}
{"docstring": "/**\n * this method creates a storage account with the given name, or does\n * nothing if the account exists.\n * \n * @param affinityGroup\n *            - the affinity group for the storage account.\n * @param storageAccountName\n *            - the name for the storage account to create.\n * @param endTime\n *            .\n * \n * @throws InterruptedException .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public void createStorageAccount(final String affinityGroup,\n\t\tfinal String storageAccountName, final long endTime)\n\t\tthrows MicrosoftAzureException, TimeoutException,\n\t\tInterruptedException", "code": "{\n\n\tCreateStorageServiceInput createStorageServiceInput = requestBodyBuilder\n\t\t\t.buildCreateStorageAccount(affinityGroup, storageAccountName);\n\n\tif (storageExists(storageAccountName)) {\n\t\tlogger.info(\"Using an already existing storage account : \"\n\t\t\t\t+ storageAccountName);\n\t\treturn;\n\t}\n\n\tlogger.info(\"Creating a storage account : \" + storageAccountName);\n\n\tString xmlRequest = MicrosoftAzureModelUtils.marshall(\n\t\t\tcreateStorageServiceInput, false);\n\tClientResponse response = doPost(\"/services/storageservices\",\n\t\t\txmlRequest);\n\tString requestId = extractRequestId(response);\n\twaitForRequestToFinish(requestId, endTime);\n\n\tlogger.fine(\"Created a storage account : \" + storageAccountName);\n\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * This method creates a virtual machine and a corresponding cloud service.\n * the cloud service will use the affinity group specified by deploymentDesc.getAffinityGroup();\n * If another request was made this method will wait until the pending request is finished.\n * \n * If a failure happened after the cloud service was created, this method will delete it and throw.\n * \n * @param deplyomentDesc\n *            .\n * @param endTime\n *            .\n * @return an instance of {@link RoleDetails} containing the ip addresses\n *         information for the created role.\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n * @throws InterruptedException .\n */\n", "func_signal": "public RoleDetails createVirtualMachineDeployment(\n\t\tfinal CreatePersistentVMRoleDeploymentDescriptor deplyomentDesc,\n\t\tfinal boolean isWindows,\n\t\tfinal long endTime) throws MicrosoftAzureException,\n\t\tTimeoutException, InterruptedException", "code": "{\n\n\tlong currentTimeInMillis = System.currentTimeMillis();\n\tlong lockTimeout = endTime - currentTimeInMillis\n\t\t\t- ESTIMATED_TIME_TO_START_VM;\n\tif (lockTimeout < 0) {\n\t\tthrow new MicrosoftAzureException(\n\t\t\t\t\"Aborted request to provision virtual machine. \"\n\t\t\t\t\t\t+ \"The timeout is less then the estimated time to provision the machine\");\n\t}\n\n\tlogger.fine(getThreadIdentity() + \"Waiting for pending request lock for lock \" + pendingRequest.hashCode());\n\tboolean lockAcquired = pendingRequest.tryLock(lockTimeout,\n\t\t\tTimeUnit.MILLISECONDS);\n\n\tString serviceName = null;\n\tDeployment deployment;\n\n\tif (lockAcquired) {\n\n\t\tlogger.fine(getThreadIdentity() + \"Lock acquired : \" + pendingRequest.hashCode());\n\t\tlogger.fine(getThreadIdentity() + \"Executing a request to provision a new virtual machine\");\n\n\t\ttry {\n\n\t\t\tserviceName = createCloudService(\n\t\t\t\t\tdeplyomentDesc.getAffinityGroup(), endTime);\n\n\t\t\tdeplyomentDesc.setHostedServiceName(serviceName);\n\t\t\tdeplyomentDesc.setDeploymentName(serviceName);\n\n\t\t\tdeployment = requestBodyBuilder.buildDeployment(deplyomentDesc,isWindows);\n\n\t\t\tString xmlRequest = MicrosoftAzureModelUtils.marshall(\n\t\t\t\t\tdeployment, false);\n\n\t\t\tlogger.fine(getThreadIdentity() + \"Launching virtual machine : \"\n\t\t\t\t\t+ deplyomentDesc.getRoleName());\n\n\t\t\tClientResponse response = doPost(\"/services/hostedservices/\"\n\t\t\t\t\t+ serviceName + \"/deployments\", xmlRequest);\n\t\t\tString requestId = extractRequestId(response);\n\t\t\twaitForRequestToFinish(requestId, endTime);\n                logger.fine(getThreadIdentity() + \"About to release lock \" + pendingRequest.hashCode());\n\t\t\tpendingRequest.unlock();\n\t\t} catch (final Exception e) {\n\t\t\tlogger.log(Level.FINE, getThreadIdentity() + \"A failure occured : about to release lock \"\n                        + pendingRequest.hashCode(), e);\n\t\t\tif (serviceName != null) {\n\t\t\t\ttry {\n\t\t\t\t\t// delete the dedicated cloud service that was created for the virtual machine.\n\t\t\t\t\tdeleteCloudService(serviceName, endTime);\n\t\t\t\t} catch (final Exception e1) {\n\t\t\t\t\tlogger.warning(\"Failed deleting cloud service \" + serviceName + \" : \" + e1.getMessage());\n\t\t\t\t\tlogger.finest(ExceptionUtils.getFullStackTrace(e1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tpendingRequest.unlock();\n\t\t\tif (e instanceof MicrosoftAzureException) {\n\t\t\t\tthrow (MicrosoftAzureException)e;\n\t\t\t}\n\t\t\tif (e instanceof TimeoutException) {\n\t\t\t\tthrow (TimeoutException)e;\n\t\t\t}\n\t\t\tif (e instanceof InterruptedException) {\n\t\t\t\tthrow (InterruptedException)e;\n\t\t\t}\n\t\t\tthrow new MicrosoftAzureException(e);\n\t\t}\n\t} else {\n\t\tthrow new TimeoutException(\n\t\t\t\t\"Failed to acquire lock for deleteDeployment request after + \"\n\t\t\t\t\t\t+ lockTimeout + \" milliseconds\");\n\t}\n\n\tDeployment deploymentResponse = null;\n\ttry {\n\t\tdeploymentResponse = waitForDeploymentStatus(\"Running\",\n\t\t\t\tserviceName, deployment.getDeploymentSlot(), endTime);\n\n\t\tdeploymentResponse = waitForRoleInstanceStatus(\"ReadyRole\",\n\t\t\t\tserviceName, deployment.getDeploymentSlot(), endTime);\n\t} catch (final Exception e) {\n\t\tlogger.fine(\"Error while waiting for VM status : \" +  e.getMessage());\n\t\t// the VM was created but with a bad status\n\t\tdeleteVirtualMachineByDeploymentName(serviceName, deployment.getName(), endTime);\n\t\tif (e instanceof MicrosoftAzureException) {\n\t\t\tthrow (MicrosoftAzureException) e;\n\t\t}\n\t\tif (e instanceof TimeoutException) {\n\t\t\tthrow (TimeoutException) e;\n\t\t}\n\t\tif (e instanceof InterruptedException) {\n\t\t\tthrow (InterruptedException) e;\n\t\t}\n\t\tthrow new MicrosoftAzureException(e);\n\t}\n\n\tRoleDetails roleAddressDetails = new RoleDetails();\n\troleAddressDetails.setId(deploymentResponse.getPrivateId());\n\troleAddressDetails\n\t\t\t.setPrivateIp(deploymentResponse.getRoleInstanceList()\n\t\t\t\t\t.getRoleInstances().get(0).getIpAddress());\n\tConfigurationSets configurationSets = deploymentResponse.getRoleList()\n\t\t\t.getRoles().get(0).getConfigurationSets();\n\n\tString publicIp = null;\n\tfor (ConfigurationSet configurationSet : configurationSets) {\n\t\tif (configurationSet instanceof NetworkConfigurationSet) {\n\t\t\tNetworkConfigurationSet networkConfigurationSet = (NetworkConfigurationSet) configurationSet;\n\t\t\tpublicIp = networkConfigurationSet.getInputEndpoints()\n\t\t\t\t\t.getInputEndpoints().get(0).getvIp();\n\t\t}\n\t}\n\troleAddressDetails.setPublicIp(publicIp);\n\n\treturn roleAddressDetails;\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * Constructor.\n * \n * @param cause\n *            The Throwable that caused this exception to be thrown.\n * @param reasonCode\n *            A reason code, by which a formatted message can be retrieved\n *            from the message bundle\n * @param args\n *            Optional arguments to embed in the formatted message\n */\n", "func_signal": "public CLIStatusException(final Throwable cause, final String reasonCode, final Object... args)", "code": "{\n\tsuper(\"reasonCode: \" + reasonCode, cause);\n\tthis.args = args;\n\tthis.reasonCode = reasonCode;\n\tthis.verboseData = null;\n}", "path": "CLI\\src\\main\\java\\org\\cloudifysource\\shell\\exceptions\\CLIStatusException.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * \n * @return .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public StorageServices listStorageServices()\n\t\tthrows MicrosoftAzureException, TimeoutException", "code": "{\n\tClientResponse response = doGet(\"/services/storageservices\");\n\tString responseBody = response.getEntity(String.class);\n\treturn (StorageServices) MicrosoftAzureModelUtils\n\t\t\t.unmarshall(responseBody);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * \n * @param machineIp\n *            - the machine ip.\n * @param isPrivateIp\n *            - whether or not this ip is private or public.\n * @param endTime\n *            .\n * @throws TimeoutException .\n * @throws MicrosoftAzureException .\n * @throws InterruptedException .\n */\n", "func_signal": "public void deleteVirtualMachineByIp(final String machineIp,\n\t\tfinal boolean isPrivateIp, final long endTime)\n\t\tthrows TimeoutException, MicrosoftAzureException,\n\t\tInterruptedException", "code": "{\n\n\tDeployment deployment = getDeploymentByIp(machineIp, isPrivateIp);\n\tif (deployment == null) {\n\t\tthrow new MicrosoftAzureException(\"Could not find a Virtual Machine with IP \" + machineIp);\n\t}\n\tlogger.fine(\"Deployment name for Virtual Machine with IP \" + machineIp + \" is \" + deployment.getName());\n\tdeleteVirtualMachineByDeploymentName(deployment.getHostedServiceName(),\n\t\t\tdeployment.getName(), endTime);\n\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * This method deletes the cloud service with the specified name. or does\n * nothing if the cloud service does not exist.\n * @param cloudServiceName\n *            .\n * @param endTime\n *            .\n * @return - true if the operation was successful, throws otherwise.\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n * @throws InterruptedException .\n */\n", "func_signal": "public boolean deleteCloudService(final String cloudServiceName,\n\t\tfinal long endTime) throws MicrosoftAzureException,\n\t\tTimeoutException, InterruptedException", "code": "{\n\t\n\tif (!cloudServiceExists(cloudServiceName)) {\n\t\tlogger.info(\"Cloud service \" + cloudServiceName + \" does not exist.\");\n\t\treturn true;\n\t}\n\t\n\tlogger.fine(\"Deleting cloud service : \" + cloudServiceName);\n\tClientResponse response = doDelete(\"/services/hostedservices/\"\n\t\t\t+ cloudServiceName);\n\tString requestId = extractRequestId(response);\n\twaitForRequestToFinish(requestId, endTime);\n\treturn true;\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * \n * @param hostedServiceName\n *            .\n * @param deploymentSlot\n *            .\n * @return .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public Deployment getDeploymentByDeploymentSlot(\n\t\tfinal String hostedServiceName, final String deploymentSlot)\n\t\tthrows MicrosoftAzureException, TimeoutException", "code": "{\n\n\tClientResponse response = null;\n\ttry {\n\t\tresponse = doGet(\"/services/hostedservices/\" + hostedServiceName\n\t\t\t\t+ \"/deploymentslots/\" + deploymentSlot);\n\t\tcheckForError(response);\n\t} catch (TimeoutException e) {\n\t\tlogger.warning(\"Timed out while waiting for deployment details. This may cause a leaking node\");\n\t\tthrow e;\n\t}\n\n\tString responseBody = response.getEntity(String.class);\n\treturn (Deployment) MicrosoftAzureModelUtils\n\t\t\t.unmarshall(responseBody);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * \n * @return - the response body listing every available OS Image that belongs\n *         to the subscription\n * @throws MicrosoftAzureException\n *             - indicates an exception was caught during the API call\n * @throws TimeoutException .\n */\n", "func_signal": "public String listOsImages() throws MicrosoftAzureException,\n\t\tTimeoutException", "code": "{\n\tClientResponse response = doGet(\"/services/images\");\n\tcheckForError(response);\n\treturn response.getEntity(String.class);\n\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * this method creates an affinity group with the given name, or does\n * nothing if the group exists.\n * \n * @param affinityGroup\n *            - the name of the affinity group to create\n * @param location\n *            - one of MS Data Centers locations.\n * @param endTime\n *            .\n * \n * @throws InterruptedException .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public void createAffinityGroup(final String affinityGroup,\n\t\tfinal String location, final long endTime)\n\t\tthrows MicrosoftAzureException, TimeoutException,\n\t\tInterruptedException", "code": "{\n\n\tCreateAffinityGroup createAffinityGroup = requestBodyBuilder\n\t\t\t.buildCreateAffinity(affinityGroup, location);\n\n\tif (affinityExists(affinityGroup)) {\n\t\tlogger.info(\"Using an already existing affinity group : \" + affinityGroup);\n\t\treturn;\n\t}\n\n\tlogger.info(\"Creating affinity group : \" + affinityGroup);\n\n\tString xmlRequest = MicrosoftAzureModelUtils.marshall(\n\t\t\tcreateAffinityGroup, false);\n\tClientResponse response = doPost(\"/affinitygroups\", xmlRequest);\n\tString requestId = extractRequestId(response);\n\twaitForRequestToFinish(requestId, endTime);\n\tlogger.fine(\"Created affinity group : \" + affinityGroup);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * This method deletes just the virtual machine from the specified cloud service.\n * associated OS Disk and cloud service are not removed.\n * @param hostedServiceName\n *            .\n * @param deploymentName\n *            .\n * @param endTime\n *            .\n * @return - true if the operation was successful, throws otherwise.\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n * @throws InterruptedException .\n */\n", "func_signal": "public boolean deleteDeployment(final String hostedServiceName,\n\t\tfinal String deploymentName, final long endTime)\n\t\tthrows MicrosoftAzureException, TimeoutException,\n\t\tInterruptedException", "code": "{\n\n\tif (!deploymentExists(hostedServiceName, deploymentName)) {\n\t\tlogger.info(\"Deployment \" + deploymentName + \" does not exist\");\n\t\treturn true;\n\t}\n\t\n\tlong currentTimeInMillis = System.currentTimeMillis();\n\tlong lockTimeout = endTime - currentTimeInMillis;\n\n\tlogger.fine(getThreadIdentity() + \"Waiting for pending request lock...\");\n\tboolean lockAcquired = pendingRequest.tryLock(lockTimeout,\n\t\t\tTimeUnit.MILLISECONDS);\n\n\tif (lockAcquired) {\n\n\t\tlogger.fine(getThreadIdentity() + \"Lock acquired : \" + pendingRequest.hashCode());\n\t\tlogger.fine(getThreadIdentity() + \"Executing a request to delete virtual machine\");\n\n\t\ttry {\n\n\t\t\tlogger.fine(getThreadIdentity() + \"Deleting deployment of virtual machine from : \"\n\t\t\t\t\t+ deploymentName);\n\n\t\t\tClientResponse response = doDelete(\"/services/hostedservices/\"\n\t\t\t\t\t+ hostedServiceName + \"/deployments/\" + deploymentName);\n\t\t\tString requestId = extractRequestId(response);\n\t\t\twaitForRequestToFinish(requestId, endTime);\n\t\t\tpendingRequest.unlock();\n\t\t\tlogger.fine(getThreadIdentity() + \"Lock unlcoked\");\n\t\t} catch (final Exception e) {\n\t\t\tlogger.fine(getThreadIdentity() + \"About to release lock \" + pendingRequest.hashCode());\n\t\t\tpendingRequest.unlock();\n\t\t\tif (e instanceof MicrosoftAzureException) {\n\t\t\t\tthrow (MicrosoftAzureException)e;\n\t\t\t}\n\t\t\tif (e instanceof TimeoutException) {\n\t\t\t\tthrow (TimeoutException)e;\n\t\t\t}\n\t\t\tif (e instanceof InterruptedException) {\n\t\t\t\tthrow (InterruptedException)e;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else {\n\t\tthrow new TimeoutException(\n\t\t\t\t\"Failed to acquire lock for deleteDeployment request after + \"\n\t\t\t\t\t\t+ lockTimeout + \" milliseconds\");\n\t}\n\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * This method deletes the virtual network specified. or does \n * nothing if the virtual network does not exist.\n * @param virtualNetworkSite\n *            - virtual network site name to delete .\n * @param endTime\n *            .\n * @return - true if the operation was successful, throws otherwise.\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n * @throws InterruptedException .\n */\n", "func_signal": "public boolean deleteVirtualNetworkSite(final String virtualNetworkSite,\n\t\tfinal long endTime) throws MicrosoftAzureException,\n\t\tTimeoutException, InterruptedException", "code": "{\n\n\tif (!virtualNetworkExists(virtualNetworkSite)) {\n\t\treturn true;\n\t}\n\tVirtualNetworkSites virtualNetworkSites = listVirtualNetworkSites();\n\tint index = 0;\n\tfor (int i = 0; i < virtualNetworkSites.getVirtualNetworkSites().size(); i++) {\n\t\tVirtualNetworkSite site = virtualNetworkSites\n\t\t\t\t.getVirtualNetworkSites().get(i);\n\t\tif (site.getName().equals(virtualNetworkSite)) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tvirtualNetworkSites.getVirtualNetworkSites().remove(index);\n\tlogger.info(\"Deleting virtual network site : \" + virtualNetworkSite);\n\tsetNetworkConfiguration(endTime, virtualNetworkSites);\n\tlogger.fine(\"Deleted virtual network site : \" + virtualNetworkSite);\n\treturn true;\n\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * this method return all disks that are currently being used by this\n * subscription. NOTE : disks that are not attached to any deployment are\n * also returned. this means that {@code Disk.getAttachedTo} might return\n * null.\n * \n * @return .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public Disks listOSDisks() throws MicrosoftAzureException, TimeoutException", "code": "{\n\tClientResponse response = doGet(\"/services/disks\");\n\tcheckForError(response);\n\tString responseBody = response.getEntity(String.class);\n\treturn (Disks) MicrosoftAzureModelUtils.unmarshall(responseBody);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * This method deletes an OS disk with the specified name. or does\n * nothing if the disk does not exist.\n * @param diskName\n *            .\n * @param endTime\n *            .\n * @return - true if the operation was successful, throws otherwise.\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n * @throws InterruptedException .\n */\n", "func_signal": "public boolean deleteOSDisk(final String diskName, final long endTime)\n\t\tthrows MicrosoftAzureException, TimeoutException,\n\t\tInterruptedException", "code": "{\n\t\n\tif (!osDiskExists(diskName)) {\n\t\tlogger.info(\"OS Disk \" + diskName + \" does not exist\");\n\t\treturn true;\n\t}\n\t\n\tClientResponse response = doDelete(\"/services/disks/\" + diskName);\n\tString requestId = extractRequestId(response);\n\twaitForRequestToFinish(requestId, endTime);\n\treturn true;\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * This method deletes the virtual machine under the deployment specifed by deploymentName.\n * it also deletes the associated disk and cloud service.\n * @param cloudServiceName\n *            .\n * @param deploymentName\n *            .\n * @param endTime\n *            .\n * @throws TimeoutException .\n * @throws MicrosoftAzureException .\n * @throws InterruptedException .\n */\n", "func_signal": "public void deleteVirtualMachineByDeploymentName(\n\t\tfinal String cloudServiceName, final String deploymentName,\n\t\tfinal long endTime) throws TimeoutException,\n\t\tMicrosoftAzureException, InterruptedException", "code": "{\n\n\tString diskName = null;\n\tString roleName = null;\n\tDisk disk = getDiskByAttachedCloudService(cloudServiceName);\n\tif (disk != null) {\n\t\tdiskName = disk.getName();\n\t\troleName = disk.getAttachedTo().getRoleName();\n\t} else {\n\t\tthrow new IllegalStateException(\"Disk cannot be null for an existing deployment \" + deploymentName \n\t\t\t\t+ \" in cloud service \" + cloudServiceName);\n\t}\n\t\n\tlogger.info(\"Deleting Virtual Machine \" + roleName);\n\tdeleteDeployment(cloudServiceName, deploymentName,\n\t\t\tendTime);\n\t\n\tlogger.fine(\"Deleting cloud service : \" + cloudServiceName\n\t\t\t+ \" that was dedicated for virtual machine \" + roleName);\t\t\t\t\n\tdeleteCloudService(cloudServiceName, endTime);\n\n\tlogger.fine(\"Waiting for OS Disk \" + diskName + \" to detach from role \" + roleName);\n\twaitForDiskToDetach(diskName, roleName, endTime);\n\tlogger.info(\"Deleting OS Disk : \" + diskName);\n\tdeleteOSDisk(diskName, endTime);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * this method creates a virtual network with the given name, or does\n * nothing if the network exists.\n * \n * @param addressSpace\n *            - CIDR notation specifying the address space for the virtual\n *            network.\n * @param affinityGroup\n *            - the affinity group for this virtual network\n * @param networkSiteName\n *            - the name for the network to create\n * @param endTime\n *            .\n * \n * @throws InterruptedException .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public void createVirtualNetworkSite(final String addressSpace,\n\t\tfinal String affinityGroup, final String networkSiteName,\n\t\tfinal long endTime) throws MicrosoftAzureException,\n\t\tTimeoutException, InterruptedException", "code": "{\n\n\tVirtualNetworkSites virtualNetworkSites = listVirtualNetworkSites();\n\tif (virtualNetworkSites != null\n\t\t\t&& virtualNetworkSites.contains(networkSiteName)) {\n\t\tlogger.info(\"Using an already existing virtual netowrk site : \"\n\t\t\t\t+ networkSiteName);\n\t\treturn;\n\t} else {\n\t\tif (virtualNetworkSites == null) {\n\t\t\tvirtualNetworkSites = new VirtualNetworkSites();\n\t\t}\n\t}\n\n\tlogger.info(\"Creating virtual network site : \" + networkSiteName);\n\n\tVirtualNetworkSite newSite = new VirtualNetworkSite();\n\tAddressSpace address = new AddressSpace();\n\taddress.setAddressPrefix(addressSpace);\n\tnewSite.setAddressSpace(address);\n\tnewSite.setAffinityGroup(affinityGroup);\n\tnewSite.setName(networkSiteName);\n\n\tvirtualNetworkSites.getVirtualNetworkSites().add(newSite);\n\n\tsetNetworkConfiguration(endTime, virtualNetworkSites);\n\tlogger.fine(\"Created virtual network site : \" + networkSiteName);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * \n * @return .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public HostedServices listHostedServices() throws MicrosoftAzureException,\n\t\tTimeoutException", "code": "{\n\tClientResponse response = doGet(\"/services/hostedservices\");\n\tString responseBody = response.getEntity(String.class);\n\tcheckForError(response);\n\treturn (HostedServices) MicrosoftAzureModelUtils\n\t\t\t.unmarshall(responseBody);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * \n * @return .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public VirtualNetworkSites listVirtualNetworkSites()\n\t\tthrows MicrosoftAzureException, TimeoutException", "code": "{\n\tClientResponse response = doGet(\"/services/networking/media\");\n\tif (response.getStatus() == HTTP_NOT_FOUND) {\n\t\treturn null;\n\t}\n\tString responseBody = response.getEntity(String.class);\n\tif ( responseBody.charAt(0) == BAD_CHAR) {\n\t\tresponseBody = responseBody.substring(1);\n\t}\n\n\tGlobalNetworkConfiguration globalNetowrkConfiguration = (GlobalNetworkConfiguration) MicrosoftAzureModelUtils\n\t\t\t.unmarshall(responseBody);\n\treturn globalNetowrkConfiguration.getVirtualNetworkConfiguration()\n\t\t\t.getVirtualNetworkSites();\n\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected Object doExecute() throws Exception", "code": "{\n\tResourceBundle messages = ShellUtils.getMessageBundle();\n\tsession.getConsole().println(messages.getString(\"on_exit\"));\n\tthrow new CloseShellException();\n}", "path": "CLI\\src\\main\\java\\org\\cloudifysource\\shell\\commands\\Exit.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * @param hostedServiceName\n *            - hosted service name.\n * @param embedDeployments\n *            - whether or not to include the deployments of this hosted\n *            service in the response.\n * @return .\n * @throws MicrosoftAzureException .\n * @throws TimeoutException .\n */\n", "func_signal": "public HostedService getHostedService(final String hostedServiceName,\n\t\tfinal boolean embedDeployments) throws MicrosoftAzureException,\n\t\tTimeoutException", "code": "{\n\tStringBuilder builder = new StringBuilder();\n\tbuilder.append(\"/services/hostedservices/\").append(hostedServiceName);\n\tif (embedDeployments) {\n\t\tbuilder.append(\"?embed-detail=true\");\n\t}\n\tClientResponse response = doGet(builder.toString());\n\tcheckForError(response);\n\tString responseBody = response.getEntity(String.class);\n\treturn (HostedService) MicrosoftAzureModelUtils\n\t\t\t.unmarshall(responseBody);\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * @param vmStatus\n */\n", "func_signal": "private boolean checkVirtualMachineStatusForError(final String vmStatus)", "code": "{\n\treturn (vmStatus.equals(\"FailedStartingRole\")\n\t\t\t|| vmStatus.equals(\"FailedStartingVM\")\n\t\t\t|| vmStatus.equals(\"UnresponsiveRole\")\n\t\t\t|| vmStatus.equals(\"CyclingRole\"));\n}", "path": "esc\\src\\main\\java\\org\\cloudifysource\\esc\\driver\\provisioning\\azure\\client\\MicrosoftAzureRestClient.java", "repo_name": "CloudifySource/cloudify", "stars": 351, "license": "None", "language": "java", "size": 141067}
{"docstring": "/**\n * \u6309\u7167url\u67e5\u8be2\n * @param url\n * @return\n * @throws SQLException\n */\n", "func_signal": "public NewsItem searchByUrl(String url) throws SQLException", "code": "{\n\n    List<NewsItem> newsItems = mNewsItemDao.queryBuilder().where().eq(\"url\",url).query();\n    if (newsItems.size() > 0){\n        return newsItems.get(0);\n    }\n    return null;\n\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsItemDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u5b9e\u73b0\u70b9\u51fb\u4e24\u6b21\u9000\u51fa\u7a0b\u5e8f\n */\n", "func_signal": "private void exit()", "code": "{\n    if (mIsExit){\n        finish();\n        System.exit(0);\n    }else {\n        mIsExit = true;\n        Toast.makeText(getApplicationContext(),R.string.click_to_exit,Toast.LENGTH_SHORT).show();\n        //\u4e24\u79d2\u5185\u4e0d\u70b9\u51fbback\u5219\u91cd\u7f6emIsExit\n        mExitHandler.sendEmptyMessageDelayed(0,TIME_TO_EXIT);\n    }\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\ui\\MainActivity.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6309\u7167\u6807\u9898\u5220\u9664\n * @param   title \u9700\u8981\u5220\u9664\u7684\u65b0\u95fb\u5185\u5bb9\u7684\u6807\u9898\n * @return\n * @throws java.sql.SQLException\n */\n", "func_signal": "public int deleteByTitle(String title) throws SQLException", "code": "{\n\n    DeleteBuilder<NewsContent, Integer> deleteBuilder = mNewsContentDao.deleteBuilder();\n    deleteBuilder.where().eq(\"title\",title);\n    return deleteBuilder.delete();\n\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsContentDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u83b7\u53d6\u65b0\u95fb\u9879\u7684\u6570\u636e\u5e93\u7f13\u5b58\n * @param newsType  \u7c7b\u578b\n * @param currentPage   \u5f53\u524d\u9875\n * @param isNeedRefresh \u662f\u5426\u5f3a\u5236\u5237\u65b0\n * @return  \u65b0\u95fb\u9879\u5217\u8868\u7f13\u5b58\n * @throws SQLException\n */\n", "func_signal": "public List<NewsItem> getNewsItemCache(int newsType,int currentPage,boolean isNeedRefresh) throws SQLException", "code": "{\n    //\u5982\u679c\u7f13\u5b58\u4e3a\u7a7a\u6216\u9700\u8981\u5237\u65b0\u7f13\u5b58\u65f6\u91cd\u65b0\u4ece\u6570\u636e\u5e93\u63d0\u53d6\u6570\u636e\n    if (mNewsItemCache == null || isNeedRefresh){\n        mNewsItemCache = mNewsItemDao.searchByPageAndType(currentPage,newsType);\n    }\n    return mNewsItemCache;\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\biz\\NewsItemBiz.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6839\u636e\u65b0\u95fb\u7c7b\u578b\u548c\u9875\u7801\u5f97\u5230\u65b0\u95fb\u5217\u8868\n * @param newsType      \u65b0\u95fb\u7c7b\u578b\n * @param currentPage   \u9875\u7801\n * @param netAvailable  \u5f53\u524d\u662f\u5426\u6709\u7f51\u7edc\n * @return              \u65b0\u95fb\u5217\u8868\n * @throws Exception\n */\n", "func_signal": "public List<NewsItem> getNewsItems(int newsType,int currentPage,boolean netAvailable) throws Exception", "code": "{\n\n    //\u5f53\u65e0\u7f51\u7edc\u65f6\u52a0\u8f7d\u6570\u636e\u5e93\u4e2d\u6570\u636e\n    Log.i(\"ASDNET\",\"netAvailable:\"+netAvailable);\n\n    if (!netAvailable ){\n        return getNewsItemCache(newsType,currentPage,false);\n    }\n    //\u6709\u7f51\u7edc\u65f6\u67e5\u770b\u6570\u636e\u662f\u5426\u8fc7\u671f,\u672a\u8fc7\u671f\u5219\u8fd4\u56de\u7f13\u5b58\u6570\u636e\n    if (getNewsItemCache(newsType,currentPage,false) != null\n            && this.isOutOfTime(getNewsItemCache(newsType,currentPage,false).get(0)) > 0){\n        return getNewsItemCache(newsType,currentPage,true);\n    }\n    //\u82e5\u6570\u636e\u5df2\u8fc7\u671f\uff0c\u5219\u91cd\u65b0\u83b7\u53d6\n\n    String url = SuesApiUtils.getNewsUrl(newsType, currentPage);\n    String htmlStr = null;\n    //\u5982\u679c\u670d\u52a1\u5668\u672a\u8fd4\u56de\u6570\u636e,\u5219\u8fd4\u56de\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\n    try {\n        htmlStr = HttpUtils.doGet(url);\n    }catch (Exception ex){\n        return getNewsItemCache(newsType,currentPage,true);\n    }\n    List<NewsItem> newsItems = new ArrayList<NewsItem>();\n\n    NewsItem newsItem;\n    Document document = Jsoup.parse(htmlStr);\n    Element itemTable = document.getElementsByClass(BASE_TABLE_CLASS).get(0);\n    Elements items = itemTable.child(0).children();\n    for (int i=0;i<items.size();i++){\n        newsItem = new NewsItem();\n        newsItem.setType(newsType);\n\n        Element columnTable = items.get(i).getElementsByClass(COLUMN_TABLE_CLASS).get(0);\n        Element link = columnTable.getElementsByTag(\"a\").get(0);\n        String contentUrl = link.attr(\"href\");  //\u65b0\u95fb\u5185\u5bb9\u94fe\u63a5\n        newsItem.setUrl(SuesApiUtils.NEWS_URL_MAIN + contentUrl);\n\n        newsItem.setTitle(link.child(0).text());    //\u8bbe\u7f6e\u65b0\u95fb\u6807\u9898\n\n        //\u5a92\u4f53\u805a\u7126\u9875\u9762\u6709\u6765\u6e90\u65e0\u65f6\u95f4\n        if (newsType != NewsTypes.NEWS_TPYE_MTJJ){\n            Element postTime = columnTable.getElementsByClass(POST_TIME_CLASS).get(0);\n            newsItem.setDate(postTime.text());\n        }else{\n            Element source = columnTable.getElementsByClass(NEWS_SOURCE_CLASS).get(0);\n            newsItem.setSource(source.text());\n        }\n\n        newsItem.setPageNumber(currentPage);\n        //\u6587\u7ae0\u5185\u5bb9\u70b9\u51fb\u8fdb\u5165\u540e\u518d\u6dfb\u52a0\n\n        newsItem.setUpdateTime(new Date());\n        newsItems.add(newsItem);\n\n    }\n\n    //\u5c06\u6570\u636e\u6dfb\u52a0\u8fdb\u6570\u636e\u5e93\n    for(NewsItem item : newsItems) {\n        mNewsItemDao.createOrUpdate(item);\n    }\n    //\u5c06\u6570\u636e\u6dfb\u52a0\u8fdb\u7f13\u5b58\n    setNewsItemCache(newsItems);\n\n    return newsItems;\n\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\biz\\NewsItemBiz.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6309\u7167\u6807\u9898\u67e5\u8be2\n * @param title\n * @return\n * @throws SQLException\n */\n", "func_signal": "public NewsItem searchByTitle(String title) throws SQLException", "code": "{\n\n    List<NewsItem> newsItems = mNewsItemDao.queryBuilder().where().eq(\"title\",title).query();\n    if (newsItems.size() > 0){\n        return newsItems.get(0);\n    }\n    return null;\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsItemDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6839\u636e\u6ed1\u52a8\u65b9\u5411\u8bbe\u7f6eToolBar\u7684\u663e\u9690\n * @param scrollState   \u6ed1\u52a8\u65b9\u5411\n */\n", "func_signal": "@Override\npublic void onUpOrCancelMotionEvent(ScrollState scrollState)", "code": "{\n    if (scrollState == ScrollState.UP){\n        if (toolbarIsShown()){\n            hideToolbar();\n        }\n    } else if (scrollState == ScrollState.DOWN){\n        if (toolbarIsHidden()){\n            showToolbar();\n        }\n    }\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\ui\\MainActivity.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u5f97\u5230\u65b0\u95fb\u5217\u8868\u540e\u5c06\u5176\u52a0\u8f7d\n * @param newsItems \u5f97\u5230\u7684\u65b0\u95fb\u5217\u8868\n */\n", "func_signal": "@Override\nprotected void onPostExecute(List<NewsItem> newsItems)", "code": "{\n    if (newsItems == null) {\n        Toast.makeText(getActivity(),getActivity().getResources().getString(R.string.net_unavaiable)\n                ,Toast.LENGTH_LONG).show();\n        return;\n    }\n    //\u5904\u7406\u5f3a\u5236\u5237\u65b0\n    if(mIsForced){\n        mAdapter.getmNewsList().clear();\n    }\n    mNewsItems.addAll(newsItems);\n    mAdapter.addNews(newsItems);\n    mAdapter.notifyDataSetChanged();\n    frame.refreshComplete();\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\ui\\fragments\\NewsListFragment.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6309\u7167url\u5220\u9664\n * @param   url \u9700\u8981\u5220\u9664\u7684\u65b0\u95fb\u9879\u7684url\n * @return\n * @throws SQLException\n */\n", "func_signal": "public int deleteByUrl(String url) throws SQLException", "code": "{\n\n    DeleteBuilder<NewsItem, Integer> deleteBuilder = mNewsItemDao.deleteBuilder();\n    deleteBuilder.where().eq(\"url\",url);\n    return deleteBuilder.delete();\n\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsItemDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u5f97\u5230\u672a\u8fc7\u671f\u7684\u6700\u8fdf\u65f6\u95f4\uff08\u5373\u4fee\u6539\u65f6\u95f4\u5c0f\u4e8e\u6b64\u65f6\u95f4\u4e3a\u8fc7\u671f\uff09\n * @return \u8fc7\u671f\u65f6\u95f4\n */\n", "func_signal": "public Date getUnOutOfTimeDate()", "code": "{\n    Date date = new Date();\n    Calendar calendar = Calendar.getInstance();\n    calendar.setTime(date);\n    calendar.add(Calendar.MINUTE, - OUTOFTIME_MINUTE);\n    return calendar.getTime();\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\biz\\NewsItemBiz.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6309\u7167\u6807\u9898\u67e5\u8be2\n * @param title\n * @return\n * @throws SQLException\n */\n", "func_signal": "public NewsContent searchByTitle(String title) throws SQLException", "code": "{\n\n    List<NewsContent> newsContents = mNewsContentDao.queryBuilder().where().eq(\"title\",title).query();\n    if (newsContents.size() > 0){\n        return newsContents.get(0);\n    }\n    return null;\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsContentDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6e05\u9664\u7f13\u5b58\u6570\u636e\u5e93\n */\n", "func_signal": "public void clearCache()", "code": "{\n    mNewsContentDao.deleteAll();\n    mNewsItemDao.deleteAll();\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\biz\\NewsItemBiz.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6309\u7167\u6807\u9898\u5220\u9664\n * @param   title \u9700\u8981\u5220\u9664\u7684\u65b0\u95fb\u9879\u7684\u6807\u9898\n * @return\n * @throws SQLException\n */\n", "func_signal": "public int deleteByTitle(String title) throws SQLException", "code": "{\n\n    DeleteBuilder<NewsItem, Integer> deleteBuilder = mNewsItemDao.deleteBuilder();\n    deleteBuilder.where().eq(\"title\",title);\n    return deleteBuilder.delete();\n\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsItemDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6839\u636e\u65b0\u95fb\u7684url\u83b7\u53d6\u65b0\u95fb\u5185\u5bb9\n * @param url \u65b0\u95fburl\n * @return\n */\n", "func_signal": "public NewsContent getNewsContent(String url) throws Exception", "code": "{\n\n    NewsContent content = mNewsContentDao.searchByUrl(url);\n    if (content != null){\n        return content;\n    }\n    //\u83b7\u53d6html\n    String htmlStr = HttpUtils.doGet(url);\n//        Log.i(\"ASD\",\"html\"+htmlStr);\n    NewsContent news = new NewsContent();\n\n    Document document = Jsoup.parse(htmlStr);\n//        Log.i(\"ASD\",\"html\"+htmlStr);\n    //\u65b0\u95fburl\n    news.setUrl(url);\n\n    //\u65b0\u95fb\u6807\u9898\n    Element titleElement = document.getElementsByClass(NEWS_TITLE_CLASS).get(0);\n    Log.i(\"ASD\",\"Title: \"+titleElement.text());\n    news.setTitle(titleElement.text());\n\n    //\u5305\u542b\u65b0\u95fb\u4fe1\u606f\u7684p\u6807\u7b7e\n    Element metaElement = document.getElementsByClass(NEWS_META_CLASS).get(0);\n    Log.i(\"ASD\",\"metaElement\"+metaElement.text());\n    //\u65b0\u95fb\u65f6\u95f4\n    news.setDate(StringUtils.getDateFromString(metaElement.text()));\n    Log.i(\"ASDDATE\",\"date:  \"+StringUtils.getDateFromString(metaElement.text()));\n\n    //\u65b0\u95fb\u4f5c\u8005\n    Element authorElement = document.getElementsByClass(NEWS_META_ITEM_CLASS).get(0);\n    Log.i(\"ASD\",\"authorElement\"+authorElement.text());\n    news.setAuthor(authorElement.text());\n\n    //\u65b0\u95fb\u6765\u6e90\n    Element sourceElement = document.getElementsByClass(NEWS_META_ITEM_CLASS).get(2);\n    Log.i(\"ASD\",\"sourceElement\"+sourceElement.text());\n    news.setSource(sourceElement.text());\n\n    //\u65b0\u95fb\u5185\u5bb9\n    Element contentElement = document.getElementsByClass(NEWS_ARTICLE_CLASS).get(0);\n    Elements contentItems = contentElement.children();\n    //\u65b0\u95fb\u5185\u5bb9\u90fd\u5728p\u6807\u7b7e\u5185\uff0c\u5176\u4e2d\u67d0\u4e9b\u662f\u56fe\u7247\n    for(Element contentItem : contentItems){\n\n        Elements images = contentItem.getElementsByTag(\"img\");\n        //\u83b7\u53d6\u56fe\u7247\n        if (images.size() > 0){\n            for (Element image : images){\n//                    news.addImgUrl(image.attr(\"src\"));\n            }\n            continue;\n        }\n        if(contentItem.text().trim().length()<=1){\n            continue;\n        }\n        Log.i(\"ASD\",\"contentText\"+contentItem.text() + \" length: \" + contentItem.text().trim().length());\n        news.addContent(contentItem.text());\n\n    }\n\n    //\u5c06\u6570\u636e\u6dfb\u52a0\u8fdb\u6570\u636e\u5e93\n    mNewsContentDao.createOrUpdate(news);\n\n    return news;\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\biz\\NewsItemBiz.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n *\u5f97\u5230\u5f53\u524d\u9875\u7801\u7684\u65b0\u95fb\u5217\u8868\n * @param currentPage \u5f53\u524d\u9875\u7801\n * @return \u5f53\u524d\u9875\u7801\u7684\u65b0\u95fb\u5217\u8868,\u51fa\u9519\u8fd4\u56denull\n */\n", "func_signal": "@Override\nprotected List<NewsItem> doInBackground(Integer... currentPage)", "code": "{\n\n    try {\n\n        boolean netAvailable = HttpUtils.IsNetAvailable(getActivity());\n        //\u5982\u679c\u5f53\u524d\u662f\u7b2c\u4e00\u6b21\u52a0\u8f7d\uff0c\u5219\u76f4\u63a5\u4ece\u6570\u636e\u5e93\u8bfb\u53d6\n        if (netAvailable && mIsFirstLoad){\n            mIsFirstLoad = false;\n            return mNewsItemBiz.getNewsItemCache(mNewsType, currentPage[0], true);\n        }\n        return mNewsItemBiz.getNewsItems(mNewsType, currentPage[0],netAvailable);\n    } catch (Exception e) {\n        e.printStackTrace();\n        Log.i(\"ASDNET\",\"neterror :\"+e);\n        return null;\n    }\n\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\ui\\fragments\\NewsListFragment.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u5c06toolbar\u79fb\u52a8\u5230\u67d0\u4e2a\u4f4d\u7f6e\n * @param toTranslationY \u79fb\u52a8\u5230\u7684Y\u8f74\u4f4d\u7f6e\n */\n", "func_signal": "private void moveToolbar(float toTranslationY)", "code": "{\n    if(mToolbar.getTranslationY() == toTranslationY){\n        return;\n    }\n    //\u5229\u7528\u52a8\u753b\u8fc7\u6e21\u79fb\u52a8\u7684\u8fc7\u7a0b\n    final ValueAnimator animator = ValueAnimator.ofFloat(mToolbar.getTranslationY(),toTranslationY).\n            setDuration(200);\n    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator valueAnimator) {\n            float translationY = (Float) animator.getAnimatedValue();\n            mToolbar.setTranslationY(translationY);\n            mContent.setTranslationY(translationY);\n            FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) mContent.getLayoutParams();\n            lp.height = (int) (getScreenHeight() - translationY - getStatusBarHeight()\n                    - lp.topMargin);\n            if (CURRENT_VERSION >= VERSION_KITKAT && VERSION_LOLLIPOP > CURRENT_VERSION){\n                lp.height -= getNavigationBarHeight();\n            }\n            Log.i(\"TEST\", \"after\" + Float.toString(mToolbar.getHeight()));\n            mContent.requestLayout();\n        }\n    });\n    animator.start();\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\ui\\MainActivity.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u83b7\u53d6\u67d0\u4e00\u9875\u7684\u6570\u636e\n * @param adapter\n * @param currentPage \u9875\u7801\n * @param forced      \u662f\u5426\u5f3a\u5236\u5237\u65b0\n */\n", "func_signal": "private void getNewsList(MyRecyclerAdapter adapter,int currentPage,boolean forced)", "code": "{\n    int total = mNewsItems.size();\n    //\u4e0d\u5f3a\u5236\u5237\u65b0\u65f6\uff0c\u5982\u679c\u6b64\u9875\u5df2\u5b58\u5728\u5219\u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\n    if (!forced && total>0 &&\n            (mNewsItems.get(total-1).getPageNumber() >= currentPage) ){\n        mAdapter.addNews(mNewsItems);\n        mAdapter.notifyDataSetChanged();\n        return;\n    }\n\n    if(forced && mNewsItems.size()>0){\n        mNewsItems.clear();\n    }\n    LoadNewsListTask loadDataTask = new LoadNewsListTask(adapter,mNewsType,forced);\n    loadDataTask.execute(currentPage);\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\ui\\fragments\\NewsListFragment.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6309\u7167url\u5220\u9664\n * @param   url \u9700\u8981\u5220\u9664\u7684\u65b0\u95fb\u5185\u5bb9\u7684url\n * @return\n * @throws SQLException\n */\n", "func_signal": "public int deleteByUrl(String url) throws SQLException", "code": "{\n\n    DeleteBuilder<NewsContent, Integer> deleteBuilder = mNewsContentDao.deleteBuilder();\n    deleteBuilder.where().eq(\"url\",url);\n    return deleteBuilder.delete();\n\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsContentDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u67e5\u770b\u5bf9\u8c61\u662f\u5426\u8fc7\u671f\n * @param t\n * @param <T>\n * @return \u5982\u679c\u672a\u8fc7\u671f\u5219\u8fd4\u56de\u5927\u4e8e0\u7684\u6570\uff0c\u5982\u679c\u8fc7\u671f\u5219\u8fd4\u56de\u5c0f\u4e0e0\u7684\u6570\n */\n", "func_signal": "public <T> int isOutOfTime(T t)", "code": "{\n\n\n    if (t instanceof NewsItem ){\n        return ((NewsItem) t).getUpdateTime().compareTo(getUnOutOfTimeDate());\n    }\n\n    return -1;\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\biz\\NewsItemBiz.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "/**\n * \u6309\u7167\u9875\u7801\u548c\u7c7b\u578b\u67e5\u8be2\n * @param page\n * @param type\n * @return\n * @throws SQLException\n */\n", "func_signal": "public List<NewsItem> searchByPageAndType(int page,int type) throws SQLException", "code": "{\n\n    List<NewsItem> newsItems = mNewsItemDao.queryBuilder().where().eq(\"pageNumber\",page).and()\n            .eq(\"type\",type).query();\n    if (newsItems.size() > 0){\n        return newsItems;\n    }\n    return null;\n}", "path": "SUESNews\\app\\src\\main\\java\\com\\example\\lee\\suesnews\\dao\\NewsItemDao.java", "repo_name": "sues-lee/SuesNews", "stars": 446, "license": "mit", "language": "java", "size": 10832}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tthis.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);\n\n\tfinal EngineOptions engineOptions = new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera);\n\tengineOptions.getAudioOptions().setNeedsSound(true);\n\treturn engineOptions;\n}", "path": "src\\org\\andengine\\examples\\game\\snake\\SnakeGameActivity.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "private void addCard(final Card pCard, final int pX, final int pY)", "code": "{\n\tfinal Sprite sprite = new Sprite(pX, pY, this.mCardTotextureRegionMap.get(pCard), this.getVertexBufferObjectManager()) {\n\t\tboolean mGrabbed = false;\n\n\t\t@Override\n\t\tpublic boolean onAreaTouched(final TouchEvent pSceneTouchEvent, final float pTouchAreaLocalX, final float pTouchAreaLocalY) {\n\t\t\tswitch(pSceneTouchEvent.getAction()) {\n\t\t\t\tcase TouchEvent.ACTION_DOWN:\n\t\t\t\t\tthis.setScale(1.25f);\n\t\t\t\t\tthis.mGrabbed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TouchEvent.ACTION_MOVE:\n\t\t\t\t\tif(this.mGrabbed) {\n\t\t\t\t\t\tthis.setPosition(pSceneTouchEvent.getX() - Card.CARD_WIDTH / 2, pSceneTouchEvent.getY() - Card.CARD_HEIGHT / 2);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase TouchEvent.ACTION_UP:\n\t\t\t\t\tif(this.mGrabbed) {\n\t\t\t\t\t\tthis.mGrabbed = false;\n\t\t\t\t\t\tthis.setScale(1.0f);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t};\n\n\tthis.mScene.attachChild(sprite);\n\tthis.mScene.registerTouchArea(sprite);\n}", "path": "src\\org\\andengine\\examples\\PinchZoomExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tthis.mZoomCamera = new ZoomCamera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);\n\n\tfinal EngineOptions engineOptions = new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mZoomCamera);\n\n\tif(MultiTouch.isSupported(this)) {\n\t\tif(MultiTouch.isSupportedDistinct(this)) {\n\t\t\tToast.makeText(this, \"MultiTouch detected --> Both controls will work properly!\", Toast.LENGTH_SHORT).show();\n\t\t} else {\n\t\t\tToast.makeText(this, \"MultiTouch detected, but your device has problems distinguishing between fingers.\\n\\nControls are placed at different vertical locations.\", Toast.LENGTH_LONG).show();\n\t\t}\n\t} else {\n\t\tToast.makeText(this, \"Sorry your device does NOT support MultiTouch!\\n\\n(Falling back to SingleTouch.)\\n\\nControls are placed at different vertical locations.\", Toast.LENGTH_LONG).show();\n\t}\n\n\treturn engineOptions;\n}", "path": "src\\org\\andengine\\examples\\PinchZoomExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tToast.makeText(this, \"Click the top half of the screen to zoom in or the bottom half to zoom out!\", Toast.LENGTH_LONG);\n\n\tthis.mSmoothCamera = new SmoothCamera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT, 0, 0, 0.1f) {\n\t\t@Override\n\t\tpublic void onUpdate(final float pSecondsElapsed) {\n\t\t\tswitch (ETC1TextureExample.this.mZoomState) {\n\t\t\t\tcase IN:\n\t\t\t\t\tthis.setZoomFactor(this.getZoomFactor() + 0.1f * pSecondsElapsed);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OUT:\n\t\t\t\t\tthis.setZoomFactor(this.getZoomFactor() - 0.1f * pSecondsElapsed);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsuper.onUpdate(pSecondsElapsed);\n\t\t}\n\t};\n\n\treturn new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mSmoothCamera);\n}", "path": "src\\org\\andengine\\examples\\ETC1TextureExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tToast.makeText(this, \"Touch the image to toggle the playback of this awesome 8-bit style .MOD music.\", Toast.LENGTH_LONG).show();\n\n\tfinal Camera camera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);\n\n\treturn new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), camera);\n}", "path": "src\\org\\andengine\\examples\\ModPlayerExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tfinal Camera camera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);\n\n\treturn new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), camera);\n}", "path": "src\\org\\andengine\\examples\\StrokeFontExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Getter & Setter\n// ===========================================================\n", "func_signal": "public void set(final float pX,final float pY)", "code": "{\n\tthis.mX = pX;\n\tthis.mY = pY;\n}", "path": "src\\org\\andengine\\examples\\game\\pong\\adt\\messages\\server\\UpdateBallServerMessage.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "public void updateScore(final int pPaddleID, final int pPoints)", "code": "{\n\tfinal Text scoreText = this.mScoreTextMap.get(pPaddleID);\n\tscoreText.setText(String.valueOf(pPoints));\n\n\t/* Adjust position of left Score, so that it doesn't overlap the middle line. */\n\tif(pPaddleID == PADDLE_LEFT.getOwnerID()) {\n\t\tscoreText.setPosition(-scoreText.getWidth() - SCORE_PADDING, scoreText.getY());\n\t}\n}", "path": "src\\org\\andengine\\examples\\game\\pong\\PongGameActivity.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Constructors\n// ===========================================================\n", "func_signal": "public PongServerConnector(final String pServerIP, final ISocketConnectionServerConnectorListener pSocketConnectionServerConnectorListener) throws IOException", "code": "{\n\tsuper(new SocketConnection(new Socket(pServerIP, SERVER_PORT)), pSocketConnectionServerConnectorListener);\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_CONNECTION_CLOSE, ConnectionCloseServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tPongGameActivity.this.finish();\n\t\t}\n\t});\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_CONNECTION_ESTABLISHED, ConnectionEstablishedServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tDebug.d(\"CLIENT: Connection established.\");\n\t\t}\n\t});\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_CONNECTION_REJECTED_PROTOCOL_MISSMATCH, ConnectionRejectedProtocolMissmatchServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tfinal ConnectionRejectedProtocolMissmatchServerMessage connectionRejectedProtocolMissmatchServerMessage = (ConnectionRejectedProtocolMissmatchServerMessage)pServerMessage;\n\t\t\tif(connectionRejectedProtocolMissmatchServerMessage.getProtocolVersion() > MessageConstants.PROTOCOL_VERSION) {\n\t\t\t\t//\t\t\t\t\t\tToast.makeText(context, text, duration).show();\n\t\t\t} else if(connectionRejectedProtocolMissmatchServerMessage.getProtocolVersion() < MessageConstants.PROTOCOL_VERSION) {\n\t\t\t\t//\t\t\t\t\t\tToast.makeText(context, text, duration).show();\n\t\t\t}\n\t\t\tPongGameActivity.this.finish();\n\t\t}\n\t});\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_CONNECTION_PONG, ConnectionPongServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tfinal ConnectionPongServerMessage connectionPongServerMessage = (ConnectionPongServerMessage) pServerMessage;\n\t\t\tfinal long roundtripMilliseconds = System.currentTimeMillis() - connectionPongServerMessage.getTimestamp();\n\t\t\tDebug.v(\"Ping: \" + roundtripMilliseconds / 2 + \"ms\");\n\t\t}\n\t});\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_SET_PADDLEID, SetPaddleIDServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tfinal SetPaddleIDServerMessage setPaddleIDServerMessage = (SetPaddleIDServerMessage) pServerMessage;\n\t\t\tPongGameActivity.this.setPaddleID(setPaddleIDServerMessage.mPaddleID);\n\t\t}\n\t});\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_UPDATE_SCORE, UpdateScoreServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tfinal UpdateScoreServerMessage updateScoreServerMessage = (UpdateScoreServerMessage) pServerMessage;\n\t\t\tPongGameActivity.this.updateScore(updateScoreServerMessage.mPaddleID, updateScoreServerMessage.mScore);\n\t\t}\n\t});\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_UPDATE_BALL, UpdateBallServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tfinal UpdateBallServerMessage updateBallServerMessage = (UpdateBallServerMessage) pServerMessage;\n\t\t\tPongGameActivity.this.updateBall(updateBallServerMessage.mX, updateBallServerMessage.mY);\n\t\t}\n\t});\n\n\tthis.registerServerMessage(FLAG_MESSAGE_SERVER_UPDATE_PADDLE, UpdatePaddleServerMessage.class, new IServerMessageHandler<SocketConnection>() {\n\t\t@Override\n\t\tpublic void onHandleMessage(final ServerConnector<SocketConnection> pServerConnector, final IServerMessage pServerMessage) throws IOException {\n\t\t\tfinal UpdatePaddleServerMessage updatePaddleServerMessage = (UpdatePaddleServerMessage) pServerMessage;\n\t\t\tPongGameActivity.this.updatePaddle(updatePaddleServerMessage.mPaddleID, updatePaddleServerMessage.mX, updatePaddleServerMessage.mY);\n\t\t}\n\t});\n\n}", "path": "src\\org\\andengine\\examples\\game\\pong\\PongGameActivity.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\nprotected Dialog onCreateDialog(final int pId)", "code": "{\n\tswitch(pId) {\n\t\tcase DIALOG_DEVICE_NOT_SUPPORTED:\n\t\t\treturn new AlertDialog.Builder(this)\n\t\t\t\t.setTitle(R.string.dialog_device_not_supported_title)\n\t\t\t\t.setMessage(R.string.dialog_device_not_supported_message)\n\t\t\t\t.setIcon(android.R.drawable.ic_dialog_alert)\n\t\t\t\t.setPositiveButton(android.R.string.ok, null)\n\t\t\t\t.create();\n\t\tcase DIALOG_FIRST_APP_LAUNCH:\n\t\t\treturn new AlertDialog.Builder(this)\n\t\t\t\t.setTitle(R.string.dialog_first_app_launch_title)\n\t\t\t\t.setMessage(R.string.dialog_first_app_launch_message)\n\t\t\t\t.setIcon(android.R.drawable.ic_dialog_info)\n\t\t\t\t.setPositiveButton(android.R.string.ok, null)\n\t\t\t\t.create();\n\t\tcase DIALOG_BENCHMARKS_SUBMIT_PLEASE:\n\t\t\treturn new AlertDialog.Builder(this)\n\t\t\t\t.setTitle(R.string.dialog_benchmarks_submit_please_title)\n\t\t\t\t.setMessage(R.string.dialog_benchmarks_submit_please_message)\n\t\t\t\t.setIcon(android.R.drawable.ic_dialog_info)\n\t\t\t\t.setPositiveButton(android.R.string.ok, null)\n\t\t\t\t.create();\n\t\tcase DIALOG_NEW_IN_THIS_VERSION:\n\t\t\tfinal int[] versionCodes = this.getResources().getIntArray(R.array.new_in_version_versioncode);\n\t\t\tfinal int versionDescriptionsStartIndex = Math.max(0, Arrays.binarySearch(versionCodes, this.mVersionCodeLastLaunch) + 1);\n\n\t\t\tfinal String[] versionDescriptions = this.getResources().getStringArray(R.array.new_in_version_changes);\n\n\t\t\tfinal StringBuilder sb = new StringBuilder();\n\t\t\tfor(int i = versionDescriptions.length - 1; i >= versionDescriptionsStartIndex; i--) {\n\t\t\t\tsb.append(\"--------------------------\\n\");\n\t\t\t\tsb.append(\">>>  Version: \" + versionCodes[i] + \"\\n\");\n\t\t\t\tsb.append(\"--------------------------\\n\");\n\t\t\t\tsb.append(versionDescriptions[i]);\n\n\t\t\t\tif(i > versionDescriptionsStartIndex){\n\t\t\t\t\tsb.append(\"\\n\\n\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new AlertDialog.Builder(this)\n\t\t\t\t.setTitle(R.string.dialog_new_in_this_version_title)\n\t\t\t\t.setMessage(sb.toString())\n\t\t\t\t.setIcon(android.R.drawable.ic_dialog_info)\n\t\t\t\t.setPositiveButton(android.R.string.ok, null)\n\t\t\t\t.create();\n\t\tdefault:\n\t\t\treturn super.onCreateDialog(pId);\n\t}\n}", "path": "src\\org\\andengine\\examples\\launcher\\ExampleLauncher.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "public boolean isFirstTime(final String pKey)", "code": "{\n\tfinal SharedPreferences prefs = this.getPreferences(Context.MODE_PRIVATE);\n\tif(prefs.getBoolean(pKey, true)){\n\t\tprefs.edit().putBoolean(pKey, false).commit();\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\org\\andengine\\examples\\launcher\\ExampleLauncher.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "private void submitResults()", "code": "{\n\tthis.doAsync(R.string.dialog_benchmark_submit_title, R.string.dialog_benchmark_submit_message, new Callable<Boolean>() {\n\t\t@Override\n\t\tpublic Boolean call() throws Exception {\n\t\t\t// Create a new HttpClient and Post Header\n\t\t\tfinal HttpClient httpClient = new DefaultHttpClient();\n\t\t\tfinal HttpPost httpPost = new HttpPost(SUBMIT_URL);\n\n\t\t\t// Add your data\n\t\t\tfinal List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(18);\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"benchmark_id\", String.valueOf(BaseBenchmark.this.getBenchmarkID())));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"benchmark_versionname\", BaseBenchmark.getVersionName(BaseBenchmark.this)));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"benchmark_versioncode\", String.valueOf(BaseBenchmark.getVersionCode(BaseBenchmark.this))));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"benchmark_fps\", String.valueOf(BaseBenchmark.this.mFPS).replace(\",\", \".\")));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_model\", Build.MODEL));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_android_version\", Build.VERSION.RELEASE));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_sdk_version\", String.valueOf(Build.VERSION.SDK_INT)));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_manufacturer\", Build.MANUFACTURER));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_brand\", Build.BRAND));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_build_id\", Build.ID));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_build\", Build.DISPLAY));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_device\", Build.DEVICE));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_product\", Build.PRODUCT));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_cpuabi\", Build.CPU_ABI));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_board\", Build.BOARD));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_fingerprint\", Build.FINGERPRINT));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"benchmark_extension_vbo\", \"1\"));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"benchmark_extension_drawtexture\", \"1\"));\n\t\t\tfinal TelephonyManager telephonyManager = (TelephonyManager)BaseBenchmark.this.getSystemService(Context.TELEPHONY_SERVICE);\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_imei\", telephonyManager.getDeviceId()));\n\t\t\tfinal DisplayMetrics displayMetrics = new DisplayMetrics();\n\t\t\tBaseBenchmark.this.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_displaymetrics_widthpixels\", String.valueOf(displayMetrics.widthPixels)));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_displaymetrics_heightpixels\", String.valueOf(displayMetrics.heightPixels)));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_displaymetrics_xdpi\", String.valueOf(displayMetrics.xdpi)));\n\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_displaymetrics_ydpi\", String.valueOf(displayMetrics.ydpi)));\n\t\t\ttry{\n\t\t\t\tfinal float bogoMips = SystemUtils.getCPUBogoMips();\n\t\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_cpuinfo_bogomips\", String.valueOf(bogoMips)));\n\t\t\t}catch(IllegalStateException e) {\n\t\t\t\tDebug.e(e);\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\t\tfinal float memoryTotal = SystemUtils.getMemoryTotal();\n\t\t\t\tfinal float memoryFree = SystemUtils.getMemoryFree();\n\t\t\t\t\n\t\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_memoryinfo_total\", String.valueOf(memoryTotal)));\n\t\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_memoryinfo_free\", String.valueOf(memoryFree)));\n\t\t\t}catch(IllegalStateException e) {\n\t\t\t\tDebug.e(e);\n\t\t\t}\n\t\t\t\n\t\t\ttry{\n\t\t\t\tfinal int cpuFrequencyCurrent = SystemUtils.getCPUFrequencyCurrent();\n\t\t\t\tfinal int cpuFrequencyMax = SystemUtils.getCPUFrequencyMax();\n\t\t\t\t\n\t\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_cpuinfo_frequency_current\", String.valueOf(cpuFrequencyCurrent)));\n\t\t\t\tnameValuePairs.add(new BasicNameValuePair(\"device_cpuinfo_frequency_max\", String.valueOf(cpuFrequencyMax)));\n\t\t\t}catch(SystemUtilsException e) {\n\t\t\t\tDebug.e(e);\n\t\t\t}\n\n\t\t\thttpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n\n\t\t\t// Execute HTTP Post Request\n\t\t\tfinal HttpResponse response = httpClient.execute(httpPost);\n\n\t\t\tfinal int statusCode = response.getStatusLine().getStatusCode();\n\n\t\t\tDebug.d(StreamUtils.readFully(response.getEntity().getContent()));\n\n\t\t\tif(statusCode == HttpStatus.SC_OK) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException();\n\t\t\t}\n\t\t}\n\t}, new Callback<Boolean>() {\n\t\t@Override\n\t\tpublic void onCallback(final Boolean pCallbackValue) {\n\t\t\tBaseBenchmark.this.runOnUiThread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tToast.makeText(BaseBenchmark.this, \"Success\", Toast.LENGTH_LONG).show();\n\t\t\t\t\tBaseBenchmark.this.finish();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, new Callback<Exception>() {\n\t\t@Override\n\t\tpublic void onCallback(final Exception pException) {\n\t\t\tDebug.e(pException);\n\t\t\tToast.makeText(BaseBenchmark.this, \"Exception occurred: \" + pException.getClass().getSimpleName(), Toast.LENGTH_SHORT).show();\n\t\t\tBaseBenchmark.this.finish();\n\t\t}\n\t});\n}", "path": "src\\org\\andengine\\examples\\benchmark\\BaseBenchmark.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tToast.makeText(this, \"Touch the screen to add objects.\", Toast.LENGTH_SHORT).show();\n\tToast.makeText(this, \"The difference to the normal physics example is that here the simulation steps have a fixed size, which makes the simuation reproduceable.\", Toast.LENGTH_LONG).show();\n\n\tfinal Camera camera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);\n\n\treturn new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), camera);\n}", "path": "src\\org\\andengine\\examples\\PhysicsFixedStepExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tthis.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);\n\n\tfinal EngineOptions engineOptions = new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera);\n\tengineOptions.getTouchOptions().setNeedsMultiTouch(true);\n\n\tif(MultiTouch.isSupported(this)) {\n\t\tif(MultiTouch.isSupportedDistinct(this)) {\n\t\t\tToast.makeText(this, \"MultiTouch detected --> Both controls will work properly!\", Toast.LENGTH_SHORT).show();\n\t\t} else {\n\t\t\tthis.mPlaceOnScreenControlsAtDifferentVerticalLocations = true;\n\t\t\tToast.makeText(this, \"MultiTouch detected, but your device has problems distinguishing between fingers.\\n\\nControls are placed at different vertical locations.\", Toast.LENGTH_LONG).show();\n\t\t}\n\t} else {\n\t\tToast.makeText(this, \"Sorry your device does NOT support MultiTouch!\\n\\n(Falling back to SingleTouch.)\\n\\nControls are placed at different vertical locations.\", Toast.LENGTH_LONG).show();\n\t}\n\n\treturn engineOptions;\n}", "path": "src\\org\\andengine\\examples\\AnalogOnScreenControlsExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Getter & Setter\n// ===========================================================\n", "func_signal": "public void set(final int pPaddleID, final float pX,final float pY)", "code": "{\n\tthis.mPaddleID = pPaddleID;\n\tthis.mX = pX;\n\tthis.mY = pY;\n}", "path": "src\\org\\andengine\\examples\\game\\pong\\adt\\messages\\server\\UpdatePaddleServerMessage.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Getter & Setter\n// ===========================================================;\n", "func_signal": "protected void showResult(final float pFPS)", "code": "{\n\tthis.mFPS = pFPS;\n\tthis.runOnUiThread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tBaseBenchmark.this.showDialog(DIALOG_SHOW_RESULT);\n\t\t}\n\t});\n}", "path": "src\\org\\andengine\\examples\\benchmark\\BaseBenchmark.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods for/from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(final Menu pMenu)", "code": "{\n\tpMenu.add(Menu.NONE, MENU_PING, Menu.NONE, \"Ping Server\");\n\treturn super.onCreateOptionsMenu(pMenu);\n}", "path": "src\\org\\andengine\\examples\\game\\pong\\PongGameActivity.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Constructors\n// ===========================================================\n", "func_signal": "@Override\npublic void onCreate(final Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\n\tif(!AndEngine.isDeviceSupported()) {\n\t\tthis.showDialog(ExampleLauncher.DIALOG_DEVICE_NOT_SUPPORTED);\n\t}\n\n\tthis.setContentView(R.layout.list_examples);\n\n\tthis.mExpandableExampleLauncherListAdapter = new ExpandableExampleLauncherListAdapter(this);\n\n\tthis.setListAdapter(this.mExpandableExampleLauncherListAdapter);\n\n\tthis.findViewById(R.id.btn_get_involved).setOnClickListener(new OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(final View pView) {\n\t\t\tExampleLauncher.this.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.andengine.org\")));\n\t\t}\n\t});\n\n\tfinal SharedPreferences prefs = this.getPreferences(Context.MODE_PRIVATE);\n\n\tthis.mVersionCodeCurrent = this.getVersionCode();\n\tthis.mVersionCodeLastLaunch = prefs.getInt(ExampleLauncher.PREF_LAST_APP_LAUNCH_VERSIONCODE_ID, -1);\n\n\tif(this.isFirstTime(\"first.app.launch\")) {\n\t\tthis.showDialog(ExampleLauncher.DIALOG_FIRST_APP_LAUNCH);\n\t} else if((this.mVersionCodeLastLaunch != -1) && (this.mVersionCodeLastLaunch < this.mVersionCodeCurrent)){\n\t\tthis.showDialog(ExampleLauncher.DIALOG_NEW_IN_THIS_VERSION);\n\t} else if(this.isFirstTime(\"please.submit.benchmarks\")){\n\t\tthis.showDialog(ExampleLauncher.DIALOG_BENCHMARKS_SUBMIT_PLEASE);\n\t}\n\n\tprefs.edit().putInt(ExampleLauncher.PREF_LAST_APP_LAUNCH_VERSIONCODE_ID, this.mVersionCodeCurrent).commit();\n}", "path": "src\\org\\andengine\\examples\\launcher\\ExampleLauncher.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "private void addFace(final float pX, final float pY)", "code": "{\n\tthis.mFaceCount++;\n\tDebug.d(\"Faces: \" + this.mFaceCount);\n\n\tfinal AnimatedSprite face;\n\tfinal Body body;\n\n\tfinal FixtureDef objectFixtureDef = PhysicsFactory.createFixtureDef(1, 0.5f, 0.5f);\n\n\tif(this.mFaceCount % 2 == 0) {\n\t\tface = new AnimatedSprite(pX, pY, this.mBoxFaceTextureRegion, this.getVertexBufferObjectManager());\n\t\tbody = PhysicsFactory.createBoxBody(this.mPhysicsWorld, face, BodyType.DynamicBody, objectFixtureDef);\n\t} else {\n\t\tface = new AnimatedSprite(pX, pY, this.mCircleFaceTextureRegion, this.getVertexBufferObjectManager());\n\t\tbody = PhysicsFactory.createCircleBody(this.mPhysicsWorld, face, BodyType.DynamicBody, objectFixtureDef);\n\t}\n\n\tface.animate(200);\n\n\tthis.mScene.attachChild(face);\n\tthis.mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(face, body, true, true));\n}", "path": "src\\org\\andengine\\examples\\PhysicsFixedStepExample.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "// ===========================================================\n// Constructors\n// ===========================================================\n", "func_signal": "@Override\npublic EngineOptions onCreateEngineOptions()", "code": "{\n\tthis.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);\n\tthis.mCamera.setCenter(0,0);\n\n\treturn new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera);\n}", "path": "src\\org\\andengine\\examples\\game\\pong\\PongGameActivity.java", "repo_name": "nicolasgramlich/AndEngineExamples", "stars": 378, "license": "None", "language": "java", "size": 90062}
{"docstring": "/**\n * signalStrength.isGsm()           \u662f\u5426GSM\u4fe1\u53f7 2G or 3G\n * signalStrength.getCdmaDbm();     \u8054\u901a3G \u4fe1\u53f7\u5f3a\u5ea6\n * signalStrength.getCdmaEcio();    \u8054\u901a3G \u8f7d\u5e72\u6bd4\n * signalStrength.getEvdoDbm();     \u7535\u4fe13G \u4fe1\u53f7\u5f3a\u5ea6\n * signalStrength.getEvdoEcio();    \u7535\u4fe13G \u8f7d\u5e72\u6bd4\n * signalStrength.getEvdoSnr();     \u7535\u4fe13G \u4fe1\u566a\u6bd4\n * signalStrength.getGsmSignalStrength();  2G \u4fe1\u53f7\u5f3a\u5ea6\n * signalStrength.getGsmBitErrorRate();    2G \u8bef\u7801\u7387\n * \u8f7d\u5e72\u6bd4 \uff0c\u5b83\u662f\u6307\u7a7a\u4e2d\u6a21\u62df\u7535\u6ce2\u4e2d\u7684\u4fe1\u53f7\u4e0e\u566a\u58f0\u7684\u6bd4\u503c\n */\n", "func_signal": "@Override\npublic void onSignalStrengthsChanged(SignalStrength signalStrength)", "code": "{\n    super.onSignalStrengthsChanged(signalStrength);\n    Log.d(TAG, \"onSignalStrengthsChanged() called with \" + \"signalStrength :\"+signalStrength+\";\\n gsmSignalStrength = [\" + signalStrength.getGsmSignalStrength() + \"]\");\n\n//            if (mTelephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_GSM) {\n//                mTvSignalInfo.setText(\"GSM Strength\" + signalStrength.getGsmSignalStrength());\n//            } else if (mTelephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA) {\n//                mTvSignalInfo.setText(\"CDMA Strength\" + signalStrength.getCdmaDbm() + \" dBm\");\n//            } else {\n//                mTvSignalInfo.setText(\"Unknown PhoneType: \" + mTelephonyManager.getPhoneType());\n//            }\n\n    mTvSignalInfo.setText(\"IsGsm : \" + signalStrength.isGsm() +\n            \"\\nCDMA Dbm : \" + signalStrength.getCdmaDbm() + \" Dbm\" +\n            \"\\nCDMA Ecio : \" + signalStrength.getCdmaEcio() +  \" dB*10\" +\n            \"\\nEvdo Dbm : \" + signalStrength.getEvdoDbm() + \" Dbm\" +\n            \"\\nEvdo Ecio : \" + signalStrength.getEvdoEcio() + \" dB*10\" +\n            \"\\nGsm SignalStrength : \" + signalStrength.getGsmSignalStrength() +\n            \"\\nGsm BitErrorRate : \" + signalStrength.getGsmBitErrorRate());\n\n\n\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\info\\DeviceInfoActivty.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u7ed9bitmap\u7740\u8272\n * @param sourceBitmap\n * @param color  rgb\n * @return\n */\n", "func_signal": "public static Bitmap changeBitmapColor(@NonNull Bitmap sourceBitmap, @IntegerRes int color)", "code": "{\n\n    Bitmap resultBitmap = Bitmap.createBitmap(sourceBitmap, 0, 0,\n            sourceBitmap.getWidth() - 1, sourceBitmap.getHeight() - 1);\n    Paint p = new Paint();\n    ColorFilter filter = new LightingColorFilter(color, 1);\n    p.setColorFilter(filter);\n\n    Canvas canvas = new Canvas(resultBitmap);\n    canvas.drawBitmap(resultBitmap, 0, 0, p);\n    return resultBitmap;\n}", "path": "PracticeDemos\\yutils\\src\\main\\java\\yifeiyuan\\practice\\yutils\\BitmapUtils.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * Set up the {@link android.app.ActionBar}, if the API is available.\n */\n", "func_signal": "private void setupActionBar()", "code": "{\n    ActionBar actionBar = getSupportActionBar();\n    if (actionBar != null) {\n        // Show the Up button in the action bar.\n        actionBar.setDisplayHomeAsUpEnabled(true);\n    }\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\ui\\SettingsActivity.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u7ed3\u679c:\n * SyncClass:\u8fd9\u4e2a\u662fA\n SyncClass:\u8fd9\u4e2a\u662fC\n \u8fc7\u4e24\u79d2\u540e\n SyncClass:\u8fd9\u4e2a\u662fB\n */\n", "func_signal": "public static void test()", "code": "{\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                prta();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }).start();\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                prtb();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }).start();\n\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            prtc();\n        }\n    }).start();\n}", "path": "PracticeDemos\\lib\\src\\main\\java\\com\\example\\concurrent\\synchronize\\SyncClass.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n *\n * @param child  \u7528\u6237\u60f3\u8981\u62d6\u52a8\u7684view\n * @param pointerId\n * @return true \u4ee3\u8868\u53ef\u4ee5\u62d6\u52a8\n */\n", "func_signal": "@Override\npublic boolean tryCaptureView(View child, int pointerId)", "code": "{\n    Log.d(TAG, \"tryCaptureView() called with \" + \"child = [\" + child + \"], pointerId = [\" + pointerId + \"]\");\n    return child == mNormal || child == mAutoBack||child == mClickableView;\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\viewdrager\\DragerView.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "//\u7edf\u4e00\u8bbe\u7f6e title\n", "func_signal": "@Override\nprotected void onTitleChanged(CharSequence title, int color)", "code": "{\n    Log.d(TAG, \"onTitleChanged() called with \" + \"title = [\" + title + \"], color = [\" + color + \"]\");\n    super.onTitleChanged(title, color);\n    //Notice \u5982\u679c\u6709collapsingtoolbar \u5c31\u4e0d\u80fd\u5728toolbar\u8bbe\u7f6e(\u65e0\u6548\u679c)\n    if (null != mCollapsingToolbar) {\n        mCollapsingToolbar.setTitle(title);\n    } else if (null != mToolbar) {\n        mToolbar.setTitle(title);\n    }\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\base\\ToolbarActivity.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * This method stops fragment injection in malicious applications.\n * Make sure to deny any unknown fragments here.\n */\n", "func_signal": "protected boolean isValidFragment(String fragmentName)", "code": "{\n    return PreferenceFragment.class.getName().equals(fragmentName)\n            || GeneralPreferenceFragment.class.getName().equals(fragmentName)\n            || DataSyncPreferenceFragment.class.getName().equals(fragmentName)\n            || NotificationPreferenceFragment.class.getName().equals(fragmentName);\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\ui\\SettingsActivity.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u53ef\u4ee5\u63d0\u524d\u83b7\u53d6\u7f51\u9875\u7684 statusCode \u5982200 404\n * Notice \u9700\u8981\u5f02\u6b65\n * @param url \u7f51\u9875\u7684url\n * @return   statusCode \u9ed8\u8ba4-1\n */\n", "func_signal": "public static int getPageStatusCode(String url)", "code": "{\n    int status = -1;\n    try {\n        HttpHead head = new HttpHead(url);\n        HttpClient client = new DefaultHttpClient();\n        HttpResponse resp = client.execute(head);\n        status = resp.getStatusLine().getStatusCode();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return status;\n}", "path": "PracticeDemos\\yutils\\src\\main\\java\\yifeiyuan\\practice\\yutils\\HttpUtils.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u5c06px\u503c\u8f6c\u6362\u4e3asp\u503c\uff0c\u4fdd\u8bc1\u6587\u5b57\u5927\u5c0f\u4e0d\u53d8\n */\n", "func_signal": "public static int px2sp(Context context,float pxValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().scaledDensity;\n    return (int)(pxValue / scale + 0.5f);\n}", "path": "PracticeDemos\\yutils\\src\\main\\java\\yifeiyuan\\practice\\yutils\\PixelUtils.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u62d6\u52a8\u72b6\u6001\u6539\u53d8\n * @see ViewDragHelper#STATE_IDLE     0        \u505c\u6b62\n * STATE_DRAGGING                     1        \u6b63\u5728\u88ab\u62d6\u52a8\n * STATE_SETTLING                     2        \u81ea\u52a8\u79fb\u52a8?\n * @param state\n */\n", "func_signal": "@Override\npublic void onViewDragStateChanged(int state)", "code": "{\n    Log.d(TAG, \"onViewDragStateChanged() called with \" + \"state = [\" + state + \"]\");\n    super.onViewDragStateChanged(state);\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\viewdrager\\DragerView.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u5c06sp\u503c\u8f6c\u6362\u4e3apx\u503c\uff0c\u4fdd\u8bc1\u6587\u5b57\u5927\u5c0f\u4e0d\u53d8\n */\n", "func_signal": "public static int sp2px(Context context,float spValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().scaledDensity;\n    return (int)(spValue * scale + 0.5f);\n}", "path": "PracticeDemos\\yutils\\src\\main\\java\\yifeiyuan\\practice\\yutils\\PixelUtils.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * Helper method to determine if the device has an extra-large screen. For\n * example, 10\" tablets are extra-large.\n */\n", "func_signal": "private static boolean isXLargeTablet(Context context)", "code": "{\n    return (context.getResources().getConfiguration().screenLayout\n            & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\ui\\SettingsActivity.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * ServiceState.STATE_EMERGENCY_ONLY   \u4ec5\u9650\u7d27\u6025\u547c\u53eb\n * ServiceState.STATE_IN_SERVICE       \u4fe1\u53f7\u6b63\u5e38\n * ServiceState.STATE_OUT_OF_SERVICE   \u4e0d\u5728\u670d\u52a1\u533a\n * ServiceState.STATE_POWER_OFF        \u65ad\u7535\n */\n", "func_signal": "@Override\npublic void onServiceStateChanged(ServiceState serviceState)", "code": "{\n    super.onServiceStateChanged(serviceState);\n    Log.d(TAG, \"onServiceStateChanged() called with \" + \"serviceState = [\" + serviceState + \"]\");\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\info\\DeviceInfoActivty.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n *  \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ecepx(\u50cf\u7d20) \u7684\u5355\u4f4d \u8f6c\u6210\u4e3adp\n */\n", "func_signal": "public static int px2dip(Context context, float pxValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (pxValue / scale + 0.5f);\n}", "path": "PracticeDemos\\yutils\\src\\main\\java\\yifeiyuan\\practice\\yutils\\PixelUtils.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u6c34\u5e73\u56fa\u5b9a?\n * \u9650\u5236\u5b50view\n *\n * @param child \u79fb\u52a8\u7684view\n * @param left  \u5373\u5c06\u79fb\u52a8\u5230\u7684\u4f4d\u7f6e \u4ee5\u6b64\u786e\u5b9ax\u8f74\u7684\u4f4d\u7f6e\n * @param dx    \u5dee\u503c \u4ece5 ~8 \u90a3\u4e48dx\u5c31\u662f3\n * @return\n */\n", "func_signal": "@Override\npublic int clampViewPositionHorizontal(View child, int left, int dx)", "code": "{\n    Log.d(TAG, \"clampViewPositionHorizontal() called with \" + \"left = [\" + left + \"], dx = [\" + dx + \"]\");\n    int leftbound = getPaddingLeft();\n    int rightbound = mWidth - getPaddingRight() - child.getWidth();\n//                return Math.max(left,0);//\u611f\u89c9\u50cf\u662f\u6574\u4e2a\u5750\u6807\u7cfb \u5728 \u6574\u4e2a\u5c4f\u5e55\u4e0a\n    return Math.min(Math.max(leftbound, left), rightbound);\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\viewdrager\\DragerView.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u5f53\u88ab\u8ba2\u9605\u7684\u8fb9\u754c\u88abtouch \u65f6 \u89e6\u53d1\n * @param edgeFlags\n * @param pointerId\n */\n", "func_signal": "@Override\npublic void onEdgeTouched(int edgeFlags, int pointerId)", "code": "{\n    Log.d(TAG, \"onEdgeTouched() called with \" + \"edgeFlags = [\" + edgeFlags + \"], pointerId = [\" + pointerId + \"]\");\n    super.onEdgeTouched(edgeFlags, pointerId);\n\n    //Notice captureChildView \u5f3a\u5236capture \u65e0\u89c6try\n    if (ViewDragHelper.EDGE_LEFT == edgeFlags) {\n        mDragHelper.captureChildView(mEdgeLeft, pointerId);\n    } else if (ViewDragHelper.EDGE_RIGHT == edgeFlags) {\n        mDragHelper.captureChildView(mEdgeRight, pointerId);\n    }\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\viewdrager\\DragerView.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u5f53\u67d0\u4e2aview \u88abcaptured \u540e\u4f1a\u88ab\u8c03\u7528\n * @param capturedChild\n * @param activePointerId\n */\n", "func_signal": "@Override\npublic void onViewCaptured(View capturedChild, int activePointerId)", "code": "{\n    Log.d(TAG, \"onViewCaptured() called with \" + \"capturedChild = [\" + capturedChild + \"], activePointerId = [\" + activePointerId + \"]\");\n    super.onViewCaptured(capturedChild, activePointerId);\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\viewdrager\\DragerView.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n *  Notice  \u5f53\u60f3\u8981\u62d6\u52a8\u7684\u5b50view \u6709\u70b9\u51fb\u4e8b\u4ef6\u7684\u65f6\u5019\u9700\u8981\u91cd\u5199\n *  Notice  \u60f3\u5728\u6c34\u5e73\u4e0a\u80fd\u62d6\u52a8 getViewHorizontalDragRange \u9700\u8981return \u4e00\u4e2a>0\u7684\u6570\n *  Notice  \u540c\u7406 \u5782\u76f4:  getViewVerticalDragRange   \u4e5f\u9700\u8981return \u4e00\u4e2a>0\u7684\u6570\n * @param child\n * @return\n */\n", "func_signal": "@Override\npublic int getViewHorizontalDragRange(View child)", "code": "{\n    Log.d(TAG, \"getViewHorizontalDragRange() called with \" + \"child = [\" + child + \"]\");\n//                return super.getViewHorizontalDragRange(child);\n    return 1;\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\viewdrager\\DragerView.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "//java.lang.IllegalArgumentException: We already have an EditText, can only have one\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_text_input);\n\n    new Thread(()-> System.out.printf(\"\")).start();\n\n}", "path": "PracticeDemos\\app\\src\\main\\java\\yifeiyuan\\practice\\practicedemos\\materialsupport\\TextInputActivity.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n *  \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ecedp \u7684\u5355\u4f4d \u8f6c\u6210\u4e3apx(\u50cf\u7d20)\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "PracticeDemos\\yutils\\src\\main\\java\\yifeiyuan\\practice\\yutils\\PixelUtils.java", "repo_name": "AlanCheen/PracticeDemo", "stars": 329, "license": "apache-2.0", "language": "java", "size": 7876}
{"docstring": "/**\n * \u5176\u4ed6\u7a0b\u5e8f\u5360\u6709\u7a7a\u95f4\u5927\u5c0f\n * \n * @return\n */\n", "func_signal": "public long getOtherSpace()", "code": "{\n\tif (!exist())\n\t\treturn 0;\n\treturn nSDTotalSize - nSDFreeSize - getYoukuOfflinedataSpace()\n\t\t\t- getYoukudiskSpace();\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\service\\download\\SDCardManager.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "// \u521d\u59cb\u5316\u64ad\u653e\u533a\u63a7\u4ef6\n/**\n * \u627e\u5230\u76f8\u5173\u7684layout\n */\n", "func_signal": "private void initPlayLayout()", "code": "{\n\tif (null == containerView)\n\t\treturn;\n\tseekLoadingContainerView = containerView\n\t\t\t.findViewById(R.id.seek_loading_bg);\n\tseekLoadingContainerView.setVisibility(View.GONE);\n\tmContainerLayout = (LinearLayout) containerView\n\t\t\t.findViewById(R.id.ll_detail_container);\n\tmContainerLayout.setOnClickListener(new OnClickListener() {\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tonContainerClick();\n\t\t}\n\t});\n\tif (UIUtils.hasHoneycomb()) {\n\t\tmContainerLayout\n\t\t\t\t.setOnSystemUiVisibilityChangeListener(new OnSystemUiVisibilityChangeListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onSystemUiVisibilityChange(int visibility) {\n\t\t\t\t\t\thideShowControl();\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\tinteractFrameLayout = (FrameLayout) containerView\n\t\t\t.findViewById(R.id.fl_interact);\n\tmContainerLayout.setClickable(false);\n\n\tcontrolLayout = (RelativeLayout) containerView\n\t\t\t.findViewById(R.id.layout_play_control);\n\tif (null != controlLayout)\n\t\tcontrolLayout.setVisibility(View.GONE);\n\tvideoBar = (SeekBar) containerView\n\t\t\t.findViewById(R.id.sb_detail_play_progress);\n\ttotalTime = (TextView) containerView.findViewById(R.id.total_time);\n\tcurrentTime = (TextView) containerView.findViewById(R.id.current_time);\n\tif (null != videoBar)\n\t\tvideoBar.setOnSeekBarChangeListener(mBarChangeListener);\n\tplay_pauseButton = (ImageButton) containerView\n\t\t\t.findViewById(R.id.ib_detail_play_control);\n\tplay_pauseButton.setOnClickListener(new OnClickListener() {\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tif (null == mMediaPlayerDelegate)\n\t\t\t\treturn;\n\t\t\tif (isLoading) {\n\t\t\t\tplay_pauseButton\n\t\t\t\t\t\t.setImageResource(R.drawable.play_btn_pause_big_detail_down);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mMediaPlayerDelegate.isPlaying()) {\n\t\t\t\tmMediaPlayerDelegate.pause();\n\t\t\t\tif (!isLoading) {\n\t\t\t\t\tplay_pauseButton\n\t\t\t\t\t\t\t.setImageResource(R.drawable.play_btn_play_big_detail);\n\t\t\t\t} else {\n\t\t\t\t\tplay_pauseButton\n\t\t\t\t\t\t\t.setImageResource(R.drawable.play_btn_play_big_detail_down);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmMediaPlayerDelegate.start();\n\t\t\t\tif (null != play_pauseButton)\n\t\t\t\t\tif (!isLoading) {\n\t\t\t\t\t\tplay_pauseButton\n\t\t\t\t\t\t\t\t.setImageResource(R.drawable.play_btn_pause_big_detail);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplay_pauseButton\n\t\t\t\t\t\t\t\t.setImageResource(R.drawable.play_btn_pause_big_detail_down);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tif (isBack) {\n\t\t\t\tisBack = false;\n\t\t\t\tisLoading = true;\n\t\t\t\tplay_pauseButton\n\t\t\t\t\t\t.setImageResource(R.drawable.play_btn_pause_big_detail_down);\n\t\t\t}\n\t\t\tuserAction();\n\t\t}\n\t});\n\tfull_screenButton = (ImageButton) containerView\n\t\t\t.findViewById(R.id.ib_detail_play_full);\n\n\tfull_screenButton.setOnClickListener(new OnClickListener() {\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tif (mMediaPlayerDelegate.isFullScreen) {\n\t\t\t\tmMediaPlayerDelegate.goSmall();\n\t\t\t} else {\n\t\t\t\tmMediaPlayerDelegate.goFullScreen();\n\t\t\t}\n\n\t\t}\n\t});\n\tplayTitleTextView = (TextView) containerView\n\t\t\t.findViewById(R.id.tv_detail_play_title);\n\ttitleLayoutPort = (LinearLayout) containerView\n\t\t\t.findViewById(R.id.layout_title);\n\ttitleLayoutPort.setOnClickListener(null);\n\n\tinitSeekLoading();\n\tif (null != mMediaPlayerDelegate\n\t\t\t&& null != mMediaPlayerDelegate.videoInfo) {\n\t\tint duration = mMediaPlayerDelegate.videoInfo.getDurationMills();\n\t\tvideoBar.setMax(duration);\n\t}\n\tuserPlayButton = (ImageView) containerView\n\t\t\t.findViewById(R.id.ib_user_play);\n\tif (null != userPlayButton) {\n\t\tuserPlayButton.setOnClickListener(userPlayClickListener);\n\t\tuserPlayButton.setVisibility(View.GONE);\n\t}\n\t// videoBar.setMax(240000);\n\tif (null != mMediaPlayerDelegate)\n\t\tif (mMediaPlayerDelegate.isPlaying())\n\t\t\tplay_pauseButton\n\t\t\t\t\t.setImageResource(R.drawable.play_btn_pause_big_detail);\n\t\telse {\n\t\t\tplay_pauseButton\n\t\t\t\t\t.setImageResource(R.drawable.play_btn_play_big_detail);\n\t\t}\n\tinitRetry();\n\tinitEndPage();\n\tinitLoadInfoPage();\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u663e\u793a\u52a0\u8f7d\u4e2d\n */\n", "func_signal": "public void showLoading()", "code": "{\n\tLogger.e(TAG, \"showLoading()\");\n\tif (mMediaPlayerDelegate.isADShowing) {\n\t\tLogger.e(TAG, \"mMediaPlayerDelegate.isADShowing()\");\n\t\treturn;\n\t}\n\tif (null != seekLoadingContainerView) {\n\t\tif (seekLoadingContainerView.getVisibility() == View.GONE) {\n\t\t\tif (null != seekLoadingContainerView)\n\t\t\t\tseekLoadingContainerView.setVisibility(View.VISIBLE);\n\t\t\tseekcount = 0;\n\t\t\tif (null != seekendHandler)\n\t\t\t\tseekHandler.sendEmptyMessageDelayed(SHOW_LOADING, 0);\n\n\t\t}\n\t}\n\tif (null != mMediaPlayerDelegate\n\t\t\t&& null != mMediaPlayerDelegate.videoInfo\n\t\t\t&& !DetailUtil.isEmpty(mMediaPlayerDelegate.videoInfo\n\t\t\t\t\t.getTitle()))\n\t\tif (null != playNameTextView)\n\t\t\tplayNameTextView.setText(mMediaPlayerDelegate.videoInfo\n\t\t\t\t\t.getTitle());\n\n\tif (null != mMediaPlayerDelegate\n\t\t\t&& null != mMediaPlayerDelegate.videoInfo && firstLoaded) {\n\t\tif (null != loadingTips)\n\t\t\tloadingTips.setVisibility(View.GONE);\n\t\tif (null != playNameTextView)\n\t\t\tplayNameTextView.setVisibility(View.GONE);\n\t\tif (null != seekLoadingContainerView && firstLoaded)\n\t\t\tseekLoadingContainerView.setBackgroundResource(0);\n\t} else {\n\t\tif (null != loadingTips) {\n\t\t\tloadingTips.setText(getResources().getString(\n\t\t\t\t\tR.string.player_tip_loading));\n\t\t\tloadingTips.setVisibility(View.VISIBLE);\n\t\t}\n\t\tif (null != playNameTextView)\n\t\t\tplayNameTextView.setVisibility(View.VISIBLE);\n\t\tif (null != seekLoadingContainerView)\n\t\t\tseekLoadingContainerView\n\t\t\t\t\t.setBackgroundResource(R.drawable.bg_play);\n\t}\n\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/** @inheritdoc */\n", "func_signal": "@Override\npublic Long getKey(GreenUpdate entity)", "code": "{\n    if(entity != null) {\n        return entity.getId();\n    } else {\n        return null;\n    }\n}", "path": "app\\src\\main\\java-gen\\com\\fangxu\\dota2helper\\greendao\\GreenUpdateDao.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u64ad\u653e\u672c\u5730\u4e0b\u4e00\u96c6\n */\n", "func_signal": "private void playLocalNext()", "code": "{\n\tif (null == mMediaPlayerDelegate\n\t\t\t|| null == mMediaPlayerDelegate.videoInfo)\n\t\treturn;\n\tICacheInfo download = IMediaPlayerDelegate.mICacheInfo;\n\tVideoCacheInfo info = download\n\t\t\t.getNextDownloadInfo(mMediaPlayerDelegate.videoInfo.getVid());\n\tif (info == null) {\n\t\tmMediaPlayerDelegate.finishActivity();\n\t\treturn;\n\t}\n\tfirstLoaded = false;\n\tisRealVideoStart = false;\n\tmMediaPlayerDelegate.playVideo(info.videoid,\n\t\t\tStaticsUtil.PLAY_TYPE_LOCAL\n\t\t\t\t\t.equals(mMediaPlayerDelegate.videoInfo.getPlayType()));\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/** Creates the underlying database table. */\n", "func_signal": "public static void createTable(SQLiteDatabase db, boolean ifNotExists)", "code": "{\n    String constraint = ifNotExists? \"IF NOT EXISTS \": \"\";\n    db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"GREEN_UPDATE\\\" (\" + //\n            \"\\\"_id\\\" INTEGER PRIMARY KEY ,\" + // 0: id\n            \"\\\"UPDATELISTJSON\\\" TEXT);\"); // 1: updatelistjson\n}", "path": "app\\src\\main\\java-gen\\com\\fangxu\\dota2helper\\greendao\\GreenUpdateDao.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * TODO \u9012\u5f52\u53d6\u5f97\u6587\u4ef6\u5939\u5927\u5c0f\n */\n", "func_signal": "private static long getFileSize(File f)", "code": "{\n\tlong size = 0;\n\tif (f.isDirectory()) {\n\t\tFile files[] = f.listFiles();\n\t\tif (files != null) {\n\t\t\tfor (int i = 0, n = files.length; i < n; i++) {\n\t\t\t\tif (files[i].isDirectory()) {\n\t\t\t\t\tsize = size + getFileSize(files[i]);\n\t\t\t\t} else {\n\t\t\t\t\tsize = size + files[i].length();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tsize = f.length();\n\t}\n\treturn size;\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\service\\download\\SDCardManager.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u53bb\u64ad\u653e\u7ed3\u675f\u9875\n */\n", "func_signal": "private void goEndPage()", "code": "{\n\tfirstLoaded = false;\n\tisRealVideoStart = false;\n\thideLoadinfo();\n\thideLoading();\n\thideRetryLayout();\n\tif (null != mMediaPlayerDelegate\n\t\t\t&& null != mMediaPlayerDelegate.videoInfo) {\n\t\tmMediaPlayerDelegate.release();\n\t\tmMediaPlayerDelegate.setFirstUnloaded();\n\t\tif (mMediaPlayerDelegate.videoInfo.getHaveNext() == 1) {\n\t\t\tgoReplayNextPage();\n\t\t} else {\n\t\t\tgoReplayPage();\n\t\t}\n\t}\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u4f18\u9177\u89c6\u9891\u6240\u5360\u7a7a\u95f4\u6bd4\u4f8bn%\n */\n", "func_signal": "public int getYoukuProgrss()", "code": "{\n\tif (!exist())\n\t\treturn 0;\n\treturn (int) ((1000 * getYoukuVideoSpace()) / nSDTotalSize);\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\service\\download\\SDCardManager.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/** \u663e\u793a\u91cd\u8bd5 onerror/timeout/get play data failed */\n", "func_signal": "private void showRetryLayout()", "code": "{\n\thideEndPage();\n\tif (null != mActivity) {\n\t\t((Activity) mActivity).runOnUiThread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif (null != retryView)\n\t\t\t\t\tretryView.setVisibility(View.VISIBLE);\n\t\t\t}\n\t\t});\n\t}\n\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/** @inheritdoc */\n", "func_signal": "@Override\npublic GreenUpdate readEntity(Cursor cursor, int offset)", "code": "{\n    GreenUpdate entity = new GreenUpdate( //\n        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id\n        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // updatelistjson\n    );\n    return entity;\n}", "path": "app\\src\\main\\java-gen\\com\\fangxu\\dota2helper\\greendao\\GreenUpdateDao.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u5f00\u59cb\u64ad\u653e\n */\n", "func_signal": "private void startPlay()", "code": "{\n\tif (null == mMediaPlayerDelegate)\n\t\treturn;\n\tif (mMediaPlayerDelegate.isADShowing) {\n\t\tmBasePlayerManager.startPlay();\n\t} else {\n\t\tmMediaPlayerDelegate.start();\n\t\tif (null != play_pauseButton)\n\t\t\tplay_pauseButton\n\t\t\t\t\t.setImageResource(R.drawable.play_btn_pause_big_detail);\n\n\t}\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "// \u91cd\u8bd5\n/**\n * \u91cd\u8bd5\u521d\u59cb\u5316\n */\n", "func_signal": "private void initRetry()", "code": "{\n\tif (null == containerView)\n\t\treturn;\n\tretryView = containerView.findViewById(R.id.view_restart);\n\tgoRetry = (LinearLayout) containerView.findViewById(R.id.go_retry);\n\tif (null != goRetry) {\n\t\tgoRetry.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\terror = false;\n\t\t\t\tif (!Util.hasInternet()) {\n\n\t\t\t\t\tPlayerUtil.showTips(R.string.player_tips_no_network);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (null != retryView)\n\t\t\t\t\tretryView.setVisibility(View.GONE);\n\t\t\t\tif (null != mMediaPlayerDelegate) {\n\t\t\t\t\tif (!infoFail) {\n\t\t\t\t\t\tmMediaPlayerDelegate.release();\n\t\t\t\t\t\tmMediaPlayerDelegate.setFirstUnloaded();\n\t\t\t\t\t\tmMediaPlayerDelegate.start();\n\t\t\t\t\t\tmMediaPlayerDelegate.retry();\n\t\t\t\t\t\tshowLoading();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (mMediaPlayerDelegate != null\n\t\t\t\t\t\t\t\t&& mMediaPlayerDelegate.videoInfo != null) {\n\t\t\t\t\t\t\tmMediaPlayerDelegate\n\t\t\t\t\t\t\t\t\t.playVideo(mMediaPlayerDelegate.videoInfo\n\t\t\t\t\t\t\t\t\t\t\t.getVid());\n\t\t\t\t\t\t\tmMediaPlayerDelegate.setFirstUnloaded();\n\t\t\t\t\t\t} else if (!TextUtils\n\t\t\t\t\t\t\t\t.isEmpty(mMediaPlayerDelegate.nowVid)) {\n\t\t\t\t\t\t\tmMediaPlayerDelegate\n\t\t\t\t\t\t\t\t\t.playVideo(mMediaPlayerDelegate.nowVid);\n\t\t\t\t\t\t\tmMediaPlayerDelegate.setFirstUnloaded();\n\t\t\t\t\t\t\t// mMediaPlayerDelegate.retry();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// mMediaPlayerDelegate.replayVideo();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "// private Loading playLoading;\n", "func_signal": "public PluginSimplePlayer(YoukuBasePlayerManager basePlayerManager,\n\t\tIMediaPlayerDelegate mediaPlayerDelegate)", "code": "{\n\tsuper(basePlayerManager.getBaseActivity(), mediaPlayerDelegate);\n\tmBasePlayerManager = basePlayerManager;\n\tthis.mActivity = basePlayerManager.getBaseActivity();\n\tLayoutInflater mLayoutInflater = LayoutInflater.from(mActivity);\n\tcontainerView = mLayoutInflater.inflate(\n\t\t\tR.layout.yp_plugin_detail_play_interact, null);\n\tif (null != mediaPlayerDelegate\n\t\t\t&& mediaPlayerDelegate.videoInfo != null)\n\t\tvideo_id = mediaPlayerDelegate.videoInfo.getVid();\n\taddView(containerView);\n\tinitPlayLayout();\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/** @inheritdoc */\n", "func_signal": "@Override\npublic void readEntity(Cursor cursor, GreenUpdate entity, int offset)", "code": "{\n    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));\n    entity.setUpdatelistjson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));\n }", "path": "app\\src\\main\\java-gen\\com\\fangxu\\dota2helper\\greendao\\GreenUpdateDao.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/** @inheritdoc */\n", "func_signal": "@Override\nprotected void bindValues(SQLiteStatement stmt, GreenUpdate entity)", "code": "{\n    stmt.clearBindings();\n \n    Long id = entity.getId();\n    if (id != null) {\n        stmt.bindLong(1, id);\n    }\n \n    String updatelistjson = entity.getUpdatelistjson();\n    if (updatelistjson != null) {\n        stmt.bindString(2, updatelistjson);\n    }\n}", "path": "app\\src\\main\\java-gen\\com\\fangxu\\dota2helper\\greendao\\GreenUpdateDao.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * replay/retry/playnext\n * */\n", "func_signal": "private void restartFromComplete()", "code": "{\n\tif (null != mMediaPlayerDelegate) {\n\t\tmMediaPlayerDelegate.clearEnd();\n\t\tmMediaPlayerDelegate.setOrientionDisable();\n\t}\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u7981\u7528\u63a7\u5236\n */\n", "func_signal": "private void disableControllerHide()", "code": "{\n\tsetClickable(false, play_pauseButton);\n\tsetClickable(false, videoBar);\n\tsetClickable(false, mContainerLayout);\n\tsetClickable(false, full_screenButton);\n\tsetClickable(false, videoBar);\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u64ad\u653e\u4e0b\u4e00\u96c6\n */\n", "func_signal": "private void playNextVideo()", "code": "{\n\trestartFromComplete();\n\tclearPlayState();\n\tfirstLoaded = false;\n\tisRealVideoStart = false;\n\tif (null == mMediaPlayerDelegate\n\t\t\t|| null == mMediaPlayerDelegate.videoInfo)\n\t\treturn;\n\tif (!Util.hasInternet()) {\n\t\tplayLocalNext();\n\t\treturn;\n\t}\n\n\t// \u672c\u5730\u64ad\u653e\u8be2\u95ee\u662f\u5426\u5728\u7ebf\n\t/*\n\t * if ( StaticsUtil.PLAY_TYPE_LOCAL\n\t * .equals(mMediaPlayerDelegate.videoInfo.getPlayType())) { IDownload\n\t * download = YoukuService.getService(IDownload.class); DownloadInfo\n\t * info = download.getDownloadInfo(\n\t * mMediaPlayerDelegate.videoInfo.getShowId(),\n\t * mMediaPlayerDelegate.videoInfo.getShow_videoseq() + 1); if (info !=\n\t * null) { mMediaPlayerDelegate.playVideo(info.videoid,\n\t * StaticsUtil.PLAY_TYPE_LOCAL .equals(mMediaPlayerDelegate.videoInfo\n\t * .getPlayType())); return; } if (info == null) {\n\t * Util.showTips(R.string.download_no_network); //\n\t * mMediaPlayerDelegate.finishActivity(); return; }\n\t * mMediaPlayerDelegate.playVideo(info.videoid); return; }\n\t */\n\n\tif (mMediaPlayerDelegate.videoInfo.getHaveNext() == 0) {\n\t\tgoEndPage();\n\t\treturn;\n\t}\n\tmMediaPlayerDelegate\n\t\t\t.playVideo(mMediaPlayerDelegate.videoInfo.nextVideoId);\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * \u9690\u85cf\u52a0\u8f7d\n */\n", "func_signal": "public void hideLoading()", "code": "{\n\tif (null == mActivity)\n\t\treturn;\n\t((Activity) mActivity).runOnUiThread(new Runnable() {\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tif (null != seekLoadingContainerView) {\n\t\t\t\tseekLoadingContainerView.setVisibility(View.GONE);\n\t\t\t\tplayLoadingBar.setProgress(0);\n\t\t\t}\n\t\t\tif (null != seekHandler)\n\t\t\t\tseekHandler.removeCallbacksAndMessages(null);\n\t\t}\n\t});\n}", "path": "youkuPlayerOpenSDK\\src\\main\\java\\com\\youku\\player\\plugin\\PluginSimplePlayer.java", "repo_name": "uin3566/Dota2Helper", "stars": 307, "license": "apache-2.0", "language": "java", "size": 44479}
{"docstring": "/**\n * Creates a new journal that omits redundant information. This replaces the\n * current journal if it exists.\n */\n", "func_signal": "private synchronized void rebuildJournal() throws IOException", "code": "{\n  if (journalWriter != null) {\n    journalWriter.close();\n  }\n\n  Writer writer = new BufferedWriter(\n      new OutputStreamWriter(new FileOutputStream(journalFileTmp), DiskLruCacheUtil.US_ASCII));\n  try {\n    writer.write(MAGIC);\n    writer.write(\"\\n\");\n    writer.write(VERSION_1);\n    writer.write(\"\\n\");\n    writer.write(Integer.toString(appVersion));\n    writer.write(\"\\n\");\n    writer.write(Integer.toString(valueCount));\n    writer.write(\"\\n\");\n    writer.write(\"\\n\");\n\n    for (Entry entry : lruEntries.values()) {\n      if (entry.currentEditor != null) {\n        writer.write(DIRTY + ' ' + entry.key + '\\n');\n      } else {\n        writer.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');\n      }\n    }\n  } finally {\n    writer.close();\n  }\n\n  if (journalFile.exists()) {\n    renameTo(journalFile, journalFileBackup, true);\n  }\n  renameTo(journalFileTmp, journalFile, false);\n  journalFileBackup.delete();\n\n  journalWriter = new BufferedWriter(\n      new OutputStreamWriter(new FileOutputStream(journalFile, true), DiskLruCacheUtil.US_ASCII));\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Commits this edit so it is visible to readers.  This releases the\n * edit lock so another edit may be started on the same key.\n */\n", "func_signal": "public void commit() throws IOException", "code": "{\n  if (hasErrors) {\n    completeEdit(this, false);\n    remove(entry.key); // The previous entry is stale.\n  } else {\n    completeEdit(this, true);\n  }\n  committed = true;\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Opens the cache in {@code directory}, creating a cache if none exists\n * there.\n *\n * @param directory a writable directory\n * @param valueCount the number of values per cache entry. Must be positive.\n * @param maxSize the maximum number of bytes this cache should use to store\n * @throws IOException if reading or writing the cache directory fails\n */\n", "func_signal": "public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)\n    throws IOException", "code": "{\n  if (maxSize <= 0) {\n    throw new IllegalArgumentException(\"maxSize <= 0\");\n  }\n  if (valueCount <= 0) {\n    throw new IllegalArgumentException(\"valueCount <= 0\");\n  }\n\n  // If a bkp file exists, use it instead.\n  File backupFile = new File(directory, JOURNAL_FILE_BACKUP);\n  if (backupFile.exists()) {\n    File journalFile = new File(directory, JOURNAL_FILE);\n    // If journal file also exists just delete backup file.\n    if (journalFile.exists()) {\n      backupFile.delete();\n    } else {\n      renameTo(backupFile, journalFile, false);\n    }\n  }\n\n  // Prefer to pick up where we left off.\n  DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n  if (cache.journalFile.exists()) {\n    try {\n      cache.readJournal();\n      cache.processJournal();\n      return cache;\n    } catch (IOException journalIsCorrupt) {\n      System.out.println(\"DiskLruCache \"\n          + directory\n          + \" is corrupt: \"\n          + journalIsCorrupt.getMessage()\n          + \", removing\");\n      cache.delete();\n    }\n  }\n\n  // Create a new empty cache.\n  directory.mkdirs();\n  cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n  cache.rebuildJournal();\n  return cache;\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * \u68c0\u67e5\u5e94\u7528\u662f\u5426\u6709\u8be5\u6743\u9650\n *\n * @param permission \u6743\u9650\uff0cManifest.permission.CAMERA\n * @return true ==> \u5df2\u7ecf\u6388\u6743\n */\n", "func_signal": "public boolean checkPermission(Activity activity, String permission)", "code": "{\n  return AndroidVersionUtil.hasM()\n      && activity.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\permission\\PermissionUtil.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * \u68c0\u67e5\u6ca1\u6709\u88ab\u6388\u6743\u7684\u6743\u9650\n */\n", "func_signal": "public List<String> checkPermission(Object obj, String... permission)", "code": "{\n  if (!AndroidVersionUtil.hasM() || permission == null || permission.length == 0) {\n    return null;\n  }\n  Activity activity = null;\n  if (obj instanceof Activity) {\n    activity = (Activity) obj;\n  } else if (obj instanceof Fragment) {\n    activity = ((Fragment) obj).getActivity();\n  } else {\n    L.e(TAG, \"obj \u53ea\u80fd\u662f Activity \u6216\u8005 fragment \u53ca\u5176\u5b50\u7c7b\");\n    return null;\n  }\n  List<String> denyPermissions = new ArrayList<>();\n  for (String p : permission) {\n    if (activity.checkSelfPermission(p) != PackageManager.PERMISSION_GRANTED) {\n      denyPermissions.add(p);\n    }\n  }\n  return denyPermissions;\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\permission\\PermissionUtil.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * \u7533\u8bf7\u6743\u9650\n *\n * @param hint \u5982\u679c\u6846\u5bf9\u8bdd\u6846\u5305\u542b\u201d\u4e0d\u518d\u8be2\u95ee\u201c\u9009\u62e9\u6846\u7684\u65f6\u5019\u7684\u63d0\u793a\u7528\u8bed\u3002\n */\n", "func_signal": "public void requestPermission(Object obj, String hint, int requestCode, String... permission)", "code": "{\n  if (!AndroidVersionUtil.hasM() || permission == null || permission.length == 0) {\n    return;\n  }\n  Activity activity = null;\n  Fragment fragment = null;\n  if (obj instanceof Activity) {\n    activity = (Activity) obj;\n  } else if (obj instanceof Fragment) {\n    fragment = (Fragment) obj;\n    activity = fragment.getActivity();\n  } else {\n    L.e(TAG, \"obj \u53ea\u80fd\u662f Activity \u6216\u8005 fragment \u53ca\u5176\u5b50\u7c7b\");\n    return;\n  }\n  if (!TextUtils.isEmpty(hint)) {\n    for (String str : permission) {\n      if (fragment != null) {\n        if (fragment.shouldShowRequestPermissionRationale(str)) {\n          T.showShort(fragment.getContext(), hint);\n          break;\n        }\n      } else {\n        if (activity.shouldShowRequestPermissionRationale(str)) {\n          T.showShort(activity, hint);\n          break;\n        }\n      }\n    }\n  }\n  if (fragment != null) {\n    fragment.requestPermissions(permission, requestCode);\n  } else {\n    activity.requestPermissions(permission, requestCode);\n  }\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\permission\\PermissionUtil.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * \u7533\u8bf7\u6743\u9650\n */\n", "func_signal": "public void requestPermission(Object obj, int requestCode, String... permission)", "code": "{\n  if (!AndroidVersionUtil.hasM()) {\n    return;\n  }\n  requestPermission(obj, \"\", requestCode, permission);\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\permission\\PermissionUtil.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Returns the last committed value as a string, or null if no value\n * has been committed.\n */\n", "func_signal": "public String getString(int index) throws IOException", "code": "{\n  InputStream in = newInputStream(index);\n  return in != null ? inputStreamToString(in) : null;\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/** Closes this cache. Stored values will remain on the filesystem. */\n", "func_signal": "public synchronized void close() throws IOException", "code": "{\n  if (journalWriter == null) {\n    return; // Already closed.\n  }\n  for (Entry entry : new ArrayList<Entry>(lruEntries.values())) {\n    if (entry.currentEditor != null) {\n      entry.currentEditor.abort();\n    }\n  }\n  trimToSize();\n  journalWriter.close();\n  journalWriter = null;\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Computes the initial size and collects garbage as a part of opening the\n * cache. Dirty entries are assumed to be inconsistent and will be deleted.\n */\n", "func_signal": "private void processJournal() throws IOException", "code": "{\n  deleteIfExists(journalFileTmp);\n  for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {\n    Entry entry = i.next();\n    if (entry.currentEditor == null) {\n      for (int t = 0; t < valueCount; t++) {\n        size += entry.lengths[t];\n      }\n    } else {\n      entry.currentEditor = null;\n      for (int t = 0; t < valueCount; t++) {\n        deleteIfExists(entry.getCleanFile(t));\n        deleteIfExists(entry.getDirtyFile(t));\n      }\n      i.remove();\n    }\n  }\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/*\n * \u8bf7\u6c42\u60ac\u6d6e\u6743\u9650\n * \u5728onActivityResult\u91cc\u9762\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\n * protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n *      super.onActivityResult(requestCode, resultCode, data);\n *      if (requestCode == OnPermissionCallback.PERMISSION_ALERT_WINDOW) {\n *          if (Settings.canDrawOverlays(this)) {       //\u5728\u8fd9\u5224\u65ad\u662f\u5426\u8bf7\u6c42\u6743\u9650\u6210\u529f\n *              Log.i(LOGTAG, \"onActivityResult granted\");\n *          }\n *      }\n * }\n *\n * @param obj\n */\n", "func_signal": "public void requestAlertWindowPermission(Object obj)", "code": "{\n  if (!AndroidVersionUtil.hasM()) {\n    return;\n  }\n  Activity activity = null;\n  Fragment fragment = null;\n  if (obj instanceof Activity) {\n    activity = (Activity) obj;\n  } else if (obj instanceof Fragment) {\n    fragment = (Fragment) obj;\n    activity = fragment.getActivity();\n  } else {\n    L.e(TAG, \"obj \u53ea\u80fd\u662f Activity \u6216\u8005 fragment \u53ca\u5176\u884d\u751f\u7c7b\");\n    return;\n  }\n  Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n  intent.setData(Uri.parse(\"package:\" + activity.getPackageName()));\n  if (fragment != null) {\n    fragment.startActivityForResult(intent, OnPermissionCallback.PERMISSION_ALERT_WINDOW);\n  } else {\n    activity.startActivityForResult(intent, OnPermissionCallback.PERMISSION_ALERT_WINDOW);\n  }\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\permission\\PermissionUtil.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * sp\u8f6cpx\n */\n", "func_signal": "public static int sp2px(Context context, float spVal)", "code": "{\n  return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, spVal,\n      context.getResources().getDisplayMetrics());\n}", "path": "mvvm2\\src\\java\\com\\arialyy\\frame\\util\\DensityUtils.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * px\u8f6cdp\n */\n", "func_signal": "public static float px2dp(Context context, float pxVal)", "code": "{\n  final float scale = context.getResources().getDisplayMetrics().density;\n  return (pxVal / scale);\n}", "path": "mvvm2\\src\\java\\com\\arialyy\\frame\\util\\DensityUtils.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Closes the cache and deletes all of its stored values. This will delete\n * all files in the cache directory including files that weren't created by\n * the cache.\n */\n", "func_signal": "public void delete() throws IOException", "code": "{\n  close();\n  DiskLruCacheUtil.deleteContents(directory);\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Returns a new unbuffered output stream to write the value at\n * {@code index}. If the underlying output stream encounters errors\n * when writing to the filesystem, this edit will be aborted when\n * {@link #commit} is called. The returned output stream does not throw\n * IOExceptions.\n */\n", "func_signal": "public OutputStream newOutputStream(int index) throws IOException", "code": "{\n  if (index < 0 || index >= valueCount) {\n    throw new IllegalArgumentException(\"Expected index \"\n        + index\n        + \" to \"\n        + \"be greater than 0 and less than the maximum value count \"\n        + \"of \"\n        + valueCount);\n  }\n  synchronized (DiskLruCache.this) {\n    if (entry.currentEditor != this) {\n      throw new IllegalStateException();\n    }\n    if (!entry.readable) {\n      written[index] = true;\n    }\n    File dirtyFile = entry.getDirtyFile(index);\n    FileOutputStream outputStream;\n    try {\n      outputStream = new FileOutputStream(dirtyFile);\n    } catch (FileNotFoundException e) {\n      // Attempt to recreate the cache directory.\n      directory.mkdirs();\n      try {\n        outputStream = new FileOutputStream(dirtyFile);\n      } catch (FileNotFoundException e2) {\n        // We are unable to recover. Silently eat the writes.\n        return NULL_OUTPUT_STREAM;\n      }\n    }\n    return new FaultHidingOutputStream(outputStream);\n  }\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/** Set lengths using decimal numbers like \"10123\". */\n", "func_signal": "private void setLengths(String[] strings) throws IOException", "code": "{\n  if (strings.length != valueCount) {\n    throw invalidLengths(strings);\n  }\n\n  try {\n    for (int i = 0; i < strings.length; i++) {\n      lengths[i] = Long.parseLong(strings[i]);\n    }\n  } catch (NumberFormatException e) {\n    throw invalidLengths(strings);\n  }\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * \u6536\u7f29\u56fe\u7247\n */\n", "func_signal": "public static Drawable zoomDrawable(Drawable drawable, int w, int h)", "code": "{\n  int width = drawable.getIntrinsicWidth();\n  int height = drawable.getIntrinsicHeight();\n  Bitmap oldbmp = drawableToBitmap(drawable);\n  Matrix matrix = new Matrix();\n  float scaleWidth = ((float) w / width);\n  float scaleHeight = ((float) h / height);\n  matrix.postScale(scaleWidth, scaleHeight);\n  Bitmap newbmp = Bitmap.createBitmap(oldbmp, 0, 0, width, height, matrix, true);\n  return new BitmapDrawable(null, newbmp);\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\util\\DrawableUtil.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Drops the entry for {@code key} if it exists and can be removed. Entries\n * actively being edited cannot be removed.\n *\n * @return true if an entry was removed.\n */\n", "func_signal": "public synchronized boolean remove(String key) throws IOException", "code": "{\n  checkNotClosed();\n  validateKey(key);\n  Entry entry = lruEntries.get(key);\n  if (entry == null || entry.currentEditor != null) {\n    return false;\n  }\n\n  for (int i = 0; i < valueCount; i++) {\n    File file = entry.getCleanFile(i);\n    if (file.exists() && !file.delete()) {\n      throw new IOException(\"failed to delete \" + file);\n    }\n    size -= entry.lengths[i];\n    entry.lengths[i] = 0;\n  }\n\n  redundantOpCount++;\n  journalWriter.append(REMOVE + ' ' + key + '\\n');\n  lruEntries.remove(key);\n\n  if (journalRebuildRequired()) {\n    executorService.submit(cleanupCallable);\n  }\n\n  return true;\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * Returns a snapshot of the entry named {@code key}, or null if it doesn't\n * exist is not currently readable. If a value is returned, it is moved to\n * the head of the LRU queue.\n */\n", "func_signal": "public synchronized Snapshot get(String key) throws IOException", "code": "{\n  checkNotClosed();\n  validateKey(key);\n  Entry entry = lruEntries.get(key);\n  if (entry == null) {\n    return null;\n  }\n\n  if (!entry.readable) {\n    return null;\n  }\n\n  // Open all streams eagerly to guarantee that we see a single published\n  // snapshot. If we opened streams lazily then the streams could come\n  // from different edits.\n  InputStream[] ins = new InputStream[valueCount];\n  try {\n    for (int i = 0; i < valueCount; i++) {\n      ins[i] = new FileInputStream(entry.getCleanFile(i));\n    }\n  } catch (FileNotFoundException e) {\n    // A file must have been deleted manually!\n    for (int i = 0; i < valueCount; i++) {\n      if (ins[i] != null) {\n        DiskLruCacheUtil.closeQuietly(ins[i]);\n      } else {\n        break;\n      }\n    }\n    return null;\n  }\n\n  redundantOpCount++;\n  journalWriter.append(READ + ' ' + key + '\\n');\n  if (journalRebuildRequired()) {\n    executorService.submit(cleanupCallable);\n  }\n\n  return new Snapshot(key, entry.sequenceNumber, ins, entry.lengths);\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\cache\\diskcache\\DiskLruCache.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "/**\n * \u8bf7\u6c42\u4fee\u6539\u7cfb\u7edf\u8bbe\u7f6e\u6743\u9650\n */\n", "func_signal": "public void requestWriteSetting(Object obj)", "code": "{\n  if (!AndroidVersionUtil.hasM()) {\n    return;\n  }\n  Activity activity = null;\n  Fragment fragment = null;\n  if (obj instanceof Activity) {\n    activity = (Activity) obj;\n  } else if (obj instanceof Fragment) {\n    fragment = (Fragment) obj;\n    activity = fragment.getActivity();\n  } else {\n    L.e(TAG, \"obj \u53ea\u80fd\u662f Activity \u6216\u8005 fragment \u53ca\u5176\u884d\u751f\u7c7b\");\n    return;\n  }\n  Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS);\n  intent.setData(Uri.parse(\"package:\" + activity.getPackageName()));\n  if (fragment != null) {\n    fragment.startActivityForResult(intent, OnPermissionCallback.PERMISSION_WRITE_SETTING);\n  } else {\n    activity.startActivityForResult(intent, OnPermissionCallback.PERMISSION_WRITE_SETTING);\n  }\n}", "path": "mvvm2\\src\\main\\java\\com\\arialyy\\frame\\permission\\PermissionUtil.java", "repo_name": "AriaLyy/MVVM", "stars": 257, "license": "None", "language": "java", "size": 5817}
{"docstring": "// Android\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u6253\u5f00AUDIO\u6587\u4ef6\u7684intent\n", "func_signal": "public static Intent getAudioFileIntent(String param)", "code": "{\n\n    Intent intent = new Intent(\"android.intent.action.VIEW\");\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    intent.putExtra(\"oneshot\", 0);\n    intent.putExtra(\"configchange\", 0);\n    Uri uri = Uri.parse(param);\n    intent.setDataAndType(uri, \"audio/*\");\n    return intent;\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\IntentOpenFile.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "// Android\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u6253\u5f00APK\u6587\u4ef6\u7684intent\n", "func_signal": "public static Intent getAllIntent(String param)", "code": "{\n\n    Intent intent = new Intent();\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.setAction(android.content.Intent.ACTION_VIEW);\n    Uri uri = Uri.parse(param);\n    intent.setDataAndType(uri, \"*/*\");\n    return intent;\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\IntentOpenFile.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * @param httpName A case-insensitive HTTP header name.\n */\n", "func_signal": "public static Type getByHttpName(String httpName)", "code": "{\n    if (httpName == null) return null;\n\treturn byName.get(httpName);\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\support\\model\\dlna\\message\\header\\DLNAHeader.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * @return <code>true</code> if this message has an NT header, and NTS header\n *         with value {@link org.fourthline.cling.model.types.NotificationSubtype#PROPCHANGE}.\n */\n", "func_signal": "public boolean hasValidNotificationHeaders()", "code": "{\n    NTEventHeader ntHeader = getHeaders().getFirstHeader(UpnpHeader.Type.NT, NTEventHeader.class);\n    NTSHeader ntsHeader = getHeaders().getFirstHeader(UpnpHeader.Type.NTS, NTSHeader.class);\n    return ntHeader != null && ntHeader.getValue() != null\n            && ntsHeader != null && ntsHeader.getValue().equals(NotificationSubtype.PROPCHANGE);\n\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\model\\message\\gena\\IncomingEventRequestMessage.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * @param milliseconds the milliseconds to set\n */\n", "func_signal": "public void setMilliseconds(long milliseconds)", "code": "{\n    if (milliseconds < 0) {\n        throw new InvalidValueException(\"Invalid parameter milliseconds: \" + milliseconds);\n    }\n\n    this.milliseconds = milliseconds;\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\support\\model\\dlna\\types\\NormalPlayTime.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/*\npublic void hydrateSpecVersion(MutableService descriptor, Node specVersionNode)\n        throws DescriptorBindingException {\n\n    NodeList specVersionChildren = specVersionNode.getChildNodes();\n    for (int i = 0; i < specVersionChildren.getLength(); i++) {\n        Node specVersionChild = specVersionChildren.item(i);\n\n        if (specVersionChild.getNodeType() != Node.ELEMENT_NODE)\n            continue;\n\n        MutableUDAVersion version = new MutableUDAVersion();\n        if (ELEMENT.major.equals(specVersionChild)) {\n            version.major = Integer.valueOf(XMLUtil.getTextContent(specVersionChild));\n        } else if (ELEMENT.minor.equals(specVersionChild)) {\n            version.minor = Integer.valueOf(XMLUtil.getTextContent(specVersionChild));\n        }\n    }\n}\n*/\n", "func_signal": "public void hydrateActionList(MutableService descriptor, Node actionListNode) throws DescriptorBindingException", "code": "{\n\n    NodeList actionListChildren = actionListNode.getChildNodes();\n    for (int i = 0; i < actionListChildren.getLength(); i++) {\n        Node actionListChild = actionListChildren.item(i);\n\n        if (actionListChild.getNodeType() != Node.ELEMENT_NODE)\n            continue;\n\n        if (ELEMENT.action.equals(actionListChild)) {\n            MutableAction action = new MutableAction();\n            hydrateAction(action, actionListChild);\n            descriptor.actions.add(action);\n        }\n    }\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\binding\\xml\\UDA10ServiceDescriptorBinderImpl.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * Uses the current thread's context classloader to read and unmarshall the given resource.\n *\n * @param resource The resource on the classpath.\n * @return The unmarshalled Event model.\n * @throws Exception\n */\n", "func_signal": "public Event parseResource(String resource) throws Exception", "code": "{\n    InputStream is = null;\n    try {\n        is = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);\n        return parse(IO.readLines(is));\n    } finally {\n        if (is != null) is.close();\n    }\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\support\\lastchange\\LastChangeParser.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/* ##################################################################################################### */\n", "func_signal": "protected Element writePropertysetElement(Document d)", "code": "{\n    Element propertysetElement = d.createElementNS(Constants.NS_UPNP_EVENT_10, \"e:propertyset\");\n    d.appendChild(propertysetElement);\n    return propertysetElement;\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\transport\\impl\\GENAEventProcessorImpl.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n *\n * @param advertised If <code>false</code>, no alive notifications will be announced for\n *                   this device and it will not appear in search responses.\n * @param byeByeBeforeFirstAlive If <code>true</code>, a byebye NOTIFY message will be send before the\n *                               first alive NOTIFY message.\n */\n", "func_signal": "public DiscoveryOptions(boolean advertised, boolean byeByeBeforeFirstAlive)", "code": "{\n    this.advertised = advertised;\n    this.byeByeBeforeFirstAlive = byeByeBeforeFirstAlive;\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\model\\DiscoveryOptions.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "// Android\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u6253\u5f00\u6587\u672c\u6587\u4ef6\u7684intent\n", "func_signal": "public static Intent getTextFileIntent(String param, boolean paramBoolean)", "code": "{\n\n    Intent intent = new Intent(\"android.intent.action.VIEW\");\n    intent.addCategory(\"android.intent.category.DEFAULT\");\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    if (paramBoolean) {\n        Uri uri1 = Uri.parse(param);\n        intent.setDataAndType(uri1, \"text/plain\");\n    } else {\n        Uri uri2 = Uri.fromFile(new File(param));\n        intent.setDataAndType(uri2, \"text/plain\");\n    }\n    return intent;\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\IntentOpenFile.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/* ##################################################################################################### */\n", "func_signal": "protected String getMessageBody(UpnpMessage message) throws UnsupportedDataException", "code": "{\n    if (!message.isBodyNonEmptyString())\n        throw new UnsupportedDataException(\n            \"Can't transform null or non-string/zero-length body of: \" + message\n        );\n    return message.getBodyString().trim();\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\transport\\impl\\GENAEventProcessorImpl.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "// Android\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u6253\u5f00VIDEO\u6587\u4ef6\u7684intent\n", "func_signal": "public static Intent getVideoFileIntent(String param)", "code": "{\n\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    // intent.putExtra(\"oneshot\", 0);\n    // intent.putExtra(\"configchange\", 0);\n    Uri uri = Uri.parse(param);\n    intent.setDataAndType(uri, \"video/*\");\n    return intent;\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\IntentOpenFile.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "// Android\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u6253\u5f00Excel\u6587\u4ef6\u7684intent\n", "func_signal": "public static Intent getExcelFileIntent(String param)", "code": "{\n\n    Intent intent = new Intent(\"android.intent.action.VIEW\");\n    intent.addCategory(\"android.intent.category.DEFAULT\");\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    Uri uri = Uri.parse(param);\n    intent.setDataAndType(uri, \"application/vnd.ms-excel\");\n    return intent;\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\IntentOpenFile.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "// if paramBoolean is True MUTE\n", "func_signal": "private void soundMute()", "code": "{\n\tif (null != dmcControl) {\n\t\tdmcControl.getMute();\n\t}\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\activity\\ControlActivity.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * We don't ignore the right zeros in milliseconds, a small compromise \n * @param format\n */\n", "func_signal": "public String getString(Format format)", "code": "{        \n    long seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds);\n    long ms = milliseconds % 1000;\n    switch (format) {\n        case TIME:\n            seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds));\n            long hours = TimeUnit.MILLISECONDS.toHours(milliseconds);\n            long minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(milliseconds));\n            return String.format(\"%d:%02d:%02d.%03d\", hours, minutes, seconds, ms);\n        default:\n            return String.format(\"%d.%03d\", seconds, ms);\n    }\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\support\\model\\dlna\\types\\NormalPlayTime.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "// Android\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u6253\u5f00APK\u6587\u4ef6\u7684intent\n", "func_signal": "public static Intent getApkFileIntent(String param)", "code": "{\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.setAction(android.content.Intent.ACTION_VIEW);\n    intent.setDataAndType(Uri.parse(\"file://\" + param),\n            \"application/vnd.android.package-archive\");\n    return intent;\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\IntentOpenFile.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/* ############################################################################################################ */\n", "func_signal": "protected void renewOutgoingSubscription(final RemoteGENASubscription subscription)", "code": "{\n    registry.executeAsyncProtocol(\n            registry.getProtocolFactory().createSendingRenewal(subscription)\n    );\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\registry\\RemoteItems.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * init the words into the cache array\n * \n * @throws IOException\n */\n", "func_signal": "private void initVoldFstabToCache() throws IOException", "code": "{\n\tcache.clear();\n\tBufferedReader br = new BufferedReader(new FileReader(VOLD_FSTAB));\n\tString tmp = null;\n\twhile ((tmp = br.readLine()) != null) {\n\t\t// the words startsWith \"dev_mount\" are the SD info\n\t\tif (tmp.startsWith(HEAD)) {\n\t\t\tcache.add(tmp);\n\t\t}\n\t}\n\tbr.close();\n\tcache.trimToSize();\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\DevMountInfo.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "// Android\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u6253\u5f00CHM\u6587\u4ef6\u7684intent\n", "func_signal": "public static Intent getChmFileIntent(String param)", "code": "{\n\n    Intent intent = new Intent(\"android.intent.action.VIEW\");\n    intent.addCategory(\"android.intent.category.DEFAULT\");\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    Uri uri = Uri.parse(param);\n    intent.setDataAndType(uri, \"application/x-chm\");\n    return intent;\n}", "path": "app\\src\\main\\java\\com\\zxt\\dlna\\util\\IntentOpenFile.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * @return <code>true</code> if this message as an NT and NTS header.\n */\n", "func_signal": "public boolean hasNotificationHeaders()", "code": "{\n    UpnpHeader ntHeader = getHeaders().getFirstHeader(UpnpHeader.Type.NT);\n    UpnpHeader ntsHeader = getHeaders().getFirstHeader(UpnpHeader.Type.NTS);\n    return ntHeader != null && ntHeader.getValue() != null\n            && ntsHeader != null && ntsHeader.getValue() != null;\n}", "path": "app\\src\\main\\java\\org\\fourthline\\cling\\model\\message\\gena\\IncomingEventRequestMessage.java", "repo_name": "offbye/DroidDLNA", "stars": 312, "license": "gpl-3.0", "language": "java", "size": 13220}
{"docstring": "/**\n * Set this <code>EmulatorView</code>'s color scheme.\n *\n * @param scheme The {@link ColorScheme} to use (use null for the default\n *               scheme).\n * @see TermSession#setColorScheme\n * @see ColorScheme\n */\n", "func_signal": "public void setColorScheme(ColorScheme scheme)", "code": "{\n    if (scheme == null) {\n        mColorScheme = BaseTextRenderer.defaultColorScheme;\n    } else {\n        mColorScheme = scheme;\n    }\n    updateText();\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "// Begin GestureDetector.OnGestureListener methods\n", "func_signal": "public boolean onSingleTapUp(MotionEvent e)", "code": "{\n    if (mExtGestureListener != null && mExtGestureListener.onSingleTapUp(e)) {\n        return true;\n    }\n    requestFocus();\n    return true;\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Draw the view to the provided {@link Canvas}.\n *\n * @param canvas The {@link Canvas} to draw the view to.\n */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n    updateSize(false);\n\n    if (mEmulator == null) {\n        // Not ready yet\n        return;\n    }\n\n    int w = getWidth();\n    int h = getHeight();\n\n    boolean reverseVideo = mEmulator.getReverseVideo();\n    mTextRenderer.setReverseVideo(reverseVideo);\n\n    Paint backgroundPaint =\n            reverseVideo ? mForegroundPaint : mBackgroundPaint;\n    canvas.drawRect(0, 0, w, h, backgroundPaint);\n    float x = -mLeftColumn * mCharacterWidth;\n    float y = mCharacterHeight + mTopOfScreenMargin;\n    int endLine = mTopRow + mRows;\n    int cx = mEmulator.getCursorCol();\n    int cy = mEmulator.getCursorRow();\n    boolean cursorVisible = mCursorVisible && mEmulator.getShowCursor();\n    String effectiveImeBuffer = mImeBuffer;\n    int combiningAccent = mKeyListener.getCombiningAccent();\n    if (combiningAccent != 0) {\n        effectiveImeBuffer += String.valueOf((char) combiningAccent);\n    }\n    for (int i = mTopRow; i < endLine; i++) {\n        int cursorX = -1;\n        if (i == cy && cursorVisible) {\n            cursorX = cx;\n        }\n        int selx1 = -1;\n        int selx2 = -1;\n        if ( i >= mSelY1 && i <= mSelY2 ) {\n            if ( i == mSelY1 ) {\n                selx1 = mSelX1;\n            }\n            if ( i == mSelY2 ) {\n                selx2 = mSelX2;\n            } else {\n                selx2 = mColumns;\n            }\n        }\n        mTranscriptScreen.drawText(i, canvas, x, y, mTextRenderer, cursorX, selx1, selx2, effectiveImeBuffer);\n        y += mCharacterHeight;\n    }\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Toggle text selection mode in the view.\n */\n", "func_signal": "public void toggleSelectingText()", "code": "{\n    mIsSelectingText = ! mIsSelectingText;\n    setVerticalScrollBarEnabled( ! mIsSelectingText );\n    if ( ! mIsSelectingText ) {\n        mSelX1 = -1;\n        mSelY1 = -1;\n        mSelX2 = -1;\n        mSelY2 = -1;\n    }\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Called when a key is pressed in the view.\n *\n * @param keyCode The keycode of the key which was pressed.\n * @param event A {@link KeyEvent} describing the event.\n * @return Whether the event was handled.\n */\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    if (LOG_KEY_EVENTS) {\n        Log.w(TAG, \"onKeyDown \" + keyCode);\n    }\n    if (handleControlKey(keyCode, true)) {\n        return true;\n    } else if (handleFnKey(keyCode, true)) {\n        return true;\n    } else if (isSystemKey(keyCode, event)) {\n        if (! isInterceptedSystemKey(keyCode) ) {\n            // Don't intercept the system keys\n            return super.onKeyDown(keyCode, event);\n        }\n    }\n\n    // Translate the keyCode into an ASCII character.\n\n    try {\n        int oldCombiningAccent = mKeyListener.getCombiningAccent();\n        mKeyListener.keyDown(keyCode, event, getKeypadApplicationMode(),\n                TermKeyListener.isEventFromToggleDevice(event));\n        if (mKeyListener.getCombiningAccent() != oldCombiningAccent) {\n            invalidate();\n        }\n    } catch (IOException e) {\n        // Ignore I/O exceptions\n    }\n    return true;\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Constructor called when inflating this view from XML with a\n * default style set.\n * <p>\n * You should call {@link #attachSession attachSession} and {@link\n * #setDensity setDensity} before using an <code>EmulatorView</code> created\n * using this constructor.\n */\n", "func_signal": "public EmulatorView(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super(context, attrs, defStyle);\n    commonConstructor(context);\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Page the terminal view horizontally.\n *\n * @param deltaColumns the number of columns to scroll. Positive scrolls to\n *        the right.\n */\n", "func_signal": "public void pageHorizontal(int deltaColumns)", "code": "{\n    mLeftColumn =\n            Math.max(0, Math.min(mLeftColumn + deltaColumns, mColumns\n                    - mVisibleColumns));\n    invalidate();\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Attach a {@link TermSession} to this view.\n *\n * @param session The {@link TermSession} this view will be displaying.\n */\n", "func_signal": "public void attachSession(TermSession session)", "code": "{\n    mTextRenderer = null;\n    mCursorPaint = new Paint();\n    mCursorPaint.setARGB(255,128,128,128);\n    mForegroundPaint = new Paint();\n    mBackgroundPaint = new Paint();\n    mTopRow = 0;\n    mLeftColumn = 0;\n    mGestureDetector = new GestureDetector(this);\n    // mGestureDetector.setIsLongpressEnabled(false);\n    setVerticalScrollBarEnabled(true);\n    setFocusable(true);\n    setFocusableInTouchMode(true);\n\n    mTermSession = session;\n\n    mKeyListener = new TermKeyListener(session);\n\n    // Do init now if it was deferred until a TermSession was attached\n    if (mDeferInit) {\n        mDeferInit = false;\n        mKnownSize = true;\n        initialize();\n    }\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Sets style information about the cursor.\n *\n * @param style The style of the cursor.\n * @param blink Whether the cursor should blink.\n */\n", "func_signal": "public void setCursorStyle(int style, int blink)", "code": "{\n    mCursorStyle = style;\n    if (blink != 0 && mCursorBlink == 0) {\n        mHandler.postDelayed(mBlinkCursor, CURSOR_BLINK_PERIOD);\n    } else if (blink == 0 && mCursorBlink != 0) {\n        mHandler.removeCallbacks(mBlinkCursor);\n    }\n    mCursorBlink = blink;\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "// End GestureDetector.OnGestureListener methods\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent ev)", "code": "{\n    if (mIsSelectingText) {\n        return onTouchEventWhileSelectingText(ev);\n    } else {\n        return mGestureDetector.onTouchEvent(ev);\n    }\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Page the terminal view (scroll it up or down by <code>delta</code>\n * screenfuls).\n *\n * @param delta The number of screens to scroll. Positive means scroll down,\n *        negative means scroll up.\n */\n", "func_signal": "public void page(int delta)", "code": "{\n    mTopRow =\n            Math.min(0, Math.max(-(mTranscriptScreen\n                    .getActiveTranscriptRows()), mTopRow + mRows * delta));\n    invalidate();\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Send an Fn key event to the terminal.  The Fn modifier key can be used to\n * generate various special characters and escape codes.\n */\n", "func_signal": "public void sendFnKey()", "code": "{\n    mIsFnKeySent = true;\n    mKeyListener.handleFnKey(true);\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * This is called during layout when the size of this view has changed. If\n * you were just added to the view hierarchy, you're called with the old\n * values of 0.\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n    if (mTermSession == null) {\n        // Not ready, defer until TermSession is attached\n        mDeferInit = true;\n        return;\n    }\n\n    if (!mKnownSize) {\n        mKnownSize = true;\n        initialize();\n    } else {\n        updateSize(false);\n    }\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Inform the view that it is now visible on screen.\n */\n", "func_signal": "public void onResume()", "code": "{\n    mIsActive = true;\n    updateSize(false);\n    if (mCursorBlink != 0) {\n        mHandler.postDelayed(mBlinkCursor, CURSOR_BLINK_PERIOD);\n    }\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Update the view's idea of its size.\n *\n * @param force Whether a size adjustment should be performed even if the\n *              view's size has not changed.\n */\n", "func_signal": "public void updateSize(boolean force)", "code": "{\n    if (mKnownSize) {\n        int w = getWidth();\n        int h = getHeight();\n        // Log.w(\"Term\", \"(\" + w + \", \" + h + \")\");\n        if (force || w != mVisibleWidth || h != mVisibleHeight) {\n            mVisibleWidth = w;\n            mVisibleHeight = h;\n            updateSize(mVisibleWidth, mVisibleHeight);\n        }\n    }\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Create an <code>EmulatorView</code> for a {@link TermSession}.\n *\n * @param context The {@link Context} for the view.\n * @param session The {@link TermSession} this view will be displaying.\n * @param metrics The {@link DisplayMetrics} of the screen on which the view\n *                will be displayed.\n */\n", "func_signal": "public EmulatorView(Context context, TermSession session, DisplayMetrics metrics)", "code": "{\n    super(context);\n    attachSession(session);\n    setDensity(metrics);\n    commonConstructor(context);\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Update the screen density for the screen on which the view is displayed.\n *\n * @param metrics The {@link DisplayMetrics} of the screen.\n */\n", "func_signal": "public void setDensity(DisplayMetrics metrics)", "code": "{\n    if (mDensity == 0) {\n        // First time we've known the screen density, so update font size\n        mTextSize = (int) (mTextSize * metrics.density);\n    }\n    mDensity = metrics.density;\n    mScaledDensity = metrics.scaledDensity;\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Call this to initialize the view.\n */\n", "func_signal": "private void initialize()", "code": "{\n    TermSession session = mTermSession;\n\n    updateText();\n\n    mTranscriptScreen = session.getTranscriptScreen();\n    mEmulator = session.getEmulator();\n    session.setUpdateCallback(mUpdateNotify);\n\n    requestFocus();\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Called when a key is released in the view.\n *\n * @param keyCode The keycode of the key which was released.\n * @param event A {@link KeyEvent} describing the event.\n * @return Whether the event was handled.\n */\n", "func_signal": "@Override\npublic boolean onKeyUp(int keyCode, KeyEvent event)", "code": "{\n    if (LOG_KEY_EVENTS) {\n        Log.w(TAG, \"onKeyUp \" + keyCode);\n    }\n    if (handleControlKey(keyCode, false)) {\n        return true;\n    } else if (handleFnKey(keyCode, false)) {\n        return true;\n    } else if (isSystemKey(keyCode, event)) {\n        // Don't intercept the system keys\n        if ( ! isInterceptedSystemKey(keyCode) ) {\n            return super.onKeyUp(keyCode, event);\n        }\n    }\n\n    mKeyListener.keyUp(keyCode, event);\n    clearSpecialKeyStatus();\n    return true;\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * Set the key code to be sent when the Back key is pressed.\n */\n", "func_signal": "public void setBackKeyCharacter(int keyCode)", "code": "{\n    mKeyListener.setBackKeyCharacter(keyCode);\n    mBackKeySendsCharacter = (keyCode != 0);\n}", "path": "libraries\\emulatorview\\src\\jackpal\\androidterm\\emulatorview\\EmulatorView.java", "repo_name": "momodalo/vimtouch", "stars": 339, "license": "apache-2.0", "language": "java", "size": 7004}
{"docstring": "/**\n * The main method.\n *\n * @param args the arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tKafkaExampleCommandLineHandler commandLine  = new  KafkaExampleCommandLineHandler(getProducerOptions(), args);\n\t\t\n\t\tString topic = commandLine.getOption(TOPIC_NAME);\n\t\tString path  = commandLine.getOption(PATH);\n\t\t\n\t\t// start producer thread\n\t\tKafkaMailProducer producerThread = new KafkaMailProducer(topic!=null? topic : KafkaMailProperties.topic, \n\t\t\t\tpath !=null? KafkaExampleFileUtil.getValidDirectoryPath(path) :\tKafkaExampleProperty.getPropertyValue(KafkaExamplePropertyKey.MAIL_DIRECTORY));\n\t\tproducerThread.start();\n\t\t\n\t\t//start consumer thread\n\t\tKafkaMailConsumer consumerThread = new KafkaMailConsumer(topic!=null? topic : KafkaMailProperties.topic);\n\t\tconsumerThread.start();\n\t} catch (ParseException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\launch\\MailConsumerProducerDemo.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the directory path default value.\n * \n * @return the directory path default value\n */\n", "func_signal": "private static String getDirectoryPathDefaultValue()", "code": "{\n\treturn KafkaExampleProperty\n\t\t\t.getPropertyValue(KafkaExamplePropertyKey.MAIL_DIRECTORY);\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\other\\launch\\CreateFile.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the static file content.\n *\n * @param fileName the file name\n * @return the static file content\n */\n", "func_signal": "private static byte[] getStaticFileContent(String fileName)", "code": "{\n\tStringBuilder content = new StringBuilder();\n\t\n\tcontent.append(\"File Name - \" + fileName);\n\tcontent.append(\"The first  line\");\n\tcontent.append(\"The second line\");\n\tcontent.append(\"The third  line\");\n\tcontent.append(\"The fourth line\");\n\t\n\treturn content.toString().getBytes();\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\other\\launch\\CreateFile.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * The main method.\n *\n * @param args the arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tKafkaExampleCommandLineHandler commandLine  = new  KafkaExampleCommandLineHandler(getProducerOptions(), args);\n\t\t\n\t\tString topic = commandLine.getOption(TOPIC_NAME);\n\t\t\n\t\t//start consumer thread\n\t\tKafkaMailConsumer consumerThread = new KafkaMailConsumer(topic!=null? topic : KafkaMailProperties.topic);\n\t\tconsumerThread.start();\n\t} catch (ParseException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\launch\\MailConsumerDemo.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Instantiates a new kafka producer.\n *\n * @param topic the topic\n * @param directoryPath the directory path\n */\n", "func_signal": "public KafkaMailProducer(String topic, String directoryPath)", "code": "{\n    props.put(\"serializer.class\", \"kafka.serializer.StringEncoder\");\n    props.put(\"metadata.broker.list\", \"localhost:9092\");\n\tproducer = new kafka.javaapi.producer.Producer<Integer, String>(new ProducerConfig(props));\n\tthis.topic = topic;\n\tthis.directoryPath = directoryPath;\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\core\\KafkaMailProducer.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Creates the consumer config.\n *\n * @return the consumer config\n */\n", "func_signal": "private static ConsumerConfig createConsumerConfig()", "code": "{\n\tProperties props = new Properties();\n\tprops.put(\"zookeeper.connect\", KafkaMailProperties.zkConnect);\n\tprops.put(\"group.id\", KafkaMailProperties.groupId);\n\tprops.put(\"zookeeper.session.timeout.ms\", \"400\");\n\tprops.put(\"zookeeper.sync.time.ms\", \"200\");\n\tprops.put(\"auto.commit.interval.ms\", \"1000\");\n\n\treturn new ConsumerConfig(props);\n\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\core\\KafkaMailConsumer.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Creat mail content.\n * @throws IOException \n * @throws InterruptedException \n */\n", "func_signal": "private void creatMailContent() throws IOException, InterruptedException", "code": "{\n\twhile(true){\n\t\tString fileName = directoryPath + \"File-\" + new Date();\n\t\t\n\t\tFileOutputStream fout = new FileOutputStream( fileName );\n\t\tFileChannel fc = fout.getChannel();\n\t\t\n\t\tByteBuffer buffer = ByteBuffer.allocate( 1024 );\n\t\tbuffer.put( getStaticFileContent(fileName));\n\t\tbuffer.flip();\n\t\t\n\t\tfc.write( buffer );\n\t\t\n\t\tbuffer.clear();\n\t\tfc.close();\n\t\tfout.close();\n\t\t\n\t\tSystem.out.println(\"created file - \"  + fileName);\n\t\t\n\t\tThread.sleep(threadSleepTime * 1000);\n\t}\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\other\\launch\\CreateFile.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Instantiates a new creates the file.\n *\n * @param directoryPath the directory path\n * @param threadSleepTime the thread sleep time\n */\n", "func_signal": "public CreateFile(String directoryPath, Integer threadSleepTime)", "code": "{\n\n\tif (directoryPath == null || \"\".equals(directoryPath)) {\n\t\tthis.directoryPath = getDirectoryPathDefaultValue();\n\t} else {\n\t\tthis.directoryPath = directoryPath;\n\t}\n\n\tif (threadSleepTime == null) {\n\t\tthis.threadSleepTime = getThreadSleepTimeDefaultValue();\n\t} else {\n\t\tthis.threadSleepTime = threadSleepTime;\n\t}\n\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\other\\launch\\CreateFile.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the producer options.\n *\n * @return the producer options\n */\n", "func_signal": "private static List<Option> getProducerOptions()", "code": "{\n\tList<Option> optionList = new ArrayList<Option>();\n\t\n\tOption topicOption = new Option(TOPIC_NAME, TOPIC_NAME, true, \"topic name on which message is going to be published\");\n\n\toptionList.add(topicOption);\n\t\n\treturn optionList;\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\launch\\MailConsumerDemo.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the thread sleep time default value.\n * \n * @return the thread sleep time default value\n */\n", "func_signal": "private static Integer getThreadSleepTimeDefaultValue()", "code": "{\n\treturn Integer\n\t\t\t.parseInt(KafkaExampleProperty\n\t\t\t\t\t.getPropertyValue(KafkaExamplePropertyKey.FILE_CREATE_THREAD_SLEEP_TIME));\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\other\\launch\\CreateFile.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * The main method.\n *\n * @param args the arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n\tCreateFile createFile;\n\t\n\tKafkaExampleCommandLineHandler commandLine;\n\ttry {\n\t\tcommandLine = new  KafkaExampleCommandLineHandler(getProducerOptions(), args);\n\t\t\n\t\tString path = commandLine.getOption(PATH);\n\t\tString sleepTime  = commandLine.getOption(SLEEP_TIME);\n\n\t\t\n\t\tcreateFile = new CreateFile(path !=null ? KafkaExampleFileUtil.getValidDirectoryPath(path) : getDirectoryPathDefaultValue()\n\t\t\t\t, sleepTime !=null ? Integer.parseInt(sleepTime) : getThreadSleepTimeDefaultValue());\n\t\tcreateFile.creatMailContent();\n\n\t} catch (ParseException e1) {\n\t\te1.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\other\\launch\\CreateFile.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Checks if is valid directory.\n *\n * @param filePath the file path\n * @return the boolean\n */\n", "func_signal": "public static boolean isValidDirectory(String filePath)", "code": "{\n\tif(filePath == null)\n\t\treturn false;\n\t\n\tFile temp =null;\n\tif(filePath.indexOf('/') == (filePath.length()-1))\n\t\ttemp = new File(filePath);\n\telse \n\t\ttemp = new File(filePath + \"/\");\n\t\n\tif(temp.isDirectory())\n\t\treturn true;\n\t\n\treturn false;\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\util\\KafkaExampleFileUtil.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Read file content.\n *\n * @param file the file\n * @throws IOException Signals that an I/O exception has occurred.\n */\n", "func_signal": "private void readFileContent(File file) throws IOException", "code": "{\n\t\t\n\t  \tRandomAccessFile aFile = new RandomAccessFile(file, \"r\");\n\t    FileChannel inChannel = aFile.getChannel();\n\t    MappedByteBuffer buffer = inChannel.map(FileChannel.MapMode.READ_ONLY, 0, inChannel.size());\n\t    buffer.load();  \n\t    StringBuilder strBuilder = new StringBuilder();\n\t    for (int i = 0; i < buffer.limit(); i++){\n\t    \tstrBuilder.append((char) buffer.get());\n\t    }\n\t    buffer.clear(); // do something with the data and clear/compact it.\n\t    inChannel.close();\n\t    aFile.close();\n\t\t\n\t    \n\t    producer.send(new KeyedMessage<Integer, String>(topic, strBuilder.toString()));\n\t    \n\t    System.out.println(file.getAbsolutePath() + \" - content consumed.\");\n\t    \n\t    file.delete();\n\t}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\core\\KafkaMailProducer.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * The main method.\n *\n * @param args the arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tKafkaExampleCommandLineHandler commandLine  = new  KafkaExampleCommandLineHandler(getProducerOptions(), args);\n\t\t\n\t\tString topic = commandLine.getOption(TOPIC_NAME);\n\t\tString path  = commandLine.getOption(PATH);\n\t\t\n\t\t// start producer thread\n\t\tKafkaMailProducer producerThread = new KafkaMailProducer(topic!=null? topic : KafkaMailProperties.topic, \n\t\t\t\tpath !=null? KafkaExampleFileUtil.getValidDirectoryPath(path) :\tKafkaExampleProperty.getPropertyValue(KafkaExamplePropertyKey.MAIL_DIRECTORY));\n\t\tproducerThread.start();\n\t\t\n\t} catch (ParseException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\launch\\MailProducerDemo.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the producer options.\n *\n * @return the producer options\n */\n", "func_signal": "private static List<Option> getProducerOptions()", "code": "{\n\tList<Option> optionList = new ArrayList<Option>();\n\t\n\tOption topicOption = new Option(TOPIC_NAME, TOPIC_NAME, true, \"topic name on which message is going to be published\");\n\tOption pathOption = new Option(PATH, PATH, true, \"directory path from where message content going to be consumed.\");\n\n\toptionList.add(topicOption);\n\toptionList.add(pathOption);\n\t\n\treturn optionList;\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\launch\\MailProducerDemo.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the option.\n *\n * @param option the option\n * @return the option\n */\n", "func_signal": "public String getOption(final String option)", "code": "{\n    if (commandLine!=null && commandLine.hasOption(option)) {\n        return commandLine.getOptionValue(option);\n    }\n\n    return null;\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\util\\KafkaExampleCommandLineHandler.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Process all events for keys queued to the watcher\n */\n", "func_signal": "public void run()", "code": "{\n    for (;;) {\n        for (WatchEvent<?> event: key.pollEvents()) {\n            Kind<?> kind = event.kind();\n\t \n            // TBD - provide example of how OVERFLOW event is handled\n            if (kind == OVERFLOW) {\n                continue;\n            }\n\t \n            // Context for directory entry event is the file name of entry\n            WatchEvent<Path> ev = cast(event);\n            Path name = ev.context();\n            Path child = directory.resolve(name);\n\t \n             if (kind == ENTRY_CREATE) {\n                try {\n                    if (!Files.isDirectory(child, NOFOLLOW_LINKS)) {\n                    \treadFileContent(child.toFile());\n                     }\n                } catch (IOException ex) {\n                \tex.printStackTrace();\n                }\n            }\n        }\n\t \n        boolean valid = key.reset();\n        if (!valid) \n            break;\n }\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\core\\KafkaMailProducer.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the valid directory path.\n *\n * @param filePath the file path\n * @return the valid directory path\n */\n", "func_signal": "public static String getValidDirectoryPath(String filePath)", "code": "{\n\tif(filePath.lastIndexOf('/') == (filePath.length()-1))\n\t\treturn filePath;\n\telse \n\t\treturn filePath + \"/\";\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\util\\KafkaExampleFileUtil.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Gets the producer options.\n *\n * @return the producer options\n */\n", "func_signal": "private static List<Option> getProducerOptions()", "code": "{\n\tList<Option> optionList = new ArrayList<Option>();\n\t\n\tOption topicOption = new Option(TOPIC_NAME, TOPIC_NAME, true, \"topic name on which message is going to be published\");\n\tOption pathOption = new Option(PATH, PATH, true, \"directory path from where message content going to be consumed.\");\n\n\toptionList.add(topicOption);\n\toptionList.add(pathOption);\n\t\n\treturn optionList;\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\launch\\MailConsumerProducerDemo.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Instantiates a new kafka example command line handler.\n *\n * @param optionList the option list\n * @param args the args\n * @throws ParseException the parse exception\n */\n", "func_signal": "public KafkaExampleCommandLineHandler(final List<Option> optionList, String[] args) throws ParseException", "code": "{\n\tfinal CommandLineParser parser = new BasicParser();\n\t\n    final Options options = new Options();\n    for(Option option: optionList){\n    \toptions.addOption(option);\n    }\n\n    commandLine = parser.parse(options, args);\n}", "path": "Kafka-Message-Server-Example\\src\\main\\java\\com\\kafka\\message\\server\\example\\util\\KafkaExampleCommandLineHandler.java", "repo_name": "abhioncbr/Kafka-Message-Server", "stars": 256, "license": "None", "language": "java", "size": 2436}
{"docstring": "/**\n * Handle activity result. Call this method from your Activity's\n * onActivityResult callback. If the activity result pertains to the sign-in\n * process, processes it appropriately.\n */\n", "func_signal": "public void onActivityResult(int requestCode, int responseCode, Intent intent)", "code": "{\n    debugLog(\"onActivityResult: req=\" + (requestCode == RC_RESOLVE ? \"RC_RESOLVE\" :\n            String.valueOf(requestCode)) + \", resp=\" +\n            GameHelperUtils.activityResponseCodeToString(responseCode));\n    if (requestCode != RC_RESOLVE) {\n        debugLog(\"onActivityResult: request code not meant for us. Ignoring.\");\n        return;\n    }\n\n    // no longer expecting a resolution\n    mExpectingResolution = false;\n\n    if (!mConnecting) {\n        debugLog(\"onActivityResult: ignoring because we are not connecting.\");\n        return;\n    }\n\n    // We're coming back from an activity that was launched to resolve a\n    // connection problem. For example, the sign-in UI.\n    if (responseCode == Activity.RESULT_OK) {\n        // Ready to try to connect again.\n        debugLog(\"onAR: Resolution was RESULT_OK, so connecting current client again.\");\n        connect();\n    } else if (responseCode == GamesActivityResultCodes.RESULT_RECONNECT_REQUIRED) {\n        debugLog(\"onAR: Resolution was RECONNECT_REQUIRED, so reconnecting.\");\n        connect();\n    } else if (responseCode == Activity.RESULT_CANCELED) {\n        // User cancelled.\n        debugLog(\"onAR: Got a cancellation result, so disconnecting.\");\n        mSignInCancelled = true;\n        mConnectOnStart = false;\n        mUserInitiatedSignIn = false;\n        mSignInFailureReason = null; // cancelling is not a failure!\n        mConnecting = false;\n        mGoogleApiClient.disconnect();\n\n        // increment # of cancellations\n        int prevCancellations = getSignInCancellations();\n        int newCancellations = incrementSignInCancellations();\n        debugLog(\"onAR: # of cancellations \" + prevCancellations + \" --> \" + newCancellations +\n                \", max \" + mMaxAutoSignInAttempts);\n\n        notifyListener(false);\n    } else {\n        // Whatever the problem we were trying to solve, it was not\n        // solved. So give up and show an error message.\n        debugLog(\"onAR: responseCode=\" +\n                GameHelperUtils.activityResponseCodeToString(responseCode) + \", so giving up.\");\n        giveUp(new SignInFailureReason(mConnectionResult.getErrorCode(), responseCode));\n    }\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Called when we are disconnected from the Google API client. */\n", "func_signal": "@Override\npublic void onConnectionSuspended(int cause)", "code": "{\n    debugLog(\"onConnectionSuspended, cause=\" + cause);\n    disconnect();\n    mSignInFailureReason = null;\n    debugLog(\"Making extraordinary call to onSignInFailed callback\");\n    mConnecting = false;\n    notifyListener(false);\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Disconnects the API client, then connects again.\n */\n", "func_signal": "public void reconnectClient()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        Log.w(TAG, \"reconnectClient() called when client is not connected.\");\n        // interpret it as a request to connect\n        connect();\n    } else {\n        debugLog(\"Reconnecting client.\");\n        mGoogleApiClient.reconnect();\n    }\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Handles a connection failure. */\n", "func_signal": "@Override\npublic void onConnectionFailed(ConnectionResult result)", "code": "{\n    // save connection result for later reference\n    debugLog(\"onConnectionFailed\");\n\n    mConnectionResult = result;\n    debugLog(\"Connection failure:\");\n    debugLog(\"   - code: \" + GameHelperUtils.errorCodeToString(mConnectionResult.getErrorCode()));\n    debugLog(\"   - resolvable: \" + mConnectionResult.hasResolution());\n    debugLog(\"   - details: \" + mConnectionResult.toString());\n\n    int cancellations = getSignInCancellations();\n    boolean shouldResolve = false;\n\n    if (mUserInitiatedSignIn) {\n        debugLog(\"onConnectionFailed: WILL resolve because user initiated sign-in.\");\n        shouldResolve = true;\n    } else if (mSignInCancelled) {\n        debugLog(\"onConnectionFailed WILL NOT resolve (user already cancelled once).\");\n        shouldResolve = false;\n    } else if (cancellations < mMaxAutoSignInAttempts) {\n        debugLog(\"onConnectionFailed: WILL resolve because we have below the max# of \" +\n            \"attempts, \" + cancellations + \" < \" + mMaxAutoSignInAttempts);\n        shouldResolve = true;\n    } else {\n        shouldResolve = false;\n        debugLog(\"onConnectionFailed: Will NOT resolve; not user-initiated and max attempts \" +\n                \"reached: \"  + cancellations + \" >= \" + mMaxAutoSignInAttempts);\n    }\n\n    if (!shouldResolve) {\n        // Fail and wait for the user to want to sign in.\n        debugLog(\"onConnectionFailed: since we won't resolve, failing now.\");\n        mConnectionResult = result;\n        mConnecting = false;\n        notifyListener(false);\n        return;\n    }\n\n    debugLog(\"onConnectionFailed: resolving problem...\");\n\n    // Resolve the connection result. This usually means showing a dialog or\n    // starting an Activity that will allow the user to give the appropriate\n    // consents so that sign-in can be successful.\n    resolveConnectionResult();\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Sets the options to pass when setting up the Plus API. Call before setup(). */\n", "func_signal": "public void setPlusApiOptions(GoogleApiClient.ApiOptions options)", "code": "{\n    doApiOptionsPreCheck();\n    mPlusApiOptions = options;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Sign out and disconnect from the APIs. */\n", "func_signal": "public void signOut()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        // nothing to do\n        debugLog(\"signOut: was already disconnected, ignoring.\");\n        return;\n    }\n\n    // for Plus, \"signing out\" means clearing the default account and\n    // then disconnecting\n    if (0 != (mRequestedClients & CLIENT_PLUS)) {\n        debugLog(\"Clearing default account on PlusClient.\");\n        Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);\n    }\n\n    // For the games client, signing out means calling signOut and disconnecting\n    if (0 != (mRequestedClients & CLIENT_GAMES)) {\n        debugLog(\"Signing out from GamesClient.\");\n        Games.signOut(mGoogleApiClient);\n    }\n\n    // Ready to disconnect\n    debugLog(\"Disconnecting client.\");\n    mConnectOnStart = false;\n    mConnecting = false;\n    mGoogleApiClient.disconnect();\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Returns the tbmp match received through an invitation notification. This\n * should be called from your GameHelperListener's\n * @link{GameHelperListener#onSignInSucceeded} method, to check if there's a\n * match available.\n * @return The match, or null if none was received.\n */\n", "func_signal": "public TurnBasedMatch getTurnBasedMatch()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        Log.w(TAG, \"Warning: getTurnBasedMatch() should only be called when signed in, \" +\n                \"that is, after getting onSignInSuceeded()\");\n    }\n    return mTurnBasedMatch;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Shows an error dialog that's appropriate for the failure reason. */\n", "func_signal": "public static void showFailureDialog(Activity activity, int actResp, int errorCode)", "code": "{\n    if (activity == null) {\n        Log.e(\"GameHelper\", \"*** No Activity. Can't show failure dialog!\");\n        return;\n    }\n    Dialog errorDialog = null;\n\n    switch (actResp) {\n        case GamesActivityResultCodes.RESULT_APP_MISCONFIGURED:\n            errorDialog = makeSimpleDialog(activity, GameHelperUtils.getString(activity,\n                    GameHelperUtils.R_APP_MISCONFIGURED));\n            break;\n        case GamesActivityResultCodes.RESULT_SIGN_IN_FAILED:\n            errorDialog = makeSimpleDialog(activity, GameHelperUtils.getString(activity,\n                    GameHelperUtils.R_SIGN_IN_FAILED));\n            break;\n        case GamesActivityResultCodes.RESULT_LICENSE_FAILED:\n            errorDialog = makeSimpleDialog(activity, GameHelperUtils.getString(activity,\n                    GameHelperUtils.R_LICENSE_FAILED));\n            break;\n        default:\n            // No meaningful Activity response code, so generate default Google\n            // Play services dialog\n            errorDialog = GooglePlayServicesUtil.getErrorDialog(errorCode, activity,\n                    RC_UNUSED, null);\n            if (errorDialog == null) {\n                // get fallback dialog\n                Log.e(\"GameHelper\", \"No standard error dialog available. Making fallback dialog.\");\n                errorDialog = makeSimpleDialog(activity,\n                        GameHelperUtils.getString(activity, GameHelperUtils.R_UNKNOWN_ERROR)\n                        + \" \" + GameHelperUtils.errorCodeToString(errorCode));\n            }\n    }\n\n    errorDialog.show();\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Returns the GoogleApiClient object. In order to call this method, you must have\n * called @link{setup}.\n */\n", "func_signal": "public GoogleApiClient getApiClient()", "code": "{\n    if (mGoogleApiClient == null) {\n        throw new IllegalStateException(\"No GoogleApiClient. Did you call setup()?\");\n    }\n    return mGoogleApiClient;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Call this method from your Activity's onStop(). */\n", "func_signal": "public void onStop()", "code": "{\n    debugLog(\"onStop\");\n    assertConfigured(\"onStop\");\n    if (mGoogleApiClient.isConnected()) {\n        debugLog(\"Disconnecting client due to onStop\");\n        mGoogleApiClient.disconnect();\n    } else {\n        debugLog(\"Client already disconnected when we got onStop.\");\n    }\n    mConnecting = false;\n    mExpectingResolution = false;\n\n    // let go of the Activity reference\n    mActivity = null;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Returns the invitation received through an invitation notification.\n * This should be called from your GameHelperListener's\n * @link{GameHelperListener#onSignInSucceeded} method, to check if there's an\n * invitation available. In that case, accept the invitation.\n * @return The invitation, or null if none was received.\n */\n", "func_signal": "public Invitation getInvitation()", "code": "{\n    if (!mGoogleApiClient.isConnected()) {\n        Log.w(TAG, \"Warning: getInvitation() should only be called when signed in, \" +\n                \"that is, after getting onSignInSuceeded()\");\n    }\n    return mInvitation;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Creates a GoogleApiClient.Builder for use with @link{#setup}. Normally, you do not have\n * to do this; use this method only if you need to make nonstandard setup (e.g. adding\n * extra scopes for other APIs) on the GoogleApiClient.Builder before calling @link{#setup}.\n */\n", "func_signal": "public GoogleApiClient.Builder createApiClientBuilder()", "code": "{\n    if (mSetupDone) {\n        String error = \"GameHelper: you called GameHelper.createApiClientBuilder() after \" +\n                \"calling setup. You can only get a client builder BEFORE performing setup.\";\n        logError(error);\n        throw new IllegalStateException(error);\n    }\n\n    GoogleApiClient.Builder builder = new GoogleApiClient.Builder(mActivity, this, this);\n\n    if (0 != (mRequestedClients & CLIENT_GAMES)) {\n        builder.addApi(Games.API, mGamesApiOptions);\n        builder.addScope(Games.SCOPE_GAMES);\n    }\n\n    if (0 != (mRequestedClients & CLIENT_PLUS)) {\n        builder.addApi(Plus.API, mPlusApiOptions);\n        builder.addScope(Plus.SCOPE_PLUS_LOGIN);\n    }\n\n    if (0 != (mRequestedClients & CLIENT_APPSTATE)) {\n        builder.addApi(AppStateManager.API, mAppStateApiOptions);\n        builder.addScope(AppStateManager.SCOPE_APP_STATE);\n    }\n\n    mGoogleApiClientBuilder = builder;\n    return builder;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "// Not recommended for general use. This method forces the \"connect on start\" flag\n// to a given state. This may be useful when using GameHelper in a non-standard\n// sign-in flow.\n", "func_signal": "public void setConnectOnStart(boolean connectOnStart)", "code": "{\n    debugLog(\"Forcing mConnectOnStart=\" + connectOnStart);\n    mConnectOnStart = connectOnStart;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Sets the options to pass when setting up the Games API. Call before setup(). */\n", "func_signal": "public void setGamesApiOptions(GoogleApiClient.ApiOptions options)", "code": "{\n    doApiOptionsPreCheck();\n    mGamesApiOptions = options;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Called when we successfully obtain a connection to a client. */\n", "func_signal": "@Override\npublic void onConnected(Bundle connectionHint)", "code": "{\n    debugLog(\"onConnected: connected!\");\n\n    if (connectionHint != null) {\n        debugLog(\"onConnected: connection hint provided. Checking for invite.\");\n        Invitation inv = connectionHint\n                .getParcelable(Multiplayer.EXTRA_INVITATION);\n        if (inv != null && inv.getInvitationId() != null) {\n            // retrieve and cache the invitation ID\n            debugLog(\"onConnected: connection hint has a room invite!\");\n            mInvitation = inv;\n            debugLog(\"Invitation ID: \" + mInvitation.getInvitationId());\n        }\n\n        debugLog(\"onConnected: connection hint provided. Checking for TBMP game.\");\n        mTurnBasedMatch = connectionHint.getParcelable(Multiplayer.EXTRA_TURN_BASED_MATCH);\n    }\n\n    // we're good to go\n    succeedSignIn();\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Starts a user-initiated sign-in flow. This should be called when the user\n * clicks on a \"Sign In\" button. As a result, authentication/consent dialogs\n * may show up. At the end of the process, the GameHelperListener's\n * onSignInSucceeded() or onSignInFailed() methods will be called.\n */\n", "func_signal": "public void beginUserInitiatedSignIn()", "code": "{\n    debugLog(\"beginUserInitiatedSignIn: resetting attempt count.\");\n    resetSignInCancellations();\n    mSignInCancelled = false;\n    mConnectOnStart = true;\n\n    if (mGoogleApiClient.isConnected()) {\n        // nothing to do\n        logWarn(\"beginUserInitiatedSignIn() called when already connected. \" +\n                \"Calling listener directly to notify of success.\");\n        notifyListener(true);\n        return;\n    } else if (mConnecting) {\n        logWarn(\"beginUserInitiatedSignIn() called when already connecting. \" +\n                \"Be patient! You can only call this method after you get an \" +\n                \"onSignInSucceeded() or onSignInFailed() callback. Suggestion: disable \" +\n                \"the sign-in button on startup and also when it's clicked, and re-enable \" +\n                \"when you get the callback.\");\n        // ignore call (listener will get a callback when the connection process finishes)\n        return;\n    }\n\n    debugLog(\"Starting USER-INITIATED sign-in flow.\");\n\n    // indicate that user is actively trying to sign in (so we know to resolve\n    // connection problems by showing dialogs)\n    mUserInitiatedSignIn = true;\n\n    if (mConnectionResult != null) {\n        // We have a pending connection result from a previous failure, so\n        // start with that.\n        debugLog(\"beginUserInitiatedSignIn: continuing pending sign-in flow.\");\n        mConnecting = true;\n        resolveConnectionResult();\n    } else {\n        // We don't have a pending connection result, so start anew.\n        debugLog(\"beginUserInitiatedSignIn: starting new sign-in flow.\");\n        mConnecting = true;\n        connect();\n    }\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Construct a GameHelper object, initially tied to the given Activity.\n * After constructing this object, call @link{setup} from the onCreate()\n * method of your Activity.\n *\n * @param clientsToUse the API clients to use (a combination of the CLIENT_* flags,\n *                     or CLIENT_ALL to mean all clients).\n */\n", "func_signal": "public GameHelper(Activity activity, int clientsToUse)", "code": "{\n    mActivity = activity;\n    mAppContext = activity.getApplicationContext();\n    mRequestedClients = clientsToUse;\n    mHandler = new Handler();\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Enables debug logging */\n", "func_signal": "public void enableDebugLog(boolean enabled)", "code": "{\n    mDebugLog = enabled;\n    if (enabled) {\n        debugLog(\"Debug log enabled.\");\n    }\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/** Call this method from your Activity's onStart(). */\n", "func_signal": "public void onStart(Activity act)", "code": "{\n    mActivity = act;\n    mAppContext = act.getApplicationContext();\n\n    debugLog(\"onStart\");\n    assertConfigured(\"onStart\");\n\n    if (mConnectOnStart) {\n        if (mGoogleApiClient.isConnected()) {\n            Log.w(TAG, \"GameHelper: client was already connected on onStart()\");\n        } else {\n            debugLog(\"Connecting client.\");\n            mConnecting = true;\n            mGoogleApiClient.connect();\n        }\n    } else {\n        debugLog(\"Not attempting to connect becase mConnectOnStart=false\");\n        debugLog(\"Instead, reporting a sign-in failure.\");\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                notifyListener(false);\n            }\n        }, 1000);\n    }\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * Performs setup on this GameHelper object. Call this from the onCreate()\n * method of your Activity. This will create the clients and do a few other\n * initialization tasks. Next, call @link{#onStart} from the onStart()\n * method of your Activity.\n *\n * @param listener The listener to be notified of sign-in events.\n */\n", "func_signal": "public void setup(GameHelperListener listener)", "code": "{\n    if (mSetupDone) {\n        String error = \"GameHelper: you cannot call GameHelper.setup() more than once!\";\n        logError(error);\n        throw new IllegalStateException(error);\n    }\n    mListener = listener;\n    debugLog(\"Setup: requested clients: \" + mRequestedClients);\n\n    if (mGoogleApiClientBuilder == null) {\n        // we don't have a builder yet, so create one\n        createApiClientBuilder();\n    }\n\n    mGoogleApiClient = mGoogleApiClientBuilder.build();\n    mGoogleApiClientBuilder = null;\n    mSetupDone = true;\n}", "path": "libs\\basegameutils\\java\\com\\google\\example\\games\\basegameutils\\GameHelper.java", "repo_name": "tito/2048", "stars": 464, "license": "None", "language": "java", "size": 2362}
{"docstring": "/**\n * \u8fd4\u56de\u6240\u6709\u88ab\u62d2\u7edd\u7684\u6743\u9650\n * @return\n */\n", "func_signal": "private String[] getAllDeniedPermissions()", "code": "{\n    List<String> deniedPermissions = new ArrayList<>();\n    for(String permission: permissions)\n    {\n        if (ActivityCompat.checkSelfPermission(this, permission)\n                != PackageManager.PERMISSION_GRANTED)\n        {\n            deniedPermissions.add(permission);\n        }\n    }\n    String[] permissions = new String[deniedPermissions.size()];\n    deniedPermissions.toArray(permissions);\n    return permissions;\n}", "path": "FileProviderDemo\\app\\src\\main\\java\\android\\fileproviderdemo\\PermissionsActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * Helper to hide the keyboard\n *\n * @param act\n */\n", "func_signal": "public static void hideKeyboard(Activity act)", "code": "{\n    if (act != null && act.getCurrentFocus() != null) {\n        InputMethodManager inputMethodManager = (InputMethodManager) act.getSystemService(Activity.INPUT_METHOD_SERVICE);\n        inputMethodManager.hideSoftInputFromWindow(act.getCurrentFocus().getWindowToken(), 0);\n    }\n}", "path": "ImmersiveDemo\\app\\src\\main\\java\\com\\example\\hiphonezhu\\immersivedemo\\KeyboardUtil.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "// \u5f53\u524d\u88ab\u6355\u83b7\u7684View\u91ca\u653e\u4e4b\u540e\u56de\u8c03\n", "func_signal": "@Override\npublic void onViewReleased(View releasedChild, float xvel, float yvel)", "code": "{\n    if (releasedChild == autoBackView)\n    {\n        dragHelper.settleCapturedViewAt(autoBackViewOriginLeft, autoBackViewOriginTop);\n        invalidate();\n    }\n}", "path": "ViewDragHelperDemo\\app\\src\\main\\java\\android\\drag\\viewdraghelperdemo\\VDHLinearLayout2.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u66ff\u6362\u539f\u65b9\u6cd5\u8fd4\u56de\u503c\n * \u6ce8\uff1a@Pointcut\u53ef\u4ee5\u4e0d\u5355\u72ec\u5b9a\u4e49\u65b9\u6cd5\uff0c\u76f4\u63a5\u4f7f\u7528\uff0c\u5982\u4e0b\uff1a\n * @Around(\"execution(* android.aspectjdemo.animal.Animal.getWeight(..))\")\n *\n * @param joinPoint\n * @return\n * @throws Throwable\n */\n", "func_signal": "@Around(\"execution(* android.aspectjdemo.animal.Animal.getWeight(..))\")\npublic int aroundGetAgeMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable", "code": "{\n    int weight = Integer.parseInt(joinPoint.proceed().toString());\n    Log.e(TAG, \"\u539f\u59cbweight: \" + weight);\n    return 100;\n}", "path": "AspectJDemo\\app\\src\\main\\java\\android\\aspectjdemo\\method\\MethodAspect.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u901a\u77e5\u89c2\u5bdf\u8005FloatingDragger\n */\n", "func_signal": "public void update()", "code": "{\n    setChanged();\n    notifyObservers();\n}", "path": "FloatingOval\\app\\src\\main\\java\\android\\floatingoval\\FloatingDragger.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "// \u6700\u5927\u6eda\u52a8\u8ddd\u79bb\n", "func_signal": "public StickyLayout(Context context)", "code": "{\n       super(context);\n       init();\n   }", "path": "NestedScrolling\\app\\src\\main\\java\\com\\example\\hiphonezhu\\nestedscrolling\\StickyLayout.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * create router class service\n * @param service router class\n * @param context from context\n * @param <T>\n * @return\n */\n", "func_signal": "public <T> T create(final Class<T> service, final Context context)", "code": "{\n    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },\n            new InvocationHandler() {\n                @Override public Object invoke(Object proxy, Method method, Object... args)\n                        throws Throwable {\n                    IntentWrapper intentWrapper = loadIntentWrapper(context, method, args);\n\n                    Class returnTYpe = method.getReturnType();\n                    if (returnTYpe == void.class)\n                    {\n                        if (interceptor == null || !interceptor.intercept(intentWrapper))\n                        {\n                            intentWrapper.start();\n                        }\n                        return null;\n                    }\n                    else if (returnTYpe == IntentWrapper.class)\n                    {\n                        return intentWrapper;\n                    }\n                    throw new RuntimeException(\"method return type only support 'void' or 'IntentWrapper'\");\n                }\n            });\n}", "path": "LiteRouter\\app\\src\\main\\java\\android\\router\\literouter\\lib\\LiteRouter.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "//    @Before(\"advice()\")\n//    public void beforeAdvice(JoinPoint joinPoint) {\n//        Log.d(TAG, \"beforeAdvice: \" + joinPoint.getSignature().getName());\n//    }\n//\n//    @After(\"advice()\")\n//    public void afterAdvice(JoinPoint joinPoint) {\n//        Log.d(TAG, \"afterAdvice: \" + joinPoint.getSignature().getName());\n//    }\n", "func_signal": "@Around(\"advice()\")\n    public void aroundAdvice(ProceedingJoinPoint joinPoint) throws Throwable", "code": "{\n        Log.d(TAG, \"aroundAdvice: \" + joinPoint.getSignature().getName());\n        // \u6267\u884c\u539f\u4ee3\u7801\n        joinPoint.proceed();\n    }", "path": "AspectJDemo\\app\\src\\main\\java\\android\\aspectjdemo\\others\\AdviceExecutionAspect.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u66f4\u65b0\u4f4d\u7f6e\n */\n", "func_signal": "public void restorePosition()", "code": "{\n    // \u8bfb\u53d6\u4fdd\u5b58\u7684\u4f4d\u7f6e\n    float x = sp.getFloat(KEY_FLOATING_X, -1);\n    float y = sp.getFloat(KEY_FLOATING_Y, -1);\n    if (x == -1 && y == -1) { // \u521d\u59cb\u4f4d\u7f6e\n        x = getMeasuredWidth() - floatingBtn.getMeasuredWidth();\n        y = getMeasuredHeight() * 2 / 3;\n    }\n    floatingBtn.layout((int)x, (int)y,\n            (int)x + floatingBtn.getMeasuredWidth(), (int)y + floatingBtn.getMeasuredHeight());\n}", "path": "FloatingOval\\app\\src\\main\\java\\android\\floatingoval\\FloatingDragger.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u6240\u6709\u6743\u9650\u90fd\u5df2\u901a\u8fc7\n * @param grantResults\n * @return\n */\n", "func_signal": "private boolean hasAllPermissionsGranted(@NonNull int[] grantResults)", "code": "{\n    for(int grantResult: grantResults)\n    {\n        if (grantResult == PackageManager.PERMISSION_DENIED)\n        {\n            return false;\n        }\n    }\n    return true;\n}", "path": "FileProviderDemo\\app\\src\\main\\java\\android\\fileproviderdemo\\PermissionsActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * Receives callback from the service when a job that\n * previously landed on the app must stop executing.\n * Colours the UI and post a message to uncolour it after a\n * second.\n */\n", "func_signal": "public void onReceivedStopJob()", "code": "{\n    mShowStopView.setBackgroundColor(stopJobColor);\n    Message m = Message.obtain(mHandler, MSG_UNCOLOUR_STOP);\n    mHandler.sendMessageDelayed(m, 2000L); // uncolour in 1 second.\n    mParamsTextView.setText(\"\");\n}", "path": "JobScheduler\\app\\src\\main\\java\\android\\jobscheduler\\jobscheduler\\MainActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u6743\u9650\u63d0\u793a\u5bf9\u8bdd\u6846\n * @param isShowRationale\n */\n", "func_signal": "private void showMissingPermissionDialog(final boolean isShowRationale)", "code": "{\n    String formatStr = null;\n    if (isShowRationale)\n    {\n        formatStr = getString(R.string.permission_desc_text1);\n    }\n    else\n    {\n        formatStr = getString(R.string.permission_desc_text2);\n    }\n    String message = String.format(formatStr, TextUtils.isEmpty(permissionDesc)? \"\u5fc5\u8981\" : permissionDesc);\n\n    Snackbar.make(getWindow().getDecorView(), message, Snackbar.LENGTH_LONG).setAction(R.string.settings, new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            isRequesting = false;\n            if (isShowRationale)\n            {\n                ActivityCompat.requestPermissions(PermissionsActivity.this, permissions, REQUEST_PERMISSIONS_CODE);\n            }\n            else\n            {\n                startAppSettings();\n            }\n        }\n    }).setCallback(new Snackbar.Callback() {\n        @Override\n        public void onDismissed(Snackbar snackbar, int event) {\n            // \u4e0d\u662f\u70b9\u51fb\u6309\u94ae\u53d6\u6d88\u7684\n            if (event != Snackbar.Callback.DISMISS_EVENT_ACTION)\n            {\n                setResult(PERMISSIONS_DENIED);\n                finish();\n            }\n        }\n    }).show();\n}", "path": "FileProviderDemo\\app\\src\\main\\java\\android\\fileproviderdemo\\PermissionsActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u4e0d\u80fd\u548cBefore\u3001After\u4e00\u8d77\u4f7f\u7528\n * @param joinPoint\n * @throws Throwable\n */\n", "func_signal": "@Around(\"callMethod()\")\npublic void aroundMethodCall(ProceedingJoinPoint joinPoint) throws Throwable", "code": "{\n    Log.e(TAG, \"around->\" + joinPoint.getTarget().toString() + \"#\" + joinPoint.getSignature().getName());\n\n    // \u6267\u884c\u539f\u4ee3\u7801\n    joinPoint.proceed();\n}", "path": "AspectJDemo\\app\\src\\main\\java\\android\\aspectjdemo\\method\\MethodAspect.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u542f\u52a8\u5e94\u7528\u8bbe\u7f6e\n */\n", "func_signal": "private void startAppSettings()", "code": "{\n    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n    intent.setData(Uri.parse(\"package:\" + getPackageName()));\n    if (intent.resolveActivity(getPackageManager()) != null)\n    {\n        startActivity(intent);\n    }\n}", "path": "FileProviderDemo\\app\\src\\main\\java\\android\\fileproviderdemo\\PermissionsActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u6240\u6709\u6743\u9650\u90fd\u5df2\u901a\u8fc7\n * @param permissions\n * @return\n */\n", "func_signal": "private boolean hasAllPermissionsGranted(@NonNull String[] permissions)", "code": "{\n    for(String permission: permissions)\n    {\n        if (ActivityCompat.checkSelfPermission(this, permission)\n                != PackageManager.PERMISSION_GRANTED)\n        {\n            return false;\n        }\n    }\n    return true;\n}", "path": "FileProviderDemo\\app\\src\\main\\java\\android\\fileproviderdemo\\PermissionsActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * UI onclick listener to call jobFinished() in our service.\n */\n", "func_signal": "public void finishJob(View v)", "code": "{\n    if (!ensureTestService()) {\n        return;\n    }\n    mTestService.callJobFinished();\n    mParamsTextView.setText(\"\");\n}", "path": "JobScheduler\\app\\src\\main\\java\\android\\jobscheduler\\jobscheduler\\MainActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * UI onclick listener to schedule a job. What this job is is defined in\n * TestJobService#scheduleJob().\n */\n", "func_signal": "public void scheduleJob(View v)", "code": "{\n    if (!ensureTestService()) {\n        return;\n    }\n\n    JobInfo.Builder builder = new JobInfo.Builder(kJobId++, mServiceComponent);\n    builder.setPeriodic(3000);\n\n    String delay = mDelayEditText.getText().toString();\n    if (delay != null && !TextUtils.isEmpty(delay)) {\n        builder.setMinimumLatency(Long.valueOf(delay) * 1000);\n    }\n    String deadline = mDeadlineEditText.getText().toString();\n    if (deadline != null && !TextUtils.isEmpty(deadline)) {\n        builder.setOverrideDeadline(Long.valueOf(deadline) * 1000);\n    }\n    boolean requiresUnmetered = mWiFiConnectivityRadioButton.isChecked();\n    boolean requiresAnyConnectivity = mAnyConnectivityRadioButton.isChecked();\n    if (requiresUnmetered) {\n        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED);\n    } else if (requiresAnyConnectivity) {\n        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);\n    }\n    builder.setRequiresDeviceIdle(mRequiresIdleCheckbox.isChecked());\n    builder.setRequiresCharging(mRequiresChargingCheckBox.isChecked());\n\n    mTestService.scheduleJob(builder.build());\n\n}", "path": "JobScheduler\\app\\src\\main\\java\\android\\jobscheduler\\jobscheduler\\MainActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u8bf7\u6c42\u6743\u9650\n */\n", "func_signal": "private void requestPermissions()", "code": "{\n    permissions = getAllDeniedPermissions();\n\n    isRequesting = true;\n    /**\n     * \u4e00\u53e5\u8bdd: \u88ab\u7528\u6237\u62d2\u7edd\u8fc7(\u7b2c\u4e00\u6b21\u7533\u8bf7), \u518d\u6b21\u7533\u8bf7\u65f6\u5982\u679c\u76f4\u63a5requestPermissions\u663e\u5f97\u6bd4\u8f83\u5510\u7a81(\u4f1a\u663e\u793a\u4e00\u4e2a\u5e26\u6709\u201dDon\u2019t ask again\u201d\u7684\u7cfb\u7edf\u5bf9\u8bdd\u6846)\n     * , \u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u53cb\u597d\u7684\u5bf9\u8bdd\u6846(\u6211\u4eec\u81ea\u5df1\u7684)\u5411\u7528\u6237\u89e3\u91ca\u4e0b\u4e3a\u4f55\u9700\u8981\u8fd9\u4e2a\u6743\u9650\u3002\n     *\n     * \u573a\u666f\u5982\u4e0b:\n     * 1\u3001\u5982\u679capp\u4e4b\u524d\u8bf7\u6c42\u8fc7\u8be5\u6743\u9650,\u88ab\u7528\u6237\u62d2\u7edd, \u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4f1a\u8fd4\u56detrue.\n     * 2\u3001\u5982\u679c\u8bbe\u5907\u7b56\u7565\u7981\u6b62\u5e94\u7528\u62e5\u6709\u8fd9\u6761\u6743\u9650, \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u8fd4\u56defalse.\n     * 3\u3001\u5982\u679c\u7528\u6237\u4e4b\u524d\u62d2\u7edd\u6743\u9650\u7684\u65f6\u5019\u52fe\u9009\u4e86\u5bf9\u8bdd\u6846\u4e2d\u201dDon\u2019t ask again\u201d\u7684\u9009\u9879,\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u8fd4\u56defalse.\n     */\n    if (ActivityCompat.shouldShowRequestPermissionRationale(this,\n            permissions[0])) // \u5982\u679c\u975e\u7b2c\u4e00\u4e2a\u6743\u9650\u7528\u6237\u52fe\u9009\u4e86\u201dDon\u2019t ask again\u201d, \u5e76\u4e14\u62d2\u7edd\u4e86\u3002\u90a3\u4e48\u4e0d\u4f1a\u63d0\u793a\u8be5\u7c7b\u6743\u9650, \u6240\u4ee5\u5efa\u8bae\u6bcf\u6b21\u7533\u8bf7\u4e00\u4e2a\u6743\u9650\u3002\n    {\n        showMissingPermissionDialog(true);\n    }\n    else\n    {\n        ActivityCompat.requestPermissions(this, permissions, REQUEST_PERMISSIONS_CODE);\n    }\n}", "path": "FileProviderDemo\\app\\src\\main\\java\\android\\fileproviderdemo\\PermissionsActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * Receives callback from the service when a job has landed\n * on the app. Colours the UI and post a message to\n * uncolour it after a second.\n */\n", "func_signal": "public void onReceivedStartJob(JobParameters params)", "code": "{\n    mShowStartView.setBackgroundColor(startJobColor);\n    Message m = Message.obtain(mHandler, MSG_UNCOLOUR_START);\n    mHandler.sendMessageDelayed(m, 1000L); // uncolour in 1 second.\n    mParamsTextView.setText(\"Executing: \" + params.getJobId() + \" \" + params.getExtras());\n}", "path": "JobScheduler\\app\\src\\main\\java\\android\\jobscheduler\\jobscheduler\\MainActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/**\n * \u542f\u52a8Activity\n * @param activity\n * @param requestCode\n * @param permissionDesc \u6743\u9650\u63cf\u8ff0, \u4f8b\u5982:\u53d1\u9001\u77ed\u4fe1\u3001\u8bbf\u95ee\u76f8\u673a\u3002\u5982\u4e3a\u7a7a, \u4f1a\u663e\u793a\"\u5fc5\u8981\"\u5b57\u6837\n * @param permissions \u6743\u9650\u5217\u8868\n */\n", "func_signal": "public static void actionStartForResult(Activity activity, int requestCode, String permissionDesc, String... permissions)", "code": "{\n    Intent intent = new Intent(activity, PermissionsActivity.class);\n    intent.putExtra(\"permissionDesc\", permissionDesc);\n    intent.putExtra(\"permissions\", permissions);\n    activity.startActivityForResult(intent, requestCode);\n}", "path": "FileProviderDemo\\app\\src\\main\\java\\android\\fileproviderdemo\\PermissionsActivity.java", "repo_name": "hyvenzhu/Android-Demos", "stars": 294, "license": "None", "language": "java", "size": 1486}
{"docstring": "/** Construct a {@link LuaString} around, possibly using the the supplied\n * byte array as the backing store.\n * <p>\n * The caller must ensure that the array is not mutated after the call.\n * However, if the string is short enough the short-string cache is checked\n * for a match which may be used instead of the supplied byte array.\n * <p>\n * @param bytes byte buffer\n * @return {@link LuaString} wrapping the byte buffer, or an equivalent string.\n */\n", "func_signal": "static public LuaString valueUsing(byte[] bytes, int off, int len)", "code": "{\n\tif (bytes.length > RECENT_STRINGS_MAX_LENGTH)\n\t\treturn new LuaString(bytes, off, len);\n\tfinal int hash = hashCode(bytes, off, len);\n\tfinal int bucket = hash & (RECENT_STRINGS_CACHE_SIZE - 1);\n\tfinal LuaString t = RecentShortStrings.recent_short_strings[bucket];\n\tif (t != null && t.m_hashcode == hash && t.byteseq(bytes, off, len)) return t;\n\tfinal LuaString s = new LuaString(bytes, off, len);\n\tRecentShortStrings.recent_short_strings[bucket] = s;\n\treturn s;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Scan and convert a long value, or return Double.NaN if not found.\n * @param base the base to use, such as 10\n * @param start the index to start searching from\n * @param end the first index beyond the search range\n * @return double value if conversion is valid, \n * or Double.NaN if not\n */\n", "func_signal": "private double scanlong( int base, int start, int end )", "code": "{\n\tlong x = 0;\n\tboolean neg = (m_bytes[start] == '-');\n\tfor ( int i=(neg?start+1:start); i<end; i++ ) {\n\t\tint digit = m_bytes[i] - (base<=10||(m_bytes[i]>='0'&&m_bytes[i]<='9')? '0':\n\t\t\t\tm_bytes[i]>='A'&&m_bytes[i]<='Z'? ('A'-10): ('a'-10));\n\t\tif ( digit < 0 || digit >= base )\n\t\t\treturn Double.NaN;\t\t\n\t\tx = x * base + digit;\n\t\tif ( x < 0 )\n\t\t\treturn Double.NaN; // overflow\n\t}\n\treturn neg? -x: x;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Scan and convert a double value, or return Double.NaN if not a double.\n * @param start the index to start searching from\n * @param end the first index beyond the search range\n * @return double value if conversion is valid, \n * or Double.NaN if not\n */\n", "func_signal": "private double scandouble(int start, int end)", "code": "{\n\tif ( end>start+64 ) end=start+64;\n\tfor ( int i=start; i<end; i++ ) {\n\t\tswitch ( m_bytes[i] ) {\n\t\tcase '-':\n\t\tcase '+':\n\t\tcase '.':\n\t\tcase 'e': case 'E':\n\t\tcase '0': case '1': case '2': case '3': case '4':\n\t\tcase '5': case '6': case '7': case '8': case '9':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Double.NaN;\n\t\t}\n\t}\n\tchar [] c = new char[end-start];\n\tfor ( int i=start; i<end; i++ )\n\t\tc[i-start] = (char) m_bytes[i];\n\ttry {\n\t\treturn Double.parseDouble(new String(c));\n\t} catch ( Exception e ) {\t\t\t\n\t\treturn Double.NaN;\n\t}\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** Take a substring using Java zero-based indexes for begin and end or range.\n * @param beginIndex  The zero-based index of the first character to include.\n * @param endIndex  The zero-based index of position after the last character.\n * @return LuaString which is a substring whose first character is at offset \n * beginIndex and extending for (endIndex - beginIndex ) characters.\n */\n", "func_signal": "public LuaString substring( int beginIndex, int endIndex )", "code": "{\n\tfinal int off = m_offset + beginIndex;\n\tfinal int len = endIndex - beginIndex;\n\treturn len >= m_length / 2?\n\t\tvalueUsing(m_bytes, off, len):\n\t\tvalueOf(m_bytes, off, len);\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** Construct a {@link LuaString} around a byte array without copying the contents.\n * <p>\n * The array is used directly after this is called, so clients must not change contents.\n * <p>\n * @param bytes byte buffer\n * @param offset offset into the byte buffer\n * @param length length of the byte buffer\n * @return {@link LuaString} wrapping the byte buffer\n */\n", "func_signal": "private LuaString(byte[] bytes, int offset, int length)", "code": "{\n\tthis.m_bytes = bytes;\n\tthis.m_offset = offset;\n\tthis.m_length = length;\n\tthis.m_hashcode = hashCode(bytes, offset, length);\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** Compute the hash code of a sequence of bytes within a byte array using\n * lua's rules for string hashes.  For long strings, not all bytes are hashed.\n * @param bytes  byte array containing the bytes.\n * @param offset  offset into the hash for the first byte.\n * @param length number of bytes starting with offset that are part of the string.\n * @return hash for the string defined by bytes, offset, and length.\n */\n", "func_signal": "public static int hashCode(byte[] bytes, int offset, int length)", "code": "{\n\tint h = length;  /* seed */\n\tint step = (length>>5)+1;  /* if string is too long, don't hash all its chars */\n\tfor (int l1=length; l1>=step; l1-=step)  /* compute hash */\n\t    h = h ^ ((h<<5)+(h>>2)+(((int) bytes[offset+l1-1] ) & 0x0FF ));\n\treturn h;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Convert to Java String interpreting as utf8 characters. \n * \n * @param bytes byte array in UTF8 encoding to convert\n * @param offset starting index in byte array\n * @param length number of bytes to convert\n * @return Java String corresponding to the value of bytes interpreted using UTF8 \n * @see #lengthAsUtf8(char[])\n * @see #encodeToUtf8(char[], int, byte[], int)\n * @see #isValidUtf8()\n */\n", "func_signal": "public static String decodeAsUtf8(byte[] bytes, int offset, int length)", "code": "{\n\tint i,j,n,b;\n\tfor ( i=offset,j=offset+length,n=0; i<j; ++n ) {\n\t\tswitch ( 0xE0 & bytes[i++] ) {\n\t\tcase 0xE0: ++i;\n\t\tcase 0xC0: ++i;\n\t\t}\n\t}\n\tchar[] chars=new char[n];\n\tfor ( i=offset,j=offset+length,n=0; i<j; ) {\n\t\tchars[n++] = (char) (\n\t\t\t((b=bytes[i++])>=0||i>=j)? b:\n\t\t\t(b<-32||i+1>=j)? (((b&0x3f) << 6) | (bytes[i++]&0x3f)):\n\t\t\t\t(((b&0xf) << 12) | ((bytes[i++]&0x3f)<<6) | (bytes[i++]&0x3f)));\n\t}\n\treturn new String(chars);\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Get a {@link LuaString} instance whose bytes match \n * the supplied Java String using the UTF8 encoding. \n * @param string Java String containing characters to encode as UTF8\n * @return {@link LuaString} with UTF8 bytes corresponding to the supplied String\n */\n", "func_signal": "public static LuaString valueOf(String string)", "code": "{\n\tchar[] c = string.toCharArray();\n\tbyte[] b = new byte[lengthAsUtf8(c)];\n\tencodeToUtf8(c, c.length, b, 0);\n\treturn valueUsing(b, 0, b.length);\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** Construct a {@link LuaString} using the supplied characters as byte values.\n * <p>\n * Only the low-order 8-bits of each character are used, the remainder is ignored. \n * <p>\n * This is most useful for constructing byte sequences that do not conform to UTF8. \n * @param bytes array of char, whose values are truncated at 8-bits each and put into a byte array. \n * @return {@link LuaString} wrapping a copy of the byte buffer \n */\n", "func_signal": "public static LuaString valueOf(char[] bytes, int off, int len)", "code": "{\n\tbyte[] b = new byte[len];\n\tfor ( int i=0; i<len; i++ )\n\t\tb[i] = (byte) bytes[i + off];\n\treturn valueUsing(b, 0, len);\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Count the number of bytes required to encode the string as UTF-8.\n * @param chars Array of unicode characters to be encoded as UTF-8\n * @return count of bytes needed to encode using UTF-8\n * @see #encodeToUtf8(char[], int, byte[], int)\n * @see #decodeAsUtf8(byte[], int, int)\n * @see #isValidUtf8()\n */\n", "func_signal": "public static int lengthAsUtf8(char[] chars)", "code": "{\t\t\n\tint i,b;\n\tchar c;\n\tfor ( i=b=chars.length; --i>=0; )\n\t\tif ( (c=chars[i]) >=0x80 )\n\t\t\tb += (c>=0x800)? 2: 1;\n\treturn b;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** Java version of strpbrk - find index of any byte that in an accept string.\n * @param accept {@link LuaString} containing characters to look for.\n * @return index of first match in the {@code accept} string, or -1 if not found.\n */\n", "func_signal": "public int indexOfAny( LuaString accept )", "code": "{\n\tfinal int ilimit = m_offset + m_length;\n\tfinal int jlimit = accept.m_offset + accept.m_length;\n\tfor ( int i = m_offset; i < ilimit; ++i ) {\n\t\tfor ( int j = accept.m_offset; j < jlimit; ++j ) {\n\t\t\tif ( m_bytes[i] == accept.m_bytes[j] ) {\n\t\t\t\treturn i - m_offset;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/* argument is a constant or register/constant */\n", "func_signal": "protected static void _assert(boolean b)", "code": "{\t\t\n\t\tif (!b)\n\t\t\tthrow new LuaError(\"compiler assert failed\");\n\t}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\compiler\\Constants.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Find the index of a string starting at a point in this string\n * @param s the string to search for\n * @param start the first index in the string\n * @return index of first match found, or -1 if not found.\n */\n", "func_signal": "public int indexOf( LuaString s, int start )", "code": "{\n\tfinal int slen = s.length();\n\tfinal int limit =  m_length - slen;\n\tfor ( int i=start; i <= limit; ++i ) {\n\t\tif ( equals( m_bytes, m_offset+i, s.m_bytes, s.m_offset, slen ) )\n\t\t\treturn i;\n\t}\n\treturn -1;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** Check for number in arithmetic, or throw aritherror */\n", "func_signal": "private double checkarith()", "code": "{ \n\tdouble d = scannumber();\n\tif ( Double.isNaN(d) ) \n\t\taritherror();\n\treturn d;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** Perform one-time initialization on the library by creating a table\n * containing the library functions, adding that table to the supplied environment,\n * adding the table to package.loaded, and returning table as the return value.\n * @param modname the module name supplied if this is loaded via 'require'.\n * @param env the environment to load into, which must be a Globals instance.\n */\n", "func_signal": "public LuaValue call(LuaValue modname, LuaValue env)", "code": "{\n\tglobals = env.checkglobals();\n\tLuaTable coroutine = new LuaTable();\n\tcoroutine.set(\"create\", new create());\n\tcoroutine.set(\"resume\", new resume());\n\tcoroutine.set(\"running\", new running());\n\tcoroutine.set(\"status\", new status());\n\tcoroutine.set(\"yield\", new yield());\n\tcoroutine.set(\"wrap\", new wrap());\n\tenv.set(\"coroutine\", coroutine);\n\tenv.get(\"package\").get(\"loaded\").set(\"coroutine\", coroutine);\n\treturn coroutine;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\lib\\CoroutineLib.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Print the bytes of the LuaString to a PrintStream as if it were\n * an ASCII string, quoting and escaping control characters.\n * @param ps PrintStream to print to.\n */\n", "func_signal": "public void printToStream(PrintStream ps)", "code": "{\n\tfor (int i = 0, n = m_length; i < n; i++) {\n\t\tint c = m_bytes[m_offset+i];\n\t\tps.print((char) c);\n\t}\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Find the last index of a string in this string\n * @param s the string to search for\n * @return index of last match found, or -1 if not found.\n */\n", "func_signal": "public int lastIndexOf( LuaString s )", "code": "{\n\tfinal int slen = s.length();\n\tfinal int limit =  m_length - slen;\n\tfor ( int i=limit; i >= 0; --i ) {\n\t\tif ( equals( m_bytes, m_offset+i, s.m_bytes, s.m_offset, slen ) )\n\t\t\treturn i;\n\t}\n\treturn -1;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "// object comparison, used in key comparison\n", "func_signal": "public boolean equals( Object o )", "code": "{\n\tif ( o instanceof LuaString ) {\n\t\treturn raweq( (LuaString) o );\n\t}\n\treturn false;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/**\n * Find the index of a byte starting at a point in this string\n * @param b the byte to look for\n * @param start the first index in the string\n * @return index of first match found, or -1 if not found.\n */\n", "func_signal": "public int indexOf( byte b, int start )", "code": "{\n\tfor ( int i=start; i < m_length; ++i ) {\n\t\tif ( m_bytes[m_offset+i] == b )\n\t\t\treturn i;\n\t}\n\treturn -1;\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "/** \n * Convert to a number in a base, or return Double.NaN if not a number.\n * @param base the base to use between 2 and 36\n * @return double value if conversion is valid, or Double.NaN if not \n */\n", "func_signal": "public double scannumber(int base)", "code": "{\n\tif ( base < 2 || base > 36 )\n\t\treturn Double.NaN;\n\tint i=m_offset,j=m_offset+m_length;\n\twhile ( i<j && m_bytes[i]==' ' ) ++i;\n\twhile ( i<j && m_bytes[j-1]==' ' ) --j;\n\tif ( i>=j )\n\t\treturn Double.NaN;\n\treturn scanlong( base, i, j );\n}", "path": "HtmlNativeAndroid\\htmlnative-lib\\src\\main\\java\\org\\luaj\\vm2\\LuaString.java", "repo_name": "hsllany/HtmlNative", "stars": 458, "license": "apache-2.0", "language": "java", "size": 72356}
{"docstring": "// \u5c06Bitmap\u8f6c\u6362\u6210InputStream\n", "func_signal": "public static InputStream Bitmap2InputStream(Bitmap bm, int quality)", "code": "{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tbm.compress(Bitmap.CompressFormat.PNG, quality, baos);\n\tInputStream is = new ByteArrayInputStream(baos.toByteArray());\n\treturn is;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// byte[]\u8f6c\u6362\u6210Drawable\n", "func_signal": "public static Drawable Bytes2Drawable(Context context, byte[] b)", "code": "{\n\tBitmap bitmap = Bytes2Bitmap(b);\n\treturn bitmap2Drawable(context, bitmap);\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * Scans the text of the provided TextView and turns all occurrences of the\n * link types indicated in the mask into clickable links. If matches are\n * found the movement method for the TextView is set to\n * MyLinkMovementMethod.\n */\n", "func_signal": "public static final boolean addLinks(TextView text, int mask)", "code": "{\n\tif (mask == 0) {\n\t\treturn false;\n\t}\n\n\tCharSequence t = text.getText();\n\n\tif (t instanceof Spannable) {\n\t\tif (addLinks((Spannable) t, mask)) {\n\t\t\taddMyLinkMovementMethod(text);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t} else {\n\t\tSpannableString s = SpannableString.valueOf(t);\n\n\t\tif (addLinks(s, mask)) {\n\t\t\taddMyLinkMovementMethod(text);\n\t\t\ttext.setText(s);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\textspan\\MyLinkify.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// Drawable\u8f6c\u6362\u6210byte[]\n", "func_signal": "public static byte[] Drawable2Bytes(Drawable d)", "code": "{\n\tBitmap bitmap = drawable2Bitmap(d);\n\treturn Bitmap2Bytes(bitmap);\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// Bitmap\u8f6c\u6362\u6210byte[]\n", "func_signal": "public static byte[] Bitmap2Bytes(Bitmap bm)", "code": "{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tbm.compress(Bitmap.CompressFormat.PNG, 100, baos);\n\treturn baos.toByteArray();\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * Scans the text of the provided Spannable and turns all occurrences of the\n * link types indicated in the mask into clickable links. If the mask is\n * nonzero, it also removes any existing URLSpans attached to the Spannable,\n * to avoid problems if you call it repeatedly on the same text.\n */\n", "func_signal": "public static final boolean addLinks(Spannable text, int mask)", "code": "{\n\tif (mask == 0) {\n\t\treturn false;\n\t}\n\n\tURLSpan[] old = text.getSpans(0, text.length(), URLSpan.class);\n\n\tfor (int i = old.length - 1; i >= 0; i--) {\n\t\ttext.removeSpan(old[i]);\n\t}\n\n\tArrayList<LinkSpec> links = new ArrayList<LinkSpec>();\n\n\tif ((mask & WEB_URLS) != 0) {\n\t\tgatherLinks(links, text, MyPatterns.WEB_URL, new String[] { \"http://\", \"https://\", \"rtsp://\" }, sUrlMatchFilter, null);\n\t}\n\n\tif ((mask & EMAIL_ADDRESSES) != 0) {\n\t\tgatherLinks(links, text, Patterns.EMAIL_ADDRESS, new String[] { \"mailto:\" }, null, null);\n\t}\n\n\tif ((mask & PHONE_NUMBERS) != 0) {\n\t\tgatherLinks(links, text, Patterns.PHONE, new String[] { \"tel:\" }, sPhoneNumberMatchFilter, sPhoneNumberTransformFilter);\n\t}\n\n\tif ((mask & MAP_ADDRESSES) != 0) {\n\t\tgatherMapLinks(links, text);\n\t}\n\n\tpruneOverlaps(links);\n\n\tif (links.size() == 0) {\n\t\treturn false;\n\t}\n\n\tfor (LinkSpec link : links) {\n\t\tapplyLink(link.url, link.start, link.end, text);\n\t}\n\n\treturn true;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\textspan\\MyLinkify.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * Applies a regex to the text of a TextView turning the matches into links.\n * If links are found then UrlSpans are applied to the link text match\n * areas, and the movement method for the text is changed to\n * MyLinkMovementMethod.\n * \n * @param text\n *            TextView whose text is to be marked-up with links\n * @param p\n *            Regex pattern to be used for finding links\n * @param scheme\n *            Url scheme string (eg <code>http://</code> to be prepended to\n *            the url of links that do not have a scheme specified in the\n *            link text\n * @param matchFilter\n *            The filter that is used to allow the client code additional\n *            control over which pattern matches are to be converted into\n *            links.\n */\n", "func_signal": "public static final void addLinks(TextView text, Pattern p, String scheme, MatchFilter matchFilter, TransformFilter transformFilter)", "code": "{\n\tSpannableString s = SpannableString.valueOf(text.getText());\n\n\tif (addLinks(s, p, scheme, matchFilter, transformFilter)) {\n\t\ttext.setText(s);\n\t\taddMyLinkMovementMethod(text);\n\t}\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\textspan\\MyLinkify.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// Drawable\u8f6c\u6362\u6210Bitmap\n", "func_signal": "public static Bitmap drawable2Bitmap(Drawable drawable)", "code": "{\n\tBitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(),\n\t\t\tdrawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);\n\tCanvas canvas = new Canvas(bitmap);\n\tdrawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n\tdrawable.draw(canvas);\n\treturn bitmap;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * Get the value of the data column for this Uri. This is useful for\n * MediaStore Uris, and other file-based ContentProviders.\n *\n * @param context\n *            The context.\n * @param uri\n *            The Uri to query.\n * @param selection\n *            (Optional) Filter used in the query.\n * @param selectionArgs\n *            (Optional) Selection arguments used in the query.\n * @return The value of the _data column, which is typically a file path.\n */\n", "func_signal": "public static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs)", "code": "{\n\n    Cursor cursor = null;\n    final String column = \"_data\";\n    final String[] projection = { column };\n\n    try {\n        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);\n        if (cursor != null && cursor.moveToFirst()) {\n            final int index = cursor.getColumnIndexOrThrow(column);\n            return cursor.getString(index);\n        }\n    } finally {\n        if (cursor != null)\n            cursor.close();\n    }\n    return null;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\FileUtils.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// \u5c06byte[]\u8f6c\u6362\u6210InputStream\n", "func_signal": "public static InputStream Byte2InputStream(byte[] b)", "code": "{\n\tByteArrayInputStream bais = new ByteArrayInputStream(b);\n\treturn bais;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// \u5c06Bitmap\u8f6c\u6362\u6210InputStream\n", "func_signal": "public static InputStream Bitmap2InputStream(Bitmap bm)", "code": "{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tbm.compress(Bitmap.CompressFormat.JPEG, 100, baos);\n\tInputStream is = new ByteArrayInputStream(baos.toByteArray());\n\treturn is;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * \u521d\u59cb\u5316ListView\n *\n * @param items\n */\n", "func_signal": "public void setItems(ArrayList<Item> items)", "code": "{\n    if (items == null)\n        return;\n\n    getLoadingLayout().setVisibility(View.GONE);\n    getFailureLayout().setVisibility(View.GONE);\n    if (items.size() == 0 && emptyLayout != null) {\n        getEmptyLayout().setVisibility(View.VISIBLE);\n        getContentLayout().setVisibility(View.GONE);\n    }\n    else {\n        getEmptyLayout().setVisibility(View.GONE);\n        getContentLayout().setVisibility(View.VISIBLE);\n    }\n    getAdapter().getDatas().clear();\n    getAdapter().getDatas().addAll(items);\n    if (getRefreshView().getAdapter() == null) {\n        bindAdapter(getAdapter());\n    }\n    else {\n        getRefreshView().setSelectionFromTop(0, 0);\n        getAdapter().notifyDataSetChanged();\n    }\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\ui\\view\\impl\\AListView.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * \u76ee\u524d\u53ea\u652f\u6301JPG\u56fe\u7247\n * \n * @param resName\n * @return\n */\n", "func_signal": "public static InputStream getFromDrawableAsStream(Context context, String resName)", "code": "{\n\ttry {\n\t\tString packageName = context.getPackageName();\n\t\tResources resources = context.getPackageManager().getResourcesForApplication(packageName);\n\n\t\tint resId = resources.getIdentifier(resName, \"drawable\", packageName);\n\n\t\tif (resId != 0)\n\t\t\treturn Bitmap2InputStream(BitmapFactory.decodeResource(resources, resId));\n\t\telse\n\t\t\tLogger.e(String.format(\"\u914d\u7f6e\u7684\u56fe\u7247ResourceId=%s\u4e0d\u5b58\u5728\", resName));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n\treturn null;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// InputStream\u8f6c\u6362\u6210Drawable\n", "func_signal": "public static Drawable InputStream2Drawable(Context context, InputStream is)", "code": "{\n\tBitmap bitmap = InputStream2Bitmap(is);\n\treturn bitmap2Drawable(context, bitmap);\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * \u83b7\u5f97\u56fe\u7247\u7684\u540e\u7f00\n * \n * @param type\n * @return\n */\n", "func_signal": "public static String getSuffix(BitmapType type)", "code": "{\n\tswitch (type) {\n\tcase gif:\n\t\treturn \".gif\";\n\tcase jpg:\n\t\treturn \".jpg\";\n\tcase bmp:\n\t\treturn \".bmp\";\n\tcase png:\n\t\treturn \".png\";\n\tdefault:\n\t\treturn \".jpg\";\n\t}\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * \u62fc\u51d1\u6210key=\"value\",key=\"value\"\u7684\u683c\u5f0f\n * \n * @param params\n * @return\n */\n", "func_signal": "public static String appendParams(Params params)", "code": "{\n\tStringBuffer paramsBuffer = new StringBuffer();\n\tfor (String key : params.getKeys()) {\n\t\tif (paramsBuffer.length() != 0) {\n\t\t\tparamsBuffer.append(\",\");\n\t\t}\n\n\t\tparamsBuffer.append(key + \"=\");\n\n\t\ttry {\n\t\t\tparamsBuffer.append(\"\\\"\" + encode(params.getParameter(key)) + \"\\\"\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn paramsBuffer.toString();\n}", "path": "library\\src\\main\\java\\org\\aisen\\android\\network\\http\\ParamsUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// \u8fd9\u4e2a\u65e5\u5fd7\u4f1a\u6253\u5370\uff0c\u4e0d\u4f1a\u56e0\u4e3arelease\u7248\u672c\u5c4f\u853d\n", "func_signal": "public static void sysout(String msg)", "code": "{\n\ttry {\n\t\tLog.v(TAG, msg);\n\n\t\tLogger2File.log2File(TAG, msg);\n\t} catch (Throwable e) {\n\t}\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\Logger.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// Bitmap\u8f6c\u6362\u6210Drawable\n", "func_signal": "public static Drawable bitmap2Drawable(Context context, Bitmap bitmap)", "code": "{\n\tBitmapDrawable bd = new BitmapDrawable(context.getResources(), bitmap);\n\tDrawable d = (Drawable) bd;\n\treturn d;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "// Drawable\u8f6c\u6362\u6210InputStream\n", "func_signal": "public static InputStream Drawable2InputStream(Drawable d)", "code": "{\n\tBitmap bitmap = drawable2Bitmap(d);\n\treturn Bitmap2InputStream(bitmap);\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\utils\\BitmapUtil.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * Applies a regex to a Spannable turning the matches into links.\n * \n * @param s\n *            Spannable whose text is to be marked-up with links\n * @param p\n *            Regex pattern to be used for finding links\n * @param scheme\n *            Url scheme string (eg <code>http://</code> to be prepended to\n *            the url of links that do not have a scheme specified in the\n *            link text\n * @param matchFilter\n *            The filter that is used to allow the client code additional\n *            control over which pattern matches are to be converted into\n *            links.\n */\n", "func_signal": "public static final boolean addLinks(Spannable s, Pattern p, String scheme, MatchFilter matchFilter, TransformFilter transformFilter)", "code": "{\n\tboolean hasMatches = false;\n\tString prefix = (scheme == null) ? \"\" : scheme.toLowerCase();\n\tMatcher m = p.matcher(s);\n\n\twhile (m.find()) {\n\t\tint start = m.start();\n\t\tint end = m.end();\n\t\tboolean allowed = true;\n\n\t\tif (matchFilter != null) {\n\t\t\tallowed = matchFilter.acceptMatch(s, start, end);\n\t\t}\n\n\t\tif (allowed) {\n\t\t\tString url = makeUrl(m.group(0), new String[] { prefix }, m, transformFilter);\n\n\t\t\tLogger.v(TAG, String.format(\"apply link --->%s\", url));\n\n\t\t\tapplyLink(url, start, end, s);\n\t\t\thasMatches = true;\n\t\t}\n\t}\n\n\treturn hasMatches;\n}", "path": "library_wen\\src\\main\\java\\org\\aisen\\wen\\support\\textspan\\MyLinkify.java", "repo_name": "wangdan/AisenForAndroid", "stars": 281, "license": "None", "language": "java", "size": 9659}
{"docstring": "/**\n * @see com.twotoasters.clusterkraf.ClusterTransitionsAnimation.Host#\n *      onClusterTransitionFinished()\n */\n", "func_signal": "@Override\npublic void onClusterTransitionFinished()", "code": "{\n\tClusterkraf clusterkraf = clusterkrafRef.get();\n\tif (clusterkraf != null) {\n\t\tclusterkraf.drawMarkers();\n\t\t/**\n\t\t * now that we have drawn our new set of markers, we can let the\n\t\t * transitionsAnimation know so it can clear its markers\n\t\t */\n\t\tclusterkraf.transitionsAnimation.onHostPlottedDestinationClusterPoints();\n\t}\n\tclusteringOnCameraChangeListener.setDirty(0);\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Remove all existing InputPoint objects and add a new list of InputPoint\n * objects for clustering\n * \n * @param inputPoints\n *            The new list of InputPoint objects for clustering\n */\n", "func_signal": "public void replace(ArrayList<InputPoint> inputPoints)", "code": "{\n\tclear();\n\taddAll(inputPoints);\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see com.nineoldandroids.animation.ValueAnimator.AnimatorUpdateListener#\n *      onAnimationUpdate(com.nineoldandroids.animation.ValueAnimator)\n */\n", "func_signal": "@Override\npublic void onAnimationUpdate(ValueAnimator animator)", "code": "{\n\tif (state != null && animatedMarkers != null) {\n\t\tLatLng[] positions = state.getPositions();\n\t\tfor (int i = 0; i < animatedMarkers.length; i++) {\n\t\t\tanimatedMarkers[i].setPosition(positions[i]);\n\t\t}\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\ClusterTransitionsAnimation.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Show the InfoWindow for the passed Marker and ClusterPoint\n * \n * @param marker\n * @param clusterPoint\n */\n", "func_signal": "public void showInfoWindow(Marker marker, ClusterPoint clusterPoint)", "code": "{\n\tGoogleMap map = mapRef.get();\n\tif (map != null && marker != null && clusterPoint != null) {\n\t\tlong dirtyUntil = System.currentTimeMillis() + options.getShowInfoWindowAnimationDuration();\n\t\tinnerCallbackListener.clusteringOnCameraChangeListener.setDirty(dirtyUntil);\n\t\tCameraUpdate cameraUpdate = CameraUpdateFactory.newLatLng(marker.getPosition());\n\t\tmap.animateCamera(cameraUpdate, options.getShowInfoWindowAnimationDuration(), new CancelableCallback() {\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tinnerCallbackListener.handler.post(new Runnable() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tinnerCallbackListener.clusteringOnCameraChangeListener.setDirty(0);\n\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onCancel() {\n\t\t\t\tinnerCallbackListener.clusteringOnCameraChangeListener.setDirty(0);\n\t\t\t}\n\t\t});\n\t\tmarker.showInfoWindow();\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see com.google.android.gms.maps.GoogleMap.OnMarkerClickListener#onMarkerClick\n *      (com.google.android.gms.maps.model.Marker)\n */\n", "func_signal": "@Override\npublic boolean onMarkerClick(Marker marker)", "code": "{\n\tboolean handled = false;\n\tboolean exempt = false;\n\tClusterkraf clusterkraf = clusterkrafRef.get();\n\tif (clusterkraf != null) {\n\t\tClusterPoint clusterPoint = clusterkraf.currentClusterPointsByMarker.get(marker);\n\t\tif (clusterPoint == null) {\n\t\t\tif (clusterkraf.transitionsAnimation.getAnimatedDestinationClusterPoint(marker) != null) {\n\t\t\t\texempt = true;\n\t\t\t\t// animated marker click is not supported\n\t\t\t} else {\n\t\t\t\tclusterPoint = clusterkraf.transitionsAnimation.getStationaryClusterPoint(marker);\n\t\t\t}\n\t\t}\n\t\tOnMarkerClickDownstreamListener downstreamListener = clusterkraf.options.getOnMarkerClickDownstreamListener();\n\t\tif (exempt == false && downstreamListener != null) {\n\t\t\thandled = downstreamListener.onMarkerClick(marker, clusterPoint);\n\t\t}\n\t\tif (exempt == false && handled == false && clusterPoint != null) {\n\t\t\tif (clusterPoint.size() > 1) {\n\t\t\t\tswitch(clusterkraf.options.getClusterClickBehavior()) {\n\t\t\t\t\tcase ZOOM_TO_BOUNDS:\n\t\t\t\t\t\tclusterkraf.zoomToBounds(clusterPoint);\n\t\t\t\t\t\thandled = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SHOW_INFO_WINDOW:\n\t\t\t\t\t\tclusterkraf.showInfoWindow(marker, clusterPoint);\n\t\t\t\t\t\thandled = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NO_OP:\n\t\t\t\t\t\t// no-op\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch(clusterkraf.options.getSinglePointClickBehavior()) {\n\t\t\t\t\tcase SHOW_INFO_WINDOW:\n\t\t\t\t\t\tclusterkraf.showInfoWindow(marker, clusterPoint);\n\t\t\t\t\t\thandled = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NO_OP:\n\t\t\t\t\t\t// no-op\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn handled || exempt;\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see android.os.AsyncTask#doInBackground(Params[])\n */\n", "func_signal": "@Override\nprotected Result doInBackground(Argument... args)", "code": "{\n\tResult result = new Result();\n\tif (args != null && args.length == 1) {\n\t\tProcess.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT + Process.THREAD_PRIORITY_LESS_FAVORABLE);\n\n\t\tArgument arg = args[0];\n\t\tClusterTransitions.Builder ctb = new ClusterTransitions.Builder(arg.projection, arg.previousClusters);\n\t\tif (arg.currentClusters != null) {\n\t\t\tfor (ClusterPoint currentClusterPoint : arg.currentClusters) {\n\t\t\t\tctb.add(currentClusterPoint);\n\t\t\t}\n\t\t}\n\t\tresult.clusterTransitions = ctb.build();\n\n\t\tProcess.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n\t}\n\treturn result;\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\ClusterTransitionsBuildingTask.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see com.twotoasters.clusterkraf.ClusterTransitionsAnimation.Host#\n *      onClusterTransitionStarted()\n */\n", "func_signal": "@Override\npublic void onClusterTransitionStarted()", "code": "{\n\tClusterkraf clusterkraf = clusterkrafRef.get();\n\tif (clusterkraf != null) {\n\t\t/**\n\t\t * now that the first frame of the transition has been drawn, we\n\t\t * can remove our previous markers without suffering any\n\t\t * blinking markers\n\t\t */\n\t\tclusterkraf.removePreviousMarkers();\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see com.nineoldandroids.animation.Animator.AnimatorListener#onAnimationEnd\n *      (com.nineoldandroids.animation.Animator)\n */\n", "func_signal": "@Override\npublic void onAnimationEnd(Animator animator)", "code": "{\n\tHost host = hostRef.get();\n\tif (host != null) {\n\t\thost.onClusterTransitionFinished();\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\ClusterTransitionsAnimation.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Add a list of InputPoint objects for clustering\n * \n * @param inputPoints\n *            The list of InputPoint objects for clustering\n */\n", "func_signal": "public void addAll(ArrayList<InputPoint> inputPoints)", "code": "{\n\tif (inputPoints != null) {\n\t\tpoints.addAll(inputPoints);\n\t\tupdateClustersAndTransition();\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Add a single InputPoint for clustering\n * \n * @param inputPoint\n *            The InputPoint object to be clustered\n */\n", "func_signal": "public void add(InputPoint inputPoint)", "code": "{\n\t// @TODO: test individually adding points\n\tif (inputPoint != null) {\n\t\tpoints.add(inputPoint);\n\t\tupdateClustersAndTransition();\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Animate the camera so all of the InputPoint objects represented by the\n * passed ClusterPoint are in view\n * \n * @param clusterPoint\n */\n", "func_signal": "public void zoomToBounds(ClusterPoint clusterPoint)", "code": "{\n\tGoogleMap map = mapRef.get();\n\tif (map != null && clusterPoint != null) {\n\t\tinnerCallbackListener.clusteringOnCameraChangeListener.setDirty(System.currentTimeMillis());\n\t\tCameraUpdate cameraUpdate = CameraUpdateFactory.newLatLngBounds(clusterPoint.getBoundsOfInputPoints(), options.getZoomToBoundsPadding());\n\t\tmap.animateCamera(cameraUpdate, options.getZoomToBoundsAnimationDuration(), null);\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener#\n *      onInfoWindowClick(com.google.android.gms.maps.model.Marker)\n */\n", "func_signal": "@Override\npublic void onInfoWindowClick(Marker marker)", "code": "{\n\tClusterkraf clusterkraf = clusterkrafRef.get();\n\tif (clusterkraf != null) {\n\t\tboolean handled = false;\n\t\tClusterPoint clusterPoint = clusterkraf.currentClusterPointsByMarker.get(marker);\n\t\tOnInfoWindowClickDownstreamListener downstreamListener = clusterkraf.options.getOnInfoWindowClickDownstreamListener();\n\t\tif (downstreamListener != null) {\n\t\t\thandled = downstreamListener.onInfoWindowClick(marker, clusterPoint);\n\t\t}\n\t\tif (handled == false && clusterPoint != null) {\n\t\t\tif (clusterPoint.size() > 1) {\n\t\t\t\tswitch(clusterkraf.options.getClusterInfoWindowClickBehavior()) {\n\t\t\t\t\tcase ZOOM_TO_BOUNDS:\n\t\t\t\t\t\tclusterkraf.zoomToBounds(clusterPoint);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HIDE_INFO_WINDOW:\n\t\t\t\t\t\tmarker.hideInfoWindow();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NO_OP:\n\t\t\t\t\t\t// no-op\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch(clusterkraf.options.getSinglePointInfoWindowClickBehavior()) {\n\t\t\t\t\tcase HIDE_INFO_WINDOW:\n\t\t\t\t\t\tmarker.hideInfoWindow();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NO_OP:\n\t\t\t\t\t\t// no-op\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "// TODO: support removing individual InputPoint objects\n", "func_signal": "private void drawMarkers()", "code": "{\n\tGoogleMap map = mapRef.get();\n\tif (map != null && currentClusters != null) {\n\t\tcurrentMarkers = new ArrayList<Marker>(currentClusters.size());\n\t\tcurrentClusterPointsByMarker = new HashMap<Marker, ClusterPoint>(currentClusters.size());\n\t\tMarkerOptionsChooser moc = options.getMarkerOptionsChooser();\n\t\tfor (ClusterPoint clusterPoint : currentClusters) {\n\t\t\tMarkerOptions markerOptions = new MarkerOptions();\n\t\t\tmarkerOptions.position(clusterPoint.getMapPosition());\n\t\t\tif (moc != null) {\n\t\t\t\tmoc.choose(markerOptions, clusterPoint);\n\t\t\t}\n\t\t\tMarker marker = map.addMarker(markerOptions);\n\t\t\tcurrentMarkers.add(marker);\n\t\t\tcurrentClusterPointsByMarker.put(marker, clusterPoint);\n\t\t}\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see android.os.AsyncTask#onPostExecute(java.lang.Object)\n */\n", "func_signal": "@Override\nprotected void onPostExecute(Result result)", "code": "{\n\tsuper.onPostExecute(result);\n\tif (isCancelled() == false && result != null && host != null) {\n\t\thost.onClusterTransitionsBuildingTaskPostExecute(result);\n\t}\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\ClusterTransitionsBuildingTask.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Add temporary stationary and animated transition markers, holds onto\n * references, and calls back to the Host when finished\n * \n * @see com.nineoldandroids.animation.Animator.AnimatorListener#onAnimationStart\n *      (com.nineoldandroids.animation.Animator)\n */\n", "func_signal": "@Override\npublic void onAnimationStart(Animator animator)", "code": "{\n\tGoogleMap map = mapRef.get();\n\tOptions options = optionsRef.get();\n\tif (map != null && options != null) {\n\t\tMarkerOptionsChooser moc = options.getMarkerOptionsChooser();\n\n\t\t// plot animated transitions at starting point\n\t\tArrayList<AnimatedTransition> animatedTransitions = state.getTransitions();\n\t\tint animatedTransitionCount = animatedTransitions.size();\n\t\tanimatedMarkers = new Marker[animatedTransitionCount];\n\t\tfor (int i = 0; i < animatedTransitionCount; i++) {\n\t\t\tAnimatedTransition animatedTransition = animatedTransitions.get(i);\n\t\t\tClusterPoint origin = animatedTransition.getOriginClusterRelevantInputPoints();\n\t\t\tMarker marker = addMarker(map, moc, origin);\n\n\t\t\tanimatedMarkers[i] = marker;\n\t\t\tanimatedTransitionsByMarker.put(marker, animatedTransition);\n\t\t}\n\n\t\t// plot stationary clusters\n\t\tArrayList<ClusterPoint> stationaryClusters = transitions.stationary;\n\t\tint stationaryClusterCount = stationaryClusters.size();\n\t\tif (stationaryClusterCount > 0) {\n\t\t\tstationaryMarkers = new Marker[stationaryClusterCount];\n\t\t\tfor (int i = 0; i < stationaryClusterCount; i++) {\n\t\t\t\tClusterPoint stationaryCluster = stationaryClusters.get(i);\n\t\t\t\tMarker marker = addMarker(map, moc, stationaryCluster);\n\n\t\t\t\tstationaryMarkers[i] = marker;\n\t\t\t\tstationaryTransitionsByMarker.put(marker, stationaryCluster);\n\t\t\t}\n\t\t}\n\t}\n\n\tHost host = hostRef.get();\n\thost.onClusterTransitionStarted();\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\ClusterTransitionsAnimation.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Applies the sample.SampleActivity.Options chosen in Normal or Advanced\n * mode menus to the clusterkraf.Options which will be used to construct our\n * Clusterkraf instance\n * \n * @param options\n */\n", "func_signal": "private void applyDemoOptionsToClusterkrafOptions(com.twotoasters.clusterkraf.Options options)", "code": "{\n\toptions.setTransitionDuration(this.options.transitionDuration);\n\n\t/**\n\t * this is probably not how you would set an interpolator in your own\n\t * app. You would probably have just one that you wanted to hard code in\n\t * your app (show me the mobile app user who actually wants to fiddle\n\t * with the interpolator used in their animations), so you would do\n\t * something more like `options.setInterpolator(new\n\t * DecelerateInterpolator());` rather than mess around with reflection.\n\t */\n\tInterpolator interpolator = null;\n\ttry {\n\t\tinterpolator = (Interpolator)Class.forName(this.options.transitionInterpolator).newInstance();\n\t} catch (InstantiationException e) {\n\t\te.printStackTrace();\n\t} catch (IllegalAccessException e) {\n\t\te.printStackTrace();\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\toptions.setTransitionInterpolator(interpolator);\n\n\t/**\n\t * Clusterkraf calculates whether InputPoint objects should join a\n\t * cluster based on their pixel proximity. If you want to offer your app\n\t * on devices with different screen densities, you should identify a\n\t * Device Independent Pixel measurement and convert it to pixels based\n\t * on the device's screen density at runtime.\n\t */\n\toptions.setPixelDistanceToJoinCluster(getPixelDistanceToJoinCluster());\n\n\toptions.setZoomToBoundsAnimationDuration(this.options.zoomToBoundsAnimationDuration);\n\toptions.setShowInfoWindowAnimationDuration(this.options.showInfoWindowAnimationDuration);\n\toptions.setExpandBoundsFactor(this.options.expandBoundsFactor);\n\toptions.setSinglePointClickBehavior(this.options.singlePointClickBehavior);\n\toptions.setClusterClickBehavior(this.options.clusterClickBehavior);\n\toptions.setClusterInfoWindowClickBehavior(this.options.clusterInfoWindowClickBehavior);\n\n\t/**\n\t * Device Independent Pixel measurement should be converted to pixels\n\t * here too. In this case, we cheat a little by using a Drawable's\n\t * height. It's only cheating because we don't offer a variant for that\n\t * Drawable for every density (xxhdpi, tvdpi, others?).\n\t */\n\toptions.setZoomToBoundsPadding(getResources().getDrawable(R.drawable.ic_map_pin_cluster).getIntrinsicHeight());\n\n\toptions.setMarkerOptionsChooser(new ToastedMarkerOptionsChooser(this, inputPoints.get(0)));\n\toptions.setOnMarkerClickDownstreamListener(new ToastedOnMarkerClickDownstreamListener(this));\n\toptions.setProcessingListener(this);\n}", "path": "sample\\src\\com\\twotoasters\\clusterkraf\\sample\\SampleActivity.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see com.google.android.gms.maps.GoogleMap.InfoWindowAdapter\n *      getInfoWindow(com.google.android.gms.maps.model.Marker)\n */\n", "func_signal": "@Override\npublic View getInfoWindow(Marker marker)", "code": "{\n    View infoWindow = null;\n    Clusterkraf clusterkraf = clusterkrafRef.get();\n    if (clusterkraf != null) {\n        ClusterPoint clusterPoint = clusterkraf.currentClusterPointsByMarker.get(marker);\n        InfoWindowDownstreamAdapter infoWindowDownstreamAdapter = clusterkraf.options.getInfoWindowDownstreamAdapter();\n        if (infoWindowDownstreamAdapter != null) {\n            infoWindow = infoWindowDownstreamAdapter.getInfoWindow(marker, clusterPoint);\n        }\n    }\n    return infoWindow; // Google Map will handle it when null\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Construct a Clusterkraf instance to manage your map with customized\n * options and a list of points\n * \n * @param map\n *            The GoogleMap to be managed by Clusterkraf\n * @param options\n *            Customized options\n */\n", "func_signal": "public Clusterkraf(GoogleMap map, Options options, ArrayList<InputPoint> points)", "code": "{\n\tthis.mapRef = new WeakReference<GoogleMap>(map);\n\tthis.options = options;\n\tthis.innerCallbackListener = new InnerCallbackListener(this);\n\tthis.transitionsAnimation = new ClusterTransitionsAnimation(map, options, innerCallbackListener);\n\n\tif (points != null) {\n\t\tthis.points.addAll(points);\n\t}\n\n\tif (map != null) {\n\t\tmap.setOnCameraChangeListener(innerCallbackListener.clusteringOnCameraChangeListener);\n\t\tmap.setOnMarkerClickListener(innerCallbackListener);\n\t\tmap.setOnInfoWindowClickListener(innerCallbackListener);\n            map.setInfoWindowAdapter(innerCallbackListener);\n\t}\n\n\tshowAllClusters();\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * @see com.google.android.gms.maps.GoogleMap.InfoWindowAdapter\n *      getInfoContents(com.google.android.gms.maps.model.Marker)\n */\n", "func_signal": "@Override\npublic View getInfoContents(Marker marker)", "code": "{\n    View infoWindow = null;\n    Clusterkraf clusterkraf = clusterkrafRef.get();\n    if (clusterkraf != null) {\n        ClusterPoint clusterPoint = clusterkraf.currentClusterPointsByMarker.get(marker);\n        InfoWindowDownstreamAdapter infoWindowDownstreamAdapter = clusterkraf.options.getInfoWindowDownstreamAdapter();\n        if (infoWindowDownstreamAdapter != null) {\n            infoWindow = infoWindowDownstreamAdapter.getInfoContents(marker, clusterPoint);\n        }\n    }\n    return infoWindow; // Google Map will handle it when null\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Remove all Clusterkraf-managed markers from the map\n */\n", "func_signal": "public void clear()", "code": "{\n\t/**\n\t * cancel the background thread clustering task\n\t */\n\tif (clusteringTaskHost != null) {\n\t\tclusteringTaskHost.cancel();\n\t\tclusteringTaskHost = null;\n\t}\n\t/**\n\t * cancel the background thread transition building task\n\t */\n\tif (clusterTransitionsBuildingTaskHost != null) {\n\t\tclusterTransitionsBuildingTaskHost.cancel();\n\t\tclusterTransitionsBuildingTaskHost = null;\n\t}\n\n\t/**\n\t * we avoid GoogleMap.clear() so users can manage their own\n\t * non-clustered markers on the map.\n\t * \n\t * @see http://code.google.com/p/gmaps-api-issues/issues/detail?id=4703\n\t */\n\tif (currentMarkers != null) {\n\t\tfor (Marker marker : currentMarkers) {\n\t\t\tmarker.remove();\n\t\t}\n\t}\n\t\n\tcurrentClusters = null;\n\tcurrentClusterPointsByMarker = null;\n\tcurrentMarkers = null;\n\tpreviousClusters = null;\n\tpreviousMarkers = null;\n\t\n\tpoints.clear();\n}", "path": "library\\src\\com\\twotoasters\\clusterkraf\\Clusterkraf.java", "repo_name": "twotoasters/clusterkraf", "stars": 257, "license": "apache-2.0", "language": "java", "size": 3598}
{"docstring": "/**\n * Find cached attachments with the key is generated by {@code container}\n *\n * @param container\n * @return\n */\n", "func_signal": "public static List<Attachment> get(Resource container)", "code": "{\n    String cacheKey = cacheKey(container);\n    @SuppressWarnings(\"unchecked\")\n    List<Attachment> cachedData = (List<Attachment>)Cache.get(cacheKey);\n    if (cachedData != null) {\n        return cachedData;\n    } else {\n        return null;\n    }\n}", "path": "app\\utils\\AttachmentCache.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Create a comment from the given email.\n *\n * @param message\n * @param target\n * @throws MessagingException\n * @throws MailHandlerException\n * @throws IOException\n * @throws NoSuchAlgorithmException\n */\n", "func_signal": "@Transactional\npublic static Comment saveComment(IMAPMessage message, Resource target)\n        throws MessagingException, MailHandlerException, IOException, NoSuchAlgorithmException", "code": "{\n    User author = IMAPMessageUtil.extractSender(message);\n\n    if (!AccessControl.isProjectResourceCreatable(\n            author, target.getProject(), target.getType())) {\n        throw new PermissionDenied(cannotCreateMessage(author,\n                target.getProject(), target.getType()));\n    }\n\n    Content parsedMessage = extractContent(message);\n\n    Comment comment = makeNewComment(target, author, parsedMessage.body);\n\n    comment.save();\n\n    Map<String, Attachment> relatedAttachments = saveAttachments(\n            parsedMessage.attachments,\n            comment.asResource());\n\n    if (new ContentType(parsedMessage.type).match(MimeType.HTML)) {\n        comment.contents = postprocessForHTML(comment.contents, relatedAttachments);\n        comment.update();\n    }\n\n    new OriginalEmail(message.getMessageID(), comment.asResource()).save();\n\n    // Add the event\n    addEvent(NotificationEvent.forNewComment(comment, author),\n            message.getAllRecipients(), author);\n\n    return comment;\n}", "path": "app\\mailbox\\CreationViaEmail.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Detect the charset used for the given byte array.\n *\n * Return \"UTF-8\" if it fails.\n *\n * We use mozilla's UniversalDetector instead of Tika's CharsetDetector\n * which raises \"mark/reset not supported\" IOException for FileInputStream.\n *\n * @param bytes - a byte array to be checked\n * @return charset - the charset used\n * @throws IOException\n */\n", "func_signal": "public static String detectCharset(byte bytes[])", "code": "{\n    UniversalDetector detector = new UniversalDetector(null);\n    int offset = 0;\n\n    do {\n        int blockSize = Math.min(4096, bytes.length - offset);\n        detector.handleData(bytes, offset, blockSize);\n        offset += blockSize;\n    } while(offset < bytes.length);\n    detector.dataEnd();\n\n    return or(detector.getDetectedCharset(), \"UTF-8\");\n}", "path": "app\\utils\\FileUtil.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * multipart/related > text/plain > the others\n *\n * @param p\n * @param best\n * @param isHtmlPreferred\n * @return\n * @throws javax.mail.MessagingException\n */\n", "func_signal": "private static MimeBodyPart better(MimeBodyPart p, MimeBodyPart best, boolean isHtmlPreferred) throws\n        MessagingException", "code": "{\n    String[] preferences;\n    if (isHtmlPreferred) {\n        preferences = new String[]{MimeType.MULTIPART_RELATED, MimeType.HTML, MimeType.PLAIN_TEXT};\n    } else {\n        preferences = new String[]{MimeType.MULTIPART_RELATED, MimeType.PLAIN_TEXT, MimeType.HTML};\n    }\n\n    return getPoint(p, preferences) > getPoint(best, preferences) ? p : best;\n}", "path": "app\\mailbox\\CreationViaEmail.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * @see Comment#asResource()\n */\n", "func_signal": "@Override\npublic Resource asResource()", "code": "{\n    return new Resource() {\n        @Override\n        public String getId() {\n            return id.toString();\n        }\n\n        @Override\n        public Project getProject() {\n            return issue.project;\n        }\n\n        @Override\n        public ResourceType getType() {\n            return ResourceType.ISSUE_COMMENT;\n        }\n\n        @Override\n        public Long getAuthorId() {\n            return authorId;\n        }\n\n        @Override\n        public Resource getContainer() {\n            return issue.asResource();\n        }\n    };\n}", "path": "app\\models\\IssueComment.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * \uc870\uc9c1\uc758 \uc774\ub984\uc740 \uc0ac\uc6a9\uc790 \uc774\ub984\uacfc \ub3d9\uc77c\ud55c \ud328\ud134\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\n */\n", "func_signal": "@Test\npublic void validateName()", "code": "{\n    Organization org = new Organization();\n    org.name=\"foo\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'foo' should be accepted.\").isEqualTo(0);\n\n    org.name=\".foo\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'.foo' should NOT be accepted.\").isGreaterThan(0);\n\n    org.name=\"foo.bar\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'foo.bar' should be accepted.\").isEqualTo(0);\n\n    org.name=\"foo.\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'foo.' should NOT be accepted.\").isGreaterThan(0);\n\n    org.name=\"_foo\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'_foo' should NOT be accepted.\").isGreaterThan(0);\n\n    org.name=\"foo_bar\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'foo_bar' should be accepted.\").isEqualTo(0);\n\n    org.name=\"foo_\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'foo_' should NOT be accepted.\").isGreaterThan(0);\n\n    org.name=\"-foo\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'-foo' should be accepted.\").isEqualTo(0);\n\n    org.name=\"foo-\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'foo-' should be accepted.\").isEqualTo(0);\n\n    org.name=\"foo bar\";\n    assertThat(Validation.getValidator().validate(org).size()).describedAs(\"'foo bar' should NOT be accepted.\").isGreaterThan(0);\n}", "path": "test\\models\\OrganizationTest.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * @see controllers.ProjectApp#members(String, String)\n */\n", "func_signal": "@Transactional\npublic void cleanEnrolledUsers()", "code": "{\n    List<User> enrolledUsers = this.enrolledUsers;\n    List<User> acceptedUsers = new ArrayList<>();\n    List<ProjectUser> members = this.members();\n    for(ProjectUser projectUser : members) {\n        User user = projectUser.user;\n        if(enrolledUsers.contains(user)) {\n            acceptedUsers.add(user);\n        }\n    }\n    for(User user : acceptedUsers) {\n        user.cancelEnroll(this);\n        NotificationEvent.afterMemberRequest(this, user, RequestState.ACCEPT);\n    }\n}", "path": "app\\models\\Project.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * @return the readme file name or {@code null} if the file does not exist\n * @throws IOException Signals that an I/O exception has occurred.\n * @throws GitAPIException the git api exception\n * @throws SVNException the sVN exception\n * @throws ServletException the servlet exception\n */\n", "func_signal": "public String getReadmeFileName() throws IOException, SVNException, ServletException", "code": "{\n    String baseFileName = \"README.md\";\n\n    PlayRepository repo = RepositoryService.getRepository(this);\n\n    if (repo.isFile(baseFileName)) {\n        return baseFileName;\n    }\n\n    if (repo.isFile(baseFileName.toLowerCase())) {\n        return baseFileName.toLowerCase();\n    }\n\n    if(repo instanceof SVNRepository) {\n        baseFileName = \"/trunk/\" + baseFileName;\n        if(repo.isFile(baseFileName)) {\n            return baseFileName;\n        }\n\n        baseFileName = baseFileName.toLowerCase();\n        if(repo.isFile(baseFileName)) {\n            return baseFileName;\n        }\n    }\n\n    return null;\n}", "path": "app\\models\\Project.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Returns the result after querying with the conditions to the model.\n *\n * It queries to the the model, {@link models.support.ReviewSearchCondition}, to search, sort and filter.\n *\n * @param project\n * @return The result of the query.\n */\n", "func_signal": "public ExpressionList<CommentThread> asExpressionList(Project project)", "code": "{\n    ExpressionList<CommentThread> el = CommentThread.find.where().eq(\"project.id\", project.id);\n\n    if (authorId != null) {\n        el.eq(\"author.id\", authorId);\n    }\n\n    if (participantId != null) {\n        List<Object> ids = ReviewComment.find.where().eq(\"author.id\", participantId).findIds();\n        el.in(\"reviewComments.id\", ids);\n    }\n\n    CommentThread.ThreadState threadState = CommentThread.ThreadState.valueOf(state.toUpperCase());\n    el.eq(\"state\", threadState);\n\n    Direction direction = Direction.valueOf(orderDir.toUpperCase());\n    if (StringUtils.isNotBlank(orderBy)) {\n        el.orderBy(orderBy + \" \" + direction.name());\n    }\n\n    if (StringUtils.isNotBlank(filter)) {\n        Junction<CommentThread> junction = el.disjunction();\n        junction.icontains(\"reviewComments.contents\", filter)\n                .icontains(\"commitId\", filter)\n                .icontains(\"path\", filter)\n                .endJunction();\n    }\n\n    return el;\n}", "path": "app\\models\\support\\ReviewSearchCondition.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * @see {@link User#SITE_MANAGER_ID}\n * @see {@link RoleType#SITEMANAGER}\n */\n", "func_signal": "public static Long create(Project newProject)", "code": "{\n    newProject.siteurl = \"http://localhost:9000/\" + newProject.name;\n    newProject.createdDate = new Date();\n    newProject.save();\n    ProjectUser.assignRole(User.SITE_MANAGER_ID, newProject.id,\n            RoleType.SITEMANAGER);\n    return newProject.id;\n}", "path": "app\\models\\Project.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * @see #newProjectName(String, String)\n */\n", "func_signal": "public static Project copy(Project project, String owner)", "code": "{\n    Project copyProject = new Project();\n    copyProject.name = newProjectName(owner, project.name);\n    copyProject.overview = project.overview;\n    copyProject.vcs = project.vcs;\n    copyProject.owner = owner;\n    copyProject.projectScope = project.projectScope;\n    copyProject.menuSetting = new ProjectMenuSetting(project.menuSetting);\n    copyProject.menuSetting.project = copyProject;\n    copyProject.menuSetting.save();\n\n    return copyProject;\n}", "path": "app\\models\\Project.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/*\n * FileDiff.fileModeChanged \ud14c\uc2a4\ud2b8\ub97c \uc704\ud55c \ucd08\uae30\ud654\n */\n", "func_signal": "private void initFileMode(FileMode oldMode, FileMode newMode)", "code": "{\n    diff.oldMode = oldMode;\n    diff.newMode = newMode;\n}", "path": "test\\playRepository\\FileDiffTest.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Find cached attachments with the key is generated by\n * combining {@code containerType} and {@code containerId}.\n *\n * @param containerType\n * @param containerId\n * @return found cached data or null if there is no cached data.\n */\n", "func_signal": "public static List<Attachment> get(ResourceType containerType, String containerId)", "code": "{\n    String cacheKey = containerType.name() + containerId;\n    @SuppressWarnings(\"unchecked\")\n    List<Attachment> cachedData = (List<Attachment>)Cache.get(cacheKey);\n    if (cachedData != null) {\n        return cachedData;\n    } else {\n        return null;\n    }\n}", "path": "app\\utils\\AttachmentCache.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * \ub9c8\uc9c0\ub9c9 \uc774\uc288\ubc88\ud638\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n *\n * \uc774\uc288 \ucd94\uac00\uc2dc \uc0ac\uc6a9\ud55c\ub2e4.\n *\n * @return {@code lastIssueNumber}\n */\n", "func_signal": "public static Long increaseLastIssueNumber(Long projectId)", "code": "{\n    Project project = find.byId(projectId);\n    project.setLastIssueNumber(project.getLastIssueNumber() + 1);\n    project.update();\n\n    return project.lastIssueNumber;\n}", "path": "app\\models\\Project.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Does postprocessing for HTML document.\n *\n * 1. Replaces cid with attachments.\n * 2. Removes newlines between HTML tags which will make the result rendered\n *    by markdown ugly.\n *\n * @param contents\n * @param relatedAttachments\n * @return\n */\n", "func_signal": "private static String postprocessForHTML(\n        String contents, Map<String, Attachment> relatedAttachments)", "code": "{\n    return new HtmlCompressor().compress(\n            replaceCidWithAttachments(contents, relatedAttachments));\n}", "path": "app\\mailbox\\CreationViaEmail.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Creates application-logger.xml by default if necessary\n *\n * Note: This method creates application-logger.xml even if logger.xml exists.\n */\n", "func_signal": "private void initLoggerConfig()", "code": "{\n    try {\n        if (!loggerConfigFile.isLocationSpecified() && !loggerConfigFile.getPath().toFile().exists()) {\n            try {\n                loggerConfigFile.createByDefault();\n            } catch (Exception e) {\n                play.Logger.error(\"Failed to initialize logger configuration\", e);\n            }\n        }\n    } catch (URISyntaxException e) {\n        play.Logger.error(\"Failed to check whether the logger config file exists\", e);\n    }\n}", "path": "app\\Global.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * \uc870\uc9c1\uc744 \uc0dd\uc131\ud558\uba74 \uc0dd\uc131\ud55c \uc0ac\uc6a9\uc790\uac00 \uc870\uc9c1\uc758 org_admin \uad8c\ud55c\uc744 \uac00\uc9c4\ub2e4.\n */\n", "func_signal": "@Test\npublic void create()", "code": "{\n    // Given\n    User doortts = User.findByLoginId(\"doortts\");\n    assertThat(doortts).isNotNull();\n\n    Organization weblabs = new Organization();\n    weblabs.name = \"weblabs\";\n    weblabs.descr = \"weblab < labs\";\n    weblabs.save();\n\n    // When\n    doortts.createOrganization(weblabs);\n\n    // Then\n    assertThat(Organization.findByName(\"weblabs\")).isNotNull();\n    List<OrganizationUser> ous = OrganizationUser.findAdminsOf(weblabs);\n    assertThat(ous.size()).isEqualTo(1);\n    assertThat(ous.get(0).user).isEqualTo(doortts);\n}", "path": "test\\models\\OrganizationTest.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Adds {@code event}.\n *\n * If the last event is not older than {@link #DRAFT_TIME_IN_MILLIS}\n * miliseconds and the event is the same kind of event as the given one,\n * merge or delete both of the events if necessary to reduce hassle\n * notifications.\n *\n * Examples:\n *\n * - If an assignee was changed from A to B, then A to C, the two events\n *   are merged into the event of which assignee was changed from A to C.\n * - If an assignee was changed from A to B, then B to A, the two events\n *   will be deleted.\n *\n * Notes: This method originates from\n * {@link NotificationEvent#add(NotificationEvent)}\n *\n * @param event\n */\n", "func_signal": "public static void add(IssueEvent event)", "code": "{\n    Date draftDate = DateTime.now().minusMillis(DRAFT_TIME_IN_MILLIS).toDate();\n\n    IssueEvent lastEvent = IssueEvent.find.where()\n            .eq(\"issue.id\", event.issue.id)\n            .gt(\"created\", draftDate)\n            .orderBy(\"id desc\").setMaxRows(1).findUnique();\n\n    if (lastEvent != null) {\n        if (lastEvent.eventType == event.eventType &&\n                StringUtils.equals(event.senderLoginId, lastEvent.senderLoginId)) {\n            // A -> B, B -> C ==> A -> C\n            event.oldValue = lastEvent.oldValue;\n            lastEvent.delete();\n\n            // A -> B, B -> A ==> remove all of them\n            if (StringUtils.equals(event.oldValue, event.newValue)) {\n                // No need to add this event because the event just cancels the last event\n                // which has just been deleted.\n                return;\n            }\n        }\n    }\n\n    event.save();\n}", "path": "app\\models\\IssueEvent.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Detect the charset used for the given stream.\n *\n * Return \"UTF-8\" if it fails.\n *\n * We use mozilla's UniversalDetector instead of Tika's CharsetDetector\n * which raises \"mark/reset not supported\" IOException for FileInputStream.\n *\n * @param is - an input stream to be checked\n * @return charset - the charset used\n * @throws IOException\n */\n", "func_signal": "public static String detectCharset(InputStream is) throws IOException", "code": "{\n    UniversalDetector detector = new UniversalDetector(null);\n    byte[] buf = new byte[4096];\n    int nRead;\n\n    while ((nRead = is.read(buf)) > 0 && !detector.isDone()) {\n        detector.handleData(buf, 0, nRead);\n    }\n    detector.dataEnd();\n\n    return or(detector.getDetectedCharset(), \"UTF-8\");\n}", "path": "app\\utils\\FileUtil.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Detects media type of the given resource, by using Apache Tika.\n *\n * This method does following additional tasks besides Tika:\n * 1. Adds a charset parameter for text resources.\n * 2. Fixes Tika's misjudge of media type for ogg videos\n *\n * @param is    the input stream to read the resource\n * @param name  the filename of the resource\n * @return the detected media type which optionally includes a charset parameter\n *         e.g. \"text/plain; charset=utf-8\"\n * @throws IOException\n */\n", "func_signal": "public static MediaType detectMediaType(InputStream is, String name)\n    throws IOException", "code": "{\n    Metadata meta = new Metadata();\n    meta.add(Metadata.RESOURCE_NAME_KEY, name);\n    MediaType mediaType = new Tika().getDetector().detect(\n            new BufferedInputStream(is), meta);\n\n    if (mediaType.getType().toLowerCase().equals(\"text\")) {\n        return new MediaType(mediaType, Charset.forName(FileUtil.detectCharset(is)));\n    } else if (mediaType.equals(MediaType.audio(\"ogg\"))\n            && FilenameUtils.getExtension(name).toLowerCase().equals(\"ogv\")) {\n        // This fixes Tika's misjudge of media type for ogg videos.\n        return new MediaType(\"video\", \"ogg\");\n    }\n\n    return mediaType;\n}", "path": "app\\utils\\FileUtil.java", "repo_name": "naver/yobi", "stars": 379, "license": "apache-2.0", "language": "java", "size": 89327}
{"docstring": "/**\n * Add multiple tracks from one album to the playlist\n * \n * @param album\n *            <code>Album</code> instance with loaded tracks\n */\n", "func_signal": "public void addTracks(Album album)", "code": "{\n\tfor (Track track : album.getTracks()) {\n\t\taddTrack(track, album);\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Change order playback list when it is needed\n * \n * @param force\n */\n", "func_signal": "private void calculateOrder(boolean force)", "code": "{\n\tif (mPlayOrder.isEmpty() || force) {\n\t\tint oldSelected = 0;\n\n\t\tif (!mPlayOrder.isEmpty()) {\n\t\t\toldSelected = mPlayOrder.get(selected);\n\t\t\tmPlayOrder.clear();\n\t\t}\n\n\t\tfor (int i = 0; i < size(); i++) {\n\t\t\tmPlayOrder.add(i, i);\n\t\t}\n\n\t\tif (mPlaylistPlaybackMode == null) {\n\t\t\tmPlaylistPlaybackMode = PlaylistPlaybackMode.NORMAL;\n\t\t}\n\n\t\tif (Log.isLoggable(TAG, Log.DEBUG)) {\n\t\t\tLog.d(TAG, \"Playlist has been maped in \"\n\t\t\t\t\t+ mPlaylistPlaybackMode + \" mode.\");\n\t\t}\n\n\t\tswitch (mPlaylistPlaybackMode) {\n\t\tcase NORMAL:\n\t\tcase REPEAT:\n\t\t\tselected = oldSelected;\n\t\t\tbreak;\n\t\tcase SHUFFLE:\n\t\tcase SHUFFLE_AND_REPEAT:\n\t\t\tif (Log.isLoggable(TAG, Log.DEBUG)) {\n\t\t\t\tLog.d(TAG, \"Before shuffle: \"\n\t\t\t\t\t\t+ Arrays.toString(mPlayOrder.toArray()));\n\t\t\t}\n\t\t\tCollections.shuffle(mPlayOrder);\n\t\t\tselected = mPlayOrder.indexOf(selected);\n\t\t\tif (Log.isLoggable(TAG, Log.DEBUG)) {\n\t\t\t\tLog.d(TAG, \"After shuffle: \"\n\t\t\t\t\t\t+ Arrays.toString(mPlayOrder.toArray()));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Adds PlaylistEntry object to the playlist\n * \n * @param playlistEntry\n */\n", "func_signal": "public void addPlaylistEntry(PlaylistEntry playlistEntry)", "code": "{\n\tif (playlistEntry != null) {\n\t\tplaylist.add(playlistEntry);\n\t\tmPlayOrder.add(size() - 1);\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Select song with a given index\n * \n * @param index\n */\n", "func_signal": "public void select(int index)", "code": "{\n\tif (!isEmpty()) {\n\t\tif (index >= 0 && index < playlist.size())\n\t\t\tselected = mPlayOrder.indexOf(index);\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Converts String containing XML code to Document\n * \n * @param xmlString\n * @return <code>Document</code> interface\n */\n", "func_signal": "public static Document stringToDocument(String xmlString)", "code": "{\n\tif(xmlString == null)\n\t\treturn null;\n\t\n\tDocumentBuilder documentBuilder = getDocumentBuilder();\n\tInputSource inputSource = new InputSource(new StringReader(xmlString));\n\ttry {\n\t\treturn documentBuilder.parse(inputSource);\n\t} catch (SAXException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\util\\XMLUtil.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Remove a track with a given index from the playlist\n * \n * @param position\n */\n", "func_signal": "public void remove(int position)", "code": "{\n\tif (playlist != null && position < playlist.size() && position >= 0) {\n\n\t\tif (selected >= position) {\n\t\t\tselected--;\n\t\t}\n\n\t\tplaylist.remove(position);\n\t\tmPlayOrder.remove(position);\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Fetches a new playlist if its reference address differs from the current one  \n */\n", "func_signal": "private void updatePlaylist()", "code": "{\n\tif(mPlayerEngine.getPlaylist() != JamendoApplication.getInstance().fetchPlaylist()){\n\t\tmPlayerEngine.openPlaylist(JamendoApplication.getInstance().fetchPlaylist());\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\service\\PlayerService.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Return index of the currently selected song\n * \n * @return int value (-1 if the playlist is empty)\n */\n", "func_signal": "public int getSelectedIndex()", "code": "{\n\tif (isEmpty()) {\n\t\tselected = -1;\n\t}\n\tif (selected == -1 && !isEmpty()) {\n\t\tselected = 0;\n\t}\n\treturn selected;\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * DocumentBuilderFactory instance (lazy initialization)\n * \n * @return\n */\n", "func_signal": "private static DocumentBuilderFactory getDocumentBuilderFactory()", "code": "{\n\tif(documentBuilderFactory == null){\n\t\tdocumentBuilderFactory = DocumentBuilderFactory.newInstance();\n\t}\n\treturn documentBuilderFactory;\n}", "path": "src\\com\\teleca\\jamendo\\api\\util\\XMLUtil.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Add single track to the playlist\n * \n * @param track\n *            <code>Track</code> instance\n * @param album\n *            <code>Album</code> instance\n */\n", "func_signal": "public void addTrack(Track track, Album album)", "code": "{\n\tPlaylistEntry playlistEntry = new PlaylistEntry();\n\tplaylistEntry.setAlbum(album);\n\tplaylistEntry.setTrack(track);\n\n\tplaylist.add(playlistEntry);\n\tmPlayOrder.add(size() - 1);\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * DocumentBuilder instance\n * \n * @return\n */\n", "func_signal": "private static DocumentBuilder getDocumentBuilder()", "code": "{\n\ttry {\n\t\treturn getDocumentBuilderFactory().newDocumentBuilder();\n\t} catch (ParserConfigurationException e) {\n\t\treturn null;\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\util\\XMLUtil.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Set playlist playback mode\n * \n * @param aPlaylistPlaybackMode\n */\n", "func_signal": "public void setPlaylistPlaybackMode(\n\t\tPlaylistPlaybackMode aPlaylistPlaybackMode)", "code": "{\n\tif (Log.isLoggable(TAG, Log.DEBUG)) {\n\t\tLog.d(TAG, \"(Set mode) selected = \" + selected);\n\t\tLog.d(TAG, \"Plyback mode set on: \" + aPlaylistPlaybackMode);\n\t}\n\tboolean force = false;\n\tswitch (aPlaylistPlaybackMode) {\n\tcase NORMAL:\n\tcase REPEAT:\n\t\tif (mPlaylistPlaybackMode == PlaylistPlaybackMode.SHUFFLE\n\t\t\t\t|| mPlaylistPlaybackMode == PlaylistPlaybackMode.SHUFFLE_AND_REPEAT) {\n\t\t\tforce = true;\n\t\t}\n\t\tbreak;\n\tcase SHUFFLE:\n\tcase SHUFFLE_AND_REPEAT:\n\t\tif (mPlaylistPlaybackMode == PlaylistPlaybackMode.NORMAL\n\t\t\t\t|| mPlaylistPlaybackMode == PlaylistPlaybackMode.REPEAT) {\n\t\t\tforce = true;\n\t\t}\n\t\tbreak;\n\t}\n\tmPlaylistPlaybackMode = aPlaylistPlaybackMode;\n\tcalculateOrder(force);\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Sharable code between constructors\n */\n", "func_signal": "private void init(final Activity context)", "code": "{\n\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\tsetContentView(R.layout.about);\n\n\t\n\tString topText = \"v \"+JamendoApplication.getInstance().getVersion() + \", \" + context.getString(R.string.about_note);\n\t\n\tmVersionTextView = (TextView)findViewById(R.id.VersionText);\n\tmVersionTextView.setText(topText);\n\n\tmTermsButton = (Button)findViewById(R.id.TermsButton);\n\tmTermsButton.setOnClickListener(new View.OnClickListener(){\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tIntent myIntent = new Intent(Intent.ACTION_VIEW,\n\t\t\t\t\tUri.parse(\"http://www.jamendo.com/en/cgu_user\"));\n\t\t\tcontext.startActivity(myIntent); \t\t\t\t\n\t\t}\n\n\t});\n\t\n\tmCompanyViewFlipper = (ViewFlipper)findViewById(R.id.CompanyViewFlipper);\n\tmCompanyButton = (Button)findViewById(R.id.AboutCompanyButton);\n\tmCompanyButton.setOnClickListener(new View.OnClickListener(){\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tint currentCompany = mCompanyViewFlipper.getDisplayedChild();\n\t\t\tif(currentCompany == 0 ){\n\t\t\t\tmCompanyButton.setText(R.string.about_jamendo);\n\t\t\t\tmCompanyViewFlipper.setDisplayedChild(1); // display Teleca info\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmCompanyButton.setText(R.string.about_teleca);\n\t\t\t\tmCompanyViewFlipper.setDisplayedChild(0); // display Jamendo info\n\t\t\t}\n\t\t}\n\n\t});\n\t\n\tmCancelButton = (Button)findViewById(R.id.CancelButton);\n\tmCancelButton.setOnClickListener(new View.OnClickListener(){\n\n\t\t@Override\n\t\tpublic void onClick(View arg0) {\n\t\t\tAboutDialog.this.dismiss();\n\t\t}\n\n\t});\n}", "path": "src\\com\\teleca\\jamendo\\dialog\\AboutDialog.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Selects next song from the playlist\n */\n", "func_signal": "public void selectNext()", "code": "{\n\tif (!isEmpty()) {\n\t\tselected++;\n\t\tselected %= playlist.size();\n\t\tif (Log.isLoggable(TAG, Log.DEBUG)) {\n\t\t\tLog.d(\"TAG\", \"Current (next) selected = \" + selected);\n\t\t}\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Return currently selected song\n * \n * @return <code>PlaylistEntry</code> instance\n */\n", "func_signal": "public PlaylistEntry getSelectedTrack()", "code": "{\n\tPlaylistEntry playlistEntry = null;\n\n\tint index = getSelectedIndex();\n\tif (index == -1) {\n\t\treturn null;\n\t}\n\tindex = mPlayOrder.get(index);\n\tif (index == -1) {\n\t\treturn null;\n\t}\n\tplaylistEntry = playlist.get(index);\t\t\n\n\treturn playlistEntry;\n\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Send changes to selected scrobbling application\n */\n", "func_signal": "private void scrobblerMetaChanged()", "code": "{\n\tPlaylistEntry entry = mPlayerEngine.getPlaylist().getSelectedTrack();\n\t\n\tif (entry != null) {\n\t\tString scrobblerApp = PreferenceManager.getDefaultSharedPreferences(PlayerService.this).getString(\"scrobbler_app\", \"\");\n\t\tassert(scrobblerApp.length() > 0);\n\t\t\n\t\tif (Log.isLoggable(JamendoApplication.TAG, Log.INFO)) {\n\t\t\tLog.i(JamendoApplication.TAG, \"Scrobbling track \" + entry.getTrack().getName() + \" via \" + scrobblerApp);\n\t\t}\n\t\t\n\t\tif (scrobblerApp.equalsIgnoreCase(\"lastfm\")) {\n\t\t\tIntent i = new Intent(LASTFM_INTENT);\n\t\t\ti.putExtra(\"artist\", entry.getAlbum().getArtistName());\n\t\t\ti.putExtra(\"album\", entry.getAlbum().getName());\n\t\t\ti.putExtra(\"track\", entry.getTrack().getName());\n\t\t\ti.putExtra(\"duration\", entry.getTrack().getDuration()*1000); // duration in milliseconds\n\t\t\tsendBroadcast(i);\n\t\t} else if (scrobblerApp.equalsIgnoreCase(\"simplefm\")) {\n\t\t\tIntent i = new Intent(SIMPLEFM_INTENT);\n\t\t\ti.putExtra(\"app-name\", getResources().getString(R.string.app_name));\n\t\t\ti.putExtra(\"app-package\", \"com.teleca.jamendo\");\n\t\t\ti.putExtra(\"state\", 0);\t// state 0 = START - track has started playing\n\t\t\ti.putExtra(\"artist\", entry.getAlbum().getArtistName());\n\t\t\ti.putExtra(\"track\", entry.getTrack().getName());\n\t\t\ti.putExtra(\"duration\", entry.getTrack().getDuration()); // duration in seconds\n\t\t\ti.putExtra(\"album\", entry.getAlbum().getName());\n\t\t\ti.putExtra(\"track-no\", entry.getTrack().getNumAlbum());\n\t\t\tsendBroadcast(i);\n\t\t} else {\n\t\t\t// somehow the scrobbling app is not selected properly\n\t\t}\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\service\\PlayerService.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Selects previous song from the playlist\n */\n", "func_signal": "public void selectPrev()", "code": "{\n\tif (!isEmpty()) {\n\t\tselected--;\n\t\tif (selected < 0)\n\t\t\tselected = playlist.size() - 1;\n\t}\n\tif (Log.isLoggable(TAG, Log.DEBUG)) {\n\t\tLog.d(\"TAG\", \"Current (prev) selected = \" + selected);\n\t}\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Sets artist associated with the bar\n * \n * @param artist\n */\n", "func_signal": "public void setArtist(Artist artist)", "code": "{\n\tmArtistTextView.setText(artist.getName());\n\tmAlbumTextView.setText(\"\");\n\tmCoverImageView.setDefaultImage(R.drawable.no_avatar);\n\tmCoverImageView.setImageUrl(artist.getImage());\n}", "path": "src\\com\\teleca\\jamendo\\widget\\ArtistBar.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Inform weather it is last track on playlist\n * \n * @return\n */\n", "func_signal": "public boolean isLastTrackOnList()", "code": "{\n\tif (selected == size() - 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Give all entrys in playlist\n * \n * @return\n */\n", "func_signal": "public PlaylistEntry[] getAllTracks()", "code": "{\n\tPlaylistEntry[] out = new PlaylistEntry[playlist.size()];\n\tplaylist.toArray(out);\n\treturn out;\n}", "path": "src\\com\\teleca\\jamendo\\api\\Playlist.java", "repo_name": "telecapoland/jamendo-android", "stars": 424, "license": "apache-2.0", "language": "java", "size": 3551}
{"docstring": "/**\n * Starts or resumes playback. If playback had previously been paused,\n * playback will continue from where it was paused. If playback had been\n * stopped, or never started before, playback will start at the beginning.\n *\n * @throws IllegalStateException if it is called in an invalid state\n */\n", "func_signal": "public void start() throws IllegalStateException", "code": "{\n  stayAwake(true);\n  if (mInBuffering) {\n      //Log.i(\"MiuiVideo: now is in buffering, and will start after buffering\");\n      mNeedResume = true;\n  } else {\n      //Log.i(\"MiuiVideo: start player\");\n      _start();\n  }\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Resets the MediaPlayer to its uninitialized state. After calling this\n * method, you will have to initialize it again by setting the data source and\n * calling prepare().\n */\n", "func_signal": "public void reset()", "code": "{\n  stayAwake(false);\n  _reset();\n  if (mEventHandler != null)\n      mEventHandler.removeCallbacksAndMessages(null);\n  closeFD();\n  mInBuffering = false;\n  mNeedResume = false;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Sets the SurfaceHolder to use for displaying the video portion of the\n * media. This call is optional. Not calling it when playing back a video will\n * result in only the audio track being played.\n *\n * @param sh the SurfaceHolder to use for video display\n */\n", "func_signal": "public void setDisplay(SurfaceHolder sh)", "code": "{\n  if (sh == null) {\n    releaseDisplay();\n  } else {\n    mSurfaceHolder = sh;\n    mSurface = sh.getSurface();\n    _setVideoSurface(mSurface);\n    updateSurfaceScreenOn();\n  }\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * \n * Called when the activity is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle icicle)", "code": "{\n  super.onCreate(icicle);\n\tVitamio.isInitialized(getApplicationContext());\n  setContentView(R.layout.mediaplayer_3);\n  mTextureView = (TextureView) findViewById(R.id.surface);\n  mTextureView.setSurfaceTextureListener(this);\n\n}", "path": "vitamio-sample\\src\\io\\vov\\vitamio\\demo\\MediaPlayerDemo_setSurface.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Pauses playback. Call start() to resume.\n *\n * @throws IllegalStateException if the internal player engine has not been initialized.\n */\n", "func_signal": "public void pause() throws IllegalStateException", "code": "{\n  stayAwake(false);\n  mNeedResume = false;\n  //Log.i(\"MiuiVideo: pause player\");\n  _pause();\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Releases resources associated with this MediaPlayer object. It is\n * considered good practice to call this method when you're done using the\n * MediaPlayer.\n */\n", "func_signal": "public void release()", "code": "{\n  stayAwake(false);\n  updateSurfaceScreenOn();\n  mOnPreparedListener = null;\n  mOnBufferingUpdateListener = null;\n  mOnCompletionListener = null;\n  mOnSeekCompleteListener = null;\n  mOnErrorListener = null;\n  mOnInfoListener = null;\n  mOnVideoSizeChangedListener = null;\n  mOnCachingUpdateListener = null;\n  mOnHWRenderFailedListener = null;\n  if (mEventHandler != null)\n      mEventHandler.release();\n  //mEventHandler = null;\n  _release();\n  closeFD();\n  mInBuffering = false;\n  mNeedResume = false;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Show the controller on screen. It will go away automatically after\n * 'timeout' milliseconds of inactivity.\n *\n * @param timeout The timeout in milliseconds. Use 0 to show the controller\n *                until hide() is called.\n */\n", "func_signal": "public void show(int timeout)", "code": "{\n  if (!mShowing && mAnchor != null && mAnchor.getWindowToken() != null) {\n    if (mPauseButton != null)\n      mPauseButton.requestFocus();\n\n    if (mFromXml) {\n      setVisibility(View.VISIBLE);\n    } else {\n      int[] location = new int[2];\n\n      mAnchor.getLocationOnScreen(location);\n      Rect anchorRect = new Rect(location[0], location[1], location[0] + mAnchor.getWidth(), location[1] + mAnchor.getHeight());\n\n      mWindow.setAnimationStyle(mAnimStyle);\n      setWindowLayoutType();\n      mWindow.showAtLocation(mAnchor, Gravity.NO_GRAVITY, anchorRect.left, anchorRect.bottom);\n    }\n    mShowing = true;\n    if (mShownListener != null)\n      mShownListener.onShown();\n  }\n  updatePausePlay();\n  mHandler.sendEmptyMessage(SHOW_PROGRESS);\n\n  if (timeout != 0) {\n    mHandler.removeMessages(FADE_OUT);\n    mHandler.sendMessageDelayed(mHandler.obtainMessage(FADE_OUT), timeout);\n  }\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\widget\\MediaController.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Gets the media metadata.\n *\n * @return The metadata, possibly empty. null if an error occurred.\n */\n", "func_signal": "public Metadata getMetadata()", "code": "{\n  if (mMeta == null) {\n    mMeta = new Metadata();\n    Map<byte[], byte[]> meta = new HashMap<byte[], byte[]>();\n\n    if (!native_getMetadata(meta)) {\n      return null;\n    }\n\n    if (!mMeta.parse(meta, getMetaEncoding())) {\n      return null;\n    }\n  }\n  return mMeta;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * @param mediaTrackType\n * @param trackInfo\n * @return {@link TrackInfo#getTrackInfoArray()}\n */\n", "func_signal": "public SparseArray<MediaFormat> findTrackFromTrackInfo(int mediaTrackType, TrackInfo[] trackInfo)", "code": "{\n  for (int i = 0; i < trackInfo.length; i++) {\n    if (trackInfo[i].getTrackType() == mediaTrackType) {\n      return trackInfo[i].getTrackInfoArray();\n    }\n  }\n  return null;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Set the content of the file_name TextView\n *\n * @param name\n */\n", "func_signal": "public void setFileName(String name)", "code": "{\n  mTitle = name;\n  if (mFileName != null)\n    mFileName.setText(mTitle);\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\widget\\MediaController.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Set the view that acts as the anchor for the control view. This can for\n * example be a VideoView, or your Activity's main view.\n *\n * @param view The view to which to anchor the controller when it is visible.\n */\n", "func_signal": "public void setAnchorView(View view)", "code": "{\n  mAnchor = view;\n  if (!mFromXml) {\n    removeAllViews();\n    mRoot = makeControllerView();\n    mWindow.setContentView(mRoot);\n    mWindow.setWidth(LayoutParams.MATCH_PARENT);\n    mWindow.setHeight(LayoutParams.WRAP_CONTENT);\n  }\n  initControllerView(mRoot);\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\widget\\MediaController.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Gets real resolution via the new getRealMetrics API.\n * */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\nprivate static Pair<Integer,Integer> getRealResolution(Context ctx)", "code": "{\n  WindowManager wm = (WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE);\n  Display display = wm.getDefaultDisplay();\n  DisplayMetrics metrics = new DisplayMetrics();\n  display.getRealMetrics(metrics);\n  return new Pair<Integer, Integer>(metrics.widthPixels, metrics.heightPixels);\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\utils\\ScreenResolution.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Calling this result in only the audio track being played.\n */\n", "func_signal": "public void releaseDisplay()", "code": "{\n  _releaseVideoSurface();\n  mSurfaceHolder = null;\n  mSurface = null;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Gets the resolution,\n * @return a pair to return the width and height\n * */\n", "func_signal": "public static Pair<Integer,Integer> getResolution(Context ctx)", "code": "{\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n    return getRealResolution(ctx);\n  }\n  else {\n    return getRealResolutionOnOldDevice(ctx);\n  }\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\utils\\ScreenResolution.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * The same as {@link #pause()}\n *\n * @throws IllegalStateException if the internal player engine has not been initialized.\n */\n", "func_signal": "public void stop() throws IllegalStateException", "code": "{\n  stayAwake(false);\n  _stop();\n  mInBuffering = false;\n  mNeedResume = false;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Gets resolution on old devices.\n * Tries the reflection to get the real resolution first.\n * Fall back to getDisplayMetrics if the above method failed.\n * */\n", "func_signal": "private static Pair<Integer, Integer> getRealResolutionOnOldDevice(Context ctx)", "code": "{\n  try{\n    WindowManager wm = (WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE);\n    Display display = wm.getDefaultDisplay();\n    Method mGetRawWidth = Display.class.getMethod(\"getRawWidth\");\n    Method mGetRawHeight = Display.class.getMethod(\"getRawHeight\");\n    Integer realWidth = (Integer) mGetRawWidth.invoke(display);\n    Integer realHeight = (Integer) mGetRawHeight.invoke(display);\n    return new Pair<Integer, Integer>(realWidth, realHeight);\n  }\n  catch (Exception e) {\n    DisplayMetrics disp = ctx.getResources().getDisplayMetrics();\n    return new Pair<Integer, Integer>(disp.widthPixels, disp.heightPixels);\n  }\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\utils\\ScreenResolution.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Sets the TextureView transform to preserve the aspect ratio of the video.\n */\n", "func_signal": "private void adjustAspectRatio(int videoWidth, int videoHeight)", "code": "{\n  int viewWidth = mTextureView.getWidth();\n  int viewHeight = mTextureView.getHeight();\n  double aspectRatio = (double) videoHeight / videoWidth;\n\n  int newWidth, newHeight;\n  if (viewHeight > (int) (viewWidth * aspectRatio)) {\n    // limited by narrow width; restrict height\n    newWidth = viewWidth;\n    newHeight = (int) (viewWidth * aspectRatio);\n  } else {\n    // limited by short height; restrict width\n    newWidth = (int) (viewHeight / aspectRatio);\n    newHeight = viewHeight;\n  }\n  int xoff = (viewWidth - newWidth) / 2;\n  int yoff = (viewHeight - newHeight) / 2;\n  Log.v(TAG, \"video=\" + videoWidth + \"x\" + videoHeight + \" view=\" + viewWidth + \"x\" + viewHeight\n      + \" newView=\" + newWidth + \"x\" + newHeight + \" off=\" + xoff + \",\" + yoff);\n\n  Matrix txform = new Matrix();\n  mTextureView.getTransform(txform);\n  txform.setScale((float) newWidth / viewWidth, (float) newHeight / viewHeight);\n  //txform.postRotate(10);          // just for fun\n  txform.postTranslate(xoff, yoff);\n  mTextureView.setTransform(txform);\n}", "path": "vitamio-sample\\src\\io\\vov\\vitamio\\demo\\MediaPlayerDemo_setSurface.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Default constructor. The same as Android's MediaPlayer().\n * <p>\n * When done with the MediaPlayer, you should call {@link #release()}, to free\n * the resources. If not released, too many MediaPlayer instances may result\n * in an exception.\n * </p>\n *\n * @param preferHWDecoder MediaPlayer will try to use hardware accelerated decoder if true\n */\n", "func_signal": "private static  boolean load_omxnative_lib(String path, String name)", "code": "{\n\t  boolean load=false;\n\t  \n\t  File file=new File(Vitamio.getBrowserLibraryPath() + \"/\" +  name );    \n\t  if(file.exists())    \n\t  {   \n\t\t  load=loadOMX_native(Vitamio.getBrowserLibraryPath()+ \"/\" + name); \n\t\t  return load;\n\t  } \t  \n\t  \n\t  if(path==\"\"){\n\t\t  load=loadOMX_native(name);\n\t  }\n\t  else{\n\t\t  load=loadOMX_native(path + name);\n\t  }\n\t  return load;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Sets the data source (file-path or http/rtsp URL) to use.\n *\n * @param path the path of the file, or the http/rtsp URL of the stream you want to play\n * @param headers the headers associated with the http request for the stream you want to play\n * @throws IllegalStateException if it is called in an invalid state\n */\n", "func_signal": "public void setDataSource(String path, Map<String, String> headers)\n        throws IOException, IllegalArgumentException, SecurityException, IllegalStateException", "code": "{\n    String[] keys = null;\n    String[] values = null;\n\n    if (headers != null) {\n        keys = new String[headers.size()];\n        values = new String[headers.size()];\n\n        int i = 0;\n        for (Map.Entry<String, String> entry: headers.entrySet()) {\n            keys[i] = entry.getKey();\n            values[i] = entry.getValue();\n            ++i;\n        }\n    }\n    setDataSource(path, keys, values);\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * Sets the data source (file-path or http/rtsp URL) to use.\n *\n * @param path the path of the file, or the http/rtsp URL of the stream you want to play\n * @param keys   AVOption key\n * @param values AVOption value\n * @throws IllegalStateException if it is called in an invalid state\n */\n", "func_signal": "public void setDataSource(String path, String[] keys, String[] values) throws IOException, IllegalArgumentException, SecurityException, IllegalStateException", "code": "{\n\t\tfinal Uri uri = Uri.parse(path);\n\t\tif (\"file\".equals(uri.getScheme())) {\n\t\t\tpath = uri.getPath();\n\t\t}\n\n\t\tfinal File file = new File(path);\n\t\tif (file.exists()) {\n\t\t\tFileInputStream is = new FileInputStream(file);\n\t\t\tFileDescriptor fd = is.getFD();\n\t\t\tsetDataSource(fd);\n\t\t\tis.close();\n\t\t} else {\n\t\t\t_setDataSource(path, keys, values);\n\t\t}\n\t}", "path": "vitamio\\src\\io\\vov\\vitamio\\MediaPlayer.java", "repo_name": "yixia/VitamioBundleStudio", "stars": 329, "license": "other", "language": "java", "size": 117475}
{"docstring": "/**\n * \u6307\u5b9a\u901a\u8fc7\u6743\u9650Id\u67e5\u8be2\u5173\u8054\u7528\u6237\u7684\u65f6\u5019,\u8fd4\u56de\u7ed3\u679c\u662f\u5426\u5305\u542b\u6743\u9650\u548c\u89d2\u8272\u7684\u5173\u8054\u5173\u7cfb\u4fe1\u606f.\n * <p>\u9ed8\u8ba4\u4e3afalse</p>\n */\n", "func_signal": "public PermissionQuery setIncludePermRole(Boolean includePermRole)", "code": "{\n  this.includePermRole = includePermRole;\n  return this;\n}", "path": "common\\src\\main\\java\\com\\dianrong\\common\\uniauth\\common\\bean\\request\\PermissionQuery.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u6839\u636e\u6761\u4ef6\u5206\u9875\u67e5\u8be2\u540c\u6b65\u65e5\u5fd7\u6570\u636e.\n *\n * @param startTime \u5f00\u59cb\u65f6\u95f4\n * @param endTime \u7ed3\u675f\u65f6\u95f4\n * @param type \u65e5\u5fd7\u7c7b\u578b\n * @param computerIp \u64cd\u4f5c\u670d\u52a1\u5668\u7684ip\n * @param result \u540c\u6b65\u7ed3\u679c\n * @param pageNumber \u5206\u9875\u9875\u7801\n * @param pageSize \u5206\u9875\u5927\u5c0f\n * @return \u67e5\u8be2\u7ed3\u679c\n */\n", "func_signal": "public PageDto<HrSynchronousLogDto> queryHrSynchronousLog(Date startTime, Date endTime,\n    String type, String computerIp, String result, Integer pageNumber, Integer pageSize)", "code": "{\n  if (pageNumber == null || pageSize == null) {\n    throw new AppException(InfoName.VALIDATE_FAIL,\n        UniBundle.getMsg(\"common.parameter.empty\", \"pageNumber, pageSize\"));\n  }\n  HrSynchronousLogExample hrSynchronousLogExample = new HrSynchronousLogExample();\n  hrSynchronousLogExample.setOrderByClause(\"create_date desc\");\n  hrSynchronousLogExample.setPageOffSet(pageNumber * pageSize);\n  hrSynchronousLogExample.setPageSize(pageSize);\n  HrSynchronousLogExample.Criteria criteria = hrSynchronousLogExample.createCriteria();\n  if (startTime != null) {\n    criteria.andSynchronousStartTimeGreaterThanOrEqualTo(startTime);\n  }\n  if (endTime != null) {\n    criteria.andSynchronousEndTimeLessThan(endTime);\n  }\n  if (StringUtils.hasText(type)) {\n    criteria.andSynchronousTypeEqualTo(type);\n  }\n  if (StringUtils.hasText(computerIp)) {\n    criteria.andComputerIpLike(\"%\" + computerIp + \"%\");\n  }\n  if (StringUtils.hasText(result)) {\n    criteria.andSynchronousResultEqualTo(result);\n  }\n  int count = hrSynchronousLogMapper.countByExample(hrSynchronousLogExample);\n  ParamCheck.checkPageParams(pageNumber, pageSize, count);\n  List<HrSynchronousLog> hrSynchronousLogs =\n      hrSynchronousLogMapper.selectByExample(hrSynchronousLogExample);\n  if (hrSynchronousLogs == null) {\n    return null;\n  }\n  List<HrSynchronousLogDto> hrSynchronousLogDtos = new ArrayList<>(hrSynchronousLogs.size());\n  for (HrSynchronousLog hrSynchronousLog : hrSynchronousLogs) {\n    hrSynchronousLogDtos.add(BeanConverter.convert(hrSynchronousLog));\n  }\n  return new PageDto<>(pageNumber, pageSize, count, hrSynchronousLogDtos);\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\synchronous\\hr\\service\\Synchronous.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u83b7\u53d6\u5185\u5bb9\u7684Title.\n *\n * @param type          \u9a8c\u8bc1\u7684\u7c7b\u578b\n * @param messageSource \u56fd\u9645\u5316\u8d44\u6e90\u5bf9\u8c61.\n * @param args          \u8f6c\u5316\u9700\u8981\u7684\u53c2\u6570\u5217\u8868.\n * @throws UnsupportedVerificationTypeException \u5982\u679c\u6307\u5b9a\u7684\u7c7b\u578btype\u4e0d\u652f\u6301.\n */\n", "func_signal": "public static String getTitle(VerificationMessageType type, MessageSource messageSource,\n    Object... args)", "code": "{\n  Assert.notNull(type);\n  MessageTranslator translator = MESSAGE_TYPE_TRANSLATOR_MAP.get(type);\n  if (translator == null) {\n    throw new UnsupportedVerificationTypeException(type.toString());\n  }\n  return translator.getTitle(messageSource, args);\n}", "path": "cas\\src\\main\\java\\com\\dianrong\\common\\uniauth\\cas\\controller\\support\\VerificationMessagesTranslator.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u6839\u636e\u6761\u4ef6\u67e5\u8be2Profile\u548cAttribute\u7684\u5173\u8054\u5173\u7cfb\u4fe1\u606f.\n * \n * @param profileId Profile\u7684id, \u4e0d\u80fd\u4e3a\u7a7a.\n * @param extendId \u6269\u5c55\u5c5e\u6027\u7684id, \u53ef\u4e3a\u7a7a.\n */\n", "func_signal": "public List<ProfileDefinitionAttribute> query(Long profileId, Long extendId)", "code": "{\n  CheckEmpty.checkEmpty(profileId, \"profile definition id\");\n  ProfileDefinitionAttributeExample example = new ProfileDefinitionAttributeExample();\n  ProfileDefinitionAttributeExample.Criteria criteria = example.createCriteria();\n  criteria.andProfileIdEqualTo(profileId);\n  if (extendId != null) {\n    criteria.andExtendIdEqualTo(extendId);\n  }\n  return profileDefinitionAttributeMapper.selectByExample(example);\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\service\\inner\\ProfileDefinitionAttributeInnerService.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u6839\u636e\u6761\u4ef6\u5220\u9664\u8bb0\u5f55.\n * \n * @param profileId Profile\u7684id, \u4e0d\u80fd\u4e3a\u7a7a.\n * @param extendId \u6269\u5c55\u5c5e\u6027\u7684id, \u53ef\u4e3a\u7a7a.\n */\n", "func_signal": "@Transactional\npublic void delete(Long profileId, Long extendId)", "code": "{\n  CheckEmpty.checkEmpty(profileId, \"profile definition id\");\n  ProfileDefinitionAttributeExample example = new ProfileDefinitionAttributeExample();\n  ProfileDefinitionAttributeExample.Criteria criteria = example.createCriteria();\n  criteria.andProfileIdEqualTo(profileId);\n  if (extendId != null) {\n    criteria.andExtendIdEqualTo(extendId);\n  }\n  profileDefinitionAttributeMapper.deleteByExample(example);\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\service\\inner\\ProfileDefinitionAttributeInnerService.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u540c\u6b65\u6570\u636e\u5904\u7406\u65b9\u6cd5.\n */\n", "func_signal": "private void synchronousDataProcess()", "code": "{\n  // \u540c\u6b65\u65e5\u5fd7\u5bf9\u8c61.\n  HrSynchronousLog hrSynchronousLog = new HrSynchronousLog();\n  hrSynchronousLog.setSynchronousStartTime(new Date());\n  // \u540c\u6b65HR\u6570\u636e\n  hrSynchronousLog.setSynchronousType(HrSynchronousLogType.SYNCHRONOUS_HR_DATA.toString());\n  hrSynchronousLog.setComputerIp(SystemUtil.getLocalIp());\n  try {\n    // \u52a0\u8f7d\u6240\u6709\u7684\u6587\u4ef6\u5185\u5bb9\n    LoadContent<String> depContent =\n        fileLoader.loadFileContent(SynchronousFile.DEPT_UA.getName());\n    DepartmentList departmentList = hrDeptAnalyzer.analyze(depContent.getContent());\n\n    LoadContent<String> jobContent = fileLoader.loadFileContent(SynchronousFile.JOB_UA.getName());\n    JobList jobList = hrJobAnalyzer.analyze(jobContent.getContent());\n\n    LoadContent<String> leContent = fileLoader.loadFileContent(SynchronousFile.LE_UA.getName());\n    LegalEntityList legalEntityList = hrLeAnalyzer.analyze(leContent.getContent());\n\n    LoadContent<String> personContent =\n        fileLoader.loadFileContent(SynchronousFile.PERSON_UA.getName());\n    PersonList personList = hrPersonAnalyzer.analyze(personContent.getContent());\n\n    hrSynchronousLog.setProcessContent(StringUtil.subStrIfNeed(Arrays\n        .asList(depContent.getSourceName(), jobContent.getSourceName(), leContent.getSourceName(),\n            personContent.getSourceName()).toString(), 200));\n\n    // \u5916\u952e\u7ea6\u675f\u68c0\u6d4b\n    foreignKeyCheck(departmentList, jobList, legalEntityList, personList);\n\n    // \u6570\u636e\u5e93\u64cd\u4f5c\n    synchronousDb.dbProcess(departmentList, jobList, legalEntityList, personList);\n\n    // \u540c\u6b65\u6210\u529f\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.SUCCESS.toString());\n  } catch (FileLoadFailureException | SFTPServerProcessException flfe) {\n    // \u52a0\u8f7dFTP\u6587\u4ef6\u5931\u8d25\n    log.error(\"Synchronous HR system data failed, load ftp file failed.\", flfe);\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.FAILURE.toString());\n    hrSynchronousLog.setFailureMsg(flfe.getMessage());\n    throw new AppException(InfoName.INTERNAL_ERROR, flfe.getMessage());\n  } catch (InvalidContentException fkfe) {\n    // \u89e3\u6790\u6587\u4ef6\u5185\u5bb9\u5931\u8d25\n    log.error(\"Synchronous HR system data failed, ftp file content is invalid.\", fkfe);\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.FAILURE.toString());\n    hrSynchronousLog.setFailureMsg(fkfe.getMessage());\n    throw new AppException(InfoName.INTERNAL_ERROR, fkfe.getMessage());\n  } catch (ForeignKeyCheckFailureException fkfe) {\n    // \u5916\u952eCheck\u5931\u8d25\n    log.error(\"Synchronous HR system data failed, foreign key check failure.\", fkfe);\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.FAILURE.toString());\n    hrSynchronousLog.setFailureMsg(fkfe.getMessage());\n    throw new AppException(InfoName.INTERNAL_ERROR, fkfe.getMessage());\n  } catch (Exception e) {\n    // \u5176\u4ed6\u5f02\u5e38\n    log.error(\"Synchronous HR system data failed, exception occured.\", e);\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.FAILURE.toString());\n    String expInfo = StringUtil.subStrIfNeed(ExceptionUtils.getStackTrace(e), 2000);\n    hrSynchronousLog.setFailureMsg(expInfo);\n    throw new AppException(InfoName.INTERNAL_ERROR, expInfo);\n  } finally {\n    hrSynchronousLog.setSynchronousEndTime(new Date());\n    // \u63d2\u5165\u540c\u6b65\u65e5\u5fd7\n    hrSynchronousLogMapper.insert(hrSynchronousLog);\n  }\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\synchronous\\hr\\service\\Synchronous.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u5224\u65ad\u5f53\u524d\u7684\u8bf7\u6c42\u662f\u5426\u5904\u4e8e\u767b\u9646\u72b6\u6001.\n */\n", "func_signal": "private boolean checkIsLogin(HttpServletRequest request, HttpServletResponse response)", "code": "{\n  try {\n    casLoginSupport.queryTgtWithLoginStatus(request, response);\n    return true;\n  } catch (NotLoginException ex) {\n    log.error(\"call update userInfo, but not login\", ex);\n    return false;\n  }\n}", "path": "cas\\src\\main\\java\\com\\dianrong\\common\\uniauth\\cas\\controller\\UserInfoManageController.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u6279\u91cf\u6dfb\u52a0Profile\u4e0e\u6269\u5c55\u5c5e\u6027\u7684\u5173\u8054\u5173\u7cfb.\n */\n", "func_signal": "@Transactional\npublic void batchInsert(List<ProfileDefinitionAttribute> infoes)", "code": "{\n  if (ObjectUtil.collectionIsEmptyOrNull(infoes)) {\n    log.debug(\"empty list to insert, just ignore!\");\n    return;\n  }\n  profileDefinitionAttributeMapper.batchInsert(infoes);\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\service\\inner\\ProfileDefinitionAttributeInnerService.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u6269\u5c55Profile\u7684\u6269\u5c55\u5c5e\u6027.\n */\n", "func_signal": "@Transactional\npublic void extendProfileAttributes(Long id, Map<String, AttributeValModel> attributes)", "code": "{\n  CheckEmpty.checkEmpty(id, \"profile definition id\");\n  // \u5904\u7406\u6269\u5c55\u5c5e\u6027\n  List<AttributeExtend> attributeExtends = Lists.newArrayList();\n  // \u5173\u8054Profile_definition\u548c\u6269\u5c55\u5c5e\u6027\n  if (attributes != null && !attributes.isEmpty()) {\n    for (Map.Entry<String, AttributeValModel> entry : attributes.entrySet()) {\n      AttributeExtend attributeExtend = attributeExtendService\n          .addAttributeExtendIfNonExistent(entry.getKey(), entry.getValue());\n      attributeExtends.add(attributeExtend);\n    }\n  }\n\n  List<ProfileDefinitionAttribute> destDefinitionAttributes =\n      BeanConverter.convert(id, attributeExtends);\n  // \u83b7\u53d6\u6240\u6709\u7684\u5173\u8054\u5173\u7cfb\n  List<ProfileDefinitionAttribute> existProfileDefinitionAttributes = query(id, null);\n  // \u6dfb\u52a0\u7684\u6269\u5c55\u5c5e\u6027\u5217\u8868\n  List<ProfileDefinitionAttribute> listToInsert =\n      (new ProcessListQuery<ProfileDefinitionAttribute, Long>() {\n        @Override\n        public Long getId(ProfileDefinitionAttribute o) {\n          return o.getExtendId();\n        }\n      }).getProcessList(existProfileDefinitionAttributes, destDefinitionAttributes, true);\n  batchInsert(listToInsert);\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\service\\inner\\ProfileDefinitionAttributeInnerService.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u6839\u636e\u4f20\u5165\u7684type\u5b57\u7b26\u4e32\u8fd4\u56de\u9a8c\u8bc1\u4fe1\u606f\u7684\u7c7b\u578b.\n * @param type \u9a8c\u8bc1\u7c7b\u578b\u5b57\u7b26\u4e32.\n * @throws ValidateFailException \u4f20\u5165\u7684type\u4e0d\u4e3a\u7a7a,\u4f46\u662f\u5374\u4e0d\u662f\u67d0\u4e00\u79cd\u7c7b\u578b\u7684\u9a8c\u8bc1.\n */\n", "func_signal": "public static VerificationMessageType getType(String type) throws ValidateFailException", "code": "{\n  // \u9ed8\u8ba4\u65b9\u5f0f\u662f\u53d1\u9001\u5fd8\u8bb0\u5bc6\u7801\u7684\u9a8c\u8bc1\u65b9\u5f0f.\n  if (!StringUtils.hasText(type)) {\n    return FORGET_PASSWORD;\n  }\n  VerificationMessageType[] types = VerificationMessageType.values();\n  for(VerificationMessageType vmt : types) {\n    if (vmt.toString().equalsIgnoreCase(type.trim())) {\n      return vmt;\n    }\n  }\n  throw new ValidateFailException(type + \" is a invalid VerificationMessageType string\");\n}", "path": "cas\\src\\main\\java\\com\\dianrong\\common\\uniauth\\cas\\controller\\support\\VerificationMessageType.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * This method was generated by MyBatis Generator.\n * This method corresponds to the database table hr_dept\n *\n * @mbggenerated Fri Oct 20 12:14:07 CST 2017\n */\n", "func_signal": "protected Criteria createCriteriaInternal()", "code": "{\n    Criteria criteria = new Criteria();\n    return criteria;\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\data\\entity\\HrDeptExample.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u6307\u5b9a\u901a\u8fc7\u6743\u9650Id\u67e5\u8be2\u5173\u8054\u7528\u6237\u7684\u65f6\u5019,\u8fd4\u56de\u7ed3\u679c\u662f\u5426\u5305\u542b\u89d2\u8272\u548c\u7528\u6237\u7684\u5173\u8054\u5173\u7cfb\u4fe1\u606f.\n * <p>\u9ed8\u8ba4\u4e3afalse</p>\n */\n", "func_signal": "public PermissionQuery setIncludeRoleUser(Boolean includeRoleUser)", "code": "{\n  this.includeRoleUser = includeRoleUser;\n  return this;\n}", "path": "common\\src\\main\\java\\com\\dianrong\\common\\uniauth\\common\\bean\\request\\PermissionQuery.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u83b7\u53d6\u53d1\u9001\u7684\u5185\u5bb9.\n *\n * @param type          \u9a8c\u8bc1\u7684\u7c7b\u578b\n * @param messageSource \u56fd\u9645\u5316\u8d44\u6e90\u5bf9\u8c61.\n * @param args          \u8f6c\u5316\u9700\u8981\u7684\u53c2\u6570\u5217\u8868.\n * @throws UnsupportedVerificationTypeException \u5982\u679c\u6307\u5b9a\u7684\u7c7b\u578btype\u4e0d\u652f\u6301.\n */\n", "func_signal": "public static String getContent(VerificationMessageType type, MessageSource messageSource,\n    Object... args) throws UnsupportedVerificationTypeException", "code": "{\n  Assert.notNull(type);\n  MessageTranslator translator = MESSAGE_TYPE_TRANSLATOR_MAP.get(type);\n  if (translator == null) {\n    throw new UnsupportedVerificationTypeException(type.toString());\n  }\n  return translator.getContent(messageSource, args);\n}", "path": "cas\\src\\main\\java\\com\\dianrong\\common\\uniauth\\cas\\controller\\support\\VerificationMessagesTranslator.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u5220\u9664\u8fc7\u671f\u7684FTP\u540c\u6b65\u6587\u4ef6.\n */\n", "func_signal": "public void deleteExpiredFtpFile(boolean asynchronous)", "code": "{\n//    if (!switchControl.isOn()) {\n  // \u5173\u95ed\u5220\u9664\u6587\u4ef6\u7684\u5904\u7406.\n  if (true) {\n    log.info(\"HR data synchronous switch is off, so just ignore delete expired FTP file call.\");\n    return;\n  }\n  try {\n    // \u83b7\u53d6\u9501\n    processLocker.lock();\n  } catch (AcquireLockFailureException ale) {\n    log.info(\"Acquire lock failed, \" + ale.getMessage(), ale);\n    throw new AppException(InfoName.ACQUIRE_LOCK_FAILED,\n        UniBundle.getMsg(\"hr.data.synchronous.lock.acquire.failed\", ale.getHoldLockServerIp()));\n  }\n  if (asynchronous) {\n    EXECUTOR_SERVICE.submit(new Runnable() {\n      @Override\n      public void run() {\n        deleteExpiredFileProcess();\n      }\n    });\n  } else {\n    deleteExpiredFileProcess();\n  }\n}\n\n/**\n * \u5220\u9664\u8fc7\u671f\u6587\u4ef6\u7684\u5b9e\u9645\u6267\u884c\u903b\u8f91.\n */\nprivate void deleteExpiredFileProcess() {\n  // \u540c\u6b65\u65e5\u5fd7\u5bf9\u8c61.\n  HrSynchronousLog hrSynchronousLog = new HrSynchronousLog();\n  hrSynchronousLog.setSynchronousStartTime(new Date());\n  // \u540c\u6b65HR\u6570\u636e\n  hrSynchronousLog.setSynchronousType(HrSynchronousLogType.DELETE_FTP_HR_EXPIRED_DATA.toString());\n  hrSynchronousLog.setComputerIp(SystemUtil.getLocalIp());\n  Calendar calendar = Calendar.getInstance();\n  calendar.add(Calendar.DAY_OF_YEAR, -deleteAfterExpiredDays);\n  try {\n    List<String> successDeleteFileNames =\n        ftpFileDeleter.deleteFtpFileByExpiredTime(calendar.getTime());\n    // \u5220\u9664\u6210\u529f\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.SUCCESS.toString());\n    hrSynchronousLog\n        .setProcessContent(StringUtil.subStrIfNeed(successDeleteFileNames.toString(), 200));\n  } catch (DeleteFTPFileFailureException dfe) {\n    log.debug(\"Failed delete files update time before:\" + calendar.getTime(), dfe);\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.FAILURE.toString());\n    hrSynchronousLog.setProcessContent(dfe.getDeleteSuccessFileNames().toString());\n    hrSynchronousLog.setFailureMsg(dfe.getMessage());\n    throw new AppException(InfoName.INTERNAL_ERROR, dfe.getMessage());\n  } catch (Exception e) {\n    log.debug(\"Failed delete files update time before:\" + calendar.getTime(), e);\n    hrSynchronousLog.setSynchronousResult(HrSynchronousLogResult.FAILURE.toString());\n    String expInfo = ExceptionUtils.getStackTrace(e);\n    hrSynchronousLog.setFailureMsg(expInfo);\n    throw new AppException(InfoName.INTERNAL_ERROR, expInfo);\n  } finally {\n    hrSynchronousLog.setSynchronousEndTime(new Date());\n    // \u63d2\u5165\u540c\u6b65\u65e5\u5fd7\n    hrSynchronousLogMapper.insert(hrSynchronousLog);\n  }\n}\n\n/**\n * \u6839\u636e\u4f20\u5165\u7684\u5185\u5bb9,\u8fdb\u884c\u5916\u952e\u5206\u6790\u68c0\u6d4b.\n *\n * @param departmentList \u90e8\u95e8\u4fe1\u606f\u5217\u8868.\n * @param jobList \u804c\u4f4d\u4fe1\u606f\u5217\u8868.\n * @param legalEntityList \u6cd5\u5f8b\u5b9e\u4f53\u4fe1\u606f\u5217\u8868.\n * @param personList \u5458\u5de5\u4fe1\u606f\u5217\u8868.\n * @throws ForeignKeyCheckFailureException \u5916\u952e\u68c0\u6d4b\u4e0d\u8fc7.\n */\nprivate void foreignKeyCheck(DepartmentList departmentList, JobList jobList,\n    LegalEntityList legalEntityList, PersonList personList)\n    throws ForeignKeyCheckFailureException {\n  // \u6536\u96c6\u5916\u952eid\u96c6\u5408\n  Set<Long> leIds = new HashSet<>(legalEntityList.content().size());\n  Set<Long> jobIds = new HashSet<>(jobList.content().size());\n  Set<Long> deptIds = new HashSet<>(departmentList.content().size());\n  Set<Long> personIds = new HashSet<>(personList.content().size());\n  for (HrLe hrLe : legalEntityList.content()) {\n    leIds.add(hrLe.getCompanyId());\n  }\n  for (HrJob hrJob : jobList.content()) {\n    jobIds.add(hrJob.getJobId());\n  }\n  for (HrDept hrDept : departmentList.content()) {\n    deptIds.add(hrDept.getDepartmentId());\n  }\n  for (HrPerson hrPerson : personList.content()) {\n    personIds.add(hrPerson.getPersonId());\n  }\n\n  // Check hr_dept\u8868\u7684\u5916\u952e\n  /*\n  * 1 parent_dept_id \u9700\u8981\u662fdeptId.\n  * 2 manager_id \u9700\u8981\u662fpersonId.\n  * */\n  for (HrDept hrDept : departmentList.content()) {\n    // \u7236\u90e8\u95e8id check.\n    Long deptId = hrDept.getParentsDeptId();\n    if (deptId != null && !deptIds.contains(deptId)) {\n      throwForeignKeyCheckFailureException(departmentList.synchronousFile().getTableName(),\n          \"parentsDeptId\", deptId, departmentList.synchronousFile().getTableName(),\n          \"departmentId\");\n    }\n    // \u90e8\u95e8manager id check.\n    Long managerId = hrDept.getManagerId();\n    if (managerId != null && !personIds.contains(managerId)) {\n      throwForeignKeyCheckFailureException(departmentList.synchronousFile().getTableName(),\n          \"managerId\", managerId, personList.synchronousFile().getTableName(), \"personId\");\n    }\n  }\n\n  // Check hr_person\u8868\u7684\u5916\u952e\n  /*\n  * 1 department_id \u9700\u8981\u662fdeptId.\n  * 2 job_id \u9700\u8981\u662fjobId.\n  * 3 manager_id \u9700\u8981\u662fpersonId.\n  * 4 legal_entities_id \u9700\u8981\u662fleId.\n  * */\n  for (HrPerson hrPerson : personList.content()) {\n    // buId check.\n    Long buId = hrPerson.getBuId();\n    if (buId != null && !deptIds.contains(buId)) {\n      throwForeignKeyCheckFailureException(personList.synchronousFile().getTableName(),\n          \"buId\", buId, departmentList.synchronousFile().getTableName(),\n          \"departmentId\");\n    }\n    // \u90e8\u95e8id check.\n    Long deptId = hrPerson.getDepartmentId();\n    if (deptId != null && !deptIds.contains(deptId)) {\n      throwForeignKeyCheckFailureException(personList.synchronousFile().getTableName(),\n          \"departmentId\", deptId, departmentList.synchronousFile().getTableName(),\n          \"departmentId\");\n    }\n    // \u804c\u4f4did check.\n    Long jobId = hrPerson.getJobId();\n    if (jobId != null && !jobIds.contains(jobId)) {\n      throwForeignKeyCheckFailureException(personList.synchronousFile().getTableName(), \"jobId\",\n          jobId, jobList.synchronousFile().getTableName(), \"jobId\");\n    }\n    // \u90e8\u95e8manager id check.\n    Long managerId = hrPerson.getManagerId();\n    if (managerId != null && !personIds.contains(managerId)) {\n      throwForeignKeyCheckFailureException(personList.synchronousFile().getTableName(),\n          \"managerId\", managerId, personList.synchronousFile().getTableName(), \"personId\");\n    }\n    // companyId check.\n    Long companyId = hrPerson.getCompanyId();\n    if (companyId != null && !leIds.contains(companyId)) {\n      throwForeignKeyCheckFailureException(personList.synchronousFile().getTableName(),\n          \"companyId\", companyId, legalEntityList.synchronousFile().getTableName(), \"companyId\");\n    }\n  }\n}\n\n/**\n * \u5916\u952e\u68c0\u6d4b\u9519\u8bef,\u629b\u51fa\u5f02\u5e38.\n */\nprivate void throwForeignKeyCheckFailureException(String checkedTableName,\n    String checkedFieldName, Object checkedFieldVal, String linkedTableName,\n    String linkedFieldName) {\n  StringBuilder msg = new StringBuilder();\n  msg.append(\"Check foreign key failure.\");\n  msg.append(\"The checked table name:\").append(checkedTableName).append(\",\");\n  msg.append(\"The checked field name:\").append(checkedFieldName).append(\",\");\n  msg.append(\"The checked field value:\").append(checkedFieldVal).append(\",\");\n  msg.append(\"The foreign linked table name:\").append(linkedTableName).append(\".\");\n  msg.append(\"The foreign linked field name:\").append(linkedFieldName).append(\".\");\n  ForeignKeyCheckFailureException fkc = new ForeignKeyCheckFailureException(msg.toString());\n  fkc.setCheckedTableName(checkedTableName);\n  fkc.setCheckedFieldName(checkedFieldName);\n  fkc.setCheckedFieldVal(checkedFieldVal);\n  fkc.setLinkedTableName(linkedTableName);\n  fkc.setLinkedFieldName(linkedFieldName);\n  throw fkc;\n}\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\synchronous\\hr\\service\\Synchronous.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "// \u672a\u767b\u9646\u7684\u7ed3\u679c\u5bf9\u8c61\n", "func_signal": "private Response<Void> getNotLoginResult()", "code": "{\n  return Response.failure(Info.build(InfoName.BAD_REQUEST,\n      UniBundleUtil.getMsg(messageSource, \"manage.userinfo.controller.not.login\")));\n}", "path": "cas\\src\\main\\java\\com\\dianrong\\common\\uniauth\\cas\\controller\\UserInfoManageController.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u540c\u6b65\u6570\u636e\u5904\u7406\u903b\u8f91.\n *\n * @param asynchronous \u662f\u5426\u5f02\u6b65\u6267\u884c.\n */\n", "func_signal": "public void startSynchronize(boolean asynchronous)", "code": "{\n  if (!switchControl.isOn()) {\n    log.info(\"HR data synchronous switch is off, so just ignore startSynchronize call.\");\n    return;\n  }\n  try {\n    // \u83b7\u53d6\u9501\n    processLocker.lock();\n  } catch (AcquireLockFailureException ale) {\n    log.info(\"Acquire lock failed, \" + ale.getMessage(), ale);\n    throw new AppException(InfoName.ACQUIRE_LOCK_FAILED,\n        UniBundle.getMsg(\"hr.data.synchronous.lock.acquire.failed\", ale.getHoldLockServerIp()));\n  }\n\n  if (asynchronous) {\n    EXECUTOR_SERVICE.submit(new Runnable() {\n      @Override\n      public void run() {\n        synchronousDataProcess();\n      }\n    });\n  } else {\n    synchronousDataProcess();\n  }\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\synchronous\\hr\\service\\Synchronous.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * This method was generated by MyBatis Generator.\n * This method corresponds to the database table hr_dept\n *\n * @mbggenerated Fri Oct 20 12:14:07 CST 2017\n */\n", "func_signal": "public void clear()", "code": "{\n    oredCriteria.clear();\n    orderByClause = null;\n    distinct = false;\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\data\\entity\\HrDeptExample.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * This method was generated by MyBatis Generator.\n * This method corresponds to the database table hr_dept\n *\n * @mbggenerated Fri Oct 20 12:14:07 CST 2017\n */\n", "func_signal": "public Criteria createCriteria()", "code": "{\n    Criteria criteria = createCriteriaInternal();\n    if (oredCriteria.size() == 0) {\n        oredCriteria.add(criteria);\n    }\n    return criteria;\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\data\\entity\\HrDeptExample.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * This method was generated by MyBatis Generator.\n * This method corresponds to the database table hr_dept\n *\n * @mbggenerated Fri Oct 20 12:14:07 CST 2017\n */\n", "func_signal": "public Criteria or()", "code": "{\n    Criteria criteria = createCriteriaInternal();\n    oredCriteria.add(criteria);\n    return criteria;\n}", "path": "uniauth-server\\src\\main\\java\\com\\dianrong\\common\\uniauth\\server\\data\\entity\\HrDeptExample.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u767b\u9646\u7528\u6237\u7684\u7528\u6237id.\n *\n * @throws NotLoginException \u5982\u679c\u6ca1\u6709\u767b\u9646\u5219\u629b\u51fa\u8be5\u5f02\u5e38\n */\n", "func_signal": "private UserIdentity getCurrentLoginUserId(HttpServletRequest request,\n    HttpServletResponse response)", "code": "{\n  Principal principal = casLoginSupport.getAuthenticationPrincipal(request, response);\n  // \u83b7\u53d6\u7528\u6237\u8d26\u53f7\n  String account = principal.getId();\n  Long tenancyId = (Long) principal.getAttributes().get(CasProtocol.DianRongCas.getTenancyIdName());\n  Long userId = (Long) principal.getAttributes().get(CasProtocol.DianRongCas.getUserIdName());\n  return new UserIdentity(account, tenancyId, userId);\n}", "path": "cas\\src\\main\\java\\com\\dianrong\\common\\uniauth\\cas\\controller\\UserInfoManageController.java", "repo_name": "dianrong/UniAuth", "stars": 340, "license": "other", "language": "java", "size": 127653}
{"docstring": "/**\n * Decodes parameters in percent-encoded URI-format\n * ( e.g. \"name=Jack%20Daniels&pass=Single%20Malt\" ) and\n * adds them to given Properties. NOTE: this doesn't support multiple\n * identical keys due to the simplicity of Properties -- if you need multiples,\n * you might want to replace the Properties with a Hashtable of Vectors or such.\n */\n", "func_signal": "private void decodeParms( String parms, Properties p )\n\t\tthrows InterruptedException", "code": "{\n\tif ( parms == null )\n\t\treturn;\n\n\tStringTokenizer st = new StringTokenizer( parms, \"&\" );\n\twhile ( st.hasMoreTokens())\n\t{\n\t\tString e = st.nextToken();\n\t\tint sep = e.indexOf( '=' );\n\t\tif ( sep >= 0 )\n\t\t\tp.put( decodePercent( e.substring( 0, sep )).trim(),\n\t\t\t\t\tdecodePercent( e.substring( sep+1 )));\n\t}\n\t\t}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Returns an error message as a HTTP response and\n * throws InterruptedException to stop further request processing.\n */\n", "func_signal": "private void sendError(Socket socket, String status, String msg ) throws InterruptedException", "code": "{\n\tsendResponse(socket, status, MIME_PLAINTEXT, null, null);\n\tthrow new InterruptedException();\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Decodes the percent encoding scheme. <br/>\n * For example: \"an+example%20string\" -> \"an example string\"\n */\n", "func_signal": "private String decodePercent( String str ) throws InterruptedException", "code": "{\n\ttry\n\t{\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor( int i=0; i<str.length(); i++ )\n\t\t{\n\t\t\tchar c = str.charAt( i );\n\t\t\tswitch ( c )\n\t\t\t{\n\t\t\tcase '+':\n\t\t\t\tsb.append( ' ' );\n\t\t\t\tbreak;\n\t\t\tcase '%':\n\t\t\t\tsb.append((char)Integer.parseInt( str.substring(i+1,i+3), 16 ));\n\t\t\t\ti += 2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsb.append( c );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tcatch( Exception e )\n\t{\n\t\tsendError(socket, HTTP_BADREQUEST, \"BAD REQUEST: Bad percent-encoding.\" );\n\t\treturn null;\n\t}\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * It returns the offset separating multipart file headers\n * from the file's data.\n **/\n", "func_signal": "private int stripMultipartHeaders(byte[] b, int offset)", "code": "{\n\tint i = 0;\n\tfor (i=offset; i<b.length; i++)\n\t{\n\t\tif (b[i] == '\\r' && b[++i] == '\\n' && b[++i] == '\\r' && b[++i] == '\\n')\n\t\t\tbreak;\n\t}\n\treturn i+1;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Sends given response to the socket.\n */\n", "func_signal": "private void sendResponse(Socket socket, String status, String mime, Properties header, StreamSource data )", "code": "{\n\ttry\n\t{\n\t\tif ( status == null )\n\t\t\tthrow new Error( \"sendResponse(): Status can't be null.\" );\n\n\t\tOutputStream out = socket.getOutputStream();\n\t\tPrintWriter pw = new PrintWriter( out );\n\t\tpw.print(\"HTTP/1.0 \" + status + \" \\r\\n\");\n\n\n\t\tif ( mime != null )\n\t\t\tpw.print(\"Content-Type: \" + mime + \"\\r\\n\");\n\n\t\tif ( header == null || header.getProperty( \"Date\" ) == null )\n\t\t\tpw.print( \"Date: \" + gmtFrmt.format( new Date()) + \"\\r\\n\");\n\n\t\tif ( header != null )\n\t\t{\n\t\t\tEnumeration<Object> e = header.keys();\n\t\t\twhile ( e.hasMoreElements())\n\t\t\t{\n\t\t\t\tString key = (String)e.nextElement();\n\t\t\t\tString value = header.getProperty( key );\n\t\t\t\tpw.print( key + \": \" + value + \"\\r\\n\");\n\t\t\t}\n\t\t}\n\n\t\tpw.print(\"\\r\\n\");\n\t\tpw.flush();\n\n\n\t\tif ( data != null )\n\t\t{\n\t\t\t//long pending = data.available();      // This is to support partial sends, see serveFile()\n\t\t\tdata.open();\n\t\t\tbyte[] buff = new byte[bufsize];\n\t\t\tint read = 0;\n\t\t\twhile ((read = data.read(buff))>0){\n\t\t\t\t//if(SolidStreamer.LOG)Log.d(\"Streamer\", \"Read: \"+ read +\", pending: \"+ data.available());\n\t\t\t\tout.write( buff, 0, read );\n\t\t\t}\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t\tif ( data != null )\n\t\t\tdata.close();\n\n\t}\n\tcatch(IOException ioe) {\n\t\t// Couldn't write? No can do.\n\t\ttry { socket.close(); } catch( Throwable t ) {}\n\t}\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Removes the item from the set.\n *\n * @param item The item to remove from the set.\n * @return True if the item was found and thus removed from the set.\n */\n", "func_signal": "public boolean remove(Object item)", "code": "{\n    mSortedItems.remove(item);\n    return super.remove(item);\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\widget\\SortedObjectAdapter.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Starts a HTTP server to given port.<p>\n * Throws an IOException if the socket is already in use\n */\n", "func_signal": "public StreamServer( int port, File wwwroot ) throws IOException", "code": "{\n\tmyTcpPort = port;\n\tmyServerSocket = new ServerSocket( myTcpPort );\n\tmyThread = new Thread( new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\twhile(true) {\n\t\t\t\t\tSocket accept = myServerSocket.accept();\n\t\t\t\t\tnew HTTPSession(accept);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ioe) {}\n\t\t}\n\t});\n\tmyThread.setDaemon(true);\n\tmyThread.setPriority(Thread.MAX_PRIORITY);\n\tmyThread.start();\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Derive a secure key based on the passphraseOrPin\n * \n * @param passphraseOrPin\n * @param salt\n * @param algorthm\n *            - which PBE algorthm to use. some <4.0 devices don;t support\n *            the prefered PBKDF2WithHmacSHA1\n * @param iterations\n *            - Number of PBKDF2 hardening rounds to use. Larger values\n *            increase computation time (a good thing), defaults to 1000 if\n *            not set.\n * @param keyLength\n * @return Derived Secretkey\n * @throws java.security.NoSuchAlgorithmException\n * @throws java.security.spec.InvalidKeySpecException\n * @throws java.security.NoSuchProviderException\n */\n", "func_signal": "private static SecretKey generatePBEKey(char[] passphraseOrPin,\n\t\tbyte[] salt, String algorthm, int iterations, int keyLength)\n\t\tthrows NoSuchAlgorithmException, InvalidKeySpecException,\n\t\tNoSuchProviderException", "code": "{\n\n\tif (iterations == 0) {\n\t\titerations = 1000;\n\t}\n\n\tSecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\n\t\t\talgorthm, PROVIDER);\n\tKeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations,\n\t\t\tkeyLength);\n\tSecretKey secretKey = secretKeyFactory.generateSecret(keySpec);\n\treturn secretKey;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\util\\SecurePreferences.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Constructor.\n * \n * @param context\n *            the caller's context\n */\n", "func_signal": "public SecurePreferences(Context context)", "code": "{\n\t// Proxy design pattern\n\tif (SecurePreferences.sFile == null) {\n\t\tSecurePreferences.sFile = PreferenceManager\n\t\t\t\t.getDefaultSharedPreferences(context);\n\t}\n\t// Initialize encryption/decryption key\n\ttry {\n\t\tfinal String key = SecurePreferences.generateAesKeyName(context);\n\t\tString value = SecurePreferences.sFile.getString(key, null);\n\t\tif (value == null) {\n\t\t\tvalue = SecurePreferences.generateAesKeyValue();\n\t\t\tSecurePreferences.sFile.edit().putString(key, value).commit();\n\t\t}\n\t\tSecurePreferences.sKey = SecurePreferences.decode(value);\n\t} catch (Exception e) {\n\t\tif (sLoggingEnabled) {\n\t\t\tLog.e(TAG, \"Error init:\" + e.getMessage());\n\t\t}\n\t\tthrow new IllegalStateException(e);\n\t}\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\util\\SecurePreferences.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Removes all items from this set, leaving it empty.\n */\n", "func_signal": "public void clear()", "code": "{\n    mSortedItems.clear();\n    super.clear();\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\widget\\SortedObjectAdapter.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * This is useful for storing values that have be encrypted by something\n * else\n * \n * @param key\n *            - encrypted as usual\n * @param value\n *            will not be encrypted\n * @return\n */\n", "func_signal": "public SharedPreferences.Editor putStringNoEncrypted(String key,\n\t\tString value)", "code": "{\n\tmEditor.putString(SecurePreferences.encrypt(key), value);\n\treturn this;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\util\\SecurePreferences.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Retrieves the content of a sent file and saves it\n * to a temporary file.\n * The full path to the saved file is returned.\n **/\n", "func_signal": "private String saveTmpFile(byte[] b, int offset, int len)", "code": "{\n\tString path = \"\";\n\tif (len > 0)\n\t{\n\t\tString tmpdir = System.getProperty(\"java.io.tmpdir\");\n\t\ttry {\n\t\t\tFile temp = File.createTempFile(\"NanoHTTPD\", \"\", new File(tmpdir));\n\t\t\tOutputStream fstream = new FileOutputStream(temp);\n\t\t\tfstream.write(b, offset, len);\n\t\t\tfstream.close();\n\t\t\tpath = temp.getAbsolutePath();\n\t\t} catch (Exception e) { // Catch exception if any\n\t\t\tSystem.err.println(\"Error: \" + e.getMessage());\n\t\t}\n\t}\n\treturn path;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Shows an error dialog with a given text message.\n *\n * @param context\n * @param errorString\n */\n", "func_signal": "public static final void showErrorDialog(Context context, String errorString)", "code": "{\n    new AlertDialog.Builder(context).setTitle(R.string.error)\n            .setMessage(errorString)\n            .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int id) {\n                    dialog.cancel();\n                }\n            })\n            .create()\n            .show();\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\util\\Utils.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Basic constructor.\n */\n", "func_signal": "public Response( String status, String mimeType, StreamSource data )", "code": "{\n\tthis.status = status;\n\tthis.mimeType = mimeType;\n\tthis.data = data;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Formats time in milliseconds to hh:mm:ss string format.\n *\n * @param millis\n * @return\n */\n", "func_signal": "public static String formatMillis(int millis)", "code": "{\n    String result = \"\";\n    int hr = millis / 3600000;\n    millis %= 3600000;\n    int min = millis / 60000;\n    millis %= 60000;\n    int sec = millis / 1000;\n    if (hr > 0) {\n        result += hr + \":\";\n    }\n    if (min >= 0) {\n        if (min > 9) {\n            result += min + \":\";\n        } else {\n            result += \"0\" + min + \":\";\n        }\n    }\n    if (sec > 9) {\n        result += sec;\n    } else {\n        result += \"0\" + sec;\n    }\n    return result;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\util\\Utils.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Decodes the Multipart Body data and put it\n * into java Properties' key - value pairs.\n **/\n", "func_signal": "private void decodeMultipartData(String boundary, byte[] fbuf, BufferedReader in, Properties parms, Properties files)\n\t\tthrows InterruptedException", "code": "{\n\ttry\n\t{\n\t\tint[] bpositions = getBoundaryPositions(fbuf,boundary.getBytes());\n\t\tint boundarycount = 1;\n\t\tString mpline = in.readLine();\n\t\twhile ( mpline != null )\n\t\t{\n\t\t\tif (mpline.indexOf(boundary) == -1)\n\t\t\t\tsendError(socket, HTTP_BADREQUEST, \"BAD REQUEST: Content type is multipart/form-data but next chunk does not start with boundary. Usage: GET /example/file.html\" );\n\t\t\tboundarycount++;\n\t\t\tProperties item = new Properties();\n\t\t\tmpline = in.readLine();\n\t\t\twhile (mpline != null && mpline.trim().length() > 0)\n\t\t\t{\n\t\t\t\tint p = mpline.indexOf( ':' );\n\t\t\t\tif (p != -1)\n\t\t\t\t\titem.put( mpline.substring(0,p).trim().toLowerCase(Locale.ENGLISH), mpline.substring(p+1).trim());\n\t\t\t\tmpline = in.readLine();\n\t\t\t}\n\t\t\tif (mpline != null)\n\t\t\t{\n\t\t\t\tString contentDisposition = item.getProperty(\"content-disposition\");\n\t\t\t\tif (contentDisposition == null)\n\t\t\t\t{\n\t\t\t\t\tsendError(socket, HTTP_BADREQUEST, \"BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html\" );\n\t\t\t\t}\n\t\t\t\tStringTokenizer st = new StringTokenizer( contentDisposition , \"; \" );\n\t\t\t\tProperties disposition = new Properties();\n\t\t\t\twhile ( st.hasMoreTokens())\n\t\t\t\t{\n\t\t\t\t\tString token = st.nextToken();\n\t\t\t\t\tint p = token.indexOf( '=' );\n\t\t\t\t\tif (p!=-1)\n\t\t\t\t\t\tdisposition.put( token.substring(0,p).trim().toLowerCase(Locale.ENGLISH), token.substring(p+1).trim());\n\t\t\t\t}\n\t\t\t\tString pname = disposition.getProperty(\"name\");\n\t\t\t\tpname = pname.substring(1,pname.length()-1);\n\n\t\t\t\tString value = \"\";\n\t\t\t\tif (item.getProperty(\"content-type\") == null) {\n\t\t\t\t\twhile (mpline != null && mpline.indexOf(boundary) == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t\tif ( mpline != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint d = mpline.indexOf(boundary);\n\t\t\t\t\t\t\tif (d == -1)\n\t\t\t\t\t\t\t\tvalue+=mpline;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tvalue+=mpline.substring(0,d-2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (boundarycount> bpositions.length)\n\t\t\t\t\t\tsendError(socket, HTTP_INTERNALERROR, \"Error processing request\" );\n\t\t\t\t\tint offset = stripMultipartHeaders(fbuf, bpositions[boundarycount-2]);\n\t\t\t\t\tString path = saveTmpFile(fbuf, offset, bpositions[boundarycount-1]-offset-4);\n\t\t\t\t\tfiles.put(pname, path);\n\t\t\t\t\tvalue = disposition.getProperty(\"filename\");\n\t\t\t\t\tvalue = value.substring(1,value.length()-1);\n\t\t\t\t\tdo {\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t} while (mpline != null && mpline.indexOf(boundary) == -1);\n\t\t\t\t}\n\t\t\t\tparms.put(pname, value);\n\t\t\t}\n\t\t}\n\t}\n\tcatch ( IOException ioe )\n\t{\n\t\tsendError(socket, HTTP_INTERNALERROR, \"SERVER INTERNAL ERROR: IOException: \" + ioe.getMessage());\n\t}\n\t\t}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Gets the hardware serial number of this device.\n * \n * @return serial number or Settings.Secure.ANDROID_ID if not available.\n */\n", "func_signal": "private static String getDeviceSerialNumber(Context context)", "code": "{\n\t// We're using the Reflection API because Build.SERIAL is only available\n\t// since API Level 9 (Gingerbread, Android 2.3).\n\ttry {\n\t\tString deviceSerial = (String) Build.class.getField(\"SERIAL\").get(\n\t\t\t\tnull);\n\t\tif (TextUtils.isEmpty(deviceSerial)) {\n\t\t\tdeviceSerial = Settings.Secure.getString(\n\t\t\t\t\tcontext.getContentResolver(),\n\t\t\t\t\tSettings.Secure.ANDROID_ID);\n\t\t}\n\t\treturn deviceSerial;\n\t} catch (Exception ignored) {\n\t\t// default to Android_ID\n\t\treturn Settings.Secure.getString(context.getContentResolver(),\n\t\t\t\tSettings.Secure.ANDROID_ID);\n\t}\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\util\\SecurePreferences.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Find the byte positions where multipart boundaries start.\n **/\n", "func_signal": "public int[] getBoundaryPositions(byte[] b, byte[] boundary)", "code": "{\n\tint matchcount = 0;\n\tint matchbyte = -1;\n\tVector<Integer> matchbytes = new Vector<Integer>();\n\tfor (int i=0; i<b.length; i++)\n\t{\n\t\tif (b[i] == boundary[matchcount])\n\t\t{\n\t\t\tif (matchcount == 0)\n\t\t\t\tmatchbyte = i;\n\t\t\tmatchcount++;\n\t\t\tif (matchcount==boundary.length)\n\t\t\t{\n\t\t\t\tmatchbytes.addElement(Integer.valueOf(matchbyte));\n\t\t\t\tmatchcount = 0;\n\t\t\t\tmatchbyte = -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti -= matchcount;\n\t\t\tmatchcount = 0;\n\t\t\tmatchbyte = -1;\n\t\t}\n\t}\n\tint[] ret = new int[matchbytes.size()];\n\tfor (int i=0; i < ret.length; i++)\n\t{\n\t\tret[i] = ((Integer)matchbytes.elementAt(i)).intValue();\n\t}\n\treturn ret;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Stops the server.\n */\n", "func_signal": "public void stop()", "code": "{\n\ttry\n\t{\n\t\tmyServerSocket.close();\n\t\tmyThread.join();\n\t}\n\tcatch ( IOException ioe ) {}\n\tcatch ( InterruptedException e ) {}\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\server\\StreamServer.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
{"docstring": "/**\n * Adds the best trailer to the movie record.\n *\n * Currently, 'best' is defined as the first trailer from YouTube.\n *\n * @param movie The movie for which to fetch a trailer.\n * @return The same movie with the trailer property set.\n */\n", "func_signal": "public Movie addBestTrailer(Movie movie)", "code": "{\n    Videos vids = getService().getVideos(movie.getId());\n    if (vids == null || vids.getResults() == null || vids.getResults().isEmpty()) {\n        return movie;\n    }\n\n    for (Videos.Video vid : vids.getResults()) {\n        if (vid.getType().equals(\"Trailer\") && vid.getSite().equals(\"YouTube\")) {\n            movie.setTrailer(String.format(\"http://youtube.com/watch?v=%s\", vid.getKey()));\n            break;\n        }\n    }\n\n    return movie;\n}", "path": "tv\\src\\main\\java\\com\\jerrellmardis\\amphitheatre\\api\\TMDbClient.java", "repo_name": "jerrellmardis/Amphitheatre", "stars": 433, "license": "apache-2.0", "language": "java", "size": 34884}
